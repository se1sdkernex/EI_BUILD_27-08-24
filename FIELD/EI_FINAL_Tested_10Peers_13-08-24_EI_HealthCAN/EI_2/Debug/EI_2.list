
EI_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023928  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000055c4  08023b28  08023b28  00033b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080290ec  080290ec  000402e4  2**0
                  CONTENTS
  4 .ARM          00000008  080290ec  080290ec  000390ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080290f4  080290f4  000402e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080290f4  080290f4  000390f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080290f8  080290f8  000390f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a4  20000000  080290fc  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001a4  080292a0  000401a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000244  08029340  00040244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00013fc8  200002e4  080293e0  000402e4  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200142ac  080293e0  000442ac  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000402e4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00037e11  00000000  00000000  00040312  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00008327  00000000  00000000  00078123  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002480  00000000  00000000  00080450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000021b0  00000000  00000000  000828d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00043076  00000000  00000000  00084a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00047092  00000000  00000000  000c7af6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0013c8a8  00000000  00000000  0010eb88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0024b430  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000a030  00000000  00000000  0024b480  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200002e4 	.word	0x200002e4
 800021c:	00000000 	.word	0x00000000
 8000220:	08023b10 	.word	0x08023b10

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200002e8 	.word	0x200002e8
 800023c:	08023b10 	.word	0x08023b10

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b974 	b.w	8000610 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468e      	mov	lr, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14d      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034e:	428a      	cmp	r2, r1
 8000350:	4694      	mov	ip, r2
 8000352:	d969      	bls.n	8000428 <__udivmoddi4+0xe8>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b152      	cbz	r2, 8000370 <__udivmoddi4+0x30>
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	f1c2 0120 	rsb	r1, r2, #32
 8000362:	fa20 f101 	lsr.w	r1, r0, r1
 8000366:	fa0c fc02 	lsl.w	ip, ip, r2
 800036a:	ea41 0e03 	orr.w	lr, r1, r3
 800036e:	4094      	lsls	r4, r2
 8000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000374:	0c21      	lsrs	r1, r4, #16
 8000376:	fbbe f6f8 	udiv	r6, lr, r8
 800037a:	fa1f f78c 	uxth.w	r7, ip
 800037e:	fb08 e316 	mls	r3, r8, r6, lr
 8000382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000386:	fb06 f107 	mul.w	r1, r6, r7
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f106 30ff 	add.w	r0, r6, #4294967295
 8000396:	f080 811f 	bcs.w	80005d8 <__udivmoddi4+0x298>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 811c 	bls.w	80005d8 <__udivmoddi4+0x298>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ac:	fb08 3310 	mls	r3, r8, r0, r3
 80003b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b4:	fb00 f707 	mul.w	r7, r0, r7
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x92>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x29c>
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x29c>
 80003ce:	4464      	add	r4, ip
 80003d0:	3802      	subs	r0, #2
 80003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d6:	1be4      	subs	r4, r4, r7
 80003d8:	2600      	movs	r6, #0
 80003da:	b11d      	cbz	r5, 80003e4 <__udivmoddi4+0xa4>
 80003dc:	40d4      	lsrs	r4, r2
 80003de:	2300      	movs	r3, #0
 80003e0:	e9c5 4300 	strd	r4, r3, [r5]
 80003e4:	4631      	mov	r1, r6
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0xc2>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80ef 	beq.w	80005d2 <__udivmoddi4+0x292>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x160>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xd4>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80f9 	bhi.w	8000606 <__udivmoddi4+0x2c6>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0303 	sbc.w	r3, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	469e      	mov	lr, r3
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e0      	beq.n	80003e4 <__udivmoddi4+0xa4>
 8000422:	e9c5 4e00 	strd	r4, lr, [r5]
 8000426:	e7dd      	b.n	80003e4 <__udivmoddi4+0xa4>
 8000428:	b902      	cbnz	r2, 800042c <__udivmoddi4+0xec>
 800042a:	deff      	udf	#255	; 0xff
 800042c:	fab2 f282 	clz	r2, r2
 8000430:	2a00      	cmp	r2, #0
 8000432:	f040 8092 	bne.w	800055a <__udivmoddi4+0x21a>
 8000436:	eba1 010c 	sub.w	r1, r1, ip
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	2601      	movs	r6, #1
 8000444:	0c20      	lsrs	r0, r4, #16
 8000446:	fbb1 f3f7 	udiv	r3, r1, r7
 800044a:	fb07 1113 	mls	r1, r7, r3, r1
 800044e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000452:	fb0e f003 	mul.w	r0, lr, r3
 8000456:	4288      	cmp	r0, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x12c>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x12a>
 8000464:	4288      	cmp	r0, r1
 8000466:	f200 80cb 	bhi.w	8000600 <__udivmoddi4+0x2c0>
 800046a:	4643      	mov	r3, r8
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1110 	mls	r1, r7, r0, r1
 8000478:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800047c:	fb0e fe00 	mul.w	lr, lr, r0
 8000480:	45a6      	cmp	lr, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x156>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f100 31ff 	add.w	r1, r0, #4294967295
 800048c:	d202      	bcs.n	8000494 <__udivmoddi4+0x154>
 800048e:	45a6      	cmp	lr, r4
 8000490:	f200 80bb 	bhi.w	800060a <__udivmoddi4+0x2ca>
 8000494:	4608      	mov	r0, r1
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x9a>
 80004a0:	f1c6 0720 	rsb	r7, r6, #32
 80004a4:	40b3      	lsls	r3, r6
 80004a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ae:	fa20 f407 	lsr.w	r4, r0, r7
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	431c      	orrs	r4, r3
 80004b8:	40f9      	lsrs	r1, r7
 80004ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004be:	fa00 f306 	lsl.w	r3, r0, r6
 80004c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c6:	0c20      	lsrs	r0, r4, #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fb09 1118 	mls	r1, r9, r8, r1
 80004d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d4:	fb08 f00e 	mul.w	r0, r8, lr
 80004d8:	4288      	cmp	r0, r1
 80004da:	fa02 f206 	lsl.w	r2, r2, r6
 80004de:	d90b      	bls.n	80004f8 <__udivmoddi4+0x1b8>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e8:	f080 8088 	bcs.w	80005fc <__udivmoddi4+0x2bc>
 80004ec:	4288      	cmp	r0, r1
 80004ee:	f240 8085 	bls.w	80005fc <__udivmoddi4+0x2bc>
 80004f2:	f1a8 0802 	sub.w	r8, r8, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1a09      	subs	r1, r1, r0
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000500:	fb09 1110 	mls	r1, r9, r0, r1
 8000504:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000508:	fb00 fe0e 	mul.w	lr, r0, lr
 800050c:	458e      	cmp	lr, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x1e2>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f100 34ff 	add.w	r4, r0, #4294967295
 8000518:	d26c      	bcs.n	80005f4 <__udivmoddi4+0x2b4>
 800051a:	458e      	cmp	lr, r1
 800051c:	d96a      	bls.n	80005f4 <__udivmoddi4+0x2b4>
 800051e:	3802      	subs	r0, #2
 8000520:	4461      	add	r1, ip
 8000522:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000526:	fba0 9402 	umull	r9, r4, r0, r2
 800052a:	eba1 010e 	sub.w	r1, r1, lr
 800052e:	42a1      	cmp	r1, r4
 8000530:	46c8      	mov	r8, r9
 8000532:	46a6      	mov	lr, r4
 8000534:	d356      	bcc.n	80005e4 <__udivmoddi4+0x2a4>
 8000536:	d053      	beq.n	80005e0 <__udivmoddi4+0x2a0>
 8000538:	b15d      	cbz	r5, 8000552 <__udivmoddi4+0x212>
 800053a:	ebb3 0208 	subs.w	r2, r3, r8
 800053e:	eb61 010e 	sbc.w	r1, r1, lr
 8000542:	fa01 f707 	lsl.w	r7, r1, r7
 8000546:	fa22 f306 	lsr.w	r3, r2, r6
 800054a:	40f1      	lsrs	r1, r6
 800054c:	431f      	orrs	r7, r3
 800054e:	e9c5 7100 	strd	r7, r1, [r5]
 8000552:	2600      	movs	r6, #0
 8000554:	4631      	mov	r1, r6
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	40d8      	lsrs	r0, r3
 8000560:	fa0c fc02 	lsl.w	ip, ip, r2
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
 8000568:	4091      	lsls	r1, r2
 800056a:	4301      	orrs	r1, r0
 800056c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000570:	fa1f fe8c 	uxth.w	lr, ip
 8000574:	fbb3 f0f7 	udiv	r0, r3, r7
 8000578:	fb07 3610 	mls	r6, r7, r0, r3
 800057c:	0c0b      	lsrs	r3, r1, #16
 800057e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000582:	fb00 f60e 	mul.w	r6, r0, lr
 8000586:	429e      	cmp	r6, r3
 8000588:	fa04 f402 	lsl.w	r4, r4, r2
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x260>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 38ff 	add.w	r8, r0, #4294967295
 8000596:	d22f      	bcs.n	80005f8 <__udivmoddi4+0x2b8>
 8000598:	429e      	cmp	r6, r3
 800059a:	d92d      	bls.n	80005f8 <__udivmoddi4+0x2b8>
 800059c:	3802      	subs	r0, #2
 800059e:	4463      	add	r3, ip
 80005a0:	1b9b      	subs	r3, r3, r6
 80005a2:	b289      	uxth	r1, r1
 80005a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b0:	fb06 f30e 	mul.w	r3, r6, lr
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x28a>
 80005b8:	eb1c 0101 	adds.w	r1, ip, r1
 80005bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005c0:	d216      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d914      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 80005c6:	3e02      	subs	r6, #2
 80005c8:	4461      	add	r1, ip
 80005ca:	1ac9      	subs	r1, r1, r3
 80005cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005d0:	e738      	b.n	8000444 <__udivmoddi4+0x104>
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e705      	b.n	80003e4 <__udivmoddi4+0xa4>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e3      	b.n	80003a4 <__udivmoddi4+0x64>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x92>
 80005e0:	454b      	cmp	r3, r9
 80005e2:	d2a9      	bcs.n	8000538 <__udivmoddi4+0x1f8>
 80005e4:	ebb9 0802 	subs.w	r8, r9, r2
 80005e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7a3      	b.n	8000538 <__udivmoddi4+0x1f8>
 80005f0:	4646      	mov	r6, r8
 80005f2:	e7ea      	b.n	80005ca <__udivmoddi4+0x28a>
 80005f4:	4620      	mov	r0, r4
 80005f6:	e794      	b.n	8000522 <__udivmoddi4+0x1e2>
 80005f8:	4640      	mov	r0, r8
 80005fa:	e7d1      	b.n	80005a0 <__udivmoddi4+0x260>
 80005fc:	46d0      	mov	r8, sl
 80005fe:	e77b      	b.n	80004f8 <__udivmoddi4+0x1b8>
 8000600:	3b02      	subs	r3, #2
 8000602:	4461      	add	r1, ip
 8000604:	e732      	b.n	800046c <__udivmoddi4+0x12c>
 8000606:	4630      	mov	r0, r6
 8000608:	e709      	b.n	800041e <__udivmoddi4+0xde>
 800060a:	4464      	add	r4, ip
 800060c:	3802      	subs	r0, #2
 800060e:	e742      	b.n	8000496 <__udivmoddi4+0x156>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <ExtractBits>:
******************************************************************************/

unsigned long ExtractBits(unsigned short int us_Start,
                            unsigned short int us_NoOfBits,
                            unsigned char *puc_Msg)
{
 8000614:	b480      	push	{r7}
 8000616:	b087      	sub	sp, #28
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	603a      	str	r2, [r7, #0]
 800061e:	80fb      	strh	r3, [r7, #6]
 8000620:	460b      	mov	r3, r1
 8000622:	80bb      	strh	r3, [r7, #4]
		0x1FFFFFFL,0x3FFFFFFL,0x7FFFFFFL,0xFFFFFFFL,
		0x1FFFFFFFL,0x3FFFFFFFL,0x7FFFFFFFL,0xFFFFFFFFL
    };                                  /* Used for Masking */

    /* compute the offset of the farthest bit */
	us_BitPos = us_Start + us_NoOfBits;
 8000624:	88fa      	ldrh	r2, [r7, #6]
 8000626:	88bb      	ldrh	r3, [r7, #4]
 8000628:	4413      	add	r3, r2
 800062a:	823b      	strh	r3, [r7, #16]

    if (us_BitPos <= EIGHT)
 800062c:	8a3b      	ldrh	r3, [r7, #16]
 800062e:	2b08      	cmp	r3, #8
 8000630:	d806      	bhi.n	8000640 <ExtractBits+0x2c>
    {
	    /* All bits are in the same byte */
	    us_Start = SEVEN - us_Start;
 8000632:	88fb      	ldrh	r3, [r7, #6]
 8000634:	f1c3 0307 	rsb	r3, r3, #7
 8000638:	80fb      	strh	r3, [r7, #6]
	    us_NBytes = ONE;
 800063a:	2301      	movs	r3, #1
 800063c:	827b      	strh	r3, [r7, #18]
 800063e:	e019      	b.n	8000674 <ExtractBits+0x60>
    }
    else if (us_BitPos <= SIXTEEN)
 8000640:	8a3b      	ldrh	r3, [r7, #16]
 8000642:	2b10      	cmp	r3, #16
 8000644:	d806      	bhi.n	8000654 <ExtractBits+0x40>
    {
	    /* Bits straddle 2 bytes */
	    us_Start = FIFTEEN - us_Start;
 8000646:	88fb      	ldrh	r3, [r7, #6]
 8000648:	f1c3 030f 	rsb	r3, r3, #15
 800064c:	80fb      	strh	r3, [r7, #6]
	    us_NBytes = TWO;
 800064e:	2302      	movs	r3, #2
 8000650:	827b      	strh	r3, [r7, #18]
 8000652:	e00f      	b.n	8000674 <ExtractBits+0x60>
    }
		 else if (us_BitPos <= TWENTY_FOUR)
 8000654:	8a3b      	ldrh	r3, [r7, #16]
 8000656:	2b18      	cmp	r3, #24
 8000658:	d806      	bhi.n	8000668 <ExtractBits+0x54>
    {
	    /* Bits straddle 2 bytes */
	    us_Start = TWENTY_THREE - us_Start;
 800065a:	88fb      	ldrh	r3, [r7, #6]
 800065c:	f1c3 0317 	rsb	r3, r3, #23
 8000660:	80fb      	strh	r3, [r7, #6]
	    us_NBytes = THREE;
 8000662:	2303      	movs	r3, #3
 8000664:	827b      	strh	r3, [r7, #18]
 8000666:	e005      	b.n	8000674 <ExtractBits+0x60>
    }
    else
    {
	    /* Bits straddle 3 bytes */
	    us_Start = THIRTY_ONE - us_Start;
 8000668:	88fb      	ldrh	r3, [r7, #6]
 800066a:	f1c3 031f 	rsb	r3, r3, #31
 800066e:	80fb      	strh	r3, [r7, #6]
	    us_NBytes = FOUR;
 8000670:	2304      	movs	r3, #4
 8000672:	827b      	strh	r3, [r7, #18]
    }
    ul_DataBits = ZERO;
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]

    /* Read required no. of bytes */
    switch (us_NBytes)
 8000678:	8a7b      	ldrh	r3, [r7, #18]
 800067a:	3b01      	subs	r3, #1
 800067c:	2b03      	cmp	r3, #3
 800067e:	d834      	bhi.n	80006ea <ExtractBits+0xd6>
 8000680:	a201      	add	r2, pc, #4	; (adr r2, 8000688 <ExtractBits+0x74>)
 8000682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000686:	bf00      	nop
 8000688:	080006d5 	.word	0x080006d5
 800068c:	080006bf 	.word	0x080006bf
 8000690:	080006a9 	.word	0x080006a9
 8000694:	08000699 	.word	0x08000699
    {
	    case FOUR:
	        ul_DataBits |= *puc_Msg++;	/* caution: Fall through */
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	1c5a      	adds	r2, r3, #1
 800069c:	603a      	str	r2, [r7, #0]
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	461a      	mov	r2, r3
 80006a2:	697b      	ldr	r3, [r7, #20]
 80006a4:	4313      	orrs	r3, r2
 80006a6:	617b      	str	r3, [r7, #20]
	    case THREE:
	        ul_DataBits <<= EIGHT;
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	021b      	lsls	r3, r3, #8
 80006ac:	617b      	str	r3, [r7, #20]
	        ul_DataBits |= *puc_Msg++;
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	1c5a      	adds	r2, r3, #1
 80006b2:	603a      	str	r2, [r7, #0]
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	461a      	mov	r2, r3
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	4313      	orrs	r3, r2
 80006bc:	617b      	str	r3, [r7, #20]
	    case TWO:
	        ul_DataBits <<= EIGHT;
 80006be:	697b      	ldr	r3, [r7, #20]
 80006c0:	021b      	lsls	r3, r3, #8
 80006c2:	617b      	str	r3, [r7, #20]
	        ul_DataBits |= *puc_Msg++;
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	1c5a      	adds	r2, r3, #1
 80006c8:	603a      	str	r2, [r7, #0]
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	461a      	mov	r2, r3
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	4313      	orrs	r3, r2
 80006d2:	617b      	str	r3, [r7, #20]
	    case ONE:
	        ul_DataBits <<= EIGHT;
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	021b      	lsls	r3, r3, #8
 80006d8:	617b      	str	r3, [r7, #20]
	        ul_DataBits |= *puc_Msg++;
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	1c5a      	adds	r2, r3, #1
 80006de:	603a      	str	r2, [r7, #0]
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	461a      	mov	r2, r3
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	4313      	orrs	r3, r2
 80006e8:	617b      	str	r3, [r7, #20]
    }

    /* Compute number of bit position to shift */
    us_ShiftCount = us_Start - us_NoOfBits + ONE;
 80006ea:	88fa      	ldrh	r2, [r7, #6]
 80006ec:	88bb      	ldrh	r3, [r7, #4]
 80006ee:	1ad3      	subs	r3, r2, r3
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	3301      	adds	r3, #1
 80006f4:	81fb      	strh	r3, [r7, #14]

    /* Get bit mask which contains the 'us_NoOfBits' set to 1 */
    ul_BitMask = sul_AdMask[us_NoOfBits];
 80006f6:	88bb      	ldrh	r3, [r7, #4]
 80006f8:	4a0b      	ldr	r2, [pc, #44]	; (8000728 <ExtractBits+0x114>)
 80006fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006fe:	60bb      	str	r3, [r7, #8]

    /* Shift the mask to required position and extract the bits */
    ul_DataBits = ((ul_BitMask << (us_ShiftCount)) & ul_DataBits);
 8000700:	89fb      	ldrh	r3, [r7, #14]
 8000702:	68ba      	ldr	r2, [r7, #8]
 8000704:	fa02 f303 	lsl.w	r3, r2, r3
 8000708:	697a      	ldr	r2, [r7, #20]
 800070a:	4013      	ands	r3, r2
 800070c:	617b      	str	r3, [r7, #20]

    /* Right adjust the extracted bits */
    ul_DataBits = (ul_DataBits >> (us_ShiftCount));
 800070e:	89fb      	ldrh	r3, [r7, #14]
 8000710:	697a      	ldr	r2, [r7, #20]
 8000712:	fa22 f303 	lsr.w	r3, r2, r3
 8000716:	617b      	str	r3, [r7, #20]

    return(ul_DataBits);
 8000718:	697b      	ldr	r3, [r7, #20]
}	/* End of CommExtractBits */
 800071a:	4618      	mov	r0, r3
 800071c:	371c      	adds	r7, #28
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	20000000 	.word	0x20000000

0800072c <InsertBits>:

unsigned long InsertBits(unsigned short int us_Start,
                        unsigned short int us_NoOfBits,
                        unsigned char *puc_Msg,
                        unsigned long ul_DataIn)
{
 800072c:	b480      	push	{r7}
 800072e:	b08b      	sub	sp, #44	; 0x2c
 8000730:	af00      	add	r7, sp, #0
 8000732:	60ba      	str	r2, [r7, #8]
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	4603      	mov	r3, r0
 8000738:	81fb      	strh	r3, [r7, #14]
 800073a:	460b      	mov	r3, r1
 800073c:	81bb      	strh	r3, [r7, #12]
	    0x1FFFFFFL,0x3FFFFFFL,0x7FFFFFFL,0xFFFFFFFL,
	    0x1FFFFFFFL,0x3FFFFFFFL,0x7FFFFFFFL,0xFFFFFFFFL
    };                                   /* Used for Masking */

    /* Save current byte pointer */
	puc_Bit = puc_Msg;
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	61fb      	str	r3, [r7, #28]

    /* compute the offset of the farthest bit */
    us_BitPos = us_Start + us_NoOfBits;
 8000742:	89fa      	ldrh	r2, [r7, #14]
 8000744:	89bb      	ldrh	r3, [r7, #12]
 8000746:	4413      	add	r3, r2
 8000748:	837b      	strh	r3, [r7, #26]

    if (us_BitPos <= EIGHT)
 800074a:	8b7b      	ldrh	r3, [r7, #26]
 800074c:	2b08      	cmp	r3, #8
 800074e:	d806      	bhi.n	800075e <InsertBits+0x32>
    {
	    /* All bits are in the same byte */
	    us_Start = SEVEN - us_Start;
 8000750:	89fb      	ldrh	r3, [r7, #14]
 8000752:	f1c3 0307 	rsb	r3, r3, #7
 8000756:	81fb      	strh	r3, [r7, #14]
	    us_NBytes = ONE;
 8000758:	2301      	movs	r3, #1
 800075a:	847b      	strh	r3, [r7, #34]	; 0x22
 800075c:	e019      	b.n	8000792 <InsertBits+0x66>
    }
    else if (us_BitPos <= SIXTEEN)
 800075e:	8b7b      	ldrh	r3, [r7, #26]
 8000760:	2b10      	cmp	r3, #16
 8000762:	d806      	bhi.n	8000772 <InsertBits+0x46>
    {
	    /* Bits straddle 2 bytes */
	    us_Start = FIFTEEN - us_Start;
 8000764:	89fb      	ldrh	r3, [r7, #14]
 8000766:	f1c3 030f 	rsb	r3, r3, #15
 800076a:	81fb      	strh	r3, [r7, #14]
	    us_NBytes = TWO;
 800076c:	2302      	movs	r3, #2
 800076e:	847b      	strh	r3, [r7, #34]	; 0x22
 8000770:	e00f      	b.n	8000792 <InsertBits+0x66>
    }
		else if (us_BitPos <= TWENTY_FOUR)
 8000772:	8b7b      	ldrh	r3, [r7, #26]
 8000774:	2b18      	cmp	r3, #24
 8000776:	d806      	bhi.n	8000786 <InsertBits+0x5a>
		{
			us_Start = TWENTY_THREE - us_Start;
 8000778:	89fb      	ldrh	r3, [r7, #14]
 800077a:	f1c3 0317 	rsb	r3, r3, #23
 800077e:	81fb      	strh	r3, [r7, #14]
	    us_NBytes = THREE;
 8000780:	2303      	movs	r3, #3
 8000782:	847b      	strh	r3, [r7, #34]	; 0x22
 8000784:	e005      	b.n	8000792 <InsertBits+0x66>
		}
    else
    {
	    /* Bits straddle 4 bytes */
	    us_Start = THIRTY_ONE - us_Start;
 8000786:	89fb      	ldrh	r3, [r7, #14]
 8000788:	f1c3 031f 	rsb	r3, r3, #31
 800078c:	81fb      	strh	r3, [r7, #14]
	    us_NBytes = FOUR;
 800078e:	2304      	movs	r3, #4
 8000790:	847b      	strh	r3, [r7, #34]	; 0x22
    }

    ul_DataBits = ZERO;
 8000792:	2300      	movs	r3, #0
 8000794:	627b      	str	r3, [r7, #36]	; 0x24

    /* Read current data */
    switch (us_NBytes)
 8000796:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000798:	3b01      	subs	r3, #1
 800079a:	2b03      	cmp	r3, #3
 800079c:	d831      	bhi.n	8000802 <InsertBits+0xd6>
 800079e:	a201      	add	r2, pc, #4	; (adr r2, 80007a4 <InsertBits+0x78>)
 80007a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007a4:	080007f1 	.word	0x080007f1
 80007a8:	080007db 	.word	0x080007db
 80007ac:	080007c5 	.word	0x080007c5
 80007b0:	080007b5 	.word	0x080007b5
    {
	    case FOUR:
	        ul_DataBits |= *puc_Msg++;	 /* Caution: Fall through */
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	1c5a      	adds	r2, r3, #1
 80007b8:	60ba      	str	r2, [r7, #8]
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	461a      	mov	r2, r3
 80007be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c0:	4313      	orrs	r3, r2
 80007c2:	627b      	str	r3, [r7, #36]	; 0x24
	    case THREE:
	        ul_DataBits <<= EIGHT;
 80007c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c6:	021b      	lsls	r3, r3, #8
 80007c8:	627b      	str	r3, [r7, #36]	; 0x24
	        ul_DataBits |= *puc_Msg++;
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	1c5a      	adds	r2, r3, #1
 80007ce:	60ba      	str	r2, [r7, #8]
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	461a      	mov	r2, r3
 80007d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007d6:	4313      	orrs	r3, r2
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
	    case TWO:
	        ul_DataBits <<= EIGHT;
 80007da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007dc:	021b      	lsls	r3, r3, #8
 80007de:	627b      	str	r3, [r7, #36]	; 0x24
	        ul_DataBits |= *puc_Msg++;
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	1c5a      	adds	r2, r3, #1
 80007e4:	60ba      	str	r2, [r7, #8]
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	461a      	mov	r2, r3
 80007ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ec:	4313      	orrs	r3, r2
 80007ee:	627b      	str	r3, [r7, #36]	; 0x24
	    case ONE:
	        ul_DataBits <<= EIGHT;
 80007f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f2:	021b      	lsls	r3, r3, #8
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
	        ul_DataBits |= *puc_Msg;
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	461a      	mov	r2, r3
 80007fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007fe:	4313      	orrs	r3, r2
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
			default:
				   ;
    }

    /* Compute number of bit position to shift */
    us_ShiftCount = us_Start - us_NoOfBits + ONE;
 8000802:	89fa      	ldrh	r2, [r7, #14]
 8000804:	89bb      	ldrh	r3, [r7, #12]
 8000806:	1ad3      	subs	r3, r2, r3
 8000808:	b29b      	uxth	r3, r3
 800080a:	3301      	adds	r3, #1
 800080c:	833b      	strh	r3, [r7, #24]

    /* get bit mask which contains the 'us_NoOfBits' set to 1 */
    ul_BitMask = sul_AdMask[us_NoOfBits];
 800080e:	89bb      	ldrh	r3, [r7, #12]
 8000810:	4a23      	ldr	r2, [pc, #140]	; (80008a0 <InsertBits+0x174>)
 8000812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000816:	617b      	str	r3, [r7, #20]

    /* Mask the unwanted bits */
    ul_DataIn &= ul_BitMask;
 8000818:	687a      	ldr	r2, [r7, #4]
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	4013      	ands	r3, r2
 800081e:	607b      	str	r3, [r7, #4]

    /* Shift the data bits to required position */
    ul_DataIn <<= us_ShiftCount;
 8000820:	8b3b      	ldrh	r3, [r7, #24]
 8000822:	687a      	ldr	r2, [r7, #4]
 8000824:	fa02 f303 	lsl.w	r3, r2, r3
 8000828:	607b      	str	r3, [r7, #4]

    /* Reset the existing bits to 0 as per the mask */
    ul_DataBits &= ~(ul_BitMask << us_ShiftCount);
 800082a:	8b3b      	ldrh	r3, [r7, #24]
 800082c:	697a      	ldr	r2, [r7, #20]
 800082e:	fa02 f303 	lsl.w	r3, r2, r3
 8000832:	43db      	mvns	r3, r3
 8000834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000836:	4013      	ands	r3, r2
 8000838:	627b      	str	r3, [r7, #36]	; 0x24

    /* Copy the bits */
    ul_DataBits |= ul_DataIn;
 800083a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	4313      	orrs	r3, r2
 8000840:	627b      	str	r3, [r7, #36]	; 0x24

    /* Update bytes */
    switch (us_NBytes)
 8000842:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000844:	3b01      	subs	r3, #1
 8000846:	2b03      	cmp	r3, #3
 8000848:	d823      	bhi.n	8000892 <InsertBits+0x166>
 800084a:	a201      	add	r2, pc, #4	; (adr r2, 8000850 <InsertBits+0x124>)
 800084c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000850:	0800088b 	.word	0x0800088b
 8000854:	0800087d 	.word	0x0800087d
 8000858:	0800086f 	.word	0x0800086f
 800085c:	08000861 	.word	0x08000861
    {
	    case FOUR:
	        *puc_Bit++ = (char)(ul_DataBits >> TWENTY_FOUR);	/* caution: Fall through */
 8000860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000862:	0e19      	lsrs	r1, r3, #24
 8000864:	69fb      	ldr	r3, [r7, #28]
 8000866:	1c5a      	adds	r2, r3, #1
 8000868:	61fa      	str	r2, [r7, #28]
 800086a:	b2ca      	uxtb	r2, r1
 800086c:	701a      	strb	r2, [r3, #0]
	    case THREE:
	        *puc_Bit++ = (char)(ul_DataBits >> SIXTEEN);
 800086e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000870:	0c19      	lsrs	r1, r3, #16
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	1c5a      	adds	r2, r3, #1
 8000876:	61fa      	str	r2, [r7, #28]
 8000878:	b2ca      	uxtb	r2, r1
 800087a:	701a      	strb	r2, [r3, #0]
	    case TWO:
	        *puc_Bit++ = (char)(ul_DataBits >> EIGHT);
 800087c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800087e:	0a19      	lsrs	r1, r3, #8
 8000880:	69fb      	ldr	r3, [r7, #28]
 8000882:	1c5a      	adds	r2, r3, #1
 8000884:	61fa      	str	r2, [r7, #28]
 8000886:	b2ca      	uxtb	r2, r1
 8000888:	701a      	strb	r2, [r3, #0]
	    case ONE:
	        *puc_Bit = (char)(ul_DataBits);
 800088a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800088c:	b2da      	uxtb	r2, r3
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	701a      	strb	r2, [r3, #0]
			default:
				   ;
    }

    return ul_DataBits;
 8000892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}	/* End of CommInsertBits */
 8000894:	4618      	mov	r0, r3
 8000896:	372c      	adds	r7, #44	; 0x2c
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr
 80008a0:	20000084 	.word	0x20000084

080008a4 <Update_HitachiCommands>:
uint16_t EI_HealthStatus = 0;
EI_HEALTH_2_MIE_t Ei_health_2_mie_st;


void Update_HitachiCommands(void)
{
 80008a4:	b4b0      	push	{r4, r5, r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
	uint8_t CmdCnt = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	71fb      	strb	r3, [r7, #7]

	Commands_List[CmdCnt][0] = 0X24;
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	4a6e      	ldr	r2, [pc, #440]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008b2:	2132      	movs	r1, #50	; 0x32
 80008b4:	fb01 f303 	mul.w	r3, r1, r3
 80008b8:	4413      	add	r3, r2
 80008ba:	2224      	movs	r2, #36	; 0x24
 80008bc:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][1] = 0X01;
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	4a6a      	ldr	r2, [pc, #424]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008c2:	2132      	movs	r1, #50	; 0x32
 80008c4:	fb01 f303 	mul.w	r3, r1, r3
 80008c8:	4413      	add	r3, r2
 80008ca:	3301      	adds	r3, #1
 80008cc:	2201      	movs	r2, #1
 80008ce:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][2] = 0X30;
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	4a66      	ldr	r2, [pc, #408]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008d4:	2132      	movs	r1, #50	; 0x32
 80008d6:	fb01 f303 	mul.w	r3, r1, r3
 80008da:	4413      	add	r3, r2
 80008dc:	3302      	adds	r3, #2
 80008de:	2230      	movs	r2, #48	; 0x30
 80008e0:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][3] = 0X40;
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	4a61      	ldr	r2, [pc, #388]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008e6:	2132      	movs	r1, #50	; 0x32
 80008e8:	fb01 f303 	mul.w	r3, r1, r3
 80008ec:	4413      	add	r3, r2
 80008ee:	3303      	adds	r3, #3
 80008f0:	2240      	movs	r2, #64	; 0x40
 80008f2:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][4] = 0XC0;
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	4a5d      	ldr	r2, [pc, #372]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008f8:	2132      	movs	r1, #50	; 0x32
 80008fa:	fb01 f303 	mul.w	r3, r1, r3
 80008fe:	4413      	add	r3, r2
 8000900:	3304      	adds	r3, #4
 8000902:	22c0      	movs	r2, #192	; 0xc0
 8000904:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][5] = 0X4E;
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	4a58      	ldr	r2, [pc, #352]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 800090a:	2132      	movs	r1, #50	; 0x32
 800090c:	fb01 f303 	mul.w	r3, r1, r3
 8000910:	4413      	add	r3, r2
 8000912:	3305      	adds	r3, #5
 8000914:	224e      	movs	r2, #78	; 0x4e
 8000916:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][6] = 0X26;
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	4a54      	ldr	r2, [pc, #336]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 800091c:	2132      	movs	r1, #50	; 0x32
 800091e:	fb01 f303 	mul.w	r3, r1, r3
 8000922:	4413      	add	r3, r2
 8000924:	3306      	adds	r3, #6
 8000926:	2226      	movs	r2, #38	; 0x26
 8000928:	701a      	strb	r2, [r3, #0]
	++CmdCnt;
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	3301      	adds	r3, #1
 800092e:	71fb      	strb	r3, [r7, #7]




	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"DEBUG_MODE");
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	1c5a      	adds	r2, r3, #1
 8000934:	71fa      	strb	r2, [r7, #7]
 8000936:	461a      	mov	r2, r3
 8000938:	2332      	movs	r3, #50	; 0x32
 800093a:	fb02 f303 	mul.w	r3, r2, r3
 800093e:	4a4b      	ldr	r2, [pc, #300]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000940:	4413      	add	r3, r2
 8000942:	494b      	ldr	r1, [pc, #300]	; (8000a70 <Update_HitachiCommands+0x1cc>)
 8000944:	461a      	mov	r2, r3
 8000946:	460b      	mov	r3, r1
 8000948:	cb03      	ldmia	r3!, {r0, r1}
 800094a:	6010      	str	r0, [r2, #0]
 800094c:	6051      	str	r1, [r2, #4]
 800094e:	8819      	ldrh	r1, [r3, #0]
 8000950:	789b      	ldrb	r3, [r3, #2]
 8000952:	8111      	strh	r1, [r2, #8]
 8000954:	7293      	strb	r3, [r2, #10]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_ADDRESS");
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	1c5a      	adds	r2, r3, #1
 800095a:	71fa      	strb	r2, [r7, #7]
 800095c:	461a      	mov	r2, r3
 800095e:	2332      	movs	r3, #50	; 0x32
 8000960:	fb02 f303 	mul.w	r3, r2, r3
 8000964:	4a41      	ldr	r2, [pc, #260]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000966:	4413      	add	r3, r2
 8000968:	4a42      	ldr	r2, [pc, #264]	; (8000a74 <Update_HitachiCommands+0x1d0>)
 800096a:	461c      	mov	r4, r3
 800096c:	4615      	mov	r5, r2
 800096e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000970:	6020      	str	r0, [r4, #0]
 8000972:	6061      	str	r1, [r4, #4]
 8000974:	60a2      	str	r2, [r4, #8]
 8000976:	60e3      	str	r3, [r4, #12]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_BOOLEAN");
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	1c5a      	adds	r2, r3, #1
 800097c:	71fa      	strb	r2, [r7, #7]
 800097e:	461a      	mov	r2, r3
 8000980:	2332      	movs	r3, #50	; 0x32
 8000982:	fb02 f303 	mul.w	r3, r2, r3
 8000986:	4a39      	ldr	r2, [pc, #228]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000988:	4413      	add	r3, r2
 800098a:	4a3b      	ldr	r2, [pc, #236]	; (8000a78 <Update_HitachiCommands+0x1d4>)
 800098c:	461c      	mov	r4, r3
 800098e:	4615      	mov	r5, r2
 8000990:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000992:	6020      	str	r0, [r4, #0]
 8000994:	6061      	str	r1, [r4, #4]
 8000996:	60a2      	str	r2, [r4, #8]
 8000998:	60e3      	str	r3, [r4, #12]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"STALE_DATA_TIMEOUT");
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	1c5a      	adds	r2, r3, #1
 800099e:	71fa      	strb	r2, [r7, #7]
 80009a0:	461a      	mov	r2, r3
 80009a2:	2332      	movs	r3, #50	; 0x32
 80009a4:	fb02 f303 	mul.w	r3, r2, r3
 80009a8:	4a30      	ldr	r2, [pc, #192]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80009aa:	4413      	add	r3, r2
 80009ac:	4a33      	ldr	r2, [pc, #204]	; (8000a7c <Update_HitachiCommands+0x1d8>)
 80009ae:	461d      	mov	r5, r3
 80009b0:	4614      	mov	r4, r2
 80009b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009b4:	6028      	str	r0, [r5, #0]
 80009b6:	6069      	str	r1, [r5, #4]
 80009b8:	60aa      	str	r2, [r5, #8]
 80009ba:	60eb      	str	r3, [r5, #12]
 80009bc:	8823      	ldrh	r3, [r4, #0]
 80009be:	78a2      	ldrb	r2, [r4, #2]
 80009c0:	822b      	strh	r3, [r5, #16]
 80009c2:	4613      	mov	r3, r2
 80009c4:	74ab      	strb	r3, [r5, #18]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"RX_VITAL_INIT_FAIL");
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	1c5a      	adds	r2, r3, #1
 80009ca:	71fa      	strb	r2, [r7, #7]
 80009cc:	461a      	mov	r2, r3
 80009ce:	2332      	movs	r3, #50	; 0x32
 80009d0:	fb02 f303 	mul.w	r3, r2, r3
 80009d4:	4a25      	ldr	r2, [pc, #148]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80009d6:	4413      	add	r3, r2
 80009d8:	4a29      	ldr	r2, [pc, #164]	; (8000a80 <Update_HitachiCommands+0x1dc>)
 80009da:	461d      	mov	r5, r3
 80009dc:	4614      	mov	r4, r2
 80009de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009e0:	6028      	str	r0, [r5, #0]
 80009e2:	6069      	str	r1, [r5, #4]
 80009e4:	60aa      	str	r2, [r5, #8]
 80009e6:	60eb      	str	r3, [r5, #12]
 80009e8:	8823      	ldrh	r3, [r4, #0]
 80009ea:	78a2      	ldrb	r2, [r4, #2]
 80009ec:	822b      	strh	r3, [r5, #16]
 80009ee:	4613      	mov	r3, r2
 80009f0:	74ab      	strb	r3, [r5, #18]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"TX_VITAL_INIT_FAIL");
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	1c5a      	adds	r2, r3, #1
 80009f6:	71fa      	strb	r2, [r7, #7]
 80009f8:	461a      	mov	r2, r3
 80009fa:	2332      	movs	r3, #50	; 0x32
 80009fc:	fb02 f303 	mul.w	r3, r2, r3
 8000a00:	4a1a      	ldr	r2, [pc, #104]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000a02:	4413      	add	r3, r2
 8000a04:	4a1f      	ldr	r2, [pc, #124]	; (8000a84 <Update_HitachiCommands+0x1e0>)
 8000a06:	461d      	mov	r5, r3
 8000a08:	4614      	mov	r4, r2
 8000a0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a0c:	6028      	str	r0, [r5, #0]
 8000a0e:	6069      	str	r1, [r5, #4]
 8000a10:	60aa      	str	r2, [r5, #8]
 8000a12:	60eb      	str	r3, [r5, #12]
 8000a14:	8823      	ldrh	r3, [r4, #0]
 8000a16:	78a2      	ldrb	r2, [r4, #2]
 8000a18:	822b      	strh	r3, [r5, #16]
 8000a1a:	4613      	mov	r3, r2
 8000a1c:	74ab      	strb	r3, [r5, #18]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"CLEAR_ALL");
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	1c5a      	adds	r2, r3, #1
 8000a22:	71fa      	strb	r2, [r7, #7]
 8000a24:	461a      	mov	r2, r3
 8000a26:	2332      	movs	r3, #50	; 0x32
 8000a28:	fb02 f303 	mul.w	r3, r2, r3
 8000a2c:	4a0f      	ldr	r2, [pc, #60]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000a2e:	4413      	add	r3, r2
 8000a30:	4915      	ldr	r1, [pc, #84]	; (8000a88 <Update_HitachiCommands+0x1e4>)
 8000a32:	461a      	mov	r2, r3
 8000a34:	460b      	mov	r3, r1
 8000a36:	cb03      	ldmia	r3!, {r0, r1}
 8000a38:	6010      	str	r0, [r2, #0]
 8000a3a:	6051      	str	r1, [r2, #4]
 8000a3c:	881b      	ldrh	r3, [r3, #0]
 8000a3e:	8113      	strh	r3, [r2, #8]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"HELP");
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	1c5a      	adds	r2, r3, #1
 8000a44:	71fa      	strb	r2, [r7, #7]
 8000a46:	461a      	mov	r2, r3
 8000a48:	2332      	movs	r3, #50	; 0x32
 8000a4a:	fb02 f303 	mul.w	r3, r2, r3
 8000a4e:	4a07      	ldr	r2, [pc, #28]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000a50:	4413      	add	r3, r2
 8000a52:	4a0e      	ldr	r2, [pc, #56]	; (8000a8c <Update_HitachiCommands+0x1e8>)
 8000a54:	6810      	ldr	r0, [r2, #0]
 8000a56:	6018      	str	r0, [r3, #0]
 8000a58:	7912      	ldrb	r2, [r2, #4]
 8000a5a:	711a      	strb	r2, [r3, #4]
	Commands_Count =  CmdCnt;
 8000a5c:	4a0c      	ldr	r2, [pc, #48]	; (8000a90 <Update_HitachiCommands+0x1ec>)
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	7013      	strb	r3, [r2, #0]
}
 8000a62:	bf00      	nop
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bcb0      	pop	{r4, r5, r7}
 8000a6a:	4770      	bx	lr
 8000a6c:	20000a50 	.word	0x20000a50
 8000a70:	08023b28 	.word	0x08023b28
 8000a74:	08023b34 	.word	0x08023b34
 8000a78:	08023b44 	.word	0x08023b44
 8000a7c:	08023b54 	.word	0x08023b54
 8000a80:	08023b68 	.word	0x08023b68
 8000a84:	08023b7c 	.word	0x08023b7c
 8000a88:	08023b90 	.word	0x08023b90
 8000a8c:	08023b9c 	.word	0x08023b9c
 8000a90:	20000e38 	.word	0x20000e38

08000a94 <__io_putchar>:




PUTCHAR_PROTOTYPE
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 0xFFFF);
 8000a9c:	1d39      	adds	r1, r7, #4
 8000a9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	4807      	ldr	r0, [pc, #28]	; (8000ac4 <__io_putchar+0x30>)
 8000aa6:	f01a fb3b 	bl	801b120 <HAL_UART_Transmit>
	//HAL_UART_Transmit(&DLL_COM, (uint8_t*) &ch, 1, 0xFFFF);
	setvbuf(stdout, NULL, _IONBF, 0); //For printing even without Newline
 8000aaa:	4b07      	ldr	r3, [pc, #28]	; (8000ac8 <__io_putchar+0x34>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	6898      	ldr	r0, [r3, #8]
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	2202      	movs	r2, #2
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	f021 fe67 	bl	8022788 <setvbuf>
	return ch;
 8000aba:	687b      	ldr	r3, [r7, #4]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	2000bc4c 	.word	0x2000bc4c
 8000ac8:	20000140 	.word	0x20000140

08000acc <Get_Slot>:



void Get_Slot(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
	uint8_t Local_SlotID = 0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	71fb      	strb	r3, [r7, #7]
	uint8_t *ptr = (uint8_t *)&Slot;
 8000ad6:	4b1d      	ldr	r3, [pc, #116]	; (8000b4c <Get_Slot+0x80>)
 8000ad8:	603b      	str	r3, [r7, #0]
	Local_SlotID |= (!HAL_GPIO_ReadPin(IP3_GPIO_Port, IP3_Pin)) << 0;
 8000ada:	2108      	movs	r1, #8
 8000adc:	481c      	ldr	r0, [pc, #112]	; (8000b50 <Get_Slot+0x84>)
 8000ade:	f017 fa0f 	bl	8017f00 <HAL_GPIO_ReadPin>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	bf0c      	ite	eq
 8000ae8:	2301      	moveq	r3, #1
 8000aea:	2300      	movne	r3, #0
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	b25a      	sxtb	r2, r3
 8000af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	b25b      	sxtb	r3, r3
 8000af8:	71fb      	strb	r3, [r7, #7]
	Local_SlotID |= (!HAL_GPIO_ReadPin(IP4_GPIO_Port, IP4_Pin)) << 1;
 8000afa:	2110      	movs	r1, #16
 8000afc:	4814      	ldr	r0, [pc, #80]	; (8000b50 <Get_Slot+0x84>)
 8000afe:	f017 f9ff 	bl	8017f00 <HAL_GPIO_ReadPin>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d101      	bne.n	8000b0c <Get_Slot+0x40>
 8000b08:	2302      	movs	r3, #2
 8000b0a:	e000      	b.n	8000b0e <Get_Slot+0x42>
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	b25a      	sxtb	r2, r3
 8000b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	b25b      	sxtb	r3, r3
 8000b18:	71fb      	strb	r3, [r7, #7]
	Local_SlotID |= (!HAL_GPIO_ReadPin(IP5_GPIO_Port, IP5_Pin)) << 2;
 8000b1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b1e:	480d      	ldr	r0, [pc, #52]	; (8000b54 <Get_Slot+0x88>)
 8000b20:	f017 f9ee 	bl	8017f00 <HAL_GPIO_ReadPin>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d101      	bne.n	8000b2e <Get_Slot+0x62>
 8000b2a:	2304      	movs	r3, #4
 8000b2c:	e000      	b.n	8000b30 <Get_Slot+0x64>
 8000b2e:	2300      	movs	r3, #0
 8000b30:	b25a      	sxtb	r2, r3
 8000b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b36:	4313      	orrs	r3, r2
 8000b38:	b25b      	sxtb	r3, r3
 8000b3a:	71fb      	strb	r3, [r7, #7]

	*ptr = Local_SlotID;
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	79fa      	ldrb	r2, [r7, #7]
 8000b40:	701a      	strb	r2, [r3, #0]

}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000a48 	.word	0x20000a48
 8000b50:	40022800 	.word	0x40022800
 8000b54:	40022000 	.word	0x40022000

08000b58 <Check_for_cmd>:




void Check_for_cmd(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b09a      	sub	sp, #104	; 0x68
 8000b5c:	af00      	add	r7, sp, #0
	//	unsigned char ch[20] = {0,},i=0;
	uint8_t IS_COMMAND_RECEIVED = NO;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t Index = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t Byte = 0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	uint8_t Buffer[100] = {0,};
 8000b70:	2300      	movs	r3, #0
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	1d3b      	adds	r3, r7, #4
 8000b76:	2260      	movs	r2, #96	; 0x60
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f021 fc2a 	bl	80223d4 <memset>
	if(HAL_Elaps_Ticks(Isp_Intr_Clk) < 10)
 8000b80:	4bc0      	ldr	r3, [pc, #768]	; (8000e84 <Check_for_cmd+0x32c>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f00d ff51 	bl	800ea2c <HAL_Elaps_Ticks>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b09      	cmp	r3, #9
 8000b8e:	f240 8175 	bls.w	8000e7c <Check_for_cmd+0x324>
	{
		return;
	}
	else
	{
		while(Com_DataReady(ISP_PORT))
 8000b92:	e010      	b.n	8000bb6 <Check_for_cmd+0x5e>
		{
			Byte = Com_Get_Byte(ISP_PORT);
 8000b94:	2000      	movs	r0, #0
 8000b96:	f014 f9d3 	bl	8014f40 <Com_Get_Byte>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			Buffer[Index++] = Byte;
 8000ba0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000ba4:	1c5a      	adds	r2, r3, #1
 8000ba6:	f887 2066 	strb.w	r2, [r7, #102]	; 0x66
 8000baa:	3368      	adds	r3, #104	; 0x68
 8000bac:	443b      	add	r3, r7
 8000bae:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8000bb2:	f803 2c68 	strb.w	r2, [r3, #-104]
		while(Com_DataReady(ISP_PORT))
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	f014 f982 	bl	8014ec0 <Com_DataReady>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d1e8      	bne.n	8000b94 <Check_for_cmd+0x3c>
		}
		if(Index>0)
 8000bc2:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f000 814e 	beq.w	8000e68 <Check_for_cmd+0x310>
		{
			Buffer[Index] = 0;
 8000bcc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000bd0:	3368      	adds	r3, #104	; 0x68
 8000bd2:	443b      	add	r3, r7
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f803 2c68 	strb.w	r2, [r3, #-104]
			printf("Received from ISP:%s\n",Buffer);
 8000bda:	463b      	mov	r3, r7
 8000bdc:	4619      	mov	r1, r3
 8000bde:	48aa      	ldr	r0, [pc, #680]	; (8000e88 <Check_for_cmd+0x330>)
 8000be0:	f021 fce0 	bl	80225a4 <iprintf>
			switch(Is_Command_Valid(Buffer,Index))
 8000be4:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8000be8:	463b      	mov	r3, r7
 8000bea:	4611      	mov	r1, r2
 8000bec:	4618      	mov	r0, r3
 8000bee:	f000 f979 	bl	8000ee4 <Is_Command_Valid>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b09      	cmp	r3, #9
 8000bf6:	f200 8133 	bhi.w	8000e60 <Check_for_cmd+0x308>
 8000bfa:	a201      	add	r2, pc, #4	; (adr r2, 8000c00 <Check_for_cmd+0xa8>)
 8000bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c00:	08000c29 	.word	0x08000c29
 8000c04:	08000c37 	.word	0x08000c37
 8000c08:	08000c9b 	.word	0x08000c9b
 8000c0c:	08000cf1 	.word	0x08000cf1
 8000c10:	08000d4d 	.word	0x08000d4d
 8000c14:	08000d97 	.word	0x08000d97
 8000c18:	08000ddb 	.word	0x08000ddb
 8000c1c:	08000e1f 	.word	0x08000e1f
 8000c20:	08000e3b 	.word	0x08000e3b
 8000c24:	08000e45 	.word	0x08000e45
			{
			case ZERO:
				Dats_Request_Flag = 1;
 8000c28:	4b98      	ldr	r3, [pc, #608]	; (8000e8c <Check_for_cmd+0x334>)
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	701a      	strb	r2, [r3, #0]
				printf("\n*************PLEASE LOAD EI DATS USING APPLICATION************\n");
 8000c2e:	4898      	ldr	r0, [pc, #608]	; (8000e90 <Check_for_cmd+0x338>)
 8000c30:	f021 fd54 	bl	80226dc <puts>
				break;
 8000c34:	e119      	b.n	8000e6a <Check_for_cmd+0x312>
			case ONE:
				printf("Received \"%s\":%u\n",Commands_List[ONE],(Buffer[Index-1])-'0');
 8000c36:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	3368      	adds	r3, #104	; 0x68
 8000c3e:	443b      	add	r3, r7
 8000c40:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000c44:	3b30      	subs	r3, #48	; 0x30
 8000c46:	461a      	mov	r2, r3
 8000c48:	4992      	ldr	r1, [pc, #584]	; (8000e94 <Check_for_cmd+0x33c>)
 8000c4a:	4893      	ldr	r0, [pc, #588]	; (8000e98 <Check_for_cmd+0x340>)
 8000c4c:	f021 fcaa 	bl	80225a4 <iprintf>
				if( (((Buffer[Index-1])-'0') >= 0) && ((Buffer[Index-1])-'0') < 2)
 8000c50:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c54:	3b01      	subs	r3, #1
 8000c56:	3368      	adds	r3, #104	; 0x68
 8000c58:	443b      	add	r3, r7
 8000c5a:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000c5e:	2b2f      	cmp	r3, #47	; 0x2f
 8000c60:	d914      	bls.n	8000c8c <Check_for_cmd+0x134>
 8000c62:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c66:	3b01      	subs	r3, #1
 8000c68:	3368      	adds	r3, #104	; 0x68
 8000c6a:	443b      	add	r3, r7
 8000c6c:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000c70:	2b31      	cmp	r3, #49	; 0x31
 8000c72:	d80b      	bhi.n	8000c8c <Check_for_cmd+0x134>
				{
					Debug_flag = (Buffer[Index-1])-'0';
 8000c74:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	3368      	adds	r3, #104	; 0x68
 8000c7c:	443b      	add	r3, r7
 8000c7e:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000c82:	3b30      	subs	r3, #48	; 0x30
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	4b85      	ldr	r3, [pc, #532]	; (8000e9c <Check_for_cmd+0x344>)
 8000c88:	701a      	strb	r2, [r3, #0]
 8000c8a:	e002      	b.n	8000c92 <Check_for_cmd+0x13a>
				}
				else
				{
					printf("Please Send Valid Command\n");
 8000c8c:	4884      	ldr	r0, [pc, #528]	; (8000ea0 <Check_for_cmd+0x348>)
 8000c8e:	f021 fd25 	bl	80226dc <puts>
				}
				IS_COMMAND_RECEIVED = YES;
 8000c92:	2301      	movs	r3, #1
 8000c94:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8000c98:	e0e7      	b.n	8000e6a <Check_for_cmd+0x312>

			case TWO:
				printf("Received %s for Peer:%u\n",Commands_List[TWO],(Buffer[Index-1])-'0'); /* Invalid Address*/
 8000c9a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	3368      	adds	r3, #104	; 0x68
 8000ca2:	443b      	add	r3, r7
 8000ca4:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000ca8:	3b30      	subs	r3, #48	; 0x30
 8000caa:	461a      	mov	r2, r3
 8000cac:	497d      	ldr	r1, [pc, #500]	; (8000ea4 <Check_for_cmd+0x34c>)
 8000cae:	487e      	ldr	r0, [pc, #504]	; (8000ea8 <Check_for_cmd+0x350>)
 8000cb0:	f021 fc78 	bl	80225a4 <iprintf>
				printf("Invalid Addess\n");
 8000cb4:	487d      	ldr	r0, [pc, #500]	; (8000eac <Check_for_cmd+0x354>)
 8000cb6:	f021 fd11 	bl	80226dc <puts>
				SET_BIT_USER(4,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000cba:	4b7d      	ldr	r3, [pc, #500]	; (8000eb0 <Check_for_cmd+0x358>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f043 0310 	orr.w	r3, r3, #16
 8000cc2:	4a7b      	ldr	r2, [pc, #492]	; (8000eb0 <Check_for_cmd+0x358>)
 8000cc4:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= ((Buffer[Index-1])-'0');
 8000cc6:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	3368      	adds	r3, #104	; 0x68
 8000cce:	443b      	add	r3, r7
 8000cd0:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000cd4:	3b30      	subs	r3, #48	; 0x30
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	4b75      	ldr	r3, [pc, #468]	; (8000eb0 <Check_for_cmd+0x358>)
 8000cda:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				printf("\nFAULT BITS:%08lx\n",Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000ce2:	4b73      	ldr	r3, [pc, #460]	; (8000eb0 <Check_for_cmd+0x358>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4872      	ldr	r0, [pc, #456]	; (8000eb4 <Check_for_cmd+0x35c>)
 8000cea:	f021 fc5b 	bl	80225a4 <iprintf>
				break;
 8000cee:	e0bc      	b.n	8000e6a <Check_for_cmd+0x312>

			case THREE:
				/* Invalid Boolean Inputs, To do this case 1st we Have to break the Communication of the Peer
				 * By Either Not reply to peer up to stale Data Time (or) By Rejecting Packets of the Up to stale data time out.
				 */
				printf("Received %s for Peer:%u\n",Commands_List[THREE],(Buffer[Index-1])-'0');
 8000cf0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000cf4:	3b01      	subs	r3, #1
 8000cf6:	3368      	adds	r3, #104	; 0x68
 8000cf8:	443b      	add	r3, r7
 8000cfa:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000cfe:	3b30      	subs	r3, #48	; 0x30
 8000d00:	461a      	mov	r2, r3
 8000d02:	496d      	ldr	r1, [pc, #436]	; (8000eb8 <Check_for_cmd+0x360>)
 8000d04:	4868      	ldr	r0, [pc, #416]	; (8000ea8 <Check_for_cmd+0x350>)
 8000d06:	f021 fc4d 	bl	80225a4 <iprintf>
				printf("Invalid Boolean\n");
 8000d0a:	486c      	ldr	r0, [pc, #432]	; (8000ebc <Check_for_cmd+0x364>)
 8000d0c:	f021 fce6 	bl	80226dc <puts>
				Hitachi_fault_injection_st.FAULT_INJECTION_BITS = 0;
 8000d10:	4b67      	ldr	r3, [pc, #412]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(5,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000d16:	4b66      	ldr	r3, [pc, #408]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f043 0320 	orr.w	r3, r3, #32
 8000d1e:	4a64      	ldr	r2, [pc, #400]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d20:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX =  ((Buffer[Index-1])-'0');
 8000d22:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000d26:	3b01      	subs	r3, #1
 8000d28:	3368      	adds	r3, #104	; 0x68
 8000d2a:	443b      	add	r3, r7
 8000d2c:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000d30:	3b30      	subs	r3, #48	; 0x30
 8000d32:	b2da      	uxtb	r2, r3
 8000d34:	4b5e      	ldr	r3, [pc, #376]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d36:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				printf("\nFAULT BITS:%08lx\n",Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000d3e:	4b5c      	ldr	r3, [pc, #368]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4619      	mov	r1, r3
 8000d44:	485b      	ldr	r0, [pc, #364]	; (8000eb4 <Check_for_cmd+0x35c>)
 8000d46:	f021 fc2d 	bl	80225a4 <iprintf>
				break;
 8000d4a:	e08e      	b.n	8000e6a <Check_for_cmd+0x312>

			case FOUR:
				printf("Received %s for Peer:%u\n",Commands_List[FOUR],(Buffer[Index-1])-'0'); /* STALE Data Timeout by Not Replying to the Peer */
 8000d4c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000d50:	3b01      	subs	r3, #1
 8000d52:	3368      	adds	r3, #104	; 0x68
 8000d54:	443b      	add	r3, r7
 8000d56:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000d5a:	3b30      	subs	r3, #48	; 0x30
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4958      	ldr	r1, [pc, #352]	; (8000ec0 <Check_for_cmd+0x368>)
 8000d60:	4851      	ldr	r0, [pc, #324]	; (8000ea8 <Check_for_cmd+0x350>)
 8000d62:	f021 fc1f 	bl	80225a4 <iprintf>
				printf("Making Ethernet TX Disable\n");
 8000d66:	4857      	ldr	r0, [pc, #348]	; (8000ec4 <Check_for_cmd+0x36c>)
 8000d68:	f021 fcb8 	bl	80226dc <puts>
				SET_BIT_USER(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000d6c:	4b50      	ldr	r3, [pc, #320]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d74:	4a4e      	ldr	r2, [pc, #312]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d76:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= ((Buffer[Index-1])-'0');
 8000d78:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000d7c:	3b01      	subs	r3, #1
 8000d7e:	3368      	adds	r3, #104	; 0x68
 8000d80:	443b      	add	r3, r7
 8000d82:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000d86:	3b30      	subs	r3, #48	; 0x30
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	4b49      	ldr	r3, [pc, #292]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d8c:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8000d94:	e069      	b.n	8000e6a <Check_for_cmd+0x312>

			case FIVE:
				/* Vital Init Value Received from MICROLOK will be Modified */
				printf("Received %s for Peer:%u\n",Commands_List[FIVE],(Buffer[Index-1])-'0');
 8000d96:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	3368      	adds	r3, #104	; 0x68
 8000d9e:	443b      	add	r3, r7
 8000da0:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000da4:	3b30      	subs	r3, #48	; 0x30
 8000da6:	461a      	mov	r2, r3
 8000da8:	4947      	ldr	r1, [pc, #284]	; (8000ec8 <Check_for_cmd+0x370>)
 8000daa:	483f      	ldr	r0, [pc, #252]	; (8000ea8 <Check_for_cmd+0x350>)
 8000dac:	f021 fbfa 	bl	80225a4 <iprintf>
				SET_BIT_USER(0,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000db0:	4b3f      	ldr	r3, [pc, #252]	; (8000eb0 <Check_for_cmd+0x358>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	4a3d      	ldr	r2, [pc, #244]	; (8000eb0 <Check_for_cmd+0x358>)
 8000dba:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= ((Buffer[Index-1])-'0');
 8000dbc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	3368      	adds	r3, #104	; 0x68
 8000dc4:	443b      	add	r3, r7
 8000dc6:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000dca:	3b30      	subs	r3, #48	; 0x30
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	4b38      	ldr	r3, [pc, #224]	; (8000eb0 <Check_for_cmd+0x358>)
 8000dd0:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8000dd8:	e047      	b.n	8000e6a <Check_for_cmd+0x312>
			case SIX:
				/* Vital Init Value Sent by EIPC to MICROLOK
				 * is going to be Random value which will be prepend to the Message and CRC calculated and sent to MICROLOK
				 * This will make the CRC to Fail at MICROLOK end.
				 */
				printf("Received %s for Peer:%u\n",Commands_List[SIX],(Buffer[Index-1])-'0');
 8000dda:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000dde:	3b01      	subs	r3, #1
 8000de0:	3368      	adds	r3, #104	; 0x68
 8000de2:	443b      	add	r3, r7
 8000de4:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000de8:	3b30      	subs	r3, #48	; 0x30
 8000dea:	461a      	mov	r2, r3
 8000dec:	4937      	ldr	r1, [pc, #220]	; (8000ecc <Check_for_cmd+0x374>)
 8000dee:	482e      	ldr	r0, [pc, #184]	; (8000ea8 <Check_for_cmd+0x350>)
 8000df0:	f021 fbd8 	bl	80225a4 <iprintf>
				SET_BIT_USER(1,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000df4:	4b2e      	ldr	r3, [pc, #184]	; (8000eb0 <Check_for_cmd+0x358>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f043 0302 	orr.w	r3, r3, #2
 8000dfc:	4a2c      	ldr	r2, [pc, #176]	; (8000eb0 <Check_for_cmd+0x358>)
 8000dfe:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= ((Buffer[Index-1])-'0');
 8000e00:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000e04:	3b01      	subs	r3, #1
 8000e06:	3368      	adds	r3, #104	; 0x68
 8000e08:	443b      	add	r3, r7
 8000e0a:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000e0e:	3b30      	subs	r3, #48	; 0x30
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	4b27      	ldr	r3, [pc, #156]	; (8000eb0 <Check_for_cmd+0x358>)
 8000e14:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000e16:	2301      	movs	r3, #1
 8000e18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8000e1c:	e025      	b.n	8000e6a <Check_for_cmd+0x312>
			case SEVEN:
				/* CLEAR ALL */
				printf("Received %s\n",Commands_List[SEVEN]);
 8000e1e:	492c      	ldr	r1, [pc, #176]	; (8000ed0 <Check_for_cmd+0x378>)
 8000e20:	482c      	ldr	r0, [pc, #176]	; (8000ed4 <Check_for_cmd+0x37c>)
 8000e22:	f021 fbbf 	bl	80225a4 <iprintf>
				Hitachi_fault_injection_st.FAULT_INJECTION_BITS = 0;
 8000e26:	4b22      	ldr	r3, [pc, #136]	; (8000eb0 <Check_for_cmd+0x358>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= 0XFF;
 8000e2c:	4b20      	ldr	r3, [pc, #128]	; (8000eb0 <Check_for_cmd+0x358>)
 8000e2e:	22ff      	movs	r2, #255	; 0xff
 8000e30:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000e32:	2301      	movs	r3, #1
 8000e34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

				break;
 8000e38:	e017      	b.n	8000e6a <Check_for_cmd+0x312>
			case EIGHT:
				printf("Received %s Command\n",Commands_List[EIGHT]);
 8000e3a:	4927      	ldr	r1, [pc, #156]	; (8000ed8 <Check_for_cmd+0x380>)
 8000e3c:	4827      	ldr	r0, [pc, #156]	; (8000edc <Check_for_cmd+0x384>)
 8000e3e:	f021 fbb1 	bl	80225a4 <iprintf>
				break;
 8000e42:	e012      	b.n	8000e6a <Check_for_cmd+0x312>
			case NINE:
				printf("Received %s for Peer:%u\n",Commands_List[NINE],(Buffer[Index-1])-'0');
 8000e44:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	3368      	adds	r3, #104	; 0x68
 8000e4c:	443b      	add	r3, r7
 8000e4e:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000e52:	3b30      	subs	r3, #48	; 0x30
 8000e54:	461a      	mov	r2, r3
 8000e56:	4922      	ldr	r1, [pc, #136]	; (8000ee0 <Check_for_cmd+0x388>)
 8000e58:	4813      	ldr	r0, [pc, #76]	; (8000ea8 <Check_for_cmd+0x350>)
 8000e5a:	f021 fba3 	bl	80225a4 <iprintf>
				break;
 8000e5e:	e004      	b.n	8000e6a <Check_for_cmd+0x312>

			default:
				printf("Please Send Valid Command\n");
 8000e60:	480f      	ldr	r0, [pc, #60]	; (8000ea0 <Check_for_cmd+0x348>)
 8000e62:	f021 fc3b 	bl	80226dc <puts>
 8000e66:	e000      	b.n	8000e6a <Check_for_cmd+0x312>
			}
		}
 8000e68:	bf00      	nop

		if(IS_COMMAND_RECEIVED == YES)
 8000e6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d105      	bne.n	8000e7e <Check_for_cmd+0x326>
		{
			TransmitCanPkt(CAN_FAULT_INJECTION);
 8000e72:	f240 2005 	movw	r0, #517	; 0x205
 8000e76:	f00e fb5b 	bl	800f530 <TransmitCanPkt>
 8000e7a:	e000      	b.n	8000e7e <Check_for_cmd+0x326>
		return;
 8000e7c:	bf00      	nop
	{
		TransmitCanPkt(CAN_FAULT_INJECTION);
	}

#endif
}
 8000e7e:	3768      	adds	r7, #104	; 0x68
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	2000a00c 	.word	0x2000a00c
 8000e88:	08023ba4 	.word	0x08023ba4
 8000e8c:	20000644 	.word	0x20000644
 8000e90:	08023bbc 	.word	0x08023bbc
 8000e94:	20000a82 	.word	0x20000a82
 8000e98:	08023bfc 	.word	0x08023bfc
 8000e9c:	20000645 	.word	0x20000645
 8000ea0:	08023c10 	.word	0x08023c10
 8000ea4:	20000ab4 	.word	0x20000ab4
 8000ea8:	08023c2c 	.word	0x08023c2c
 8000eac:	08023c48 	.word	0x08023c48
 8000eb0:	20001968 	.word	0x20001968
 8000eb4:	08023c58 	.word	0x08023c58
 8000eb8:	20000ae6 	.word	0x20000ae6
 8000ebc:	08023c6c 	.word	0x08023c6c
 8000ec0:	20000b18 	.word	0x20000b18
 8000ec4:	08023c7c 	.word	0x08023c7c
 8000ec8:	20000b4a 	.word	0x20000b4a
 8000ecc:	20000b7c 	.word	0x20000b7c
 8000ed0:	20000bae 	.word	0x20000bae
 8000ed4:	08023c98 	.word	0x08023c98
 8000ed8:	20000be0 	.word	0x20000be0
 8000edc:	08023ca8 	.word	0x08023ca8
 8000ee0:	20000c12 	.word	0x20000c12

08000ee4 <Is_Command_Valid>:

uint8_t Is_Command_Valid(uint8_t *Buffer,uint8_t Length)
{
 8000ee4:	b590      	push	{r4, r7, lr}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	460b      	mov	r3, r1
 8000eee:	70fb      	strb	r3, [r7, #3]
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	73fb      	strb	r3, [r7, #15]
 8000ef4:	e01c      	b.n	8000f30 <Is_Command_Valid+0x4c>
	{
		//		if(strstr((char *)Buffer,(char *)Commands_List[Traverser]) != NULL)
		if(memcmp(Buffer,Commands_List[Traverser],strlen((char *)Commands_List[Traverser])) == 0)
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
 8000ef8:	2232      	movs	r2, #50	; 0x32
 8000efa:	fb02 f303 	mul.w	r3, r2, r3
 8000efe:	4a11      	ldr	r2, [pc, #68]	; (8000f44 <Is_Command_Valid+0x60>)
 8000f00:	189c      	adds	r4, r3, r2
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
 8000f04:	2232      	movs	r2, #50	; 0x32
 8000f06:	fb02 f303 	mul.w	r3, r2, r3
 8000f0a:	4a0e      	ldr	r2, [pc, #56]	; (8000f44 <Is_Command_Valid+0x60>)
 8000f0c:	4413      	add	r3, r2
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff f9a0 	bl	8000254 <strlen>
 8000f14:	4603      	mov	r3, r0
 8000f16:	461a      	mov	r2, r3
 8000f18:	4621      	mov	r1, r4
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f021 fa22 	bl	8022364 <memcmp>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d101      	bne.n	8000f2a <Is_Command_Valid+0x46>
		{
			return Traverser;
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
 8000f28:	e008      	b.n	8000f3c <Is_Command_Valid+0x58>
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	73fb      	strb	r3, [r7, #15]
 8000f30:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <Is_Command_Valid+0x64>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	7bfa      	ldrb	r2, [r7, #15]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d3dd      	bcc.n	8000ef6 <Is_Command_Valid+0x12>
		}
	}
	return 255;
 8000f3a:	23ff      	movs	r3, #255	; 0xff
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3714      	adds	r7, #20
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd90      	pop	{r4, r7, pc}
 8000f44:	20000a50 	.word	0x20000a50
 8000f48:	20000e38 	.word	0x20000e38

08000f4c <SendCombineHealth>:
}



void SendCombineHealth(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
	static uint32_t LastSentClk = 0;
	if(HAL_Elaps_Ticks(LastSentClk) > 3000)
 8000f52:	4b30      	ldr	r3, [pc, #192]	; (8001014 <SendCombineHealth+0xc8>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4618      	mov	r0, r3
 8000f58:	f00d fd68 	bl	800ea2c <HAL_Elaps_Ticks>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d951      	bls.n	800100a <SendCombineHealth+0xbe>
	{

		Ei_health_2_mie_st.ProtocolType = EI_data.ProtocolType;
 8000f66:	4b2c      	ldr	r3, [pc, #176]	; (8001018 <SendCombineHealth+0xcc>)
 8000f68:	781a      	ldrb	r2, [r3, #0]
 8000f6a:	4b2c      	ldr	r3, [pc, #176]	; (800101c <SendCombineHealth+0xd0>)
 8000f6c:	701a      	strb	r2, [r3, #0]

		if(EI_data.ProtocolType == HITACHI)
 8000f6e:	4b2a      	ldr	r3, [pc, #168]	; (8001018 <SendCombineHealth+0xcc>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d105      	bne.n	8000f82 <SendCombineHealth+0x36>
		{
			Ei_health_2_mie_st.No_ofPeers =  EI_data.Hitachi_st.PeersCnt;
 8000f76:	4b28      	ldr	r3, [pc, #160]	; (8001018 <SendCombineHealth+0xcc>)
 8000f78:	f893 2020 	ldrb.w	r2, [r3, #32]
 8000f7c:	4b27      	ldr	r3, [pc, #156]	; (800101c <SendCombineHealth+0xd0>)
 8000f7e:	705a      	strb	r2, [r3, #1]
 8000f80:	e002      	b.n	8000f88 <SendCombineHealth+0x3c>
		}
		else
		{
			Ei_health_2_mie_st.No_ofPeers = 1;
 8000f82:	4b26      	ldr	r3, [pc, #152]	; (800101c <SendCombineHealth+0xd0>)
 8000f84:	2201      	movs	r2, #1
 8000f86:	705a      	strb	r2, [r3, #1]
		}

		for(uint8_t i=0;i<(Ei_health_2_mie_st.No_ofPeers);++i)
 8000f88:	2300      	movs	r3, #0
 8000f8a:	71fb      	strb	r3, [r7, #7]
 8000f8c:	e02f      	b.n	8000fee <SendCombineHealth+0xa2>
		{
			if(CHECKFLAG(i,EI_HealthStatus) == SET)
 8000f8e:	4b24      	ldr	r3, [pc, #144]	; (8001020 <SendCombineHealth+0xd4>)
 8000f90:	881b      	ldrh	r3, [r3, #0]
 8000f92:	461a      	mov	r2, r3
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	fa42 f303 	asr.w	r3, r2, r3
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d00f      	beq.n	8000fc2 <SendCombineHealth+0x76>
			{
				SET_BIT(i,Ei_health_2_mie_st.PeersStatuses);
 8000fa2:	4b1e      	ldr	r3, [pc, #120]	; (800101c <SendCombineHealth+0xd0>)
 8000fa4:	885b      	ldrh	r3, [r3, #2]
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	71fb      	strb	r3, [r7, #7]
				if(Debug_flag == 1)
 8000fae:	4b1d      	ldr	r3, [pc, #116]	; (8001024 <SendCombineHealth+0xd8>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d118      	bne.n	8000fe8 <SendCombineHealth+0x9c>
				{
					printf("P:%u:H:NOK\n",i);
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	4619      	mov	r1, r3
 8000fba:	481b      	ldr	r0, [pc, #108]	; (8001028 <SendCombineHealth+0xdc>)
 8000fbc:	f021 faf2 	bl	80225a4 <iprintf>
 8000fc0:	e012      	b.n	8000fe8 <SendCombineHealth+0x9c>
				}
			}
			else
			{
				CLEAR_BIT(i,Ei_health_2_mie_st.PeersStatuses);
 8000fc2:	4b16      	ldr	r3, [pc, #88]	; (800101c <SendCombineHealth+0xd0>)
 8000fc4:	885b      	ldrh	r3, [r3, #2]
 8000fc6:	b25b      	sxtb	r3, r3
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	b25a      	sxtb	r2, r3
 8000fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	b25b      	sxtb	r3, r3
 8000fd4:	71fb      	strb	r3, [r7, #7]
				if(Debug_flag == 1)
 8000fd6:	4b13      	ldr	r3, [pc, #76]	; (8001024 <SendCombineHealth+0xd8>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d104      	bne.n	8000fe8 <SendCombineHealth+0x9c>
				{
					printf("P:%u:H:OK\n",i);
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4812      	ldr	r0, [pc, #72]	; (800102c <SendCombineHealth+0xe0>)
 8000fe4:	f021 fade 	bl	80225a4 <iprintf>
		for(uint8_t i=0;i<(Ei_health_2_mie_st.No_ofPeers);++i)
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	3301      	adds	r3, #1
 8000fec:	71fb      	strb	r3, [r7, #7]
 8000fee:	4b0b      	ldr	r3, [pc, #44]	; (800101c <SendCombineHealth+0xd0>)
 8000ff0:	785b      	ldrb	r3, [r3, #1]
 8000ff2:	79fa      	ldrb	r2, [r7, #7]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d3ca      	bcc.n	8000f8e <SendCombineHealth+0x42>
				}
			}
		}

		TransmitCanPkt(COMBINE_EiPC_HEALTH);
 8000ff8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ffc:	f00e fa98 	bl	800f530 <TransmitCanPkt>

		LastSentClk = HAL_GetTick();
 8001000:	f014 fac6 	bl	8015590 <HAL_GetTick>
 8001004:	4603      	mov	r3, r0
 8001006:	4a03      	ldr	r2, [pc, #12]	; (8001014 <SendCombineHealth+0xc8>)
 8001008:	6013      	str	r3, [r2, #0]
	}
}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000e40 	.word	0x20000e40
 8001018:	20000304 	.word	0x20000304
 800101c:	20000e3c 	.word	0x20000e3c
 8001020:	20000e3a 	.word	0x20000e3a
 8001024:	20000645 	.word	0x20000645
 8001028:	08023ce4 	.word	0x08023ce4
 800102c:	08023cf0 	.word	0x08023cf0

08001030 <Process_Hitachi_Packets_Eth>:
RELAYS_t							Main_Relays_st[MAX_PEER_CONNECTIONS];
RELAYS_t							OtherCard_Relays_st[MAX_PEER_CONNECTIONS];
RELAYS_t							Tx_Temp_Main_Relays_st,Rx_Temp_Main_Relays_st;

void Process_Hitachi_Packets_Eth(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b0a2      	sub	sp, #136	; 0x88
 8001034:	af00      	add	r7, sp, #0
	uint8_t Data = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
	uint8_t Temp_array[HITACHI_MAX_PAYLOAD] = {0,};
 800103c:	2300      	movs	r3, #0
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	f107 0308 	add.w	r3, r7, #8
 8001044:	227c      	movs	r2, #124	; 0x7c
 8001046:	2100      	movs	r1, #0
 8001048:	4618      	mov	r0, r3
 800104a:	f021 f9c3 	bl	80223d4 <memset>
	uint8_t Traverser = 0,uc_Found = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8001054:	2300      	movs	r3, #0
 8001056:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

	while(Is_There_EI_Data())
 800105a:	e03a      	b.n	80010d2 <Process_Hitachi_Packets_Eth+0xa2>
	{
		Data = Get_Eth_Byte();
 800105c:	f00e f8ae 	bl	800f1bc <Get_Eth_Byte>
 8001060:	4603      	mov	r3, r0
 8001062:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
		switch(Data)
 8001066:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 800106a:	2bf4      	cmp	r3, #244	; 0xf4
 800106c:	d002      	beq.n	8001074 <Process_Hitachi_Packets_Eth+0x44>
 800106e:	2bf6      	cmp	r3, #246	; 0xf6
 8001070:	d00c      	beq.n	800108c <Process_Hitachi_Packets_Eth+0x5c>
 8001072:	e01b      	b.n	80010ac <Process_Hitachi_Packets_Eth+0x7c>
		{
		case HITACHI_SOM:
			Temp_array[Traverser++] = Data;
 8001074:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001078:	1c5a      	adds	r2, r3, #1
 800107a:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 800107e:	3388      	adds	r3, #136	; 0x88
 8001080:	443b      	add	r3, r7
 8001082:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 8001086:	f803 2c84 	strb.w	r2, [r3, #-132]
			break;
 800108a:	e01e      	b.n	80010ca <Process_Hitachi_Packets_Eth+0x9a>
		case HITACHI_EOM:
			Temp_array[Traverser++] = Data;
 800108c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001090:	1c5a      	adds	r2, r3, #1
 8001092:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8001096:	3388      	adds	r3, #136	; 0x88
 8001098:	443b      	add	r3, r7
 800109a:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 800109e:	f803 2c84 	strb.w	r2, [r3, #-132]
			uc_Found = Traverser;
 80010a2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80010a6:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
			break;
 80010aa:	e00e      	b.n	80010ca <Process_Hitachi_Packets_Eth+0x9a>
		default:
			if(Traverser >0)
 80010ac:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d00a      	beq.n	80010ca <Process_Hitachi_Packets_Eth+0x9a>
			{
				Temp_array[Traverser++] = Data;
 80010b4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80010b8:	1c5a      	adds	r2, r3, #1
 80010ba:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 80010be:	3388      	adds	r3, #136	; 0x88
 80010c0:	443b      	add	r3, r7
 80010c2:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 80010c6:	f803 2c84 	strb.w	r2, [r3, #-132]
			}
		}
		if(uc_Found > 0)
 80010ca:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d105      	bne.n	80010de <Process_Hitachi_Packets_Eth+0xae>
	while(Is_There_EI_Data())
 80010d2:	f00e f85f 	bl	800f194 <Is_There_EI_Data>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d1bf      	bne.n	800105c <Process_Hitachi_Packets_Eth+0x2c>
 80010dc:	e000      	b.n	80010e0 <Process_Hitachi_Packets_Eth+0xb0>
		{
			break;
 80010de:	bf00      	nop
		}
	}
	if(uc_Found > 0)
 80010e0:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d00d      	beq.n	8001104 <Process_Hitachi_Packets_Eth+0xd4>
	{
		if(Traverser>15)
 80010e8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80010ec:	2b0f      	cmp	r3, #15
 80010ee:	d906      	bls.n	80010fe <Process_Hitachi_Packets_Eth+0xce>
		{
			Convert_Data_format(Temp_array,Traverser);
 80010f0:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 80010f4:	1d3b      	adds	r3, r7, #4
 80010f6:	4611      	mov	r1, r2
 80010f8:	4618      	mov	r0, r3
 80010fa:	f000 f8a3 	bl	8001244 <Convert_Data_format>
		}
		Traverser = 0;
 80010fe:	2300      	movs	r3, #0
 8001100:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	}
}
 8001104:	bf00      	nop
 8001106:	3788      	adds	r7, #136	; 0x88
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <Process_Hitachi_Packets_Com>:

void Process_Hitachi_Packets_Com(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b0a2      	sub	sp, #136	; 0x88
 8001110:	af00      	add	r7, sp, #0
	uint8_t Data = 0;
 8001112:	2300      	movs	r3, #0
 8001114:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
	uint8_t Temp_array[HITACHI_MAX_PAYLOAD] = {0,};
 8001118:	2300      	movs	r3, #0
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	f107 0308 	add.w	r3, r7, #8
 8001120:	227c      	movs	r2, #124	; 0x7c
 8001122:	2100      	movs	r1, #0
 8001124:	4618      	mov	r0, r3
 8001126:	f021 f955 	bl	80223d4 <memset>
	uint8_t Traverser = 0,uc_Found = 0;
 800112a:	2300      	movs	r3, #0
 800112c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8001130:	2300      	movs	r3, #0
 8001132:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

	if(EI_data.Hitachi_st.EnableSerialPort == 0)
 8001136:	4b40      	ldr	r3, [pc, #256]	; (8001238 <Process_Hitachi_Packets_Com+0x12c>)
 8001138:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800113c:	2b00      	cmp	r3, #0
 800113e:	d074      	beq.n	800122a <Process_Hitachi_Packets_Com+0x11e>
		return;
	}


	/* Waiting Until the Full Packet is Received this Variable will be updated in UART4 Interrupt*/
	if(HAL_Elaps_Ticks(UART4_Intr_Clk) < 20)
 8001140:	4b3e      	ldr	r3, [pc, #248]	; (800123c <Process_Hitachi_Packets_Com+0x130>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4618      	mov	r0, r3
 8001146:	f00d fc71 	bl	800ea2c <HAL_Elaps_Ticks>
 800114a:	4603      	mov	r3, r0
 800114c:	2b13      	cmp	r3, #19
 800114e:	d96e      	bls.n	800122e <Process_Hitachi_Packets_Com+0x122>
	{
		return;
	}

	while(Com_DataReady(THREE_PORT))
 8001150:	e04a      	b.n	80011e8 <Process_Hitachi_Packets_Com+0xdc>
	{
		Data = Com_Get_Byte(THREE_PORT);
 8001152:	2003      	movs	r0, #3
 8001154:	f013 fef4 	bl	8014f40 <Com_Get_Byte>
 8001158:	4603      	mov	r3, r0
 800115a:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
		if(Traverser > (HITACHI_MAX_PAYLOAD-2))
 800115e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001162:	2b7e      	cmp	r3, #126	; 0x7e
 8001164:	d90a      	bls.n	800117c <Process_Hitachi_Packets_Com+0x70>
		{
			printf("Received data %u Bytes exceeded %u Bytes",Traverser,HITACHI_MAX_PAYLOAD);
 8001166:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800116a:	2280      	movs	r2, #128	; 0x80
 800116c:	4619      	mov	r1, r3
 800116e:	4834      	ldr	r0, [pc, #208]	; (8001240 <Process_Hitachi_Packets_Com+0x134>)
 8001170:	f021 fa18 	bl	80225a4 <iprintf>
			Traverser = 0;
 8001174:	2300      	movs	r3, #0
 8001176:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			break;
 800117a:	e03d      	b.n	80011f8 <Process_Hitachi_Packets_Com+0xec>
		}
		//printf("%02X ",Data);
		switch(Data)
 800117c:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8001180:	2bf4      	cmp	r3, #244	; 0xf4
 8001182:	d002      	beq.n	800118a <Process_Hitachi_Packets_Com+0x7e>
 8001184:	2bf6      	cmp	r3, #246	; 0xf6
 8001186:	d00c      	beq.n	80011a2 <Process_Hitachi_Packets_Com+0x96>
 8001188:	e01b      	b.n	80011c2 <Process_Hitachi_Packets_Com+0xb6>
		{
		case HITACHI_SOM:
			Temp_array[Traverser++] = Data;
 800118a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800118e:	1c5a      	adds	r2, r3, #1
 8001190:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8001194:	3388      	adds	r3, #136	; 0x88
 8001196:	443b      	add	r3, r7
 8001198:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 800119c:	f803 2c84 	strb.w	r2, [r3, #-132]
			break;
 80011a0:	e01e      	b.n	80011e0 <Process_Hitachi_Packets_Com+0xd4>
		case HITACHI_EOM:
			Temp_array[Traverser++] = Data;
 80011a2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80011a6:	1c5a      	adds	r2, r3, #1
 80011a8:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 80011ac:	3388      	adds	r3, #136	; 0x88
 80011ae:	443b      	add	r3, r7
 80011b0:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 80011b4:	f803 2c84 	strb.w	r2, [r3, #-132]
			uc_Found = Traverser;
 80011b8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80011bc:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
			break;
 80011c0:	e00e      	b.n	80011e0 <Process_Hitachi_Packets_Com+0xd4>
		default:
			if(Traverser >0)
 80011c2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d00a      	beq.n	80011e0 <Process_Hitachi_Packets_Com+0xd4>
			{
				Temp_array[Traverser++] = Data;
 80011ca:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80011ce:	1c5a      	adds	r2, r3, #1
 80011d0:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 80011d4:	3388      	adds	r3, #136	; 0x88
 80011d6:	443b      	add	r3, r7
 80011d8:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 80011dc:	f803 2c84 	strb.w	r2, [r3, #-132]
			}
		}
		if(uc_Found > 0)
 80011e0:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d106      	bne.n	80011f6 <Process_Hitachi_Packets_Com+0xea>
	while(Com_DataReady(THREE_PORT))
 80011e8:	2003      	movs	r0, #3
 80011ea:	f013 fe69 	bl	8014ec0 <Com_DataReady>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d1ae      	bne.n	8001152 <Process_Hitachi_Packets_Com+0x46>
 80011f4:	e000      	b.n	80011f8 <Process_Hitachi_Packets_Com+0xec>
		{
			break;
 80011f6:	bf00      	nop
		}
	}
	if(uc_Found > 0)
 80011f8:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d017      	beq.n	8001230 <Process_Hitachi_Packets_Com+0x124>
	{
		if(Traverser>15)
 8001200:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001204:	2b0f      	cmp	r3, #15
 8001206:	d906      	bls.n	8001216 <Process_Hitachi_Packets_Com+0x10a>
		{
			Convert_Data_format(Temp_array,Traverser);
 8001208:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	4611      	mov	r1, r2
 8001210:	4618      	mov	r0, r3
 8001212:	f000 f817 	bl	8001244 <Convert_Data_format>
		}
		Traverser = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		memset(&Temp_array,0,sizeof(Temp_array));
 800121c:	1d3b      	adds	r3, r7, #4
 800121e:	2280      	movs	r2, #128	; 0x80
 8001220:	2100      	movs	r1, #0
 8001222:	4618      	mov	r0, r3
 8001224:	f021 f8d6 	bl	80223d4 <memset>
 8001228:	e002      	b.n	8001230 <Process_Hitachi_Packets_Com+0x124>
		return;
 800122a:	bf00      	nop
 800122c:	e000      	b.n	8001230 <Process_Hitachi_Packets_Com+0x124>
		return;
 800122e:	bf00      	nop
	}
}
 8001230:	3788      	adds	r7, #136	; 0x88
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20000304 	.word	0x20000304
 800123c:	2000a008 	.word	0x2000a008
 8001240:	08023cfc 	.word	0x08023cfc

08001244 <Convert_Data_format>:


void Convert_Data_format(uint8_t *Data,uint8_t Length)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b0a4      	sub	sp, #144	; 0x90
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	460b      	mov	r3, r1
 800124e:	70fb      	strb	r3, [r7, #3]
	uint8_t Temp_Buff[128] = {0,};
 8001250:	2300      	movs	r3, #0
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	f107 0310 	add.w	r3, r7, #16
 8001258:	227c      	movs	r2, #124	; 0x7c
 800125a:	2100      	movs	r1, #0
 800125c:	4618      	mov	r0, r3
 800125e:	f021 f8b9 	bl	80223d4 <memset>
	uint16_t des_index=0,src_index=0;
 8001262:	2300      	movs	r3, #0
 8001264:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8001268:	2300      	movs	r3, #0
 800126a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c

	for(des_index=0,src_index=0; src_index < Length; ++des_index,++src_index)
 800126e:	2300      	movs	r3, #0
 8001270:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8001274:	2300      	movs	r3, #0
 8001276:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800127a:	e034      	b.n	80012e6 <Convert_Data_format+0xa2>
	{
		if(Data[src_index] == (uint8_t)0xF0)
 800127c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	4413      	add	r3, r2
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	2bf0      	cmp	r3, #240	; 0xf0
 8001288:	d118      	bne.n	80012bc <Convert_Data_format+0x78>
		{
			Temp_Buff[des_index] = Data[src_index] | Data[src_index+1];
 800128a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	4413      	add	r3, r2
 8001292:	7819      	ldrb	r1, [r3, #0]
 8001294:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8001298:	3301      	adds	r3, #1
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	4413      	add	r3, r2
 800129e:	781a      	ldrb	r2, [r3, #0]
 80012a0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80012a4:	430a      	orrs	r2, r1
 80012a6:	b2d2      	uxtb	r2, r2
 80012a8:	3390      	adds	r3, #144	; 0x90
 80012aa:	443b      	add	r3, r7
 80012ac:	f803 2c84 	strb.w	r2, [r3, #-132]
			++src_index;
 80012b0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80012b4:	3301      	adds	r3, #1
 80012b6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80012ba:	e00a      	b.n	80012d2 <Convert_Data_format+0x8e>
		}
		else
		{
			Temp_Buff[des_index] = Data[src_index];
 80012bc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	441a      	add	r2, r3
 80012c4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80012c8:	7812      	ldrb	r2, [r2, #0]
 80012ca:	3390      	adds	r3, #144	; 0x90
 80012cc:	443b      	add	r3, r7
 80012ce:	f803 2c84 	strb.w	r2, [r3, #-132]
	for(des_index=0,src_index=0; src_index < Length; ++des_index,++src_index)
 80012d2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80012d6:	3301      	adds	r3, #1
 80012d8:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80012dc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80012e0:	3301      	adds	r3, #1
 80012e2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80012e6:	78fb      	ldrb	r3, [r7, #3]
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d3c4      	bcc.n	800127c <Convert_Data_format+0x38>
		}
	}
	EI_Data_Analyzer(Temp_Buff,des_index);
 80012f2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80012f6:	f107 030c 	add.w	r3, r7, #12
 80012fa:	4611      	mov	r1, r2
 80012fc:	4618      	mov	r0, r3
 80012fe:	f000 f805 	bl	800130c <EI_Data_Analyzer>
}
 8001302:	bf00      	nop
 8001304:	3790      	adds	r7, #144	; 0x90
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
	...

0800130c <EI_Data_Analyzer>:

void EI_Data_Analyzer(unsigned char *Buff, unsigned short int Size)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b088      	sub	sp, #32
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	460b      	mov	r3, r1
 8001316:	807b      	strh	r3, [r7, #2]
	uint8_t Message_Type = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	75fb      	strb	r3, [r7, #23]
	uint8_t Source_Index = 0,Dest_Index = 0;
 800131c:	2300      	movs	r3, #0
 800131e:	77fb      	strb	r3, [r7, #31]
 8001320:	2300      	movs	r3, #0
 8001322:	77bb      	strb	r3, [r7, #30]
	uint32_t Destin_Address = 0;
 8001324:	2300      	movs	r3, #0
 8001326:	61bb      	str	r3, [r7, #24]
	uint32_t Source_Address = 0;
 8001328:	2300      	movs	r3, #0
 800132a:	613b      	str	r3, [r7, #16]
	uint32_t Cur_Ticks = HAL_GetTick();
 800132c:	f014 f930 	bl	8015590 <HAL_GetTick>
 8001330:	60f8      	str	r0, [r7, #12]

	if( (Is_CAN_Exchange_happening == NO) && (HAL_GetTick() >= TEN_SEC) )
 8001332:	4ba7      	ldr	r3, [pc, #668]	; (80015d0 <EI_Data_Analyzer+0x2c4>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d111      	bne.n	800135e <EI_Data_Analyzer+0x52>
 800133a:	f014 f929 	bl	8015590 <HAL_GetTick>
 800133e:	4603      	mov	r3, r0
 8001340:	f242 720f 	movw	r2, #9999	; 0x270f
 8001344:	4293      	cmp	r3, r2
 8001346:	d90a      	bls.n	800135e <EI_Data_Analyzer+0x52>
	{
		printf("\n Not Processing Any EI Packet As CAN Packets are Not receiving\n");
 8001348:	48a2      	ldr	r0, [pc, #648]	; (80015d4 <EI_Data_Analyzer+0x2c8>)
 800134a:	f021 f9c7 	bl	80226dc <puts>
		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)
 800134e:	49a2      	ldr	r1, [pc, #648]	; (80015d8 <EI_Data_Analyzer+0x2cc>)
 8001350:	48a2      	ldr	r0, [pc, #648]	; (80015dc <EI_Data_Analyzer+0x2d0>)
 8001352:	f7fe ff75 	bl	8000240 <strcmp>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	f040 81a1 	bne.w	80016a0 <EI_Data_Analyzer+0x394>
			//Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = 0x123456;
			return;
		}		//		return;
	}

	Source_Address  = (uint16_t)ExtractBits(0, 16, (unsigned char *)&Buff[3]);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	3303      	adds	r3, #3
 8001362:	461a      	mov	r2, r3
 8001364:	2110      	movs	r1, #16
 8001366:	2000      	movs	r0, #0
 8001368:	f7ff f954 	bl	8000614 <ExtractBits>
 800136c:	4603      	mov	r3, r0
 800136e:	b29b      	uxth	r3, r3
 8001370:	613b      	str	r3, [r7, #16]
	for(; Source_Index < EI_data.Hitachi_st.PeersCnt; ++Source_Index)
 8001372:	e00b      	b.n	800138c <EI_Data_Analyzer+0x80>
	{
		if(Source_Address == EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index])
 8001374:	7ffb      	ldrb	r3, [r7, #31]
 8001376:	4a9a      	ldr	r2, [pc, #616]	; (80015e0 <EI_Data_Analyzer+0x2d4>)
 8001378:	3366      	adds	r3, #102	; 0x66
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	4413      	add	r3, r2
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	429a      	cmp	r2, r3
 8001384:	d009      	beq.n	800139a <EI_Data_Analyzer+0x8e>
	for(; Source_Index < EI_data.Hitachi_st.PeersCnt; ++Source_Index)
 8001386:	7ffb      	ldrb	r3, [r7, #31]
 8001388:	3301      	adds	r3, #1
 800138a:	77fb      	strb	r3, [r7, #31]
 800138c:	4b94      	ldr	r3, [pc, #592]	; (80015e0 <EI_Data_Analyzer+0x2d4>)
 800138e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001392:	7ffa      	ldrb	r2, [r7, #31]
 8001394:	429a      	cmp	r2, r3
 8001396:	d3ed      	bcc.n	8001374 <EI_Data_Analyzer+0x68>
 8001398:	e000      	b.n	800139c <EI_Data_Analyzer+0x90>
		{
			break;
 800139a:	bf00      	nop
		}
	}
	if(Source_Index>= EI_data.Hitachi_st.PeersCnt)
 800139c:	4b90      	ldr	r3, [pc, #576]	; (80015e0 <EI_Data_Analyzer+0x2d4>)
 800139e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013a2:	7ffa      	ldrb	r2, [r7, #31]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d309      	bcc.n	80013bc <EI_Data_Analyzer+0xb0>
	{
		if(Debug_flag == 1)
 80013a8:	4b8e      	ldr	r3, [pc, #568]	; (80015e4 <EI_Data_Analyzer+0x2d8>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	f040 8179 	bne.w	80016a4 <EI_Data_Analyzer+0x398>
		{
			printf("Rejected Source Address:%lu which is Not Available in List\n",Source_Address);
 80013b2:	6939      	ldr	r1, [r7, #16]
 80013b4:	488c      	ldr	r0, [pc, #560]	; (80015e8 <EI_Data_Analyzer+0x2dc>)
 80013b6:	f021 f8f5 	bl	80225a4 <iprintf>
		}
		return;
 80013ba:	e173      	b.n	80016a4 <EI_Data_Analyzer+0x398>
	}

	Destin_Address = (uint16_t)ExtractBits(0, 16, (unsigned char *)&Buff[1]);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3301      	adds	r3, #1
 80013c0:	461a      	mov	r2, r3
 80013c2:	2110      	movs	r1, #16
 80013c4:	2000      	movs	r0, #0
 80013c6:	f7ff f925 	bl	8000614 <ExtractBits>
 80013ca:	4603      	mov	r3, r0
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	61bb      	str	r3, [r7, #24]

	if(Destin_Address != EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index] )
 80013d0:	7ffb      	ldrb	r3, [r7, #31]
 80013d2:	4a83      	ldr	r2, [pc, #524]	; (80015e0 <EI_Data_Analyzer+0x2d4>)
 80013d4:	3370      	adds	r3, #112	; 0x70
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	4413      	add	r3, r2
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	429a      	cmp	r2, r3
 80013e0:	d012      	beq.n	8001408 <EI_Data_Analyzer+0xfc>
	{
		printf("Packet Indexes Not matching\n");
 80013e2:	4882      	ldr	r0, [pc, #520]	; (80015ec <EI_Data_Analyzer+0x2e0>)
 80013e4:	f021 f97a 	bl	80226dc <puts>
		printf("Received Destination Address:%lu\n",Destin_Address);
 80013e8:	69b9      	ldr	r1, [r7, #24]
 80013ea:	4881      	ldr	r0, [pc, #516]	; (80015f0 <EI_Data_Analyzer+0x2e4>)
 80013ec:	f021 f8da 	bl	80225a4 <iprintf>
		printf("Actual Destination Address for Source Address[%lu]:%lu\n",Source_Address,EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]);
 80013f0:	7ffb      	ldrb	r3, [r7, #31]
 80013f2:	4a7b      	ldr	r2, [pc, #492]	; (80015e0 <EI_Data_Analyzer+0x2d4>)
 80013f4:	3370      	adds	r3, #112	; 0x70
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	4413      	add	r3, r2
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	461a      	mov	r2, r3
 80013fe:	6939      	ldr	r1, [r7, #16]
 8001400:	487c      	ldr	r0, [pc, #496]	; (80015f4 <EI_Data_Analyzer+0x2e8>)
 8001402:	f021 f8cf 	bl	80225a4 <iprintf>
		return;
 8001406:	e14e      	b.n	80016a6 <EI_Data_Analyzer+0x39a>
	}
	else
	{
		Dest_Index = Source_Index;
 8001408:	7ffb      	ldrb	r3, [r7, #31]
 800140a:	77bb      	strb	r3, [r7, #30]
	}
	if( (CHECKFLAG(4,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800140c:	4b7a      	ldr	r3, [pc, #488]	; (80015f8 <EI_Data_Analyzer+0x2ec>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	091b      	lsrs	r3, r3, #4
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	2b00      	cmp	r3, #0
 8001418:	d016      	beq.n	8001448 <EI_Data_Analyzer+0x13c>
	{
		if(Dest_Index == Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX)
 800141a:	4b77      	ldr	r3, [pc, #476]	; (80015f8 <EI_Data_Analyzer+0x2ec>)
 800141c:	791b      	ldrb	r3, [r3, #4]
 800141e:	7fba      	ldrb	r2, [r7, #30]
 8001420:	429a      	cmp	r2, r3
 8001422:	d111      	bne.n	8001448 <EI_Data_Analyzer+0x13c>
		{
			printf("\nInjected Invalid Destin_Address\n");
 8001424:	4875      	ldr	r0, [pc, #468]	; (80015fc <EI_Data_Analyzer+0x2f0>)
 8001426:	f021 f959 	bl	80226dc <puts>
			printf("Received:%lu\n",Destin_Address);
 800142a:	69b9      	ldr	r1, [r7, #24]
 800142c:	4874      	ldr	r0, [pc, #464]	; (8001600 <EI_Data_Analyzer+0x2f4>)
 800142e:	f021 f8b9 	bl	80225a4 <iprintf>
			Destin_Address = 333;
 8001432:	f240 134d 	movw	r3, #333	; 0x14d
 8001436:	61bb      	str	r3, [r7, #24]
			Dest_Index = EI_data.Hitachi_st.PeersCnt;
 8001438:	4b69      	ldr	r3, [pc, #420]	; (80015e0 <EI_Data_Analyzer+0x2d4>)
 800143a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800143e:	77bb      	strb	r3, [r7, #30]
			printf("Injected:%lu\n",Destin_Address);
 8001440:	69b9      	ldr	r1, [r7, #24]
 8001442:	4870      	ldr	r0, [pc, #448]	; (8001604 <EI_Data_Analyzer+0x2f8>)
 8001444:	f021 f8ae 	bl	80225a4 <iprintf>
		}
	}
	if(Dest_Index>=EI_data.Hitachi_st.PeersCnt)
 8001448:	4b65      	ldr	r3, [pc, #404]	; (80015e0 <EI_Data_Analyzer+0x2d4>)
 800144a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800144e:	7fba      	ldrb	r2, [r7, #30]
 8001450:	429a      	cmp	r2, r3
 8001452:	d307      	bcc.n	8001464 <EI_Data_Analyzer+0x158>
	{
		printf("Destin_Address is not in the List of DEST_ADDRESSES\n");
 8001454:	486c      	ldr	r0, [pc, #432]	; (8001608 <EI_Data_Analyzer+0x2fc>)
 8001456:	f021 f941 	bl	80226dc <puts>
		printf("Received Destin_Address:%lu\n",Destin_Address);
 800145a:	69b9      	ldr	r1, [r7, #24]
 800145c:	486b      	ldr	r0, [pc, #428]	; (800160c <EI_Data_Analyzer+0x300>)
 800145e:	f021 f8a1 	bl	80225a4 <iprintf>
		return;
 8001462:	e120      	b.n	80016a6 <EI_Data_Analyzer+0x39a>
	}

	if(Debug_flag == 1)
 8001464:	4b5f      	ldr	r3, [pc, #380]	; (80015e4 <EI_Data_Analyzer+0x2d8>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b01      	cmp	r3, #1
 800146a:	d121      	bne.n	80014b0 <EI_Data_Analyzer+0x1a4>
	{
		switch(Recv_IP_Index[Source_Index])
 800146c:	7ffb      	ldrb	r3, [r7, #31]
 800146e:	4a68      	ldr	r2, [pc, #416]	; (8001610 <EI_Data_Analyzer+0x304>)
 8001470:	5cd3      	ldrb	r3, [r2, r3]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d002      	beq.n	800147c <EI_Data_Analyzer+0x170>
 8001476:	2b02      	cmp	r3, #2
 8001478:	d004      	beq.n	8001484 <EI_Data_Analyzer+0x178>
 800147a:	e007      	b.n	800148c <EI_Data_Analyzer+0x180>
		{
		case ONE:
			printf("RCV from MLK-A\n");
 800147c:	4865      	ldr	r0, [pc, #404]	; (8001614 <EI_Data_Analyzer+0x308>)
 800147e:	f021 f92d 	bl	80226dc <puts>
			break;
 8001482:	e015      	b.n	80014b0 <EI_Data_Analyzer+0x1a4>
		case TWO:
			printf("RCV from MLK-B\n");
 8001484:	4864      	ldr	r0, [pc, #400]	; (8001618 <EI_Data_Analyzer+0x30c>)
 8001486:	f021 f929 	bl	80226dc <puts>
			break;
 800148a:	e011      	b.n	80014b0 <EI_Data_Analyzer+0x1a4>
		default:
			if(EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL)
 800148c:	7ffb      	ldrb	r3, [r7, #31]
 800148e:	4a54      	ldr	r2, [pc, #336]	; (80015e0 <EI_Data_Analyzer+0x2d4>)
 8001490:	4413      	add	r3, r2
 8001492:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001496:	2b02      	cmp	r3, #2
 8001498:	d103      	bne.n	80014a2 <EI_Data_Analyzer+0x196>
			{
				printf("Received from Serial\n");
 800149a:	4860      	ldr	r0, [pc, #384]	; (800161c <EI_Data_Analyzer+0x310>)
 800149c:	f021 f91e 	bl	80226dc <puts>
 80014a0:	e006      	b.n	80014b0 <EI_Data_Analyzer+0x1a4>
			}
			else
			{
				printf("Received from Unknown Source:%u\n",Recv_IP_Index[Source_Index]);
 80014a2:	7ffb      	ldrb	r3, [r7, #31]
 80014a4:	4a5a      	ldr	r2, [pc, #360]	; (8001610 <EI_Data_Analyzer+0x304>)
 80014a6:	5cd3      	ldrb	r3, [r2, r3]
 80014a8:	4619      	mov	r1, r3
 80014aa:	485d      	ldr	r0, [pc, #372]	; (8001620 <EI_Data_Analyzer+0x314>)
 80014ac:	f021 f87a 	bl	80225a4 <iprintf>
			}
		}
	}
	if(Prev_IP_Source[Source_Index] != Recv_IP_Index[Source_Index]) //This if condition is to Avoid data missing when MLK Primary to Secondary shifting.
 80014b0:	7ffb      	ldrb	r3, [r7, #31]
 80014b2:	4a5c      	ldr	r2, [pc, #368]	; (8001624 <EI_Data_Analyzer+0x318>)
 80014b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014b8:	7ffa      	ldrb	r2, [r7, #31]
 80014ba:	4955      	ldr	r1, [pc, #340]	; (8001610 <EI_Data_Analyzer+0x304>)
 80014bc:	5c8a      	ldrb	r2, [r1, r2]
 80014be:	4293      	cmp	r3, r2
 80014c0:	d014      	beq.n	80014ec <EI_Data_Analyzer+0x1e0>
	{
		Last_Recevied_Clock[Source_Index] = Cur_Ticks;
 80014c2:	7ffb      	ldrb	r3, [r7, #31]
 80014c4:	4958      	ldr	r1, [pc, #352]	; (8001628 <EI_Data_Analyzer+0x31c>)
 80014c6:	68fa      	ldr	r2, [r7, #12]
 80014c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Last_Recevied_Clock_ValidMsgs[Source_Index] = Cur_Ticks;
 80014cc:	7ffb      	ldrb	r3, [r7, #31]
 80014ce:	4957      	ldr	r1, [pc, #348]	; (800162c <EI_Data_Analyzer+0x320>)
 80014d0:	68fa      	ldr	r2, [r7, #12]
 80014d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Prev_IP_Source[Source_Index] = Recv_IP_Index[Source_Index];
 80014d6:	7ffb      	ldrb	r3, [r7, #31]
 80014d8:	4a4d      	ldr	r2, [pc, #308]	; (8001610 <EI_Data_Analyzer+0x304>)
 80014da:	5cd2      	ldrb	r2, [r2, r3]
 80014dc:	7ffb      	ldrb	r3, [r7, #31]
 80014de:	4611      	mov	r1, r2
 80014e0:	4a50      	ldr	r2, [pc, #320]	; (8001624 <EI_Data_Analyzer+0x318>)
 80014e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		printf("MLK Shifting Detected\n");
 80014e6:	4852      	ldr	r0, [pc, #328]	; (8001630 <EI_Data_Analyzer+0x324>)
 80014e8:	f021 f8f8 	bl	80226dc <puts>
	}
	IP_Source_Peer[Source_Index] = Recv_IP_Index[Source_Index];
 80014ec:	7ffa      	ldrb	r2, [r7, #31]
 80014ee:	7ffb      	ldrb	r3, [r7, #31]
 80014f0:	4947      	ldr	r1, [pc, #284]	; (8001610 <EI_Data_Analyzer+0x304>)
 80014f2:	5c89      	ldrb	r1, [r1, r2]
 80014f4:	4a4f      	ldr	r2, [pc, #316]	; (8001634 <EI_Data_Analyzer+0x328>)
 80014f6:	54d1      	strb	r1, [r2, r3]

	if( HAL_Elaps_Ticks(Prev_INTR_Rcv_Clk[Source_Index]) >= EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Source_Index])
 80014f8:	7ffb      	ldrb	r3, [r7, #31]
 80014fa:	4a4f      	ldr	r2, [pc, #316]	; (8001638 <EI_Data_Analyzer+0x32c>)
 80014fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001500:	4618      	mov	r0, r3
 8001502:	f00d fa93 	bl	800ea2c <HAL_Elaps_Ticks>
 8001506:	4602      	mov	r2, r0
 8001508:	7ffb      	ldrb	r3, [r7, #31]
 800150a:	4935      	ldr	r1, [pc, #212]	; (80015e0 <EI_Data_Analyzer+0x2d4>)
 800150c:	338a      	adds	r3, #138	; 0x8a
 800150e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001512:	429a      	cmp	r2, r3
 8001514:	d318      	bcc.n	8001548 <EI_Data_Analyzer+0x23c>
	{
		Prev_INTR_Rcv_Clk[Source_Index] =Cur_Ticks;
 8001516:	7ffb      	ldrb	r3, [r7, #31]
 8001518:	4947      	ldr	r1, [pc, #284]	; (8001638 <EI_Data_Analyzer+0x32c>)
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Last_Recevied_Clock[Source_Index] = Cur_Ticks;
 8001520:	7ffb      	ldrb	r3, [r7, #31]
 8001522:	4941      	ldr	r1, [pc, #260]	; (8001628 <EI_Data_Analyzer+0x31c>)
 8001524:	68fa      	ldr	r2, [r7, #12]
 8001526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Last_Recevied_Clock_ValidMsgs[Source_Index] = Cur_Ticks;
 800152a:	7ffb      	ldrb	r3, [r7, #31]
 800152c:	493f      	ldr	r1, [pc, #252]	; (800162c <EI_Data_Analyzer+0x320>)
 800152e:	68fa      	ldr	r2, [r7, #12]
 8001530:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		printf("EIPC Shifting Detected:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8001534:	7ffb      	ldrb	r3, [r7, #31]
 8001536:	4a2a      	ldr	r2, [pc, #168]	; (80015e0 <EI_Data_Analyzer+0x2d4>)
 8001538:	3366      	adds	r3, #102	; 0x66
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	4413      	add	r3, r2
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	4619      	mov	r1, r3
 8001542:	483e      	ldr	r0, [pc, #248]	; (800163c <EI_Data_Analyzer+0x330>)
 8001544:	f021 f82e 	bl	80225a4 <iprintf>
	}
	Prev_INTR_Rcv_Clk[Source_Index] = Cur_Ticks;
 8001548:	7ffb      	ldrb	r3, [r7, #31]
 800154a:	493b      	ldr	r1, [pc, #236]	; (8001638 <EI_Data_Analyzer+0x32c>)
 800154c:	68fa      	ldr	r2, [r7, #12]
 800154e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	memset(&Rx_Print_st,0,sizeof(RX_Print_t));
 8001552:	2281      	movs	r2, #129	; 0x81
 8001554:	2100      	movs	r1, #0
 8001556:	483a      	ldr	r0, [pc, #232]	; (8001640 <EI_Data_Analyzer+0x334>)
 8001558:	f020 ff3c 	bl	80223d4 <memset>
	memcpy(Rx_Print_st.Print_Buff,Buff,Size);
 800155c:	887b      	ldrh	r3, [r7, #2]
 800155e:	461a      	mov	r2, r3
 8001560:	6879      	ldr	r1, [r7, #4]
 8001562:	4837      	ldr	r0, [pc, #220]	; (8001640 <EI_Data_Analyzer+0x334>)
 8001564:	f020 ff0e 	bl	8022384 <memcpy>
	Rx_Print_st.Size = Size;
 8001568:	887b      	ldrh	r3, [r7, #2]
 800156a:	b2da      	uxtb	r2, r3
 800156c:	4b34      	ldr	r3, [pc, #208]	; (8001640 <EI_Data_Analyzer+0x334>)
 800156e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	//Print_EI_DATA(Buff,RCV,Size); // To Print in Hitachi Format.

	Message_Type = (uint8_t)ExtractBits(0, 8, (unsigned char *)&Buff[7]);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	3307      	adds	r3, #7
 8001576:	461a      	mov	r2, r3
 8001578:	2108      	movs	r1, #8
 800157a:	2000      	movs	r0, #0
 800157c:	f7ff f84a 	bl	8000614 <ExtractBits>
 8001580:	4603      	mov	r3, r0
 8001582:	75fb      	strb	r3, [r7, #23]
	Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status = RECEIVED;
 8001584:	7ffa      	ldrb	r2, [r7, #31]
 8001586:	492f      	ldr	r1, [pc, #188]	; (8001644 <EI_Data_Analyzer+0x338>)
 8001588:	4613      	mov	r3, r2
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	4413      	add	r3, r2
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	440b      	add	r3, r1
 8001592:	3303      	adds	r3, #3
 8001594:	2201      	movs	r2, #1
 8001596:	701a      	strb	r2, [r3, #0]


	Last_ReceptionClk[Source_Index] = Cur_Ticks;
 8001598:	7ffb      	ldrb	r3, [r7, #31]
 800159a:	492b      	ldr	r1, [pc, #172]	; (8001648 <EI_Data_Analyzer+0x33c>)
 800159c:	68fa      	ldr	r2, [r7, #12]
 800159e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Check_Other_EiPC_Packet(Source_Index);
 80015a2:	7ffb      	ldrb	r3, [r7, #31]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f006 fbd9 	bl	8007d5c <Check_Other_EiPC_Packet>
	switch (Message_Type)
 80015aa:	7dfb      	ldrb	r3, [r7, #23]
 80015ac:	3b01      	subs	r3, #1
 80015ae:	2b05      	cmp	r3, #5
 80015b0:	d870      	bhi.n	8001694 <EI_Data_Analyzer+0x388>
 80015b2:	a201      	add	r2, pc, #4	; (adr r2, 80015b8 <EI_Data_Analyzer+0x2ac>)
 80015b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015b8:	0800164d 	.word	0x0800164d
 80015bc:	0800165d 	.word	0x0800165d
 80015c0:	0800166d 	.word	0x0800166d
 80015c4:	08001675 	.word	0x08001675
 80015c8:	08001695 	.word	0x08001695
 80015cc:	08001685 	.word	0x08001685
 80015d0:	20000108 	.word	0x20000108
 80015d4:	08023d28 	.word	0x08023d28
 80015d8:	08023d68 	.word	0x08023d68
 80015dc:	20000305 	.word	0x20000305
 80015e0:	20000304 	.word	0x20000304
 80015e4:	20000645 	.word	0x20000645
 80015e8:	08023d74 	.word	0x08023d74
 80015ec:	08023db0 	.word	0x08023db0
 80015f0:	08023dcc 	.word	0x08023dcc
 80015f4:	08023df0 	.word	0x08023df0
 80015f8:	20001968 	.word	0x20001968
 80015fc:	08023e28 	.word	0x08023e28
 8001600:	08023e4c 	.word	0x08023e4c
 8001604:	08023e5c 	.word	0x08023e5c
 8001608:	08023e6c 	.word	0x08023e6c
 800160c:	08023ea0 	.word	0x08023ea0
 8001610:	2000108c 	.word	0x2000108c
 8001614:	08023ec0 	.word	0x08023ec0
 8001618:	08023ed0 	.word	0x08023ed0
 800161c:	08023ee0 	.word	0x08023ee0
 8001620:	08023ef8 	.word	0x08023ef8
 8001624:	20000f88 	.word	0x20000f88
 8001628:	20000fb0 	.word	0x20000fb0
 800162c:	20000fd8 	.word	0x20000fd8
 8001630:	08023f1c 	.word	0x08023f1c
 8001634:	20001030 	.word	0x20001030
 8001638:	2000103c 	.word	0x2000103c
 800163c:	08023f34 	.word	0x08023f34
 8001640:	20001c1c 	.word	0x20001c1c
 8001644:	20001680 	.word	0x20001680
 8001648:	20000e80 	.word	0x20000e80
	{
	case INIT_MSG:
		//printf("\nReceived Init Message\n");
		Init_Msg_extr(Buff, Size, Source_Index, Dest_Index);
 800164c:	887b      	ldrh	r3, [r7, #2]
 800164e:	b2d9      	uxtb	r1, r3
 8001650:	7fbb      	ldrb	r3, [r7, #30]
 8001652:	7ffa      	ldrb	r2, [r7, #31]
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f000 f82d 	bl	80016b4 <Init_Msg_extr>
		break;
 800165a:	e024      	b.n	80016a6 <EI_Data_Analyzer+0x39a>

	case VDATAMSG:
		//printf("\nReceived VITAL DATA Message\n");
		Vital_Msg_extr(Buff, Size, Source_Index, Dest_Index);
 800165c:	887b      	ldrh	r3, [r7, #2]
 800165e:	b2d9      	uxtb	r1, r3
 8001660:	7fbb      	ldrb	r3, [r7, #30]
 8001662:	7ffa      	ldrb	r2, [r7, #31]
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f001 fbc3 	bl	8002df0 <Vital_Msg_extr>
		break;
 800166a:	e01c      	b.n	80016a6 <EI_Data_Analyzer+0x39a>

	case NVDATAMSG:
		printf("\nReceived NON-VITAL DATA Message\n");
 800166c:	480f      	ldr	r0, [pc, #60]	; (80016ac <EI_Data_Analyzer+0x3a0>)
 800166e:	f021 f835 	bl	80226dc <puts>
		break;
 8001672:	e018      	b.n	80016a6 <EI_Data_Analyzer+0x39a>

	case STATUSMSG:
		//printf("\nReceived STATUS Message\n");
		Status_Msg_Extr(Buff, Size, Source_Index, Dest_Index);
 8001674:	887b      	ldrh	r3, [r7, #2]
 8001676:	b2d9      	uxtb	r1, r3
 8001678:	7fbb      	ldrb	r3, [r7, #30]
 800167a:	7ffa      	ldrb	r2, [r7, #31]
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f003 fe4b 	bl	8005318 <Status_Msg_Extr>
		break;
 8001682:	e010      	b.n	80016a6 <EI_Data_Analyzer+0x39a>

	case SERVICEMSG:
		//printf("\nReceived SERVICE Message\n");
		Service_Msg_Extr(Buff, Size, Source_Index, Dest_Index);
 8001684:	887b      	ldrh	r3, [r7, #2]
 8001686:	b2d9      	uxtb	r1, r3
 8001688:	7fbb      	ldrb	r3, [r7, #30]
 800168a:	7ffa      	ldrb	r2, [r7, #31]
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f005 f843 	bl	8006718 <Service_Msg_Extr>
		break;
 8001692:	e008      	b.n	80016a6 <EI_Data_Analyzer+0x39a>

	default:
		printf("Received \"%d\" Message type\n", Message_Type);
 8001694:	7dfb      	ldrb	r3, [r7, #23]
 8001696:	4619      	mov	r1, r3
 8001698:	4805      	ldr	r0, [pc, #20]	; (80016b0 <EI_Data_Analyzer+0x3a4>)
 800169a:	f020 ff83 	bl	80225a4 <iprintf>
		break;
 800169e:	e002      	b.n	80016a6 <EI_Data_Analyzer+0x39a>
			return;
 80016a0:	bf00      	nop
 80016a2:	e000      	b.n	80016a6 <EI_Data_Analyzer+0x39a>
		return;
 80016a4:	bf00      	nop
	} /* Switch */

} /*  EI_Data_Analyzer */
 80016a6:	3720      	adds	r7, #32
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	08023f50 	.word	0x08023f50
 80016b0:	08023f74 	.word	0x08023f74

080016b4 <Init_Msg_extr>:

void Init_Msg_extr(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 80016b4:	b590      	push	{r4, r7, lr}
 80016b6:	b089      	sub	sp, #36	; 0x24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	4608      	mov	r0, r1
 80016be:	4611      	mov	r1, r2
 80016c0:	461a      	mov	r2, r3
 80016c2:	4603      	mov	r3, r0
 80016c4:	70fb      	strb	r3, [r7, #3]
 80016c6:	460b      	mov	r3, r1
 80016c8:	70bb      	strb	r3, [r7, #2]
 80016ca:	4613      	mov	r3, r2
 80016cc:	707b      	strb	r3, [r7, #1]
	// unsigned int Traverser=0;
	uint16_t Recv_App_CRC = 0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	837b      	strh	r3, [r7, #26]
	uint8_t Recv_Inputs = 0;
 80016d2:	2300      	movs	r3, #0
 80016d4:	767b      	strb	r3, [r7, #25]
	uint32_t Calc_CRC = 0;
 80016d6:	2300      	movs	r3, #0
 80016d8:	617b      	str	r3, [r7, #20]
	uint32_t Recv_CRC = 0;
 80016da:	2300      	movs	r3, #0
 80016dc:	613b      	str	r3, [r7, #16]
	uint32_t Cur_Ticks = HAL_GetTick();
 80016de:	f013 ff57 	bl	8015590 <HAL_GetTick>
 80016e2:	60f8      	str	r0, [r7, #12]
	BITSTUFFINIT(0, 0);
 80016e4:	2300      	movs	r3, #0
 80016e6:	83fb      	strh	r3, [r7, #30]
 80016e8:	2300      	movs	r3, #0
 80016ea:	83bb      	strh	r3, [r7, #28]

	Calc_CRC = CalculateDirectReverseCrc(Buff, Length - 5);
 80016ec:	78fb      	ldrb	r3, [r7, #3]
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	3b05      	subs	r3, #5
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	4619      	mov	r1, r3
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f011 fb72 	bl	8012de0 <CalculateDirectReverseCrc>
 80016fc:	6178      	str	r0, [r7, #20]
	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 80016fe:	78fb      	ldrb	r3, [r7, #3]
 8001700:	3b05      	subs	r3, #5
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	441a      	add	r2, r3
 8001706:	8bbb      	ldrh	r3, [r7, #28]
 8001708:	2120      	movs	r1, #32
 800170a:	4618      	mov	r0, r3
 800170c:	f7fe ff82 	bl	8000614 <ExtractBits>
 8001710:	6138      	str	r0, [r7, #16]

	if(Recv_CRC != Calc_CRC)
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	429a      	cmp	r2, r3
 8001718:	d013      	beq.n	8001742 <Init_Msg_extr+0x8e>
	{
		printf("Init Message CRC fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 800171a:	78bb      	ldrb	r3, [r7, #2]
 800171c:	4a29      	ldr	r2, [pc, #164]	; (80017c4 <Init_Msg_extr+0x110>)
 800171e:	3366      	adds	r3, #102	; 0x66
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	4413      	add	r3, r2
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	4619      	mov	r1, r3
 8001728:	4827      	ldr	r0, [pc, #156]	; (80017c8 <Init_Msg_extr+0x114>)
 800172a:	f020 ff3b 	bl	80225a4 <iprintf>
		printf("R-CRC:0x%08lX\n",Recv_CRC);
 800172e:	6939      	ldr	r1, [r7, #16]
 8001730:	4826      	ldr	r0, [pc, #152]	; (80017cc <Init_Msg_extr+0x118>)
 8001732:	f020 ff37 	bl	80225a4 <iprintf>
		printf("C-CRC:0x%08lX\n",Calc_CRC);
 8001736:	6979      	ldr	r1, [r7, #20]
 8001738:	4825      	ldr	r0, [pc, #148]	; (80017d0 <Init_Msg_extr+0x11c>)
 800173a:	f020 ff33 	bl	80225a4 <iprintf>
		return;
 800173e:	f000 be32 	b.w	80023a6 <Init_Msg_extr+0xcf2>
	}
	else
	{
		//printf("Received CRC       :0x%06lX\n",Recv_CRC);
		INIT_Received[Source_Index] = RECEIVED;
 8001742:	78bb      	ldrb	r3, [r7, #2]
 8001744:	4a23      	ldr	r2, [pc, #140]	; (80017d4 <Init_Msg_extr+0x120>)
 8001746:	2101      	movs	r1, #1
 8001748:	54d1      	strb	r1, [r2, r3]
		Received_Init[Source_Index] = 1;
 800174a:	78bb      	ldrb	r3, [r7, #2]
 800174c:	4a22      	ldr	r2, [pc, #136]	; (80017d8 <Init_Msg_extr+0x124>)
 800174e:	2101      	movs	r1, #1
 8001750:	54d1      	strb	r1, [r2, r3]
	}

	Recv_App_CRC = ExtractBits(ucBit, 16, (unsigned char *)&Buff[29]);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f103 021d 	add.w	r2, r3, #29
 8001758:	8bbb      	ldrh	r3, [r7, #28]
 800175a:	2110      	movs	r1, #16
 800175c:	4618      	mov	r0, r3
 800175e:	f7fe ff59 	bl	8000614 <ExtractBits>
 8001762:	4603      	mov	r3, r0
 8001764:	837b      	strh	r3, [r7, #26]


	if(Recv_App_CRC != EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][Source_Index])
 8001766:	78bb      	ldrb	r3, [r7, #2]
 8001768:	4a16      	ldr	r2, [pc, #88]	; (80017c4 <Init_Msg_extr+0x110>)
 800176a:	33fe      	adds	r3, #254	; 0xfe
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	4413      	add	r3, r2
 8001770:	889b      	ldrh	r3, [r3, #4]
 8001772:	8b7a      	ldrh	r2, [r7, #26]
 8001774:	429a      	cmp	r2, r3
 8001776:	d03d      	beq.n	80017f4 <Init_Msg_extr+0x140>
	{
		App_Identity_CRC_Fail[Source_Index] = 1;
 8001778:	78bb      	ldrb	r3, [r7, #2]
 800177a:	4a18      	ldr	r2, [pc, #96]	; (80017dc <Init_Msg_extr+0x128>)
 800177c:	2101      	movs	r1, #1
 800177e:	54d1      	strb	r1, [r2, r3]
		printf("Received App Identity CRC is not Matching for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8001780:	78bb      	ldrb	r3, [r7, #2]
 8001782:	4a10      	ldr	r2, [pc, #64]	; (80017c4 <Init_Msg_extr+0x110>)
 8001784:	3366      	adds	r3, #102	; 0x66
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	4413      	add	r3, r2
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	4619      	mov	r1, r3
 800178e:	4814      	ldr	r0, [pc, #80]	; (80017e0 <Init_Msg_extr+0x12c>)
 8001790:	f020 ff08 	bl	80225a4 <iprintf>
		printf("Received App Identity CRC:0X%04X\n",Recv_App_CRC);
 8001794:	8b7b      	ldrh	r3, [r7, #26]
 8001796:	4619      	mov	r1, r3
 8001798:	4812      	ldr	r0, [pc, #72]	; (80017e4 <Init_Msg_extr+0x130>)
 800179a:	f020 ff03 	bl	80225a4 <iprintf>
		printf("Expected App Identity CRC:0X%04X\n",EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][Source_Index]);
 800179e:	78bb      	ldrb	r3, [r7, #2]
 80017a0:	4a08      	ldr	r2, [pc, #32]	; (80017c4 <Init_Msg_extr+0x110>)
 80017a2:	33fe      	adds	r3, #254	; 0xfe
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	4413      	add	r3, r2
 80017a8:	889b      	ldrh	r3, [r3, #4]
 80017aa:	4619      	mov	r1, r3
 80017ac:	480e      	ldr	r0, [pc, #56]	; (80017e8 <Init_Msg_extr+0x134>)
 80017ae:	f020 fef9 	bl	80225a4 <iprintf>

		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)
 80017b2:	490e      	ldr	r1, [pc, #56]	; (80017ec <Init_Msg_extr+0x138>)
 80017b4:	480e      	ldr	r0, [pc, #56]	; (80017f0 <Init_Msg_extr+0x13c>)
 80017b6:	f7fe fd43 	bl	8000240 <strcmp>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d01d      	beq.n	80017fc <Init_Msg_extr+0x148>
		{
			return;
 80017c0:	f000 bdf1 	b.w	80023a6 <Init_Msg_extr+0xcf2>
 80017c4:	20000304 	.word	0x20000304
 80017c8:	08023f90 	.word	0x08023f90
 80017cc:	08023fac 	.word	0x08023fac
 80017d0:	08023fbc 	.word	0x08023fbc
 80017d4:	20001000 	.word	0x20001000
 80017d8:	20001018 	.word	0x20001018
 80017dc:	2000100c 	.word	0x2000100c
 80017e0:	08023fcc 	.word	0x08023fcc
 80017e4:	08024004 	.word	0x08024004
 80017e8:	08024028 	.word	0x08024028
 80017ec:	08023d68 	.word	0x08023d68
 80017f0:	20000305 	.word	0x20000305
		}
	}
	else
	{
		App_Identity_CRC_Fail[Source_Index] = 0;
 80017f4:	78bb      	ldrb	r3, [r7, #2]
 80017f6:	4aab      	ldr	r2, [pc, #684]	; (8001aa4 <Init_Msg_extr+0x3f0>)
 80017f8:	2100      	movs	r1, #0
 80017fa:	54d1      	strb	r1, [r2, r3]
	}

	Recv_Inputs = ExtractBits(ucBit, 8, (unsigned char *)&Buff[36]);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8001802:	8bbb      	ldrh	r3, [r7, #28]
 8001804:	2108      	movs	r1, #8
 8001806:	4618      	mov	r0, r3
 8001808:	f7fe ff04 	bl	8000614 <ExtractBits>
 800180c:	4603      	mov	r3, r0
 800180e:	767b      	strb	r3, [r7, #25]
	if(Recv_Inputs != EI_data.Hitachi_st.Bool_outputs[Source_Index])
 8001810:	78bb      	ldrb	r3, [r7, #2]
 8001812:	4aa5      	ldr	r2, [pc, #660]	; (8001aa8 <Init_Msg_extr+0x3f4>)
 8001814:	4413      	add	r3, r2
 8001816:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 800181a:	7e7a      	ldrb	r2, [r7, #25]
 800181c:	429a      	cmp	r2, r3
 800181e:	d01f      	beq.n	8001860 <Init_Msg_extr+0x1ac>
	{
		printf("Vital Inputs Not Matching for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8001820:	78bb      	ldrb	r3, [r7, #2]
 8001822:	4aa1      	ldr	r2, [pc, #644]	; (8001aa8 <Init_Msg_extr+0x3f4>)
 8001824:	3366      	adds	r3, #102	; 0x66
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	4413      	add	r3, r2
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	4619      	mov	r1, r3
 800182e:	489f      	ldr	r0, [pc, #636]	; (8001aac <Init_Msg_extr+0x3f8>)
 8001830:	f020 feb8 	bl	80225a4 <iprintf>
		printf("Expected Inputs:%u\n",EI_data.Hitachi_st.Bool_outputs[Source_Index]);
 8001834:	78bb      	ldrb	r3, [r7, #2]
 8001836:	4a9c      	ldr	r2, [pc, #624]	; (8001aa8 <Init_Msg_extr+0x3f4>)
 8001838:	4413      	add	r3, r2
 800183a:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 800183e:	4619      	mov	r1, r3
 8001840:	489b      	ldr	r0, [pc, #620]	; (8001ab0 <Init_Msg_extr+0x3fc>)
 8001842:	f020 feaf 	bl	80225a4 <iprintf>
		printf("Received Inputs:%u\n",Recv_Inputs);
 8001846:	7e7b      	ldrb	r3, [r7, #25]
 8001848:	4619      	mov	r1, r3
 800184a:	489a      	ldr	r0, [pc, #616]	; (8001ab4 <Init_Msg_extr+0x400>)
 800184c:	f020 feaa 	bl	80225a4 <iprintf>

		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)
 8001850:	4999      	ldr	r1, [pc, #612]	; (8001ab8 <Init_Msg_extr+0x404>)
 8001852:	489a      	ldr	r0, [pc, #616]	; (8001abc <Init_Msg_extr+0x408>)
 8001854:	f7fe fcf4 	bl	8000240 <strcmp>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	f040 85a2 	bne.w	80023a4 <Init_Msg_extr+0xcf0>
			return;
		}
	}


	Last_Recevied_Clock[Source_Index] = Cur_Ticks;
 8001860:	78bb      	ldrb	r3, [r7, #2]
 8001862:	4997      	ldr	r1, [pc, #604]	; (8001ac0 <Init_Msg_extr+0x40c>)
 8001864:	68fa      	ldr	r2, [r7, #12]
 8001866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff); // To detected EiPC shifting Faster
	Received_Init[Source_Index] = SET;
 800186a:	78bb      	ldrb	r3, [r7, #2]
 800186c:	4a95      	ldr	r2, [pc, #596]	; (8001ac4 <Init_Msg_extr+0x410>)
 800186e:	2101      	movs	r1, #1
 8001870:	54d1      	strb	r1, [r2, r3]
	Init_Msg_Sent_After_Timeout[Source_Index] = 0;
 8001872:	78bb      	ldrb	r3, [r7, #2]
 8001874:	4a94      	ldr	r2, [pc, #592]	; (8001ac8 <Init_Msg_extr+0x414>)
 8001876:	2100      	movs	r1, #0
 8001878:	54d1      	strb	r1, [r2, r3]
	Last_Received_Init_Clk[Source_Index] = Cur_Ticks;
 800187a:	78bb      	ldrb	r3, [r7, #2]
 800187c:	4993      	ldr	r1, [pc, #588]	; (8001acc <Init_Msg_extr+0x418>)
 800187e:	68fa      	ldr	r2, [r7, #12]
 8001880:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//		{
	//			Link_Establish_Clock[Source_Index] = TWO_SEC;
	//		}
	//	}

	BITSTUFFINC(8); // Incrementing to escape SOM
 8001884:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001888:	3308      	adds	r3, #8
 800188a:	2b00      	cmp	r3, #0
 800188c:	da00      	bge.n	8001890 <Init_Msg_extr+0x1dc>
 800188e:	3307      	adds	r3, #7
 8001890:	10db      	asrs	r3, r3, #3
 8001892:	b29a      	uxth	r2, r3
 8001894:	8bfb      	ldrh	r3, [r7, #30]
 8001896:	4413      	add	r3, r2
 8001898:	83fb      	strh	r3, [r7, #30]
 800189a:	8bbb      	ldrh	r3, [r7, #28]
 800189c:	3308      	adds	r3, #8
 800189e:	b29b      	uxth	r3, r3
 80018a0:	b21b      	sxth	r3, r3
 80018a2:	425a      	negs	r2, r3
 80018a4:	f003 0307 	and.w	r3, r3, #7
 80018a8:	f002 0207 	and.w	r2, r2, #7
 80018ac:	bf58      	it	pl
 80018ae:	4253      	negpl	r3, r2
 80018b0:	b21b      	sxth	r3, r3
 80018b2:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80018b4:	8bfb      	ldrh	r3, [r7, #30]
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	441a      	add	r2, r3
 80018ba:	8bbb      	ldrh	r3, [r7, #28]
 80018bc:	2110      	movs	r1, #16
 80018be:	4618      	mov	r0, r3
 80018c0:	f7fe fea8 	bl	8000614 <ExtractBits>
 80018c4:	4602      	mov	r2, r0
 80018c6:	78bb      	ldrb	r3, [r7, #2]
 80018c8:	b291      	uxth	r1, r2
 80018ca:	4a81      	ldr	r2, [pc, #516]	; (8001ad0 <Init_Msg_extr+0x41c>)
 80018cc:	015b      	lsls	r3, r3, #5
 80018ce:	4413      	add	r3, r2
 80018d0:	3310      	adds	r3, #16
 80018d2:	460a      	mov	r2, r1
 80018d4:	801a      	strh	r2, [r3, #0]
	printf("DA:%u ",Hitachi_Init_st[Source_Index].Des_Addr);
 80018d6:	78bb      	ldrb	r3, [r7, #2]
 80018d8:	4a7d      	ldr	r2, [pc, #500]	; (8001ad0 <Init_Msg_extr+0x41c>)
 80018da:	015b      	lsls	r3, r3, #5
 80018dc:	4413      	add	r3, r2
 80018de:	3310      	adds	r3, #16
 80018e0:	881b      	ldrh	r3, [r3, #0]
 80018e2:	4619      	mov	r1, r3
 80018e4:	487b      	ldr	r0, [pc, #492]	; (8001ad4 <Init_Msg_extr+0x420>)
 80018e6:	f020 fe5d 	bl	80225a4 <iprintf>
	BITSTUFFINC(16);
 80018ea:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80018ee:	3310      	adds	r3, #16
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	da00      	bge.n	80018f6 <Init_Msg_extr+0x242>
 80018f4:	3307      	adds	r3, #7
 80018f6:	10db      	asrs	r3, r3, #3
 80018f8:	b29a      	uxth	r2, r3
 80018fa:	8bfb      	ldrh	r3, [r7, #30]
 80018fc:	4413      	add	r3, r2
 80018fe:	83fb      	strh	r3, [r7, #30]
 8001900:	8bbb      	ldrh	r3, [r7, #28]
 8001902:	3310      	adds	r3, #16
 8001904:	b29b      	uxth	r3, r3
 8001906:	b21b      	sxth	r3, r3
 8001908:	425a      	negs	r2, r3
 800190a:	f003 0307 	and.w	r3, r3, #7
 800190e:	f002 0207 	and.w	r2, r2, #7
 8001912:	bf58      	it	pl
 8001914:	4253      	negpl	r3, r2
 8001916:	b21b      	sxth	r3, r3
 8001918:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 800191a:	8bfb      	ldrh	r3, [r7, #30]
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	441a      	add	r2, r3
 8001920:	8bbb      	ldrh	r3, [r7, #28]
 8001922:	2110      	movs	r1, #16
 8001924:	4618      	mov	r0, r3
 8001926:	f7fe fe75 	bl	8000614 <ExtractBits>
 800192a:	4602      	mov	r2, r0
 800192c:	78bb      	ldrb	r3, [r7, #2]
 800192e:	b291      	uxth	r1, r2
 8001930:	4a67      	ldr	r2, [pc, #412]	; (8001ad0 <Init_Msg_extr+0x41c>)
 8001932:	015b      	lsls	r3, r3, #5
 8001934:	4413      	add	r3, r2
 8001936:	330e      	adds	r3, #14
 8001938:	460a      	mov	r2, r1
 800193a:	801a      	strh	r2, [r3, #0]
	printf("SA:%u ",Hitachi_Init_st[Source_Index].Src_Addr);
 800193c:	78bb      	ldrb	r3, [r7, #2]
 800193e:	4a64      	ldr	r2, [pc, #400]	; (8001ad0 <Init_Msg_extr+0x41c>)
 8001940:	015b      	lsls	r3, r3, #5
 8001942:	4413      	add	r3, r2
 8001944:	330e      	adds	r3, #14
 8001946:	881b      	ldrh	r3, [r3, #0]
 8001948:	4619      	mov	r1, r3
 800194a:	4863      	ldr	r0, [pc, #396]	; (8001ad8 <Init_Msg_extr+0x424>)
 800194c:	f020 fe2a 	bl	80225a4 <iprintf>
	BITSTUFFINC(16);
 8001950:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001954:	3310      	adds	r3, #16
 8001956:	2b00      	cmp	r3, #0
 8001958:	da00      	bge.n	800195c <Init_Msg_extr+0x2a8>
 800195a:	3307      	adds	r3, #7
 800195c:	10db      	asrs	r3, r3, #3
 800195e:	b29a      	uxth	r2, r3
 8001960:	8bfb      	ldrh	r3, [r7, #30]
 8001962:	4413      	add	r3, r2
 8001964:	83fb      	strh	r3, [r7, #30]
 8001966:	8bbb      	ldrh	r3, [r7, #28]
 8001968:	3310      	adds	r3, #16
 800196a:	b29b      	uxth	r3, r3
 800196c:	b21b      	sxth	r3, r3
 800196e:	425a      	negs	r2, r3
 8001970:	f003 0307 	and.w	r3, r3, #7
 8001974:	f002 0207 	and.w	r2, r2, #7
 8001978:	bf58      	it	pl
 800197a:	4253      	negpl	r3, r2
 800197c:	b21b      	sxth	r3, r3
 800197e:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001980:	8bfb      	ldrh	r3, [r7, #30]
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	441a      	add	r2, r3
 8001986:	8bbb      	ldrh	r3, [r7, #28]
 8001988:	2108      	movs	r1, #8
 800198a:	4618      	mov	r0, r3
 800198c:	f7fe fe42 	bl	8000614 <ExtractBits>
 8001990:	4602      	mov	r2, r0
 8001992:	78bb      	ldrb	r3, [r7, #2]
 8001994:	b2d1      	uxtb	r1, r2
 8001996:	4a4e      	ldr	r2, [pc, #312]	; (8001ad0 <Init_Msg_extr+0x41c>)
 8001998:	015b      	lsls	r3, r3, #5
 800199a:	4413      	add	r3, r2
 800199c:	460a      	mov	r2, r1
 800199e:	701a      	strb	r2, [r3, #0]
	//printf("Tx_seq             :%u\n",Hitachi_Init_st[Source_Index].Tx_Seq);
	BITSTUFFINC(8);
 80019a0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80019a4:	3308      	adds	r3, #8
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	da00      	bge.n	80019ac <Init_Msg_extr+0x2f8>
 80019aa:	3307      	adds	r3, #7
 80019ac:	10db      	asrs	r3, r3, #3
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	8bfb      	ldrh	r3, [r7, #30]
 80019b2:	4413      	add	r3, r2
 80019b4:	83fb      	strh	r3, [r7, #30]
 80019b6:	8bbb      	ldrh	r3, [r7, #28]
 80019b8:	3308      	adds	r3, #8
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	b21b      	sxth	r3, r3
 80019be:	425a      	negs	r2, r3
 80019c0:	f003 0307 	and.w	r3, r3, #7
 80019c4:	f002 0207 	and.w	r2, r2, #7
 80019c8:	bf58      	it	pl
 80019ca:	4253      	negpl	r3, r2
 80019cc:	b21b      	sxth	r3, r3
 80019ce:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80019d0:	8bfb      	ldrh	r3, [r7, #30]
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	441a      	add	r2, r3
 80019d6:	8bbb      	ldrh	r3, [r7, #28]
 80019d8:	2108      	movs	r1, #8
 80019da:	4618      	mov	r0, r3
 80019dc:	f7fe fe1a 	bl	8000614 <ExtractBits>
 80019e0:	4602      	mov	r2, r0
 80019e2:	78bb      	ldrb	r3, [r7, #2]
 80019e4:	b2d1      	uxtb	r1, r2
 80019e6:	4a3a      	ldr	r2, [pc, #232]	; (8001ad0 <Init_Msg_extr+0x41c>)
 80019e8:	015b      	lsls	r3, r3, #5
 80019ea:	4413      	add	r3, r2
 80019ec:	3301      	adds	r3, #1
 80019ee:	460a      	mov	r2, r1
 80019f0:	701a      	strb	r2, [r3, #0]
	//printf("Rx_seq             :%u\n", Hitachi_Init_st[Source_Index].Rx_Seq);
	BITSTUFFINC(8);
 80019f2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80019f6:	3308      	adds	r3, #8
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	da00      	bge.n	80019fe <Init_Msg_extr+0x34a>
 80019fc:	3307      	adds	r3, #7
 80019fe:	10db      	asrs	r3, r3, #3
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	8bfb      	ldrh	r3, [r7, #30]
 8001a04:	4413      	add	r3, r2
 8001a06:	83fb      	strh	r3, [r7, #30]
 8001a08:	8bbb      	ldrh	r3, [r7, #28]
 8001a0a:	3308      	adds	r3, #8
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	b21b      	sxth	r3, r3
 8001a10:	425a      	negs	r2, r3
 8001a12:	f003 0307 	and.w	r3, r3, #7
 8001a16:	f002 0207 	and.w	r2, r2, #7
 8001a1a:	bf58      	it	pl
 8001a1c:	4253      	negpl	r3, r2
 8001a1e:	b21b      	sxth	r3, r3
 8001a20:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001a22:	8bfb      	ldrh	r3, [r7, #30]
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	441a      	add	r2, r3
 8001a28:	8bbb      	ldrh	r3, [r7, #28]
 8001a2a:	2108      	movs	r1, #8
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7fe fdf1 	bl	8000614 <ExtractBits>
 8001a32:	4602      	mov	r2, r0
 8001a34:	78bb      	ldrb	r3, [r7, #2]
 8001a36:	b2d1      	uxtb	r1, r2
 8001a38:	4a25      	ldr	r2, [pc, #148]	; (8001ad0 <Init_Msg_extr+0x41c>)
 8001a3a:	015b      	lsls	r3, r3, #5
 8001a3c:	4413      	add	r3, r2
 8001a3e:	3302      	adds	r3, #2
 8001a40:	460a      	mov	r2, r1
 8001a42:	701a      	strb	r2, [r3, #0]
	//printf("Msg_Type           :%u\n", Hitachi_Init_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 8001a44:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001a48:	3308      	adds	r3, #8
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	da00      	bge.n	8001a50 <Init_Msg_extr+0x39c>
 8001a4e:	3307      	adds	r3, #7
 8001a50:	10db      	asrs	r3, r3, #3
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	8bfb      	ldrh	r3, [r7, #30]
 8001a56:	4413      	add	r3, r2
 8001a58:	83fb      	strh	r3, [r7, #30]
 8001a5a:	8bbb      	ldrh	r3, [r7, #28]
 8001a5c:	3308      	adds	r3, #8
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	b21b      	sxth	r3, r3
 8001a62:	425a      	negs	r2, r3
 8001a64:	f003 0307 	and.w	r3, r3, #7
 8001a68:	f002 0207 	and.w	r2, r2, #7
 8001a6c:	bf58      	it	pl
 8001a6e:	4253      	negpl	r3, r2
 8001a70:	b21b      	sxth	r3, r3
 8001a72:	83bb      	strh	r3, [r7, #28]


	Hitachi_prms_st[Source_Index].Msg_Status_Flag = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8001a74:	8bfb      	ldrh	r3, [r7, #30]
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	441a      	add	r2, r3
 8001a7a:	8bbb      	ldrh	r3, [r7, #28]
 8001a7c:	2110      	movs	r1, #16
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7fe fdc8 	bl	8000614 <ExtractBits>
 8001a84:	4602      	mov	r2, r0
 8001a86:	78bb      	ldrb	r3, [r7, #2]
 8001a88:	b291      	uxth	r1, r2
 8001a8a:	4a14      	ldr	r2, [pc, #80]	; (8001adc <Init_Msg_extr+0x428>)
 8001a8c:	011b      	lsls	r3, r3, #4
 8001a8e:	4413      	add	r3, r2
 8001a90:	3304      	adds	r3, #4
 8001a92:	460a      	mov	r2, r1
 8001a94:	801a      	strh	r2, [r3, #0]
	BITSTUFFINC(16);
 8001a96:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001a9a:	3310      	adds	r3, #16
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	da1f      	bge.n	8001ae0 <Init_Msg_extr+0x42c>
 8001aa0:	3307      	adds	r3, #7
 8001aa2:	e01d      	b.n	8001ae0 <Init_Msg_extr+0x42c>
 8001aa4:	2000100c 	.word	0x2000100c
 8001aa8:	20000304 	.word	0x20000304
 8001aac:	0802404c 	.word	0x0802404c
 8001ab0:	08024074 	.word	0x08024074
 8001ab4:	08024088 	.word	0x08024088
 8001ab8:	08023d68 	.word	0x08023d68
 8001abc:	20000305 	.word	0x20000305
 8001ac0:	20000fb0 	.word	0x20000fb0
 8001ac4:	20001018 	.word	0x20001018
 8001ac8:	20001098 	.word	0x20001098
 8001acc:	200010a4 	.word	0x200010a4
 8001ad0:	20001270 	.word	0x20001270
 8001ad4:	0802409c 	.word	0x0802409c
 8001ad8:	080240a4 	.word	0x080240a4
 8001adc:	200011d0 	.word	0x200011d0
 8001ae0:	10db      	asrs	r3, r3, #3
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	8bfb      	ldrh	r3, [r7, #30]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	83fb      	strh	r3, [r7, #30]
 8001aea:	8bbb      	ldrh	r3, [r7, #28]
 8001aec:	3310      	adds	r3, #16
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	b21b      	sxth	r3, r3
 8001af2:	425a      	negs	r2, r3
 8001af4:	f003 0307 	and.w	r3, r3, #7
 8001af8:	f002 0207 	and.w	r2, r2, #7
 8001afc:	bf58      	it	pl
 8001afe:	4253      	negpl	r3, r2
 8001b00:	b21b      	sxth	r3, r3
 8001b02:	83bb      	strh	r3, [r7, #28]
	//printf("Msg_sts_flag       :0x%04X\n", Hitachi_prms_st[Source_Index].Msg_Status_Flag);

	//Debug_Status_Flag(Hitachi_prms_st[Source_Index].Msg_Status_Flag,Hitachi_Init_st[Source_Index].Msg_Type);

	if ( CHECKFLAG(TIME_STAMP,Hitachi_prms_st[Source_Index].Msg_Status_Flag)== SET) // Time-stamp Extraction
 8001b04:	78bb      	ldrb	r3, [r7, #2]
 8001b06:	4a8e      	ldr	r2, [pc, #568]	; (8001d40 <Init_Msg_extr+0x68c>)
 8001b08:	011b      	lsls	r3, r3, #4
 8001b0a:	4413      	add	r3, r2
 8001b0c:	3304      	adds	r3, #4
 8001b0e:	881b      	ldrh	r3, [r3, #0]
 8001b10:	f003 0320 	and.w	r3, r3, #32
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	f000 811d 	beq.w	8001d54 <Init_Msg_extr+0x6a0>
	{
		// printf("Time Included in the Data field\n");
		HITACHI_time_Stamp_st[Source_Index].YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001b1a:	8bfb      	ldrh	r3, [r7, #30]
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	441a      	add	r2, r3
 8001b20:	8bbb      	ldrh	r3, [r7, #28]
 8001b22:	2108      	movs	r1, #8
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7fe fd75 	bl	8000614 <ExtractBits>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	78ba      	ldrb	r2, [r7, #2]
 8001b2e:	b2d8      	uxtb	r0, r3
 8001b30:	4984      	ldr	r1, [pc, #528]	; (8001d44 <Init_Msg_extr+0x690>)
 8001b32:	4613      	mov	r3, r2
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	4413      	add	r3, r2
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	440b      	add	r3, r1
 8001b3c:	3305      	adds	r3, #5
 8001b3e:	4602      	mov	r2, r0
 8001b40:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8001b42:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001b46:	3308      	adds	r3, #8
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	da00      	bge.n	8001b4e <Init_Msg_extr+0x49a>
 8001b4c:	3307      	adds	r3, #7
 8001b4e:	10db      	asrs	r3, r3, #3
 8001b50:	b29a      	uxth	r2, r3
 8001b52:	8bfb      	ldrh	r3, [r7, #30]
 8001b54:	4413      	add	r3, r2
 8001b56:	83fb      	strh	r3, [r7, #30]
 8001b58:	8bbb      	ldrh	r3, [r7, #28]
 8001b5a:	3308      	adds	r3, #8
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	b21b      	sxth	r3, r3
 8001b60:	425a      	negs	r2, r3
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	f002 0207 	and.w	r2, r2, #7
 8001b6a:	bf58      	it	pl
 8001b6c:	4253      	negpl	r3, r2
 8001b6e:	b21b      	sxth	r3, r3
 8001b70:	83bb      	strh	r3, [r7, #28]
		//printf("YEAR               :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].YY);

		HITACHI_time_Stamp_st[Source_Index].MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001b72:	8bfb      	ldrh	r3, [r7, #30]
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	441a      	add	r2, r3
 8001b78:	8bbb      	ldrh	r3, [r7, #28]
 8001b7a:	2108      	movs	r1, #8
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7fe fd49 	bl	8000614 <ExtractBits>
 8001b82:	4603      	mov	r3, r0
 8001b84:	78ba      	ldrb	r2, [r7, #2]
 8001b86:	b2d8      	uxtb	r0, r3
 8001b88:	496e      	ldr	r1, [pc, #440]	; (8001d44 <Init_Msg_extr+0x690>)
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	4413      	add	r3, r2
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	440b      	add	r3, r1
 8001b94:	3304      	adds	r3, #4
 8001b96:	4602      	mov	r2, r0
 8001b98:	701a      	strb	r2, [r3, #0]
		//printf("Month              :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].YY);
		BITSTUFFINC(8);
 8001b9a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001b9e:	3308      	adds	r3, #8
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	da00      	bge.n	8001ba6 <Init_Msg_extr+0x4f2>
 8001ba4:	3307      	adds	r3, #7
 8001ba6:	10db      	asrs	r3, r3, #3
 8001ba8:	b29a      	uxth	r2, r3
 8001baa:	8bfb      	ldrh	r3, [r7, #30]
 8001bac:	4413      	add	r3, r2
 8001bae:	83fb      	strh	r3, [r7, #30]
 8001bb0:	8bbb      	ldrh	r3, [r7, #28]
 8001bb2:	3308      	adds	r3, #8
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	b21b      	sxth	r3, r3
 8001bb8:	425a      	negs	r2, r3
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	f002 0207 	and.w	r2, r2, #7
 8001bc2:	bf58      	it	pl
 8001bc4:	4253      	negpl	r3, r2
 8001bc6:	b21b      	sxth	r3, r3
 8001bc8:	83bb      	strh	r3, [r7, #28]

		HITACHI_time_Stamp_st[Source_Index].DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001bca:	8bfb      	ldrh	r3, [r7, #30]
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	441a      	add	r2, r3
 8001bd0:	8bbb      	ldrh	r3, [r7, #28]
 8001bd2:	2108      	movs	r1, #8
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7fe fd1d 	bl	8000614 <ExtractBits>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	78ba      	ldrb	r2, [r7, #2]
 8001bde:	b2d8      	uxtb	r0, r3
 8001be0:	4958      	ldr	r1, [pc, #352]	; (8001d44 <Init_Msg_extr+0x690>)
 8001be2:	4613      	mov	r3, r2
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	4413      	add	r3, r2
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	440b      	add	r3, r1
 8001bec:	3303      	adds	r3, #3
 8001bee:	4602      	mov	r2, r0
 8001bf0:	701a      	strb	r2, [r3, #0]
		//printf("Day                :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].DD);
		BITSTUFFINC(8);
 8001bf2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001bf6:	3308      	adds	r3, #8
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	da00      	bge.n	8001bfe <Init_Msg_extr+0x54a>
 8001bfc:	3307      	adds	r3, #7
 8001bfe:	10db      	asrs	r3, r3, #3
 8001c00:	b29a      	uxth	r2, r3
 8001c02:	8bfb      	ldrh	r3, [r7, #30]
 8001c04:	4413      	add	r3, r2
 8001c06:	83fb      	strh	r3, [r7, #30]
 8001c08:	8bbb      	ldrh	r3, [r7, #28]
 8001c0a:	3308      	adds	r3, #8
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	b21b      	sxth	r3, r3
 8001c10:	425a      	negs	r2, r3
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	f002 0207 	and.w	r2, r2, #7
 8001c1a:	bf58      	it	pl
 8001c1c:	4253      	negpl	r3, r2
 8001c1e:	b21b      	sxth	r3, r3
 8001c20:	83bb      	strh	r3, [r7, #28]

		HITACHI_time_Stamp_st[Source_Index].hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001c22:	8bfb      	ldrh	r3, [r7, #30]
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	441a      	add	r2, r3
 8001c28:	8bbb      	ldrh	r3, [r7, #28]
 8001c2a:	2108      	movs	r1, #8
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7fe fcf1 	bl	8000614 <ExtractBits>
 8001c32:	4603      	mov	r3, r0
 8001c34:	78ba      	ldrb	r2, [r7, #2]
 8001c36:	b2d8      	uxtb	r0, r3
 8001c38:	4942      	ldr	r1, [pc, #264]	; (8001d44 <Init_Msg_extr+0x690>)
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	4413      	add	r3, r2
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	440b      	add	r3, r1
 8001c44:	4602      	mov	r2, r0
 8001c46:	701a      	strb	r2, [r3, #0]
		//printf("HOURS              :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].hh);
		BITSTUFFINC(8);
 8001c48:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c4c:	3308      	adds	r3, #8
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	da00      	bge.n	8001c54 <Init_Msg_extr+0x5a0>
 8001c52:	3307      	adds	r3, #7
 8001c54:	10db      	asrs	r3, r3, #3
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	8bfb      	ldrh	r3, [r7, #30]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	83fb      	strh	r3, [r7, #30]
 8001c5e:	8bbb      	ldrh	r3, [r7, #28]
 8001c60:	3308      	adds	r3, #8
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	b21b      	sxth	r3, r3
 8001c66:	425a      	negs	r2, r3
 8001c68:	f003 0307 	and.w	r3, r3, #7
 8001c6c:	f002 0207 	and.w	r2, r2, #7
 8001c70:	bf58      	it	pl
 8001c72:	4253      	negpl	r3, r2
 8001c74:	b21b      	sxth	r3, r3
 8001c76:	83bb      	strh	r3, [r7, #28]

		HITACHI_time_Stamp_st[Source_Index].mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001c78:	8bfb      	ldrh	r3, [r7, #30]
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	441a      	add	r2, r3
 8001c7e:	8bbb      	ldrh	r3, [r7, #28]
 8001c80:	2108      	movs	r1, #8
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7fe fcc6 	bl	8000614 <ExtractBits>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	78ba      	ldrb	r2, [r7, #2]
 8001c8c:	b2d8      	uxtb	r0, r3
 8001c8e:	492d      	ldr	r1, [pc, #180]	; (8001d44 <Init_Msg_extr+0x690>)
 8001c90:	4613      	mov	r3, r2
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	4413      	add	r3, r2
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	440b      	add	r3, r1
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	701a      	strb	r2, [r3, #0]
		//printf("MIN                :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].mm);
		BITSTUFFINC(8);
 8001ca0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001ca4:	3308      	adds	r3, #8
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	da00      	bge.n	8001cac <Init_Msg_extr+0x5f8>
 8001caa:	3307      	adds	r3, #7
 8001cac:	10db      	asrs	r3, r3, #3
 8001cae:	b29a      	uxth	r2, r3
 8001cb0:	8bfb      	ldrh	r3, [r7, #30]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	83fb      	strh	r3, [r7, #30]
 8001cb6:	8bbb      	ldrh	r3, [r7, #28]
 8001cb8:	3308      	adds	r3, #8
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	b21b      	sxth	r3, r3
 8001cbe:	425a      	negs	r2, r3
 8001cc0:	f003 0307 	and.w	r3, r3, #7
 8001cc4:	f002 0207 	and.w	r2, r2, #7
 8001cc8:	bf58      	it	pl
 8001cca:	4253      	negpl	r3, r2
 8001ccc:	b21b      	sxth	r3, r3
 8001cce:	83bb      	strh	r3, [r7, #28]

		HITACHI_time_Stamp_st[Source_Index].ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001cd0:	8bfb      	ldrh	r3, [r7, #30]
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	441a      	add	r2, r3
 8001cd6:	8bbb      	ldrh	r3, [r7, #28]
 8001cd8:	2108      	movs	r1, #8
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7fe fc9a 	bl	8000614 <ExtractBits>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	78ba      	ldrb	r2, [r7, #2]
 8001ce4:	b2d8      	uxtb	r0, r3
 8001ce6:	4917      	ldr	r1, [pc, #92]	; (8001d44 <Init_Msg_extr+0x690>)
 8001ce8:	4613      	mov	r3, r2
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	4413      	add	r3, r2
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	440b      	add	r3, r1
 8001cf2:	3302      	adds	r3, #2
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	701a      	strb	r2, [r3, #0]
		//printf("SEC                :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].ss);
		BITSTUFFINC(8);
 8001cf8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001cfc:	3308      	adds	r3, #8
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	da00      	bge.n	8001d04 <Init_Msg_extr+0x650>
 8001d02:	3307      	adds	r3, #7
 8001d04:	10db      	asrs	r3, r3, #3
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	8bfb      	ldrh	r3, [r7, #30]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	83fb      	strh	r3, [r7, #30]
 8001d0e:	8bbb      	ldrh	r3, [r7, #28]
 8001d10:	3308      	adds	r3, #8
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	b21b      	sxth	r3, r3
 8001d16:	425a      	negs	r2, r3
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	f002 0207 	and.w	r2, r2, #7
 8001d20:	bf58      	it	pl
 8001d22:	4253      	negpl	r3, r2
 8001d24:	b21b      	sxth	r3, r3
 8001d26:	83bb      	strh	r3, [r7, #28]

		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
 8001d28:	78bb      	ldrb	r3, [r7, #2]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f006 fe68 	bl	8008a00 <IS_MLK_EIPC_TIME_MATCHING>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d00a      	beq.n	8001d4c <Init_Msg_extr+0x698>
 8001d36:	78bb      	ldrb	r3, [r7, #2]
 8001d38:	4a03      	ldr	r2, [pc, #12]	; (8001d48 <Init_Msg_extr+0x694>)
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	54d1      	strb	r1, [r2, r3]
 8001d3e:	e009      	b.n	8001d54 <Init_Msg_extr+0x6a0>
 8001d40:	200011d0 	.word	0x200011d0
 8001d44:	20001194 	.word	0x20001194
 8001d48:	200010e4 	.word	0x200010e4
 8001d4c:	78bb      	ldrb	r3, [r7, #2]
 8001d4e:	4aa4      	ldr	r2, [pc, #656]	; (8001fe0 <Init_Msg_extr+0x92c>)
 8001d50:	2101      	movs	r1, #1
 8001d52:	54d1      	strb	r1, [r2, r3]
	}

	Hitachi_Init_st[Source_Index].Init_Size = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001d54:	8bfb      	ldrh	r3, [r7, #30]
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	441a      	add	r2, r3
 8001d5a:	8bbb      	ldrh	r3, [r7, #28]
 8001d5c:	2108      	movs	r1, #8
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7fe fc58 	bl	8000614 <ExtractBits>
 8001d64:	4602      	mov	r2, r0
 8001d66:	78bb      	ldrb	r3, [r7, #2]
 8001d68:	b2d1      	uxtb	r1, r2
 8001d6a:	4a9e      	ldr	r2, [pc, #632]	; (8001fe4 <Init_Msg_extr+0x930>)
 8001d6c:	015b      	lsls	r3, r3, #5
 8001d6e:	4413      	add	r3, r2
 8001d70:	3303      	adds	r3, #3
 8001d72:	460a      	mov	r2, r1
 8001d74:	701a      	strb	r2, [r3, #0]
	//printf("sizofInitData      :0x%02X\n", Hitachi_Init_st[Source_Index].Init_Size);
	BITSTUFFINC(8);
 8001d76:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001d7a:	3308      	adds	r3, #8
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	da00      	bge.n	8001d82 <Init_Msg_extr+0x6ce>
 8001d80:	3307      	adds	r3, #7
 8001d82:	10db      	asrs	r3, r3, #3
 8001d84:	b29a      	uxth	r2, r3
 8001d86:	8bfb      	ldrh	r3, [r7, #30]
 8001d88:	4413      	add	r3, r2
 8001d8a:	83fb      	strh	r3, [r7, #30]
 8001d8c:	8bbb      	ldrh	r3, [r7, #28]
 8001d8e:	3308      	adds	r3, #8
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	b21b      	sxth	r3, r3
 8001d94:	425a      	negs	r2, r3
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	f002 0207 	and.w	r2, r2, #7
 8001d9e:	bf58      	it	pl
 8001da0:	4253      	negpl	r3, r2
 8001da2:	b21b      	sxth	r3, r3
 8001da4:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Protocol_Ver = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8001da6:	8bfb      	ldrh	r3, [r7, #30]
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	441a      	add	r2, r3
 8001dac:	8bbb      	ldrh	r3, [r7, #28]
 8001dae:	2110      	movs	r1, #16
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7fe fc2f 	bl	8000614 <ExtractBits>
 8001db6:	4602      	mov	r2, r0
 8001db8:	78bb      	ldrb	r3, [r7, #2]
 8001dba:	b291      	uxth	r1, r2
 8001dbc:	4a89      	ldr	r2, [pc, #548]	; (8001fe4 <Init_Msg_extr+0x930>)
 8001dbe:	015b      	lsls	r3, r3, #5
 8001dc0:	4413      	add	r3, r2
 8001dc2:	3312      	adds	r3, #18
 8001dc4:	460a      	mov	r2, r1
 8001dc6:	801a      	strh	r2, [r3, #0]
	//printf("Protocol_Ver       :0x%04X\n",Hitachi_Init_st[Source_Index].Protocol_Ver);
	BITSTUFFINC(16);
 8001dc8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001dcc:	3310      	adds	r3, #16
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	da00      	bge.n	8001dd4 <Init_Msg_extr+0x720>
 8001dd2:	3307      	adds	r3, #7
 8001dd4:	10db      	asrs	r3, r3, #3
 8001dd6:	b29a      	uxth	r2, r3
 8001dd8:	8bfb      	ldrh	r3, [r7, #30]
 8001dda:	4413      	add	r3, r2
 8001ddc:	83fb      	strh	r3, [r7, #30]
 8001dde:	8bbb      	ldrh	r3, [r7, #28]
 8001de0:	3310      	adds	r3, #16
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	b21b      	sxth	r3, r3
 8001de6:	425a      	negs	r2, r3
 8001de8:	f003 0307 	and.w	r3, r3, #7
 8001dec:	f002 0207 	and.w	r2, r2, #7
 8001df0:	bf58      	it	pl
 8001df2:	4253      	negpl	r3, r2
 8001df4:	b21b      	sxth	r3, r3
 8001df6:	83bb      	strh	r3, [r7, #28]

	memcpy(Hitachi_Init_st[Source_Index].Exe_Ver,&Buff[ucByte],6);
 8001df8:	78bb      	ldrb	r3, [r7, #2]
 8001dfa:	015b      	lsls	r3, r3, #5
 8001dfc:	4a79      	ldr	r2, [pc, #484]	; (8001fe4 <Init_Msg_extr+0x930>)
 8001dfe:	4413      	add	r3, r2
 8001e00:	1d18      	adds	r0, r3, #4
 8001e02:	8bfb      	ldrh	r3, [r7, #30]
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	4413      	add	r3, r2
 8001e08:	2206      	movs	r2, #6
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	f020 faba 	bl	8022384 <memcpy>
	//	printf("Executive Version  :0x%02X%02X%02X%02X%02X%02X\n",Hitachi_Init_st[Source_Index].Exe_Ver[0],Hitachi_Init_st[Source_Index].Exe_Ver[1],
	//			Hitachi_Init_st[Source_Index].Exe_Ver[2],Hitachi_Init_st[Source_Index].Exe_Ver[3],
	//			Hitachi_Init_st[Source_Index].Exe_Ver[4],Hitachi_Init_st[Source_Index].Exe_Ver[5]);

	BITSTUFFINC(16);
 8001e10:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001e14:	3310      	adds	r3, #16
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	da00      	bge.n	8001e1c <Init_Msg_extr+0x768>
 8001e1a:	3307      	adds	r3, #7
 8001e1c:	10db      	asrs	r3, r3, #3
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	8bfb      	ldrh	r3, [r7, #30]
 8001e22:	4413      	add	r3, r2
 8001e24:	83fb      	strh	r3, [r7, #30]
 8001e26:	8bbb      	ldrh	r3, [r7, #28]
 8001e28:	3310      	adds	r3, #16
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	b21b      	sxth	r3, r3
 8001e2e:	425a      	negs	r2, r3
 8001e30:	f003 0307 	and.w	r3, r3, #7
 8001e34:	f002 0207 	and.w	r2, r2, #7
 8001e38:	bf58      	it	pl
 8001e3a:	4253      	negpl	r3, r2
 8001e3c:	b21b      	sxth	r3, r3
 8001e3e:	83bb      	strh	r3, [r7, #28]
	BITSTUFFINC(16);
 8001e40:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001e44:	3310      	adds	r3, #16
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	da00      	bge.n	8001e4c <Init_Msg_extr+0x798>
 8001e4a:	3307      	adds	r3, #7
 8001e4c:	10db      	asrs	r3, r3, #3
 8001e4e:	b29a      	uxth	r2, r3
 8001e50:	8bfb      	ldrh	r3, [r7, #30]
 8001e52:	4413      	add	r3, r2
 8001e54:	83fb      	strh	r3, [r7, #30]
 8001e56:	8bbb      	ldrh	r3, [r7, #28]
 8001e58:	3310      	adds	r3, #16
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	b21b      	sxth	r3, r3
 8001e5e:	425a      	negs	r2, r3
 8001e60:	f003 0307 	and.w	r3, r3, #7
 8001e64:	f002 0207 	and.w	r2, r2, #7
 8001e68:	bf58      	it	pl
 8001e6a:	4253      	negpl	r3, r2
 8001e6c:	b21b      	sxth	r3, r3
 8001e6e:	83bb      	strh	r3, [r7, #28]
	BITSTUFFINC(16);
 8001e70:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001e74:	3310      	adds	r3, #16
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	da00      	bge.n	8001e7c <Init_Msg_extr+0x7c8>
 8001e7a:	3307      	adds	r3, #7
 8001e7c:	10db      	asrs	r3, r3, #3
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	8bfb      	ldrh	r3, [r7, #30]
 8001e82:	4413      	add	r3, r2
 8001e84:	83fb      	strh	r3, [r7, #30]
 8001e86:	8bbb      	ldrh	r3, [r7, #28]
 8001e88:	3310      	adds	r3, #16
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	b21b      	sxth	r3, r3
 8001e8e:	425a      	negs	r2, r3
 8001e90:	f003 0307 	and.w	r3, r3, #7
 8001e94:	f002 0207 	and.w	r2, r2, #7
 8001e98:	bf58      	it	pl
 8001e9a:	4253      	negpl	r3, r2
 8001e9c:	b21b      	sxth	r3, r3
 8001e9e:	83bb      	strh	r3, [r7, #28]
	// printf("Skip Exe_ver\n");

	Hitachi_Init_st[Source_Index].App_comp = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8001ea0:	8bfb      	ldrh	r3, [r7, #30]
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	441a      	add	r2, r3
 8001ea6:	8bbb      	ldrh	r3, [r7, #28]
 8001ea8:	2110      	movs	r1, #16
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7fe fbb2 	bl	8000614 <ExtractBits>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	78bb      	ldrb	r3, [r7, #2]
 8001eb4:	b291      	uxth	r1, r2
 8001eb6:	4a4b      	ldr	r2, [pc, #300]	; (8001fe4 <Init_Msg_extr+0x930>)
 8001eb8:	015b      	lsls	r3, r3, #5
 8001eba:	4413      	add	r3, r2
 8001ebc:	3314      	adds	r3, #20
 8001ebe:	460a      	mov	r2, r1
 8001ec0:	801a      	strh	r2, [r3, #0]
	//printf("Application_comp   :0x%04X\n",Hitachi_Init_st[Source_Index].App_comp);
	BITSTUFFINC(16);
 8001ec2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001ec6:	3310      	adds	r3, #16
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	da00      	bge.n	8001ece <Init_Msg_extr+0x81a>
 8001ecc:	3307      	adds	r3, #7
 8001ece:	10db      	asrs	r3, r3, #3
 8001ed0:	b29a      	uxth	r2, r3
 8001ed2:	8bfb      	ldrh	r3, [r7, #30]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	83fb      	strh	r3, [r7, #30]
 8001ed8:	8bbb      	ldrh	r3, [r7, #28]
 8001eda:	3310      	adds	r3, #16
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	b21b      	sxth	r3, r3
 8001ee0:	425a      	negs	r2, r3
 8001ee2:	f003 0307 	and.w	r3, r3, #7
 8001ee6:	f002 0207 	and.w	r2, r2, #7
 8001eea:	bf58      	it	pl
 8001eec:	4253      	negpl	r3, r2
 8001eee:	b21b      	sxth	r3, r3
 8001ef0:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].Exe_Idty_CRC = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8001ef2:	8bfb      	ldrh	r3, [r7, #30]
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	441a      	add	r2, r3
 8001ef8:	8bbb      	ldrh	r3, [r7, #28]
 8001efa:	2110      	movs	r1, #16
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7fe fb89 	bl	8000614 <ExtractBits>
 8001f02:	4602      	mov	r2, r0
 8001f04:	78bb      	ldrb	r3, [r7, #2]
 8001f06:	b291      	uxth	r1, r2
 8001f08:	4a36      	ldr	r2, [pc, #216]	; (8001fe4 <Init_Msg_extr+0x930>)
 8001f0a:	015b      	lsls	r3, r3, #5
 8001f0c:	4413      	add	r3, r2
 8001f0e:	3316      	adds	r3, #22
 8001f10:	460a      	mov	r2, r1
 8001f12:	801a      	strh	r2, [r3, #0]
	//	printf("Executive_Idty_CRC :0x%04X\n",Hitachi_Init_st[Source_Index].Exe_Idty_CRC);
	BITSTUFFINC(16);
 8001f14:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f18:	3310      	adds	r3, #16
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	da00      	bge.n	8001f20 <Init_Msg_extr+0x86c>
 8001f1e:	3307      	adds	r3, #7
 8001f20:	10db      	asrs	r3, r3, #3
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	8bfb      	ldrh	r3, [r7, #30]
 8001f26:	4413      	add	r3, r2
 8001f28:	83fb      	strh	r3, [r7, #30]
 8001f2a:	8bbb      	ldrh	r3, [r7, #28]
 8001f2c:	3310      	adds	r3, #16
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	b21b      	sxth	r3, r3
 8001f32:	425a      	negs	r2, r3
 8001f34:	f003 0307 	and.w	r3, r3, #7
 8001f38:	f002 0207 	and.w	r2, r2, #7
 8001f3c:	bf58      	it	pl
 8001f3e:	4253      	negpl	r3, r2
 8001f40:	b21b      	sxth	r3, r3
 8001f42:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].App_Idty_CRC = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8001f44:	8bfb      	ldrh	r3, [r7, #30]
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	441a      	add	r2, r3
 8001f4a:	8bbb      	ldrh	r3, [r7, #28]
 8001f4c:	2110      	movs	r1, #16
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7fe fb60 	bl	8000614 <ExtractBits>
 8001f54:	4602      	mov	r2, r0
 8001f56:	78bb      	ldrb	r3, [r7, #2]
 8001f58:	b291      	uxth	r1, r2
 8001f5a:	4a22      	ldr	r2, [pc, #136]	; (8001fe4 <Init_Msg_extr+0x930>)
 8001f5c:	015b      	lsls	r3, r3, #5
 8001f5e:	4413      	add	r3, r2
 8001f60:	3318      	adds	r3, #24
 8001f62:	460a      	mov	r2, r1
 8001f64:	801a      	strh	r2, [r3, #0]
	//printf("App_Idty_CRC       :%04u\n",Hitachi_Init_st[Source_Index].App_Idty_CRC);
	BITSTUFFINC(16);
 8001f66:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f6a:	3310      	adds	r3, #16
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	da00      	bge.n	8001f72 <Init_Msg_extr+0x8be>
 8001f70:	3307      	adds	r3, #7
 8001f72:	10db      	asrs	r3, r3, #3
 8001f74:	b29a      	uxth	r2, r3
 8001f76:	8bfb      	ldrh	r3, [r7, #30]
 8001f78:	4413      	add	r3, r2
 8001f7a:	83fb      	strh	r3, [r7, #30]
 8001f7c:	8bbb      	ldrh	r3, [r7, #28]
 8001f7e:	3310      	adds	r3, #16
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	b21b      	sxth	r3, r3
 8001f84:	425a      	negs	r2, r3
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	f002 0207 	and.w	r2, r2, #7
 8001f8e:	bf58      	it	pl
 8001f90:	4253      	negpl	r3, r2
 8001f92:	b21b      	sxth	r3, r3
 8001f94:	83bb      	strh	r3, [r7, #28]

	Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = ExtractBits(ucBit, 24, (unsigned char *)&Buff[ucByte]);
 8001f96:	8bfb      	ldrh	r3, [r7, #30]
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	441a      	add	r2, r3
 8001f9c:	78bc      	ldrb	r4, [r7, #2]
 8001f9e:	8bbb      	ldrh	r3, [r7, #28]
 8001fa0:	2118      	movs	r1, #24
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7fe fb36 	bl	8000614 <ExtractBits>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	490f      	ldr	r1, [pc, #60]	; (8001fe8 <Init_Msg_extr+0x934>)
 8001fac:	0123      	lsls	r3, r4, #4
 8001fae:	440b      	add	r3, r1
 8001fb0:	3308      	adds	r3, #8
 8001fb2:	601a      	str	r2, [r3, #0]
	//printf("Vital_CRC_Init_Val :0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
	Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 8001fb4:	78bb      	ldrb	r3, [r7, #2]
 8001fb6:	78ba      	ldrb	r2, [r7, #2]
 8001fb8:	490b      	ldr	r1, [pc, #44]	; (8001fe8 <Init_Msg_extr+0x934>)
 8001fba:	011b      	lsls	r3, r3, #4
 8001fbc:	440b      	add	r3, r1
 8001fbe:	3308      	adds	r3, #8
 8001fc0:	6819      	ldr	r1, [r3, #0]
 8001fc2:	480a      	ldr	r0, [pc, #40]	; (8001fec <Init_Msg_extr+0x938>)
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	4413      	add	r3, r2
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	4403      	add	r3, r0
 8001fce:	3308      	adds	r3, #8
 8001fd0:	6019      	str	r1, [r3, #0]
	BITSTUFFINC(24);
 8001fd2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001fd6:	3318      	adds	r3, #24
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	da09      	bge.n	8001ff0 <Init_Msg_extr+0x93c>
 8001fdc:	3307      	adds	r3, #7
 8001fde:	e007      	b.n	8001ff0 <Init_Msg_extr+0x93c>
 8001fe0:	200010e4 	.word	0x200010e4
 8001fe4:	20001270 	.word	0x20001270
 8001fe8:	200011d0 	.word	0x200011d0
 8001fec:	20001680 	.word	0x20001680
 8001ff0:	10db      	asrs	r3, r3, #3
 8001ff2:	b29a      	uxth	r2, r3
 8001ff4:	8bfb      	ldrh	r3, [r7, #30]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	83fb      	strh	r3, [r7, #30]
 8001ffa:	8bbb      	ldrh	r3, [r7, #28]
 8001ffc:	3318      	adds	r3, #24
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	b21b      	sxth	r3, r3
 8002002:	425a      	negs	r2, r3
 8002004:	f003 0307 	and.w	r3, r3, #7
 8002008:	f002 0207 	and.w	r2, r2, #7
 800200c:	bf58      	it	pl
 800200e:	4253      	negpl	r3, r2
 8002010:	b21b      	sxth	r3, r3
 8002012:	83bb      	strh	r3, [r7, #28]

	Hitachi_prms_st[Source_Index].Seq_Init_Value = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8002014:	8bfb      	ldrh	r3, [r7, #30]
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	441a      	add	r2, r3
 800201a:	8bbb      	ldrh	r3, [r7, #28]
 800201c:	2108      	movs	r1, #8
 800201e:	4618      	mov	r0, r3
 8002020:	f7fe faf8 	bl	8000614 <ExtractBits>
 8002024:	4602      	mov	r2, r0
 8002026:	78bb      	ldrb	r3, [r7, #2]
 8002028:	b2d1      	uxtb	r1, r2
 800202a:	4ab1      	ldr	r2, [pc, #708]	; (80022f0 <Init_Msg_extr+0xc3c>)
 800202c:	011b      	lsls	r3, r3, #4
 800202e:	4413      	add	r3, r2
 8002030:	460a      	mov	r2, r1
 8002032:	701a      	strb	r2, [r3, #0]
	Hitachi_prms_st[Source_Index].Rx_Seq = Hitachi_prms_st[Source_Index].Seq_Init_Value;
 8002034:	78ba      	ldrb	r2, [r7, #2]
 8002036:	78bb      	ldrb	r3, [r7, #2]
 8002038:	49ad      	ldr	r1, [pc, #692]	; (80022f0 <Init_Msg_extr+0xc3c>)
 800203a:	0112      	lsls	r2, r2, #4
 800203c:	440a      	add	r2, r1
 800203e:	7811      	ldrb	r1, [r2, #0]
 8002040:	4aab      	ldr	r2, [pc, #684]	; (80022f0 <Init_Msg_extr+0xc3c>)
 8002042:	011b      	lsls	r3, r3, #4
 8002044:	4413      	add	r3, r2
 8002046:	3302      	adds	r3, #2
 8002048:	460a      	mov	r2, r1
 800204a:	701a      	strb	r2, [r3, #0]
	//printf("Seq_Init_Val       :%u\n",Hitachi_prms_st[Source_Index].Seq_Init_Value);
	BITSTUFFINC(8);
 800204c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002050:	3308      	adds	r3, #8
 8002052:	2b00      	cmp	r3, #0
 8002054:	da00      	bge.n	8002058 <Init_Msg_extr+0x9a4>
 8002056:	3307      	adds	r3, #7
 8002058:	10db      	asrs	r3, r3, #3
 800205a:	b29a      	uxth	r2, r3
 800205c:	8bfb      	ldrh	r3, [r7, #30]
 800205e:	4413      	add	r3, r2
 8002060:	83fb      	strh	r3, [r7, #30]
 8002062:	8bbb      	ldrh	r3, [r7, #28]
 8002064:	3308      	adds	r3, #8
 8002066:	b29b      	uxth	r3, r3
 8002068:	b21b      	sxth	r3, r3
 800206a:	425a      	negs	r2, r3
 800206c:	f003 0307 	and.w	r3, r3, #7
 8002070:	f002 0207 	and.w	r2, r2, #7
 8002074:	bf58      	it	pl
 8002076:	4253      	negpl	r3, r2
 8002078:	b21b      	sxth	r3, r3
 800207a:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].V_NV_Flag = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800207c:	8bfb      	ldrh	r3, [r7, #30]
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	441a      	add	r2, r3
 8002082:	8bbb      	ldrh	r3, [r7, #28]
 8002084:	2108      	movs	r1, #8
 8002086:	4618      	mov	r0, r3
 8002088:	f7fe fac4 	bl	8000614 <ExtractBits>
 800208c:	4602      	mov	r2, r0
 800208e:	78bb      	ldrb	r3, [r7, #2]
 8002090:	b2d1      	uxtb	r1, r2
 8002092:	4a98      	ldr	r2, [pc, #608]	; (80022f4 <Init_Msg_extr+0xc40>)
 8002094:	015b      	lsls	r3, r3, #5
 8002096:	4413      	add	r3, r2
 8002098:	330a      	adds	r3, #10
 800209a:	460a      	mov	r2, r1
 800209c:	701a      	strb	r2, [r3, #0]
	//printf("V_NV_Flag          :%u\n",Hitachi_Init_st[Source_Index].V_NV_Flag);
	BITSTUFFINC(8);
 800209e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80020a2:	3308      	adds	r3, #8
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	da00      	bge.n	80020aa <Init_Msg_extr+0x9f6>
 80020a8:	3307      	adds	r3, #7
 80020aa:	10db      	asrs	r3, r3, #3
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	8bfb      	ldrh	r3, [r7, #30]
 80020b0:	4413      	add	r3, r2
 80020b2:	83fb      	strh	r3, [r7, #30]
 80020b4:	8bbb      	ldrh	r3, [r7, #28]
 80020b6:	3308      	adds	r3, #8
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	b21b      	sxth	r3, r3
 80020bc:	425a      	negs	r2, r3
 80020be:	f003 0307 	and.w	r3, r3, #7
 80020c2:	f002 0207 	and.w	r2, r2, #7
 80020c6:	bf58      	it	pl
 80020c8:	4253      	negpl	r3, r2
 80020ca:	b21b      	sxth	r3, r3
 80020cc:	83bb      	strh	r3, [r7, #28]

	Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80020ce:	8bfb      	ldrh	r3, [r7, #30]
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	441a      	add	r2, r3
 80020d4:	8bbb      	ldrh	r3, [r7, #28]
 80020d6:	2108      	movs	r1, #8
 80020d8:	4618      	mov	r0, r3
 80020da:	f7fe fa9b 	bl	8000614 <ExtractBits>
 80020de:	4602      	mov	r2, r0
 80020e0:	78bb      	ldrb	r3, [r7, #2]
 80020e2:	b2d1      	uxtb	r1, r2
 80020e4:	4a82      	ldr	r2, [pc, #520]	; (80022f0 <Init_Msg_extr+0xc3c>)
 80020e6:	011b      	lsls	r3, r3, #4
 80020e8:	4413      	add	r3, r2
 80020ea:	3303      	adds	r3, #3
 80020ec:	460a      	mov	r2, r1
 80020ee:	701a      	strb	r2, [r3, #0]
	//printf("Sz_Bool_V_Data     :%u\n", Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA);
	BITSTUFFINC(8);
 80020f0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80020f4:	3308      	adds	r3, #8
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	da00      	bge.n	80020fc <Init_Msg_extr+0xa48>
 80020fa:	3307      	adds	r3, #7
 80020fc:	10db      	asrs	r3, r3, #3
 80020fe:	b29a      	uxth	r2, r3
 8002100:	8bfb      	ldrh	r3, [r7, #30]
 8002102:	4413      	add	r3, r2
 8002104:	83fb      	strh	r3, [r7, #30]
 8002106:	8bbb      	ldrh	r3, [r7, #28]
 8002108:	3308      	adds	r3, #8
 800210a:	b29b      	uxth	r3, r3
 800210c:	b21b      	sxth	r3, r3
 800210e:	425a      	negs	r2, r3
 8002110:	f003 0307 	and.w	r3, r3, #7
 8002114:	f002 0207 	and.w	r2, r2, #7
 8002118:	bf58      	it	pl
 800211a:	4253      	negpl	r3, r2
 800211c:	b21b      	sxth	r3, r3
 800211e:	83bb      	strh	r3, [r7, #28]




	if(Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA != EI_data.Hitachi_st.Bool_outputs[Source_Index])
 8002120:	78bb      	ldrb	r3, [r7, #2]
 8002122:	4a73      	ldr	r2, [pc, #460]	; (80022f0 <Init_Msg_extr+0xc3c>)
 8002124:	011b      	lsls	r3, r3, #4
 8002126:	4413      	add	r3, r2
 8002128:	3303      	adds	r3, #3
 800212a:	781a      	ldrb	r2, [r3, #0]
 800212c:	78bb      	ldrb	r3, [r7, #2]
 800212e:	4972      	ldr	r1, [pc, #456]	; (80022f8 <Init_Msg_extr+0xc44>)
 8002130:	440b      	add	r3, r1
 8002132:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 8002136:	429a      	cmp	r2, r3
 8002138:	d015      	beq.n	8002166 <Init_Msg_extr+0xab2>
	{
		printf("Vital Inputs Not Matching\n");
 800213a:	4870      	ldr	r0, [pc, #448]	; (80022fc <Init_Msg_extr+0xc48>)
 800213c:	f020 face 	bl	80226dc <puts>
		printf("Expected Inputs:%u\n",EI_data.Hitachi_st.Bool_outputs[Source_Index]);
 8002140:	78bb      	ldrb	r3, [r7, #2]
 8002142:	4a6d      	ldr	r2, [pc, #436]	; (80022f8 <Init_Msg_extr+0xc44>)
 8002144:	4413      	add	r3, r2
 8002146:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 800214a:	4619      	mov	r1, r3
 800214c:	486c      	ldr	r0, [pc, #432]	; (8002300 <Init_Msg_extr+0xc4c>)
 800214e:	f020 fa29 	bl	80225a4 <iprintf>
		printf("Received Inputs:%u\n",Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA);
 8002152:	78bb      	ldrb	r3, [r7, #2]
 8002154:	4a66      	ldr	r2, [pc, #408]	; (80022f0 <Init_Msg_extr+0xc3c>)
 8002156:	011b      	lsls	r3, r3, #4
 8002158:	4413      	add	r3, r2
 800215a:	3303      	adds	r3, #3
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	4619      	mov	r1, r3
 8002160:	4868      	ldr	r0, [pc, #416]	; (8002304 <Init_Msg_extr+0xc50>)
 8002162:	f020 fa1f 	bl	80225a4 <iprintf>
	}

	Hitachi_Init_st[Source_Index].Sz_Num_Val_Data = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8002166:	8bfb      	ldrh	r3, [r7, #30]
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	441a      	add	r2, r3
 800216c:	8bbb      	ldrh	r3, [r7, #28]
 800216e:	2108      	movs	r1, #8
 8002170:	4618      	mov	r0, r3
 8002172:	f7fe fa4f 	bl	8000614 <ExtractBits>
 8002176:	4602      	mov	r2, r0
 8002178:	78bb      	ldrb	r3, [r7, #2]
 800217a:	b2d1      	uxtb	r1, r2
 800217c:	4a5d      	ldr	r2, [pc, #372]	; (80022f4 <Init_Msg_extr+0xc40>)
 800217e:	015b      	lsls	r3, r3, #5
 8002180:	4413      	add	r3, r2
 8002182:	330b      	adds	r3, #11
 8002184:	460a      	mov	r2, r1
 8002186:	701a      	strb	r2, [r3, #0]
	//printf("Sz_Num_Val_Data    :%u\n",Hitachi_Init_st[Source_Index].Sz_Num_Val_Data);
	BITSTUFFINC(8);
 8002188:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800218c:	3308      	adds	r3, #8
 800218e:	2b00      	cmp	r3, #0
 8002190:	da00      	bge.n	8002194 <Init_Msg_extr+0xae0>
 8002192:	3307      	adds	r3, #7
 8002194:	10db      	asrs	r3, r3, #3
 8002196:	b29a      	uxth	r2, r3
 8002198:	8bfb      	ldrh	r3, [r7, #30]
 800219a:	4413      	add	r3, r2
 800219c:	83fb      	strh	r3, [r7, #30]
 800219e:	8bbb      	ldrh	r3, [r7, #28]
 80021a0:	3308      	adds	r3, #8
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	b21b      	sxth	r3, r3
 80021a6:	425a      	negs	r2, r3
 80021a8:	f003 0307 	and.w	r3, r3, #7
 80021ac:	f002 0207 	and.w	r2, r2, #7
 80021b0:	bf58      	it	pl
 80021b2:	4253      	negpl	r3, r2
 80021b4:	b21b      	sxth	r3, r3
 80021b6:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Val_Bool_Ops = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80021b8:	8bfb      	ldrh	r3, [r7, #30]
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	441a      	add	r2, r3
 80021be:	8bbb      	ldrh	r3, [r7, #28]
 80021c0:	2108      	movs	r1, #8
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7fe fa26 	bl	8000614 <ExtractBits>
 80021c8:	4602      	mov	r2, r0
 80021ca:	78bb      	ldrb	r3, [r7, #2]
 80021cc:	b2d1      	uxtb	r1, r2
 80021ce:	4a49      	ldr	r2, [pc, #292]	; (80022f4 <Init_Msg_extr+0xc40>)
 80021d0:	015b      	lsls	r3, r3, #5
 80021d2:	4413      	add	r3, r2
 80021d4:	330c      	adds	r3, #12
 80021d6:	460a      	mov	r2, r1
 80021d8:	701a      	strb	r2, [r3, #0]
	//printf("Val_Bool_Ops       :%u\n",Hitachi_Init_st[Source_Index].Val_Bool_Ops);
	BITSTUFFINC(8);
 80021da:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80021de:	3308      	adds	r3, #8
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	da00      	bge.n	80021e6 <Init_Msg_extr+0xb32>
 80021e4:	3307      	adds	r3, #7
 80021e6:	10db      	asrs	r3, r3, #3
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	8bfb      	ldrh	r3, [r7, #30]
 80021ec:	4413      	add	r3, r2
 80021ee:	83fb      	strh	r3, [r7, #30]
 80021f0:	8bbb      	ldrh	r3, [r7, #28]
 80021f2:	3308      	adds	r3, #8
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	b21b      	sxth	r3, r3
 80021f8:	425a      	negs	r2, r3
 80021fa:	f003 0307 	and.w	r3, r3, #7
 80021fe:	f002 0207 	and.w	r2, r2, #7
 8002202:	bf58      	it	pl
 8002204:	4253      	negpl	r3, r2
 8002206:	b21b      	sxth	r3, r3
 8002208:	83bb      	strh	r3, [r7, #28]
	if(Hitachi_Init_st[Source_Index].Val_Bool_Ops != 1)
 800220a:	78bb      	ldrb	r3, [r7, #2]
 800220c:	4a39      	ldr	r2, [pc, #228]	; (80022f4 <Init_Msg_extr+0xc40>)
 800220e:	015b      	lsls	r3, r3, #5
 8002210:	4413      	add	r3, r2
 8002212:	330c      	adds	r3, #12
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d00c      	beq.n	8002234 <Init_Msg_extr+0xb80>
	{
		printf("Transmitted size of Numerical Received:%u\n",Hitachi_Init_st[Source_Index].Val_Bool_Ops);
 800221a:	78bb      	ldrb	r3, [r7, #2]
 800221c:	4a35      	ldr	r2, [pc, #212]	; (80022f4 <Init_Msg_extr+0xc40>)
 800221e:	015b      	lsls	r3, r3, #5
 8002220:	4413      	add	r3, r2
 8002222:	330c      	adds	r3, #12
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	4619      	mov	r1, r3
 8002228:	4837      	ldr	r0, [pc, #220]	; (8002308 <Init_Msg_extr+0xc54>)
 800222a:	f020 f9bb 	bl	80225a4 <iprintf>
		printf("This Value has to be \"1\"\n");
 800222e:	4837      	ldr	r0, [pc, #220]	; (800230c <Init_Msg_extr+0xc58>)
 8002230:	f020 fa54 	bl	80226dc <puts>
	}

	Hitachi_Init_st[Source_Index].Val_Num_Ops = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8002234:	8bfb      	ldrh	r3, [r7, #30]
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	441a      	add	r2, r3
 800223a:	8bbb      	ldrh	r3, [r7, #28]
 800223c:	2108      	movs	r1, #8
 800223e:	4618      	mov	r0, r3
 8002240:	f7fe f9e8 	bl	8000614 <ExtractBits>
 8002244:	4602      	mov	r2, r0
 8002246:	78bb      	ldrb	r3, [r7, #2]
 8002248:	b2d1      	uxtb	r1, r2
 800224a:	4a2a      	ldr	r2, [pc, #168]	; (80022f4 <Init_Msg_extr+0xc40>)
 800224c:	015b      	lsls	r3, r3, #5
 800224e:	4413      	add	r3, r2
 8002250:	330d      	adds	r3, #13
 8002252:	460a      	mov	r2, r1
 8002254:	701a      	strb	r2, [r3, #0]
	//printf("Val_Num_Ops        :%u\n",Hitachi_Init_st[Source_Index].Val_Num_Ops);
	BITSTUFFINC(8);
 8002256:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800225a:	3308      	adds	r3, #8
 800225c:	2b00      	cmp	r3, #0
 800225e:	da00      	bge.n	8002262 <Init_Msg_extr+0xbae>
 8002260:	3307      	adds	r3, #7
 8002262:	10db      	asrs	r3, r3, #3
 8002264:	b29a      	uxth	r2, r3
 8002266:	8bfb      	ldrh	r3, [r7, #30]
 8002268:	4413      	add	r3, r2
 800226a:	83fb      	strh	r3, [r7, #30]
 800226c:	8bbb      	ldrh	r3, [r7, #28]
 800226e:	3308      	adds	r3, #8
 8002270:	b29b      	uxth	r3, r3
 8002272:	b21b      	sxth	r3, r3
 8002274:	425a      	negs	r2, r3
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	f002 0207 	and.w	r2, r2, #7
 800227e:	bf58      	it	pl
 8002280:	4253      	negpl	r3, r2
 8002282:	b21b      	sxth	r3, r3
 8002284:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].Init_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[ucByte]);
 8002286:	8bfb      	ldrh	r3, [r7, #30]
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	441a      	add	r2, r3
 800228c:	78bc      	ldrb	r4, [r7, #2]
 800228e:	8bbb      	ldrh	r3, [r7, #28]
 8002290:	2120      	movs	r1, #32
 8002292:	4618      	mov	r0, r3
 8002294:	f7fe f9be 	bl	8000614 <ExtractBits>
 8002298:	4602      	mov	r2, r0
 800229a:	4916      	ldr	r1, [pc, #88]	; (80022f4 <Init_Msg_extr+0xc40>)
 800229c:	0163      	lsls	r3, r4, #5
 800229e:	440b      	add	r3, r1
 80022a0:	331c      	adds	r3, #28
 80022a2:	601a      	str	r2, [r3, #0]
	//printf("Received CRC       :0x%08lX\n",Hitachi_Init_st[Source_Index].Init_CRC);
	BITSTUFFINC(32);
 80022a4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80022a8:	3320      	adds	r3, #32
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	da00      	bge.n	80022b0 <Init_Msg_extr+0xbfc>
 80022ae:	3307      	adds	r3, #7
 80022b0:	10db      	asrs	r3, r3, #3
 80022b2:	b29a      	uxth	r2, r3
 80022b4:	8bfb      	ldrh	r3, [r7, #30]
 80022b6:	4413      	add	r3, r2
 80022b8:	83fb      	strh	r3, [r7, #30]
 80022ba:	8bbb      	ldrh	r3, [r7, #28]
 80022bc:	3320      	adds	r3, #32
 80022be:	b29b      	uxth	r3, r3
 80022c0:	b21b      	sxth	r3, r3
 80022c2:	425a      	negs	r2, r3
 80022c4:	f003 0307 	and.w	r3, r3, #7
 80022c8:	f002 0207 	and.w	r2, r2, #7
 80022cc:	bf58      	it	pl
 80022ce:	4253      	negpl	r3, r2
 80022d0:	b21b      	sxth	r3, r3
 80022d2:	83bb      	strh	r3, [r7, #28]

	//Calc_CRC = CalculateDirectReverseCrc(Buff, Length - 5);

	//printf("\n___________________________________ INIT-MSG ___________________________________\n");
	Send_Init_Msg(Source_Index,Des_Index);
 80022d4:	787a      	ldrb	r2, [r7, #1]
 80022d6:	78bb      	ldrb	r3, [r7, #2]
 80022d8:	4611      	mov	r1, r2
 80022da:	4618      	mov	r0, r3
 80022dc:	f000 f86c 	bl	80023b8 <Send_Init_Msg>

	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_CRC = Recv_CRC;
 80022e0:	78ba      	ldrb	r2, [r7, #2]
 80022e2:	490b      	ldr	r1, [pc, #44]	; (8002310 <Init_Msg_extr+0xc5c>)
 80022e4:	4613      	mov	r3, r2
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	4413      	add	r3, r2
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	e012      	b.n	8002314 <Init_Msg_extr+0xc60>
 80022ee:	bf00      	nop
 80022f0:	200011d0 	.word	0x200011d0
 80022f4:	20001270 	.word	0x20001270
 80022f8:	20000304 	.word	0x20000304
 80022fc:	080240ac 	.word	0x080240ac
 8002300:	08024074 	.word	0x08024074
 8002304:	08024088 	.word	0x08024088
 8002308:	080240c8 	.word	0x080240c8
 800230c:	080240f4 	.word	0x080240f4
 8002310:	20001680 	.word	0x20001680
 8002314:	440b      	add	r3, r1
 8002316:	3314      	adds	r3, #20
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	601a      	str	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_Msg_Type = INIT_MSG;
 800231c:	78ba      	ldrb	r2, [r7, #2]
 800231e:	4923      	ldr	r1, [pc, #140]	; (80023ac <Init_Msg_extr+0xcf8>)
 8002320:	4613      	mov	r3, r2
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	4413      	add	r3, r2
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	440b      	add	r3, r1
 800232a:	3305      	adds	r3, #5
 800232c:	2201      	movs	r2, #1
 800232e:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 8002330:	78ba      	ldrb	r2, [r7, #2]
 8002332:	491e      	ldr	r1, [pc, #120]	; (80023ac <Init_Msg_extr+0xcf8>)
 8002334:	4613      	mov	r3, r2
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	4413      	add	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	440b      	add	r3, r1
 800233e:	78ba      	ldrb	r2, [r7, #2]
 8002340:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 8002342:	78ba      	ldrb	r2, [r7, #2]
 8002344:	4919      	ldr	r1, [pc, #100]	; (80023ac <Init_Msg_extr+0xcf8>)
 8002346:	4613      	mov	r3, r2
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	4413      	add	r3, r2
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	440b      	add	r3, r1
 8002350:	3301      	adds	r3, #1
 8002352:	2201      	movs	r2, #1
 8002354:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8002356:	2218      	movs	r2, #24
 8002358:	2100      	movs	r1, #0
 800235a:	4815      	ldr	r0, [pc, #84]	; (80023b0 <Init_Msg_extr+0xcfc>)
 800235c:	f020 f83a 	bl	80223d4 <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 8002360:	78ba      	ldrb	r2, [r7, #2]
 8002362:	4613      	mov	r3, r2
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	4413      	add	r3, r2
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	4a10      	ldr	r2, [pc, #64]	; (80023ac <Init_Msg_extr+0xcf8>)
 800236c:	4413      	add	r3, r2
 800236e:	2218      	movs	r2, #24
 8002370:	4619      	mov	r1, r3
 8002372:	480f      	ldr	r0, [pc, #60]	; (80023b0 <Init_Msg_extr+0xcfc>)
 8002374:	f020 f806 	bl	8022384 <memcpy>
#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING); //for Immediate sharing of VItal CRC Init Value.
#endif

#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING); //for Immediate sharing of VItal CRC Init Value.
 8002378:	f240 2002 	movw	r0, #514	; 0x202
 800237c:	f00d f8d8 	bl	800f530 <TransmitCanPkt>
#endif

	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 8002380:	78ba      	ldrb	r2, [r7, #2]
 8002382:	490a      	ldr	r1, [pc, #40]	; (80023ac <Init_Msg_extr+0xcf8>)
 8002384:	4613      	mov	r3, r2
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	4413      	add	r3, r2
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	440b      	add	r3, r1
 800238e:	3301      	adds	r3, #1
 8002390:	2200      	movs	r2, #0
 8002392:	701a      	strb	r2, [r3, #0]

	Self_Sharing_CAN_Clk[Source_Index] = HAL_GetTick();
 8002394:	78bc      	ldrb	r4, [r7, #2]
 8002396:	f013 f8fb 	bl	8015590 <HAL_GetTick>
 800239a:	4603      	mov	r3, r0
 800239c:	4a05      	ldr	r2, [pc, #20]	; (80023b4 <Init_Msg_extr+0xd00>)
 800239e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80023a2:	e000      	b.n	80023a6 <Init_Msg_extr+0xcf2>
			return;
 80023a4:	bf00      	nop
}
 80023a6:	3724      	adds	r7, #36	; 0x24
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd90      	pop	{r4, r7, pc}
 80023ac:	20001680 	.word	0x20001680
 80023b0:	20001860 	.word	0x20001860
 80023b4:	20000e50 	.word	0x20000e50

080023b8 <Send_Init_Msg>:

void Send_Init_Msg(uint8_t Source_Index,uint8_t Des_Index)
{
 80023b8:	b590      	push	{r4, r7, lr}
 80023ba:	b097      	sub	sp, #92	; 0x5c
 80023bc:	af00      	add	r7, sp, #0
 80023be:	4603      	mov	r3, r0
 80023c0:	460a      	mov	r2, r1
 80023c2:	71fb      	strb	r3, [r7, #7]
 80023c4:	4613      	mov	r3, r2
 80023c6:	71bb      	strb	r3, [r7, #6]

	uint8_t Transmit_Buff[60] = {0,};
 80023c8:	2300      	movs	r3, #0
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	f107 0310 	add.w	r3, r7, #16
 80023d0:	2238      	movs	r2, #56	; 0x38
 80023d2:	2100      	movs	r1, #0
 80023d4:	4618      	mov	r0, r3
 80023d6:	f01f fffd 	bl	80223d4 <memset>
	uint32_t Calc_CRC = 0;
 80023da:	2300      	movs	r3, #0
 80023dc:	653b      	str	r3, [r7, #80]	; 0x50

	BITSTUFFINIT(0, 0);
 80023de:	2300      	movs	r3, #0
 80023e0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80023e4:	2300      	movs	r3, #0
 80023e6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], 0xf4);
 80023ea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023ee:	f107 020c 	add.w	r2, r7, #12
 80023f2:	441a      	add	r2, r3
 80023f4:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80023f8:	23f4      	movs	r3, #244	; 0xf4
 80023fa:	2108      	movs	r1, #8
 80023fc:	f7fe f996 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8002400:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002404:	3308      	adds	r3, #8
 8002406:	2b00      	cmp	r3, #0
 8002408:	da00      	bge.n	800240c <Send_Init_Msg+0x54>
 800240a:	3307      	adds	r3, #7
 800240c:	10db      	asrs	r3, r3, #3
 800240e:	b29a      	uxth	r2, r3
 8002410:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002414:	4413      	add	r3, r2
 8002416:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800241a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800241e:	3308      	adds	r3, #8
 8002420:	b29b      	uxth	r3, r3
 8002422:	b21b      	sxth	r3, r3
 8002424:	425a      	negs	r2, r3
 8002426:	f003 0307 	and.w	r3, r3, #7
 800242a:	f002 0207 	and.w	r2, r2, #7
 800242e:	bf58      	it	pl
 8002430:	4253      	negpl	r3, r2
 8002432:	b21b      	sxth	r3, r3
 8002434:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8002438:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800243c:	f107 020c 	add.w	r2, r7, #12
 8002440:	441a      	add	r2, r3
 8002442:	79fb      	ldrb	r3, [r7, #7]
 8002444:	4977      	ldr	r1, [pc, #476]	; (8002624 <Send_Init_Msg+0x26c>)
 8002446:	3366      	adds	r3, #102	; 0x66
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	440b      	add	r3, r1
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002452:	2110      	movs	r1, #16
 8002454:	f7fe f96a 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002458:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800245c:	3310      	adds	r3, #16
 800245e:	2b00      	cmp	r3, #0
 8002460:	da00      	bge.n	8002464 <Send_Init_Msg+0xac>
 8002462:	3307      	adds	r3, #7
 8002464:	10db      	asrs	r3, r3, #3
 8002466:	b29a      	uxth	r2, r3
 8002468:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800246c:	4413      	add	r3, r2
 800246e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002472:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002476:	3310      	adds	r3, #16
 8002478:	b29b      	uxth	r3, r3
 800247a:	b21b      	sxth	r3, r3
 800247c:	425a      	negs	r2, r3
 800247e:	f003 0307 	and.w	r3, r3, #7
 8002482:	f002 0207 	and.w	r2, r2, #7
 8002486:	bf58      	it	pl
 8002488:	4253      	negpl	r3, r2
 800248a:	b21b      	sxth	r3, r3
 800248c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]);
 8002490:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002494:	f107 020c 	add.w	r2, r7, #12
 8002498:	441a      	add	r2, r3
 800249a:	79fb      	ldrb	r3, [r7, #7]
 800249c:	4961      	ldr	r1, [pc, #388]	; (8002624 <Send_Init_Msg+0x26c>)
 800249e:	3370      	adds	r3, #112	; 0x70
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	440b      	add	r3, r1
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80024aa:	2110      	movs	r1, #16
 80024ac:	f7fe f93e 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 80024b0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80024b4:	3310      	adds	r3, #16
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	da00      	bge.n	80024bc <Send_Init_Msg+0x104>
 80024ba:	3307      	adds	r3, #7
 80024bc:	10db      	asrs	r3, r3, #3
 80024be:	b29a      	uxth	r2, r3
 80024c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024c4:	4413      	add	r3, r2
 80024c6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80024ca:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80024ce:	3310      	adds	r3, #16
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	b21b      	sxth	r3, r3
 80024d4:	425a      	negs	r2, r3
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	f002 0207 	and.w	r2, r2, #7
 80024de:	bf58      	it	pl
 80024e0:	4253      	negpl	r3, r2
 80024e2:	b21b      	sxth	r3, r3
 80024e4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( (CHECKFLAG(2,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 80024e8:	4b4f      	ldr	r3, [pc, #316]	; (8002628 <Send_Init_Msg+0x270>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	089b      	lsrs	r3, r3, #2
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d031      	beq.n	800255a <Send_Init_Msg+0x1a2>
	{
		if(Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index)
 80024f6:	4b4c      	ldr	r3, [pc, #304]	; (8002628 <Send_Init_Msg+0x270>)
 80024f8:	791b      	ldrb	r3, [r3, #4]
 80024fa:	79fa      	ldrb	r2, [r7, #7]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d137      	bne.n	8002570 <Send_Init_Msg+0x1b8>
		{
			uint8_t Rand_Number  = 0;
 8002500:	2300      	movs	r3, #0
 8002502:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
#ifdef STM_32
			Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 200 )+1;
 8002506:	4849      	ldr	r0, [pc, #292]	; (800262c <Send_Init_Msg+0x274>)
 8002508:	f017 fcf4 	bl	8019ef4 <HAL_RNG_GetRandomNumber>
 800250c:	4602      	mov	r2, r0
 800250e:	4b48      	ldr	r3, [pc, #288]	; (8002630 <Send_Init_Msg+0x278>)
 8002510:	fba3 1302 	umull	r1, r3, r3, r2
 8002514:	099b      	lsrs	r3, r3, #6
 8002516:	21c8      	movs	r1, #200	; 0xc8
 8002518:	fb01 f303 	mul.w	r3, r1, r3
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	b2db      	uxtb	r3, r3
 8002520:	3301      	adds	r3, #1
 8002522:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
#endif
			printf("Injected TX Sequence value failure\n");
 8002526:	4843      	ldr	r0, [pc, #268]	; (8002634 <Send_Init_Msg+0x27c>)
 8002528:	f020 f8d8 	bl	80226dc <puts>
			printf("Actual   TX Sequence value:%u\n",0);
 800252c:	2100      	movs	r1, #0
 800252e:	4842      	ldr	r0, [pc, #264]	; (8002638 <Send_Init_Msg+0x280>)
 8002530:	f020 f838 	bl	80225a4 <iprintf>
			printf("Injected TX Sequence value:%u\n",Rand_Number);
 8002534:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002538:	4619      	mov	r1, r3
 800253a:	4840      	ldr	r0, [pc, #256]	; (800263c <Send_Init_Msg+0x284>)
 800253c:	f020 f832 	bl	80225a4 <iprintf>
			InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number); // Rx Seq Number
 8002540:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002544:	f107 020c 	add.w	r2, r7, #12
 8002548:	441a      	add	r2, r3
 800254a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800254e:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002552:	2108      	movs	r1, #8
 8002554:	f7fe f8ea 	bl	800072c <InsertBits>
 8002558:	e00a      	b.n	8002570 <Send_Init_Msg+0x1b8>
			//Last Received Packet Tx_seq number is our Rx_Seq Number for VITAL_Message we don't Increment Sequence Number.
		}
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], 0x00);
 800255a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800255e:	f107 020c 	add.w	r2, r7, #12
 8002562:	441a      	add	r2, r3
 8002564:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002568:	2300      	movs	r3, #0
 800256a:	2108      	movs	r1, #8
 800256c:	f7fe f8de 	bl	800072c <InsertBits>
	}
	BITSTUFFINC(8);
 8002570:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002574:	3308      	adds	r3, #8
 8002576:	2b00      	cmp	r3, #0
 8002578:	da00      	bge.n	800257c <Send_Init_Msg+0x1c4>
 800257a:	3307      	adds	r3, #7
 800257c:	10db      	asrs	r3, r3, #3
 800257e:	b29a      	uxth	r2, r3
 8002580:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002584:	4413      	add	r3, r2
 8002586:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800258a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800258e:	3308      	adds	r3, #8
 8002590:	b29b      	uxth	r3, r3
 8002592:	b21b      	sxth	r3, r3
 8002594:	425a      	negs	r2, r3
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	f002 0207 	and.w	r2, r2, #7
 800259e:	bf58      	it	pl
 80025a0:	4253      	negpl	r3, r2
 80025a2:	b21b      	sxth	r3, r3
 80025a4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c



	if( (CHECKFLAG(3,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 80025a8:	4b1f      	ldr	r3, [pc, #124]	; (8002628 <Send_Init_Msg+0x270>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	08db      	lsrs	r3, r3, #3
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d04c      	beq.n	8002650 <Send_Init_Msg+0x298>
	{
		if(Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index)
 80025b6:	4b1c      	ldr	r3, [pc, #112]	; (8002628 <Send_Init_Msg+0x270>)
 80025b8:	791b      	ldrb	r3, [r3, #4]
 80025ba:	79fa      	ldrb	r2, [r7, #7]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d165      	bne.n	800268c <Send_Init_Msg+0x2d4>
		{
			uint8_t Rand_Number  = 0;
 80025c0:	2300      	movs	r3, #0
 80025c2:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
#ifdef STM_32
			Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 200 );
 80025c6:	4819      	ldr	r0, [pc, #100]	; (800262c <Send_Init_Msg+0x274>)
 80025c8:	f017 fc94 	bl	8019ef4 <HAL_RNG_GetRandomNumber>
 80025cc:	4602      	mov	r2, r0
 80025ce:	4b18      	ldr	r3, [pc, #96]	; (8002630 <Send_Init_Msg+0x278>)
 80025d0:	fba3 1302 	umull	r1, r3, r3, r2
 80025d4:	099b      	lsrs	r3, r3, #6
 80025d6:	21c8      	movs	r1, #200	; 0xc8
 80025d8:	fb01 f303 	mul.w	r3, r1, r3
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
#endif
			printf("Injected RX Sequence value failure\n");
 80025e2:	4817      	ldr	r0, [pc, #92]	; (8002640 <Send_Init_Msg+0x288>)
 80025e4:	f020 f87a 	bl	80226dc <puts>
			printf("Actual   RX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Rx_Seq);
 80025e8:	79fb      	ldrb	r3, [r7, #7]
 80025ea:	4a16      	ldr	r2, [pc, #88]	; (8002644 <Send_Init_Msg+0x28c>)
 80025ec:	011b      	lsls	r3, r3, #4
 80025ee:	4413      	add	r3, r2
 80025f0:	3302      	adds	r3, #2
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	4619      	mov	r1, r3
 80025f6:	4814      	ldr	r0, [pc, #80]	; (8002648 <Send_Init_Msg+0x290>)
 80025f8:	f01f ffd4 	bl	80225a4 <iprintf>
			printf("Injected RX Sequence value:%u\n",Rand_Number);
 80025fc:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002600:	4619      	mov	r1, r3
 8002602:	4812      	ldr	r0, [pc, #72]	; (800264c <Send_Init_Msg+0x294>)
 8002604:	f01f ffce 	bl	80225a4 <iprintf>
			InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number); // Rx Seq Number
 8002608:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800260c:	f107 020c 	add.w	r2, r7, #12
 8002610:	441a      	add	r2, r3
 8002612:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002616:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800261a:	2108      	movs	r1, #8
 800261c:	f7fe f886 	bl	800072c <InsertBits>
 8002620:	e034      	b.n	800268c <Send_Init_Msg+0x2d4>
 8002622:	bf00      	nop
 8002624:	20000304 	.word	0x20000304
 8002628:	20001968 	.word	0x20001968
 800262c:	20009c84 	.word	0x20009c84
 8002630:	51eb851f 	.word	0x51eb851f
 8002634:	08024110 	.word	0x08024110
 8002638:	08024134 	.word	0x08024134
 800263c:	08024154 	.word	0x08024154
 8002640:	08024174 	.word	0x08024174
 8002644:	200011d0 	.word	0x200011d0
 8002648:	08024198 	.word	0x08024198
 800264c:	080241b8 	.word	0x080241b8

	}
	else
	{
		// Hitachi_prms_st[Source_Index].Rx_Seq = Hitachi_prms_st[Source_Index].Seq_Init_Value + 1;
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], ++Hitachi_prms_st[Source_Index].Rx_Seq);
 8002650:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002654:	f107 020c 	add.w	r2, r7, #12
 8002658:	18d1      	adds	r1, r2, r3
 800265a:	79fb      	ldrb	r3, [r7, #7]
 800265c:	48c4      	ldr	r0, [pc, #784]	; (8002970 <Send_Init_Msg+0x5b8>)
 800265e:	011a      	lsls	r2, r3, #4
 8002660:	4402      	add	r2, r0
 8002662:	3202      	adds	r2, #2
 8002664:	7812      	ldrb	r2, [r2, #0]
 8002666:	3201      	adds	r2, #1
 8002668:	b2d4      	uxtb	r4, r2
 800266a:	48c1      	ldr	r0, [pc, #772]	; (8002970 <Send_Init_Msg+0x5b8>)
 800266c:	011a      	lsls	r2, r3, #4
 800266e:	4402      	add	r2, r0
 8002670:	3202      	adds	r2, #2
 8002672:	4620      	mov	r0, r4
 8002674:	7010      	strb	r0, [r2, #0]
 8002676:	4abe      	ldr	r2, [pc, #760]	; (8002970 <Send_Init_Msg+0x5b8>)
 8002678:	011b      	lsls	r3, r3, #4
 800267a:	4413      	add	r3, r2
 800267c:	3302      	adds	r3, #2
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002684:	460a      	mov	r2, r1
 8002686:	2108      	movs	r1, #8
 8002688:	f7fe f850 	bl	800072c <InsertBits>
	}
	BITSTUFFINC(8);
 800268c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002690:	3308      	adds	r3, #8
 8002692:	2b00      	cmp	r3, #0
 8002694:	da00      	bge.n	8002698 <Send_Init_Msg+0x2e0>
 8002696:	3307      	adds	r3, #7
 8002698:	10db      	asrs	r3, r3, #3
 800269a:	b29a      	uxth	r2, r3
 800269c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026a0:	4413      	add	r3, r2
 80026a2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80026a6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80026aa:	3308      	adds	r3, #8
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	b21b      	sxth	r3, r3
 80026b0:	425a      	negs	r2, r3
 80026b2:	f003 0307 	and.w	r3, r3, #7
 80026b6:	f002 0207 	and.w	r2, r2, #7
 80026ba:	bf58      	it	pl
 80026bc:	4253      	negpl	r3, r2
 80026be:	b21b      	sxth	r3, r3
 80026c0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], INIT_MSG);
 80026c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026c8:	f107 020c 	add.w	r2, r7, #12
 80026cc:	441a      	add	r2, r3
 80026ce:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80026d2:	2301      	movs	r3, #1
 80026d4:	2108      	movs	r1, #8
 80026d6:	f7fe f829 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80026da:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80026de:	3308      	adds	r3, #8
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	da00      	bge.n	80026e6 <Send_Init_Msg+0x32e>
 80026e4:	3307      	adds	r3, #7
 80026e6:	10db      	asrs	r3, r3, #3
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026ee:	4413      	add	r3, r2
 80026f0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80026f4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80026f8:	3308      	adds	r3, #8
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	b21b      	sxth	r3, r3
 80026fe:	425a      	negs	r2, r3
 8002700:	f003 0307 	and.w	r3, r3, #7
 8002704:	f002 0207 	and.w	r2, r2, #7
 8002708:	bf58      	it	pl
 800270a:	4253      	negpl	r3, r2
 800270c:	b21b      	sxth	r3, r3
 800270e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	Hitachi_prms_st[Source_Index].Tx_Msg_Status_Flag = 0x0005;
 8002712:	79fb      	ldrb	r3, [r7, #7]
 8002714:	4a96      	ldr	r2, [pc, #600]	; (8002970 <Send_Init_Msg+0x5b8>)
 8002716:	011b      	lsls	r3, r3, #4
 8002718:	4413      	add	r3, r2
 800271a:	3306      	adds	r3, #6
 800271c:	2205      	movs	r2, #5
 800271e:	801a      	strh	r2, [r3, #0]
	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Msg_Status_Flag);
 8002720:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002724:	f107 020c 	add.w	r2, r7, #12
 8002728:	441a      	add	r2, r3
 800272a:	79fb      	ldrb	r3, [r7, #7]
 800272c:	4990      	ldr	r1, [pc, #576]	; (8002970 <Send_Init_Msg+0x5b8>)
 800272e:	011b      	lsls	r3, r3, #4
 8002730:	440b      	add	r3, r1
 8002732:	3306      	adds	r3, #6
 8002734:	881b      	ldrh	r3, [r3, #0]
 8002736:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800273a:	2110      	movs	r1, #16
 800273c:	f7fd fff6 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002740:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002744:	3310      	adds	r3, #16
 8002746:	2b00      	cmp	r3, #0
 8002748:	da00      	bge.n	800274c <Send_Init_Msg+0x394>
 800274a:	3307      	adds	r3, #7
 800274c:	10db      	asrs	r3, r3, #3
 800274e:	b29a      	uxth	r2, r3
 8002750:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002754:	4413      	add	r3, r2
 8002756:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800275a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800275e:	3310      	adds	r3, #16
 8002760:	b29b      	uxth	r3, r3
 8002762:	b21b      	sxth	r3, r3
 8002764:	425a      	negs	r2, r3
 8002766:	f003 0307 	and.w	r3, r3, #7
 800276a:	f002 0207 	and.w	r2, r2, #7
 800276e:	bf58      	it	pl
 8002770:	4253      	negpl	r3, r2
 8002772:	b21b      	sxth	r3, r3
 8002774:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], INIT_MSG_SIZE);
 8002778:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800277c:	f107 020c 	add.w	r2, r7, #12
 8002780:	441a      	add	r2, r3
 8002782:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002786:	2317      	movs	r3, #23
 8002788:	2108      	movs	r1, #8
 800278a:	f7fd ffcf 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 800278e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002792:	3308      	adds	r3, #8
 8002794:	2b00      	cmp	r3, #0
 8002796:	da00      	bge.n	800279a <Send_Init_Msg+0x3e2>
 8002798:	3307      	adds	r3, #7
 800279a:	10db      	asrs	r3, r3, #3
 800279c:	b29a      	uxth	r2, r3
 800279e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027a2:	4413      	add	r3, r2
 80027a4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80027a8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80027ac:	3308      	adds	r3, #8
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	b21b      	sxth	r3, r3
 80027b2:	425a      	negs	r2, r3
 80027b4:	f003 0307 	and.w	r3, r3, #7
 80027b8:	f002 0207 	and.w	r2, r2, #7
 80027bc:	bf58      	it	pl
 80027be:	4253      	negpl	r3, r2
 80027c0:	b21b      	sxth	r3, r3
 80027c2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_PCOL_VER);
 80027c6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027ca:	f107 020c 	add.w	r2, r7, #12
 80027ce:	441a      	add	r2, r3
 80027d0:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80027d4:	2301      	movs	r3, #1
 80027d6:	2110      	movs	r1, #16
 80027d8:	f7fd ffa8 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 80027dc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80027e0:	3310      	adds	r3, #16
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	da00      	bge.n	80027e8 <Send_Init_Msg+0x430>
 80027e6:	3307      	adds	r3, #7
 80027e8:	10db      	asrs	r3, r3, #3
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027f0:	4413      	add	r3, r2
 80027f2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80027f6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80027fa:	3310      	adds	r3, #16
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	b21b      	sxth	r3, r3
 8002800:	425a      	negs	r2, r3
 8002802:	f003 0307 	and.w	r3, r3, #7
 8002806:	f002 0207 	and.w	r2, r2, #7
 800280a:	bf58      	it	pl
 800280c:	4253      	negpl	r3, r2
 800280e:	b21b      	sxth	r3, r3
 8002810:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	//As Execuctive version is 6Bytes we divided in two parts as 32-bit AND 16-bit
	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], EIPC_EXE_VER_1);
 8002814:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002818:	f107 020c 	add.w	r2, r7, #12
 800281c:	441a      	add	r2, r3
 800281e:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002822:	4b54      	ldr	r3, [pc, #336]	; (8002974 <Send_Init_Msg+0x5bc>)
 8002824:	2120      	movs	r1, #32
 8002826:	f7fd ff81 	bl	800072c <InsertBits>
	BITSTUFFINC(32);
 800282a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800282e:	3320      	adds	r3, #32
 8002830:	2b00      	cmp	r3, #0
 8002832:	da00      	bge.n	8002836 <Send_Init_Msg+0x47e>
 8002834:	3307      	adds	r3, #7
 8002836:	10db      	asrs	r3, r3, #3
 8002838:	b29a      	uxth	r2, r3
 800283a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800283e:	4413      	add	r3, r2
 8002840:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002844:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002848:	3320      	adds	r3, #32
 800284a:	b29b      	uxth	r3, r3
 800284c:	b21b      	sxth	r3, r3
 800284e:	425a      	negs	r2, r3
 8002850:	f003 0307 	and.w	r3, r3, #7
 8002854:	f002 0207 	and.w	r2, r2, #7
 8002858:	bf58      	it	pl
 800285a:	4253      	negpl	r3, r2
 800285c:	b21b      	sxth	r3, r3
 800285e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_EXE_VER_2);
 8002862:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002866:	f107 020c 	add.w	r2, r7, #12
 800286a:	441a      	add	r2, r3
 800286c:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002870:	2300      	movs	r3, #0
 8002872:	2110      	movs	r1, #16
 8002874:	f7fd ff5a 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002878:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800287c:	3310      	adds	r3, #16
 800287e:	2b00      	cmp	r3, #0
 8002880:	da00      	bge.n	8002884 <Send_Init_Msg+0x4cc>
 8002882:	3307      	adds	r3, #7
 8002884:	10db      	asrs	r3, r3, #3
 8002886:	b29a      	uxth	r2, r3
 8002888:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800288c:	4413      	add	r3, r2
 800288e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002892:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002896:	3310      	adds	r3, #16
 8002898:	b29b      	uxth	r3, r3
 800289a:	b21b      	sxth	r3, r3
 800289c:	425a      	negs	r2, r3
 800289e:	f003 0307 	and.w	r3, r3, #7
 80028a2:	f002 0207 	and.w	r2, r2, #7
 80028a6:	bf58      	it	pl
 80028a8:	4253      	negpl	r3, r2
 80028aa:	b21b      	sxth	r3, r3
 80028ac:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_APP_COMP_STAMP);
 80028b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80028b4:	f107 020c 	add.w	r2, r7, #12
 80028b8:	441a      	add	r2, r3
 80028ba:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80028be:	2300      	movs	r3, #0
 80028c0:	2110      	movs	r1, #16
 80028c2:	f7fd ff33 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 80028c6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80028ca:	3310      	adds	r3, #16
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	da00      	bge.n	80028d2 <Send_Init_Msg+0x51a>
 80028d0:	3307      	adds	r3, #7
 80028d2:	10db      	asrs	r3, r3, #3
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80028da:	4413      	add	r3, r2
 80028dc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80028e0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80028e4:	3310      	adds	r3, #16
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	b21b      	sxth	r3, r3
 80028ea:	425a      	negs	r2, r3
 80028ec:	f003 0307 	and.w	r3, r3, #7
 80028f0:	f002 0207 	and.w	r2, r2, #7
 80028f4:	bf58      	it	pl
 80028f6:	4253      	negpl	r3, r2
 80028f8:	b21b      	sxth	r3, r3
 80028fa:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_EXE_IDEN_CRC);
 80028fe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002902:	f107 020c 	add.w	r2, r7, #12
 8002906:	441a      	add	r2, r3
 8002908:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800290c:	2300      	movs	r3, #0
 800290e:	2110      	movs	r1, #16
 8002910:	f7fd ff0c 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002914:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002918:	3310      	adds	r3, #16
 800291a:	2b00      	cmp	r3, #0
 800291c:	da00      	bge.n	8002920 <Send_Init_Msg+0x568>
 800291e:	3307      	adds	r3, #7
 8002920:	10db      	asrs	r3, r3, #3
 8002922:	b29a      	uxth	r2, r3
 8002924:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002928:	4413      	add	r3, r2
 800292a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800292e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002932:	3310      	adds	r3, #16
 8002934:	b29b      	uxth	r3, r3
 8002936:	b21b      	sxth	r3, r3
 8002938:	425a      	negs	r2, r3
 800293a:	f003 0307 	and.w	r3, r3, #7
 800293e:	f002 0207 	and.w	r2, r2, #7
 8002942:	bf58      	it	pl
 8002944:	4253      	negpl	r3, r2
 8002946:	b21b      	sxth	r3, r3
 8002948:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_APP_IDEN_CRC);
 800294c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002950:	f107 020c 	add.w	r2, r7, #12
 8002954:	441a      	add	r2, r3
 8002956:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800295a:	2300      	movs	r3, #0
 800295c:	2110      	movs	r1, #16
 800295e:	f7fd fee5 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002962:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002966:	3310      	adds	r3, #16
 8002968:	2b00      	cmp	r3, #0
 800296a:	da05      	bge.n	8002978 <Send_Init_Msg+0x5c0>
 800296c:	3307      	adds	r3, #7
 800296e:	e003      	b.n	8002978 <Send_Init_Msg+0x5c0>
 8002970:	200011d0 	.word	0x200011d0
 8002974:	33e232af 	.word	0x33e232af
 8002978:	10db      	asrs	r3, r3, #3
 800297a:	b29a      	uxth	r2, r3
 800297c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002980:	4413      	add	r3, r2
 8002982:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002986:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800298a:	3310      	adds	r3, #16
 800298c:	b29b      	uxth	r3, r3
 800298e:	b21b      	sxth	r3, r3
 8002990:	425a      	negs	r2, r3
 8002992:	f003 0307 	and.w	r3, r3, #7
 8002996:	f002 0207 	and.w	r2, r2, #7
 800299a:	bf58      	it	pl
 800299c:	4253      	negpl	r3, r2
 800299e:	b21b      	sxth	r3, r3
 80029a0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	//we are sending VITAL CRC INIT VALUE by adding 1 to the Vital_CRC_Init_Value in INIT_MESSAGE from Hitachi
	if(Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value >= 0xfffff0)
 80029a4:	79fb      	ldrb	r3, [r7, #7]
 80029a6:	4ab2      	ldr	r2, [pc, #712]	; (8002c70 <Send_Init_Msg+0x8b8>)
 80029a8:	011b      	lsls	r3, r3, #4
 80029aa:	4413      	add	r3, r2
 80029ac:	3308      	adds	r3, #8
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4ab0      	ldr	r2, [pc, #704]	; (8002c74 <Send_Init_Msg+0x8bc>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d90d      	bls.n	80029d2 <Send_Init_Msg+0x61a>
	{
		Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value - 1;
 80029b6:	79fb      	ldrb	r3, [r7, #7]
 80029b8:	4aad      	ldr	r2, [pc, #692]	; (8002c70 <Send_Init_Msg+0x8b8>)
 80029ba:	011b      	lsls	r3, r3, #4
 80029bc:	4413      	add	r3, r2
 80029be:	3308      	adds	r3, #8
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	79fb      	ldrb	r3, [r7, #7]
 80029c4:	3a01      	subs	r2, #1
 80029c6:	49aa      	ldr	r1, [pc, #680]	; (8002c70 <Send_Init_Msg+0x8b8>)
 80029c8:	011b      	lsls	r3, r3, #4
 80029ca:	440b      	add	r3, r1
 80029cc:	330c      	adds	r3, #12
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	e00c      	b.n	80029ec <Send_Init_Msg+0x634>
	}
	else
	{
		Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value + 1;
 80029d2:	79fb      	ldrb	r3, [r7, #7]
 80029d4:	4aa6      	ldr	r2, [pc, #664]	; (8002c70 <Send_Init_Msg+0x8b8>)
 80029d6:	011b      	lsls	r3, r3, #4
 80029d8:	4413      	add	r3, r2
 80029da:	3308      	adds	r3, #8
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	79fb      	ldrb	r3, [r7, #7]
 80029e0:	3201      	adds	r2, #1
 80029e2:	49a3      	ldr	r1, [pc, #652]	; (8002c70 <Send_Init_Msg+0x8b8>)
 80029e4:	011b      	lsls	r3, r3, #4
 80029e6:	440b      	add	r3, r1
 80029e8:	330c      	adds	r3, #12
 80029ea:	601a      	str	r2, [r3, #0]
	}

	InsertBits(ucBit, 24, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 80029ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029f0:	f107 020c 	add.w	r2, r7, #12
 80029f4:	441a      	add	r2, r3
 80029f6:	79fb      	ldrb	r3, [r7, #7]
 80029f8:	499d      	ldr	r1, [pc, #628]	; (8002c70 <Send_Init_Msg+0x8b8>)
 80029fa:	011b      	lsls	r3, r3, #4
 80029fc:	440b      	add	r3, r1
 80029fe:	330c      	adds	r3, #12
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002a06:	2118      	movs	r1, #24
 8002a08:	f7fd fe90 	bl	800072c <InsertBits>
	Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 8002a0c:	79fb      	ldrb	r3, [r7, #7]
 8002a0e:	79fa      	ldrb	r2, [r7, #7]
 8002a10:	4997      	ldr	r1, [pc, #604]	; (8002c70 <Send_Init_Msg+0x8b8>)
 8002a12:	011b      	lsls	r3, r3, #4
 8002a14:	440b      	add	r3, r1
 8002a16:	330c      	adds	r3, #12
 8002a18:	6819      	ldr	r1, [r3, #0]
 8002a1a:	4897      	ldr	r0, [pc, #604]	; (8002c78 <Send_Init_Msg+0x8c0>)
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	4413      	add	r3, r2
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	4403      	add	r3, r0
 8002a26:	330c      	adds	r3, #12
 8002a28:	6019      	str	r1, [r3, #0]
	BITSTUFFINC(24);
 8002a2a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002a2e:	3318      	adds	r3, #24
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	da00      	bge.n	8002a36 <Send_Init_Msg+0x67e>
 8002a34:	3307      	adds	r3, #7
 8002a36:	10db      	asrs	r3, r3, #3
 8002a38:	b29a      	uxth	r2, r3
 8002a3a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a3e:	4413      	add	r3, r2
 8002a40:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002a44:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002a48:	3318      	adds	r3, #24
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	b21b      	sxth	r3, r3
 8002a4e:	425a      	negs	r2, r3
 8002a50:	f003 0307 	and.w	r3, r3, #7
 8002a54:	f002 0207 	and.w	r2, r2, #7
 8002a58:	bf58      	it	pl
 8002a5a:	4253      	negpl	r3, r2
 8002a5c:	b21b      	sxth	r3, r3
 8002a5e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	++Self_Seq_Init_Value[Source_Index];
 8002a62:	79fb      	ldrb	r3, [r7, #7]
 8002a64:	4a85      	ldr	r2, [pc, #532]	; (8002c7c <Send_Init_Msg+0x8c4>)
 8002a66:	5cd2      	ldrb	r2, [r2, r3]
 8002a68:	3201      	adds	r2, #1
 8002a6a:	b2d1      	uxtb	r1, r2
 8002a6c:	4a83      	ldr	r2, [pc, #524]	; (8002c7c <Send_Init_Msg+0x8c4>)
 8002a6e:	54d1      	strb	r1, [r2, r3]
	if((Self_Seq_Init_Value[Source_Index]>= 180) || (Self_Seq_Init_Value[Source_Index] == 0) )
 8002a70:	79fb      	ldrb	r3, [r7, #7]
 8002a72:	4a82      	ldr	r2, [pc, #520]	; (8002c7c <Send_Init_Msg+0x8c4>)
 8002a74:	5cd3      	ldrb	r3, [r2, r3]
 8002a76:	2bb3      	cmp	r3, #179	; 0xb3
 8002a78:	d804      	bhi.n	8002a84 <Send_Init_Msg+0x6cc>
 8002a7a:	79fb      	ldrb	r3, [r7, #7]
 8002a7c:	4a7f      	ldr	r2, [pc, #508]	; (8002c7c <Send_Init_Msg+0x8c4>)
 8002a7e:	5cd3      	ldrb	r3, [r2, r3]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d103      	bne.n	8002a8c <Send_Init_Msg+0x6d4>
	{
		Self_Seq_Init_Value[Source_Index] = 10;
 8002a84:	79fb      	ldrb	r3, [r7, #7]
 8002a86:	4a7d      	ldr	r2, [pc, #500]	; (8002c7c <Send_Init_Msg+0x8c4>)
 8002a88:	210a      	movs	r1, #10
 8002a8a:	54d1      	strb	r1, [r2, r3]
	}

	//printf("\nSelf Seq Init Value:%u\n",Self_Seq_Init_Value[Source_Index]);
	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Self_Seq_Init_Value[Source_Index]);
 8002a8c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a90:	f107 020c 	add.w	r2, r7, #12
 8002a94:	441a      	add	r2, r3
 8002a96:	79fb      	ldrb	r3, [r7, #7]
 8002a98:	4978      	ldr	r1, [pc, #480]	; (8002c7c <Send_Init_Msg+0x8c4>)
 8002a9a:	5ccb      	ldrb	r3, [r1, r3]
 8002a9c:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002aa0:	2108      	movs	r1, #8
 8002aa2:	f7fd fe43 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8002aa6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002aaa:	3308      	adds	r3, #8
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	da00      	bge.n	8002ab2 <Send_Init_Msg+0x6fa>
 8002ab0:	3307      	adds	r3, #7
 8002ab2:	10db      	asrs	r3, r3, #3
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002aba:	4413      	add	r3, r2
 8002abc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002ac0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002ac4:	3308      	adds	r3, #8
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	b21b      	sxth	r3, r3
 8002aca:	425a      	negs	r2, r3
 8002acc:	f003 0307 	and.w	r3, r3, #7
 8002ad0:	f002 0207 	and.w	r2, r2, #7
 8002ad4:	bf58      	it	pl
 8002ad6:	4253      	negpl	r3, r2
 8002ad8:	b21b      	sxth	r3, r3
 8002ada:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], V_NV_FLAG);
 8002ade:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ae2:	f107 020c 	add.w	r2, r7, #12
 8002ae6:	441a      	add	r2, r3
 8002ae8:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002aec:	2301      	movs	r3, #1
 8002aee:	2108      	movs	r1, #8
 8002af0:	f7fd fe1c 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8002af4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002af8:	3308      	adds	r3, #8
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	da00      	bge.n	8002b00 <Send_Init_Msg+0x748>
 8002afe:	3307      	adds	r3, #7
 8002b00:	10db      	asrs	r3, r3, #3
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b08:	4413      	add	r3, r2
 8002b0a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002b0e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002b12:	3308      	adds	r3, #8
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	b21b      	sxth	r3, r3
 8002b18:	425a      	negs	r2, r3
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	f002 0207 	and.w	r2, r2, #7
 8002b22:	bf58      	it	pl
 8002b24:	4253      	negpl	r3, r2
 8002b26:	b21b      	sxth	r3, r3
 8002b28:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], SIZE_BOOL_VAL_DATA);
 8002b2c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b30:	f107 020c 	add.w	r2, r7, #12
 8002b34:	441a      	add	r2, r3
 8002b36:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	2108      	movs	r1, #8
 8002b3e:	f7fd fdf5 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8002b42:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002b46:	3308      	adds	r3, #8
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	da00      	bge.n	8002b4e <Send_Init_Msg+0x796>
 8002b4c:	3307      	adds	r3, #7
 8002b4e:	10db      	asrs	r3, r3, #3
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b56:	4413      	add	r3, r2
 8002b58:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002b5c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002b60:	3308      	adds	r3, #8
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	b21b      	sxth	r3, r3
 8002b66:	425a      	negs	r2, r3
 8002b68:	f003 0307 	and.w	r3, r3, #7
 8002b6c:	f002 0207 	and.w	r2, r2, #7
 8002b70:	bf58      	it	pl
 8002b72:	4253      	negpl	r3, r2
 8002b74:	b21b      	sxth	r3, r3
 8002b76:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], SIZE_NUMER_VAL_DATA);
 8002b7a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b7e:	f107 020c 	add.w	r2, r7, #12
 8002b82:	441a      	add	r2, r3
 8002b84:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002b88:	2300      	movs	r3, #0
 8002b8a:	2108      	movs	r1, #8
 8002b8c:	f7fd fdce 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8002b90:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002b94:	3308      	adds	r3, #8
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	da00      	bge.n	8002b9c <Send_Init_Msg+0x7e4>
 8002b9a:	3307      	adds	r3, #7
 8002b9c:	10db      	asrs	r3, r3, #3
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ba4:	4413      	add	r3, r2
 8002ba6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002baa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002bae:	3308      	adds	r3, #8
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	b21b      	sxth	r3, r3
 8002bb4:	425a      	negs	r2, r3
 8002bb6:	f003 0307 	and.w	r3, r3, #7
 8002bba:	f002 0207 	and.w	r2, r2, #7
 8002bbe:	bf58      	it	pl
 8002bc0:	4253      	negpl	r3, r2
 8002bc2:	b21b      	sxth	r3, r3
 8002bc4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	//printf("Hitachi_fault_injection_st.FAULT_INJECTION_BITS:%lu\n",Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
	//printf("Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX:%u\n",Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX);

	if( ( (CHECKFLAG(5,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8002bc8:	4b2d      	ldr	r3, [pc, #180]	; (8002c80 <Send_Init_Msg+0x8c8>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	095b      	lsrs	r3, r3, #5
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d060      	beq.n	8002c98 <Send_Init_Msg+0x8e0>
 8002bd6:	4b2a      	ldr	r3, [pc, #168]	; (8002c80 <Send_Init_Msg+0x8c8>)
 8002bd8:	791b      	ldrb	r3, [r3, #4]
 8002bda:	79fa      	ldrb	r2, [r7, #7]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d15b      	bne.n	8002c98 <Send_Init_Msg+0x8e0>
	{
		uint8_t Rand_Number = 12;
 8002be0:	230c      	movs	r3, #12
 8002be2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#ifdef STM_32
		Rand_Number  = (HAL_RNG_GetRandomNumber(&hrng) % 125) + 1;
 8002be6:	4827      	ldr	r0, [pc, #156]	; (8002c84 <Send_Init_Msg+0x8cc>)
 8002be8:	f017 f984 	bl	8019ef4 <HAL_RNG_GetRandomNumber>
 8002bec:	4601      	mov	r1, r0
 8002bee:	4b26      	ldr	r3, [pc, #152]	; (8002c88 <Send_Init_Msg+0x8d0>)
 8002bf0:	fba3 2301 	umull	r2, r3, r3, r1
 8002bf4:	08da      	lsrs	r2, r3, #3
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	015b      	lsls	r3, r3, #5
 8002bfa:	1a9b      	subs	r3, r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4413      	add	r3, r2
 8002c00:	1aca      	subs	r2, r1, r3
 8002c02:	b2d3      	uxtb	r3, r2
 8002c04:	3301      	adds	r3, #1
 8002c06:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#endif
		printf("Injecting Invalid Boolean value Outputs failure\n");
 8002c0a:	4820      	ldr	r0, [pc, #128]	; (8002c8c <Send_Init_Msg+0x8d4>)
 8002c0c:	f01f fd66 	bl	80226dc <puts>
		printf("Actual Boolean value:%u\n",Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA);
 8002c10:	79fb      	ldrb	r3, [r7, #7]
 8002c12:	4a17      	ldr	r2, [pc, #92]	; (8002c70 <Send_Init_Msg+0x8b8>)
 8002c14:	011b      	lsls	r3, r3, #4
 8002c16:	4413      	add	r3, r2
 8002c18:	3303      	adds	r3, #3
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	481c      	ldr	r0, [pc, #112]	; (8002c90 <Send_Init_Msg+0x8d8>)
 8002c20:	f01f fcc0 	bl	80225a4 <iprintf>
		if(Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA == Rand_Number)
 8002c24:	79fb      	ldrb	r3, [r7, #7]
 8002c26:	4a12      	ldr	r2, [pc, #72]	; (8002c70 <Send_Init_Msg+0x8b8>)
 8002c28:	011b      	lsls	r3, r3, #4
 8002c2a:	4413      	add	r3, r2
 8002c2c:	3303      	adds	r3, #3
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d108      	bne.n	8002c4a <Send_Init_Msg+0x892>
		{
			Rand_Number = Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA-2;
 8002c38:	79fb      	ldrb	r3, [r7, #7]
 8002c3a:	4a0d      	ldr	r2, [pc, #52]	; (8002c70 <Send_Init_Msg+0x8b8>)
 8002c3c:	011b      	lsls	r3, r3, #4
 8002c3e:	4413      	add	r3, r2
 8002c40:	3303      	adds	r3, #3
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	3b02      	subs	r3, #2
 8002c46:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		printf("Injected Boolean value:%u\n",Rand_Number);
 8002c4a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002c4e:	4619      	mov	r1, r3
 8002c50:	4810      	ldr	r0, [pc, #64]	; (8002c94 <Send_Init_Msg+0x8dc>)
 8002c52:	f01f fca7 	bl	80225a4 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number);
 8002c56:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c5a:	f107 020c 	add.w	r2, r7, #12
 8002c5e:	441a      	add	r2, r3
 8002c60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002c64:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002c68:	2108      	movs	r1, #8
 8002c6a:	f7fd fd5f 	bl	800072c <InsertBits>
	{
 8002c6e:	e022      	b.n	8002cb6 <Send_Init_Msg+0x8fe>
 8002c70:	200011d0 	.word	0x200011d0
 8002c74:	00ffffef 	.word	0x00ffffef
 8002c78:	20001680 	.word	0x20001680
 8002c7c:	2000010c 	.word	0x2000010c
 8002c80:	20001968 	.word	0x20001968
 8002c84:	20009c84 	.word	0x20009c84
 8002c88:	10624dd3 	.word	0x10624dd3
 8002c8c:	080241d8 	.word	0x080241d8
 8002c90:	08024208 	.word	0x08024208
 8002c94:	08024224 	.word	0x08024224
	}
	else
	{
		//InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA);
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], EI_data.Hitachi_st.Bool_outputs[Source_Index]);
 8002c98:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c9c:	f107 020c 	add.w	r2, r7, #12
 8002ca0:	441a      	add	r2, r3
 8002ca2:	79fb      	ldrb	r3, [r7, #7]
 8002ca4:	494e      	ldr	r1, [pc, #312]	; (8002de0 <Send_Init_Msg+0xa28>)
 8002ca6:	440b      	add	r3, r1
 8002ca8:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 8002cac:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002cb0:	2108      	movs	r1, #8
 8002cb2:	f7fd fd3b 	bl	800072c <InsertBits>
	}
	BITSTUFFINC(8);
 8002cb6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002cba:	3308      	adds	r3, #8
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	da00      	bge.n	8002cc2 <Send_Init_Msg+0x90a>
 8002cc0:	3307      	adds	r3, #7
 8002cc2:	10db      	asrs	r3, r3, #3
 8002cc4:	b29a      	uxth	r2, r3
 8002cc6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002cca:	4413      	add	r3, r2
 8002ccc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002cd0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002cd4:	3308      	adds	r3, #8
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	b21b      	sxth	r3, r3
 8002cda:	425a      	negs	r2, r3
 8002cdc:	f003 0307 	and.w	r3, r3, #7
 8002ce0:	f002 0207 	and.w	r2, r2, #7
 8002ce4:	bf58      	it	pl
 8002ce6:	4253      	negpl	r3, r2
 8002ce8:	b21b      	sxth	r3, r3
 8002cea:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], VAL_NUM_OUTPUTS);
 8002cee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002cf2:	f107 020c 	add.w	r2, r7, #12
 8002cf6:	441a      	add	r2, r3
 8002cf8:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	2108      	movs	r1, #8
 8002d00:	f7fd fd14 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8002d04:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002d08:	3308      	adds	r3, #8
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	da00      	bge.n	8002d10 <Send_Init_Msg+0x958>
 8002d0e:	3307      	adds	r3, #7
 8002d10:	10db      	asrs	r3, r3, #3
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d18:	4413      	add	r3, r2
 8002d1a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002d1e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002d22:	3308      	adds	r3, #8
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	b21b      	sxth	r3, r3
 8002d28:	425a      	negs	r2, r3
 8002d2a:	f003 0307 	and.w	r3, r3, #7
 8002d2e:	f002 0207 	and.w	r2, r2, #7
 8002d32:	bf58      	it	pl
 8002d34:	4253      	negpl	r3, r2
 8002d36:	b21b      	sxth	r3, r3
 8002d38:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	Calc_CRC = CalculateDirectReverseCrc(Transmit_Buff, ucByte);
 8002d3c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8002d40:	f107 030c 	add.w	r3, r7, #12
 8002d44:	4611      	mov	r1, r2
 8002d46:	4618      	mov	r0, r3
 8002d48:	f010 f84a 	bl	8012de0 <CalculateDirectReverseCrc>
 8002d4c:	6538      	str	r0, [r7, #80]	; 0x50
	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], Calc_CRC);
 8002d4e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d52:	f107 020c 	add.w	r2, r7, #12
 8002d56:	441a      	add	r2, r3
 8002d58:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002d5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d5e:	2120      	movs	r1, #32
 8002d60:	f7fd fce4 	bl	800072c <InsertBits>
	BITSTUFFINC(32);
 8002d64:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002d68:	3320      	adds	r3, #32
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	da00      	bge.n	8002d70 <Send_Init_Msg+0x9b8>
 8002d6e:	3307      	adds	r3, #7
 8002d70:	10db      	asrs	r3, r3, #3
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d78:	4413      	add	r3, r2
 8002d7a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002d7e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002d82:	3320      	adds	r3, #32
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	b21b      	sxth	r3, r3
 8002d88:	425a      	negs	r2, r3
 8002d8a:	f003 0307 	and.w	r3, r3, #7
 8002d8e:	f002 0207 	and.w	r2, r2, #7
 8002d92:	bf58      	it	pl
 8002d94:	4253      	negpl	r3, r2
 8002d96:	b21b      	sxth	r3, r3
 8002d98:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( ( CHECKFLAG(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)== SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8002d9c:	4b11      	ldr	r3, [pc, #68]	; (8002de4 <Send_Init_Msg+0xa2c>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	0a5b      	lsrs	r3, r3, #9
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00b      	beq.n	8002dc2 <Send_Init_Msg+0xa0a>
 8002daa:	4b0e      	ldr	r3, [pc, #56]	; (8002de4 <Send_Init_Msg+0xa2c>)
 8002dac:	791b      	ldrb	r3, [r3, #4]
 8002dae:	79fa      	ldrb	r2, [r7, #7]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d106      	bne.n	8002dc2 <Send_Init_Msg+0xa0a>
	{
		printf("Injected ETH tx Fail\n");
 8002db4:	480c      	ldr	r0, [pc, #48]	; (8002de8 <Send_Init_Msg+0xa30>)
 8002db6:	f01f fc91 	bl	80226dc <puts>
		printf("Not Sending Reply");
 8002dba:	480c      	ldr	r0, [pc, #48]	; (8002dec <Send_Init_Msg+0xa34>)
 8002dbc:	f01f fbf2 	bl	80225a4 <iprintf>
 8002dc0:	e009      	b.n	8002dd6 <Send_Init_Msg+0xa1e>
	}
	else
	{
		Process_Sending_Reply(Transmit_Buff,ucByte,Source_Index);
 8002dc2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002dc6:	b2d9      	uxtb	r1, r3
 8002dc8:	79fa      	ldrb	r2, [r7, #7]
 8002dca:	f107 030c 	add.w	r3, r7, #12
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f004 fc40 	bl	8007654 <Process_Sending_Reply>
	}
}
 8002dd4:	bf00      	nop
 8002dd6:	bf00      	nop
 8002dd8:	375c      	adds	r7, #92	; 0x5c
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd90      	pop	{r4, r7, pc}
 8002dde:	bf00      	nop
 8002de0:	20000304 	.word	0x20000304
 8002de4:	20001968 	.word	0x20001968
 8002de8:	08024240 	.word	0x08024240
 8002dec:	08024258 	.word	0x08024258

08002df0 <Vital_Msg_extr>:

void Vital_Msg_extr(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 8002df0:	b590      	push	{r4, r7, lr}
 8002df2:	b099      	sub	sp, #100	; 0x64
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	4608      	mov	r0, r1
 8002dfa:	4611      	mov	r1, r2
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	4603      	mov	r3, r0
 8002e00:	70fb      	strb	r3, [r7, #3]
 8002e02:	460b      	mov	r3, r1
 8002e04:	70bb      	strb	r3, [r7, #2]
 8002e06:	4613      	mov	r3, r2
 8002e08:	707b      	strb	r3, [r7, #1]
	uint16_t Traverser = 0;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	uint32_t Calc_CRC = 0;
 8002e10:	2300      	movs	r3, #0
 8002e12:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t Recv_CRC = 0;
 8002e14:	2300      	movs	r3, #0
 8002e16:	65bb      	str	r3, [r7, #88]	; 0x58
	uint32_t Ticks = HAL_GetTick();
 8002e18:	f012 fbba 	bl	8015590 <HAL_GetTick>
 8002e1c:	64b8      	str	r0, [r7, #72]	; 0x48
	uint8_t noofIP = 0, uc_index = 0;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002e24:	2300      	movs	r3, #0
 8002e26:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	uint8_t LinkEstablishFlag = CLEAR;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	uint8_t Temp_Vital_Data_Buff[60] = {0,};
 8002e30:	2300      	movs	r3, #0
 8002e32:	60bb      	str	r3, [r7, #8]
 8002e34:	f107 030c 	add.w	r3, r7, #12
 8002e38:	2238      	movs	r2, #56	; 0x38
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f01f fac9 	bl	80223d4 <memset>
	BITSTUFFINIT(0, 0);
 8002e42:	2300      	movs	r3, #0
 8002e44:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8002e48:	2300      	movs	r3, #0
 8002e4a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50


	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8002e4e:	49a1      	ldr	r1, [pc, #644]	; (80030d4 <Vital_Msg_extr+0x2e4>)
 8002e50:	48a1      	ldr	r0, [pc, #644]	; (80030d8 <Vital_Msg_extr+0x2e8>)
 8002e52:	f7fd f9f5 	bl	8000240 <strcmp>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f000 8138 	beq.w	80030ce <Vital_Msg_extr+0x2de>
		//Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = 0x123456;
		goto ROLLOVER_VITAL;
	}


	if( ( (CHECKFLAG(0,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8002e5e:	4b9f      	ldr	r3, [pc, #636]	; (80030dc <Vital_Msg_extr+0x2ec>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d02d      	beq.n	8002ec6 <Vital_Msg_extr+0xd6>
 8002e6a:	4b9c      	ldr	r3, [pc, #624]	; (80030dc <Vital_Msg_extr+0x2ec>)
 8002e6c:	791b      	ldrb	r3, [r3, #4]
 8002e6e:	78ba      	ldrb	r2, [r7, #2]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d128      	bne.n	8002ec6 <Vital_Msg_extr+0xd6>
	{
		uint32_t Rand_Number = 22;
 8002e74:	2316      	movs	r3, #22
 8002e76:	647b      	str	r3, [r7, #68]	; 0x44
#ifdef STM_32
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 0xffff00);
 8002e78:	4899      	ldr	r0, [pc, #612]	; (80030e0 <Vital_Msg_extr+0x2f0>)
 8002e7a:	f017 f83b 	bl	8019ef4 <HAL_RNG_GetRandomNumber>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	4b98      	ldr	r3, [pc, #608]	; (80030e4 <Vital_Msg_extr+0x2f4>)
 8002e82:	fba3 1302 	umull	r1, r3, r3, r2
 8002e86:	0dd9      	lsrs	r1, r3, #23
 8002e88:	460b      	mov	r3, r1
 8002e8a:	041b      	lsls	r3, r3, #16
 8002e8c:	1a5b      	subs	r3, r3, r1
 8002e8e:	021b      	lsls	r3, r3, #8
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	647b      	str	r3, [r7, #68]	; 0x44
#endif
		printf("\nInjected RX Vital CRC failure\n");
 8002e94:	4894      	ldr	r0, [pc, #592]	; (80030e8 <Vital_Msg_extr+0x2f8>)
 8002e96:	f01f fc21 	bl	80226dc <puts>
		printf("Actual   RX Vital Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8002e9a:	78bb      	ldrb	r3, [r7, #2]
 8002e9c:	4a93      	ldr	r2, [pc, #588]	; (80030ec <Vital_Msg_extr+0x2fc>)
 8002e9e:	011b      	lsls	r3, r3, #4
 8002ea0:	4413      	add	r3, r2
 8002ea2:	3308      	adds	r3, #8
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	4891      	ldr	r0, [pc, #580]	; (80030f0 <Vital_Msg_extr+0x300>)
 8002eaa:	f01f fb7b 	bl	80225a4 <iprintf>
		printf("Injected RX Vital Init Value:0x%06lX\n",Rand_Number);
 8002eae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002eb0:	4890      	ldr	r0, [pc, #576]	; (80030f4 <Vital_Msg_extr+0x304>)
 8002eb2:	f01f fb77 	bl	80225a4 <iprintf>
		InsertBits(0, 24, &Temp_Vital_Data_Buff[0],Rand_Number);
 8002eb6:	f107 0208 	add.w	r2, r7, #8
 8002eba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ebc:	2118      	movs	r1, #24
 8002ebe:	2000      	movs	r0, #0
 8002ec0:	f7fd fc34 	bl	800072c <InsertBits>
	{
 8002ec4:	e00b      	b.n	8002ede <Vital_Msg_extr+0xee>
	}
	else
	{
		InsertBits(0, 24, &Temp_Vital_Data_Buff[0], Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8002ec6:	78bb      	ldrb	r3, [r7, #2]
 8002ec8:	4a88      	ldr	r2, [pc, #544]	; (80030ec <Vital_Msg_extr+0x2fc>)
 8002eca:	011b      	lsls	r3, r3, #4
 8002ecc:	4413      	add	r3, r2
 8002ece:	3308      	adds	r3, #8
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f107 0208 	add.w	r2, r7, #8
 8002ed6:	2118      	movs	r1, #24
 8002ed8:	2000      	movs	r0, #0
 8002eda:	f7fd fc27 	bl	800072c <InsertBits>
	}
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8002ede:	2300      	movs	r3, #0
 8002ee0:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8002ee4:	e010      	b.n	8002f08 <Vital_Msg_extr+0x118>
	{
		Temp_Vital_Data_Buff[uc_index + 3] = Buff[uc_index];
 8002ee6:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	441a      	add	r2, r3
 8002eee:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002ef2:	3303      	adds	r3, #3
 8002ef4:	7812      	ldrb	r2, [r2, #0]
 8002ef6:	3360      	adds	r3, #96	; 0x60
 8002ef8:	443b      	add	r3, r7
 8002efa:	f803 2c58 	strb.w	r2, [r3, #-88]
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8002efe:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002f02:	3301      	adds	r3, #1
 8002f04:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8002f08:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8002f0c:	78fb      	ldrb	r3, [r7, #3]
 8002f0e:	3b05      	subs	r3, #5
 8002f10:	429a      	cmp	r2, r3
 8002f12:	dbe8      	blt.n	8002ee6 <Vital_Msg_extr+0xf6>
	}
	Calc_CRC = CalculateDirectReverseCrc(Temp_Vital_Data_Buff, uc_index + 3);
 8002f14:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	3303      	adds	r3, #3
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	f107 0308 	add.w	r3, r7, #8
 8002f22:	4611      	mov	r1, r2
 8002f24:	4618      	mov	r0, r3
 8002f26:	f00f ff5b 	bl	8012de0 <CalculateDirectReverseCrc>
 8002f2a:	64f8      	str	r0, [r7, #76]	; 0x4c
	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 8002f2c:	78fb      	ldrb	r3, [r7, #3]
 8002f2e:	3b05      	subs	r3, #5
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	441a      	add	r2, r3
 8002f34:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002f38:	2120      	movs	r1, #32
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7fd fb6a 	bl	8000614 <ExtractBits>
 8002f40:	65b8      	str	r0, [r7, #88]	; 0x58

	//	printf("\n___________________________________ VITAL-MSG ___________________________________\n");
	if(Calc_CRC != Recv_CRC)
 8002f42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f46:	429a      	cmp	r2, r3
 8002f48:	f000 80ec 	beq.w	8003124 <Vital_Msg_extr+0x334>
	{
		if( ( ExtractBits(0, 8, (unsigned char *)&Buff[5]) == 0x00) || (ExtractBits(0, 8, (unsigned char *)&Buff[5]) == 0x01) )
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	3305      	adds	r3, #5
 8002f50:	461a      	mov	r2, r3
 8002f52:	2108      	movs	r1, #8
 8002f54:	2000      	movs	r0, #0
 8002f56:	f7fd fb5d 	bl	8000614 <ExtractBits>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00a      	beq.n	8002f76 <Vital_Msg_extr+0x186>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	3305      	adds	r3, #5
 8002f64:	461a      	mov	r2, r3
 8002f66:	2108      	movs	r1, #8
 8002f68:	2000      	movs	r0, #0
 8002f6a:	f7fd fb53 	bl	8000614 <ExtractBits>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	f040 8098 	bne.w	80030a6 <Vital_Msg_extr+0x2b6>
		{
			printf("Tx seq Roll over Detected\n");
 8002f76:	4860      	ldr	r0, [pc, #384]	; (80030f8 <Vital_Msg_extr+0x308>)
 8002f78:	f01f fbb0 	bl	80226dc <puts>
			memset(Temp_Vital_Data_Buff,0,sizeof(Temp_Vital_Data_Buff));
 8002f7c:	f107 0308 	add.w	r3, r7, #8
 8002f80:	223c      	movs	r2, #60	; 0x3c
 8002f82:	2100      	movs	r1, #0
 8002f84:	4618      	mov	r0, r3
 8002f86:	f01f fa25 	bl	80223d4 <memset>
			InsertBits(0, 24, &Temp_Vital_Data_Buff[0], (Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value+1));
 8002f8a:	78bb      	ldrb	r3, [r7, #2]
 8002f8c:	4a57      	ldr	r2, [pc, #348]	; (80030ec <Vital_Msg_extr+0x2fc>)
 8002f8e:	011b      	lsls	r3, r3, #4
 8002f90:	4413      	add	r3, r2
 8002f92:	3308      	adds	r3, #8
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	3301      	adds	r3, #1
 8002f98:	f107 0208 	add.w	r2, r7, #8
 8002f9c:	2118      	movs	r1, #24
 8002f9e:	2000      	movs	r0, #0
 8002fa0:	f7fd fbc4 	bl	800072c <InsertBits>
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8002faa:	e010      	b.n	8002fce <Vital_Msg_extr+0x1de>
			{
				Temp_Vital_Data_Buff[uc_index + 3] = Buff[uc_index];
 8002fac:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	441a      	add	r2, r3
 8002fb4:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002fb8:	3303      	adds	r3, #3
 8002fba:	7812      	ldrb	r2, [r2, #0]
 8002fbc:	3360      	adds	r3, #96	; 0x60
 8002fbe:	443b      	add	r3, r7
 8002fc0:	f803 2c58 	strb.w	r2, [r3, #-88]
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8002fc4:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002fc8:	3301      	adds	r3, #1
 8002fca:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8002fce:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8002fd2:	78fb      	ldrb	r3, [r7, #3]
 8002fd4:	3b05      	subs	r3, #5
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	dbe8      	blt.n	8002fac <Vital_Msg_extr+0x1bc>
			}
			Calc_CRC = CalculateDirectReverseCrc(Temp_Vital_Data_Buff, uc_index + 3);
 8002fda:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	3303      	adds	r3, #3
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	f107 0308 	add.w	r3, r7, #8
 8002fe8:	4611      	mov	r1, r2
 8002fea:	4618      	mov	r0, r3
 8002fec:	f00f fef8 	bl	8012de0 <CalculateDirectReverseCrc>
 8002ff0:	64f8      	str	r0, [r7, #76]	; 0x4c
			Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 8002ff2:	78fb      	ldrb	r3, [r7, #3]
 8002ff4:	3b05      	subs	r3, #5
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	441a      	add	r2, r3
 8002ffa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002ffe:	2120      	movs	r1, #32
 8003000:	4618      	mov	r0, r3
 8003002:	f7fd fb07 	bl	8000614 <ExtractBits>
 8003006:	65b8      	str	r0, [r7, #88]	; 0x58

			if(Calc_CRC == Recv_CRC)
 8003008:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800300a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800300c:	429a      	cmp	r2, r3
 800300e:	d136      	bne.n	800307e <Vital_Msg_extr+0x28e>
			{
				printf("CRC OK AFTER ROLL OVER\n");
 8003010:	483a      	ldr	r0, [pc, #232]	; (80030fc <Vital_Msg_extr+0x30c>)
 8003012:	f01f fb63 	bl	80226dc <puts>
				printf("Received CRC       :0x%08lX\n",Recv_CRC);
 8003016:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003018:	4839      	ldr	r0, [pc, #228]	; (8003100 <Vital_Msg_extr+0x310>)
 800301a:	f01f fac3 	bl	80225a4 <iprintf>
				printf("Previous Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 800301e:	78bb      	ldrb	r3, [r7, #2]
 8003020:	4a32      	ldr	r2, [pc, #200]	; (80030ec <Vital_Msg_extr+0x2fc>)
 8003022:	011b      	lsls	r3, r3, #4
 8003024:	4413      	add	r3, r2
 8003026:	3308      	adds	r3, #8
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4619      	mov	r1, r3
 800302c:	4835      	ldr	r0, [pc, #212]	; (8003104 <Vital_Msg_extr+0x314>)
 800302e:	f01f fab9 	bl	80225a4 <iprintf>
				++Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 8003032:	78bb      	ldrb	r3, [r7, #2]
 8003034:	492d      	ldr	r1, [pc, #180]	; (80030ec <Vital_Msg_extr+0x2fc>)
 8003036:	011a      	lsls	r2, r3, #4
 8003038:	440a      	add	r2, r1
 800303a:	3208      	adds	r2, #8
 800303c:	6812      	ldr	r2, [r2, #0]
 800303e:	3201      	adds	r2, #1
 8003040:	492a      	ldr	r1, [pc, #168]	; (80030ec <Vital_Msg_extr+0x2fc>)
 8003042:	011b      	lsls	r3, r3, #4
 8003044:	440b      	add	r3, r1
 8003046:	3308      	adds	r3, #8
 8003048:	601a      	str	r2, [r3, #0]
				printf("Incremented Vital_CRC Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 800304a:	78bb      	ldrb	r3, [r7, #2]
 800304c:	4a27      	ldr	r2, [pc, #156]	; (80030ec <Vital_Msg_extr+0x2fc>)
 800304e:	011b      	lsls	r3, r3, #4
 8003050:	4413      	add	r3, r2
 8003052:	3308      	adds	r3, #8
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4619      	mov	r1, r3
 8003058:	482b      	ldr	r0, [pc, #172]	; (8003108 <Vital_Msg_extr+0x318>)
 800305a:	f01f faa3 	bl	80225a4 <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 800305e:	78bb      	ldrb	r3, [r7, #2]
 8003060:	78ba      	ldrb	r2, [r7, #2]
 8003062:	4922      	ldr	r1, [pc, #136]	; (80030ec <Vital_Msg_extr+0x2fc>)
 8003064:	011b      	lsls	r3, r3, #4
 8003066:	440b      	add	r3, r1
 8003068:	3308      	adds	r3, #8
 800306a:	6819      	ldr	r1, [r3, #0]
 800306c:	4827      	ldr	r0, [pc, #156]	; (800310c <Vital_Msg_extr+0x31c>)
 800306e:	4613      	mov	r3, r2
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	4413      	add	r3, r2
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	4403      	add	r3, r0
 8003078:	3308      	adds	r3, #8
 800307a:	6019      	str	r1, [r3, #0]
				goto ROLLOVER_VITAL;
 800307c:	e053      	b.n	8003126 <Vital_Msg_extr+0x336>
			}
			else
			{
				printf("Vital CRC Fail_Rollover:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 800307e:	78bb      	ldrb	r3, [r7, #2]
 8003080:	4a23      	ldr	r2, [pc, #140]	; (8003110 <Vital_Msg_extr+0x320>)
 8003082:	3366      	adds	r3, #102	; 0x66
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	4413      	add	r3, r2
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	4619      	mov	r1, r3
 800308c:	4821      	ldr	r0, [pc, #132]	; (8003114 <Vital_Msg_extr+0x324>)
 800308e:	f01f fa89 	bl	80225a4 <iprintf>
				printf("R-CRC:0x%08lX\n",Recv_CRC);
 8003092:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003094:	4820      	ldr	r0, [pc, #128]	; (8003118 <Vital_Msg_extr+0x328>)
 8003096:	f01f fa85 	bl	80225a4 <iprintf>
				printf("C-CRC:0x%08lX\n",Calc_CRC);
 800309a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800309c:	481f      	ldr	r0, [pc, #124]	; (800311c <Vital_Msg_extr+0x32c>)
 800309e:	f01f fa81 	bl	80225a4 <iprintf>
				return;
 80030a2:	f000 bea2 	b.w	8003dea <Vital_Msg_extr+0xffa>
			}
		}
		else
		{
			printf("Vital CRC Fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80030a6:	78bb      	ldrb	r3, [r7, #2]
 80030a8:	4a19      	ldr	r2, [pc, #100]	; (8003110 <Vital_Msg_extr+0x320>)
 80030aa:	3366      	adds	r3, #102	; 0x66
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4413      	add	r3, r2
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	4619      	mov	r1, r3
 80030b4:	481a      	ldr	r0, [pc, #104]	; (8003120 <Vital_Msg_extr+0x330>)
 80030b6:	f01f fa75 	bl	80225a4 <iprintf>
			printf("R-CRC:0x%08lX\n",Recv_CRC);
 80030ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80030bc:	4816      	ldr	r0, [pc, #88]	; (8003118 <Vital_Msg_extr+0x328>)
 80030be:	f01f fa71 	bl	80225a4 <iprintf>
			printf("C-CRC:0x%08lX\n",Calc_CRC);
 80030c2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80030c4:	4815      	ldr	r0, [pc, #84]	; (800311c <Vital_Msg_extr+0x32c>)
 80030c6:	f01f fa6d 	bl	80225a4 <iprintf>
			return;
 80030ca:	f000 be8e 	b.w	8003dea <Vital_Msg_extr+0xffa>
		goto ROLLOVER_VITAL;
 80030ce:	bf00      	nop
 80030d0:	e029      	b.n	8003126 <Vital_Msg_extr+0x336>
 80030d2:	bf00      	nop
 80030d4:	08023d68 	.word	0x08023d68
 80030d8:	20000305 	.word	0x20000305
 80030dc:	20001968 	.word	0x20001968
 80030e0:	20009c84 	.word	0x20009c84
 80030e4:	80008001 	.word	0x80008001
 80030e8:	0802426c 	.word	0x0802426c
 80030ec:	200011d0 	.word	0x200011d0
 80030f0:	0802428c 	.word	0x0802428c
 80030f4:	080242b4 	.word	0x080242b4
 80030f8:	080242dc 	.word	0x080242dc
 80030fc:	080242f8 	.word	0x080242f8
 8003100:	08024310 	.word	0x08024310
 8003104:	08024330 	.word	0x08024330
 8003108:	08024350 	.word	0x08024350
 800310c:	20001680 	.word	0x20001680
 8003110:	20000304 	.word	0x20000304
 8003114:	0802437c 	.word	0x0802437c
 8003118:	08023fac 	.word	0x08023fac
 800311c:	08023fbc 	.word	0x08023fbc
 8003120:	0802439c 	.word	0x0802439c
		}
	}

	ROLLOVER_VITAL:
 8003124:	bf00      	nop
	Last_Recevied_Clock[Source_Index] = Ticks;
 8003126:	78bb      	ldrb	r3, [r7, #2]
 8003128:	49c3      	ldr	r1, [pc, #780]	; (8003438 <Vital_Msg_extr+0x648>)
 800312a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800312c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Last_Recevied_Clock_ValidMsgs[Source_Index] = Ticks;
 8003130:	78bb      	ldrb	r3, [r7, #2]
 8003132:	49c2      	ldr	r1, [pc, #776]	; (800343c <Vital_Msg_extr+0x64c>)
 8003134:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Received_Vital[Source_Index] = SET;
 800313a:	78bb      	ldrb	r3, [r7, #2]
 800313c:	4ac0      	ldr	r2, [pc, #768]	; (8003440 <Vital_Msg_extr+0x650>)
 800313e:	2101      	movs	r1, #1
 8003140:	54d1      	strb	r1, [r2, r3]
	//Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff); // To detected EiPC shifting Faster

	//------| To have a copy and check if the data received on Ethernet and CAN are same.
	//------| If both same no need extract data again in CAN.
	//------| This buffer will be cleared in VITAL-MSG-CAN Function After checking.
	memset(&Last_Rcv_Vdata_st[Source_Index].Last_Rcv_vdata,0,sizeof(Last_Rcv_Vdata_st[Source_Index].Last_Rcv_vdata));
 8003142:	78ba      	ldrb	r2, [r7, #2]
 8003144:	4613      	mov	r3, r2
 8003146:	015b      	lsls	r3, r3, #5
 8003148:	4413      	add	r3, r2
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	4abd      	ldr	r2, [pc, #756]	; (8003444 <Vital_Msg_extr+0x654>)
 800314e:	4413      	add	r3, r2
 8003150:	2240      	movs	r2, #64	; 0x40
 8003152:	2100      	movs	r1, #0
 8003154:	4618      	mov	r0, r3
 8003156:	f01f f93d 	bl	80223d4 <memset>
	memcpy(&Last_Rcv_Vdata_st[Source_Index].Last_Rcv_vdata,Buff,Length);
 800315a:	78ba      	ldrb	r2, [r7, #2]
 800315c:	4613      	mov	r3, r2
 800315e:	015b      	lsls	r3, r3, #5
 8003160:	4413      	add	r3, r2
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	4ab7      	ldr	r2, [pc, #732]	; (8003444 <Vital_Msg_extr+0x654>)
 8003166:	4413      	add	r3, r2
 8003168:	78fa      	ldrb	r2, [r7, #3]
 800316a:	6879      	ldr	r1, [r7, #4]
 800316c:	4618      	mov	r0, r3
 800316e:	f01f f909 	bl	8022384 <memcpy>
	Last_Rcv_Vdata_st[Source_Index].Length = Length;
 8003172:	78ba      	ldrb	r2, [r7, #2]
 8003174:	78fb      	ldrb	r3, [r7, #3]
 8003176:	b298      	uxth	r0, r3
 8003178:	49b2      	ldr	r1, [pc, #712]	; (8003444 <Vital_Msg_extr+0x654>)
 800317a:	4613      	mov	r3, r2
 800317c:	015b      	lsls	r3, r3, #5
 800317e:	4413      	add	r3, r2
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	440b      	add	r3, r1
 8003184:	3340      	adds	r3, #64	; 0x40
 8003186:	4602      	mov	r2, r0
 8003188:	801a      	strh	r2, [r3, #0]
	/////////////////////////////////////////////////////////////////////////////////////////////////////

	BITSTUFFINC(8); // Incrementing to escape SOM
 800318a:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800318e:	3308      	adds	r3, #8
 8003190:	2b00      	cmp	r3, #0
 8003192:	da00      	bge.n	8003196 <Vital_Msg_extr+0x3a6>
 8003194:	3307      	adds	r3, #7
 8003196:	10db      	asrs	r3, r3, #3
 8003198:	b29a      	uxth	r2, r3
 800319a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800319e:	4413      	add	r3, r2
 80031a0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80031a4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80031a8:	3308      	adds	r3, #8
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	b21b      	sxth	r3, r3
 80031ae:	425a      	negs	r2, r3
 80031b0:	f003 0307 	and.w	r3, r3, #7
 80031b4:	f002 0207 	and.w	r2, r2, #7
 80031b8:	bf58      	it	pl
 80031ba:	4253      	negpl	r3, r2
 80031bc:	b21b      	sxth	r3, r3
 80031be:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	Hitachi_Vital_st[Source_Index].Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80031c2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	441a      	add	r2, r3
 80031ca:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80031ce:	2110      	movs	r1, #16
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7fd fa1f 	bl	8000614 <ExtractBits>
 80031d6:	4603      	mov	r3, r0
 80031d8:	78ba      	ldrb	r2, [r7, #2]
 80031da:	b298      	uxth	r0, r3
 80031dc:	499a      	ldr	r1, [pc, #616]	; (8003448 <Vital_Msg_extr+0x658>)
 80031de:	4613      	mov	r3, r2
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	4413      	add	r3, r2
 80031e4:	011b      	lsls	r3, r3, #4
 80031e6:	440b      	add	r3, r1
 80031e8:	3328      	adds	r3, #40	; 0x28
 80031ea:	4602      	mov	r2, r0
 80031ec:	801a      	strh	r2, [r3, #0]
	printf("DA:%u ", Hitachi_Vital_st[Source_Index].Des_Addr);
 80031ee:	78ba      	ldrb	r2, [r7, #2]
 80031f0:	4995      	ldr	r1, [pc, #596]	; (8003448 <Vital_Msg_extr+0x658>)
 80031f2:	4613      	mov	r3, r2
 80031f4:	005b      	lsls	r3, r3, #1
 80031f6:	4413      	add	r3, r2
 80031f8:	011b      	lsls	r3, r3, #4
 80031fa:	440b      	add	r3, r1
 80031fc:	3328      	adds	r3, #40	; 0x28
 80031fe:	881b      	ldrh	r3, [r3, #0]
 8003200:	4619      	mov	r1, r3
 8003202:	4892      	ldr	r0, [pc, #584]	; (800344c <Vital_Msg_extr+0x65c>)
 8003204:	f01f f9ce 	bl	80225a4 <iprintf>
	BITSTUFFINC(16);
 8003208:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800320c:	3310      	adds	r3, #16
 800320e:	2b00      	cmp	r3, #0
 8003210:	da00      	bge.n	8003214 <Vital_Msg_extr+0x424>
 8003212:	3307      	adds	r3, #7
 8003214:	10db      	asrs	r3, r3, #3
 8003216:	b29a      	uxth	r2, r3
 8003218:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800321c:	4413      	add	r3, r2
 800321e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003222:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003226:	3310      	adds	r3, #16
 8003228:	b29b      	uxth	r3, r3
 800322a:	b21b      	sxth	r3, r3
 800322c:	425a      	negs	r2, r3
 800322e:	f003 0307 	and.w	r3, r3, #7
 8003232:	f002 0207 	and.w	r2, r2, #7
 8003236:	bf58      	it	pl
 8003238:	4253      	negpl	r3, r2
 800323a:	b21b      	sxth	r3, r3
 800323c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	Hitachi_Vital_st[Source_Index].Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8003240:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	441a      	add	r2, r3
 8003248:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800324c:	2110      	movs	r1, #16
 800324e:	4618      	mov	r0, r3
 8003250:	f7fd f9e0 	bl	8000614 <ExtractBits>
 8003254:	4603      	mov	r3, r0
 8003256:	78ba      	ldrb	r2, [r7, #2]
 8003258:	b298      	uxth	r0, r3
 800325a:	497b      	ldr	r1, [pc, #492]	; (8003448 <Vital_Msg_extr+0x658>)
 800325c:	4613      	mov	r3, r2
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	4413      	add	r3, r2
 8003262:	011b      	lsls	r3, r3, #4
 8003264:	440b      	add	r3, r1
 8003266:	3326      	adds	r3, #38	; 0x26
 8003268:	4602      	mov	r2, r0
 800326a:	801a      	strh	r2, [r3, #0]
	printf("SA:%u ", Hitachi_Vital_st[Source_Index].Src_Addr);
 800326c:	78ba      	ldrb	r2, [r7, #2]
 800326e:	4976      	ldr	r1, [pc, #472]	; (8003448 <Vital_Msg_extr+0x658>)
 8003270:	4613      	mov	r3, r2
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	4413      	add	r3, r2
 8003276:	011b      	lsls	r3, r3, #4
 8003278:	440b      	add	r3, r1
 800327a:	3326      	adds	r3, #38	; 0x26
 800327c:	881b      	ldrh	r3, [r3, #0]
 800327e:	4619      	mov	r1, r3
 8003280:	4873      	ldr	r0, [pc, #460]	; (8003450 <Vital_Msg_extr+0x660>)
 8003282:	f01f f98f 	bl	80225a4 <iprintf>
	BITSTUFFINC(16);
 8003286:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800328a:	3310      	adds	r3, #16
 800328c:	2b00      	cmp	r3, #0
 800328e:	da00      	bge.n	8003292 <Vital_Msg_extr+0x4a2>
 8003290:	3307      	adds	r3, #7
 8003292:	10db      	asrs	r3, r3, #3
 8003294:	b29a      	uxth	r2, r3
 8003296:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800329a:	4413      	add	r3, r2
 800329c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80032a0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80032a4:	3310      	adds	r3, #16
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	b21b      	sxth	r3, r3
 80032aa:	425a      	negs	r2, r3
 80032ac:	f003 0307 	and.w	r3, r3, #7
 80032b0:	f002 0207 	and.w	r2, r2, #7
 80032b4:	bf58      	it	pl
 80032b6:	4253      	negpl	r3, r2
 80032b8:	b21b      	sxth	r3, r3
 80032ba:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	Hitachi_prms_st[Source_Index].Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80032be:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	441a      	add	r2, r3
 80032c6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80032ca:	2108      	movs	r1, #8
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7fd f9a1 	bl	8000614 <ExtractBits>
 80032d2:	4602      	mov	r2, r0
 80032d4:	78bb      	ldrb	r3, [r7, #2]
 80032d6:	b2d1      	uxtb	r1, r2
 80032d8:	4a5e      	ldr	r2, [pc, #376]	; (8003454 <Vital_Msg_extr+0x664>)
 80032da:	011b      	lsls	r3, r3, #4
 80032dc:	4413      	add	r3, r2
 80032de:	3302      	adds	r3, #2
 80032e0:	460a      	mov	r2, r1
 80032e2:	701a      	strb	r2, [r3, #0]
	//printf("Tx_seq             :%u\n", Hitachi_prms_st[Source_Index].Rx_Seq);
	BITSTUFFINC(8);
 80032e4:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80032e8:	3308      	adds	r3, #8
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	da00      	bge.n	80032f0 <Vital_Msg_extr+0x500>
 80032ee:	3307      	adds	r3, #7
 80032f0:	10db      	asrs	r3, r3, #3
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80032f8:	4413      	add	r3, r2
 80032fa:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80032fe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003302:	3308      	adds	r3, #8
 8003304:	b29b      	uxth	r3, r3
 8003306:	b21b      	sxth	r3, r3
 8003308:	425a      	negs	r2, r3
 800330a:	f003 0307 	and.w	r3, r3, #7
 800330e:	f002 0207 	and.w	r2, r2, #7
 8003312:	bf58      	it	pl
 8003314:	4253      	negpl	r3, r2
 8003316:	b21b      	sxth	r3, r3
 8003318:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	Hitachi_prms_st[Source_Index].Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800331c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	441a      	add	r2, r3
 8003324:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003328:	2108      	movs	r1, #8
 800332a:	4618      	mov	r0, r3
 800332c:	f7fd f972 	bl	8000614 <ExtractBits>
 8003330:	4602      	mov	r2, r0
 8003332:	78bb      	ldrb	r3, [r7, #2]
 8003334:	b2d1      	uxtb	r1, r2
 8003336:	4a47      	ldr	r2, [pc, #284]	; (8003454 <Vital_Msg_extr+0x664>)
 8003338:	011b      	lsls	r3, r3, #4
 800333a:	4413      	add	r3, r2
 800333c:	3301      	adds	r3, #1
 800333e:	460a      	mov	r2, r1
 8003340:	701a      	strb	r2, [r3, #0]
	//printf("Rx_seq             :%u\n", Hitachi_prms_st[Source_Index].Tx_Seq);
	if(Hitachi_prms_st[Source_Index].Tx_Seq == 0)
 8003342:	78bb      	ldrb	r3, [r7, #2]
 8003344:	4a43      	ldr	r2, [pc, #268]	; (8003454 <Vital_Msg_extr+0x664>)
 8003346:	011b      	lsls	r3, r3, #4
 8003348:	4413      	add	r3, r2
 800334a:	3301      	adds	r3, #1
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d138      	bne.n	80033c4 <Vital_Msg_extr+0x5d4>
	{
		printf("\nRX_Seq Roll over Detected Incremented self Vital Init Value:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8003352:	78bb      	ldrb	r3, [r7, #2]
 8003354:	4a40      	ldr	r2, [pc, #256]	; (8003458 <Vital_Msg_extr+0x668>)
 8003356:	3366      	adds	r3, #102	; 0x66
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	4413      	add	r3, r2
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	4619      	mov	r1, r3
 8003360:	483e      	ldr	r0, [pc, #248]	; (800345c <Vital_Msg_extr+0x66c>)
 8003362:	f01f f91f 	bl	80225a4 <iprintf>
		printf("Prev Val:%06lx:",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8003366:	78bb      	ldrb	r3, [r7, #2]
 8003368:	4a3a      	ldr	r2, [pc, #232]	; (8003454 <Vital_Msg_extr+0x664>)
 800336a:	011b      	lsls	r3, r3, #4
 800336c:	4413      	add	r3, r2
 800336e:	330c      	adds	r3, #12
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4619      	mov	r1, r3
 8003374:	483a      	ldr	r0, [pc, #232]	; (8003460 <Vital_Msg_extr+0x670>)
 8003376:	f01f f915 	bl	80225a4 <iprintf>
		++Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 800337a:	78bb      	ldrb	r3, [r7, #2]
 800337c:	4935      	ldr	r1, [pc, #212]	; (8003454 <Vital_Msg_extr+0x664>)
 800337e:	011a      	lsls	r2, r3, #4
 8003380:	440a      	add	r2, r1
 8003382:	320c      	adds	r2, #12
 8003384:	6812      	ldr	r2, [r2, #0]
 8003386:	3201      	adds	r2, #1
 8003388:	4932      	ldr	r1, [pc, #200]	; (8003454 <Vital_Msg_extr+0x664>)
 800338a:	011b      	lsls	r3, r3, #4
 800338c:	440b      	add	r3, r1
 800338e:	330c      	adds	r3, #12
 8003390:	601a      	str	r2, [r3, #0]
		printf("Cur Val:%06lx\n",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8003392:	78bb      	ldrb	r3, [r7, #2]
 8003394:	4a2f      	ldr	r2, [pc, #188]	; (8003454 <Vital_Msg_extr+0x664>)
 8003396:	011b      	lsls	r3, r3, #4
 8003398:	4413      	add	r3, r2
 800339a:	330c      	adds	r3, #12
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4619      	mov	r1, r3
 80033a0:	4830      	ldr	r0, [pc, #192]	; (8003464 <Vital_Msg_extr+0x674>)
 80033a2:	f01f f8ff 	bl	80225a4 <iprintf>
		Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 80033a6:	78bb      	ldrb	r3, [r7, #2]
 80033a8:	78ba      	ldrb	r2, [r7, #2]
 80033aa:	492a      	ldr	r1, [pc, #168]	; (8003454 <Vital_Msg_extr+0x664>)
 80033ac:	011b      	lsls	r3, r3, #4
 80033ae:	440b      	add	r3, r1
 80033b0:	330c      	adds	r3, #12
 80033b2:	6819      	ldr	r1, [r3, #0]
 80033b4:	482c      	ldr	r0, [pc, #176]	; (8003468 <Vital_Msg_extr+0x678>)
 80033b6:	4613      	mov	r3, r2
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	4413      	add	r3, r2
 80033bc:	00db      	lsls	r3, r3, #3
 80033be:	4403      	add	r3, r0
 80033c0:	330c      	adds	r3, #12
 80033c2:	6019      	str	r1, [r3, #0]
	}
	BITSTUFFINC(8);
 80033c4:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80033c8:	3308      	adds	r3, #8
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	da00      	bge.n	80033d0 <Vital_Msg_extr+0x5e0>
 80033ce:	3307      	adds	r3, #7
 80033d0:	10db      	asrs	r3, r3, #3
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80033d8:	4413      	add	r3, r2
 80033da:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80033de:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80033e2:	3308      	adds	r3, #8
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	b21b      	sxth	r3, r3
 80033e8:	425a      	negs	r2, r3
 80033ea:	f003 0307 	and.w	r3, r3, #7
 80033ee:	f002 0207 	and.w	r2, r2, #7
 80033f2:	bf58      	it	pl
 80033f4:	4253      	negpl	r3, r2
 80033f6:	b21b      	sxth	r3, r3
 80033f8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	Hitachi_Vital_st[Source_Index].Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80033fc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	441a      	add	r2, r3
 8003404:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003408:	2108      	movs	r1, #8
 800340a:	4618      	mov	r0, r3
 800340c:	f7fd f902 	bl	8000614 <ExtractBits>
 8003410:	4603      	mov	r3, r0
 8003412:	78ba      	ldrb	r2, [r7, #2]
 8003414:	b2d8      	uxtb	r0, r3
 8003416:	490c      	ldr	r1, [pc, #48]	; (8003448 <Vital_Msg_extr+0x658>)
 8003418:	4613      	mov	r3, r2
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	4413      	add	r3, r2
 800341e:	011b      	lsls	r3, r3, #4
 8003420:	440b      	add	r3, r1
 8003422:	3302      	adds	r3, #2
 8003424:	4602      	mov	r2, r0
 8003426:	701a      	strb	r2, [r3, #0]
	//printf("Msg_Type           :%u\n",Hitachi_Vital_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 8003428:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800342c:	3308      	adds	r3, #8
 800342e:	2b00      	cmp	r3, #0
 8003430:	da1c      	bge.n	800346c <Vital_Msg_extr+0x67c>
 8003432:	3307      	adds	r3, #7
 8003434:	e01a      	b.n	800346c <Vital_Msg_extr+0x67c>
 8003436:	bf00      	nop
 8003438:	20000fb0 	.word	0x20000fb0
 800343c:	20000fd8 	.word	0x20000fd8
 8003440:	20001024 	.word	0x20001024
 8003444:	20001988 	.word	0x20001988
 8003448:	200013b0 	.word	0x200013b0
 800344c:	0802409c 	.word	0x0802409c
 8003450:	080240a4 	.word	0x080240a4
 8003454:	200011d0 	.word	0x200011d0
 8003458:	20000304 	.word	0x20000304
 800345c:	080243b0 	.word	0x080243b0
 8003460:	080243f4 	.word	0x080243f4
 8003464:	08024404 	.word	0x08024404
 8003468:	20001680 	.word	0x20001680
 800346c:	10db      	asrs	r3, r3, #3
 800346e:	b29a      	uxth	r2, r3
 8003470:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003474:	4413      	add	r3, r2
 8003476:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800347a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800347e:	3308      	adds	r3, #8
 8003480:	b29b      	uxth	r3, r3
 8003482:	b21b      	sxth	r3, r3
 8003484:	425a      	negs	r2, r3
 8003486:	f003 0307 	and.w	r3, r3, #7
 800348a:	f002 0207 	and.w	r2, r2, #7
 800348e:	bf58      	it	pl
 8003490:	4253      	negpl	r3, r2
 8003492:	b21b      	sxth	r3, r3
 8003494:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	Hitachi_prms_st[Source_Index].Msg_Status_Flag= ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8003498:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	441a      	add	r2, r3
 80034a0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80034a4:	2110      	movs	r1, #16
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7fd f8b4 	bl	8000614 <ExtractBits>
 80034ac:	4602      	mov	r2, r0
 80034ae:	78bb      	ldrb	r3, [r7, #2]
 80034b0:	b291      	uxth	r1, r2
 80034b2:	4abd      	ldr	r2, [pc, #756]	; (80037a8 <Vital_Msg_extr+0x9b8>)
 80034b4:	011b      	lsls	r3, r3, #4
 80034b6:	4413      	add	r3, r2
 80034b8:	3304      	adds	r3, #4
 80034ba:	460a      	mov	r2, r1
 80034bc:	801a      	strh	r2, [r3, #0]

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 80034be:	49bb      	ldr	r1, [pc, #748]	; (80037ac <Vital_Msg_extr+0x9bc>)
 80034c0:	48bb      	ldr	r0, [pc, #748]	; (80037b0 <Vital_Msg_extr+0x9c0>)
 80034c2:	f7fc febd 	bl	8000240 <strcmp>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d10f      	bne.n	80034ec <Vital_Msg_extr+0x6fc>
	{
		SET_BIT_USER(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag);
 80034cc:	78bb      	ldrb	r3, [r7, #2]
 80034ce:	4ab6      	ldr	r2, [pc, #728]	; (80037a8 <Vital_Msg_extr+0x9b8>)
 80034d0:	011b      	lsls	r3, r3, #4
 80034d2:	4413      	add	r3, r2
 80034d4:	3304      	adds	r3, #4
 80034d6:	881a      	ldrh	r2, [r3, #0]
 80034d8:	78bb      	ldrb	r3, [r7, #2]
 80034da:	f042 0208 	orr.w	r2, r2, #8
 80034de:	b291      	uxth	r1, r2
 80034e0:	4ab1      	ldr	r2, [pc, #708]	; (80037a8 <Vital_Msg_extr+0x9b8>)
 80034e2:	011b      	lsls	r3, r3, #4
 80034e4:	4413      	add	r3, r2
 80034e6:	3304      	adds	r3, #4
 80034e8:	460a      	mov	r2, r1
 80034ea:	801a      	strh	r2, [r3, #0]
	}
	//printf("Msg_sts_flag       :0x%04X\n", Hitachi_prms_st[Source_Index].Msg_Status_Flag);
	BITSTUFFINC(16);
 80034ec:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80034f0:	3310      	adds	r3, #16
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	da00      	bge.n	80034f8 <Vital_Msg_extr+0x708>
 80034f6:	3307      	adds	r3, #7
 80034f8:	10db      	asrs	r3, r3, #3
 80034fa:	b29a      	uxth	r2, r3
 80034fc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003500:	4413      	add	r3, r2
 8003502:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003506:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800350a:	3310      	adds	r3, #16
 800350c:	b29b      	uxth	r3, r3
 800350e:	b21b      	sxth	r3, r3
 8003510:	425a      	negs	r2, r3
 8003512:	f003 0307 	and.w	r3, r3, #7
 8003516:	f002 0207 	and.w	r2, r2, #7
 800351a:	bf58      	it	pl
 800351c:	4253      	negpl	r3, r2
 800351e:	b21b      	sxth	r3, r3
 8003520:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	//Debug_Status_Flag(Hitachi_prms_st[Source_Index].Msg_Status_Flag, Hitachi_Vital_st[Source_Index].Msg_Type);

	if ( ( SET == (CHECKFLAG(TIME_STAMP,Hitachi_prms_st[Source_Index].Msg_Status_Flag))) ) // Time-stamp Extraction
 8003524:	78bb      	ldrb	r3, [r7, #2]
 8003526:	4aa0      	ldr	r2, [pc, #640]	; (80037a8 <Vital_Msg_extr+0x9b8>)
 8003528:	011b      	lsls	r3, r3, #4
 800352a:	4413      	add	r3, r2
 800352c:	3304      	adds	r3, #4
 800352e:	881b      	ldrh	r3, [r3, #0]
 8003530:	f003 0320 	and.w	r3, r3, #32
 8003534:	2b00      	cmp	r3, #0
 8003536:	f000 8145 	beq.w	80037c4 <Vital_Msg_extr+0x9d4>
	{
		HITACHI_time_Stamp_st[Source_Index].YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800353a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	441a      	add	r2, r3
 8003542:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003546:	2108      	movs	r1, #8
 8003548:	4618      	mov	r0, r3
 800354a:	f7fd f863 	bl	8000614 <ExtractBits>
 800354e:	4603      	mov	r3, r0
 8003550:	78ba      	ldrb	r2, [r7, #2]
 8003552:	b2d8      	uxtb	r0, r3
 8003554:	4997      	ldr	r1, [pc, #604]	; (80037b4 <Vital_Msg_extr+0x9c4>)
 8003556:	4613      	mov	r3, r2
 8003558:	005b      	lsls	r3, r3, #1
 800355a:	4413      	add	r3, r2
 800355c:	005b      	lsls	r3, r3, #1
 800355e:	440b      	add	r3, r1
 8003560:	3305      	adds	r3, #5
 8003562:	4602      	mov	r2, r0
 8003564:	701a      	strb	r2, [r3, #0]
		//printf("YEAR               :%02X\n", HITACHI_time_Stamp_st[Source_Index].YY);
		BITSTUFFINC(8);
 8003566:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800356a:	3308      	adds	r3, #8
 800356c:	2b00      	cmp	r3, #0
 800356e:	da00      	bge.n	8003572 <Vital_Msg_extr+0x782>
 8003570:	3307      	adds	r3, #7
 8003572:	10db      	asrs	r3, r3, #3
 8003574:	b29a      	uxth	r2, r3
 8003576:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800357a:	4413      	add	r3, r2
 800357c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003580:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003584:	3308      	adds	r3, #8
 8003586:	b29b      	uxth	r3, r3
 8003588:	b21b      	sxth	r3, r3
 800358a:	425a      	negs	r2, r3
 800358c:	f003 0307 	and.w	r3, r3, #7
 8003590:	f002 0207 	and.w	r2, r2, #7
 8003594:	bf58      	it	pl
 8003596:	4253      	negpl	r3, r2
 8003598:	b21b      	sxth	r3, r3
 800359a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

		HITACHI_time_Stamp_st[Source_Index].MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800359e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	441a      	add	r2, r3
 80035a6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80035aa:	2108      	movs	r1, #8
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7fd f831 	bl	8000614 <ExtractBits>
 80035b2:	4603      	mov	r3, r0
 80035b4:	78ba      	ldrb	r2, [r7, #2]
 80035b6:	b2d8      	uxtb	r0, r3
 80035b8:	497e      	ldr	r1, [pc, #504]	; (80037b4 <Vital_Msg_extr+0x9c4>)
 80035ba:	4613      	mov	r3, r2
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	4413      	add	r3, r2
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	440b      	add	r3, r1
 80035c4:	3304      	adds	r3, #4
 80035c6:	4602      	mov	r2, r0
 80035c8:	701a      	strb	r2, [r3, #0]
		//printf("Month              :%02X\n", HITACHI_time_Stamp_st[Source_Index].MM);
		BITSTUFFINC(8);
 80035ca:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80035ce:	3308      	adds	r3, #8
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	da00      	bge.n	80035d6 <Vital_Msg_extr+0x7e6>
 80035d4:	3307      	adds	r3, #7
 80035d6:	10db      	asrs	r3, r3, #3
 80035d8:	b29a      	uxth	r2, r3
 80035da:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80035de:	4413      	add	r3, r2
 80035e0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80035e4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80035e8:	3308      	adds	r3, #8
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	b21b      	sxth	r3, r3
 80035ee:	425a      	negs	r2, r3
 80035f0:	f003 0307 	and.w	r3, r3, #7
 80035f4:	f002 0207 	and.w	r2, r2, #7
 80035f8:	bf58      	it	pl
 80035fa:	4253      	negpl	r3, r2
 80035fc:	b21b      	sxth	r3, r3
 80035fe:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

		HITACHI_time_Stamp_st[Source_Index].DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003602:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	441a      	add	r2, r3
 800360a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800360e:	2108      	movs	r1, #8
 8003610:	4618      	mov	r0, r3
 8003612:	f7fc ffff 	bl	8000614 <ExtractBits>
 8003616:	4603      	mov	r3, r0
 8003618:	78ba      	ldrb	r2, [r7, #2]
 800361a:	b2d8      	uxtb	r0, r3
 800361c:	4965      	ldr	r1, [pc, #404]	; (80037b4 <Vital_Msg_extr+0x9c4>)
 800361e:	4613      	mov	r3, r2
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	4413      	add	r3, r2
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	440b      	add	r3, r1
 8003628:	3303      	adds	r3, #3
 800362a:	4602      	mov	r2, r0
 800362c:	701a      	strb	r2, [r3, #0]
		//printf("Date               :%02X\n", HITACHI_time_Stamp_st[Source_Index].DD);
		BITSTUFFINC(8);
 800362e:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8003632:	3308      	adds	r3, #8
 8003634:	2b00      	cmp	r3, #0
 8003636:	da00      	bge.n	800363a <Vital_Msg_extr+0x84a>
 8003638:	3307      	adds	r3, #7
 800363a:	10db      	asrs	r3, r3, #3
 800363c:	b29a      	uxth	r2, r3
 800363e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003642:	4413      	add	r3, r2
 8003644:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003648:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800364c:	3308      	adds	r3, #8
 800364e:	b29b      	uxth	r3, r3
 8003650:	b21b      	sxth	r3, r3
 8003652:	425a      	negs	r2, r3
 8003654:	f003 0307 	and.w	r3, r3, #7
 8003658:	f002 0207 	and.w	r2, r2, #7
 800365c:	bf58      	it	pl
 800365e:	4253      	negpl	r3, r2
 8003660:	b21b      	sxth	r3, r3
 8003662:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

		HITACHI_time_Stamp_st[Source_Index].hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003666:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	441a      	add	r2, r3
 800366e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003672:	2108      	movs	r1, #8
 8003674:	4618      	mov	r0, r3
 8003676:	f7fc ffcd 	bl	8000614 <ExtractBits>
 800367a:	4603      	mov	r3, r0
 800367c:	78ba      	ldrb	r2, [r7, #2]
 800367e:	b2d8      	uxtb	r0, r3
 8003680:	494c      	ldr	r1, [pc, #304]	; (80037b4 <Vital_Msg_extr+0x9c4>)
 8003682:	4613      	mov	r3, r2
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	4413      	add	r3, r2
 8003688:	005b      	lsls	r3, r3, #1
 800368a:	440b      	add	r3, r1
 800368c:	4602      	mov	r2, r0
 800368e:	701a      	strb	r2, [r3, #0]
		//printf("HOURS              :%02X\n", HITACHI_time_Stamp_st[Source_Index].hh);
		BITSTUFFINC(8);
 8003690:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8003694:	3308      	adds	r3, #8
 8003696:	2b00      	cmp	r3, #0
 8003698:	da00      	bge.n	800369c <Vital_Msg_extr+0x8ac>
 800369a:	3307      	adds	r3, #7
 800369c:	10db      	asrs	r3, r3, #3
 800369e:	b29a      	uxth	r2, r3
 80036a0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80036a4:	4413      	add	r3, r2
 80036a6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80036aa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80036ae:	3308      	adds	r3, #8
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	b21b      	sxth	r3, r3
 80036b4:	425a      	negs	r2, r3
 80036b6:	f003 0307 	and.w	r3, r3, #7
 80036ba:	f002 0207 	and.w	r2, r2, #7
 80036be:	bf58      	it	pl
 80036c0:	4253      	negpl	r3, r2
 80036c2:	b21b      	sxth	r3, r3
 80036c4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

		HITACHI_time_Stamp_st[Source_Index].mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80036c8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	441a      	add	r2, r3
 80036d0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80036d4:	2108      	movs	r1, #8
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7fc ff9c 	bl	8000614 <ExtractBits>
 80036dc:	4603      	mov	r3, r0
 80036de:	78ba      	ldrb	r2, [r7, #2]
 80036e0:	b2d8      	uxtb	r0, r3
 80036e2:	4934      	ldr	r1, [pc, #208]	; (80037b4 <Vital_Msg_extr+0x9c4>)
 80036e4:	4613      	mov	r3, r2
 80036e6:	005b      	lsls	r3, r3, #1
 80036e8:	4413      	add	r3, r2
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	440b      	add	r3, r1
 80036ee:	3301      	adds	r3, #1
 80036f0:	4602      	mov	r2, r0
 80036f2:	701a      	strb	r2, [r3, #0]
		//printf("MINS               :%02X\n", HITACHI_time_Stamp_st[Source_Index].mm);
		BITSTUFFINC(8);
 80036f4:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80036f8:	3308      	adds	r3, #8
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	da00      	bge.n	8003700 <Vital_Msg_extr+0x910>
 80036fe:	3307      	adds	r3, #7
 8003700:	10db      	asrs	r3, r3, #3
 8003702:	b29a      	uxth	r2, r3
 8003704:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003708:	4413      	add	r3, r2
 800370a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800370e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003712:	3308      	adds	r3, #8
 8003714:	b29b      	uxth	r3, r3
 8003716:	b21b      	sxth	r3, r3
 8003718:	425a      	negs	r2, r3
 800371a:	f003 0307 	and.w	r3, r3, #7
 800371e:	f002 0207 	and.w	r2, r2, #7
 8003722:	bf58      	it	pl
 8003724:	4253      	negpl	r3, r2
 8003726:	b21b      	sxth	r3, r3
 8003728:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

		HITACHI_time_Stamp_st[Source_Index].ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800372c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	441a      	add	r2, r3
 8003734:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003738:	2108      	movs	r1, #8
 800373a:	4618      	mov	r0, r3
 800373c:	f7fc ff6a 	bl	8000614 <ExtractBits>
 8003740:	4603      	mov	r3, r0
 8003742:	78ba      	ldrb	r2, [r7, #2]
 8003744:	b2d8      	uxtb	r0, r3
 8003746:	491b      	ldr	r1, [pc, #108]	; (80037b4 <Vital_Msg_extr+0x9c4>)
 8003748:	4613      	mov	r3, r2
 800374a:	005b      	lsls	r3, r3, #1
 800374c:	4413      	add	r3, r2
 800374e:	005b      	lsls	r3, r3, #1
 8003750:	440b      	add	r3, r1
 8003752:	3302      	adds	r3, #2
 8003754:	4602      	mov	r2, r0
 8003756:	701a      	strb	r2, [r3, #0]
		//printf("SEC                :%02X\n", HITACHI_time_Stamp_st[Source_Index].ss);
		BITSTUFFINC(8);
 8003758:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800375c:	3308      	adds	r3, #8
 800375e:	2b00      	cmp	r3, #0
 8003760:	da00      	bge.n	8003764 <Vital_Msg_extr+0x974>
 8003762:	3307      	adds	r3, #7
 8003764:	10db      	asrs	r3, r3, #3
 8003766:	b29a      	uxth	r2, r3
 8003768:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800376c:	4413      	add	r3, r2
 800376e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003772:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003776:	3308      	adds	r3, #8
 8003778:	b29b      	uxth	r3, r3
 800377a:	b21b      	sxth	r3, r3
 800377c:	425a      	negs	r2, r3
 800377e:	f003 0307 	and.w	r3, r3, #7
 8003782:	f002 0207 	and.w	r2, r2, #7
 8003786:	bf58      	it	pl
 8003788:	4253      	negpl	r3, r2
 800378a:	b21b      	sxth	r3, r3
 800378c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
 8003790:	78bb      	ldrb	r3, [r7, #2]
 8003792:	4618      	mov	r0, r3
 8003794:	f005 f934 	bl	8008a00 <IS_MLK_EIPC_TIME_MATCHING>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00e      	beq.n	80037bc <Vital_Msg_extr+0x9cc>
 800379e:	78bb      	ldrb	r3, [r7, #2]
 80037a0:	4a05      	ldr	r2, [pc, #20]	; (80037b8 <Vital_Msg_extr+0x9c8>)
 80037a2:	2100      	movs	r1, #0
 80037a4:	54d1      	strb	r1, [r2, r3]
 80037a6:	e00d      	b.n	80037c4 <Vital_Msg_extr+0x9d4>
 80037a8:	200011d0 	.word	0x200011d0
 80037ac:	08023d68 	.word	0x08023d68
 80037b0:	20000305 	.word	0x20000305
 80037b4:	20001194 	.word	0x20001194
 80037b8:	200010e4 	.word	0x200010e4
 80037bc:	78bb      	ldrb	r3, [r7, #2]
 80037be:	4a86      	ldr	r2, [pc, #536]	; (80039d8 <Vital_Msg_extr+0xbe8>)
 80037c0:	2101      	movs	r1, #1
 80037c2:	54d1      	strb	r1, [r2, r3]


	}
	if ( ( SET == (CHECKFLAG(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag))) )
 80037c4:	78bb      	ldrb	r3, [r7, #2]
 80037c6:	4a85      	ldr	r2, [pc, #532]	; (80039dc <Vital_Msg_extr+0xbec>)
 80037c8:	011b      	lsls	r3, r3, #4
 80037ca:	4413      	add	r3, r2
 80037cc:	3304      	adds	r3, #4
 80037ce:	881b      	ldrh	r3, [r3, #0]
 80037d0:	f003 0308 	and.w	r3, r3, #8
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d002      	beq.n	80037de <Vital_Msg_extr+0x9ee>
	{
		LinkEstablishFlag = SET;
 80037d8:	2301      	movs	r3, #1
 80037da:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	}

	Hitachi_Vital_st[Source_Index].No_Outputs = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80037de:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	441a      	add	r2, r3
 80037e6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80037ea:	2108      	movs	r1, #8
 80037ec:	4618      	mov	r0, r3
 80037ee:	f7fc ff11 	bl	8000614 <ExtractBits>
 80037f2:	4603      	mov	r3, r0
 80037f4:	78ba      	ldrb	r2, [r7, #2]
 80037f6:	b2d8      	uxtb	r0, r3
 80037f8:	4979      	ldr	r1, [pc, #484]	; (80039e0 <Vital_Msg_extr+0xbf0>)
 80037fa:	4613      	mov	r3, r2
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	4413      	add	r3, r2
 8003800:	011b      	lsls	r3, r3, #4
 8003802:	440b      	add	r3, r1
 8003804:	3303      	adds	r3, #3
 8003806:	4602      	mov	r2, r0
 8003808:	701a      	strb	r2, [r3, #0]
	BITSTUFFINC(8);
 800380a:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800380e:	3308      	adds	r3, #8
 8003810:	2b00      	cmp	r3, #0
 8003812:	da00      	bge.n	8003816 <Vital_Msg_extr+0xa26>
 8003814:	3307      	adds	r3, #7
 8003816:	10db      	asrs	r3, r3, #3
 8003818:	b29a      	uxth	r2, r3
 800381a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800381e:	4413      	add	r3, r2
 8003820:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003824:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003828:	3308      	adds	r3, #8
 800382a:	b29b      	uxth	r3, r3
 800382c:	b21b      	sxth	r3, r3
 800382e:	425a      	negs	r2, r3
 8003830:	f003 0307 	and.w	r3, r3, #7
 8003834:	f002 0207 	and.w	r2, r2, #7
 8003838:	bf58      	it	pl
 800383a:	4253      	negpl	r3, r2
 800383c:	b21b      	sxth	r3, r3
 800383e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	printf("OP:%u ", Hitachi_Vital_st[Source_Index].No_Outputs);
 8003842:	78ba      	ldrb	r2, [r7, #2]
 8003844:	4966      	ldr	r1, [pc, #408]	; (80039e0 <Vital_Msg_extr+0xbf0>)
 8003846:	4613      	mov	r3, r2
 8003848:	005b      	lsls	r3, r3, #1
 800384a:	4413      	add	r3, r2
 800384c:	011b      	lsls	r3, r3, #4
 800384e:	440b      	add	r3, r1
 8003850:	3303      	adds	r3, #3
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	4619      	mov	r1, r3
 8003856:	4863      	ldr	r0, [pc, #396]	; (80039e4 <Vital_Msg_extr+0xbf4>)
 8003858:	f01e fea4 	bl	80225a4 <iprintf>

	Hitachi_Vital_st[Source_Index].Size_Num_val = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800385c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	441a      	add	r2, r3
 8003864:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003868:	2108      	movs	r1, #8
 800386a:	4618      	mov	r0, r3
 800386c:	f7fc fed2 	bl	8000614 <ExtractBits>
 8003870:	4603      	mov	r3, r0
 8003872:	78ba      	ldrb	r2, [r7, #2]
 8003874:	b2d8      	uxtb	r0, r3
 8003876:	495a      	ldr	r1, [pc, #360]	; (80039e0 <Vital_Msg_extr+0xbf0>)
 8003878:	4613      	mov	r3, r2
 800387a:	005b      	lsls	r3, r3, #1
 800387c:	4413      	add	r3, r2
 800387e:	011b      	lsls	r3, r3, #4
 8003880:	440b      	add	r3, r1
 8003882:	3304      	adds	r3, #4
 8003884:	4602      	mov	r2, r0
 8003886:	701a      	strb	r2, [r3, #0]
	BITSTUFFINC(8);
 8003888:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800388c:	3308      	adds	r3, #8
 800388e:	2b00      	cmp	r3, #0
 8003890:	da00      	bge.n	8003894 <Vital_Msg_extr+0xaa4>
 8003892:	3307      	adds	r3, #7
 8003894:	10db      	asrs	r3, r3, #3
 8003896:	b29a      	uxth	r2, r3
 8003898:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800389c:	4413      	add	r3, r2
 800389e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80038a2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80038a6:	3308      	adds	r3, #8
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	b21b      	sxth	r3, r3
 80038ac:	425a      	negs	r2, r3
 80038ae:	f003 0307 	and.w	r3, r3, #7
 80038b2:	f002 0207 	and.w	r2, r2, #7
 80038b6:	bf58      	it	pl
 80038b8:	4253      	negpl	r3, r2
 80038ba:	b21b      	sxth	r3, r3
 80038bc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	//printf("Sz_Num_Val_Data    :%u\n", Hitachi_Vital_st[Source_Index].Size_Num_val);

	noofIP = (Hitachi_Vital_st[Source_Index].No_Outputs % 8);
 80038c0:	78ba      	ldrb	r2, [r7, #2]
 80038c2:	4947      	ldr	r1, [pc, #284]	; (80039e0 <Vital_Msg_extr+0xbf0>)
 80038c4:	4613      	mov	r3, r2
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	4413      	add	r3, r2
 80038ca:	011b      	lsls	r3, r3, #4
 80038cc:	440b      	add	r3, r1
 80038ce:	3303      	adds	r3, #3
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	f003 0307 	and.w	r3, r3, #7
 80038d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (noofIP != 0)
 80038da:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00e      	beq.n	8003900 <Vital_Msg_extr+0xb10>
	{
		noofIP = ((Hitachi_Vital_st[Source_Index].No_Outputs / 8)) + 1; //	including 0th buffer
 80038e2:	78ba      	ldrb	r2, [r7, #2]
 80038e4:	493e      	ldr	r1, [pc, #248]	; (80039e0 <Vital_Msg_extr+0xbf0>)
 80038e6:	4613      	mov	r3, r2
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	4413      	add	r3, r2
 80038ec:	011b      	lsls	r3, r3, #4
 80038ee:	440b      	add	r3, r1
 80038f0:	3303      	adds	r3, #3
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	08db      	lsrs	r3, r3, #3
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	3301      	adds	r3, #1
 80038fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80038fe:	e00b      	b.n	8003918 <Vital_Msg_extr+0xb28>
	}
	else
	{
		noofIP = (Hitachi_Vital_st[Source_Index].No_Outputs / 8);
 8003900:	78ba      	ldrb	r2, [r7, #2]
 8003902:	4937      	ldr	r1, [pc, #220]	; (80039e0 <Vital_Msg_extr+0xbf0>)
 8003904:	4613      	mov	r3, r2
 8003906:	005b      	lsls	r3, r3, #1
 8003908:	4413      	add	r3, r2
 800390a:	011b      	lsls	r3, r3, #4
 800390c:	440b      	add	r3, r1
 800390e:	3303      	adds	r3, #3
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	08db      	lsrs	r3, r3, #3
 8003914:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	}
	for (Traverser = 0; Traverser < noofIP; ++Traverser)
 8003918:	2300      	movs	r3, #0
 800391a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800391e:	e04c      	b.n	80039ba <Vital_Msg_extr+0xbca>
	{
		Hitachi_Vital_st[Source_Index].Outputs[Traverser] = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003920:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	441a      	add	r2, r3
 8003928:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800392c:	2108      	movs	r1, #8
 800392e:	4618      	mov	r0, r3
 8003930:	f7fc fe70 	bl	8000614 <ExtractBits>
 8003934:	4603      	mov	r3, r0
 8003936:	78ba      	ldrb	r2, [r7, #2]
 8003938:	f8b7 105e 	ldrh.w	r1, [r7, #94]	; 0x5e
 800393c:	b2dc      	uxtb	r4, r3
 800393e:	4828      	ldr	r0, [pc, #160]	; (80039e0 <Vital_Msg_extr+0xbf0>)
 8003940:	4613      	mov	r3, r2
 8003942:	005b      	lsls	r3, r3, #1
 8003944:	4413      	add	r3, r2
 8003946:	011b      	lsls	r3, r3, #4
 8003948:	4403      	add	r3, r0
 800394a:	440b      	add	r3, r1
 800394c:	3305      	adds	r3, #5
 800394e:	4622      	mov	r2, r4
 8003950:	701a      	strb	r2, [r3, #0]
		printf("[%02u]:%02X ", Traverser,Hitachi_Vital_st[Source_Index].Outputs[Traverser]);
 8003952:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
 8003956:	78ba      	ldrb	r2, [r7, #2]
 8003958:	f8b7 105e 	ldrh.w	r1, [r7, #94]	; 0x5e
 800395c:	4c20      	ldr	r4, [pc, #128]	; (80039e0 <Vital_Msg_extr+0xbf0>)
 800395e:	4613      	mov	r3, r2
 8003960:	005b      	lsls	r3, r3, #1
 8003962:	4413      	add	r3, r2
 8003964:	011b      	lsls	r3, r3, #4
 8003966:	4423      	add	r3, r4
 8003968:	440b      	add	r3, r1
 800396a:	3305      	adds	r3, #5
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	461a      	mov	r2, r3
 8003970:	4601      	mov	r1, r0
 8003972:	481d      	ldr	r0, [pc, #116]	; (80039e8 <Vital_Msg_extr+0xbf8>)
 8003974:	f01e fe16 	bl	80225a4 <iprintf>
		BITSTUFFINC(8);
 8003978:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800397c:	3308      	adds	r3, #8
 800397e:	2b00      	cmp	r3, #0
 8003980:	da00      	bge.n	8003984 <Vital_Msg_extr+0xb94>
 8003982:	3307      	adds	r3, #7
 8003984:	10db      	asrs	r3, r3, #3
 8003986:	b29a      	uxth	r2, r3
 8003988:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800398c:	4413      	add	r3, r2
 800398e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003992:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003996:	3308      	adds	r3, #8
 8003998:	b29b      	uxth	r3, r3
 800399a:	b21b      	sxth	r3, r3
 800399c:	425a      	negs	r2, r3
 800399e:	f003 0307 	and.w	r3, r3, #7
 80039a2:	f002 0207 	and.w	r2, r2, #7
 80039a6:	bf58      	it	pl
 80039a8:	4253      	negpl	r3, r2
 80039aa:	b21b      	sxth	r3, r3
 80039ac:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	for (Traverser = 0; Traverser < noofIP; ++Traverser)
 80039b0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80039b4:	3301      	adds	r3, #1
 80039b6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80039ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80039be:	b29b      	uxth	r3, r3
 80039c0:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d3ab      	bcc.n	8003920 <Vital_Msg_extr+0xb30>
	}
	printf("\n");
 80039c8:	200a      	movs	r0, #10
 80039ca:	f01e fe03 	bl	80225d4 <putchar>

	for (Traverser = 0; Traverser < Hitachi_Vital_st[Source_Index].Size_Num_val; ++Traverser)
 80039ce:	2300      	movs	r3, #0
 80039d0:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80039d4:	e044      	b.n	8003a60 <Vital_Msg_extr+0xc70>
 80039d6:	bf00      	nop
 80039d8:	200010e4 	.word	0x200010e4
 80039dc:	200011d0 	.word	0x200011d0
 80039e0:	200013b0 	.word	0x200013b0
 80039e4:	08024414 	.word	0x08024414
 80039e8:	0802441c 	.word	0x0802441c
	{
		Hitachi_Vital_st[Source_Index].Num_Outputs[Traverser] = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80039ec:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	441a      	add	r2, r3
 80039f4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80039f8:	2108      	movs	r1, #8
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7fc fe0a 	bl	8000614 <ExtractBits>
 8003a00:	4603      	mov	r3, r0
 8003a02:	78ba      	ldrb	r2, [r7, #2]
 8003a04:	f8b7 105e 	ldrh.w	r1, [r7, #94]	; 0x5e
 8003a08:	b2dc      	uxtb	r4, r3
 8003a0a:	48c4      	ldr	r0, [pc, #784]	; (8003d1c <Vital_Msg_extr+0xf2c>)
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	005b      	lsls	r3, r3, #1
 8003a10:	4413      	add	r3, r2
 8003a12:	011b      	lsls	r3, r3, #4
 8003a14:	4403      	add	r3, r0
 8003a16:	440b      	add	r3, r1
 8003a18:	3315      	adds	r3, #21
 8003a1a:	4622      	mov	r2, r4
 8003a1c:	701a      	strb	r2, [r3, #0]
		//printf("Num op Values      :0x%02X\n",  Hitachi_Vital_st[Source_Index].Num_Outputs[Traverser]);
		BITSTUFFINC(8);
 8003a1e:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8003a22:	3308      	adds	r3, #8
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	da00      	bge.n	8003a2a <Vital_Msg_extr+0xc3a>
 8003a28:	3307      	adds	r3, #7
 8003a2a:	10db      	asrs	r3, r3, #3
 8003a2c:	b29a      	uxth	r2, r3
 8003a2e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003a32:	4413      	add	r3, r2
 8003a34:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003a38:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003a3c:	3308      	adds	r3, #8
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	b21b      	sxth	r3, r3
 8003a42:	425a      	negs	r2, r3
 8003a44:	f003 0307 	and.w	r3, r3, #7
 8003a48:	f002 0207 	and.w	r2, r2, #7
 8003a4c:	bf58      	it	pl
 8003a4e:	4253      	negpl	r3, r2
 8003a50:	b21b      	sxth	r3, r3
 8003a52:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	for (Traverser = 0; Traverser < Hitachi_Vital_st[Source_Index].Size_Num_val; ++Traverser)
 8003a56:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003a60:	78ba      	ldrb	r2, [r7, #2]
 8003a62:	49ae      	ldr	r1, [pc, #696]	; (8003d1c <Vital_Msg_extr+0xf2c>)
 8003a64:	4613      	mov	r3, r2
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	4413      	add	r3, r2
 8003a6a:	011b      	lsls	r3, r3, #4
 8003a6c:	440b      	add	r3, r1
 8003a6e:	3304      	adds	r3, #4
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d3b7      	bcc.n	80039ec <Vital_Msg_extr+0xbfc>
	}

	/* Reply to Vital Message */
	Send_Service_Signal_Message(Source_Index,Des_Index);
 8003a7c:	787a      	ldrb	r2, [r7, #1]
 8003a7e:	78bb      	ldrb	r3, [r7, #2]
 8003a80:	4611      	mov	r1, r2
 8003a82:	4618      	mov	r0, r3
 8003a84:	f003 fa46 	bl	8006f14 <Send_Service_Signal_Message>
	/* Reply to Vital Message */

	/* To Send VITAL Message after Some Time say 500ms Later */
	Send_Vital_MSG_st.flag[Source_Index] = SET;
 8003a88:	78bb      	ldrb	r3, [r7, #2]
 8003a8a:	4aa5      	ldr	r2, [pc, #660]	; (8003d20 <Vital_Msg_extr+0xf30>)
 8003a8c:	2101      	movs	r1, #1
 8003a8e:	54d1      	strb	r1, [r2, r3]
	Send_Vital_MSG_st.Clk[Source_Index] = Ticks;
 8003a90:	78bb      	ldrb	r3, [r7, #2]
 8003a92:	4aa3      	ldr	r2, [pc, #652]	; (8003d20 <Vital_Msg_extr+0xf30>)
 8003a94:	3302      	adds	r3, #2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	4413      	add	r3, r2
 8003a9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a9c:	605a      	str	r2, [r3, #4]
	/* To Send VITAL Message after Some Time say 500ms Later */

	/*To Send VITAL DATA MESSAGE TO OTHER CARD*/
	if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY == RECEIVED)
 8003a9e:	78ba      	ldrb	r2, [r7, #2]
 8003aa0:	49a0      	ldr	r1, [pc, #640]	; (8003d24 <Vital_Msg_extr+0xf34>)
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	005b      	lsls	r3, r3, #1
 8003aa6:	4413      	add	r3, r2
 8003aa8:	00db      	lsls	r3, r3, #3
 8003aaa:	440b      	add	r3, r1
 8003aac:	3304      	adds	r3, #4
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d116      	bne.n	8003ae2 <Vital_Msg_extr+0xcf2>
	{
		memset(&Tx_VITAL_MSG_CAN_st,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8003ab4:	2246      	movs	r2, #70	; 0x46
 8003ab6:	2100      	movs	r1, #0
 8003ab8:	489b      	ldr	r0, [pc, #620]	; (8003d28 <Vital_Msg_extr+0xf38>)
 8003aba:	f01e fc8b 	bl	80223d4 <memset>
		Tx_VITAL_MSG_CAN_st.Source_Peer_Index = Source_Index;
 8003abe:	78bb      	ldrb	r3, [r7, #2]
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	4b99      	ldr	r3, [pc, #612]	; (8003d28 <Vital_Msg_extr+0xf38>)
 8003ac4:	801a      	strh	r2, [r3, #0]
		Tx_VITAL_MSG_CAN_st.Packet_Length = Length;
 8003ac6:	78fb      	ldrb	r3, [r7, #3]
 8003ac8:	b29a      	uxth	r2, r3
 8003aca:	4b97      	ldr	r3, [pc, #604]	; (8003d28 <Vital_Msg_extr+0xf38>)
 8003acc:	809a      	strh	r2, [r3, #4]
		memcpy(Tx_VITAL_MSG_CAN_st.VITAL_MESSAGE,Buff,Length);
 8003ace:	78fb      	ldrb	r3, [r7, #3]
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	6879      	ldr	r1, [r7, #4]
 8003ad4:	4895      	ldr	r0, [pc, #596]	; (8003d2c <Vital_Msg_extr+0xf3c>)
 8003ad6:	f01e fc55 	bl	8022384 <memcpy>
#ifdef EI_1
		TransmitCanPkt(SEND_VITAL_MSG_1);
#endif
#ifdef EI_2
		TransmitCanPkt(SEND_VITAL_MSG_2);
 8003ada:	f44f 7001 	mov.w	r0, #516	; 0x204
 8003ade:	f00b fd27 	bl	800f530 <TransmitCanPkt>




	/* COPYING RELAYS INFO 2 Temporary Buffer */
	memset(&Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Relays_st[Source_Index].RelayIPS_Buff));
 8003ae2:	78ba      	ldrb	r2, [r7, #2]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	4413      	add	r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	4a90      	ldr	r2, [pc, #576]	; (8003d30 <Vital_Msg_extr+0xf40>)
 8003aee:	4413      	add	r3, r2
 8003af0:	3301      	adds	r3, #1
 8003af2:	2210      	movs	r2, #16
 8003af4:	2100      	movs	r1, #0
 8003af6:	4618      	mov	r0, r3
 8003af8:	f01e fc6c 	bl	80223d4 <memset>
	memcpy(Relays_st[Source_Index].RelayIPS_Buff,Hitachi_Vital_st[Source_Index].Outputs,noofIP);
 8003afc:	78ba      	ldrb	r2, [r7, #2]
 8003afe:	4613      	mov	r3, r2
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	4413      	add	r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	4a8a      	ldr	r2, [pc, #552]	; (8003d30 <Vital_Msg_extr+0xf40>)
 8003b08:	4413      	add	r3, r2
 8003b0a:	1c58      	adds	r0, r3, #1
 8003b0c:	78ba      	ldrb	r2, [r7, #2]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	005b      	lsls	r3, r3, #1
 8003b12:	4413      	add	r3, r2
 8003b14:	011b      	lsls	r3, r3, #4
 8003b16:	4a81      	ldr	r2, [pc, #516]	; (8003d1c <Vital_Msg_extr+0xf2c>)
 8003b18:	4413      	add	r3, r2
 8003b1a:	3305      	adds	r3, #5
 8003b1c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8003b20:	4619      	mov	r1, r3
 8003b22:	f01e fc2f 	bl	8022384 <memcpy>
	Relays_st[Source_Index].RelayIPS_CRC = GetCRC16(0,Relays_st[Source_Index].RelayIPS_Buff,noofIP);
 8003b26:	78ba      	ldrb	r2, [r7, #2]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4413      	add	r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	4a7f      	ldr	r2, [pc, #508]	; (8003d30 <Vital_Msg_extr+0xf40>)
 8003b32:	4413      	add	r3, r2
 8003b34:	3301      	adds	r3, #1
 8003b36:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8003b3a:	b212      	sxth	r2, r2
 8003b3c:	78bc      	ldrb	r4, [r7, #2]
 8003b3e:	4619      	mov	r1, r3
 8003b40:	2000      	movs	r0, #0
 8003b42:	f00f f893 	bl	8012c6c <GetCRC16>
 8003b46:	4603      	mov	r3, r0
 8003b48:	4619      	mov	r1, r3
 8003b4a:	4a79      	ldr	r2, [pc, #484]	; (8003d30 <Vital_Msg_extr+0xf40>)
 8003b4c:	4623      	mov	r3, r4
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	4423      	add	r3, r4
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	4413      	add	r3, r2
 8003b56:	3312      	adds	r3, #18
 8003b58:	460a      	mov	r2, r1
 8003b5a:	801a      	strh	r2, [r3, #0]
	Relays_st[Source_Index].No_ofIps = noofIP;
 8003b5c:	78ba      	ldrb	r2, [r7, #2]
 8003b5e:	4974      	ldr	r1, [pc, #464]	; (8003d30 <Vital_Msg_extr+0xf40>)
 8003b60:	4613      	mov	r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	4413      	add	r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	440b      	add	r3, r1
 8003b6a:	3311      	adds	r3, #17
 8003b6c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8003b70:	701a      	strb	r2, [r3, #0]
	Relays_st[Source_Index].Peer_Index = Source_Index;
 8003b72:	78ba      	ldrb	r2, [r7, #2]
 8003b74:	496e      	ldr	r1, [pc, #440]	; (8003d30 <Vital_Msg_extr+0xf40>)
 8003b76:	4613      	mov	r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	4413      	add	r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	440b      	add	r3, r1
 8003b80:	78ba      	ldrb	r2, [r7, #2]
 8003b82:	701a      	strb	r2, [r3, #0]


	/*	Checking whether the Link is Established or Not
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */
	if(LinkEstablishFlag == SET)
 8003b84:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d16b      	bne.n	8003c64 <Vital_Msg_extr+0xe74>
	{
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8003b8c:	78ba      	ldrb	r2, [r7, #2]
 8003b8e:	4613      	mov	r3, r2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	4413      	add	r3, r2
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	4a67      	ldr	r2, [pc, #412]	; (8003d34 <Vital_Msg_extr+0xf44>)
 8003b98:	4413      	add	r3, r2
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	2210      	movs	r2, #16
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f01e fc17 	bl	80223d4 <memset>
		memcpy(&Main_Relays_st[Source_Index],&Relays_st[Source_Index],sizeof(Relays_st[Source_Index]));
 8003ba6:	78ba      	ldrb	r2, [r7, #2]
 8003ba8:	4613      	mov	r3, r2
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	4413      	add	r3, r2
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	4a60      	ldr	r2, [pc, #384]	; (8003d34 <Vital_Msg_extr+0xf44>)
 8003bb2:	1898      	adds	r0, r3, r2
 8003bb4:	78ba      	ldrb	r2, [r7, #2]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	4413      	add	r3, r2
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	4a5c      	ldr	r2, [pc, #368]	; (8003d30 <Vital_Msg_extr+0xf40>)
 8003bc0:	4413      	add	r3, r2
 8003bc2:	2214      	movs	r2, #20
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	f01e fbdd 	bl	8022384 <memcpy>
		Last_Vital_Received_Clk[Source_Index] = Ticks;
 8003bca:	78bb      	ldrb	r3, [r7, #2]
 8003bcc:	495a      	ldr	r1, [pc, #360]	; (8003d38 <Vital_Msg_extr+0xf48>)
 8003bce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003bd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		if(Prev_Relay_CRC[Source_Index] != Main_Relays_st[Source_Index].RelayIPS_CRC)
 8003bd4:	78bb      	ldrb	r3, [r7, #2]
 8003bd6:	4a59      	ldr	r2, [pc, #356]	; (8003d3c <Vital_Msg_extr+0xf4c>)
 8003bd8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8003bdc:	78ba      	ldrb	r2, [r7, #2]
 8003bde:	4855      	ldr	r0, [pc, #340]	; (8003d34 <Vital_Msg_extr+0xf44>)
 8003be0:	4613      	mov	r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	4413      	add	r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	4403      	add	r3, r0
 8003bea:	3312      	adds	r3, #18
 8003bec:	881b      	ldrh	r3, [r3, #0]
 8003bee:	4299      	cmp	r1, r3
 8003bf0:	d038      	beq.n	8003c64 <Vital_Msg_extr+0xe74>
		{
			Prev_Relay_CRC[Source_Index] = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8003bf2:	78ba      	ldrb	r2, [r7, #2]
 8003bf4:	78b9      	ldrb	r1, [r7, #2]
 8003bf6:	484f      	ldr	r0, [pc, #316]	; (8003d34 <Vital_Msg_extr+0xf44>)
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	4413      	add	r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	4403      	add	r3, r0
 8003c02:	3312      	adds	r3, #18
 8003c04:	881a      	ldrh	r2, [r3, #0]
 8003c06:	4b4d      	ldr	r3, [pc, #308]	; (8003d3c <Vital_Msg_extr+0xf4c>)
 8003c08:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			memset(&Tx_Temp_Main_Relays_st,0,sizeof(Tx_Temp_Main_Relays_st));
 8003c0c:	2214      	movs	r2, #20
 8003c0e:	2100      	movs	r1, #0
 8003c10:	484b      	ldr	r0, [pc, #300]	; (8003d40 <Vital_Msg_extr+0xf50>)
 8003c12:	f01e fbdf 	bl	80223d4 <memset>
			memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Source_Index],sizeof(Tx_Temp_Main_Relays_st));
 8003c16:	78ba      	ldrb	r2, [r7, #2]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	4413      	add	r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	4a44      	ldr	r2, [pc, #272]	; (8003d34 <Vital_Msg_extr+0xf44>)
 8003c22:	4413      	add	r3, r2
 8003c24:	2214      	movs	r2, #20
 8003c26:	4619      	mov	r1, r3
 8003c28:	4845      	ldr	r0, [pc, #276]	; (8003d40 <Vital_Msg_extr+0xf50>)
 8003c2a:	f01e fbab 	bl	8022384 <memcpy>
#ifdef EI_1
			TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
#endif
#ifdef EI_2
			TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
 8003c2e:	f44f 7002 	mov.w	r0, #520	; 0x208
 8003c32:	f00b fc7d 	bl	800f530 <TransmitCanPkt>
#endif

			if(MisMatchFlag[Source_Index] == CLEAR)
 8003c36:	78bb      	ldrb	r3, [r7, #2]
 8003c38:	4a42      	ldr	r2, [pc, #264]	; (8003d44 <Vital_Msg_extr+0xf54>)
 8003c3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d110      	bne.n	8003c64 <Vital_Msg_extr+0xe74>
			{
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Source_Index * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Source_Index].RelayIPS_Buff,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8003c42:	78bb      	ldrb	r3, [r7, #2]
 8003c44:	011b      	lsls	r3, r3, #4
 8003c46:	4a40      	ldr	r2, [pc, #256]	; (8003d48 <Vital_Msg_extr+0xf58>)
 8003c48:	4413      	add	r3, r2
 8003c4a:	1c98      	adds	r0, r3, #2
 8003c4c:	78ba      	ldrb	r2, [r7, #2]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	4413      	add	r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	4a37      	ldr	r2, [pc, #220]	; (8003d34 <Vital_Msg_extr+0xf44>)
 8003c58:	4413      	add	r3, r2
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	2210      	movs	r2, #16
 8003c5e:	4619      	mov	r1, r3
 8003c60:	f01e fb90 	bl	8022384 <memcpy>

		}
	}

	/*	Sending Message Details to Other Card */
	Tx_Ei_self_sharing_st[Source_Index].VITAL_DATA_CRC = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8003c64:	78b9      	ldrb	r1, [r7, #2]
 8003c66:	78ba      	ldrb	r2, [r7, #2]
 8003c68:	4832      	ldr	r0, [pc, #200]	; (8003d34 <Vital_Msg_extr+0xf44>)
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	440b      	add	r3, r1
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	4403      	add	r3, r0
 8003c74:	3312      	adds	r3, #18
 8003c76:	8818      	ldrh	r0, [r3, #0]
 8003c78:	492a      	ldr	r1, [pc, #168]	; (8003d24 <Vital_Msg_extr+0xf34>)
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	4413      	add	r3, r2
 8003c80:	00db      	lsls	r3, r3, #3
 8003c82:	440b      	add	r3, r1
 8003c84:	3306      	adds	r3, #6
 8003c86:	4602      	mov	r2, r0
 8003c88:	801a      	strh	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_CRC = Recv_CRC;
 8003c8a:	78ba      	ldrb	r2, [r7, #2]
 8003c8c:	4925      	ldr	r1, [pc, #148]	; (8003d24 <Vital_Msg_extr+0xf34>)
 8003c8e:	4613      	mov	r3, r2
 8003c90:	005b      	lsls	r3, r3, #1
 8003c92:	4413      	add	r3, r2
 8003c94:	00db      	lsls	r3, r3, #3
 8003c96:	440b      	add	r3, r1
 8003c98:	3314      	adds	r3, #20
 8003c9a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c9c:	601a      	str	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_Msg_Type = VDATAMSG;
 8003c9e:	78ba      	ldrb	r2, [r7, #2]
 8003ca0:	4920      	ldr	r1, [pc, #128]	; (8003d24 <Vital_Msg_extr+0xf34>)
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	005b      	lsls	r3, r3, #1
 8003ca6:	4413      	add	r3, r2
 8003ca8:	00db      	lsls	r3, r3, #3
 8003caa:	440b      	add	r3, r1
 8003cac:	3305      	adds	r3, #5
 8003cae:	2202      	movs	r2, #2
 8003cb0:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 8003cb2:	78ba      	ldrb	r2, [r7, #2]
 8003cb4:	491b      	ldr	r1, [pc, #108]	; (8003d24 <Vital_Msg_extr+0xf34>)
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	005b      	lsls	r3, r3, #1
 8003cba:	4413      	add	r3, r2
 8003cbc:	00db      	lsls	r3, r3, #3
 8003cbe:	440b      	add	r3, r1
 8003cc0:	78ba      	ldrb	r2, [r7, #2]
 8003cc2:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 8003cc4:	78ba      	ldrb	r2, [r7, #2]
 8003cc6:	4917      	ldr	r1, [pc, #92]	; (8003d24 <Vital_Msg_extr+0xf34>)
 8003cc8:	4613      	mov	r3, r2
 8003cca:	005b      	lsls	r3, r3, #1
 8003ccc:	4413      	add	r3, r2
 8003cce:	00db      	lsls	r3, r3, #3
 8003cd0:	440b      	add	r3, r1
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].LinkEstablishFlag = LinkEstablishFlag;
 8003cd8:	78ba      	ldrb	r2, [r7, #2]
 8003cda:	4912      	ldr	r1, [pc, #72]	; (8003d24 <Vital_Msg_extr+0xf34>)
 8003cdc:	4613      	mov	r3, r2
 8003cde:	005b      	lsls	r3, r3, #1
 8003ce0:	4413      	add	r3, r2
 8003ce2:	00db      	lsls	r3, r3, #3
 8003ce4:	440b      	add	r3, r1
 8003ce6:	3302      	adds	r3, #2
 8003ce8:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8003cec:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8003cee:	2218      	movs	r2, #24
 8003cf0:	2100      	movs	r1, #0
 8003cf2:	4816      	ldr	r0, [pc, #88]	; (8003d4c <Vital_Msg_extr+0xf5c>)
 8003cf4:	f01e fb6e 	bl	80223d4 <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 8003cf8:	78ba      	ldrb	r2, [r7, #2]
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	005b      	lsls	r3, r3, #1
 8003cfe:	4413      	add	r3, r2
 8003d00:	00db      	lsls	r3, r3, #3
 8003d02:	4a08      	ldr	r2, [pc, #32]	; (8003d24 <Vital_Msg_extr+0xf34>)
 8003d04:	4413      	add	r3, r2
 8003d06:	2218      	movs	r2, #24
 8003d08:	4619      	mov	r1, r3
 8003d0a:	4810      	ldr	r0, [pc, #64]	; (8003d4c <Vital_Msg_extr+0xf5c>)
 8003d0c:	f01e fb3a 	bl	8022384 <memcpy>

#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
 8003d10:	f240 2002 	movw	r0, #514	; 0x202
 8003d14:	f00b fc0c 	bl	800f530 <TransmitCanPkt>
#endif
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 8003d18:	78ba      	ldrb	r2, [r7, #2]
 8003d1a:	e019      	b.n	8003d50 <Vital_Msg_extr+0xf60>
 8003d1c:	200013b0 	.word	0x200013b0
 8003d20:	20001ca0 	.word	0x20001ca0
 8003d24:	20001680 	.word	0x20001680
 8003d28:	20001890 	.word	0x20001890
 8003d2c:	20001896 	.word	0x20001896
 8003d30:	20001dc4 	.word	0x20001dc4
 8003d34:	20001e8c 	.word	0x20001e8c
 8003d38:	20000ee4 	.word	0x20000ee4
 8003d3c:	20000f0c 	.word	0x20000f0c
 8003d40:	2000201c 	.word	0x2000201c
 8003d44:	20000ed0 	.word	0x20000ed0
 8003d48:	200010f0 	.word	0x200010f0
 8003d4c:	20001860 	.word	0x20001860
 8003d50:	4927      	ldr	r1, [pc, #156]	; (8003df0 <Vital_Msg_extr+0x1000>)
 8003d52:	4613      	mov	r3, r2
 8003d54:	005b      	lsls	r3, r3, #1
 8003d56:	4413      	add	r3, r2
 8003d58:	00db      	lsls	r3, r3, #3
 8003d5a:	440b      	add	r3, r1
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	2200      	movs	r2, #0
 8003d60:	701a      	strb	r2, [r3, #0]
	Self_Sharing_CAN_Clk[Source_Index] = Ticks;
 8003d62:	78bb      	ldrb	r3, [r7, #2]
 8003d64:	4923      	ldr	r1, [pc, #140]	; (8003df4 <Vital_Msg_extr+0x1004>)
 8003d66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	/*	Sending Message Details to Other Card */


	/* Checking the Link Status */
	if(LinkEstablishFlag == SET)
 8003d6c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d11d      	bne.n	8003db0 <Vital_Msg_extr+0xfc0>
	{
		Link_Establish_Clock[Source_Index] = Ticks;
 8003d74:	78bb      	ldrb	r3, [r7, #2]
 8003d76:	4920      	ldr	r1, [pc, #128]	; (8003df8 <Vital_Msg_extr+0x1008>)
 8003d78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishClk = Ticks;
 8003d7e:	78ba      	ldrb	r2, [r7, #2]
 8003d80:	491e      	ldr	r1, [pc, #120]	; (8003dfc <Vital_Msg_extr+0x100c>)
 8003d82:	4613      	mov	r3, r2
 8003d84:	005b      	lsls	r3, r3, #1
 8003d86:	4413      	add	r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	440b      	add	r3, r1
 8003d8c:	3304      	adds	r3, #4
 8003d8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d90:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = SET;
 8003d92:	78ba      	ldrb	r2, [r7, #2]
 8003d94:	4919      	ldr	r1, [pc, #100]	; (8003dfc <Vital_Msg_extr+0x100c>)
 8003d96:	4613      	mov	r3, r2
 8003d98:	005b      	lsls	r3, r3, #1
 8003d9a:	4413      	add	r3, r2
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	440b      	add	r3, r1
 8003da0:	3301      	adds	r3, #1
 8003da2:	2201      	movs	r2, #1
 8003da4:	701a      	strb	r2, [r3, #0]
		Link_Flag[Source_Index] = SET;
 8003da6:	78bb      	ldrb	r3, [r7, #2]
 8003da8:	4a15      	ldr	r2, [pc, #84]	; (8003e00 <Vital_Msg_extr+0x1010>)
 8003daa:	2101      	movs	r1, #1
 8003dac:	54d1      	strb	r1, [r2, r3]
 8003dae:	e017      	b.n	8003de0 <Vital_Msg_extr+0xff0>
	}
	else
	{
		Link_Flag[Source_Index] = CLEAR;
 8003db0:	78bb      	ldrb	r3, [r7, #2]
 8003db2:	4a13      	ldr	r2, [pc, #76]	; (8003e00 <Vital_Msg_extr+0x1010>)
 8003db4:	2100      	movs	r1, #0
 8003db6:	54d1      	strb	r1, [r2, r3]
		Hitachi_clk_flags_st[Source_Index].Link_FailClk = Ticks;
 8003db8:	78ba      	ldrb	r2, [r7, #2]
 8003dba:	4910      	ldr	r1, [pc, #64]	; (8003dfc <Vital_Msg_extr+0x100c>)
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	005b      	lsls	r3, r3, #1
 8003dc0:	4413      	add	r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	440b      	add	r3, r1
 8003dc6:	3308      	adds	r3, #8
 8003dc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003dca:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = CLEAR;
 8003dcc:	78ba      	ldrb	r2, [r7, #2]
 8003dce:	490b      	ldr	r1, [pc, #44]	; (8003dfc <Vital_Msg_extr+0x100c>)
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	005b      	lsls	r3, r3, #1
 8003dd4:	4413      	add	r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	440b      	add	r3, r1
 8003dda:	3301      	adds	r3, #1
 8003ddc:	2200      	movs	r2, #0
 8003dde:	701a      	strb	r2, [r3, #0]
	}
	/* Checking the Link Status */

	HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 8003de0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003de4:	4807      	ldr	r0, [pc, #28]	; (8003e04 <Vital_Msg_extr+0x1014>)
 8003de6:	f014 f8bc 	bl	8017f62 <HAL_GPIO_TogglePin>

}
 8003dea:	3764      	adds	r7, #100	; 0x64
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd90      	pop	{r4, r7, pc}
 8003df0:	20001680 	.word	0x20001680
 8003df4:	20000e50 	.word	0x20000e50
 8003df8:	20000f20 	.word	0x20000f20
 8003dfc:	20001cd4 	.word	0x20001cd4
 8003e00:	20000f70 	.word	0x20000f70
 8003e04:	40021c00 	.word	0x40021c00

08003e08 <Send_Vital_Data_Message>:

void Send_Vital_Data_Message(uint8_t Source_Index,uint8_t Des_Index)
{
 8003e08:	b590      	push	{r4, r7, lr}
 8003e0a:	b0a5      	sub	sp, #148	; 0x94
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	4603      	mov	r3, r0
 8003e10:	460a      	mov	r2, r1
 8003e12:	71fb      	strb	r3, [r7, #7]
 8003e14:	4613      	mov	r3, r2
 8003e16:	71bb      	strb	r3, [r7, #6]
	uint8_t Transmit_Buff[60] = {0,};
 8003e18:	2300      	movs	r3, #0
 8003e1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e1c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003e20:	2238      	movs	r2, #56	; 0x38
 8003e22:	2100      	movs	r1, #0
 8003e24:	4618      	mov	r0, r3
 8003e26:	f01e fad5 	bl	80223d4 <memset>
	uint8_t Temp_Buff[60] = {0,};
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	60fb      	str	r3, [r7, #12]
 8003e2e:	f107 0310 	add.w	r3, r7, #16
 8003e32:	2238      	movs	r2, #56	; 0x38
 8003e34:	2100      	movs	r1, #0
 8003e36:	4618      	mov	r0, r3
 8003e38:	f01e facc 	bl	80223d4 <memset>
	uint8_t uc_index = 0;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	BITSTUFFINIT(0, 0);
 8003e42:	2300      	movs	r3, #0
 8003e44:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8003e48:	2300      	movs	r3, #0
 8003e4a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	memset(Transmit_Buff,0,sizeof(Transmit_Buff));
 8003e4e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e52:	223c      	movs	r2, #60	; 0x3c
 8003e54:	2100      	movs	r1, #0
 8003e56:	4618      	mov	r0, r3
 8003e58:	f01e fabc 	bl	80223d4 <memset>

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_SOM);
 8003e5c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003e60:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003e64:	441a      	add	r2, r3
 8003e66:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8003e6a:	23f4      	movs	r3, #244	; 0xf4
 8003e6c:	2108      	movs	r1, #8
 8003e6e:	f7fc fc5d 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8003e72:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8003e76:	3308      	adds	r3, #8
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	da00      	bge.n	8003e7e <Send_Vital_Data_Message+0x76>
 8003e7c:	3307      	adds	r3, #7
 8003e7e:	10db      	asrs	r3, r3, #3
 8003e80:	b29a      	uxth	r2, r3
 8003e82:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003e86:	4413      	add	r3, r2
 8003e88:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8003e8c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003e90:	3308      	adds	r3, #8
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	b21b      	sxth	r3, r3
 8003e96:	425a      	negs	r2, r3
 8003e98:	f003 0307 	and.w	r3, r3, #7
 8003e9c:	f002 0207 	and.w	r2, r2, #7
 8003ea0:	bf58      	it	pl
 8003ea2:	4253      	negpl	r3, r2
 8003ea4:	b21b      	sxth	r3, r3
 8003ea6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8003eaa:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003eae:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003eb2:	441a      	add	r2, r3
 8003eb4:	79fb      	ldrb	r3, [r7, #7]
 8003eb6:	49c6      	ldr	r1, [pc, #792]	; (80041d0 <Send_Vital_Data_Message+0x3c8>)
 8003eb8:	3366      	adds	r3, #102	; 0x66
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	440b      	add	r3, r1
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8003ec4:	2110      	movs	r1, #16
 8003ec6:	f7fc fc31 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8003eca:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8003ece:	3310      	adds	r3, #16
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	da00      	bge.n	8003ed6 <Send_Vital_Data_Message+0xce>
 8003ed4:	3307      	adds	r3, #7
 8003ed6:	10db      	asrs	r3, r3, #3
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003ede:	4413      	add	r3, r2
 8003ee0:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8003ee4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003ee8:	3310      	adds	r3, #16
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	b21b      	sxth	r3, r3
 8003eee:	425a      	negs	r2, r3
 8003ef0:	f003 0307 	and.w	r3, r3, #7
 8003ef4:	f002 0207 	and.w	r2, r2, #7
 8003ef8:	bf58      	it	pl
 8003efa:	4253      	negpl	r3, r2
 8003efc:	b21b      	sxth	r3, r3
 8003efe:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]);
 8003f02:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003f06:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003f0a:	441a      	add	r2, r3
 8003f0c:	79fb      	ldrb	r3, [r7, #7]
 8003f0e:	49b0      	ldr	r1, [pc, #704]	; (80041d0 <Send_Vital_Data_Message+0x3c8>)
 8003f10:	3370      	adds	r3, #112	; 0x70
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	440b      	add	r3, r1
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8003f1c:	2110      	movs	r1, #16
 8003f1e:	f7fc fc05 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8003f22:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8003f26:	3310      	adds	r3, #16
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	da00      	bge.n	8003f2e <Send_Vital_Data_Message+0x126>
 8003f2c:	3307      	adds	r3, #7
 8003f2e:	10db      	asrs	r3, r3, #3
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003f36:	4413      	add	r3, r2
 8003f38:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8003f3c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003f40:	3310      	adds	r3, #16
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	b21b      	sxth	r3, r3
 8003f46:	425a      	negs	r2, r3
 8003f48:	f003 0307 	and.w	r3, r3, #7
 8003f4c:	f002 0207 	and.w	r2, r2, #7
 8003f50:	bf58      	it	pl
 8003f52:	4253      	negpl	r3, r2
 8003f54:	b21b      	sxth	r3, r3
 8003f56:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a


	if( ( (CHECKFLAG(2,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8003f5a:	4b9e      	ldr	r3, [pc, #632]	; (80041d4 <Send_Vital_Data_Message+0x3cc>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	089b      	lsrs	r3, r3, #2
 8003f60:	f003 0301 	and.w	r3, r3, #1
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d035      	beq.n	8003fd4 <Send_Vital_Data_Message+0x1cc>
 8003f68:	4b9a      	ldr	r3, [pc, #616]	; (80041d4 <Send_Vital_Data_Message+0x3cc>)
 8003f6a:	791b      	ldrb	r3, [r3, #4]
 8003f6c:	79fa      	ldrb	r2, [r7, #7]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d130      	bne.n	8003fd4 <Send_Vital_Data_Message+0x1cc>
	{
		uint8_t Rand_Number = 0;
 8003f72:	2300      	movs	r3, #0
 8003f74:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
#ifdef STM_32
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 200);
 8003f78:	4897      	ldr	r0, [pc, #604]	; (80041d8 <Send_Vital_Data_Message+0x3d0>)
 8003f7a:	f015 ffbb 	bl	8019ef4 <HAL_RNG_GetRandomNumber>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	4b96      	ldr	r3, [pc, #600]	; (80041dc <Send_Vital_Data_Message+0x3d4>)
 8003f82:	fba3 1302 	umull	r1, r3, r3, r2
 8003f86:	099b      	lsrs	r3, r3, #6
 8003f88:	21c8      	movs	r1, #200	; 0xc8
 8003f8a:	fb01 f303 	mul.w	r3, r1, r3
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
#endif
		printf("Injected Tx Sequence value failure\n");
 8003f94:	4892      	ldr	r0, [pc, #584]	; (80041e0 <Send_Vital_Data_Message+0x3d8>)
 8003f96:	f01e fba1 	bl	80226dc <puts>
		printf("Actual   Tx Sequence vale:%u\n",Hitachi_prms_st[Source_Index].Tx_Seq);
 8003f9a:	79fb      	ldrb	r3, [r7, #7]
 8003f9c:	4a91      	ldr	r2, [pc, #580]	; (80041e4 <Send_Vital_Data_Message+0x3dc>)
 8003f9e:	011b      	lsls	r3, r3, #4
 8003fa0:	4413      	add	r3, r2
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	488f      	ldr	r0, [pc, #572]	; (80041e8 <Send_Vital_Data_Message+0x3e0>)
 8003faa:	f01e fafb 	bl	80225a4 <iprintf>
		printf("Injected Tx Sequence value:%u\n",Rand_Number);
 8003fae:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	488d      	ldr	r0, [pc, #564]	; (80041ec <Send_Vital_Data_Message+0x3e4>)
 8003fb6:	f01e faf5 	bl	80225a4 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number);
 8003fba:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003fbe:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003fc2:	441a      	add	r2, r3
 8003fc4:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8003fc8:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8003fcc:	2108      	movs	r1, #8
 8003fce:	f7fc fbad 	bl	800072c <InsertBits>
	{
 8003fd2:	e00f      	b.n	8003ff4 <Send_Vital_Data_Message+0x1ec>
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Seq); // TX Seq Number
 8003fd4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003fd8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003fdc:	441a      	add	r2, r3
 8003fde:	79fb      	ldrb	r3, [r7, #7]
 8003fe0:	4980      	ldr	r1, [pc, #512]	; (80041e4 <Send_Vital_Data_Message+0x3dc>)
 8003fe2:	011b      	lsls	r3, r3, #4
 8003fe4:	440b      	add	r3, r1
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8003fee:	2108      	movs	r1, #8
 8003ff0:	f7fc fb9c 	bl	800072c <InsertBits>
	}
	//Last Received Packet Rx_seq number is our TX_Seq Number
	BITSTUFFINC(8);
 8003ff4:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8003ff8:	3308      	adds	r3, #8
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	da00      	bge.n	8004000 <Send_Vital_Data_Message+0x1f8>
 8003ffe:	3307      	adds	r3, #7
 8004000:	10db      	asrs	r3, r3, #3
 8004002:	b29a      	uxth	r2, r3
 8004004:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004008:	4413      	add	r3, r2
 800400a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800400e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004012:	3308      	adds	r3, #8
 8004014:	b29b      	uxth	r3, r3
 8004016:	b21b      	sxth	r3, r3
 8004018:	425a      	negs	r2, r3
 800401a:	f003 0307 	and.w	r3, r3, #7
 800401e:	f002 0207 	and.w	r2, r2, #7
 8004022:	bf58      	it	pl
 8004024:	4253      	negpl	r3, r2
 8004026:	b21b      	sxth	r3, r3
 8004028:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a


	if( ( (CHECKFLAG(3,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 800402c:	4b69      	ldr	r3, [pc, #420]	; (80041d4 <Send_Vital_Data_Message+0x3cc>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	08db      	lsrs	r3, r3, #3
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	2b00      	cmp	r3, #0
 8004038:	d035      	beq.n	80040a6 <Send_Vital_Data_Message+0x29e>
 800403a:	4b66      	ldr	r3, [pc, #408]	; (80041d4 <Send_Vital_Data_Message+0x3cc>)
 800403c:	791b      	ldrb	r3, [r3, #4]
 800403e:	79fa      	ldrb	r2, [r7, #7]
 8004040:	429a      	cmp	r2, r3
 8004042:	d130      	bne.n	80040a6 <Send_Vital_Data_Message+0x29e>
	{
		uint8_t Rand_Number  = 0;
 8004044:	2300      	movs	r3, #0
 8004046:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
#ifdef STM_32
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 200 );
 800404a:	4863      	ldr	r0, [pc, #396]	; (80041d8 <Send_Vital_Data_Message+0x3d0>)
 800404c:	f015 ff52 	bl	8019ef4 <HAL_RNG_GetRandomNumber>
 8004050:	4602      	mov	r2, r0
 8004052:	4b62      	ldr	r3, [pc, #392]	; (80041dc <Send_Vital_Data_Message+0x3d4>)
 8004054:	fba3 1302 	umull	r1, r3, r3, r2
 8004058:	099b      	lsrs	r3, r3, #6
 800405a:	21c8      	movs	r1, #200	; 0xc8
 800405c:	fb01 f303 	mul.w	r3, r1, r3
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
#endif
		printf("Injected RX Sequence value failure\n");
 8004066:	4862      	ldr	r0, [pc, #392]	; (80041f0 <Send_Vital_Data_Message+0x3e8>)
 8004068:	f01e fb38 	bl	80226dc <puts>
		printf("Actual   RX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Rx_Seq);
 800406c:	79fb      	ldrb	r3, [r7, #7]
 800406e:	4a5d      	ldr	r2, [pc, #372]	; (80041e4 <Send_Vital_Data_Message+0x3dc>)
 8004070:	011b      	lsls	r3, r3, #4
 8004072:	4413      	add	r3, r2
 8004074:	3302      	adds	r3, #2
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	4619      	mov	r1, r3
 800407a:	485e      	ldr	r0, [pc, #376]	; (80041f4 <Send_Vital_Data_Message+0x3ec>)
 800407c:	f01e fa92 	bl	80225a4 <iprintf>
		printf("Injected RX Sequence value:%u\n",Rand_Number);
 8004080:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8004084:	4619      	mov	r1, r3
 8004086:	485c      	ldr	r0, [pc, #368]	; (80041f8 <Send_Vital_Data_Message+0x3f0>)
 8004088:	f01e fa8c 	bl	80225a4 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number); // Rx Seq Number
 800408c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004090:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004094:	441a      	add	r2, r3
 8004096:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800409a:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800409e:	2108      	movs	r1, #8
 80040a0:	f7fc fb44 	bl	800072c <InsertBits>
	{
 80040a4:	e00f      	b.n	80040c6 <Send_Vital_Data_Message+0x2be>
		//Last Received Packet Tx_seq number is our Rx_Seq Number for VITAL_Message we don't Increment Sequence Number.
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Rx_Seq); // Rx Seq Number
 80040a6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80040aa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80040ae:	441a      	add	r2, r3
 80040b0:	79fb      	ldrb	r3, [r7, #7]
 80040b2:	494c      	ldr	r1, [pc, #304]	; (80041e4 <Send_Vital_Data_Message+0x3dc>)
 80040b4:	011b      	lsls	r3, r3, #4
 80040b6:	440b      	add	r3, r1
 80040b8:	3302      	adds	r3, #2
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80040c0:	2108      	movs	r1, #8
 80040c2:	f7fc fb33 	bl	800072c <InsertBits>
		//Last Received Packet Tx_seq number is our Rx_Seq Number for VITAL_Message we don't Increment Sequence Number.
	}
	BITSTUFFINC(8);
 80040c6:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80040ca:	3308      	adds	r3, #8
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	da00      	bge.n	80040d2 <Send_Vital_Data_Message+0x2ca>
 80040d0:	3307      	adds	r3, #7
 80040d2:	10db      	asrs	r3, r3, #3
 80040d4:	b29a      	uxth	r2, r3
 80040d6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80040da:	4413      	add	r3, r2
 80040dc:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80040e0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80040e4:	3308      	adds	r3, #8
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	b21b      	sxth	r3, r3
 80040ea:	425a      	negs	r2, r3
 80040ec:	f003 0307 	and.w	r3, r3, #7
 80040f0:	f002 0207 	and.w	r2, r2, #7
 80040f4:	bf58      	it	pl
 80040f6:	4253      	negpl	r3, r2
 80040f8:	b21b      	sxth	r3, r3
 80040fa:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], VDATAMSG);
 80040fe:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004102:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004106:	441a      	add	r2, r3
 8004108:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800410c:	2302      	movs	r3, #2
 800410e:	2108      	movs	r1, #8
 8004110:	f7fc fb0c 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004114:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004118:	3308      	adds	r3, #8
 800411a:	2b00      	cmp	r3, #0
 800411c:	da00      	bge.n	8004120 <Send_Vital_Data_Message+0x318>
 800411e:	3307      	adds	r3, #7
 8004120:	10db      	asrs	r3, r3, #3
 8004122:	b29a      	uxth	r2, r3
 8004124:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004128:	4413      	add	r3, r2
 800412a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800412e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004132:	3308      	adds	r3, #8
 8004134:	b29b      	uxth	r3, r3
 8004136:	b21b      	sxth	r3, r3
 8004138:	425a      	negs	r2, r3
 800413a:	f003 0307 	and.w	r3, r3, #7
 800413e:	f002 0207 	and.w	r2, r2, #7
 8004142:	bf58      	it	pl
 8004144:	4253      	negpl	r3, r2
 8004146:	b21b      	sxth	r3, r3
 8004148:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	//Inserting Message Status Flag
	//InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x002C);


	if(Change_MLK_TIME[Source_Index]== 1)
 800414c:	79fb      	ldrb	r3, [r7, #7]
 800414e:	4a2b      	ldr	r2, [pc, #172]	; (80041fc <Send_Vital_Data_Message+0x3f4>)
 8004150:	5cd3      	ldrb	r3, [r2, r3]
 8004152:	2b01      	cmp	r3, #1
 8004154:	d15a      	bne.n	800420c <Send_Vital_Data_Message+0x404>
	{
		Get_time();
 8004156:	f007 f819 	bl	800b18c <Get_time>
		memcpy(&HITACHI_time_Stamp_st[Source_Index],&RTC_Date_time_BCD_st,sizeof(GPS_DATE_TIME_t));
 800415a:	79fa      	ldrb	r2, [r7, #7]
 800415c:	4613      	mov	r3, r2
 800415e:	005b      	lsls	r3, r3, #1
 8004160:	4413      	add	r3, r2
 8004162:	005b      	lsls	r3, r3, #1
 8004164:	4a26      	ldr	r2, [pc, #152]	; (8004200 <Send_Vital_Data_Message+0x3f8>)
 8004166:	4413      	add	r3, r2
 8004168:	4a26      	ldr	r2, [pc, #152]	; (8004204 <Send_Vital_Data_Message+0x3fc>)
 800416a:	6811      	ldr	r1, [r2, #0]
 800416c:	6019      	str	r1, [r3, #0]
 800416e:	8892      	ldrh	r2, [r2, #4]
 8004170:	809a      	strh	r2, [r3, #4]
		printf("Sending Updated Time\n");
 8004172:	4825      	ldr	r0, [pc, #148]	; (8004208 <Send_Vital_Data_Message+0x400>)
 8004174:	f01e fab2 	bl	80226dc <puts>
		Change_MLK_TIME[Source_Index] = 0;
 8004178:	79fb      	ldrb	r3, [r7, #7]
 800417a:	4a20      	ldr	r2, [pc, #128]	; (80041fc <Send_Vital_Data_Message+0x3f4>)
 800417c:	2100      	movs	r1, #0
 800417e:	54d1      	strb	r1, [r2, r3]
		InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x0068);
 8004180:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004184:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004188:	441a      	add	r2, r3
 800418a:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800418e:	2368      	movs	r3, #104	; 0x68
 8004190:	2110      	movs	r1, #16
 8004192:	f7fc facb 	bl	800072c <InsertBits>
		BITSTUFFINC(16);
 8004196:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800419a:	3310      	adds	r3, #16
 800419c:	2b00      	cmp	r3, #0
 800419e:	da00      	bge.n	80041a2 <Send_Vital_Data_Message+0x39a>
 80041a0:	3307      	adds	r3, #7
 80041a2:	10db      	asrs	r3, r3, #3
 80041a4:	b29a      	uxth	r2, r3
 80041a6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80041aa:	4413      	add	r3, r2
 80041ac:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80041b0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80041b4:	3310      	adds	r3, #16
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	b21b      	sxth	r3, r3
 80041ba:	425a      	negs	r2, r3
 80041bc:	f003 0307 	and.w	r3, r3, #7
 80041c0:	f002 0207 	and.w	r2, r2, #7
 80041c4:	bf58      	it	pl
 80041c6:	4253      	negpl	r3, r2
 80041c8:	b21b      	sxth	r3, r3
 80041ca:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80041ce:	e044      	b.n	800425a <Send_Vital_Data_Message+0x452>
 80041d0:	20000304 	.word	0x20000304
 80041d4:	20001968 	.word	0x20001968
 80041d8:	20009c84 	.word	0x20009c84
 80041dc:	51eb851f 	.word	0x51eb851f
 80041e0:	0802442c 	.word	0x0802442c
 80041e4:	200011d0 	.word	0x200011d0
 80041e8:	08024450 	.word	0x08024450
 80041ec:	08024470 	.word	0x08024470
 80041f0:	08024174 	.word	0x08024174
 80041f4:	08024198 	.word	0x08024198
 80041f8:	080241b8 	.word	0x080241b8
 80041fc:	200010e4 	.word	0x200010e4
 8004200:	20001194 	.word	0x20001194
 8004204:	200027f4 	.word	0x200027f4
 8004208:	08024490 	.word	0x08024490
	}
	else
	{
		InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x0028);
 800420c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004210:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004214:	441a      	add	r2, r3
 8004216:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800421a:	2328      	movs	r3, #40	; 0x28
 800421c:	2110      	movs	r1, #16
 800421e:	f7fc fa85 	bl	800072c <InsertBits>
		BITSTUFFINC(16);
 8004222:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004226:	3310      	adds	r3, #16
 8004228:	2b00      	cmp	r3, #0
 800422a:	da00      	bge.n	800422e <Send_Vital_Data_Message+0x426>
 800422c:	3307      	adds	r3, #7
 800422e:	10db      	asrs	r3, r3, #3
 8004230:	b29a      	uxth	r2, r3
 8004232:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004236:	4413      	add	r3, r2
 8004238:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800423c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004240:	3310      	adds	r3, #16
 8004242:	b29b      	uxth	r3, r3
 8004244:	b21b      	sxth	r3, r3
 8004246:	425a      	negs	r2, r3
 8004248:	f003 0307 	and.w	r3, r3, #7
 800424c:	f002 0207 	and.w	r2, r2, #7
 8004250:	bf58      	it	pl
 8004252:	4253      	negpl	r3, r2
 8004254:	b21b      	sxth	r3, r3
 8004256:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	}



	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].YY);
 800425a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800425e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004262:	18d1      	adds	r1, r2, r3
 8004264:	79fa      	ldrb	r2, [r7, #7]
 8004266:	48cd      	ldr	r0, [pc, #820]	; (800459c <Send_Vital_Data_Message+0x794>)
 8004268:	4613      	mov	r3, r2
 800426a:	005b      	lsls	r3, r3, #1
 800426c:	4413      	add	r3, r2
 800426e:	005b      	lsls	r3, r3, #1
 8004270:	4403      	add	r3, r0
 8004272:	3305      	adds	r3, #5
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800427a:	460a      	mov	r2, r1
 800427c:	2108      	movs	r1, #8
 800427e:	f7fc fa55 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004282:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004286:	3308      	adds	r3, #8
 8004288:	2b00      	cmp	r3, #0
 800428a:	da00      	bge.n	800428e <Send_Vital_Data_Message+0x486>
 800428c:	3307      	adds	r3, #7
 800428e:	10db      	asrs	r3, r3, #3
 8004290:	b29a      	uxth	r2, r3
 8004292:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004296:	4413      	add	r3, r2
 8004298:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800429c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80042a0:	3308      	adds	r3, #8
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	b21b      	sxth	r3, r3
 80042a6:	425a      	negs	r2, r3
 80042a8:	f003 0307 	and.w	r3, r3, #7
 80042ac:	f002 0207 	and.w	r2, r2, #7
 80042b0:	bf58      	it	pl
 80042b2:	4253      	negpl	r3, r2
 80042b4:	b21b      	sxth	r3, r3
 80042b6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].MM);
 80042ba:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80042be:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80042c2:	18d1      	adds	r1, r2, r3
 80042c4:	79fa      	ldrb	r2, [r7, #7]
 80042c6:	48b5      	ldr	r0, [pc, #724]	; (800459c <Send_Vital_Data_Message+0x794>)
 80042c8:	4613      	mov	r3, r2
 80042ca:	005b      	lsls	r3, r3, #1
 80042cc:	4413      	add	r3, r2
 80042ce:	005b      	lsls	r3, r3, #1
 80042d0:	4403      	add	r3, r0
 80042d2:	3304      	adds	r3, #4
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80042da:	460a      	mov	r2, r1
 80042dc:	2108      	movs	r1, #8
 80042de:	f7fc fa25 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80042e2:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80042e6:	3308      	adds	r3, #8
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	da00      	bge.n	80042ee <Send_Vital_Data_Message+0x4e6>
 80042ec:	3307      	adds	r3, #7
 80042ee:	10db      	asrs	r3, r3, #3
 80042f0:	b29a      	uxth	r2, r3
 80042f2:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80042f6:	4413      	add	r3, r2
 80042f8:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80042fc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004300:	3308      	adds	r3, #8
 8004302:	b29b      	uxth	r3, r3
 8004304:	b21b      	sxth	r3, r3
 8004306:	425a      	negs	r2, r3
 8004308:	f003 0307 	and.w	r3, r3, #7
 800430c:	f002 0207 	and.w	r2, r2, #7
 8004310:	bf58      	it	pl
 8004312:	4253      	negpl	r3, r2
 8004314:	b21b      	sxth	r3, r3
 8004316:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].DD);
 800431a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800431e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004322:	18d1      	adds	r1, r2, r3
 8004324:	79fa      	ldrb	r2, [r7, #7]
 8004326:	489d      	ldr	r0, [pc, #628]	; (800459c <Send_Vital_Data_Message+0x794>)
 8004328:	4613      	mov	r3, r2
 800432a:	005b      	lsls	r3, r3, #1
 800432c:	4413      	add	r3, r2
 800432e:	005b      	lsls	r3, r3, #1
 8004330:	4403      	add	r3, r0
 8004332:	3303      	adds	r3, #3
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800433a:	460a      	mov	r2, r1
 800433c:	2108      	movs	r1, #8
 800433e:	f7fc f9f5 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004342:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004346:	3308      	adds	r3, #8
 8004348:	2b00      	cmp	r3, #0
 800434a:	da00      	bge.n	800434e <Send_Vital_Data_Message+0x546>
 800434c:	3307      	adds	r3, #7
 800434e:	10db      	asrs	r3, r3, #3
 8004350:	b29a      	uxth	r2, r3
 8004352:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004356:	4413      	add	r3, r2
 8004358:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800435c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004360:	3308      	adds	r3, #8
 8004362:	b29b      	uxth	r3, r3
 8004364:	b21b      	sxth	r3, r3
 8004366:	425a      	negs	r2, r3
 8004368:	f003 0307 	and.w	r3, r3, #7
 800436c:	f002 0207 	and.w	r2, r2, #7
 8004370:	bf58      	it	pl
 8004372:	4253      	negpl	r3, r2
 8004374:	b21b      	sxth	r3, r3
 8004376:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].hh);
 800437a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800437e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004382:	18d1      	adds	r1, r2, r3
 8004384:	79fa      	ldrb	r2, [r7, #7]
 8004386:	4885      	ldr	r0, [pc, #532]	; (800459c <Send_Vital_Data_Message+0x794>)
 8004388:	4613      	mov	r3, r2
 800438a:	005b      	lsls	r3, r3, #1
 800438c:	4413      	add	r3, r2
 800438e:	005b      	lsls	r3, r3, #1
 8004390:	4403      	add	r3, r0
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004398:	460a      	mov	r2, r1
 800439a:	2108      	movs	r1, #8
 800439c:	f7fc f9c6 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80043a0:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80043a4:	3308      	adds	r3, #8
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	da00      	bge.n	80043ac <Send_Vital_Data_Message+0x5a4>
 80043aa:	3307      	adds	r3, #7
 80043ac:	10db      	asrs	r3, r3, #3
 80043ae:	b29a      	uxth	r2, r3
 80043b0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80043b4:	4413      	add	r3, r2
 80043b6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80043ba:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80043be:	3308      	adds	r3, #8
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	b21b      	sxth	r3, r3
 80043c4:	425a      	negs	r2, r3
 80043c6:	f003 0307 	and.w	r3, r3, #7
 80043ca:	f002 0207 	and.w	r2, r2, #7
 80043ce:	bf58      	it	pl
 80043d0:	4253      	negpl	r3, r2
 80043d2:	b21b      	sxth	r3, r3
 80043d4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].mm);
 80043d8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80043dc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80043e0:	18d1      	adds	r1, r2, r3
 80043e2:	79fa      	ldrb	r2, [r7, #7]
 80043e4:	486d      	ldr	r0, [pc, #436]	; (800459c <Send_Vital_Data_Message+0x794>)
 80043e6:	4613      	mov	r3, r2
 80043e8:	005b      	lsls	r3, r3, #1
 80043ea:	4413      	add	r3, r2
 80043ec:	005b      	lsls	r3, r3, #1
 80043ee:	4403      	add	r3, r0
 80043f0:	3301      	adds	r3, #1
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80043f8:	460a      	mov	r2, r1
 80043fa:	2108      	movs	r1, #8
 80043fc:	f7fc f996 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004400:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004404:	3308      	adds	r3, #8
 8004406:	2b00      	cmp	r3, #0
 8004408:	da00      	bge.n	800440c <Send_Vital_Data_Message+0x604>
 800440a:	3307      	adds	r3, #7
 800440c:	10db      	asrs	r3, r3, #3
 800440e:	b29a      	uxth	r2, r3
 8004410:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004414:	4413      	add	r3, r2
 8004416:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800441a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800441e:	3308      	adds	r3, #8
 8004420:	b29b      	uxth	r3, r3
 8004422:	b21b      	sxth	r3, r3
 8004424:	425a      	negs	r2, r3
 8004426:	f003 0307 	and.w	r3, r3, #7
 800442a:	f002 0207 	and.w	r2, r2, #7
 800442e:	bf58      	it	pl
 8004430:	4253      	negpl	r3, r2
 8004432:	b21b      	sxth	r3, r3
 8004434:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].ss);
 8004438:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800443c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004440:	18d1      	adds	r1, r2, r3
 8004442:	79fa      	ldrb	r2, [r7, #7]
 8004444:	4855      	ldr	r0, [pc, #340]	; (800459c <Send_Vital_Data_Message+0x794>)
 8004446:	4613      	mov	r3, r2
 8004448:	005b      	lsls	r3, r3, #1
 800444a:	4413      	add	r3, r2
 800444c:	005b      	lsls	r3, r3, #1
 800444e:	4403      	add	r3, r0
 8004450:	3302      	adds	r3, #2
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004458:	460a      	mov	r2, r1
 800445a:	2108      	movs	r1, #8
 800445c:	f7fc f966 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004460:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004464:	3308      	adds	r3, #8
 8004466:	2b00      	cmp	r3, #0
 8004468:	da00      	bge.n	800446c <Send_Vital_Data_Message+0x664>
 800446a:	3307      	adds	r3, #7
 800446c:	10db      	asrs	r3, r3, #3
 800446e:	b29a      	uxth	r2, r3
 8004470:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004474:	4413      	add	r3, r2
 8004476:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800447a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800447e:	3308      	adds	r3, #8
 8004480:	b29b      	uxth	r3, r3
 8004482:	b21b      	sxth	r3, r3
 8004484:	425a      	negs	r2, r3
 8004486:	f003 0307 	and.w	r3, r3, #7
 800448a:	f002 0207 	and.w	r2, r2, #7
 800448e:	bf58      	it	pl
 8004490:	4253      	negpl	r3, r2
 8004492:	b21b      	sxth	r3, r3
 8004494:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], TX_SIZE_BOOL_OPS);
 8004498:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800449c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80044a0:	441a      	add	r2, r3
 80044a2:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80044a6:	2301      	movs	r3, #1
 80044a8:	2108      	movs	r1, #8
 80044aa:	f7fc f93f 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80044ae:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80044b2:	3308      	adds	r3, #8
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	da00      	bge.n	80044ba <Send_Vital_Data_Message+0x6b2>
 80044b8:	3307      	adds	r3, #7
 80044ba:	10db      	asrs	r3, r3, #3
 80044bc:	b29a      	uxth	r2, r3
 80044be:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80044c2:	4413      	add	r3, r2
 80044c4:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80044c8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80044cc:	3308      	adds	r3, #8
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	b21b      	sxth	r3, r3
 80044d2:	425a      	negs	r2, r3
 80044d4:	f003 0307 	and.w	r3, r3, #7
 80044d8:	f002 0207 	and.w	r2, r2, #7
 80044dc:	bf58      	it	pl
 80044de:	4253      	negpl	r3, r2
 80044e0:	b21b      	sxth	r3, r3
 80044e2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], TX_NUM_VAL_OPS);
 80044e6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80044ea:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80044ee:	441a      	add	r2, r3
 80044f0:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80044f4:	2300      	movs	r3, #0
 80044f6:	2108      	movs	r1, #8
 80044f8:	f7fc f918 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80044fc:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004500:	3308      	adds	r3, #8
 8004502:	2b00      	cmp	r3, #0
 8004504:	da00      	bge.n	8004508 <Send_Vital_Data_Message+0x700>
 8004506:	3307      	adds	r3, #7
 8004508:	10db      	asrs	r3, r3, #3
 800450a:	b29a      	uxth	r2, r3
 800450c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004510:	4413      	add	r3, r2
 8004512:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004516:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800451a:	3308      	adds	r3, #8
 800451c:	b29b      	uxth	r3, r3
 800451e:	b21b      	sxth	r3, r3
 8004520:	425a      	negs	r2, r3
 8004522:	f003 0307 	and.w	r3, r3, #7
 8004526:	f002 0207 	and.w	r2, r2, #7
 800452a:	bf58      	it	pl
 800452c:	4253      	negpl	r3, r2
 800452e:	b21b      	sxth	r3, r3
 8004530:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], TX_BOOL_VAL_STATE);
 8004534:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004538:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800453c:	441a      	add	r2, r3
 800453e:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004542:	2301      	movs	r3, #1
 8004544:	2108      	movs	r1, #8
 8004546:	f7fc f8f1 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 800454a:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800454e:	3308      	adds	r3, #8
 8004550:	2b00      	cmp	r3, #0
 8004552:	da00      	bge.n	8004556 <Send_Vital_Data_Message+0x74e>
 8004554:	3307      	adds	r3, #7
 8004556:	10db      	asrs	r3, r3, #3
 8004558:	b29a      	uxth	r2, r3
 800455a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800455e:	4413      	add	r3, r2
 8004560:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004564:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004568:	3308      	adds	r3, #8
 800456a:	b29b      	uxth	r3, r3
 800456c:	b21b      	sxth	r3, r3
 800456e:	425a      	negs	r2, r3
 8004570:	f003 0307 	and.w	r3, r3, #7
 8004574:	f002 0207 	and.w	r2, r2, #7
 8004578:	bf58      	it	pl
 800457a:	4253      	negpl	r3, r2
 800457c:	b21b      	sxth	r3, r3
 800457e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	//	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
	//	{
	//		Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value = 0x654321;
	//	}

	if( ( (CHECKFLAG(1,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8004582:	4b07      	ldr	r3, [pc, #28]	; (80045a0 <Send_Vital_Data_Message+0x798>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	085b      	lsrs	r3, r3, #1
 8004588:	f003 0301 	and.w	r3, r3, #1
 800458c:	2b00      	cmp	r3, #0
 800458e:	d02c      	beq.n	80045ea <Send_Vital_Data_Message+0x7e2>
 8004590:	4b03      	ldr	r3, [pc, #12]	; (80045a0 <Send_Vital_Data_Message+0x798>)
 8004592:	791b      	ldrb	r3, [r3, #4]
 8004594:	79fa      	ldrb	r2, [r7, #7]
 8004596:	429a      	cmp	r2, r3
 8004598:	d127      	bne.n	80045ea <Send_Vital_Data_Message+0x7e2>
 800459a:	e003      	b.n	80045a4 <Send_Vital_Data_Message+0x79c>
 800459c:	20001194 	.word	0x20001194
 80045a0:	20001968 	.word	0x20001968
	{
		uint32_t Rand_Number = 0;
 80045a4:	2300      	movs	r3, #0
 80045a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
#ifdef STM_32
		Rand_Number = HAL_RNG_GetRandomNumber(&hrng);
 80045aa:	484e      	ldr	r0, [pc, #312]	; (80046e4 <Send_Vital_Data_Message+0x8dc>)
 80045ac:	f015 fca2 	bl	8019ef4 <HAL_RNG_GetRandomNumber>
 80045b0:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
#endif
		printf("\nInjected Vital Init Value Failure\n");
 80045b4:	484c      	ldr	r0, [pc, #304]	; (80046e8 <Send_Vital_Data_Message+0x8e0>)
 80045b6:	f01e f891 	bl	80226dc <puts>
		printf("Actual Vital Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 80045ba:	79fb      	ldrb	r3, [r7, #7]
 80045bc:	4a4b      	ldr	r2, [pc, #300]	; (80046ec <Send_Vital_Data_Message+0x8e4>)
 80045be:	011b      	lsls	r3, r3, #4
 80045c0:	4413      	add	r3, r2
 80045c2:	330c      	adds	r3, #12
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4619      	mov	r1, r3
 80045c8:	4849      	ldr	r0, [pc, #292]	; (80046f0 <Send_Vital_Data_Message+0x8e8>)
 80045ca:	f01d ffeb 	bl	80225a4 <iprintf>
		printf("Injected Vital Init Value:0x%06lX\n",Rand_Number);
 80045ce:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80045d2:	4848      	ldr	r0, [pc, #288]	; (80046f4 <Send_Vital_Data_Message+0x8ec>)
 80045d4:	f01d ffe6 	bl	80225a4 <iprintf>
		InsertBits(0, 24, &Temp_Buff[0], Rand_Number);
 80045d8:	f107 020c 	add.w	r2, r7, #12
 80045dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80045e0:	2118      	movs	r1, #24
 80045e2:	2000      	movs	r0, #0
 80045e4:	f7fc f8a2 	bl	800072c <InsertBits>
	{
 80045e8:	e00b      	b.n	8004602 <Send_Vital_Data_Message+0x7fa>
	}
	else
	{
		InsertBits(0, 24, &Temp_Buff[0], Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 80045ea:	79fb      	ldrb	r3, [r7, #7]
 80045ec:	4a3f      	ldr	r2, [pc, #252]	; (80046ec <Send_Vital_Data_Message+0x8e4>)
 80045ee:	011b      	lsls	r3, r3, #4
 80045f0:	4413      	add	r3, r2
 80045f2:	330c      	adds	r3, #12
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f107 020c 	add.w	r2, r7, #12
 80045fa:	2118      	movs	r1, #24
 80045fc:	2000      	movs	r0, #0
 80045fe:	f7fc f895 	bl	800072c <InsertBits>
	}
	for (uc_index = 0; uc_index < ucByte; uc_index++)
 8004602:	2300      	movs	r3, #0
 8004604:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8004608:	e011      	b.n	800462e <Send_Vital_Data_Message+0x826>
	{
		Temp_Buff[uc_index + 3] = Transmit_Buff[uc_index];
 800460a:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 800460e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004612:	3303      	adds	r3, #3
 8004614:	3290      	adds	r2, #144	; 0x90
 8004616:	443a      	add	r2, r7
 8004618:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 800461c:	3390      	adds	r3, #144	; 0x90
 800461e:	443b      	add	r3, r7
 8004620:	f803 2c84 	strb.w	r2, [r3, #-132]
	for (uc_index = 0; uc_index < ucByte; uc_index++)
 8004624:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004628:	3301      	adds	r3, #1
 800462a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800462e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004632:	b29b      	uxth	r3, r3
 8004634:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8004638:	429a      	cmp	r2, r3
 800463a:	d8e6      	bhi.n	800460a <Send_Vital_Data_Message+0x802>
	}

	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], CalculateDirectReverseCrc(Temp_Buff, uc_index + 3));
 800463c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004640:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004644:	18d4      	adds	r4, r2, r3
 8004646:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800464a:	b29b      	uxth	r3, r3
 800464c:	3303      	adds	r3, #3
 800464e:	b29a      	uxth	r2, r3
 8004650:	f107 030c 	add.w	r3, r7, #12
 8004654:	4611      	mov	r1, r2
 8004656:	4618      	mov	r0, r3
 8004658:	f00e fbc2 	bl	8012de0 <CalculateDirectReverseCrc>
 800465c:	4603      	mov	r3, r0
 800465e:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004662:	4622      	mov	r2, r4
 8004664:	2120      	movs	r1, #32
 8004666:	f7fc f861 	bl	800072c <InsertBits>
	BITSTUFFINC(32);
 800466a:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800466e:	3320      	adds	r3, #32
 8004670:	2b00      	cmp	r3, #0
 8004672:	da00      	bge.n	8004676 <Send_Vital_Data_Message+0x86e>
 8004674:	3307      	adds	r3, #7
 8004676:	10db      	asrs	r3, r3, #3
 8004678:	b29a      	uxth	r2, r3
 800467a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800467e:	4413      	add	r3, r2
 8004680:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004684:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004688:	3320      	adds	r3, #32
 800468a:	b29b      	uxth	r3, r3
 800468c:	b21b      	sxth	r3, r3
 800468e:	425a      	negs	r2, r3
 8004690:	f003 0307 	and.w	r3, r3, #7
 8004694:	f002 0207 	and.w	r2, r2, #7
 8004698:	bf58      	it	pl
 800469a:	4253      	negpl	r3, r2
 800469c:	b21b      	sxth	r3, r3
 800469e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

#if ENABLE_FAULT_INJECTION
	if( ( CHECKFLAG(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)== SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 80046a2:	4b15      	ldr	r3, [pc, #84]	; (80046f8 <Send_Vital_Data_Message+0x8f0>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	0a5b      	lsrs	r3, r3, #9
 80046a8:	f003 0301 	and.w	r3, r3, #1
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00b      	beq.n	80046c8 <Send_Vital_Data_Message+0x8c0>
 80046b0:	4b11      	ldr	r3, [pc, #68]	; (80046f8 <Send_Vital_Data_Message+0x8f0>)
 80046b2:	791b      	ldrb	r3, [r3, #4]
 80046b4:	79fa      	ldrb	r2, [r7, #7]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d106      	bne.n	80046c8 <Send_Vital_Data_Message+0x8c0>
	{
		printf("Injected ETH tx Fail\n");
 80046ba:	4810      	ldr	r0, [pc, #64]	; (80046fc <Send_Vital_Data_Message+0x8f4>)
 80046bc:	f01e f80e 	bl	80226dc <puts>
		printf("Not Sending Reply");
 80046c0:	480f      	ldr	r0, [pc, #60]	; (8004700 <Send_Vital_Data_Message+0x8f8>)
 80046c2:	f01d ff6f 	bl	80225a4 <iprintf>
 80046c6:	e009      	b.n	80046dc <Send_Vital_Data_Message+0x8d4>
	}
	else
	{
		Process_Sending_Reply(Transmit_Buff,ucByte,Source_Index);
 80046c8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80046cc:	b2d9      	uxtb	r1, r3
 80046ce:	79fa      	ldrb	r2, [r7, #7]
 80046d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80046d4:	4618      	mov	r0, r3
 80046d6:	f002 ffbd 	bl	8007654 <Process_Sending_Reply>
	}
#else
	Process_Sending_Reply(Transmit_Buff,ucByte,Source_Index);
#endif
}
 80046da:	bf00      	nop
 80046dc:	bf00      	nop
 80046de:	3794      	adds	r7, #148	; 0x94
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd90      	pop	{r4, r7, pc}
 80046e4:	20009c84 	.word	0x20009c84
 80046e8:	080244a8 	.word	0x080244a8
 80046ec:	200011d0 	.word	0x200011d0
 80046f0:	080244cc 	.word	0x080244cc
 80046f4:	080244f0 	.word	0x080244f0
 80046f8:	20001968 	.word	0x20001968
 80046fc:	08024240 	.word	0x08024240
 8004700:	08024258 	.word	0x08024258

08004704 <Vital_Msg_extr_from_CAN>:


void Vital_Msg_extr_from_CAN(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b0c0      	sub	sp, #256	; 0x100
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	4608      	mov	r0, r1
 800470e:	4611      	mov	r1, r2
 8004710:	461a      	mov	r2, r3
 8004712:	4603      	mov	r3, r0
 8004714:	70fb      	strb	r3, [r7, #3]
 8004716:	460b      	mov	r3, r1
 8004718:	70bb      	strb	r3, [r7, #2]
 800471a:	4613      	mov	r3, r2
 800471c:	707b      	strb	r3, [r7, #1]
	uint16_t Traverser = 0;
 800471e:	2300      	movs	r3, #0
 8004720:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
	uint32_t Calc_CRC = 0;
 8004724:	2300      	movs	r3, #0
 8004726:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	uint32_t Recv_CRC = 0;
 800472a:	2300      	movs	r3, #0
 800472c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	uint32_t Ticks = HAL_GetTick();
 8004730:	f010 ff2e 	bl	8015590 <HAL_GetTick>
 8004734:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
	uint8_t noofIP = 0, uc_index = 0;
 8004738:	2300      	movs	r3, #0
 800473a:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
 800473e:	2300      	movs	r3, #0
 8004740:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
	uint8_t LinkEstablishFlag = 0;
 8004744:	2300      	movs	r3, #0
 8004746:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	uint8_t Temp_Vital_Data_Buff[128] = {0,};
 800474a:	2300      	movs	r3, #0
 800474c:	667b      	str	r3, [r7, #100]	; 0x64
 800474e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004752:	227c      	movs	r2, #124	; 0x7c
 8004754:	2100      	movs	r1, #0
 8004756:	4618      	mov	r0, r3
 8004758:	f01d fe3c 	bl	80223d4 <memset>
	HITACHI_VITAL_t CAN_Hitachi_Vital_st;
	HITACHI_PARAMETERS_t CAN_Hitachi_Parameters_t;
	HITACHI_TIME_t CAN_HITACHI_time_Stamp_st;
	RELAYS_t CAN_Relay_st;

	BITSTUFFINIT(0, 0);
 800475c:	2300      	movs	r3, #0
 800475e:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004762:	2300      	movs	r3, #0
 8004764:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	if(Length == Last_Rcv_Vdata_st[Source_Index].Length)
 8004768:	78fb      	ldrb	r3, [r7, #3]
 800476a:	b299      	uxth	r1, r3
 800476c:	78ba      	ldrb	r2, [r7, #2]
 800476e:	48c3      	ldr	r0, [pc, #780]	; (8004a7c <Vital_Msg_extr_from_CAN+0x378>)
 8004770:	4613      	mov	r3, r2
 8004772:	015b      	lsls	r3, r3, #5
 8004774:	4413      	add	r3, r2
 8004776:	005b      	lsls	r3, r3, #1
 8004778:	4403      	add	r3, r0
 800477a:	3340      	adds	r3, #64	; 0x40
 800477c:	881b      	ldrh	r3, [r3, #0]
 800477e:	4299      	cmp	r1, r3
 8004780:	d11a      	bne.n	80047b8 <Vital_Msg_extr_from_CAN+0xb4>
	{
		if(memcmp(Buff,Last_Rcv_Vdata_st[Source_Index].Last_Rcv_vdata,Length) == 0)
 8004782:	78ba      	ldrb	r2, [r7, #2]
 8004784:	4613      	mov	r3, r2
 8004786:	015b      	lsls	r3, r3, #5
 8004788:	4413      	add	r3, r2
 800478a:	005b      	lsls	r3, r3, #1
 800478c:	4abb      	ldr	r2, [pc, #748]	; (8004a7c <Vital_Msg_extr_from_CAN+0x378>)
 800478e:	4413      	add	r3, r2
 8004790:	78fa      	ldrb	r2, [r7, #3]
 8004792:	4619      	mov	r1, r3
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f01d fde5 	bl	8022364 <memcmp>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d10b      	bne.n	80047b8 <Vital_Msg_extr_from_CAN+0xb4>
		{
			printf("\nBoth Ethernet Vdata Msg and CAN Vdata Msg Matched for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80047a0:	78bb      	ldrb	r3, [r7, #2]
 80047a2:	4ab7      	ldr	r2, [pc, #732]	; (8004a80 <Vital_Msg_extr_from_CAN+0x37c>)
 80047a4:	3366      	adds	r3, #102	; 0x66
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	4413      	add	r3, r2
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	4619      	mov	r1, r3
 80047ae:	48b5      	ldr	r0, [pc, #724]	; (8004a84 <Vital_Msg_extr_from_CAN+0x380>)
 80047b0:	f01d fef8 	bl	80225a4 <iprintf>
			return;
 80047b4:	f000 bd98 	b.w	80052e8 <Vital_Msg_extr_from_CAN+0xbe4>
		}
	}

	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 80047b8:	78fb      	ldrb	r3, [r7, #3]
 80047ba:	3b05      	subs	r3, #5
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	441a      	add	r2, r3
 80047c0:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80047c4:	2120      	movs	r1, #32
 80047c6:	4618      	mov	r0, r3
 80047c8:	f7fb ff24 	bl	8000614 <ExtractBits>
 80047cc:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec


#if ENABLE_FAULT_INJECTION
	if( ( (CHECKFLAG(0,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 80047d0:	4bad      	ldr	r3, [pc, #692]	; (8004a88 <Vital_Msg_extr_from_CAN+0x384>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0301 	and.w	r3, r3, #1
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d034      	beq.n	8004846 <Vital_Msg_extr_from_CAN+0x142>
 80047dc:	4baa      	ldr	r3, [pc, #680]	; (8004a88 <Vital_Msg_extr_from_CAN+0x384>)
 80047de:	791b      	ldrb	r3, [r3, #4]
 80047e0:	78ba      	ldrb	r2, [r7, #2]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d12f      	bne.n	8004846 <Vital_Msg_extr_from_CAN+0x142>
	{
		uint32_t Rand_Number = 22;
 80047e6:	2316      	movs	r3, #22
 80047e8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 0xffff00);
 80047ec:	48a7      	ldr	r0, [pc, #668]	; (8004a8c <Vital_Msg_extr_from_CAN+0x388>)
 80047ee:	f015 fb81 	bl	8019ef4 <HAL_RNG_GetRandomNumber>
 80047f2:	4602      	mov	r2, r0
 80047f4:	4ba6      	ldr	r3, [pc, #664]	; (8004a90 <Vital_Msg_extr_from_CAN+0x38c>)
 80047f6:	fba3 1302 	umull	r1, r3, r3, r2
 80047fa:	0dd9      	lsrs	r1, r3, #23
 80047fc:	460b      	mov	r3, r1
 80047fe:	041b      	lsls	r3, r3, #16
 8004800:	1a5b      	subs	r3, r3, r1
 8004802:	021b      	lsls	r3, r3, #8
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		printf("\nInjected RX Vital CRC failure\n");
 800480a:	48a2      	ldr	r0, [pc, #648]	; (8004a94 <Vital_Msg_extr_from_CAN+0x390>)
 800480c:	f01d ff66 	bl	80226dc <puts>
		printf("Actual   RX Vital Init Value:0x%06lX\n",Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 8004810:	78ba      	ldrb	r2, [r7, #2]
 8004812:	49a1      	ldr	r1, [pc, #644]	; (8004a98 <Vital_Msg_extr_from_CAN+0x394>)
 8004814:	4613      	mov	r3, r2
 8004816:	005b      	lsls	r3, r3, #1
 8004818:	4413      	add	r3, r2
 800481a:	00db      	lsls	r3, r3, #3
 800481c:	440b      	add	r3, r1
 800481e:	3308      	adds	r3, #8
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4619      	mov	r1, r3
 8004824:	489d      	ldr	r0, [pc, #628]	; (8004a9c <Vital_Msg_extr_from_CAN+0x398>)
 8004826:	f01d febd 	bl	80225a4 <iprintf>
		printf("Injected RX Vital Init Value:0x%06lX\n",Rand_Number);
 800482a:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 800482e:	489c      	ldr	r0, [pc, #624]	; (8004aa0 <Vital_Msg_extr_from_CAN+0x39c>)
 8004830:	f01d feb8 	bl	80225a4 <iprintf>
		InsertBits(0, 24, &Temp_Vital_Data_Buff[0],Rand_Number);
 8004834:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8004838:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800483c:	2118      	movs	r1, #24
 800483e:	2000      	movs	r0, #0
 8004840:	f7fb ff74 	bl	800072c <InsertBits>
	{
 8004844:	e00e      	b.n	8004864 <Vital_Msg_extr_from_CAN+0x160>
	}
	else
	{
		InsertBits(0, 24, &Temp_Vital_Data_Buff[0], Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 8004846:	78ba      	ldrb	r2, [r7, #2]
 8004848:	4993      	ldr	r1, [pc, #588]	; (8004a98 <Vital_Msg_extr_from_CAN+0x394>)
 800484a:	4613      	mov	r3, r2
 800484c:	005b      	lsls	r3, r3, #1
 800484e:	4413      	add	r3, r2
 8004850:	00db      	lsls	r3, r3, #3
 8004852:	440b      	add	r3, r1
 8004854:	3308      	adds	r3, #8
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800485c:	2118      	movs	r1, #24
 800485e:	2000      	movs	r0, #0
 8004860:	f7fb ff64 	bl	800072c <InsertBits>
	}
#else
	InsertBits(0, 24, &Temp_Vital_Data_Buff[0], Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
#endif
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8004864:	2300      	movs	r3, #0
 8004866:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 800486a:	e011      	b.n	8004890 <Vital_Msg_extr_from_CAN+0x18c>
	{
		Temp_Vital_Data_Buff[uc_index + 3] = Buff[uc_index];
 800486c:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	441a      	add	r2, r3
 8004874:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8004878:	3303      	adds	r3, #3
 800487a:	7812      	ldrb	r2, [r2, #0]
 800487c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004880:	443b      	add	r3, r7
 8004882:	f803 2c9c 	strb.w	r2, [r3, #-156]
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8004886:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 800488a:	3301      	adds	r3, #1
 800488c:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 8004890:	f897 20fc 	ldrb.w	r2, [r7, #252]	; 0xfc
 8004894:	78fb      	ldrb	r3, [r7, #3]
 8004896:	3b05      	subs	r3, #5
 8004898:	429a      	cmp	r2, r3
 800489a:	dbe7      	blt.n	800486c <Vital_Msg_extr_from_CAN+0x168>
	}
	Calc_CRC = CalculateDirectReverseCrc(Temp_Vital_Data_Buff, uc_index + 3);
 800489c:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	3303      	adds	r3, #3
 80048a4:	b29a      	uxth	r2, r3
 80048a6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80048aa:	4611      	mov	r1, r2
 80048ac:	4618      	mov	r0, r3
 80048ae:	f00e fa97 	bl	8012de0 <CalculateDirectReverseCrc>
 80048b2:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0

	if(Calc_CRC != Recv_CRC)
 80048b6:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 80048ba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80048be:	429a      	cmp	r2, r3
 80048c0:	f000 8104 	beq.w	8004acc <Vital_Msg_extr_from_CAN+0x3c8>
	{
		if( ExtractBits(0, 8, (unsigned char *)&Buff[5]) == 0x00)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	3305      	adds	r3, #5
 80048c8:	461a      	mov	r2, r3
 80048ca:	2108      	movs	r1, #8
 80048cc:	2000      	movs	r0, #0
 80048ce:	f7fb fea1 	bl	8000614 <ExtractBits>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	f040 80ba 	bne.w	8004a4e <Vital_Msg_extr_from_CAN+0x34a>
		{
			printf("Tx seq Roll over Detected\n");
 80048da:	4872      	ldr	r0, [pc, #456]	; (8004aa4 <Vital_Msg_extr_from_CAN+0x3a0>)
 80048dc:	f01d fefe 	bl	80226dc <puts>
			memset(Temp_Vital_Data_Buff,0,sizeof(Temp_Vital_Data_Buff));
 80048e0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80048e4:	2280      	movs	r2, #128	; 0x80
 80048e6:	2100      	movs	r1, #0
 80048e8:	4618      	mov	r0, r3
 80048ea:	f01d fd73 	bl	80223d4 <memset>
			InsertBits(0, 24, &Temp_Vital_Data_Buff[0], (Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val+1));
 80048ee:	78ba      	ldrb	r2, [r7, #2]
 80048f0:	4969      	ldr	r1, [pc, #420]	; (8004a98 <Vital_Msg_extr_from_CAN+0x394>)
 80048f2:	4613      	mov	r3, r2
 80048f4:	005b      	lsls	r3, r3, #1
 80048f6:	4413      	add	r3, r2
 80048f8:	00db      	lsls	r3, r3, #3
 80048fa:	440b      	add	r3, r1
 80048fc:	3308      	adds	r3, #8
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	3301      	adds	r3, #1
 8004902:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8004906:	2118      	movs	r1, #24
 8004908:	2000      	movs	r0, #0
 800490a:	f7fb ff0f 	bl	800072c <InsertBits>
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 800490e:	2300      	movs	r3, #0
 8004910:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 8004914:	e011      	b.n	800493a <Vital_Msg_extr_from_CAN+0x236>
			{
				Temp_Vital_Data_Buff[uc_index + 3] = Buff[uc_index];
 8004916:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	441a      	add	r2, r3
 800491e:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8004922:	3303      	adds	r3, #3
 8004924:	7812      	ldrb	r2, [r2, #0]
 8004926:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800492a:	443b      	add	r3, r7
 800492c:	f803 2c9c 	strb.w	r2, [r3, #-156]
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8004930:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8004934:	3301      	adds	r3, #1
 8004936:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 800493a:	f897 20fc 	ldrb.w	r2, [r7, #252]	; 0xfc
 800493e:	78fb      	ldrb	r3, [r7, #3]
 8004940:	3b05      	subs	r3, #5
 8004942:	429a      	cmp	r2, r3
 8004944:	dbe7      	blt.n	8004916 <Vital_Msg_extr_from_CAN+0x212>
			}
			Calc_CRC = CalculateDirectReverseCrc(Temp_Vital_Data_Buff, uc_index + 3);
 8004946:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 800494a:	b29b      	uxth	r3, r3
 800494c:	3303      	adds	r3, #3
 800494e:	b29a      	uxth	r2, r3
 8004950:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004954:	4611      	mov	r1, r2
 8004956:	4618      	mov	r0, r3
 8004958:	f00e fa42 	bl	8012de0 <CalculateDirectReverseCrc>
 800495c:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
			Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 8004960:	78fb      	ldrb	r3, [r7, #3]
 8004962:	3b05      	subs	r3, #5
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	441a      	add	r2, r3
 8004968:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800496c:	2120      	movs	r1, #32
 800496e:	4618      	mov	r0, r3
 8004970:	f7fb fe50 	bl	8000614 <ExtractBits>
 8004974:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec

			if(Calc_CRC == Recv_CRC)
 8004978:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 800497c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004980:	429a      	cmp	r2, r3
 8004982:	d14e      	bne.n	8004a22 <Vital_Msg_extr_from_CAN+0x31e>
			{
				printf("CRC OK AFTER ROLL OVER @VITAL_CAN\n");
 8004984:	4848      	ldr	r0, [pc, #288]	; (8004aa8 <Vital_Msg_extr_from_CAN+0x3a4>)
 8004986:	f01d fea9 	bl	80226dc <puts>
				printf("Received CRC       :0x%08lX\n",Recv_CRC);
 800498a:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800498e:	4847      	ldr	r0, [pc, #284]	; (8004aac <Vital_Msg_extr_from_CAN+0x3a8>)
 8004990:	f01d fe08 	bl	80225a4 <iprintf>
				printf("Previous Init Value:%lu\n",Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 8004994:	78ba      	ldrb	r2, [r7, #2]
 8004996:	4940      	ldr	r1, [pc, #256]	; (8004a98 <Vital_Msg_extr_from_CAN+0x394>)
 8004998:	4613      	mov	r3, r2
 800499a:	005b      	lsls	r3, r3, #1
 800499c:	4413      	add	r3, r2
 800499e:	00db      	lsls	r3, r3, #3
 80049a0:	440b      	add	r3, r1
 80049a2:	3308      	adds	r3, #8
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4619      	mov	r1, r3
 80049a8:	4841      	ldr	r0, [pc, #260]	; (8004ab0 <Vital_Msg_extr_from_CAN+0x3ac>)
 80049aa:	f01d fdfb 	bl	80225a4 <iprintf>
				Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = ++Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val;
 80049ae:	78ba      	ldrb	r2, [r7, #2]
 80049b0:	4939      	ldr	r1, [pc, #228]	; (8004a98 <Vital_Msg_extr_from_CAN+0x394>)
 80049b2:	4613      	mov	r3, r2
 80049b4:	005b      	lsls	r3, r3, #1
 80049b6:	4413      	add	r3, r2
 80049b8:	00db      	lsls	r3, r3, #3
 80049ba:	440b      	add	r3, r1
 80049bc:	3308      	adds	r3, #8
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	1c59      	adds	r1, r3, #1
 80049c2:	4835      	ldr	r0, [pc, #212]	; (8004a98 <Vital_Msg_extr_from_CAN+0x394>)
 80049c4:	4613      	mov	r3, r2
 80049c6:	005b      	lsls	r3, r3, #1
 80049c8:	4413      	add	r3, r2
 80049ca:	00db      	lsls	r3, r3, #3
 80049cc:	4403      	add	r3, r0
 80049ce:	3308      	adds	r3, #8
 80049d0:	6019      	str	r1, [r3, #0]
 80049d2:	78b9      	ldrb	r1, [r7, #2]
 80049d4:	4830      	ldr	r0, [pc, #192]	; (8004a98 <Vital_Msg_extr_from_CAN+0x394>)
 80049d6:	4613      	mov	r3, r2
 80049d8:	005b      	lsls	r3, r3, #1
 80049da:	4413      	add	r3, r2
 80049dc:	00db      	lsls	r3, r3, #3
 80049de:	4403      	add	r3, r0
 80049e0:	3308      	adds	r3, #8
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	4833      	ldr	r0, [pc, #204]	; (8004ab4 <Vital_Msg_extr_from_CAN+0x3b0>)
 80049e6:	010b      	lsls	r3, r1, #4
 80049e8:	4403      	add	r3, r0
 80049ea:	3308      	adds	r3, #8
 80049ec:	601a      	str	r2, [r3, #0]
				printf("Incremented Vital_CRC Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 80049ee:	78bb      	ldrb	r3, [r7, #2]
 80049f0:	4a30      	ldr	r2, [pc, #192]	; (8004ab4 <Vital_Msg_extr_from_CAN+0x3b0>)
 80049f2:	011b      	lsls	r3, r3, #4
 80049f4:	4413      	add	r3, r2
 80049f6:	3308      	adds	r3, #8
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4619      	mov	r1, r3
 80049fc:	482e      	ldr	r0, [pc, #184]	; (8004ab8 <Vital_Msg_extr_from_CAN+0x3b4>)
 80049fe:	f01d fdd1 	bl	80225a4 <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 8004a02:	78bb      	ldrb	r3, [r7, #2]
 8004a04:	78ba      	ldrb	r2, [r7, #2]
 8004a06:	492b      	ldr	r1, [pc, #172]	; (8004ab4 <Vital_Msg_extr_from_CAN+0x3b0>)
 8004a08:	011b      	lsls	r3, r3, #4
 8004a0a:	440b      	add	r3, r1
 8004a0c:	3308      	adds	r3, #8
 8004a0e:	6819      	ldr	r1, [r3, #0]
 8004a10:	482a      	ldr	r0, [pc, #168]	; (8004abc <Vital_Msg_extr_from_CAN+0x3b8>)
 8004a12:	4613      	mov	r3, r2
 8004a14:	005b      	lsls	r3, r3, #1
 8004a16:	4413      	add	r3, r2
 8004a18:	00db      	lsls	r3, r3, #3
 8004a1a:	4403      	add	r3, r0
 8004a1c:	3308      	adds	r3, #8
 8004a1e:	6019      	str	r1, [r3, #0]
				goto ROLLOVER_VITAL_CAN;
 8004a20:	e055      	b.n	8004ace <Vital_Msg_extr_from_CAN+0x3ca>
			}
			else
			{
				printf("CAN VITAL MSG CRC fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8004a22:	78bb      	ldrb	r3, [r7, #2]
 8004a24:	4a16      	ldr	r2, [pc, #88]	; (8004a80 <Vital_Msg_extr_from_CAN+0x37c>)
 8004a26:	3366      	adds	r3, #102	; 0x66
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	4413      	add	r3, r2
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	4619      	mov	r1, r3
 8004a30:	4823      	ldr	r0, [pc, #140]	; (8004ac0 <Vital_Msg_extr_from_CAN+0x3bc>)
 8004a32:	f01d fdb7 	bl	80225a4 <iprintf>
				printf("R-CRC:0x%08lX\n", Recv_CRC);
 8004a36:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8004a3a:	4822      	ldr	r0, [pc, #136]	; (8004ac4 <Vital_Msg_extr_from_CAN+0x3c0>)
 8004a3c:	f01d fdb2 	bl	80225a4 <iprintf>
				printf("C-CRC:0x%08lX\n", Calc_CRC);
 8004a40:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8004a44:	4820      	ldr	r0, [pc, #128]	; (8004ac8 <Vital_Msg_extr_from_CAN+0x3c4>)
 8004a46:	f01d fdad 	bl	80225a4 <iprintf>
				return;
 8004a4a:	f000 bc4d 	b.w	80052e8 <Vital_Msg_extr_from_CAN+0xbe4>
			}
		}
		else
		{
			printf("CAN VITAL MSG CRC fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8004a4e:	78bb      	ldrb	r3, [r7, #2]
 8004a50:	4a0b      	ldr	r2, [pc, #44]	; (8004a80 <Vital_Msg_extr_from_CAN+0x37c>)
 8004a52:	3366      	adds	r3, #102	; 0x66
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	4413      	add	r3, r2
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	4818      	ldr	r0, [pc, #96]	; (8004ac0 <Vital_Msg_extr_from_CAN+0x3bc>)
 8004a5e:	f01d fda1 	bl	80225a4 <iprintf>
			printf("R-CRC:0x%08lX\n", Recv_CRC);
 8004a62:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8004a66:	4817      	ldr	r0, [pc, #92]	; (8004ac4 <Vital_Msg_extr_from_CAN+0x3c0>)
 8004a68:	f01d fd9c 	bl	80225a4 <iprintf>
			printf("C-CRC:0x%08lX\n", Calc_CRC);
 8004a6c:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8004a70:	4815      	ldr	r0, [pc, #84]	; (8004ac8 <Vital_Msg_extr_from_CAN+0x3c4>)
 8004a72:	f01d fd97 	bl	80225a4 <iprintf>
			return;
 8004a76:	f000 bc37 	b.w	80052e8 <Vital_Msg_extr_from_CAN+0xbe4>
 8004a7a:	bf00      	nop
 8004a7c:	20001988 	.word	0x20001988
 8004a80:	20000304 	.word	0x20000304
 8004a84:	08024514 	.word	0x08024514
 8004a88:	20001968 	.word	0x20001968
 8004a8c:	20009c84 	.word	0x20009c84
 8004a90:	80008001 	.word	0x80008001
 8004a94:	0802426c 	.word	0x0802426c
 8004a98:	20001770 	.word	0x20001770
 8004a9c:	0802428c 	.word	0x0802428c
 8004aa0:	080242b4 	.word	0x080242b4
 8004aa4:	080242dc 	.word	0x080242dc
 8004aa8:	08024558 	.word	0x08024558
 8004aac:	08024310 	.word	0x08024310
 8004ab0:	0802457c 	.word	0x0802457c
 8004ab4:	200011d0 	.word	0x200011d0
 8004ab8:	08024350 	.word	0x08024350
 8004abc:	20001680 	.word	0x20001680
 8004ac0:	08024598 	.word	0x08024598
 8004ac4:	08023fac 	.word	0x08023fac
 8004ac8:	08023fbc 	.word	0x08023fbc
		}
	}
	ROLLOVER_VITAL_CAN:
 8004acc:	bf00      	nop
	//printf("Actual   RX Vital Init Value:0x%06lX\n",Rx_Ei_self_sharing_st.Vital_CRC_Init_Value[Source_Index]);
	BITSTUFFINC(8); // Incrementing to escape SOM
 8004ace:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004ad2:	3308      	adds	r3, #8
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	da00      	bge.n	8004ada <Vital_Msg_extr_from_CAN+0x3d6>
 8004ad8:	3307      	adds	r3, #7
 8004ada:	10db      	asrs	r3, r3, #3
 8004adc:	b29a      	uxth	r2, r3
 8004ade:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004ae2:	4413      	add	r3, r2
 8004ae4:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004ae8:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004aec:	3308      	adds	r3, #8
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	b21b      	sxth	r3, r3
 8004af2:	425a      	negs	r2, r3
 8004af4:	f003 0307 	and.w	r3, r3, #7
 8004af8:	f002 0207 	and.w	r2, r2, #7
 8004afc:	bf58      	it	pl
 8004afe:	4253      	negpl	r3, r2
 8004b00:	b21b      	sxth	r3, r3
 8004b02:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Vital_st.Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8004b06:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	441a      	add	r2, r3
 8004b0e:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004b12:	2110      	movs	r1, #16
 8004b14:	4618      	mov	r0, r3
 8004b16:	f7fb fd7d 	bl	8000614 <ExtractBits>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	printf("DA:%u ",CAN_Hitachi_Vital_st.Des_Addr);
 8004b22:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004b26:	4619      	mov	r1, r3
 8004b28:	48c6      	ldr	r0, [pc, #792]	; (8004e44 <Vital_Msg_extr_from_CAN+0x740>)
 8004b2a:	f01d fd3b 	bl	80225a4 <iprintf>
	BITSTUFFINC(16);
 8004b2e:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004b32:	3310      	adds	r3, #16
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	da00      	bge.n	8004b3a <Vital_Msg_extr_from_CAN+0x436>
 8004b38:	3307      	adds	r3, #7
 8004b3a:	10db      	asrs	r3, r3, #3
 8004b3c:	b29a      	uxth	r2, r3
 8004b3e:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004b42:	4413      	add	r3, r2
 8004b44:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004b48:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004b4c:	3310      	adds	r3, #16
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	b21b      	sxth	r3, r3
 8004b52:	425a      	negs	r2, r3
 8004b54:	f003 0307 	and.w	r3, r3, #7
 8004b58:	f002 0207 	and.w	r2, r2, #7
 8004b5c:	bf58      	it	pl
 8004b5e:	4253      	negpl	r3, r2
 8004b60:	b21b      	sxth	r3, r3
 8004b62:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Vital_st.Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8004b66:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	441a      	add	r2, r3
 8004b6e:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004b72:	2110      	movs	r1, #16
 8004b74:	4618      	mov	r0, r3
 8004b76:	f7fb fd4d 	bl	8000614 <ExtractBits>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	printf("SA:%u ",CAN_Hitachi_Vital_st.Src_Addr);
 8004b82:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004b86:	4619      	mov	r1, r3
 8004b88:	48af      	ldr	r0, [pc, #700]	; (8004e48 <Vital_Msg_extr_from_CAN+0x744>)
 8004b8a:	f01d fd0b 	bl	80225a4 <iprintf>
	BITSTUFFINC(16);
 8004b8e:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004b92:	3310      	adds	r3, #16
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	da00      	bge.n	8004b9a <Vital_Msg_extr_from_CAN+0x496>
 8004b98:	3307      	adds	r3, #7
 8004b9a:	10db      	asrs	r3, r3, #3
 8004b9c:	b29a      	uxth	r2, r3
 8004b9e:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004ba2:	4413      	add	r3, r2
 8004ba4:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004ba8:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004bac:	3310      	adds	r3, #16
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	b21b      	sxth	r3, r3
 8004bb2:	425a      	negs	r2, r3
 8004bb4:	f003 0307 	and.w	r3, r3, #7
 8004bb8:	f002 0207 	and.w	r2, r2, #7
 8004bbc:	bf58      	it	pl
 8004bbe:	4253      	negpl	r3, r2
 8004bc0:	b21b      	sxth	r3, r3
 8004bc2:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Parameters_t.Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004bc6:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	441a      	add	r2, r3
 8004bce:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004bd2:	2108      	movs	r1, #8
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f7fb fd1d 	bl	8000614 <ExtractBits>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	//printf("Tx_seq             :%u\n", CAN_Hitachi_Parameters_t.Tx_Seq);
	BITSTUFFINC(8);
 8004be2:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004be6:	3308      	adds	r3, #8
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	da00      	bge.n	8004bee <Vital_Msg_extr_from_CAN+0x4ea>
 8004bec:	3307      	adds	r3, #7
 8004bee:	10db      	asrs	r3, r3, #3
 8004bf0:	b29a      	uxth	r2, r3
 8004bf2:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004bf6:	4413      	add	r3, r2
 8004bf8:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004bfc:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004c00:	3308      	adds	r3, #8
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	b21b      	sxth	r3, r3
 8004c06:	425a      	negs	r2, r3
 8004c08:	f003 0307 	and.w	r3, r3, #7
 8004c0c:	f002 0207 	and.w	r2, r2, #7
 8004c10:	bf58      	it	pl
 8004c12:	4253      	negpl	r3, r2
 8004c14:	b21b      	sxth	r3, r3
 8004c16:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Parameters_t.Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004c1a:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	441a      	add	r2, r3
 8004c22:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004c26:	2108      	movs	r1, #8
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f7fb fcf3 	bl	8000614 <ExtractBits>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	//printf("Rx_seq             :%u\n", CAN_Hitachi_Parameters_t.Rx_Seq);
	BITSTUFFINC(8);
 8004c36:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004c3a:	3308      	adds	r3, #8
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	da00      	bge.n	8004c42 <Vital_Msg_extr_from_CAN+0x53e>
 8004c40:	3307      	adds	r3, #7
 8004c42:	10db      	asrs	r3, r3, #3
 8004c44:	b29a      	uxth	r2, r3
 8004c46:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004c4a:	4413      	add	r3, r2
 8004c4c:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004c50:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004c54:	3308      	adds	r3, #8
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	b21b      	sxth	r3, r3
 8004c5a:	425a      	negs	r2, r3
 8004c5c:	f003 0307 	and.w	r3, r3, #7
 8004c60:	f002 0207 	and.w	r2, r2, #7
 8004c64:	bf58      	it	pl
 8004c66:	4253      	negpl	r3, r2
 8004c68:	b21b      	sxth	r3, r3
 8004c6a:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Vital_st.Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004c6e:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	441a      	add	r2, r3
 8004c76:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004c7a:	2108      	movs	r1, #8
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f7fb fcc9 	bl	8000614 <ExtractBits>
 8004c82:	4603      	mov	r3, r0
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	//printf("Msg_Type           :%u\n",Hitachi_Vital_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 8004c8a:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004c8e:	3308      	adds	r3, #8
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	da00      	bge.n	8004c96 <Vital_Msg_extr_from_CAN+0x592>
 8004c94:	3307      	adds	r3, #7
 8004c96:	10db      	asrs	r3, r3, #3
 8004c98:	b29a      	uxth	r2, r3
 8004c9a:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004c9e:	4413      	add	r3, r2
 8004ca0:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004ca4:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004ca8:	3308      	adds	r3, #8
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	b21b      	sxth	r3, r3
 8004cae:	425a      	negs	r2, r3
 8004cb0:	f003 0307 	and.w	r3, r3, #7
 8004cb4:	f002 0207 	and.w	r2, r2, #7
 8004cb8:	bf58      	it	pl
 8004cba:	4253      	negpl	r3, r2
 8004cbc:	b21b      	sxth	r3, r3
 8004cbe:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Parameters_t.Msg_Status_Flag= ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8004cc2:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	441a      	add	r2, r3
 8004cca:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004cce:	2110      	movs	r1, #16
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f7fb fc9f 	bl	8000614 <ExtractBits>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	853b      	strh	r3, [r7, #40]	; 0x28
	//printf("Msg_sts_flag       :0x%04X\n", CAN_Hitachi_Parameters_t.Msg_Status_Flag);
	BITSTUFFINC(16);
 8004cdc:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004ce0:	3310      	adds	r3, #16
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	da00      	bge.n	8004ce8 <Vital_Msg_extr_from_CAN+0x5e4>
 8004ce6:	3307      	adds	r3, #7
 8004ce8:	10db      	asrs	r3, r3, #3
 8004cea:	b29a      	uxth	r2, r3
 8004cec:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004cf0:	4413      	add	r3, r2
 8004cf2:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004cf6:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004cfa:	3310      	adds	r3, #16
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	b21b      	sxth	r3, r3
 8004d00:	425a      	negs	r2, r3
 8004d02:	f003 0307 	and.w	r3, r3, #7
 8004d06:	f002 0207 	and.w	r2, r2, #7
 8004d0a:	bf58      	it	pl
 8004d0c:	4253      	negpl	r3, r2
 8004d0e:	b21b      	sxth	r3, r3
 8004d10:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	//Debug_Status_Flag(CAN_Hitachi_Parameters_t.Msg_Status_Flag,CAN_Hitachi_Vital_st.Msg_Type);

	if ( ( SET == (CHECKFLAG(TIME_STAMP,CAN_Hitachi_Parameters_t.Msg_Status_Flag))) ) // Time-stamp Extraction
 8004d14:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004d16:	f003 0320 	and.w	r3, r3, #32
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	f000 80fe 	beq.w	8004f1c <Vital_Msg_extr_from_CAN+0x818>
	{
		CAN_HITACHI_time_Stamp_st.YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004d20:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	441a      	add	r2, r3
 8004d28:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004d2c:	2108      	movs	r1, #8
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f7fb fc70 	bl	8000614 <ExtractBits>
 8004d34:	4603      	mov	r3, r0
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		//printf("YEAR               :0x%02X\n", CAN_HITACHI_time_Stamp_st.YY);
		BITSTUFFINC(8);
 8004d3c:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004d40:	3308      	adds	r3, #8
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	da00      	bge.n	8004d48 <Vital_Msg_extr_from_CAN+0x644>
 8004d46:	3307      	adds	r3, #7
 8004d48:	10db      	asrs	r3, r3, #3
 8004d4a:	b29a      	uxth	r2, r3
 8004d4c:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004d50:	4413      	add	r3, r2
 8004d52:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004d56:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004d5a:	3308      	adds	r3, #8
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	b21b      	sxth	r3, r3
 8004d60:	425a      	negs	r2, r3
 8004d62:	f003 0307 	and.w	r3, r3, #7
 8004d66:	f002 0207 	and.w	r2, r2, #7
 8004d6a:	bf58      	it	pl
 8004d6c:	4253      	negpl	r3, r2
 8004d6e:	b21b      	sxth	r3, r3
 8004d70:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004d74:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	441a      	add	r2, r3
 8004d7c:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004d80:	2108      	movs	r1, #8
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7fb fc46 	bl	8000614 <ExtractBits>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	f887 3020 	strb.w	r3, [r7, #32]
		//printf("Month              :0x%02X\n", CAN_HITACHI_time_Stamp_st.MM);
		BITSTUFFINC(8);
 8004d90:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004d94:	3308      	adds	r3, #8
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	da00      	bge.n	8004d9c <Vital_Msg_extr_from_CAN+0x698>
 8004d9a:	3307      	adds	r3, #7
 8004d9c:	10db      	asrs	r3, r3, #3
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004da4:	4413      	add	r3, r2
 8004da6:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004daa:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004dae:	3308      	adds	r3, #8
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	b21b      	sxth	r3, r3
 8004db4:	425a      	negs	r2, r3
 8004db6:	f003 0307 	and.w	r3, r3, #7
 8004dba:	f002 0207 	and.w	r2, r2, #7
 8004dbe:	bf58      	it	pl
 8004dc0:	4253      	negpl	r3, r2
 8004dc2:	b21b      	sxth	r3, r3
 8004dc4:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004dc8:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	441a      	add	r2, r3
 8004dd0:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004dd4:	2108      	movs	r1, #8
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7fb fc1c 	bl	8000614 <ExtractBits>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	77fb      	strb	r3, [r7, #31]
		//printf("Date               :0x%02X\n", CAN_HITACHI_time_Stamp_st.DD);
		BITSTUFFINC(8);
 8004de2:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004de6:	3308      	adds	r3, #8
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	da00      	bge.n	8004dee <Vital_Msg_extr_from_CAN+0x6ea>
 8004dec:	3307      	adds	r3, #7
 8004dee:	10db      	asrs	r3, r3, #3
 8004df0:	b29a      	uxth	r2, r3
 8004df2:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004df6:	4413      	add	r3, r2
 8004df8:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004dfc:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004e00:	3308      	adds	r3, #8
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	b21b      	sxth	r3, r3
 8004e06:	425a      	negs	r2, r3
 8004e08:	f003 0307 	and.w	r3, r3, #7
 8004e0c:	f002 0207 	and.w	r2, r2, #7
 8004e10:	bf58      	it	pl
 8004e12:	4253      	negpl	r3, r2
 8004e14:	b21b      	sxth	r3, r3
 8004e16:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004e1a:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	441a      	add	r2, r3
 8004e22:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004e26:	2108      	movs	r1, #8
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f7fb fbf3 	bl	8000614 <ExtractBits>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	773b      	strb	r3, [r7, #28]
		//printf("HOURS              :0x%02X\n", CAN_HITACHI_time_Stamp_st.hh);
		BITSTUFFINC(8);
 8004e34:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004e38:	3308      	adds	r3, #8
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	da06      	bge.n	8004e4c <Vital_Msg_extr_from_CAN+0x748>
 8004e3e:	3307      	adds	r3, #7
 8004e40:	e004      	b.n	8004e4c <Vital_Msg_extr_from_CAN+0x748>
 8004e42:	bf00      	nop
 8004e44:	0802409c 	.word	0x0802409c
 8004e48:	080240a4 	.word	0x080240a4
 8004e4c:	10db      	asrs	r3, r3, #3
 8004e4e:	b29a      	uxth	r2, r3
 8004e50:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004e54:	4413      	add	r3, r2
 8004e56:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004e5a:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004e5e:	3308      	adds	r3, #8
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	b21b      	sxth	r3, r3
 8004e64:	425a      	negs	r2, r3
 8004e66:	f003 0307 	and.w	r3, r3, #7
 8004e6a:	f002 0207 	and.w	r2, r2, #7
 8004e6e:	bf58      	it	pl
 8004e70:	4253      	negpl	r3, r2
 8004e72:	b21b      	sxth	r3, r3
 8004e74:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004e78:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	441a      	add	r2, r3
 8004e80:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004e84:	2108      	movs	r1, #8
 8004e86:	4618      	mov	r0, r3
 8004e88:	f7fb fbc4 	bl	8000614 <ExtractBits>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	777b      	strb	r3, [r7, #29]
		//printf("MINS               :0x%02X\n", CAN_HITACHI_time_Stamp_st.mm);
		BITSTUFFINC(8);
 8004e92:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004e96:	3308      	adds	r3, #8
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	da00      	bge.n	8004e9e <Vital_Msg_extr_from_CAN+0x79a>
 8004e9c:	3307      	adds	r3, #7
 8004e9e:	10db      	asrs	r3, r3, #3
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004ea6:	4413      	add	r3, r2
 8004ea8:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004eac:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004eb0:	3308      	adds	r3, #8
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	b21b      	sxth	r3, r3
 8004eb6:	425a      	negs	r2, r3
 8004eb8:	f003 0307 	and.w	r3, r3, #7
 8004ebc:	f002 0207 	and.w	r2, r2, #7
 8004ec0:	bf58      	it	pl
 8004ec2:	4253      	negpl	r3, r2
 8004ec4:	b21b      	sxth	r3, r3
 8004ec6:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004eca:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	441a      	add	r2, r3
 8004ed2:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004ed6:	2108      	movs	r1, #8
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f7fb fb9b 	bl	8000614 <ExtractBits>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	77bb      	strb	r3, [r7, #30]
		//printf("SEC                :0x%02X\n", CAN_HITACHI_time_Stamp_st.ss);
		BITSTUFFINC(8);
 8004ee4:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004ee8:	3308      	adds	r3, #8
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	da00      	bge.n	8004ef0 <Vital_Msg_extr_from_CAN+0x7ec>
 8004eee:	3307      	adds	r3, #7
 8004ef0:	10db      	asrs	r3, r3, #3
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004ef8:	4413      	add	r3, r2
 8004efa:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004efe:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004f02:	3308      	adds	r3, #8
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	b21b      	sxth	r3, r3
 8004f08:	425a      	negs	r2, r3
 8004f0a:	f003 0307 	and.w	r3, r3, #7
 8004f0e:	f002 0207 	and.w	r2, r2, #7
 8004f12:	bf58      	it	pl
 8004f14:	4253      	negpl	r3, r2
 8004f16:	b21b      	sxth	r3, r3
 8004f18:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		//		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
	}
	if ( ( SET == (CHECKFLAG(LINK_ESTABLISHED,CAN_Hitachi_Parameters_t.Msg_Status_Flag))) )
 8004f1c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004f1e:	f003 0308 	and.w	r3, r3, #8
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d002      	beq.n	8004f2c <Vital_Msg_extr_from_CAN+0x828>
	{
		LinkEstablishFlag = SET;
 8004f26:	2301      	movs	r3, #1
 8004f28:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	}


	CAN_Hitachi_Vital_st.No_Outputs = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004f2c:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	441a      	add	r2, r3
 8004f34:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004f38:	2108      	movs	r1, #8
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f7fb fb6a 	bl	8000614 <ExtractBits>
 8004f40:	4603      	mov	r3, r0
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	BITSTUFFINC(8);
 8004f48:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004f4c:	3308      	adds	r3, #8
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	da00      	bge.n	8004f54 <Vital_Msg_extr_from_CAN+0x850>
 8004f52:	3307      	adds	r3, #7
 8004f54:	10db      	asrs	r3, r3, #3
 8004f56:	b29a      	uxth	r2, r3
 8004f58:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004f5c:	4413      	add	r3, r2
 8004f5e:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004f62:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004f66:	3308      	adds	r3, #8
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	b21b      	sxth	r3, r3
 8004f6c:	425a      	negs	r2, r3
 8004f6e:	f003 0307 	and.w	r3, r3, #7
 8004f72:	f002 0207 	and.w	r2, r2, #7
 8004f76:	bf58      	it	pl
 8004f78:	4253      	negpl	r3, r2
 8004f7a:	b21b      	sxth	r3, r3
 8004f7c:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
	printf("OPS:%u ",CAN_Hitachi_Vital_st.No_Outputs);
 8004f80:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004f84:	4619      	mov	r1, r3
 8004f86:	484b      	ldr	r0, [pc, #300]	; (80050b4 <Vital_Msg_extr_from_CAN+0x9b0>)
 8004f88:	f01d fb0c 	bl	80225a4 <iprintf>

	CAN_Hitachi_Vital_st.Size_Num_val = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004f8c:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	441a      	add	r2, r3
 8004f94:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004f98:	2108      	movs	r1, #8
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f7fb fb3a 	bl	8000614 <ExtractBits>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	BITSTUFFINC(8);
 8004fa8:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004fac:	3308      	adds	r3, #8
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	da00      	bge.n	8004fb4 <Vital_Msg_extr_from_CAN+0x8b0>
 8004fb2:	3307      	adds	r3, #7
 8004fb4:	10db      	asrs	r3, r3, #3
 8004fb6:	b29a      	uxth	r2, r3
 8004fb8:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004fbc:	4413      	add	r3, r2
 8004fbe:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004fc2:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004fc6:	3308      	adds	r3, #8
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	b21b      	sxth	r3, r3
 8004fcc:	425a      	negs	r2, r3
 8004fce:	f003 0307 	and.w	r3, r3, #7
 8004fd2:	f002 0207 	and.w	r2, r2, #7
 8004fd6:	bf58      	it	pl
 8004fd8:	4253      	negpl	r3, r2
 8004fda:	b21b      	sxth	r3, r3
 8004fdc:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
	//printf("Sz_Num_Val_Data    :%u\n",CAN_Hitachi_Vital_st.Size_Num_val);

	noofIP = (CAN_Hitachi_Vital_st.No_Outputs% 8);
 8004fe0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004fe4:	f003 0307 	and.w	r3, r3, #7
 8004fe8:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
	if (noofIP != 0)
 8004fec:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d007      	beq.n	8005004 <Vital_Msg_extr_from_CAN+0x900>
	{
		noofIP = ((CAN_Hitachi_Vital_st.No_Outputs / 8)) + 1; //	including 0th buffer
 8004ff4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004ff8:	08db      	lsrs	r3, r3, #3
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
 8005002:	e004      	b.n	800500e <Vital_Msg_extr_from_CAN+0x90a>
	}
	else
	{
		noofIP = (CAN_Hitachi_Vital_st.No_Outputs / 8);
 8005004:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005008:	08db      	lsrs	r3, r3, #3
 800500a:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
	}
	for (Traverser = 0; Traverser < noofIP; ++Traverser)
 800500e:	2300      	movs	r3, #0
 8005010:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 8005014:	e040      	b.n	8005098 <Vital_Msg_extr_from_CAN+0x994>
	{
		CAN_Hitachi_Vital_st.Outputs[Traverser] = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005016:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	441a      	add	r2, r3
 800501e:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005022:	2108      	movs	r1, #8
 8005024:	4618      	mov	r0, r3
 8005026:	f7fb faf5 	bl	8000614 <ExtractBits>
 800502a:	4602      	mov	r2, r0
 800502c:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8005030:	b2d2      	uxtb	r2, r2
 8005032:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005036:	443b      	add	r3, r7
 8005038:	f803 2cc7 	strb.w	r2, [r3, #-199]
		printf("[%02u]:0x%02X ", Traverser,CAN_Hitachi_Vital_st.Outputs[Traverser]);
 800503c:	f8b7 10fe 	ldrh.w	r1, [r7, #254]	; 0xfe
 8005040:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8005044:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005048:	443b      	add	r3, r7
 800504a:	f813 3cc7 	ldrb.w	r3, [r3, #-199]
 800504e:	461a      	mov	r2, r3
 8005050:	4819      	ldr	r0, [pc, #100]	; (80050b8 <Vital_Msg_extr_from_CAN+0x9b4>)
 8005052:	f01d faa7 	bl	80225a4 <iprintf>
		BITSTUFFINC(8);
 8005056:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 800505a:	3308      	adds	r3, #8
 800505c:	2b00      	cmp	r3, #0
 800505e:	da00      	bge.n	8005062 <Vital_Msg_extr_from_CAN+0x95e>
 8005060:	3307      	adds	r3, #7
 8005062:	10db      	asrs	r3, r3, #3
 8005064:	b29a      	uxth	r2, r3
 8005066:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 800506a:	4413      	add	r3, r2
 800506c:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8005070:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005074:	3308      	adds	r3, #8
 8005076:	b29b      	uxth	r3, r3
 8005078:	b21b      	sxth	r3, r3
 800507a:	425a      	negs	r2, r3
 800507c:	f003 0307 	and.w	r3, r3, #7
 8005080:	f002 0207 	and.w	r2, r2, #7
 8005084:	bf58      	it	pl
 8005086:	4253      	negpl	r3, r2
 8005088:	b21b      	sxth	r3, r3
 800508a:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
	for (Traverser = 0; Traverser < noofIP; ++Traverser)
 800508e:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8005092:	3301      	adds	r3, #1
 8005094:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 8005098:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 800509c:	b29b      	uxth	r3, r3
 800509e:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	; 0xfe
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d3b7      	bcc.n	8005016 <Vital_Msg_extr_from_CAN+0x912>
	}
	printf("\n");
 80050a6:	200a      	movs	r0, #10
 80050a8:	f01d fa94 	bl	80225d4 <putchar>

	for (Traverser = 0; Traverser <CAN_Hitachi_Vital_st.Size_Num_val; ++Traverser)
 80050ac:	2300      	movs	r3, #0
 80050ae:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 80050b2:	e037      	b.n	8005124 <Vital_Msg_extr_from_CAN+0xa20>
 80050b4:	080245b4 	.word	0x080245b4
 80050b8:	080245bc 	.word	0x080245bc
	{
		CAN_Hitachi_Vital_st.Num_Outputs[Traverser] = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80050bc:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	441a      	add	r2, r3
 80050c4:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80050c8:	2108      	movs	r1, #8
 80050ca:	4618      	mov	r0, r3
 80050cc:	f7fb faa2 	bl	8000614 <ExtractBits>
 80050d0:	4602      	mov	r2, r0
 80050d2:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 80050d6:	b2d2      	uxtb	r2, r2
 80050d8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80050dc:	443b      	add	r3, r7
 80050de:	f803 2cb7 	strb.w	r2, [r3, #-183]
		//printf("Num op Values      :0x%02X\n", CAN_Hitachi_Vital_st.Num_Outputs[Traverser]);
		BITSTUFFINC(8);
 80050e2:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 80050e6:	3308      	adds	r3, #8
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	da00      	bge.n	80050ee <Vital_Msg_extr_from_CAN+0x9ea>
 80050ec:	3307      	adds	r3, #7
 80050ee:	10db      	asrs	r3, r3, #3
 80050f0:	b29a      	uxth	r2, r3
 80050f2:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80050f6:	4413      	add	r3, r2
 80050f8:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 80050fc:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005100:	3308      	adds	r3, #8
 8005102:	b29b      	uxth	r3, r3
 8005104:	b21b      	sxth	r3, r3
 8005106:	425a      	negs	r2, r3
 8005108:	f003 0307 	and.w	r3, r3, #7
 800510c:	f002 0207 	and.w	r2, r2, #7
 8005110:	bf58      	it	pl
 8005112:	4253      	negpl	r3, r2
 8005114:	b21b      	sxth	r3, r3
 8005116:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
	for (Traverser = 0; Traverser <CAN_Hitachi_Vital_st.Size_Num_val; ++Traverser)
 800511a:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 800511e:	3301      	adds	r3, #1
 8005120:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 8005124:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005128:	b29b      	uxth	r3, r3
 800512a:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	; 0xfe
 800512e:	429a      	cmp	r2, r3
 8005130:	d3c4      	bcc.n	80050bc <Vital_Msg_extr_from_CAN+0x9b8>
	}

	/* COPYING RELAYS INFO 2 Temporary Buffer */
	memset(&CAN_Relay_st.RelayIPS_Buff,0,sizeof(CAN_Relay_st.RelayIPS_Buff));
 8005132:	f107 0308 	add.w	r3, r7, #8
 8005136:	3301      	adds	r3, #1
 8005138:	2210      	movs	r2, #16
 800513a:	2100      	movs	r1, #0
 800513c:	4618      	mov	r0, r3
 800513e:	f01d f949 	bl	80223d4 <memset>
	memcpy(CAN_Relay_st.RelayIPS_Buff,CAN_Hitachi_Vital_st.Outputs,noofIP);
 8005142:	f897 20fd 	ldrb.w	r2, [r7, #253]	; 0xfd
 8005146:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800514a:	1d59      	adds	r1, r3, #5
 800514c:	f107 0308 	add.w	r3, r7, #8
 8005150:	3301      	adds	r3, #1
 8005152:	4618      	mov	r0, r3
 8005154:	f01d f916 	bl	8022384 <memcpy>
	CAN_Relay_st.RelayIPS_CRC = GetCRC16(0,CAN_Relay_st.RelayIPS_Buff,noofIP);
 8005158:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 800515c:	b21a      	sxth	r2, r3
 800515e:	f107 0308 	add.w	r3, r7, #8
 8005162:	3301      	adds	r3, #1
 8005164:	4619      	mov	r1, r3
 8005166:	2000      	movs	r0, #0
 8005168:	f00d fd80 	bl	8012c6c <GetCRC16>
 800516c:	4603      	mov	r3, r0
 800516e:	837b      	strh	r3, [r7, #26]
	CAN_Relay_st.No_ofIps = noofIP;
 8005170:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 8005174:	767b      	strb	r3, [r7, #25]
	CAN_Relay_st.Peer_Index = Source_Index;
 8005176:	78bb      	ldrb	r3, [r7, #2]
 8005178:	723b      	strb	r3, [r7, #8]


	/*	Checking whether the Link is Established or Not
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */
	if ( (EI_data.Hitachi_st.Interface_Type[Source_Index] == ETHERNET) && (LinkEstablishFlag == SET) && (CAN_Relay_st.RelayIPS_CRC != Main_Relays_st[Source_Index].RelayIPS_CRC) )
 800517a:	78bb      	ldrb	r3, [r7, #2]
 800517c:	4a5c      	ldr	r2, [pc, #368]	; (80052f0 <Vital_Msg_extr_from_CAN+0xbec>)
 800517e:	4413      	add	r3, r2
 8005180:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005184:	2b01      	cmp	r3, #1
 8005186:	d177      	bne.n	8005278 <Vital_Msg_extr_from_CAN+0xb74>
 8005188:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 800518c:	2b01      	cmp	r3, #1
 800518e:	d173      	bne.n	8005278 <Vital_Msg_extr_from_CAN+0xb74>
 8005190:	8b79      	ldrh	r1, [r7, #26]
 8005192:	78ba      	ldrb	r2, [r7, #2]
 8005194:	4857      	ldr	r0, [pc, #348]	; (80052f4 <Vital_Msg_extr_from_CAN+0xbf0>)
 8005196:	4613      	mov	r3, r2
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	4413      	add	r3, r2
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	4403      	add	r3, r0
 80051a0:	3312      	adds	r3, #18
 80051a2:	881b      	ldrh	r3, [r3, #0]
 80051a4:	4299      	cmp	r1, r3
 80051a6:	d067      	beq.n	8005278 <Vital_Msg_extr_from_CAN+0xb74>
	{
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 80051a8:	78ba      	ldrb	r2, [r7, #2]
 80051aa:	4613      	mov	r3, r2
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	4413      	add	r3, r2
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	4a50      	ldr	r2, [pc, #320]	; (80052f4 <Vital_Msg_extr_from_CAN+0xbf0>)
 80051b4:	4413      	add	r3, r2
 80051b6:	3301      	adds	r3, #1
 80051b8:	2210      	movs	r2, #16
 80051ba:	2100      	movs	r1, #0
 80051bc:	4618      	mov	r0, r3
 80051be:	f01d f909 	bl	80223d4 <memset>
		memcpy(&Main_Relays_st[Source_Index],&CAN_Relay_st,sizeof(RELAYS_t));
 80051c2:	78ba      	ldrb	r2, [r7, #2]
 80051c4:	4613      	mov	r3, r2
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	4413      	add	r3, r2
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	4a49      	ldr	r2, [pc, #292]	; (80052f4 <Vital_Msg_extr_from_CAN+0xbf0>)
 80051ce:	4413      	add	r3, r2
 80051d0:	f107 0108 	add.w	r1, r7, #8
 80051d4:	2214      	movs	r2, #20
 80051d6:	4618      	mov	r0, r3
 80051d8:	f01d f8d4 	bl	8022384 <memcpy>
		Last_Vital_Received_Clk[Source_Index] = Ticks;
 80051dc:	78bb      	ldrb	r3, [r7, #2]
 80051de:	4946      	ldr	r1, [pc, #280]	; (80052f8 <Vital_Msg_extr_from_CAN+0xbf4>)
 80051e0:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80051e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		if(Prev_Relay_CRC[Source_Index] != Main_Relays_st[Source_Index].RelayIPS_CRC)
 80051e8:	78bb      	ldrb	r3, [r7, #2]
 80051ea:	4a44      	ldr	r2, [pc, #272]	; (80052fc <Vital_Msg_extr_from_CAN+0xbf8>)
 80051ec:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80051f0:	78ba      	ldrb	r2, [r7, #2]
 80051f2:	4840      	ldr	r0, [pc, #256]	; (80052f4 <Vital_Msg_extr_from_CAN+0xbf0>)
 80051f4:	4613      	mov	r3, r2
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	4413      	add	r3, r2
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	4403      	add	r3, r0
 80051fe:	3312      	adds	r3, #18
 8005200:	881b      	ldrh	r3, [r3, #0]
 8005202:	4299      	cmp	r1, r3
 8005204:	d038      	beq.n	8005278 <Vital_Msg_extr_from_CAN+0xb74>
		{
			Prev_Relay_CRC[Source_Index] = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8005206:	78ba      	ldrb	r2, [r7, #2]
 8005208:	78b9      	ldrb	r1, [r7, #2]
 800520a:	483a      	ldr	r0, [pc, #232]	; (80052f4 <Vital_Msg_extr_from_CAN+0xbf0>)
 800520c:	4613      	mov	r3, r2
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	4413      	add	r3, r2
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	4403      	add	r3, r0
 8005216:	3312      	adds	r3, #18
 8005218:	881a      	ldrh	r2, [r3, #0]
 800521a:	4b38      	ldr	r3, [pc, #224]	; (80052fc <Vital_Msg_extr_from_CAN+0xbf8>)
 800521c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			memset(&Tx_Temp_Main_Relays_st,0,sizeof(Tx_Temp_Main_Relays_st));
 8005220:	2214      	movs	r2, #20
 8005222:	2100      	movs	r1, #0
 8005224:	4836      	ldr	r0, [pc, #216]	; (8005300 <Vital_Msg_extr_from_CAN+0xbfc>)
 8005226:	f01d f8d5 	bl	80223d4 <memset>
			memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Source_Index],sizeof(Tx_Temp_Main_Relays_st));
 800522a:	78ba      	ldrb	r2, [r7, #2]
 800522c:	4613      	mov	r3, r2
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	4413      	add	r3, r2
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	4a2f      	ldr	r2, [pc, #188]	; (80052f4 <Vital_Msg_extr_from_CAN+0xbf0>)
 8005236:	4413      	add	r3, r2
 8005238:	2214      	movs	r2, #20
 800523a:	4619      	mov	r1, r3
 800523c:	4830      	ldr	r0, [pc, #192]	; (8005300 <Vital_Msg_extr_from_CAN+0xbfc>)
 800523e:	f01d f8a1 	bl	8022384 <memcpy>
#ifdef EI_1
			TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
#endif
#ifdef EI_2
			TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
 8005242:	f44f 7002 	mov.w	r0, #520	; 0x208
 8005246:	f00a f973 	bl	800f530 <TransmitCanPkt>
#endif

			if(MisMatchFlag[Source_Index] == CLEAR)
 800524a:	78bb      	ldrb	r3, [r7, #2]
 800524c:	4a2d      	ldr	r2, [pc, #180]	; (8005304 <Vital_Msg_extr_from_CAN+0xc00>)
 800524e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d110      	bne.n	8005278 <Vital_Msg_extr_from_CAN+0xb74>
			{
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Source_Index * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Source_Index].RelayIPS_Buff,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8005256:	78bb      	ldrb	r3, [r7, #2]
 8005258:	011b      	lsls	r3, r3, #4
 800525a:	4a2b      	ldr	r2, [pc, #172]	; (8005308 <Vital_Msg_extr_from_CAN+0xc04>)
 800525c:	4413      	add	r3, r2
 800525e:	1c98      	adds	r0, r3, #2
 8005260:	78ba      	ldrb	r2, [r7, #2]
 8005262:	4613      	mov	r3, r2
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	4413      	add	r3, r2
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	4a22      	ldr	r2, [pc, #136]	; (80052f4 <Vital_Msg_extr_from_CAN+0xbf0>)
 800526c:	4413      	add	r3, r2
 800526e:	3301      	adds	r3, #1
 8005270:	2210      	movs	r2, #16
 8005272:	4619      	mov	r1, r3
 8005274:	f01d f886 	bl	8022384 <memcpy>





	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 8005278:	78ba      	ldrb	r2, [r7, #2]
 800527a:	4924      	ldr	r1, [pc, #144]	; (800530c <Vital_Msg_extr_from_CAN+0xc08>)
 800527c:	4613      	mov	r3, r2
 800527e:	005b      	lsls	r3, r3, #1
 8005280:	4413      	add	r3, r2
 8005282:	00db      	lsls	r3, r3, #3
 8005284:	440b      	add	r3, r1
 8005286:	78ba      	ldrb	r2, [r7, #2]
 8005288:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 800528a:	78ba      	ldrb	r2, [r7, #2]
 800528c:	491f      	ldr	r1, [pc, #124]	; (800530c <Vital_Msg_extr_from_CAN+0xc08>)
 800528e:	4613      	mov	r3, r2
 8005290:	005b      	lsls	r3, r3, #1
 8005292:	4413      	add	r3, r2
 8005294:	00db      	lsls	r3, r3, #3
 8005296:	440b      	add	r3, r1
 8005298:	3301      	adds	r3, #1
 800529a:	2201      	movs	r2, #1
 800529c:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 800529e:	2218      	movs	r2, #24
 80052a0:	2100      	movs	r1, #0
 80052a2:	481b      	ldr	r0, [pc, #108]	; (8005310 <Vital_Msg_extr_from_CAN+0xc0c>)
 80052a4:	f01d f896 	bl	80223d4 <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 80052a8:	78ba      	ldrb	r2, [r7, #2]
 80052aa:	4613      	mov	r3, r2
 80052ac:	005b      	lsls	r3, r3, #1
 80052ae:	4413      	add	r3, r2
 80052b0:	00db      	lsls	r3, r3, #3
 80052b2:	4a16      	ldr	r2, [pc, #88]	; (800530c <Vital_Msg_extr_from_CAN+0xc08>)
 80052b4:	4413      	add	r3, r2
 80052b6:	2218      	movs	r2, #24
 80052b8:	4619      	mov	r1, r3
 80052ba:	4815      	ldr	r0, [pc, #84]	; (8005310 <Vital_Msg_extr_from_CAN+0xc0c>)
 80052bc:	f01d f862 	bl	8022384 <memcpy>

#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
 80052c0:	f240 2002 	movw	r0, #514	; 0x202
 80052c4:	f00a f934 	bl	800f530 <TransmitCanPkt>
#endif
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 80052c8:	78ba      	ldrb	r2, [r7, #2]
 80052ca:	4910      	ldr	r1, [pc, #64]	; (800530c <Vital_Msg_extr_from_CAN+0xc08>)
 80052cc:	4613      	mov	r3, r2
 80052ce:	005b      	lsls	r3, r3, #1
 80052d0:	4413      	add	r3, r2
 80052d2:	00db      	lsls	r3, r3, #3
 80052d4:	440b      	add	r3, r1
 80052d6:	3301      	adds	r3, #1
 80052d8:	2200      	movs	r2, #0
 80052da:	701a      	strb	r2, [r3, #0]
	Self_Sharing_CAN_Clk[Source_Index] = Ticks;
 80052dc:	78bb      	ldrb	r3, [r7, #2]
 80052de:	490d      	ldr	r1, [pc, #52]	; (8005314 <Vital_Msg_extr_from_CAN+0xc10>)
 80052e0:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80052e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	UNUSED(CAN_HITACHI_time_Stamp_st);
}
 80052e8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	20000304 	.word	0x20000304
 80052f4:	20001e8c 	.word	0x20001e8c
 80052f8:	20000ee4 	.word	0x20000ee4
 80052fc:	20000f0c 	.word	0x20000f0c
 8005300:	2000201c 	.word	0x2000201c
 8005304:	20000ed0 	.word	0x20000ed0
 8005308:	200010f0 	.word	0x200010f0
 800530c:	20001680 	.word	0x20001680
 8005310:	20001860 	.word	0x20001860
 8005314:	20000e50 	.word	0x20000e50

08005318 <Status_Msg_Extr>:


void Status_Msg_Extr(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 8005318:	b590      	push	{r4, r7, lr}
 800531a:	b095      	sub	sp, #84	; 0x54
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	4608      	mov	r0, r1
 8005322:	4611      	mov	r1, r2
 8005324:	461a      	mov	r2, r3
 8005326:	4603      	mov	r3, r0
 8005328:	70fb      	strb	r3, [r7, #3]
 800532a:	460b      	mov	r3, r1
 800532c:	70bb      	strb	r3, [r7, #2]
 800532e:	4613      	mov	r3, r2
 8005330:	707b      	strb	r3, [r7, #1]
	uint8_t Temp_Buff[40] = {0,};
 8005332:	2300      	movs	r3, #0
 8005334:	60bb      	str	r3, [r7, #8]
 8005336:	f107 030c 	add.w	r3, r7, #12
 800533a:	2224      	movs	r2, #36	; 0x24
 800533c:	2100      	movs	r1, #0
 800533e:	4618      	mov	r0, r3
 8005340:	f01d f848 	bl	80223d4 <memset>
	uint8_t uc_index = 0;
 8005344:	2300      	movs	r3, #0
 8005346:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint32_t Calc_CRC = 0;
 800534a:	2300      	movs	r3, #0
 800534c:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t Recv_CRC = 0;
 800534e:	2300      	movs	r3, #0
 8005350:	64bb      	str	r3, [r7, #72]	; 0x48
	uint8_t LinkEstablishFlag = CLEAR;
 8005352:	2300      	movs	r3, #0
 8005354:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t Ticks = HAL_GetTick();
 8005358:	f010 f91a 	bl	8015590 <HAL_GetTick>
 800535c:	63f8      	str	r0, [r7, #60]	; 0x3c
	uint8_t Seq_Num_2_Detect_Roll_over = 0;
 800535e:	2300      	movs	r3, #0
 8005360:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

	BITSTUFFINIT(0, 0);
 8005364:	2300      	movs	r3, #0
 8005366:	873b      	strh	r3, [r7, #56]	; 0x38
 8005368:	2300      	movs	r3, #0
 800536a:	86fb      	strh	r3, [r7, #54]	; 0x36

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 800536c:	499a      	ldr	r1, [pc, #616]	; (80055d8 <Status_Msg_Extr+0x2c0>)
 800536e:	489b      	ldr	r0, [pc, #620]	; (80055dc <Status_Msg_Extr+0x2c4>)
 8005370:	f7fa ff66 	bl	8000240 <strcmp>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	f000 812c 	beq.w	80055d4 <Status_Msg_Extr+0x2bc>
	}


#if ENABLE_FAULT_INJECTION

	if( ( (CHECKFLAG(0,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 800537c:	4b98      	ldr	r3, [pc, #608]	; (80055e0 <Status_Msg_Extr+0x2c8>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0301 	and.w	r3, r3, #1
 8005384:	2b00      	cmp	r3, #0
 8005386:	d02c      	beq.n	80053e2 <Status_Msg_Extr+0xca>
 8005388:	4b95      	ldr	r3, [pc, #596]	; (80055e0 <Status_Msg_Extr+0x2c8>)
 800538a:	791b      	ldrb	r3, [r3, #4]
 800538c:	78ba      	ldrb	r2, [r7, #2]
 800538e:	429a      	cmp	r2, r3
 8005390:	d127      	bne.n	80053e2 <Status_Msg_Extr+0xca>
	{
		uint32_t Rand_Number = 0;
 8005392:	2300      	movs	r3, #0
 8005394:	633b      	str	r3, [r7, #48]	; 0x30
#ifdef STM_32
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 0xffff);
 8005396:	4893      	ldr	r0, [pc, #588]	; (80055e4 <Status_Msg_Extr+0x2cc>)
 8005398:	f014 fdac 	bl	8019ef4 <HAL_RNG_GetRandomNumber>
 800539c:	4602      	mov	r2, r0
 800539e:	4b92      	ldr	r3, [pc, #584]	; (80055e8 <Status_Msg_Extr+0x2d0>)
 80053a0:	fba3 1302 	umull	r1, r3, r3, r2
 80053a4:	0bd9      	lsrs	r1, r3, #15
 80053a6:	460b      	mov	r3, r1
 80053a8:	041b      	lsls	r3, r3, #16
 80053aa:	1a5b      	subs	r3, r3, r1
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	633b      	str	r3, [r7, #48]	; 0x30
#endif
		printf("Injected RX Vital CRC failure\n");
 80053b0:	488e      	ldr	r0, [pc, #568]	; (80055ec <Status_Msg_Extr+0x2d4>)
 80053b2:	f01d f993 	bl	80226dc <puts>
		printf("Actual RX Vital Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 80053b6:	78bb      	ldrb	r3, [r7, #2]
 80053b8:	4a8d      	ldr	r2, [pc, #564]	; (80055f0 <Status_Msg_Extr+0x2d8>)
 80053ba:	011b      	lsls	r3, r3, #4
 80053bc:	4413      	add	r3, r2
 80053be:	3308      	adds	r3, #8
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4619      	mov	r1, r3
 80053c4:	488b      	ldr	r0, [pc, #556]	; (80055f4 <Status_Msg_Extr+0x2dc>)
 80053c6:	f01d f8ed 	bl	80225a4 <iprintf>
		printf("Injected RX Vital Init Value:0x%06lX\n",Rand_Number);
 80053ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80053cc:	488a      	ldr	r0, [pc, #552]	; (80055f8 <Status_Msg_Extr+0x2e0>)
 80053ce:	f01d f8e9 	bl	80225a4 <iprintf>
		InsertBits(0, 24, &Temp_Buff[0],Rand_Number);
 80053d2:	f107 0208 	add.w	r2, r7, #8
 80053d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d8:	2118      	movs	r1, #24
 80053da:	2000      	movs	r0, #0
 80053dc:	f7fb f9a6 	bl	800072c <InsertBits>
	{
 80053e0:	e00b      	b.n	80053fa <Status_Msg_Extr+0xe2>
	}
	else
	{
		InsertBits(0, 24, &Temp_Buff[0], Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 80053e2:	78bb      	ldrb	r3, [r7, #2]
 80053e4:	4a82      	ldr	r2, [pc, #520]	; (80055f0 <Status_Msg_Extr+0x2d8>)
 80053e6:	011b      	lsls	r3, r3, #4
 80053e8:	4413      	add	r3, r2
 80053ea:	3308      	adds	r3, #8
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f107 0208 	add.w	r2, r7, #8
 80053f2:	2118      	movs	r1, #24
 80053f4:	2000      	movs	r0, #0
 80053f6:	f7fb f999 	bl	800072c <InsertBits>
	}
#else
	InsertBits(0, 24, &Temp_Buff[0], Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
#endif
	//memcpy(&Temp_Buff[3],Buff,(Length-5));
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 80053fa:	2300      	movs	r3, #0
 80053fc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005400:	e010      	b.n	8005424 <Status_Msg_Extr+0x10c>
	{
		Temp_Buff[uc_index + 3] = Buff[uc_index];
 8005402:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	441a      	add	r2, r3
 800540a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800540e:	3303      	adds	r3, #3
 8005410:	7812      	ldrb	r2, [r2, #0]
 8005412:	3350      	adds	r3, #80	; 0x50
 8005414:	443b      	add	r3, r7
 8005416:	f803 2c48 	strb.w	r2, [r3, #-72]
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 800541a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800541e:	3301      	adds	r3, #1
 8005420:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005424:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8005428:	78fb      	ldrb	r3, [r7, #3]
 800542a:	3b05      	subs	r3, #5
 800542c:	429a      	cmp	r2, r3
 800542e:	dbe8      	blt.n	8005402 <Status_Msg_Extr+0xea>
	}
	Calc_CRC = CalculateDirectReverseCrc(Temp_Buff, uc_index + 3);
 8005430:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005434:	b29b      	uxth	r3, r3
 8005436:	3303      	adds	r3, #3
 8005438:	b29a      	uxth	r2, r3
 800543a:	f107 0308 	add.w	r3, r7, #8
 800543e:	4611      	mov	r1, r2
 8005440:	4618      	mov	r0, r3
 8005442:	f00d fccd 	bl	8012de0 <CalculateDirectReverseCrc>
 8005446:	6438      	str	r0, [r7, #64]	; 0x40
	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 8005448:	78fb      	ldrb	r3, [r7, #3]
 800544a:	3b05      	subs	r3, #5
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	441a      	add	r2, r3
 8005450:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005452:	2120      	movs	r1, #32
 8005454:	4618      	mov	r0, r3
 8005456:	f7fb f8dd 	bl	8000614 <ExtractBits>
 800545a:	64b8      	str	r0, [r7, #72]	; 0x48
	if(Calc_CRC != Recv_CRC)
 800545c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800545e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005460:	429a      	cmp	r2, r3
 8005462:	f000 80df 	beq.w	8005624 <Status_Msg_Extr+0x30c>
	{
		Seq_Num_2_Detect_Roll_over = ExtractBits(0, 8, (unsigned char *)&Buff[5]);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	3305      	adds	r3, #5
 800546a:	461a      	mov	r2, r3
 800546c:	2108      	movs	r1, #8
 800546e:	2000      	movs	r0, #0
 8005470:	f7fb f8d0 	bl	8000614 <ExtractBits>
 8005474:	4603      	mov	r3, r0
 8005476:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		if( (Seq_Num_2_Detect_Roll_over ==0) || (Seq_Num_2_Detect_Roll_over == 1) )
 800547a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800547e:	2b00      	cmp	r3, #0
 8005480:	d004      	beq.n	800548c <Status_Msg_Extr+0x174>
 8005482:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005486:	2b01      	cmp	r3, #1
 8005488:	f040 8090 	bne.w	80055ac <Status_Msg_Extr+0x294>
		{
			printf("Tx seq Rollover Found for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 800548c:	78bb      	ldrb	r3, [r7, #2]
 800548e:	4a5b      	ldr	r2, [pc, #364]	; (80055fc <Status_Msg_Extr+0x2e4>)
 8005490:	3366      	adds	r3, #102	; 0x66
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	4413      	add	r3, r2
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	4619      	mov	r1, r3
 800549a:	4859      	ldr	r0, [pc, #356]	; (8005600 <Status_Msg_Extr+0x2e8>)
 800549c:	f01d f882 	bl	80225a4 <iprintf>
			memset(Temp_Buff,0,sizeof(Temp_Buff));
 80054a0:	f107 0308 	add.w	r3, r7, #8
 80054a4:	2228      	movs	r2, #40	; 0x28
 80054a6:	2100      	movs	r1, #0
 80054a8:	4618      	mov	r0, r3
 80054aa:	f01c ff93 	bl	80223d4 <memset>
			InsertBits(0, 24, &Temp_Buff[0], (Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value+1));
 80054ae:	78bb      	ldrb	r3, [r7, #2]
 80054b0:	4a4f      	ldr	r2, [pc, #316]	; (80055f0 <Status_Msg_Extr+0x2d8>)
 80054b2:	011b      	lsls	r3, r3, #4
 80054b4:	4413      	add	r3, r2
 80054b6:	3308      	adds	r3, #8
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	3301      	adds	r3, #1
 80054bc:	f107 0208 	add.w	r2, r7, #8
 80054c0:	2118      	movs	r1, #24
 80054c2:	2000      	movs	r0, #0
 80054c4:	f7fb f932 	bl	800072c <InsertBits>
			//memcpy(&Temp_Buff[3],Buff,(Length-5));
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 80054c8:	2300      	movs	r3, #0
 80054ca:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80054ce:	e010      	b.n	80054f2 <Status_Msg_Extr+0x1da>
			{
				Temp_Buff[uc_index + 3] = Buff[uc_index];
 80054d0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	441a      	add	r2, r3
 80054d8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80054dc:	3303      	adds	r3, #3
 80054de:	7812      	ldrb	r2, [r2, #0]
 80054e0:	3350      	adds	r3, #80	; 0x50
 80054e2:	443b      	add	r3, r7
 80054e4:	f803 2c48 	strb.w	r2, [r3, #-72]
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 80054e8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80054ec:	3301      	adds	r3, #1
 80054ee:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80054f2:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80054f6:	78fb      	ldrb	r3, [r7, #3]
 80054f8:	3b05      	subs	r3, #5
 80054fa:	429a      	cmp	r2, r3
 80054fc:	dbe8      	blt.n	80054d0 <Status_Msg_Extr+0x1b8>
			}
			Calc_CRC = CalculateDirectReverseCrc(Temp_Buff, uc_index + 3);
 80054fe:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005502:	b29b      	uxth	r3, r3
 8005504:	3303      	adds	r3, #3
 8005506:	b29a      	uxth	r2, r3
 8005508:	f107 0308 	add.w	r3, r7, #8
 800550c:	4611      	mov	r1, r2
 800550e:	4618      	mov	r0, r3
 8005510:	f00d fc66 	bl	8012de0 <CalculateDirectReverseCrc>
 8005514:	6438      	str	r0, [r7, #64]	; 0x40
			if(Calc_CRC == Recv_CRC)
 8005516:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005518:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800551a:	429a      	cmp	r2, r3
 800551c:	d132      	bne.n	8005584 <Status_Msg_Extr+0x26c>
			{
				printf("CRC OK AFTER ROLL OVER\n");
 800551e:	4839      	ldr	r0, [pc, #228]	; (8005604 <Status_Msg_Extr+0x2ec>)
 8005520:	f01d f8dc 	bl	80226dc <puts>
				printf("Prev Init Val:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8005524:	78bb      	ldrb	r3, [r7, #2]
 8005526:	4a32      	ldr	r2, [pc, #200]	; (80055f0 <Status_Msg_Extr+0x2d8>)
 8005528:	011b      	lsls	r3, r3, #4
 800552a:	4413      	add	r3, r2
 800552c:	3308      	adds	r3, #8
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4619      	mov	r1, r3
 8005532:	4835      	ldr	r0, [pc, #212]	; (8005608 <Status_Msg_Extr+0x2f0>)
 8005534:	f01d f836 	bl	80225a4 <iprintf>
				++Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 8005538:	78bb      	ldrb	r3, [r7, #2]
 800553a:	492d      	ldr	r1, [pc, #180]	; (80055f0 <Status_Msg_Extr+0x2d8>)
 800553c:	011a      	lsls	r2, r3, #4
 800553e:	440a      	add	r2, r1
 8005540:	3208      	adds	r2, #8
 8005542:	6812      	ldr	r2, [r2, #0]
 8005544:	3201      	adds	r2, #1
 8005546:	492a      	ldr	r1, [pc, #168]	; (80055f0 <Status_Msg_Extr+0x2d8>)
 8005548:	011b      	lsls	r3, r3, #4
 800554a:	440b      	add	r3, r1
 800554c:	3308      	adds	r3, #8
 800554e:	601a      	str	r2, [r3, #0]
				printf("After Init Val:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8005550:	78bb      	ldrb	r3, [r7, #2]
 8005552:	4a27      	ldr	r2, [pc, #156]	; (80055f0 <Status_Msg_Extr+0x2d8>)
 8005554:	011b      	lsls	r3, r3, #4
 8005556:	4413      	add	r3, r2
 8005558:	3308      	adds	r3, #8
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4619      	mov	r1, r3
 800555e:	482b      	ldr	r0, [pc, #172]	; (800560c <Status_Msg_Extr+0x2f4>)
 8005560:	f01d f820 	bl	80225a4 <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 8005564:	78bb      	ldrb	r3, [r7, #2]
 8005566:	78ba      	ldrb	r2, [r7, #2]
 8005568:	4921      	ldr	r1, [pc, #132]	; (80055f0 <Status_Msg_Extr+0x2d8>)
 800556a:	011b      	lsls	r3, r3, #4
 800556c:	440b      	add	r3, r1
 800556e:	3308      	adds	r3, #8
 8005570:	6819      	ldr	r1, [r3, #0]
 8005572:	4827      	ldr	r0, [pc, #156]	; (8005610 <Status_Msg_Extr+0x2f8>)
 8005574:	4613      	mov	r3, r2
 8005576:	005b      	lsls	r3, r3, #1
 8005578:	4413      	add	r3, r2
 800557a:	00db      	lsls	r3, r3, #3
 800557c:	4403      	add	r3, r0
 800557e:	3308      	adds	r3, #8
 8005580:	6019      	str	r1, [r3, #0]
			if(Calc_CRC == Recv_CRC)
 8005582:	e050      	b.n	8005626 <Status_Msg_Extr+0x30e>
			}
			else
			{
				printf("Status CRC fail Rollover:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8005584:	78bb      	ldrb	r3, [r7, #2]
 8005586:	4a1d      	ldr	r2, [pc, #116]	; (80055fc <Status_Msg_Extr+0x2e4>)
 8005588:	3366      	adds	r3, #102	; 0x66
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	4413      	add	r3, r2
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	4619      	mov	r1, r3
 8005592:	4820      	ldr	r0, [pc, #128]	; (8005614 <Status_Msg_Extr+0x2fc>)
 8005594:	f01d f806 	bl	80225a4 <iprintf>
				printf("R-CRC:0x%08lX\n",Recv_CRC);
 8005598:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800559a:	481f      	ldr	r0, [pc, #124]	; (8005618 <Status_Msg_Extr+0x300>)
 800559c:	f01d f802 	bl	80225a4 <iprintf>
				printf("C-CRC:0x%08lX\n",Calc_CRC);
 80055a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80055a2:	481e      	ldr	r0, [pc, #120]	; (800561c <Status_Msg_Extr+0x304>)
 80055a4:	f01c fffe 	bl	80225a4 <iprintf>
				return;
 80055a8:	f000 bc2c 	b.w	8005e04 <Status_Msg_Extr+0xaec>
			}
		}
		else
		{
			printf("Status  CRC fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80055ac:	78bb      	ldrb	r3, [r7, #2]
 80055ae:	4a13      	ldr	r2, [pc, #76]	; (80055fc <Status_Msg_Extr+0x2e4>)
 80055b0:	3366      	adds	r3, #102	; 0x66
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	4413      	add	r3, r2
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	4619      	mov	r1, r3
 80055ba:	4819      	ldr	r0, [pc, #100]	; (8005620 <Status_Msg_Extr+0x308>)
 80055bc:	f01c fff2 	bl	80225a4 <iprintf>
			printf("R-CRC:0x%08lX\n",Recv_CRC);
 80055c0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80055c2:	4815      	ldr	r0, [pc, #84]	; (8005618 <Status_Msg_Extr+0x300>)
 80055c4:	f01c ffee 	bl	80225a4 <iprintf>
			printf("C-CRC:0x%08lX\n",Calc_CRC);
 80055c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80055ca:	4814      	ldr	r0, [pc, #80]	; (800561c <Status_Msg_Extr+0x304>)
 80055cc:	f01c ffea 	bl	80225a4 <iprintf>
			return;
 80055d0:	f000 bc18 	b.w	8005e04 <Status_Msg_Extr+0xaec>
		goto ROLLOVER_STATUS;
 80055d4:	bf00      	nop
 80055d6:	e026      	b.n	8005626 <Status_Msg_Extr+0x30e>
 80055d8:	08023d68 	.word	0x08023d68
 80055dc:	20000305 	.word	0x20000305
 80055e0:	20001968 	.word	0x20001968
 80055e4:	20009c84 	.word	0x20009c84
 80055e8:	80008001 	.word	0x80008001
 80055ec:	080245cc 	.word	0x080245cc
 80055f0:	200011d0 	.word	0x200011d0
 80055f4:	080245ec 	.word	0x080245ec
 80055f8:	080242b4 	.word	0x080242b4
 80055fc:	20000304 	.word	0x20000304
 8005600:	08024610 	.word	0x08024610
 8005604:	080242f8 	.word	0x080242f8
 8005608:	08024634 	.word	0x08024634
 800560c:	0802464c 	.word	0x0802464c
 8005610:	20001680 	.word	0x20001680
 8005614:	08024664 	.word	0x08024664
 8005618:	08023fac 	.word	0x08023fac
 800561c:	08023fbc 	.word	0x08023fbc
 8005620:	08024684 	.word	0x08024684
	else
	{
		//printf("Received CRC       :0x%08lX\n",Recv_CRC);
	}

	ROLLOVER_STATUS:
 8005624:	bf00      	nop

	BITSTUFFINC(8);
 8005626:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800562a:	3308      	adds	r3, #8
 800562c:	2b00      	cmp	r3, #0
 800562e:	da00      	bge.n	8005632 <Status_Msg_Extr+0x31a>
 8005630:	3307      	adds	r3, #7
 8005632:	10db      	asrs	r3, r3, #3
 8005634:	b29a      	uxth	r2, r3
 8005636:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005638:	4413      	add	r3, r2
 800563a:	873b      	strh	r3, [r7, #56]	; 0x38
 800563c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800563e:	3308      	adds	r3, #8
 8005640:	b29b      	uxth	r3, r3
 8005642:	b21b      	sxth	r3, r3
 8005644:	425a      	negs	r2, r3
 8005646:	f003 0307 	and.w	r3, r3, #7
 800564a:	f002 0207 	and.w	r2, r2, #7
 800564e:	bf58      	it	pl
 8005650:	4253      	negpl	r3, r2
 8005652:	b21b      	sxth	r3, r3
 8005654:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_Status_st[Source_Index].Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8005656:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	441a      	add	r2, r3
 800565c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800565e:	2110      	movs	r1, #16
 8005660:	4618      	mov	r0, r3
 8005662:	f7fa ffd7 	bl	8000614 <ExtractBits>
 8005666:	4603      	mov	r3, r0
 8005668:	78ba      	ldrb	r2, [r7, #2]
 800566a:	b298      	uxth	r0, r3
 800566c:	49ab      	ldr	r1, [pc, #684]	; (800591c <Status_Msg_Extr+0x604>)
 800566e:	4613      	mov	r3, r2
 8005670:	005b      	lsls	r3, r3, #1
 8005672:	4413      	add	r3, r2
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	440b      	add	r3, r1
 8005678:	3306      	adds	r3, #6
 800567a:	4602      	mov	r2, r0
 800567c:	801a      	strh	r2, [r3, #0]
	//printf("Des_Addr           :%u\n", Hitachi_Status_st[Source_Index].Des_Addr);
	BITSTUFFINC(16);
 800567e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005682:	3310      	adds	r3, #16
 8005684:	2b00      	cmp	r3, #0
 8005686:	da00      	bge.n	800568a <Status_Msg_Extr+0x372>
 8005688:	3307      	adds	r3, #7
 800568a:	10db      	asrs	r3, r3, #3
 800568c:	b29a      	uxth	r2, r3
 800568e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005690:	4413      	add	r3, r2
 8005692:	873b      	strh	r3, [r7, #56]	; 0x38
 8005694:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005696:	3310      	adds	r3, #16
 8005698:	b29b      	uxth	r3, r3
 800569a:	b21b      	sxth	r3, r3
 800569c:	425a      	negs	r2, r3
 800569e:	f003 0307 	and.w	r3, r3, #7
 80056a2:	f002 0207 	and.w	r2, r2, #7
 80056a6:	bf58      	it	pl
 80056a8:	4253      	negpl	r3, r2
 80056aa:	b21b      	sxth	r3, r3
 80056ac:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_Status_st[Source_Index].Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80056ae:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	441a      	add	r2, r3
 80056b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80056b6:	2110      	movs	r1, #16
 80056b8:	4618      	mov	r0, r3
 80056ba:	f7fa ffab 	bl	8000614 <ExtractBits>
 80056be:	4603      	mov	r3, r0
 80056c0:	78ba      	ldrb	r2, [r7, #2]
 80056c2:	b298      	uxth	r0, r3
 80056c4:	4995      	ldr	r1, [pc, #596]	; (800591c <Status_Msg_Extr+0x604>)
 80056c6:	4613      	mov	r3, r2
 80056c8:	005b      	lsls	r3, r3, #1
 80056ca:	4413      	add	r3, r2
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	440b      	add	r3, r1
 80056d0:	3304      	adds	r3, #4
 80056d2:	4602      	mov	r2, r0
 80056d4:	801a      	strh	r2, [r3, #0]
	//printf("Src_Addr           :%u\n", Hitachi_Status_st[Source_Index].Src_Addr);
	BITSTUFFINC(16);
 80056d6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80056da:	3310      	adds	r3, #16
 80056dc:	2b00      	cmp	r3, #0
 80056de:	da00      	bge.n	80056e2 <Status_Msg_Extr+0x3ca>
 80056e0:	3307      	adds	r3, #7
 80056e2:	10db      	asrs	r3, r3, #3
 80056e4:	b29a      	uxth	r2, r3
 80056e6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80056e8:	4413      	add	r3, r2
 80056ea:	873b      	strh	r3, [r7, #56]	; 0x38
 80056ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80056ee:	3310      	adds	r3, #16
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	b21b      	sxth	r3, r3
 80056f4:	425a      	negs	r2, r3
 80056f6:	f003 0307 	and.w	r3, r3, #7
 80056fa:	f002 0207 	and.w	r2, r2, #7
 80056fe:	bf58      	it	pl
 8005700:	4253      	negpl	r3, r2
 8005702:	b21b      	sxth	r3, r3
 8005704:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_prms_st[Source_Index].Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005706:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	441a      	add	r2, r3
 800570c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800570e:	2108      	movs	r1, #8
 8005710:	4618      	mov	r0, r3
 8005712:	f7fa ff7f 	bl	8000614 <ExtractBits>
 8005716:	4602      	mov	r2, r0
 8005718:	78bb      	ldrb	r3, [r7, #2]
 800571a:	b2d1      	uxtb	r1, r2
 800571c:	4a80      	ldr	r2, [pc, #512]	; (8005920 <Status_Msg_Extr+0x608>)
 800571e:	011b      	lsls	r3, r3, #4
 8005720:	4413      	add	r3, r2
 8005722:	3302      	adds	r3, #2
 8005724:	460a      	mov	r2, r1
 8005726:	701a      	strb	r2, [r3, #0]
	//printf("Tx_seq             :%u\n", Hitachi_prms_st[Source_Index].Rx_Seq);
	BITSTUFFINC(8);
 8005728:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800572c:	3308      	adds	r3, #8
 800572e:	2b00      	cmp	r3, #0
 8005730:	da00      	bge.n	8005734 <Status_Msg_Extr+0x41c>
 8005732:	3307      	adds	r3, #7
 8005734:	10db      	asrs	r3, r3, #3
 8005736:	b29a      	uxth	r2, r3
 8005738:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800573a:	4413      	add	r3, r2
 800573c:	873b      	strh	r3, [r7, #56]	; 0x38
 800573e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005740:	3308      	adds	r3, #8
 8005742:	b29b      	uxth	r3, r3
 8005744:	b21b      	sxth	r3, r3
 8005746:	425a      	negs	r2, r3
 8005748:	f003 0307 	and.w	r3, r3, #7
 800574c:	f002 0207 	and.w	r2, r2, #7
 8005750:	bf58      	it	pl
 8005752:	4253      	negpl	r3, r2
 8005754:	b21b      	sxth	r3, r3
 8005756:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_prms_st[Source_Index].Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005758:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	441a      	add	r2, r3
 800575e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005760:	2108      	movs	r1, #8
 8005762:	4618      	mov	r0, r3
 8005764:	f7fa ff56 	bl	8000614 <ExtractBits>
 8005768:	4602      	mov	r2, r0
 800576a:	78bb      	ldrb	r3, [r7, #2]
 800576c:	b2d1      	uxtb	r1, r2
 800576e:	4a6c      	ldr	r2, [pc, #432]	; (8005920 <Status_Msg_Extr+0x608>)
 8005770:	011b      	lsls	r3, r3, #4
 8005772:	4413      	add	r3, r2
 8005774:	3301      	adds	r3, #1
 8005776:	460a      	mov	r2, r1
 8005778:	701a      	strb	r2, [r3, #0]
	//printf("Rx_Seq             :%u\n", Hitachi_prms_st[Source_Index].Tx_Seq);
	if(Hitachi_prms_st[Source_Index].Tx_Seq == 0)
 800577a:	78bb      	ldrb	r3, [r7, #2]
 800577c:	4a68      	ldr	r2, [pc, #416]	; (8005920 <Status_Msg_Extr+0x608>)
 800577e:	011b      	lsls	r3, r3, #4
 8005780:	4413      	add	r3, r2
 8005782:	3301      	adds	r3, #1
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d138      	bne.n	80057fc <Status_Msg_Extr+0x4e4>
	{
		printf("\nRX_Seq Roll over Detected Incremented self Vital Init Value:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 800578a:	78bb      	ldrb	r3, [r7, #2]
 800578c:	4a65      	ldr	r2, [pc, #404]	; (8005924 <Status_Msg_Extr+0x60c>)
 800578e:	3366      	adds	r3, #102	; 0x66
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	4413      	add	r3, r2
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	4619      	mov	r1, r3
 8005798:	4863      	ldr	r0, [pc, #396]	; (8005928 <Status_Msg_Extr+0x610>)
 800579a:	f01c ff03 	bl	80225a4 <iprintf>
		printf("Prev:%06lx",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 800579e:	78bb      	ldrb	r3, [r7, #2]
 80057a0:	4a5f      	ldr	r2, [pc, #380]	; (8005920 <Status_Msg_Extr+0x608>)
 80057a2:	011b      	lsls	r3, r3, #4
 80057a4:	4413      	add	r3, r2
 80057a6:	330c      	adds	r3, #12
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4619      	mov	r1, r3
 80057ac:	485f      	ldr	r0, [pc, #380]	; (800592c <Status_Msg_Extr+0x614>)
 80057ae:	f01c fef9 	bl	80225a4 <iprintf>
		++Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 80057b2:	78bb      	ldrb	r3, [r7, #2]
 80057b4:	495a      	ldr	r1, [pc, #360]	; (8005920 <Status_Msg_Extr+0x608>)
 80057b6:	011a      	lsls	r2, r3, #4
 80057b8:	440a      	add	r2, r1
 80057ba:	320c      	adds	r2, #12
 80057bc:	6812      	ldr	r2, [r2, #0]
 80057be:	3201      	adds	r2, #1
 80057c0:	4957      	ldr	r1, [pc, #348]	; (8005920 <Status_Msg_Extr+0x608>)
 80057c2:	011b      	lsls	r3, r3, #4
 80057c4:	440b      	add	r3, r1
 80057c6:	330c      	adds	r3, #12
 80057c8:	601a      	str	r2, [r3, #0]
		printf("Curr:%06lx",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 80057ca:	78bb      	ldrb	r3, [r7, #2]
 80057cc:	4a54      	ldr	r2, [pc, #336]	; (8005920 <Status_Msg_Extr+0x608>)
 80057ce:	011b      	lsls	r3, r3, #4
 80057d0:	4413      	add	r3, r2
 80057d2:	330c      	adds	r3, #12
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4619      	mov	r1, r3
 80057d8:	4855      	ldr	r0, [pc, #340]	; (8005930 <Status_Msg_Extr+0x618>)
 80057da:	f01c fee3 	bl	80225a4 <iprintf>
		Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 80057de:	78bb      	ldrb	r3, [r7, #2]
 80057e0:	78ba      	ldrb	r2, [r7, #2]
 80057e2:	494f      	ldr	r1, [pc, #316]	; (8005920 <Status_Msg_Extr+0x608>)
 80057e4:	011b      	lsls	r3, r3, #4
 80057e6:	440b      	add	r3, r1
 80057e8:	330c      	adds	r3, #12
 80057ea:	6819      	ldr	r1, [r3, #0]
 80057ec:	4851      	ldr	r0, [pc, #324]	; (8005934 <Status_Msg_Extr+0x61c>)
 80057ee:	4613      	mov	r3, r2
 80057f0:	005b      	lsls	r3, r3, #1
 80057f2:	4413      	add	r3, r2
 80057f4:	00db      	lsls	r3, r3, #3
 80057f6:	4403      	add	r3, r0
 80057f8:	330c      	adds	r3, #12
 80057fa:	6019      	str	r1, [r3, #0]
	}
	BITSTUFFINC(8);
 80057fc:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005800:	3308      	adds	r3, #8
 8005802:	2b00      	cmp	r3, #0
 8005804:	da00      	bge.n	8005808 <Status_Msg_Extr+0x4f0>
 8005806:	3307      	adds	r3, #7
 8005808:	10db      	asrs	r3, r3, #3
 800580a:	b29a      	uxth	r2, r3
 800580c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800580e:	4413      	add	r3, r2
 8005810:	873b      	strh	r3, [r7, #56]	; 0x38
 8005812:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005814:	3308      	adds	r3, #8
 8005816:	b29b      	uxth	r3, r3
 8005818:	b21b      	sxth	r3, r3
 800581a:	425a      	negs	r2, r3
 800581c:	f003 0307 	and.w	r3, r3, #7
 8005820:	f002 0207 	and.w	r2, r2, #7
 8005824:	bf58      	it	pl
 8005826:	4253      	negpl	r3, r2
 8005828:	b21b      	sxth	r3, r3
 800582a:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_Status_st[Source_Index].Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800582c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	441a      	add	r2, r3
 8005832:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005834:	2108      	movs	r1, #8
 8005836:	4618      	mov	r0, r3
 8005838:	f7fa feec 	bl	8000614 <ExtractBits>
 800583c:	4603      	mov	r3, r0
 800583e:	78ba      	ldrb	r2, [r7, #2]
 8005840:	b2d8      	uxtb	r0, r3
 8005842:	4936      	ldr	r1, [pc, #216]	; (800591c <Status_Msg_Extr+0x604>)
 8005844:	4613      	mov	r3, r2
 8005846:	005b      	lsls	r3, r3, #1
 8005848:	4413      	add	r3, r2
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	440b      	add	r3, r1
 800584e:	3302      	adds	r3, #2
 8005850:	4602      	mov	r2, r0
 8005852:	701a      	strb	r2, [r3, #0]
	//printf("Msg_type           :%u\n", Hitachi_Status_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 8005854:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005858:	3308      	adds	r3, #8
 800585a:	2b00      	cmp	r3, #0
 800585c:	da00      	bge.n	8005860 <Status_Msg_Extr+0x548>
 800585e:	3307      	adds	r3, #7
 8005860:	10db      	asrs	r3, r3, #3
 8005862:	b29a      	uxth	r2, r3
 8005864:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005866:	4413      	add	r3, r2
 8005868:	873b      	strh	r3, [r7, #56]	; 0x38
 800586a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800586c:	3308      	adds	r3, #8
 800586e:	b29b      	uxth	r3, r3
 8005870:	b21b      	sxth	r3, r3
 8005872:	425a      	negs	r2, r3
 8005874:	f003 0307 	and.w	r3, r3, #7
 8005878:	f002 0207 	and.w	r2, r2, #7
 800587c:	bf58      	it	pl
 800587e:	4253      	negpl	r3, r2
 8005880:	b21b      	sxth	r3, r3
 8005882:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_prms_st[Source_Index].Msg_Status_Flag = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8005884:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	441a      	add	r2, r3
 800588a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800588c:	2110      	movs	r1, #16
 800588e:	4618      	mov	r0, r3
 8005890:	f7fa fec0 	bl	8000614 <ExtractBits>
 8005894:	4602      	mov	r2, r0
 8005896:	78bb      	ldrb	r3, [r7, #2]
 8005898:	b291      	uxth	r1, r2
 800589a:	4a21      	ldr	r2, [pc, #132]	; (8005920 <Status_Msg_Extr+0x608>)
 800589c:	011b      	lsls	r3, r3, #4
 800589e:	4413      	add	r3, r2
 80058a0:	3304      	adds	r3, #4
 80058a2:	460a      	mov	r2, r1
 80058a4:	801a      	strh	r2, [r3, #0]
	//printf("Msg_Flag           :0x%04X\n", Hitachi_prms_st[Source_Index].Msg_Status_Flag);
	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 80058a6:	4924      	ldr	r1, [pc, #144]	; (8005938 <Status_Msg_Extr+0x620>)
 80058a8:	4824      	ldr	r0, [pc, #144]	; (800593c <Status_Msg_Extr+0x624>)
 80058aa:	f7fa fcc9 	bl	8000240 <strcmp>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d10f      	bne.n	80058d4 <Status_Msg_Extr+0x5bc>
	{
		SET_BIT_USER(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag);
 80058b4:	78bb      	ldrb	r3, [r7, #2]
 80058b6:	4a1a      	ldr	r2, [pc, #104]	; (8005920 <Status_Msg_Extr+0x608>)
 80058b8:	011b      	lsls	r3, r3, #4
 80058ba:	4413      	add	r3, r2
 80058bc:	3304      	adds	r3, #4
 80058be:	881a      	ldrh	r2, [r3, #0]
 80058c0:	78bb      	ldrb	r3, [r7, #2]
 80058c2:	f042 0208 	orr.w	r2, r2, #8
 80058c6:	b291      	uxth	r1, r2
 80058c8:	4a15      	ldr	r2, [pc, #84]	; (8005920 <Status_Msg_Extr+0x608>)
 80058ca:	011b      	lsls	r3, r3, #4
 80058cc:	4413      	add	r3, r2
 80058ce:	3304      	adds	r3, #4
 80058d0:	460a      	mov	r2, r1
 80058d2:	801a      	strh	r2, [r3, #0]
	}

	BITSTUFFINC(16);
 80058d4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80058d8:	3310      	adds	r3, #16
 80058da:	2b00      	cmp	r3, #0
 80058dc:	da00      	bge.n	80058e0 <Status_Msg_Extr+0x5c8>
 80058de:	3307      	adds	r3, #7
 80058e0:	10db      	asrs	r3, r3, #3
 80058e2:	b29a      	uxth	r2, r3
 80058e4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80058e6:	4413      	add	r3, r2
 80058e8:	873b      	strh	r3, [r7, #56]	; 0x38
 80058ea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80058ec:	3310      	adds	r3, #16
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	b21b      	sxth	r3, r3
 80058f2:	425a      	negs	r2, r3
 80058f4:	f003 0307 	and.w	r3, r3, #7
 80058f8:	f002 0207 	and.w	r2, r2, #7
 80058fc:	bf58      	it	pl
 80058fe:	4253      	negpl	r3, r2
 8005900:	b21b      	sxth	r3, r3
 8005902:	86fb      	strh	r3, [r7, #54]	; 0x36

	//Debug_Status_Flag(Hitachi_prms_st[Source_Index].Msg_Status_Flag,Hitachi_Status_st[Source_Index].Msg_Type);

	if ( SET == (CHECKFLAG(TIME_STAMP,Hitachi_prms_st[Source_Index].Msg_Status_Flag)) ) // Time-stamp Extraction
 8005904:	78bb      	ldrb	r3, [r7, #2]
 8005906:	4a06      	ldr	r2, [pc, #24]	; (8005920 <Status_Msg_Extr+0x608>)
 8005908:	011b      	lsls	r3, r3, #4
 800590a:	4413      	add	r3, r2
 800590c:	3304      	adds	r3, #4
 800590e:	881b      	ldrh	r3, [r3, #0]
 8005910:	f003 0320 	and.w	r3, r3, #32
 8005914:	2b00      	cmp	r3, #0
 8005916:	f000 812f 	beq.w	8005b78 <Status_Msg_Extr+0x860>
 800591a:	e011      	b.n	8005940 <Status_Msg_Extr+0x628>
 800591c:	20001608 	.word	0x20001608
 8005920:	200011d0 	.word	0x200011d0
 8005924:	20000304 	.word	0x20000304
 8005928:	080243b0 	.word	0x080243b0
 800592c:	0802469c 	.word	0x0802469c
 8005930:	080246a8 	.word	0x080246a8
 8005934:	20001680 	.word	0x20001680
 8005938:	08023d68 	.word	0x08023d68
 800593c:	20000305 	.word	0x20000305
	{
		HITACHI_time_Stamp_st[Source_Index].YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005940:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	441a      	add	r2, r3
 8005946:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005948:	2108      	movs	r1, #8
 800594a:	4618      	mov	r0, r3
 800594c:	f7fa fe62 	bl	8000614 <ExtractBits>
 8005950:	4603      	mov	r3, r0
 8005952:	78ba      	ldrb	r2, [r7, #2]
 8005954:	b2d8      	uxtb	r0, r3
 8005956:	4984      	ldr	r1, [pc, #528]	; (8005b68 <Status_Msg_Extr+0x850>)
 8005958:	4613      	mov	r3, r2
 800595a:	005b      	lsls	r3, r3, #1
 800595c:	4413      	add	r3, r2
 800595e:	005b      	lsls	r3, r3, #1
 8005960:	440b      	add	r3, r1
 8005962:	3305      	adds	r3, #5
 8005964:	4602      	mov	r2, r0
 8005966:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8005968:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800596c:	3308      	adds	r3, #8
 800596e:	2b00      	cmp	r3, #0
 8005970:	da00      	bge.n	8005974 <Status_Msg_Extr+0x65c>
 8005972:	3307      	adds	r3, #7
 8005974:	10db      	asrs	r3, r3, #3
 8005976:	b29a      	uxth	r2, r3
 8005978:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800597a:	4413      	add	r3, r2
 800597c:	873b      	strh	r3, [r7, #56]	; 0x38
 800597e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005980:	3308      	adds	r3, #8
 8005982:	b29b      	uxth	r3, r3
 8005984:	b21b      	sxth	r3, r3
 8005986:	425a      	negs	r2, r3
 8005988:	f003 0307 	and.w	r3, r3, #7
 800598c:	f002 0207 	and.w	r2, r2, #7
 8005990:	bf58      	it	pl
 8005992:	4253      	negpl	r3, r2
 8005994:	b21b      	sxth	r3, r3
 8005996:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("YEAR               :%02X\n", HITACHI_time_Stamp_st[Source_Index].YY);

		HITACHI_time_Stamp_st[Source_Index].MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005998:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	441a      	add	r2, r3
 800599e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80059a0:	2108      	movs	r1, #8
 80059a2:	4618      	mov	r0, r3
 80059a4:	f7fa fe36 	bl	8000614 <ExtractBits>
 80059a8:	4603      	mov	r3, r0
 80059aa:	78ba      	ldrb	r2, [r7, #2]
 80059ac:	b2d8      	uxtb	r0, r3
 80059ae:	496e      	ldr	r1, [pc, #440]	; (8005b68 <Status_Msg_Extr+0x850>)
 80059b0:	4613      	mov	r3, r2
 80059b2:	005b      	lsls	r3, r3, #1
 80059b4:	4413      	add	r3, r2
 80059b6:	005b      	lsls	r3, r3, #1
 80059b8:	440b      	add	r3, r1
 80059ba:	3304      	adds	r3, #4
 80059bc:	4602      	mov	r2, r0
 80059be:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 80059c0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80059c4:	3308      	adds	r3, #8
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	da00      	bge.n	80059cc <Status_Msg_Extr+0x6b4>
 80059ca:	3307      	adds	r3, #7
 80059cc:	10db      	asrs	r3, r3, #3
 80059ce:	b29a      	uxth	r2, r3
 80059d0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80059d2:	4413      	add	r3, r2
 80059d4:	873b      	strh	r3, [r7, #56]	; 0x38
 80059d6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80059d8:	3308      	adds	r3, #8
 80059da:	b29b      	uxth	r3, r3
 80059dc:	b21b      	sxth	r3, r3
 80059de:	425a      	negs	r2, r3
 80059e0:	f003 0307 	and.w	r3, r3, #7
 80059e4:	f002 0207 	and.w	r2, r2, #7
 80059e8:	bf58      	it	pl
 80059ea:	4253      	negpl	r3, r2
 80059ec:	b21b      	sxth	r3, r3
 80059ee:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Month              :%02X\n", HITACHI_time_Stamp_st[Source_Index].MM);

		HITACHI_time_Stamp_st[Source_Index].DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80059f0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	441a      	add	r2, r3
 80059f6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80059f8:	2108      	movs	r1, #8
 80059fa:	4618      	mov	r0, r3
 80059fc:	f7fa fe0a 	bl	8000614 <ExtractBits>
 8005a00:	4603      	mov	r3, r0
 8005a02:	78ba      	ldrb	r2, [r7, #2]
 8005a04:	b2d8      	uxtb	r0, r3
 8005a06:	4958      	ldr	r1, [pc, #352]	; (8005b68 <Status_Msg_Extr+0x850>)
 8005a08:	4613      	mov	r3, r2
 8005a0a:	005b      	lsls	r3, r3, #1
 8005a0c:	4413      	add	r3, r2
 8005a0e:	005b      	lsls	r3, r3, #1
 8005a10:	440b      	add	r3, r1
 8005a12:	3303      	adds	r3, #3
 8005a14:	4602      	mov	r2, r0
 8005a16:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8005a18:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005a1c:	3308      	adds	r3, #8
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	da00      	bge.n	8005a24 <Status_Msg_Extr+0x70c>
 8005a22:	3307      	adds	r3, #7
 8005a24:	10db      	asrs	r3, r3, #3
 8005a26:	b29a      	uxth	r2, r3
 8005a28:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005a2a:	4413      	add	r3, r2
 8005a2c:	873b      	strh	r3, [r7, #56]	; 0x38
 8005a2e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005a30:	3308      	adds	r3, #8
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	b21b      	sxth	r3, r3
 8005a36:	425a      	negs	r2, r3
 8005a38:	f003 0307 	and.w	r3, r3, #7
 8005a3c:	f002 0207 	and.w	r2, r2, #7
 8005a40:	bf58      	it	pl
 8005a42:	4253      	negpl	r3, r2
 8005a44:	b21b      	sxth	r3, r3
 8005a46:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Date               :%02X\n", HITACHI_time_Stamp_st[Source_Index].DD);

		HITACHI_time_Stamp_st[Source_Index].hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005a48:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	441a      	add	r2, r3
 8005a4e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005a50:	2108      	movs	r1, #8
 8005a52:	4618      	mov	r0, r3
 8005a54:	f7fa fdde 	bl	8000614 <ExtractBits>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	78ba      	ldrb	r2, [r7, #2]
 8005a5c:	b2d8      	uxtb	r0, r3
 8005a5e:	4942      	ldr	r1, [pc, #264]	; (8005b68 <Status_Msg_Extr+0x850>)
 8005a60:	4613      	mov	r3, r2
 8005a62:	005b      	lsls	r3, r3, #1
 8005a64:	4413      	add	r3, r2
 8005a66:	005b      	lsls	r3, r3, #1
 8005a68:	440b      	add	r3, r1
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8005a6e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005a72:	3308      	adds	r3, #8
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	da00      	bge.n	8005a7a <Status_Msg_Extr+0x762>
 8005a78:	3307      	adds	r3, #7
 8005a7a:	10db      	asrs	r3, r3, #3
 8005a7c:	b29a      	uxth	r2, r3
 8005a7e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005a80:	4413      	add	r3, r2
 8005a82:	873b      	strh	r3, [r7, #56]	; 0x38
 8005a84:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005a86:	3308      	adds	r3, #8
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	b21b      	sxth	r3, r3
 8005a8c:	425a      	negs	r2, r3
 8005a8e:	f003 0307 	and.w	r3, r3, #7
 8005a92:	f002 0207 	and.w	r2, r2, #7
 8005a96:	bf58      	it	pl
 8005a98:	4253      	negpl	r3, r2
 8005a9a:	b21b      	sxth	r3, r3
 8005a9c:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Hour               :%02X\n", HITACHI_time_Stamp_st[Source_Index].hh);

		HITACHI_time_Stamp_st[Source_Index].mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005a9e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	441a      	add	r2, r3
 8005aa4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005aa6:	2108      	movs	r1, #8
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f7fa fdb3 	bl	8000614 <ExtractBits>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	78ba      	ldrb	r2, [r7, #2]
 8005ab2:	b2d8      	uxtb	r0, r3
 8005ab4:	492c      	ldr	r1, [pc, #176]	; (8005b68 <Status_Msg_Extr+0x850>)
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	005b      	lsls	r3, r3, #1
 8005aba:	4413      	add	r3, r2
 8005abc:	005b      	lsls	r3, r3, #1
 8005abe:	440b      	add	r3, r1
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8005ac6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005aca:	3308      	adds	r3, #8
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	da00      	bge.n	8005ad2 <Status_Msg_Extr+0x7ba>
 8005ad0:	3307      	adds	r3, #7
 8005ad2:	10db      	asrs	r3, r3, #3
 8005ad4:	b29a      	uxth	r2, r3
 8005ad6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005ad8:	4413      	add	r3, r2
 8005ada:	873b      	strh	r3, [r7, #56]	; 0x38
 8005adc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005ade:	3308      	adds	r3, #8
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	b21b      	sxth	r3, r3
 8005ae4:	425a      	negs	r2, r3
 8005ae6:	f003 0307 	and.w	r3, r3, #7
 8005aea:	f002 0207 	and.w	r2, r2, #7
 8005aee:	bf58      	it	pl
 8005af0:	4253      	negpl	r3, r2
 8005af2:	b21b      	sxth	r3, r3
 8005af4:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Minutes            :%02X\n", HITACHI_time_Stamp_st[Source_Index].mm);

		HITACHI_time_Stamp_st[Source_Index].ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005af6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	441a      	add	r2, r3
 8005afc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005afe:	2108      	movs	r1, #8
 8005b00:	4618      	mov	r0, r3
 8005b02:	f7fa fd87 	bl	8000614 <ExtractBits>
 8005b06:	4603      	mov	r3, r0
 8005b08:	78ba      	ldrb	r2, [r7, #2]
 8005b0a:	b2d8      	uxtb	r0, r3
 8005b0c:	4916      	ldr	r1, [pc, #88]	; (8005b68 <Status_Msg_Extr+0x850>)
 8005b0e:	4613      	mov	r3, r2
 8005b10:	005b      	lsls	r3, r3, #1
 8005b12:	4413      	add	r3, r2
 8005b14:	005b      	lsls	r3, r3, #1
 8005b16:	440b      	add	r3, r1
 8005b18:	3302      	adds	r3, #2
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8005b1e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005b22:	3308      	adds	r3, #8
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	da00      	bge.n	8005b2a <Status_Msg_Extr+0x812>
 8005b28:	3307      	adds	r3, #7
 8005b2a:	10db      	asrs	r3, r3, #3
 8005b2c:	b29a      	uxth	r2, r3
 8005b2e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005b30:	4413      	add	r3, r2
 8005b32:	873b      	strh	r3, [r7, #56]	; 0x38
 8005b34:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005b36:	3308      	adds	r3, #8
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	b21b      	sxth	r3, r3
 8005b3c:	425a      	negs	r2, r3
 8005b3e:	f003 0307 	and.w	r3, r3, #7
 8005b42:	f002 0207 	and.w	r2, r2, #7
 8005b46:	bf58      	it	pl
 8005b48:	4253      	negpl	r3, r2
 8005b4a:	b21b      	sxth	r3, r3
 8005b4c:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Seconds            :%02X\n", HITACHI_time_Stamp_st[Source_Index].ss);

		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
 8005b4e:	78bb      	ldrb	r3, [r7, #2]
 8005b50:	4618      	mov	r0, r3
 8005b52:	f002 ff55 	bl	8008a00 <IS_MLK_EIPC_TIME_MATCHING>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d009      	beq.n	8005b70 <Status_Msg_Extr+0x858>
 8005b5c:	78bb      	ldrb	r3, [r7, #2]
 8005b5e:	4a03      	ldr	r2, [pc, #12]	; (8005b6c <Status_Msg_Extr+0x854>)
 8005b60:	2100      	movs	r1, #0
 8005b62:	54d1      	strb	r1, [r2, r3]
 8005b64:	e008      	b.n	8005b78 <Status_Msg_Extr+0x860>
 8005b66:	bf00      	nop
 8005b68:	20001194 	.word	0x20001194
 8005b6c:	200010e4 	.word	0x200010e4
 8005b70:	78bb      	ldrb	r3, [r7, #2]
 8005b72:	4aa6      	ldr	r2, [pc, #664]	; (8005e0c <Status_Msg_Extr+0xaf4>)
 8005b74:	2101      	movs	r1, #1
 8005b76:	54d1      	strb	r1, [r2, r3]

	}
	if ( ( SET == (CHECKFLAG(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag))) )
 8005b78:	78bb      	ldrb	r3, [r7, #2]
 8005b7a:	4aa5      	ldr	r2, [pc, #660]	; (8005e10 <Status_Msg_Extr+0xaf8>)
 8005b7c:	011b      	lsls	r3, r3, #4
 8005b7e:	4413      	add	r3, r2
 8005b80:	3304      	adds	r3, #4
 8005b82:	881b      	ldrh	r3, [r3, #0]
 8005b84:	f003 0308 	and.w	r3, r3, #8
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d002      	beq.n	8005b92 <Status_Msg_Extr+0x87a>
	{
		LinkEstablishFlag = SET;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}


	/* Preparing and Sending Reply */
	Send_Status_Message(Source_Index,Des_Index);
 8005b92:	787a      	ldrb	r2, [r7, #1]
 8005b94:	78bb      	ldrb	r3, [r7, #2]
 8005b96:	4611      	mov	r1, r2
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f000 f959 	bl	8005e50 <Send_Status_Message>
	/* Preparing and Sending Reply */

	/* Updating the Clocks */
	Last_Recevied_Clock[Source_Index] = Ticks;
 8005b9e:	78bb      	ldrb	r3, [r7, #2]
 8005ba0:	499c      	ldr	r1, [pc, #624]	; (8005e14 <Status_Msg_Extr+0xafc>)
 8005ba2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ba4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Last_Recevied_Clock_ValidMsgs[Source_Index] = Ticks;
 8005ba8:	78bb      	ldrb	r3, [r7, #2]
 8005baa:	499b      	ldr	r1, [pc, #620]	; (8005e18 <Status_Msg_Extr+0xb00>)
 8005bac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//	Recv_Init_Msg_cnt[Source_Index] = 0;
	Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff); // To detected EiPC shifting Faster
 8005bb2:	78ba      	ldrb	r2, [r7, #2]
 8005bb4:	4999      	ldr	r1, [pc, #612]	; (8005e1c <Status_Msg_Extr+0xb04>)
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	005b      	lsls	r3, r3, #1
 8005bba:	4413      	add	r3, r2
 8005bbc:	00db      	lsls	r3, r3, #3
 8005bbe:	440b      	add	r3, r1
 8005bc0:	3310      	adds	r3, #16
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	78bc      	ldrb	r4, [r7, #2]
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f008 ff30 	bl	800ea2c <HAL_Elaps_Ticks>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	4993      	ldr	r1, [pc, #588]	; (8005e1c <Status_Msg_Extr+0xb04>)
 8005bd0:	4623      	mov	r3, r4
 8005bd2:	005b      	lsls	r3, r3, #1
 8005bd4:	4423      	add	r3, r4
 8005bd6:	00db      	lsls	r3, r3, #3
 8005bd8:	440b      	add	r3, r1
 8005bda:	3310      	adds	r3, #16
 8005bdc:	601a      	str	r2, [r3, #0]


	/*	Checking whether the Link is Established or Not
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */
	if( LinkEstablishFlag == SET )
 8005bde:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d166      	bne.n	8005cb4 <Status_Msg_Extr+0x99c>
	{
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8005be6:	78ba      	ldrb	r2, [r7, #2]
 8005be8:	4613      	mov	r3, r2
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	4413      	add	r3, r2
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	4a8b      	ldr	r2, [pc, #556]	; (8005e20 <Status_Msg_Extr+0xb08>)
 8005bf2:	4413      	add	r3, r2
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	2210      	movs	r2, #16
 8005bf8:	2100      	movs	r1, #0
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f01c fbea 	bl	80223d4 <memset>
		memcpy(&Main_Relays_st[Source_Index],&Relays_st[Source_Index],sizeof(Relays_st[Source_Index]));
 8005c00:	78ba      	ldrb	r2, [r7, #2]
 8005c02:	4613      	mov	r3, r2
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	4413      	add	r3, r2
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	4a85      	ldr	r2, [pc, #532]	; (8005e20 <Status_Msg_Extr+0xb08>)
 8005c0c:	1898      	adds	r0, r3, r2
 8005c0e:	78ba      	ldrb	r2, [r7, #2]
 8005c10:	4613      	mov	r3, r2
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	4413      	add	r3, r2
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	4a82      	ldr	r2, [pc, #520]	; (8005e24 <Status_Msg_Extr+0xb0c>)
 8005c1a:	4413      	add	r3, r2
 8005c1c:	2214      	movs	r2, #20
 8005c1e:	4619      	mov	r1, r3
 8005c20:	f01c fbb0 	bl	8022384 <memcpy>

		if(Prev_Relay_CRC[Source_Index] != Main_Relays_st[Source_Index].RelayIPS_CRC)
 8005c24:	78bb      	ldrb	r3, [r7, #2]
 8005c26:	4a80      	ldr	r2, [pc, #512]	; (8005e28 <Status_Msg_Extr+0xb10>)
 8005c28:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8005c2c:	78ba      	ldrb	r2, [r7, #2]
 8005c2e:	487c      	ldr	r0, [pc, #496]	; (8005e20 <Status_Msg_Extr+0xb08>)
 8005c30:	4613      	mov	r3, r2
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	4413      	add	r3, r2
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	4403      	add	r3, r0
 8005c3a:	3312      	adds	r3, #18
 8005c3c:	881b      	ldrh	r3, [r3, #0]
 8005c3e:	4299      	cmp	r1, r3
 8005c40:	d038      	beq.n	8005cb4 <Status_Msg_Extr+0x99c>
		{
			Prev_Relay_CRC[Source_Index] = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8005c42:	78ba      	ldrb	r2, [r7, #2]
 8005c44:	78b9      	ldrb	r1, [r7, #2]
 8005c46:	4876      	ldr	r0, [pc, #472]	; (8005e20 <Status_Msg_Extr+0xb08>)
 8005c48:	4613      	mov	r3, r2
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	4413      	add	r3, r2
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	4403      	add	r3, r0
 8005c52:	3312      	adds	r3, #18
 8005c54:	881a      	ldrh	r2, [r3, #0]
 8005c56:	4b74      	ldr	r3, [pc, #464]	; (8005e28 <Status_Msg_Extr+0xb10>)
 8005c58:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			memset(&Tx_Temp_Main_Relays_st,0,sizeof(Tx_Temp_Main_Relays_st));
 8005c5c:	2214      	movs	r2, #20
 8005c5e:	2100      	movs	r1, #0
 8005c60:	4872      	ldr	r0, [pc, #456]	; (8005e2c <Status_Msg_Extr+0xb14>)
 8005c62:	f01c fbb7 	bl	80223d4 <memset>
			memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Source_Index],sizeof(Tx_Temp_Main_Relays_st));
 8005c66:	78ba      	ldrb	r2, [r7, #2]
 8005c68:	4613      	mov	r3, r2
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	4413      	add	r3, r2
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	4a6b      	ldr	r2, [pc, #428]	; (8005e20 <Status_Msg_Extr+0xb08>)
 8005c72:	4413      	add	r3, r2
 8005c74:	2214      	movs	r2, #20
 8005c76:	4619      	mov	r1, r3
 8005c78:	486c      	ldr	r0, [pc, #432]	; (8005e2c <Status_Msg_Extr+0xb14>)
 8005c7a:	f01c fb83 	bl	8022384 <memcpy>
#ifdef EI_1
			TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
#endif
#ifdef EI_2
			TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
 8005c7e:	f44f 7002 	mov.w	r0, #520	; 0x208
 8005c82:	f009 fc55 	bl	800f530 <TransmitCanPkt>
#endif

			if(MisMatchFlag[Source_Index] == 0)
 8005c86:	78bb      	ldrb	r3, [r7, #2]
 8005c88:	4a69      	ldr	r2, [pc, #420]	; (8005e30 <Status_Msg_Extr+0xb18>)
 8005c8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d110      	bne.n	8005cb4 <Status_Msg_Extr+0x99c>
			{
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Source_Index * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Source_Index].RelayIPS_Buff,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8005c92:	78bb      	ldrb	r3, [r7, #2]
 8005c94:	011b      	lsls	r3, r3, #4
 8005c96:	4a67      	ldr	r2, [pc, #412]	; (8005e34 <Status_Msg_Extr+0xb1c>)
 8005c98:	4413      	add	r3, r2
 8005c9a:	1c98      	adds	r0, r3, #2
 8005c9c:	78ba      	ldrb	r2, [r7, #2]
 8005c9e:	4613      	mov	r3, r2
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	4413      	add	r3, r2
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	4a5e      	ldr	r2, [pc, #376]	; (8005e20 <Status_Msg_Extr+0xb08>)
 8005ca8:	4413      	add	r3, r2
 8005caa:	3301      	adds	r3, #1
 8005cac:	2210      	movs	r2, #16
 8005cae:	4619      	mov	r1, r3
 8005cb0:	f01c fb68 	bl	8022384 <memcpy>
		}
	}


	/* Sending Information to Other Card */
	Tx_Ei_self_sharing_st[Source_Index].VITAL_DATA_CRC = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8005cb4:	78b9      	ldrb	r1, [r7, #2]
 8005cb6:	78ba      	ldrb	r2, [r7, #2]
 8005cb8:	4859      	ldr	r0, [pc, #356]	; (8005e20 <Status_Msg_Extr+0xb08>)
 8005cba:	460b      	mov	r3, r1
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	440b      	add	r3, r1
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	4403      	add	r3, r0
 8005cc4:	3312      	adds	r3, #18
 8005cc6:	8818      	ldrh	r0, [r3, #0]
 8005cc8:	4954      	ldr	r1, [pc, #336]	; (8005e1c <Status_Msg_Extr+0xb04>)
 8005cca:	4613      	mov	r3, r2
 8005ccc:	005b      	lsls	r3, r3, #1
 8005cce:	4413      	add	r3, r2
 8005cd0:	00db      	lsls	r3, r3, #3
 8005cd2:	440b      	add	r3, r1
 8005cd4:	3306      	adds	r3, #6
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	801a      	strh	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_CRC = Recv_CRC;
 8005cda:	78ba      	ldrb	r2, [r7, #2]
 8005cdc:	494f      	ldr	r1, [pc, #316]	; (8005e1c <Status_Msg_Extr+0xb04>)
 8005cde:	4613      	mov	r3, r2
 8005ce0:	005b      	lsls	r3, r3, #1
 8005ce2:	4413      	add	r3, r2
 8005ce4:	00db      	lsls	r3, r3, #3
 8005ce6:	440b      	add	r3, r1
 8005ce8:	3314      	adds	r3, #20
 8005cea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cec:	601a      	str	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_Msg_Type = STATUSMSG;
 8005cee:	78ba      	ldrb	r2, [r7, #2]
 8005cf0:	494a      	ldr	r1, [pc, #296]	; (8005e1c <Status_Msg_Extr+0xb04>)
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	005b      	lsls	r3, r3, #1
 8005cf6:	4413      	add	r3, r2
 8005cf8:	00db      	lsls	r3, r3, #3
 8005cfa:	440b      	add	r3, r1
 8005cfc:	3305      	adds	r3, #5
 8005cfe:	2204      	movs	r2, #4
 8005d00:	701a      	strb	r2, [r3, #0]

	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 8005d02:	78ba      	ldrb	r2, [r7, #2]
 8005d04:	4945      	ldr	r1, [pc, #276]	; (8005e1c <Status_Msg_Extr+0xb04>)
 8005d06:	4613      	mov	r3, r2
 8005d08:	005b      	lsls	r3, r3, #1
 8005d0a:	4413      	add	r3, r2
 8005d0c:	00db      	lsls	r3, r3, #3
 8005d0e:	440b      	add	r3, r1
 8005d10:	78ba      	ldrb	r2, [r7, #2]
 8005d12:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 8005d14:	78ba      	ldrb	r2, [r7, #2]
 8005d16:	4941      	ldr	r1, [pc, #260]	; (8005e1c <Status_Msg_Extr+0xb04>)
 8005d18:	4613      	mov	r3, r2
 8005d1a:	005b      	lsls	r3, r3, #1
 8005d1c:	4413      	add	r3, r2
 8005d1e:	00db      	lsls	r3, r3, #3
 8005d20:	440b      	add	r3, r1
 8005d22:	3301      	adds	r3, #1
 8005d24:	2201      	movs	r2, #1
 8005d26:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].LinkEstablishFlag = LinkEstablishFlag;
 8005d28:	78ba      	ldrb	r2, [r7, #2]
 8005d2a:	493c      	ldr	r1, [pc, #240]	; (8005e1c <Status_Msg_Extr+0xb04>)
 8005d2c:	4613      	mov	r3, r2
 8005d2e:	005b      	lsls	r3, r3, #1
 8005d30:	4413      	add	r3, r2
 8005d32:	00db      	lsls	r3, r3, #3
 8005d34:	440b      	add	r3, r1
 8005d36:	3302      	adds	r3, #2
 8005d38:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8005d3c:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8005d3e:	2218      	movs	r2, #24
 8005d40:	2100      	movs	r1, #0
 8005d42:	483d      	ldr	r0, [pc, #244]	; (8005e38 <Status_Msg_Extr+0xb20>)
 8005d44:	f01c fb46 	bl	80223d4 <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 8005d48:	78ba      	ldrb	r2, [r7, #2]
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	005b      	lsls	r3, r3, #1
 8005d4e:	4413      	add	r3, r2
 8005d50:	00db      	lsls	r3, r3, #3
 8005d52:	4a32      	ldr	r2, [pc, #200]	; (8005e1c <Status_Msg_Extr+0xb04>)
 8005d54:	4413      	add	r3, r2
 8005d56:	2218      	movs	r2, #24
 8005d58:	4619      	mov	r1, r3
 8005d5a:	4837      	ldr	r0, [pc, #220]	; (8005e38 <Status_Msg_Extr+0xb20>)
 8005d5c:	f01c fb12 	bl	8022384 <memcpy>

#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
 8005d60:	f240 2002 	movw	r0, #514	; 0x202
 8005d64:	f009 fbe4 	bl	800f530 <TransmitCanPkt>
#endif
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 8005d68:	78ba      	ldrb	r2, [r7, #2]
 8005d6a:	492c      	ldr	r1, [pc, #176]	; (8005e1c <Status_Msg_Extr+0xb04>)
 8005d6c:	4613      	mov	r3, r2
 8005d6e:	005b      	lsls	r3, r3, #1
 8005d70:	4413      	add	r3, r2
 8005d72:	00db      	lsls	r3, r3, #3
 8005d74:	440b      	add	r3, r1
 8005d76:	3301      	adds	r3, #1
 8005d78:	2200      	movs	r2, #0
 8005d7a:	701a      	strb	r2, [r3, #0]
	Self_Sharing_CAN_Clk[Source_Index] = Ticks;
 8005d7c:	78bb      	ldrb	r3, [r7, #2]
 8005d7e:	492f      	ldr	r1, [pc, #188]	; (8005e3c <Status_Msg_Extr+0xb24>)
 8005d80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	/* Sending Information to Other Card */



	/* Checking the Link Status */
	if(LinkEstablishFlag == SET)
 8005d86:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d11d      	bne.n	8005dca <Status_Msg_Extr+0xab2>
	{
		Link_Establish_Clock[Source_Index] = Ticks;
 8005d8e:	78bb      	ldrb	r3, [r7, #2]
 8005d90:	492b      	ldr	r1, [pc, #172]	; (8005e40 <Status_Msg_Extr+0xb28>)
 8005d92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishClk = Ticks;
 8005d98:	78ba      	ldrb	r2, [r7, #2]
 8005d9a:	492a      	ldr	r1, [pc, #168]	; (8005e44 <Status_Msg_Extr+0xb2c>)
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	005b      	lsls	r3, r3, #1
 8005da0:	4413      	add	r3, r2
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	440b      	add	r3, r1
 8005da6:	3304      	adds	r3, #4
 8005da8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005daa:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = SET;
 8005dac:	78ba      	ldrb	r2, [r7, #2]
 8005dae:	4925      	ldr	r1, [pc, #148]	; (8005e44 <Status_Msg_Extr+0xb2c>)
 8005db0:	4613      	mov	r3, r2
 8005db2:	005b      	lsls	r3, r3, #1
 8005db4:	4413      	add	r3, r2
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	440b      	add	r3, r1
 8005dba:	3301      	adds	r3, #1
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	701a      	strb	r2, [r3, #0]
		Link_Flag[Source_Index] = SET;
 8005dc0:	78bb      	ldrb	r3, [r7, #2]
 8005dc2:	4a21      	ldr	r2, [pc, #132]	; (8005e48 <Status_Msg_Extr+0xb30>)
 8005dc4:	2101      	movs	r1, #1
 8005dc6:	54d1      	strb	r1, [r2, r3]
 8005dc8:	e017      	b.n	8005dfa <Status_Msg_Extr+0xae2>
	}
	else
	{
		Link_Flag[Source_Index] = CLEAR;
 8005dca:	78bb      	ldrb	r3, [r7, #2]
 8005dcc:	4a1e      	ldr	r2, [pc, #120]	; (8005e48 <Status_Msg_Extr+0xb30>)
 8005dce:	2100      	movs	r1, #0
 8005dd0:	54d1      	strb	r1, [r2, r3]
		Hitachi_clk_flags_st[Source_Index].Link_FailClk = Ticks;
 8005dd2:	78ba      	ldrb	r2, [r7, #2]
 8005dd4:	491b      	ldr	r1, [pc, #108]	; (8005e44 <Status_Msg_Extr+0xb2c>)
 8005dd6:	4613      	mov	r3, r2
 8005dd8:	005b      	lsls	r3, r3, #1
 8005dda:	4413      	add	r3, r2
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	440b      	add	r3, r1
 8005de0:	3308      	adds	r3, #8
 8005de2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005de4:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = CLEAR;
 8005de6:	78ba      	ldrb	r2, [r7, #2]
 8005de8:	4916      	ldr	r1, [pc, #88]	; (8005e44 <Status_Msg_Extr+0xb2c>)
 8005dea:	4613      	mov	r3, r2
 8005dec:	005b      	lsls	r3, r3, #1
 8005dee:	4413      	add	r3, r2
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	440b      	add	r3, r1
 8005df4:	3301      	adds	r3, #1
 8005df6:	2200      	movs	r2, #0
 8005df8:	701a      	strb	r2, [r3, #0]
	}
	/* Checking the Link Status */
	HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 8005dfa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005dfe:	4813      	ldr	r0, [pc, #76]	; (8005e4c <Status_Msg_Extr+0xb34>)
 8005e00:	f012 f8af 	bl	8017f62 <HAL_GPIO_TogglePin>

}
 8005e04:	3754      	adds	r7, #84	; 0x54
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd90      	pop	{r4, r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	200010e4 	.word	0x200010e4
 8005e10:	200011d0 	.word	0x200011d0
 8005e14:	20000fb0 	.word	0x20000fb0
 8005e18:	20000fd8 	.word	0x20000fd8
 8005e1c:	20001680 	.word	0x20001680
 8005e20:	20001e8c 	.word	0x20001e8c
 8005e24:	20001dc4 	.word	0x20001dc4
 8005e28:	20000f0c 	.word	0x20000f0c
 8005e2c:	2000201c 	.word	0x2000201c
 8005e30:	20000ed0 	.word	0x20000ed0
 8005e34:	200010f0 	.word	0x200010f0
 8005e38:	20001860 	.word	0x20001860
 8005e3c:	20000e50 	.word	0x20000e50
 8005e40:	20000f20 	.word	0x20000f20
 8005e44:	20001cd4 	.word	0x20001cd4
 8005e48:	20000f70 	.word	0x20000f70
 8005e4c:	40021c00 	.word	0x40021c00

08005e50 <Send_Status_Message>:

void Send_Status_Message(uint8_t Source_Index,uint8_t Des_Index)
{
 8005e50:	b590      	push	{r4, r7, lr}
 8005e52:	b0a5      	sub	sp, #148	; 0x94
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	4603      	mov	r3, r0
 8005e58:	460a      	mov	r2, r1
 8005e5a:	71fb      	strb	r3, [r7, #7]
 8005e5c:	4613      	mov	r3, r2
 8005e5e:	71bb      	strb	r3, [r7, #6]
	uint8_t Transmit_Buff[60] = {0,};
 8005e60:	2300      	movs	r3, #0
 8005e62:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e64:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005e68:	2238      	movs	r2, #56	; 0x38
 8005e6a:	2100      	movs	r1, #0
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f01c fab1 	bl	80223d4 <memset>
	uint8_t Temp_Buff[60] = {0,};
 8005e72:	2300      	movs	r3, #0
 8005e74:	60fb      	str	r3, [r7, #12]
 8005e76:	f107 0310 	add.w	r3, r7, #16
 8005e7a:	2238      	movs	r2, #56	; 0x38
 8005e7c:	2100      	movs	r1, #0
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f01c faa8 	bl	80223d4 <memset>
	uint8_t uc_index = 0;
 8005e84:	2300      	movs	r3, #0
 8005e86:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	BITSTUFFINIT(0,0);
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8005e90:	2300      	movs	r3, #0
 8005e92:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_SOM);
 8005e96:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005e9a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005e9e:	441a      	add	r2, r3
 8005ea0:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8005ea4:	23f4      	movs	r3, #244	; 0xf4
 8005ea6:	2108      	movs	r1, #8
 8005ea8:	f7fa fc40 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8005eac:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8005eb0:	3308      	adds	r3, #8
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	da00      	bge.n	8005eb8 <Send_Status_Message+0x68>
 8005eb6:	3307      	adds	r3, #7
 8005eb8:	10db      	asrs	r3, r3, #3
 8005eba:	b29a      	uxth	r2, r3
 8005ebc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005ec0:	4413      	add	r3, r2
 8005ec2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8005ec6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005eca:	3308      	adds	r3, #8
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	b21b      	sxth	r3, r3
 8005ed0:	425a      	negs	r2, r3
 8005ed2:	f003 0307 	and.w	r3, r3, #7
 8005ed6:	f002 0207 	and.w	r2, r2, #7
 8005eda:	bf58      	it	pl
 8005edc:	4253      	negpl	r3, r2
 8005ede:	b21b      	sxth	r3, r3
 8005ee0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8005ee4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005ee8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005eec:	441a      	add	r2, r3
 8005eee:	79fb      	ldrb	r3, [r7, #7]
 8005ef0:	49bc      	ldr	r1, [pc, #752]	; (80061e4 <Send_Status_Message+0x394>)
 8005ef2:	3366      	adds	r3, #102	; 0x66
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	440b      	add	r3, r1
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8005efe:	2110      	movs	r1, #16
 8005f00:	f7fa fc14 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8005f04:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8005f08:	3310      	adds	r3, #16
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	da00      	bge.n	8005f10 <Send_Status_Message+0xc0>
 8005f0e:	3307      	adds	r3, #7
 8005f10:	10db      	asrs	r3, r3, #3
 8005f12:	b29a      	uxth	r2, r3
 8005f14:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005f18:	4413      	add	r3, r2
 8005f1a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8005f1e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005f22:	3310      	adds	r3, #16
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	b21b      	sxth	r3, r3
 8005f28:	425a      	negs	r2, r3
 8005f2a:	f003 0307 	and.w	r3, r3, #7
 8005f2e:	f002 0207 	and.w	r2, r2, #7
 8005f32:	bf58      	it	pl
 8005f34:	4253      	negpl	r3, r2
 8005f36:	b21b      	sxth	r3, r3
 8005f38:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]);
 8005f3c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005f40:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005f44:	441a      	add	r2, r3
 8005f46:	79fb      	ldrb	r3, [r7, #7]
 8005f48:	49a6      	ldr	r1, [pc, #664]	; (80061e4 <Send_Status_Message+0x394>)
 8005f4a:	3370      	adds	r3, #112	; 0x70
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	440b      	add	r3, r1
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8005f56:	2110      	movs	r1, #16
 8005f58:	f7fa fbe8 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8005f5c:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8005f60:	3310      	adds	r3, #16
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	da00      	bge.n	8005f68 <Send_Status_Message+0x118>
 8005f66:	3307      	adds	r3, #7
 8005f68:	10db      	asrs	r3, r3, #3
 8005f6a:	b29a      	uxth	r2, r3
 8005f6c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005f70:	4413      	add	r3, r2
 8005f72:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8005f76:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005f7a:	3310      	adds	r3, #16
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	b21b      	sxth	r3, r3
 8005f80:	425a      	negs	r2, r3
 8005f82:	f003 0307 	and.w	r3, r3, #7
 8005f86:	f002 0207 	and.w	r2, r2, #7
 8005f8a:	bf58      	it	pl
 8005f8c:	4253      	negpl	r3, r2
 8005f8e:	b21b      	sxth	r3, r3
 8005f90:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	if( ( (CHECKFLAG(2,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8005f94:	4b94      	ldr	r3, [pc, #592]	; (80061e8 <Send_Status_Message+0x398>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	089b      	lsrs	r3, r3, #2
 8005f9a:	f003 0301 	and.w	r3, r3, #1
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d035      	beq.n	800600e <Send_Status_Message+0x1be>
 8005fa2:	4b91      	ldr	r3, [pc, #580]	; (80061e8 <Send_Status_Message+0x398>)
 8005fa4:	791b      	ldrb	r3, [r3, #4]
 8005fa6:	79fa      	ldrb	r2, [r7, #7]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d130      	bne.n	800600e <Send_Status_Message+0x1be>
	{
		uint8_t Rand_number = 0;
 8005fac:	2300      	movs	r3, #0
 8005fae:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
#ifdef STM_32
		Rand_number = HAL_RNG_GetRandomNumber(&hrng) % 200;
 8005fb2:	488e      	ldr	r0, [pc, #568]	; (80061ec <Send_Status_Message+0x39c>)
 8005fb4:	f013 ff9e 	bl	8019ef4 <HAL_RNG_GetRandomNumber>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	4b8d      	ldr	r3, [pc, #564]	; (80061f0 <Send_Status_Message+0x3a0>)
 8005fbc:	fba3 1302 	umull	r1, r3, r3, r2
 8005fc0:	099b      	lsrs	r3, r3, #6
 8005fc2:	21c8      	movs	r1, #200	; 0xc8
 8005fc4:	fb01 f303 	mul.w	r3, r1, r3
 8005fc8:	1ad3      	subs	r3, r2, r3
 8005fca:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
#endif
		printf("Injected TX Sequence value failure\n");
 8005fce:	4889      	ldr	r0, [pc, #548]	; (80061f4 <Send_Status_Message+0x3a4>)
 8005fd0:	f01c fb84 	bl	80226dc <puts>
		printf("Actual TX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Tx_Seq);
 8005fd4:	79fb      	ldrb	r3, [r7, #7]
 8005fd6:	4a88      	ldr	r2, [pc, #544]	; (80061f8 <Send_Status_Message+0x3a8>)
 8005fd8:	011b      	lsls	r3, r3, #4
 8005fda:	4413      	add	r3, r2
 8005fdc:	3301      	adds	r3, #1
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	4886      	ldr	r0, [pc, #536]	; (80061fc <Send_Status_Message+0x3ac>)
 8005fe4:	f01c fade 	bl	80225a4 <iprintf>
		printf("Injected TX Sequence Value:%u\n",Rand_number);
 8005fe8:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8005fec:	4619      	mov	r1, r3
 8005fee:	4884      	ldr	r0, [pc, #528]	; (8006200 <Send_Status_Message+0x3b0>)
 8005ff0:	f01c fad8 	bl	80225a4 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte],Rand_number);
 8005ff4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005ff8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005ffc:	441a      	add	r2, r3
 8005ffe:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8006002:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006006:	2108      	movs	r1, #8
 8006008:	f7fa fb90 	bl	800072c <InsertBits>
	{
 800600c:	e00f      	b.n	800602e <Send_Status_Message+0x1de>
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Seq); // TX Seq Number
 800600e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006012:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006016:	441a      	add	r2, r3
 8006018:	79fb      	ldrb	r3, [r7, #7]
 800601a:	4977      	ldr	r1, [pc, #476]	; (80061f8 <Send_Status_Message+0x3a8>)
 800601c:	011b      	lsls	r3, r3, #4
 800601e:	440b      	add	r3, r1
 8006020:	3301      	adds	r3, #1
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006028:	2108      	movs	r1, #8
 800602a:	f7fa fb7f 	bl	800072c <InsertBits>
		//Last Received Packet Rx_seq number is our TX_Seq Number
	}
	BITSTUFFINC(8);
 800602e:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006032:	3308      	adds	r3, #8
 8006034:	2b00      	cmp	r3, #0
 8006036:	da00      	bge.n	800603a <Send_Status_Message+0x1ea>
 8006038:	3307      	adds	r3, #7
 800603a:	10db      	asrs	r3, r3, #3
 800603c:	b29a      	uxth	r2, r3
 800603e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006042:	4413      	add	r3, r2
 8006044:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006048:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800604c:	3308      	adds	r3, #8
 800604e:	b29b      	uxth	r3, r3
 8006050:	b21b      	sxth	r3, r3
 8006052:	425a      	negs	r2, r3
 8006054:	f003 0307 	and.w	r3, r3, #7
 8006058:	f002 0207 	and.w	r2, r2, #7
 800605c:	bf58      	it	pl
 800605e:	4253      	negpl	r3, r2
 8006060:	b21b      	sxth	r3, r3
 8006062:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	if( ( (CHECKFLAG(3,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8006066:	4b60      	ldr	r3, [pc, #384]	; (80061e8 <Send_Status_Message+0x398>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	08db      	lsrs	r3, r3, #3
 800606c:	f003 0301 	and.w	r3, r3, #1
 8006070:	2b00      	cmp	r3, #0
 8006072:	d038      	beq.n	80060e6 <Send_Status_Message+0x296>
 8006074:	4b5c      	ldr	r3, [pc, #368]	; (80061e8 <Send_Status_Message+0x398>)
 8006076:	791b      	ldrb	r3, [r3, #4]
 8006078:	79fa      	ldrb	r2, [r7, #7]
 800607a:	429a      	cmp	r2, r3
 800607c:	d133      	bne.n	80060e6 <Send_Status_Message+0x296>
	{
		uint8_t Rand_number = 0;
 800607e:	2300      	movs	r3, #0
 8006080:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
#ifdef STM_32
		Rand_number = (HAL_RNG_GetRandomNumber(&hrng) % 200);
 8006084:	4859      	ldr	r0, [pc, #356]	; (80061ec <Send_Status_Message+0x39c>)
 8006086:	f013 ff35 	bl	8019ef4 <HAL_RNG_GetRandomNumber>
 800608a:	4602      	mov	r2, r0
 800608c:	4b58      	ldr	r3, [pc, #352]	; (80061f0 <Send_Status_Message+0x3a0>)
 800608e:	fba3 1302 	umull	r1, r3, r3, r2
 8006092:	099b      	lsrs	r3, r3, #6
 8006094:	21c8      	movs	r1, #200	; 0xc8
 8006096:	fb01 f303 	mul.w	r3, r1, r3
 800609a:	1ad3      	subs	r3, r2, r3
 800609c:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
#endif
		printf("Injected RX Sequence value failure\n");
 80060a0:	4858      	ldr	r0, [pc, #352]	; (8006204 <Send_Status_Message+0x3b4>)
 80060a2:	f01c fb1b 	bl	80226dc <puts>
		printf("Actual RX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Rx_Seq);
 80060a6:	79fb      	ldrb	r3, [r7, #7]
 80060a8:	4a53      	ldr	r2, [pc, #332]	; (80061f8 <Send_Status_Message+0x3a8>)
 80060aa:	011b      	lsls	r3, r3, #4
 80060ac:	4413      	add	r3, r2
 80060ae:	3302      	adds	r3, #2
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	4619      	mov	r1, r3
 80060b4:	4854      	ldr	r0, [pc, #336]	; (8006208 <Send_Status_Message+0x3b8>)
 80060b6:	f01c fa75 	bl	80225a4 <iprintf>
		printf("Injected RX Vital Init Value:%u\n",Rand_number);
 80060ba:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80060be:	4619      	mov	r1, r3
 80060c0:	4852      	ldr	r0, [pc, #328]	; (800620c <Send_Status_Message+0x3bc>)
 80060c2:	f01c fa6f 	bl	80225a4 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_number); // Rx Seq Number
 80060c6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80060ca:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80060ce:	441a      	add	r2, r3
 80060d0:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80060d4:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80060d8:	2108      	movs	r1, #8
 80060da:	f7fa fb27 	bl	800072c <InsertBits>
		Rx_Seq_failure = 1;
 80060de:	4b4c      	ldr	r3, [pc, #304]	; (8006210 <Send_Status_Message+0x3c0>)
 80060e0:	2201      	movs	r2, #1
 80060e2:	701a      	strb	r2, [r3, #0]
	{
 80060e4:	e020      	b.n	8006128 <Send_Status_Message+0x2d8>
	}
	else
	{
		Rx_Seq_failure = 0;
 80060e6:	4b4a      	ldr	r3, [pc, #296]	; (8006210 <Send_Status_Message+0x3c0>)
 80060e8:	2200      	movs	r2, #0
 80060ea:	701a      	strb	r2, [r3, #0]
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], ++Hitachi_prms_st[Source_Index].Rx_Seq); // Rx Seq Number
 80060ec:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80060f0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80060f4:	18d1      	adds	r1, r2, r3
 80060f6:	79fb      	ldrb	r3, [r7, #7]
 80060f8:	483f      	ldr	r0, [pc, #252]	; (80061f8 <Send_Status_Message+0x3a8>)
 80060fa:	011a      	lsls	r2, r3, #4
 80060fc:	4402      	add	r2, r0
 80060fe:	3202      	adds	r2, #2
 8006100:	7812      	ldrb	r2, [r2, #0]
 8006102:	3201      	adds	r2, #1
 8006104:	b2d4      	uxtb	r4, r2
 8006106:	483c      	ldr	r0, [pc, #240]	; (80061f8 <Send_Status_Message+0x3a8>)
 8006108:	011a      	lsls	r2, r3, #4
 800610a:	4402      	add	r2, r0
 800610c:	3202      	adds	r2, #2
 800610e:	4620      	mov	r0, r4
 8006110:	7010      	strb	r0, [r2, #0]
 8006112:	4a39      	ldr	r2, [pc, #228]	; (80061f8 <Send_Status_Message+0x3a8>)
 8006114:	011b      	lsls	r3, r3, #4
 8006116:	4413      	add	r3, r2
 8006118:	3302      	adds	r3, #2
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006120:	460a      	mov	r2, r1
 8006122:	2108      	movs	r1, #8
 8006124:	f7fa fb02 	bl	800072c <InsertBits>
		//Last Received Packet Tx_seq number is our Rx_Seq Number incremented by 1.
	}
	BITSTUFFINC(8);
 8006128:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800612c:	3308      	adds	r3, #8
 800612e:	2b00      	cmp	r3, #0
 8006130:	da00      	bge.n	8006134 <Send_Status_Message+0x2e4>
 8006132:	3307      	adds	r3, #7
 8006134:	10db      	asrs	r3, r3, #3
 8006136:	b29a      	uxth	r2, r3
 8006138:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800613c:	4413      	add	r3, r2
 800613e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006142:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006146:	3308      	adds	r3, #8
 8006148:	b29b      	uxth	r3, r3
 800614a:	b21b      	sxth	r3, r3
 800614c:	425a      	negs	r2, r3
 800614e:	f003 0307 	and.w	r3, r3, #7
 8006152:	f002 0207 	and.w	r2, r2, #7
 8006156:	bf58      	it	pl
 8006158:	4253      	negpl	r3, r2
 800615a:	b21b      	sxth	r3, r3
 800615c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], STATUSMSG);
 8006160:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006164:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006168:	441a      	add	r2, r3
 800616a:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800616e:	2304      	movs	r3, #4
 8006170:	2108      	movs	r1, #8
 8006172:	f7fa fadb 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8006176:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800617a:	3308      	adds	r3, #8
 800617c:	2b00      	cmp	r3, #0
 800617e:	da00      	bge.n	8006182 <Send_Status_Message+0x332>
 8006180:	3307      	adds	r3, #7
 8006182:	10db      	asrs	r3, r3, #3
 8006184:	b29a      	uxth	r2, r3
 8006186:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800618a:	4413      	add	r3, r2
 800618c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006190:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006194:	3308      	adds	r3, #8
 8006196:	b29b      	uxth	r3, r3
 8006198:	b21b      	sxth	r3, r3
 800619a:	425a      	negs	r2, r3
 800619c:	f003 0307 	and.w	r3, r3, #7
 80061a0:	f002 0207 	and.w	r2, r2, #7
 80061a4:	bf58      	it	pl
 80061a6:	4253      	negpl	r3, r2
 80061a8:	b21b      	sxth	r3, r3
 80061aa:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a


	if(SET == CHECKFLAG(3,Hitachi_prms_st[Source_Index].Msg_Status_Flag))
 80061ae:	79fb      	ldrb	r3, [r7, #7]
 80061b0:	4a11      	ldr	r2, [pc, #68]	; (80061f8 <Send_Status_Message+0x3a8>)
 80061b2:	011b      	lsls	r3, r3, #4
 80061b4:	4413      	add	r3, r2
 80061b6:	3304      	adds	r3, #4
 80061b8:	881b      	ldrh	r3, [r3, #0]
 80061ba:	f003 0308 	and.w	r3, r3, #8
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d052      	beq.n	8006268 <Send_Status_Message+0x418>
	{
		if(Change_MLK_TIME[Source_Index]== 1)
 80061c2:	79fb      	ldrb	r3, [r7, #7]
 80061c4:	4a13      	ldr	r2, [pc, #76]	; (8006214 <Send_Status_Message+0x3c4>)
 80061c6:	5cd3      	ldrb	r3, [r2, r3]
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d125      	bne.n	8006218 <Send_Status_Message+0x3c8>
		{
			InsertBits(ucBit, 16, &Transmit_Buff[ucByte],0x0068);
 80061cc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80061d0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80061d4:	441a      	add	r2, r3
 80061d6:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80061da:	2368      	movs	r3, #104	; 0x68
 80061dc:	2110      	movs	r1, #16
 80061de:	f7fa faa5 	bl	800072c <InsertBits>
 80061e2:	e024      	b.n	800622e <Send_Status_Message+0x3de>
 80061e4:	20000304 	.word	0x20000304
 80061e8:	20001968 	.word	0x20001968
 80061ec:	20009c84 	.word	0x20009c84
 80061f0:	51eb851f 	.word	0x51eb851f
 80061f4:	08024110 	.word	0x08024110
 80061f8:	200011d0 	.word	0x200011d0
 80061fc:	080246b4 	.word	0x080246b4
 8006200:	080246d4 	.word	0x080246d4
 8006204:	08024174 	.word	0x08024174
 8006208:	080246f4 	.word	0x080246f4
 800620c:	08024714 	.word	0x08024714
 8006210:	20000e44 	.word	0x20000e44
 8006214:	200010e4 	.word	0x200010e4
		}
		else
		{
			InsertBits(ucBit, 16, &Transmit_Buff[ucByte],0x0028);
 8006218:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800621c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006220:	441a      	add	r2, r3
 8006222:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006226:	2328      	movs	r3, #40	; 0x28
 8006228:	2110      	movs	r1, #16
 800622a:	f7fa fa7f 	bl	800072c <InsertBits>
		}
		BITSTUFFINC(16);
 800622e:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006232:	3310      	adds	r3, #16
 8006234:	2b00      	cmp	r3, #0
 8006236:	da00      	bge.n	800623a <Send_Status_Message+0x3ea>
 8006238:	3307      	adds	r3, #7
 800623a:	10db      	asrs	r3, r3, #3
 800623c:	b29a      	uxth	r2, r3
 800623e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006242:	4413      	add	r3, r2
 8006244:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006248:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800624c:	3310      	adds	r3, #16
 800624e:	b29b      	uxth	r3, r3
 8006250:	b21b      	sxth	r3, r3
 8006252:	425a      	negs	r2, r3
 8006254:	f003 0307 	and.w	r3, r3, #7
 8006258:	f002 0207 	and.w	r2, r2, #7
 800625c:	bf58      	it	pl
 800625e:	4253      	negpl	r3, r2
 8006260:	b21b      	sxth	r3, r3
 8006262:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006266:	e03a      	b.n	80062de <Send_Status_Message+0x48e>
	}
	else
	{
		if(Change_MLK_TIME[Source_Index]== 1)
 8006268:	79fb      	ldrb	r3, [r7, #7]
 800626a:	4a08      	ldr	r2, [pc, #32]	; (800628c <Send_Status_Message+0x43c>)
 800626c:	5cd3      	ldrb	r3, [r2, r3]
 800626e:	2b01      	cmp	r3, #1
 8006270:	d10e      	bne.n	8006290 <Send_Status_Message+0x440>
		{
			InsertBits(ucBit, 16, &Transmit_Buff[ucByte],0x0064);
 8006272:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006276:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800627a:	441a      	add	r2, r3
 800627c:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006280:	2364      	movs	r3, #100	; 0x64
 8006282:	2110      	movs	r1, #16
 8006284:	f7fa fa52 	bl	800072c <InsertBits>
 8006288:	e00d      	b.n	80062a6 <Send_Status_Message+0x456>
 800628a:	bf00      	nop
 800628c:	200010e4 	.word	0x200010e4
		}
		else
		{
			InsertBits(ucBit, 16, &Transmit_Buff[ucByte],0x0024);
 8006290:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006294:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006298:	441a      	add	r2, r3
 800629a:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800629e:	2324      	movs	r3, #36	; 0x24
 80062a0:	2110      	movs	r1, #16
 80062a2:	f7fa fa43 	bl	800072c <InsertBits>
		}
		BITSTUFFINC(16);
 80062a6:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80062aa:	3310      	adds	r3, #16
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	da00      	bge.n	80062b2 <Send_Status_Message+0x462>
 80062b0:	3307      	adds	r3, #7
 80062b2:	10db      	asrs	r3, r3, #3
 80062b4:	b29a      	uxth	r2, r3
 80062b6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80062ba:	4413      	add	r3, r2
 80062bc:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80062c0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80062c4:	3310      	adds	r3, #16
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	b21b      	sxth	r3, r3
 80062ca:	425a      	negs	r2, r3
 80062cc:	f003 0307 	and.w	r3, r3, #7
 80062d0:	f002 0207 	and.w	r2, r2, #7
 80062d4:	bf58      	it	pl
 80062d6:	4253      	negpl	r3, r2
 80062d8:	b21b      	sxth	r3, r3
 80062da:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	}

	if (((Hitachi_prms_st[Source_Index].Msg_Status_Flag >> 5) & 1)) // Time-stamp Extraction
 80062de:	79fb      	ldrb	r3, [r7, #7]
 80062e0:	4ac6      	ldr	r2, [pc, #792]	; (80065fc <Send_Status_Message+0x7ac>)
 80062e2:	011b      	lsls	r3, r3, #4
 80062e4:	4413      	add	r3, r2
 80062e6:	3304      	adds	r3, #4
 80062e8:	881b      	ldrh	r3, [r3, #0]
 80062ea:	095b      	lsrs	r3, r3, #5
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	f003 0301 	and.w	r3, r3, #1
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	f000 8139 	beq.w	800656a <Send_Status_Message+0x71a>
	{
		if(Change_MLK_TIME[Source_Index]== 1)
 80062f8:	79fb      	ldrb	r3, [r7, #7]
 80062fa:	4ac1      	ldr	r2, [pc, #772]	; (8006600 <Send_Status_Message+0x7b0>)
 80062fc:	5cd3      	ldrb	r3, [r2, r3]
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d114      	bne.n	800632c <Send_Status_Message+0x4dc>
		{
			Get_time();
 8006302:	f004 ff43 	bl	800b18c <Get_time>
			memcpy(&HITACHI_time_Stamp_st[Source_Index],&RTC_Date_time_BCD_st,sizeof(GPS_DATE_TIME_t));
 8006306:	79fa      	ldrb	r2, [r7, #7]
 8006308:	4613      	mov	r3, r2
 800630a:	005b      	lsls	r3, r3, #1
 800630c:	4413      	add	r3, r2
 800630e:	005b      	lsls	r3, r3, #1
 8006310:	4abc      	ldr	r2, [pc, #752]	; (8006604 <Send_Status_Message+0x7b4>)
 8006312:	4413      	add	r3, r2
 8006314:	4abc      	ldr	r2, [pc, #752]	; (8006608 <Send_Status_Message+0x7b8>)
 8006316:	6811      	ldr	r1, [r2, #0]
 8006318:	6019      	str	r1, [r3, #0]
 800631a:	8892      	ldrh	r2, [r2, #4]
 800631c:	809a      	strh	r2, [r3, #4]
			printf("Sending Updated Time\n");
 800631e:	48bb      	ldr	r0, [pc, #748]	; (800660c <Send_Status_Message+0x7bc>)
 8006320:	f01c f9dc 	bl	80226dc <puts>
			Change_MLK_TIME[Source_Index] = 0;
 8006324:	79fb      	ldrb	r3, [r7, #7]
 8006326:	4ab6      	ldr	r2, [pc, #728]	; (8006600 <Send_Status_Message+0x7b0>)
 8006328:	2100      	movs	r1, #0
 800632a:	54d1      	strb	r1, [r2, r3]
		}
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].YY);
 800632c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006330:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006334:	18d1      	adds	r1, r2, r3
 8006336:	79fa      	ldrb	r2, [r7, #7]
 8006338:	48b2      	ldr	r0, [pc, #712]	; (8006604 <Send_Status_Message+0x7b4>)
 800633a:	4613      	mov	r3, r2
 800633c:	005b      	lsls	r3, r3, #1
 800633e:	4413      	add	r3, r2
 8006340:	005b      	lsls	r3, r3, #1
 8006342:	4403      	add	r3, r0
 8006344:	3305      	adds	r3, #5
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800634c:	460a      	mov	r2, r1
 800634e:	2108      	movs	r1, #8
 8006350:	f7fa f9ec 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 8006354:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006358:	3308      	adds	r3, #8
 800635a:	2b00      	cmp	r3, #0
 800635c:	da00      	bge.n	8006360 <Send_Status_Message+0x510>
 800635e:	3307      	adds	r3, #7
 8006360:	10db      	asrs	r3, r3, #3
 8006362:	b29a      	uxth	r2, r3
 8006364:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006368:	4413      	add	r3, r2
 800636a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800636e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006372:	3308      	adds	r3, #8
 8006374:	b29b      	uxth	r3, r3
 8006376:	b21b      	sxth	r3, r3
 8006378:	425a      	negs	r2, r3
 800637a:	f003 0307 	and.w	r3, r3, #7
 800637e:	f002 0207 	and.w	r2, r2, #7
 8006382:	bf58      	it	pl
 8006384:	4253      	negpl	r3, r2
 8006386:	b21b      	sxth	r3, r3
 8006388:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].MM);
 800638c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006390:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006394:	18d1      	adds	r1, r2, r3
 8006396:	79fa      	ldrb	r2, [r7, #7]
 8006398:	489a      	ldr	r0, [pc, #616]	; (8006604 <Send_Status_Message+0x7b4>)
 800639a:	4613      	mov	r3, r2
 800639c:	005b      	lsls	r3, r3, #1
 800639e:	4413      	add	r3, r2
 80063a0:	005b      	lsls	r3, r3, #1
 80063a2:	4403      	add	r3, r0
 80063a4:	3304      	adds	r3, #4
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80063ac:	460a      	mov	r2, r1
 80063ae:	2108      	movs	r1, #8
 80063b0:	f7fa f9bc 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 80063b4:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80063b8:	3308      	adds	r3, #8
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	da00      	bge.n	80063c0 <Send_Status_Message+0x570>
 80063be:	3307      	adds	r3, #7
 80063c0:	10db      	asrs	r3, r3, #3
 80063c2:	b29a      	uxth	r2, r3
 80063c4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80063c8:	4413      	add	r3, r2
 80063ca:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80063ce:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80063d2:	3308      	adds	r3, #8
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	b21b      	sxth	r3, r3
 80063d8:	425a      	negs	r2, r3
 80063da:	f003 0307 	and.w	r3, r3, #7
 80063de:	f002 0207 	and.w	r2, r2, #7
 80063e2:	bf58      	it	pl
 80063e4:	4253      	negpl	r3, r2
 80063e6:	b21b      	sxth	r3, r3
 80063e8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].DD);
 80063ec:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80063f0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80063f4:	18d1      	adds	r1, r2, r3
 80063f6:	79fa      	ldrb	r2, [r7, #7]
 80063f8:	4882      	ldr	r0, [pc, #520]	; (8006604 <Send_Status_Message+0x7b4>)
 80063fa:	4613      	mov	r3, r2
 80063fc:	005b      	lsls	r3, r3, #1
 80063fe:	4413      	add	r3, r2
 8006400:	005b      	lsls	r3, r3, #1
 8006402:	4403      	add	r3, r0
 8006404:	3303      	adds	r3, #3
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800640c:	460a      	mov	r2, r1
 800640e:	2108      	movs	r1, #8
 8006410:	f7fa f98c 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 8006414:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006418:	3308      	adds	r3, #8
 800641a:	2b00      	cmp	r3, #0
 800641c:	da00      	bge.n	8006420 <Send_Status_Message+0x5d0>
 800641e:	3307      	adds	r3, #7
 8006420:	10db      	asrs	r3, r3, #3
 8006422:	b29a      	uxth	r2, r3
 8006424:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006428:	4413      	add	r3, r2
 800642a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800642e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006432:	3308      	adds	r3, #8
 8006434:	b29b      	uxth	r3, r3
 8006436:	b21b      	sxth	r3, r3
 8006438:	425a      	negs	r2, r3
 800643a:	f003 0307 	and.w	r3, r3, #7
 800643e:	f002 0207 	and.w	r2, r2, #7
 8006442:	bf58      	it	pl
 8006444:	4253      	negpl	r3, r2
 8006446:	b21b      	sxth	r3, r3
 8006448:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].hh);
 800644c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006450:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006454:	18d1      	adds	r1, r2, r3
 8006456:	79fa      	ldrb	r2, [r7, #7]
 8006458:	486a      	ldr	r0, [pc, #424]	; (8006604 <Send_Status_Message+0x7b4>)
 800645a:	4613      	mov	r3, r2
 800645c:	005b      	lsls	r3, r3, #1
 800645e:	4413      	add	r3, r2
 8006460:	005b      	lsls	r3, r3, #1
 8006462:	4403      	add	r3, r0
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800646a:	460a      	mov	r2, r1
 800646c:	2108      	movs	r1, #8
 800646e:	f7fa f95d 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 8006472:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006476:	3308      	adds	r3, #8
 8006478:	2b00      	cmp	r3, #0
 800647a:	da00      	bge.n	800647e <Send_Status_Message+0x62e>
 800647c:	3307      	adds	r3, #7
 800647e:	10db      	asrs	r3, r3, #3
 8006480:	b29a      	uxth	r2, r3
 8006482:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006486:	4413      	add	r3, r2
 8006488:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800648c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006490:	3308      	adds	r3, #8
 8006492:	b29b      	uxth	r3, r3
 8006494:	b21b      	sxth	r3, r3
 8006496:	425a      	negs	r2, r3
 8006498:	f003 0307 	and.w	r3, r3, #7
 800649c:	f002 0207 	and.w	r2, r2, #7
 80064a0:	bf58      	it	pl
 80064a2:	4253      	negpl	r3, r2
 80064a4:	b21b      	sxth	r3, r3
 80064a6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].mm);
 80064aa:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80064ae:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80064b2:	18d1      	adds	r1, r2, r3
 80064b4:	79fa      	ldrb	r2, [r7, #7]
 80064b6:	4853      	ldr	r0, [pc, #332]	; (8006604 <Send_Status_Message+0x7b4>)
 80064b8:	4613      	mov	r3, r2
 80064ba:	005b      	lsls	r3, r3, #1
 80064bc:	4413      	add	r3, r2
 80064be:	005b      	lsls	r3, r3, #1
 80064c0:	4403      	add	r3, r0
 80064c2:	3301      	adds	r3, #1
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80064ca:	460a      	mov	r2, r1
 80064cc:	2108      	movs	r1, #8
 80064ce:	f7fa f92d 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 80064d2:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80064d6:	3308      	adds	r3, #8
 80064d8:	2b00      	cmp	r3, #0
 80064da:	da00      	bge.n	80064de <Send_Status_Message+0x68e>
 80064dc:	3307      	adds	r3, #7
 80064de:	10db      	asrs	r3, r3, #3
 80064e0:	b29a      	uxth	r2, r3
 80064e2:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80064e6:	4413      	add	r3, r2
 80064e8:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80064ec:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80064f0:	3308      	adds	r3, #8
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	b21b      	sxth	r3, r3
 80064f6:	425a      	negs	r2, r3
 80064f8:	f003 0307 	and.w	r3, r3, #7
 80064fc:	f002 0207 	and.w	r2, r2, #7
 8006500:	bf58      	it	pl
 8006502:	4253      	negpl	r3, r2
 8006504:	b21b      	sxth	r3, r3
 8006506:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].ss);
 800650a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800650e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006512:	18d1      	adds	r1, r2, r3
 8006514:	79fa      	ldrb	r2, [r7, #7]
 8006516:	483b      	ldr	r0, [pc, #236]	; (8006604 <Send_Status_Message+0x7b4>)
 8006518:	4613      	mov	r3, r2
 800651a:	005b      	lsls	r3, r3, #1
 800651c:	4413      	add	r3, r2
 800651e:	005b      	lsls	r3, r3, #1
 8006520:	4403      	add	r3, r0
 8006522:	3302      	adds	r3, #2
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800652a:	460a      	mov	r2, r1
 800652c:	2108      	movs	r1, #8
 800652e:	f7fa f8fd 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 8006532:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006536:	3308      	adds	r3, #8
 8006538:	2b00      	cmp	r3, #0
 800653a:	da00      	bge.n	800653e <Send_Status_Message+0x6ee>
 800653c:	3307      	adds	r3, #7
 800653e:	10db      	asrs	r3, r3, #3
 8006540:	b29a      	uxth	r2, r3
 8006542:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006546:	4413      	add	r3, r2
 8006548:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800654c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006550:	3308      	adds	r3, #8
 8006552:	b29b      	uxth	r3, r3
 8006554:	b21b      	sxth	r3, r3
 8006556:	425a      	negs	r2, r3
 8006558:	f003 0307 	and.w	r3, r3, #7
 800655c:	f002 0207 	and.w	r2, r2, #7
 8006560:	bf58      	it	pl
 8006562:	4253      	negpl	r3, r2
 8006564:	b21b      	sxth	r3, r3
 8006566:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	}

	if( ( (CHECKFLAG(1,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 800656a:	4b29      	ldr	r3, [pc, #164]	; (8006610 <Send_Status_Message+0x7c0>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	085b      	lsrs	r3, r3, #1
 8006570:	f003 0301 	and.w	r3, r3, #1
 8006574:	2b00      	cmp	r3, #0
 8006576:	d031      	beq.n	80065dc <Send_Status_Message+0x78c>
 8006578:	4b25      	ldr	r3, [pc, #148]	; (8006610 <Send_Status_Message+0x7c0>)
 800657a:	791b      	ldrb	r3, [r3, #4]
 800657c:	79fa      	ldrb	r2, [r7, #7]
 800657e:	429a      	cmp	r2, r3
 8006580:	d12c      	bne.n	80065dc <Send_Status_Message+0x78c>
	{
		uint32_t Rand_number = 0;
 8006582:	2300      	movs	r3, #0
 8006584:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
#ifdef STM_32
		Rand_number = HAL_RNG_GetRandomNumber(&hrng) % 0xffff00;
 8006588:	4822      	ldr	r0, [pc, #136]	; (8006614 <Send_Status_Message+0x7c4>)
 800658a:	f013 fcb3 	bl	8019ef4 <HAL_RNG_GetRandomNumber>
 800658e:	4602      	mov	r2, r0
 8006590:	4b21      	ldr	r3, [pc, #132]	; (8006618 <Send_Status_Message+0x7c8>)
 8006592:	fba3 1302 	umull	r1, r3, r3, r2
 8006596:	0dd9      	lsrs	r1, r3, #23
 8006598:	460b      	mov	r3, r1
 800659a:	041b      	lsls	r3, r3, #16
 800659c:	1a5b      	subs	r3, r3, r1
 800659e:	021b      	lsls	r3, r3, #8
 80065a0:	1ad3      	subs	r3, r2, r3
 80065a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
#endif
		printf("\nInjected Vital Init Value Failure\n");
 80065a6:	481d      	ldr	r0, [pc, #116]	; (800661c <Send_Status_Message+0x7cc>)
 80065a8:	f01c f898 	bl	80226dc <puts>
		printf("Actual Vital Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 80065ac:	79fb      	ldrb	r3, [r7, #7]
 80065ae:	4a13      	ldr	r2, [pc, #76]	; (80065fc <Send_Status_Message+0x7ac>)
 80065b0:	011b      	lsls	r3, r3, #4
 80065b2:	4413      	add	r3, r2
 80065b4:	330c      	adds	r3, #12
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4619      	mov	r1, r3
 80065ba:	4819      	ldr	r0, [pc, #100]	; (8006620 <Send_Status_Message+0x7d0>)
 80065bc:	f01b fff2 	bl	80225a4 <iprintf>
		printf("Injected Vital Init Value:0x%06lX\n",Rand_number);
 80065c0:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80065c4:	4817      	ldr	r0, [pc, #92]	; (8006624 <Send_Status_Message+0x7d4>)
 80065c6:	f01b ffed 	bl	80225a4 <iprintf>
		InsertBits(0, 24, &Temp_Buff[0], Rand_number);
 80065ca:	f107 020c 	add.w	r2, r7, #12
 80065ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80065d2:	2118      	movs	r1, #24
 80065d4:	2000      	movs	r0, #0
 80065d6:	f7fa f8a9 	bl	800072c <InsertBits>
	{
 80065da:	e00b      	b.n	80065f4 <Send_Status_Message+0x7a4>
	}
	else
	{
		InsertBits(0, 24, &Temp_Buff[0], Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 80065dc:	79fb      	ldrb	r3, [r7, #7]
 80065de:	4a07      	ldr	r2, [pc, #28]	; (80065fc <Send_Status_Message+0x7ac>)
 80065e0:	011b      	lsls	r3, r3, #4
 80065e2:	4413      	add	r3, r2
 80065e4:	330c      	adds	r3, #12
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f107 020c 	add.w	r2, r7, #12
 80065ec:	2118      	movs	r1, #24
 80065ee:	2000      	movs	r0, #0
 80065f0:	f7fa f89c 	bl	800072c <InsertBits>
	}
	for (uc_index = 0; uc_index < ucByte; uc_index++)
 80065f4:	2300      	movs	r3, #0
 80065f6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80065fa:	e027      	b.n	800664c <Send_Status_Message+0x7fc>
 80065fc:	200011d0 	.word	0x200011d0
 8006600:	200010e4 	.word	0x200010e4
 8006604:	20001194 	.word	0x20001194
 8006608:	200027f4 	.word	0x200027f4
 800660c:	08024490 	.word	0x08024490
 8006610:	20001968 	.word	0x20001968
 8006614:	20009c84 	.word	0x20009c84
 8006618:	80008001 	.word	0x80008001
 800661c:	080244a8 	.word	0x080244a8
 8006620:	080244cc 	.word	0x080244cc
 8006624:	080244f0 	.word	0x080244f0
	{
		Temp_Buff[uc_index + 3] = Transmit_Buff[uc_index];
 8006628:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 800662c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8006630:	3303      	adds	r3, #3
 8006632:	3290      	adds	r2, #144	; 0x90
 8006634:	443a      	add	r2, r7
 8006636:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 800663a:	3390      	adds	r3, #144	; 0x90
 800663c:	443b      	add	r3, r7
 800663e:	f803 2c84 	strb.w	r2, [r3, #-132]
	for (uc_index = 0; uc_index < ucByte; uc_index++)
 8006642:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8006646:	3301      	adds	r3, #1
 8006648:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800664c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8006650:	b29b      	uxth	r3, r3
 8006652:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8006656:	429a      	cmp	r2, r3
 8006658:	d8e6      	bhi.n	8006628 <Send_Status_Message+0x7d8>
	}

	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], CalculateDirectReverseCrc(Temp_Buff, uc_index + 3));
 800665a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800665e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006662:	18d4      	adds	r4, r2, r3
 8006664:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8006668:	b29b      	uxth	r3, r3
 800666a:	3303      	adds	r3, #3
 800666c:	b29a      	uxth	r2, r3
 800666e:	f107 030c 	add.w	r3, r7, #12
 8006672:	4611      	mov	r1, r2
 8006674:	4618      	mov	r0, r3
 8006676:	f00c fbb3 	bl	8012de0 <CalculateDirectReverseCrc>
 800667a:	4603      	mov	r3, r0
 800667c:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006680:	4622      	mov	r2, r4
 8006682:	2120      	movs	r1, #32
 8006684:	f7fa f852 	bl	800072c <InsertBits>
	Rx_Seq_failure = 0;
 8006688:	4b1f      	ldr	r3, [pc, #124]	; (8006708 <Send_Status_Message+0x8b8>)
 800668a:	2200      	movs	r2, #0
 800668c:	701a      	strb	r2, [r3, #0]
	BITSTUFFINC(32);
 800668e:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006692:	3320      	adds	r3, #32
 8006694:	2b00      	cmp	r3, #0
 8006696:	da00      	bge.n	800669a <Send_Status_Message+0x84a>
 8006698:	3307      	adds	r3, #7
 800669a:	10db      	asrs	r3, r3, #3
 800669c:	b29a      	uxth	r2, r3
 800669e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80066a2:	4413      	add	r3, r2
 80066a4:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80066a8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80066ac:	3320      	adds	r3, #32
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	b21b      	sxth	r3, r3
 80066b2:	425a      	negs	r2, r3
 80066b4:	f003 0307 	and.w	r3, r3, #7
 80066b8:	f002 0207 	and.w	r2, r2, #7
 80066bc:	bf58      	it	pl
 80066be:	4253      	negpl	r3, r2
 80066c0:	b21b      	sxth	r3, r3
 80066c2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	if( ( CHECKFLAG(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)== SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 80066c6:	4b11      	ldr	r3, [pc, #68]	; (800670c <Send_Status_Message+0x8bc>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	0a5b      	lsrs	r3, r3, #9
 80066cc:	f003 0301 	and.w	r3, r3, #1
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d00b      	beq.n	80066ec <Send_Status_Message+0x89c>
 80066d4:	4b0d      	ldr	r3, [pc, #52]	; (800670c <Send_Status_Message+0x8bc>)
 80066d6:	791b      	ldrb	r3, [r3, #4]
 80066d8:	79fa      	ldrb	r2, [r7, #7]
 80066da:	429a      	cmp	r2, r3
 80066dc:	d106      	bne.n	80066ec <Send_Status_Message+0x89c>
	{
		printf("Injected ETH tx Fail\n");
 80066de:	480c      	ldr	r0, [pc, #48]	; (8006710 <Send_Status_Message+0x8c0>)
 80066e0:	f01b fffc 	bl	80226dc <puts>
		printf("Not Sending Reply");
 80066e4:	480b      	ldr	r0, [pc, #44]	; (8006714 <Send_Status_Message+0x8c4>)
 80066e6:	f01b ff5d 	bl	80225a4 <iprintf>
 80066ea:	e009      	b.n	8006700 <Send_Status_Message+0x8b0>
	}
	else
	{
		Process_Sending_Reply(Transmit_Buff, ucByte,Source_Index);
 80066ec:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80066f0:	b2d9      	uxtb	r1, r3
 80066f2:	79fa      	ldrb	r2, [r7, #7]
 80066f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80066f8:	4618      	mov	r0, r3
 80066fa:	f000 ffab 	bl	8007654 <Process_Sending_Reply>
	}
}
 80066fe:	bf00      	nop
 8006700:	bf00      	nop
 8006702:	3794      	adds	r7, #148	; 0x94
 8006704:	46bd      	mov	sp, r7
 8006706:	bd90      	pop	{r4, r7, pc}
 8006708:	20000e44 	.word	0x20000e44
 800670c:	20001968 	.word	0x20001968
 8006710:	08024240 	.word	0x08024240
 8006714:	08024258 	.word	0x08024258

08006718 <Service_Msg_Extr>:

void Service_Msg_Extr(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b088      	sub	sp, #32
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	4608      	mov	r0, r1
 8006722:	4611      	mov	r1, r2
 8006724:	461a      	mov	r2, r3
 8006726:	4603      	mov	r3, r0
 8006728:	70fb      	strb	r3, [r7, #3]
 800672a:	460b      	mov	r3, r1
 800672c:	70bb      	strb	r3, [r7, #2]
 800672e:	4613      	mov	r3, r2
 8006730:	707b      	strb	r3, [r7, #1]
	uint32_t Calc_CRC = 0;
 8006732:	2300      	movs	r3, #0
 8006734:	61bb      	str	r3, [r7, #24]
	uint32_t Recv_CRC = 0;
 8006736:	2300      	movs	r3, #0
 8006738:	617b      	str	r3, [r7, #20]
	uint8_t LinkEstablishFlag = CLEAR;
 800673a:	2300      	movs	r3, #0
 800673c:	77fb      	strb	r3, [r7, #31]
	uint32_t Ticks = HAL_GetTick();
 800673e:	f00e ff27 	bl	8015590 <HAL_GetTick>
 8006742:	6138      	str	r0, [r7, #16]
	BITSTUFFINIT(0, 0);
 8006744:	2300      	movs	r3, #0
 8006746:	81fb      	strh	r3, [r7, #14]
 8006748:	2300      	movs	r3, #0
 800674a:	81bb      	strh	r3, [r7, #12]

	Calc_CRC = CalculateDirectReverseCrc(Buff, Length - 5);
 800674c:	78fb      	ldrb	r3, [r7, #3]
 800674e:	b29b      	uxth	r3, r3
 8006750:	3b05      	subs	r3, #5
 8006752:	b29b      	uxth	r3, r3
 8006754:	4619      	mov	r1, r3
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f00c fb42 	bl	8012de0 <CalculateDirectReverseCrc>
 800675c:	61b8      	str	r0, [r7, #24]
	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length - 5]);
 800675e:	78fb      	ldrb	r3, [r7, #3]
 8006760:	3b05      	subs	r3, #5
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	441a      	add	r2, r3
 8006766:	89bb      	ldrh	r3, [r7, #12]
 8006768:	2120      	movs	r1, #32
 800676a:	4618      	mov	r0, r3
 800676c:	f7f9 ff52 	bl	8000614 <ExtractBits>
 8006770:	6178      	str	r0, [r7, #20]

	if(Recv_CRC != Calc_CRC)
 8006772:	697a      	ldr	r2, [r7, #20]
 8006774:	69bb      	ldr	r3, [r7, #24]
 8006776:	429a      	cmp	r2, r3
 8006778:	d01a      	beq.n	80067b0 <Service_Msg_Extr+0x98>
	{
		printf("Service Message CRC Fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 800677a:	78bb      	ldrb	r3, [r7, #2]
 800677c:	4a08      	ldr	r2, [pc, #32]	; (80067a0 <Service_Msg_Extr+0x88>)
 800677e:	3366      	adds	r3, #102	; 0x66
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	4413      	add	r3, r2
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	4619      	mov	r1, r3
 8006788:	4806      	ldr	r0, [pc, #24]	; (80067a4 <Service_Msg_Extr+0x8c>)
 800678a:	f01b ff0b 	bl	80225a4 <iprintf>
		printf("R-CRC:0x%08lX\n",Recv_CRC);
 800678e:	6979      	ldr	r1, [r7, #20]
 8006790:	4805      	ldr	r0, [pc, #20]	; (80067a8 <Service_Msg_Extr+0x90>)
 8006792:	f01b ff07 	bl	80225a4 <iprintf>
		printf("C-CRC:0x%08lX\n",Calc_CRC);
 8006796:	69b9      	ldr	r1, [r7, #24]
 8006798:	4804      	ldr	r0, [pc, #16]	; (80067ac <Service_Msg_Extr+0x94>)
 800679a:	f01b ff03 	bl	80225a4 <iprintf>
		return;
 800679e:	e397      	b.n	8006ed0 <Service_Msg_Extr+0x7b8>
 80067a0:	20000304 	.word	0x20000304
 80067a4:	08024738 	.word	0x08024738
 80067a8:	08023fac 	.word	0x08023fac
 80067ac:	08023fbc 	.word	0x08023fbc
	}

	Last_Recevied_Clock[Source_Index] = Ticks;
 80067b0:	78bb      	ldrb	r3, [r7, #2]
 80067b2:	49ae      	ldr	r1, [pc, #696]	; (8006a6c <Service_Msg_Extr+0x354>)
 80067b4:	693a      	ldr	r2, [r7, #16]
 80067b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Last_Recevied_Clock_ValidMsgs[Source_Index] = Ticks;
 80067ba:	78bb      	ldrb	r3, [r7, #2]
 80067bc:	49ac      	ldr	r1, [pc, #688]	; (8006a70 <Service_Msg_Extr+0x358>)
 80067be:	693a      	ldr	r2, [r7, #16]
 80067c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff); // To detected EiPC shifting Faster
	BITSTUFFINC(8);
 80067c4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80067c8:	3308      	adds	r3, #8
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	da00      	bge.n	80067d0 <Service_Msg_Extr+0xb8>
 80067ce:	3307      	adds	r3, #7
 80067d0:	10db      	asrs	r3, r3, #3
 80067d2:	b29a      	uxth	r2, r3
 80067d4:	89fb      	ldrh	r3, [r7, #14]
 80067d6:	4413      	add	r3, r2
 80067d8:	81fb      	strh	r3, [r7, #14]
 80067da:	89bb      	ldrh	r3, [r7, #12]
 80067dc:	3308      	adds	r3, #8
 80067de:	b29b      	uxth	r3, r3
 80067e0:	b21b      	sxth	r3, r3
 80067e2:	425a      	negs	r2, r3
 80067e4:	f003 0307 	and.w	r3, r3, #7
 80067e8:	f002 0207 	and.w	r2, r2, #7
 80067ec:	bf58      	it	pl
 80067ee:	4253      	negpl	r3, r2
 80067f0:	b21b      	sxth	r3, r3
 80067f2:	81bb      	strh	r3, [r7, #12]

	Hitachi_Service_st[Source_Index].Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80067f4:	89fb      	ldrh	r3, [r7, #14]
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	441a      	add	r2, r3
 80067fa:	89bb      	ldrh	r3, [r7, #12]
 80067fc:	2110      	movs	r1, #16
 80067fe:	4618      	mov	r0, r3
 8006800:	f7f9 ff08 	bl	8000614 <ExtractBits>
 8006804:	4603      	mov	r3, r0
 8006806:	78ba      	ldrb	r2, [r7, #2]
 8006808:	b298      	uxth	r0, r3
 800680a:	499a      	ldr	r1, [pc, #616]	; (8006a74 <Service_Msg_Extr+0x35c>)
 800680c:	4613      	mov	r3, r2
 800680e:	005b      	lsls	r3, r3, #1
 8006810:	4413      	add	r3, r2
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	440b      	add	r3, r1
 8006816:	3306      	adds	r3, #6
 8006818:	4602      	mov	r2, r0
 800681a:	801a      	strh	r2, [r3, #0]
	//	printf("Des_Addr:%u\n", Hitachi_Service_st[Source_Index].Des_Addr);
	BITSTUFFINC(16);
 800681c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006820:	3310      	adds	r3, #16
 8006822:	2b00      	cmp	r3, #0
 8006824:	da00      	bge.n	8006828 <Service_Msg_Extr+0x110>
 8006826:	3307      	adds	r3, #7
 8006828:	10db      	asrs	r3, r3, #3
 800682a:	b29a      	uxth	r2, r3
 800682c:	89fb      	ldrh	r3, [r7, #14]
 800682e:	4413      	add	r3, r2
 8006830:	81fb      	strh	r3, [r7, #14]
 8006832:	89bb      	ldrh	r3, [r7, #12]
 8006834:	3310      	adds	r3, #16
 8006836:	b29b      	uxth	r3, r3
 8006838:	b21b      	sxth	r3, r3
 800683a:	425a      	negs	r2, r3
 800683c:	f003 0307 	and.w	r3, r3, #7
 8006840:	f002 0207 	and.w	r2, r2, #7
 8006844:	bf58      	it	pl
 8006846:	4253      	negpl	r3, r2
 8006848:	b21b      	sxth	r3, r3
 800684a:	81bb      	strh	r3, [r7, #12]

	Hitachi_Service_st[Source_Index].Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 800684c:	89fb      	ldrh	r3, [r7, #14]
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	441a      	add	r2, r3
 8006852:	89bb      	ldrh	r3, [r7, #12]
 8006854:	2110      	movs	r1, #16
 8006856:	4618      	mov	r0, r3
 8006858:	f7f9 fedc 	bl	8000614 <ExtractBits>
 800685c:	4603      	mov	r3, r0
 800685e:	78ba      	ldrb	r2, [r7, #2]
 8006860:	b298      	uxth	r0, r3
 8006862:	4984      	ldr	r1, [pc, #528]	; (8006a74 <Service_Msg_Extr+0x35c>)
 8006864:	4613      	mov	r3, r2
 8006866:	005b      	lsls	r3, r3, #1
 8006868:	4413      	add	r3, r2
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	440b      	add	r3, r1
 800686e:	3304      	adds	r3, #4
 8006870:	4602      	mov	r2, r0
 8006872:	801a      	strh	r2, [r3, #0]
	//	printf("Src_Addr:%u\n", Hitachi_Service_st[Source_Index].Src_Addr);
	BITSTUFFINC(16);
 8006874:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006878:	3310      	adds	r3, #16
 800687a:	2b00      	cmp	r3, #0
 800687c:	da00      	bge.n	8006880 <Service_Msg_Extr+0x168>
 800687e:	3307      	adds	r3, #7
 8006880:	10db      	asrs	r3, r3, #3
 8006882:	b29a      	uxth	r2, r3
 8006884:	89fb      	ldrh	r3, [r7, #14]
 8006886:	4413      	add	r3, r2
 8006888:	81fb      	strh	r3, [r7, #14]
 800688a:	89bb      	ldrh	r3, [r7, #12]
 800688c:	3310      	adds	r3, #16
 800688e:	b29b      	uxth	r3, r3
 8006890:	b21b      	sxth	r3, r3
 8006892:	425a      	negs	r2, r3
 8006894:	f003 0307 	and.w	r3, r3, #7
 8006898:	f002 0207 	and.w	r2, r2, #7
 800689c:	bf58      	it	pl
 800689e:	4253      	negpl	r3, r2
 80068a0:	b21b      	sxth	r3, r3
 80068a2:	81bb      	strh	r3, [r7, #12]

	Hitachi_prms_st[Source_Index].Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80068a4:	89fb      	ldrh	r3, [r7, #14]
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	441a      	add	r2, r3
 80068aa:	89bb      	ldrh	r3, [r7, #12]
 80068ac:	2108      	movs	r1, #8
 80068ae:	4618      	mov	r0, r3
 80068b0:	f7f9 feb0 	bl	8000614 <ExtractBits>
 80068b4:	4602      	mov	r2, r0
 80068b6:	78bb      	ldrb	r3, [r7, #2]
 80068b8:	b2d1      	uxtb	r1, r2
 80068ba:	4a6f      	ldr	r2, [pc, #444]	; (8006a78 <Service_Msg_Extr+0x360>)
 80068bc:	011b      	lsls	r3, r3, #4
 80068be:	4413      	add	r3, r2
 80068c0:	3302      	adds	r3, #2
 80068c2:	460a      	mov	r2, r1
 80068c4:	701a      	strb	r2, [r3, #0]
	//printf("Tx_seq             :%u\n",  Hitachi_prms_st[Source_Index].Rx_Seq);
	BITSTUFFINC(8);
 80068c6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80068ca:	3308      	adds	r3, #8
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	da00      	bge.n	80068d2 <Service_Msg_Extr+0x1ba>
 80068d0:	3307      	adds	r3, #7
 80068d2:	10db      	asrs	r3, r3, #3
 80068d4:	b29a      	uxth	r2, r3
 80068d6:	89fb      	ldrh	r3, [r7, #14]
 80068d8:	4413      	add	r3, r2
 80068da:	81fb      	strh	r3, [r7, #14]
 80068dc:	89bb      	ldrh	r3, [r7, #12]
 80068de:	3308      	adds	r3, #8
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	b21b      	sxth	r3, r3
 80068e4:	425a      	negs	r2, r3
 80068e6:	f003 0307 	and.w	r3, r3, #7
 80068ea:	f002 0207 	and.w	r2, r2, #7
 80068ee:	bf58      	it	pl
 80068f0:	4253      	negpl	r3, r2
 80068f2:	b21b      	sxth	r3, r3
 80068f4:	81bb      	strh	r3, [r7, #12]

	Hitachi_prms_st[Source_Index].Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80068f6:	89fb      	ldrh	r3, [r7, #14]
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	441a      	add	r2, r3
 80068fc:	89bb      	ldrh	r3, [r7, #12]
 80068fe:	2108      	movs	r1, #8
 8006900:	4618      	mov	r0, r3
 8006902:	f7f9 fe87 	bl	8000614 <ExtractBits>
 8006906:	4602      	mov	r2, r0
 8006908:	78bb      	ldrb	r3, [r7, #2]
 800690a:	b2d1      	uxtb	r1, r2
 800690c:	4a5a      	ldr	r2, [pc, #360]	; (8006a78 <Service_Msg_Extr+0x360>)
 800690e:	011b      	lsls	r3, r3, #4
 8006910:	4413      	add	r3, r2
 8006912:	3301      	adds	r3, #1
 8006914:	460a      	mov	r2, r1
 8006916:	701a      	strb	r2, [r3, #0]
	//printf("Rx_Seq             :%u\n",Hitachi_prms_st[Source_Index].Tx_Seq);
	BITSTUFFINC(8);
 8006918:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800691c:	3308      	adds	r3, #8
 800691e:	2b00      	cmp	r3, #0
 8006920:	da00      	bge.n	8006924 <Service_Msg_Extr+0x20c>
 8006922:	3307      	adds	r3, #7
 8006924:	10db      	asrs	r3, r3, #3
 8006926:	b29a      	uxth	r2, r3
 8006928:	89fb      	ldrh	r3, [r7, #14]
 800692a:	4413      	add	r3, r2
 800692c:	81fb      	strh	r3, [r7, #14]
 800692e:	89bb      	ldrh	r3, [r7, #12]
 8006930:	3308      	adds	r3, #8
 8006932:	b29b      	uxth	r3, r3
 8006934:	b21b      	sxth	r3, r3
 8006936:	425a      	negs	r2, r3
 8006938:	f003 0307 	and.w	r3, r3, #7
 800693c:	f002 0207 	and.w	r2, r2, #7
 8006940:	bf58      	it	pl
 8006942:	4253      	negpl	r3, r2
 8006944:	b21b      	sxth	r3, r3
 8006946:	81bb      	strh	r3, [r7, #12]


	Hitachi_Service_st[Source_Index].Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006948:	89fb      	ldrh	r3, [r7, #14]
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	441a      	add	r2, r3
 800694e:	89bb      	ldrh	r3, [r7, #12]
 8006950:	2108      	movs	r1, #8
 8006952:	4618      	mov	r0, r3
 8006954:	f7f9 fe5e 	bl	8000614 <ExtractBits>
 8006958:	4603      	mov	r3, r0
 800695a:	78ba      	ldrb	r2, [r7, #2]
 800695c:	b2d8      	uxtb	r0, r3
 800695e:	4945      	ldr	r1, [pc, #276]	; (8006a74 <Service_Msg_Extr+0x35c>)
 8006960:	4613      	mov	r3, r2
 8006962:	005b      	lsls	r3, r3, #1
 8006964:	4413      	add	r3, r2
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	440b      	add	r3, r1
 800696a:	3302      	adds	r3, #2
 800696c:	4602      	mov	r2, r0
 800696e:	701a      	strb	r2, [r3, #0]
	//printf("Msg_type           :%u\n", Hitachi_Service_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 8006970:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006974:	3308      	adds	r3, #8
 8006976:	2b00      	cmp	r3, #0
 8006978:	da00      	bge.n	800697c <Service_Msg_Extr+0x264>
 800697a:	3307      	adds	r3, #7
 800697c:	10db      	asrs	r3, r3, #3
 800697e:	b29a      	uxth	r2, r3
 8006980:	89fb      	ldrh	r3, [r7, #14]
 8006982:	4413      	add	r3, r2
 8006984:	81fb      	strh	r3, [r7, #14]
 8006986:	89bb      	ldrh	r3, [r7, #12]
 8006988:	3308      	adds	r3, #8
 800698a:	b29b      	uxth	r3, r3
 800698c:	b21b      	sxth	r3, r3
 800698e:	425a      	negs	r2, r3
 8006990:	f003 0307 	and.w	r3, r3, #7
 8006994:	f002 0207 	and.w	r2, r2, #7
 8006998:	bf58      	it	pl
 800699a:	4253      	negpl	r3, r2
 800699c:	b21b      	sxth	r3, r3
 800699e:	81bb      	strh	r3, [r7, #12]


	Hitachi_prms_st[Source_Index].Msg_Status_Flag = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80069a0:	89fb      	ldrh	r3, [r7, #14]
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	441a      	add	r2, r3
 80069a6:	89bb      	ldrh	r3, [r7, #12]
 80069a8:	2110      	movs	r1, #16
 80069aa:	4618      	mov	r0, r3
 80069ac:	f7f9 fe32 	bl	8000614 <ExtractBits>
 80069b0:	4602      	mov	r2, r0
 80069b2:	78bb      	ldrb	r3, [r7, #2]
 80069b4:	b291      	uxth	r1, r2
 80069b6:	4a30      	ldr	r2, [pc, #192]	; (8006a78 <Service_Msg_Extr+0x360>)
 80069b8:	011b      	lsls	r3, r3, #4
 80069ba:	4413      	add	r3, r2
 80069bc:	3304      	adds	r3, #4
 80069be:	460a      	mov	r2, r1
 80069c0:	801a      	strh	r2, [r3, #0]

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 80069c2:	492e      	ldr	r1, [pc, #184]	; (8006a7c <Service_Msg_Extr+0x364>)
 80069c4:	482e      	ldr	r0, [pc, #184]	; (8006a80 <Service_Msg_Extr+0x368>)
 80069c6:	f7f9 fc3b 	bl	8000240 <strcmp>
 80069ca:	4603      	mov	r3, r0
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d10f      	bne.n	80069f0 <Service_Msg_Extr+0x2d8>
	{
		SET_BIT_USER(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag);
 80069d0:	78bb      	ldrb	r3, [r7, #2]
 80069d2:	4a29      	ldr	r2, [pc, #164]	; (8006a78 <Service_Msg_Extr+0x360>)
 80069d4:	011b      	lsls	r3, r3, #4
 80069d6:	4413      	add	r3, r2
 80069d8:	3304      	adds	r3, #4
 80069da:	881a      	ldrh	r2, [r3, #0]
 80069dc:	78bb      	ldrb	r3, [r7, #2]
 80069de:	f042 0208 	orr.w	r2, r2, #8
 80069e2:	b291      	uxth	r1, r2
 80069e4:	4a24      	ldr	r2, [pc, #144]	; (8006a78 <Service_Msg_Extr+0x360>)
 80069e6:	011b      	lsls	r3, r3, #4
 80069e8:	4413      	add	r3, r2
 80069ea:	3304      	adds	r3, #4
 80069ec:	460a      	mov	r2, r1
 80069ee:	801a      	strh	r2, [r3, #0]
	}

	//printf("Msg_Flag           :0x%04X\n", Hitachi_prms_st[Source_Index].Msg_Status_Flag);
	BITSTUFFINC(16);
 80069f0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80069f4:	3310      	adds	r3, #16
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	da00      	bge.n	80069fc <Service_Msg_Extr+0x2e4>
 80069fa:	3307      	adds	r3, #7
 80069fc:	10db      	asrs	r3, r3, #3
 80069fe:	b29a      	uxth	r2, r3
 8006a00:	89fb      	ldrh	r3, [r7, #14]
 8006a02:	4413      	add	r3, r2
 8006a04:	81fb      	strh	r3, [r7, #14]
 8006a06:	89bb      	ldrh	r3, [r7, #12]
 8006a08:	3310      	adds	r3, #16
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	b21b      	sxth	r3, r3
 8006a0e:	425a      	negs	r2, r3
 8006a10:	f003 0307 	and.w	r3, r3, #7
 8006a14:	f002 0207 	and.w	r2, r2, #7
 8006a18:	bf58      	it	pl
 8006a1a:	4253      	negpl	r3, r2
 8006a1c:	b21b      	sxth	r3, r3
 8006a1e:	81bb      	strh	r3, [r7, #12]

	//Debug_Status_Flag(Hitachi_prms_st[Source_Index].Msg_Status_Flag,Hitachi_Service_st[Source_Index].Msg_Type);

	if ( SET == CHECKFLAG(TIME_STAMP,Hitachi_prms_st[Source_Index].Msg_Status_Flag) ) // Time-stamp Extraction
 8006a20:	78bb      	ldrb	r3, [r7, #2]
 8006a22:	4a15      	ldr	r2, [pc, #84]	; (8006a78 <Service_Msg_Extr+0x360>)
 8006a24:	011b      	lsls	r3, r3, #4
 8006a26:	4413      	add	r3, r2
 8006a28:	3304      	adds	r3, #4
 8006a2a:	881b      	ldrh	r3, [r3, #0]
 8006a2c:	f003 0320 	and.w	r3, r3, #32
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	f000 812b 	beq.w	8006c8c <Service_Msg_Extr+0x574>
	{
		HITACHI_time_Stamp_st[Source_Index].YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006a36:	89fb      	ldrh	r3, [r7, #14]
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	441a      	add	r2, r3
 8006a3c:	89bb      	ldrh	r3, [r7, #12]
 8006a3e:	2108      	movs	r1, #8
 8006a40:	4618      	mov	r0, r3
 8006a42:	f7f9 fde7 	bl	8000614 <ExtractBits>
 8006a46:	4603      	mov	r3, r0
 8006a48:	78ba      	ldrb	r2, [r7, #2]
 8006a4a:	b2d8      	uxtb	r0, r3
 8006a4c:	490d      	ldr	r1, [pc, #52]	; (8006a84 <Service_Msg_Extr+0x36c>)
 8006a4e:	4613      	mov	r3, r2
 8006a50:	005b      	lsls	r3, r3, #1
 8006a52:	4413      	add	r3, r2
 8006a54:	005b      	lsls	r3, r3, #1
 8006a56:	440b      	add	r3, r1
 8006a58:	3305      	adds	r3, #5
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	701a      	strb	r2, [r3, #0]
		//printf("YEAR               :%02X\n", HITACHI_time_Stamp_st[Source_Index].YY);
		BITSTUFFINC(8);
 8006a5e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006a62:	3308      	adds	r3, #8
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	da0f      	bge.n	8006a88 <Service_Msg_Extr+0x370>
 8006a68:	3307      	adds	r3, #7
 8006a6a:	e00d      	b.n	8006a88 <Service_Msg_Extr+0x370>
 8006a6c:	20000fb0 	.word	0x20000fb0
 8006a70:	20000fd8 	.word	0x20000fd8
 8006a74:	20001590 	.word	0x20001590
 8006a78:	200011d0 	.word	0x200011d0
 8006a7c:	08023d68 	.word	0x08023d68
 8006a80:	20000305 	.word	0x20000305
 8006a84:	20001194 	.word	0x20001194
 8006a88:	10db      	asrs	r3, r3, #3
 8006a8a:	b29a      	uxth	r2, r3
 8006a8c:	89fb      	ldrh	r3, [r7, #14]
 8006a8e:	4413      	add	r3, r2
 8006a90:	81fb      	strh	r3, [r7, #14]
 8006a92:	89bb      	ldrh	r3, [r7, #12]
 8006a94:	3308      	adds	r3, #8
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	b21b      	sxth	r3, r3
 8006a9a:	425a      	negs	r2, r3
 8006a9c:	f003 0307 	and.w	r3, r3, #7
 8006aa0:	f002 0207 	and.w	r2, r2, #7
 8006aa4:	bf58      	it	pl
 8006aa6:	4253      	negpl	r3, r2
 8006aa8:	b21b      	sxth	r3, r3
 8006aaa:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006aac:	89fb      	ldrh	r3, [r7, #14]
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	441a      	add	r2, r3
 8006ab2:	89bb      	ldrh	r3, [r7, #12]
 8006ab4:	2108      	movs	r1, #8
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f7f9 fdac 	bl	8000614 <ExtractBits>
 8006abc:	4603      	mov	r3, r0
 8006abe:	78ba      	ldrb	r2, [r7, #2]
 8006ac0:	b2d8      	uxtb	r0, r3
 8006ac2:	496e      	ldr	r1, [pc, #440]	; (8006c7c <Service_Msg_Extr+0x564>)
 8006ac4:	4613      	mov	r3, r2
 8006ac6:	005b      	lsls	r3, r3, #1
 8006ac8:	4413      	add	r3, r2
 8006aca:	005b      	lsls	r3, r3, #1
 8006acc:	440b      	add	r3, r1
 8006ace:	3304      	adds	r3, #4
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	701a      	strb	r2, [r3, #0]
		//printf("Month              :%02X\n", HITACHI_time_Stamp_st[Source_Index].MM);
		BITSTUFFINC(8);
 8006ad4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006ad8:	3308      	adds	r3, #8
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	da00      	bge.n	8006ae0 <Service_Msg_Extr+0x3c8>
 8006ade:	3307      	adds	r3, #7
 8006ae0:	10db      	asrs	r3, r3, #3
 8006ae2:	b29a      	uxth	r2, r3
 8006ae4:	89fb      	ldrh	r3, [r7, #14]
 8006ae6:	4413      	add	r3, r2
 8006ae8:	81fb      	strh	r3, [r7, #14]
 8006aea:	89bb      	ldrh	r3, [r7, #12]
 8006aec:	3308      	adds	r3, #8
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	b21b      	sxth	r3, r3
 8006af2:	425a      	negs	r2, r3
 8006af4:	f003 0307 	and.w	r3, r3, #7
 8006af8:	f002 0207 	and.w	r2, r2, #7
 8006afc:	bf58      	it	pl
 8006afe:	4253      	negpl	r3, r2
 8006b00:	b21b      	sxth	r3, r3
 8006b02:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006b04:	89fb      	ldrh	r3, [r7, #14]
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	441a      	add	r2, r3
 8006b0a:	89bb      	ldrh	r3, [r7, #12]
 8006b0c:	2108      	movs	r1, #8
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f7f9 fd80 	bl	8000614 <ExtractBits>
 8006b14:	4603      	mov	r3, r0
 8006b16:	78ba      	ldrb	r2, [r7, #2]
 8006b18:	b2d8      	uxtb	r0, r3
 8006b1a:	4958      	ldr	r1, [pc, #352]	; (8006c7c <Service_Msg_Extr+0x564>)
 8006b1c:	4613      	mov	r3, r2
 8006b1e:	005b      	lsls	r3, r3, #1
 8006b20:	4413      	add	r3, r2
 8006b22:	005b      	lsls	r3, r3, #1
 8006b24:	440b      	add	r3, r1
 8006b26:	3303      	adds	r3, #3
 8006b28:	4602      	mov	r2, r0
 8006b2a:	701a      	strb	r2, [r3, #0]
		//printf("Date               :%02X\n", HITACHI_time_Stamp_st[Source_Index].DD);
		BITSTUFFINC(8);
 8006b2c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006b30:	3308      	adds	r3, #8
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	da00      	bge.n	8006b38 <Service_Msg_Extr+0x420>
 8006b36:	3307      	adds	r3, #7
 8006b38:	10db      	asrs	r3, r3, #3
 8006b3a:	b29a      	uxth	r2, r3
 8006b3c:	89fb      	ldrh	r3, [r7, #14]
 8006b3e:	4413      	add	r3, r2
 8006b40:	81fb      	strh	r3, [r7, #14]
 8006b42:	89bb      	ldrh	r3, [r7, #12]
 8006b44:	3308      	adds	r3, #8
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	b21b      	sxth	r3, r3
 8006b4a:	425a      	negs	r2, r3
 8006b4c:	f003 0307 	and.w	r3, r3, #7
 8006b50:	f002 0207 	and.w	r2, r2, #7
 8006b54:	bf58      	it	pl
 8006b56:	4253      	negpl	r3, r2
 8006b58:	b21b      	sxth	r3, r3
 8006b5a:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006b5c:	89fb      	ldrh	r3, [r7, #14]
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	441a      	add	r2, r3
 8006b62:	89bb      	ldrh	r3, [r7, #12]
 8006b64:	2108      	movs	r1, #8
 8006b66:	4618      	mov	r0, r3
 8006b68:	f7f9 fd54 	bl	8000614 <ExtractBits>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	78ba      	ldrb	r2, [r7, #2]
 8006b70:	b2d8      	uxtb	r0, r3
 8006b72:	4942      	ldr	r1, [pc, #264]	; (8006c7c <Service_Msg_Extr+0x564>)
 8006b74:	4613      	mov	r3, r2
 8006b76:	005b      	lsls	r3, r3, #1
 8006b78:	4413      	add	r3, r2
 8006b7a:	005b      	lsls	r3, r3, #1
 8006b7c:	440b      	add	r3, r1
 8006b7e:	4602      	mov	r2, r0
 8006b80:	701a      	strb	r2, [r3, #0]
		//printf("Hour               :%02X\n", HITACHI_time_Stamp_st[Source_Index].hh);
		BITSTUFFINC(8);
 8006b82:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006b86:	3308      	adds	r3, #8
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	da00      	bge.n	8006b8e <Service_Msg_Extr+0x476>
 8006b8c:	3307      	adds	r3, #7
 8006b8e:	10db      	asrs	r3, r3, #3
 8006b90:	b29a      	uxth	r2, r3
 8006b92:	89fb      	ldrh	r3, [r7, #14]
 8006b94:	4413      	add	r3, r2
 8006b96:	81fb      	strh	r3, [r7, #14]
 8006b98:	89bb      	ldrh	r3, [r7, #12]
 8006b9a:	3308      	adds	r3, #8
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	b21b      	sxth	r3, r3
 8006ba0:	425a      	negs	r2, r3
 8006ba2:	f003 0307 	and.w	r3, r3, #7
 8006ba6:	f002 0207 	and.w	r2, r2, #7
 8006baa:	bf58      	it	pl
 8006bac:	4253      	negpl	r3, r2
 8006bae:	b21b      	sxth	r3, r3
 8006bb0:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006bb2:	89fb      	ldrh	r3, [r7, #14]
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	441a      	add	r2, r3
 8006bb8:	89bb      	ldrh	r3, [r7, #12]
 8006bba:	2108      	movs	r1, #8
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f7f9 fd29 	bl	8000614 <ExtractBits>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	78ba      	ldrb	r2, [r7, #2]
 8006bc6:	b2d8      	uxtb	r0, r3
 8006bc8:	492c      	ldr	r1, [pc, #176]	; (8006c7c <Service_Msg_Extr+0x564>)
 8006bca:	4613      	mov	r3, r2
 8006bcc:	005b      	lsls	r3, r3, #1
 8006bce:	4413      	add	r3, r2
 8006bd0:	005b      	lsls	r3, r3, #1
 8006bd2:	440b      	add	r3, r1
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	701a      	strb	r2, [r3, #0]
		//printf("Minutes            :%02X\n", HITACHI_time_Stamp_st[Source_Index].mm);
		BITSTUFFINC(8);
 8006bda:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006bde:	3308      	adds	r3, #8
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	da00      	bge.n	8006be6 <Service_Msg_Extr+0x4ce>
 8006be4:	3307      	adds	r3, #7
 8006be6:	10db      	asrs	r3, r3, #3
 8006be8:	b29a      	uxth	r2, r3
 8006bea:	89fb      	ldrh	r3, [r7, #14]
 8006bec:	4413      	add	r3, r2
 8006bee:	81fb      	strh	r3, [r7, #14]
 8006bf0:	89bb      	ldrh	r3, [r7, #12]
 8006bf2:	3308      	adds	r3, #8
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	b21b      	sxth	r3, r3
 8006bf8:	425a      	negs	r2, r3
 8006bfa:	f003 0307 	and.w	r3, r3, #7
 8006bfe:	f002 0207 	and.w	r2, r2, #7
 8006c02:	bf58      	it	pl
 8006c04:	4253      	negpl	r3, r2
 8006c06:	b21b      	sxth	r3, r3
 8006c08:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006c0a:	89fb      	ldrh	r3, [r7, #14]
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	441a      	add	r2, r3
 8006c10:	89bb      	ldrh	r3, [r7, #12]
 8006c12:	2108      	movs	r1, #8
 8006c14:	4618      	mov	r0, r3
 8006c16:	f7f9 fcfd 	bl	8000614 <ExtractBits>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	78ba      	ldrb	r2, [r7, #2]
 8006c1e:	b2d8      	uxtb	r0, r3
 8006c20:	4916      	ldr	r1, [pc, #88]	; (8006c7c <Service_Msg_Extr+0x564>)
 8006c22:	4613      	mov	r3, r2
 8006c24:	005b      	lsls	r3, r3, #1
 8006c26:	4413      	add	r3, r2
 8006c28:	005b      	lsls	r3, r3, #1
 8006c2a:	440b      	add	r3, r1
 8006c2c:	3302      	adds	r3, #2
 8006c2e:	4602      	mov	r2, r0
 8006c30:	701a      	strb	r2, [r3, #0]
		//printf("Seconds            :%02X\n", HITACHI_time_Stamp_st[Source_Index].ss);
		BITSTUFFINC(8);
 8006c32:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006c36:	3308      	adds	r3, #8
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	da00      	bge.n	8006c3e <Service_Msg_Extr+0x526>
 8006c3c:	3307      	adds	r3, #7
 8006c3e:	10db      	asrs	r3, r3, #3
 8006c40:	b29a      	uxth	r2, r3
 8006c42:	89fb      	ldrh	r3, [r7, #14]
 8006c44:	4413      	add	r3, r2
 8006c46:	81fb      	strh	r3, [r7, #14]
 8006c48:	89bb      	ldrh	r3, [r7, #12]
 8006c4a:	3308      	adds	r3, #8
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	b21b      	sxth	r3, r3
 8006c50:	425a      	negs	r2, r3
 8006c52:	f003 0307 	and.w	r3, r3, #7
 8006c56:	f002 0207 	and.w	r2, r2, #7
 8006c5a:	bf58      	it	pl
 8006c5c:	4253      	negpl	r3, r2
 8006c5e:	b21b      	sxth	r3, r3
 8006c60:	81bb      	strh	r3, [r7, #12]


		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
 8006c62:	78bb      	ldrb	r3, [r7, #2]
 8006c64:	4618      	mov	r0, r3
 8006c66:	f001 fecb 	bl	8008a00 <IS_MLK_EIPC_TIME_MATCHING>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d009      	beq.n	8006c84 <Service_Msg_Extr+0x56c>
 8006c70:	78bb      	ldrb	r3, [r7, #2]
 8006c72:	4a03      	ldr	r2, [pc, #12]	; (8006c80 <Service_Msg_Extr+0x568>)
 8006c74:	2100      	movs	r1, #0
 8006c76:	54d1      	strb	r1, [r2, r3]
 8006c78:	e008      	b.n	8006c8c <Service_Msg_Extr+0x574>
 8006c7a:	bf00      	nop
 8006c7c:	20001194 	.word	0x20001194
 8006c80:	200010e4 	.word	0x200010e4
 8006c84:	78bb      	ldrb	r3, [r7, #2]
 8006c86:	4a94      	ldr	r2, [pc, #592]	; (8006ed8 <Service_Msg_Extr+0x7c0>)
 8006c88:	2101      	movs	r1, #1
 8006c8a:	54d1      	strb	r1, [r2, r3]

	}
	if ( ( SET == (CHECKFLAG(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag))) )
 8006c8c:	78bb      	ldrb	r3, [r7, #2]
 8006c8e:	4a93      	ldr	r2, [pc, #588]	; (8006edc <Service_Msg_Extr+0x7c4>)
 8006c90:	011b      	lsls	r3, r3, #4
 8006c92:	4413      	add	r3, r2
 8006c94:	3304      	adds	r3, #4
 8006c96:	881b      	ldrh	r3, [r3, #0]
 8006c98:	f003 0308 	and.w	r3, r3, #8
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d001      	beq.n	8006ca4 <Service_Msg_Extr+0x58c>
	{
		LinkEstablishFlag = SET;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	77fb      	strb	r3, [r7, #31]
	}

	/* Preparing and Sending Reply */
	Send_Status_Message(Source_Index, Des_Index);
 8006ca4:	787a      	ldrb	r2, [r7, #1]
 8006ca6:	78bb      	ldrb	r3, [r7, #2]
 8006ca8:	4611      	mov	r1, r2
 8006caa:	4618      	mov	r0, r3
 8006cac:	f7ff f8d0 	bl	8005e50 <Send_Status_Message>


	/*	Checking whether the Link is Established or Not
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */
	if (LinkEstablishFlag == SET )
 8006cb0:	7ffb      	ldrb	r3, [r7, #31]
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d179      	bne.n	8006daa <Service_Msg_Extr+0x692>
	{
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8006cb6:	78ba      	ldrb	r2, [r7, #2]
 8006cb8:	4613      	mov	r3, r2
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	4413      	add	r3, r2
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	4a87      	ldr	r2, [pc, #540]	; (8006ee0 <Service_Msg_Extr+0x7c8>)
 8006cc2:	4413      	add	r3, r2
 8006cc4:	3301      	adds	r3, #1
 8006cc6:	2210      	movs	r2, #16
 8006cc8:	2100      	movs	r1, #0
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f01b fb82 	bl	80223d4 <memset>
		memcpy(&Main_Relays_st[Source_Index],&Relays_st[Source_Index],sizeof(Relays_st[Source_Index]));
 8006cd0:	78ba      	ldrb	r2, [r7, #2]
 8006cd2:	4613      	mov	r3, r2
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	4413      	add	r3, r2
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	4a81      	ldr	r2, [pc, #516]	; (8006ee0 <Service_Msg_Extr+0x7c8>)
 8006cdc:	1898      	adds	r0, r3, r2
 8006cde:	78ba      	ldrb	r2, [r7, #2]
 8006ce0:	4613      	mov	r3, r2
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	4413      	add	r3, r2
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	4a7e      	ldr	r2, [pc, #504]	; (8006ee4 <Service_Msg_Extr+0x7cc>)
 8006cea:	4413      	add	r3, r2
 8006cec:	2214      	movs	r2, #20
 8006cee:	4619      	mov	r1, r3
 8006cf0:	f01b fb48 	bl	8022384 <memcpy>

		if(Prev_Relay_CRC[Source_Index] != Main_Relays_st[Source_Index].RelayIPS_CRC)
 8006cf4:	78bb      	ldrb	r3, [r7, #2]
 8006cf6:	4a7c      	ldr	r2, [pc, #496]	; (8006ee8 <Service_Msg_Extr+0x7d0>)
 8006cf8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8006cfc:	78ba      	ldrb	r2, [r7, #2]
 8006cfe:	4878      	ldr	r0, [pc, #480]	; (8006ee0 <Service_Msg_Extr+0x7c8>)
 8006d00:	4613      	mov	r3, r2
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	4413      	add	r3, r2
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	4403      	add	r3, r0
 8006d0a:	3312      	adds	r3, #18
 8006d0c:	881b      	ldrh	r3, [r3, #0]
 8006d0e:	4299      	cmp	r1, r3
 8006d10:	d04b      	beq.n	8006daa <Service_Msg_Extr+0x692>
		{
			Prev_Relay_CRC[Source_Index] = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8006d12:	78ba      	ldrb	r2, [r7, #2]
 8006d14:	78b9      	ldrb	r1, [r7, #2]
 8006d16:	4872      	ldr	r0, [pc, #456]	; (8006ee0 <Service_Msg_Extr+0x7c8>)
 8006d18:	4613      	mov	r3, r2
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	4413      	add	r3, r2
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	4403      	add	r3, r0
 8006d22:	3312      	adds	r3, #18
 8006d24:	881a      	ldrh	r2, [r3, #0]
 8006d26:	4b70      	ldr	r3, [pc, #448]	; (8006ee8 <Service_Msg_Extr+0x7d0>)
 8006d28:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			memset(&Tx_Temp_Main_Relays_st,0,sizeof(Tx_Temp_Main_Relays_st));
 8006d2c:	2214      	movs	r2, #20
 8006d2e:	2100      	movs	r1, #0
 8006d30:	486e      	ldr	r0, [pc, #440]	; (8006eec <Service_Msg_Extr+0x7d4>)
 8006d32:	f01b fb4f 	bl	80223d4 <memset>
			memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Source_Index],sizeof(Tx_Temp_Main_Relays_st));
 8006d36:	78ba      	ldrb	r2, [r7, #2]
 8006d38:	4613      	mov	r3, r2
 8006d3a:	009b      	lsls	r3, r3, #2
 8006d3c:	4413      	add	r3, r2
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	4a67      	ldr	r2, [pc, #412]	; (8006ee0 <Service_Msg_Extr+0x7c8>)
 8006d42:	4413      	add	r3, r2
 8006d44:	2214      	movs	r2, #20
 8006d46:	4619      	mov	r1, r3
 8006d48:	4868      	ldr	r0, [pc, #416]	; (8006eec <Service_Msg_Extr+0x7d4>)
 8006d4a:	f01b fb1b 	bl	8022384 <memcpy>

#ifdef EI_1
			TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
#endif
#ifdef EI_2
			TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
 8006d4e:	f44f 7002 	mov.w	r0, #520	; 0x208
 8006d52:	f008 fbed 	bl	800f530 <TransmitCanPkt>
#endif

			Tx_Ei_self_sharing_st[Source_Index].VITAL_DATA_CRC = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8006d56:	78b9      	ldrb	r1, [r7, #2]
 8006d58:	78ba      	ldrb	r2, [r7, #2]
 8006d5a:	4861      	ldr	r0, [pc, #388]	; (8006ee0 <Service_Msg_Extr+0x7c8>)
 8006d5c:	460b      	mov	r3, r1
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	440b      	add	r3, r1
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	4403      	add	r3, r0
 8006d66:	3312      	adds	r3, #18
 8006d68:	8818      	ldrh	r0, [r3, #0]
 8006d6a:	4961      	ldr	r1, [pc, #388]	; (8006ef0 <Service_Msg_Extr+0x7d8>)
 8006d6c:	4613      	mov	r3, r2
 8006d6e:	005b      	lsls	r3, r3, #1
 8006d70:	4413      	add	r3, r2
 8006d72:	00db      	lsls	r3, r3, #3
 8006d74:	440b      	add	r3, r1
 8006d76:	3306      	adds	r3, #6
 8006d78:	4602      	mov	r2, r0
 8006d7a:	801a      	strh	r2, [r3, #0]

			if(MisMatchFlag[Source_Index] == 0)
 8006d7c:	78bb      	ldrb	r3, [r7, #2]
 8006d7e:	4a5d      	ldr	r2, [pc, #372]	; (8006ef4 <Service_Msg_Extr+0x7dc>)
 8006d80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d110      	bne.n	8006daa <Service_Msg_Extr+0x692>
			{
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Source_Index * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Source_Index].RelayIPS_Buff,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8006d88:	78bb      	ldrb	r3, [r7, #2]
 8006d8a:	011b      	lsls	r3, r3, #4
 8006d8c:	4a5a      	ldr	r2, [pc, #360]	; (8006ef8 <Service_Msg_Extr+0x7e0>)
 8006d8e:	4413      	add	r3, r2
 8006d90:	1c98      	adds	r0, r3, #2
 8006d92:	78ba      	ldrb	r2, [r7, #2]
 8006d94:	4613      	mov	r3, r2
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	4413      	add	r3, r2
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	4a50      	ldr	r2, [pc, #320]	; (8006ee0 <Service_Msg_Extr+0x7c8>)
 8006d9e:	4413      	add	r3, r2
 8006da0:	3301      	adds	r3, #1
 8006da2:	2210      	movs	r2, #16
 8006da4:	4619      	mov	r1, r3
 8006da6:	f01b faed 	bl	8022384 <memcpy>
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */


	/* Sending Information to Other card */
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_CRC = Recv_CRC;
 8006daa:	78ba      	ldrb	r2, [r7, #2]
 8006dac:	4950      	ldr	r1, [pc, #320]	; (8006ef0 <Service_Msg_Extr+0x7d8>)
 8006dae:	4613      	mov	r3, r2
 8006db0:	005b      	lsls	r3, r3, #1
 8006db2:	4413      	add	r3, r2
 8006db4:	00db      	lsls	r3, r3, #3
 8006db6:	440b      	add	r3, r1
 8006db8:	3314      	adds	r3, #20
 8006dba:	697a      	ldr	r2, [r7, #20]
 8006dbc:	601a      	str	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_Msg_Type = SERVICEMSG;
 8006dbe:	78ba      	ldrb	r2, [r7, #2]
 8006dc0:	494b      	ldr	r1, [pc, #300]	; (8006ef0 <Service_Msg_Extr+0x7d8>)
 8006dc2:	4613      	mov	r3, r2
 8006dc4:	005b      	lsls	r3, r3, #1
 8006dc6:	4413      	add	r3, r2
 8006dc8:	00db      	lsls	r3, r3, #3
 8006dca:	440b      	add	r3, r1
 8006dcc:	3305      	adds	r3, #5
 8006dce:	2206      	movs	r2, #6
 8006dd0:	701a      	strb	r2, [r3, #0]

	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 8006dd2:	78ba      	ldrb	r2, [r7, #2]
 8006dd4:	4946      	ldr	r1, [pc, #280]	; (8006ef0 <Service_Msg_Extr+0x7d8>)
 8006dd6:	4613      	mov	r3, r2
 8006dd8:	005b      	lsls	r3, r3, #1
 8006dda:	4413      	add	r3, r2
 8006ddc:	00db      	lsls	r3, r3, #3
 8006dde:	440b      	add	r3, r1
 8006de0:	78ba      	ldrb	r2, [r7, #2]
 8006de2:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 8006de4:	78ba      	ldrb	r2, [r7, #2]
 8006de6:	4942      	ldr	r1, [pc, #264]	; (8006ef0 <Service_Msg_Extr+0x7d8>)
 8006de8:	4613      	mov	r3, r2
 8006dea:	005b      	lsls	r3, r3, #1
 8006dec:	4413      	add	r3, r2
 8006dee:	00db      	lsls	r3, r3, #3
 8006df0:	440b      	add	r3, r1
 8006df2:	3301      	adds	r3, #1
 8006df4:	2201      	movs	r2, #1
 8006df6:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].LinkEstablishFlag = LinkEstablishFlag;
 8006df8:	78ba      	ldrb	r2, [r7, #2]
 8006dfa:	493d      	ldr	r1, [pc, #244]	; (8006ef0 <Service_Msg_Extr+0x7d8>)
 8006dfc:	4613      	mov	r3, r2
 8006dfe:	005b      	lsls	r3, r3, #1
 8006e00:	4413      	add	r3, r2
 8006e02:	00db      	lsls	r3, r3, #3
 8006e04:	440b      	add	r3, r1
 8006e06:	3302      	adds	r3, #2
 8006e08:	7ffa      	ldrb	r2, [r7, #31]
 8006e0a:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8006e0c:	2218      	movs	r2, #24
 8006e0e:	2100      	movs	r1, #0
 8006e10:	483a      	ldr	r0, [pc, #232]	; (8006efc <Service_Msg_Extr+0x7e4>)
 8006e12:	f01b fadf 	bl	80223d4 <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 8006e16:	78ba      	ldrb	r2, [r7, #2]
 8006e18:	4613      	mov	r3, r2
 8006e1a:	005b      	lsls	r3, r3, #1
 8006e1c:	4413      	add	r3, r2
 8006e1e:	00db      	lsls	r3, r3, #3
 8006e20:	4a33      	ldr	r2, [pc, #204]	; (8006ef0 <Service_Msg_Extr+0x7d8>)
 8006e22:	4413      	add	r3, r2
 8006e24:	2218      	movs	r2, #24
 8006e26:	4619      	mov	r1, r3
 8006e28:	4834      	ldr	r0, [pc, #208]	; (8006efc <Service_Msg_Extr+0x7e4>)
 8006e2a:	f01b faab 	bl	8022384 <memcpy>
#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
 8006e2e:	f240 2002 	movw	r0, #514	; 0x202
 8006e32:	f008 fb7d 	bl	800f530 <TransmitCanPkt>
#endif
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 8006e36:	78ba      	ldrb	r2, [r7, #2]
 8006e38:	492d      	ldr	r1, [pc, #180]	; (8006ef0 <Service_Msg_Extr+0x7d8>)
 8006e3a:	4613      	mov	r3, r2
 8006e3c:	005b      	lsls	r3, r3, #1
 8006e3e:	4413      	add	r3, r2
 8006e40:	00db      	lsls	r3, r3, #3
 8006e42:	440b      	add	r3, r1
 8006e44:	3301      	adds	r3, #1
 8006e46:	2200      	movs	r2, #0
 8006e48:	701a      	strb	r2, [r3, #0]
	Self_Sharing_CAN_Clk[Source_Index] = Ticks;
 8006e4a:	78bb      	ldrb	r3, [r7, #2]
 8006e4c:	492c      	ldr	r1, [pc, #176]	; (8006f00 <Service_Msg_Extr+0x7e8>)
 8006e4e:	693a      	ldr	r2, [r7, #16]
 8006e50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	/* Sending Information to Other card */


	/*	Checking Link Status */
	if( LinkEstablishFlag == SET)
 8006e54:	7ffb      	ldrb	r3, [r7, #31]
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d11d      	bne.n	8006e96 <Service_Msg_Extr+0x77e>
	{
		Link_Establish_Clock[Source_Index] = Ticks;
 8006e5a:	78bb      	ldrb	r3, [r7, #2]
 8006e5c:	4929      	ldr	r1, [pc, #164]	; (8006f04 <Service_Msg_Extr+0x7ec>)
 8006e5e:	693a      	ldr	r2, [r7, #16]
 8006e60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Link_Flag[Source_Index] = SET;
 8006e64:	78bb      	ldrb	r3, [r7, #2]
 8006e66:	4a28      	ldr	r2, [pc, #160]	; (8006f08 <Service_Msg_Extr+0x7f0>)
 8006e68:	2101      	movs	r1, #1
 8006e6a:	54d1      	strb	r1, [r2, r3]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = SET;
 8006e6c:	78ba      	ldrb	r2, [r7, #2]
 8006e6e:	4927      	ldr	r1, [pc, #156]	; (8006f0c <Service_Msg_Extr+0x7f4>)
 8006e70:	4613      	mov	r3, r2
 8006e72:	005b      	lsls	r3, r3, #1
 8006e74:	4413      	add	r3, r2
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	440b      	add	r3, r1
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	701a      	strb	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishClk = Ticks;
 8006e80:	78ba      	ldrb	r2, [r7, #2]
 8006e82:	4922      	ldr	r1, [pc, #136]	; (8006f0c <Service_Msg_Extr+0x7f4>)
 8006e84:	4613      	mov	r3, r2
 8006e86:	005b      	lsls	r3, r3, #1
 8006e88:	4413      	add	r3, r2
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	440b      	add	r3, r1
 8006e8e:	3304      	adds	r3, #4
 8006e90:	693a      	ldr	r2, [r7, #16]
 8006e92:	601a      	str	r2, [r3, #0]
 8006e94:	e017      	b.n	8006ec6 <Service_Msg_Extr+0x7ae>
	}
	else
	{
		Link_Flag[Source_Index] = CLEAR;
 8006e96:	78bb      	ldrb	r3, [r7, #2]
 8006e98:	4a1b      	ldr	r2, [pc, #108]	; (8006f08 <Service_Msg_Extr+0x7f0>)
 8006e9a:	2100      	movs	r1, #0
 8006e9c:	54d1      	strb	r1, [r2, r3]
		Hitachi_clk_flags_st[Source_Index].Link_FailClk = Ticks;
 8006e9e:	78ba      	ldrb	r2, [r7, #2]
 8006ea0:	491a      	ldr	r1, [pc, #104]	; (8006f0c <Service_Msg_Extr+0x7f4>)
 8006ea2:	4613      	mov	r3, r2
 8006ea4:	005b      	lsls	r3, r3, #1
 8006ea6:	4413      	add	r3, r2
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	440b      	add	r3, r1
 8006eac:	3308      	adds	r3, #8
 8006eae:	693a      	ldr	r2, [r7, #16]
 8006eb0:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = CLEAR;
 8006eb2:	78ba      	ldrb	r2, [r7, #2]
 8006eb4:	4915      	ldr	r1, [pc, #84]	; (8006f0c <Service_Msg_Extr+0x7f4>)
 8006eb6:	4613      	mov	r3, r2
 8006eb8:	005b      	lsls	r3, r3, #1
 8006eba:	4413      	add	r3, r2
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	440b      	add	r3, r1
 8006ec0:	3301      	adds	r3, #1
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	701a      	strb	r2, [r3, #0]
	}
	/*	Checking Link Status */

	HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 8006ec6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006eca:	4811      	ldr	r0, [pc, #68]	; (8006f10 <Service_Msg_Extr+0x7f8>)
 8006ecc:	f011 f849 	bl	8017f62 <HAL_GPIO_TogglePin>

}
 8006ed0:	3720      	adds	r7, #32
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	200010e4 	.word	0x200010e4
 8006edc:	200011d0 	.word	0x200011d0
 8006ee0:	20001e8c 	.word	0x20001e8c
 8006ee4:	20001dc4 	.word	0x20001dc4
 8006ee8:	20000f0c 	.word	0x20000f0c
 8006eec:	2000201c 	.word	0x2000201c
 8006ef0:	20001680 	.word	0x20001680
 8006ef4:	20000ed0 	.word	0x20000ed0
 8006ef8:	200010f0 	.word	0x200010f0
 8006efc:	20001860 	.word	0x20001860
 8006f00:	20000e50 	.word	0x20000e50
 8006f04:	20000f20 	.word	0x20000f20
 8006f08:	20000f70 	.word	0x20000f70
 8006f0c:	20001cd4 	.word	0x20001cd4
 8006f10:	40021c00 	.word	0x40021c00

08006f14 <Send_Service_Signal_Message>:

void Send_Service_Signal_Message(uint8_t Source_Index,uint8_t Des_Index)
{
 8006f14:	b590      	push	{r4, r7, lr}
 8006f16:	b095      	sub	sp, #84	; 0x54
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	460a      	mov	r2, r1
 8006f1e:	71fb      	strb	r3, [r7, #7]
 8006f20:	4613      	mov	r3, r2
 8006f22:	71bb      	strb	r3, [r7, #6]
	uint8_t Transmit_Buff[60] = {0,};
 8006f24:	2300      	movs	r3, #0
 8006f26:	60fb      	str	r3, [r7, #12]
 8006f28:	f107 0310 	add.w	r3, r7, #16
 8006f2c:	2238      	movs	r2, #56	; 0x38
 8006f2e:	2100      	movs	r1, #0
 8006f30:	4618      	mov	r0, r3
 8006f32:	f01b fa4f 	bl	80223d4 <memset>

	BITSTUFFINIT(0, 0);
 8006f36:	2300      	movs	r3, #0
 8006f38:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_SOM); //Destination Address
 8006f42:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006f46:	f107 020c 	add.w	r2, r7, #12
 8006f4a:	441a      	add	r2, r3
 8006f4c:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8006f50:	23f4      	movs	r3, #244	; 0xf4
 8006f52:	2108      	movs	r1, #8
 8006f54:	f7f9 fbea 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8006f58:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8006f5c:	3308      	adds	r3, #8
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	da00      	bge.n	8006f64 <Send_Service_Signal_Message+0x50>
 8006f62:	3307      	adds	r3, #7
 8006f64:	10db      	asrs	r3, r3, #3
 8006f66:	b29a      	uxth	r2, r3
 8006f68:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006f6c:	4413      	add	r3, r2
 8006f6e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006f72:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006f76:	3308      	adds	r3, #8
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	b21b      	sxth	r3, r3
 8006f7c:	425a      	negs	r2, r3
 8006f7e:	f003 0307 	and.w	r3, r3, #7
 8006f82:	f002 0207 	and.w	r2, r2, #7
 8006f86:	bf58      	it	pl
 8006f88:	4253      	negpl	r3, r2
 8006f8a:	b21b      	sxth	r3, r3
 8006f8c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]); //Destination Address
 8006f90:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006f94:	f107 020c 	add.w	r2, r7, #12
 8006f98:	441a      	add	r2, r3
 8006f9a:	79fb      	ldrb	r3, [r7, #7]
 8006f9c:	497b      	ldr	r1, [pc, #492]	; (800718c <Send_Service_Signal_Message+0x278>)
 8006f9e:	3366      	adds	r3, #102	; 0x66
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	440b      	add	r3, r1
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8006faa:	2110      	movs	r1, #16
 8006fac:	f7f9 fbbe 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8006fb0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8006fb4:	3310      	adds	r3, #16
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	da00      	bge.n	8006fbc <Send_Service_Signal_Message+0xa8>
 8006fba:	3307      	adds	r3, #7
 8006fbc:	10db      	asrs	r3, r3, #3
 8006fbe:	b29a      	uxth	r2, r3
 8006fc0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006fc4:	4413      	add	r3, r2
 8006fc6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006fca:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006fce:	3310      	adds	r3, #16
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	b21b      	sxth	r3, r3
 8006fd4:	425a      	negs	r2, r3
 8006fd6:	f003 0307 	and.w	r3, r3, #7
 8006fda:	f002 0207 	and.w	r2, r2, #7
 8006fde:	bf58      	it	pl
 8006fe0:	4253      	negpl	r3, r2
 8006fe2:	b21b      	sxth	r3, r3
 8006fe4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]); //Source Address
 8006fe8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006fec:	f107 020c 	add.w	r2, r7, #12
 8006ff0:	441a      	add	r2, r3
 8006ff2:	79fb      	ldrb	r3, [r7, #7]
 8006ff4:	4965      	ldr	r1, [pc, #404]	; (800718c <Send_Service_Signal_Message+0x278>)
 8006ff6:	3370      	adds	r3, #112	; 0x70
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	440b      	add	r3, r1
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007002:	2110      	movs	r1, #16
 8007004:	f7f9 fb92 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8007008:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800700c:	3310      	adds	r3, #16
 800700e:	2b00      	cmp	r3, #0
 8007010:	da00      	bge.n	8007014 <Send_Service_Signal_Message+0x100>
 8007012:	3307      	adds	r3, #7
 8007014:	10db      	asrs	r3, r3, #3
 8007016:	b29a      	uxth	r2, r3
 8007018:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800701c:	4413      	add	r3, r2
 800701e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007022:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007026:	3310      	adds	r3, #16
 8007028:	b29b      	uxth	r3, r3
 800702a:	b21b      	sxth	r3, r3
 800702c:	425a      	negs	r2, r3
 800702e:	f003 0307 	and.w	r3, r3, #7
 8007032:	f002 0207 	and.w	r2, r2, #7
 8007036:	bf58      	it	pl
 8007038:	4253      	negpl	r3, r2
 800703a:	b21b      	sxth	r3, r3
 800703c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( ( (CHECKFLAG(2,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8007040:	4b53      	ldr	r3, [pc, #332]	; (8007190 <Send_Service_Signal_Message+0x27c>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	089b      	lsrs	r3, r3, #2
 8007046:	f003 0301 	and.w	r3, r3, #1
 800704a:	2b00      	cmp	r3, #0
 800704c:	d035      	beq.n	80070ba <Send_Service_Signal_Message+0x1a6>
 800704e:	4b50      	ldr	r3, [pc, #320]	; (8007190 <Send_Service_Signal_Message+0x27c>)
 8007050:	791b      	ldrb	r3, [r3, #4]
 8007052:	79fa      	ldrb	r2, [r7, #7]
 8007054:	429a      	cmp	r2, r3
 8007056:	d130      	bne.n	80070ba <Send_Service_Signal_Message+0x1a6>
	{
		uint8_t Rand_number = 0;
 8007058:	2300      	movs	r3, #0
 800705a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
#ifdef STM_32
		Rand_number = (HAL_RNG_GetRandomNumber(&hrng) % 200);
 800705e:	484d      	ldr	r0, [pc, #308]	; (8007194 <Send_Service_Signal_Message+0x280>)
 8007060:	f012 ff48 	bl	8019ef4 <HAL_RNG_GetRandomNumber>
 8007064:	4602      	mov	r2, r0
 8007066:	4b4c      	ldr	r3, [pc, #304]	; (8007198 <Send_Service_Signal_Message+0x284>)
 8007068:	fba3 1302 	umull	r1, r3, r3, r2
 800706c:	099b      	lsrs	r3, r3, #6
 800706e:	21c8      	movs	r1, #200	; 0xc8
 8007070:	fb01 f303 	mul.w	r3, r1, r3
 8007074:	1ad3      	subs	r3, r2, r3
 8007076:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
#endif
		printf("Injected TX Sequence value failure\n");
 800707a:	4848      	ldr	r0, [pc, #288]	; (800719c <Send_Service_Signal_Message+0x288>)
 800707c:	f01b fb2e 	bl	80226dc <puts>
		printf("Actual TX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Tx_Seq);
 8007080:	79fb      	ldrb	r3, [r7, #7]
 8007082:	4a47      	ldr	r2, [pc, #284]	; (80071a0 <Send_Service_Signal_Message+0x28c>)
 8007084:	011b      	lsls	r3, r3, #4
 8007086:	4413      	add	r3, r2
 8007088:	3301      	adds	r3, #1
 800708a:	781b      	ldrb	r3, [r3, #0]
 800708c:	4619      	mov	r1, r3
 800708e:	4845      	ldr	r0, [pc, #276]	; (80071a4 <Send_Service_Signal_Message+0x290>)
 8007090:	f01b fa88 	bl	80225a4 <iprintf>
		printf("Injected TX Sequence Value:%u\n",Rand_number);
 8007094:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007098:	4619      	mov	r1, r3
 800709a:	4843      	ldr	r0, [pc, #268]	; (80071a8 <Send_Service_Signal_Message+0x294>)
 800709c:	f01b fa82 	bl	80225a4 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_number); // TX Seq Number
 80070a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80070a4:	f107 020c 	add.w	r2, r7, #12
 80070a8:	441a      	add	r2, r3
 80070aa:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80070ae:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80070b2:	2108      	movs	r1, #8
 80070b4:	f7f9 fb3a 	bl	800072c <InsertBits>
	{
 80070b8:	e00f      	b.n	80070da <Send_Service_Signal_Message+0x1c6>
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Seq); // TX Seq Number
 80070ba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80070be:	f107 020c 	add.w	r2, r7, #12
 80070c2:	441a      	add	r2, r3
 80070c4:	79fb      	ldrb	r3, [r7, #7]
 80070c6:	4936      	ldr	r1, [pc, #216]	; (80071a0 <Send_Service_Signal_Message+0x28c>)
 80070c8:	011b      	lsls	r3, r3, #4
 80070ca:	440b      	add	r3, r1
 80070cc:	3301      	adds	r3, #1
 80070ce:	781b      	ldrb	r3, [r3, #0]
 80070d0:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80070d4:	2108      	movs	r1, #8
 80070d6:	f7f9 fb29 	bl	800072c <InsertBits>
		//Last Received Packet Rx_seq number is our TX_Seq Number
	}
	//Last Received Packet Rx_seq number is our TX_Seq Number
	BITSTUFFINC(8);
 80070da:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80070de:	3308      	adds	r3, #8
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	da00      	bge.n	80070e6 <Send_Service_Signal_Message+0x1d2>
 80070e4:	3307      	adds	r3, #7
 80070e6:	10db      	asrs	r3, r3, #3
 80070e8:	b29a      	uxth	r2, r3
 80070ea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80070ee:	4413      	add	r3, r2
 80070f0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80070f4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80070f8:	3308      	adds	r3, #8
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	b21b      	sxth	r3, r3
 80070fe:	425a      	negs	r2, r3
 8007100:	f003 0307 	and.w	r3, r3, #7
 8007104:	f002 0207 	and.w	r2, r2, #7
 8007108:	bf58      	it	pl
 800710a:	4253      	negpl	r3, r2
 800710c:	b21b      	sxth	r3, r3
 800710e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( ( (CHECKFLAG(3,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8007112:	4b1f      	ldr	r3, [pc, #124]	; (8007190 <Send_Service_Signal_Message+0x27c>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	08db      	lsrs	r3, r3, #3
 8007118:	f003 0301 	and.w	r3, r3, #1
 800711c:	2b00      	cmp	r3, #0
 800711e:	d04b      	beq.n	80071b8 <Send_Service_Signal_Message+0x2a4>
 8007120:	4b1b      	ldr	r3, [pc, #108]	; (8007190 <Send_Service_Signal_Message+0x27c>)
 8007122:	791b      	ldrb	r3, [r3, #4]
 8007124:	79fa      	ldrb	r2, [r7, #7]
 8007126:	429a      	cmp	r2, r3
 8007128:	d146      	bne.n	80071b8 <Send_Service_Signal_Message+0x2a4>
	{
		uint8_t Rand_number = 0;
 800712a:	2300      	movs	r3, #0
 800712c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
#ifdef STM_32
		Rand_number = (HAL_RNG_GetRandomNumber(&hrng) % 200);
 8007130:	4818      	ldr	r0, [pc, #96]	; (8007194 <Send_Service_Signal_Message+0x280>)
 8007132:	f012 fedf 	bl	8019ef4 <HAL_RNG_GetRandomNumber>
 8007136:	4602      	mov	r2, r0
 8007138:	4b17      	ldr	r3, [pc, #92]	; (8007198 <Send_Service_Signal_Message+0x284>)
 800713a:	fba3 1302 	umull	r1, r3, r3, r2
 800713e:	099b      	lsrs	r3, r3, #6
 8007140:	21c8      	movs	r1, #200	; 0xc8
 8007142:	fb01 f303 	mul.w	r3, r1, r3
 8007146:	1ad3      	subs	r3, r2, r3
 8007148:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
#endif
		printf("Injected RX Sequence value failure\n");
 800714c:	4817      	ldr	r0, [pc, #92]	; (80071ac <Send_Service_Signal_Message+0x298>)
 800714e:	f01b fac5 	bl	80226dc <puts>
		printf("Actual RX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Rx_Seq);
 8007152:	79fb      	ldrb	r3, [r7, #7]
 8007154:	4a12      	ldr	r2, [pc, #72]	; (80071a0 <Send_Service_Signal_Message+0x28c>)
 8007156:	011b      	lsls	r3, r3, #4
 8007158:	4413      	add	r3, r2
 800715a:	3302      	adds	r3, #2
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	4619      	mov	r1, r3
 8007160:	4813      	ldr	r0, [pc, #76]	; (80071b0 <Send_Service_Signal_Message+0x29c>)
 8007162:	f01b fa1f 	bl	80225a4 <iprintf>
		printf("Injected RX Vital Init Value:%u\n",Rand_number);
 8007166:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800716a:	4619      	mov	r1, r3
 800716c:	4811      	ldr	r0, [pc, #68]	; (80071b4 <Send_Service_Signal_Message+0x2a0>)
 800716e:	f01b fa19 	bl	80225a4 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_number); // Rx Seq Number
 8007172:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007176:	f107 020c 	add.w	r2, r7, #12
 800717a:	441a      	add	r2, r3
 800717c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8007180:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007184:	2108      	movs	r1, #8
 8007186:	f7f9 fad1 	bl	800072c <InsertBits>
	{
 800718a:	e033      	b.n	80071f4 <Send_Service_Signal_Message+0x2e0>
 800718c:	20000304 	.word	0x20000304
 8007190:	20001968 	.word	0x20001968
 8007194:	20009c84 	.word	0x20009c84
 8007198:	51eb851f 	.word	0x51eb851f
 800719c:	08024110 	.word	0x08024110
 80071a0:	200011d0 	.word	0x200011d0
 80071a4:	080246b4 	.word	0x080246b4
 80071a8:	080246d4 	.word	0x080246d4
 80071ac:	08024174 	.word	0x08024174
 80071b0:	080246f4 	.word	0x080246f4
 80071b4:	08024714 	.word	0x08024714
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], ++Hitachi_prms_st[Source_Index].Rx_Seq); // Rx Seq Number
 80071b8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80071bc:	f107 020c 	add.w	r2, r7, #12
 80071c0:	18d1      	adds	r1, r2, r3
 80071c2:	79fb      	ldrb	r3, [r7, #7]
 80071c4:	484e      	ldr	r0, [pc, #312]	; (8007300 <Send_Service_Signal_Message+0x3ec>)
 80071c6:	011a      	lsls	r2, r3, #4
 80071c8:	4402      	add	r2, r0
 80071ca:	3202      	adds	r2, #2
 80071cc:	7812      	ldrb	r2, [r2, #0]
 80071ce:	3201      	adds	r2, #1
 80071d0:	b2d4      	uxtb	r4, r2
 80071d2:	484b      	ldr	r0, [pc, #300]	; (8007300 <Send_Service_Signal_Message+0x3ec>)
 80071d4:	011a      	lsls	r2, r3, #4
 80071d6:	4402      	add	r2, r0
 80071d8:	3202      	adds	r2, #2
 80071da:	4620      	mov	r0, r4
 80071dc:	7010      	strb	r0, [r2, #0]
 80071de:	4a48      	ldr	r2, [pc, #288]	; (8007300 <Send_Service_Signal_Message+0x3ec>)
 80071e0:	011b      	lsls	r3, r3, #4
 80071e2:	4413      	add	r3, r2
 80071e4:	3302      	adds	r3, #2
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80071ec:	460a      	mov	r2, r1
 80071ee:	2108      	movs	r1, #8
 80071f0:	f7f9 fa9c 	bl	800072c <InsertBits>
		//Last Received Packet Tx_seq number is our Rx_Seq Number incremented by 1.
	}
	BITSTUFFINC(8);
 80071f4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80071f8:	3308      	adds	r3, #8
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	da00      	bge.n	8007200 <Send_Service_Signal_Message+0x2ec>
 80071fe:	3307      	adds	r3, #7
 8007200:	10db      	asrs	r3, r3, #3
 8007202:	b29a      	uxth	r2, r3
 8007204:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007208:	4413      	add	r3, r2
 800720a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800720e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007212:	3308      	adds	r3, #8
 8007214:	b29b      	uxth	r3, r3
 8007216:	b21b      	sxth	r3, r3
 8007218:	425a      	negs	r2, r3
 800721a:	f003 0307 	and.w	r3, r3, #7
 800721e:	f002 0207 	and.w	r2, r2, #7
 8007222:	bf58      	it	pl
 8007224:	4253      	negpl	r3, r2
 8007226:	b21b      	sxth	r3, r3
 8007228:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], SERVICEMSG);
 800722c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007230:	f107 020c 	add.w	r2, r7, #12
 8007234:	441a      	add	r2, r3
 8007236:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800723a:	2306      	movs	r3, #6
 800723c:	2108      	movs	r1, #8
 800723e:	f7f9 fa75 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007242:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007246:	3308      	adds	r3, #8
 8007248:	2b00      	cmp	r3, #0
 800724a:	da00      	bge.n	800724e <Send_Service_Signal_Message+0x33a>
 800724c:	3307      	adds	r3, #7
 800724e:	10db      	asrs	r3, r3, #3
 8007250:	b29a      	uxth	r2, r3
 8007252:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007256:	4413      	add	r3, r2
 8007258:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800725c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007260:	3308      	adds	r3, #8
 8007262:	b29b      	uxth	r3, r3
 8007264:	b21b      	sxth	r3, r3
 8007266:	425a      	negs	r2, r3
 8007268:	f003 0307 	and.w	r3, r3, #7
 800726c:	f002 0207 	and.w	r2, r2, #7
 8007270:	bf58      	it	pl
 8007272:	4253      	negpl	r3, r2
 8007274:	b21b      	sxth	r3, r3
 8007276:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c



	if(Change_MLK_TIME[Source_Index]== 1)
 800727a:	79fb      	ldrb	r3, [r7, #7]
 800727c:	4a21      	ldr	r2, [pc, #132]	; (8007304 <Send_Service_Signal_Message+0x3f0>)
 800727e:	5cd3      	ldrb	r3, [r2, r3]
 8007280:	2b01      	cmp	r3, #1
 8007282:	d147      	bne.n	8007314 <Send_Service_Signal_Message+0x400>
	{
		Get_time();
 8007284:	f003 ff82 	bl	800b18c <Get_time>
		memcpy(&HITACHI_time_Stamp_st[Source_Index],&RTC_Date_time_BCD_st,sizeof(GPS_DATE_TIME_t));
 8007288:	79fa      	ldrb	r2, [r7, #7]
 800728a:	4613      	mov	r3, r2
 800728c:	005b      	lsls	r3, r3, #1
 800728e:	4413      	add	r3, r2
 8007290:	005b      	lsls	r3, r3, #1
 8007292:	4a1d      	ldr	r2, [pc, #116]	; (8007308 <Send_Service_Signal_Message+0x3f4>)
 8007294:	4413      	add	r3, r2
 8007296:	4a1d      	ldr	r2, [pc, #116]	; (800730c <Send_Service_Signal_Message+0x3f8>)
 8007298:	6811      	ldr	r1, [r2, #0]
 800729a:	6019      	str	r1, [r3, #0]
 800729c:	8892      	ldrh	r2, [r2, #4]
 800729e:	809a      	strh	r2, [r3, #4]
		printf("Sending Updated Time\n");
 80072a0:	481b      	ldr	r0, [pc, #108]	; (8007310 <Send_Service_Signal_Message+0x3fc>)
 80072a2:	f01b fa1b 	bl	80226dc <puts>
		Change_MLK_TIME[Source_Index] = 0;
 80072a6:	79fb      	ldrb	r3, [r7, #7]
 80072a8:	4a16      	ldr	r2, [pc, #88]	; (8007304 <Send_Service_Signal_Message+0x3f0>)
 80072aa:	2100      	movs	r1, #0
 80072ac:	54d1      	strb	r1, [r2, r3]
		InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x0069);
 80072ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80072b2:	f107 020c 	add.w	r2, r7, #12
 80072b6:	441a      	add	r2, r3
 80072b8:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80072bc:	2369      	movs	r3, #105	; 0x69
 80072be:	2110      	movs	r1, #16
 80072c0:	f7f9 fa34 	bl	800072c <InsertBits>
		BITSTUFFINC(16);
 80072c4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80072c8:	3310      	adds	r3, #16
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	da00      	bge.n	80072d0 <Send_Service_Signal_Message+0x3bc>
 80072ce:	3307      	adds	r3, #7
 80072d0:	10db      	asrs	r3, r3, #3
 80072d2:	b29a      	uxth	r2, r3
 80072d4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80072d8:	4413      	add	r3, r2
 80072da:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80072de:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80072e2:	3310      	adds	r3, #16
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	b21b      	sxth	r3, r3
 80072e8:	425a      	negs	r2, r3
 80072ea:	f003 0307 	and.w	r3, r3, #7
 80072ee:	f002 0207 	and.w	r2, r2, #7
 80072f2:	bf58      	it	pl
 80072f4:	4253      	negpl	r3, r2
 80072f6:	b21b      	sxth	r3, r3
 80072f8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80072fc:	e031      	b.n	8007362 <Send_Service_Signal_Message+0x44e>
 80072fe:	bf00      	nop
 8007300:	200011d0 	.word	0x200011d0
 8007304:	200010e4 	.word	0x200010e4
 8007308:	20001194 	.word	0x20001194
 800730c:	200027f4 	.word	0x200027f4
 8007310:	08024490 	.word	0x08024490
	}
	else
	{
		InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x0029);
 8007314:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007318:	f107 020c 	add.w	r2, r7, #12
 800731c:	441a      	add	r2, r3
 800731e:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007322:	2329      	movs	r3, #41	; 0x29
 8007324:	2110      	movs	r1, #16
 8007326:	f7f9 fa01 	bl	800072c <InsertBits>
		BITSTUFFINC(16);
 800732a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800732e:	3310      	adds	r3, #16
 8007330:	2b00      	cmp	r3, #0
 8007332:	da00      	bge.n	8007336 <Send_Service_Signal_Message+0x422>
 8007334:	3307      	adds	r3, #7
 8007336:	10db      	asrs	r3, r3, #3
 8007338:	b29a      	uxth	r2, r3
 800733a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800733e:	4413      	add	r3, r2
 8007340:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007344:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007348:	3310      	adds	r3, #16
 800734a:	b29b      	uxth	r3, r3
 800734c:	b21b      	sxth	r3, r3
 800734e:	425a      	negs	r2, r3
 8007350:	f003 0307 	and.w	r3, r3, #7
 8007354:	f002 0207 	and.w	r2, r2, #7
 8007358:	bf58      	it	pl
 800735a:	4253      	negpl	r3, r2
 800735c:	b21b      	sxth	r3, r3
 800735e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	}

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].YY);
 8007362:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007366:	f107 020c 	add.w	r2, r7, #12
 800736a:	18d1      	adds	r1, r2, r3
 800736c:	79fa      	ldrb	r2, [r7, #7]
 800736e:	48b5      	ldr	r0, [pc, #724]	; (8007644 <Send_Service_Signal_Message+0x730>)
 8007370:	4613      	mov	r3, r2
 8007372:	005b      	lsls	r3, r3, #1
 8007374:	4413      	add	r3, r2
 8007376:	005b      	lsls	r3, r3, #1
 8007378:	4403      	add	r3, r0
 800737a:	3305      	adds	r3, #5
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007382:	460a      	mov	r2, r1
 8007384:	2108      	movs	r1, #8
 8007386:	f7f9 f9d1 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 800738a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800738e:	3308      	adds	r3, #8
 8007390:	2b00      	cmp	r3, #0
 8007392:	da00      	bge.n	8007396 <Send_Service_Signal_Message+0x482>
 8007394:	3307      	adds	r3, #7
 8007396:	10db      	asrs	r3, r3, #3
 8007398:	b29a      	uxth	r2, r3
 800739a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800739e:	4413      	add	r3, r2
 80073a0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80073a4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80073a8:	3308      	adds	r3, #8
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	b21b      	sxth	r3, r3
 80073ae:	425a      	negs	r2, r3
 80073b0:	f003 0307 	and.w	r3, r3, #7
 80073b4:	f002 0207 	and.w	r2, r2, #7
 80073b8:	bf58      	it	pl
 80073ba:	4253      	negpl	r3, r2
 80073bc:	b21b      	sxth	r3, r3
 80073be:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].MM);
 80073c2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80073c6:	f107 020c 	add.w	r2, r7, #12
 80073ca:	18d1      	adds	r1, r2, r3
 80073cc:	79fa      	ldrb	r2, [r7, #7]
 80073ce:	489d      	ldr	r0, [pc, #628]	; (8007644 <Send_Service_Signal_Message+0x730>)
 80073d0:	4613      	mov	r3, r2
 80073d2:	005b      	lsls	r3, r3, #1
 80073d4:	4413      	add	r3, r2
 80073d6:	005b      	lsls	r3, r3, #1
 80073d8:	4403      	add	r3, r0
 80073da:	3304      	adds	r3, #4
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80073e2:	460a      	mov	r2, r1
 80073e4:	2108      	movs	r1, #8
 80073e6:	f7f9 f9a1 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80073ea:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80073ee:	3308      	adds	r3, #8
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	da00      	bge.n	80073f6 <Send_Service_Signal_Message+0x4e2>
 80073f4:	3307      	adds	r3, #7
 80073f6:	10db      	asrs	r3, r3, #3
 80073f8:	b29a      	uxth	r2, r3
 80073fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80073fe:	4413      	add	r3, r2
 8007400:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007404:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007408:	3308      	adds	r3, #8
 800740a:	b29b      	uxth	r3, r3
 800740c:	b21b      	sxth	r3, r3
 800740e:	425a      	negs	r2, r3
 8007410:	f003 0307 	and.w	r3, r3, #7
 8007414:	f002 0207 	and.w	r2, r2, #7
 8007418:	bf58      	it	pl
 800741a:	4253      	negpl	r3, r2
 800741c:	b21b      	sxth	r3, r3
 800741e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].DD);
 8007422:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007426:	f107 020c 	add.w	r2, r7, #12
 800742a:	18d1      	adds	r1, r2, r3
 800742c:	79fa      	ldrb	r2, [r7, #7]
 800742e:	4885      	ldr	r0, [pc, #532]	; (8007644 <Send_Service_Signal_Message+0x730>)
 8007430:	4613      	mov	r3, r2
 8007432:	005b      	lsls	r3, r3, #1
 8007434:	4413      	add	r3, r2
 8007436:	005b      	lsls	r3, r3, #1
 8007438:	4403      	add	r3, r0
 800743a:	3303      	adds	r3, #3
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007442:	460a      	mov	r2, r1
 8007444:	2108      	movs	r1, #8
 8007446:	f7f9 f971 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 800744a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800744e:	3308      	adds	r3, #8
 8007450:	2b00      	cmp	r3, #0
 8007452:	da00      	bge.n	8007456 <Send_Service_Signal_Message+0x542>
 8007454:	3307      	adds	r3, #7
 8007456:	10db      	asrs	r3, r3, #3
 8007458:	b29a      	uxth	r2, r3
 800745a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800745e:	4413      	add	r3, r2
 8007460:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007464:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007468:	3308      	adds	r3, #8
 800746a:	b29b      	uxth	r3, r3
 800746c:	b21b      	sxth	r3, r3
 800746e:	425a      	negs	r2, r3
 8007470:	f003 0307 	and.w	r3, r3, #7
 8007474:	f002 0207 	and.w	r2, r2, #7
 8007478:	bf58      	it	pl
 800747a:	4253      	negpl	r3, r2
 800747c:	b21b      	sxth	r3, r3
 800747e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].hh);
 8007482:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007486:	f107 020c 	add.w	r2, r7, #12
 800748a:	18d1      	adds	r1, r2, r3
 800748c:	79fa      	ldrb	r2, [r7, #7]
 800748e:	486d      	ldr	r0, [pc, #436]	; (8007644 <Send_Service_Signal_Message+0x730>)
 8007490:	4613      	mov	r3, r2
 8007492:	005b      	lsls	r3, r3, #1
 8007494:	4413      	add	r3, r2
 8007496:	005b      	lsls	r3, r3, #1
 8007498:	4403      	add	r3, r0
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80074a0:	460a      	mov	r2, r1
 80074a2:	2108      	movs	r1, #8
 80074a4:	f7f9 f942 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80074a8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80074ac:	3308      	adds	r3, #8
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	da00      	bge.n	80074b4 <Send_Service_Signal_Message+0x5a0>
 80074b2:	3307      	adds	r3, #7
 80074b4:	10db      	asrs	r3, r3, #3
 80074b6:	b29a      	uxth	r2, r3
 80074b8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80074bc:	4413      	add	r3, r2
 80074be:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80074c2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80074c6:	3308      	adds	r3, #8
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	b21b      	sxth	r3, r3
 80074cc:	425a      	negs	r2, r3
 80074ce:	f003 0307 	and.w	r3, r3, #7
 80074d2:	f002 0207 	and.w	r2, r2, #7
 80074d6:	bf58      	it	pl
 80074d8:	4253      	negpl	r3, r2
 80074da:	b21b      	sxth	r3, r3
 80074dc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].mm);
 80074e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80074e4:	f107 020c 	add.w	r2, r7, #12
 80074e8:	18d1      	adds	r1, r2, r3
 80074ea:	79fa      	ldrb	r2, [r7, #7]
 80074ec:	4855      	ldr	r0, [pc, #340]	; (8007644 <Send_Service_Signal_Message+0x730>)
 80074ee:	4613      	mov	r3, r2
 80074f0:	005b      	lsls	r3, r3, #1
 80074f2:	4413      	add	r3, r2
 80074f4:	005b      	lsls	r3, r3, #1
 80074f6:	4403      	add	r3, r0
 80074f8:	3301      	adds	r3, #1
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007500:	460a      	mov	r2, r1
 8007502:	2108      	movs	r1, #8
 8007504:	f7f9 f912 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007508:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800750c:	3308      	adds	r3, #8
 800750e:	2b00      	cmp	r3, #0
 8007510:	da00      	bge.n	8007514 <Send_Service_Signal_Message+0x600>
 8007512:	3307      	adds	r3, #7
 8007514:	10db      	asrs	r3, r3, #3
 8007516:	b29a      	uxth	r2, r3
 8007518:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800751c:	4413      	add	r3, r2
 800751e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007522:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007526:	3308      	adds	r3, #8
 8007528:	b29b      	uxth	r3, r3
 800752a:	b21b      	sxth	r3, r3
 800752c:	425a      	negs	r2, r3
 800752e:	f003 0307 	and.w	r3, r3, #7
 8007532:	f002 0207 	and.w	r2, r2, #7
 8007536:	bf58      	it	pl
 8007538:	4253      	negpl	r3, r2
 800753a:	b21b      	sxth	r3, r3
 800753c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].ss);
 8007540:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007544:	f107 020c 	add.w	r2, r7, #12
 8007548:	18d1      	adds	r1, r2, r3
 800754a:	79fa      	ldrb	r2, [r7, #7]
 800754c:	483d      	ldr	r0, [pc, #244]	; (8007644 <Send_Service_Signal_Message+0x730>)
 800754e:	4613      	mov	r3, r2
 8007550:	005b      	lsls	r3, r3, #1
 8007552:	4413      	add	r3, r2
 8007554:	005b      	lsls	r3, r3, #1
 8007556:	4403      	add	r3, r0
 8007558:	3302      	adds	r3, #2
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007560:	460a      	mov	r2, r1
 8007562:	2108      	movs	r1, #8
 8007564:	f7f9 f8e2 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007568:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800756c:	3308      	adds	r3, #8
 800756e:	2b00      	cmp	r3, #0
 8007570:	da00      	bge.n	8007574 <Send_Service_Signal_Message+0x660>
 8007572:	3307      	adds	r3, #7
 8007574:	10db      	asrs	r3, r3, #3
 8007576:	b29a      	uxth	r2, r3
 8007578:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800757c:	4413      	add	r3, r2
 800757e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007582:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007586:	3308      	adds	r3, #8
 8007588:	b29b      	uxth	r3, r3
 800758a:	b21b      	sxth	r3, r3
 800758c:	425a      	negs	r2, r3
 800758e:	f003 0307 	and.w	r3, r3, #7
 8007592:	f002 0207 	and.w	r2, r2, #7
 8007596:	bf58      	it	pl
 8007598:	4253      	negpl	r3, r2
 800759a:	b21b      	sxth	r3, r3
 800759c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], CalculateDirectReverseCrc(Transmit_Buff, ucByte));
 80075a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80075a4:	f107 020c 	add.w	r2, r7, #12
 80075a8:	18d4      	adds	r4, r2, r3
 80075aa:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80075ae:	f107 030c 	add.w	r3, r7, #12
 80075b2:	4611      	mov	r1, r2
 80075b4:	4618      	mov	r0, r3
 80075b6:	f00b fc13 	bl	8012de0 <CalculateDirectReverseCrc>
 80075ba:	4603      	mov	r3, r0
 80075bc:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80075c0:	4622      	mov	r2, r4
 80075c2:	2120      	movs	r1, #32
 80075c4:	f7f9 f8b2 	bl	800072c <InsertBits>
	BITSTUFFINC(32);
 80075c8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80075cc:	3320      	adds	r3, #32
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	da00      	bge.n	80075d4 <Send_Service_Signal_Message+0x6c0>
 80075d2:	3307      	adds	r3, #7
 80075d4:	10db      	asrs	r3, r3, #3
 80075d6:	b29a      	uxth	r2, r3
 80075d8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80075dc:	4413      	add	r3, r2
 80075de:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80075e2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80075e6:	3320      	adds	r3, #32
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	b21b      	sxth	r3, r3
 80075ec:	425a      	negs	r2, r3
 80075ee:	f003 0307 	and.w	r3, r3, #7
 80075f2:	f002 0207 	and.w	r2, r2, #7
 80075f6:	bf58      	it	pl
 80075f8:	4253      	negpl	r3, r2
 80075fa:	b21b      	sxth	r3, r3
 80075fc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( ( CHECKFLAG(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)== SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8007600:	4b11      	ldr	r3, [pc, #68]	; (8007648 <Send_Service_Signal_Message+0x734>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	0a5b      	lsrs	r3, r3, #9
 8007606:	f003 0301 	and.w	r3, r3, #1
 800760a:	2b00      	cmp	r3, #0
 800760c:	d00b      	beq.n	8007626 <Send_Service_Signal_Message+0x712>
 800760e:	4b0e      	ldr	r3, [pc, #56]	; (8007648 <Send_Service_Signal_Message+0x734>)
 8007610:	791b      	ldrb	r3, [r3, #4]
 8007612:	79fa      	ldrb	r2, [r7, #7]
 8007614:	429a      	cmp	r2, r3
 8007616:	d106      	bne.n	8007626 <Send_Service_Signal_Message+0x712>
	{
		printf("Injected ETH tx Fail\n");
 8007618:	480c      	ldr	r0, [pc, #48]	; (800764c <Send_Service_Signal_Message+0x738>)
 800761a:	f01b f85f 	bl	80226dc <puts>
		printf("Not Sending Reply");
 800761e:	480c      	ldr	r0, [pc, #48]	; (8007650 <Send_Service_Signal_Message+0x73c>)
 8007620:	f01a ffc0 	bl	80225a4 <iprintf>
 8007624:	e009      	b.n	800763a <Send_Service_Signal_Message+0x726>
	}
	else
	{
		Process_Sending_Reply(Transmit_Buff,ucByte,Source_Index);
 8007626:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800762a:	b2d9      	uxtb	r1, r3
 800762c:	79fa      	ldrb	r2, [r7, #7]
 800762e:	f107 030c 	add.w	r3, r7, #12
 8007632:	4618      	mov	r0, r3
 8007634:	f000 f80e 	bl	8007654 <Process_Sending_Reply>
	}
}
 8007638:	bf00      	nop
 800763a:	bf00      	nop
 800763c:	3754      	adds	r7, #84	; 0x54
 800763e:	46bd      	mov	sp, r7
 8007640:	bd90      	pop	{r4, r7, pc}
 8007642:	bf00      	nop
 8007644:	20001194 	.word	0x20001194
 8007648:	20001968 	.word	0x20001968
 800764c:	08024240 	.word	0x08024240
 8007650:	08024258 	.word	0x08024258

08007654 <Process_Sending_Reply>:

void Process_Sending_Reply(uint8_t *Transmit_Buff, uint8_t Length,uint8_t Source_Index)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b09c      	sub	sp, #112	; 0x70
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	460b      	mov	r3, r1
 800765e:	70fb      	strb	r3, [r7, #3]
 8007660:	4613      	mov	r3, r2
 8007662:	70bb      	strb	r3, [r7, #2]
	uint8_t Temp_Buff[100] = {0,};
 8007664:	2300      	movs	r3, #0
 8007666:	60bb      	str	r3, [r7, #8]
 8007668:	f107 030c 	add.w	r3, r7, #12
 800766c:	2260      	movs	r2, #96	; 0x60
 800766e:	2100      	movs	r1, #0
 8007670:	4618      	mov	r0, r3
 8007672:	f01a feaf 	bl	80223d4 <memset>
	uint8_t uc_index = 0;
 8007676:	2300      	movs	r3, #0
 8007678:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	uint8_t Temp_Index = 0;
 800767c:	2300      	movs	r3, #0
 800767e:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e

	//memset(Temp_Buff,0,sizeof(Temp_Buff));
	//Print_EI_DATA(Transmit_Buff,XMT,Length);

	//	printf("Reply Packet:\n");
	Temp_Buff[Temp_Index++] = Transmit_Buff[0];
 8007682:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8007686:	1c5a      	adds	r2, r3, #1
 8007688:	f887 206e 	strb.w	r2, [r7, #110]	; 0x6e
 800768c:	4619      	mov	r1, r3
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	781a      	ldrb	r2, [r3, #0]
 8007692:	f101 0370 	add.w	r3, r1, #112	; 0x70
 8007696:	443b      	add	r3, r7
 8007698:	f803 2c68 	strb.w	r2, [r3, #-104]
	for (uc_index = 1; uc_index < Length; ++uc_index)
 800769c:	2301      	movs	r3, #1
 800769e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80076a2:	e03c      	b.n	800771e <Process_Sending_Reply+0xca>
	{
		if ((Transmit_Buff[uc_index] >= 0xF0) && (Transmit_Buff[uc_index] <= 0xFF))
 80076a4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	4413      	add	r3, r2
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	2bef      	cmp	r3, #239	; 0xef
 80076b0:	d922      	bls.n	80076f8 <Process_Sending_Reply+0xa4>
		{
			Temp_Buff[Temp_Index++] = Transmit_Buff[uc_index] & 0xF0;
 80076b2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80076b6:	687a      	ldr	r2, [r7, #4]
 80076b8:	4413      	add	r3, r2
 80076ba:	781a      	ldrb	r2, [r3, #0]
 80076bc:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80076c0:	1c59      	adds	r1, r3, #1
 80076c2:	f887 106e 	strb.w	r1, [r7, #110]	; 0x6e
 80076c6:	f022 020f 	bic.w	r2, r2, #15
 80076ca:	b2d2      	uxtb	r2, r2
 80076cc:	3370      	adds	r3, #112	; 0x70
 80076ce:	443b      	add	r3, r7
 80076d0:	f803 2c68 	strb.w	r2, [r3, #-104]
			Temp_Buff[Temp_Index++] = Transmit_Buff[uc_index] & 0x0F;
 80076d4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	4413      	add	r3, r2
 80076dc:	781a      	ldrb	r2, [r3, #0]
 80076de:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80076e2:	1c59      	adds	r1, r3, #1
 80076e4:	f887 106e 	strb.w	r1, [r7, #110]	; 0x6e
 80076e8:	f002 020f 	and.w	r2, r2, #15
 80076ec:	b2d2      	uxtb	r2, r2
 80076ee:	3370      	adds	r3, #112	; 0x70
 80076f0:	443b      	add	r3, r7
 80076f2:	f803 2c68 	strb.w	r2, [r3, #-104]
 80076f6:	e00d      	b.n	8007714 <Process_Sending_Reply+0xc0>
		}
		else
		{
			Temp_Buff[Temp_Index++] = Transmit_Buff[uc_index];
 80076f8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	441a      	add	r2, r3
 8007700:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8007704:	1c59      	adds	r1, r3, #1
 8007706:	f887 106e 	strb.w	r1, [r7, #110]	; 0x6e
 800770a:	7812      	ldrb	r2, [r2, #0]
 800770c:	3370      	adds	r3, #112	; 0x70
 800770e:	443b      	add	r3, r7
 8007710:	f803 2c68 	strb.w	r2, [r3, #-104]
	for (uc_index = 1; uc_index < Length; ++uc_index)
 8007714:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007718:	3301      	adds	r3, #1
 800771a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800771e:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8007722:	78fb      	ldrb	r3, [r7, #3]
 8007724:	429a      	cmp	r2, r3
 8007726:	d3bd      	bcc.n	80076a4 <Process_Sending_Reply+0x50>
		}
	}
	Temp_Buff[Temp_Index++] = 0xf6;
 8007728:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800772c:	1c5a      	adds	r2, r3, #1
 800772e:	f887 206e 	strb.w	r2, [r7, #110]	; 0x6e
 8007732:	3370      	adds	r3, #112	; 0x70
 8007734:	443b      	add	r3, r7
 8007736:	22f6      	movs	r2, #246	; 0xf6
 8007738:	f803 2c68 	strb.w	r2, [r3, #-104]
	//	{
	//		printf("0x%02X|", Temp_Buff[uc_index]);
	//	}
	//	printf("\n");

	if( (SEND_FORCE_REPLY[Source_Index] == SET) && (Rx_Print_st.Size == 0) && (Debug_flag == 1) )
 800773c:	78bb      	ldrb	r3, [r7, #2]
 800773e:	4a37      	ldr	r2, [pc, #220]	; (800781c <Process_Sending_Reply+0x1c8>)
 8007740:	5cd3      	ldrb	r3, [r2, r3]
 8007742:	2b01      	cmp	r3, #1
 8007744:	d10b      	bne.n	800775e <Process_Sending_Reply+0x10a>
 8007746:	4b36      	ldr	r3, [pc, #216]	; (8007820 <Process_Sending_Reply+0x1cc>)
 8007748:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800774c:	2b00      	cmp	r3, #0
 800774e:	d106      	bne.n	800775e <Process_Sending_Reply+0x10a>
 8007750:	4b34      	ldr	r3, [pc, #208]	; (8007824 <Process_Sending_Reply+0x1d0>)
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	2b01      	cmp	r3, #1
 8007756:	d102      	bne.n	800775e <Process_Sending_Reply+0x10a>
	{
		Display("\n________________________________________MSG DETAILS________________________________________\n");
 8007758:	4833      	ldr	r0, [pc, #204]	; (8007828 <Process_Sending_Reply+0x1d4>)
 800775a:	f000 fea1 	bl	80084a0 <Display>
	}

	//	if( (EI_data.Hitachi_st.Interface_Type[Source_Index] == ETHERNET) && ((Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY == RECEIVED) || (SEND_FORCE_REPLY[Source_Index] == SET)))
	//if( (EI_data.Hitachi_st.Interface_Type[Source_Index] == ETHERNET) || ((Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY == RECEIVED) || (SEND_FORCE_REPLY[Source_Index] == SET)))
	if(EI_data.Hitachi_st.Interface_Type[Source_Index] == ETHERNET)
 800775e:	78bb      	ldrb	r3, [r7, #2]
 8007760:	4a32      	ldr	r2, [pc, #200]	; (800782c <Process_Sending_Reply+0x1d8>)
 8007762:	4413      	add	r3, r2
 8007764:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007768:	2b01      	cmp	r3, #1
 800776a:	d10d      	bne.n	8007788 <Process_Sending_Reply+0x134>
		//printf("Sending Reply:%s\n",ipaddr_ntoa(&Recv_IP_List[0]));
		//printf("\n");
		//		char *SendingIP = ipaddr_ntoa(&Recv_IP_List[Source_Index]);
		//		printf("\nSent IP[%lu]:%s\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index], SendingIP);

		udpClient_send(Temp_Buff, Temp_Index,Recv_IP_List[Source_Index]);
 800776c:	78bb      	ldrb	r3, [r7, #2]
 800776e:	4a30      	ldr	r2, [pc, #192]	; (8007830 <Process_Sending_Reply+0x1dc>)
 8007770:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
 8007774:	f107 0008 	add.w	r0, r7, #8
 8007778:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800777c:	f007 fccc 	bl	800f118 <udpClient_send>
		//udpClient_send(Temp_Buff, Temp_Index,Recv_IP_List[0]); //Only for IRISET
		SEND_FORCE_REPLY[Source_Index] = CLEAR;
 8007780:	78bb      	ldrb	r3, [r7, #2]
 8007782:	4a26      	ldr	r2, [pc, #152]	; (800781c <Process_Sending_Reply+0x1c8>)
 8007784:	2100      	movs	r1, #0
 8007786:	54d1      	strb	r1, [r2, r3]
	//	else
	//	{
	//		printf("\nNot sending:%u\n",Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY);
	//	}

	if(	EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL)
 8007788:	78bb      	ldrb	r3, [r7, #2]
 800778a:	4a28      	ldr	r2, [pc, #160]	; (800782c <Process_Sending_Reply+0x1d8>)
 800778c:	4413      	add	r3, r2
 800778e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007792:	2b02      	cmp	r3, #2
 8007794:	d119      	bne.n	80077ca <Process_Sending_Reply+0x176>
	{
		for(uint16_t i=0;i<Temp_Index;++i)
 8007796:	2300      	movs	r3, #0
 8007798:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800779c:	e00e      	b.n	80077bc <Process_Sending_Reply+0x168>
		{
			Com_SendByte(THREE_PORT, Temp_Buff[i]);
 800779e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80077a2:	3370      	adds	r3, #112	; 0x70
 80077a4:	443b      	add	r3, r7
 80077a6:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 80077aa:	4619      	mov	r1, r3
 80077ac:	2003      	movs	r0, #3
 80077ae:	f00d fc97 	bl	80150e0 <Com_SendByte>
		for(uint16_t i=0;i<Temp_Index;++i)
 80077b2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80077b6:	3301      	adds	r3, #1
 80077b8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 80077bc:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d3e9      	bcc.n	800779e <Process_Sending_Reply+0x14a>
			//printf("%02X ",Temp_Buff[i]);
		}
	}


	if(Debug_flag == 1)
 80077ca:	4b16      	ldr	r3, [pc, #88]	; (8007824 <Process_Sending_Reply+0x1d0>)
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d102      	bne.n	80077d8 <Process_Sending_Reply+0x184>
	{
		Display("\n________________________________________MSG DETAILS________________________________________\n");
 80077d2:	4815      	ldr	r0, [pc, #84]	; (8007828 <Process_Sending_Reply+0x1d4>)
 80077d4:	f000 fe64 	bl	80084a0 <Display>
	//	else
	//	{
	//		Display("\n");
	//	}

	if(Rx_Print_st.Size)//To Print Received Data
 80077d8:	4b11      	ldr	r3, [pc, #68]	; (8007820 <Process_Sending_Reply+0x1cc>)
 80077da:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d00b      	beq.n	80077fa <Process_Sending_Reply+0x1a6>
	{
		Print_EI_DATA(Rx_Print_st.Print_Buff, RCV, Rx_Print_st.Size);
 80077e2:	4b0f      	ldr	r3, [pc, #60]	; (8007820 <Process_Sending_Reply+0x1cc>)
 80077e4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80077e8:	461a      	mov	r2, r3
 80077ea:	2101      	movs	r1, #1
 80077ec:	480c      	ldr	r0, [pc, #48]	; (8007820 <Process_Sending_Reply+0x1cc>)
 80077ee:	f000 fcb1 	bl	8008154 <Print_EI_DATA>
		Rx_Print_st.Size = 0;
 80077f2:	4b0b      	ldr	r3, [pc, #44]	; (8007820 <Process_Sending_Reply+0x1cc>)
 80077f4:	2200      	movs	r2, #0
 80077f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	}

	Print_EI_DATA(Transmit_Buff,XMT,Length); //To Print Transmitted data
 80077fa:	78fb      	ldrb	r3, [r7, #3]
 80077fc:	461a      	mov	r2, r3
 80077fe:	2100      	movs	r1, #0
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f000 fca7 	bl	8008154 <Print_EI_DATA>

	if(Debug_flag == 1)
 8007806:	4b07      	ldr	r3, [pc, #28]	; (8007824 <Process_Sending_Reply+0x1d0>)
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	2b01      	cmp	r3, #1
 800780c:	d102      	bne.n	8007814 <Process_Sending_Reply+0x1c0>
	{
		Display("___________________________________________________________________________________________\n");
 800780e:	4809      	ldr	r0, [pc, #36]	; (8007834 <Process_Sending_Reply+0x1e0>)
 8007810:	f000 fe46 	bl	80084a0 <Display>
	}
	//	else
	//	{
	//		Display("\n");
	//	}
}
 8007814:	bf00      	nop
 8007816:	3770      	adds	r7, #112	; 0x70
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}
 800781c:	200010d8 	.word	0x200010d8
 8007820:	20001c1c 	.word	0x20001c1c
 8007824:	20000645 	.word	0x20000645
 8007828:	08024758 	.word	0x08024758
 800782c:	20000304 	.word	0x20000304
 8007830:	20001064 	.word	0x20001064
 8007834:	080247b8 	.word	0x080247b8

08007838 <Check_Primary_r_Secondary>:
	printf("\n");
}


void Check_Primary_r_Secondary(uint8_t Source_Index)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b084      	sub	sp, #16
 800783c:	af00      	add	r7, sp, #0
 800783e:	4603      	mov	r3, r0
 8007840:	71fb      	strb	r3, [r7, #7]
	uint32_t CurTicks = HAL_GetTick();
 8007842:	f00d fea5 	bl	8015590 <HAL_GetTick>
 8007846:	60f8      	str	r0, [r7, #12]
	if(EI_data.Hitachi_st.Interface_Type[Source_Index] ==  SERIAL)
 8007848:	79fb      	ldrb	r3, [r7, #7]
 800784a:	4a7c      	ldr	r2, [pc, #496]	; (8007a3c <Check_Primary_r_Secondary+0x204>)
 800784c:	4413      	add	r3, r2
 800784e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007852:	2b02      	cmp	r3, #2
 8007854:	f000 80ee 	beq.w	8007a34 <Check_Primary_r_Secondary+0x1fc>
		return;
	}
	else
	{
		//_______________________ DECIDING PRIMARY OR SECONDARY _________________________________________
		if( (Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == NOT_RECEIVED) && (Rx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == NOT_RECEIVED) )
 8007858:	79fa      	ldrb	r2, [r7, #7]
 800785a:	4979      	ldr	r1, [pc, #484]	; (8007a40 <Check_Primary_r_Secondary+0x208>)
 800785c:	4613      	mov	r3, r2
 800785e:	005b      	lsls	r3, r3, #1
 8007860:	4413      	add	r3, r2
 8007862:	00db      	lsls	r3, r3, #3
 8007864:	440b      	add	r3, r1
 8007866:	3303      	adds	r3, #3
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d12b      	bne.n	80078c6 <Check_Primary_r_Secondary+0x8e>
 800786e:	79fa      	ldrb	r2, [r7, #7]
 8007870:	4974      	ldr	r1, [pc, #464]	; (8007a44 <Check_Primary_r_Secondary+0x20c>)
 8007872:	4613      	mov	r3, r2
 8007874:	005b      	lsls	r3, r3, #1
 8007876:	4413      	add	r3, r2
 8007878:	00db      	lsls	r3, r3, #3
 800787a:	440b      	add	r3, r1
 800787c:	3303      	adds	r3, #3
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d120      	bne.n	80078c6 <Check_Primary_r_Secondary+0x8e>
		{
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != SECONDARY)
 8007884:	79fa      	ldrb	r2, [r7, #7]
 8007886:	496e      	ldr	r1, [pc, #440]	; (8007a40 <Check_Primary_r_Secondary+0x208>)
 8007888:	4613      	mov	r3, r2
 800788a:	005b      	lsls	r3, r3, #1
 800788c:	4413      	add	r3, r2
 800788e:	00db      	lsls	r3, r3, #3
 8007890:	440b      	add	r3, r1
 8007892:	3304      	adds	r3, #4
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	2b00      	cmp	r3, #0
 8007898:	f000 80cd 	beq.w	8007a36 <Check_Primary_r_Secondary+0x1fe>
			{
				printf("Both Cards not Receiving data, Shifting to Secondary:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 800789c:	79fb      	ldrb	r3, [r7, #7]
 800789e:	4a67      	ldr	r2, [pc, #412]	; (8007a3c <Check_Primary_r_Secondary+0x204>)
 80078a0:	3366      	adds	r3, #102	; 0x66
 80078a2:	009b      	lsls	r3, r3, #2
 80078a4:	4413      	add	r3, r2
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	4619      	mov	r1, r3
 80078aa:	4867      	ldr	r0, [pc, #412]	; (8007a48 <Check_Primary_r_Secondary+0x210>)
 80078ac:	f01a fe7a 	bl	80225a4 <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY = SECONDARY;
 80078b0:	79fa      	ldrb	r2, [r7, #7]
 80078b2:	4963      	ldr	r1, [pc, #396]	; (8007a40 <Check_Primary_r_Secondary+0x208>)
 80078b4:	4613      	mov	r3, r2
 80078b6:	005b      	lsls	r3, r3, #1
 80078b8:	4413      	add	r3, r2
 80078ba:	00db      	lsls	r3, r3, #3
 80078bc:	440b      	add	r3, r1
 80078be:	3304      	adds	r3, #4
 80078c0:	2200      	movs	r2, #0
 80078c2:	701a      	strb	r2, [r3, #0]
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != SECONDARY)
 80078c4:	e0b7      	b.n	8007a36 <Check_Primary_r_Secondary+0x1fe>
			}
		}
		else if( (Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == NOT_RECEIVED) && (Rx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == RECEIVED) )
 80078c6:	79fa      	ldrb	r2, [r7, #7]
 80078c8:	495d      	ldr	r1, [pc, #372]	; (8007a40 <Check_Primary_r_Secondary+0x208>)
 80078ca:	4613      	mov	r3, r2
 80078cc:	005b      	lsls	r3, r3, #1
 80078ce:	4413      	add	r3, r2
 80078d0:	00db      	lsls	r3, r3, #3
 80078d2:	440b      	add	r3, r1
 80078d4:	3303      	adds	r3, #3
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d12b      	bne.n	8007934 <Check_Primary_r_Secondary+0xfc>
 80078dc:	79fa      	ldrb	r2, [r7, #7]
 80078de:	4959      	ldr	r1, [pc, #356]	; (8007a44 <Check_Primary_r_Secondary+0x20c>)
 80078e0:	4613      	mov	r3, r2
 80078e2:	005b      	lsls	r3, r3, #1
 80078e4:	4413      	add	r3, r2
 80078e6:	00db      	lsls	r3, r3, #3
 80078e8:	440b      	add	r3, r1
 80078ea:	3303      	adds	r3, #3
 80078ec:	781b      	ldrb	r3, [r3, #0]
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d120      	bne.n	8007934 <Check_Primary_r_Secondary+0xfc>
		{
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != SECONDARY)
 80078f2:	79fa      	ldrb	r2, [r7, #7]
 80078f4:	4952      	ldr	r1, [pc, #328]	; (8007a40 <Check_Primary_r_Secondary+0x208>)
 80078f6:	4613      	mov	r3, r2
 80078f8:	005b      	lsls	r3, r3, #1
 80078fa:	4413      	add	r3, r2
 80078fc:	00db      	lsls	r3, r3, #3
 80078fe:	440b      	add	r3, r1
 8007900:	3304      	adds	r3, #4
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	2b00      	cmp	r3, #0
 8007906:	f000 8096 	beq.w	8007a36 <Check_Primary_r_Secondary+0x1fe>
			{
				printf("This Card not Receiving data, Shifting to Secondary:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 800790a:	79fb      	ldrb	r3, [r7, #7]
 800790c:	4a4b      	ldr	r2, [pc, #300]	; (8007a3c <Check_Primary_r_Secondary+0x204>)
 800790e:	3366      	adds	r3, #102	; 0x66
 8007910:	009b      	lsls	r3, r3, #2
 8007912:	4413      	add	r3, r2
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	4619      	mov	r1, r3
 8007918:	484c      	ldr	r0, [pc, #304]	; (8007a4c <Check_Primary_r_Secondary+0x214>)
 800791a:	f01a fe43 	bl	80225a4 <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY = SECONDARY;
 800791e:	79fa      	ldrb	r2, [r7, #7]
 8007920:	4947      	ldr	r1, [pc, #284]	; (8007a40 <Check_Primary_r_Secondary+0x208>)
 8007922:	4613      	mov	r3, r2
 8007924:	005b      	lsls	r3, r3, #1
 8007926:	4413      	add	r3, r2
 8007928:	00db      	lsls	r3, r3, #3
 800792a:	440b      	add	r3, r1
 800792c:	3304      	adds	r3, #4
 800792e:	2200      	movs	r2, #0
 8007930:	701a      	strb	r2, [r3, #0]
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != SECONDARY)
 8007932:	e080      	b.n	8007a36 <Check_Primary_r_Secondary+0x1fe>
			}
		}
		else if( (Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == RECEIVED) && (Rx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == NOT_RECEIVED) )
 8007934:	79fa      	ldrb	r2, [r7, #7]
 8007936:	4942      	ldr	r1, [pc, #264]	; (8007a40 <Check_Primary_r_Secondary+0x208>)
 8007938:	4613      	mov	r3, r2
 800793a:	005b      	lsls	r3, r3, #1
 800793c:	4413      	add	r3, r2
 800793e:	00db      	lsls	r3, r3, #3
 8007940:	440b      	add	r3, r1
 8007942:	3303      	adds	r3, #3
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	2b01      	cmp	r3, #1
 8007948:	d13e      	bne.n	80079c8 <Check_Primary_r_Secondary+0x190>
 800794a:	79fa      	ldrb	r2, [r7, #7]
 800794c:	493d      	ldr	r1, [pc, #244]	; (8007a44 <Check_Primary_r_Secondary+0x20c>)
 800794e:	4613      	mov	r3, r2
 8007950:	005b      	lsls	r3, r3, #1
 8007952:	4413      	add	r3, r2
 8007954:	00db      	lsls	r3, r3, #3
 8007956:	440b      	add	r3, r1
 8007958:	3303      	adds	r3, #3
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d133      	bne.n	80079c8 <Check_Primary_r_Secondary+0x190>
		{
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY)
 8007960:	79fa      	ldrb	r2, [r7, #7]
 8007962:	4937      	ldr	r1, [pc, #220]	; (8007a40 <Check_Primary_r_Secondary+0x208>)
 8007964:	4613      	mov	r3, r2
 8007966:	005b      	lsls	r3, r3, #1
 8007968:	4413      	add	r3, r2
 800796a:	00db      	lsls	r3, r3, #3
 800796c:	440b      	add	r3, r1
 800796e:	3304      	adds	r3, #4
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	2b01      	cmp	r3, #1
 8007974:	d05f      	beq.n	8007a36 <Check_Primary_r_Secondary+0x1fe>
			{
				printf("This Card Only Receiving data, Shifting to Primary:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8007976:	79fb      	ldrb	r3, [r7, #7]
 8007978:	4a30      	ldr	r2, [pc, #192]	; (8007a3c <Check_Primary_r_Secondary+0x204>)
 800797a:	3366      	adds	r3, #102	; 0x66
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	4413      	add	r3, r2
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	4619      	mov	r1, r3
 8007984:	4832      	ldr	r0, [pc, #200]	; (8007a50 <Check_Primary_r_Secondary+0x218>)
 8007986:	f01a fe0d 	bl	80225a4 <iprintf>
				Last_Recevied_Clock[Source_Index] = CurTicks;
 800798a:	79fb      	ldrb	r3, [r7, #7]
 800798c:	4931      	ldr	r1, [pc, #196]	; (8007a54 <Check_Primary_r_Secondary+0x21c>)
 800798e:	68fa      	ldr	r2, [r7, #12]
 8007990:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				Last_Recevied_Clock_ValidMsgs[Source_Index] = CurTicks;
 8007994:	79fb      	ldrb	r3, [r7, #7]
 8007996:	4930      	ldr	r1, [pc, #192]	; (8007a58 <Check_Primary_r_Secondary+0x220>)
 8007998:	68fa      	ldr	r2, [r7, #12]
 800799a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				//				Link_Establish_Clock[Source_Index] = CurTicks;

				Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = 0;
 800799e:	79fa      	ldrb	r2, [r7, #7]
 80079a0:	4927      	ldr	r1, [pc, #156]	; (8007a40 <Check_Primary_r_Secondary+0x208>)
 80079a2:	4613      	mov	r3, r2
 80079a4:	005b      	lsls	r3, r3, #1
 80079a6:	4413      	add	r3, r2
 80079a8:	00db      	lsls	r3, r3, #3
 80079aa:	440b      	add	r3, r1
 80079ac:	3310      	adds	r3, #16
 80079ae:	2200      	movs	r2, #0
 80079b0:	601a      	str	r2, [r3, #0]
				Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY = PRIMARY;
 80079b2:	79fa      	ldrb	r2, [r7, #7]
 80079b4:	4922      	ldr	r1, [pc, #136]	; (8007a40 <Check_Primary_r_Secondary+0x208>)
 80079b6:	4613      	mov	r3, r2
 80079b8:	005b      	lsls	r3, r3, #1
 80079ba:	4413      	add	r3, r2
 80079bc:	00db      	lsls	r3, r3, #3
 80079be:	440b      	add	r3, r1
 80079c0:	3304      	adds	r3, #4
 80079c2:	2201      	movs	r2, #1
 80079c4:	701a      	strb	r2, [r3, #0]
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY)
 80079c6:	e036      	b.n	8007a36 <Check_Primary_r_Secondary+0x1fe>
			}
		}
		else if( (Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == RECEIVED) && (Rx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == RECEIVED) )
 80079c8:	79fa      	ldrb	r2, [r7, #7]
 80079ca:	491d      	ldr	r1, [pc, #116]	; (8007a40 <Check_Primary_r_Secondary+0x208>)
 80079cc:	4613      	mov	r3, r2
 80079ce:	005b      	lsls	r3, r3, #1
 80079d0:	4413      	add	r3, r2
 80079d2:	00db      	lsls	r3, r3, #3
 80079d4:	440b      	add	r3, r1
 80079d6:	3303      	adds	r3, #3
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	2b01      	cmp	r3, #1
 80079dc:	d12b      	bne.n	8007a36 <Check_Primary_r_Secondary+0x1fe>
 80079de:	79fa      	ldrb	r2, [r7, #7]
 80079e0:	4918      	ldr	r1, [pc, #96]	; (8007a44 <Check_Primary_r_Secondary+0x20c>)
 80079e2:	4613      	mov	r3, r2
 80079e4:	005b      	lsls	r3, r3, #1
 80079e6:	4413      	add	r3, r2
 80079e8:	00db      	lsls	r3, r3, #3
 80079ea:	440b      	add	r3, r1
 80079ec:	3303      	adds	r3, #3
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d120      	bne.n	8007a36 <Check_Primary_r_Secondary+0x1fe>
			//				Link_Establish_Clock[Source_Index] = CurTicks;
			//			}
#endif

#ifdef EI_2
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != SECONDARY)
 80079f4:	79fa      	ldrb	r2, [r7, #7]
 80079f6:	4912      	ldr	r1, [pc, #72]	; (8007a40 <Check_Primary_r_Secondary+0x208>)
 80079f8:	4613      	mov	r3, r2
 80079fa:	005b      	lsls	r3, r3, #1
 80079fc:	4413      	add	r3, r2
 80079fe:	00db      	lsls	r3, r3, #3
 8007a00:	440b      	add	r3, r1
 8007a02:	3304      	adds	r3, #4
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d015      	beq.n	8007a36 <Check_Primary_r_Secondary+0x1fe>
			{
				printf("Both Cards Receiving data,EiPC_2 Shifting to Secondary:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8007a0a:	79fb      	ldrb	r3, [r7, #7]
 8007a0c:	4a0b      	ldr	r2, [pc, #44]	; (8007a3c <Check_Primary_r_Secondary+0x204>)
 8007a0e:	3366      	adds	r3, #102	; 0x66
 8007a10:	009b      	lsls	r3, r3, #2
 8007a12:	4413      	add	r3, r2
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	4619      	mov	r1, r3
 8007a18:	4810      	ldr	r0, [pc, #64]	; (8007a5c <Check_Primary_r_Secondary+0x224>)
 8007a1a:	f01a fdc3 	bl	80225a4 <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY = SECONDARY;
 8007a1e:	79fa      	ldrb	r2, [r7, #7]
 8007a20:	4907      	ldr	r1, [pc, #28]	; (8007a40 <Check_Primary_r_Secondary+0x208>)
 8007a22:	4613      	mov	r3, r2
 8007a24:	005b      	lsls	r3, r3, #1
 8007a26:	4413      	add	r3, r2
 8007a28:	00db      	lsls	r3, r3, #3
 8007a2a:	440b      	add	r3, r1
 8007a2c:	3304      	adds	r3, #4
 8007a2e:	2200      	movs	r2, #0
 8007a30:	701a      	strb	r2, [r3, #0]
 8007a32:	e000      	b.n	8007a36 <Check_Primary_r_Secondary+0x1fe>
		return;
 8007a34:	bf00      	nop
			//			}
#endif

		}
	}
}
 8007a36:	3710      	adds	r7, #16
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}
 8007a3c:	20000304 	.word	0x20000304
 8007a40:	20001680 	.word	0x20001680
 8007a44:	20001770 	.word	0x20001770
 8007a48:	08024970 	.word	0x08024970
 8007a4c:	080249ac 	.word	0x080249ac
 8007a50:	080249e8 	.word	0x080249e8
 8007a54:	20000fb0 	.word	0x20000fb0
 8007a58:	20000fd8 	.word	0x20000fd8
 8007a5c:	08024a20 	.word	0x08024a20

08007a60 <Check_Vital_CRC>:

void Check_Vital_CRC(uint8_t Source_Index)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b084      	sub	sp, #16
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	4603      	mov	r3, r0
 8007a68:	71fb      	strb	r3, [r7, #7]
	static uint8_t Diff_Cnt_Rx[MAX_PEER_CONNECTIONS] = {0,};
	static uint8_t Diff_Cnt_Tx[MAX_PEER_CONNECTIONS] = {0,};


	if(EI_data.Hitachi_st.Interface_Type[Source_Index] ==  SERIAL)
 8007a6a:	79fb      	ldrb	r3, [r7, #7]
 8007a6c:	4aac      	ldr	r2, [pc, #688]	; (8007d20 <Check_Vital_CRC+0x2c0>)
 8007a6e:	4413      	add	r3, r2
 8007a70:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007a74:	2b02      	cmp	r3, #2
 8007a76:	f000 814f 	beq.w	8007d18 <Check_Vital_CRC+0x2b8>
	{
		return;
	}
	else
	{
		if(Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val != Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val )
 8007a7a:	79fa      	ldrb	r2, [r7, #7]
 8007a7c:	49a9      	ldr	r1, [pc, #676]	; (8007d24 <Check_Vital_CRC+0x2c4>)
 8007a7e:	4613      	mov	r3, r2
 8007a80:	005b      	lsls	r3, r3, #1
 8007a82:	4413      	add	r3, r2
 8007a84:	00db      	lsls	r3, r3, #3
 8007a86:	440b      	add	r3, r1
 8007a88:	3308      	adds	r3, #8
 8007a8a:	6819      	ldr	r1, [r3, #0]
 8007a8c:	79fa      	ldrb	r2, [r7, #7]
 8007a8e:	48a6      	ldr	r0, [pc, #664]	; (8007d28 <Check_Vital_CRC+0x2c8>)
 8007a90:	4613      	mov	r3, r2
 8007a92:	005b      	lsls	r3, r3, #1
 8007a94:	4413      	add	r3, r2
 8007a96:	00db      	lsls	r3, r3, #3
 8007a98:	4403      	add	r3, r0
 8007a9a:	3308      	adds	r3, #8
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4299      	cmp	r1, r3
 8007aa0:	f000 8092 	beq.w	8007bc8 <Check_Vital_CRC+0x168>
		{
			if(Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val != 0)
 8007aa4:	79fa      	ldrb	r2, [r7, #7]
 8007aa6:	49a0      	ldr	r1, [pc, #640]	; (8007d28 <Check_Vital_CRC+0x2c8>)
 8007aa8:	4613      	mov	r3, r2
 8007aaa:	005b      	lsls	r3, r3, #1
 8007aac:	4413      	add	r3, r2
 8007aae:	00db      	lsls	r3, r3, #3
 8007ab0:	440b      	add	r3, r1
 8007ab2:	3308      	adds	r3, #8
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	f000 8086 	beq.w	8007bc8 <Check_Vital_CRC+0x168>
			{
				if( (Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY) || (INIT_Received[Source_Index] == NOT_RECEIVED) )
 8007abc:	79fa      	ldrb	r2, [r7, #7]
 8007abe:	4999      	ldr	r1, [pc, #612]	; (8007d24 <Check_Vital_CRC+0x2c4>)
 8007ac0:	4613      	mov	r3, r2
 8007ac2:	005b      	lsls	r3, r3, #1
 8007ac4:	4413      	add	r3, r2
 8007ac6:	00db      	lsls	r3, r3, #3
 8007ac8:	440b      	add	r3, r1
 8007aca:	3304      	adds	r3, #4
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	2b01      	cmp	r3, #1
 8007ad0:	d104      	bne.n	8007adc <Check_Vital_CRC+0x7c>
 8007ad2:	79fb      	ldrb	r3, [r7, #7]
 8007ad4:	4a95      	ldr	r2, [pc, #596]	; (8007d2c <Check_Vital_CRC+0x2cc>)
 8007ad6:	5cd3      	ldrb	r3, [r2, r3]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d175      	bne.n	8007bc8 <Check_Vital_CRC+0x168>
				{
					uint32_t Diff = abs(Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val - Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 8007adc:	79fa      	ldrb	r2, [r7, #7]
 8007ade:	4991      	ldr	r1, [pc, #580]	; (8007d24 <Check_Vital_CRC+0x2c4>)
 8007ae0:	4613      	mov	r3, r2
 8007ae2:	005b      	lsls	r3, r3, #1
 8007ae4:	4413      	add	r3, r2
 8007ae6:	00db      	lsls	r3, r3, #3
 8007ae8:	440b      	add	r3, r1
 8007aea:	3308      	adds	r3, #8
 8007aec:	6819      	ldr	r1, [r3, #0]
 8007aee:	79fa      	ldrb	r2, [r7, #7]
 8007af0:	488d      	ldr	r0, [pc, #564]	; (8007d28 <Check_Vital_CRC+0x2c8>)
 8007af2:	4613      	mov	r3, r2
 8007af4:	005b      	lsls	r3, r3, #1
 8007af6:	4413      	add	r3, r2
 8007af8:	00db      	lsls	r3, r3, #3
 8007afa:	4403      	add	r3, r0
 8007afc:	3308      	adds	r3, #8
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	1acb      	subs	r3, r1, r3
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	bfb8      	it	lt
 8007b06:	425b      	neglt	r3, r3
 8007b08:	60fb      	str	r3, [r7, #12]

					if( (Diff != 1 ) || (Diff_Cnt_Rx[Source_Index] == 3) )
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d104      	bne.n	8007b1a <Check_Vital_CRC+0xba>
 8007b10:	79fb      	ldrb	r3, [r7, #7]
 8007b12:	4a87      	ldr	r2, [pc, #540]	; (8007d30 <Check_Vital_CRC+0x2d0>)
 8007b14:	5cd3      	ldrb	r3, [r2, r3]
 8007b16:	2b03      	cmp	r3, #3
 8007b18:	d14c      	bne.n	8007bb4 <Check_Vital_CRC+0x154>
					{
						Diff_Cnt_Rx[Source_Index] = 0;
 8007b1a:	79fb      	ldrb	r3, [r7, #7]
 8007b1c:	4a84      	ldr	r2, [pc, #528]	; (8007d30 <Check_Vital_CRC+0x2d0>)
 8007b1e:	2100      	movs	r1, #0
 8007b20:	54d1      	strb	r1, [r2, r3]
						printf("RX_Vital Init Value is not same in Self and Other EiPC Cards:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8007b22:	79fb      	ldrb	r3, [r7, #7]
 8007b24:	4a7e      	ldr	r2, [pc, #504]	; (8007d20 <Check_Vital_CRC+0x2c0>)
 8007b26:	3366      	adds	r3, #102	; 0x66
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	4413      	add	r3, r2
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	4619      	mov	r1, r3
 8007b30:	4880      	ldr	r0, [pc, #512]	; (8007d34 <Check_Vital_CRC+0x2d4>)
 8007b32:	f01a fd37 	bl	80225a4 <iprintf>
						printf("RX_Vital Init Value S-EiPC:0x%06lX\n",Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 8007b36:	79fa      	ldrb	r2, [r7, #7]
 8007b38:	497a      	ldr	r1, [pc, #488]	; (8007d24 <Check_Vital_CRC+0x2c4>)
 8007b3a:	4613      	mov	r3, r2
 8007b3c:	005b      	lsls	r3, r3, #1
 8007b3e:	4413      	add	r3, r2
 8007b40:	00db      	lsls	r3, r3, #3
 8007b42:	440b      	add	r3, r1
 8007b44:	3308      	adds	r3, #8
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4619      	mov	r1, r3
 8007b4a:	487b      	ldr	r0, [pc, #492]	; (8007d38 <Check_Vital_CRC+0x2d8>)
 8007b4c:	f01a fd2a 	bl	80225a4 <iprintf>
						printf("RX_Vital Init Value O-EiPC:0x%06lX\n",Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 8007b50:	79fa      	ldrb	r2, [r7, #7]
 8007b52:	4975      	ldr	r1, [pc, #468]	; (8007d28 <Check_Vital_CRC+0x2c8>)
 8007b54:	4613      	mov	r3, r2
 8007b56:	005b      	lsls	r3, r3, #1
 8007b58:	4413      	add	r3, r2
 8007b5a:	00db      	lsls	r3, r3, #3
 8007b5c:	440b      	add	r3, r1
 8007b5e:	3308      	adds	r3, #8
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4619      	mov	r1, r3
 8007b64:	4875      	ldr	r0, [pc, #468]	; (8007d3c <Check_Vital_CRC+0x2dc>)
 8007b66:	f01a fd1d 	bl	80225a4 <iprintf>
						printf("\nCopied RX_Vital Init Value from O-EiPC\n");
 8007b6a:	4875      	ldr	r0, [pc, #468]	; (8007d40 <Check_Vital_CRC+0x2e0>)
 8007b6c:	f01a fdb6 	bl	80226dc <puts>
						Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val;
 8007b70:	79fa      	ldrb	r2, [r7, #7]
 8007b72:	79f9      	ldrb	r1, [r7, #7]
 8007b74:	486c      	ldr	r0, [pc, #432]	; (8007d28 <Check_Vital_CRC+0x2c8>)
 8007b76:	4613      	mov	r3, r2
 8007b78:	005b      	lsls	r3, r3, #1
 8007b7a:	4413      	add	r3, r2
 8007b7c:	00db      	lsls	r3, r3, #3
 8007b7e:	4403      	add	r3, r0
 8007b80:	3308      	adds	r3, #8
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	486f      	ldr	r0, [pc, #444]	; (8007d44 <Check_Vital_CRC+0x2e4>)
 8007b86:	010b      	lsls	r3, r1, #4
 8007b88:	4403      	add	r3, r0
 8007b8a:	3308      	adds	r3, #8
 8007b8c:	601a      	str	r2, [r3, #0]
						Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val;
 8007b8e:	79f9      	ldrb	r1, [r7, #7]
 8007b90:	79fa      	ldrb	r2, [r7, #7]
 8007b92:	4865      	ldr	r0, [pc, #404]	; (8007d28 <Check_Vital_CRC+0x2c8>)
 8007b94:	460b      	mov	r3, r1
 8007b96:	005b      	lsls	r3, r3, #1
 8007b98:	440b      	add	r3, r1
 8007b9a:	00db      	lsls	r3, r3, #3
 8007b9c:	4403      	add	r3, r0
 8007b9e:	3308      	adds	r3, #8
 8007ba0:	6819      	ldr	r1, [r3, #0]
 8007ba2:	4860      	ldr	r0, [pc, #384]	; (8007d24 <Check_Vital_CRC+0x2c4>)
 8007ba4:	4613      	mov	r3, r2
 8007ba6:	005b      	lsls	r3, r3, #1
 8007ba8:	4413      	add	r3, r2
 8007baa:	00db      	lsls	r3, r3, #3
 8007bac:	4403      	add	r3, r0
 8007bae:	3308      	adds	r3, #8
 8007bb0:	6019      	str	r1, [r3, #0]
 8007bb2:	e009      	b.n	8007bc8 <Check_Vital_CRC+0x168>
					}
					else if(Diff == 1)
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	d106      	bne.n	8007bc8 <Check_Vital_CRC+0x168>
					{
						Diff_Cnt_Rx[Source_Index]++;
 8007bba:	79fb      	ldrb	r3, [r7, #7]
 8007bbc:	4a5c      	ldr	r2, [pc, #368]	; (8007d30 <Check_Vital_CRC+0x2d0>)
 8007bbe:	5cd2      	ldrb	r2, [r2, r3]
 8007bc0:	3201      	adds	r2, #1
 8007bc2:	b2d1      	uxtb	r1, r2
 8007bc4:	4a5a      	ldr	r2, [pc, #360]	; (8007d30 <Check_Vital_CRC+0x2d0>)
 8007bc6:	54d1      	strb	r1, [r2, r3]
				}
			}
		}
	}

	if(Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val != Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val )
 8007bc8:	79fa      	ldrb	r2, [r7, #7]
 8007bca:	4956      	ldr	r1, [pc, #344]	; (8007d24 <Check_Vital_CRC+0x2c4>)
 8007bcc:	4613      	mov	r3, r2
 8007bce:	005b      	lsls	r3, r3, #1
 8007bd0:	4413      	add	r3, r2
 8007bd2:	00db      	lsls	r3, r3, #3
 8007bd4:	440b      	add	r3, r1
 8007bd6:	330c      	adds	r3, #12
 8007bd8:	6819      	ldr	r1, [r3, #0]
 8007bda:	79fa      	ldrb	r2, [r7, #7]
 8007bdc:	4852      	ldr	r0, [pc, #328]	; (8007d28 <Check_Vital_CRC+0x2c8>)
 8007bde:	4613      	mov	r3, r2
 8007be0:	005b      	lsls	r3, r3, #1
 8007be2:	4413      	add	r3, r2
 8007be4:	00db      	lsls	r3, r3, #3
 8007be6:	4403      	add	r3, r0
 8007be8:	330c      	adds	r3, #12
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4299      	cmp	r1, r3
 8007bee:	f000 8094 	beq.w	8007d1a <Check_Vital_CRC+0x2ba>
	{
		if(Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val != 0)
 8007bf2:	79fa      	ldrb	r2, [r7, #7]
 8007bf4:	494c      	ldr	r1, [pc, #304]	; (8007d28 <Check_Vital_CRC+0x2c8>)
 8007bf6:	4613      	mov	r3, r2
 8007bf8:	005b      	lsls	r3, r3, #1
 8007bfa:	4413      	add	r3, r2
 8007bfc:	00db      	lsls	r3, r3, #3
 8007bfe:	440b      	add	r3, r1
 8007c00:	330c      	adds	r3, #12
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	f000 8088 	beq.w	8007d1a <Check_Vital_CRC+0x2ba>
		{
			if( (Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY) || (INIT_Received[Source_Index] == NOT_RECEIVED) )
 8007c0a:	79fa      	ldrb	r2, [r7, #7]
 8007c0c:	4945      	ldr	r1, [pc, #276]	; (8007d24 <Check_Vital_CRC+0x2c4>)
 8007c0e:	4613      	mov	r3, r2
 8007c10:	005b      	lsls	r3, r3, #1
 8007c12:	4413      	add	r3, r2
 8007c14:	00db      	lsls	r3, r3, #3
 8007c16:	440b      	add	r3, r1
 8007c18:	3304      	adds	r3, #4
 8007c1a:	781b      	ldrb	r3, [r3, #0]
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d104      	bne.n	8007c2a <Check_Vital_CRC+0x1ca>
 8007c20:	79fb      	ldrb	r3, [r7, #7]
 8007c22:	4a42      	ldr	r2, [pc, #264]	; (8007d2c <Check_Vital_CRC+0x2cc>)
 8007c24:	5cd3      	ldrb	r3, [r2, r3]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d177      	bne.n	8007d1a <Check_Vital_CRC+0x2ba>
			{
				uint32_t Diff = abs(Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val - Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val);
 8007c2a:	79fa      	ldrb	r2, [r7, #7]
 8007c2c:	493d      	ldr	r1, [pc, #244]	; (8007d24 <Check_Vital_CRC+0x2c4>)
 8007c2e:	4613      	mov	r3, r2
 8007c30:	005b      	lsls	r3, r3, #1
 8007c32:	4413      	add	r3, r2
 8007c34:	00db      	lsls	r3, r3, #3
 8007c36:	440b      	add	r3, r1
 8007c38:	330c      	adds	r3, #12
 8007c3a:	6819      	ldr	r1, [r3, #0]
 8007c3c:	79fa      	ldrb	r2, [r7, #7]
 8007c3e:	483a      	ldr	r0, [pc, #232]	; (8007d28 <Check_Vital_CRC+0x2c8>)
 8007c40:	4613      	mov	r3, r2
 8007c42:	005b      	lsls	r3, r3, #1
 8007c44:	4413      	add	r3, r2
 8007c46:	00db      	lsls	r3, r3, #3
 8007c48:	4403      	add	r3, r0
 8007c4a:	330c      	adds	r3, #12
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	1acb      	subs	r3, r1, r3
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	bfb8      	it	lt
 8007c54:	425b      	neglt	r3, r3
 8007c56:	60bb      	str	r3, [r7, #8]
				if( (Diff != 1 ) || (Diff_Cnt_Tx[Source_Index] == 3) )
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	2b01      	cmp	r3, #1
 8007c5c:	d104      	bne.n	8007c68 <Check_Vital_CRC+0x208>
 8007c5e:	79fb      	ldrb	r3, [r7, #7]
 8007c60:	4a39      	ldr	r2, [pc, #228]	; (8007d48 <Check_Vital_CRC+0x2e8>)
 8007c62:	5cd3      	ldrb	r3, [r2, r3]
 8007c64:	2b03      	cmp	r3, #3
 8007c66:	d14c      	bne.n	8007d02 <Check_Vital_CRC+0x2a2>
				{
					Diff_Cnt_Tx[Source_Index] = 0;
 8007c68:	79fb      	ldrb	r3, [r7, #7]
 8007c6a:	4a37      	ldr	r2, [pc, #220]	; (8007d48 <Check_Vital_CRC+0x2e8>)
 8007c6c:	2100      	movs	r1, #0
 8007c6e:	54d1      	strb	r1, [r2, r3]
					printf("TX_Vital Init Value is not same in Self and Other EiPC Cards:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8007c70:	79fb      	ldrb	r3, [r7, #7]
 8007c72:	4a2b      	ldr	r2, [pc, #172]	; (8007d20 <Check_Vital_CRC+0x2c0>)
 8007c74:	3366      	adds	r3, #102	; 0x66
 8007c76:	009b      	lsls	r3, r3, #2
 8007c78:	4413      	add	r3, r2
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	4619      	mov	r1, r3
 8007c7e:	4833      	ldr	r0, [pc, #204]	; (8007d4c <Check_Vital_CRC+0x2ec>)
 8007c80:	f01a fc90 	bl	80225a4 <iprintf>
					printf("TX_Vital Init Value S-EiPC:0x%06lX\n",Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val);
 8007c84:	79fa      	ldrb	r2, [r7, #7]
 8007c86:	4927      	ldr	r1, [pc, #156]	; (8007d24 <Check_Vital_CRC+0x2c4>)
 8007c88:	4613      	mov	r3, r2
 8007c8a:	005b      	lsls	r3, r3, #1
 8007c8c:	4413      	add	r3, r2
 8007c8e:	00db      	lsls	r3, r3, #3
 8007c90:	440b      	add	r3, r1
 8007c92:	330c      	adds	r3, #12
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4619      	mov	r1, r3
 8007c98:	482d      	ldr	r0, [pc, #180]	; (8007d50 <Check_Vital_CRC+0x2f0>)
 8007c9a:	f01a fc83 	bl	80225a4 <iprintf>
					printf("TX_Vital Init Value O-EiPC:0x%06lX\n",Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val);
 8007c9e:	79fa      	ldrb	r2, [r7, #7]
 8007ca0:	4921      	ldr	r1, [pc, #132]	; (8007d28 <Check_Vital_CRC+0x2c8>)
 8007ca2:	4613      	mov	r3, r2
 8007ca4:	005b      	lsls	r3, r3, #1
 8007ca6:	4413      	add	r3, r2
 8007ca8:	00db      	lsls	r3, r3, #3
 8007caa:	440b      	add	r3, r1
 8007cac:	330c      	adds	r3, #12
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	4828      	ldr	r0, [pc, #160]	; (8007d54 <Check_Vital_CRC+0x2f4>)
 8007cb4:	f01a fc76 	bl	80225a4 <iprintf>
					printf("\nCopied TX Vital Init Value from O-EiPC\n");
 8007cb8:	4827      	ldr	r0, [pc, #156]	; (8007d58 <Check_Vital_CRC+0x2f8>)
 8007cba:	f01a fd0f 	bl	80226dc <puts>
					Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value = Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val;
 8007cbe:	79fa      	ldrb	r2, [r7, #7]
 8007cc0:	79f9      	ldrb	r1, [r7, #7]
 8007cc2:	4819      	ldr	r0, [pc, #100]	; (8007d28 <Check_Vital_CRC+0x2c8>)
 8007cc4:	4613      	mov	r3, r2
 8007cc6:	005b      	lsls	r3, r3, #1
 8007cc8:	4413      	add	r3, r2
 8007cca:	00db      	lsls	r3, r3, #3
 8007ccc:	4403      	add	r3, r0
 8007cce:	330c      	adds	r3, #12
 8007cd0:	681a      	ldr	r2, [r3, #0]
 8007cd2:	481c      	ldr	r0, [pc, #112]	; (8007d44 <Check_Vital_CRC+0x2e4>)
 8007cd4:	010b      	lsls	r3, r1, #4
 8007cd6:	4403      	add	r3, r0
 8007cd8:	330c      	adds	r3, #12
 8007cda:	601a      	str	r2, [r3, #0]
					Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val = Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val;
 8007cdc:	79f9      	ldrb	r1, [r7, #7]
 8007cde:	79fa      	ldrb	r2, [r7, #7]
 8007ce0:	4811      	ldr	r0, [pc, #68]	; (8007d28 <Check_Vital_CRC+0x2c8>)
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	005b      	lsls	r3, r3, #1
 8007ce6:	440b      	add	r3, r1
 8007ce8:	00db      	lsls	r3, r3, #3
 8007cea:	4403      	add	r3, r0
 8007cec:	330c      	adds	r3, #12
 8007cee:	6819      	ldr	r1, [r3, #0]
 8007cf0:	480c      	ldr	r0, [pc, #48]	; (8007d24 <Check_Vital_CRC+0x2c4>)
 8007cf2:	4613      	mov	r3, r2
 8007cf4:	005b      	lsls	r3, r3, #1
 8007cf6:	4413      	add	r3, r2
 8007cf8:	00db      	lsls	r3, r3, #3
 8007cfa:	4403      	add	r3, r0
 8007cfc:	330c      	adds	r3, #12
 8007cfe:	6019      	str	r1, [r3, #0]
 8007d00:	e00b      	b.n	8007d1a <Check_Vital_CRC+0x2ba>
				}
				else if(Diff == 1)
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d108      	bne.n	8007d1a <Check_Vital_CRC+0x2ba>
				{
					Diff_Cnt_Tx[Source_Index]++;
 8007d08:	79fb      	ldrb	r3, [r7, #7]
 8007d0a:	4a0f      	ldr	r2, [pc, #60]	; (8007d48 <Check_Vital_CRC+0x2e8>)
 8007d0c:	5cd2      	ldrb	r2, [r2, r3]
 8007d0e:	3201      	adds	r2, #1
 8007d10:	b2d1      	uxtb	r1, r2
 8007d12:	4a0d      	ldr	r2, [pc, #52]	; (8007d48 <Check_Vital_CRC+0x2e8>)
 8007d14:	54d1      	strb	r1, [r2, r3]
 8007d16:	e000      	b.n	8007d1a <Check_Vital_CRC+0x2ba>
		return;
 8007d18:	bf00      	nop
				}
			}
		}
	}
}
 8007d1a:	3710      	adds	r7, #16
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}
 8007d20:	20000304 	.word	0x20000304
 8007d24:	20001680 	.word	0x20001680
 8007d28:	20001770 	.word	0x20001770
 8007d2c:	20001000 	.word	0x20001000
 8007d30:	20002044 	.word	0x20002044
 8007d34:	08024a5c 	.word	0x08024a5c
 8007d38:	08024aa0 	.word	0x08024aa0
 8007d3c:	08024ac4 	.word	0x08024ac4
 8007d40:	08024ae8 	.word	0x08024ae8
 8007d44:	200011d0 	.word	0x200011d0
 8007d48:	20002050 	.word	0x20002050
 8007d4c:	08024b10 	.word	0x08024b10
 8007d50:	08024b54 	.word	0x08024b54
 8007d54:	08024b78 	.word	0x08024b78
 8007d58:	08024b9c 	.word	0x08024b9c

08007d5c <Check_Other_EiPC_Packet>:

void Check_Other_EiPC_Packet(uint8_t Source_Index)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b082      	sub	sp, #8
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	4603      	mov	r3, r0
 8007d64:	71fb      	strb	r3, [r7, #7]
	if(EI_data.Hitachi_st.Interface_Type[Source_Index] !=  SERIAL)
 8007d66:	79fb      	ldrb	r3, [r7, #7]
 8007d68:	4a0a      	ldr	r2, [pc, #40]	; (8007d94 <Check_Other_EiPC_Packet+0x38>)
 8007d6a:	4413      	add	r3, r2
 8007d6c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007d70:	2b02      	cmp	r3, #2
 8007d72:	d007      	beq.n	8007d84 <Check_Other_EiPC_Packet+0x28>
	{
		Check_Primary_r_Secondary(Source_Index);
 8007d74:	79fb      	ldrb	r3, [r7, #7]
 8007d76:	4618      	mov	r0, r3
 8007d78:	f7ff fd5e 	bl	8007838 <Check_Primary_r_Secondary>
		Check_Vital_CRC(Source_Index);
 8007d7c:	79fb      	ldrb	r3, [r7, #7]
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f7ff fe6e 	bl	8007a60 <Check_Vital_CRC>
	}
	CheckOtherLinkStatus(Source_Index);
 8007d84:	79fb      	ldrb	r3, [r7, #7]
 8007d86:	4618      	mov	r0, r3
 8007d88:	f000 ffd2 	bl	8008d30 <CheckOtherLinkStatus>
}
 8007d8c:	bf00      	nop
 8007d8e:	3708      	adds	r7, #8
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}
 8007d94:	20000304 	.word	0x20000304

08007d98 <CheckLinkEstablishTimeout>:

void CheckLinkEstablishTimeout(void)
{
 8007d98:	b590      	push	{r4, r7, lr}
 8007d9a:	b083      	sub	sp, #12
 8007d9c:	af00      	add	r7, sp, #0
	uint8_t Traverser = 0;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	71fb      	strb	r3, [r7, #7]
	static uint32_t Prev_Last_LinkEstablish_CLK[MAX_PEER_CONNECTIONS] = {0,};

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8007da2:	4930      	ldr	r1, [pc, #192]	; (8007e64 <CheckLinkEstablishTimeout+0xcc>)
 8007da4:	4830      	ldr	r0, [pc, #192]	; (8007e68 <CheckLinkEstablishTimeout+0xd0>)
 8007da6:	f7f8 fa4b 	bl	8000240 <strcmp>
 8007daa:	4603      	mov	r3, r0
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d055      	beq.n	8007e5c <CheckLinkEstablishTimeout+0xc4>
		return;
	}



	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8007db0:	2300      	movs	r3, #0
 8007db2:	71fb      	strb	r3, [r7, #7]
 8007db4:	e04b      	b.n	8007e4e <CheckLinkEstablishTimeout+0xb6>
	{
		if( (HAL_Elaps_Ticks(Link_Establish_Clock[Traverser]) > EI_data.Hitachi_st.LinkEstablishTimeout[Traverser]) && (Prev_Last_LinkEstablish_CLK[Traverser] != Link_Establish_Clock[Traverser]) )
 8007db6:	79fb      	ldrb	r3, [r7, #7]
 8007db8:	4a2c      	ldr	r2, [pc, #176]	; (8007e6c <CheckLinkEstablishTimeout+0xd4>)
 8007dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f006 fe34 	bl	800ea2c <HAL_Elaps_Ticks>
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	79fb      	ldrb	r3, [r7, #7]
 8007dc8:	4929      	ldr	r1, [pc, #164]	; (8007e70 <CheckLinkEstablishTimeout+0xd8>)
 8007dca:	339e      	adds	r3, #158	; 0x9e
 8007dcc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d939      	bls.n	8007e48 <CheckLinkEstablishTimeout+0xb0>
 8007dd4:	79fb      	ldrb	r3, [r7, #7]
 8007dd6:	4a27      	ldr	r2, [pc, #156]	; (8007e74 <CheckLinkEstablishTimeout+0xdc>)
 8007dd8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007ddc:	79fb      	ldrb	r3, [r7, #7]
 8007dde:	4923      	ldr	r1, [pc, #140]	; (8007e6c <CheckLinkEstablishTimeout+0xd4>)
 8007de0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d02f      	beq.n	8007e48 <CheckLinkEstablishTimeout+0xb0>
		{
			Prev_Last_LinkEstablish_CLK[Traverser] = Link_Establish_Clock[Traverser];
 8007de8:	79fa      	ldrb	r2, [r7, #7]
 8007dea:	79fb      	ldrb	r3, [r7, #7]
 8007dec:	491f      	ldr	r1, [pc, #124]	; (8007e6c <CheckLinkEstablishTimeout+0xd4>)
 8007dee:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007df2:	4920      	ldr	r1, [pc, #128]	; (8007e74 <CheckLinkEstablishTimeout+0xdc>)
 8007df4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			printf("Link Establish Timeout for:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
 8007df8:	79fb      	ldrb	r3, [r7, #7]
 8007dfa:	4a1d      	ldr	r2, [pc, #116]	; (8007e70 <CheckLinkEstablishTimeout+0xd8>)
 8007dfc:	3366      	adds	r3, #102	; 0x66
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	4413      	add	r3, r2
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	4619      	mov	r1, r3
 8007e06:	481c      	ldr	r0, [pc, #112]	; (8007e78 <CheckLinkEstablishTimeout+0xe0>)
 8007e08:	f01a fbcc 	bl	80225a4 <iprintf>
			Link_Flag[Traverser] = CLEAR;
 8007e0c:	79fb      	ldrb	r3, [r7, #7]
 8007e0e:	4a1b      	ldr	r2, [pc, #108]	; (8007e7c <CheckLinkEstablishTimeout+0xe4>)
 8007e10:	2100      	movs	r1, #0
 8007e12:	54d1      	strb	r1, [r2, r3]
			Tx_Ei_self_sharing_st[Traverser].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Traverser].Last_RCV_Clk_diff); // To detected EiPC shifting Faster
 8007e14:	79fa      	ldrb	r2, [r7, #7]
 8007e16:	491a      	ldr	r1, [pc, #104]	; (8007e80 <CheckLinkEstablishTimeout+0xe8>)
 8007e18:	4613      	mov	r3, r2
 8007e1a:	005b      	lsls	r3, r3, #1
 8007e1c:	4413      	add	r3, r2
 8007e1e:	00db      	lsls	r3, r3, #3
 8007e20:	440b      	add	r3, r1
 8007e22:	3310      	adds	r3, #16
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	79fc      	ldrb	r4, [r7, #7]
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f006 fdff 	bl	800ea2c <HAL_Elaps_Ticks>
 8007e2e:	4602      	mov	r2, r0
 8007e30:	4913      	ldr	r1, [pc, #76]	; (8007e80 <CheckLinkEstablishTimeout+0xe8>)
 8007e32:	4623      	mov	r3, r4
 8007e34:	005b      	lsls	r3, r3, #1
 8007e36:	4423      	add	r3, r4
 8007e38:	00db      	lsls	r3, r3, #3
 8007e3a:	440b      	add	r3, r1
 8007e3c:	3310      	adds	r3, #16
 8007e3e:	601a      	str	r2, [r3, #0]
			CheckOtherLinkStatus(Traverser);
 8007e40:	79fb      	ldrb	r3, [r7, #7]
 8007e42:	4618      	mov	r0, r3
 8007e44:	f000 ff74 	bl	8008d30 <CheckOtherLinkStatus>
	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8007e48:	79fb      	ldrb	r3, [r7, #7]
 8007e4a:	3301      	adds	r3, #1
 8007e4c:	71fb      	strb	r3, [r7, #7]
 8007e4e:	4b08      	ldr	r3, [pc, #32]	; (8007e70 <CheckLinkEstablishTimeout+0xd8>)
 8007e50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007e54:	79fa      	ldrb	r2, [r7, #7]
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d3ad      	bcc.n	8007db6 <CheckLinkEstablishTimeout+0x1e>
 8007e5a:	e000      	b.n	8007e5e <CheckLinkEstablishTimeout+0xc6>
		return;
 8007e5c:	bf00      	nop
		}
	}
}
 8007e5e:	370c      	adds	r7, #12
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd90      	pop	{r4, r7, pc}
 8007e64:	08023d68 	.word	0x08023d68
 8007e68:	20000305 	.word	0x20000305
 8007e6c:	20000f20 	.word	0x20000f20
 8007e70:	20000304 	.word	0x20000304
 8007e74:	2000205c 	.word	0x2000205c
 8007e78:	08024bc4 	.word	0x08024bc4
 8007e7c:	20000f70 	.word	0x20000f70
 8007e80:	20001680 	.word	0x20001680

08007e84 <Send_Self_Sharing>:


void Send_Self_Sharing(void)
{
 8007e84:	b590      	push	{r4, r7, lr}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	71fb      	strb	r3, [r7, #7]
 8007e8e:	e049      	b.n	8007f24 <Send_Self_Sharing+0xa0>
	{
		if(HAL_Elaps_Ticks(Self_Sharing_CAN_Clk[Traverser]) > (EI_data.Hitachi_st.CAN_Xchange_Time) )
 8007e90:	79fb      	ldrb	r3, [r7, #7]
 8007e92:	4a29      	ldr	r2, [pc, #164]	; (8007f38 <Send_Self_Sharing+0xb4>)
 8007e94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f006 fdc7 	bl	800ea2c <HAL_Elaps_Ticks>
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	4b26      	ldr	r3, [pc, #152]	; (8007f3c <Send_Self_Sharing+0xb8>)
 8007ea2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	d939      	bls.n	8007f1e <Send_Self_Sharing+0x9a>
		{
			Tx_Ei_self_sharing_st[Traverser].Msg_Rcv_Flag = NOT_RECEIVED;
 8007eaa:	79fa      	ldrb	r2, [r7, #7]
 8007eac:	4924      	ldr	r1, [pc, #144]	; (8007f40 <Send_Self_Sharing+0xbc>)
 8007eae:	4613      	mov	r3, r2
 8007eb0:	005b      	lsls	r3, r3, #1
 8007eb2:	4413      	add	r3, r2
 8007eb4:	00db      	lsls	r3, r3, #3
 8007eb6:	440b      	add	r3, r1
 8007eb8:	3301      	adds	r3, #1
 8007eba:	2200      	movs	r2, #0
 8007ebc:	701a      	strb	r2, [r3, #0]
			Tx_Ei_self_sharing_st[Traverser].LinkEstablishFlag = Hitachi_clk_flags_st[Traverser].Link_EstablishFlag;
 8007ebe:	79f9      	ldrb	r1, [r7, #7]
 8007ec0:	79fa      	ldrb	r2, [r7, #7]
 8007ec2:	4820      	ldr	r0, [pc, #128]	; (8007f44 <Send_Self_Sharing+0xc0>)
 8007ec4:	460b      	mov	r3, r1
 8007ec6:	005b      	lsls	r3, r3, #1
 8007ec8:	440b      	add	r3, r1
 8007eca:	009b      	lsls	r3, r3, #2
 8007ecc:	4403      	add	r3, r0
 8007ece:	3301      	adds	r3, #1
 8007ed0:	7818      	ldrb	r0, [r3, #0]
 8007ed2:	491b      	ldr	r1, [pc, #108]	; (8007f40 <Send_Self_Sharing+0xbc>)
 8007ed4:	4613      	mov	r3, r2
 8007ed6:	005b      	lsls	r3, r3, #1
 8007ed8:	4413      	add	r3, r2
 8007eda:	00db      	lsls	r3, r3, #3
 8007edc:	440b      	add	r3, r1
 8007ede:	3302      	adds	r3, #2
 8007ee0:	4602      	mov	r2, r0
 8007ee2:	701a      	strb	r2, [r3, #0]

			memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8007ee4:	2218      	movs	r2, #24
 8007ee6:	2100      	movs	r1, #0
 8007ee8:	4817      	ldr	r0, [pc, #92]	; (8007f48 <Send_Self_Sharing+0xc4>)
 8007eea:	f01a fa73 	bl	80223d4 <memset>
			memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Traverser],sizeof(EI_SELF_SHARING_t));
 8007eee:	79fa      	ldrb	r2, [r7, #7]
 8007ef0:	4613      	mov	r3, r2
 8007ef2:	005b      	lsls	r3, r3, #1
 8007ef4:	4413      	add	r3, r2
 8007ef6:	00db      	lsls	r3, r3, #3
 8007ef8:	4a11      	ldr	r2, [pc, #68]	; (8007f40 <Send_Self_Sharing+0xbc>)
 8007efa:	4413      	add	r3, r2
 8007efc:	2218      	movs	r2, #24
 8007efe:	4619      	mov	r1, r3
 8007f00:	4811      	ldr	r0, [pc, #68]	; (8007f48 <Send_Self_Sharing+0xc4>)
 8007f02:	f01a fa3f 	bl	8022384 <memcpy>

#ifdef EI_1
			TransmitCanPkt(EI_1_SELF_SHARING);
#endif
#ifdef EI_2
			TransmitCanPkt(EI_2_SELF_SHARING);
 8007f06:	f240 2002 	movw	r0, #514	; 0x202
 8007f0a:	f007 fb11 	bl	800f530 <TransmitCanPkt>
#endif
			Self_Sharing_CAN_Clk[Traverser] = HAL_GetTick();
 8007f0e:	79fc      	ldrb	r4, [r7, #7]
 8007f10:	f00d fb3e 	bl	8015590 <HAL_GetTick>
 8007f14:	4603      	mov	r3, r0
 8007f16:	4a08      	ldr	r2, [pc, #32]	; (8007f38 <Send_Self_Sharing+0xb4>)
 8007f18:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			return; /* Returning from the function because to avoid the Data Mismatch at Receiption end*/
 8007f1c:	e008      	b.n	8007f30 <Send_Self_Sharing+0xac>
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8007f1e:	79fb      	ldrb	r3, [r7, #7]
 8007f20:	3301      	adds	r3, #1
 8007f22:	71fb      	strb	r3, [r7, #7]
 8007f24:	4b05      	ldr	r3, [pc, #20]	; (8007f3c <Send_Self_Sharing+0xb8>)
 8007f26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007f2a:	79fa      	ldrb	r2, [r7, #7]
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d3af      	bcc.n	8007e90 <Send_Self_Sharing+0xc>
		}
	}
}
 8007f30:	370c      	adds	r7, #12
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd90      	pop	{r4, r7, pc}
 8007f36:	bf00      	nop
 8007f38:	20000e50 	.word	0x20000e50
 8007f3c:	20000304 	.word	0x20000304
 8007f40:	20001680 	.word	0x20001680
 8007f44:	20001cd4 	.word	0x20001cd4
 8007f48:	20001860 	.word	0x20001860

08007f4c <Detect_CAN_Xchange_Failure>:

void Detect_CAN_Xchange_Failure(void)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	af00      	add	r7, sp, #0
	static uint32_t Previous_Clock_RCV_SELF_XCHG_CLK = 0;

	if(Is_CAN_Exchange_happening == YES)
 8007f50:	4b24      	ldr	r3, [pc, #144]	; (8007fe4 <Detect_CAN_Xchange_Failure+0x98>)
 8007f52:	781b      	ldrb	r3, [r3, #0]
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	d101      	bne.n	8007f5c <Detect_CAN_Xchange_Failure+0x10>
	{
		Blink_S2();
 8007f58:	f00b f9f2 	bl	8013340 <Blink_S2>
	}

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8007f5c:	4922      	ldr	r1, [pc, #136]	; (8007fe8 <Detect_CAN_Xchange_Failure+0x9c>)
 8007f5e:	4823      	ldr	r0, [pc, #140]	; (8007fec <Detect_CAN_Xchange_Failure+0xa0>)
 8007f60:	f7f8 f96e 	bl	8000240 <strcmp>
 8007f64:	4603      	mov	r3, r0
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d103      	bne.n	8007f72 <Detect_CAN_Xchange_Failure+0x26>
	{
		Is_CAN_Exchange_happening = YES;
 8007f6a:	4b1e      	ldr	r3, [pc, #120]	; (8007fe4 <Detect_CAN_Xchange_Failure+0x98>)
 8007f6c:	2201      	movs	r2, #1
 8007f6e:	701a      	strb	r2, [r3, #0]
		return;
 8007f70:	e036      	b.n	8007fe0 <Detect_CAN_Xchange_Failure+0x94>
	}
	if(HAL_Elaps_Ticks(RCV_SELF_XCHG_CLK)>= EI_data.Hitachi_st.CAN_EXCHANGE_TIME_OUT)
 8007f72:	4b1f      	ldr	r3, [pc, #124]	; (8007ff0 <Detect_CAN_Xchange_Failure+0xa4>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4618      	mov	r0, r3
 8007f78:	f006 fd58 	bl	800ea2c <HAL_Elaps_Ticks>
 8007f7c:	4602      	mov	r2, r0
 8007f7e:	4b1d      	ldr	r3, [pc, #116]	; (8007ff4 <Detect_CAN_Xchange_Failure+0xa8>)
 8007f80:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d32b      	bcc.n	8007fe0 <Detect_CAN_Xchange_Failure+0x94>
	{
		if(Previous_Clock_RCV_SELF_XCHG_CLK != RCV_SELF_XCHG_CLK)
 8007f88:	4b1b      	ldr	r3, [pc, #108]	; (8007ff8 <Detect_CAN_Xchange_Failure+0xac>)
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	4b18      	ldr	r3, [pc, #96]	; (8007ff0 <Detect_CAN_Xchange_Failure+0xa4>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d025      	beq.n	8007fe0 <Detect_CAN_Xchange_Failure+0x94>
		{
			Is_CAN_Exchange_happening = NO;
 8007f94:	4b13      	ldr	r3, [pc, #76]	; (8007fe4 <Detect_CAN_Xchange_Failure+0x98>)
 8007f96:	2200      	movs	r2, #0
 8007f98:	701a      	strb	r2, [r3, #0]
			Previous_Clock_RCV_SELF_XCHG_CLK = RCV_SELF_XCHG_CLK;
 8007f9a:	4b15      	ldr	r3, [pc, #84]	; (8007ff0 <Detect_CAN_Xchange_Failure+0xa4>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a16      	ldr	r2, [pc, #88]	; (8007ff8 <Detect_CAN_Xchange_Failure+0xac>)
 8007fa0:	6013      	str	r3, [r2, #0]
			printf("CAN Data Not Received from last %lu Seconds\n",(HAL_Elaps_Ticks(RCV_SELF_XCHG_CLK)/1000));
 8007fa2:	4b13      	ldr	r3, [pc, #76]	; (8007ff0 <Detect_CAN_Xchange_Failure+0xa4>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f006 fd40 	bl	800ea2c <HAL_Elaps_Ticks>
 8007fac:	4603      	mov	r3, r0
 8007fae:	4a13      	ldr	r2, [pc, #76]	; (8007ffc <Detect_CAN_Xchange_Failure+0xb0>)
 8007fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8007fb4:	099b      	lsrs	r3, r3, #6
 8007fb6:	4619      	mov	r1, r3
 8007fb8:	4811      	ldr	r0, [pc, #68]	; (8008000 <Detect_CAN_Xchange_Failure+0xb4>)
 8007fba:	f01a faf3 	bl	80225a4 <iprintf>
			printf("Mem setting Rx_Ei_self_sharing_st\n");
 8007fbe:	4811      	ldr	r0, [pc, #68]	; (8008004 <Detect_CAN_Xchange_Failure+0xb8>)
 8007fc0:	f01a fb8c 	bl	80226dc <puts>
			memset(&Rx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8007fc4:	2218      	movs	r2, #24
 8007fc6:	2100      	movs	r1, #0
 8007fc8:	480f      	ldr	r0, [pc, #60]	; (8008008 <Detect_CAN_Xchange_Failure+0xbc>)
 8007fca:	f01a fa03 	bl	80223d4 <memset>
			memset(&vEI_Transver_EI_To_MIE,0,sizeof(EI_VITAL_DATA_TO_VITAL_COMPUTER_t));
 8007fce:	22a2      	movs	r2, #162	; 0xa2
 8007fd0:	2100      	movs	r1, #0
 8007fd2:	480e      	ldr	r0, [pc, #56]	; (800800c <Detect_CAN_Xchange_Failure+0xc0>)
 8007fd4:	f01a f9fe 	bl	80223d4 <memset>
			TransmitCanPkt(EI_PROCESS_DATA);
 8007fd8:	f240 1019 	movw	r0, #281	; 0x119
 8007fdc:	f007 faa8 	bl	800f530 <TransmitCanPkt>
		}
	}
}
 8007fe0:	bd80      	pop	{r7, pc}
 8007fe2:	bf00      	nop
 8007fe4:	20000108 	.word	0x20000108
 8007fe8:	08023d68 	.word	0x08023d68
 8007fec:	20000305 	.word	0x20000305
 8007ff0:	20000e4c 	.word	0x20000e4c
 8007ff4:	20000304 	.word	0x20000304
 8007ff8:	20002084 	.word	0x20002084
 8007ffc:	10624dd3 	.word	0x10624dd3
 8008000:	08024be4 	.word	0x08024be4
 8008004:	08024c14 	.word	0x08024c14
 8008008:	20001770 	.word	0x20001770
 800800c:	200010f0 	.word	0x200010f0

08008010 <Process_Send_Signals_2_MIE>:

void Process_Send_Signals_2_MIE(void)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b082      	sub	sp, #8
 8008014:	af00      	add	r7, sp, #0
	static uint8_t Prev_Buff[MAX_OUTPUTS_PER_PEER * MAX_PEER_CONNECTIONS] = {0,};
	uint8_t Serial_Send_Buffer[(MAX_OUTPUTS_PER_PEER * MAX_PEER_CONNECTIONS) + 10] = {0,};
	uint16_t Serial_Byte=0;
#endif

	if(HAL_Elaps_Ticks(MIE_Signal_Send_CLK) > (EI_data.Hitachi_st.MIE_SIGNAL_SEND_CLK))
 8008016:	4b42      	ldr	r3, [pc, #264]	; (8008120 <Process_Send_Signals_2_MIE+0x110>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4618      	mov	r0, r3
 800801c:	f006 fd06 	bl	800ea2c <HAL_Elaps_Ticks>
 8008020:	4602      	mov	r2, r0
 8008022:	4b40      	ldr	r3, [pc, #256]	; (8008124 <Process_Send_Signals_2_MIE+0x114>)
 8008024:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8008028:	429a      	cmp	r2, r3
 800802a:	d975      	bls.n	8008118 <Process_Send_Signals_2_MIE+0x108>
	{
		uint8_t Traverser = 0;
 800802c:	2300      	movs	r3, #0
 800802e:	71fb      	strb	r3, [r7, #7]
		uint8_t Choice = 0;
 8008030:	2300      	movs	r3, #0
 8008032:	70fb      	strb	r3, [r7, #3]

#endif
#ifdef EI_2


		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8008034:	493c      	ldr	r1, [pc, #240]	; (8008128 <Process_Send_Signals_2_MIE+0x118>)
 8008036:	483d      	ldr	r0, [pc, #244]	; (800812c <Process_Send_Signals_2_MIE+0x11c>)
 8008038:	f7f8 f902 	bl	8000240 <strcmp>
 800803c:	4603      	mov	r3, r0
 800803e:	2b00      	cmp	r3, #0
 8008040:	d102      	bne.n	8008048 <Process_Send_Signals_2_MIE+0x38>
		{
			Is_CAN_Exchange_happening = YES;
 8008042:	4b3b      	ldr	r3, [pc, #236]	; (8008130 <Process_Send_Signals_2_MIE+0x120>)
 8008044:	2201      	movs	r2, #1
 8008046:	701a      	strb	r2, [r3, #0]
		}
		if(Is_CAN_Exchange_happening == NO)
 8008048:	4b39      	ldr	r3, [pc, #228]	; (8008130 <Process_Send_Signals_2_MIE+0x120>)
 800804a:	781b      	ldrb	r3, [r3, #0]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d111      	bne.n	8008074 <Process_Send_Signals_2_MIE+0x64>
		{
			printf("CAN Packet Not Receiving from EIPC1\n");
 8008050:	4838      	ldr	r0, [pc, #224]	; (8008134 <Process_Send_Signals_2_MIE+0x124>)
 8008052:	f01a fb43 	bl	80226dc <puts>
			printf("Sending Blank Relay statuses\n");
 8008056:	4838      	ldr	r0, [pc, #224]	; (8008138 <Process_Send_Signals_2_MIE+0x128>)
 8008058:	f01a fb40 	bl	80226dc <puts>
			memset(&vEI_Transver_EI_To_MIE,0,sizeof(vEI_Transver_EI_To_MIE));
 800805c:	22a2      	movs	r2, #162	; 0xa2
 800805e:	2100      	movs	r1, #0
 8008060:	4836      	ldr	r0, [pc, #216]	; (800813c <Process_Send_Signals_2_MIE+0x12c>)
 8008062:	f01a f9b7 	bl	80223d4 <memset>
			TransmitCanPkt(EI_PROCESS_DATA);
 8008066:	f240 1019 	movw	r0, #281	; 0x119
 800806a:	f007 fa61 	bl	800f530 <TransmitCanPkt>
			SendCombineHealth();
 800806e:	f7f8 ff6d 	bl	8000f4c <SendCombineHealth>
 8008072:	e01c      	b.n	80080ae <Process_Send_Signals_2_MIE+0x9e>
		}
		else
		{
			for(Traverser =0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008074:	2300      	movs	r3, #0
 8008076:	71fb      	strb	r3, [r7, #7]
 8008078:	e013      	b.n	80080a2 <Process_Send_Signals_2_MIE+0x92>
			{
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Traverser].RelayIPS_Buff,MAX_OUTPUTS_PER_PEER);
 800807a:	79fb      	ldrb	r3, [r7, #7]
 800807c:	011b      	lsls	r3, r3, #4
 800807e:	4a2f      	ldr	r2, [pc, #188]	; (800813c <Process_Send_Signals_2_MIE+0x12c>)
 8008080:	4413      	add	r3, r2
 8008082:	1c98      	adds	r0, r3, #2
 8008084:	79fa      	ldrb	r2, [r7, #7]
 8008086:	4613      	mov	r3, r2
 8008088:	009b      	lsls	r3, r3, #2
 800808a:	4413      	add	r3, r2
 800808c:	009b      	lsls	r3, r3, #2
 800808e:	4a2c      	ldr	r2, [pc, #176]	; (8008140 <Process_Send_Signals_2_MIE+0x130>)
 8008090:	4413      	add	r3, r2
 8008092:	3301      	adds	r3, #1
 8008094:	2210      	movs	r2, #16
 8008096:	4619      	mov	r1, r3
 8008098:	f01a f974 	bl	8022384 <memcpy>
			for(Traverser =0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 800809c:	79fb      	ldrb	r3, [r7, #7]
 800809e:	3301      	adds	r3, #1
 80080a0:	71fb      	strb	r3, [r7, #7]
 80080a2:	4b20      	ldr	r3, [pc, #128]	; (8008124 <Process_Send_Signals_2_MIE+0x114>)
 80080a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80080a8:	79fa      	ldrb	r2, [r7, #7]
 80080aa:	429a      	cmp	r2, r3
 80080ac:	d3e5      	bcc.n	800807a <Process_Send_Signals_2_MIE+0x6a>
		//			{
		//				if()
		//			}
		//		}

		if(Debug_flag == 1)
 80080ae:	4b25      	ldr	r3, [pc, #148]	; (8008144 <Process_Send_Signals_2_MIE+0x134>)
 80080b0:	781b      	ldrb	r3, [r3, #0]
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	d12b      	bne.n	800810e <Process_Send_Signals_2_MIE+0xfe>
		{
			printf("Data Sending 2 MIE T:%02u:%02u:%02u\n",RTC_Date_time_Dec_st.Hour,RTC_Date_time_Dec_st.Mins,RTC_Date_time_Dec_st.Secs);
 80080b6:	4b24      	ldr	r3, [pc, #144]	; (8008148 <Process_Send_Signals_2_MIE+0x138>)
 80080b8:	781b      	ldrb	r3, [r3, #0]
 80080ba:	4619      	mov	r1, r3
 80080bc:	4b22      	ldr	r3, [pc, #136]	; (8008148 <Process_Send_Signals_2_MIE+0x138>)
 80080be:	785b      	ldrb	r3, [r3, #1]
 80080c0:	461a      	mov	r2, r3
 80080c2:	4b21      	ldr	r3, [pc, #132]	; (8008148 <Process_Send_Signals_2_MIE+0x138>)
 80080c4:	789b      	ldrb	r3, [r3, #2]
 80080c6:	4821      	ldr	r0, [pc, #132]	; (800814c <Process_Send_Signals_2_MIE+0x13c>)
 80080c8:	f01a fa6c 	bl	80225a4 <iprintf>
			//		for(uint16_t Byte = 0; Byte<Num_of_Bytes;++Byte )
			for(uint16_t Byte = 0; Byte<(EI_data.Hitachi_st.PeersCnt * MAX_OUTPUTS_PER_PEER);++Byte )
 80080cc:	2300      	movs	r3, #0
 80080ce:	80bb      	strh	r3, [r7, #4]
 80080d0:	e013      	b.n	80080fa <Process_Send_Signals_2_MIE+0xea>

			{
				printf("%02X ",vEI_Transver_EI_To_MIE.Inputs[Byte]);
 80080d2:	88bb      	ldrh	r3, [r7, #4]
 80080d4:	4a19      	ldr	r2, [pc, #100]	; (800813c <Process_Send_Signals_2_MIE+0x12c>)
 80080d6:	4413      	add	r3, r2
 80080d8:	789b      	ldrb	r3, [r3, #2]
 80080da:	4619      	mov	r1, r3
 80080dc:	481c      	ldr	r0, [pc, #112]	; (8008150 <Process_Send_Signals_2_MIE+0x140>)
 80080de:	f01a fa61 	bl	80225a4 <iprintf>
				if(((Byte+1)%16)==0)
 80080e2:	88bb      	ldrh	r3, [r7, #4]
 80080e4:	3301      	adds	r3, #1
 80080e6:	f003 030f 	and.w	r3, r3, #15
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d102      	bne.n	80080f4 <Process_Send_Signals_2_MIE+0xe4>
				{
					printf("\n");
 80080ee:	200a      	movs	r0, #10
 80080f0:	f01a fa70 	bl	80225d4 <putchar>
			for(uint16_t Byte = 0; Byte<(EI_data.Hitachi_st.PeersCnt * MAX_OUTPUTS_PER_PEER);++Byte )
 80080f4:	88bb      	ldrh	r3, [r7, #4]
 80080f6:	3301      	adds	r3, #1
 80080f8:	80bb      	strh	r3, [r7, #4]
 80080fa:	88ba      	ldrh	r2, [r7, #4]
 80080fc:	4b09      	ldr	r3, [pc, #36]	; (8008124 <Process_Send_Signals_2_MIE+0x114>)
 80080fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008102:	011b      	lsls	r3, r3, #4
 8008104:	429a      	cmp	r2, r3
 8008106:	dbe4      	blt.n	80080d2 <Process_Send_Signals_2_MIE+0xc2>
				}
			}
			printf("\n");
 8008108:	200a      	movs	r0, #10
 800810a:	f01a fa63 	bl	80225d4 <putchar>
		}

#endif
		MIE_Signal_Send_CLK = HAL_GetTick();
 800810e:	f00d fa3f 	bl	8015590 <HAL_GetTick>
 8008112:	4603      	mov	r3, r0
 8008114:	4a02      	ldr	r2, [pc, #8]	; (8008120 <Process_Send_Signals_2_MIE+0x110>)
 8008116:	6013      	str	r3, [r2, #0]
		UNUSED(Choice);
	}
}
 8008118:	bf00      	nop
 800811a:	3708      	adds	r7, #8
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}
 8008120:	20000e7c 	.word	0x20000e7c
 8008124:	20000304 	.word	0x20000304
 8008128:	08023d68 	.word	0x08023d68
 800812c:	20000305 	.word	0x20000305
 8008130:	20000108 	.word	0x20000108
 8008134:	08024c38 	.word	0x08024c38
 8008138:	08024c5c 	.word	0x08024c5c
 800813c:	200010f0 	.word	0x200010f0
 8008140:	20001e8c 	.word	0x20001e8c
 8008144:	20000645 	.word	0x20000645
 8008148:	200027ec 	.word	0x200027ec
 800814c:	08024c7c 	.word	0x08024c7c
 8008150:	08024ca4 	.word	0x08024ca4

08008154 <Print_EI_DATA>:
	Display("\n___________________________________________________\n");
}
#endif

void Print_EI_DATA(uint8_t *Msg,uint8_t Msg_Status,uint8_t Length)
{
 8008154:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008156:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 800815a:	af04      	add	r7, sp, #16
 800815c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008160:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008164:	6018      	str	r0, [r3, #0]
 8008166:	4608      	mov	r0, r1
 8008168:	4611      	mov	r1, r2
 800816a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800816e:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 8008172:	4602      	mov	r2, r0
 8008174:	701a      	strb	r2, [r3, #0]
 8008176:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800817a:	f2a3 230e 	subw	r3, r3, #526	; 0x20e
 800817e:	460a      	mov	r2, r1
 8008180:	701a      	strb	r2, [r3, #0]
	char Print_buff[512] = {0,};
 8008182:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008186:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800818a:	2200      	movs	r2, #0
 800818c:	601a      	str	r2, [r3, #0]
 800818e:	3304      	adds	r3, #4
 8008190:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 8008194:	2100      	movs	r1, #0
 8008196:	4618      	mov	r0, r3
 8008198:	f01a f91c 	bl	80223d4 <memset>
	uint8_t Msg_type;
	uint16_t Msg_status_flag;
	uint8_t Traverser = 0;
 800819c:	2300      	movs	r3, #0
 800819e:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f

	//	Display("\n________________________________________MSG DETAILS________________________________________\n");
	//Display("\nMSG STATUS:");

	Msg_Status?Display("\nR|"):Display("\nX|");
 80081a2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80081a6:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d003      	beq.n	80081b8 <Print_EI_DATA+0x64>
 80081b0:	48a8      	ldr	r0, [pc, #672]	; (8008454 <Print_EI_DATA+0x300>)
 80081b2:	f000 f975 	bl	80084a0 <Display>
 80081b6:	e002      	b.n	80081be <Print_EI_DATA+0x6a>
 80081b8:	48a7      	ldr	r0, [pc, #668]	; (8008458 <Print_EI_DATA+0x304>)
 80081ba:	f000 f971 	bl	80084a0 <Display>

	//sprintf(Print_buff,"D_ADDR: %04lX  |",ExtractBits(0,16,&Msg[1]));
	sprintf(Print_buff,"DA:%lu|",ExtractBits(0,16,&Msg[1]));
 80081be:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80081c2:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	3301      	adds	r3, #1
 80081ca:	461a      	mov	r2, r3
 80081cc:	2110      	movs	r1, #16
 80081ce:	2000      	movs	r0, #0
 80081d0:	f7f8 fa20 	bl	8000614 <ExtractBits>
 80081d4:	4602      	mov	r2, r0
 80081d6:	f107 030c 	add.w	r3, r7, #12
 80081da:	49a0      	ldr	r1, [pc, #640]	; (800845c <Print_EI_DATA+0x308>)
 80081dc:	4618      	mov	r0, r3
 80081de:	f01a fb99 	bl	8022914 <siprintf>
	Display(Print_buff);
 80081e2:	f107 030c 	add.w	r3, r7, #12
 80081e6:	4618      	mov	r0, r3
 80081e8:	f000 f95a 	bl	80084a0 <Display>

	//sprintf(Print_buff,"S_ADDR: %04lX|\n",ExtractBits(0,16,&Msg[3]));
	sprintf(Print_buff,"SA:%lu|",ExtractBits(0,16,&Msg[3]));
 80081ec:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80081f0:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	3303      	adds	r3, #3
 80081f8:	461a      	mov	r2, r3
 80081fa:	2110      	movs	r1, #16
 80081fc:	2000      	movs	r0, #0
 80081fe:	f7f8 fa09 	bl	8000614 <ExtractBits>
 8008202:	4602      	mov	r2, r0
 8008204:	f107 030c 	add.w	r3, r7, #12
 8008208:	4995      	ldr	r1, [pc, #596]	; (8008460 <Print_EI_DATA+0x30c>)
 800820a:	4618      	mov	r0, r3
 800820c:	f01a fb82 	bl	8022914 <siprintf>
	Display(Print_buff);
 8008210:	f107 030c 	add.w	r3, r7, #12
 8008214:	4618      	mov	r0, r3
 8008216:	f000 f943 	bl	80084a0 <Display>

	Msg_type = ExtractBits(0,8,&Msg[7]);
 800821a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800821e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	3307      	adds	r3, #7
 8008226:	461a      	mov	r2, r3
 8008228:	2108      	movs	r1, #8
 800822a:	2000      	movs	r0, #0
 800822c:	f7f8 f9f2 	bl	8000614 <ExtractBits>
 8008230:	4603      	mov	r3, r0
 8008232:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
	Display("MT:");
 8008236:	488b      	ldr	r0, [pc, #556]	; (8008464 <Print_EI_DATA+0x310>)
 8008238:	f000 f932 	bl	80084a0 <Display>
	switch(Msg_type)
 800823c:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8008240:	3b01      	subs	r3, #1
 8008242:	2b05      	cmp	r3, #5
 8008244:	d829      	bhi.n	800829a <Print_EI_DATA+0x146>
 8008246:	a201      	add	r2, pc, #4	; (adr r2, 800824c <Print_EI_DATA+0xf8>)
 8008248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800824c:	08008265 	.word	0x08008265
 8008250:	08008283 	.word	0x08008283
 8008254:	0800829b 	.word	0x0800829b
 8008258:	0800828b 	.word	0x0800828b
 800825c:	0800829b 	.word	0x0800829b
 8008260:	08008293 	.word	0x08008293
	{
	case 1:
		Msg_Status?Display("INIT_R"):Display("INIT_X");
 8008264:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008268:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d003      	beq.n	800827a <Print_EI_DATA+0x126>
 8008272:	487d      	ldr	r0, [pc, #500]	; (8008468 <Print_EI_DATA+0x314>)
 8008274:	f000 f914 	bl	80084a0 <Display>
		//Display("INIT     ");
		break;
 8008278:	e012      	b.n	80082a0 <Print_EI_DATA+0x14c>
		Msg_Status?Display("INIT_R"):Display("INIT_X");
 800827a:	487c      	ldr	r0, [pc, #496]	; (800846c <Print_EI_DATA+0x318>)
 800827c:	f000 f910 	bl	80084a0 <Display>
		break;
 8008280:	e00e      	b.n	80082a0 <Print_EI_DATA+0x14c>
	case 2:
		Display("VIT");
 8008282:	487b      	ldr	r0, [pc, #492]	; (8008470 <Print_EI_DATA+0x31c>)
 8008284:	f000 f90c 	bl	80084a0 <Display>
		break;
 8008288:	e00a      	b.n	80082a0 <Print_EI_DATA+0x14c>
	case 4:
		Display("STS");
 800828a:	487a      	ldr	r0, [pc, #488]	; (8008474 <Print_EI_DATA+0x320>)
 800828c:	f000 f908 	bl	80084a0 <Display>
		break;
 8008290:	e006      	b.n	80082a0 <Print_EI_DATA+0x14c>
	case 6:
		Display("SER");
 8008292:	4879      	ldr	r0, [pc, #484]	; (8008478 <Print_EI_DATA+0x324>)
 8008294:	f000 f904 	bl	80084a0 <Display>
		break;
 8008298:	e002      	b.n	80082a0 <Print_EI_DATA+0x14c>
	default:
		Display("UNKNOWN MESSAGE\n");
 800829a:	4878      	ldr	r0, [pc, #480]	; (800847c <Print_EI_DATA+0x328>)
 800829c:	f000 f900 	bl	80084a0 <Display>
	}
	Display("|");
 80082a0:	4877      	ldr	r0, [pc, #476]	; (8008480 <Print_EI_DATA+0x32c>)
 80082a2:	f000 f8fd 	bl	80084a0 <Display>

	sprintf(Print_buff,"TX:%02lX|",ExtractBits(0,8,&Msg[5]));
 80082a6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80082aa:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	3305      	adds	r3, #5
 80082b2:	461a      	mov	r2, r3
 80082b4:	2108      	movs	r1, #8
 80082b6:	2000      	movs	r0, #0
 80082b8:	f7f8 f9ac 	bl	8000614 <ExtractBits>
 80082bc:	4602      	mov	r2, r0
 80082be:	f107 030c 	add.w	r3, r7, #12
 80082c2:	4970      	ldr	r1, [pc, #448]	; (8008484 <Print_EI_DATA+0x330>)
 80082c4:	4618      	mov	r0, r3
 80082c6:	f01a fb25 	bl	8022914 <siprintf>
	Display(Print_buff);
 80082ca:	f107 030c 	add.w	r3, r7, #12
 80082ce:	4618      	mov	r0, r3
 80082d0:	f000 f8e6 	bl	80084a0 <Display>

	sprintf(Print_buff,"RX:%02lX|",ExtractBits(0,8,&Msg[6]));
 80082d4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80082d8:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	3306      	adds	r3, #6
 80082e0:	461a      	mov	r2, r3
 80082e2:	2108      	movs	r1, #8
 80082e4:	2000      	movs	r0, #0
 80082e6:	f7f8 f995 	bl	8000614 <ExtractBits>
 80082ea:	4602      	mov	r2, r0
 80082ec:	f107 030c 	add.w	r3, r7, #12
 80082f0:	4965      	ldr	r1, [pc, #404]	; (8008488 <Print_EI_DATA+0x334>)
 80082f2:	4618      	mov	r0, r3
 80082f4:	f01a fb0e 	bl	8022914 <siprintf>
	Display(Print_buff);
 80082f8:	f107 030c 	add.w	r3, r7, #12
 80082fc:	4618      	mov	r0, r3
 80082fe:	f000 f8cf 	bl	80084a0 <Display>

	Msg_status_flag = ExtractBits(0,16,&Msg[8]);
 8008302:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008306:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	3308      	adds	r3, #8
 800830e:	461a      	mov	r2, r3
 8008310:	2110      	movs	r1, #16
 8008312:	2000      	movs	r0, #0
 8008314:	f7f8 f97e 	bl	8000614 <ExtractBits>
 8008318:	4603      	mov	r3, r0
 800831a:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
	sprintf(Print_buff,"MSF:%04X|",Msg_status_flag);
 800831e:	f8b7 220c 	ldrh.w	r2, [r7, #524]	; 0x20c
 8008322:	f107 030c 	add.w	r3, r7, #12
 8008326:	4959      	ldr	r1, [pc, #356]	; (800848c <Print_EI_DATA+0x338>)
 8008328:	4618      	mov	r0, r3
 800832a:	f01a faf3 	bl	8022914 <siprintf>
	Display(Print_buff);
 800832e:	f107 030c 	add.w	r3, r7, #12
 8008332:	4618      	mov	r0, r3
 8008334:	f000 f8b4 	bl	80084a0 <Display>
	if( ((Msg_status_flag >> 5)&1) == 1)
 8008338:	f8b7 320c 	ldrh.w	r3, [r7, #524]	; 0x20c
 800833c:	095b      	lsrs	r3, r3, #5
 800833e:	b29b      	uxth	r3, r3
 8008340:	f003 0301 	and.w	r3, r3, #1
 8008344:	2b00      	cmp	r3, #0
 8008346:	d03f      	beq.n	80083c8 <Print_EI_DATA+0x274>
	{
		sprintf(Print_buff,"DT:%02X%02X%02X|T:%02X:%02X:%02X\n",Msg[10],Msg[11],Msg[12],Msg[13],Msg[14],Msg[15]);
 8008348:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800834c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	330a      	adds	r3, #10
 8008354:	781b      	ldrb	r3, [r3, #0]
 8008356:	461d      	mov	r5, r3
 8008358:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800835c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	330b      	adds	r3, #11
 8008364:	781b      	ldrb	r3, [r3, #0]
 8008366:	461e      	mov	r6, r3
 8008368:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800836c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	330c      	adds	r3, #12
 8008374:	781b      	ldrb	r3, [r3, #0]
 8008376:	461a      	mov	r2, r3
 8008378:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800837c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	330d      	adds	r3, #13
 8008384:	781b      	ldrb	r3, [r3, #0]
 8008386:	4619      	mov	r1, r3
 8008388:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800838c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	330e      	adds	r3, #14
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	461c      	mov	r4, r3
 8008398:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800839c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	330f      	adds	r3, #15
 80083a4:	781b      	ldrb	r3, [r3, #0]
 80083a6:	f107 000c 	add.w	r0, r7, #12
 80083aa:	9303      	str	r3, [sp, #12]
 80083ac:	9402      	str	r4, [sp, #8]
 80083ae:	9101      	str	r1, [sp, #4]
 80083b0:	9200      	str	r2, [sp, #0]
 80083b2:	4633      	mov	r3, r6
 80083b4:	462a      	mov	r2, r5
 80083b6:	4936      	ldr	r1, [pc, #216]	; (8008490 <Print_EI_DATA+0x33c>)
 80083b8:	f01a faac 	bl	8022914 <siprintf>
		Display(Print_buff);
 80083bc:	f107 030c 	add.w	r3, r7, #12
 80083c0:	4618      	mov	r0, r3
 80083c2:	f000 f86d 	bl	80084a0 <Display>
 80083c6:	e002      	b.n	80083ce <Print_EI_DATA+0x27a>
	}
	else
	{
		Display("NO TIME SPECIFIED\n");
 80083c8:	4832      	ldr	r0, [pc, #200]	; (8008494 <Print_EI_DATA+0x340>)
 80083ca:	f000 f869 	bl	80084a0 <Display>
	}
	if(Debug_flag == 1)
 80083ce:	4b32      	ldr	r3, [pc, #200]	; (8008498 <Print_EI_DATA+0x344>)
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	d139      	bne.n	800844a <Print_EI_DATA+0x2f6>
	{
		for(Traverser = 0;Traverser<Length;++Traverser)
 80083d6:	2300      	movs	r3, #0
 80083d8:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 80083dc:	e019      	b.n	8008412 <Print_EI_DATA+0x2be>
		{
			sprintf(Print_buff,"%02X ",Msg[Traverser]);
 80083de:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 80083e2:	f507 7204 	add.w	r2, r7, #528	; 0x210
 80083e6:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 80083ea:	6812      	ldr	r2, [r2, #0]
 80083ec:	4413      	add	r3, r2
 80083ee:	781b      	ldrb	r3, [r3, #0]
 80083f0:	461a      	mov	r2, r3
 80083f2:	f107 030c 	add.w	r3, r7, #12
 80083f6:	4929      	ldr	r1, [pc, #164]	; (800849c <Print_EI_DATA+0x348>)
 80083f8:	4618      	mov	r0, r3
 80083fa:	f01a fa8b 	bl	8022914 <siprintf>
			Display(Print_buff);
 80083fe:	f107 030c 	add.w	r3, r7, #12
 8008402:	4618      	mov	r0, r3
 8008404:	f000 f84c 	bl	80084a0 <Display>
		for(Traverser = 0;Traverser<Length;++Traverser)
 8008408:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 800840c:	3301      	adds	r3, #1
 800840e:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 8008412:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008416:	f2a3 230e 	subw	r3, r3, #526	; 0x20e
 800841a:	f897 220f 	ldrb.w	r2, [r7, #527]	; 0x20f
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	429a      	cmp	r2, r3
 8008422:	d3dc      	bcc.n	80083de <Print_EI_DATA+0x28a>
			//		if( (Traverser>0) && ((Traverser%16) == 0) )
			//		{
			//			Display("\n");
			//		}
		}
		if(Msg_Status == XMT)
 8008424:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008428:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 800842c:	781b      	ldrb	r3, [r3, #0]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d10b      	bne.n	800844a <Print_EI_DATA+0x2f6>
		{
			sprintf(Print_buff,"%02X ",0xF6);
 8008432:	f107 030c 	add.w	r3, r7, #12
 8008436:	22f6      	movs	r2, #246	; 0xf6
 8008438:	4918      	ldr	r1, [pc, #96]	; (800849c <Print_EI_DATA+0x348>)
 800843a:	4618      	mov	r0, r3
 800843c:	f01a fa6a 	bl	8022914 <siprintf>
			Display(Print_buff);
 8008440:	f107 030c 	add.w	r3, r7, #12
 8008444:	4618      	mov	r0, r3
 8008446:	f000 f82b 	bl	80084a0 <Display>
		}
	}
	//	Display("\n");
	//Display("\n__________ MSG DETAILS __________\n");
}
 800844a:	bf00      	nop
 800844c:	f507 7705 	add.w	r7, r7, #532	; 0x214
 8008450:	46bd      	mov	sp, r7
 8008452:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008454:	08024cac 	.word	0x08024cac
 8008458:	08024cb0 	.word	0x08024cb0
 800845c:	08024cb4 	.word	0x08024cb4
 8008460:	08024cbc 	.word	0x08024cbc
 8008464:	08024cc4 	.word	0x08024cc4
 8008468:	08024cc8 	.word	0x08024cc8
 800846c:	08024cd0 	.word	0x08024cd0
 8008470:	08024cd8 	.word	0x08024cd8
 8008474:	08024cdc 	.word	0x08024cdc
 8008478:	08024ce0 	.word	0x08024ce0
 800847c:	08024ce4 	.word	0x08024ce4
 8008480:	08024cf8 	.word	0x08024cf8
 8008484:	08024cfc 	.word	0x08024cfc
 8008488:	08024d08 	.word	0x08024d08
 800848c:	08024d14 	.word	0x08024d14
 8008490:	08024d20 	.word	0x08024d20
 8008494:	08024d44 	.word	0x08024d44
 8008498:	20000645 	.word	0x20000645
 800849c:	08024ca4 	.word	0x08024ca4

080084a0 <Display>:

void Display(char *Data)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b084      	sub	sp, #16
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
	uint8_t Traverser = 0;
 80084a8:	2300      	movs	r3, #0
 80084aa:	73fb      	strb	r3, [r7, #15]
	for(;Data[Traverser];++Traverser)
 80084ac:	e00a      	b.n	80084c4 <Display+0x24>
	{
		Com_SendByte(0,Data[Traverser]);
 80084ae:	7bfb      	ldrb	r3, [r7, #15]
 80084b0:	687a      	ldr	r2, [r7, #4]
 80084b2:	4413      	add	r3, r2
 80084b4:	781b      	ldrb	r3, [r3, #0]
 80084b6:	4619      	mov	r1, r3
 80084b8:	2000      	movs	r0, #0
 80084ba:	f00c fe11 	bl	80150e0 <Com_SendByte>
	for(;Data[Traverser];++Traverser)
 80084be:	7bfb      	ldrb	r3, [r7, #15]
 80084c0:	3301      	adds	r3, #1
 80084c2:	73fb      	strb	r3, [r7, #15]
 80084c4:	7bfb      	ldrb	r3, [r7, #15]
 80084c6:	687a      	ldr	r2, [r7, #4]
 80084c8:	4413      	add	r3, r2
 80084ca:	781b      	ldrb	r3, [r3, #0]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d1ee      	bne.n	80084ae <Display+0xe>
	}
}
 80084d0:	bf00      	nop
 80084d2:	bf00      	nop
 80084d4:	3710      	adds	r7, #16
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}
	...

080084dc <print_self_Details>:
	}

}

void print_self_Details(void)
{
 80084dc:	b5b0      	push	{r4, r5, r7, lr}
 80084de:	b086      	sub	sp, #24
 80084e0:	af04      	add	r7, sp, #16
	uint8_t Traverser = 0;
 80084e2:	2300      	movs	r3, #0
 80084e4:	71fb      	strb	r3, [r7, #7]

#ifdef EI_1
	printf("\n ______________________________ EI_1_SELF_DETAILS ______________________________ \n");
#endif
#ifdef EI_2
	printf("\n ______________________________ EI_2_SELF_DETAILS ______________________________ \n");
 80084e6:	4890      	ldr	r0, [pc, #576]	; (8008728 <print_self_Details+0x24c>)
 80084e8:	f01a f8f8 	bl	80226dc <puts>
#endif

	printf("EI_data.Hitachi_st.No_of_IP_s:%u\n",EI_data.Hitachi_st.No_of_IP_s);
 80084ec:	4b8f      	ldr	r3, [pc, #572]	; (800872c <print_self_Details+0x250>)
 80084ee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80084f2:	4619      	mov	r1, r3
 80084f4:	488e      	ldr	r0, [pc, #568]	; (8008730 <print_self_Details+0x254>)
 80084f6:	f01a f855 	bl	80225a4 <iprintf>
	printf("EI_data.Hitachi_st.CanXchange:%lu\n",EI_data.Hitachi_st.CAN_Xchange_Time);
 80084fa:	4b8c      	ldr	r3, [pc, #560]	; (800872c <print_self_Details+0x250>)
 80084fc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008500:	4619      	mov	r1, r3
 8008502:	488c      	ldr	r0, [pc, #560]	; (8008734 <print_self_Details+0x258>)
 8008504:	f01a f84e 	bl	80225a4 <iprintf>
	printf("EI_data.Hitachi_st.CanXchangeTimeout:%lu\n",EI_data.Hitachi_st.CAN_EXCHANGE_TIME_OUT);
 8008508:	4b88      	ldr	r3, [pc, #544]	; (800872c <print_self_Details+0x250>)
 800850a:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800850e:	4619      	mov	r1, r3
 8008510:	4889      	ldr	r0, [pc, #548]	; (8008738 <print_self_Details+0x25c>)
 8008512:	f01a f847 	bl	80225a4 <iprintf>
	printf("EI_data.Hitachi_st.MIE_SIGNAL_SEND_CLK:%lu\n",EI_data.Hitachi_st.MIE_SIGNAL_SEND_CLK);
 8008516:	4b85      	ldr	r3, [pc, #532]	; (800872c <print_self_Details+0x250>)
 8008518:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800851c:	4619      	mov	r1, r3
 800851e:	4887      	ldr	r0, [pc, #540]	; (800873c <print_self_Details+0x260>)
 8008520:	f01a f840 	bl	80225a4 <iprintf>
	printf("EI_data.Hitachi_st.HEALTH_PACKET_TIME:%lu\n",EI_data.Hitachi_st.HEALTH_PACKET_TIME);
 8008524:	4b81      	ldr	r3, [pc, #516]	; (800872c <print_self_Details+0x250>)
 8008526:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800852a:	4619      	mov	r1, r3
 800852c:	4884      	ldr	r0, [pc, #528]	; (8008740 <print_self_Details+0x264>)
 800852e:	f01a f839 	bl	80225a4 <iprintf>
	printf("EI_data.Hitachi_st.Self_Listening_Port:%u\n",EI_data.Hitachi_st.Self_Listening_Port[CARD_INDEX]);
 8008532:	4b7e      	ldr	r3, [pc, #504]	; (800872c <print_self_Details+0x250>)
 8008534:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008538:	4619      	mov	r1, r3
 800853a:	4882      	ldr	r0, [pc, #520]	; (8008744 <print_self_Details+0x268>)
 800853c:	f01a f832 	bl	80225a4 <iprintf>
	printf("EI_data.Hitachi_st.No_of_IP_s:%u\n",EI_data.Hitachi_st.No_of_IP_s);
 8008540:	4b7a      	ldr	r3, [pc, #488]	; (800872c <print_self_Details+0x250>)
 8008542:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008546:	4619      	mov	r1, r3
 8008548:	4879      	ldr	r0, [pc, #484]	; (8008730 <print_self_Details+0x254>)
 800854a:	f01a f82b 	bl	80225a4 <iprintf>


	for(Traverser = 0;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 800854e:	2300      	movs	r3, #0
 8008550:	71fb      	strb	r3, [r7, #7]
 8008552:	e03b      	b.n	80085cc <print_self_Details+0xf0>
	{
		printf("Source IP[%u]  :%u.%u.%u.%u\n",Traverser,EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][0],EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][1],EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][2],EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][3]);
 8008554:	79f9      	ldrb	r1, [r7, #7]
 8008556:	79fb      	ldrb	r3, [r7, #7]
 8008558:	4a74      	ldr	r2, [pc, #464]	; (800872c <print_self_Details+0x250>)
 800855a:	3326      	adds	r3, #38	; 0x26
 800855c:	009b      	lsls	r3, r3, #2
 800855e:	4413      	add	r3, r2
 8008560:	78db      	ldrb	r3, [r3, #3]
 8008562:	461c      	mov	r4, r3
 8008564:	79fb      	ldrb	r3, [r7, #7]
 8008566:	4a71      	ldr	r2, [pc, #452]	; (800872c <print_self_Details+0x250>)
 8008568:	009b      	lsls	r3, r3, #2
 800856a:	4413      	add	r3, r2
 800856c:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8008570:	461d      	mov	r5, r3
 8008572:	79fb      	ldrb	r3, [r7, #7]
 8008574:	4a6d      	ldr	r2, [pc, #436]	; (800872c <print_self_Details+0x250>)
 8008576:	009b      	lsls	r3, r3, #2
 8008578:	4413      	add	r3, r2
 800857a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800857e:	4618      	mov	r0, r3
 8008580:	79fb      	ldrb	r3, [r7, #7]
 8008582:	4a6a      	ldr	r2, [pc, #424]	; (800872c <print_self_Details+0x250>)
 8008584:	009b      	lsls	r3, r3, #2
 8008586:	4413      	add	r3, r2
 8008588:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800858c:	9301      	str	r3, [sp, #4]
 800858e:	9000      	str	r0, [sp, #0]
 8008590:	462b      	mov	r3, r5
 8008592:	4622      	mov	r2, r4
 8008594:	486c      	ldr	r0, [pc, #432]	; (8008748 <print_self_Details+0x26c>)
 8008596:	f01a f805 	bl	80225a4 <iprintf>
		printf("TX_Port[%u]:%u\n",Traverser,EI_data.Hitachi_st.PORTS[CARD_INDEX][Traverser][TX_PORT]);
 800859a:	79f9      	ldrb	r1, [r7, #7]
 800859c:	79fb      	ldrb	r3, [r7, #7]
 800859e:	4a63      	ldr	r2, [pc, #396]	; (800872c <print_self_Details+0x250>)
 80085a0:	3352      	adds	r3, #82	; 0x52
 80085a2:	009b      	lsls	r3, r3, #2
 80085a4:	4413      	add	r3, r2
 80085a6:	885b      	ldrh	r3, [r3, #2]
 80085a8:	461a      	mov	r2, r3
 80085aa:	4868      	ldr	r0, [pc, #416]	; (800874c <print_self_Details+0x270>)
 80085ac:	f019 fffa 	bl	80225a4 <iprintf>
		printf("RX_Port[%u]:%u\n",Traverser,EI_data.Hitachi_st.PORTS[CARD_INDEX][Traverser][RX_PORT]);
 80085b0:	79f9      	ldrb	r1, [r7, #7]
 80085b2:	79fb      	ldrb	r3, [r7, #7]
 80085b4:	4a5d      	ldr	r2, [pc, #372]	; (800872c <print_self_Details+0x250>)
 80085b6:	009b      	lsls	r3, r3, #2
 80085b8:	4413      	add	r3, r2
 80085ba:	f8b3 314c 	ldrh.w	r3, [r3, #332]	; 0x14c
 80085be:	461a      	mov	r2, r3
 80085c0:	4863      	ldr	r0, [pc, #396]	; (8008750 <print_self_Details+0x274>)
 80085c2:	f019 ffef 	bl	80225a4 <iprintf>
	for(Traverser = 0;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 80085c6:	79fb      	ldrb	r3, [r7, #7]
 80085c8:	3301      	adds	r3, #1
 80085ca:	71fb      	strb	r3, [r7, #7]
 80085cc:	4b57      	ldr	r3, [pc, #348]	; (800872c <print_self_Details+0x250>)
 80085ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80085d2:	79fa      	ldrb	r2, [r7, #7]
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d3bd      	bcc.n	8008554 <print_self_Details+0x78>
	}
	printf("Self IP       :%u.%u.%u.%u\n",EI_data.Hitachi_st.Self_IP[CARD_INDEX][0],EI_data.Hitachi_st.Self_IP[CARD_INDEX][1],EI_data.Hitachi_st.Self_IP[CARD_INDEX][2],EI_data.Hitachi_st.Self_IP[CARD_INDEX][3]);
 80085d8:	4b54      	ldr	r3, [pc, #336]	; (800872c <print_self_Details+0x250>)
 80085da:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80085de:	4619      	mov	r1, r3
 80085e0:	4b52      	ldr	r3, [pc, #328]	; (800872c <print_self_Details+0x250>)
 80085e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085e6:	461a      	mov	r2, r3
 80085e8:	4b50      	ldr	r3, [pc, #320]	; (800872c <print_self_Details+0x250>)
 80085ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085ee:	4618      	mov	r0, r3
 80085f0:	4b4e      	ldr	r3, [pc, #312]	; (800872c <print_self_Details+0x250>)
 80085f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80085f6:	9300      	str	r3, [sp, #0]
 80085f8:	4603      	mov	r3, r0
 80085fa:	4856      	ldr	r0, [pc, #344]	; (8008754 <print_self_Details+0x278>)
 80085fc:	f019 ffd2 	bl	80225a4 <iprintf>
	printf("Self MAC      :%02X:%02X:%02X:%02X:%02X:%02X\n",EI_data.Hitachi_st.Self_MAC[CARD_INDEX][0],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][1],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][2],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][3],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][4],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][5]);
 8008600:	4b4a      	ldr	r3, [pc, #296]	; (800872c <print_self_Details+0x250>)
 8008602:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008606:	4618      	mov	r0, r3
 8008608:	4b48      	ldr	r3, [pc, #288]	; (800872c <print_self_Details+0x250>)
 800860a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800860e:	461c      	mov	r4, r3
 8008610:	4b46      	ldr	r3, [pc, #280]	; (800872c <print_self_Details+0x250>)
 8008612:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8008616:	461d      	mov	r5, r3
 8008618:	4b44      	ldr	r3, [pc, #272]	; (800872c <print_self_Details+0x250>)
 800861a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800861e:	461a      	mov	r2, r3
 8008620:	4b42      	ldr	r3, [pc, #264]	; (800872c <print_self_Details+0x250>)
 8008622:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8008626:	4619      	mov	r1, r3
 8008628:	4b40      	ldr	r3, [pc, #256]	; (800872c <print_self_Details+0x250>)
 800862a:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800862e:	9302      	str	r3, [sp, #8]
 8008630:	9101      	str	r1, [sp, #4]
 8008632:	9200      	str	r2, [sp, #0]
 8008634:	462b      	mov	r3, r5
 8008636:	4622      	mov	r2, r4
 8008638:	4601      	mov	r1, r0
 800863a:	4847      	ldr	r0, [pc, #284]	; (8008758 <print_self_Details+0x27c>)
 800863c:	f019 ffb2 	bl	80225a4 <iprintf>

	printf("Listening Port:%u\n",EI_data.Hitachi_st.Self_Listening_Port[CARD_INDEX]);
 8008640:	4b3a      	ldr	r3, [pc, #232]	; (800872c <print_self_Details+0x250>)
 8008642:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008646:	4619      	mov	r1, r3
 8008648:	4844      	ldr	r0, [pc, #272]	; (800875c <print_self_Details+0x280>)
 800864a:	f019 ffab 	bl	80225a4 <iprintf>

	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 800864e:	2300      	movs	r3, #0
 8008650:	71fb      	strb	r3, [r7, #7]
 8008652:	e05c      	b.n	800870e <print_self_Details+0x232>
	{
		printf("\nPEER:%u Details:\n",Traverser+1);
 8008654:	79fb      	ldrb	r3, [r7, #7]
 8008656:	3301      	adds	r3, #1
 8008658:	4619      	mov	r1, r3
 800865a:	4841      	ldr	r0, [pc, #260]	; (8008760 <print_self_Details+0x284>)
 800865c:	f019 ffa2 	bl	80225a4 <iprintf>
		printf("Source Peer Address:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
 8008660:	79fb      	ldrb	r3, [r7, #7]
 8008662:	4a32      	ldr	r2, [pc, #200]	; (800872c <print_self_Details+0x250>)
 8008664:	3366      	adds	r3, #102	; 0x66
 8008666:	009b      	lsls	r3, r3, #2
 8008668:	4413      	add	r3, r2
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	4619      	mov	r1, r3
 800866e:	483d      	ldr	r0, [pc, #244]	; (8008764 <print_self_Details+0x288>)
 8008670:	f019 ff98 	bl	80225a4 <iprintf>
		printf("Dest   Peer Address:%lu\n",EI_data.Hitachi_st.DEST_ADDRESSES[Traverser]);
 8008674:	79fb      	ldrb	r3, [r7, #7]
 8008676:	4a2d      	ldr	r2, [pc, #180]	; (800872c <print_self_Details+0x250>)
 8008678:	3370      	adds	r3, #112	; 0x70
 800867a:	009b      	lsls	r3, r3, #2
 800867c:	4413      	add	r3, r2
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	4619      	mov	r1, r3
 8008682:	4839      	ldr	r0, [pc, #228]	; (8008768 <print_self_Details+0x28c>)
 8008684:	f019 ff8e 	bl	80225a4 <iprintf>
		printf("MLK Application CRC:0x%04X\n",EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][Traverser]);
 8008688:	79fb      	ldrb	r3, [r7, #7]
 800868a:	4a28      	ldr	r2, [pc, #160]	; (800872c <print_self_Details+0x250>)
 800868c:	33fe      	adds	r3, #254	; 0xfe
 800868e:	005b      	lsls	r3, r3, #1
 8008690:	4413      	add	r3, r2
 8008692:	889b      	ldrh	r3, [r3, #4]
 8008694:	4619      	mov	r1, r3
 8008696:	4835      	ldr	r0, [pc, #212]	; (800876c <print_self_Details+0x290>)
 8008698:	f019 ff84 	bl	80225a4 <iprintf>
		printf("Number of Outputs  :%u\n",EI_data.Hitachi_st.Bool_outputs[Traverser]);
 800869c:	79fb      	ldrb	r3, [r7, #7]
 800869e:	4a23      	ldr	r2, [pc, #140]	; (800872c <print_self_Details+0x250>)
 80086a0:	4413      	add	r3, r2
 80086a2:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 80086a6:	4619      	mov	r1, r3
 80086a8:	4831      	ldr	r0, [pc, #196]	; (8008770 <print_self_Details+0x294>)
 80086aa:	f019 ff7b 	bl	80225a4 <iprintf>
		printf("Clock Master:%u\n",EI_data.Hitachi_st.ClockMaster[Traverser]);
 80086ae:	79fb      	ldrb	r3, [r7, #7]
 80086b0:	4a1e      	ldr	r2, [pc, #120]	; (800872c <print_self_Details+0x250>)
 80086b2:	4413      	add	r3, r2
 80086b4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80086b8:	4619      	mov	r1, r3
 80086ba:	482e      	ldr	r0, [pc, #184]	; (8008774 <print_self_Details+0x298>)
 80086bc:	f019 ff72 	bl	80225a4 <iprintf>
		printf("Interface Type:%u\n",EI_data.Hitachi_st.Interface_Type[Traverser]);
 80086c0:	79fb      	ldrb	r3, [r7, #7]
 80086c2:	4a1a      	ldr	r2, [pc, #104]	; (800872c <print_self_Details+0x250>)
 80086c4:	4413      	add	r3, r2
 80086c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80086ca:	4619      	mov	r1, r3
 80086cc:	482a      	ldr	r0, [pc, #168]	; (8008778 <print_self_Details+0x29c>)
 80086ce:	f019 ff69 	bl	80225a4 <iprintf>
		printf("COMM_FAILURE_TIME_OUT:%lu\n",EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Traverser]);
 80086d2:	79fb      	ldrb	r3, [r7, #7]
 80086d4:	4a15      	ldr	r2, [pc, #84]	; (800872c <print_self_Details+0x250>)
 80086d6:	338a      	adds	r3, #138	; 0x8a
 80086d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086dc:	4619      	mov	r1, r3
 80086de:	4827      	ldr	r0, [pc, #156]	; (800877c <print_self_Details+0x2a0>)
 80086e0:	f019 ff60 	bl	80225a4 <iprintf>
		printf("STALE_DATA_TIME_OUT:%lu\n",EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser]);
 80086e4:	79fb      	ldrb	r3, [r7, #7]
 80086e6:	4a11      	ldr	r2, [pc, #68]	; (800872c <print_self_Details+0x250>)
 80086e8:	3394      	adds	r3, #148	; 0x94
 80086ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086ee:	4619      	mov	r1, r3
 80086f0:	4823      	ldr	r0, [pc, #140]	; (8008780 <print_self_Details+0x2a4>)
 80086f2:	f019 ff57 	bl	80225a4 <iprintf>
		printf("LinkEstablishTimeout:%lu\n",EI_data.Hitachi_st.LinkEstablishTimeout[Traverser]);
 80086f6:	79fb      	ldrb	r3, [r7, #7]
 80086f8:	4a0c      	ldr	r2, [pc, #48]	; (800872c <print_self_Details+0x250>)
 80086fa:	339e      	adds	r3, #158	; 0x9e
 80086fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008700:	4619      	mov	r1, r3
 8008702:	4820      	ldr	r0, [pc, #128]	; (8008784 <print_self_Details+0x2a8>)
 8008704:	f019 ff4e 	bl	80225a4 <iprintf>
	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008708:	79fb      	ldrb	r3, [r7, #7]
 800870a:	3301      	adds	r3, #1
 800870c:	71fb      	strb	r3, [r7, #7]
 800870e:	4b07      	ldr	r3, [pc, #28]	; (800872c <print_self_Details+0x250>)
 8008710:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008714:	79fa      	ldrb	r2, [r7, #7]
 8008716:	429a      	cmp	r2, r3
 8008718:	d39c      	bcc.n	8008654 <print_self_Details+0x178>

#ifdef EI_1
	printf("\n ______________________________ EI_1_SELF_DETAILS ______________________________ \n");
#endif
#ifdef EI_2
	printf("\n ______________________________ EI_2_SELF_DETAILS ______________________________ \n");
 800871a:	4803      	ldr	r0, [pc, #12]	; (8008728 <print_self_Details+0x24c>)
 800871c:	f019 ffde 	bl	80226dc <puts>
#endif
}
 8008720:	bf00      	nop
 8008722:	3708      	adds	r7, #8
 8008724:	46bd      	mov	sp, r7
 8008726:	bdb0      	pop	{r4, r5, r7, pc}
 8008728:	08024db8 	.word	0x08024db8
 800872c:	20000304 	.word	0x20000304
 8008730:	08024e0c 	.word	0x08024e0c
 8008734:	08024e30 	.word	0x08024e30
 8008738:	08024e54 	.word	0x08024e54
 800873c:	08024e80 	.word	0x08024e80
 8008740:	08024eac 	.word	0x08024eac
 8008744:	08024ed8 	.word	0x08024ed8
 8008748:	08024f04 	.word	0x08024f04
 800874c:	08024f24 	.word	0x08024f24
 8008750:	08024f34 	.word	0x08024f34
 8008754:	08024f44 	.word	0x08024f44
 8008758:	08024f60 	.word	0x08024f60
 800875c:	08024f90 	.word	0x08024f90
 8008760:	08024fa4 	.word	0x08024fa4
 8008764:	08024fb8 	.word	0x08024fb8
 8008768:	08024fd4 	.word	0x08024fd4
 800876c:	08024ff0 	.word	0x08024ff0
 8008770:	0802500c 	.word	0x0802500c
 8008774:	08025024 	.word	0x08025024
 8008778:	08025038 	.word	0x08025038
 800877c:	0802504c 	.word	0x0802504c
 8008780:	08025068 	.word	0x08025068
 8008784:	08025084 	.word	0x08025084

08008788 <Send_Init_After_Timeout>:

void Send_Init_After_Timeout(void)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b082      	sub	sp, #8
 800878c:	af00      	add	r7, sp, #0
	uint8_t Traverser =0;
 800878e:	2300      	movs	r3, #0
 8008790:	71fb      	strb	r3, [r7, #7]

	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008792:	2300      	movs	r3, #0
 8008794:	71fb      	strb	r3, [r7, #7]
 8008796:	e058      	b.n	800884a <Send_Init_After_Timeout+0xc2>
	{
		if(Last_Recevied_Clock[Traverser] != 0)
 8008798:	79fb      	ldrb	r3, [r7, #7]
 800879a:	4a31      	ldr	r2, [pc, #196]	; (8008860 <Send_Init_After_Timeout+0xd8>)
 800879c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d04f      	beq.n	8008844 <Send_Init_After_Timeout+0xbc>
			}
#endif
#ifdef EI_2
			if(
					(
							( (HAL_Elaps_Ticks(Last_Recevied_Clock[Traverser]) > (EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser] + ONE_SEC)) &&
 80087a4:	79fb      	ldrb	r3, [r7, #7]
 80087a6:	4a2e      	ldr	r2, [pc, #184]	; (8008860 <Send_Init_After_Timeout+0xd8>)
 80087a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087ac:	4618      	mov	r0, r3
 80087ae:	f006 f93d 	bl	800ea2c <HAL_Elaps_Ticks>
 80087b2:	4602      	mov	r2, r0
 80087b4:	79fb      	ldrb	r3, [r7, #7]
 80087b6:	492b      	ldr	r1, [pc, #172]	; (8008864 <Send_Init_After_Timeout+0xdc>)
 80087b8:	3394      	adds	r3, #148	; 0x94
 80087ba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80087be:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
			if(
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d93e      	bls.n	8008844 <Send_Init_After_Timeout+0xbc>
									(HAL_Elaps_Ticks(OtherCardReceptionClk[Traverser]) > (EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser] + ONE_SEC))) &&
 80087c6:	79fb      	ldrb	r3, [r7, #7]
 80087c8:	4a27      	ldr	r2, [pc, #156]	; (8008868 <Send_Init_After_Timeout+0xe0>)
 80087ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087ce:	4618      	mov	r0, r3
 80087d0:	f006 f92c 	bl	800ea2c <HAL_Elaps_Ticks>
 80087d4:	4602      	mov	r2, r0
 80087d6:	79fb      	ldrb	r3, [r7, #7]
 80087d8:	4922      	ldr	r1, [pc, #136]	; (8008864 <Send_Init_After_Timeout+0xdc>)
 80087da:	3394      	adds	r3, #148	; 0x94
 80087dc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80087e0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
							( (HAL_Elaps_Ticks(Last_Recevied_Clock[Traverser]) > (EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser] + ONE_SEC)) &&
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d92d      	bls.n	8008844 <Send_Init_After_Timeout+0xbc>

									(Init_Msg_Sent_After_Timeout[Traverser] != 1) &&
 80087e8:	79fb      	ldrb	r3, [r7, #7]
 80087ea:	4a20      	ldr	r2, [pc, #128]	; (800886c <Send_Init_After_Timeout+0xe4>)
 80087ec:	5cd3      	ldrb	r3, [r2, r3]
									(HAL_Elaps_Ticks(OtherCardReceptionClk[Traverser]) > (EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser] + ONE_SEC))) &&
 80087ee:	2b01      	cmp	r3, #1
 80087f0:	d028      	beq.n	8008844 <Send_Init_After_Timeout+0xbc>
									(Last_Received_Init_Clk[Traverser] > ONE_SEC) )
 80087f2:	79fb      	ldrb	r3, [r7, #7]
 80087f4:	4a1e      	ldr	r2, [pc, #120]	; (8008870 <Send_Init_After_Timeout+0xe8>)
 80087f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
									(Init_Msg_Sent_After_Timeout[Traverser] != 1) &&
 80087fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80087fe:	d921      	bls.n	8008844 <Send_Init_After_Timeout+0xbc>
			)
			{

				printf("Sending INIT-MSG After Timeout:%lu Seconds\n",HAL_Elaps_Ticks(Last_Recevied_Clock[Traverser])/1000);
 8008800:	79fb      	ldrb	r3, [r7, #7]
 8008802:	4a17      	ldr	r2, [pc, #92]	; (8008860 <Send_Init_After_Timeout+0xd8>)
 8008804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008808:	4618      	mov	r0, r3
 800880a:	f006 f90f 	bl	800ea2c <HAL_Elaps_Ticks>
 800880e:	4603      	mov	r3, r0
 8008810:	4a18      	ldr	r2, [pc, #96]	; (8008874 <Send_Init_After_Timeout+0xec>)
 8008812:	fba2 2303 	umull	r2, r3, r2, r3
 8008816:	099b      	lsrs	r3, r3, #6
 8008818:	4619      	mov	r1, r3
 800881a:	4817      	ldr	r0, [pc, #92]	; (8008878 <Send_Init_After_Timeout+0xf0>)
 800881c:	f019 fec2 	bl	80225a4 <iprintf>
				SEND_FORCE_REPLY[Traverser] = 1;
 8008820:	79fb      	ldrb	r3, [r7, #7]
 8008822:	4a16      	ldr	r2, [pc, #88]	; (800887c <Send_Init_After_Timeout+0xf4>)
 8008824:	2101      	movs	r1, #1
 8008826:	54d1      	strb	r1, [r2, r3]
				Send_Init_Msg(Traverser, Traverser);
 8008828:	79fa      	ldrb	r2, [r7, #7]
 800882a:	79fb      	ldrb	r3, [r7, #7]
 800882c:	4611      	mov	r1, r2
 800882e:	4618      	mov	r0, r3
 8008830:	f7f9 fdc2 	bl	80023b8 <Send_Init_Msg>
				Init_Msg_Sent_After_Timeout[Traverser] = 1;
 8008834:	79fb      	ldrb	r3, [r7, #7]
 8008836:	4a0d      	ldr	r2, [pc, #52]	; (800886c <Send_Init_After_Timeout+0xe4>)
 8008838:	2101      	movs	r1, #1
 800883a:	54d1      	strb	r1, [r2, r3]
				INIT_REQ_SENT_Flag[Traverser] = 1;
 800883c:	79fb      	ldrb	r3, [r7, #7]
 800883e:	4a10      	ldr	r2, [pc, #64]	; (8008880 <Send_Init_After_Timeout+0xf8>)
 8008840:	2101      	movs	r1, #1
 8008842:	54d1      	strb	r1, [r2, r3]
	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008844:	79fb      	ldrb	r3, [r7, #7]
 8008846:	3301      	adds	r3, #1
 8008848:	71fb      	strb	r3, [r7, #7]
 800884a:	4b06      	ldr	r3, [pc, #24]	; (8008864 <Send_Init_After_Timeout+0xdc>)
 800884c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008850:	79fa      	ldrb	r2, [r7, #7]
 8008852:	429a      	cmp	r2, r3
 8008854:	d3a0      	bcc.n	8008798 <Send_Init_After_Timeout+0x10>
			}
#endif
		}
	}
}
 8008856:	bf00      	nop
 8008858:	bf00      	nop
 800885a:	3708      	adds	r7, #8
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}
 8008860:	20000fb0 	.word	0x20000fb0
 8008864:	20000304 	.word	0x20000304
 8008868:	20000ea8 	.word	0x20000ea8
 800886c:	20001098 	.word	0x20001098
 8008870:	200010a4 	.word	0x200010a4
 8008874:	10624dd3 	.word	0x10624dd3
 8008878:	080250a0 	.word	0x080250a0
 800887c:	200010d8 	.word	0x200010d8
 8008880:	200010cc 	.word	0x200010cc

08008884 <Send_Vital_Msg_After_Rx_VITAL>:

void Send_Vital_Msg_After_Rx_VITAL(void)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b082      	sub	sp, #8
 8008888:	af00      	add	r7, sp, #0
	uint8_t Traverser = 0;
 800888a:	2300      	movs	r3, #0
 800888c:	71fb      	strb	r3, [r7, #7]
	for(;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 800888e:	e037      	b.n	8008900 <Send_Vital_Msg_After_Rx_VITAL+0x7c>
			Send_Vital_MSG_st.flag[Traverser] = CLEAR;
			Send_Vital_MSG_st.Clk[Traverser] = -1;
		}*/

		if(
				((Tx_Ei_self_sharing_st[Traverser].IS_PRIMARY == PRIMARY) || (EI_data.Hitachi_st.Interface_Type[Traverser] == SERIAL)) &&
 8008890:	79fa      	ldrb	r2, [r7, #7]
 8008892:	4921      	ldr	r1, [pc, #132]	; (8008918 <Send_Vital_Msg_After_Rx_VITAL+0x94>)
 8008894:	4613      	mov	r3, r2
 8008896:	005b      	lsls	r3, r3, #1
 8008898:	4413      	add	r3, r2
 800889a:	00db      	lsls	r3, r3, #3
 800889c:	440b      	add	r3, r1
 800889e:	3304      	adds	r3, #4
 80088a0:	781b      	ldrb	r3, [r3, #0]
		if(
 80088a2:	2b01      	cmp	r3, #1
 80088a4:	d006      	beq.n	80088b4 <Send_Vital_Msg_After_Rx_VITAL+0x30>
				((Tx_Ei_self_sharing_st[Traverser].IS_PRIMARY == PRIMARY) || (EI_data.Hitachi_st.Interface_Type[Traverser] == SERIAL)) &&
 80088a6:	79fb      	ldrb	r3, [r7, #7]
 80088a8:	4a1c      	ldr	r2, [pc, #112]	; (800891c <Send_Vital_Msg_After_Rx_VITAL+0x98>)
 80088aa:	4413      	add	r3, r2
 80088ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80088b0:	2b02      	cmp	r3, #2
 80088b2:	d122      	bne.n	80088fa <Send_Vital_Msg_After_Rx_VITAL+0x76>
				(Send_Vital_MSG_st.flag[Traverser] == SET) &&
 80088b4:	79fb      	ldrb	r3, [r7, #7]
 80088b6:	4a1a      	ldr	r2, [pc, #104]	; (8008920 <Send_Vital_Msg_After_Rx_VITAL+0x9c>)
 80088b8:	5cd3      	ldrb	r3, [r2, r3]
				((Tx_Ei_self_sharing_st[Traverser].IS_PRIMARY == PRIMARY) || (EI_data.Hitachi_st.Interface_Type[Traverser] == SERIAL)) &&
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	d11d      	bne.n	80088fa <Send_Vital_Msg_After_Rx_VITAL+0x76>
				(HAL_Elaps_Ticks(Send_Vital_MSG_st.Clk[Traverser]) > 50 )
 80088be:	79fb      	ldrb	r3, [r7, #7]
 80088c0:	4a17      	ldr	r2, [pc, #92]	; (8008920 <Send_Vital_Msg_After_Rx_VITAL+0x9c>)
 80088c2:	3302      	adds	r3, #2
 80088c4:	009b      	lsls	r3, r3, #2
 80088c6:	4413      	add	r3, r2
 80088c8:	685b      	ldr	r3, [r3, #4]
 80088ca:	4618      	mov	r0, r3
 80088cc:	f006 f8ae 	bl	800ea2c <HAL_Elaps_Ticks>
 80088d0:	4603      	mov	r3, r0
				(Send_Vital_MSG_st.flag[Traverser] == SET) &&
 80088d2:	2b32      	cmp	r3, #50	; 0x32
 80088d4:	d911      	bls.n	80088fa <Send_Vital_Msg_After_Rx_VITAL+0x76>
		)
		{
			Send_Vital_Data_Message(Traverser, Traverser);
 80088d6:	79fa      	ldrb	r2, [r7, #7]
 80088d8:	79fb      	ldrb	r3, [r7, #7]
 80088da:	4611      	mov	r1, r2
 80088dc:	4618      	mov	r0, r3
 80088de:	f7fb fa93 	bl	8003e08 <Send_Vital_Data_Message>
			Send_Vital_MSG_st.flag[Traverser] = CLEAR;
 80088e2:	79fb      	ldrb	r3, [r7, #7]
 80088e4:	4a0e      	ldr	r2, [pc, #56]	; (8008920 <Send_Vital_Msg_After_Rx_VITAL+0x9c>)
 80088e6:	2100      	movs	r1, #0
 80088e8:	54d1      	strb	r1, [r2, r3]
			Send_Vital_MSG_st.Clk[Traverser] = -1;
 80088ea:	79fb      	ldrb	r3, [r7, #7]
 80088ec:	4a0c      	ldr	r2, [pc, #48]	; (8008920 <Send_Vital_Msg_After_Rx_VITAL+0x9c>)
 80088ee:	3302      	adds	r3, #2
 80088f0:	009b      	lsls	r3, r3, #2
 80088f2:	4413      	add	r3, r2
 80088f4:	f04f 32ff 	mov.w	r2, #4294967295
 80088f8:	605a      	str	r2, [r3, #4]
	for(;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 80088fa:	79fb      	ldrb	r3, [r7, #7]
 80088fc:	3301      	adds	r3, #1
 80088fe:	71fb      	strb	r3, [r7, #7]
 8008900:	4b06      	ldr	r3, [pc, #24]	; (800891c <Send_Vital_Msg_After_Rx_VITAL+0x98>)
 8008902:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008906:	79fa      	ldrb	r2, [r7, #7]
 8008908:	429a      	cmp	r2, r3
 800890a:	d3c1      	bcc.n	8008890 <Send_Vital_Msg_After_Rx_VITAL+0xc>
		//			Send_Vital_Data_Message(Traverser, Traverser);
		//			Send_Vital_MSG_st.flag[Traverser] = CLEAR;
		//			Send_Vital_MSG_st.Clk[Traverser] = -1;
		//		}
	}
}
 800890c:	bf00      	nop
 800890e:	bf00      	nop
 8008910:	3708      	adds	r7, #8
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}
 8008916:	bf00      	nop
 8008918:	20001680 	.word	0x20001680
 800891c:	20000304 	.word	0x20000304
 8008920:	20001ca0 	.word	0x20001ca0

08008924 <Check_Recv_Status_fail>:

void Check_Recv_Status_fail(void)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b082      	sub	sp, #8
 8008928:	af00      	add	r7, sp, #0
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 800892a:	2300      	movs	r3, #0
 800892c:	71fb      	strb	r3, [r7, #7]
 800892e:	e04e      	b.n	80089ce <Check_Recv_Status_fail+0xaa>
	{
		if( (Last_Recevied_Clock_ValidMsgs[Traverser] != 0) && (Tx_Ei_self_sharing_st[Traverser].EI_Receiving_Status != NOT_RECEIVED) )
 8008930:	79fb      	ldrb	r3, [r7, #7]
 8008932:	4a2c      	ldr	r2, [pc, #176]	; (80089e4 <Check_Recv_Status_fail+0xc0>)
 8008934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d045      	beq.n	80089c8 <Check_Recv_Status_fail+0xa4>
 800893c:	79fa      	ldrb	r2, [r7, #7]
 800893e:	492a      	ldr	r1, [pc, #168]	; (80089e8 <Check_Recv_Status_fail+0xc4>)
 8008940:	4613      	mov	r3, r2
 8008942:	005b      	lsls	r3, r3, #1
 8008944:	4413      	add	r3, r2
 8008946:	00db      	lsls	r3, r3, #3
 8008948:	440b      	add	r3, r1
 800894a:	3303      	adds	r3, #3
 800894c:	781b      	ldrb	r3, [r3, #0]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d03a      	beq.n	80089c8 <Check_Recv_Status_fail+0xa4>
		{
			if(HAL_Elaps_Ticks(Last_Recevied_Clock_ValidMsgs[Traverser]) > EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Traverser])
 8008952:	79fb      	ldrb	r3, [r7, #7]
 8008954:	4a23      	ldr	r2, [pc, #140]	; (80089e4 <Check_Recv_Status_fail+0xc0>)
 8008956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800895a:	4618      	mov	r0, r3
 800895c:	f006 f866 	bl	800ea2c <HAL_Elaps_Ticks>
 8008960:	4602      	mov	r2, r0
 8008962:	79fb      	ldrb	r3, [r7, #7]
 8008964:	4921      	ldr	r1, [pc, #132]	; (80089ec <Check_Recv_Status_fail+0xc8>)
 8008966:	338a      	adds	r3, #138	; 0x8a
 8008968:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800896c:	429a      	cmp	r2, r3
 800896e:	d92b      	bls.n	80089c8 <Check_Recv_Status_fail+0xa4>
			{
				printf("!Received any Packet of:%lu from last %lu Seconds\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser],(EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Traverser]/1000));
 8008970:	79fb      	ldrb	r3, [r7, #7]
 8008972:	4a1e      	ldr	r2, [pc, #120]	; (80089ec <Check_Recv_Status_fail+0xc8>)
 8008974:	3366      	adds	r3, #102	; 0x66
 8008976:	009b      	lsls	r3, r3, #2
 8008978:	4413      	add	r3, r2
 800897a:	6859      	ldr	r1, [r3, #4]
 800897c:	79fb      	ldrb	r3, [r7, #7]
 800897e:	4a1b      	ldr	r2, [pc, #108]	; (80089ec <Check_Recv_Status_fail+0xc8>)
 8008980:	338a      	adds	r3, #138	; 0x8a
 8008982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008986:	4a1a      	ldr	r2, [pc, #104]	; (80089f0 <Check_Recv_Status_fail+0xcc>)
 8008988:	fba2 2303 	umull	r2, r3, r2, r3
 800898c:	099b      	lsrs	r3, r3, #6
 800898e:	461a      	mov	r2, r3
 8008990:	4818      	ldr	r0, [pc, #96]	; (80089f4 <Check_Recv_Status_fail+0xd0>)
 8008992:	f019 fe07 	bl	80225a4 <iprintf>
				printf("Last_Recevied_Clock_ValidMsgs[Traverser]:%lu\n",Last_Recevied_Clock_ValidMsgs[Traverser]);
 8008996:	79fb      	ldrb	r3, [r7, #7]
 8008998:	4a12      	ldr	r2, [pc, #72]	; (80089e4 <Check_Recv_Status_fail+0xc0>)
 800899a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800899e:	4619      	mov	r1, r3
 80089a0:	4815      	ldr	r0, [pc, #84]	; (80089f8 <Check_Recv_Status_fail+0xd4>)
 80089a2:	f019 fdff 	bl	80225a4 <iprintf>
				printf("Ticks:%lu\n",HAL_GetTick());
 80089a6:	f00c fdf3 	bl	8015590 <HAL_GetTick>
 80089aa:	4603      	mov	r3, r0
 80089ac:	4619      	mov	r1, r3
 80089ae:	4813      	ldr	r0, [pc, #76]	; (80089fc <Check_Recv_Status_fail+0xd8>)
 80089b0:	f019 fdf8 	bl	80225a4 <iprintf>
				Tx_Ei_self_sharing_st[Traverser].EI_Receiving_Status = NOT_RECEIVED;
 80089b4:	79fa      	ldrb	r2, [r7, #7]
 80089b6:	490c      	ldr	r1, [pc, #48]	; (80089e8 <Check_Recv_Status_fail+0xc4>)
 80089b8:	4613      	mov	r3, r2
 80089ba:	005b      	lsls	r3, r3, #1
 80089bc:	4413      	add	r3, r2
 80089be:	00db      	lsls	r3, r3, #3
 80089c0:	440b      	add	r3, r1
 80089c2:	3303      	adds	r3, #3
 80089c4:	2200      	movs	r2, #0
 80089c6:	701a      	strb	r2, [r3, #0]
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 80089c8:	79fb      	ldrb	r3, [r7, #7]
 80089ca:	3301      	adds	r3, #1
 80089cc:	71fb      	strb	r3, [r7, #7]
 80089ce:	4b07      	ldr	r3, [pc, #28]	; (80089ec <Check_Recv_Status_fail+0xc8>)
 80089d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80089d4:	79fa      	ldrb	r2, [r7, #7]
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d3aa      	bcc.n	8008930 <Check_Recv_Status_fail+0xc>
			}
		}
	}
}
 80089da:	bf00      	nop
 80089dc:	bf00      	nop
 80089de:	3708      	adds	r7, #8
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}
 80089e4:	20000fd8 	.word	0x20000fd8
 80089e8:	20001680 	.word	0x20001680
 80089ec:	20000304 	.word	0x20000304
 80089f0:	10624dd3 	.word	0x10624dd3
 80089f4:	080250cc 	.word	0x080250cc
 80089f8:	08025100 	.word	0x08025100
 80089fc:	08025130 	.word	0x08025130

08008a00 <IS_MLK_EIPC_TIME_MATCHING>:

uint8_t IS_MLK_EIPC_TIME_MATCHING(uint8_t Source_Index)
{
 8008a00:	b590      	push	{r4, r7, lr}
 8008a02:	b087      	sub	sp, #28
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	4603      	mov	r3, r0
 8008a08:	71fb      	strb	r3, [r7, #7]
	uint32_t Hitachi_Frame = 0;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	613b      	str	r3, [r7, #16]
	uint32_t Self_Frame = 0;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	60fb      	str	r3, [r7, #12]
	uint8_t Return_Value = 1;
 8008a12:	2301      	movs	r3, #1
 8008a14:	75fb      	strb	r3, [r7, #23]

	if( (EI_data.Hitachi_st.ClockMaster[Source_Index] == SET) && (Is_GPS_Packet_Received == 1) )
 8008a16:	79fb      	ldrb	r3, [r7, #7]
 8008a18:	4a39      	ldr	r2, [pc, #228]	; (8008b00 <IS_MLK_EIPC_TIME_MATCHING+0x100>)
 8008a1a:	4413      	add	r3, r2
 8008a1c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008a20:	2b01      	cmp	r3, #1
 8008a22:	d168      	bne.n	8008af6 <IS_MLK_EIPC_TIME_MATCHING+0xf6>
 8008a24:	4b37      	ldr	r3, [pc, #220]	; (8008b04 <IS_MLK_EIPC_TIME_MATCHING+0x104>)
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d164      	bne.n	8008af6 <IS_MLK_EIPC_TIME_MATCHING+0xf6>
	{
		Hitachi_Frame = ( ( (bcdToDec(HITACHI_time_Stamp_st[Source_Index].hh) * 3600) +
 8008a2c:	79fa      	ldrb	r2, [r7, #7]
 8008a2e:	4936      	ldr	r1, [pc, #216]	; (8008b08 <IS_MLK_EIPC_TIME_MATCHING+0x108>)
 8008a30:	4613      	mov	r3, r2
 8008a32:	005b      	lsls	r3, r3, #1
 8008a34:	4413      	add	r3, r2
 8008a36:	005b      	lsls	r3, r3, #1
 8008a38:	440b      	add	r3, r1
 8008a3a:	781b      	ldrb	r3, [r3, #0]
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	f002 faa9 	bl	800af94 <bcdToDec>
 8008a42:	4603      	mov	r3, r0
 8008a44:	461a      	mov	r2, r3
 8008a46:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8008a4a:	fb03 f402 	mul.w	r4, r3, r2
				(bcdToDec(HITACHI_time_Stamp_st[Source_Index].mm) * 60) +
 8008a4e:	79fa      	ldrb	r2, [r7, #7]
 8008a50:	492d      	ldr	r1, [pc, #180]	; (8008b08 <IS_MLK_EIPC_TIME_MATCHING+0x108>)
 8008a52:	4613      	mov	r3, r2
 8008a54:	005b      	lsls	r3, r3, #1
 8008a56:	4413      	add	r3, r2
 8008a58:	005b      	lsls	r3, r3, #1
 8008a5a:	440b      	add	r3, r1
 8008a5c:	3301      	adds	r3, #1
 8008a5e:	781b      	ldrb	r3, [r3, #0]
 8008a60:	4618      	mov	r0, r3
 8008a62:	f002 fa97 	bl	800af94 <bcdToDec>
 8008a66:	4603      	mov	r3, r0
 8008a68:	461a      	mov	r2, r3
 8008a6a:	4613      	mov	r3, r2
 8008a6c:	011b      	lsls	r3, r3, #4
 8008a6e:	1a9b      	subs	r3, r3, r2
 8008a70:	009b      	lsls	r3, r3, #2
		Hitachi_Frame = ( ( (bcdToDec(HITACHI_time_Stamp_st[Source_Index].hh) * 3600) +
 8008a72:	441c      	add	r4, r3
				bcdToDec(HITACHI_time_Stamp_st[Source_Index].ss)) + 1);
 8008a74:	79fa      	ldrb	r2, [r7, #7]
 8008a76:	4924      	ldr	r1, [pc, #144]	; (8008b08 <IS_MLK_EIPC_TIME_MATCHING+0x108>)
 8008a78:	4613      	mov	r3, r2
 8008a7a:	005b      	lsls	r3, r3, #1
 8008a7c:	4413      	add	r3, r2
 8008a7e:	005b      	lsls	r3, r3, #1
 8008a80:	440b      	add	r3, r1
 8008a82:	3302      	adds	r3, #2
 8008a84:	781b      	ldrb	r3, [r3, #0]
 8008a86:	4618      	mov	r0, r3
 8008a88:	f002 fa84 	bl	800af94 <bcdToDec>
 8008a8c:	4603      	mov	r3, r0
				(bcdToDec(HITACHI_time_Stamp_st[Source_Index].mm) * 60) +
 8008a8e:	4423      	add	r3, r4
				bcdToDec(HITACHI_time_Stamp_st[Source_Index].ss)) + 1);
 8008a90:	3301      	adds	r3, #1
		Hitachi_Frame = ( ( (bcdToDec(HITACHI_time_Stamp_st[Source_Index].hh) * 3600) +
 8008a92:	613b      	str	r3, [r7, #16]

		Get_time();
 8008a94:	f002 fb7a 	bl	800b18c <Get_time>

		Self_Frame = ( (RTC_Date_time_Dec_st.Hour * 3600) +
 8008a98:	4b1c      	ldr	r3, [pc, #112]	; (8008b0c <IS_MLK_EIPC_TIME_MATCHING+0x10c>)
 8008a9a:	781b      	ldrb	r3, [r3, #0]
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8008aa2:	fb03 f202 	mul.w	r2, r3, r2
				(RTC_Date_time_Dec_st.Mins * 60) +
 8008aa6:	4b19      	ldr	r3, [pc, #100]	; (8008b0c <IS_MLK_EIPC_TIME_MATCHING+0x10c>)
 8008aa8:	785b      	ldrb	r3, [r3, #1]
 8008aaa:	4619      	mov	r1, r3
 8008aac:	460b      	mov	r3, r1
 8008aae:	011b      	lsls	r3, r3, #4
 8008ab0:	1a5b      	subs	r3, r3, r1
 8008ab2:	009b      	lsls	r3, r3, #2
		Self_Frame = ( (RTC_Date_time_Dec_st.Hour * 3600) +
 8008ab4:	4413      	add	r3, r2
				(RTC_Date_time_Dec_st.Secs) + 1);
 8008ab6:	4a15      	ldr	r2, [pc, #84]	; (8008b0c <IS_MLK_EIPC_TIME_MATCHING+0x10c>)
 8008ab8:	7892      	ldrb	r2, [r2, #2]
				(RTC_Date_time_Dec_st.Mins * 60) +
 8008aba:	4413      	add	r3, r2
				(RTC_Date_time_Dec_st.Secs) + 1);
 8008abc:	3301      	adds	r3, #1
		Self_Frame = ( (RTC_Date_time_Dec_st.Hour * 3600) +
 8008abe:	60fb      	str	r3, [r7, #12]


		if(abs(Hitachi_Frame - Self_Frame) > 1)
 8008ac0:	693a      	ldr	r2, [r7, #16]
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	1ad3      	subs	r3, r2, r3
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	bfb8      	it	lt
 8008aca:	425b      	neglt	r3, r3
 8008acc:	2b01      	cmp	r3, #1
 8008ace:	dd12      	ble.n	8008af6 <IS_MLK_EIPC_TIME_MATCHING+0xf6>
		{
			printf("Time Difference %lu Seconds found in MLK & EIPC for Peer:%lu\n",labs(Hitachi_Frame - Self_Frame),EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8008ad0:	693a      	ldr	r2, [r7, #16]
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	1ad3      	subs	r3, r2, r3
 8008ad6:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8008ada:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8008ade:	79fb      	ldrb	r3, [r7, #7]
 8008ae0:	4a07      	ldr	r2, [pc, #28]	; (8008b00 <IS_MLK_EIPC_TIME_MATCHING+0x100>)
 8008ae2:	3366      	adds	r3, #102	; 0x66
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	4413      	add	r3, r2
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	461a      	mov	r2, r3
 8008aec:	4808      	ldr	r0, [pc, #32]	; (8008b10 <IS_MLK_EIPC_TIME_MATCHING+0x110>)
 8008aee:	f019 fd59 	bl	80225a4 <iprintf>
			Return_Value  = 0;
 8008af2:	2300      	movs	r3, #0
 8008af4:	75fb      	strb	r3, [r7, #23]
		}
	}

	return Return_Value;
 8008af6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	371c      	adds	r7, #28
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd90      	pop	{r4, r7, pc}
 8008b00:	20000304 	.word	0x20000304
 8008b04:	20000e78 	.word	0x20000e78
 8008b08:	20001194 	.word	0x20001194
 8008b0c:	200027ec 	.word	0x200027ec
 8008b10:	0802513c 	.word	0x0802513c

08008b14 <Check_All_Peers>:

void Check_All_Peers(void)
{
 8008b14:	b590      	push	{r4, r7, lr}
 8008b16:	b083      	sub	sp, #12
 8008b18:	af00      	add	r7, sp, #0
	static uint32_t PrevLinkFailClk[MAX_PEER_CONNECTIONS] = {0,};

	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	71fb      	strb	r3, [r7, #7]
 8008b1e:	e045      	b.n	8008bac <Check_All_Peers+0x98>
	{
		Check_Vital_CRC(Traverser);
 8008b20:	79fb      	ldrb	r3, [r7, #7]
 8008b22:	4618      	mov	r0, r3
 8008b24:	f7fe ff9c 	bl	8007a60 <Check_Vital_CRC>

		if( (HAL_Elaps_Ticks(Hitachi_clk_flags_st[Traverser].Link_EstablishClk)) > EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Traverser])
 8008b28:	79fa      	ldrb	r2, [r7, #7]
 8008b2a:	4926      	ldr	r1, [pc, #152]	; (8008bc4 <Check_All_Peers+0xb0>)
 8008b2c:	4613      	mov	r3, r2
 8008b2e:	005b      	lsls	r3, r3, #1
 8008b30:	4413      	add	r3, r2
 8008b32:	009b      	lsls	r3, r3, #2
 8008b34:	440b      	add	r3, r1
 8008b36:	3304      	adds	r3, #4
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f005 ff76 	bl	800ea2c <HAL_Elaps_Ticks>
 8008b40:	4602      	mov	r2, r0
 8008b42:	79fb      	ldrb	r3, [r7, #7]
 8008b44:	4920      	ldr	r1, [pc, #128]	; (8008bc8 <Check_All_Peers+0xb4>)
 8008b46:	338a      	adds	r3, #138	; 0x8a
 8008b48:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d92a      	bls.n	8008ba6 <Check_All_Peers+0x92>
		{
			if((Hitachi_clk_flags_st[Traverser].Link_EstablishFlag == SET) && (PrevLinkFailClk[Traverser] != Hitachi_clk_flags_st[Traverser].Link_EstablishClk) )
 8008b50:	79fa      	ldrb	r2, [r7, #7]
 8008b52:	491c      	ldr	r1, [pc, #112]	; (8008bc4 <Check_All_Peers+0xb0>)
 8008b54:	4613      	mov	r3, r2
 8008b56:	005b      	lsls	r3, r3, #1
 8008b58:	4413      	add	r3, r2
 8008b5a:	009b      	lsls	r3, r3, #2
 8008b5c:	440b      	add	r3, r1
 8008b5e:	3301      	adds	r3, #1
 8008b60:	781b      	ldrb	r3, [r3, #0]
 8008b62:	2b01      	cmp	r3, #1
 8008b64:	d11f      	bne.n	8008ba6 <Check_All_Peers+0x92>
 8008b66:	79fb      	ldrb	r3, [r7, #7]
 8008b68:	4a18      	ldr	r2, [pc, #96]	; (8008bcc <Check_All_Peers+0xb8>)
 8008b6a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008b6e:	79fa      	ldrb	r2, [r7, #7]
 8008b70:	4814      	ldr	r0, [pc, #80]	; (8008bc4 <Check_All_Peers+0xb0>)
 8008b72:	4613      	mov	r3, r2
 8008b74:	005b      	lsls	r3, r3, #1
 8008b76:	4413      	add	r3, r2
 8008b78:	009b      	lsls	r3, r3, #2
 8008b7a:	4403      	add	r3, r0
 8008b7c:	3304      	adds	r3, #4
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4299      	cmp	r1, r3
 8008b82:	d010      	beq.n	8008ba6 <Check_All_Peers+0x92>
			{
				Hitachi_clk_flags_st[Traverser].Link_EstablishFlag = CLEAR;
 8008b84:	79fa      	ldrb	r2, [r7, #7]
 8008b86:	490f      	ldr	r1, [pc, #60]	; (8008bc4 <Check_All_Peers+0xb0>)
 8008b88:	4613      	mov	r3, r2
 8008b8a:	005b      	lsls	r3, r3, #1
 8008b8c:	4413      	add	r3, r2
 8008b8e:	009b      	lsls	r3, r3, #2
 8008b90:	440b      	add	r3, r1
 8008b92:	3301      	adds	r3, #1
 8008b94:	2200      	movs	r2, #0
 8008b96:	701a      	strb	r2, [r3, #0]
				PrevLinkFailClk[Traverser] = HAL_GetTick();
 8008b98:	79fc      	ldrb	r4, [r7, #7]
 8008b9a:	f00c fcf9 	bl	8015590 <HAL_GetTick>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	4a0a      	ldr	r2, [pc, #40]	; (8008bcc <Check_All_Peers+0xb8>)
 8008ba2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008ba6:	79fb      	ldrb	r3, [r7, #7]
 8008ba8:	3301      	adds	r3, #1
 8008baa:	71fb      	strb	r3, [r7, #7]
 8008bac:	4b06      	ldr	r3, [pc, #24]	; (8008bc8 <Check_All_Peers+0xb4>)
 8008bae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008bb2:	79fa      	ldrb	r2, [r7, #7]
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	d3b3      	bcc.n	8008b20 <Check_All_Peers+0xc>
			}
		}
	}
}
 8008bb8:	bf00      	nop
 8008bba:	bf00      	nop
 8008bbc:	370c      	adds	r7, #12
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd90      	pop	{r4, r7, pc}
 8008bc2:	bf00      	nop
 8008bc4:	20001cd4 	.word	0x20001cd4
 8008bc8:	20000304 	.word	0x20000304
 8008bcc:	20002088 	.word	0x20002088

08008bd0 <Check_for_RelayMisMatch>:

void Check_for_RelayMisMatch(void)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b082      	sub	sp, #8
 8008bd4:	af00      	add	r7, sp, #0
	static uint32_t Check_Clk = 0;

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8008bd6:	4949      	ldr	r1, [pc, #292]	; (8008cfc <Check_for_RelayMisMatch+0x12c>)
 8008bd8:	4849      	ldr	r0, [pc, #292]	; (8008d00 <Check_for_RelayMisMatch+0x130>)
 8008bda:	f7f7 fb31 	bl	8000240 <strcmp>
 8008bde:	4603      	mov	r3, r0
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	f000 8086 	beq.w	8008cf2 <Check_for_RelayMisMatch+0x122>
	{
		return;
	}


	if(HAL_Elaps_Ticks(Check_Clk) > TWO_HUNDRED_MS )
 8008be6:	4b47      	ldr	r3, [pc, #284]	; (8008d04 <Check_for_RelayMisMatch+0x134>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4618      	mov	r0, r3
 8008bec:	f005 ff1e 	bl	800ea2c <HAL_Elaps_Ticks>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	2bc8      	cmp	r3, #200	; 0xc8
 8008bf4:	d97e      	bls.n	8008cf4 <Check_for_RelayMisMatch+0x124>
	{
		for(uint8_t Traverser = 0;Traverser <EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	71fb      	strb	r3, [r7, #7]
 8008bfa:	e06e      	b.n	8008cda <Check_for_RelayMisMatch+0x10a>
		{
			if( (OtherCardLink_Flag[Traverser] == SET) && (Link_Flag[Traverser] == CLEAR))
 8008bfc:	79fb      	ldrb	r3, [r7, #7]
 8008bfe:	4a42      	ldr	r2, [pc, #264]	; (8008d08 <Check_for_RelayMisMatch+0x138>)
 8008c00:	5cd3      	ldrb	r3, [r2, r3]
 8008c02:	2b01      	cmp	r3, #1
 8008c04:	d116      	bne.n	8008c34 <Check_for_RelayMisMatch+0x64>
 8008c06:	79fb      	ldrb	r3, [r7, #7]
 8008c08:	4a40      	ldr	r2, [pc, #256]	; (8008d0c <Check_for_RelayMisMatch+0x13c>)
 8008c0a:	5cd3      	ldrb	r3, [r2, r3]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d111      	bne.n	8008c34 <Check_for_RelayMisMatch+0x64>
			{
				//				printf("This Card Link is Clear and Other Link is SET for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
				//				printf("Copying from Other Card\n");
				memcpy(&Main_Relays_st[Traverser],&OtherCard_Relays_st[Traverser],sizeof(RELAYS_t));
 8008c10:	79fa      	ldrb	r2, [r7, #7]
 8008c12:	4613      	mov	r3, r2
 8008c14:	009b      	lsls	r3, r3, #2
 8008c16:	4413      	add	r3, r2
 8008c18:	009b      	lsls	r3, r3, #2
 8008c1a:	4a3d      	ldr	r2, [pc, #244]	; (8008d10 <Check_for_RelayMisMatch+0x140>)
 8008c1c:	1898      	adds	r0, r3, r2
 8008c1e:	79fa      	ldrb	r2, [r7, #7]
 8008c20:	4613      	mov	r3, r2
 8008c22:	009b      	lsls	r3, r3, #2
 8008c24:	4413      	add	r3, r2
 8008c26:	009b      	lsls	r3, r3, #2
 8008c28:	4a3a      	ldr	r2, [pc, #232]	; (8008d14 <Check_for_RelayMisMatch+0x144>)
 8008c2a:	4413      	add	r3, r2
 8008c2c:	2214      	movs	r2, #20
 8008c2e:	4619      	mov	r1, r3
 8008c30:	f019 fba8 	bl	8022384 <memcpy>
				//				printf("Self CRC:%04x\n",Main_Relays_st[Traverser].RelayIPS_CRC);
			}

			if(Main_Relays_st[Traverser].RelayIPS_CRC !=  OtherCard_Relays_st[Traverser].RelayIPS_CRC)
 8008c34:	79fa      	ldrb	r2, [r7, #7]
 8008c36:	4936      	ldr	r1, [pc, #216]	; (8008d10 <Check_for_RelayMisMatch+0x140>)
 8008c38:	4613      	mov	r3, r2
 8008c3a:	009b      	lsls	r3, r3, #2
 8008c3c:	4413      	add	r3, r2
 8008c3e:	009b      	lsls	r3, r3, #2
 8008c40:	440b      	add	r3, r1
 8008c42:	3312      	adds	r3, #18
 8008c44:	8819      	ldrh	r1, [r3, #0]
 8008c46:	79fa      	ldrb	r2, [r7, #7]
 8008c48:	4832      	ldr	r0, [pc, #200]	; (8008d14 <Check_for_RelayMisMatch+0x144>)
 8008c4a:	4613      	mov	r3, r2
 8008c4c:	009b      	lsls	r3, r3, #2
 8008c4e:	4413      	add	r3, r2
 8008c50:	009b      	lsls	r3, r3, #2
 8008c52:	4403      	add	r3, r0
 8008c54:	3312      	adds	r3, #18
 8008c56:	881b      	ldrh	r3, [r3, #0]
 8008c58:	4299      	cmp	r1, r3
 8008c5a:	d034      	beq.n	8008cc6 <Check_for_RelayMisMatch+0xf6>
			{
				/* If Signals are Recently updated we are waiting to check CRC after ONE_SEC */
				if(HAL_Elaps_Ticks(Last_Vital_Received_Clk[Traverser]) < ONE_SEC)
 8008c5c:	79fb      	ldrb	r3, [r7, #7]
 8008c5e:	4a2e      	ldr	r2, [pc, #184]	; (8008d18 <Check_for_RelayMisMatch+0x148>)
 8008c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c64:	4618      	mov	r0, r3
 8008c66:	f005 fee1 	bl	800ea2c <HAL_Elaps_Ticks>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c70:	d32f      	bcc.n	8008cd2 <Check_for_RelayMisMatch+0x102>
				{
					continue;
				}
				else
				{
					printf("Peer:%lu ",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
 8008c72:	79fb      	ldrb	r3, [r7, #7]
 8008c74:	4a29      	ldr	r2, [pc, #164]	; (8008d1c <Check_for_RelayMisMatch+0x14c>)
 8008c76:	3366      	adds	r3, #102	; 0x66
 8008c78:	009b      	lsls	r3, r3, #2
 8008c7a:	4413      	add	r3, r2
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	4619      	mov	r1, r3
 8008c80:	4827      	ldr	r0, [pc, #156]	; (8008d20 <Check_for_RelayMisMatch+0x150>)
 8008c82:	f019 fc8f 	bl	80225a4 <iprintf>
					printf("SelfCRC:%04x ",Main_Relays_st[Traverser].RelayIPS_CRC);
 8008c86:	79fa      	ldrb	r2, [r7, #7]
 8008c88:	4921      	ldr	r1, [pc, #132]	; (8008d10 <Check_for_RelayMisMatch+0x140>)
 8008c8a:	4613      	mov	r3, r2
 8008c8c:	009b      	lsls	r3, r3, #2
 8008c8e:	4413      	add	r3, r2
 8008c90:	009b      	lsls	r3, r3, #2
 8008c92:	440b      	add	r3, r1
 8008c94:	3312      	adds	r3, #18
 8008c96:	881b      	ldrh	r3, [r3, #0]
 8008c98:	4619      	mov	r1, r3
 8008c9a:	4822      	ldr	r0, [pc, #136]	; (8008d24 <Check_for_RelayMisMatch+0x154>)
 8008c9c:	f019 fc82 	bl	80225a4 <iprintf>
					printf("OtherCRC:%04x\n",OtherCard_Relays_st[Traverser].RelayIPS_CRC);
 8008ca0:	79fa      	ldrb	r2, [r7, #7]
 8008ca2:	491c      	ldr	r1, [pc, #112]	; (8008d14 <Check_for_RelayMisMatch+0x144>)
 8008ca4:	4613      	mov	r3, r2
 8008ca6:	009b      	lsls	r3, r3, #2
 8008ca8:	4413      	add	r3, r2
 8008caa:	009b      	lsls	r3, r3, #2
 8008cac:	440b      	add	r3, r1
 8008cae:	3312      	adds	r3, #18
 8008cb0:	881b      	ldrh	r3, [r3, #0]
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	481c      	ldr	r0, [pc, #112]	; (8008d28 <Check_for_RelayMisMatch+0x158>)
 8008cb6:	f019 fc75 	bl	80225a4 <iprintf>

					MisMatchFlag[Traverser] = SET;
 8008cba:	79fb      	ldrb	r3, [r7, #7]
 8008cbc:	4a1b      	ldr	r2, [pc, #108]	; (8008d2c <Check_for_RelayMisMatch+0x15c>)
 8008cbe:	2101      	movs	r1, #1
 8008cc0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8008cc4:	e006      	b.n	8008cd4 <Check_for_RelayMisMatch+0x104>
					//					Tx_Peer_Index_To_SignalReq = 0xff;
				}
			}
			else
			{
				MisMatchFlag[Traverser] = CLEAR; /* If both Relay CRC is Matching MisMatch will be CLEAR */
 8008cc6:	79fb      	ldrb	r3, [r7, #7]
 8008cc8:	4a18      	ldr	r2, [pc, #96]	; (8008d2c <Check_for_RelayMisMatch+0x15c>)
 8008cca:	2100      	movs	r1, #0
 8008ccc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8008cd0:	e000      	b.n	8008cd4 <Check_for_RelayMisMatch+0x104>
					continue;
 8008cd2:	bf00      	nop
		for(uint8_t Traverser = 0;Traverser <EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008cd4:	79fb      	ldrb	r3, [r7, #7]
 8008cd6:	3301      	adds	r3, #1
 8008cd8:	71fb      	strb	r3, [r7, #7]
 8008cda:	4b10      	ldr	r3, [pc, #64]	; (8008d1c <Check_for_RelayMisMatch+0x14c>)
 8008cdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008ce0:	79fa      	ldrb	r2, [r7, #7]
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	d38a      	bcc.n	8008bfc <Check_for_RelayMisMatch+0x2c>
			}
		}
		Check_Clk = HAL_GetTick();
 8008ce6:	f00c fc53 	bl	8015590 <HAL_GetTick>
 8008cea:	4603      	mov	r3, r0
 8008cec:	4a05      	ldr	r2, [pc, #20]	; (8008d04 <Check_for_RelayMisMatch+0x134>)
 8008cee:	6013      	str	r3, [r2, #0]
 8008cf0:	e000      	b.n	8008cf4 <Check_for_RelayMisMatch+0x124>
		return;
 8008cf2:	bf00      	nop
	}
}
 8008cf4:	3708      	adds	r7, #8
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}
 8008cfa:	bf00      	nop
 8008cfc:	08023d68 	.word	0x08023d68
 8008d00:	20000305 	.word	0x20000305
 8008d04:	200020b0 	.word	0x200020b0
 8008d08:	20000f7c 	.word	0x20000f7c
 8008d0c:	20000f70 	.word	0x20000f70
 8008d10:	20001e8c 	.word	0x20001e8c
 8008d14:	20001f54 	.word	0x20001f54
 8008d18:	20000ee4 	.word	0x20000ee4
 8008d1c:	20000304 	.word	0x20000304
 8008d20:	0802517c 	.word	0x0802517c
 8008d24:	08025188 	.word	0x08025188
 8008d28:	08025198 	.word	0x08025198
 8008d2c:	20000ed0 	.word	0x20000ed0

08008d30 <CheckOtherLinkStatus>:

void CheckOtherLinkStatus(uint8_t SourceIndex)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b084      	sub	sp, #16
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	4603      	mov	r3, r0
 8008d38:	71fb      	strb	r3, [r7, #7]
	uint32_t CurTicks = HAL_GetTick();
 8008d3a:	f00c fc29 	bl	8015590 <HAL_GetTick>
 8008d3e:	60f8      	str	r0, [r7, #12]

	if(Rx_Ei_self_sharing_st[SourceIndex].LinkEstablishFlag == SET)
 8008d40:	79fa      	ldrb	r2, [r7, #7]
 8008d42:	492a      	ldr	r1, [pc, #168]	; (8008dec <CheckOtherLinkStatus+0xbc>)
 8008d44:	4613      	mov	r3, r2
 8008d46:	005b      	lsls	r3, r3, #1
 8008d48:	4413      	add	r3, r2
 8008d4a:	00db      	lsls	r3, r3, #3
 8008d4c:	440b      	add	r3, r1
 8008d4e:	3302      	adds	r3, #2
 8008d50:	781b      	ldrb	r3, [r3, #0]
 8008d52:	2b01      	cmp	r3, #1
 8008d54:	d11d      	bne.n	8008d92 <CheckOtherLinkStatus+0x62>
	{
		OtherCardLink_Establish_Clock[SourceIndex] = CurTicks;
 8008d56:	79fb      	ldrb	r3, [r7, #7]
 8008d58:	4925      	ldr	r1, [pc, #148]	; (8008df0 <CheckOtherLinkStatus+0xc0>)
 8008d5a:	68fa      	ldr	r2, [r7, #12]
 8008d5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Other_Hitachi_clk_flags_st[SourceIndex].Link_EstablishClk = CurTicks;
 8008d60:	79fa      	ldrb	r2, [r7, #7]
 8008d62:	4924      	ldr	r1, [pc, #144]	; (8008df4 <CheckOtherLinkStatus+0xc4>)
 8008d64:	4613      	mov	r3, r2
 8008d66:	005b      	lsls	r3, r3, #1
 8008d68:	4413      	add	r3, r2
 8008d6a:	009b      	lsls	r3, r3, #2
 8008d6c:	440b      	add	r3, r1
 8008d6e:	3304      	adds	r3, #4
 8008d70:	68fa      	ldr	r2, [r7, #12]
 8008d72:	601a      	str	r2, [r3, #0]
		Other_Hitachi_clk_flags_st[SourceIndex].Link_EstablishFlag = SET;
 8008d74:	79fa      	ldrb	r2, [r7, #7]
 8008d76:	491f      	ldr	r1, [pc, #124]	; (8008df4 <CheckOtherLinkStatus+0xc4>)
 8008d78:	4613      	mov	r3, r2
 8008d7a:	005b      	lsls	r3, r3, #1
 8008d7c:	4413      	add	r3, r2
 8008d7e:	009b      	lsls	r3, r3, #2
 8008d80:	440b      	add	r3, r1
 8008d82:	3301      	adds	r3, #1
 8008d84:	2201      	movs	r2, #1
 8008d86:	701a      	strb	r2, [r3, #0]
		OtherCardLink_Flag[SourceIndex] = SET;
 8008d88:	79fb      	ldrb	r3, [r7, #7]
 8008d8a:	4a1b      	ldr	r2, [pc, #108]	; (8008df8 <CheckOtherLinkStatus+0xc8>)
 8008d8c:	2101      	movs	r1, #1
 8008d8e:	54d1      	strb	r1, [r2, r3]
 8008d90:	e017      	b.n	8008dc2 <CheckOtherLinkStatus+0x92>
		/* Checking the Link Status */
	}
	else
	{
		OtherCardLink_Flag[SourceIndex] = CLEAR;
 8008d92:	79fb      	ldrb	r3, [r7, #7]
 8008d94:	4a18      	ldr	r2, [pc, #96]	; (8008df8 <CheckOtherLinkStatus+0xc8>)
 8008d96:	2100      	movs	r1, #0
 8008d98:	54d1      	strb	r1, [r2, r3]
		Other_Hitachi_clk_flags_st[SourceIndex].Link_FailClk = CurTicks;
 8008d9a:	79fa      	ldrb	r2, [r7, #7]
 8008d9c:	4915      	ldr	r1, [pc, #84]	; (8008df4 <CheckOtherLinkStatus+0xc4>)
 8008d9e:	4613      	mov	r3, r2
 8008da0:	005b      	lsls	r3, r3, #1
 8008da2:	4413      	add	r3, r2
 8008da4:	009b      	lsls	r3, r3, #2
 8008da6:	440b      	add	r3, r1
 8008da8:	3308      	adds	r3, #8
 8008daa:	68fa      	ldr	r2, [r7, #12]
 8008dac:	601a      	str	r2, [r3, #0]
		Other_Hitachi_clk_flags_st[SourceIndex].Link_EstablishFlag = CLEAR;
 8008dae:	79fa      	ldrb	r2, [r7, #7]
 8008db0:	4910      	ldr	r1, [pc, #64]	; (8008df4 <CheckOtherLinkStatus+0xc4>)
 8008db2:	4613      	mov	r3, r2
 8008db4:	005b      	lsls	r3, r3, #1
 8008db6:	4413      	add	r3, r2
 8008db8:	009b      	lsls	r3, r3, #2
 8008dba:	440b      	add	r3, r1
 8008dbc:	3301      	adds	r3, #1
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	701a      	strb	r2, [r3, #0]
	}


	if(Rx_Ei_self_sharing_st[SourceIndex].Msg_Rcv_Flag == SET)
 8008dc2:	79fa      	ldrb	r2, [r7, #7]
 8008dc4:	4909      	ldr	r1, [pc, #36]	; (8008dec <CheckOtherLinkStatus+0xbc>)
 8008dc6:	4613      	mov	r3, r2
 8008dc8:	005b      	lsls	r3, r3, #1
 8008dca:	4413      	add	r3, r2
 8008dcc:	00db      	lsls	r3, r3, #3
 8008dce:	440b      	add	r3, r1
 8008dd0:	3301      	adds	r3, #1
 8008dd2:	781b      	ldrb	r3, [r3, #0]
 8008dd4:	2b01      	cmp	r3, #1
 8008dd6:	d104      	bne.n	8008de2 <CheckOtherLinkStatus+0xb2>
	{
		OtherCardReceptionClk[SourceIndex] = CurTicks;
 8008dd8:	79fb      	ldrb	r3, [r7, #7]
 8008dda:	4908      	ldr	r1, [pc, #32]	; (8008dfc <CheckOtherLinkStatus+0xcc>)
 8008ddc:	68fa      	ldr	r2, [r7, #12]
 8008dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}


}
 8008de2:	bf00      	nop
 8008de4:	3710      	adds	r7, #16
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
 8008dea:	bf00      	nop
 8008dec:	20001770 	.word	0x20001770
 8008df0:	20000f48 	.word	0x20000f48
 8008df4:	20001d4c 	.word	0x20001d4c
 8008df8:	20000f7c 	.word	0x20000f7c
 8008dfc:	20000ea8 	.word	0x20000ea8

08008e00 <SendRelay2_Other>:

void SendRelay2_Other(void)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	af00      	add	r7, sp, #0
	static uint32_t RelaySendClk =0;
	static uint32_t Traverser = 0;

	if(HAL_Elaps_Ticks(RelaySendClk) > ONE_SEC)
 8008e04:	4b1a      	ldr	r3, [pc, #104]	; (8008e70 <SendRelay2_Other+0x70>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f005 fe0f 	bl	800ea2c <HAL_Elaps_Ticks>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e14:	d92a      	bls.n	8008e6c <SendRelay2_Other+0x6c>
	{

		memset(&Tx_Temp_Main_Relays_st,0,sizeof(RELAYS_t));
 8008e16:	2214      	movs	r2, #20
 8008e18:	2100      	movs	r1, #0
 8008e1a:	4816      	ldr	r0, [pc, #88]	; (8008e74 <SendRelay2_Other+0x74>)
 8008e1c:	f019 fada 	bl	80223d4 <memset>
		memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Traverser],sizeof(RELAYS_t));
 8008e20:	4b15      	ldr	r3, [pc, #84]	; (8008e78 <SendRelay2_Other+0x78>)
 8008e22:	681a      	ldr	r2, [r3, #0]
 8008e24:	4613      	mov	r3, r2
 8008e26:	009b      	lsls	r3, r3, #2
 8008e28:	4413      	add	r3, r2
 8008e2a:	009b      	lsls	r3, r3, #2
 8008e2c:	4a13      	ldr	r2, [pc, #76]	; (8008e7c <SendRelay2_Other+0x7c>)
 8008e2e:	4413      	add	r3, r2
 8008e30:	2214      	movs	r2, #20
 8008e32:	4619      	mov	r1, r3
 8008e34:	480f      	ldr	r0, [pc, #60]	; (8008e74 <SendRelay2_Other+0x74>)
 8008e36:	f019 faa5 	bl	8022384 <memcpy>

#ifdef EI_1
		TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
#endif
#ifdef EI_2
		TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
 8008e3a:	f44f 7002 	mov.w	r0, #520	; 0x208
 8008e3e:	f006 fb77 	bl	800f530 <TransmitCanPkt>
#endif

		++Traverser;
 8008e42:	4b0d      	ldr	r3, [pc, #52]	; (8008e78 <SendRelay2_Other+0x78>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	3301      	adds	r3, #1
 8008e48:	4a0b      	ldr	r2, [pc, #44]	; (8008e78 <SendRelay2_Other+0x78>)
 8008e4a:	6013      	str	r3, [r2, #0]
		if(Traverser == EI_data.Hitachi_st.PeersCnt)
 8008e4c:	4b0c      	ldr	r3, [pc, #48]	; (8008e80 <SendRelay2_Other+0x80>)
 8008e4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008e52:	461a      	mov	r2, r3
 8008e54:	4b08      	ldr	r3, [pc, #32]	; (8008e78 <SendRelay2_Other+0x78>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d102      	bne.n	8008e62 <SendRelay2_Other+0x62>
		{
			Traverser = 0;
 8008e5c:	4b06      	ldr	r3, [pc, #24]	; (8008e78 <SendRelay2_Other+0x78>)
 8008e5e:	2200      	movs	r2, #0
 8008e60:	601a      	str	r2, [r3, #0]
		}

		RelaySendClk = HAL_GetTick();
 8008e62:	f00c fb95 	bl	8015590 <HAL_GetTick>
 8008e66:	4603      	mov	r3, r0
 8008e68:	4a01      	ldr	r2, [pc, #4]	; (8008e70 <SendRelay2_Other+0x70>)
 8008e6a:	6013      	str	r3, [r2, #0]
	}
}
 8008e6c:	bf00      	nop
 8008e6e:	bd80      	pop	{r7, pc}
 8008e70:	200020b4 	.word	0x200020b4
 8008e74:	2000201c 	.word	0x2000201c
 8008e78:	200020b8 	.word	0x200020b8
 8008e7c:	20001e8c 	.word	0x20001e8c
 8008e80:	20000304 	.word	0x20000304

08008e84 <Process_HitachiEI>:

void Process_HitachiEI(void)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	af00      	add	r7, sp, #0
	while(1)
	{
		MX_LWIP_Process(); //This funtion will get the Ethernet data.
 8008e88:	f013 fe70 	bl	801cb6c <MX_LWIP_Process>

		HAL_IWDG_Refresh(&hiwdg);
 8008e8c:	481a      	ldr	r0, [pc, #104]	; (8008ef8 <Process_HitachiEI+0x74>)
 8008e8e:	f00f fee5 	bl	8018c5c <HAL_IWDG_Refresh>

		Feed_wdt();
 8008e92:	f00a fa39 	bl	8013308 <Feed_wdt>

		readCanToStructs();
 8008e96:	f007 f827 	bl	800fee8 <readCanToStructs>

		Check_for_cmd();
 8008e9a:	f7f7 fe5d 	bl	8000b58 <Check_for_cmd>

		Process_Hitachi_Packets_Eth();
 8008e9e:	f7f8 f8c7 	bl	8001030 <Process_Hitachi_Packets_Eth>

		Process_Hitachi_Packets_Com();
 8008ea2:	f7f8 f933 	bl	800110c <Process_Hitachi_Packets_Com>

		Process_Send_Signals_2_MIE();
 8008ea6:	f7ff f8b3 	bl	8008010 <Process_Send_Signals_2_MIE>

		Send_Self_Sharing();
 8008eaa:	f7fe ffeb 	bl	8007e84 <Send_Self_Sharing>

		Detect_CAN_Xchange_Failure();
 8008eae:	f7ff f84d 	bl	8007f4c <Detect_CAN_Xchange_Failure>

		//		Send_Health_Status();

		CheckLinkEstablishTimeout();
 8008eb2:	f7fe ff71 	bl	8007d98 <CheckLinkEstablishTimeout>

		Check_All_Peers();
 8008eb6:	f7ff fe2d 	bl	8008b14 <Check_All_Peers>

		Send_Vital_Msg_After_Rx_VITAL();
 8008eba:	f7ff fce3 	bl	8008884 <Send_Vital_Msg_After_Rx_VITAL>

		Send_Init_After_Timeout();
 8008ebe:	f7ff fc63 	bl	8008788 <Send_Init_After_Timeout>

		Check_Recv_Status_fail();
 8008ec2:	f7ff fd2f 	bl	8008924 <Check_Recv_Status_fail>

		Update_Time_Every_Sec();
 8008ec6:	f002 f9c3 	bl	800b250 <Update_Time_Every_Sec>

		Check_for_RelayMisMatch();
 8008eca:	f7ff fe81 	bl	8008bd0 <Check_for_RelayMisMatch>

		SendRelay2_Other();
 8008ece:	f7ff ff97 	bl	8008e00 <SendRelay2_Other>
		//Dats_Request_Flag = CheckDocklightForRqst(ISP_PORT);

		Print_BuildDat_Details();
 8008ed2:	f00b fb2b 	bl	801452c <Print_BuildDat_Details>

		if(Dats_Request_Flag > 0)
 8008ed6:	4b09      	ldr	r3, [pc, #36]	; (8008efc <Process_HitachiEI+0x78>)
 8008ed8:	781b      	ldrb	r3, [r3, #0]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d003      	beq.n	8008ee6 <Process_HitachiEI+0x62>
		{
			gucFlagUpdate = 3;
 8008ede:	4b08      	ldr	r3, [pc, #32]	; (8008f00 <Process_HitachiEI+0x7c>)
 8008ee0:	2203      	movs	r2, #3
 8008ee2:	701a      	strb	r2, [r3, #0]
			break;
 8008ee4:	e002      	b.n	8008eec <Process_HitachiEI+0x68>
		}

		Enable_UART_Interrupts();
 8008ee6:	f00c f941 	bl	801516c <Enable_UART_Interrupts>
		MX_LWIP_Process(); //This funtion will get the Ethernet data.
 8008eea:	e7cd      	b.n	8008e88 <Process_HitachiEI+0x4>

	}

	while(1)
	{
		Data_Processing();
 8008eec:	f00b fa1c 	bl	8014328 <Data_Processing>
		HAL_IWDG_Refresh(&hiwdg);
 8008ef0:	4801      	ldr	r0, [pc, #4]	; (8008ef8 <Process_HitachiEI+0x74>)
 8008ef2:	f00f feb3 	bl	8018c5c <HAL_IWDG_Refresh>
		Data_Processing();
 8008ef6:	e7f9      	b.n	8008eec <Process_HitachiEI+0x68>
 8008ef8:	20009c74 	.word	0x20009c74
 8008efc:	20000644 	.word	0x20000644
 8008f00:	20000a49 	.word	0x20000a49

08008f04 <reset_cause_get>:

/// @brief      Obtain the STM32 system reset cause
/// @param      None
/// @return     The system reset cause
reset_cause_t reset_cause_get(void)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b083      	sub	sp, #12
 8008f08:	af00      	add	r7, sp, #0
    reset_cause_t reset_cause;

    if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST))
 8008f0a:	4b26      	ldr	r3, [pc, #152]	; (8008fa4 <reset_cause_get+0xa0>)
 8008f0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	da02      	bge.n	8008f18 <reset_cause_get+0x14>
    {
        reset_cause = RESET_CAUSE_LOW_POWER_RESET;
 8008f12:	2301      	movs	r3, #1
 8008f14:	71fb      	strb	r3, [r7, #7]
 8008f16:	e037      	b.n	8008f88 <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST))
 8008f18:	4b22      	ldr	r3, [pc, #136]	; (8008fa4 <reset_cause_get+0xa0>)
 8008f1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f1c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d002      	beq.n	8008f2a <reset_cause_get+0x26>
    {
        reset_cause = RESET_CAUSE_WINDOW_WATCHDOG_RESET;
 8008f24:	2302      	movs	r3, #2
 8008f26:	71fb      	strb	r3, [r7, #7]
 8008f28:	e02e      	b.n	8008f88 <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST))
 8008f2a:	4b1e      	ldr	r3, [pc, #120]	; (8008fa4 <reset_cause_get+0xa0>)
 8008f2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d002      	beq.n	8008f3c <reset_cause_get+0x38>
    {
        reset_cause = RESET_CAUSE_INDEPENDENT_WATCHDOG_RESET;
 8008f36:	2303      	movs	r3, #3
 8008f38:	71fb      	strb	r3, [r7, #7]
 8008f3a:	e025      	b.n	8008f88 <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST))
 8008f3c:	4b19      	ldr	r3, [pc, #100]	; (8008fa4 <reset_cause_get+0xa0>)
 8008f3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d002      	beq.n	8008f4e <reset_cause_get+0x4a>
    {
        // This reset is induced by calling the ARM CMSIS
        // `NVIC_SystemReset()` function!
        reset_cause = RESET_CAUSE_SOFTWARE_RESET;
 8008f48:	2304      	movs	r3, #4
 8008f4a:	71fb      	strb	r3, [r7, #7]
 8008f4c:	e01c      	b.n	8008f88 <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST))
 8008f4e:	4b15      	ldr	r3, [pc, #84]	; (8008fa4 <reset_cause_get+0xa0>)
 8008f50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d002      	beq.n	8008f60 <reset_cause_get+0x5c>
    {
        reset_cause = RESET_CAUSE_POWER_ON_POWER_DOWN_RESET;
 8008f5a:	2305      	movs	r3, #5
 8008f5c:	71fb      	strb	r3, [r7, #7]
 8008f5e:	e013      	b.n	8008f88 <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST))
 8008f60:	4b10      	ldr	r3, [pc, #64]	; (8008fa4 <reset_cause_get+0xa0>)
 8008f62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d002      	beq.n	8008f72 <reset_cause_get+0x6e>
    {
        reset_cause = RESET_CAUSE_EXTERNAL_RESET_PIN_RESET;
 8008f6c:	2306      	movs	r3, #6
 8008f6e:	71fb      	strb	r3, [r7, #7]
 8008f70:	e00a      	b.n	8008f88 <reset_cause_get+0x84>
    }
    // Needs to come *after* checking the `RCC_FLAG_PORRST` flag in order to
    // ensure first that the reset cause is NOT a POR/PDR reset. See note
    // below.
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST))
 8008f72:	4b0c      	ldr	r3, [pc, #48]	; (8008fa4 <reset_cause_get+0xa0>)
 8008f74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d002      	beq.n	8008f84 <reset_cause_get+0x80>
    {
        reset_cause = RESET_CAUSE_BROWNOUT_RESET;
 8008f7e:	2307      	movs	r3, #7
 8008f80:	71fb      	strb	r3, [r7, #7]
 8008f82:	e001      	b.n	8008f88 <reset_cause_get+0x84>
    }
    else
    {
        reset_cause = RESET_CAUSE_UNKNOWN;
 8008f84:	2300      	movs	r3, #0
 8008f86:	71fb      	strb	r3, [r7, #7]
    }

    // Clear all the reset flags or else they will remain set during future
    // resets until system power is fully removed.
    __HAL_RCC_CLEAR_RESET_FLAGS();
 8008f88:	4b06      	ldr	r3, [pc, #24]	; (8008fa4 <reset_cause_get+0xa0>)
 8008f8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f8c:	4a05      	ldr	r2, [pc, #20]	; (8008fa4 <reset_cause_get+0xa0>)
 8008f8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008f92:	6753      	str	r3, [r2, #116]	; 0x74

    return reset_cause;
 8008f94:	79fb      	ldrb	r3, [r7, #7]
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	370c      	adds	r7, #12
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa0:	4770      	bx	lr
 8008fa2:	bf00      	nop
 8008fa4:	40023800 	.word	0x40023800

08008fa8 <reset_cause_get_name>:
char * reset_cause_get_name(reset_cause_t reset_cause)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b085      	sub	sp, #20
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	4603      	mov	r3, r0
 8008fb0:	71fb      	strb	r3, [r7, #7]
    char * reset_cause_name = "TBD";
 8008fb2:	4b1c      	ldr	r3, [pc, #112]	; (8009024 <reset_cause_get_name+0x7c>)
 8008fb4:	60fb      	str	r3, [r7, #12]

    switch (reset_cause)
 8008fb6:	79fb      	ldrb	r3, [r7, #7]
 8008fb8:	2b07      	cmp	r3, #7
 8008fba:	d82b      	bhi.n	8009014 <reset_cause_get_name+0x6c>
 8008fbc:	a201      	add	r2, pc, #4	; (adr r2, 8008fc4 <reset_cause_get_name+0x1c>)
 8008fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fc2:	bf00      	nop
 8008fc4:	08008fe5 	.word	0x08008fe5
 8008fc8:	08008feb 	.word	0x08008feb
 8008fcc:	08008ff1 	.word	0x08008ff1
 8008fd0:	08008ff7 	.word	0x08008ff7
 8008fd4:	08008ffd 	.word	0x08008ffd
 8008fd8:	08009003 	.word	0x08009003
 8008fdc:	08009009 	.word	0x08009009
 8008fe0:	0800900f 	.word	0x0800900f
    {
        case RESET_CAUSE_UNKNOWN:
            reset_cause_name = "UNKNOWN";
 8008fe4:	4b10      	ldr	r3, [pc, #64]	; (8009028 <reset_cause_get_name+0x80>)
 8008fe6:	60fb      	str	r3, [r7, #12]
            break;
 8008fe8:	e014      	b.n	8009014 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_LOW_POWER_RESET:
            reset_cause_name = "LOW_POWER_RESET";
 8008fea:	4b10      	ldr	r3, [pc, #64]	; (800902c <reset_cause_get_name+0x84>)
 8008fec:	60fb      	str	r3, [r7, #12]
            break;
 8008fee:	e011      	b.n	8009014 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_WINDOW_WATCHDOG_RESET:
            reset_cause_name = "WINDOW_WATCHDOG_RESET";
 8008ff0:	4b0f      	ldr	r3, [pc, #60]	; (8009030 <reset_cause_get_name+0x88>)
 8008ff2:	60fb      	str	r3, [r7, #12]
            break;
 8008ff4:	e00e      	b.n	8009014 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_INDEPENDENT_WATCHDOG_RESET:
            reset_cause_name = "INDEPENDENT_WATCHDOG_RESET";
 8008ff6:	4b0f      	ldr	r3, [pc, #60]	; (8009034 <reset_cause_get_name+0x8c>)
 8008ff8:	60fb      	str	r3, [r7, #12]
            break;
 8008ffa:	e00b      	b.n	8009014 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_SOFTWARE_RESET:
            reset_cause_name = "SOFTWARE_RESET";
 8008ffc:	4b0e      	ldr	r3, [pc, #56]	; (8009038 <reset_cause_get_name+0x90>)
 8008ffe:	60fb      	str	r3, [r7, #12]
            break;
 8009000:	e008      	b.n	8009014 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_POWER_ON_POWER_DOWN_RESET:
            reset_cause_name = "POWER-ON_RESET (POR) / POWER-DOWN_RESET (PDR)";
 8009002:	4b0e      	ldr	r3, [pc, #56]	; (800903c <reset_cause_get_name+0x94>)
 8009004:	60fb      	str	r3, [r7, #12]
            break;
 8009006:	e005      	b.n	8009014 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_EXTERNAL_RESET_PIN_RESET:
            reset_cause_name = "EXTERNAL_RESET_PIN_RESET";
 8009008:	4b0d      	ldr	r3, [pc, #52]	; (8009040 <reset_cause_get_name+0x98>)
 800900a:	60fb      	str	r3, [r7, #12]
            break;
 800900c:	e002      	b.n	8009014 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_BROWNOUT_RESET:
            reset_cause_name = "BROWNOUT_RESET (BOR)";
 800900e:	4b0d      	ldr	r3, [pc, #52]	; (8009044 <reset_cause_get_name+0x9c>)
 8009010:	60fb      	str	r3, [r7, #12]
            break;
 8009012:	bf00      	nop
    }

    return reset_cause_name;
 8009014:	68fb      	ldr	r3, [r7, #12]
}
 8009016:	4618      	mov	r0, r3
 8009018:	3714      	adds	r7, #20
 800901a:	46bd      	mov	sp, r7
 800901c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009020:	4770      	bx	lr
 8009022:	bf00      	nop
 8009024:	080251a8 	.word	0x080251a8
 8009028:	080251ac 	.word	0x080251ac
 800902c:	080251b4 	.word	0x080251b4
 8009030:	080251c4 	.word	0x080251c4
 8009034:	080251dc 	.word	0x080251dc
 8009038:	080251f8 	.word	0x080251f8
 800903c:	08025208 	.word	0x08025208
 8009040:	08025238 	.word	0x08025238
 8009044:	08025254 	.word	0x08025254

08009048 <Process_Medha_EI>:
		0xB40BBE37,0xC30C8EA1,0x5A05DF1B,0x2D02EF8D
};


void Process_Medha_EI(void)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	af00      	add	r7, sp, #0
	while(1)
	{
		Print_BuildDat_Details();
 800904c:	f00b fa6e 	bl	801452c <Print_BuildDat_Details>

		readCanToStructs();
 8009050:	f006 ff4a 	bl	800fee8 <readCanToStructs>

		Feed_wdt();
 8009054:	f00a f958 	bl	8013308 <Feed_wdt>

		HAL_IWDG_Refresh(&hiwdg);
 8009058:	480f      	ldr	r0, [pc, #60]	; (8009098 <Process_Medha_EI+0x50>)
 800905a:	f00f fdff 	bl	8018c5c <HAL_IWDG_Refresh>

		Medha_EI_Analyser();
 800905e:	f000 f91d 	bl	800929c <Medha_EI_Analyser>

		Send_Relay_Statuses_2_MIE();
 8009062:	f000 fecf 	bl	8009e04 <Send_Relay_Statuses_2_MIE>

		Process_Clear_Relays();
 8009066:	f000 ff31 	bl	8009ecc <Process_Clear_Relays>

		Send_Data_to_Other();
 800906a:	f000 fff3 	bl	800a054 <Send_Data_to_Other>

		Process_Data_from_Other();
 800906e:	f001 f84b 	bl	800a108 <Process_Data_from_Other>

		CheckforMedhaCMD();
 8009072:	f001 fa11 	bl	800a498 <CheckforMedhaCMD>


		if(Dats_Request_Flag > 0)
 8009076:	4b09      	ldr	r3, [pc, #36]	; (800909c <Process_Medha_EI+0x54>)
 8009078:	781b      	ldrb	r3, [r3, #0]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d003      	beq.n	8009086 <Process_Medha_EI+0x3e>
		{
			gucFlagUpdate = 3;
 800907e:	4b08      	ldr	r3, [pc, #32]	; (80090a0 <Process_Medha_EI+0x58>)
 8009080:	2203      	movs	r2, #3
 8009082:	701a      	strb	r2, [r3, #0]
			break;
 8009084:	e002      	b.n	800908c <Process_Medha_EI+0x44>
		}

#if FAULT_INJECTION_ENABLED
		Get_Command();
#endif
		Enable_UART_Interrupts();
 8009086:	f00c f871 	bl	801516c <Enable_UART_Interrupts>
		Print_BuildDat_Details();
 800908a:	e7df      	b.n	800904c <Process_Medha_EI+0x4>
	}
	while(1)
	{
		HAL_IWDG_Refresh(&hiwdg);
 800908c:	4802      	ldr	r0, [pc, #8]	; (8009098 <Process_Medha_EI+0x50>)
 800908e:	f00f fde5 	bl	8018c5c <HAL_IWDG_Refresh>
		Data_Processing();
 8009092:	f00b f949 	bl	8014328 <Data_Processing>
		HAL_IWDG_Refresh(&hiwdg);
 8009096:	e7f9      	b.n	800908c <Process_Medha_EI+0x44>
 8009098:	20009c74 	.word	0x20009c74
 800909c:	20000644 	.word	0x20000644
 80090a0:	20000a49 	.word	0x20000a49

080090a4 <Get_Medha_EI_Message>:
	}
}

uint16_t Get_Medha_EI_Message(uint8_t ComPort,uint8_t *Buffer,uint16_t Buffer_Size)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b084      	sub	sp, #16
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	4603      	mov	r3, r0
 80090ac:	6039      	str	r1, [r7, #0]
 80090ae:	71fb      	strb	r3, [r7, #7]
 80090b0:	4613      	mov	r3, r2
 80090b2:	80bb      	strh	r3, [r7, #4]
	static uint8_t suc_RcvStatus = ONE;
	uint16_t EI_pktlength=0;
 80090b4:	2300      	movs	r3, #0
 80090b6:	81bb      	strh	r3, [r7, #12]
	static uint8_t suc_RByte = ZERO;
	static uint16_t i = ZERO,j=ZERO;
	static uint16_t sus_CRC = ZERO;
	uint16_t us_ReturnBytes = ZERO;
 80090b8:	2300      	movs	r3, #0
 80090ba:	81fb      	strh	r3, [r7, #14]
	static uint16_t SuiBuffer_Index = ZERO;
	/* If data available on port read and store data */
	while(Com_DataReady(ComPort))
 80090bc:	e0d0      	b.n	8009260 <Get_Medha_EI_Message+0x1bc>
	{
		suc_RByte = Com_Get_Byte(ComPort);
 80090be:	79fb      	ldrb	r3, [r7, #7]
 80090c0:	4618      	mov	r0, r3
 80090c2:	f00b ff3d 	bl	8014f40 <Com_Get_Byte>
 80090c6:	4603      	mov	r3, r0
 80090c8:	461a      	mov	r2, r3
 80090ca:	4b6c      	ldr	r3, [pc, #432]	; (800927c <Get_Medha_EI_Message+0x1d8>)
 80090cc:	701a      	strb	r2, [r3, #0]
		//printf("0x%02x ",suc_RByte);
		switch(suc_RcvStatus)
 80090ce:	4b6c      	ldr	r3, [pc, #432]	; (8009280 <Get_Medha_EI_Message+0x1dc>)
 80090d0:	781b      	ldrb	r3, [r3, #0]
 80090d2:	3b01      	subs	r3, #1
 80090d4:	2b04      	cmp	r3, #4
 80090d6:	f200 80c2 	bhi.w	800925e <Get_Medha_EI_Message+0x1ba>
 80090da:	a201      	add	r2, pc, #4	; (adr r2, 80090e0 <Get_Medha_EI_Message+0x3c>)
 80090dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090e0:	080090f5 	.word	0x080090f5
 80090e4:	0800910d 	.word	0x0800910d
 80090e8:	0800925f 	.word	0x0800925f
 80090ec:	08009159 	.word	0x08009159
 80090f0:	080091b1 	.word	0x080091b1
		{
		case ONE: /* Receive Start of Message */
			if(SOM_MEDHA == suc_RByte)
 80090f4:	4b61      	ldr	r3, [pc, #388]	; (800927c <Get_Medha_EI_Message+0x1d8>)
 80090f6:	781b      	ldrb	r3, [r3, #0]
 80090f8:	2b53      	cmp	r3, #83	; 0x53
 80090fa:	f040 80b1 	bne.w	8009260 <Get_Medha_EI_Message+0x1bc>
			{
				//Buffer[ZERO] = suc_RByte;
				i = ONE;
 80090fe:	4b61      	ldr	r3, [pc, #388]	; (8009284 <Get_Medha_EI_Message+0x1e0>)
 8009100:	2201      	movs	r2, #1
 8009102:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 8009104:	4b5e      	ldr	r3, [pc, #376]	; (8009280 <Get_Medha_EI_Message+0x1dc>)
 8009106:	2202      	movs	r2, #2
 8009108:	701a      	strb	r2, [r3, #0]
			}
			break;
 800910a:	e0a9      	b.n	8009260 <Get_Medha_EI_Message+0x1bc>
			switch(suc_RByte)
			{
			//			case THREE:
			//				break;
			default:
				if(EIGHT == i )
 800910c:	4b5d      	ldr	r3, [pc, #372]	; (8009284 <Get_Medha_EI_Message+0x1e0>)
 800910e:	881b      	ldrh	r3, [r3, #0]
 8009110:	2b08      	cmp	r3, #8
 8009112:	d111      	bne.n	8009138 <Get_Medha_EI_Message+0x94>
				{
					Buffer[i] = suc_RByte;
 8009114:	4b5b      	ldr	r3, [pc, #364]	; (8009284 <Get_Medha_EI_Message+0x1e0>)
 8009116:	881b      	ldrh	r3, [r3, #0]
 8009118:	461a      	mov	r2, r3
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	4413      	add	r3, r2
 800911e:	4a57      	ldr	r2, [pc, #348]	; (800927c <Get_Medha_EI_Message+0x1d8>)
 8009120:	7812      	ldrb	r2, [r2, #0]
 8009122:	701a      	strb	r2, [r3, #0]
					i++;
 8009124:	4b57      	ldr	r3, [pc, #348]	; (8009284 <Get_Medha_EI_Message+0x1e0>)
 8009126:	881b      	ldrh	r3, [r3, #0]
 8009128:	3301      	adds	r3, #1
 800912a:	b29a      	uxth	r2, r3
 800912c:	4b55      	ldr	r3, [pc, #340]	; (8009284 <Get_Medha_EI_Message+0x1e0>)
 800912e:	801a      	strh	r2, [r3, #0]
					suc_RcvStatus = FOUR;
 8009130:	4b53      	ldr	r3, [pc, #332]	; (8009280 <Get_Medha_EI_Message+0x1dc>)
 8009132:	2204      	movs	r2, #4
 8009134:	701a      	strb	r2, [r3, #0]
				else
				{
					Buffer[i] = suc_RByte;
					i++;
				}
				break;
 8009136:	e00d      	b.n	8009154 <Get_Medha_EI_Message+0xb0>
					Buffer[i] = suc_RByte;
 8009138:	4b52      	ldr	r3, [pc, #328]	; (8009284 <Get_Medha_EI_Message+0x1e0>)
 800913a:	881b      	ldrh	r3, [r3, #0]
 800913c:	461a      	mov	r2, r3
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	4413      	add	r3, r2
 8009142:	4a4e      	ldr	r2, [pc, #312]	; (800927c <Get_Medha_EI_Message+0x1d8>)
 8009144:	7812      	ldrb	r2, [r2, #0]
 8009146:	701a      	strb	r2, [r3, #0]
					i++;
 8009148:	4b4e      	ldr	r3, [pc, #312]	; (8009284 <Get_Medha_EI_Message+0x1e0>)
 800914a:	881b      	ldrh	r3, [r3, #0]
 800914c:	3301      	adds	r3, #1
 800914e:	b29a      	uxth	r2, r3
 8009150:	4b4c      	ldr	r3, [pc, #304]	; (8009284 <Get_Medha_EI_Message+0x1e0>)
 8009152:	801a      	strh	r2, [r3, #0]
				break;
 8009154:	bf00      	nop
			}
			break;
 8009156:	e083      	b.n	8009260 <Get_Medha_EI_Message+0x1bc>
			case FOUR:
				memcpy(&EI_pktlength,&Buffer[i-2],2);
 8009158:	4b4a      	ldr	r3, [pc, #296]	; (8009284 <Get_Medha_EI_Message+0x1e0>)
 800915a:	881b      	ldrh	r3, [r3, #0]
 800915c:	3b02      	subs	r3, #2
 800915e:	683a      	ldr	r2, [r7, #0]
 8009160:	4413      	add	r3, r2
 8009162:	881b      	ldrh	r3, [r3, #0]
 8009164:	b29b      	uxth	r3, r3
 8009166:	81bb      	strh	r3, [r7, #12]
				//printf("PKT LENGTH:%u\n",EI_pktlength);
				SuiBuffer_Index  = 0;
 8009168:	4b47      	ldr	r3, [pc, #284]	; (8009288 <Get_Medha_EI_Message+0x1e4>)
 800916a:	2200      	movs	r2, #0
 800916c:	801a      	strh	r2, [r3, #0]
				j=1;
 800916e:	4b47      	ldr	r3, [pc, #284]	; (800928c <Get_Medha_EI_Message+0x1e8>)
 8009170:	2201      	movs	r2, #1
 8009172:	801a      	strh	r2, [r3, #0]
				Buffer[i] = suc_RByte;
 8009174:	4b43      	ldr	r3, [pc, #268]	; (8009284 <Get_Medha_EI_Message+0x1e0>)
 8009176:	881b      	ldrh	r3, [r3, #0]
 8009178:	461a      	mov	r2, r3
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	4413      	add	r3, r2
 800917e:	4a3f      	ldr	r2, [pc, #252]	; (800927c <Get_Medha_EI_Message+0x1d8>)
 8009180:	7812      	ldrb	r2, [r2, #0]
 8009182:	701a      	strb	r2, [r3, #0]
				SuiBuffer_Index++;
 8009184:	4b40      	ldr	r3, [pc, #256]	; (8009288 <Get_Medha_EI_Message+0x1e4>)
 8009186:	881b      	ldrh	r3, [r3, #0]
 8009188:	3301      	adds	r3, #1
 800918a:	b29a      	uxth	r2, r3
 800918c:	4b3e      	ldr	r3, [pc, #248]	; (8009288 <Get_Medha_EI_Message+0x1e4>)
 800918e:	801a      	strh	r2, [r3, #0]
				i++;
 8009190:	4b3c      	ldr	r3, [pc, #240]	; (8009284 <Get_Medha_EI_Message+0x1e0>)
 8009192:	881b      	ldrh	r3, [r3, #0]
 8009194:	3301      	adds	r3, #1
 8009196:	b29a      	uxth	r2, r3
 8009198:	4b3a      	ldr	r3, [pc, #232]	; (8009284 <Get_Medha_EI_Message+0x1e0>)
 800919a:	801a      	strh	r2, [r3, #0]
				j++;
 800919c:	4b3b      	ldr	r3, [pc, #236]	; (800928c <Get_Medha_EI_Message+0x1e8>)
 800919e:	881b      	ldrh	r3, [r3, #0]
 80091a0:	3301      	adds	r3, #1
 80091a2:	b29a      	uxth	r2, r3
 80091a4:	4b39      	ldr	r3, [pc, #228]	; (800928c <Get_Medha_EI_Message+0x1e8>)
 80091a6:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = FIVE;
 80091a8:	4b35      	ldr	r3, [pc, #212]	; (8009280 <Get_Medha_EI_Message+0x1dc>)
 80091aa:	2205      	movs	r2, #5
 80091ac:	701a      	strb	r2, [r3, #0]
				break;
 80091ae:	e057      	b.n	8009260 <Get_Medha_EI_Message+0x1bc>
			case FIVE:
				Buffer[i] = suc_RByte;
 80091b0:	4b34      	ldr	r3, [pc, #208]	; (8009284 <Get_Medha_EI_Message+0x1e0>)
 80091b2:	881b      	ldrh	r3, [r3, #0]
 80091b4:	461a      	mov	r2, r3
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	4413      	add	r3, r2
 80091ba:	4a30      	ldr	r2, [pc, #192]	; (800927c <Get_Medha_EI_Message+0x1d8>)
 80091bc:	7812      	ldrb	r2, [r2, #0]
 80091be:	701a      	strb	r2, [r3, #0]
				if ((EI_pktlength) > SuiBuffer_Index)
 80091c0:	89ba      	ldrh	r2, [r7, #12]
 80091c2:	4b31      	ldr	r3, [pc, #196]	; (8009288 <Get_Medha_EI_Message+0x1e4>)
 80091c4:	881b      	ldrh	r3, [r3, #0]
 80091c6:	429a      	cmp	r2, r3
 80091c8:	d940      	bls.n	800924c <Get_Medha_EI_Message+0x1a8>
				{
					SuiBuffer_Index++;
 80091ca:	4b2f      	ldr	r3, [pc, #188]	; (8009288 <Get_Medha_EI_Message+0x1e4>)
 80091cc:	881b      	ldrh	r3, [r3, #0]
 80091ce:	3301      	adds	r3, #1
 80091d0:	b29a      	uxth	r2, r3
 80091d2:	4b2d      	ldr	r3, [pc, #180]	; (8009288 <Get_Medha_EI_Message+0x1e4>)
 80091d4:	801a      	strh	r2, [r3, #0]
					i++;
 80091d6:	4b2b      	ldr	r3, [pc, #172]	; (8009284 <Get_Medha_EI_Message+0x1e0>)
 80091d8:	881b      	ldrh	r3, [r3, #0]
 80091da:	3301      	adds	r3, #1
 80091dc:	b29a      	uxth	r2, r3
 80091de:	4b29      	ldr	r3, [pc, #164]	; (8009284 <Get_Medha_EI_Message+0x1e0>)
 80091e0:	801a      	strh	r2, [r3, #0]
					j++;
 80091e2:	4b2a      	ldr	r3, [pc, #168]	; (800928c <Get_Medha_EI_Message+0x1e8>)
 80091e4:	881b      	ldrh	r3, [r3, #0]
 80091e6:	3301      	adds	r3, #1
 80091e8:	b29a      	uxth	r2, r3
 80091ea:	4b28      	ldr	r3, [pc, #160]	; (800928c <Get_Medha_EI_Message+0x1e8>)
 80091ec:	801a      	strh	r2, [r3, #0]
					if ((EI_pktlength) == (SuiBuffer_Index) )
 80091ee:	89ba      	ldrh	r2, [r7, #12]
 80091f0:	4b25      	ldr	r3, [pc, #148]	; (8009288 <Get_Medha_EI_Message+0x1e4>)
 80091f2:	881b      	ldrh	r3, [r3, #0]
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d133      	bne.n	8009260 <Get_Medha_EI_Message+0x1bc>
					{
						sus_CRC = i - FOUR;
 80091f8:	4b22      	ldr	r3, [pc, #136]	; (8009284 <Get_Medha_EI_Message+0x1e0>)
 80091fa:	881b      	ldrh	r3, [r3, #0]
 80091fc:	3b04      	subs	r3, #4
 80091fe:	b29a      	uxth	r2, r3
 8009200:	4b23      	ldr	r3, [pc, #140]	; (8009290 <Get_Medha_EI_Message+0x1ec>)
 8009202:	801a      	strh	r2, [r3, #0]
						us_ReturnBytes = sus_CRC;
 8009204:	4b22      	ldr	r3, [pc, #136]	; (8009290 <Get_Medha_EI_Message+0x1ec>)
 8009206:	881b      	ldrh	r3, [r3, #0]
 8009208:	81fb      	strh	r3, [r7, #14]
						i = 0;
 800920a:	4b1e      	ldr	r3, [pc, #120]	; (8009284 <Get_Medha_EI_Message+0x1e0>)
 800920c:	2200      	movs	r2, #0
 800920e:	801a      	strh	r2, [r3, #0]
						suc_RcvStatus = ONE;
 8009210:	4b1b      	ldr	r3, [pc, #108]	; (8009280 <Get_Medha_EI_Message+0x1dc>)
 8009212:	2201      	movs	r2, #1
 8009214:	701a      	strb	r2, [r3, #0]
						EI_pktlength = 0;
 8009216:	2300      	movs	r3, #0
 8009218:	81bb      	strh	r3, [r7, #12]
						if(us_ReturnBytes <= FOUR)
 800921a:	89fb      	ldrh	r3, [r7, #14]
 800921c:	2b04      	cmp	r3, #4
 800921e:	d804      	bhi.n	800922a <Get_Medha_EI_Message+0x186>
						{
							printf("\nHERE\n");
 8009220:	481c      	ldr	r0, [pc, #112]	; (8009294 <Get_Medha_EI_Message+0x1f0>)
 8009222:	f019 fa5b 	bl	80226dc <puts>
							return ZERO;
 8009226:	2300      	movs	r3, #0
 8009228:	e023      	b.n	8009272 <Get_Medha_EI_Message+0x1ce>
						}
						if(CheckCRC32(0,Buffer,sus_CRC))
 800922a:	4b19      	ldr	r3, [pc, #100]	; (8009290 <Get_Medha_EI_Message+0x1ec>)
 800922c:	881b      	ldrh	r3, [r3, #0]
 800922e:	461a      	mov	r2, r3
 8009230:	6839      	ldr	r1, [r7, #0]
 8009232:	2000      	movs	r0, #0
 8009234:	f001 fbf2 	bl	800aa1c <CheckCRC32>
 8009238:	4603      	mov	r3, r0
 800923a:	2b00      	cmp	r3, #0
 800923c:	d001      	beq.n	8009242 <Get_Medha_EI_Message+0x19e>
						{
							/*							printf("\nCRC OK\n");*/
							return us_ReturnBytes;
 800923e:	89fb      	ldrh	r3, [r7, #14]
 8009240:	e017      	b.n	8009272 <Get_Medha_EI_Message+0x1ce>
						}
						else
						{
							printf("CRC NOK\n");
 8009242:	4815      	ldr	r0, [pc, #84]	; (8009298 <Get_Medha_EI_Message+0x1f4>)
 8009244:	f019 fa4a 	bl	80226dc <puts>
							return ZERO;
 8009248:	2300      	movs	r3, #0
 800924a:	e012      	b.n	8009272 <Get_Medha_EI_Message+0x1ce>
						}
					}
				}
				else
				{
					i = 0;
 800924c:	4b0d      	ldr	r3, [pc, #52]	; (8009284 <Get_Medha_EI_Message+0x1e0>)
 800924e:	2200      	movs	r2, #0
 8009250:	801a      	strh	r2, [r3, #0]
					suc_RcvStatus= 1;
 8009252:	4b0b      	ldr	r3, [pc, #44]	; (8009280 <Get_Medha_EI_Message+0x1dc>)
 8009254:	2201      	movs	r2, #1
 8009256:	701a      	strb	r2, [r3, #0]
					EI_pktlength = 0;
 8009258:	2300      	movs	r3, #0
 800925a:	81bb      	strh	r3, [r7, #12]
				}
				break;
 800925c:	e000      	b.n	8009260 <Get_Medha_EI_Message+0x1bc>
			default:
				break;
 800925e:	bf00      	nop
	while(Com_DataReady(ComPort))
 8009260:	79fb      	ldrb	r3, [r7, #7]
 8009262:	4618      	mov	r0, r3
 8009264:	f00b fe2c 	bl	8014ec0 <Com_DataReady>
 8009268:	4603      	mov	r3, r0
 800926a:	2b00      	cmp	r3, #0
 800926c:	f47f af27 	bne.w	80090be <Get_Medha_EI_Message+0x1a>
		}
	}	    /* End of While data ready */
	return ZERO;
 8009270:	2300      	movs	r3, #0
}
 8009272:	4618      	mov	r0, r3
 8009274:	3710      	adds	r7, #16
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}
 800927a:	bf00      	nop
 800927c:	200027b8 	.word	0x200027b8
 8009280:	20000116 	.word	0x20000116
 8009284:	200027ba 	.word	0x200027ba
 8009288:	200027bc 	.word	0x200027bc
 800928c:	200027be 	.word	0x200027be
 8009290:	200027c0 	.word	0x200027c0
 8009294:	0802526c 	.word	0x0802526c
 8009298:	08025274 	.word	0x08025274

0800929c <Medha_EI_Analyser>:
void Medha_EI_Analyser(void)
{
 800929c:	b5b0      	push	{r4, r5, r7, lr}
 800929e:	f5ad 7d3c 	sub.w	sp, sp, #752	; 0x2f0
 80092a2:	af04      	add	r7, sp, #16

	uint16_t NoofBuffBytes 		= 0;
 80092a4:	2300      	movs	r3, #0
 80092a6:	f8a7 32d6 	strh.w	r3, [r7, #726]	; 0x2d6
	uint8_t EI_Buffer[300]		= "\0";
 80092aa:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80092ae:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80092b2:	2200      	movs	r2, #0
 80092b4:	601a      	str	r2, [r3, #0]
 80092b6:	3304      	adds	r3, #4
 80092b8:	f44f 7294 	mov.w	r2, #296	; 0x128
 80092bc:	2100      	movs	r1, #0
 80092be:	4618      	mov	r0, r3
 80092c0:	f019 f888 	bl	80223d4 <memset>
	uint16_t NoOfInputs 		= 0;
 80092c4:	2300      	movs	r3, #0
 80092c6:	f8a7 32de 	strh.w	r3, [r7, #734]	; 0x2de
	uint16_t Traverser 			= 0;
 80092ca:	2300      	movs	r3, #0
 80092cc:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
	uint8_t TempCompliment[128] = {0,};
 80092d0:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80092d4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80092d8:	2200      	movs	r2, #0
 80092da:	601a      	str	r2, [r3, #0]
 80092dc:	3304      	adds	r3, #4
 80092de:	227c      	movs	r2, #124	; 0x7c
 80092e0:	2100      	movs	r1, #0
 80092e2:	4618      	mov	r0, r3
 80092e4:	f019 f876 	bl	80223d4 <memset>
	uint16_t VitalCrcStartLoc 	= 0;
 80092e8:	2300      	movs	r3, #0
 80092ea:	f8a7 32d4 	strh.w	r3, [r7, #724]	; 0x2d4
	uint32_t CalcVitalCrc 		= 0;
 80092ee:	2300      	movs	r3, #0
 80092f0:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
	MEDHA_EI_PKT_t Medha_EI_Temp_Rx_st;

	NoofBuffBytes= Get_Medha_EI_Message(EI_data.Medha_Prms_st.Comport,EI_Buffer,sizeof(EI_Buffer));
 80092f4:	4bbf      	ldr	r3, [pc, #764]	; (80095f4 <Medha_EI_Analyser+0x358>)
 80092f6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80092fa:	f507 71d2 	add.w	r1, r7, #420	; 0x1a4
 80092fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009302:	4618      	mov	r0, r3
 8009304:	f7ff fece 	bl	80090a4 <Get_Medha_EI_Message>
 8009308:	4603      	mov	r3, r0
 800930a:	f8a7 32d6 	strh.w	r3, [r7, #726]	; 0x2d6

	if(NoofBuffBytes > 5)
 800930e:	f8b7 32d6 	ldrh.w	r3, [r7, #726]	; 0x2d6
 8009312:	2b05      	cmp	r3, #5
 8009314:	d934      	bls.n	8009380 <Medha_EI_Analyser+0xe4>
	{
		printf("Raw Data:\n");
 8009316:	48b8      	ldr	r0, [pc, #736]	; (80095f8 <Medha_EI_Analyser+0x35c>)
 8009318:	f019 f9e0 	bl	80226dc <puts>
		for(uint16_t i=0;i<NoofBuffBytes;++i)
 800931c:	2300      	movs	r3, #0
 800931e:	f8a7 32da 	strh.w	r3, [r7, #730]	; 0x2da
 8009322:	e024      	b.n	800936e <Medha_EI_Analyser+0xd2>
		{

			if((i!=0) && ((i%10)==0))
 8009324:	f8b7 32da 	ldrh.w	r3, [r7, #730]	; 0x2da
 8009328:	2b00      	cmp	r3, #0
 800932a:	d010      	beq.n	800934e <Medha_EI_Analyser+0xb2>
 800932c:	f8b7 22da 	ldrh.w	r2, [r7, #730]	; 0x2da
 8009330:	4bb2      	ldr	r3, [pc, #712]	; (80095fc <Medha_EI_Analyser+0x360>)
 8009332:	fba3 1302 	umull	r1, r3, r3, r2
 8009336:	08d9      	lsrs	r1, r3, #3
 8009338:	460b      	mov	r3, r1
 800933a:	009b      	lsls	r3, r3, #2
 800933c:	440b      	add	r3, r1
 800933e:	005b      	lsls	r3, r3, #1
 8009340:	1ad3      	subs	r3, r2, r3
 8009342:	b29b      	uxth	r3, r3
 8009344:	2b00      	cmp	r3, #0
 8009346:	d102      	bne.n	800934e <Medha_EI_Analyser+0xb2>
			{
				printf("\n");
 8009348:	200a      	movs	r0, #10
 800934a:	f019 f943 	bl	80225d4 <putchar>
			}
			printf("%02X ",EI_Buffer[i]);
 800934e:	f8b7 32da 	ldrh.w	r3, [r7, #730]	; 0x2da
 8009352:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 8009356:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 800935a:	5cd3      	ldrb	r3, [r2, r3]
 800935c:	4619      	mov	r1, r3
 800935e:	48a8      	ldr	r0, [pc, #672]	; (8009600 <Medha_EI_Analyser+0x364>)
 8009360:	f019 f920 	bl	80225a4 <iprintf>
		for(uint16_t i=0;i<NoofBuffBytes;++i)
 8009364:	f8b7 32da 	ldrh.w	r3, [r7, #730]	; 0x2da
 8009368:	3301      	adds	r3, #1
 800936a:	f8a7 32da 	strh.w	r3, [r7, #730]	; 0x2da
 800936e:	f8b7 22da 	ldrh.w	r2, [r7, #730]	; 0x2da
 8009372:	f8b7 32d6 	ldrh.w	r3, [r7, #726]	; 0x2d6
 8009376:	429a      	cmp	r2, r3
 8009378:	d3d4      	bcc.n	8009324 <Medha_EI_Analyser+0x88>
		}
		printf("\n");
 800937a:	200a      	movs	r0, #10
 800937c:	f019 f92a 	bl	80225d4 <putchar>
		printf("Injected EIPC_RX_FAILURE\n");
		NoofBuffBytes  =0;
	}
#endif

	if(NoofBuffBytes > 0)
 8009380:	f8b7 32d6 	ldrh.w	r3, [r7, #726]	; 0x2d6
 8009384:	2b00      	cmp	r3, #0
 8009386:	f000 83b6 	beq.w	8009af6 <Medha_EI_Analyser+0x85a>
	{
		memset(&Medha_EI_Temp_Rx_st,0,sizeof(MEDHA_EI_PKT_t));
 800938a:	463b      	mov	r3, r7
 800938c:	f44f 7292 	mov.w	r2, #292	; 0x124
 8009390:	2100      	movs	r1, #0
 8009392:	4618      	mov	r0, r3
 8009394:	f019 f81e 	bl	80223d4 <memset>

		BYTEINIT(0);
 8009398:	2300      	movs	r3, #0
 800939a:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8
		memcpy(&Medha_EI_Temp_Rx_st.SOM,&EI_Buffer[ucByte],1);
 800939e:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80093a2:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 80093a6:	4413      	add	r3, r2
 80093a8:	781a      	ldrb	r2, [r3, #0]
 80093aa:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80093ae:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80093b2:	701a      	strb	r2, [r3, #0]
		BYTEINC(1);
 80093b4:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80093b8:	3301      	adds	r3, #1
 80093ba:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Dest_Addr,&EI_Buffer[ucByte],2);
 80093be:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80093c2:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 80093c6:	4413      	add	r3, r2
 80093c8:	881b      	ldrh	r3, [r3, #0]
 80093ca:	b29a      	uxth	r2, r3
 80093cc:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80093d0:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80093d4:	809a      	strh	r2, [r3, #4]
			}
			printf("Injected Destination Address:%u\n",Medha_EI_Temp_Rx_st.Dest_Addr);
		}
#endif

		if(EI_data.Medha_Prms_st.Dest_Addr != Medha_EI_Temp_Rx_st.Dest_Addr)
 80093d6:	4b87      	ldr	r3, [pc, #540]	; (80095f4 <Medha_EI_Analyser+0x358>)
 80093d8:	f8b3 2324 	ldrh.w	r2, [r3, #804]	; 0x324
 80093dc:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80093e0:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80093e4:	889b      	ldrh	r3, [r3, #4]
 80093e6:	429a      	cmp	r2, r3
 80093e8:	d010      	beq.n	800940c <Medha_EI_Analyser+0x170>
		{
			printf("Destination Address Not Matched - Packet Rejected\n");
 80093ea:	4886      	ldr	r0, [pc, #536]	; (8009604 <Medha_EI_Analyser+0x368>)
 80093ec:	f019 f976 	bl	80226dc <puts>
			printf("Configured:\"%u\" - Received:\"%u\"\n",EI_data.Medha_Prms_st.Dest_Addr,Medha_EI_Temp_Rx_st.Dest_Addr);
 80093f0:	4b80      	ldr	r3, [pc, #512]	; (80095f4 <Medha_EI_Analyser+0x358>)
 80093f2:	f8b3 3324 	ldrh.w	r3, [r3, #804]	; 0x324
 80093f6:	4619      	mov	r1, r3
 80093f8:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80093fc:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009400:	889b      	ldrh	r3, [r3, #4]
 8009402:	461a      	mov	r2, r3
 8009404:	4880      	ldr	r0, [pc, #512]	; (8009608 <Medha_EI_Analyser+0x36c>)
 8009406:	f019 f8cd 	bl	80225a4 <iprintf>
			return;
 800940a:	e377      	b.n	8009afc <Medha_EI_Analyser+0x860>
		}
		BYTEINC(2);
 800940c:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009410:	3302      	adds	r3, #2
 8009412:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8



		memcpy(&Medha_EI_Temp_Rx_st.Source_Addr,&EI_Buffer[ucByte],2);
 8009416:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800941a:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800941e:	4413      	add	r3, r2
 8009420:	881b      	ldrh	r3, [r3, #0]
 8009422:	b29a      	uxth	r2, r3
 8009424:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009428:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800942c:	805a      	strh	r2, [r3, #2]

		}

#endif

		if(EI_data.Medha_Prms_st.Source_Addr != Medha_EI_Temp_Rx_st.Source_Addr)
 800942e:	4b71      	ldr	r3, [pc, #452]	; (80095f4 <Medha_EI_Analyser+0x358>)
 8009430:	f8b3 2322 	ldrh.w	r2, [r3, #802]	; 0x322
 8009434:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009438:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800943c:	885b      	ldrh	r3, [r3, #2]
 800943e:	429a      	cmp	r2, r3
 8009440:	d010      	beq.n	8009464 <Medha_EI_Analyser+0x1c8>
		{
			printf("Source Address Not Matched - Packet Rejected\n");
 8009442:	4872      	ldr	r0, [pc, #456]	; (800960c <Medha_EI_Analyser+0x370>)
 8009444:	f019 f94a 	bl	80226dc <puts>
			printf("Configured:\"%u\" - Received:\"%u\"\n",EI_data.Medha_Prms_st.Source_Addr,Medha_EI_Temp_Rx_st.Source_Addr);
 8009448:	4b6a      	ldr	r3, [pc, #424]	; (80095f4 <Medha_EI_Analyser+0x358>)
 800944a:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 800944e:	4619      	mov	r1, r3
 8009450:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009454:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009458:	885b      	ldrh	r3, [r3, #2]
 800945a:	461a      	mov	r2, r3
 800945c:	486a      	ldr	r0, [pc, #424]	; (8009608 <Medha_EI_Analyser+0x36c>)
 800945e:	f019 f8a1 	bl	80225a4 <iprintf>
			return;
 8009462:	e34b      	b.n	8009afc <Medha_EI_Analyser+0x860>
		}
		BYTEINC(2);
 8009464:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009468:	3302      	adds	r3, #2
 800946a:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Channel_Type,&EI_Buffer[ucByte],1);
 800946e:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009472:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8009476:	4413      	add	r3, r2
 8009478:	781a      	ldrb	r2, [r3, #0]
 800947a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800947e:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009482:	719a      	strb	r2, [r3, #6]
			printf("Injected Channel_Type:%02X\n",Medha_EI_Temp_Rx_st.Channel_Type);
		}

#endif

		if( ! ( (Medha_EI_Temp_Rx_st.Channel_Type == CHANNEL_A) || (Medha_EI_Temp_Rx_st.Channel_Type ==CHANNEL_B) ) )
 8009484:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009488:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800948c:	799b      	ldrb	r3, [r3, #6]
 800948e:	2baa      	cmp	r3, #170	; 0xaa
 8009490:	d010      	beq.n	80094b4 <Medha_EI_Analyser+0x218>
 8009492:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009496:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800949a:	799b      	ldrb	r3, [r3, #6]
 800949c:	2bbb      	cmp	r3, #187	; 0xbb
 800949e:	d009      	beq.n	80094b4 <Medha_EI_Analyser+0x218>
		{
			printf("Received from Unknown Channel:%02X - Packet Rejected\n",Medha_EI_Temp_Rx_st.Channel_Type);
 80094a0:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80094a4:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80094a8:	799b      	ldrb	r3, [r3, #6]
 80094aa:	4619      	mov	r1, r3
 80094ac:	4858      	ldr	r0, [pc, #352]	; (8009610 <Medha_EI_Analyser+0x374>)
 80094ae:	f019 f879 	bl	80225a4 <iprintf>
			return;
 80094b2:	e323      	b.n	8009afc <Medha_EI_Analyser+0x860>
		}
		BYTEINC(1);
 80094b4:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80094b8:	3301      	adds	r3, #1
 80094ba:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8


		memcpy(&Medha_EI_Temp_Rx_st.Control_Byte,&EI_Buffer[ucByte],1);
 80094be:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80094c2:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 80094c6:	4413      	add	r3, r2
 80094c8:	781a      	ldrb	r2, [r3, #0]
 80094ca:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80094ce:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80094d2:	71da      	strb	r2, [r3, #7]
			printf("Injected Control_Byte:%02X\n",Medha_EI_Temp_Rx_st.Control_Byte);
		}

#endif

		if( Medha_EI_Temp_Rx_st.Control_Byte != CONTROL_BYTE_RX )
 80094d4:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80094d8:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80094dc:	79db      	ldrb	r3, [r3, #7]
 80094de:	2be1      	cmp	r3, #225	; 0xe1
 80094e0:	d009      	beq.n	80094f6 <Medha_EI_Analyser+0x25a>
		{
			printf("Received Unknown ControlByte:%02X - Packet Rejected\n",Medha_EI_Temp_Rx_st.Control_Byte);
 80094e2:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80094e6:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80094ea:	79db      	ldrb	r3, [r3, #7]
 80094ec:	4619      	mov	r1, r3
 80094ee:	4849      	ldr	r0, [pc, #292]	; (8009614 <Medha_EI_Analyser+0x378>)
 80094f0:	f019 f858 	bl	80225a4 <iprintf>
			return;
 80094f4:	e302      	b.n	8009afc <Medha_EI_Analyser+0x860>
		}

		BYTEINC(1);
 80094f6:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80094fa:	3301      	adds	r3, #1
 80094fc:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8


		memcpy(&Medha_EI_Temp_Rx_st.Length,&EI_Buffer[ucByte],2);
 8009500:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009504:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8009508:	4413      	add	r3, r2
 800950a:	881b      	ldrh	r3, [r3, #0]
 800950c:	b29a      	uxth	r2, r3
 800950e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009512:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009516:	811a      	strh	r2, [r3, #8]
		BYTEINC(2);
 8009518:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800951c:	3302      	adds	r3, #2
 800951e:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Packet_Number,&EI_Buffer[ucByte],1);
 8009522:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009526:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800952a:	4413      	add	r3, r2
 800952c:	781a      	ldrb	r2, [r3, #0]
 800952e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009532:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009536:	729a      	strb	r2, [r3, #10]
		BYTEINC(1);
 8009538:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800953c:	3301      	adds	r3, #1
 800953e:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Reserved1,&EI_Buffer[ucByte],7);
 8009542:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009546:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800954a:	441a      	add	r2, r3
 800954c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009550:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009554:	330b      	adds	r3, #11
 8009556:	6811      	ldr	r1, [r2, #0]
 8009558:	6019      	str	r1, [r3, #0]
 800955a:	8891      	ldrh	r1, [r2, #4]
 800955c:	7992      	ldrb	r2, [r2, #6]
 800955e:	8099      	strh	r1, [r3, #4]
 8009560:	719a      	strb	r2, [r3, #6]
		BYTEINC(7);
 8009562:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009566:	3307      	adds	r3, #7
 8009568:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Health_Status,&EI_Buffer[ucByte],1);
 800956c:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009570:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8009574:	4413      	add	r3, r2
 8009576:	781a      	ldrb	r2, [r3, #0]
 8009578:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800957c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009580:	749a      	strb	r2, [r3, #18]
			printf("Injected Health_Status:%02X\n",Medha_EI_Temp_Rx_st.Health_Status);
		}

#endif

		if(Medha_EI_Temp_Rx_st.Health_Status != HEALTH_OK)
 8009582:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009586:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800958a:	7c9b      	ldrb	r3, [r3, #18]
 800958c:	2b11      	cmp	r3, #17
 800958e:	d009      	beq.n	80095a4 <Medha_EI_Analyser+0x308>
		{
			printf("MEDHA-EI HEALTH \"NOT-OK\"... \nReceived Health:%02x\nPacket Rejected.\n",Medha_EI_Temp_Rx_st.Health_Status);
 8009590:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009594:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009598:	7c9b      	ldrb	r3, [r3, #18]
 800959a:	4619      	mov	r1, r3
 800959c:	481e      	ldr	r0, [pc, #120]	; (8009618 <Medha_EI_Analyser+0x37c>)
 800959e:	f019 f801 	bl	80225a4 <iprintf>
			return;
 80095a2:	e2ab      	b.n	8009afc <Medha_EI_Analyser+0x860>
		}

		BYTEINC(1);
 80095a4:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80095a8:	3301      	adds	r3, #1
 80095aa:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		VitalCrcStartLoc = ucByte;
 80095ae:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80095b2:	f8a7 32d4 	strh.w	r3, [r7, #724]	; 0x2d4
		memcpy(&Medha_EI_Temp_Rx_st.NoofRelays,&EI_Buffer[ucByte],2);
 80095b6:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80095ba:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 80095be:	4413      	add	r3, r2
 80095c0:	881b      	ldrh	r3, [r3, #0]
 80095c2:	b29a      	uxth	r2, r3
 80095c4:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80095c8:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80095cc:	829a      	strh	r2, [r3, #20]
			printf("Injected NoofRelays:%u\n",Medha_EI_Temp_Rx_st.NoofRelays);
		}

#endif

		if(Medha_EI_Temp_Rx_st.NoofRelays>1024)
 80095ce:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80095d2:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80095d6:	8a9b      	ldrh	r3, [r3, #20]
 80095d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095dc:	d920      	bls.n	8009620 <Medha_EI_Analyser+0x384>
		{
			printf("No of Relays Exceeding 1024 Inputs\nNo of Relays Received:%u\nSo Packet Rejected\n",Medha_EI_Temp_Rx_st.NoofRelays);
 80095de:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80095e2:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80095e6:	8a9b      	ldrh	r3, [r3, #20]
 80095e8:	4619      	mov	r1, r3
 80095ea:	480c      	ldr	r0, [pc, #48]	; (800961c <Medha_EI_Analyser+0x380>)
 80095ec:	f018 ffda 	bl	80225a4 <iprintf>
			return;
 80095f0:	e284      	b.n	8009afc <Medha_EI_Analyser+0x860>
 80095f2:	bf00      	nop
 80095f4:	20000304 	.word	0x20000304
 80095f8:	0802527c 	.word	0x0802527c
 80095fc:	cccccccd 	.word	0xcccccccd
 8009600:	08025288 	.word	0x08025288
 8009604:	08025290 	.word	0x08025290
 8009608:	080252c4 	.word	0x080252c4
 800960c:	080252e8 	.word	0x080252e8
 8009610:	08025318 	.word	0x08025318
 8009614:	08025350 	.word	0x08025350
 8009618:	08025388 	.word	0x08025388
 800961c:	080253cc 	.word	0x080253cc
		}

		if(Medha_EI_Temp_Rx_st.NoofRelays != EI_data.Medha_Prms_st.NoofRelays)
 8009620:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009624:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009628:	8a9a      	ldrh	r2, [r3, #20]
 800962a:	4ba6      	ldr	r3, [pc, #664]	; (80098c4 <Medha_EI_Analyser+0x628>)
 800962c:	f8b3 3328 	ldrh.w	r3, [r3, #808]	; 0x328
 8009630:	429a      	cmp	r2, r3
 8009632:	d014      	beq.n	800965e <Medha_EI_Analyser+0x3c2>
		{
			printf("No of Relays Not Matching...\nConfigured:%u - Received:%u\n",EI_data.Medha_Prms_st.NoofRelays,Medha_EI_Temp_Rx_st.NoofRelays);
 8009634:	4ba3      	ldr	r3, [pc, #652]	; (80098c4 <Medha_EI_Analyser+0x628>)
 8009636:	f8b3 3328 	ldrh.w	r3, [r3, #808]	; 0x328
 800963a:	4619      	mov	r1, r3
 800963c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009640:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009644:	8a9b      	ldrh	r3, [r3, #20]
 8009646:	461a      	mov	r2, r3
 8009648:	489f      	ldr	r0, [pc, #636]	; (80098c8 <Medha_EI_Analyser+0x62c>)
 800964a:	f018 ffab 	bl	80225a4 <iprintf>

			if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 800964e:	499f      	ldr	r1, [pc, #636]	; (80098cc <Medha_EI_Analyser+0x630>)
 8009650:	489f      	ldr	r0, [pc, #636]	; (80098d0 <Medha_EI_Analyser+0x634>)
 8009652:	f7f6 fdf5 	bl	8000240 <strcmp>
 8009656:	4603      	mov	r3, r0
 8009658:	2b00      	cmp	r3, #0
 800965a:	f000 824e 	beq.w	8009afa <Medha_EI_Analyser+0x85e>
			{
				return;
			}
		}

		BYTEINC(2);
 800965e:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009662:	3302      	adds	r3, #2
 8009664:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		/*		printf("MedhaEI_Rx_Temp_Pkt_st.NoofRelays:%u\n",MedhaEI_Rx_Temp_Pkt_st.NoofRelays); */

		NoOfInputs = (Medha_EI_Temp_Rx_st.NoofRelays % 8);
 8009668:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800966c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009670:	8a9b      	ldrh	r3, [r3, #20]
 8009672:	f003 0307 	and.w	r3, r3, #7
 8009676:	f8a7 32de 	strh.w	r3, [r7, #734]	; 0x2de
		if (NoOfInputs != 0)
 800967a:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800967e:	2b00      	cmp	r3, #0
 8009680:	d00a      	beq.n	8009698 <Medha_EI_Analyser+0x3fc>
		{
			NoOfInputs = ((Medha_EI_Temp_Rx_st.NoofRelays / 8)) + 1; //	including 0th buffer
 8009682:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009686:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800968a:	8a9b      	ldrh	r3, [r3, #20]
 800968c:	08db      	lsrs	r3, r3, #3
 800968e:	b29b      	uxth	r3, r3
 8009690:	3301      	adds	r3, #1
 8009692:	f8a7 32de 	strh.w	r3, [r7, #734]	; 0x2de
 8009696:	e007      	b.n	80096a8 <Medha_EI_Analyser+0x40c>
		}
		else
		{
			NoOfInputs = (Medha_EI_Temp_Rx_st.NoofRelays / 8);
 8009698:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800969c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80096a0:	8a9b      	ldrh	r3, [r3, #20]
 80096a2:	08db      	lsrs	r3, r3, #3
 80096a4:	f8a7 32de 	strh.w	r3, [r7, #734]	; 0x2de
		}

		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 80096a8:	2300      	movs	r3, #0
 80096aa:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 80096ae:	e02a      	b.n	8009706 <Medha_EI_Analyser+0x46a>
		{
			Medha_EI_Temp_Rx_st.RelayStatus[Traverser] = EI_Buffer[ucByte];
 80096b0:	f8b7 22d8 	ldrh.w	r2, [r7, #728]	; 0x2d8
 80096b4:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 80096b8:	f507 7138 	add.w	r1, r7, #736	; 0x2e0
 80096bc:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 80096c0:	5c89      	ldrb	r1, [r1, r2]
 80096c2:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 80096c6:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 80096ca:	4413      	add	r3, r2
 80096cc:	460a      	mov	r2, r1
 80096ce:	759a      	strb	r2, [r3, #22]
			TempCompliment[Traverser] = ~(Medha_EI_Temp_Rx_st.RelayStatus[Traverser]);
 80096d0:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 80096d4:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 80096d8:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 80096dc:	4413      	add	r3, r2
 80096de:	7d9a      	ldrb	r2, [r3, #22]
 80096e0:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 80096e4:	43d2      	mvns	r2, r2
 80096e6:	b2d1      	uxtb	r1, r2
 80096e8:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 80096ec:	f5a2 72de 	sub.w	r2, r2, #444	; 0x1bc
 80096f0:	54d1      	strb	r1, [r2, r3]
			BYTEINC(1);
 80096f2:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80096f6:	3301      	adds	r3, #1
 80096f8:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 80096fc:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009700:	3301      	adds	r3, #1
 8009702:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009706:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 800970a:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800970e:	429a      	cmp	r2, r3
 8009710:	d3ce      	bcc.n	80096b0 <Medha_EI_Analyser+0x414>
		 * printf("\n");
		 * printf("Compliement Data\n");
		 *
		 */

		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 8009712:	2300      	movs	r3, #0
 8009714:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009718:	e01a      	b.n	8009750 <Medha_EI_Analyser+0x4b4>
		{
			Medha_EI_Temp_Rx_st.Comp_RelayStatus[Traverser] = EI_Buffer[ucByte];
 800971a:	f8b7 22d8 	ldrh.w	r2, [r7, #728]	; 0x2d8
 800971e:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009722:	f507 7138 	add.w	r1, r7, #736	; 0x2e0
 8009726:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 800972a:	5c89      	ldrb	r1, [r1, r2]
 800972c:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 8009730:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 8009734:	4413      	add	r3, r2
 8009736:	460a      	mov	r2, r1
 8009738:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
			BYTEINC(1);
 800973c:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009740:	3301      	adds	r3, #1
 8009742:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 8009746:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800974a:	3301      	adds	r3, #1
 800974c:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009750:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 8009754:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009758:	429a      	cmp	r2, r3
 800975a:	d3de      	bcc.n	800971a <Medha_EI_Analyser+0x47e>
			printf("Injected Received Compliment value:%02X\n",Medha_EI_Temp_Rx_st.Comp_RelayStatus[Index]);
		}

#endif

		if(memcmp(Medha_EI_Temp_Rx_st.Comp_RelayStatus,TempCompliment,NoOfInputs) != 0)
 800975c:	f8b7 22de 	ldrh.w	r2, [r7, #734]	; 0x2de
 8009760:	f507 7192 	add.w	r1, r7, #292	; 0x124
 8009764:	463b      	mov	r3, r7
 8009766:	3396      	adds	r3, #150	; 0x96
 8009768:	4618      	mov	r0, r3
 800976a:	f018 fdfb 	bl	8022364 <memcmp>
 800976e:	4603      	mov	r3, r0
 8009770:	2b00      	cmp	r3, #0
 8009772:	d03f      	beq.n	80097f4 <Medha_EI_Analyser+0x558>
		{
			printf("Relay Data Compliment Verification Failed\nReceived Relay Compliment Status:\n");
 8009774:	4857      	ldr	r0, [pc, #348]	; (80098d4 <Medha_EI_Analyser+0x638>)
 8009776:	f018 ffb1 	bl	80226dc <puts>
			for(Traverser = 0;Traverser<NoOfInputs;++Traverser)
 800977a:	2300      	movs	r3, #0
 800977c:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009780:	e011      	b.n	80097a6 <Medha_EI_Analyser+0x50a>
			{
				printf("%02X ",Medha_EI_Temp_Rx_st.Comp_RelayStatus[Traverser]);
 8009782:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009786:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 800978a:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 800978e:	4413      	add	r3, r2
 8009790:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8009794:	4619      	mov	r1, r3
 8009796:	4850      	ldr	r0, [pc, #320]	; (80098d8 <Medha_EI_Analyser+0x63c>)
 8009798:	f018 ff04 	bl	80225a4 <iprintf>
			for(Traverser = 0;Traverser<NoOfInputs;++Traverser)
 800979c:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 80097a0:	3301      	adds	r3, #1
 80097a2:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 80097a6:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 80097aa:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 80097ae:	429a      	cmp	r2, r3
 80097b0:	d3e7      	bcc.n	8009782 <Medha_EI_Analyser+0x4e6>
			}

			printf("\nExpected Compliment Relay Status:\n");
 80097b2:	484a      	ldr	r0, [pc, #296]	; (80098dc <Medha_EI_Analyser+0x640>)
 80097b4:	f018 ff92 	bl	80226dc <puts>

			for(Traverser = 0;Traverser<NoOfInputs;++Traverser)
 80097b8:	2300      	movs	r3, #0
 80097ba:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 80097be:	e00f      	b.n	80097e0 <Medha_EI_Analyser+0x544>
			{
				printf("%02X ",TempCompliment[Traverser]);
 80097c0:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 80097c4:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 80097c8:	f5a2 72de 	sub.w	r2, r2, #444	; 0x1bc
 80097cc:	5cd3      	ldrb	r3, [r2, r3]
 80097ce:	4619      	mov	r1, r3
 80097d0:	4841      	ldr	r0, [pc, #260]	; (80098d8 <Medha_EI_Analyser+0x63c>)
 80097d2:	f018 fee7 	bl	80225a4 <iprintf>
			for(Traverser = 0;Traverser<NoOfInputs;++Traverser)
 80097d6:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 80097da:	3301      	adds	r3, #1
 80097dc:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 80097e0:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 80097e4:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 80097e8:	429a      	cmp	r2, r3
 80097ea:	d3e9      	bcc.n	80097c0 <Medha_EI_Analyser+0x524>
			}

			printf("\nPACKET Rejected\n");
 80097ec:	483c      	ldr	r0, [pc, #240]	; (80098e0 <Medha_EI_Analyser+0x644>)
 80097ee:	f018 ff75 	bl	80226dc <puts>
			return;
 80097f2:	e183      	b.n	8009afc <Medha_EI_Analyser+0x860>
		}


		CalcVitalCrc = GetCRC32(VitalCrcStartLoc, EI_Buffer, ucByte);
 80097f4:	f8b7 22d8 	ldrh.w	r2, [r7, #728]	; 0x2d8
 80097f8:	f507 71d2 	add.w	r1, r7, #420	; 0x1a4
 80097fc:	f8b7 32d4 	ldrh.w	r3, [r7, #724]	; 0x2d4
 8009800:	4618      	mov	r0, r3
 8009802:	f001 f8d7 	bl	800a9b4 <GetCRC32>
 8009806:	f8c7 02d0 	str.w	r0, [r7, #720]	; 0x2d0
		memcpy(&Medha_EI_Temp_Rx_st.Vital_CRC, &EI_Buffer[ucByte],4);
 800980a:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800980e:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8009812:	4413      	add	r3, r2
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	461a      	mov	r2, r3
 8009818:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800981c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009820:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

#endif



		if(CalcVitalCrc != Medha_EI_Temp_Rx_st.Vital_CRC)
 8009824:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009828:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800982c:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8009830:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 8009834:	429a      	cmp	r2, r3
 8009836:	d00c      	beq.n	8009852 <Medha_EI_Analyser+0x5b6>
		{
			printf("Vital CRC Failed....\nCalc:0X%08lX|Recv:0X%08lX\nPacket Rejected\n",CalcVitalCrc,Medha_EI_Temp_Rx_st.Vital_CRC);
 8009838:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800983c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009840:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8009844:	461a      	mov	r2, r3
 8009846:	f8d7 12d0 	ldr.w	r1, [r7, #720]	; 0x2d0
 800984a:	4826      	ldr	r0, [pc, #152]	; (80098e4 <Medha_EI_Analyser+0x648>)
 800984c:	f018 feaa 	bl	80225a4 <iprintf>
			return;
 8009850:	e154      	b.n	8009afc <Medha_EI_Analyser+0x860>
		}
		BYTEINC(4);
 8009852:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009856:	3304      	adds	r3, #4
 8009858:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Reserved2, &EI_Buffer[ucByte],2);
 800985c:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009860:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8009864:	4413      	add	r3, r2
 8009866:	881b      	ldrh	r3, [r3, #0]
 8009868:	b29a      	uxth	r2, r3
 800986a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800986e:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009872:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
		BYTEINC(2);
 8009876:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800987a:	3302      	adds	r3, #2
 800987c:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		/* ******************************************************* PROCESS VALID PACKET STEPS ↓ ******************************************************* */

		//printf("\n                     ELAPSED_TICKS:%lu\n",HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk));
		Medha_Fault_Handler_st.Pkt_Rcv_clk = HAL_GetTick();
 8009880:	f00b fe86 	bl	8015590 <HAL_GetTick>
 8009884:	4603      	mov	r3, r0
 8009886:	4a18      	ldr	r2, [pc, #96]	; (80098e8 <Medha_EI_Analyser+0x64c>)
 8009888:	6053      	str	r3, [r2, #4]
		memcpy(&Medha_EI_Rx_Pkt_st,&Medha_EI_Temp_Rx_st,sizeof(MEDHA_EI_PKT_t));
 800988a:	4a18      	ldr	r2, [pc, #96]	; (80098ec <Medha_EI_Analyser+0x650>)
 800988c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009890:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009894:	4610      	mov	r0, r2
 8009896:	4619      	mov	r1, r3
 8009898:	f44f 7392 	mov.w	r3, #292	; 0x124
 800989c:	461a      	mov	r2, r3
 800989e:	f018 fd71 	bl	8022384 <memcpy>

		Medha_ei_self_sharing_TX_st.Receiving_Status = RECEIVED;
 80098a2:	4b13      	ldr	r3, [pc, #76]	; (80098f0 <Medha_EI_Analyser+0x654>)
 80098a4:	2201      	movs	r2, #1
 80098a6:	701a      	strb	r2, [r3, #0]
		Medha_ei_self_sharing_TX_st.Vital_CRC = Medha_EI_Rx_Pkt_st.Vital_CRC;
 80098a8:	4b10      	ldr	r3, [pc, #64]	; (80098ec <Medha_EI_Analyser+0x650>)
 80098aa:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80098ae:	4a10      	ldr	r2, [pc, #64]	; (80098f0 <Medha_EI_Analyser+0x654>)
 80098b0:	6053      	str	r3, [r2, #4]

		Send_Medha_EI_Reply(NoOfInputs); /* TO ACKNOWLEDGE THE PACKET */
 80098b2:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 80098b6:	4618      	mov	r0, r3
 80098b8:	f000 f950 	bl	8009b5c <Send_Medha_EI_Reply>


		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 80098bc:	2300      	movs	r3, #0
 80098be:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 80098c2:	e028      	b.n	8009916 <Medha_EI_Analyser+0x67a>
 80098c4:	20000304 	.word	0x20000304
 80098c8:	0802541c 	.word	0x0802541c
 80098cc:	08025458 	.word	0x08025458
 80098d0:	20000305 	.word	0x20000305
 80098d4:	08025464 	.word	0x08025464
 80098d8:	08025288 	.word	0x08025288
 80098dc:	080254b0 	.word	0x080254b0
 80098e0:	080254d4 	.word	0x080254d4
 80098e4:	080254e8 	.word	0x080254e8
 80098e8:	20002604 	.word	0x20002604
 80098ec:	200024b0 	.word	0x200024b0
 80098f0:	20002614 	.word	0x20002614
		{
			//Medha_Cur_Relay_Status_st.Relay_Status[Traverser] = ROTATE_BYTE(Medha_EI_Temp_Rx_st.RelayStatus[Traverser]);
			Medha_Cur_Relay_Status_st.Relay_Status[Traverser] = (Medha_EI_Temp_Rx_st.RelayStatus[Traverser]);
 80098f4:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 80098f8:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 80098fc:	f507 7138 	add.w	r1, r7, #736	; 0x2e0
 8009900:	f5a1 7138 	sub.w	r1, r1, #736	; 0x2e0
 8009904:	440a      	add	r2, r1
 8009906:	7d91      	ldrb	r1, [r2, #22]
 8009908:	4a7e      	ldr	r2, [pc, #504]	; (8009b04 <Medha_EI_Analyser+0x868>)
 800990a:	54d1      	strb	r1, [r2, r3]
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 800990c:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009910:	3301      	adds	r3, #1
 8009912:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009916:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 800991a:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800991e:	429a      	cmp	r2, r3
 8009920:	d3e8      	bcc.n	80098f4 <Medha_EI_Analyser+0x658>
		}
		Medha_Cur_Relay_Status_st.Vital_CRC = Medha_EI_Rx_Pkt_st.Vital_CRC;
 8009922:	4b79      	ldr	r3, [pc, #484]	; (8009b08 <Medha_EI_Analyser+0x86c>)
 8009924:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8009928:	4a76      	ldr	r2, [pc, #472]	; (8009b04 <Medha_EI_Analyser+0x868>)
 800992a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

		if(memcmp(Medha_Temp_relay_sts_t.Relay_Status,Medha_Cur_Relay_Status_st.Relay_Status,NoOfInputs)!=0)
 800992e:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009932:	461a      	mov	r2, r3
 8009934:	4973      	ldr	r1, [pc, #460]	; (8009b04 <Medha_EI_Analyser+0x868>)
 8009936:	4875      	ldr	r0, [pc, #468]	; (8009b0c <Medha_EI_Analyser+0x870>)
 8009938:	f018 fd14 	bl	8022364 <memcmp>
 800993c:	4603      	mov	r3, r0
 800993e:	2b00      	cmp	r3, #0
 8009940:	d02c      	beq.n	800999c <Medha_EI_Analyser+0x700>
		{
			memcpy(&Medha_Temp_relay_sts_t.Relay_Status,&Medha_Cur_Relay_Status_st.Relay_Status,NoOfInputs);
 8009942:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009946:	461a      	mov	r2, r3
 8009948:	496e      	ldr	r1, [pc, #440]	; (8009b04 <Medha_EI_Analyser+0x868>)
 800994a:	4870      	ldr	r0, [pc, #448]	; (8009b0c <Medha_EI_Analyser+0x870>)
 800994c:	f018 fd1a 	bl	8022384 <memcpy>
			Medha_Temp_relay_sts_t.Vital_CRC = Medha_Cur_Relay_Status_st.Vital_CRC;
 8009950:	4b6c      	ldr	r3, [pc, #432]	; (8009b04 <Medha_EI_Analyser+0x868>)
 8009952:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009956:	4a6d      	ldr	r2, [pc, #436]	; (8009b0c <Medha_EI_Analyser+0x870>)
 8009958:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

			memset(&Medha_Relay_Sts_st.Relay_Sts,0,sizeof(MEDHA_RELAY_STS_t));
 800995c:	2230      	movs	r2, #48	; 0x30
 800995e:	2100      	movs	r1, #0
 8009960:	486b      	ldr	r0, [pc, #428]	; (8009b10 <Medha_EI_Analyser+0x874>)
 8009962:	f018 fd37 	bl	80223d4 <memset>
			//InsertBits(0, 16, &Medha_Relay_Sts_st.Relay_Sts[0], Medha_Prms_st.NoofRelays);
			memcpy(&Medha_Relay_Sts_st.Relay_Sts,Medha_Cur_Relay_Status_st.Relay_Status,NoOfInputs);
 8009966:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800996a:	461a      	mov	r2, r3
 800996c:	4965      	ldr	r1, [pc, #404]	; (8009b04 <Medha_EI_Analyser+0x868>)
 800996e:	4868      	ldr	r0, [pc, #416]	; (8009b10 <Medha_EI_Analyser+0x874>)
 8009970:	f018 fd08 	bl	8022384 <memcpy>
#ifdef EI_1
			TransmitCanPkt(EI_PROCESS_DATA);
#endif
			Medha_Fault_Handler_st.Relay_sending_clk = HAL_GetTick();
 8009974:	f00b fe0c 	bl	8015590 <HAL_GetTick>
 8009978:	4603      	mov	r3, r0
 800997a:	4a66      	ldr	r2, [pc, #408]	; (8009b14 <Medha_EI_Analyser+0x878>)
 800997c:	6093      	str	r3, [r2, #8]

			printf("CAN Packet sent to MIE\n");
 800997e:	4866      	ldr	r0, [pc, #408]	; (8009b18 <Medha_EI_Analyser+0x87c>)
 8009980:	f018 feac 	bl	80226dc <puts>

#ifdef EI_1
			TransmitCanPkt(EI_1_SELF_SHARING);
#endif
#ifdef EI_2
			TransmitCanPkt(EI_2_SELF_SHARING);
 8009984:	f240 2002 	movw	r0, #514	; 0x202
 8009988:	f005 fdd2 	bl	800f530 <TransmitCanPkt>
#endif

			if(Medha_ei_self_sharing_RX_st.Vital_CRC == 0)
 800998c:	4b63      	ldr	r3, [pc, #396]	; (8009b1c <Medha_EI_Analyser+0x880>)
 800998e:	685b      	ldr	r3, [r3, #4]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d103      	bne.n	800999c <Medha_EI_Analyser+0x700>
			{
#ifdef EI_1
				TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
#endif
#ifdef EI_2
				TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
 8009994:	f44f 7002 	mov.w	r0, #520	; 0x208
 8009998:	f005 fdca 	bl	800f530 <TransmitCanPkt>
#endif
			}

		}

		printf("\n__________ RCV MSG DETAILS __________\n");
 800999c:	4860      	ldr	r0, [pc, #384]	; (8009b20 <Medha_EI_Analyser+0x884>)
 800999e:	f018 fe9d 	bl	80226dc <puts>
		printf("DA:%5u|",Medha_EI_Temp_Rx_st.Dest_Addr);
 80099a2:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80099a6:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80099aa:	889b      	ldrh	r3, [r3, #4]
 80099ac:	4619      	mov	r1, r3
 80099ae:	485d      	ldr	r0, [pc, #372]	; (8009b24 <Medha_EI_Analyser+0x888>)
 80099b0:	f018 fdf8 	bl	80225a4 <iprintf>
		printf("SA:%5u|",Medha_EI_Temp_Rx_st.Source_Addr);
 80099b4:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80099b8:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80099bc:	885b      	ldrh	r3, [r3, #2]
 80099be:	4619      	mov	r1, r3
 80099c0:	4859      	ldr	r0, [pc, #356]	; (8009b28 <Medha_EI_Analyser+0x88c>)
 80099c2:	f018 fdef 	bl	80225a4 <iprintf>
		printf("CT:%02X|",Medha_EI_Temp_Rx_st.Channel_Type);
 80099c6:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80099ca:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80099ce:	799b      	ldrb	r3, [r3, #6]
 80099d0:	4619      	mov	r1, r3
 80099d2:	4856      	ldr	r0, [pc, #344]	; (8009b2c <Medha_EI_Analyser+0x890>)
 80099d4:	f018 fde6 	bl	80225a4 <iprintf>
		printf("CB:%02X|",Medha_EI_Temp_Rx_st.Control_Byte);
 80099d8:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80099dc:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80099e0:	79db      	ldrb	r3, [r3, #7]
 80099e2:	4619      	mov	r1, r3
 80099e4:	4852      	ldr	r0, [pc, #328]	; (8009b30 <Medha_EI_Analyser+0x894>)
 80099e6:	f018 fddd 	bl	80225a4 <iprintf>
		printf("L :%5u|",Medha_EI_Temp_Rx_st.Length);
 80099ea:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80099ee:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80099f2:	891b      	ldrh	r3, [r3, #8]
 80099f4:	4619      	mov	r1, r3
 80099f6:	484f      	ldr	r0, [pc, #316]	; (8009b34 <Medha_EI_Analyser+0x898>)
 80099f8:	f018 fdd4 	bl	80225a4 <iprintf>
		printf("PN:%3u|",Medha_EI_Temp_Rx_st.Packet_Number);
 80099fc:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009a00:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009a04:	7a9b      	ldrb	r3, [r3, #10]
 8009a06:	4619      	mov	r1, r3
 8009a08:	484b      	ldr	r0, [pc, #300]	; (8009b38 <Medha_EI_Analyser+0x89c>)
 8009a0a:	f018 fdcb 	bl	80225a4 <iprintf>
		printf("TS:%02x:%02x:%02x|%02x/%02x/%02x|",Medha_EI_Temp_Rx_st.Reserved1[3],Medha_EI_Temp_Rx_st.Reserved1[2],Medha_EI_Temp_Rx_st.Reserved1[1],Medha_EI_Temp_Rx_st.Reserved1[4],Medha_EI_Temp_Rx_st.Reserved1[5],Medha_EI_Temp_Rx_st.Reserved1[6]);
 8009a0e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009a12:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009a16:	7b9b      	ldrb	r3, [r3, #14]
 8009a18:	4618      	mov	r0, r3
 8009a1a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009a1e:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009a22:	7b5b      	ldrb	r3, [r3, #13]
 8009a24:	461c      	mov	r4, r3
 8009a26:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009a2a:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009a2e:	7b1b      	ldrb	r3, [r3, #12]
 8009a30:	461d      	mov	r5, r3
 8009a32:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009a36:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009a3a:	7bdb      	ldrb	r3, [r3, #15]
 8009a3c:	461a      	mov	r2, r3
 8009a3e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009a42:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009a46:	7c1b      	ldrb	r3, [r3, #16]
 8009a48:	4619      	mov	r1, r3
 8009a4a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009a4e:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009a52:	7c5b      	ldrb	r3, [r3, #17]
 8009a54:	9302      	str	r3, [sp, #8]
 8009a56:	9101      	str	r1, [sp, #4]
 8009a58:	9200      	str	r2, [sp, #0]
 8009a5a:	462b      	mov	r3, r5
 8009a5c:	4622      	mov	r2, r4
 8009a5e:	4601      	mov	r1, r0
 8009a60:	4836      	ldr	r0, [pc, #216]	; (8009b3c <Medha_EI_Analyser+0x8a0>)
 8009a62:	f018 fd9f 	bl	80225a4 <iprintf>
		printf("HS:%02X|",Medha_EI_Temp_Rx_st.Health_Status);
 8009a66:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009a6a:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009a6e:	7c9b      	ldrb	r3, [r3, #18]
 8009a70:	4619      	mov	r1, r3
 8009a72:	4833      	ldr	r0, [pc, #204]	; (8009b40 <Medha_EI_Analyser+0x8a4>)
 8009a74:	f018 fd96 	bl	80225a4 <iprintf>
		printf("RC:%5u\n",Medha_EI_Temp_Rx_st.NoofRelays);
 8009a78:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009a7c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009a80:	8a9b      	ldrh	r3, [r3, #20]
 8009a82:	4619      	mov	r1, r3
 8009a84:	482f      	ldr	r0, [pc, #188]	; (8009b44 <Medha_EI_Analyser+0x8a8>)
 8009a86:	f018 fd8d 	bl	80225a4 <iprintf>
		printf("SIGNAL DATA       :");
 8009a8a:	482f      	ldr	r0, [pc, #188]	; (8009b48 <Medha_EI_Analyser+0x8ac>)
 8009a8c:	f018 fd8a 	bl	80225a4 <iprintf>
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 8009a90:	2300      	movs	r3, #0
 8009a92:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009a96:	e021      	b.n	8009adc <Medha_EI_Analyser+0x840>
		{
			if((Traverser!=0) && ((Traverser%10)==0))
 8009a98:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d010      	beq.n	8009ac2 <Medha_EI_Analyser+0x826>
 8009aa0:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 8009aa4:	4b29      	ldr	r3, [pc, #164]	; (8009b4c <Medha_EI_Analyser+0x8b0>)
 8009aa6:	fba3 1302 	umull	r1, r3, r3, r2
 8009aaa:	08d9      	lsrs	r1, r3, #3
 8009aac:	460b      	mov	r3, r1
 8009aae:	009b      	lsls	r3, r3, #2
 8009ab0:	440b      	add	r3, r1
 8009ab2:	005b      	lsls	r3, r3, #1
 8009ab4:	1ad3      	subs	r3, r2, r3
 8009ab6:	b29b      	uxth	r3, r3
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d102      	bne.n	8009ac2 <Medha_EI_Analyser+0x826>
			{
				printf("\n                   ");
 8009abc:	4824      	ldr	r0, [pc, #144]	; (8009b50 <Medha_EI_Analyser+0x8b4>)
 8009abe:	f018 fd71 	bl	80225a4 <iprintf>
			}
			printf("%02X ",Medha_Cur_Relay_Status_st.Relay_Status[Traverser]);
 8009ac2:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009ac6:	4a0f      	ldr	r2, [pc, #60]	; (8009b04 <Medha_EI_Analyser+0x868>)
 8009ac8:	5cd3      	ldrb	r3, [r2, r3]
 8009aca:	4619      	mov	r1, r3
 8009acc:	4821      	ldr	r0, [pc, #132]	; (8009b54 <Medha_EI_Analyser+0x8b8>)
 8009ace:	f018 fd69 	bl	80225a4 <iprintf>
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 8009ad2:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009ad6:	3301      	adds	r3, #1
 8009ad8:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009adc:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 8009ae0:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009ae4:	429a      	cmp	r2, r3
 8009ae6:	d3d7      	bcc.n	8009a98 <Medha_EI_Analyser+0x7fc>
		}
		printf("\n");
 8009ae8:	200a      	movs	r0, #10
 8009aea:	f018 fd73 	bl	80225d4 <putchar>
		printf("__________ RCV MSG DETAILS __________\n");
 8009aee:	481a      	ldr	r0, [pc, #104]	; (8009b58 <Medha_EI_Analyser+0x8bc>)
 8009af0:	f018 fdf4 	bl	80226dc <puts>
		return;
 8009af4:	e002      	b.n	8009afc <Medha_EI_Analyser+0x860>
	}
	else
	{
		return;
 8009af6:	bf00      	nop
 8009af8:	e000      	b.n	8009afc <Medha_EI_Analyser+0x860>
				return;
 8009afa:	bf00      	nop
	}
}
 8009afc:	f507 7738 	add.w	r7, r7, #736	; 0x2e0
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bdb0      	pop	{r4, r5, r7, pc}
 8009b04:	2000262c 	.word	0x2000262c
 8009b08:	200024b0 	.word	0x200024b0
 8009b0c:	20002734 	.word	0x20002734
 8009b10:	200025d4 	.word	0x200025d4
 8009b14:	20002604 	.word	0x20002604
 8009b18:	08025528 	.word	0x08025528
 8009b1c:	2000261c 	.word	0x2000261c
 8009b20:	08025540 	.word	0x08025540
 8009b24:	08025568 	.word	0x08025568
 8009b28:	08025570 	.word	0x08025570
 8009b2c:	08025578 	.word	0x08025578
 8009b30:	08025584 	.word	0x08025584
 8009b34:	08025590 	.word	0x08025590
 8009b38:	08025598 	.word	0x08025598
 8009b3c:	080255a0 	.word	0x080255a0
 8009b40:	080255c4 	.word	0x080255c4
 8009b44:	080255d0 	.word	0x080255d0
 8009b48:	080255d8 	.word	0x080255d8
 8009b4c:	cccccccd 	.word	0xcccccccd
 8009b50:	080255ec 	.word	0x080255ec
 8009b54:	08025288 	.word	0x08025288
 8009b58:	08025604 	.word	0x08025604

08009b5c <Send_Medha_EI_Reply>:

void Send_Medha_EI_Reply(uint16_t Outputs)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b0d2      	sub	sp, #328	; 0x148
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	4602      	mov	r2, r0
 8009b64:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009b68:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 8009b6c:	801a      	strh	r2, [r3, #0]
	uint8_t Transmit_Buff[300] = {0,};
 8009b6e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009b72:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8009b76:	2200      	movs	r2, #0
 8009b78:	601a      	str	r2, [r3, #0]
 8009b7a:	3304      	adds	r3, #4
 8009b7c:	f44f 7294 	mov.w	r2, #296	; 0x128
 8009b80:	2100      	movs	r1, #0
 8009b82:	4618      	mov	r0, r3
 8009b84:	f018 fc26 	bl	80223d4 <memset>
	uint32_t Cal_Crc =0;
 8009b88:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009b8c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8009b90:	2200      	movs	r2, #0
 8009b92:	601a      	str	r2, [r3, #0]
	uint8_t Message_Length_Loc = 0;
 8009b94:	2300      	movs	r3, #0
 8009b96:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
	uint16_t Message_Lengh = 0;
 8009b9a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009b9e:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	801a      	strh	r2, [r3, #0]
	BYTEINIT(0);
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	Transmit_Buff[ucByte] = SOM_MEDHA;
 8009bac:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009bb0:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8009bb4:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8009bb8:	2153      	movs	r1, #83	; 0x53
 8009bba:	54d1      	strb	r1, [r2, r3]
	BYTEINC(1);
 8009bbc:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009bc0:	3301      	adds	r3, #1
 8009bc2:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Source_Addr,2);
 8009bc6:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009bca:	f107 0214 	add.w	r2, r7, #20
 8009bce:	4413      	add	r3, r2
 8009bd0:	4a88      	ldr	r2, [pc, #544]	; (8009df4 <Send_Medha_EI_Reply+0x298>)
 8009bd2:	8852      	ldrh	r2, [r2, #2]
 8009bd4:	801a      	strh	r2, [r3, #0]
	BYTEINC(2);
 8009bd6:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009bda:	3302      	adds	r3, #2
 8009bdc:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Dest_Addr,2);
 8009be0:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009be4:	f107 0214 	add.w	r2, r7, #20
 8009be8:	4413      	add	r3, r2
 8009bea:	4a82      	ldr	r2, [pc, #520]	; (8009df4 <Send_Medha_EI_Reply+0x298>)
 8009bec:	8892      	ldrh	r2, [r2, #4]
 8009bee:	801a      	strh	r2, [r3, #0]
	BYTEINC(2);
 8009bf0:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009bf4:	3302      	adds	r3, #2
 8009bf6:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Channel_Type,1);
 8009bfa:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009bfe:	f107 0214 	add.w	r2, r7, #20
 8009c02:	4413      	add	r3, r2
 8009c04:	4a7b      	ldr	r2, [pc, #492]	; (8009df4 <Send_Medha_EI_Reply+0x298>)
 8009c06:	7992      	ldrb	r2, [r2, #6]
 8009c08:	701a      	strb	r2, [r3, #0]
	BYTEINC(1);
 8009c0a:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009c0e:	3301      	adds	r3, #1
 8009c10:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	Transmit_Buff[ucByte] = CONTROL_BYTE_TX;
 8009c14:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009c18:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8009c1c:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8009c20:	21e2      	movs	r1, #226	; 0xe2
 8009c22:	54d1      	strb	r1, [r2, r3]
	BYTEINC(1);
 8009c24:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009c28:	3301      	adds	r3, #1
 8009c2a:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	Message_Length_Loc = ucByte;
 8009c2e:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009c32:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
	Transmit_Buff[ucByte] = 0;
 8009c36:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009c3a:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8009c3e:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8009c42:	2100      	movs	r1, #0
 8009c44:	54d1      	strb	r1, [r2, r3]
	Transmit_Buff[ucByte+1] = 0;
 8009c46:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009c4a:	3301      	adds	r3, #1
 8009c4c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8009c50:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8009c54:	2100      	movs	r1, #0
 8009c56:	54d1      	strb	r1, [r2, r3]
	/*	 Add Message Length at Last.*/
	BYTEINC(2);
 8009c58:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009c5c:	3302      	adds	r3, #2
 8009c5e:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Packet_Number,1);
 8009c62:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009c66:	f107 0214 	add.w	r2, r7, #20
 8009c6a:	4413      	add	r3, r2
 8009c6c:	4a61      	ldr	r2, [pc, #388]	; (8009df4 <Send_Medha_EI_Reply+0x298>)
 8009c6e:	7a92      	ldrb	r2, [r2, #10]
 8009c70:	701a      	strb	r2, [r3, #0]
	BYTEINC(1);
 8009c72:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009c76:	3301      	adds	r3, #1
 8009c78:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	/*	/////////////////////////////////////////////////////////////////*/
	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Reserved1,7);
 8009c7c:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009c80:	f107 0214 	add.w	r2, r7, #20
 8009c84:	441a      	add	r2, r3
 8009c86:	4b5b      	ldr	r3, [pc, #364]	; (8009df4 <Send_Medha_EI_Reply+0x298>)
 8009c88:	330b      	adds	r3, #11
 8009c8a:	6819      	ldr	r1, [r3, #0]
 8009c8c:	6011      	str	r1, [r2, #0]
 8009c8e:	8899      	ldrh	r1, [r3, #4]
 8009c90:	799b      	ldrb	r3, [r3, #6]
 8009c92:	8091      	strh	r1, [r2, #4]
 8009c94:	7193      	strb	r3, [r2, #6]
	BYTEINC(7);
 8009c96:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009c9a:	3307      	adds	r3, #7
 8009c9c:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142
	/*	/////////////////////////////////////////////////////////////////*/

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.NoofRelays,2);
 8009ca0:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009ca4:	f107 0214 	add.w	r2, r7, #20
 8009ca8:	4413      	add	r3, r2
 8009caa:	4a52      	ldr	r2, [pc, #328]	; (8009df4 <Send_Medha_EI_Reply+0x298>)
 8009cac:	8a92      	ldrh	r2, [r2, #20]
 8009cae:	801a      	strh	r2, [r3, #0]
	BYTEINC(2);
 8009cb0:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009cb4:	3302      	adds	r3, #2
 8009cb6:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.RelayStatus,Outputs);
 8009cba:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009cbe:	f107 0214 	add.w	r2, r7, #20
 8009cc2:	18d0      	adds	r0, r2, r3
 8009cc4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009cc8:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 8009ccc:	881b      	ldrh	r3, [r3, #0]
 8009cce:	461a      	mov	r2, r3
 8009cd0:	4949      	ldr	r1, [pc, #292]	; (8009df8 <Send_Medha_EI_Reply+0x29c>)
 8009cd2:	f018 fb57 	bl	8022384 <memcpy>
	BYTEINC(Outputs);
 8009cd6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009cda:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 8009cde:	f8b7 2142 	ldrh.w	r2, [r7, #322]	; 0x142
 8009ce2:	881b      	ldrh	r3, [r3, #0]
 8009ce4:	4413      	add	r3, r2
 8009ce6:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Comp_RelayStatus,Outputs);
 8009cea:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009cee:	f107 0214 	add.w	r2, r7, #20
 8009cf2:	18d0      	adds	r0, r2, r3
 8009cf4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009cf8:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 8009cfc:	881b      	ldrh	r3, [r3, #0]
 8009cfe:	461a      	mov	r2, r3
 8009d00:	493e      	ldr	r1, [pc, #248]	; (8009dfc <Send_Medha_EI_Reply+0x2a0>)
 8009d02:	f018 fb3f 	bl	8022384 <memcpy>
	BYTEINC(Outputs);
 8009d06:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009d0a:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 8009d0e:	f8b7 2142 	ldrh.w	r2, [r7, #322]	; 0x142
 8009d12:	881b      	ldrh	r3, [r3, #0]
 8009d14:	4413      	add	r3, r2
 8009d16:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	Transmit_Buff[ucByte]=0;
 8009d1a:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009d1e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8009d22:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8009d26:	2100      	movs	r1, #0
 8009d28:	54d1      	strb	r1, [r2, r3]
	Transmit_Buff[ucByte]=0;
 8009d2a:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009d2e:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8009d32:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8009d36:	2100      	movs	r1, #0
 8009d38:	54d1      	strb	r1, [r2, r3]
	BYTEINC(2); /*RESERVED2*/
 8009d3a:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009d3e:	3302      	adds	r3, #2
 8009d40:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142
	 * "Message_Length_Loc" is Size before Message_length field excluding the Length 2 Bytes.
	 * To get Message Length we calculated like below.
	 *
	 * Message_Length = (     (current Packet Length+"CRC_SIZE") - (Message_Length_Location + "MSG_LEN_SIZE") )
	 */
	Message_Lengh = ( (ucByte+4)-(Message_Length_Loc+2));
 8009d44:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 8009d48:	b29b      	uxth	r3, r3
 8009d4a:	f8b7 2142 	ldrh.w	r2, [r7, #322]	; 0x142
 8009d4e:	1ad3      	subs	r3, r2, r3
 8009d50:	b29b      	uxth	r3, r3
 8009d52:	3302      	adds	r3, #2
 8009d54:	b29a      	uxth	r2, r3
 8009d56:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009d5a:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8009d5e:	801a      	strh	r2, [r3, #0]
	memcpy(&Transmit_Buff[Message_Length_Loc],&Message_Lengh,2);
 8009d60:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 8009d64:	f107 0214 	add.w	r2, r7, #20
 8009d68:	4413      	add	r3, r2
 8009d6a:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8009d6e:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 8009d72:	8812      	ldrh	r2, [r2, #0]
 8009d74:	801a      	strh	r2, [r3, #0]

	Cal_Crc = GetCRC32(0,Transmit_Buff,ucByte);
 8009d76:	f8b7 2142 	ldrh.w	r2, [r7, #322]	; 0x142
 8009d7a:	f107 0314 	add.w	r3, r7, #20
 8009d7e:	4619      	mov	r1, r3
 8009d80:	2000      	movs	r0, #0
 8009d82:	f000 fe17 	bl	800a9b4 <GetCRC32>
 8009d86:	4602      	mov	r2, r0
 8009d88:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009d8c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8009d90:	601a      	str	r2, [r3, #0]
	memcpy(&Transmit_Buff[ucByte],&Cal_Crc,4);
 8009d92:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009d96:	f107 0214 	add.w	r2, r7, #20
 8009d9a:	4413      	add	r3, r2
 8009d9c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8009da0:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8009da4:	6812      	ldr	r2, [r2, #0]
 8009da6:	601a      	str	r2, [r3, #0]
	BYTEINC(4);
 8009da8:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009dac:	3304      	adds	r3, #4
 8009dae:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142
		printf("%02x ",Transmit_Buff[Traverser]);
	}
	printf("\n");
	 */

	for(uint16_t Traverser = 0;Traverser<ucByte;++Traverser)
 8009db2:	2300      	movs	r3, #0
 8009db4:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
 8009db8:	e011      	b.n	8009dde <Send_Medha_EI_Reply+0x282>
	{
		Com_SendByte(EI_data.Medha_Prms_st.Comport, Transmit_Buff[Traverser]);
 8009dba:	4b11      	ldr	r3, [pc, #68]	; (8009e00 <Send_Medha_EI_Reply+0x2a4>)
 8009dbc:	f893 0320 	ldrb.w	r0, [r3, #800]	; 0x320
 8009dc0:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8009dc4:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8009dc8:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8009dcc:	5cd3      	ldrb	r3, [r2, r3]
 8009dce:	4619      	mov	r1, r3
 8009dd0:	f00b f986 	bl	80150e0 <Com_SendByte>
	for(uint16_t Traverser = 0;Traverser<ucByte;++Traverser)
 8009dd4:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8009dd8:	3301      	adds	r3, #1
 8009dda:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
 8009dde:	f8b7 2146 	ldrh.w	r2, [r7, #326]	; 0x146
 8009de2:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009de6:	429a      	cmp	r2, r3
 8009de8:	d3e7      	bcc.n	8009dba <Send_Medha_EI_Reply+0x25e>
	}
	return;
 8009dea:	bf00      	nop
}
 8009dec:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}
 8009df4:	200024b0 	.word	0x200024b0
 8009df8:	200024c6 	.word	0x200024c6
 8009dfc:	20002546 	.word	0x20002546
 8009e00:	20000304 	.word	0x20000304

08009e04 <Send_Relay_Statuses_2_MIE>:


void Send_Relay_Statuses_2_MIE(void)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b082      	sub	sp, #8
 8009e08:	af00      	add	r7, sp, #0
	if(HAL_Elaps_Ticks(Medha_Fault_Handler_st.Relay_sending_clk) >= EI_data.Medha_Prms_st.SendSignal2MIE_CLK)
 8009e0a:	4b2a      	ldr	r3, [pc, #168]	; (8009eb4 <Send_Relay_Statuses_2_MIE+0xb0>)
 8009e0c:	689b      	ldr	r3, [r3, #8]
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f004 fe0c 	bl	800ea2c <HAL_Elaps_Ticks>
 8009e14:	4602      	mov	r2, r0
 8009e16:	4b28      	ldr	r3, [pc, #160]	; (8009eb8 <Send_Relay_Statuses_2_MIE+0xb4>)
 8009e18:	f8d3 3334 	ldr.w	r3, [r3, #820]	; 0x334
 8009e1c:	429a      	cmp	r2, r3
 8009e1e:	d345      	bcc.n	8009eac <Send_Relay_Statuses_2_MIE+0xa8>
	{
		uint16_t NoOfInputs = 0;
 8009e20:	2300      	movs	r3, #0
 8009e22:	80fb      	strh	r3, [r7, #6]
		(EI_data.Medha_Prms_st.NoofRelays%8)?(NoOfInputs=((EI_data.Medha_Prms_st.NoofRelays / 8)) + 1):(NoOfInputs = (EI_data.Medha_Prms_st.NoofRelays / 8));
 8009e24:	4b24      	ldr	r3, [pc, #144]	; (8009eb8 <Send_Relay_Statuses_2_MIE+0xb4>)
 8009e26:	f8b3 3328 	ldrh.w	r3, [r3, #808]	; 0x328
 8009e2a:	f003 0307 	and.w	r3, r3, #7
 8009e2e:	b29b      	uxth	r3, r3
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d007      	beq.n	8009e44 <Send_Relay_Statuses_2_MIE+0x40>
 8009e34:	4b20      	ldr	r3, [pc, #128]	; (8009eb8 <Send_Relay_Statuses_2_MIE+0xb4>)
 8009e36:	f8b3 3328 	ldrh.w	r3, [r3, #808]	; 0x328
 8009e3a:	08db      	lsrs	r3, r3, #3
 8009e3c:	b29b      	uxth	r3, r3
 8009e3e:	3301      	adds	r3, #1
 8009e40:	80fb      	strh	r3, [r7, #6]
 8009e42:	e004      	b.n	8009e4e <Send_Relay_Statuses_2_MIE+0x4a>
 8009e44:	4b1c      	ldr	r3, [pc, #112]	; (8009eb8 <Send_Relay_Statuses_2_MIE+0xb4>)
 8009e46:	f8b3 3328 	ldrh.w	r3, [r3, #808]	; 0x328
 8009e4a:	08db      	lsrs	r3, r3, #3
 8009e4c:	80fb      	strh	r3, [r7, #6]

		Medha_Fault_Handler_st.Relay_sending_clk = HAL_GetTick();
 8009e4e:	f00b fb9f 	bl	8015590 <HAL_GetTick>
 8009e52:	4603      	mov	r3, r0
 8009e54:	4a17      	ldr	r2, [pc, #92]	; (8009eb4 <Send_Relay_Statuses_2_MIE+0xb0>)
 8009e56:	6093      	str	r3, [r2, #8]
		printf("SendingRelaysToMIE:\n");
 8009e58:	4818      	ldr	r0, [pc, #96]	; (8009ebc <Send_Relay_Statuses_2_MIE+0xb8>)
 8009e5a:	f018 fc3f 	bl	80226dc <puts>
		//		for(uint32_t Traverser=0;Traverser<(sizeof(Medha_Relay_Sts_st));++Traverser)


		for(uint32_t Traverser=0;Traverser<(NoOfInputs);++Traverser)
 8009e5e:	2300      	movs	r3, #0
 8009e60:	603b      	str	r3, [r7, #0]
 8009e62:	e01c      	b.n	8009e9e <Send_Relay_Statuses_2_MIE+0x9a>

		{
			if( (Traverser!=0) && ( (Traverser%20)==0) )
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d00e      	beq.n	8009e88 <Send_Relay_Statuses_2_MIE+0x84>
 8009e6a:	6839      	ldr	r1, [r7, #0]
 8009e6c:	4b14      	ldr	r3, [pc, #80]	; (8009ec0 <Send_Relay_Statuses_2_MIE+0xbc>)
 8009e6e:	fba3 2301 	umull	r2, r3, r3, r1
 8009e72:	091a      	lsrs	r2, r3, #4
 8009e74:	4613      	mov	r3, r2
 8009e76:	009b      	lsls	r3, r3, #2
 8009e78:	4413      	add	r3, r2
 8009e7a:	009b      	lsls	r3, r3, #2
 8009e7c:	1aca      	subs	r2, r1, r3
 8009e7e:	2a00      	cmp	r2, #0
 8009e80:	d102      	bne.n	8009e88 <Send_Relay_Statuses_2_MIE+0x84>
			{
				printf("\n");
 8009e82:	200a      	movs	r0, #10
 8009e84:	f018 fba6 	bl	80225d4 <putchar>
			}
			printf("%02X ",Medha_Relay_Sts_st.Relay_Sts[Traverser]);
 8009e88:	4a0e      	ldr	r2, [pc, #56]	; (8009ec4 <Send_Relay_Statuses_2_MIE+0xc0>)
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	4413      	add	r3, r2
 8009e8e:	781b      	ldrb	r3, [r3, #0]
 8009e90:	4619      	mov	r1, r3
 8009e92:	480d      	ldr	r0, [pc, #52]	; (8009ec8 <Send_Relay_Statuses_2_MIE+0xc4>)
 8009e94:	f018 fb86 	bl	80225a4 <iprintf>
		for(uint32_t Traverser=0;Traverser<(NoOfInputs);++Traverser)
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	3301      	adds	r3, #1
 8009e9c:	603b      	str	r3, [r7, #0]
 8009e9e:	88fb      	ldrh	r3, [r7, #6]
 8009ea0:	683a      	ldr	r2, [r7, #0]
 8009ea2:	429a      	cmp	r2, r3
 8009ea4:	d3de      	bcc.n	8009e64 <Send_Relay_Statuses_2_MIE+0x60>
		}
		printf("\n");
 8009ea6:	200a      	movs	r0, #10
 8009ea8:	f018 fb94 	bl	80225d4 <putchar>
	}
#endif



}
 8009eac:	bf00      	nop
 8009eae:	3708      	adds	r7, #8
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bd80      	pop	{r7, pc}
 8009eb4:	20002604 	.word	0x20002604
 8009eb8:	20000304 	.word	0x20000304
 8009ebc:	0802562c 	.word	0x0802562c
 8009ec0:	cccccccd 	.word	0xcccccccd
 8009ec4:	200025d4 	.word	0x200025d4
 8009ec8:	08025288 	.word	0x08025288

08009ecc <Process_Clear_Relays>:

void Process_Clear_Relays(void)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b082      	sub	sp, #8
 8009ed0:	af00      	add	r7, sp, #0
	static uint32_t Last_Clear_clk = 0;
	uint32_t Last_Received_Elaps = (HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk));
 8009ed2:	4b52      	ldr	r3, [pc, #328]	; (800a01c <Process_Clear_Relays+0x150>)
 8009ed4:	685b      	ldr	r3, [r3, #4]
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f004 fda8 	bl	800ea2c <HAL_Elaps_Ticks>
 8009edc:	6078      	str	r0, [r7, #4]
	uint32_t Timeout =  (EI_data.Medha_Prms_st.Packet_Interval_ms * EI_data.Medha_Prms_st.Packet_Timeout_Count);
 8009ede:	4b50      	ldr	r3, [pc, #320]	; (800a020 <Process_Clear_Relays+0x154>)
 8009ee0:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 8009ee4:	4a4e      	ldr	r2, [pc, #312]	; (800a020 <Process_Clear_Relays+0x154>)
 8009ee6:	f8b2 2326 	ldrh.w	r2, [r2, #806]	; 0x326
 8009eea:	fb02 f303 	mul.w	r3, r2, r3
 8009eee:	603b      	str	r3, [r7, #0]


	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8009ef0:	494c      	ldr	r1, [pc, #304]	; (800a024 <Process_Clear_Relays+0x158>)
 8009ef2:	484d      	ldr	r0, [pc, #308]	; (800a028 <Process_Clear_Relays+0x15c>)
 8009ef4:	f7f6 f9a4 	bl	8000240 <strcmp>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	f000 8089 	beq.w	800a012 <Process_Clear_Relays+0x146>
	}




	if( ( (Last_Received_Elaps >= Timeout) && (Last_Clear_clk != Medha_Fault_Handler_st.Pkt_Rcv_clk) && (Medha_ei_self_sharing_RX_st.MisMatch_CNT > EI_data.Medha_Prms_st.Max_Mismatch_value) )
 8009f00:	687a      	ldr	r2, [r7, #4]
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	429a      	cmp	r2, r3
 8009f06:	d30c      	bcc.n	8009f22 <Process_Clear_Relays+0x56>
 8009f08:	4b44      	ldr	r3, [pc, #272]	; (800a01c <Process_Clear_Relays+0x150>)
 8009f0a:	685a      	ldr	r2, [r3, #4]
 8009f0c:	4b47      	ldr	r3, [pc, #284]	; (800a02c <Process_Clear_Relays+0x160>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	429a      	cmp	r2, r3
 8009f12:	d006      	beq.n	8009f22 <Process_Clear_Relays+0x56>
 8009f14:	4b46      	ldr	r3, [pc, #280]	; (800a030 <Process_Clear_Relays+0x164>)
 8009f16:	785a      	ldrb	r2, [r3, #1]
 8009f18:	4b41      	ldr	r3, [pc, #260]	; (800a020 <Process_Clear_Relays+0x154>)
 8009f1a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8009f1e:	429a      	cmp	r2, r3
 8009f20:	d808      	bhi.n	8009f34 <Process_Clear_Relays+0x68>
			||((Medha_Fault_Handler_st.Clear_Relay_Statuses >= 1) && (Medha_Cur_Relay_Status_st.Vital_CRC != 0))
 8009f22:	4b3e      	ldr	r3, [pc, #248]	; (800a01c <Process_Clear_Relays+0x150>)
 8009f24:	781b      	ldrb	r3, [r3, #0]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d051      	beq.n	8009fce <Process_Clear_Relays+0x102>
 8009f2a:	4b42      	ldr	r3, [pc, #264]	; (800a034 <Process_Clear_Relays+0x168>)
 8009f2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d04c      	beq.n	8009fce <Process_Clear_Relays+0x102>
	)
	{
		printf("Medha_Fault_Handler_st.Clear_Relay_Statuses:%u\n",Medha_Fault_Handler_st.Clear_Relay_Statuses);
 8009f34:	4b39      	ldr	r3, [pc, #228]	; (800a01c <Process_Clear_Relays+0x150>)
 8009f36:	781b      	ldrb	r3, [r3, #0]
 8009f38:	4619      	mov	r1, r3
 8009f3a:	483f      	ldr	r0, [pc, #252]	; (800a038 <Process_Clear_Relays+0x16c>)
 8009f3c:	f018 fb32 	bl	80225a4 <iprintf>

		if(CHECKFLAG(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses) == SET)
 8009f40:	4b36      	ldr	r3, [pc, #216]	; (800a01c <Process_Clear_Relays+0x150>)
 8009f42:	781b      	ldrb	r3, [r3, #0]
 8009f44:	f003 0301 	and.w	r3, r3, #1
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d006      	beq.n	8009f5a <Process_Clear_Relays+0x8e>
		{
			CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 8009f4c:	4b33      	ldr	r3, [pc, #204]	; (800a01c <Process_Clear_Relays+0x150>)
 8009f4e:	781b      	ldrb	r3, [r3, #0]
 8009f50:	f023 0301 	bic.w	r3, r3, #1
 8009f54:	b2da      	uxtb	r2, r3
 8009f56:	4b31      	ldr	r3, [pc, #196]	; (800a01c <Process_Clear_Relays+0x150>)
 8009f58:	701a      	strb	r2, [r3, #0]
		}
		if(CHECKFLAG(CAN_EXCHANGE_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses) == SET)
 8009f5a:	4b30      	ldr	r3, [pc, #192]	; (800a01c <Process_Clear_Relays+0x150>)
 8009f5c:	781b      	ldrb	r3, [r3, #0]
 8009f5e:	f003 0302 	and.w	r3, r3, #2
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d006      	beq.n	8009f74 <Process_Clear_Relays+0xa8>
		{
			CLEAR_BIT_USER(CAN_EXCHANGE_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 8009f66:	4b2d      	ldr	r3, [pc, #180]	; (800a01c <Process_Clear_Relays+0x150>)
 8009f68:	781b      	ldrb	r3, [r3, #0]
 8009f6a:	f023 0302 	bic.w	r3, r3, #2
 8009f6e:	b2da      	uxtb	r2, r3
 8009f70:	4b2a      	ldr	r3, [pc, #168]	; (800a01c <Process_Clear_Relays+0x150>)
 8009f72:	701a      	strb	r2, [r3, #0]
		}
		memset(&Medha_Cur_Relay_Status_st,0,sizeof(MEDHA_CUR_RELAY_STS_t));
 8009f74:	2284      	movs	r2, #132	; 0x84
 8009f76:	2100      	movs	r1, #0
 8009f78:	482e      	ldr	r0, [pc, #184]	; (800a034 <Process_Clear_Relays+0x168>)
 8009f7a:	f018 fa2b 	bl	80223d4 <memset>
		memset(&Medha_Relay_Sts_st,0,sizeof(MEDHA_RELAY_STS_t));
 8009f7e:	2230      	movs	r2, #48	; 0x30
 8009f80:	2100      	movs	r1, #0
 8009f82:	482e      	ldr	r0, [pc, #184]	; (800a03c <Process_Clear_Relays+0x170>)
 8009f84:	f018 fa26 	bl	80223d4 <memset>
		memset(&Medha_Temp_relay_sts_t,0,sizeof(MEDHA_CUR_RELAY_STS_t));
 8009f88:	2284      	movs	r2, #132	; 0x84
 8009f8a:	2100      	movs	r1, #0
 8009f8c:	482c      	ldr	r0, [pc, #176]	; (800a040 <Process_Clear_Relays+0x174>)
 8009f8e:	f018 fa21 	bl	80223d4 <memset>
		memset(&Medha_ei_self_sharing_TX_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 8009f92:	2208      	movs	r2, #8
 8009f94:	2100      	movs	r1, #0
 8009f96:	482b      	ldr	r0, [pc, #172]	; (800a044 <Process_Clear_Relays+0x178>)
 8009f98:	f018 fa1c 	bl	80223d4 <memset>
		memset(&Medha_ei_self_sharing_RX_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 8009f9c:	2208      	movs	r2, #8
 8009f9e:	2100      	movs	r1, #0
 8009fa0:	4823      	ldr	r0, [pc, #140]	; (800a030 <Process_Clear_Relays+0x164>)
 8009fa2:	f018 fa17 	bl	80223d4 <memset>
		memset(&Medha_ei_self_sharing_Temp_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 8009fa6:	2208      	movs	r2, #8
 8009fa8:	2100      	movs	r1, #0
 8009faa:	4827      	ldr	r0, [pc, #156]	; (800a048 <Process_Clear_Relays+0x17c>)
 8009fac:	f018 fa12 	bl	80223d4 <memset>
		printf("Cleared Relay Statuses\n");
 8009fb0:	4826      	ldr	r0, [pc, #152]	; (800a04c <Process_Clear_Relays+0x180>)
 8009fb2:	f018 fb93 	bl	80226dc <puts>
		Last_Clear_clk =Medha_Fault_Handler_st.Pkt_Rcv_clk;
 8009fb6:	4b19      	ldr	r3, [pc, #100]	; (800a01c <Process_Clear_Relays+0x150>)
 8009fb8:	685b      	ldr	r3, [r3, #4]
 8009fba:	4a1c      	ldr	r2, [pc, #112]	; (800a02c <Process_Clear_Relays+0x160>)
 8009fbc:	6013      	str	r3, [r2, #0]
		SET_BIT_USER(0,EI_HealthStatus);
 8009fbe:	4b24      	ldr	r3, [pc, #144]	; (800a050 <Process_Clear_Relays+0x184>)
 8009fc0:	881b      	ldrh	r3, [r3, #0]
 8009fc2:	f043 0301 	orr.w	r3, r3, #1
 8009fc6:	b29a      	uxth	r2, r3
 8009fc8:	4b21      	ldr	r3, [pc, #132]	; (800a050 <Process_Clear_Relays+0x184>)
 8009fca:	801a      	strh	r2, [r3, #0]
 8009fcc:	e022      	b.n	800a014 <Process_Clear_Relays+0x148>
	}
	else if(
 8009fce:	687a      	ldr	r2, [r7, #4]
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	429a      	cmp	r2, r3
 8009fd4:	d80c      	bhi.n	8009ff0 <Process_Clear_Relays+0x124>
			(
					(Last_Received_Elaps <= Timeout) &&
					(Last_Clear_clk != Medha_Fault_Handler_st.Pkt_Rcv_clk) &&
 8009fd6:	4b11      	ldr	r3, [pc, #68]	; (800a01c <Process_Clear_Relays+0x150>)
 8009fd8:	685a      	ldr	r2, [r3, #4]
 8009fda:	4b14      	ldr	r3, [pc, #80]	; (800a02c <Process_Clear_Relays+0x160>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
					(Last_Received_Elaps <= Timeout) &&
 8009fde:	429a      	cmp	r2, r3
 8009fe0:	d006      	beq.n	8009ff0 <Process_Clear_Relays+0x124>
					(Medha_ei_self_sharing_RX_st.MisMatch_CNT <= EI_data.Medha_Prms_st.Max_Mismatch_value)
 8009fe2:	4b13      	ldr	r3, [pc, #76]	; (800a030 <Process_Clear_Relays+0x164>)
 8009fe4:	785a      	ldrb	r2, [r3, #1]
 8009fe6:	4b0e      	ldr	r3, [pc, #56]	; (800a020 <Process_Clear_Relays+0x154>)
 8009fe8:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
					(Last_Clear_clk != Medha_Fault_Handler_st.Pkt_Rcv_clk) &&
 8009fec:	429a      	cmp	r2, r3
 8009fee:	d908      	bls.n	800a002 <Process_Clear_Relays+0x136>
			)
			||
			(
					(Medha_Fault_Handler_st.Clear_Relay_Statuses < 1) &&
 8009ff0:	4b0a      	ldr	r3, [pc, #40]	; (800a01c <Process_Clear_Relays+0x150>)
 8009ff2:	781b      	ldrb	r3, [r3, #0]
			||
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d10d      	bne.n	800a014 <Process_Clear_Relays+0x148>
					(Medha_Cur_Relay_Status_st.Vital_CRC != 0)
 8009ff8:	4b0e      	ldr	r3, [pc, #56]	; (800a034 <Process_Clear_Relays+0x168>)
 8009ffa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
					(Medha_Fault_Handler_st.Clear_Relay_Statuses < 1) &&
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d008      	beq.n	800a014 <Process_Clear_Relays+0x148>
			)
	)
	{
		CLEAR_BIT_USER(0,EI_HealthStatus);
 800a002:	4b13      	ldr	r3, [pc, #76]	; (800a050 <Process_Clear_Relays+0x184>)
 800a004:	881b      	ldrh	r3, [r3, #0]
 800a006:	f023 0301 	bic.w	r3, r3, #1
 800a00a:	b29a      	uxth	r2, r3
 800a00c:	4b10      	ldr	r3, [pc, #64]	; (800a050 <Process_Clear_Relays+0x184>)
 800a00e:	801a      	strh	r2, [r3, #0]
 800a010:	e000      	b.n	800a014 <Process_Clear_Relays+0x148>
		return;
 800a012:	bf00      	nop
	}
}
 800a014:	3708      	adds	r7, #8
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}
 800a01a:	bf00      	nop
 800a01c:	20002604 	.word	0x20002604
 800a020:	20000304 	.word	0x20000304
 800a024:	08025458 	.word	0x08025458
 800a028:	20000305 	.word	0x20000305
 800a02c:	200027c4 	.word	0x200027c4
 800a030:	2000261c 	.word	0x2000261c
 800a034:	2000262c 	.word	0x2000262c
 800a038:	08025640 	.word	0x08025640
 800a03c:	200025d4 	.word	0x200025d4
 800a040:	20002734 	.word	0x20002734
 800a044:	20002614 	.word	0x20002614
 800a048:	20002624 	.word	0x20002624
 800a04c:	08025670 	.word	0x08025670
 800a050:	20000e3a 	.word	0x20000e3a

0800a054 <Send_Data_to_Other>:


void Send_Data_to_Other(void)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	af00      	add	r7, sp, #0
	}
#else



	if(HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk) >= (EI_data.Medha_Prms_st.Packet_Interval_ms * EI_data.Medha_Prms_st.Packet_Timeout_Count ) )
 800a058:	4b26      	ldr	r3, [pc, #152]	; (800a0f4 <Send_Data_to_Other+0xa0>)
 800a05a:	685b      	ldr	r3, [r3, #4]
 800a05c:	4618      	mov	r0, r3
 800a05e:	f004 fce5 	bl	800ea2c <HAL_Elaps_Ticks>
 800a062:	4602      	mov	r2, r0
 800a064:	4b24      	ldr	r3, [pc, #144]	; (800a0f8 <Send_Data_to_Other+0xa4>)
 800a066:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 800a06a:	4923      	ldr	r1, [pc, #140]	; (800a0f8 <Send_Data_to_Other+0xa4>)
 800a06c:	f8b1 1326 	ldrh.w	r1, [r1, #806]	; 0x326
 800a070:	fb01 f303 	mul.w	r3, r1, r3
 800a074:	429a      	cmp	r2, r3
 800a076:	d306      	bcc.n	800a086 <Send_Data_to_Other+0x32>
	{
		if(Medha_ei_self_sharing_TX_st.Receiving_Status != NOT_RECEIVED)
 800a078:	4b20      	ldr	r3, [pc, #128]	; (800a0fc <Send_Data_to_Other+0xa8>)
 800a07a:	781b      	ldrb	r3, [r3, #0]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d002      	beq.n	800a086 <Send_Data_to_Other+0x32>
		{
			Medha_ei_self_sharing_TX_st.Receiving_Status = NOT_RECEIVED;
 800a080:	4b1e      	ldr	r3, [pc, #120]	; (800a0fc <Send_Data_to_Other+0xa8>)
 800a082:	2200      	movs	r2, #0
 800a084:	701a      	strb	r2, [r3, #0]
		}
	}


	if( (HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk) > EI_data.Medha_Prms_st.CAN_Xchange_Time) && (Send_Sharing_CLK1 != Medha_Fault_Handler_st.Pkt_Rcv_clk) )
 800a086:	4b1b      	ldr	r3, [pc, #108]	; (800a0f4 <Send_Data_to_Other+0xa0>)
 800a088:	685b      	ldr	r3, [r3, #4]
 800a08a:	4618      	mov	r0, r3
 800a08c:	f004 fcce 	bl	800ea2c <HAL_Elaps_Ticks>
 800a090:	4602      	mov	r2, r0
 800a092:	4b19      	ldr	r3, [pc, #100]	; (800a0f8 <Send_Data_to_Other+0xa4>)
 800a094:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 800a098:	429a      	cmp	r2, r3
 800a09a:	d90e      	bls.n	800a0ba <Send_Data_to_Other+0x66>
 800a09c:	4b15      	ldr	r3, [pc, #84]	; (800a0f4 <Send_Data_to_Other+0xa0>)
 800a09e:	685a      	ldr	r2, [r3, #4]
 800a0a0:	4b17      	ldr	r3, [pc, #92]	; (800a100 <Send_Data_to_Other+0xac>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	429a      	cmp	r2, r3
 800a0a6:	d008      	beq.n	800a0ba <Send_Data_to_Other+0x66>
	{
		Send_Sharing_CLK1 = Medha_Fault_Handler_st.Pkt_Rcv_clk;
 800a0a8:	4b12      	ldr	r3, [pc, #72]	; (800a0f4 <Send_Data_to_Other+0xa0>)
 800a0aa:	685b      	ldr	r3, [r3, #4]
 800a0ac:	4a14      	ldr	r2, [pc, #80]	; (800a100 <Send_Data_to_Other+0xac>)
 800a0ae:	6013      	str	r3, [r2, #0]
#ifdef EI_1
		TransmitCanPkt(EI_1_SELF_SHARING);
#endif
#ifdef EI_2
		TransmitCanPkt(EI_2_SELF_SHARING);
 800a0b0:	f240 2002 	movw	r0, #514	; 0x202
 800a0b4:	f005 fa3c 	bl	800f530 <TransmitCanPkt>
		TransmitCanPkt(EI_2_SELF_SHARING);
#endif

	}
#endif
}
 800a0b8:	e01a      	b.n	800a0f0 <Send_Data_to_Other+0x9c>
	else if(  (HAL_Elaps_Ticks(Send_Sharing_CLK2) > ONE_SEC)  && (HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk) > TWO_SEC ))
 800a0ba:	4b12      	ldr	r3, [pc, #72]	; (800a104 <Send_Data_to_Other+0xb0>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f004 fcb4 	bl	800ea2c <HAL_Elaps_Ticks>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a0ca:	d911      	bls.n	800a0f0 <Send_Data_to_Other+0x9c>
 800a0cc:	4b09      	ldr	r3, [pc, #36]	; (800a0f4 <Send_Data_to_Other+0xa0>)
 800a0ce:	685b      	ldr	r3, [r3, #4]
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f004 fcab 	bl	800ea2c <HAL_Elaps_Ticks>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a0dc:	d908      	bls.n	800a0f0 <Send_Data_to_Other+0x9c>
		Send_Sharing_CLK2 = HAL_GetTick();
 800a0de:	f00b fa57 	bl	8015590 <HAL_GetTick>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	4a07      	ldr	r2, [pc, #28]	; (800a104 <Send_Data_to_Other+0xb0>)
 800a0e6:	6013      	str	r3, [r2, #0]
		TransmitCanPkt(EI_2_SELF_SHARING);
 800a0e8:	f240 2002 	movw	r0, #514	; 0x202
 800a0ec:	f005 fa20 	bl	800f530 <TransmitCanPkt>
}
 800a0f0:	bf00      	nop
 800a0f2:	bd80      	pop	{r7, pc}
 800a0f4:	20002604 	.word	0x20002604
 800a0f8:	20000304 	.word	0x20000304
 800a0fc:	20002614 	.word	0x20002614
 800a100:	200027c8 	.word	0x200027c8
 800a104:	200027cc 	.word	0x200027cc

0800a108 <Process_Data_from_Other>:

void Process_Data_from_Other(void)
{
 800a108:	b5b0      	push	{r4, r5, r7, lr}
 800a10a:	af00      	add	r7, sp, #0
	static uint32_t Prev_Receive_CLK = 0;
	//static uint8_t MisMatch_CNT = 0;
	static uint32_t Previous_Clock_RCV_SELF_XCHG_CLK = 0;


	if( (Prev_Receive_CLK != Last_Received_Medha_Self_sharing) || ( (HAL_Elaps_Ticks(Prev_Receive_CLK)) >= ONE_SEC) )
 800a10c:	4b95      	ldr	r3, [pc, #596]	; (800a364 <Process_Data_from_Other+0x25c>)
 800a10e:	681a      	ldr	r2, [r3, #0]
 800a110:	4b95      	ldr	r3, [pc, #596]	; (800a368 <Process_Data_from_Other+0x260>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	429a      	cmp	r2, r3
 800a116:	d109      	bne.n	800a12c <Process_Data_from_Other+0x24>
 800a118:	4b92      	ldr	r3, [pc, #584]	; (800a364 <Process_Data_from_Other+0x25c>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	4618      	mov	r0, r3
 800a11e:	f004 fc85 	bl	800ea2c <HAL_Elaps_Ticks>
 800a122:	4603      	mov	r3, r0
 800a124:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a128:	f0c0 80e4 	bcc.w	800a2f4 <Process_Data_from_Other+0x1ec>
	{
		Prev_Receive_CLK = HAL_GetTick();
 800a12c:	f00b fa30 	bl	8015590 <HAL_GetTick>
 800a130:	4603      	mov	r3, r0
 800a132:	4a8c      	ldr	r2, [pc, #560]	; (800a364 <Process_Data_from_Other+0x25c>)
 800a134:	6013      	str	r3, [r2, #0]
		if(Medha_ei_self_sharing_TX_st.Receiving_Status)
 800a136:	4b8d      	ldr	r3, [pc, #564]	; (800a36c <Process_Data_from_Other+0x264>)
 800a138:	781b      	ldrb	r3, [r3, #0]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d007      	beq.n	800a14e <Process_Data_from_Other+0x46>
		{
			SET_BIT_USER(0,EIPC_1_2_STATUS);
 800a13e:	4b8c      	ldr	r3, [pc, #560]	; (800a370 <Process_Data_from_Other+0x268>)
 800a140:	781b      	ldrb	r3, [r3, #0]
 800a142:	f043 0301 	orr.w	r3, r3, #1
 800a146:	b2da      	uxtb	r2, r3
 800a148:	4b89      	ldr	r3, [pc, #548]	; (800a370 <Process_Data_from_Other+0x268>)
 800a14a:	701a      	strb	r2, [r3, #0]
 800a14c:	e006      	b.n	800a15c <Process_Data_from_Other+0x54>
		}
		else
		{
			CLEAR_BIT_USER(0,EIPC_1_2_STATUS);
 800a14e:	4b88      	ldr	r3, [pc, #544]	; (800a370 <Process_Data_from_Other+0x268>)
 800a150:	781b      	ldrb	r3, [r3, #0]
 800a152:	f023 0301 	bic.w	r3, r3, #1
 800a156:	b2da      	uxtb	r2, r3
 800a158:	4b85      	ldr	r3, [pc, #532]	; (800a370 <Process_Data_from_Other+0x268>)
 800a15a:	701a      	strb	r2, [r3, #0]
		}
		if(Medha_ei_self_sharing_RX_st.Receiving_Status)
 800a15c:	4b85      	ldr	r3, [pc, #532]	; (800a374 <Process_Data_from_Other+0x26c>)
 800a15e:	781b      	ldrb	r3, [r3, #0]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d007      	beq.n	800a174 <Process_Data_from_Other+0x6c>
		{
			SET_BIT_USER(1,EIPC_1_2_STATUS);
 800a164:	4b82      	ldr	r3, [pc, #520]	; (800a370 <Process_Data_from_Other+0x268>)
 800a166:	781b      	ldrb	r3, [r3, #0]
 800a168:	f043 0302 	orr.w	r3, r3, #2
 800a16c:	b2da      	uxtb	r2, r3
 800a16e:	4b80      	ldr	r3, [pc, #512]	; (800a370 <Process_Data_from_Other+0x268>)
 800a170:	701a      	strb	r2, [r3, #0]
 800a172:	e006      	b.n	800a182 <Process_Data_from_Other+0x7a>
		}
		else
		{
			CLEAR_BIT_USER(1,EIPC_1_2_STATUS);
 800a174:	4b7e      	ldr	r3, [pc, #504]	; (800a370 <Process_Data_from_Other+0x268>)
 800a176:	781b      	ldrb	r3, [r3, #0]
 800a178:	f023 0302 	bic.w	r3, r3, #2
 800a17c:	b2da      	uxtb	r2, r3
 800a17e:	4b7c      	ldr	r3, [pc, #496]	; (800a370 <Process_Data_from_Other+0x268>)
 800a180:	701a      	strb	r2, [r3, #0]
		}

		switch(EIPC_1_2_STATUS)
 800a182:	4b7b      	ldr	r3, [pc, #492]	; (800a370 <Process_Data_from_Other+0x268>)
 800a184:	781b      	ldrb	r3, [r3, #0]
 800a186:	2b03      	cmp	r3, #3
 800a188:	f200 809a 	bhi.w	800a2c0 <Process_Data_from_Other+0x1b8>
 800a18c:	a201      	add	r2, pc, #4	; (adr r2, 800a194 <Process_Data_from_Other+0x8c>)
 800a18e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a192:	bf00      	nop
 800a194:	0800a1a5 	.word	0x0800a1a5
 800a198:	0800a235 	.word	0x0800a235
 800a19c:	0800a1b3 	.word	0x0800a1b3
 800a1a0:	0800a285 	.word	0x0800a285
		{
		case SELF_NRCV_OTHER_NRCV:
			Medha_ei_self_sharing_TX_st.MisMatch_CNT++;
 800a1a4:	4b71      	ldr	r3, [pc, #452]	; (800a36c <Process_Data_from_Other+0x264>)
 800a1a6:	785b      	ldrb	r3, [r3, #1]
 800a1a8:	3301      	adds	r3, #1
 800a1aa:	b2da      	uxtb	r2, r3
 800a1ac:	4b6f      	ldr	r3, [pc, #444]	; (800a36c <Process_Data_from_Other+0x264>)
 800a1ae:	705a      	strb	r2, [r3, #1]
			break;
 800a1b0:	e086      	b.n	800a2c0 <Process_Data_from_Other+0x1b8>

		case SELF_NRCV_OTHER_RCV:
			if(Medha_ei_self_sharing_RX_st.Vital_CRC != Medha_ei_self_sharing_TX_st.Vital_CRC)
 800a1b2:	4b70      	ldr	r3, [pc, #448]	; (800a374 <Process_Data_from_Other+0x26c>)
 800a1b4:	685a      	ldr	r2, [r3, #4]
 800a1b6:	4b6d      	ldr	r3, [pc, #436]	; (800a36c <Process_Data_from_Other+0x264>)
 800a1b8:	685b      	ldr	r3, [r3, #4]
 800a1ba:	429a      	cmp	r2, r3
 800a1bc:	d02f      	beq.n	800a21e <Process_Data_from_Other+0x116>
			{
				if( (Received_CAN_Relay_Status == YES) )
 800a1be:	4b6e      	ldr	r3, [pc, #440]	; (800a378 <Process_Data_from_Other+0x270>)
 800a1c0:	781b      	ldrb	r3, [r3, #0]
 800a1c2:	2b01      	cmp	r3, #1
 800a1c4:	d179      	bne.n	800a2ba <Process_Data_from_Other+0x1b2>
				{

					printf("Self_Vital_CRC :%08lx\n",Medha_ei_self_sharing_TX_st.Vital_CRC);
 800a1c6:	4b69      	ldr	r3, [pc, #420]	; (800a36c <Process_Data_from_Other+0x264>)
 800a1c8:	685b      	ldr	r3, [r3, #4]
 800a1ca:	4619      	mov	r1, r3
 800a1cc:	486b      	ldr	r0, [pc, #428]	; (800a37c <Process_Data_from_Other+0x274>)
 800a1ce:	f018 f9e9 	bl	80225a4 <iprintf>
					printf("Other_Vital_CRC:%08lx\n",Medha_ei_self_sharing_RX_st.Vital_CRC);
 800a1d2:	4b68      	ldr	r3, [pc, #416]	; (800a374 <Process_Data_from_Other+0x26c>)
 800a1d4:	685b      	ldr	r3, [r3, #4]
 800a1d6:	4619      	mov	r1, r3
 800a1d8:	4869      	ldr	r0, [pc, #420]	; (800a380 <Process_Data_from_Other+0x278>)
 800a1da:	f018 f9e3 	bl	80225a4 <iprintf>
					Received_CAN_Relay_Status=NO;
 800a1de:	4b66      	ldr	r3, [pc, #408]	; (800a378 <Process_Data_from_Other+0x270>)
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	701a      	strb	r2, [r3, #0]
					printf("Copies Relays status and VITAL CRC from Other Card\n");
 800a1e4:	4867      	ldr	r0, [pc, #412]	; (800a384 <Process_Data_from_Other+0x27c>)
 800a1e6:	f018 fa79 	bl	80226dc <puts>
					memcpy(&Medha_Cur_Relay_Status_st,&Medha_CAN_Relay_Status_st,sizeof(MEDHA_CUR_RELAY_STS_t));
 800a1ea:	4a67      	ldr	r2, [pc, #412]	; (800a388 <Process_Data_from_Other+0x280>)
 800a1ec:	4b67      	ldr	r3, [pc, #412]	; (800a38c <Process_Data_from_Other+0x284>)
 800a1ee:	4610      	mov	r0, r2
 800a1f0:	4619      	mov	r1, r3
 800a1f2:	2384      	movs	r3, #132	; 0x84
 800a1f4:	461a      	mov	r2, r3
 800a1f6:	f018 f8c5 	bl	8022384 <memcpy>
					memcpy(&Medha_Relay_Sts_st,&Medha_Cur_Relay_Status_st,sizeof(Medha_Relay_Sts_st));
 800a1fa:	4a65      	ldr	r2, [pc, #404]	; (800a390 <Process_Data_from_Other+0x288>)
 800a1fc:	4b62      	ldr	r3, [pc, #392]	; (800a388 <Process_Data_from_Other+0x280>)
 800a1fe:	4614      	mov	r4, r2
 800a200:	461d      	mov	r5, r3
 800a202:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a204:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a206:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a208:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a20a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800a20e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
					Medha_ei_self_sharing_TX_st.Vital_CRC = Medha_Cur_Relay_Status_st.Vital_CRC;
 800a212:	4b5d      	ldr	r3, [pc, #372]	; (800a388 <Process_Data_from_Other+0x280>)
 800a214:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a218:	4a54      	ldr	r2, [pc, #336]	; (800a36c <Process_Data_from_Other+0x264>)
 800a21a:	6053      	str	r3, [r2, #4]
			{
				Medha_ei_self_sharing_TX_st.MisMatch_CNT = 0;
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
				//printf("\nCLEAR 1\n");
			}
			break;
 800a21c:	e04d      	b.n	800a2ba <Process_Data_from_Other+0x1b2>
				Medha_ei_self_sharing_TX_st.MisMatch_CNT = 0;
 800a21e:	4b53      	ldr	r3, [pc, #332]	; (800a36c <Process_Data_from_Other+0x264>)
 800a220:	2200      	movs	r2, #0
 800a222:	705a      	strb	r2, [r3, #1]
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800a224:	4b5b      	ldr	r3, [pc, #364]	; (800a394 <Process_Data_from_Other+0x28c>)
 800a226:	781b      	ldrb	r3, [r3, #0]
 800a228:	f023 0301 	bic.w	r3, r3, #1
 800a22c:	b2da      	uxtb	r2, r3
 800a22e:	4b59      	ldr	r3, [pc, #356]	; (800a394 <Process_Data_from_Other+0x28c>)
 800a230:	701a      	strb	r2, [r3, #0]
			break;
 800a232:	e042      	b.n	800a2ba <Process_Data_from_Other+0x1b2>

		case SELF_RCV_OTHER_NRCV:
			if(Medha_ei_self_sharing_RX_st.Vital_CRC != Medha_ei_self_sharing_TX_st.Vital_CRC)
 800a234:	4b4f      	ldr	r3, [pc, #316]	; (800a374 <Process_Data_from_Other+0x26c>)
 800a236:	685a      	ldr	r2, [r3, #4]
 800a238:	4b4c      	ldr	r3, [pc, #304]	; (800a36c <Process_Data_from_Other+0x264>)
 800a23a:	685b      	ldr	r3, [r3, #4]
 800a23c:	429a      	cmp	r2, r3
 800a23e:	d016      	beq.n	800a26e <Process_Data_from_Other+0x166>
			{
				printf("Self & Other Vital CRC Not Matching\n");
 800a240:	4855      	ldr	r0, [pc, #340]	; (800a398 <Process_Data_from_Other+0x290>)
 800a242:	f018 fa4b 	bl	80226dc <puts>
				Medha_ei_self_sharing_TX_st.MisMatch_CNT++;
 800a246:	4b49      	ldr	r3, [pc, #292]	; (800a36c <Process_Data_from_Other+0x264>)
 800a248:	785b      	ldrb	r3, [r3, #1]
 800a24a:	3301      	adds	r3, #1
 800a24c:	b2da      	uxtb	r2, r3
 800a24e:	4b47      	ldr	r3, [pc, #284]	; (800a36c <Process_Data_from_Other+0x264>)
 800a250:	705a      	strb	r2, [r3, #1]

				if( (Medha_ei_self_sharing_TX_st.MisMatch_CNT > 2) && (Medha_Cur_Relay_Status_st.Vital_CRC != 0) )
 800a252:	4b46      	ldr	r3, [pc, #280]	; (800a36c <Process_Data_from_Other+0x264>)
 800a254:	785b      	ldrb	r3, [r3, #1]
 800a256:	2b02      	cmp	r3, #2
 800a258:	d931      	bls.n	800a2be <Process_Data_from_Other+0x1b6>
 800a25a:	4b4b      	ldr	r3, [pc, #300]	; (800a388 <Process_Data_from_Other+0x280>)
 800a25c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a260:	2b00      	cmp	r3, #0
 800a262:	d02c      	beq.n	800a2be <Process_Data_from_Other+0x1b6>
				{
#ifdef EI_1
					TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
#endif
#ifdef EI_2
					TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
 800a264:	f44f 7002 	mov.w	r0, #520	; 0x208
 800a268:	f005 f962 	bl	800f530 <TransmitCanPkt>
			{
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
				//printf("\nCLEAR 2\n");
				Medha_ei_self_sharing_TX_st.MisMatch_CNT=0;
			}
			break;
 800a26c:	e027      	b.n	800a2be <Process_Data_from_Other+0x1b6>
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800a26e:	4b49      	ldr	r3, [pc, #292]	; (800a394 <Process_Data_from_Other+0x28c>)
 800a270:	781b      	ldrb	r3, [r3, #0]
 800a272:	f023 0301 	bic.w	r3, r3, #1
 800a276:	b2da      	uxtb	r2, r3
 800a278:	4b46      	ldr	r3, [pc, #280]	; (800a394 <Process_Data_from_Other+0x28c>)
 800a27a:	701a      	strb	r2, [r3, #0]
				Medha_ei_self_sharing_TX_st.MisMatch_CNT=0;
 800a27c:	4b3b      	ldr	r3, [pc, #236]	; (800a36c <Process_Data_from_Other+0x264>)
 800a27e:	2200      	movs	r2, #0
 800a280:	705a      	strb	r2, [r3, #1]
			break;
 800a282:	e01c      	b.n	800a2be <Process_Data_from_Other+0x1b6>

		case SELF_RCV_OTHER_RCV:
			if(Medha_ei_self_sharing_RX_st.Vital_CRC != Medha_ei_self_sharing_TX_st.Vital_CRC)
 800a284:	4b3b      	ldr	r3, [pc, #236]	; (800a374 <Process_Data_from_Other+0x26c>)
 800a286:	685a      	ldr	r2, [r3, #4]
 800a288:	4b38      	ldr	r3, [pc, #224]	; (800a36c <Process_Data_from_Other+0x264>)
 800a28a:	685b      	ldr	r3, [r3, #4]
 800a28c:	429a      	cmp	r2, r3
 800a28e:	d009      	beq.n	800a2a4 <Process_Data_from_Other+0x19c>
			{
				printf("Self & Other Vital CRC Not Matching\n");
 800a290:	4841      	ldr	r0, [pc, #260]	; (800a398 <Process_Data_from_Other+0x290>)
 800a292:	f018 fa23 	bl	80226dc <puts>
				Medha_ei_self_sharing_TX_st.MisMatch_CNT++;
 800a296:	4b35      	ldr	r3, [pc, #212]	; (800a36c <Process_Data_from_Other+0x264>)
 800a298:	785b      	ldrb	r3, [r3, #1]
 800a29a:	3301      	adds	r3, #1
 800a29c:	b2da      	uxtb	r2, r3
 800a29e:	4b33      	ldr	r3, [pc, #204]	; (800a36c <Process_Data_from_Other+0x264>)
 800a2a0:	705a      	strb	r2, [r3, #1]
			{
				//printf("\nCLEAR 3\n");
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
				Medha_ei_self_sharing_TX_st.MisMatch_CNT=0;
			}
			break;
 800a2a2:	e00d      	b.n	800a2c0 <Process_Data_from_Other+0x1b8>
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800a2a4:	4b3b      	ldr	r3, [pc, #236]	; (800a394 <Process_Data_from_Other+0x28c>)
 800a2a6:	781b      	ldrb	r3, [r3, #0]
 800a2a8:	f023 0301 	bic.w	r3, r3, #1
 800a2ac:	b2da      	uxtb	r2, r3
 800a2ae:	4b39      	ldr	r3, [pc, #228]	; (800a394 <Process_Data_from_Other+0x28c>)
 800a2b0:	701a      	strb	r2, [r3, #0]
				Medha_ei_self_sharing_TX_st.MisMatch_CNT=0;
 800a2b2:	4b2e      	ldr	r3, [pc, #184]	; (800a36c <Process_Data_from_Other+0x264>)
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	705a      	strb	r2, [r3, #1]
			break;
 800a2b8:	e002      	b.n	800a2c0 <Process_Data_from_Other+0x1b8>
			break;
 800a2ba:	bf00      	nop
 800a2bc:	e000      	b.n	800a2c0 <Process_Data_from_Other+0x1b8>
			break;
 800a2be:	bf00      	nop
		}

		if(Medha_ei_self_sharing_TX_st.MisMatch_CNT >= EI_data.Medha_Prms_st.Max_Mismatch_value)
 800a2c0:	4b2a      	ldr	r3, [pc, #168]	; (800a36c <Process_Data_from_Other+0x264>)
 800a2c2:	785a      	ldrb	r2, [r3, #1]
 800a2c4:	4b35      	ldr	r3, [pc, #212]	; (800a39c <Process_Data_from_Other+0x294>)
 800a2c6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a2ca:	429a      	cmp	r2, r3
 800a2cc:	d312      	bcc.n	800a2f4 <Process_Data_from_Other+0x1ec>
		{
			if(CHECKFLAG(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses) == CLEAR)
 800a2ce:	4b31      	ldr	r3, [pc, #196]	; (800a394 <Process_Data_from_Other+0x28c>)
 800a2d0:	781b      	ldrb	r3, [r3, #0]
 800a2d2:	f003 0301 	and.w	r3, r3, #1
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d10c      	bne.n	800a2f4 <Process_Data_from_Other+0x1ec>
			{
				printf("MisMatch Count Reached\n");
 800a2da:	4831      	ldr	r0, [pc, #196]	; (800a3a0 <Process_Data_from_Other+0x298>)
 800a2dc:	f018 f9fe 	bl	80226dc <puts>
				Medha_ei_self_sharing_TX_st.MisMatch_CNT = 0;
 800a2e0:	4b22      	ldr	r3, [pc, #136]	; (800a36c <Process_Data_from_Other+0x264>)
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	705a      	strb	r2, [r3, #1]
				SET_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800a2e6:	4b2b      	ldr	r3, [pc, #172]	; (800a394 <Process_Data_from_Other+0x28c>)
 800a2e8:	781b      	ldrb	r3, [r3, #0]
 800a2ea:	f043 0301 	orr.w	r3, r3, #1
 800a2ee:	b2da      	uxtb	r2, r3
 800a2f0:	4b28      	ldr	r3, [pc, #160]	; (800a394 <Process_Data_from_Other+0x28c>)
 800a2f2:	701a      	strb	r2, [r3, #0]
		//		{
		//			//printf("\nMisMatch_CNT:%u\n",Medha_ei_self_sharing_TX_st.MisMatch_CNT);
		//		}
	}

	if(HAL_Elaps_Ticks(Last_Received_Medha_Self_sharing) > EI_data.Medha_Prms_st.CAN_Xchange_Tout)
 800a2f4:	4b1c      	ldr	r3, [pc, #112]	; (800a368 <Process_Data_from_Other+0x260>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	f004 fb97 	bl	800ea2c <HAL_Elaps_Ticks>
 800a2fe:	4602      	mov	r2, r0
 800a300:	4b26      	ldr	r3, [pc, #152]	; (800a39c <Process_Data_from_Other+0x294>)
 800a302:	f8d3 333c 	ldr.w	r3, [r3, #828]	; 0x33c
 800a306:	429a      	cmp	r2, r3
 800a308:	d92a      	bls.n	800a360 <Process_Data_from_Other+0x258>
	{
		if(Previous_Clock_RCV_SELF_XCHG_CLK != Last_Received_Medha_Self_sharing)
 800a30a:	4b26      	ldr	r3, [pc, #152]	; (800a3a4 <Process_Data_from_Other+0x29c>)
 800a30c:	681a      	ldr	r2, [r3, #0]
 800a30e:	4b16      	ldr	r3, [pc, #88]	; (800a368 <Process_Data_from_Other+0x260>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	429a      	cmp	r2, r3
 800a314:	d024      	beq.n	800a360 <Process_Data_from_Other+0x258>
		{
			Previous_Clock_RCV_SELF_XCHG_CLK = Last_Received_Medha_Self_sharing;
 800a316:	4b14      	ldr	r3, [pc, #80]	; (800a368 <Process_Data_from_Other+0x260>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	4a22      	ldr	r2, [pc, #136]	; (800a3a4 <Process_Data_from_Other+0x29c>)
 800a31c:	6013      	str	r3, [r2, #0]
			printf("CAN Data Not Received from last %lu Seconds\n",(HAL_Elaps_Ticks(Last_Received_Medha_Self_sharing)/1000));
 800a31e:	4b12      	ldr	r3, [pc, #72]	; (800a368 <Process_Data_from_Other+0x260>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	4618      	mov	r0, r3
 800a324:	f004 fb82 	bl	800ea2c <HAL_Elaps_Ticks>
 800a328:	4603      	mov	r3, r0
 800a32a:	4a1f      	ldr	r2, [pc, #124]	; (800a3a8 <Process_Data_from_Other+0x2a0>)
 800a32c:	fba2 2303 	umull	r2, r3, r2, r3
 800a330:	099b      	lsrs	r3, r3, #6
 800a332:	4619      	mov	r1, r3
 800a334:	481d      	ldr	r0, [pc, #116]	; (800a3ac <Process_Data_from_Other+0x2a4>)
 800a336:	f018 f935 	bl	80225a4 <iprintf>
			printf("Last_Received_Medha_Self_sharing:%lu\n",Last_Received_Medha_Self_sharing);
 800a33a:	4b0b      	ldr	r3, [pc, #44]	; (800a368 <Process_Data_from_Other+0x260>)
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	4619      	mov	r1, r3
 800a340:	481b      	ldr	r0, [pc, #108]	; (800a3b0 <Process_Data_from_Other+0x2a8>)
 800a342:	f018 f92f 	bl	80225a4 <iprintf>
			if(CHECKFLAG(CAN_EXCHANGE_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses) == CLEAR)
 800a346:	4b13      	ldr	r3, [pc, #76]	; (800a394 <Process_Data_from_Other+0x28c>)
 800a348:	781b      	ldrb	r3, [r3, #0]
 800a34a:	f003 0302 	and.w	r3, r3, #2
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d106      	bne.n	800a360 <Process_Data_from_Other+0x258>
			{
				SET_BIT_USER(CAN_EXCHANGE_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800a352:	4b10      	ldr	r3, [pc, #64]	; (800a394 <Process_Data_from_Other+0x28c>)
 800a354:	781b      	ldrb	r3, [r3, #0]
 800a356:	f043 0302 	orr.w	r3, r3, #2
 800a35a:	b2da      	uxtb	r2, r3
 800a35c:	4b0d      	ldr	r3, [pc, #52]	; (800a394 <Process_Data_from_Other+0x28c>)
 800a35e:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 800a360:	bf00      	nop
 800a362:	bdb0      	pop	{r4, r5, r7, pc}
 800a364:	200027d0 	.word	0x200027d0
 800a368:	200020c0 	.word	0x200020c0
 800a36c:	20002614 	.word	0x20002614
 800a370:	200020be 	.word	0x200020be
 800a374:	2000261c 	.word	0x2000261c
 800a378:	200020bd 	.word	0x200020bd
 800a37c:	08025688 	.word	0x08025688
 800a380:	080256a0 	.word	0x080256a0
 800a384:	080256b8 	.word	0x080256b8
 800a388:	2000262c 	.word	0x2000262c
 800a38c:	200026b0 	.word	0x200026b0
 800a390:	200025d4 	.word	0x200025d4
 800a394:	20002604 	.word	0x20002604
 800a398:	080256ec 	.word	0x080256ec
 800a39c:	20000304 	.word	0x20000304
 800a3a0:	08025710 	.word	0x08025710
 800a3a4:	200027d4 	.word	0x200027d4
 800a3a8:	10624dd3 	.word	0x10624dd3
 800a3ac:	08025728 	.word	0x08025728
 800a3b0:	08025758 	.word	0x08025758

0800a3b4 <Print_Medha_Self_Details>:


void Print_Medha_Self_Details(void)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	af00      	add	r7, sp, #0
#ifdef EI_1
	printf("\n ______________________________ EI_1_SELF_DETAILS ______________________________ \n");
#endif
#ifdef EI_2
	printf("\n ______________________________ EI_2_SELF_DETAILS ______________________________ \n");
 800a3b8:	482a      	ldr	r0, [pc, #168]	; (800a464 <Print_Medha_Self_Details+0xb0>)
 800a3ba:	f018 f98f 	bl	80226dc <puts>
#endif

	printf("Source Address                :%u\n",EI_data.Medha_Prms_st.Source_Addr);
 800a3be:	4b2a      	ldr	r3, [pc, #168]	; (800a468 <Print_Medha_Self_Details+0xb4>)
 800a3c0:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 800a3c4:	4619      	mov	r1, r3
 800a3c6:	4829      	ldr	r0, [pc, #164]	; (800a46c <Print_Medha_Self_Details+0xb8>)
 800a3c8:	f018 f8ec 	bl	80225a4 <iprintf>
	printf("Destination Address           :%u\n",EI_data.Medha_Prms_st.Dest_Addr);
 800a3cc:	4b26      	ldr	r3, [pc, #152]	; (800a468 <Print_Medha_Self_Details+0xb4>)
 800a3ce:	f8b3 3324 	ldrh.w	r3, [r3, #804]	; 0x324
 800a3d2:	4619      	mov	r1, r3
 800a3d4:	4826      	ldr	r0, [pc, #152]	; (800a470 <Print_Medha_Self_Details+0xbc>)
 800a3d6:	f018 f8e5 	bl	80225a4 <iprintf>
	printf("Configured RS-485 port Number :%u\n",EI_data.Medha_Prms_st.Comport);
 800a3da:	4b23      	ldr	r3, [pc, #140]	; (800a468 <Print_Medha_Self_Details+0xb4>)
 800a3dc:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a3e0:	4619      	mov	r1, r3
 800a3e2:	4824      	ldr	r0, [pc, #144]	; (800a474 <Print_Medha_Self_Details+0xc0>)
 800a3e4:	f018 f8de 	bl	80225a4 <iprintf>
	printf("RS-485_BaudRate               :%lu\n",EI_data.Medha_Prms_st.BaudRate);
 800a3e8:	4b1f      	ldr	r3, [pc, #124]	; (800a468 <Print_Medha_Self_Details+0xb4>)
 800a3ea:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 800a3ee:	4619      	mov	r1, r3
 800a3f0:	4821      	ldr	r0, [pc, #132]	; (800a478 <Print_Medha_Self_Details+0xc4>)
 800a3f2:	f018 f8d7 	bl	80225a4 <iprintf>
	printf("ExchangeAfter PKT Reception_ms:%lu\n",EI_data.Medha_Prms_st.CAN_Xchange_Time);
 800a3f6:	4b1c      	ldr	r3, [pc, #112]	; (800a468 <Print_Medha_Self_Details+0xb4>)
 800a3f8:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 800a3fc:	4619      	mov	r1, r3
 800a3fe:	481f      	ldr	r0, [pc, #124]	; (800a47c <Print_Medha_Self_Details+0xc8>)
 800a400:	f018 f8d0 	bl	80225a4 <iprintf>
	printf("ExchangeAfter PKT Timeout_ms  :%lu\n",EI_data.Medha_Prms_st.CAN_Xchange_Tout);
 800a404:	4b18      	ldr	r3, [pc, #96]	; (800a468 <Print_Medha_Self_Details+0xb4>)
 800a406:	f8d3 333c 	ldr.w	r3, [r3, #828]	; 0x33c
 800a40a:	4619      	mov	r1, r3
 800a40c:	481c      	ldr	r0, [pc, #112]	; (800a480 <Print_Medha_Self_Details+0xcc>)
 800a40e:	f018 f8c9 	bl	80225a4 <iprintf>
	printf("Max_Mismatch_value            :%u\n",EI_data.Medha_Prms_st.Max_Mismatch_value);
 800a412:	4b15      	ldr	r3, [pc, #84]	; (800a468 <Print_Medha_Self_Details+0xb4>)
 800a414:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a418:	4619      	mov	r1, r3
 800a41a:	481a      	ldr	r0, [pc, #104]	; (800a484 <Print_Medha_Self_Details+0xd0>)
 800a41c:	f018 f8c2 	bl	80225a4 <iprintf>
	printf("NoofRelays                    :%u\n",EI_data.Medha_Prms_st.NoofRelays);
 800a420:	4b11      	ldr	r3, [pc, #68]	; (800a468 <Print_Medha_Self_Details+0xb4>)
 800a422:	f8b3 3328 	ldrh.w	r3, [r3, #808]	; 0x328
 800a426:	4619      	mov	r1, r3
 800a428:	4817      	ldr	r0, [pc, #92]	; (800a488 <Print_Medha_Self_Details+0xd4>)
 800a42a:	f018 f8bb 	bl	80225a4 <iprintf>
	printf("Packet_Interval_ms            :%lu\n",EI_data.Medha_Prms_st.Packet_Interval_ms);
 800a42e:	4b0e      	ldr	r3, [pc, #56]	; (800a468 <Print_Medha_Self_Details+0xb4>)
 800a430:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 800a434:	4619      	mov	r1, r3
 800a436:	4815      	ldr	r0, [pc, #84]	; (800a48c <Print_Medha_Self_Details+0xd8>)
 800a438:	f018 f8b4 	bl	80225a4 <iprintf>
	printf("Packet_Timeout_Count          :%u\n",EI_data.Medha_Prms_st.Packet_Timeout_Count);
 800a43c:	4b0a      	ldr	r3, [pc, #40]	; (800a468 <Print_Medha_Self_Details+0xb4>)
 800a43e:	f8b3 3326 	ldrh.w	r3, [r3, #806]	; 0x326
 800a442:	4619      	mov	r1, r3
 800a444:	4812      	ldr	r0, [pc, #72]	; (800a490 <Print_Medha_Self_Details+0xdc>)
 800a446:	f018 f8ad 	bl	80225a4 <iprintf>
	printf("SendSignal2MIE_CLK            :%lu\n",EI_data.Medha_Prms_st.SendSignal2MIE_CLK);
 800a44a:	4b07      	ldr	r3, [pc, #28]	; (800a468 <Print_Medha_Self_Details+0xb4>)
 800a44c:	f8d3 3334 	ldr.w	r3, [r3, #820]	; 0x334
 800a450:	4619      	mov	r1, r3
 800a452:	4810      	ldr	r0, [pc, #64]	; (800a494 <Print_Medha_Self_Details+0xe0>)
 800a454:	f018 f8a6 	bl	80225a4 <iprintf>

#ifdef EI_1
	printf("\n ______________________________ EI_1_SELF_DETAILS ______________________________ \n");
#endif
#ifdef EI_2
	printf("\n ______________________________ EI_2_SELF_DETAILS ______________________________ \n");
 800a458:	4802      	ldr	r0, [pc, #8]	; (800a464 <Print_Medha_Self_Details+0xb0>)
 800a45a:	f018 f93f 	bl	80226dc <puts>
#endif
}
 800a45e:	bf00      	nop
 800a460:	bd80      	pop	{r7, pc}
 800a462:	bf00      	nop
 800a464:	08025780 	.word	0x08025780
 800a468:	20000304 	.word	0x20000304
 800a46c:	080257d4 	.word	0x080257d4
 800a470:	080257f8 	.word	0x080257f8
 800a474:	0802581c 	.word	0x0802581c
 800a478:	08025840 	.word	0x08025840
 800a47c:	08025864 	.word	0x08025864
 800a480:	08025888 	.word	0x08025888
 800a484:	080258ac 	.word	0x080258ac
 800a488:	080258d0 	.word	0x080258d0
 800a48c:	080258f4 	.word	0x080258f4
 800a490:	08025918 	.word	0x08025918
 800a494:	0802593c 	.word	0x0802593c

0800a498 <CheckforMedhaCMD>:


void CheckforMedhaCMD(void)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b09a      	sub	sp, #104	; 0x68
 800a49c:	af00      	add	r7, sp, #0
	//	unsigned char ch[20] = {0,},i=0;
	uint8_t IS_COMMAND_RECEIVED = NO;
 800a49e:	2300      	movs	r3, #0
 800a4a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t Index = 0;
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t Byte = 0;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	uint8_t Buffer[100] = {0,};
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	603b      	str	r3, [r7, #0]
 800a4b4:	1d3b      	adds	r3, r7, #4
 800a4b6:	2260      	movs	r2, #96	; 0x60
 800a4b8:	2100      	movs	r1, #0
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f017 ff8a 	bl	80223d4 <memset>
	if(HAL_Elaps_Ticks(Isp_Intr_Clk) < 10)
 800a4c0:	4bb9      	ldr	r3, [pc, #740]	; (800a7a8 <CheckforMedhaCMD+0x310>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	f004 fab1 	bl	800ea2c <HAL_Elaps_Ticks>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	2b09      	cmp	r3, #9
 800a4ce:	f240 81ad 	bls.w	800a82c <CheckforMedhaCMD+0x394>
	{
		return;
	}
	else
	{
		while(Com_DataReady(ISP_PORT))
 800a4d2:	e010      	b.n	800a4f6 <CheckforMedhaCMD+0x5e>
		{
			Byte = Com_Get_Byte(ISP_PORT);
 800a4d4:	2000      	movs	r0, #0
 800a4d6:	f00a fd33 	bl	8014f40 <Com_Get_Byte>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			Buffer[Index++] = Byte;
 800a4e0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800a4e4:	1c5a      	adds	r2, r3, #1
 800a4e6:	f887 2066 	strb.w	r2, [r7, #102]	; 0x66
 800a4ea:	3368      	adds	r3, #104	; 0x68
 800a4ec:	443b      	add	r3, r7
 800a4ee:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 800a4f2:	f803 2c68 	strb.w	r2, [r3, #-104]
		while(Com_DataReady(ISP_PORT))
 800a4f6:	2000      	movs	r0, #0
 800a4f8:	f00a fce2 	bl	8014ec0 <Com_DataReady>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d1e8      	bne.n	800a4d4 <CheckforMedhaCMD+0x3c>
		}
		if(Index>0)
 800a502:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800a506:	2b00      	cmp	r3, #0
 800a508:	f000 8144 	beq.w	800a794 <CheckforMedhaCMD+0x2fc>
		{
			Buffer[Index] = 0;
 800a50c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800a510:	3368      	adds	r3, #104	; 0x68
 800a512:	443b      	add	r3, r7
 800a514:	2200      	movs	r2, #0
 800a516:	f803 2c68 	strb.w	r2, [r3, #-104]
			printf("Received from ISP:%s\n",Buffer);
 800a51a:	463b      	mov	r3, r7
 800a51c:	4619      	mov	r1, r3
 800a51e:	48a3      	ldr	r0, [pc, #652]	; (800a7ac <CheckforMedhaCMD+0x314>)
 800a520:	f018 f840 	bl	80225a4 <iprintf>
			switch(Is_MedhaCommand_Valid(Buffer,Index))
 800a524:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 800a528:	463b      	mov	r3, r7
 800a52a:	4611      	mov	r1, r2
 800a52c:	4618      	mov	r0, r3
 800a52e:	f000 fa0d 	bl	800a94c <Is_MedhaCommand_Valid>
 800a532:	4603      	mov	r3, r0
 800a534:	2b0c      	cmp	r3, #12
 800a536:	f200 8129 	bhi.w	800a78c <CheckforMedhaCMD+0x2f4>
 800a53a:	a201      	add	r2, pc, #4	; (adr r2, 800a540 <CheckforMedhaCMD+0xa8>)
 800a53c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a540:	0800a575 	.word	0x0800a575
 800a544:	0800a583 	.word	0x0800a583
 800a548:	0800a5e7 	.word	0x0800a5e7
 800a54c:	0800a609 	.word	0x0800a609
 800a550:	0800a631 	.word	0x0800a631
 800a554:	0800a659 	.word	0x0800a659
 800a558:	0800a681 	.word	0x0800a681
 800a55c:	0800a6a9 	.word	0x0800a6a9
 800a560:	0800a6d1 	.word	0x0800a6d1
 800a564:	0800a6f9 	.word	0x0800a6f9
 800a568:	0800a721 	.word	0x0800a721
 800a56c:	0800a749 	.word	0x0800a749
 800a570:	0800a771 	.word	0x0800a771
			{
			case ZERO:
				Dats_Request_Flag = 1;
 800a574:	4b8e      	ldr	r3, [pc, #568]	; (800a7b0 <CheckforMedhaCMD+0x318>)
 800a576:	2201      	movs	r2, #1
 800a578:	701a      	strb	r2, [r3, #0]
				printf("\n*************PLEASE LOAD EI DATS USING APPLICATION************\n");
 800a57a:	488e      	ldr	r0, [pc, #568]	; (800a7b4 <CheckforMedhaCMD+0x31c>)
 800a57c:	f018 f8ae 	bl	80226dc <puts>
				break;
 800a580:	e109      	b.n	800a796 <CheckforMedhaCMD+0x2fe>
			case ONE:
				printf("Received \"%s\":%u\n",Commands_ListMedha[ONE],(Buffer[Index-1])-'0');
 800a582:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800a586:	3b01      	subs	r3, #1
 800a588:	3368      	adds	r3, #104	; 0x68
 800a58a:	443b      	add	r3, r7
 800a58c:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800a590:	3b30      	subs	r3, #48	; 0x30
 800a592:	461a      	mov	r2, r3
 800a594:	4988      	ldr	r1, [pc, #544]	; (800a7b8 <CheckforMedhaCMD+0x320>)
 800a596:	4889      	ldr	r0, [pc, #548]	; (800a7bc <CheckforMedhaCMD+0x324>)
 800a598:	f018 f804 	bl	80225a4 <iprintf>
				if( (((Buffer[Index-1])-'0') >= 0) && ((Buffer[Index-1])-'0') < 3)
 800a59c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800a5a0:	3b01      	subs	r3, #1
 800a5a2:	3368      	adds	r3, #104	; 0x68
 800a5a4:	443b      	add	r3, r7
 800a5a6:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800a5aa:	2b2f      	cmp	r3, #47	; 0x2f
 800a5ac:	d914      	bls.n	800a5d8 <CheckforMedhaCMD+0x140>
 800a5ae:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800a5b2:	3b01      	subs	r3, #1
 800a5b4:	3368      	adds	r3, #104	; 0x68
 800a5b6:	443b      	add	r3, r7
 800a5b8:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800a5bc:	2b32      	cmp	r3, #50	; 0x32
 800a5be:	d80b      	bhi.n	800a5d8 <CheckforMedhaCMD+0x140>
				{
					Debug_flag = (Buffer[Index-1])-'0';
 800a5c0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800a5c4:	3b01      	subs	r3, #1
 800a5c6:	3368      	adds	r3, #104	; 0x68
 800a5c8:	443b      	add	r3, r7
 800a5ca:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800a5ce:	3b30      	subs	r3, #48	; 0x30
 800a5d0:	b2da      	uxtb	r2, r3
 800a5d2:	4b7b      	ldr	r3, [pc, #492]	; (800a7c0 <CheckforMedhaCMD+0x328>)
 800a5d4:	701a      	strb	r2, [r3, #0]
 800a5d6:	e002      	b.n	800a5de <CheckforMedhaCMD+0x146>
				}
				else
				{
					printf("Please Send Valid Command\n");
 800a5d8:	487a      	ldr	r0, [pc, #488]	; (800a7c4 <CheckforMedhaCMD+0x32c>)
 800a5da:	f018 f87f 	bl	80226dc <puts>
				}
				IS_COMMAND_RECEIVED = YES;
 800a5de:	2301      	movs	r3, #1
 800a5e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800a5e4:	e0d7      	b.n	800a796 <CheckforMedhaCMD+0x2fe>

			case TWO:
				printf("Received %s\n",Commands_ListMedha[TWO]);
 800a5e6:	4978      	ldr	r1, [pc, #480]	; (800a7c8 <CheckforMedhaCMD+0x330>)
 800a5e8:	4878      	ldr	r0, [pc, #480]	; (800a7cc <CheckforMedhaCMD+0x334>)
 800a5ea:	f017 ffdb 	bl	80225a4 <iprintf>
				printf("INVALID_DES_SYS_TYPE\n");
 800a5ee:	4878      	ldr	r0, [pc, #480]	; (800a7d0 <CheckforMedhaCMD+0x338>)
 800a5f0:	f018 f874 	bl	80226dc <puts>
				SET_BIT_USER(INVALID_DES_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800a5f4:	4b77      	ldr	r3, [pc, #476]	; (800a7d4 <CheckforMedhaCMD+0x33c>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f043 0301 	orr.w	r3, r3, #1
 800a5fc:	4a75      	ldr	r2, [pc, #468]	; (800a7d4 <CheckforMedhaCMD+0x33c>)
 800a5fe:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800a600:	2301      	movs	r3, #1
 800a602:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800a606:	e0c6      	b.n	800a796 <CheckforMedhaCMD+0x2fe>

			case THREE:
				printf("Received %s\n",Commands_ListMedha[THREE]);
 800a608:	4973      	ldr	r1, [pc, #460]	; (800a7d8 <CheckforMedhaCMD+0x340>)
 800a60a:	4870      	ldr	r0, [pc, #448]	; (800a7cc <CheckforMedhaCMD+0x334>)
 800a60c:	f017 ffca 	bl	80225a4 <iprintf>
				printf("INVALID_SRC_SYS_TYPE\n");
 800a610:	4872      	ldr	r0, [pc, #456]	; (800a7dc <CheckforMedhaCMD+0x344>)
 800a612:	f018 f863 	bl	80226dc <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800a616:	4b6f      	ldr	r3, [pc, #444]	; (800a7d4 <CheckforMedhaCMD+0x33c>)
 800a618:	2200      	movs	r2, #0
 800a61a:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800a61c:	4b6d      	ldr	r3, [pc, #436]	; (800a7d4 <CheckforMedhaCMD+0x33c>)
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f043 0302 	orr.w	r3, r3, #2
 800a624:	4a6b      	ldr	r2, [pc, #428]	; (800a7d4 <CheckforMedhaCMD+0x33c>)
 800a626:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800a628:	2301      	movs	r3, #1
 800a62a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800a62e:	e0b2      	b.n	800a796 <CheckforMedhaCMD+0x2fe>

			case FOUR:
				printf("Received %s\n",Commands_ListMedha[FOUR]);
 800a630:	496b      	ldr	r1, [pc, #428]	; (800a7e0 <CheckforMedhaCMD+0x348>)
 800a632:	4866      	ldr	r0, [pc, #408]	; (800a7cc <CheckforMedhaCMD+0x334>)
 800a634:	f017 ffb6 	bl	80225a4 <iprintf>
				printf("INVALID_SRC_ADDR\n");
 800a638:	486a      	ldr	r0, [pc, #424]	; (800a7e4 <CheckforMedhaCMD+0x34c>)
 800a63a:	f018 f84f 	bl	80226dc <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800a63e:	4b65      	ldr	r3, [pc, #404]	; (800a7d4 <CheckforMedhaCMD+0x33c>)
 800a640:	2200      	movs	r2, #0
 800a642:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_ADDR,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800a644:	4b63      	ldr	r3, [pc, #396]	; (800a7d4 <CheckforMedhaCMD+0x33c>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f043 0304 	orr.w	r3, r3, #4
 800a64c:	4a61      	ldr	r2, [pc, #388]	; (800a7d4 <CheckforMedhaCMD+0x33c>)
 800a64e:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800a650:	2301      	movs	r3, #1
 800a652:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800a656:	e09e      	b.n	800a796 <CheckforMedhaCMD+0x2fe>

			case FIVE:
				printf("Received %s\n",Commands_ListMedha[FIVE]);
 800a658:	4963      	ldr	r1, [pc, #396]	; (800a7e8 <CheckforMedhaCMD+0x350>)
 800a65a:	485c      	ldr	r0, [pc, #368]	; (800a7cc <CheckforMedhaCMD+0x334>)
 800a65c:	f017 ffa2 	bl	80225a4 <iprintf>
				printf("INVALID_DES_PORT\n");
 800a660:	4862      	ldr	r0, [pc, #392]	; (800a7ec <CheckforMedhaCMD+0x354>)
 800a662:	f018 f83b 	bl	80226dc <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800a666:	4b5b      	ldr	r3, [pc, #364]	; (800a7d4 <CheckforMedhaCMD+0x33c>)
 800a668:	2200      	movs	r2, #0
 800a66a:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_DES_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800a66c:	4b59      	ldr	r3, [pc, #356]	; (800a7d4 <CheckforMedhaCMD+0x33c>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f043 0308 	orr.w	r3, r3, #8
 800a674:	4a57      	ldr	r2, [pc, #348]	; (800a7d4 <CheckforMedhaCMD+0x33c>)
 800a676:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800a678:	2301      	movs	r3, #1
 800a67a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800a67e:	e08a      	b.n	800a796 <CheckforMedhaCMD+0x2fe>

			case SIX:
				printf("Received %s\n",Commands_ListMedha[SIX]);
 800a680:	495b      	ldr	r1, [pc, #364]	; (800a7f0 <CheckforMedhaCMD+0x358>)
 800a682:	4852      	ldr	r0, [pc, #328]	; (800a7cc <CheckforMedhaCMD+0x334>)
 800a684:	f017 ff8e 	bl	80225a4 <iprintf>
				printf("INVALID_SRC_PORT\n");
 800a688:	485a      	ldr	r0, [pc, #360]	; (800a7f4 <CheckforMedhaCMD+0x35c>)
 800a68a:	f018 f827 	bl	80226dc <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800a68e:	4b51      	ldr	r3, [pc, #324]	; (800a7d4 <CheckforMedhaCMD+0x33c>)
 800a690:	2200      	movs	r2, #0
 800a692:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800a694:	4b4f      	ldr	r3, [pc, #316]	; (800a7d4 <CheckforMedhaCMD+0x33c>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f043 0310 	orr.w	r3, r3, #16
 800a69c:	4a4d      	ldr	r2, [pc, #308]	; (800a7d4 <CheckforMedhaCMD+0x33c>)
 800a69e:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800a6a6:	e076      	b.n	800a796 <CheckforMedhaCMD+0x2fe>
			case SEVEN:
				printf("Received %s\n",Commands_ListMedha[SEVEN]);
 800a6a8:	4953      	ldr	r1, [pc, #332]	; (800a7f8 <CheckforMedhaCMD+0x360>)
 800a6aa:	4848      	ldr	r0, [pc, #288]	; (800a7cc <CheckforMedhaCMD+0x334>)
 800a6ac:	f017 ff7a 	bl	80225a4 <iprintf>
				printf("INVALID_PACKET_CRC_SIEMENS\n");
 800a6b0:	4852      	ldr	r0, [pc, #328]	; (800a7fc <CheckforMedhaCMD+0x364>)
 800a6b2:	f018 f813 	bl	80226dc <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800a6b6:	4b47      	ldr	r3, [pc, #284]	; (800a7d4 <CheckforMedhaCMD+0x33c>)
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800a6bc:	4b45      	ldr	r3, [pc, #276]	; (800a7d4 <CheckforMedhaCMD+0x33c>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f043 0320 	orr.w	r3, r3, #32
 800a6c4:	4a43      	ldr	r2, [pc, #268]	; (800a7d4 <CheckforMedhaCMD+0x33c>)
 800a6c6:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800a6ce:	e062      	b.n	800a796 <CheckforMedhaCMD+0x2fe>
			case EIGHT:
				printf("Received %s Command\n",Commands_ListMedha[EIGHT]);
 800a6d0:	494b      	ldr	r1, [pc, #300]	; (800a800 <CheckforMedhaCMD+0x368>)
 800a6d2:	484c      	ldr	r0, [pc, #304]	; (800a804 <CheckforMedhaCMD+0x36c>)
 800a6d4:	f017 ff66 	bl	80225a4 <iprintf>
				printf("NO_REPLY_FROM_EIPC\n");
 800a6d8:	484b      	ldr	r0, [pc, #300]	; (800a808 <CheckforMedhaCMD+0x370>)
 800a6da:	f017 ffff 	bl	80226dc <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800a6de:	4b3d      	ldr	r3, [pc, #244]	; (800a7d4 <CheckforMedhaCMD+0x33c>)
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(NO_REPLY_FROM_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800a6e4:	4b3b      	ldr	r3, [pc, #236]	; (800a7d4 <CheckforMedhaCMD+0x33c>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6ec:	4a39      	ldr	r2, [pc, #228]	; (800a7d4 <CheckforMedhaCMD+0x33c>)
 800a6ee:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800a6f0:	2301      	movs	r3, #1
 800a6f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800a6f6:	e04e      	b.n	800a796 <CheckforMedhaCMD+0x2fe>
			case NINE:
				printf("Received %s\n",Commands_ListMedha[NINE]);
 800a6f8:	4944      	ldr	r1, [pc, #272]	; (800a80c <CheckforMedhaCMD+0x374>)
 800a6fa:	4834      	ldr	r0, [pc, #208]	; (800a7cc <CheckforMedhaCMD+0x334>)
 800a6fc:	f017 ff52 	bl	80225a4 <iprintf>
				printf("INVALID_PACKET_CRC_EIPC\n");
 800a700:	4843      	ldr	r0, [pc, #268]	; (800a810 <CheckforMedhaCMD+0x378>)
 800a702:	f017 ffeb 	bl	80226dc <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800a706:	4b33      	ldr	r3, [pc, #204]	; (800a7d4 <CheckforMedhaCMD+0x33c>)
 800a708:	2200      	movs	r2, #0
 800a70a:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800a70c:	4b31      	ldr	r3, [pc, #196]	; (800a7d4 <CheckforMedhaCMD+0x33c>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a714:	4a2f      	ldr	r2, [pc, #188]	; (800a7d4 <CheckforMedhaCMD+0x33c>)
 800a716:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800a718:	2301      	movs	r3, #1
 800a71a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800a71e:	e03a      	b.n	800a796 <CheckforMedhaCMD+0x2fe>
			case TEN:
				printf("Received %s\n",Commands_ListMedha[TEN]);
 800a720:	493c      	ldr	r1, [pc, #240]	; (800a814 <CheckforMedhaCMD+0x37c>)
 800a722:	482a      	ldr	r0, [pc, #168]	; (800a7cc <CheckforMedhaCMD+0x334>)
 800a724:	f017 ff3e 	bl	80225a4 <iprintf>
				printf("INVALID_COMP_PACKET_CRC_SIEMENS\n");
 800a728:	483b      	ldr	r0, [pc, #236]	; (800a818 <CheckforMedhaCMD+0x380>)
 800a72a:	f017 ffd7 	bl	80226dc <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800a72e:	4b29      	ldr	r3, [pc, #164]	; (800a7d4 <CheckforMedhaCMD+0x33c>)
 800a730:	2200      	movs	r2, #0
 800a732:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_COMP_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800a734:	4b27      	ldr	r3, [pc, #156]	; (800a7d4 <CheckforMedhaCMD+0x33c>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a73c:	4a25      	ldr	r2, [pc, #148]	; (800a7d4 <CheckforMedhaCMD+0x33c>)
 800a73e:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800a740:	2301      	movs	r3, #1
 800a742:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800a746:	e026      	b.n	800a796 <CheckforMedhaCMD+0x2fe>
			case ELEVEN:
				printf("Received %s\n",Commands_ListMedha[ELEVEN]);
 800a748:	4934      	ldr	r1, [pc, #208]	; (800a81c <CheckforMedhaCMD+0x384>)
 800a74a:	4820      	ldr	r0, [pc, #128]	; (800a7cc <CheckforMedhaCMD+0x334>)
 800a74c:	f017 ff2a 	bl	80225a4 <iprintf>
				printf("INVALID_COMP_PACKET_CRC_EIPC\n");
 800a750:	4833      	ldr	r0, [pc, #204]	; (800a820 <CheckforMedhaCMD+0x388>)
 800a752:	f017 ffc3 	bl	80226dc <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800a756:	4b1f      	ldr	r3, [pc, #124]	; (800a7d4 <CheckforMedhaCMD+0x33c>)
 800a758:	2200      	movs	r2, #0
 800a75a:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_COMP_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800a75c:	4b1d      	ldr	r3, [pc, #116]	; (800a7d4 <CheckforMedhaCMD+0x33c>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a764:	4a1b      	ldr	r2, [pc, #108]	; (800a7d4 <CheckforMedhaCMD+0x33c>)
 800a766:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800a768:	2301      	movs	r3, #1
 800a76a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800a76e:	e012      	b.n	800a796 <CheckforMedhaCMD+0x2fe>
			case TWELVE:
				printf("Received %s\n",Commands_ListMedha[TWELVE]);
 800a770:	492c      	ldr	r1, [pc, #176]	; (800a824 <CheckforMedhaCMD+0x38c>)
 800a772:	4816      	ldr	r0, [pc, #88]	; (800a7cc <CheckforMedhaCMD+0x334>)
 800a774:	f017 ff16 	bl	80225a4 <iprintf>
				printf("CLEAR ALL\n");
 800a778:	482b      	ldr	r0, [pc, #172]	; (800a828 <CheckforMedhaCMD+0x390>)
 800a77a:	f017 ffaf 	bl	80226dc <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800a77e:	4b15      	ldr	r3, [pc, #84]	; (800a7d4 <CheckforMedhaCMD+0x33c>)
 800a780:	2200      	movs	r2, #0
 800a782:	601a      	str	r2, [r3, #0]
				IS_COMMAND_RECEIVED = YES;
 800a784:	2301      	movs	r3, #1
 800a786:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800a78a:	e004      	b.n	800a796 <CheckforMedhaCMD+0x2fe>
			default:
				printf("Please Send Valid Command\n");
 800a78c:	480d      	ldr	r0, [pc, #52]	; (800a7c4 <CheckforMedhaCMD+0x32c>)
 800a78e:	f017 ffa5 	bl	80226dc <puts>
 800a792:	e000      	b.n	800a796 <CheckforMedhaCMD+0x2fe>
			}
		}
 800a794:	bf00      	nop

		if(IS_COMMAND_RECEIVED == YES)
 800a796:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a79a:	2b01      	cmp	r3, #1
 800a79c:	d147      	bne.n	800a82e <CheckforMedhaCMD+0x396>
		{
			TransmitCanPkt(CAN_FAULT_INJECTION);
 800a79e:	f240 2005 	movw	r0, #517	; 0x205
 800a7a2:	f004 fec5 	bl	800f530 <TransmitCanPkt>
 800a7a6:	e042      	b.n	800a82e <CheckforMedhaCMD+0x396>
 800a7a8:	2000a00c 	.word	0x2000a00c
 800a7ac:	08025960 	.word	0x08025960
 800a7b0:	20000644 	.word	0x20000644
 800a7b4:	08025978 	.word	0x08025978
 800a7b8:	200020f6 	.word	0x200020f6
 800a7bc:	080259b8 	.word	0x080259b8
 800a7c0:	20000645 	.word	0x20000645
 800a7c4:	080259cc 	.word	0x080259cc
 800a7c8:	20002128 	.word	0x20002128
 800a7cc:	080259e8 	.word	0x080259e8
 800a7d0:	080259f8 	.word	0x080259f8
 800a7d4:	2000347c 	.word	0x2000347c
 800a7d8:	2000215a 	.word	0x2000215a
 800a7dc:	08025a10 	.word	0x08025a10
 800a7e0:	2000218c 	.word	0x2000218c
 800a7e4:	08025a28 	.word	0x08025a28
 800a7e8:	200021be 	.word	0x200021be
 800a7ec:	08025a3c 	.word	0x08025a3c
 800a7f0:	200021f0 	.word	0x200021f0
 800a7f4:	08025a50 	.word	0x08025a50
 800a7f8:	20002222 	.word	0x20002222
 800a7fc:	08025a64 	.word	0x08025a64
 800a800:	20002254 	.word	0x20002254
 800a804:	08025a80 	.word	0x08025a80
 800a808:	08025a98 	.word	0x08025a98
 800a80c:	20002286 	.word	0x20002286
 800a810:	08025aac 	.word	0x08025aac
 800a814:	200022b8 	.word	0x200022b8
 800a818:	08025ac4 	.word	0x08025ac4
 800a81c:	200022ea 	.word	0x200022ea
 800a820:	08025ae4 	.word	0x08025ae4
 800a824:	2000231c 	.word	0x2000231c
 800a828:	08025b04 	.word	0x08025b04
		return;
 800a82c:	bf00      	nop
		}
	}
}
 800a82e:	3768      	adds	r7, #104	; 0x68
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}

0800a834 <Update_MedhaCommands>:


void Update_MedhaCommands(void)
{
 800a834:	b480      	push	{r7}
 800a836:	b083      	sub	sp, #12
 800a838:	af00      	add	r7, sp, #0
	uint8_t CmdCnt = 0;
 800a83a:	2300      	movs	r3, #0
 800a83c:	71fb      	strb	r3, [r7, #7]

	Commands_ListMedha[CmdCnt][0] = 0X24;
 800a83e:	79fb      	ldrb	r3, [r7, #7]
 800a840:	4a3d      	ldr	r2, [pc, #244]	; (800a938 <Update_MedhaCommands+0x104>)
 800a842:	2132      	movs	r1, #50	; 0x32
 800a844:	fb01 f303 	mul.w	r3, r1, r3
 800a848:	4413      	add	r3, r2
 800a84a:	2224      	movs	r2, #36	; 0x24
 800a84c:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][1] = 0X01;
 800a84e:	79fb      	ldrb	r3, [r7, #7]
 800a850:	4a39      	ldr	r2, [pc, #228]	; (800a938 <Update_MedhaCommands+0x104>)
 800a852:	2132      	movs	r1, #50	; 0x32
 800a854:	fb01 f303 	mul.w	r3, r1, r3
 800a858:	4413      	add	r3, r2
 800a85a:	3301      	adds	r3, #1
 800a85c:	2201      	movs	r2, #1
 800a85e:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][2] = 0X30;
 800a860:	79fb      	ldrb	r3, [r7, #7]
 800a862:	4a35      	ldr	r2, [pc, #212]	; (800a938 <Update_MedhaCommands+0x104>)
 800a864:	2132      	movs	r1, #50	; 0x32
 800a866:	fb01 f303 	mul.w	r3, r1, r3
 800a86a:	4413      	add	r3, r2
 800a86c:	3302      	adds	r3, #2
 800a86e:	2230      	movs	r2, #48	; 0x30
 800a870:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][3] = 0X40;
 800a872:	79fb      	ldrb	r3, [r7, #7]
 800a874:	4a30      	ldr	r2, [pc, #192]	; (800a938 <Update_MedhaCommands+0x104>)
 800a876:	2132      	movs	r1, #50	; 0x32
 800a878:	fb01 f303 	mul.w	r3, r1, r3
 800a87c:	4413      	add	r3, r2
 800a87e:	3303      	adds	r3, #3
 800a880:	2240      	movs	r2, #64	; 0x40
 800a882:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][4] = 0XC0;
 800a884:	79fb      	ldrb	r3, [r7, #7]
 800a886:	4a2c      	ldr	r2, [pc, #176]	; (800a938 <Update_MedhaCommands+0x104>)
 800a888:	2132      	movs	r1, #50	; 0x32
 800a88a:	fb01 f303 	mul.w	r3, r1, r3
 800a88e:	4413      	add	r3, r2
 800a890:	3304      	adds	r3, #4
 800a892:	22c0      	movs	r2, #192	; 0xc0
 800a894:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][5] = 0X4E;
 800a896:	79fb      	ldrb	r3, [r7, #7]
 800a898:	4a27      	ldr	r2, [pc, #156]	; (800a938 <Update_MedhaCommands+0x104>)
 800a89a:	2132      	movs	r1, #50	; 0x32
 800a89c:	fb01 f303 	mul.w	r3, r1, r3
 800a8a0:	4413      	add	r3, r2
 800a8a2:	3305      	adds	r3, #5
 800a8a4:	224e      	movs	r2, #78	; 0x4e
 800a8a6:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][6] = 0X26;
 800a8a8:	79fb      	ldrb	r3, [r7, #7]
 800a8aa:	4a23      	ldr	r2, [pc, #140]	; (800a938 <Update_MedhaCommands+0x104>)
 800a8ac:	2132      	movs	r1, #50	; 0x32
 800a8ae:	fb01 f303 	mul.w	r3, r1, r3
 800a8b2:	4413      	add	r3, r2
 800a8b4:	3306      	adds	r3, #6
 800a8b6:	2226      	movs	r2, #38	; 0x26
 800a8b8:	701a      	strb	r2, [r3, #0]
	++CmdCnt;
 800a8ba:	79fb      	ldrb	r3, [r7, #7]
 800a8bc:	3301      	adds	r3, #1
 800a8be:	71fb      	strb	r3, [r7, #7]

	strcpy( (char *)Commands_ListMedha[CmdCnt++], (const char *)"DEBUG_MODE");
 800a8c0:	79fb      	ldrb	r3, [r7, #7]
 800a8c2:	1c5a      	adds	r2, r3, #1
 800a8c4:	71fa      	strb	r2, [r7, #7]
 800a8c6:	461a      	mov	r2, r3
 800a8c8:	2332      	movs	r3, #50	; 0x32
 800a8ca:	fb02 f303 	mul.w	r3, r2, r3
 800a8ce:	4a1a      	ldr	r2, [pc, #104]	; (800a938 <Update_MedhaCommands+0x104>)
 800a8d0:	4413      	add	r3, r2
 800a8d2:	491a      	ldr	r1, [pc, #104]	; (800a93c <Update_MedhaCommands+0x108>)
 800a8d4:	461a      	mov	r2, r3
 800a8d6:	460b      	mov	r3, r1
 800a8d8:	cb03      	ldmia	r3!, {r0, r1}
 800a8da:	6010      	str	r0, [r2, #0]
 800a8dc:	6051      	str	r1, [r2, #4]
 800a8de:	8819      	ldrh	r1, [r3, #0]
 800a8e0:	789b      	ldrb	r3, [r3, #2]
 800a8e2:	8111      	strh	r1, [r2, #8]
 800a8e4:	7293      	strb	r3, [r2, #10]
	strcpy( (char *)Commands_ListMedha[CmdCnt++], (const char *)"CLEAR_ALL");
 800a8e6:	79fb      	ldrb	r3, [r7, #7]
 800a8e8:	1c5a      	adds	r2, r3, #1
 800a8ea:	71fa      	strb	r2, [r7, #7]
 800a8ec:	461a      	mov	r2, r3
 800a8ee:	2332      	movs	r3, #50	; 0x32
 800a8f0:	fb02 f303 	mul.w	r3, r2, r3
 800a8f4:	4a10      	ldr	r2, [pc, #64]	; (800a938 <Update_MedhaCommands+0x104>)
 800a8f6:	4413      	add	r3, r2
 800a8f8:	4911      	ldr	r1, [pc, #68]	; (800a940 <Update_MedhaCommands+0x10c>)
 800a8fa:	461a      	mov	r2, r3
 800a8fc:	460b      	mov	r3, r1
 800a8fe:	cb03      	ldmia	r3!, {r0, r1}
 800a900:	6010      	str	r0, [r2, #0]
 800a902:	6051      	str	r1, [r2, #4]
 800a904:	881b      	ldrh	r3, [r3, #0]
 800a906:	8113      	strh	r3, [r2, #8]
	strcpy( (char *)Commands_ListMedha[CmdCnt++], (const char *)"HELP");
 800a908:	79fb      	ldrb	r3, [r7, #7]
 800a90a:	1c5a      	adds	r2, r3, #1
 800a90c:	71fa      	strb	r2, [r7, #7]
 800a90e:	461a      	mov	r2, r3
 800a910:	2332      	movs	r3, #50	; 0x32
 800a912:	fb02 f303 	mul.w	r3, r2, r3
 800a916:	4a08      	ldr	r2, [pc, #32]	; (800a938 <Update_MedhaCommands+0x104>)
 800a918:	4413      	add	r3, r2
 800a91a:	4a0a      	ldr	r2, [pc, #40]	; (800a944 <Update_MedhaCommands+0x110>)
 800a91c:	6810      	ldr	r0, [r2, #0]
 800a91e:	6018      	str	r0, [r3, #0]
 800a920:	7912      	ldrb	r2, [r2, #4]
 800a922:	711a      	strb	r2, [r3, #4]
	Commands_Count =  CmdCnt;
 800a924:	4a08      	ldr	r2, [pc, #32]	; (800a948 <Update_MedhaCommands+0x114>)
 800a926:	79fb      	ldrb	r3, [r7, #7]
 800a928:	7013      	strb	r3, [r2, #0]
}
 800a92a:	bf00      	nop
 800a92c:	370c      	adds	r7, #12
 800a92e:	46bd      	mov	sp, r7
 800a930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a934:	4770      	bx	lr
 800a936:	bf00      	nop
 800a938:	200020c4 	.word	0x200020c4
 800a93c:	08025b10 	.word	0x08025b10
 800a940:	08025b1c 	.word	0x08025b1c
 800a944:	08025b28 	.word	0x08025b28
 800a948:	200024ac 	.word	0x200024ac

0800a94c <Is_MedhaCommand_Valid>:

uint8_t Is_MedhaCommand_Valid(uint8_t *Buffer,uint8_t Length)
{
 800a94c:	b590      	push	{r4, r7, lr}
 800a94e:	b085      	sub	sp, #20
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
 800a954:	460b      	mov	r3, r1
 800a956:	70fb      	strb	r3, [r7, #3]
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 800a958:	2300      	movs	r3, #0
 800a95a:	73fb      	strb	r3, [r7, #15]
 800a95c:	e01c      	b.n	800a998 <Is_MedhaCommand_Valid+0x4c>
	{
		//		if(strstr((char *)Buffer,(char *)Commands_ListMedha[Traverser]) != NULL)
		if(memcmp(Buffer,Commands_ListMedha[Traverser],strlen((char *)Commands_ListMedha[Traverser])) == 0)
 800a95e:	7bfb      	ldrb	r3, [r7, #15]
 800a960:	2232      	movs	r2, #50	; 0x32
 800a962:	fb02 f303 	mul.w	r3, r2, r3
 800a966:	4a11      	ldr	r2, [pc, #68]	; (800a9ac <Is_MedhaCommand_Valid+0x60>)
 800a968:	189c      	adds	r4, r3, r2
 800a96a:	7bfb      	ldrb	r3, [r7, #15]
 800a96c:	2232      	movs	r2, #50	; 0x32
 800a96e:	fb02 f303 	mul.w	r3, r2, r3
 800a972:	4a0e      	ldr	r2, [pc, #56]	; (800a9ac <Is_MedhaCommand_Valid+0x60>)
 800a974:	4413      	add	r3, r2
 800a976:	4618      	mov	r0, r3
 800a978:	f7f5 fc6c 	bl	8000254 <strlen>
 800a97c:	4603      	mov	r3, r0
 800a97e:	461a      	mov	r2, r3
 800a980:	4621      	mov	r1, r4
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f017 fcee 	bl	8022364 <memcmp>
 800a988:	4603      	mov	r3, r0
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d101      	bne.n	800a992 <Is_MedhaCommand_Valid+0x46>
		{
			return Traverser;
 800a98e:	7bfb      	ldrb	r3, [r7, #15]
 800a990:	e008      	b.n	800a9a4 <Is_MedhaCommand_Valid+0x58>
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 800a992:	7bfb      	ldrb	r3, [r7, #15]
 800a994:	3301      	adds	r3, #1
 800a996:	73fb      	strb	r3, [r7, #15]
 800a998:	4b05      	ldr	r3, [pc, #20]	; (800a9b0 <Is_MedhaCommand_Valid+0x64>)
 800a99a:	781b      	ldrb	r3, [r3, #0]
 800a99c:	7bfa      	ldrb	r2, [r7, #15]
 800a99e:	429a      	cmp	r2, r3
 800a9a0:	d3dd      	bcc.n	800a95e <Is_MedhaCommand_Valid+0x12>
		}
	}
	return 255;
 800a9a2:	23ff      	movs	r3, #255	; 0xff
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	3714      	adds	r7, #20
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd90      	pop	{r4, r7, pc}
 800a9ac:	200020c4 	.word	0x200020c4
 800a9b0:	200024ac 	.word	0x200024ac

0800a9b4 <GetCRC32>:

#endif

/* __________________________________  CRC FUNCTIONS _______________________________ */
uint32_t GetCRC32(unsigned short us_Start,uint8_t *ucPtr,unsigned short us_End)
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	b087      	sub	sp, #28
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	6039      	str	r1, [r7, #0]
 800a9be:	80fb      	strh	r3, [r7, #6]
 800a9c0:	4613      	mov	r3, r2
 800a9c2:	80bb      	strh	r3, [r7, #4]
	uint32_t Crc = 0;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	617b      	str	r3, [r7, #20]
	uint32_t i = 0;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	613b      	str	r3, [r7, #16]
	uint32_t LookUpIndex = 0;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	60fb      	str	r3, [r7, #12]

	//	printf("\nstart cRc us_Start=%d end =%d\n",us_Start,us_End);
	for(i = us_Start ;i < us_End;i++)
 800a9d0:	88fb      	ldrh	r3, [r7, #6]
 800a9d2:	613b      	str	r3, [r7, #16]
 800a9d4:	e015      	b.n	800aa02 <GetCRC32+0x4e>
	{
		LookUpIndex = (uint8_t)(Crc ^ ucPtr[i]);
 800a9d6:	697b      	ldr	r3, [r7, #20]
 800a9d8:	b2da      	uxtb	r2, r3
 800a9da:	6839      	ldr	r1, [r7, #0]
 800a9dc:	693b      	ldr	r3, [r7, #16]
 800a9de:	440b      	add	r3, r1
 800a9e0:	781b      	ldrb	r3, [r3, #0]
 800a9e2:	4053      	eors	r3, r2
 800a9e4:	b2db      	uxtb	r3, r3
 800a9e6:	60fb      	str	r3, [r7, #12]
		Crc = (Crc >> 8);
 800a9e8:	697b      	ldr	r3, [r7, #20]
 800a9ea:	0a1b      	lsrs	r3, r3, #8
 800a9ec:	617b      	str	r3, [r7, #20]
		Crc = Crc ^ Crc32_LookUp[LookUpIndex];
 800a9ee:	4a0a      	ldr	r2, [pc, #40]	; (800aa18 <GetCRC32+0x64>)
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a9f6:	697a      	ldr	r2, [r7, #20]
 800a9f8:	4053      	eors	r3, r2
 800a9fa:	617b      	str	r3, [r7, #20]
	for(i = us_Start ;i < us_End;i++)
 800a9fc:	693b      	ldr	r3, [r7, #16]
 800a9fe:	3301      	adds	r3, #1
 800aa00:	613b      	str	r3, [r7, #16]
 800aa02:	88bb      	ldrh	r3, [r7, #4]
 800aa04:	693a      	ldr	r2, [r7, #16]
 800aa06:	429a      	cmp	r2, r3
 800aa08:	d3e5      	bcc.n	800a9d6 <GetCRC32+0x22>
	}

	return Crc;
 800aa0a:	697b      	ldr	r3, [r7, #20]
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	371c      	adds	r7, #28
 800aa10:	46bd      	mov	sp, r7
 800aa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa16:	4770      	bx	lr
 800aa18:	08028ad8 	.word	0x08028ad8

0800aa1c <CheckCRC32>:

uint32_t CheckCRC32(uint16_t us_Start, uint8_t *ucPtr,uint16_t us_End)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b084      	sub	sp, #16
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	4603      	mov	r3, r0
 800aa24:	6039      	str	r1, [r7, #0]
 800aa26:	80fb      	strh	r3, [r7, #6]
 800aa28:	4613      	mov	r3, r2
 800aa2a:	80bb      	strh	r3, [r7, #4]
	uint32_t Pkt_Crc = 0;
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	60bb      	str	r3, [r7, #8]
	uint32_t Cal_Crc = 0;
 800aa30:	2300      	movs	r3, #0
 800aa32:	60fb      	str	r3, [r7, #12]

	Cal_Crc = GetCRC32(us_Start,ucPtr,us_End);
 800aa34:	88ba      	ldrh	r2, [r7, #4]
 800aa36:	88fb      	ldrh	r3, [r7, #6]
 800aa38:	6839      	ldr	r1, [r7, #0]
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f7ff ffba 	bl	800a9b4 <GetCRC32>
 800aa40:	60f8      	str	r0, [r7, #12]
	memcpy(&Pkt_Crc,&ucPtr[us_End],4);
 800aa42:	88bb      	ldrh	r3, [r7, #4]
 800aa44:	683a      	ldr	r2, [r7, #0]
 800aa46:	4413      	add	r3, r2
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	60bb      	str	r3, [r7, #8]
	}

#endif


	if(Pkt_Crc == Cal_Crc)
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	68fa      	ldr	r2, [r7, #12]
 800aa50:	429a      	cmp	r2, r3
 800aa52:	d101      	bne.n	800aa58 <CheckCRC32+0x3c>
	{
		return OK;
 800aa54:	2301      	movs	r3, #1
 800aa56:	e009      	b.n	800aa6c <CheckCRC32+0x50>
	}
	else
	{
		printf("\nReceived CRC:0x%08lx\n",Pkt_Crc);
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	4619      	mov	r1, r3
 800aa5c:	4805      	ldr	r0, [pc, #20]	; (800aa74 <CheckCRC32+0x58>)
 800aa5e:	f017 fda1 	bl	80225a4 <iprintf>
		printf("Calculated CRC:0x%08lx\n",Cal_Crc);
 800aa62:	68f9      	ldr	r1, [r7, #12]
 800aa64:	4804      	ldr	r0, [pc, #16]	; (800aa78 <CheckCRC32+0x5c>)
 800aa66:	f017 fd9d 	bl	80225a4 <iprintf>
		return NOT_OK;
 800aa6a:	2300      	movs	r3, #0
	}

}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	3710      	adds	r7, #16
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}
 800aa74:	08025b30 	.word	0x08025b30
 800aa78:	08025b48 	.word	0x08025b48

0800aa7c <CheckForRqst>:

#include "Headers.h"


unsigned char CheckForRqst(unsigned char uc_port)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b086      	sub	sp, #24
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	4603      	mov	r3, r0
 800aa84:	71fb      	strb	r3, [r7, #7]
	unsigned char buffer[10] = "\0";//index=0,data=0;
 800aa86:	2300      	movs	r3, #0
 800aa88:	60fb      	str	r3, [r7, #12]
 800aa8a:	f107 0310 	add.w	r3, r7, #16
 800aa8e:	2200      	movs	r2, #0
 800aa90:	601a      	str	r2, [r3, #0]
 800aa92:	809a      	strh	r2, [r3, #4]
	if(ReadAndFormMsg(uc_port, buffer,sizeof(buffer)) > 0)
 800aa94:	79fb      	ldrb	r3, [r7, #7]
 800aa96:	b29b      	uxth	r3, r3
 800aa98:	f107 010c 	add.w	r1, r7, #12
 800aa9c:	220a      	movs	r2, #10
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	f000 f846 	bl	800ab30 <ReadAndFormMsg>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	dd34      	ble.n	800ab14 <CheckForRqst+0x98>
	{
		if( (buffer[1] == ((DATLOADING>>8)&0XFF)) && (buffer[2] ==(DATLOADING & 0XFF)) && (buffer[3] == DATREQUEST) )
 800aaaa:	7b7b      	ldrb	r3, [r7, #13]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d115      	bne.n	800aadc <CheckForRqst+0x60>
 800aab0:	7bbb      	ldrb	r3, [r7, #14]
 800aab2:	2b01      	cmp	r3, #1
 800aab4:	d112      	bne.n	800aadc <CheckForRqst+0x60>
 800aab6:	7bfb      	ldrb	r3, [r7, #15]
 800aab8:	2b01      	cmp	r3, #1
 800aaba:	d10f      	bne.n	800aadc <CheckForRqst+0x60>
		{
			printf("\nUPLOADING REQUEST OK\n");
 800aabc:	4818      	ldr	r0, [pc, #96]	; (800ab20 <CheckForRqst+0xa4>)
 800aabe:	f017 fe0d 	bl	80226dc <puts>
			SendAck(uc_port,DATLOADING, ACKOK);
 800aac2:	79fb      	ldrb	r3, [r7, #7]
 800aac4:	2202      	movs	r2, #2
 800aac6:	2101      	movs	r1, #1
 800aac8:	4618      	mov	r0, r3
 800aaca:	f000 f933 	bl	800ad34 <SendAck>
			gucReqstCurTim = HAL_GetTick();
 800aace:	f00a fd5f 	bl	8015590 <HAL_GetTick>
 800aad2:	4603      	mov	r3, r0
 800aad4:	4a13      	ldr	r2, [pc, #76]	; (800ab24 <CheckForRqst+0xa8>)
 800aad6:	6013      	str	r3, [r2, #0]
			return 0x01;
 800aad8:	2301      	movs	r3, #1
 800aada:	e01c      	b.n	800ab16 <CheckForRqst+0x9a>
		}
		else if( (buffer[1] == ((DATSENDING>>8)&0XFF)) && (buffer[2] ==(DATSENDING & 0XFF)) && (buffer[3] == DATREQUEST) )
 800aadc:	7b7b      	ldrb	r3, [r7, #13]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d115      	bne.n	800ab0e <CheckForRqst+0x92>
 800aae2:	7bbb      	ldrb	r3, [r7, #14]
 800aae4:	2b02      	cmp	r3, #2
 800aae6:	d112      	bne.n	800ab0e <CheckForRqst+0x92>
 800aae8:	7bfb      	ldrb	r3, [r7, #15]
 800aaea:	2b01      	cmp	r3, #1
 800aaec:	d10f      	bne.n	800ab0e <CheckForRqst+0x92>
		{
			printf("\nDOWNLOADING REQUEST OK\n");
 800aaee:	480e      	ldr	r0, [pc, #56]	; (800ab28 <CheckForRqst+0xac>)
 800aaf0:	f017 fdf4 	bl	80226dc <puts>
			SendAck(uc_port,DATSENDING, ACKOK);
 800aaf4:	79fb      	ldrb	r3, [r7, #7]
 800aaf6:	2202      	movs	r2, #2
 800aaf8:	2102      	movs	r1, #2
 800aafa:	4618      	mov	r0, r3
 800aafc:	f000 f91a 	bl	800ad34 <SendAck>
			gucReqstCurTim = HAL_GetTick();
 800ab00:	f00a fd46 	bl	8015590 <HAL_GetTick>
 800ab04:	4603      	mov	r3, r0
 800ab06:	4a07      	ldr	r2, [pc, #28]	; (800ab24 <CheckForRqst+0xa8>)
 800ab08:	6013      	str	r3, [r2, #0]
			return 0x02;
 800ab0a:	2302      	movs	r3, #2
 800ab0c:	e003      	b.n	800ab16 <CheckForRqst+0x9a>
		}
		else
			printf("\nREQUEST NOT OK\n");
 800ab0e:	4807      	ldr	r0, [pc, #28]	; (800ab2c <CheckForRqst+0xb0>)
 800ab10:	f017 fde4 	bl	80226dc <puts>
	}
	return 0x00;
 800ab14:	2300      	movs	r3, #0
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	3718      	adds	r7, #24
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}
 800ab1e:	bf00      	nop
 800ab20:	08025b60 	.word	0x08025b60
 800ab24:	20000a4c 	.word	0x20000a4c
 800ab28:	08025b78 	.word	0x08025b78
 800ab2c:	08025b90 	.word	0x08025b90

0800ab30 <ReadAndFormMsg>:



short int ReadAndFormMsg(unsigned short int us_Port,unsigned char *puc_ReadMsg,unsigned short int us_MaxSize)
{
 800ab30:	b590      	push	{r4, r7, lr}
 800ab32:	b087      	sub	sp, #28
 800ab34:	af02      	add	r7, sp, #8
 800ab36:	4603      	mov	r3, r0
 800ab38:	6039      	str	r1, [r7, #0]
 800ab3a:	80fb      	strh	r3, [r7, #6]
 800ab3c:	4613      	mov	r3, r2
 800ab3e:	80bb      	strh	r3, [r7, #4]
	static unsigned char suc_RcvStatus = ONE;
	unsigned char suc_RByte = ZERO;
 800ab40:	2300      	movs	r3, #0
 800ab42:	73fb      	strb	r3, [r7, #15]
	static unsigned short int j = ZERO;
	short int sus_CRC = ZERO;
 800ab44:	2300      	movs	r3, #0
 800ab46:	81bb      	strh	r3, [r7, #12]
	unsigned short int us_ReturnBytes = ZERO;
 800ab48:	2300      	movs	r3, #0
 800ab4a:	817b      	strh	r3, [r7, #10]
	/* If data available on port read and store data */
	//	if(SpoiElapsTICs(updateClk) > 5000 )
	//		*UpdateFlag = 0;


	while(Com_DataReady(us_Port))
 800ab4c:	e0d4      	b.n	800acf8 <ReadAndFormMsg+0x1c8>
	{
		gucUpdateFlag = 1;
 800ab4e:	4b71      	ldr	r3, [pc, #452]	; (800ad14 <ReadAndFormMsg+0x1e4>)
 800ab50:	2201      	movs	r2, #1
 800ab52:	701a      	strb	r2, [r3, #0]
		// updateClk = SpoiGetSysTICs();

		HAL_IWDG_Refresh(&hiwdg);
 800ab54:	4870      	ldr	r0, [pc, #448]	; (800ad18 <ReadAndFormMsg+0x1e8>)
 800ab56:	f00e f881 	bl	8018c5c <HAL_IWDG_Refresh>
		suc_RByte = Com_Get_Byte(us_Port);
 800ab5a:	88fb      	ldrh	r3, [r7, #6]
 800ab5c:	b2db      	uxtb	r3, r3
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f00a f9ee 	bl	8014f40 <Com_Get_Byte>
 800ab64:	4603      	mov	r3, r0
 800ab66:	73fb      	strb	r3, [r7, #15]

		//Delay_SRAM(1000);

		//printf("%x|* ",suc_RByte);
		Enable_UART_Interrupts();
 800ab68:	f00a fb00 	bl	801516c <Enable_UART_Interrupts>
		//printf("%d:%x ",index++,suc_RByte);
		//SpoiPause(1);
		//index++	   ;
		//#endif /*PRINTF_DEBUG*/

		switch(suc_RcvStatus)
 800ab6c:	4b6b      	ldr	r3, [pc, #428]	; (800ad1c <ReadAndFormMsg+0x1ec>)
 800ab6e:	781b      	ldrb	r3, [r3, #0]
 800ab70:	2b03      	cmp	r3, #3
 800ab72:	f000 8099 	beq.w	800aca8 <ReadAndFormMsg+0x178>
 800ab76:	2b03      	cmp	r3, #3
 800ab78:	f300 80b0 	bgt.w	800acdc <ReadAndFormMsg+0x1ac>
 800ab7c:	2b01      	cmp	r3, #1
 800ab7e:	d002      	beq.n	800ab86 <ReadAndFormMsg+0x56>
 800ab80:	2b02      	cmp	r3, #2
 800ab82:	d00e      	beq.n	800aba2 <ReadAndFormMsg+0x72>
				}
				suc_RcvStatus = TWO;
				break;

			default:
				break;
 800ab84:	e0aa      	b.n	800acdc <ReadAndFormMsg+0x1ac>
			if(START_OF_MESSAGE == suc_RByte)
 800ab86:	7bfb      	ldrb	r3, [r7, #15]
 800ab88:	2b24      	cmp	r3, #36	; 0x24
 800ab8a:	f040 80a9 	bne.w	800ace0 <ReadAndFormMsg+0x1b0>
				puc_ReadMsg[ZERO] = suc_RByte;
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	7bfa      	ldrb	r2, [r7, #15]
 800ab92:	701a      	strb	r2, [r3, #0]
				j = ONE;
 800ab94:	4b62      	ldr	r3, [pc, #392]	; (800ad20 <ReadAndFormMsg+0x1f0>)
 800ab96:	2201      	movs	r2, #1
 800ab98:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800ab9a:	4b60      	ldr	r3, [pc, #384]	; (800ad1c <ReadAndFormMsg+0x1ec>)
 800ab9c:	2202      	movs	r2, #2
 800ab9e:	701a      	strb	r2, [r3, #0]
			break;
 800aba0:	e09e      	b.n	800ace0 <ReadAndFormMsg+0x1b0>
			switch(suc_RByte)
 800aba2:	7bfb      	ldrb	r3, [r7, #15]
 800aba4:	2b26      	cmp	r3, #38	; 0x26
 800aba6:	d006      	beq.n	800abb6 <ReadAndFormMsg+0x86>
 800aba8:	2b26      	cmp	r3, #38	; 0x26
 800abaa:	dc6e      	bgt.n	800ac8a <ReadAndFormMsg+0x15a>
 800abac:	2b05      	cmp	r3, #5
 800abae:	d068      	beq.n	800ac82 <ReadAndFormMsg+0x152>
 800abb0:	2b24      	cmp	r3, #36	; 0x24
 800abb2:	d05c      	beq.n	800ac6e <ReadAndFormMsg+0x13e>
 800abb4:	e069      	b.n	800ac8a <ReadAndFormMsg+0x15a>
				sus_CRC = j-2;
 800abb6:	4b5a      	ldr	r3, [pc, #360]	; (800ad20 <ReadAndFormMsg+0x1f0>)
 800abb8:	881b      	ldrh	r3, [r3, #0]
 800abba:	3b02      	subs	r3, #2
 800abbc:	b29b      	uxth	r3, r3
 800abbe:	81bb      	strh	r3, [r7, #12]
				us_ReturnBytes = j;
 800abc0:	4b57      	ldr	r3, [pc, #348]	; (800ad20 <ReadAndFormMsg+0x1f0>)
 800abc2:	881b      	ldrh	r3, [r3, #0]
 800abc4:	817b      	strh	r3, [r7, #10]
				j = ZERO;
 800abc6:	4b56      	ldr	r3, [pc, #344]	; (800ad20 <ReadAndFormMsg+0x1f0>)
 800abc8:	2200      	movs	r2, #0
 800abca:	801a      	strh	r2, [r3, #0]
				if (sus_CRC < 0)
 800abcc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	da01      	bge.n	800abd8 <ReadAndFormMsg+0xa8>
					return 0;
 800abd4:	2300      	movs	r3, #0
 800abd6:	e099      	b.n	800ad0c <ReadAndFormMsg+0x1dc>
				suc_RcvStatus = ONE;
 800abd8:	4b50      	ldr	r3, [pc, #320]	; (800ad1c <ReadAndFormMsg+0x1ec>)
 800abda:	2201      	movs	r2, #1
 800abdc:	701a      	strb	r2, [r3, #0]
				printf("\n SDM Check sum IRDMI: [%d]%x [%d]%x",sus_CRC,
 800abde:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
						puc_ReadMsg[sus_CRC],
 800abe2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800abe6:	683a      	ldr	r2, [r7, #0]
 800abe8:	4413      	add	r3, r2
 800abea:	781b      	ldrb	r3, [r3, #0]
				printf("\n SDM Check sum IRDMI: [%d]%x [%d]%x",sus_CRC,
 800abec:	461c      	mov	r4, r3
 800abee:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800abf2:	1c58      	adds	r0, r3, #1
						puc_ReadMsg[sus_CRC+1]);
 800abf4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800abf8:	3301      	adds	r3, #1
 800abfa:	683a      	ldr	r2, [r7, #0]
 800abfc:	4413      	add	r3, r2
 800abfe:	781b      	ldrb	r3, [r3, #0]
				printf("\n SDM Check sum IRDMI: [%d]%x [%d]%x",sus_CRC,
 800ac00:	9300      	str	r3, [sp, #0]
 800ac02:	4603      	mov	r3, r0
 800ac04:	4622      	mov	r2, r4
 800ac06:	4847      	ldr	r0, [pc, #284]	; (800ad24 <ReadAndFormMsg+0x1f4>)
 800ac08:	f017 fccc 	bl	80225a4 <iprintf>
				if(CheckCRC(puc_ReadMsg, sus_CRC))
 800ac0c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ac10:	4619      	mov	r1, r3
 800ac12:	6838      	ldr	r0, [r7, #0]
 800ac14:	f007 ffd6 	bl	8012bc4 <CheckCRC>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d012      	beq.n	800ac44 <ReadAndFormMsg+0x114>
					printf("CRC OK [%x] [%x]\n",puc_ReadMsg[sus_CRC], puc_ReadMsg[sus_CRC+1]);
 800ac1e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ac22:	683a      	ldr	r2, [r7, #0]
 800ac24:	4413      	add	r3, r2
 800ac26:	781b      	ldrb	r3, [r3, #0]
 800ac28:	4619      	mov	r1, r3
 800ac2a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ac2e:	3301      	adds	r3, #1
 800ac30:	683a      	ldr	r2, [r7, #0]
 800ac32:	4413      	add	r3, r2
 800ac34:	781b      	ldrb	r3, [r3, #0]
 800ac36:	461a      	mov	r2, r3
 800ac38:	483b      	ldr	r0, [pc, #236]	; (800ad28 <ReadAndFormMsg+0x1f8>)
 800ac3a:	f017 fcb3 	bl	80225a4 <iprintf>
					return us_ReturnBytes;
 800ac3e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800ac42:	e063      	b.n	800ad0c <ReadAndFormMsg+0x1dc>
					printf("\nCRC NOK ");
 800ac44:	4839      	ldr	r0, [pc, #228]	; (800ad2c <ReadAndFormMsg+0x1fc>)
 800ac46:	f017 fcad 	bl	80225a4 <iprintf>
					printf("[%x] [%x]\n",puc_ReadMsg[sus_CRC], puc_ReadMsg[sus_CRC+1]);
 800ac4a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ac4e:	683a      	ldr	r2, [r7, #0]
 800ac50:	4413      	add	r3, r2
 800ac52:	781b      	ldrb	r3, [r3, #0]
 800ac54:	4619      	mov	r1, r3
 800ac56:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ac5a:	3301      	adds	r3, #1
 800ac5c:	683a      	ldr	r2, [r7, #0]
 800ac5e:	4413      	add	r3, r2
 800ac60:	781b      	ldrb	r3, [r3, #0]
 800ac62:	461a      	mov	r2, r3
 800ac64:	4832      	ldr	r0, [pc, #200]	; (800ad30 <ReadAndFormMsg+0x200>)
 800ac66:	f017 fc9d 	bl	80225a4 <iprintf>
					return 0;
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	e04e      	b.n	800ad0c <ReadAndFormMsg+0x1dc>
				puc_ReadMsg[ZERO] = suc_RByte;
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	7bfa      	ldrb	r2, [r7, #15]
 800ac72:	701a      	strb	r2, [r3, #0]
				j = ONE;
 800ac74:	4b2a      	ldr	r3, [pc, #168]	; (800ad20 <ReadAndFormMsg+0x1f0>)
 800ac76:	2201      	movs	r2, #1
 800ac78:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800ac7a:	4b28      	ldr	r3, [pc, #160]	; (800ad1c <ReadAndFormMsg+0x1ec>)
 800ac7c:	2202      	movs	r2, #2
 800ac7e:	701a      	strb	r2, [r3, #0]
				break;
 800ac80:	e011      	b.n	800aca6 <ReadAndFormMsg+0x176>
				suc_RcvStatus = THREE;
 800ac82:	4b26      	ldr	r3, [pc, #152]	; (800ad1c <ReadAndFormMsg+0x1ec>)
 800ac84:	2203      	movs	r2, #3
 800ac86:	701a      	strb	r2, [r3, #0]
				break;
 800ac88:	e00d      	b.n	800aca6 <ReadAndFormMsg+0x176>
				puc_ReadMsg[j] = suc_RByte;
 800ac8a:	4b25      	ldr	r3, [pc, #148]	; (800ad20 <ReadAndFormMsg+0x1f0>)
 800ac8c:	881b      	ldrh	r3, [r3, #0]
 800ac8e:	461a      	mov	r2, r3
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	4413      	add	r3, r2
 800ac94:	7bfa      	ldrb	r2, [r7, #15]
 800ac96:	701a      	strb	r2, [r3, #0]
				j++;
 800ac98:	4b21      	ldr	r3, [pc, #132]	; (800ad20 <ReadAndFormMsg+0x1f0>)
 800ac9a:	881b      	ldrh	r3, [r3, #0]
 800ac9c:	3301      	adds	r3, #1
 800ac9e:	b29a      	uxth	r2, r3
 800aca0:	4b1f      	ldr	r3, [pc, #124]	; (800ad20 <ReadAndFormMsg+0x1f0>)
 800aca2:	801a      	strh	r2, [r3, #0]
				break;
 800aca4:	bf00      	nop
			break;
 800aca6:	e01c      	b.n	800ace2 <ReadAndFormMsg+0x1b2>
				if((START_OF_MESSAGE == suc_RByte)
 800aca8:	7bfb      	ldrb	r3, [r7, #15]
 800acaa:	2b24      	cmp	r3, #36	; 0x24
 800acac:	d005      	beq.n	800acba <ReadAndFormMsg+0x18a>
						|| (END_OF_MESSAGE == suc_RByte)
 800acae:	7bfb      	ldrb	r3, [r7, #15]
 800acb0:	2b26      	cmp	r3, #38	; 0x26
 800acb2:	d002      	beq.n	800acba <ReadAndFormMsg+0x18a>
						|| (DLE == suc_RByte))
 800acb4:	7bfb      	ldrb	r3, [r7, #15]
 800acb6:	2b05      	cmp	r3, #5
 800acb8:	d10c      	bne.n	800acd4 <ReadAndFormMsg+0x1a4>
					puc_ReadMsg[j] = suc_RByte;
 800acba:	4b19      	ldr	r3, [pc, #100]	; (800ad20 <ReadAndFormMsg+0x1f0>)
 800acbc:	881b      	ldrh	r3, [r3, #0]
 800acbe:	461a      	mov	r2, r3
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	4413      	add	r3, r2
 800acc4:	7bfa      	ldrb	r2, [r7, #15]
 800acc6:	701a      	strb	r2, [r3, #0]
					j++;
 800acc8:	4b15      	ldr	r3, [pc, #84]	; (800ad20 <ReadAndFormMsg+0x1f0>)
 800acca:	881b      	ldrh	r3, [r3, #0]
 800accc:	3301      	adds	r3, #1
 800acce:	b29a      	uxth	r2, r3
 800acd0:	4b13      	ldr	r3, [pc, #76]	; (800ad20 <ReadAndFormMsg+0x1f0>)
 800acd2:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800acd4:	4b11      	ldr	r3, [pc, #68]	; (800ad1c <ReadAndFormMsg+0x1ec>)
 800acd6:	2202      	movs	r2, #2
 800acd8:	701a      	strb	r2, [r3, #0]
				break;
 800acda:	e002      	b.n	800ace2 <ReadAndFormMsg+0x1b2>
				break;
 800acdc:	bf00      	nop
 800acde:	e000      	b.n	800ace2 <ReadAndFormMsg+0x1b2>
			break;
 800ace0:	bf00      	nop
		}    /* End of switch*/

		/* If receiving invalid message, ZERO message buffer */

		if( j >= us_MaxSize)
 800ace2:	4b0f      	ldr	r3, [pc, #60]	; (800ad20 <ReadAndFormMsg+0x1f0>)
 800ace4:	881b      	ldrh	r3, [r3, #0]
 800ace6:	88ba      	ldrh	r2, [r7, #4]
 800ace8:	429a      	cmp	r2, r3
 800acea:	d805      	bhi.n	800acf8 <ReadAndFormMsg+0x1c8>
		{
			suc_RcvStatus = ONE;
 800acec:	4b0b      	ldr	r3, [pc, #44]	; (800ad1c <ReadAndFormMsg+0x1ec>)
 800acee:	2201      	movs	r2, #1
 800acf0:	701a      	strb	r2, [r3, #0]
			j = ZERO;
 800acf2:	4b0b      	ldr	r3, [pc, #44]	; (800ad20 <ReadAndFormMsg+0x1f0>)
 800acf4:	2200      	movs	r2, #0
 800acf6:	801a      	strh	r2, [r3, #0]
	while(Com_DataReady(us_Port))
 800acf8:	88fb      	ldrh	r3, [r7, #6]
 800acfa:	b2db      	uxtb	r3, r3
 800acfc:	4618      	mov	r0, r3
 800acfe:	f00a f8df 	bl	8014ec0 <Com_DataReady>
 800ad02:	4603      	mov	r3, r0
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	f47f af22 	bne.w	800ab4e <ReadAndFormMsg+0x1e>
		}
	}	    /* End of While data ready */

	return ZERO;
 800ad0a:	2300      	movs	r3, #0
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	3714      	adds	r7, #20
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd90      	pop	{r4, r7, pc}
 800ad14:	20000a4a 	.word	0x20000a4a
 800ad18:	20009c74 	.word	0x20009c74
 800ad1c:	20000117 	.word	0x20000117
 800ad20:	200027d8 	.word	0x200027d8
 800ad24:	08025ba0 	.word	0x08025ba0
 800ad28:	08025bc8 	.word	0x08025bc8
 800ad2c:	08025bdc 	.word	0x08025bdc
 800ad30:	08025be8 	.word	0x08025be8

0800ad34 <SendAck>:


void SendAck(unsigned char uc_port, unsigned char Opcode, unsigned char ACK)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b086      	sub	sp, #24
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	71fb      	strb	r3, [r7, #7]
 800ad3e:	460b      	mov	r3, r1
 800ad40:	71bb      	strb	r3, [r7, #6]
 800ad42:	4613      	mov	r3, r2
 800ad44:	717b      	strb	r3, [r7, #5]
	uint32_t AckTim=0;
 800ad46:	2300      	movs	r3, #0
 800ad48:	617b      	str	r3, [r7, #20]
	unsigned char puc_Message[10] = {0,};
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	60bb      	str	r3, [r7, #8]
 800ad4e:	f107 030c 	add.w	r3, r7, #12
 800ad52:	2200      	movs	r2, #0
 800ad54:	601a      	str	r2, [r3, #0]
 800ad56:	809a      	strh	r2, [r3, #4]

	puc_Message[0]= '$';
 800ad58:	2324      	movs	r3, #36	; 0x24
 800ad5a:	723b      	strb	r3, [r7, #8]
	puc_Message[1]=((unsigned char ) (Opcode >> 8) & 0xff);
 800ad5c:	79bb      	ldrb	r3, [r7, #6]
 800ad5e:	121b      	asrs	r3, r3, #8
 800ad60:	b2db      	uxtb	r3, r3
 800ad62:	727b      	strb	r3, [r7, #9]
	puc_Message[2]= (unsigned char ) (Opcode & 0xff);
 800ad64:	79bb      	ldrb	r3, [r7, #6]
 800ad66:	72bb      	strb	r3, [r7, #10]
	puc_Message[3]= ACK;
 800ad68:	797b      	ldrb	r3, [r7, #5]
 800ad6a:	72fb      	strb	r3, [r7, #11]

	ComputeCRC(puc_Message, 4);
 800ad6c:	f107 0308 	add.w	r3, r7, #8
 800ad70:	2104      	movs	r1, #4
 800ad72:	4618      	mov	r0, r3
 800ad74:	f007 ffd0 	bl	8012d18 <ComputeCRC>
	puc_Message[6]= '&';
 800ad78:	2326      	movs	r3, #38	; 0x26
 800ad7a:	73bb      	strb	r3, [r7, #14]
	printf("\nSending Ack CRC [%x][%x]\n",puc_Message[4],puc_Message[5]);
 800ad7c:	7b3b      	ldrb	r3, [r7, #12]
 800ad7e:	4619      	mov	r1, r3
 800ad80:	7b7b      	ldrb	r3, [r7, #13]
 800ad82:	461a      	mov	r2, r3
 800ad84:	480f      	ldr	r0, [pc, #60]	; (800adc4 <SendAck+0x90>)
 800ad86:	f017 fc0d 	bl	80225a4 <iprintf>

	AckTim=HAL_GetTick();
 800ad8a:	f00a fc01 	bl	8015590 <HAL_GetTick>
 800ad8e:	6178      	str	r0, [r7, #20]

	while( HAL_Elaps_Ticks(AckTim) < 1500)
 800ad90:	e002      	b.n	800ad98 <SendAck+0x64>
	{
		HAL_IWDG_Refresh(&hiwdg);
 800ad92:	480d      	ldr	r0, [pc, #52]	; (800adc8 <SendAck+0x94>)
 800ad94:	f00d ff62 	bl	8018c5c <HAL_IWDG_Refresh>
	while( HAL_Elaps_Ticks(AckTim) < 1500)
 800ad98:	6978      	ldr	r0, [r7, #20]
 800ad9a:	f003 fe47 	bl	800ea2c <HAL_Elaps_Ticks>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	f240 52db 	movw	r2, #1499	; 0x5db
 800ada4:	4293      	cmp	r3, r2
 800ada6:	d9f4      	bls.n	800ad92 <SendAck+0x5e>
	}

	CommTransmitMessage(uc_port,puc_Message, 6);
 800ada8:	f107 0108 	add.w	r1, r7, #8
 800adac:	79fb      	ldrb	r3, [r7, #7]
 800adae:	2206      	movs	r2, #6
 800adb0:	4618      	mov	r0, r3
 800adb2:	f00a f945 	bl	8015040 <CommTransmitMessage>

	AckTim = 0;
 800adb6:	2300      	movs	r3, #0
 800adb8:	617b      	str	r3, [r7, #20]
}
 800adba:	bf00      	nop
 800adbc:	3718      	adds	r7, #24
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bd80      	pop	{r7, pc}
 800adc2:	bf00      	nop
 800adc4:	08025bf4 	.word	0x08025bf4
 800adc8:	20009c74 	.word	0x20009c74

0800adcc <ReadAndFormConfig>:

short int ReadAndFormConfig(unsigned short int us_Port,
		unsigned char*puc_ReadMsg,unsigned short int us_MaxSize)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b084      	sub	sp, #16
 800add0:	af00      	add	r7, sp, #0
 800add2:	4603      	mov	r3, r0
 800add4:	6039      	str	r1, [r7, #0]
 800add6:	80fb      	strh	r3, [r7, #6]
 800add8:	4613      	mov	r3, r2
 800adda:	80bb      	strh	r3, [r7, #4]
	static unsigned char suc_RcvStatus = ONE;
	unsigned char suc_RByte = ZERO;
 800addc:	2300      	movs	r3, #0
 800adde:	73fb      	strb	r3, [r7, #15]
	static unsigned short int i = ZERO;
	short int sus_CRC = ZERO;
 800ade0:	2300      	movs	r3, #0
 800ade2:	81bb      	strh	r3, [r7, #12]
	unsigned short int us_ReturnBytes = ZERO;
 800ade4:	2300      	movs	r3, #0
 800ade6:	817b      	strh	r3, [r7, #10]
	/* If data available on port read and store data */
	//	if(SpoiElapsTICs(updateClk) > 5000 )
	//		*UpdateFlag = 0;


	while(Com_DataReady(us_Port))
 800ade8:	e0ba      	b.n	800af60 <ReadAndFormConfig+0x194>
	{
		// *UpdateFlag = 1;
		// updateClk = SpoiGetSysTICs();


		suc_RByte = Com_Get_Byte(us_Port);
 800adea:	88fb      	ldrh	r3, [r7, #6]
 800adec:	b2db      	uxtb	r3, r3
 800adee:	4618      	mov	r0, r3
 800adf0:	f00a f8a6 	bl	8014f40 <Com_Get_Byte>
 800adf4:	4603      	mov	r3, r0
 800adf6:	73fb      	strb	r3, [r7, #15]
		Enable_UART_Interrupts();
 800adf8:	f00a f9b8 	bl	801516c <Enable_UART_Interrupts>

		HAL_IWDG_Refresh(&hiwdg);
 800adfc:	485f      	ldr	r0, [pc, #380]	; (800af7c <ReadAndFormConfig+0x1b0>)
 800adfe:	f00d ff2d 	bl	8018c5c <HAL_IWDG_Refresh>
		//	Delay_SRAM(1000);
		//printf("DaTA\n");
		//printf("%x ",suc_RByte);
		switch(suc_RcvStatus)
 800ae02:	4b5f      	ldr	r3, [pc, #380]	; (800af80 <ReadAndFormConfig+0x1b4>)
 800ae04:	781b      	ldrb	r3, [r3, #0]
 800ae06:	2b03      	cmp	r3, #3
 800ae08:	f000 8082 	beq.w	800af10 <ReadAndFormConfig+0x144>
 800ae0c:	2b03      	cmp	r3, #3
 800ae0e:	f300 8099 	bgt.w	800af44 <ReadAndFormConfig+0x178>
 800ae12:	2b01      	cmp	r3, #1
 800ae14:	d002      	beq.n	800ae1c <ReadAndFormConfig+0x50>
 800ae16:	2b02      	cmp	r3, #2
 800ae18:	d00e      	beq.n	800ae38 <ReadAndFormConfig+0x6c>
				}
				suc_RcvStatus = TWO;
				break;

			default:
				break;
 800ae1a:	e093      	b.n	800af44 <ReadAndFormConfig+0x178>
			if(START_OF_MESSAGE == suc_RByte)
 800ae1c:	7bfb      	ldrb	r3, [r7, #15]
 800ae1e:	2b24      	cmp	r3, #36	; 0x24
 800ae20:	f040 8092 	bne.w	800af48 <ReadAndFormConfig+0x17c>
				puc_ReadMsg[ZERO] = suc_RByte;
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	7bfa      	ldrb	r2, [r7, #15]
 800ae28:	701a      	strb	r2, [r3, #0]
				i = ONE;
 800ae2a:	4b56      	ldr	r3, [pc, #344]	; (800af84 <ReadAndFormConfig+0x1b8>)
 800ae2c:	2201      	movs	r2, #1
 800ae2e:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800ae30:	4b53      	ldr	r3, [pc, #332]	; (800af80 <ReadAndFormConfig+0x1b4>)
 800ae32:	2202      	movs	r2, #2
 800ae34:	701a      	strb	r2, [r3, #0]
			break;
 800ae36:	e087      	b.n	800af48 <ReadAndFormConfig+0x17c>
			switch(suc_RByte)
 800ae38:	7bfb      	ldrb	r3, [r7, #15]
 800ae3a:	2b26      	cmp	r3, #38	; 0x26
 800ae3c:	d006      	beq.n	800ae4c <ReadAndFormConfig+0x80>
 800ae3e:	2b26      	cmp	r3, #38	; 0x26
 800ae40:	dc57      	bgt.n	800aef2 <ReadAndFormConfig+0x126>
 800ae42:	2b05      	cmp	r3, #5
 800ae44:	d051      	beq.n	800aeea <ReadAndFormConfig+0x11e>
 800ae46:	2b24      	cmp	r3, #36	; 0x24
 800ae48:	d045      	beq.n	800aed6 <ReadAndFormConfig+0x10a>
 800ae4a:	e052      	b.n	800aef2 <ReadAndFormConfig+0x126>
				sus_CRC = i-2;
 800ae4c:	4b4d      	ldr	r3, [pc, #308]	; (800af84 <ReadAndFormConfig+0x1b8>)
 800ae4e:	881b      	ldrh	r3, [r3, #0]
 800ae50:	3b02      	subs	r3, #2
 800ae52:	b29b      	uxth	r3, r3
 800ae54:	81bb      	strh	r3, [r7, #12]
				us_ReturnBytes = i;
 800ae56:	4b4b      	ldr	r3, [pc, #300]	; (800af84 <ReadAndFormConfig+0x1b8>)
 800ae58:	881b      	ldrh	r3, [r3, #0]
 800ae5a:	817b      	strh	r3, [r7, #10]
				i = ZERO;
 800ae5c:	4b49      	ldr	r3, [pc, #292]	; (800af84 <ReadAndFormConfig+0x1b8>)
 800ae5e:	2200      	movs	r2, #0
 800ae60:	801a      	strh	r2, [r3, #0]
				if (sus_CRC < 0)
 800ae62:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	da01      	bge.n	800ae6e <ReadAndFormConfig+0xa2>
					return 0;
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	e082      	b.n	800af74 <ReadAndFormConfig+0x1a8>
				suc_RcvStatus = ONE;
 800ae6e:	4b44      	ldr	r3, [pc, #272]	; (800af80 <ReadAndFormConfig+0x1b4>)
 800ae70:	2201      	movs	r2, #1
 800ae72:	701a      	strb	r2, [r3, #0]
				if(CheckCRC(puc_ReadMsg, sus_CRC))
 800ae74:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ae78:	4619      	mov	r1, r3
 800ae7a:	6838      	ldr	r0, [r7, #0]
 800ae7c:	f007 fea2 	bl	8012bc4 <CheckCRC>
 800ae80:	4603      	mov	r3, r0
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d012      	beq.n	800aeac <ReadAndFormConfig+0xe0>
					printf("CRC OK [%x][%x]\n",puc_ReadMsg[sus_CRC], puc_ReadMsg[sus_CRC+1]);
 800ae86:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ae8a:	683a      	ldr	r2, [r7, #0]
 800ae8c:	4413      	add	r3, r2
 800ae8e:	781b      	ldrb	r3, [r3, #0]
 800ae90:	4619      	mov	r1, r3
 800ae92:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ae96:	3301      	adds	r3, #1
 800ae98:	683a      	ldr	r2, [r7, #0]
 800ae9a:	4413      	add	r3, r2
 800ae9c:	781b      	ldrb	r3, [r3, #0]
 800ae9e:	461a      	mov	r2, r3
 800aea0:	4839      	ldr	r0, [pc, #228]	; (800af88 <ReadAndFormConfig+0x1bc>)
 800aea2:	f017 fb7f 	bl	80225a4 <iprintf>
					return us_ReturnBytes;
 800aea6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800aeaa:	e063      	b.n	800af74 <ReadAndFormConfig+0x1a8>
					printf("\nCRC NOK ");
 800aeac:	4837      	ldr	r0, [pc, #220]	; (800af8c <ReadAndFormConfig+0x1c0>)
 800aeae:	f017 fb79 	bl	80225a4 <iprintf>
					printf("[%x][%x]\n",puc_ReadMsg[sus_CRC], puc_ReadMsg[sus_CRC+1]);
 800aeb2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800aeb6:	683a      	ldr	r2, [r7, #0]
 800aeb8:	4413      	add	r3, r2
 800aeba:	781b      	ldrb	r3, [r3, #0]
 800aebc:	4619      	mov	r1, r3
 800aebe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800aec2:	3301      	adds	r3, #1
 800aec4:	683a      	ldr	r2, [r7, #0]
 800aec6:	4413      	add	r3, r2
 800aec8:	781b      	ldrb	r3, [r3, #0]
 800aeca:	461a      	mov	r2, r3
 800aecc:	4830      	ldr	r0, [pc, #192]	; (800af90 <ReadAndFormConfig+0x1c4>)
 800aece:	f017 fb69 	bl	80225a4 <iprintf>
					return 0;
 800aed2:	2300      	movs	r3, #0
 800aed4:	e04e      	b.n	800af74 <ReadAndFormConfig+0x1a8>
				puc_ReadMsg[ZERO] = suc_RByte;
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	7bfa      	ldrb	r2, [r7, #15]
 800aeda:	701a      	strb	r2, [r3, #0]
				i = ONE;
 800aedc:	4b29      	ldr	r3, [pc, #164]	; (800af84 <ReadAndFormConfig+0x1b8>)
 800aede:	2201      	movs	r2, #1
 800aee0:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800aee2:	4b27      	ldr	r3, [pc, #156]	; (800af80 <ReadAndFormConfig+0x1b4>)
 800aee4:	2202      	movs	r2, #2
 800aee6:	701a      	strb	r2, [r3, #0]
				break;
 800aee8:	e011      	b.n	800af0e <ReadAndFormConfig+0x142>
				suc_RcvStatus = THREE;
 800aeea:	4b25      	ldr	r3, [pc, #148]	; (800af80 <ReadAndFormConfig+0x1b4>)
 800aeec:	2203      	movs	r2, #3
 800aeee:	701a      	strb	r2, [r3, #0]
				break;
 800aef0:	e00d      	b.n	800af0e <ReadAndFormConfig+0x142>
				puc_ReadMsg[i] = suc_RByte;
 800aef2:	4b24      	ldr	r3, [pc, #144]	; (800af84 <ReadAndFormConfig+0x1b8>)
 800aef4:	881b      	ldrh	r3, [r3, #0]
 800aef6:	461a      	mov	r2, r3
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	4413      	add	r3, r2
 800aefc:	7bfa      	ldrb	r2, [r7, #15]
 800aefe:	701a      	strb	r2, [r3, #0]
				i++;
 800af00:	4b20      	ldr	r3, [pc, #128]	; (800af84 <ReadAndFormConfig+0x1b8>)
 800af02:	881b      	ldrh	r3, [r3, #0]
 800af04:	3301      	adds	r3, #1
 800af06:	b29a      	uxth	r2, r3
 800af08:	4b1e      	ldr	r3, [pc, #120]	; (800af84 <ReadAndFormConfig+0x1b8>)
 800af0a:	801a      	strh	r2, [r3, #0]
				break;
 800af0c:	bf00      	nop
			break;
 800af0e:	e01c      	b.n	800af4a <ReadAndFormConfig+0x17e>
				if((START_OF_MESSAGE == suc_RByte)
 800af10:	7bfb      	ldrb	r3, [r7, #15]
 800af12:	2b24      	cmp	r3, #36	; 0x24
 800af14:	d005      	beq.n	800af22 <ReadAndFormConfig+0x156>
						|| (END_OF_MESSAGE == suc_RByte)
 800af16:	7bfb      	ldrb	r3, [r7, #15]
 800af18:	2b26      	cmp	r3, #38	; 0x26
 800af1a:	d002      	beq.n	800af22 <ReadAndFormConfig+0x156>
						|| (DLE == suc_RByte))
 800af1c:	7bfb      	ldrb	r3, [r7, #15]
 800af1e:	2b05      	cmp	r3, #5
 800af20:	d10c      	bne.n	800af3c <ReadAndFormConfig+0x170>
					puc_ReadMsg[i] = suc_RByte;
 800af22:	4b18      	ldr	r3, [pc, #96]	; (800af84 <ReadAndFormConfig+0x1b8>)
 800af24:	881b      	ldrh	r3, [r3, #0]
 800af26:	461a      	mov	r2, r3
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	4413      	add	r3, r2
 800af2c:	7bfa      	ldrb	r2, [r7, #15]
 800af2e:	701a      	strb	r2, [r3, #0]
					i++;
 800af30:	4b14      	ldr	r3, [pc, #80]	; (800af84 <ReadAndFormConfig+0x1b8>)
 800af32:	881b      	ldrh	r3, [r3, #0]
 800af34:	3301      	adds	r3, #1
 800af36:	b29a      	uxth	r2, r3
 800af38:	4b12      	ldr	r3, [pc, #72]	; (800af84 <ReadAndFormConfig+0x1b8>)
 800af3a:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800af3c:	4b10      	ldr	r3, [pc, #64]	; (800af80 <ReadAndFormConfig+0x1b4>)
 800af3e:	2202      	movs	r2, #2
 800af40:	701a      	strb	r2, [r3, #0]
				break;
 800af42:	e002      	b.n	800af4a <ReadAndFormConfig+0x17e>
				break;
 800af44:	bf00      	nop
 800af46:	e000      	b.n	800af4a <ReadAndFormConfig+0x17e>
			break;
 800af48:	bf00      	nop
		}    /* End of switch*/

		/* If receiving invalid message, ZERO message buffer */

		if( i >= us_MaxSize)
 800af4a:	4b0e      	ldr	r3, [pc, #56]	; (800af84 <ReadAndFormConfig+0x1b8>)
 800af4c:	881b      	ldrh	r3, [r3, #0]
 800af4e:	88ba      	ldrh	r2, [r7, #4]
 800af50:	429a      	cmp	r2, r3
 800af52:	d805      	bhi.n	800af60 <ReadAndFormConfig+0x194>
		{
			suc_RcvStatus = ONE;
 800af54:	4b0a      	ldr	r3, [pc, #40]	; (800af80 <ReadAndFormConfig+0x1b4>)
 800af56:	2201      	movs	r2, #1
 800af58:	701a      	strb	r2, [r3, #0]
			i = ZERO;
 800af5a:	4b0a      	ldr	r3, [pc, #40]	; (800af84 <ReadAndFormConfig+0x1b8>)
 800af5c:	2200      	movs	r2, #0
 800af5e:	801a      	strh	r2, [r3, #0]
	while(Com_DataReady(us_Port))
 800af60:	88fb      	ldrh	r3, [r7, #6]
 800af62:	b2db      	uxtb	r3, r3
 800af64:	4618      	mov	r0, r3
 800af66:	f009 ffab 	bl	8014ec0 <Com_DataReady>
 800af6a:	4603      	mov	r3, r0
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	f47f af3c 	bne.w	800adea <ReadAndFormConfig+0x1e>
		}
	}	    /* End of While data ready */

	return ZERO;
 800af72:	2300      	movs	r3, #0
}
 800af74:	4618      	mov	r0, r3
 800af76:	3710      	adds	r7, #16
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}
 800af7c:	20009c74 	.word	0x20009c74
 800af80:	20000118 	.word	0x20000118
 800af84:	200027da 	.word	0x200027da
 800af88:	08025c10 	.word	0x08025c10
 800af8c:	08025bdc 	.word	0x08025bdc
 800af90:	08025c24 	.word	0x08025c24

0800af94 <bcdToDec>:
#define RTC_I2C_ADDR 			0xD0 //0x68<<1
#define TEMPERATURE_I2C_ADDR 	0x90 //0x48<<1


uint8_t bcdToDec(const uint8_t Kuc_bcd)
{
 800af94:	b480      	push	{r7}
 800af96:	b083      	sub	sp, #12
 800af98:	af00      	add	r7, sp, #0
 800af9a:	4603      	mov	r3, r0
 800af9c:	71fb      	strb	r3, [r7, #7]
	return (((Kuc_bcd/16)*10) + (Kuc_bcd%16));
 800af9e:	79fb      	ldrb	r3, [r7, #7]
 800afa0:	091b      	lsrs	r3, r3, #4
 800afa2:	b2db      	uxtb	r3, r3
 800afa4:	461a      	mov	r2, r3
 800afa6:	0092      	lsls	r2, r2, #2
 800afa8:	4413      	add	r3, r2
 800afaa:	005b      	lsls	r3, r3, #1
 800afac:	b2da      	uxtb	r2, r3
 800afae:	79fb      	ldrb	r3, [r7, #7]
 800afb0:	f003 030f 	and.w	r3, r3, #15
 800afb4:	b2db      	uxtb	r3, r3
 800afb6:	4413      	add	r3, r2
 800afb8:	b2db      	uxtb	r3, r3
}
 800afba:	4618      	mov	r0, r3
 800afbc:	370c      	adds	r7, #12
 800afbe:	46bd      	mov	sp, r7
 800afc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc4:	4770      	bx	lr
	...

0800afc8 <Dec_to_BCD>:

uint8_t Dec_to_BCD(uint8_t c)
{
 800afc8:	b480      	push	{r7}
 800afca:	b083      	sub	sp, #12
 800afcc:	af00      	add	r7, sp, #0
 800afce:	4603      	mov	r3, r0
 800afd0:	71fb      	strb	r3, [r7, #7]
	c=((c/10)*16)+(c%10);
 800afd2:	79fb      	ldrb	r3, [r7, #7]
 800afd4:	4a0d      	ldr	r2, [pc, #52]	; (800b00c <Dec_to_BCD+0x44>)
 800afd6:	fba2 2303 	umull	r2, r3, r2, r3
 800afda:	08db      	lsrs	r3, r3, #3
 800afdc:	b2db      	uxtb	r3, r3
 800afde:	011b      	lsls	r3, r3, #4
 800afe0:	b2d8      	uxtb	r0, r3
 800afe2:	79fa      	ldrb	r2, [r7, #7]
 800afe4:	4b09      	ldr	r3, [pc, #36]	; (800b00c <Dec_to_BCD+0x44>)
 800afe6:	fba3 1302 	umull	r1, r3, r3, r2
 800afea:	08d9      	lsrs	r1, r3, #3
 800afec:	460b      	mov	r3, r1
 800afee:	009b      	lsls	r3, r3, #2
 800aff0:	440b      	add	r3, r1
 800aff2:	005b      	lsls	r3, r3, #1
 800aff4:	1ad3      	subs	r3, r2, r3
 800aff6:	b2db      	uxtb	r3, r3
 800aff8:	4403      	add	r3, r0
 800affa:	71fb      	strb	r3, [r7, #7]
	return c;
 800affc:	79fb      	ldrb	r3, [r7, #7]
}
 800affe:	4618      	mov	r0, r3
 800b000:	370c      	adds	r7, #12
 800b002:	46bd      	mov	sp, r7
 800b004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b008:	4770      	bx	lr
 800b00a:	bf00      	nop
 800b00c:	cccccccd 	.word	0xcccccccd

0800b010 <Is_GPS_Valid>:

uint8_t Is_GPS_Valid(void)
{
 800b010:	b480      	push	{r7}
 800b012:	af00      	add	r7, sp, #0
	//printf("\n%u:%u:%u|%u/%u/%u\n",Gps_date_time_st.ucHour,Gps_date_time_st.ucMin,Gps_date_time_st.ucSec,Gps_date_time_st.ucDate,Gps_date_time_st.ucMonth,Gps_date_time_st.ucYear);

	if(Gps_date_time_st.Year < 10)
 800b014:	4b0b      	ldr	r3, [pc, #44]	; (800b044 <Is_GPS_Valid+0x34>)
 800b016:	795b      	ldrb	r3, [r3, #5]
 800b018:	2b09      	cmp	r3, #9
 800b01a:	d801      	bhi.n	800b020 <Is_GPS_Valid+0x10>
	{
		return 0;
 800b01c:	2300      	movs	r3, #0
 800b01e:	e00c      	b.n	800b03a <Is_GPS_Valid+0x2a>
	}
	if(Gps_date_time_st.Mont == 0 )
 800b020:	4b08      	ldr	r3, [pc, #32]	; (800b044 <Is_GPS_Valid+0x34>)
 800b022:	791b      	ldrb	r3, [r3, #4]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d101      	bne.n	800b02c <Is_GPS_Valid+0x1c>
	{
		return 0;
 800b028:	2300      	movs	r3, #0
 800b02a:	e006      	b.n	800b03a <Is_GPS_Valid+0x2a>
	}
	if(Gps_date_time_st.Date == 0 )
 800b02c:	4b05      	ldr	r3, [pc, #20]	; (800b044 <Is_GPS_Valid+0x34>)
 800b02e:	78db      	ldrb	r3, [r3, #3]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d101      	bne.n	800b038 <Is_GPS_Valid+0x28>
	{
		return 0;
 800b034:	2300      	movs	r3, #0
 800b036:	e000      	b.n	800b03a <Is_GPS_Valid+0x2a>
	}
	return 1;
 800b038:	2301      	movs	r3, #1
}
 800b03a:	4618      	mov	r0, r3
 800b03c:	46bd      	mov	sp, r7
 800b03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b042:	4770      	bx	lr
 800b044:	200027dc 	.word	0x200027dc

0800b048 <Write_RTC>:


void Write_RTC(void)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b086      	sub	sp, #24
 800b04c:	af04      	add	r7, sp, #16
	uint8_t set_time[7] = {0,};
 800b04e:	2300      	movs	r3, #0
 800b050:	603b      	str	r3, [r7, #0]
 800b052:	1d3b      	adds	r3, r7, #4
 800b054:	2100      	movs	r1, #0
 800b056:	460a      	mov	r2, r1
 800b058:	801a      	strh	r2, [r3, #0]
 800b05a:	460a      	mov	r2, r1
 800b05c:	709a      	strb	r2, [r3, #2]

	if(Is_GPS_Valid() ==0)
 800b05e:	f7ff ffd7 	bl	800b010 <Is_GPS_Valid>
 800b062:	4603      	mov	r3, r0
 800b064:	2b00      	cmp	r3, #0
 800b066:	d103      	bne.n	800b070 <Write_RTC+0x28>
	{
		printf("Invalid DATE received from MIE\n");
 800b068:	4844      	ldr	r0, [pc, #272]	; (800b17c <Write_RTC+0x134>)
 800b06a:	f017 fb37 	bl	80226dc <puts>
 800b06e:	e081      	b.n	800b174 <Write_RTC+0x12c>
		return;
	}


	Is_GPS_Packet_Received = 1;
 800b070:	4b43      	ldr	r3, [pc, #268]	; (800b180 <Write_RTC+0x138>)
 800b072:	2201      	movs	r2, #1
 800b074:	701a      	strb	r2, [r3, #0]

	set_time[0] = Dec_to_BCD(Gps_date_time_st.Secs);
 800b076:	4b43      	ldr	r3, [pc, #268]	; (800b184 <Write_RTC+0x13c>)
 800b078:	789b      	ldrb	r3, [r3, #2]
 800b07a:	4618      	mov	r0, r3
 800b07c:	f7ff ffa4 	bl	800afc8 <Dec_to_BCD>
 800b080:	4603      	mov	r3, r0
 800b082:	703b      	strb	r3, [r7, #0]
	set_time[1] = Dec_to_BCD(Gps_date_time_st.Mins);
 800b084:	4b3f      	ldr	r3, [pc, #252]	; (800b184 <Write_RTC+0x13c>)
 800b086:	785b      	ldrb	r3, [r3, #1]
 800b088:	4618      	mov	r0, r3
 800b08a:	f7ff ff9d 	bl	800afc8 <Dec_to_BCD>
 800b08e:	4603      	mov	r3, r0
 800b090:	707b      	strb	r3, [r7, #1]
	set_time[2] = Dec_to_BCD(Gps_date_time_st.Hour);
 800b092:	4b3c      	ldr	r3, [pc, #240]	; (800b184 <Write_RTC+0x13c>)
 800b094:	781b      	ldrb	r3, [r3, #0]
 800b096:	4618      	mov	r0, r3
 800b098:	f7ff ff96 	bl	800afc8 <Dec_to_BCD>
 800b09c:	4603      	mov	r3, r0
 800b09e:	70bb      	strb	r3, [r7, #2]

	set_time[3] = Dec_to_BCD(Gps_date_time_st.Date);
 800b0a0:	4b38      	ldr	r3, [pc, #224]	; (800b184 <Write_RTC+0x13c>)
 800b0a2:	78db      	ldrb	r3, [r3, #3]
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	f7ff ff8f 	bl	800afc8 <Dec_to_BCD>
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	70fb      	strb	r3, [r7, #3]
	set_time[4] = Dec_to_BCD(Gps_date_time_st.Mont);
 800b0ae:	4b35      	ldr	r3, [pc, #212]	; (800b184 <Write_RTC+0x13c>)
 800b0b0:	791b      	ldrb	r3, [r3, #4]
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	f7ff ff88 	bl	800afc8 <Dec_to_BCD>
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	713b      	strb	r3, [r7, #4]
	set_time[5] = Dec_to_BCD(Gps_date_time_st.Year);
 800b0bc:	4b31      	ldr	r3, [pc, #196]	; (800b184 <Write_RTC+0x13c>)
 800b0be:	795b      	ldrb	r3, [r3, #5]
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	f7ff ff81 	bl	800afc8 <Dec_to_BCD>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	717b      	strb	r3, [r7, #5]

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X00,1,&set_time[0],1,1000); //Seconds
 800b0ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b0ce:	9302      	str	r3, [sp, #8]
 800b0d0:	2301      	movs	r3, #1
 800b0d2:	9301      	str	r3, [sp, #4]
 800b0d4:	463b      	mov	r3, r7
 800b0d6:	9300      	str	r3, [sp, #0]
 800b0d8:	2301      	movs	r3, #1
 800b0da:	2200      	movs	r2, #0
 800b0dc:	21d0      	movs	r1, #208	; 0xd0
 800b0de:	482a      	ldr	r0, [pc, #168]	; (800b188 <Write_RTC+0x140>)
 800b0e0:	f00d f80e 	bl	8018100 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X01,1,&set_time[1],1,1000); //Minutes
 800b0e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b0e8:	9302      	str	r3, [sp, #8]
 800b0ea:	2301      	movs	r3, #1
 800b0ec:	9301      	str	r3, [sp, #4]
 800b0ee:	463b      	mov	r3, r7
 800b0f0:	3301      	adds	r3, #1
 800b0f2:	9300      	str	r3, [sp, #0]
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	2201      	movs	r2, #1
 800b0f8:	21d0      	movs	r1, #208	; 0xd0
 800b0fa:	4823      	ldr	r0, [pc, #140]	; (800b188 <Write_RTC+0x140>)
 800b0fc:	f00d f800 	bl	8018100 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X02,1,&set_time[2],1,1000); //Hour
 800b100:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b104:	9302      	str	r3, [sp, #8]
 800b106:	2301      	movs	r3, #1
 800b108:	9301      	str	r3, [sp, #4]
 800b10a:	463b      	mov	r3, r7
 800b10c:	3302      	adds	r3, #2
 800b10e:	9300      	str	r3, [sp, #0]
 800b110:	2301      	movs	r3, #1
 800b112:	2202      	movs	r2, #2
 800b114:	21d0      	movs	r1, #208	; 0xd0
 800b116:	481c      	ldr	r0, [pc, #112]	; (800b188 <Write_RTC+0x140>)
 800b118:	f00c fff2 	bl	8018100 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X04,1,&set_time[3],1,1000); //Date
 800b11c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b120:	9302      	str	r3, [sp, #8]
 800b122:	2301      	movs	r3, #1
 800b124:	9301      	str	r3, [sp, #4]
 800b126:	463b      	mov	r3, r7
 800b128:	3303      	adds	r3, #3
 800b12a:	9300      	str	r3, [sp, #0]
 800b12c:	2301      	movs	r3, #1
 800b12e:	2204      	movs	r2, #4
 800b130:	21d0      	movs	r1, #208	; 0xd0
 800b132:	4815      	ldr	r0, [pc, #84]	; (800b188 <Write_RTC+0x140>)
 800b134:	f00c ffe4 	bl	8018100 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X05,1,&set_time[4],1,1000); //Month
 800b138:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b13c:	9302      	str	r3, [sp, #8]
 800b13e:	2301      	movs	r3, #1
 800b140:	9301      	str	r3, [sp, #4]
 800b142:	463b      	mov	r3, r7
 800b144:	3304      	adds	r3, #4
 800b146:	9300      	str	r3, [sp, #0]
 800b148:	2301      	movs	r3, #1
 800b14a:	2205      	movs	r2, #5
 800b14c:	21d0      	movs	r1, #208	; 0xd0
 800b14e:	480e      	ldr	r0, [pc, #56]	; (800b188 <Write_RTC+0x140>)
 800b150:	f00c ffd6 	bl	8018100 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X06,1,&set_time[5],1,1000); //Year
 800b154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b158:	9302      	str	r3, [sp, #8]
 800b15a:	2301      	movs	r3, #1
 800b15c:	9301      	str	r3, [sp, #4]
 800b15e:	463b      	mov	r3, r7
 800b160:	3305      	adds	r3, #5
 800b162:	9300      	str	r3, [sp, #0]
 800b164:	2301      	movs	r3, #1
 800b166:	2206      	movs	r2, #6
 800b168:	21d0      	movs	r1, #208	; 0xd0
 800b16a:	4807      	ldr	r0, [pc, #28]	; (800b188 <Write_RTC+0x140>)
 800b16c:	f00c ffc8 	bl	8018100 <HAL_I2C_Mem_Write>

	Get_time();
 800b170:	f000 f80c 	bl	800b18c <Get_time>

}
 800b174:	3708      	adds	r7, #8
 800b176:	46bd      	mov	sp, r7
 800b178:	bd80      	pop	{r7, pc}
 800b17a:	bf00      	nop
 800b17c:	08025c84 	.word	0x08025c84
 800b180:	20000e78 	.word	0x20000e78
 800b184:	200027dc 	.word	0x200027dc
 800b188:	20009bcc 	.word	0x20009bcc

0800b18c <Get_time>:


void Get_time(void)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b086      	sub	sp, #24
 800b190:	af04      	add	r7, sp, #16
	uint8_t get_time[7];

	memset(get_time,0,sizeof(get_time));
 800b192:	463b      	mov	r3, r7
 800b194:	2207      	movs	r2, #7
 800b196:	2100      	movs	r1, #0
 800b198:	4618      	mov	r0, r3
 800b19a:	f017 f91b 	bl	80223d4 <memset>
	HAL_I2C_Mem_Read(&hi2c1, RTC_I2C_ADDR,0X00,1,get_time,7,1000);
 800b19e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b1a2:	9302      	str	r3, [sp, #8]
 800b1a4:	2307      	movs	r3, #7
 800b1a6:	9301      	str	r3, [sp, #4]
 800b1a8:	463b      	mov	r3, r7
 800b1aa:	9300      	str	r3, [sp, #0]
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	21d0      	movs	r1, #208	; 0xd0
 800b1b2:	4824      	ldr	r0, [pc, #144]	; (800b244 <Get_time+0xb8>)
 800b1b4:	f00d f8b8 	bl	8018328 <HAL_I2C_Mem_Read>

	RTC_Date_time_Dec_st.Secs = bcdToDec(get_time[0]);
 800b1b8:	783b      	ldrb	r3, [r7, #0]
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f7ff feea 	bl	800af94 <bcdToDec>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	461a      	mov	r2, r3
 800b1c4:	4b20      	ldr	r3, [pc, #128]	; (800b248 <Get_time+0xbc>)
 800b1c6:	709a      	strb	r2, [r3, #2]
	RTC_Date_time_Dec_st.Mins = bcdToDec(get_time[1]);
 800b1c8:	787b      	ldrb	r3, [r7, #1]
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	f7ff fee2 	bl	800af94 <bcdToDec>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	461a      	mov	r2, r3
 800b1d4:	4b1c      	ldr	r3, [pc, #112]	; (800b248 <Get_time+0xbc>)
 800b1d6:	705a      	strb	r2, [r3, #1]
	RTC_Date_time_Dec_st.Hour = bcdToDec(get_time[2]);
 800b1d8:	78bb      	ldrb	r3, [r7, #2]
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f7ff feda 	bl	800af94 <bcdToDec>
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	461a      	mov	r2, r3
 800b1e4:	4b18      	ldr	r3, [pc, #96]	; (800b248 <Get_time+0xbc>)
 800b1e6:	701a      	strb	r2, [r3, #0]
	RTC_Date_time_Dec_st.Date = bcdToDec(get_time[4]);
 800b1e8:	793b      	ldrb	r3, [r7, #4]
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f7ff fed2 	bl	800af94 <bcdToDec>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	461a      	mov	r2, r3
 800b1f4:	4b14      	ldr	r3, [pc, #80]	; (800b248 <Get_time+0xbc>)
 800b1f6:	70da      	strb	r2, [r3, #3]
	RTC_Date_time_Dec_st.Mont = bcdToDec(get_time[5]);
 800b1f8:	797b      	ldrb	r3, [r7, #5]
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f7ff feca 	bl	800af94 <bcdToDec>
 800b200:	4603      	mov	r3, r0
 800b202:	461a      	mov	r2, r3
 800b204:	4b10      	ldr	r3, [pc, #64]	; (800b248 <Get_time+0xbc>)
 800b206:	711a      	strb	r2, [r3, #4]
	RTC_Date_time_Dec_st.Year = bcdToDec(get_time[6]);
 800b208:	79bb      	ldrb	r3, [r7, #6]
 800b20a:	4618      	mov	r0, r3
 800b20c:	f7ff fec2 	bl	800af94 <bcdToDec>
 800b210:	4603      	mov	r3, r0
 800b212:	461a      	mov	r2, r3
 800b214:	4b0c      	ldr	r3, [pc, #48]	; (800b248 <Get_time+0xbc>)
 800b216:	715a      	strb	r2, [r3, #5]


	RTC_Date_time_BCD_st.Secs = (get_time[0]);
 800b218:	783a      	ldrb	r2, [r7, #0]
 800b21a:	4b0c      	ldr	r3, [pc, #48]	; (800b24c <Get_time+0xc0>)
 800b21c:	709a      	strb	r2, [r3, #2]
	RTC_Date_time_BCD_st.Mins = (get_time[1]);
 800b21e:	787a      	ldrb	r2, [r7, #1]
 800b220:	4b0a      	ldr	r3, [pc, #40]	; (800b24c <Get_time+0xc0>)
 800b222:	705a      	strb	r2, [r3, #1]
	RTC_Date_time_BCD_st.Hour = (get_time[2]);
 800b224:	78ba      	ldrb	r2, [r7, #2]
 800b226:	4b09      	ldr	r3, [pc, #36]	; (800b24c <Get_time+0xc0>)
 800b228:	701a      	strb	r2, [r3, #0]
	RTC_Date_time_BCD_st.Date = (get_time[4]);
 800b22a:	793a      	ldrb	r2, [r7, #4]
 800b22c:	4b07      	ldr	r3, [pc, #28]	; (800b24c <Get_time+0xc0>)
 800b22e:	70da      	strb	r2, [r3, #3]
	RTC_Date_time_BCD_st.Mont = (get_time[5]);
 800b230:	797a      	ldrb	r2, [r7, #5]
 800b232:	4b06      	ldr	r3, [pc, #24]	; (800b24c <Get_time+0xc0>)
 800b234:	711a      	strb	r2, [r3, #4]
	RTC_Date_time_BCD_st.Year = (get_time[6]);
 800b236:	79ba      	ldrb	r2, [r7, #6]
 800b238:	4b04      	ldr	r3, [pc, #16]	; (800b24c <Get_time+0xc0>)
 800b23a:	715a      	strb	r2, [r3, #5]
	//printf("%02u/%02u/%02u\n",RTC_Date_time_Dec_st.Date,RTC_Date_time_Dec_st.Mont,RTC_Date_time_Dec_st.Year);

	//printf(" CURRENT TIME: 	");
	//printf("%02u:%02u:%02u\n\n",RTC_Date_time_Dec_st.Hour,RTC_Date_time_Dec_st.Mins,RTC_Date_time_Dec_st.Secs);

	return;
 800b23c:	bf00      	nop
}
 800b23e:	3708      	adds	r7, #8
 800b240:	46bd      	mov	sp, r7
 800b242:	bd80      	pop	{r7, pc}
 800b244:	20009bcc 	.word	0x20009bcc
 800b248:	200027ec 	.word	0x200027ec
 800b24c:	200027f4 	.word	0x200027f4

0800b250 <Update_Time_Every_Sec>:


void Update_Time_Every_Sec(void)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	af00      	add	r7, sp, #0
	static uint32_t RTC_CLK=0;

	if( HAL_Elaps_Ticks(RTC_CLK) >=1000)
 800b254:	4b09      	ldr	r3, [pc, #36]	; (800b27c <Update_Time_Every_Sec+0x2c>)
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	4618      	mov	r0, r3
 800b25a:	f003 fbe7 	bl	800ea2c <HAL_Elaps_Ticks>
 800b25e:	4603      	mov	r3, r0
 800b260:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b264:	d307      	bcc.n	800b276 <Update_Time_Every_Sec+0x26>
	{
		Get_time();
 800b266:	f7ff ff91 	bl	800b18c <Get_time>
		//		printf("\n CURRENT DATE: 	");
		//		printf("%02u/%02u/%02u\n",RTC_Date_time_Dec_st.Date,RTC_Date_time_Dec_st.Mont,RTC_Date_time_Dec_st.Year);
		//
		//		printf(" CURRENT TIME: 	");
		//		printf("%02u:%02u:%02u\n\n",RTC_Date_time_Dec_st.Hour,RTC_Date_time_Dec_st.Mins,RTC_Date_time_Dec_st.Secs);
		RTC_CLK=HAL_GetTick();
 800b26a:	f00a f991 	bl	8015590 <HAL_GetTick>
 800b26e:	4603      	mov	r3, r0
 800b270:	4a02      	ldr	r2, [pc, #8]	; (800b27c <Update_Time_Every_Sec+0x2c>)
 800b272:	6013      	str	r3, [r2, #0]
	}
	return;
 800b274:	bf00      	nop
 800b276:	bf00      	nop
}
 800b278:	bd80      	pop	{r7, pc}
 800b27a:	bf00      	nop
 800b27c:	200027fc 	.word	0x200027fc

0800b280 <Process_SiemensEI>:

uint8_t SendReply = 0;


void Process_SiemensEI(void)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	af00      	add	r7, sp, #0
	while(1)
	{
		MX_LWIP_Process();
 800b284:	f011 fc72 	bl	801cb6c <MX_LWIP_Process>

		HAL_IWDG_Refresh(&hiwdg);
 800b288:	4813      	ldr	r0, [pc, #76]	; (800b2d8 <Process_SiemensEI+0x58>)
 800b28a:	f00d fce7 	bl	8018c5c <HAL_IWDG_Refresh>

		Feed_wdt();
 800b28e:	f008 f83b 	bl	8013308 <Feed_wdt>

		readCanToStructs();
 800b292:	f004 fe29 	bl	800fee8 <readCanToStructs>

		Chech_forSiemensCMD();
 800b296:	f001 fdfd 	bl	800ce94 <Chech_forSiemensCMD>

		ProcessSendingSignals2MIE();
 800b29a:	f001 fb7d 	bl	800c998 <ProcessSendingSignals2MIE>

		ProcessSelfSharing();
 800b29e:	f001 fc41 	bl	800cb24 <ProcessSelfSharing>

		Siemens_Data_Analyser();
 800b2a2:	f000 f81f 	bl	800b2e4 <Siemens_Data_Analyser>

		ProcessDetectNoValidDataReceive();
 800b2a6:	f001 fc5f 	bl	800cb68 <ProcessDetectNoValidDataReceive>

		SendRelays2Other();
 800b2aa:	f001 fca1 	bl	800cbf0 <SendRelays2Other>

		CheckRelayMisMatch();
 800b2ae:	f001 fcb7 	bl	800cc20 <CheckRelayMisMatch>

		Detect_SiemensCAN_Xchange_Failure();
 800b2b2:	f001 fcef 	bl	800cc94 <Detect_SiemensCAN_Xchange_Failure>

		Print_BuildDat_Details();
 800b2b6:	f009 f939 	bl	801452c <Print_BuildDat_Details>

		GetTimeStamp();
 800b2ba:	f002 fd75 	bl	800dda8 <GetTimeStamp>

		if(Dats_Request_Flag > 0)
 800b2be:	4b07      	ldr	r3, [pc, #28]	; (800b2dc <Process_SiemensEI+0x5c>)
 800b2c0:	781b      	ldrb	r3, [r3, #0]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d0de      	beq.n	800b284 <Process_SiemensEI+0x4>
		{
			gucFlagUpdate = 3;
 800b2c6:	4b06      	ldr	r3, [pc, #24]	; (800b2e0 <Process_SiemensEI+0x60>)
 800b2c8:	2203      	movs	r2, #3
 800b2ca:	701a      	strb	r2, [r3, #0]

	}

	while(1)
	{
		Data_Processing();
 800b2cc:	f009 f82c 	bl	8014328 <Data_Processing>
		HAL_IWDG_Refresh(&hiwdg);
 800b2d0:	4801      	ldr	r0, [pc, #4]	; (800b2d8 <Process_SiemensEI+0x58>)
 800b2d2:	f00d fcc3 	bl	8018c5c <HAL_IWDG_Refresh>
		Data_Processing();
 800b2d6:	e7f9      	b.n	800b2cc <Process_SiemensEI+0x4c>
 800b2d8:	20009c74 	.word	0x20009c74
 800b2dc:	20000644 	.word	0x20000644
 800b2e0:	20000a49 	.word	0x20000a49

0800b2e4 <Siemens_Data_Analyser>:
	}
}

void Siemens_Data_Analyser(void)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	f6ad 2d58 	subw	sp, sp, #2648	; 0xa58
 800b2ea:	af00      	add	r7, sp, #0

	uint8_t Data_Traverser =0;
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	f887 3a57 	strb.w	r3, [r7, #2647]	; 0xa57
	uint16_t Cal_CRC=0,Cal_CRC_Compliment=0;
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	f8a7 3a44 	strh.w	r3, [r7, #2628]	; 0xa44
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	f8a7 3a42 	strh.w	r3, [r7, #2626]	; 0xa42
	uint16_t Recv_CRC=0,Recv_CRC_Compliment=0;
 800b2fe:	2300      	movs	r3, #0
 800b300:	f8a7 3a54 	strh.w	r3, [r7, #2644]	; 0xa54
 800b304:	2300      	movs	r3, #0
 800b306:	f8a7 3a52 	strh.w	r3, [r7, #2642]	; 0xa52
	uint16_t Recv_CRC_Loc=0,Recv_CRC_Compliment_Loc = 0,Recv_CRC_Compliment_Size=0;
 800b30a:	2300      	movs	r3, #0
 800b30c:	f8a7 3a40 	strh.w	r3, [r7, #2624]	; 0xa40
 800b310:	2300      	movs	r3, #0
 800b312:	f8a7 3a3e 	strh.w	r3, [r7, #2622]	; 0xa3e
 800b316:	2300      	movs	r3, #0
 800b318:	f8a7 3a3c 	strh.w	r3, [r7, #2620]	; 0xa3c
	uint16_t Compliment_Data_Start_Loc = 0;
 800b31c:	2300      	movs	r3, #0
 800b31e:	f8a7 3a3a 	strh.w	r3, [r7, #2618]	; 0xa3a
	uint16_t App_data_Traverser = 0;
 800b322:	2300      	movs	r3, #0
 800b324:	f8a7 3a50 	strh.w	r3, [r7, #2640]	; 0xa50
	uint16_t VitalCRC = 0;
 800b328:	2300      	movs	r3, #0
 800b32a:	f8a7 3a38 	strh.w	r3, [r7, #2616]	; 0xa38
	uint16_t App_data_Size = 0;
 800b32e:	2300      	movs	r3, #0
 800b330:	f8a7 3a4e 	strh.w	r3, [r7, #2638]	; 0xa4e
	uint16_t TempApp_data_Size = 0;
 800b334:	2300      	movs	r3, #0
 800b336:	f8a7 3a4c 	strh.w	r3, [r7, #2636]	; 0xa4c
	uint8_t App_Data[SIEMENS_MAX_RELAY_SIZE];
	SIEMENS_PKT_t Temp_Siemens_RX_st;
	uint8_t Buff[MAX_SIEMENS_PKT_LENGTH] = {0,};
 800b33a:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b33e:	f6a3 234c 	subw	r3, r3, #2636	; 0xa4c
 800b342:	2200      	movs	r2, #0
 800b344:	601a      	str	r2, [r3, #0]
 800b346:	3304      	adds	r3, #4
 800b348:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800b34c:	2100      	movs	r1, #0
 800b34e:	4618      	mov	r0, r3
 800b350:	f017 f840 	bl	80223d4 <memset>
	uint16_t Size = 0;
 800b354:	2300      	movs	r3, #0
 800b356:	f8a7 3a36 	strh.w	r3, [r7, #2614]	; 0xa36
	uint8_t RejectPacketFlag = 0;
 800b35a:	2300      	movs	r3, #0
 800b35c:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b


	if(Ethernet_Circle_buff_st.Write_end > 10)
 800b360:	4b7c      	ldr	r3, [pc, #496]	; (800b554 <Siemens_Data_Analyser+0x270>)
 800b362:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800b366:	2b0a      	cmp	r3, #10
 800b368:	f240 86d4 	bls.w	800c114 <Siemens_Data_Analyser+0xe30>
	{
		memcpy(&Buff,Ethernet_Circle_buff_st.Ethernet_Buffers,Ethernet_Circle_buff_st.Write_end);
 800b36c:	4b79      	ldr	r3, [pc, #484]	; (800b554 <Siemens_Data_Analyser+0x270>)
 800b36e:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800b372:	461a      	mov	r2, r3
 800b374:	f107 030c 	add.w	r3, r7, #12
 800b378:	4976      	ldr	r1, [pc, #472]	; (800b554 <Siemens_Data_Analyser+0x270>)
 800b37a:	4618      	mov	r0, r3
 800b37c:	f017 f802 	bl	8022384 <memcpy>
		Size = Ethernet_Circle_buff_st.Write_end;
 800b380:	4b74      	ldr	r3, [pc, #464]	; (800b554 <Siemens_Data_Analyser+0x270>)
 800b382:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800b386:	f8a7 3a36 	strh.w	r3, [r7, #2614]	; 0xa36
		memset(&Ethernet_Circle_buff_st,0,sizeof(ETHERNET_Circle_t));
 800b38a:	f240 6204 	movw	r2, #1540	; 0x604
 800b38e:	2100      	movs	r1, #0
 800b390:	4870      	ldr	r0, [pc, #448]	; (800b554 <Siemens_Data_Analyser+0x270>)
 800b392:	f017 f81f 	bl	80223d4 <memset>
	else
	{
		return;
	}

	memset(&Temp_Siemens_RX_st,0,sizeof(SIEMENS_PKT_t));
 800b396:	f207 630c 	addw	r3, r7, #1548	; 0x60c
 800b39a:	f44f 720a 	mov.w	r2, #552	; 0x228
 800b39e:	2100      	movs	r1, #0
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f017 f817 	bl	80223d4 <memset>


	BITSTUFFINIT(0,0);
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Recv_CRC_Loc = ((Size/2)-2);
 800b3b2:	f8b7 3a36 	ldrh.w	r3, [r7, #2614]	; 0xa36
 800b3b6:	085b      	lsrs	r3, r3, #1
 800b3b8:	b29b      	uxth	r3, r3
 800b3ba:	3b02      	subs	r3, #2
 800b3bc:	f8a7 3a40 	strh.w	r3, [r7, #2624]	; 0xa40
	Recv_CRC_Compliment_Size = ((Size/2)-2);
 800b3c0:	f8b7 3a36 	ldrh.w	r3, [r7, #2614]	; 0xa36
 800b3c4:	085b      	lsrs	r3, r3, #1
 800b3c6:	b29b      	uxth	r3, r3
 800b3c8:	3b02      	subs	r3, #2
 800b3ca:	f8a7 3a3c 	strh.w	r3, [r7, #2620]	; 0xa3c
	Recv_CRC_Compliment_Loc = ((Size)-2);
 800b3ce:	f8b7 3a36 	ldrh.w	r3, [r7, #2614]	; 0xa36
 800b3d2:	3b02      	subs	r3, #2
 800b3d4:	f8a7 3a3e 	strh.w	r3, [r7, #2622]	; 0xa3e
	Compliment_Data_Start_Loc = (Size/2);
 800b3d8:	f8b7 3a36 	ldrh.w	r3, [r7, #2614]	; 0xa36
 800b3dc:	085b      	lsrs	r3, r3, #1
 800b3de:	f8a7 3a3a 	strh.w	r3, [r7, #2618]	; 0xa3a


	if(  Data_Compliment(Buff,Size,VERIFY)  != 1)
 800b3e2:	f8b7 1a36 	ldrh.w	r1, [r7, #2614]	; 0xa36
 800b3e6:	f107 030c 	add.w	r3, r7, #12
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	f002 fbc1 	bl	800db74 <Data_Compliment>
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	2b01      	cmp	r3, #1
 800b3f6:	d004      	beq.n	800b402 <Siemens_Data_Analyser+0x11e>
	{
		printf("Compliment Data Not Verified\n");
 800b3f8:	4857      	ldr	r0, [pc, #348]	; (800b558 <Siemens_Data_Analyser+0x274>)
 800b3fa:	f017 f96f 	bl	80226dc <puts>
		return ;
 800b3fe:	f000 be8c 	b.w	800c11a <Siemens_Data_Analyser+0xe36>
	}

	Recv_CRC = ExtractBits(0,16,&Buff[Recv_CRC_Loc]);
 800b402:	f8b7 3a40 	ldrh.w	r3, [r7, #2624]	; 0xa40
 800b406:	f107 020c 	add.w	r2, r7, #12
 800b40a:	4413      	add	r3, r2
 800b40c:	461a      	mov	r2, r3
 800b40e:	2110      	movs	r1, #16
 800b410:	2000      	movs	r0, #0
 800b412:	f7f5 f8ff 	bl	8000614 <ExtractBits>
 800b416:	4603      	mov	r3, r0
 800b418:	f8a7 3a54 	strh.w	r3, [r7, #2644]	; 0xa54
	Cal_CRC = Siemens_CRC(&Buff[0],Recv_CRC_Loc);
 800b41c:	f8b7 2a40 	ldrh.w	r2, [r7, #2624]	; 0xa40
 800b420:	f107 030c 	add.w	r3, r7, #12
 800b424:	4611      	mov	r1, r2
 800b426:	4618      	mov	r0, r3
 800b428:	f002 f8a8 	bl	800d57c <Siemens_CRC>
 800b42c:	4603      	mov	r3, r0
 800b42e:	f8a7 3a44 	strh.w	r3, [r7, #2628]	; 0xa44

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800b432:	4b4a      	ldr	r3, [pc, #296]	; (800b55c <Siemens_Data_Analyser+0x278>)
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	095b      	lsrs	r3, r3, #5
 800b438:	f003 0301 	and.w	r3, r3, #1
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d01c      	beq.n	800b47a <Siemens_Data_Analyser+0x196>
	{
		printf("Injecting INVALID_PACKET_CRC_SIEMENS\n");
 800b440:	4847      	ldr	r0, [pc, #284]	; (800b560 <Siemens_Data_Analyser+0x27c>)
 800b442:	f017 f94b 	bl	80226dc <puts>
		Recv_CRC = HAL_RNG_GetRandomNumber(&hrng) % 0xffff;
 800b446:	4847      	ldr	r0, [pc, #284]	; (800b564 <Siemens_Data_Analyser+0x280>)
 800b448:	f00e fd54 	bl	8019ef4 <HAL_RNG_GetRandomNumber>
 800b44c:	4601      	mov	r1, r0
 800b44e:	4b46      	ldr	r3, [pc, #280]	; (800b568 <Siemens_Data_Analyser+0x284>)
 800b450:	fba3 2301 	umull	r2, r3, r3, r1
 800b454:	0bda      	lsrs	r2, r3, #15
 800b456:	4613      	mov	r3, r2
 800b458:	041b      	lsls	r3, r3, #16
 800b45a:	1a9b      	subs	r3, r3, r2
 800b45c:	1aca      	subs	r2, r1, r3
 800b45e:	4613      	mov	r3, r2
 800b460:	f8a7 3a54 	strh.w	r3, [r7, #2644]	; 0xa54
		if(Recv_CRC == Cal_CRC)
 800b464:	f8b7 2a54 	ldrh.w	r2, [r7, #2644]	; 0xa54
 800b468:	f8b7 3a44 	ldrh.w	r3, [r7, #2628]	; 0xa44
 800b46c:	429a      	cmp	r2, r3
 800b46e:	d104      	bne.n	800b47a <Siemens_Data_Analyser+0x196>
		{
			Recv_CRC += 4;
 800b470:	f8b7 3a54 	ldrh.w	r3, [r7, #2644]	; 0xa54
 800b474:	3304      	adds	r3, #4
 800b476:	f8a7 3a54 	strh.w	r3, [r7, #2644]	; 0xa54
		}
	}
#endif

	if(Cal_CRC != Recv_CRC)
 800b47a:	f8b7 2a44 	ldrh.w	r2, [r7, #2628]	; 0xa44
 800b47e:	f8b7 3a54 	ldrh.w	r3, [r7, #2644]	; 0xa54
 800b482:	429a      	cmp	r2, r3
 800b484:	d010      	beq.n	800b4a8 <Siemens_Data_Analyser+0x1c4>
	{
		printf("1st CRC Fail\n");
 800b486:	4839      	ldr	r0, [pc, #228]	; (800b56c <Siemens_Data_Analyser+0x288>)
 800b488:	f017 f928 	bl	80226dc <puts>
		printf("Calculated:0x%04x\n",Cal_CRC);
 800b48c:	f8b7 3a44 	ldrh.w	r3, [r7, #2628]	; 0xa44
 800b490:	4619      	mov	r1, r3
 800b492:	4837      	ldr	r0, [pc, #220]	; (800b570 <Siemens_Data_Analyser+0x28c>)
 800b494:	f017 f886 	bl	80225a4 <iprintf>
		printf("Received:0x%04x\n",Recv_CRC);
 800b498:	f8b7 3a54 	ldrh.w	r3, [r7, #2644]	; 0xa54
 800b49c:	4619      	mov	r1, r3
 800b49e:	4835      	ldr	r0, [pc, #212]	; (800b574 <Siemens_Data_Analyser+0x290>)
 800b4a0:	f017 f880 	bl	80225a4 <iprintf>
		return;
 800b4a4:	f000 be39 	b.w	800c11a <Siemens_Data_Analyser+0xe36>
	}

	Recv_CRC_Compliment = ExtractBits(0,16,&Buff[Recv_CRC_Compliment_Loc]);
 800b4a8:	f8b7 3a3e 	ldrh.w	r3, [r7, #2622]	; 0xa3e
 800b4ac:	f107 020c 	add.w	r2, r7, #12
 800b4b0:	4413      	add	r3, r2
 800b4b2:	461a      	mov	r2, r3
 800b4b4:	2110      	movs	r1, #16
 800b4b6:	2000      	movs	r0, #0
 800b4b8:	f7f5 f8ac 	bl	8000614 <ExtractBits>
 800b4bc:	4603      	mov	r3, r0
 800b4be:	f8a7 3a52 	strh.w	r3, [r7, #2642]	; 0xa52
	Cal_CRC_Compliment = Siemens_CRC(&Buff[Compliment_Data_Start_Loc],Recv_CRC_Compliment_Size);
 800b4c2:	f8b7 3a3a 	ldrh.w	r3, [r7, #2618]	; 0xa3a
 800b4c6:	f107 020c 	add.w	r2, r7, #12
 800b4ca:	4413      	add	r3, r2
 800b4cc:	f8b7 2a3c 	ldrh.w	r2, [r7, #2620]	; 0xa3c
 800b4d0:	4611      	mov	r1, r2
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f002 f852 	bl	800d57c <Siemens_CRC>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	f8a7 3a42 	strh.w	r3, [r7, #2626]	; 0xa42

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_COMP_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800b4de:	4b1f      	ldr	r3, [pc, #124]	; (800b55c <Siemens_Data_Analyser+0x278>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	0a1b      	lsrs	r3, r3, #8
 800b4e4:	f003 0301 	and.w	r3, r3, #1
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d01c      	beq.n	800b526 <Siemens_Data_Analyser+0x242>
	{
		printf("Injecting INVALID_COMP_PACKET_CRC_SIEMENS\n");
 800b4ec:	4822      	ldr	r0, [pc, #136]	; (800b578 <Siemens_Data_Analyser+0x294>)
 800b4ee:	f017 f8f5 	bl	80226dc <puts>
		Recv_CRC_Compliment = HAL_RNG_GetRandomNumber(&hrng) % 0xffff;
 800b4f2:	481c      	ldr	r0, [pc, #112]	; (800b564 <Siemens_Data_Analyser+0x280>)
 800b4f4:	f00e fcfe 	bl	8019ef4 <HAL_RNG_GetRandomNumber>
 800b4f8:	4601      	mov	r1, r0
 800b4fa:	4b1b      	ldr	r3, [pc, #108]	; (800b568 <Siemens_Data_Analyser+0x284>)
 800b4fc:	fba3 2301 	umull	r2, r3, r3, r1
 800b500:	0bda      	lsrs	r2, r3, #15
 800b502:	4613      	mov	r3, r2
 800b504:	041b      	lsls	r3, r3, #16
 800b506:	1a9b      	subs	r3, r3, r2
 800b508:	1aca      	subs	r2, r1, r3
 800b50a:	4613      	mov	r3, r2
 800b50c:	f8a7 3a52 	strh.w	r3, [r7, #2642]	; 0xa52
		if(Recv_CRC_Compliment == Cal_CRC_Compliment)
 800b510:	f8b7 2a52 	ldrh.w	r2, [r7, #2642]	; 0xa52
 800b514:	f8b7 3a42 	ldrh.w	r3, [r7, #2626]	; 0xa42
 800b518:	429a      	cmp	r2, r3
 800b51a:	d104      	bne.n	800b526 <Siemens_Data_Analyser+0x242>
		{
			Recv_CRC_Compliment += 4;
 800b51c:	f8b7 3a52 	ldrh.w	r3, [r7, #2642]	; 0xa52
 800b520:	3304      	adds	r3, #4
 800b522:	f8a7 3a52 	strh.w	r3, [r7, #2642]	; 0xa52
		}
	}
#endif

	if(Cal_CRC_Compliment != Recv_CRC_Compliment)
 800b526:	f8b7 2a42 	ldrh.w	r2, [r7, #2626]	; 0xa42
 800b52a:	f8b7 3a52 	ldrh.w	r3, [r7, #2642]	; 0xa52
 800b52e:	429a      	cmp	r2, r3
 800b530:	d02a      	beq.n	800b588 <Siemens_Data_Analyser+0x2a4>
	{
		printf("2nd CRC Fail\n");
 800b532:	4812      	ldr	r0, [pc, #72]	; (800b57c <Siemens_Data_Analyser+0x298>)
 800b534:	f017 f8d2 	bl	80226dc <puts>
		printf("Cal_CRC_Compliment:0x%04x\n",Cal_CRC_Compliment);
 800b538:	f8b7 3a42 	ldrh.w	r3, [r7, #2626]	; 0xa42
 800b53c:	4619      	mov	r1, r3
 800b53e:	4810      	ldr	r0, [pc, #64]	; (800b580 <Siemens_Data_Analyser+0x29c>)
 800b540:	f017 f830 	bl	80225a4 <iprintf>
		printf("Recv_CRC_Compliment:0x%04x\n",Recv_CRC_Compliment);
 800b544:	f8b7 3a52 	ldrh.w	r3, [r7, #2642]	; 0xa52
 800b548:	4619      	mov	r1, r3
 800b54a:	480e      	ldr	r0, [pc, #56]	; (800b584 <Siemens_Data_Analyser+0x2a0>)
 800b54c:	f017 f82a 	bl	80225a4 <iprintf>
		return;
 800b550:	f000 bde3 	b.w	800c11a <Siemens_Data_Analyser+0xe36>
 800b554:	20004bb8 	.word	0x20004bb8
 800b558:	08025ca4 	.word	0x08025ca4
 800b55c:	2000347c 	.word	0x2000347c
 800b560:	08025cc4 	.word	0x08025cc4
 800b564:	20009c84 	.word	0x20009c84
 800b568:	80008001 	.word	0x80008001
 800b56c:	08025cec 	.word	0x08025cec
 800b570:	08025cfc 	.word	0x08025cfc
 800b574:	08025d10 	.word	0x08025d10
 800b578:	08025d24 	.word	0x08025d24
 800b57c:	08025d50 	.word	0x08025d50
 800b580:	08025d60 	.word	0x08025d60
 800b584:	08025d7c 	.word	0x08025d7c
	}

	Temp_Siemens_RX_st.DesSysType = Extract_Parity_Data(ucBit,8,&Buff[ucByte],ODD_PARITY);
 800b588:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800b58c:	b2d8      	uxtb	r0, r3
 800b58e:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800b592:	f107 020c 	add.w	r2, r7, #12
 800b596:	441a      	add	r2, r3
 800b598:	2301      	movs	r3, #1
 800b59a:	2108      	movs	r1, #8
 800b59c:	f002 f842 	bl	800d624 <Extract_Parity_Data>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	b2da      	uxtb	r2, r3
 800b5a4:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b5a8:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b5ac:	701a      	strb	r2, [r3, #0]

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_DES_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800b5ae:	4b56      	ldr	r3, [pc, #344]	; (800b708 <Siemens_Data_Analyser+0x424>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	f003 0301 	and.w	r3, r3, #1
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d02a      	beq.n	800b610 <Siemens_Data_Analyser+0x32c>
	{
		printf("Injecting INVALID_DES_SYS_TYPE\n");
 800b5ba:	4854      	ldr	r0, [pc, #336]	; (800b70c <Siemens_Data_Analyser+0x428>)
 800b5bc:	f017 f88e 	bl	80226dc <puts>
		Temp_Siemens_RX_st.DesSysType = HAL_RNG_GetRandomNumber(&hrng) % 0xff;
 800b5c0:	4853      	ldr	r0, [pc, #332]	; (800b710 <Siemens_Data_Analyser+0x42c>)
 800b5c2:	f00e fc97 	bl	8019ef4 <HAL_RNG_GetRandomNumber>
 800b5c6:	4601      	mov	r1, r0
 800b5c8:	4b52      	ldr	r3, [pc, #328]	; (800b714 <Siemens_Data_Analyser+0x430>)
 800b5ca:	fba3 2301 	umull	r2, r3, r3, r1
 800b5ce:	09da      	lsrs	r2, r3, #7
 800b5d0:	4613      	mov	r3, r2
 800b5d2:	021b      	lsls	r3, r3, #8
 800b5d4:	1a9b      	subs	r3, r3, r2
 800b5d6:	1aca      	subs	r2, r1, r3
 800b5d8:	b2d2      	uxtb	r2, r2
 800b5da:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b5de:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b5e2:	701a      	strb	r2, [r3, #0]
		if(Temp_Siemens_RX_st.DesSysType == EI_data.Siemens_st.DestSysType)
 800b5e4:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b5e8:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b5ec:	781a      	ldrb	r2, [r3, #0]
 800b5ee:	4b4a      	ldr	r3, [pc, #296]	; (800b718 <Siemens_Data_Analyser+0x434>)
 800b5f0:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 800b5f4:	429a      	cmp	r2, r3
 800b5f6:	d10b      	bne.n	800b610 <Siemens_Data_Analyser+0x32c>
		{
			Temp_Siemens_RX_st.DesSysType += 4;
 800b5f8:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b5fc:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b600:	781b      	ldrb	r3, [r3, #0]
 800b602:	3304      	adds	r3, #4
 800b604:	b2da      	uxtb	r2, r3
 800b606:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b60a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b60e:	701a      	strb	r2, [r3, #0]
		}
	}
#endif

	if(Temp_Siemens_RX_st.DesSysType != EI_data.Siemens_st.DestSysType)
 800b610:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b614:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b618:	781a      	ldrb	r2, [r3, #0]
 800b61a:	4b3f      	ldr	r3, [pc, #252]	; (800b718 <Siemens_Data_Analyser+0x434>)
 800b61c:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 800b620:	429a      	cmp	r2, r3
 800b622:	d015      	beq.n	800b650 <Siemens_Data_Analyser+0x36c>
	{
		printf("Destination System Type Not Matched\n");
 800b624:	483d      	ldr	r0, [pc, #244]	; (800b71c <Siemens_Data_Analyser+0x438>)
 800b626:	f017 f859 	bl	80226dc <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.DesSysType);
 800b62a:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b62e:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b632:	781b      	ldrb	r3, [r3, #0]
 800b634:	4619      	mov	r1, r3
 800b636:	483a      	ldr	r0, [pc, #232]	; (800b720 <Siemens_Data_Analyser+0x43c>)
 800b638:	f016 ffb4 	bl	80225a4 <iprintf>
		printf("Expected:%u\n",EI_data.Siemens_st.DestSysType);
 800b63c:	4b36      	ldr	r3, [pc, #216]	; (800b718 <Siemens_Data_Analyser+0x434>)
 800b63e:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 800b642:	4619      	mov	r1, r3
 800b644:	4837      	ldr	r0, [pc, #220]	; (800b724 <Siemens_Data_Analyser+0x440>)
 800b646:	f016 ffad 	bl	80225a4 <iprintf>
		RejectPacketFlag = 1;
 800b64a:	2301      	movs	r3, #1
 800b64c:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("Des_type:%u\n",Temp_Siemens_RX_st.dst_sys_typ);
	BITSTUFFINC(8);//Destination System Type
 800b650:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800b654:	3308      	adds	r3, #8
 800b656:	2b00      	cmp	r3, #0
 800b658:	da00      	bge.n	800b65c <Siemens_Data_Analyser+0x378>
 800b65a:	3307      	adds	r3, #7
 800b65c:	10db      	asrs	r3, r3, #3
 800b65e:	b29a      	uxth	r2, r3
 800b660:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800b664:	4413      	add	r3, r2
 800b666:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800b66a:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800b66e:	3308      	adds	r3, #8
 800b670:	b29b      	uxth	r3, r3
 800b672:	b21b      	sxth	r3, r3
 800b674:	425a      	negs	r2, r3
 800b676:	f003 0307 	and.w	r3, r3, #7
 800b67a:	f002 0207 	and.w	r2, r2, #7
 800b67e:	bf58      	it	pl
 800b680:	4253      	negpl	r3, r2
 800b682:	b21b      	sxth	r3, r3
 800b684:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.DestAddr = Extract_Parity_Data(ucBit,24,&Buff[ucByte],EVEN_PARITY);
 800b688:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800b68c:	b2d8      	uxtb	r0, r3
 800b68e:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800b692:	f107 020c 	add.w	r2, r7, #12
 800b696:	441a      	add	r2, r3
 800b698:	2300      	movs	r3, #0
 800b69a:	2118      	movs	r1, #24
 800b69c:	f001 ffc2 	bl	800d624 <Extract_Parity_Data>
 800b6a0:	4603      	mov	r3, r0
 800b6a2:	461a      	mov	r2, r3
 800b6a4:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b6a8:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b6ac:	605a      	str	r2, [r3, #4]

	if(Temp_Siemens_RX_st.DestAddr != -1)
 800b6ae:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b6b2:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b6b6:	685b      	ldr	r3, [r3, #4]
 800b6b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6bc:	d036      	beq.n	800b72c <Siemens_Data_Analyser+0x448>
	{
		uint8_t ExtractBuffer[3] = {0,};
 800b6be:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b6c2:	f5a3 6325 	sub.w	r3, r3, #2640	; 0xa50
 800b6c6:	4a18      	ldr	r2, [pc, #96]	; (800b728 <Siemens_Data_Analyser+0x444>)
 800b6c8:	8812      	ldrh	r2, [r2, #0]
 800b6ca:	801a      	strh	r2, [r3, #0]
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	709a      	strb	r2, [r3, #2]
		ExtractAppData(&Buff[ucByte], 3, ExtractBuffer);
 800b6d0:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800b6d4:	f107 020c 	add.w	r2, r7, #12
 800b6d8:	4413      	add	r3, r2
 800b6da:	f107 0208 	add.w	r2, r7, #8
 800b6de:	2103      	movs	r1, #3
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	f000 fd45 	bl	800c170 <ExtractAppData>
		memcpy(&Temp_Siemens_RX_st.ExtDestAddr,&ExtractBuffer, 3);
 800b6e6:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b6ea:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b6ee:	f607 2258 	addw	r2, r7, #2648	; 0xa58
 800b6f2:	f5a2 6225 	sub.w	r2, r2, #2640	; 0xa50
 800b6f6:	3308      	adds	r3, #8
 800b6f8:	6812      	ldr	r2, [r2, #0]
 800b6fa:	4611      	mov	r1, r2
 800b6fc:	8019      	strh	r1, [r3, #0]
 800b6fe:	3302      	adds	r3, #2
 800b700:	0c12      	lsrs	r2, r2, #16
 800b702:	701a      	strb	r2, [r3, #0]
 800b704:	e015      	b.n	800b732 <Siemens_Data_Analyser+0x44e>
 800b706:	bf00      	nop
 800b708:	2000347c 	.word	0x2000347c
 800b70c:	08025d98 	.word	0x08025d98
 800b710:	20009c84 	.word	0x20009c84
 800b714:	80808081 	.word	0x80808081
 800b718:	20000304 	.word	0x20000304
 800b71c:	08025db8 	.word	0x08025db8
 800b720:	08025ddc 	.word	0x08025ddc
 800b724:	08025dec 	.word	0x08025dec
 800b728:	08025f70 	.word	0x08025f70
	}
	else
	{
		RejectPacketFlag = 1;
 800b72c:	2301      	movs	r3, #1
 800b72e:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	//			Temp_Siemens_RX_st.DesSysType += 4;
	//		}
	//	}
	//#endif

	if(Temp_Siemens_RX_st.ExtDestAddr != EI_data.Siemens_st.DestAddress)
 800b732:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b736:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b73a:	689a      	ldr	r2, [r3, #8]
 800b73c:	4bbf      	ldr	r3, [pc, #764]	; (800ba3c <Siemens_Data_Analyser+0x758>)
 800b73e:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 800b742:	429a      	cmp	r2, r3
 800b744:	d015      	beq.n	800b772 <Siemens_Data_Analyser+0x48e>
	{
		printf("Destination Address Not Matched\n");
 800b746:	48be      	ldr	r0, [pc, #760]	; (800ba40 <Siemens_Data_Analyser+0x75c>)
 800b748:	f016 ffc8 	bl	80226dc <puts>
		printf("Received:%lu\n",Temp_Siemens_RX_st.DestAddr);
 800b74c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b750:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b754:	685b      	ldr	r3, [r3, #4]
 800b756:	4619      	mov	r1, r3
 800b758:	48ba      	ldr	r0, [pc, #744]	; (800ba44 <Siemens_Data_Analyser+0x760>)
 800b75a:	f016 ff23 	bl	80225a4 <iprintf>
		printf("Expected:%lu\n",EI_data.Siemens_st.DestAddress);
 800b75e:	4bb7      	ldr	r3, [pc, #732]	; (800ba3c <Siemens_Data_Analyser+0x758>)
 800b760:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 800b764:	4619      	mov	r1, r3
 800b766:	48b8      	ldr	r0, [pc, #736]	; (800ba48 <Siemens_Data_Analyser+0x764>)
 800b768:	f016 ff1c 	bl	80225a4 <iprintf>
		RejectPacketFlag = 1;
 800b76c:	2301      	movs	r3, #1
 800b76e:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("dst_add:%lu\n",Temp_Siemens_RX_st.dst_add);
	BITSTUFFINC(24);//Destination Address
 800b772:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800b776:	3318      	adds	r3, #24
 800b778:	2b00      	cmp	r3, #0
 800b77a:	da00      	bge.n	800b77e <Siemens_Data_Analyser+0x49a>
 800b77c:	3307      	adds	r3, #7
 800b77e:	10db      	asrs	r3, r3, #3
 800b780:	b29a      	uxth	r2, r3
 800b782:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800b786:	4413      	add	r3, r2
 800b788:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800b78c:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800b790:	3318      	adds	r3, #24
 800b792:	b29b      	uxth	r3, r3
 800b794:	b21b      	sxth	r3, r3
 800b796:	425a      	negs	r2, r3
 800b798:	f003 0307 	and.w	r3, r3, #7
 800b79c:	f002 0207 	and.w	r2, r2, #7
 800b7a0:	bf58      	it	pl
 800b7a2:	4253      	negpl	r3, r2
 800b7a4:	b21b      	sxth	r3, r3
 800b7a6:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.SrcSysType = Extract_Parity_Data(ucBit,8,&Buff[ucByte],ODD_PARITY);
 800b7aa:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800b7ae:	b2d8      	uxtb	r0, r3
 800b7b0:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800b7b4:	f107 020c 	add.w	r2, r7, #12
 800b7b8:	441a      	add	r2, r3
 800b7ba:	2301      	movs	r3, #1
 800b7bc:	2108      	movs	r1, #8
 800b7be:	f001 ff31 	bl	800d624 <Extract_Parity_Data>
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	b2da      	uxtb	r2, r3
 800b7c6:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b7ca:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b7ce:	731a      	strb	r2, [r3, #12]

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_SRC_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800b7d0:	4b9e      	ldr	r3, [pc, #632]	; (800ba4c <Siemens_Data_Analyser+0x768>)
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	085b      	lsrs	r3, r3, #1
 800b7d6:	f003 0301 	and.w	r3, r3, #1
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d02a      	beq.n	800b834 <Siemens_Data_Analyser+0x550>
	{
		printf("Injecting INVALID_SRC_SYS_TYPE\n");
 800b7de:	489c      	ldr	r0, [pc, #624]	; (800ba50 <Siemens_Data_Analyser+0x76c>)
 800b7e0:	f016 ff7c 	bl	80226dc <puts>
		Temp_Siemens_RX_st.SrcSysType = HAL_RNG_GetRandomNumber(&hrng) % 0xff;
 800b7e4:	489b      	ldr	r0, [pc, #620]	; (800ba54 <Siemens_Data_Analyser+0x770>)
 800b7e6:	f00e fb85 	bl	8019ef4 <HAL_RNG_GetRandomNumber>
 800b7ea:	4601      	mov	r1, r0
 800b7ec:	4b9a      	ldr	r3, [pc, #616]	; (800ba58 <Siemens_Data_Analyser+0x774>)
 800b7ee:	fba3 2301 	umull	r2, r3, r3, r1
 800b7f2:	09da      	lsrs	r2, r3, #7
 800b7f4:	4613      	mov	r3, r2
 800b7f6:	021b      	lsls	r3, r3, #8
 800b7f8:	1a9b      	subs	r3, r3, r2
 800b7fa:	1aca      	subs	r2, r1, r3
 800b7fc:	b2d2      	uxtb	r2, r2
 800b7fe:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b802:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b806:	731a      	strb	r2, [r3, #12]
		if(Temp_Siemens_RX_st.SrcSysType == EI_data.Siemens_st.SourceSysType)
 800b808:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b80c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b810:	7b1a      	ldrb	r2, [r3, #12]
 800b812:	4b8a      	ldr	r3, [pc, #552]	; (800ba3c <Siemens_Data_Analyser+0x758>)
 800b814:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
 800b818:	429a      	cmp	r2, r3
 800b81a:	d10b      	bne.n	800b834 <Siemens_Data_Analyser+0x550>
		{
			Temp_Siemens_RX_st.SrcSysType += 4;
 800b81c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b820:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b824:	7b1b      	ldrb	r3, [r3, #12]
 800b826:	3304      	adds	r3, #4
 800b828:	b2da      	uxtb	r2, r3
 800b82a:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b82e:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b832:	731a      	strb	r2, [r3, #12]
		}
	}
#endif

	if(Temp_Siemens_RX_st.SrcSysType != EI_data.Siemens_st.SourceSysType)
 800b834:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b838:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b83c:	7b1a      	ldrb	r2, [r3, #12]
 800b83e:	4b7f      	ldr	r3, [pc, #508]	; (800ba3c <Siemens_Data_Analyser+0x758>)
 800b840:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
 800b844:	429a      	cmp	r2, r3
 800b846:	d015      	beq.n	800b874 <Siemens_Data_Analyser+0x590>
	{
		printf("Source System Type Not Matched\n");
 800b848:	4884      	ldr	r0, [pc, #528]	; (800ba5c <Siemens_Data_Analyser+0x778>)
 800b84a:	f016 ff47 	bl	80226dc <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.SrcSysType);
 800b84e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b852:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b856:	7b1b      	ldrb	r3, [r3, #12]
 800b858:	4619      	mov	r1, r3
 800b85a:	4881      	ldr	r0, [pc, #516]	; (800ba60 <Siemens_Data_Analyser+0x77c>)
 800b85c:	f016 fea2 	bl	80225a4 <iprintf>
		printf("Expected:%u\n",EI_data.Siemens_st.SourceSysType);
 800b860:	4b76      	ldr	r3, [pc, #472]	; (800ba3c <Siemens_Data_Analyser+0x758>)
 800b862:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
 800b866:	4619      	mov	r1, r3
 800b868:	487e      	ldr	r0, [pc, #504]	; (800ba64 <Siemens_Data_Analyser+0x780>)
 800b86a:	f016 fe9b 	bl	80225a4 <iprintf>
		RejectPacketFlag = 1;
 800b86e:	2301      	movs	r3, #1
 800b870:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("Src_sys_type:%u\n",Temp_Siemens_RX_st.Src_sys_type);
	BITSTUFFINC(8);//Source System Type
 800b874:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800b878:	3308      	adds	r3, #8
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	da00      	bge.n	800b880 <Siemens_Data_Analyser+0x59c>
 800b87e:	3307      	adds	r3, #7
 800b880:	10db      	asrs	r3, r3, #3
 800b882:	b29a      	uxth	r2, r3
 800b884:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800b888:	4413      	add	r3, r2
 800b88a:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800b88e:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800b892:	3308      	adds	r3, #8
 800b894:	b29b      	uxth	r3, r3
 800b896:	b21b      	sxth	r3, r3
 800b898:	425a      	negs	r2, r3
 800b89a:	f003 0307 	and.w	r3, r3, #7
 800b89e:	f002 0207 	and.w	r2, r2, #7
 800b8a2:	bf58      	it	pl
 800b8a4:	4253      	negpl	r3, r2
 800b8a6:	b21b      	sxth	r3, r3
 800b8a8:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.SourceAddr = Extract_Parity_Data(ucBit,24,&Buff[ucByte],EVEN_PARITY);
 800b8ac:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800b8b0:	b2d8      	uxtb	r0, r3
 800b8b2:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800b8b6:	f107 020c 	add.w	r2, r7, #12
 800b8ba:	441a      	add	r2, r3
 800b8bc:	2300      	movs	r3, #0
 800b8be:	2118      	movs	r1, #24
 800b8c0:	f001 feb0 	bl	800d624 <Extract_Parity_Data>
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	461a      	mov	r2, r3
 800b8c8:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b8cc:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b8d0:	611a      	str	r2, [r3, #16]

	if(Temp_Siemens_RX_st.SourceAddr != -1)
 800b8d2:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b8d6:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b8da:	691b      	ldr	r3, [r3, #16]
 800b8dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8e0:	d021      	beq.n	800b926 <Siemens_Data_Analyser+0x642>
	{
		uint8_t ExtractBuffer[3] = {0,};
 800b8e2:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b8e6:	f6a3 2354 	subw	r3, r3, #2644	; 0xa54
 800b8ea:	4a5f      	ldr	r2, [pc, #380]	; (800ba68 <Siemens_Data_Analyser+0x784>)
 800b8ec:	8812      	ldrh	r2, [r2, #0]
 800b8ee:	801a      	strh	r2, [r3, #0]
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	709a      	strb	r2, [r3, #2]
		ExtractAppData(&Buff[ucByte], 3, ExtractBuffer);
 800b8f4:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800b8f8:	f107 020c 	add.w	r2, r7, #12
 800b8fc:	4413      	add	r3, r2
 800b8fe:	1d3a      	adds	r2, r7, #4
 800b900:	2103      	movs	r1, #3
 800b902:	4618      	mov	r0, r3
 800b904:	f000 fc34 	bl	800c170 <ExtractAppData>
		memcpy(&Temp_Siemens_RX_st.ExtSourceAddr,&ExtractBuffer, 3);
 800b908:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b90c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b910:	f607 2258 	addw	r2, r7, #2648	; 0xa58
 800b914:	f6a2 2254 	subw	r2, r2, #2644	; 0xa54
 800b918:	3314      	adds	r3, #20
 800b91a:	6812      	ldr	r2, [r2, #0]
 800b91c:	4611      	mov	r1, r2
 800b91e:	8019      	strh	r1, [r3, #0]
 800b920:	3302      	adds	r3, #2
 800b922:	0c12      	lsrs	r2, r2, #16
 800b924:	701a      	strb	r2, [r3, #0]
	}

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_SRC_ADDR,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800b926:	4b49      	ldr	r3, [pc, #292]	; (800ba4c <Siemens_Data_Analyser+0x768>)
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	089b      	lsrs	r3, r3, #2
 800b92c:	f003 0301 	and.w	r3, r3, #1
 800b930:	2b00      	cmp	r3, #0
 800b932:	d02c      	beq.n	800b98e <Siemens_Data_Analyser+0x6aa>
	{
		printf("Injecting INVALID_SRC_ADDR\n");
 800b934:	484d      	ldr	r0, [pc, #308]	; (800ba6c <Siemens_Data_Analyser+0x788>)
 800b936:	f016 fed1 	bl	80226dc <puts>
		Temp_Siemens_RX_st.SourceAddr = HAL_RNG_GetRandomNumber(&hrng) % 0xffffff;
 800b93a:	4846      	ldr	r0, [pc, #280]	; (800ba54 <Siemens_Data_Analyser+0x770>)
 800b93c:	f00e fada 	bl	8019ef4 <HAL_RNG_GetRandomNumber>
 800b940:	4601      	mov	r1, r0
 800b942:	f240 1301 	movw	r3, #257	; 0x101
 800b946:	fba3 2301 	umull	r2, r3, r3, r1
 800b94a:	1aca      	subs	r2, r1, r3
 800b94c:	0852      	lsrs	r2, r2, #1
 800b94e:	4413      	add	r3, r2
 800b950:	0dda      	lsrs	r2, r3, #23
 800b952:	4613      	mov	r3, r2
 800b954:	061b      	lsls	r3, r3, #24
 800b956:	1a9b      	subs	r3, r3, r2
 800b958:	1aca      	subs	r2, r1, r3
 800b95a:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b95e:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b962:	611a      	str	r2, [r3, #16]
		if(Temp_Siemens_RX_st.ExtSourceAddr == EI_data.Siemens_st.SourceAddress)
 800b964:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b968:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b96c:	695a      	ldr	r2, [r3, #20]
 800b96e:	4b33      	ldr	r3, [pc, #204]	; (800ba3c <Siemens_Data_Analyser+0x758>)
 800b970:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b974:	429a      	cmp	r2, r3
 800b976:	d10a      	bne.n	800b98e <Siemens_Data_Analyser+0x6aa>
		{
			Temp_Siemens_RX_st.ExtSourceAddr += 4;
 800b978:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b97c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b980:	695b      	ldr	r3, [r3, #20]
 800b982:	1d1a      	adds	r2, r3, #4
 800b984:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b988:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b98c:	615a      	str	r2, [r3, #20]
		}
	}
#endif


	if(Temp_Siemens_RX_st.ExtSourceAddr != EI_data.Siemens_st.SourceAddress)
 800b98e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b992:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b996:	695a      	ldr	r2, [r3, #20]
 800b998:	4b28      	ldr	r3, [pc, #160]	; (800ba3c <Siemens_Data_Analyser+0x758>)
 800b99a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b99e:	429a      	cmp	r2, r3
 800b9a0:	d015      	beq.n	800b9ce <Siemens_Data_Analyser+0x6ea>
	{
		printf("Source Address Not Matched\n");
 800b9a2:	4833      	ldr	r0, [pc, #204]	; (800ba70 <Siemens_Data_Analyser+0x78c>)
 800b9a4:	f016 fe9a 	bl	80226dc <puts>
		printf("Received:%lu\n",Temp_Siemens_RX_st.ExtSourceAddr);
 800b9a8:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b9ac:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b9b0:	695b      	ldr	r3, [r3, #20]
 800b9b2:	4619      	mov	r1, r3
 800b9b4:	4823      	ldr	r0, [pc, #140]	; (800ba44 <Siemens_Data_Analyser+0x760>)
 800b9b6:	f016 fdf5 	bl	80225a4 <iprintf>
		printf("Expected:%lu\n",EI_data.Siemens_st.SourceAddress);
 800b9ba:	4b20      	ldr	r3, [pc, #128]	; (800ba3c <Siemens_Data_Analyser+0x758>)
 800b9bc:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b9c0:	4619      	mov	r1, r3
 800b9c2:	4821      	ldr	r0, [pc, #132]	; (800ba48 <Siemens_Data_Analyser+0x764>)
 800b9c4:	f016 fdee 	bl	80225a4 <iprintf>
		RejectPacketFlag = 1;
 800b9c8:	2301      	movs	r3, #1
 800b9ca:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("src_add:%lu\n",Temp_Siemens_RX_st.src_add);
	BITSTUFFINC(24);//Source Address
 800b9ce:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800b9d2:	3318      	adds	r3, #24
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	da00      	bge.n	800b9da <Siemens_Data_Analyser+0x6f6>
 800b9d8:	3307      	adds	r3, #7
 800b9da:	10db      	asrs	r3, r3, #3
 800b9dc:	b29a      	uxth	r2, r3
 800b9de:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800b9e2:	4413      	add	r3, r2
 800b9e4:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800b9e8:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800b9ec:	3318      	adds	r3, #24
 800b9ee:	b29b      	uxth	r3, r3
 800b9f0:	b21b      	sxth	r3, r3
 800b9f2:	425a      	negs	r2, r3
 800b9f4:	f003 0307 	and.w	r3, r3, #7
 800b9f8:	f002 0207 	and.w	r2, r2, #7
 800b9fc:	bf58      	it	pl
 800b9fe:	4253      	negpl	r3, r2
 800ba00:	b21b      	sxth	r3, r3
 800ba02:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.ProdDataVer = Extract_Parity_Data(ucBit,8,&Buff[ucByte],EVEN_PARITY);
 800ba06:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800ba0a:	b2d8      	uxtb	r0, r3
 800ba0c:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800ba10:	f107 020c 	add.w	r2, r7, #12
 800ba14:	441a      	add	r2, r3
 800ba16:	2300      	movs	r3, #0
 800ba18:	2108      	movs	r1, #8
 800ba1a:	f001 fe03 	bl	800d624 <Extract_Parity_Data>
 800ba1e:	4603      	mov	r3, r0
 800ba20:	b2da      	uxtb	r2, r3
 800ba22:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800ba26:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800ba2a:	761a      	strb	r2, [r3, #24]
	//	printf("prod_data_ver:%u\n",Temp_Siemens_RX_st.prod_data_ver);
	BITSTUFFINC(8);//Product Data Version
 800ba2c:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800ba30:	3308      	adds	r3, #8
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	da1e      	bge.n	800ba74 <Siemens_Data_Analyser+0x790>
 800ba36:	3307      	adds	r3, #7
 800ba38:	e01c      	b.n	800ba74 <Siemens_Data_Analyser+0x790>
 800ba3a:	bf00      	nop
 800ba3c:	20000304 	.word	0x20000304
 800ba40:	08025dfc 	.word	0x08025dfc
 800ba44:	08025e1c 	.word	0x08025e1c
 800ba48:	08025e2c 	.word	0x08025e2c
 800ba4c:	2000347c 	.word	0x2000347c
 800ba50:	08025e3c 	.word	0x08025e3c
 800ba54:	20009c84 	.word	0x20009c84
 800ba58:	80808081 	.word	0x80808081
 800ba5c:	08025e5c 	.word	0x08025e5c
 800ba60:	08025ddc 	.word	0x08025ddc
 800ba64:	08025dec 	.word	0x08025dec
 800ba68:	08025f70 	.word	0x08025f70
 800ba6c:	08025e7c 	.word	0x08025e7c
 800ba70:	08025e98 	.word	0x08025e98
 800ba74:	10db      	asrs	r3, r3, #3
 800ba76:	b29a      	uxth	r2, r3
 800ba78:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800ba7c:	4413      	add	r3, r2
 800ba7e:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800ba82:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800ba86:	3308      	adds	r3, #8
 800ba88:	b29b      	uxth	r3, r3
 800ba8a:	b21b      	sxth	r3, r3
 800ba8c:	425a      	negs	r2, r3
 800ba8e:	f003 0307 	and.w	r3, r3, #7
 800ba92:	f002 0207 	and.w	r2, r2, #7
 800ba96:	bf58      	it	pl
 800ba98:	4253      	negpl	r3, r2
 800ba9a:	b21b      	sxth	r3, r3
 800ba9c:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.CompIndex = Extract_Parity_Data(ucBit,8,&Buff[ucByte],ODD_PARITY);
 800baa0:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800baa4:	b2d8      	uxtb	r0, r3
 800baa6:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800baaa:	f107 020c 	add.w	r2, r7, #12
 800baae:	441a      	add	r2, r3
 800bab0:	2301      	movs	r3, #1
 800bab2:	2108      	movs	r1, #8
 800bab4:	f001 fdb6 	bl	800d624 <Extract_Parity_Data>
 800bab8:	4603      	mov	r3, r0
 800baba:	b2da      	uxtb	r2, r3
 800babc:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bac0:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bac4:	765a      	strb	r2, [r3, #25]
	//	printf("comp_index:%u\n",Temp_Siemens_RX_st.comp_index);
	BITSTUFFINC(8);//Compatability Index
 800bac6:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800baca:	3308      	adds	r3, #8
 800bacc:	2b00      	cmp	r3, #0
 800bace:	da00      	bge.n	800bad2 <Siemens_Data_Analyser+0x7ee>
 800bad0:	3307      	adds	r3, #7
 800bad2:	10db      	asrs	r3, r3, #3
 800bad4:	b29a      	uxth	r2, r3
 800bad6:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bada:	4413      	add	r3, r2
 800badc:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800bae0:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800bae4:	3308      	adds	r3, #8
 800bae6:	b29b      	uxth	r3, r3
 800bae8:	b21b      	sxth	r3, r3
 800baea:	425a      	negs	r2, r3
 800baec:	f003 0307 	and.w	r3, r3, #7
 800baf0:	f002 0207 	and.w	r2, r2, #7
 800baf4:	bf58      	it	pl
 800baf6:	4253      	negpl	r3, r2
 800baf8:	b21b      	sxth	r3, r3
 800bafa:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.DestPort = Extract_Parity_Data(ucBit,8,&Buff[ucByte],NO_PARITY);
 800bafe:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800bb02:	b2d8      	uxtb	r0, r3
 800bb04:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bb08:	f107 020c 	add.w	r2, r7, #12
 800bb0c:	441a      	add	r2, r3
 800bb0e:	2302      	movs	r3, #2
 800bb10:	2108      	movs	r1, #8
 800bb12:	f001 fd87 	bl	800d624 <Extract_Parity_Data>
 800bb16:	4603      	mov	r3, r0
 800bb18:	b2da      	uxtb	r2, r3
 800bb1a:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bb1e:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bb22:	769a      	strb	r2, [r3, #26]

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_DES_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800bb24:	4bab      	ldr	r3, [pc, #684]	; (800bdd4 <Siemens_Data_Analyser+0xaf0>)
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	08db      	lsrs	r3, r3, #3
 800bb2a:	f003 0301 	and.w	r3, r3, #1
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d02a      	beq.n	800bb88 <Siemens_Data_Analyser+0x8a4>
	{
		printf("Injecting INVALID_DES_PORT\n");
 800bb32:	48a9      	ldr	r0, [pc, #676]	; (800bdd8 <Siemens_Data_Analyser+0xaf4>)
 800bb34:	f016 fdd2 	bl	80226dc <puts>
		Temp_Siemens_RX_st.DestPort = HAL_RNG_GetRandomNumber(&hrng) % 0xff;
 800bb38:	48a8      	ldr	r0, [pc, #672]	; (800bddc <Siemens_Data_Analyser+0xaf8>)
 800bb3a:	f00e f9db 	bl	8019ef4 <HAL_RNG_GetRandomNumber>
 800bb3e:	4601      	mov	r1, r0
 800bb40:	4ba7      	ldr	r3, [pc, #668]	; (800bde0 <Siemens_Data_Analyser+0xafc>)
 800bb42:	fba3 2301 	umull	r2, r3, r3, r1
 800bb46:	09da      	lsrs	r2, r3, #7
 800bb48:	4613      	mov	r3, r2
 800bb4a:	021b      	lsls	r3, r3, #8
 800bb4c:	1a9b      	subs	r3, r3, r2
 800bb4e:	1aca      	subs	r2, r1, r3
 800bb50:	b2d2      	uxtb	r2, r2
 800bb52:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bb56:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bb5a:	769a      	strb	r2, [r3, #26]
		if(Temp_Siemens_RX_st.DestPort == EI_data.Siemens_st.DestPort)
 800bb5c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bb60:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bb64:	7e9a      	ldrb	r2, [r3, #26]
 800bb66:	4b9f      	ldr	r3, [pc, #636]	; (800bde4 <Siemens_Data_Analyser+0xb00>)
 800bb68:	f893 32a3 	ldrb.w	r3, [r3, #675]	; 0x2a3
 800bb6c:	429a      	cmp	r2, r3
 800bb6e:	d10b      	bne.n	800bb88 <Siemens_Data_Analyser+0x8a4>
		{
			Temp_Siemens_RX_st.DestPort += 4;
 800bb70:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bb74:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bb78:	7e9b      	ldrb	r3, [r3, #26]
 800bb7a:	3304      	adds	r3, #4
 800bb7c:	b2da      	uxtb	r2, r3
 800bb7e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bb82:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bb86:	769a      	strb	r2, [r3, #26]
		}
	}
#endif

	if(Temp_Siemens_RX_st.DestPort != EI_data.Siemens_st.DestPort)
 800bb88:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bb8c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bb90:	7e9a      	ldrb	r2, [r3, #26]
 800bb92:	4b94      	ldr	r3, [pc, #592]	; (800bde4 <Siemens_Data_Analyser+0xb00>)
 800bb94:	f893 32a3 	ldrb.w	r3, [r3, #675]	; 0x2a3
 800bb98:	429a      	cmp	r2, r3
 800bb9a:	d015      	beq.n	800bbc8 <Siemens_Data_Analyser+0x8e4>
	{
		printf("Destination Port Not Matched\n");
 800bb9c:	4892      	ldr	r0, [pc, #584]	; (800bde8 <Siemens_Data_Analyser+0xb04>)
 800bb9e:	f016 fd9d 	bl	80226dc <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.DestPort);
 800bba2:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bba6:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bbaa:	7e9b      	ldrb	r3, [r3, #26]
 800bbac:	4619      	mov	r1, r3
 800bbae:	488f      	ldr	r0, [pc, #572]	; (800bdec <Siemens_Data_Analyser+0xb08>)
 800bbb0:	f016 fcf8 	bl	80225a4 <iprintf>
		printf("Expected:%u\n",EI_data.Siemens_st.DestPort);
 800bbb4:	4b8b      	ldr	r3, [pc, #556]	; (800bde4 <Siemens_Data_Analyser+0xb00>)
 800bbb6:	f893 32a3 	ldrb.w	r3, [r3, #675]	; 0x2a3
 800bbba:	4619      	mov	r1, r3
 800bbbc:	488c      	ldr	r0, [pc, #560]	; (800bdf0 <Siemens_Data_Analyser+0xb0c>)
 800bbbe:	f016 fcf1 	bl	80225a4 <iprintf>
		RejectPacketFlag = 1;
 800bbc2:	2301      	movs	r3, #1
 800bbc4:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("dst_port:%u\n",Temp_Siemens_RX_st.dst_port);
	BITSTUFFINC(8); //Dest Port.
 800bbc8:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800bbcc:	3308      	adds	r3, #8
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	da00      	bge.n	800bbd4 <Siemens_Data_Analyser+0x8f0>
 800bbd2:	3307      	adds	r3, #7
 800bbd4:	10db      	asrs	r3, r3, #3
 800bbd6:	b29a      	uxth	r2, r3
 800bbd8:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bbdc:	4413      	add	r3, r2
 800bbde:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800bbe2:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800bbe6:	3308      	adds	r3, #8
 800bbe8:	b29b      	uxth	r3, r3
 800bbea:	b21b      	sxth	r3, r3
 800bbec:	425a      	negs	r2, r3
 800bbee:	f003 0307 	and.w	r3, r3, #7
 800bbf2:	f002 0207 	and.w	r2, r2, #7
 800bbf6:	bf58      	it	pl
 800bbf8:	4253      	negpl	r3, r2
 800bbfa:	b21b      	sxth	r3, r3
 800bbfc:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.SourcePort = Extract_Parity_Data(ucBit,8,&Buff[ucByte],NO_PARITY);
 800bc00:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800bc04:	b2d8      	uxtb	r0, r3
 800bc06:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bc0a:	f107 020c 	add.w	r2, r7, #12
 800bc0e:	441a      	add	r2, r3
 800bc10:	2302      	movs	r3, #2
 800bc12:	2108      	movs	r1, #8
 800bc14:	f001 fd06 	bl	800d624 <Extract_Parity_Data>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	b2da      	uxtb	r2, r3
 800bc1c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bc20:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bc24:	76da      	strb	r2, [r3, #27]

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_SRC_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800bc26:	4b6b      	ldr	r3, [pc, #428]	; (800bdd4 <Siemens_Data_Analyser+0xaf0>)
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	091b      	lsrs	r3, r3, #4
 800bc2c:	f003 0301 	and.w	r3, r3, #1
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d02a      	beq.n	800bc8a <Siemens_Data_Analyser+0x9a6>
	{
		printf("Injecting INVALID_SRC_PORT\n");
 800bc34:	486f      	ldr	r0, [pc, #444]	; (800bdf4 <Siemens_Data_Analyser+0xb10>)
 800bc36:	f016 fd51 	bl	80226dc <puts>
		Temp_Siemens_RX_st.SourcePort = HAL_RNG_GetRandomNumber(&hrng) % 0xff;
 800bc3a:	4868      	ldr	r0, [pc, #416]	; (800bddc <Siemens_Data_Analyser+0xaf8>)
 800bc3c:	f00e f95a 	bl	8019ef4 <HAL_RNG_GetRandomNumber>
 800bc40:	4601      	mov	r1, r0
 800bc42:	4b67      	ldr	r3, [pc, #412]	; (800bde0 <Siemens_Data_Analyser+0xafc>)
 800bc44:	fba3 2301 	umull	r2, r3, r3, r1
 800bc48:	09da      	lsrs	r2, r3, #7
 800bc4a:	4613      	mov	r3, r2
 800bc4c:	021b      	lsls	r3, r3, #8
 800bc4e:	1a9b      	subs	r3, r3, r2
 800bc50:	1aca      	subs	r2, r1, r3
 800bc52:	b2d2      	uxtb	r2, r2
 800bc54:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bc58:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bc5c:	76da      	strb	r2, [r3, #27]
		if(Temp_Siemens_RX_st.SourcePort == EI_data.Siemens_st.SourcePort)
 800bc5e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bc62:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bc66:	7eda      	ldrb	r2, [r3, #27]
 800bc68:	4b5e      	ldr	r3, [pc, #376]	; (800bde4 <Siemens_Data_Analyser+0xb00>)
 800bc6a:	f893 32a4 	ldrb.w	r3, [r3, #676]	; 0x2a4
 800bc6e:	429a      	cmp	r2, r3
 800bc70:	d10b      	bne.n	800bc8a <Siemens_Data_Analyser+0x9a6>
		{
			Temp_Siemens_RX_st.SourcePort += 4;
 800bc72:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bc76:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bc7a:	7edb      	ldrb	r3, [r3, #27]
 800bc7c:	3304      	adds	r3, #4
 800bc7e:	b2da      	uxtb	r2, r3
 800bc80:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bc84:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bc88:	76da      	strb	r2, [r3, #27]
		}
	}
#endif

	if(Temp_Siemens_RX_st.SourcePort != EI_data.Siemens_st.SourcePort)
 800bc8a:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bc8e:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bc92:	7eda      	ldrb	r2, [r3, #27]
 800bc94:	4b53      	ldr	r3, [pc, #332]	; (800bde4 <Siemens_Data_Analyser+0xb00>)
 800bc96:	f893 32a4 	ldrb.w	r3, [r3, #676]	; 0x2a4
 800bc9a:	429a      	cmp	r2, r3
 800bc9c:	d015      	beq.n	800bcca <Siemens_Data_Analyser+0x9e6>
	{
		printf("Source Port Not Matched\n");
 800bc9e:	4856      	ldr	r0, [pc, #344]	; (800bdf8 <Siemens_Data_Analyser+0xb14>)
 800bca0:	f016 fd1c 	bl	80226dc <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.SourcePort);
 800bca4:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bca8:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bcac:	7edb      	ldrb	r3, [r3, #27]
 800bcae:	4619      	mov	r1, r3
 800bcb0:	484e      	ldr	r0, [pc, #312]	; (800bdec <Siemens_Data_Analyser+0xb08>)
 800bcb2:	f016 fc77 	bl	80225a4 <iprintf>
		printf("Expected:%u\n",EI_data.Siemens_st.SourcePort);
 800bcb6:	4b4b      	ldr	r3, [pc, #300]	; (800bde4 <Siemens_Data_Analyser+0xb00>)
 800bcb8:	f893 32a4 	ldrb.w	r3, [r3, #676]	; 0x2a4
 800bcbc:	4619      	mov	r1, r3
 800bcbe:	484c      	ldr	r0, [pc, #304]	; (800bdf0 <Siemens_Data_Analyser+0xb0c>)
 800bcc0:	f016 fc70 	bl	80225a4 <iprintf>
		RejectPacketFlag = 1;
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("src_port:%u\n",Temp_Siemens_RX_st.src_port);
	BITSTUFFINC(8); // Source Port.
 800bcca:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800bcce:	3308      	adds	r3, #8
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	da00      	bge.n	800bcd6 <Siemens_Data_Analyser+0x9f2>
 800bcd4:	3307      	adds	r3, #7
 800bcd6:	10db      	asrs	r3, r3, #3
 800bcd8:	b29a      	uxth	r2, r3
 800bcda:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bcde:	4413      	add	r3, r2
 800bce0:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800bce4:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800bce8:	3308      	adds	r3, #8
 800bcea:	b29b      	uxth	r3, r3
 800bcec:	b21b      	sxth	r3, r3
 800bcee:	425a      	negs	r2, r3
 800bcf0:	f003 0307 	and.w	r3, r3, #7
 800bcf4:	f002 0207 	and.w	r2, r2, #7
 800bcf8:	bf58      	it	pl
 800bcfa:	4253      	negpl	r3, r2
 800bcfc:	b21b      	sxth	r3, r3
 800bcfe:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46


	Temp_Siemens_RX_st.RxTimeStamp = Extract_Parity_Data(ucBit,32,&Buff[ucByte],NO_PARITY);
 800bd02:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800bd06:	b2d8      	uxtb	r0, r3
 800bd08:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bd0c:	f107 020c 	add.w	r2, r7, #12
 800bd10:	441a      	add	r2, r3
 800bd12:	2302      	movs	r3, #2
 800bd14:	2120      	movs	r1, #32
 800bd16:	f001 fc85 	bl	800d624 <Extract_Parity_Data>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	461a      	mov	r2, r3
 800bd1e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bd22:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bd26:	61da      	str	r2, [r3, #28]
	//	printf("Rx_time_stamp:%lu\n",Temp_Siemens_RX_st.Rx_time_stamp);
	BITSTUFFINC(32);//RX_TIME STAMP
 800bd28:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800bd2c:	3320      	adds	r3, #32
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	da00      	bge.n	800bd34 <Siemens_Data_Analyser+0xa50>
 800bd32:	3307      	adds	r3, #7
 800bd34:	10db      	asrs	r3, r3, #3
 800bd36:	b29a      	uxth	r2, r3
 800bd38:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bd3c:	4413      	add	r3, r2
 800bd3e:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800bd42:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800bd46:	3320      	adds	r3, #32
 800bd48:	b29b      	uxth	r3, r3
 800bd4a:	b21b      	sxth	r3, r3
 800bd4c:	425a      	negs	r2, r3
 800bd4e:	f003 0307 	and.w	r3, r3, #7
 800bd52:	f002 0207 	and.w	r2, r2, #7
 800bd56:	bf58      	it	pl
 800bd58:	4253      	negpl	r3, r2
 800bd5a:	b21b      	sxth	r3, r3
 800bd5c:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46


	Temp_Siemens_RX_st.TxTimeStamp = Extract_Parity_Data(ucBit,32,&Buff[ucByte],NO_PARITY);
 800bd60:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800bd64:	b2d8      	uxtb	r0, r3
 800bd66:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bd6a:	f107 020c 	add.w	r2, r7, #12
 800bd6e:	441a      	add	r2, r3
 800bd70:	2302      	movs	r3, #2
 800bd72:	2120      	movs	r1, #32
 800bd74:	f001 fc56 	bl	800d624 <Extract_Parity_Data>
 800bd78:	4603      	mov	r3, r0
 800bd7a:	461a      	mov	r2, r3
 800bd7c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bd80:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bd84:	621a      	str	r2, [r3, #32]
	//	printf("Tx_time_stamp:%lu\n",Temp_Siemens_RX_st.Tx_time_stamp);
	BITSTUFFINC(32);//TX_TIME STAMP
 800bd86:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800bd8a:	3320      	adds	r3, #32
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	da00      	bge.n	800bd92 <Siemens_Data_Analyser+0xaae>
 800bd90:	3307      	adds	r3, #7
 800bd92:	10db      	asrs	r3, r3, #3
 800bd94:	b29a      	uxth	r2, r3
 800bd96:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bd9a:	4413      	add	r3, r2
 800bd9c:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800bda0:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800bda4:	3320      	adds	r3, #32
 800bda6:	b29b      	uxth	r3, r3
 800bda8:	b21b      	sxth	r3, r3
 800bdaa:	425a      	negs	r2, r3
 800bdac:	f003 0307 	and.w	r3, r3, #7
 800bdb0:	f002 0207 	and.w	r2, r2, #7
 800bdb4:	bf58      	it	pl
 800bdb6:	4253      	negpl	r3, r2
 800bdb8:	b21b      	sxth	r3, r3
 800bdba:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	//TO DO WRITE DATA EXTRACTION
	App_data_Size = 0;
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	f8a7 3a4e 	strh.w	r3, [r7, #2638]	; 0xa4e
	printf("\n");
 800bdc4:	200a      	movs	r0, #10
 800bdc6:	f016 fc05 	bl	80225d4 <putchar>
	for(Data_Traverser = ucByte; Data_Traverser <Recv_CRC_Loc; Data_Traverser++)
 800bdca:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bdce:	f887 3a57 	strb.w	r3, [r7, #2647]	; 0xa57
 800bdd2:	e052      	b.n	800be7a <Siemens_Data_Analyser+0xb96>
 800bdd4:	2000347c 	.word	0x2000347c
 800bdd8:	08025eb4 	.word	0x08025eb4
 800bddc:	20009c84 	.word	0x20009c84
 800bde0:	80808081 	.word	0x80808081
 800bde4:	20000304 	.word	0x20000304
 800bde8:	08025ed0 	.word	0x08025ed0
 800bdec:	08025ddc 	.word	0x08025ddc
 800bdf0:	08025dec 	.word	0x08025dec
 800bdf4:	08025ef0 	.word	0x08025ef0
 800bdf8:	08025f0c 	.word	0x08025f0c
	{
		App_Data[App_data_Traverser++] = Extract_Parity_Data(ucBit,8,&Buff[Data_Traverser],EVEN_PARITY);
 800bdfc:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800be00:	b2d8      	uxtb	r0, r3
 800be02:	f897 3a57 	ldrb.w	r3, [r7, #2647]	; 0xa57
 800be06:	f107 020c 	add.w	r2, r7, #12
 800be0a:	441a      	add	r2, r3
 800be0c:	2300      	movs	r3, #0
 800be0e:	2108      	movs	r1, #8
 800be10:	f001 fc08 	bl	800d624 <Extract_Parity_Data>
 800be14:	4601      	mov	r1, r0
 800be16:	f8b7 3a50 	ldrh.w	r3, [r7, #2640]	; 0xa50
 800be1a:	1c5a      	adds	r2, r3, #1
 800be1c:	f8a7 2a50 	strh.w	r2, [r7, #2640]	; 0xa50
 800be20:	461a      	mov	r2, r3
 800be22:	b2c9      	uxtb	r1, r1
 800be24:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800be28:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800be2c:	5499      	strb	r1, [r3, r2]
		//printf("D[%02u]:%02x|",App_data_Size,App_Data[App_data_Size]);
		//Temp_Siemens_RX_st.app_data[App_data_Traverser++] = Extract_Parity_Data(ucBit,8,&Buff[Data_Traverser],EVEN_PARITY);
		//Extract the Received application data into buffer and checking parity and Removing Parity.
		++App_data_Size; //This variable is to know the Latest Size of Received Application Data
 800be2e:	f8b7 3a4e 	ldrh.w	r3, [r7, #2638]	; 0xa4e
 800be32:	3301      	adds	r3, #1
 800be34:	f8a7 3a4e 	strh.w	r3, [r7, #2638]	; 0xa4e
		BITSTUFFINC(8);
 800be38:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800be3c:	3308      	adds	r3, #8
 800be3e:	2b00      	cmp	r3, #0
 800be40:	da00      	bge.n	800be44 <Siemens_Data_Analyser+0xb60>
 800be42:	3307      	adds	r3, #7
 800be44:	10db      	asrs	r3, r3, #3
 800be46:	b29a      	uxth	r2, r3
 800be48:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800be4c:	4413      	add	r3, r2
 800be4e:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800be52:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800be56:	3308      	adds	r3, #8
 800be58:	b29b      	uxth	r3, r3
 800be5a:	b21b      	sxth	r3, r3
 800be5c:	425a      	negs	r2, r3
 800be5e:	f003 0307 	and.w	r3, r3, #7
 800be62:	f002 0207 	and.w	r2, r2, #7
 800be66:	bf58      	it	pl
 800be68:	4253      	negpl	r3, r2
 800be6a:	b21b      	sxth	r3, r3
 800be6c:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46
	for(Data_Traverser = ucByte; Data_Traverser <Recv_CRC_Loc; Data_Traverser++)
 800be70:	f897 3a57 	ldrb.w	r3, [r7, #2647]	; 0xa57
 800be74:	3301      	adds	r3, #1
 800be76:	f887 3a57 	strb.w	r3, [r7, #2647]	; 0xa57
 800be7a:	f897 3a57 	ldrb.w	r3, [r7, #2647]	; 0xa57
 800be7e:	b29b      	uxth	r3, r3
 800be80:	f8b7 2a40 	ldrh.w	r2, [r7, #2624]	; 0xa40
 800be84:	429a      	cmp	r2, r3
 800be86:	d8b9      	bhi.n	800bdfc <Siemens_Data_Analyser+0xb18>
	}
	printf("\n");
 800be88:	200a      	movs	r0, #10
 800be8a:	f016 fba3 	bl	80225d4 <putchar>



	Temp_Siemens_RX_st.No_ofDataBytes = ExtractAppData(App_Data, App_data_Size, Temp_Siemens_RX_st.AppData);
 800be8e:	f207 630c 	addw	r3, r7, #1548	; 0x60c
 800be92:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800be96:	f8b7 1a4e 	ldrh.w	r1, [r7, #2638]	; 0xa4e
 800be9a:	f607 0334 	addw	r3, r7, #2100	; 0x834
 800be9e:	4618      	mov	r0, r3
 800bea0:	f000 f966 	bl	800c170 <ExtractAppData>
 800bea4:	4603      	mov	r3, r0
 800bea6:	461a      	mov	r2, r3
 800bea8:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800beac:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800beb0:	849a      	strh	r2, [r3, #36]	; 0x24

	//	Temp_Siemens_RX_st.No_ofDataBytes = App_data_Size;

	TempApp_data_Size  = EI_data.Siemens_st.Booloutputs % 8;
 800beb2:	4b9c      	ldr	r3, [pc, #624]	; (800c124 <Siemens_Data_Analyser+0xe40>)
 800beb4:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800beb8:	f003 0307 	and.w	r3, r3, #7
 800bebc:	f8a7 3a4c 	strh.w	r3, [r7, #2636]	; 0xa4c
	if(TempApp_data_Size!= 0)
 800bec0:	f8b7 3a4c 	ldrh.w	r3, [r7, #2636]	; 0xa4c
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d008      	beq.n	800beda <Siemens_Data_Analyser+0xbf6>
	{
		TempApp_data_Size  = (EI_data.Siemens_st.Booloutputs / 8) + 1;
 800bec8:	4b96      	ldr	r3, [pc, #600]	; (800c124 <Siemens_Data_Analyser+0xe40>)
 800beca:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800bece:	08db      	lsrs	r3, r3, #3
 800bed0:	b29b      	uxth	r3, r3
 800bed2:	3301      	adds	r3, #1
 800bed4:	f8a7 3a4c 	strh.w	r3, [r7, #2636]	; 0xa4c
 800bed8:	e005      	b.n	800bee6 <Siemens_Data_Analyser+0xc02>
	}
	else
	{
		TempApp_data_Size  = (EI_data.Siemens_st.Booloutputs/8);
 800beda:	4b92      	ldr	r3, [pc, #584]	; (800c124 <Siemens_Data_Analyser+0xe40>)
 800bedc:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800bee0:	08db      	lsrs	r3, r3, #3
 800bee2:	f8a7 3a4c 	strh.w	r3, [r7, #2636]	; 0xa4c
	}


	if(Temp_Siemens_RX_st.No_ofDataBytes != TempApp_data_Size)
 800bee6:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800beea:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800beee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800bef0:	f8b7 2a4c 	ldrh.w	r2, [r7, #2636]	; 0xa4c
 800bef4:	429a      	cmp	r2, r3
 800bef6:	d02c      	beq.n	800bf52 <Siemens_Data_Analyser+0xc6e>
	{
		printf("Application Data Not Matched\n");
 800bef8:	488b      	ldr	r0, [pc, #556]	; (800c128 <Siemens_Data_Analyser+0xe44>)
 800befa:	f016 fbef 	bl	80226dc <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.No_ofDataBytes);
 800befe:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bf02:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bf06:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800bf08:	4619      	mov	r1, r3
 800bf0a:	4888      	ldr	r0, [pc, #544]	; (800c12c <Siemens_Data_Analyser+0xe48>)
 800bf0c:	f016 fb4a 	bl	80225a4 <iprintf>
		printf("Expected:%u\n",TempApp_data_Size);
 800bf10:	f8b7 3a4c 	ldrh.w	r3, [r7, #2636]	; 0xa4c
 800bf14:	4619      	mov	r1, r3
 800bf16:	4886      	ldr	r0, [pc, #536]	; (800c130 <Siemens_Data_Analyser+0xe4c>)
 800bf18:	f016 fb44 	bl	80225a4 <iprintf>

		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)
 800bf1c:	4985      	ldr	r1, [pc, #532]	; (800c134 <Siemens_Data_Analyser+0xe50>)
 800bf1e:	4886      	ldr	r0, [pc, #536]	; (800c138 <Siemens_Data_Analyser+0xe54>)
 800bf20:	f7f4 f98e 	bl	8000240 <strcmp>
 800bf24:	4603      	mov	r3, r0
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d002      	beq.n	800bf30 <Siemens_Data_Analyser+0xc4c>
		{
			RejectPacketFlag = 1;
 800bf2a:	2301      	movs	r3, #1
 800bf2c:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
		}
		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 800bf30:	4980      	ldr	r1, [pc, #512]	; (800c134 <Siemens_Data_Analyser+0xe50>)
 800bf32:	4881      	ldr	r0, [pc, #516]	; (800c138 <Siemens_Data_Analyser+0xe54>)
 800bf34:	f7f4 f984 	bl	8000240 <strcmp>
 800bf38:	4603      	mov	r3, r0
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d109      	bne.n	800bf52 <Siemens_Data_Analyser+0xc6e>
		{
			EI_data.Siemens_st.Booloutputs = (Temp_Siemens_RX_st.No_ofDataBytes * 8);
 800bf3e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bf42:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bf46:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800bf48:	00db      	lsls	r3, r3, #3
 800bf4a:	b29a      	uxth	r2, r3
 800bf4c:	4b75      	ldr	r3, [pc, #468]	; (800c124 <Siemens_Data_Analyser+0xe40>)
 800bf4e:	f8a3 22fe 	strh.w	r2, [r3, #766]	; 0x2fe
		}
	}

	if(RejectPacketFlag == 1)
 800bf52:	f897 3a4b 	ldrb.w	r3, [r7, #2635]	; 0xa4b
 800bf56:	2b01      	cmp	r3, #1
 800bf58:	f000 80de 	beq.w	800c118 <Siemens_Data_Analyser+0xe34>
	{
		return;
	}

	VitalCRC = GetCRC16(0, Temp_Siemens_RX_st.AppData, App_data_Size); /* Calculating Application Data CRC */
 800bf5c:	f9b7 2a4e 	ldrsh.w	r2, [r7, #2638]	; 0xa4e
 800bf60:	f207 630c 	addw	r3, r7, #1548	; 0x60c
 800bf64:	3326      	adds	r3, #38	; 0x26
 800bf66:	4619      	mov	r1, r3
 800bf68:	2000      	movs	r0, #0
 800bf6a:	f006 fe7f 	bl	8012c6c <GetCRC16>
 800bf6e:	4603      	mov	r3, r0
 800bf70:	f8a7 3a38 	strh.w	r3, [r7, #2616]	; 0xa38

	Temp_Siemens_RX_st.crc = ExtractBits(0,16,&Buff[ucByte]); /* Extraction of Packet CRC */
 800bf74:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bf78:	f107 020c 	add.w	r2, r7, #12
 800bf7c:	4413      	add	r3, r2
 800bf7e:	461a      	mov	r2, r3
 800bf80:	2110      	movs	r1, #16
 800bf82:	2000      	movs	r0, #0
 800bf84:	f7f4 fb46 	bl	8000614 <ExtractBits>
 800bf88:	4603      	mov	r3, r0
 800bf8a:	b29a      	uxth	r2, r3
 800bf8c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bf90:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bf94:	f8a3 2226 	strh.w	r2, [r3, #550]	; 0x226




	/* if Everything is Okay copy to Main Rx Structure */
	memset(&Siemens_RX_st,0,sizeof(SIEMENS_PKT_t));
 800bf98:	f44f 720a 	mov.w	r2, #552	; 0x228
 800bf9c:	2100      	movs	r1, #0
 800bf9e:	4867      	ldr	r0, [pc, #412]	; (800c13c <Siemens_Data_Analyser+0xe58>)
 800bfa0:	f016 fa18 	bl	80223d4 <memset>
	memcpy(&Siemens_RX_st,&Temp_Siemens_RX_st,sizeof(SIEMENS_PKT_t));
 800bfa4:	4a65      	ldr	r2, [pc, #404]	; (800c13c <Siemens_Data_Analyser+0xe58>)
 800bfa6:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bfaa:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bfae:	4610      	mov	r0, r2
 800bfb0:	4619      	mov	r1, r3
 800bfb2:	f44f 730a 	mov.w	r3, #552	; 0x228
 800bfb6:	461a      	mov	r2, r3
 800bfb8:	f016 f9e4 	bl	8022384 <memcpy>

	/* Send Reply to Received Packet */
	Form_Siemens_Reply();
 800bfbc:	f000 f92e 	bl	800c21c <Form_Siemens_Reply>




	//	if( (RxTimeStampNotUpdatedCount <= EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount)  ) /* Consider the Packet If our Time stamp is Updating only (or) up to Certain count */
	if( abs(RxTimeStampNotUpdatedCount - EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) <= EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount)
 800bfc0:	4b5f      	ldr	r3, [pc, #380]	; (800c140 <Siemens_Data_Analyser+0xe5c>)
 800bfc2:	881b      	ldrh	r3, [r3, #0]
 800bfc4:	461a      	mov	r2, r3
 800bfc6:	4b57      	ldr	r3, [pc, #348]	; (800c124 <Siemens_Data_Analyser+0xe40>)
 800bfc8:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800bfcc:	1ad3      	subs	r3, r2, r3
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	bfb8      	it	lt
 800bfd2:	425b      	neglt	r3, r3
 800bfd4:	461a      	mov	r2, r3
 800bfd6:	4b53      	ldr	r3, [pc, #332]	; (800c124 <Siemens_Data_Analyser+0xe40>)
 800bfd8:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800bfdc:	429a      	cmp	r2, r3
 800bfde:	d869      	bhi.n	800c0b4 <Siemens_Data_Analyser+0xdd0>
	{
		if(Prev_RxTimeStampSiemens != Temp_Siemens_RX_st.RxTimeStamp)
 800bfe0:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bfe4:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bfe8:	69da      	ldr	r2, [r3, #28]
 800bfea:	4b56      	ldr	r3, [pc, #344]	; (800c144 <Siemens_Data_Analyser+0xe60>)
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	429a      	cmp	r2, r3
 800bff0:	d044      	beq.n	800c07c <Siemens_Data_Analyser+0xd98>
		{
			/* Update Clocks if Any */
			//			printf("Updating...\n");
			SiemensClocks_st.LastReceiveClk = HAL_GetTick();
 800bff2:	f009 facd 	bl	8015590 <HAL_GetTick>
 800bff6:	4603      	mov	r3, r0
 800bff8:	4a53      	ldr	r2, [pc, #332]	; (800c148 <Siemens_Data_Analyser+0xe64>)
 800bffa:	60d3      	str	r3, [r2, #12]



			Prev_RxTimeStampSiemens = Temp_Siemens_RX_st.RxTimeStamp;
 800bffc:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c000:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c004:	69db      	ldr	r3, [r3, #28]
 800c006:	4a4f      	ldr	r2, [pc, #316]	; (800c144 <Siemens_Data_Analyser+0xe60>)
 800c008:	6013      	str	r3, [r2, #0]
			RxTimeStampNotUpdatedCount = 0;
 800c00a:	4b4d      	ldr	r3, [pc, #308]	; (800c140 <Siemens_Data_Analyser+0xe5c>)
 800c00c:	2200      	movs	r2, #0
 800c00e:	801a      	strh	r2, [r3, #0]
			//			printf("Siemens RxTS Updating:%u\n",RxTimeStampNotUpdatedCount);
			if(SiemensMain_Relays_st.VitalCRC != VitalCRC)
 800c010:	4b4e      	ldr	r3, [pc, #312]	; (800c14c <Siemens_Data_Analyser+0xe68>)
 800c012:	885b      	ldrh	r3, [r3, #2]
 800c014:	f8b7 2a38 	ldrh.w	r2, [r7, #2616]	; 0xa38
 800c018:	429a      	cmp	r2, r3
 800c01a:	d04b      	beq.n	800c0b4 <Siemens_Data_Analyser+0xdd0>
			{
				memset(&SiemensMain_Relays_st,0,sizeof(VITAL_DATA_SHARING_t));
 800c01c:	f44f 7201 	mov.w	r2, #516	; 0x204
 800c020:	2100      	movs	r1, #0
 800c022:	484a      	ldr	r0, [pc, #296]	; (800c14c <Siemens_Data_Analyser+0xe68>)
 800c024:	f016 f9d6 	bl	80223d4 <memset>
				memset(&VitalData2MIE_st,0,sizeof(VITAL_DATA_t));
 800c028:	f240 2202 	movw	r2, #514	; 0x202
 800c02c:	2100      	movs	r1, #0
 800c02e:	4848      	ldr	r0, [pc, #288]	; (800c150 <Siemens_Data_Analyser+0xe6c>)
 800c030:	f016 f9d0 	bl	80223d4 <memset>

				SiemensMain_Relays_st.VitalCRC = VitalCRC;
 800c034:	4a45      	ldr	r2, [pc, #276]	; (800c14c <Siemens_Data_Analyser+0xe68>)
 800c036:	f8b7 3a38 	ldrh.w	r3, [r7, #2616]	; 0xa38
 800c03a:	8053      	strh	r3, [r2, #2]
				SiemensMain_Relays_st.NoofDataBytes = Siemens_RX_st.No_ofDataBytes;
 800c03c:	4b3f      	ldr	r3, [pc, #252]	; (800c13c <Siemens_Data_Analyser+0xe58>)
 800c03e:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800c040:	4b42      	ldr	r3, [pc, #264]	; (800c14c <Siemens_Data_Analyser+0xe68>)
 800c042:	801a      	strh	r2, [r3, #0]
				memcpy(&SiemensMain_Relays_st.Relays,&Siemens_RX_st.AppData,Siemens_RX_st.No_ofDataBytes);
 800c044:	4b3d      	ldr	r3, [pc, #244]	; (800c13c <Siemens_Data_Analyser+0xe58>)
 800c046:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c048:	461a      	mov	r2, r3
 800c04a:	4942      	ldr	r1, [pc, #264]	; (800c154 <Siemens_Data_Analyser+0xe70>)
 800c04c:	4842      	ldr	r0, [pc, #264]	; (800c158 <Siemens_Data_Analyser+0xe74>)
 800c04e:	f016 f999 	bl	8022384 <memcpy>

				VitalData2MIE_st.NoofDataBytes = Siemens_RX_st.No_ofDataBytes;
 800c052:	4b3a      	ldr	r3, [pc, #232]	; (800c13c <Siemens_Data_Analyser+0xe58>)
 800c054:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800c056:	4b3e      	ldr	r3, [pc, #248]	; (800c150 <Siemens_Data_Analyser+0xe6c>)
 800c058:	801a      	strh	r2, [r3, #0]
				memcpy(&VitalData2MIE_st.Relays,&Siemens_RX_st.AppData,Siemens_RX_st.No_ofDataBytes);
 800c05a:	4b38      	ldr	r3, [pc, #224]	; (800c13c <Siemens_Data_Analyser+0xe58>)
 800c05c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c05e:	461a      	mov	r2, r3
 800c060:	493c      	ldr	r1, [pc, #240]	; (800c154 <Siemens_Data_Analyser+0xe70>)
 800c062:	483e      	ldr	r0, [pc, #248]	; (800c15c <Siemens_Data_Analyser+0xe78>)
 800c064:	f016 f98e 	bl	8022384 <memcpy>
#ifdef EI_1
				TransmitCanPkt(EIPC1_RELAYS_2_OTHER);

#endif
#ifdef EI_2
				TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
 800c068:	f44f 7002 	mov.w	r0, #520	; 0x208
 800c06c:	f003 fa60 	bl	800f530 <TransmitCanPkt>
#endif

				SiemensClocks_st.Relays2OtheClk = HAL_GetTick();
 800c070:	f009 fa8e 	bl	8015590 <HAL_GetTick>
 800c074:	4603      	mov	r3, r0
 800c076:	4a34      	ldr	r2, [pc, #208]	; (800c148 <Siemens_Data_Analyser+0xe64>)
 800c078:	6113      	str	r3, [r2, #16]
 800c07a:	e01b      	b.n	800c0b4 <Siemens_Data_Analyser+0xdd0>

			}
		}
		else
		{
			RxTimeStampNotUpdatedCount++;
 800c07c:	4b30      	ldr	r3, [pc, #192]	; (800c140 <Siemens_Data_Analyser+0xe5c>)
 800c07e:	881b      	ldrh	r3, [r3, #0]
 800c080:	3301      	adds	r3, #1
 800c082:	b29a      	uxth	r2, r3
 800c084:	4b2e      	ldr	r3, [pc, #184]	; (800c140 <Siemens_Data_Analyser+0xe5c>)
 800c086:	801a      	strh	r2, [r3, #0]
			//			printf("Siemens RxTS not Updating:%u\n",RxTimeStampNotUpdatedCount);

			if(RxTimeStampNotUpdatedCount >  EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount)
 800c088:	4b2d      	ldr	r3, [pc, #180]	; (800c140 <Siemens_Data_Analyser+0xe5c>)
 800c08a:	881b      	ldrh	r3, [r3, #0]
 800c08c:	461a      	mov	r2, r3
 800c08e:	4b25      	ldr	r3, [pc, #148]	; (800c124 <Siemens_Data_Analyser+0xe40>)
 800c090:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800c094:	429a      	cmp	r2, r3
 800c096:	d90d      	bls.n	800c0b4 <Siemens_Data_Analyser+0xdd0>
			{
				printf("Siemens RxTS not Updating:%u\n",RxTimeStampNotUpdatedCount);
 800c098:	4b29      	ldr	r3, [pc, #164]	; (800c140 <Siemens_Data_Analyser+0xe5c>)
 800c09a:	881b      	ldrh	r3, [r3, #0]
 800c09c:	4619      	mov	r1, r3
 800c09e:	4830      	ldr	r0, [pc, #192]	; (800c160 <Siemens_Data_Analyser+0xe7c>)
 800c0a0:	f016 fa80 	bl	80225a4 <iprintf>
				RxTimeStampNotUpdatedCount = EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount + 1; /* To Avoid Overflow */
 800c0a4:	4b1f      	ldr	r3, [pc, #124]	; (800c124 <Siemens_Data_Analyser+0xe40>)
 800c0a6:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800c0aa:	b29b      	uxth	r3, r3
 800c0ac:	3301      	adds	r3, #1
 800c0ae:	b29a      	uxth	r2, r3
 800c0b0:	4b23      	ldr	r3, [pc, #140]	; (800c140 <Siemens_Data_Analyser+0xe5c>)
 800c0b2:	801a      	strh	r2, [r3, #0]
			}
		}
	}


	Print_Siemens_MSG(&Temp_Siemens_RX_st,Buff,Size,RX);
 800c0b4:	f8b7 2a36 	ldrh.w	r2, [r7, #2614]	; 0xa36
 800c0b8:	f107 010c 	add.w	r1, r7, #12
 800c0bc:	f207 600c 	addw	r0, r7, #1548	; 0x60c
 800c0c0:	2302      	movs	r3, #2
 800c0c2:	f000 fe21 	bl	800cd08 <Print_Siemens_MSG>
	if(Siemens_tx_Buffer_st.Tx_Length > 0)
 800c0c6:	4b27      	ldr	r3, [pc, #156]	; (800c164 <Siemens_Data_Analyser+0xe80>)
 800c0c8:	f8b3 3600 	ldrh.w	r3, [r3, #1536]	; 0x600
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d00d      	beq.n	800c0ec <Siemens_Data_Analyser+0xe08>
	{
		Print_Siemens_MSG(&Temp_SiemensTx_st,Siemens_tx_Buffer_st.Tx_Buff,Siemens_tx_Buffer_st.Tx_Length,TX);
 800c0d0:	4b24      	ldr	r3, [pc, #144]	; (800c164 <Siemens_Data_Analyser+0xe80>)
 800c0d2:	f8b3 2600 	ldrh.w	r2, [r3, #1536]	; 0x600
 800c0d6:	2301      	movs	r3, #1
 800c0d8:	4922      	ldr	r1, [pc, #136]	; (800c164 <Siemens_Data_Analyser+0xe80>)
 800c0da:	4823      	ldr	r0, [pc, #140]	; (800c168 <Siemens_Data_Analyser+0xe84>)
 800c0dc:	f000 fe14 	bl	800cd08 <Print_Siemens_MSG>
		memset(&Siemens_tx_Buffer_st,0,sizeof(SIEMENS_TX_PKT_t));
 800c0e0:	f240 6202 	movw	r2, #1538	; 0x602
 800c0e4:	2100      	movs	r1, #0
 800c0e6:	481f      	ldr	r0, [pc, #124]	; (800c164 <Siemens_Data_Analyser+0xe80>)
 800c0e8:	f016 f974 	bl	80223d4 <memset>
	}

	Tx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount = RxTimeStampNotUpdatedCount;
 800c0ec:	4b14      	ldr	r3, [pc, #80]	; (800c140 <Siemens_Data_Analyser+0xe5c>)
 800c0ee:	881a      	ldrh	r2, [r3, #0]
 800c0f0:	4b1e      	ldr	r3, [pc, #120]	; (800c16c <Siemens_Data_Analyser+0xe88>)
 800c0f2:	805a      	strh	r2, [r3, #2]
	Tx_Siemens_self_sharing_st.DataReceving = RECEIVING;
 800c0f4:	4b1d      	ldr	r3, [pc, #116]	; (800c16c <Siemens_Data_Analyser+0xe88>)
 800c0f6:	2201      	movs	r2, #1
 800c0f8:	701a      	strb	r2, [r3, #0]
	Tx_Siemens_self_sharing_st.MesgReceived = RECEIVED;
 800c0fa:	4b1c      	ldr	r3, [pc, #112]	; (800c16c <Siemens_Data_Analyser+0xe88>)
 800c0fc:	2201      	movs	r2, #1
 800c0fe:	705a      	strb	r2, [r3, #1]

#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
 800c100:	f240 2002 	movw	r0, #514	; 0x202
 800c104:	f003 fa14 	bl	800f530 <TransmitCanPkt>
#endif
	SiemensClocks_st.SelfSharingClk = HAL_GetTick();
 800c108:	f009 fa42 	bl	8015590 <HAL_GetTick>
 800c10c:	4603      	mov	r3, r0
 800c10e:	4a0e      	ldr	r2, [pc, #56]	; (800c148 <Siemens_Data_Analyser+0xe64>)
 800c110:	6093      	str	r3, [r2, #8]

	return;
 800c112:	e002      	b.n	800c11a <Siemens_Data_Analyser+0xe36>
		return;
 800c114:	bf00      	nop
 800c116:	e000      	b.n	800c11a <Siemens_Data_Analyser+0xe36>
		return;
 800c118:	bf00      	nop
}
 800c11a:	f607 2758 	addw	r7, r7, #2648	; 0xa58
 800c11e:	46bd      	mov	sp, r7
 800c120:	bd80      	pop	{r7, pc}
 800c122:	bf00      	nop
 800c124:	20000304 	.word	0x20000304
 800c128:	08025f24 	.word	0x08025f24
 800c12c:	08025ddc 	.word	0x08025ddc
 800c130:	08025dec 	.word	0x08025dec
 800c134:	08025f44 	.word	0x08025f44
 800c138:	20000305 	.word	0x20000305
 800c13c:	20002800 	.word	0x20002800
 800c140:	20003cc0 	.word	0x20003cc0
 800c144:	20003cbc 	.word	0x20003cbc
 800c148:	20003490 	.word	0x20003490
 800c14c:	200036b0 	.word	0x200036b0
 800c150:	200034ac 	.word	0x200034ac
 800c154:	20002826 	.word	0x20002826
 800c158:	200036b4 	.word	0x200036b4
 800c15c:	200034ae 	.word	0x200034ae
 800c160:	08025f50 	.word	0x08025f50
 800c164:	20002e78 	.word	0x20002e78
 800c168:	20002c50 	.word	0x20002c50
 800c16c:	20003484 	.word	0x20003484

0800c170 <ExtractAppData>:

uint16_t ExtractAppData(uint8_t *MainBuffer, uint16_t MainBufferLength, uint8_t *ExtractBuffer)
{
 800c170:	b480      	push	{r7}
 800c172:	b089      	sub	sp, #36	; 0x24
 800c174:	af00      	add	r7, sp, #0
 800c176:	60f8      	str	r0, [r7, #12]
 800c178:	460b      	mov	r3, r1
 800c17a:	607a      	str	r2, [r7, #4]
 800c17c:	817b      	strh	r3, [r7, #10]
	uint16_t ExtractBufferByteIndex = 0;
 800c17e:	2300      	movs	r3, #0
 800c180:	83fb      	strh	r3, [r7, #30]
	uint8_t ExtractBufferBitIndex = 0;
 800c182:	2300      	movs	r3, #0
 800c184:	777b      	strb	r3, [r7, #29]
	uint16_t TotalMainBits = (MainBufferLength * 8);
 800c186:	897b      	ldrh	r3, [r7, #10]
 800c188:	00db      	lsls	r3, r3, #3
 800c18a:	833b      	strh	r3, [r7, #24]

	for (uint16_t Traverser = 0; Traverser < TotalMainBits; ++Traverser)
 800c18c:	2300      	movs	r3, #0
 800c18e:	837b      	strh	r3, [r7, #26]
 800c190:	e039      	b.n	800c206 <ExtractAppData+0x96>
	{
		int Temp = (Traverser / 8);
 800c192:	8b7b      	ldrh	r3, [r7, #26]
 800c194:	08db      	lsrs	r3, r3, #3
 800c196:	b29b      	uxth	r3, r3
 800c198:	617b      	str	r3, [r7, #20]
		int BitJump = (Traverser % 8);
 800c19a:	8b7b      	ldrh	r3, [r7, #26]
 800c19c:	f003 0307 	and.w	r3, r3, #7
 800c1a0:	613b      	str	r3, [r7, #16]
		if (BitJump == 7)
 800c1a2:	693b      	ldr	r3, [r7, #16]
 800c1a4:	2b07      	cmp	r3, #7
 800c1a6:	d02a      	beq.n	800c1fe <ExtractAppData+0x8e>
		{
			continue;
		}
		if ((MainBuffer[Temp] >> (Traverser % 8)) & 1)
 800c1a8:	697b      	ldr	r3, [r7, #20]
 800c1aa:	68fa      	ldr	r2, [r7, #12]
 800c1ac:	4413      	add	r3, r2
 800c1ae:	781b      	ldrb	r3, [r3, #0]
 800c1b0:	461a      	mov	r2, r3
 800c1b2:	8b7b      	ldrh	r3, [r7, #26]
 800c1b4:	f003 0307 	and.w	r3, r3, #7
 800c1b8:	fa42 f303 	asr.w	r3, r2, r3
 800c1bc:	f003 0301 	and.w	r3, r3, #1
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d010      	beq.n	800c1e6 <ExtractAppData+0x76>
		{
			SET_BIT_USER(ExtractBufferBitIndex, ExtractBuffer[ExtractBufferByteIndex]);
 800c1c4:	8bfb      	ldrh	r3, [r7, #30]
 800c1c6:	687a      	ldr	r2, [r7, #4]
 800c1c8:	4413      	add	r3, r2
 800c1ca:	781b      	ldrb	r3, [r3, #0]
 800c1cc:	b25a      	sxtb	r2, r3
 800c1ce:	7f7b      	ldrb	r3, [r7, #29]
 800c1d0:	2101      	movs	r1, #1
 800c1d2:	fa01 f303 	lsl.w	r3, r1, r3
 800c1d6:	b25b      	sxtb	r3, r3
 800c1d8:	4313      	orrs	r3, r2
 800c1da:	b259      	sxtb	r1, r3
 800c1dc:	8bfb      	ldrh	r3, [r7, #30]
 800c1de:	687a      	ldr	r2, [r7, #4]
 800c1e0:	4413      	add	r3, r2
 800c1e2:	b2ca      	uxtb	r2, r1
 800c1e4:	701a      	strb	r2, [r3, #0]
		}
		++ExtractBufferBitIndex;
 800c1e6:	7f7b      	ldrb	r3, [r7, #29]
 800c1e8:	3301      	adds	r3, #1
 800c1ea:	777b      	strb	r3, [r7, #29]
		if (ExtractBufferBitIndex == 8)
 800c1ec:	7f7b      	ldrb	r3, [r7, #29]
 800c1ee:	2b08      	cmp	r3, #8
 800c1f0:	d106      	bne.n	800c200 <ExtractAppData+0x90>
		{
			ExtractBufferBitIndex = 0;
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	777b      	strb	r3, [r7, #29]
			++ExtractBufferByteIndex;
 800c1f6:	8bfb      	ldrh	r3, [r7, #30]
 800c1f8:	3301      	adds	r3, #1
 800c1fa:	83fb      	strh	r3, [r7, #30]
 800c1fc:	e000      	b.n	800c200 <ExtractAppData+0x90>
			continue;
 800c1fe:	bf00      	nop
	for (uint16_t Traverser = 0; Traverser < TotalMainBits; ++Traverser)
 800c200:	8b7b      	ldrh	r3, [r7, #26]
 800c202:	3301      	adds	r3, #1
 800c204:	837b      	strh	r3, [r7, #26]
 800c206:	8b7a      	ldrh	r2, [r7, #26]
 800c208:	8b3b      	ldrh	r3, [r7, #24]
 800c20a:	429a      	cmp	r2, r3
 800c20c:	d3c1      	bcc.n	800c192 <ExtractAppData+0x22>
		}
	}
	return (ExtractBufferByteIndex);
 800c20e:	8bfb      	ldrh	r3, [r7, #30]
}
 800c210:	4618      	mov	r0, r3
 800c212:	3724      	adds	r7, #36	; 0x24
 800c214:	46bd      	mov	sp, r7
 800c216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21a:	4770      	bx	lr

0800c21c <Form_Siemens_Reply>:

void Form_Siemens_Reply(void)
{
 800c21c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c220:	f5ad 6dcd 	sub.w	sp, sp, #1640	; 0x668
 800c224:	af04      	add	r7, sp, #16

	uint8_t Buffer[REPLY_MAX_SIZE] = {0,};
 800c226:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800c22a:	f5a3 62c2 	sub.w	r2, r3, #1552	; 0x610
 800c22e:	2300      	movs	r3, #0
 800c230:	6013      	str	r3, [r2, #0]
 800c232:	1d10      	adds	r0, r2, #4
 800c234:	f240 53fc 	movw	r3, #1532	; 0x5fc
 800c238:	461a      	mov	r2, r3
 800c23a:	2100      	movs	r1, #0
 800c23c:	f016 f8ca 	bl	80223d4 <memset>
	uint16_t App_data_Traverser = 0;
 800c240:	2300      	movs	r3, #0
 800c242:	f8a7 3652 	strh.w	r3, [r7, #1618]	; 0x652
	uint16_t Calc_CRC =0;
 800c246:	2300      	movs	r3, #0
 800c248:	f8a7 3656 	strh.w	r3, [r7, #1622]	; 0x656
	uint16_t Calc_Compliment_CRC = 0;
 800c24c:	2300      	movs	r3, #0
 800c24e:	f8a7 3654 	strh.w	r3, [r7, #1620]	; 0x654
	uint16_t CRC_Compliment_Loc  = 0;
 800c252:	2300      	movs	r3, #0
 800c254:	f8a7 3650 	strh.w	r3, [r7, #1616]	; 0x650
	BITSTUFFINIT(0,0);
 800c258:	2300      	movs	r3, #0
 800c25a:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c25e:	2300      	movs	r3, #0
 800c260:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c


	//	printf("\nSending Packet Data:\n");
	memset(&Siemens_TX_st,0,sizeof(SIEMENS_PKT_t));
 800c264:	f44f 720a 	mov.w	r2, #552	; 0x228
 800c268:	2100      	movs	r1, #0
 800c26a:	48ba      	ldr	r0, [pc, #744]	; (800c554 <Form_Siemens_Reply+0x338>)
 800c26c:	f016 f8b2 	bl	80223d4 <memset>


	Siemens_TX_st.DesSysType = Siemens_RX_st.SrcSysType; //Destination System_Type
 800c270:	4bb9      	ldr	r3, [pc, #740]	; (800c558 <Form_Siemens_Reply+0x33c>)
 800c272:	7b1b      	ldrb	r3, [r3, #12]
 800c274:	4ab7      	ldr	r2, [pc, #732]	; (800c554 <Form_Siemens_Reply+0x338>)
 800c276:	7013      	strb	r3, [r2, #0]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.DesSysType,ODD_PARITY);
 800c278:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c27c:	b2d8      	uxtb	r0, r3
 800c27e:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800c282:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c286:	1899      	adds	r1, r3, r2
 800c288:	4bb2      	ldr	r3, [pc, #712]	; (800c554 <Form_Siemens_Reply+0x338>)
 800c28a:	781b      	ldrb	r3, [r3, #0]
 800c28c:	b2db      	uxtb	r3, r3
 800c28e:	2200      	movs	r2, #0
 800c290:	461c      	mov	r4, r3
 800c292:	4615      	mov	r5, r2
 800c294:	2301      	movs	r3, #1
 800c296:	9302      	str	r3, [sp, #8]
 800c298:	e9cd 4500 	strd	r4, r5, [sp]
 800c29c:	460a      	mov	r2, r1
 800c29e:	2108      	movs	r1, #8
 800c2a0:	f001 fb02 	bl	800d8a8 <Insert_cal_parity>
	//	printf("Dst_type:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800c2a4:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c2a8:	3308      	adds	r3, #8
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	da00      	bge.n	800c2b0 <Form_Siemens_Reply+0x94>
 800c2ae:	3307      	adds	r3, #7
 800c2b0:	10db      	asrs	r3, r3, #3
 800c2b2:	b29a      	uxth	r2, r3
 800c2b4:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c2b8:	4413      	add	r3, r2
 800c2ba:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c2be:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c2c2:	3308      	adds	r3, #8
 800c2c4:	b29b      	uxth	r3, r3
 800c2c6:	b21b      	sxth	r3, r3
 800c2c8:	425a      	negs	r2, r3
 800c2ca:	f003 0107 	and.w	r1, r3, #7
 800c2ce:	f002 0307 	and.w	r3, r2, #7
 800c2d2:	bf58      	it	pl
 800c2d4:	4259      	negpl	r1, r3
 800c2d6:	b20b      	sxth	r3, r1
 800c2d8:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.DestAddr = Siemens_RX_st.SourceAddr; //Destination Address
 800c2dc:	4b9e      	ldr	r3, [pc, #632]	; (800c558 <Form_Siemens_Reply+0x33c>)
 800c2de:	691a      	ldr	r2, [r3, #16]
 800c2e0:	4b9c      	ldr	r3, [pc, #624]	; (800c554 <Form_Siemens_Reply+0x338>)
 800c2e2:	605a      	str	r2, [r3, #4]
	Siemens_TX_st.ExtDestAddr = Siemens_RX_st.ExtSourceAddr;
 800c2e4:	4b9c      	ldr	r3, [pc, #624]	; (800c558 <Form_Siemens_Reply+0x33c>)
 800c2e6:	695a      	ldr	r2, [r3, #20]
 800c2e8:	4b9a      	ldr	r3, [pc, #616]	; (800c554 <Form_Siemens_Reply+0x338>)
 800c2ea:	609a      	str	r2, [r3, #8]
	Insert_cal_parity(ucBit,24,&Buffer[ucByte],Siemens_TX_st.DestAddr,EVEN_PARITY);
 800c2ec:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c2f0:	b2d8      	uxtb	r0, r3
 800c2f2:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800c2f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c2fa:	1899      	adds	r1, r3, r2
 800c2fc:	4b95      	ldr	r3, [pc, #596]	; (800c554 <Form_Siemens_Reply+0x338>)
 800c2fe:	685b      	ldr	r3, [r3, #4]
 800c300:	2200      	movs	r2, #0
 800c302:	4698      	mov	r8, r3
 800c304:	4691      	mov	r9, r2
 800c306:	2300      	movs	r3, #0
 800c308:	9302      	str	r3, [sp, #8]
 800c30a:	e9cd 8900 	strd	r8, r9, [sp]
 800c30e:	460a      	mov	r2, r1
 800c310:	2118      	movs	r1, #24
 800c312:	f001 fac9 	bl	800d8a8 <Insert_cal_parity>
	//	printf("\nSiemens_TX_st.DestAddr = %lu\n",Siemens_TX_st.DestAddr);
	BITSTUFFINC(24);
 800c316:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c31a:	3318      	adds	r3, #24
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	da00      	bge.n	800c322 <Form_Siemens_Reply+0x106>
 800c320:	3307      	adds	r3, #7
 800c322:	10db      	asrs	r3, r3, #3
 800c324:	b29a      	uxth	r2, r3
 800c326:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c32a:	4413      	add	r3, r2
 800c32c:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c330:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c334:	3318      	adds	r3, #24
 800c336:	b29b      	uxth	r3, r3
 800c338:	b21b      	sxth	r3, r3
 800c33a:	425a      	negs	r2, r3
 800c33c:	f003 0107 	and.w	r1, r3, #7
 800c340:	f002 0307 	and.w	r3, r2, #7
 800c344:	bf58      	it	pl
 800c346:	4259      	negpl	r1, r3
 800c348:	b20b      	sxth	r3, r1
 800c34a:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.SrcSysType = Siemens_RX_st.DesSysType; //Destination Address
 800c34e:	4b82      	ldr	r3, [pc, #520]	; (800c558 <Form_Siemens_Reply+0x33c>)
 800c350:	781b      	ldrb	r3, [r3, #0]
 800c352:	4a80      	ldr	r2, [pc, #512]	; (800c554 <Form_Siemens_Reply+0x338>)
 800c354:	7313      	strb	r3, [r2, #12]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.SrcSysType,ODD_PARITY);
 800c356:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c35a:	b2d8      	uxtb	r0, r3
 800c35c:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800c360:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c364:	1899      	adds	r1, r3, r2
 800c366:	4b7b      	ldr	r3, [pc, #492]	; (800c554 <Form_Siemens_Reply+0x338>)
 800c368:	7b1b      	ldrb	r3, [r3, #12]
 800c36a:	b2db      	uxtb	r3, r3
 800c36c:	2200      	movs	r2, #0
 800c36e:	469a      	mov	sl, r3
 800c370:	4693      	mov	fp, r2
 800c372:	2301      	movs	r3, #1
 800c374:	9302      	str	r3, [sp, #8]
 800c376:	e9cd ab00 	strd	sl, fp, [sp]
 800c37a:	460a      	mov	r2, r1
 800c37c:	2108      	movs	r1, #8
 800c37e:	f001 fa93 	bl	800d8a8 <Insert_cal_parity>
	//	printf("Src_sys_type:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800c382:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c386:	3308      	adds	r3, #8
 800c388:	2b00      	cmp	r3, #0
 800c38a:	da00      	bge.n	800c38e <Form_Siemens_Reply+0x172>
 800c38c:	3307      	adds	r3, #7
 800c38e:	10db      	asrs	r3, r3, #3
 800c390:	b29a      	uxth	r2, r3
 800c392:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c396:	4413      	add	r3, r2
 800c398:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c39c:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c3a0:	3308      	adds	r3, #8
 800c3a2:	b29b      	uxth	r3, r3
 800c3a4:	b21b      	sxth	r3, r3
 800c3a6:	425a      	negs	r2, r3
 800c3a8:	f003 0107 	and.w	r1, r3, #7
 800c3ac:	f002 0307 	and.w	r3, r2, #7
 800c3b0:	bf58      	it	pl
 800c3b2:	4259      	negpl	r1, r3
 800c3b4:	b20b      	sxth	r3, r1
 800c3b6:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.SourceAddr = Siemens_RX_st.DestAddr;
 800c3ba:	4b67      	ldr	r3, [pc, #412]	; (800c558 <Form_Siemens_Reply+0x33c>)
 800c3bc:	685a      	ldr	r2, [r3, #4]
 800c3be:	4b65      	ldr	r3, [pc, #404]	; (800c554 <Form_Siemens_Reply+0x338>)
 800c3c0:	611a      	str	r2, [r3, #16]
	Siemens_TX_st.ExtSourceAddr = Siemens_RX_st.ExtDestAddr;
 800c3c2:	4b65      	ldr	r3, [pc, #404]	; (800c558 <Form_Siemens_Reply+0x33c>)
 800c3c4:	689a      	ldr	r2, [r3, #8]
 800c3c6:	4b63      	ldr	r3, [pc, #396]	; (800c554 <Form_Siemens_Reply+0x338>)
 800c3c8:	615a      	str	r2, [r3, #20]
	Insert_cal_parity(ucBit,24,&Buffer[ucByte],Siemens_TX_st.SourceAddr,EVEN_PARITY);
 800c3ca:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c3ce:	b2d8      	uxtb	r0, r3
 800c3d0:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800c3d4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c3d8:	1899      	adds	r1, r3, r2
 800c3da:	4b5e      	ldr	r3, [pc, #376]	; (800c554 <Form_Siemens_Reply+0x338>)
 800c3dc:	691b      	ldr	r3, [r3, #16]
 800c3de:	2200      	movs	r2, #0
 800c3e0:	643b      	str	r3, [r7, #64]	; 0x40
 800c3e2:	647a      	str	r2, [r7, #68]	; 0x44
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	9302      	str	r3, [sp, #8]
 800c3e8:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800c3ec:	e9cd 3400 	strd	r3, r4, [sp]
 800c3f0:	460a      	mov	r2, r1
 800c3f2:	2118      	movs	r1, #24
 800c3f4:	f001 fa58 	bl	800d8a8 <Insert_cal_parity>
	//	printf("\nSiemens_TX_st.SourceAddr = %lu\n",Siemens_TX_st.SourceAddr);
	BITSTUFFINC(24);
 800c3f8:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c3fc:	3318      	adds	r3, #24
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	da00      	bge.n	800c404 <Form_Siemens_Reply+0x1e8>
 800c402:	3307      	adds	r3, #7
 800c404:	10db      	asrs	r3, r3, #3
 800c406:	b29a      	uxth	r2, r3
 800c408:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c40c:	4413      	add	r3, r2
 800c40e:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c412:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c416:	3318      	adds	r3, #24
 800c418:	b29b      	uxth	r3, r3
 800c41a:	b21b      	sxth	r3, r3
 800c41c:	425a      	negs	r2, r3
 800c41e:	f003 0107 	and.w	r1, r3, #7
 800c422:	f002 0307 	and.w	r3, r2, #7
 800c426:	bf58      	it	pl
 800c428:	4259      	negpl	r1, r3
 800c42a:	b20b      	sxth	r3, r1
 800c42c:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.ProdDataVer = PROD_VERSION; //Self Product Version
 800c430:	4a48      	ldr	r2, [pc, #288]	; (800c554 <Form_Siemens_Reply+0x338>)
 800c432:	230a      	movs	r3, #10
 800c434:	7613      	strb	r3, [r2, #24]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.ProdDataVer,EVEN_PARITY);
 800c436:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c43a:	b2d8      	uxtb	r0, r3
 800c43c:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800c440:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c444:	1899      	adds	r1, r3, r2
 800c446:	4b43      	ldr	r3, [pc, #268]	; (800c554 <Form_Siemens_Reply+0x338>)
 800c448:	7e1b      	ldrb	r3, [r3, #24]
 800c44a:	b2db      	uxtb	r3, r3
 800c44c:	2200      	movs	r2, #0
 800c44e:	63bb      	str	r3, [r7, #56]	; 0x38
 800c450:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c452:	2300      	movs	r3, #0
 800c454:	9302      	str	r3, [sp, #8]
 800c456:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800c45a:	e9cd 3400 	strd	r3, r4, [sp]
 800c45e:	460a      	mov	r2, r1
 800c460:	2108      	movs	r1, #8
 800c462:	f001 fa21 	bl	800d8a8 <Insert_cal_parity>
	//	printf("prod_data_ver:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800c466:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c46a:	3308      	adds	r3, #8
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	da00      	bge.n	800c472 <Form_Siemens_Reply+0x256>
 800c470:	3307      	adds	r3, #7
 800c472:	10db      	asrs	r3, r3, #3
 800c474:	b29a      	uxth	r2, r3
 800c476:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c47a:	4413      	add	r3, r2
 800c47c:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c480:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c484:	3308      	adds	r3, #8
 800c486:	b29b      	uxth	r3, r3
 800c488:	b21b      	sxth	r3, r3
 800c48a:	425a      	negs	r2, r3
 800c48c:	f003 0107 	and.w	r1, r3, #7
 800c490:	f002 0307 	and.w	r3, r2, #7
 800c494:	bf58      	it	pl
 800c496:	4259      	negpl	r1, r3
 800c498:	b20b      	sxth	r3, r1
 800c49a:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.CompIndex = COMP_INDEX; //Self Compatability Index
 800c49e:	4a2d      	ldr	r2, [pc, #180]	; (800c554 <Form_Siemens_Reply+0x338>)
 800c4a0:	2301      	movs	r3, #1
 800c4a2:	7653      	strb	r3, [r2, #25]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.CompIndex,ODD_PARITY);
 800c4a4:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c4a8:	b2d8      	uxtb	r0, r3
 800c4aa:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800c4ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c4b2:	1899      	adds	r1, r3, r2
 800c4b4:	4b27      	ldr	r3, [pc, #156]	; (800c554 <Form_Siemens_Reply+0x338>)
 800c4b6:	7e5b      	ldrb	r3, [r3, #25]
 800c4b8:	b2db      	uxtb	r3, r3
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	633b      	str	r3, [r7, #48]	; 0x30
 800c4be:	637a      	str	r2, [r7, #52]	; 0x34
 800c4c0:	2301      	movs	r3, #1
 800c4c2:	9302      	str	r3, [sp, #8]
 800c4c4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800c4c8:	e9cd 3400 	strd	r3, r4, [sp]
 800c4cc:	460a      	mov	r2, r1
 800c4ce:	2108      	movs	r1, #8
 800c4d0:	f001 f9ea 	bl	800d8a8 <Insert_cal_parity>
	//	printf("comp_index:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800c4d4:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c4d8:	3308      	adds	r3, #8
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	da00      	bge.n	800c4e0 <Form_Siemens_Reply+0x2c4>
 800c4de:	3307      	adds	r3, #7
 800c4e0:	10db      	asrs	r3, r3, #3
 800c4e2:	b29a      	uxth	r2, r3
 800c4e4:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c4e8:	4413      	add	r3, r2
 800c4ea:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c4ee:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c4f2:	3308      	adds	r3, #8
 800c4f4:	b29b      	uxth	r3, r3
 800c4f6:	b21b      	sxth	r3, r3
 800c4f8:	425a      	negs	r2, r3
 800c4fa:	f003 0307 	and.w	r3, r3, #7
 800c4fe:	f002 0207 	and.w	r2, r2, #7
 800c502:	bf58      	it	pl
 800c504:	4253      	negpl	r3, r2
 800c506:	b21b      	sxth	r3, r3
 800c508:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c


	Siemens_TX_st.DestPort = Siemens_RX_st.SourcePort; //Destination Port
 800c50c:	4b12      	ldr	r3, [pc, #72]	; (800c558 <Form_Siemens_Reply+0x33c>)
 800c50e:	7edb      	ldrb	r3, [r3, #27]
 800c510:	4a10      	ldr	r2, [pc, #64]	; (800c554 <Form_Siemens_Reply+0x338>)
 800c512:	7693      	strb	r3, [r2, #26]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.DestPort,NO_PARITY);
 800c514:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c518:	b2d8      	uxtb	r0, r3
 800c51a:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800c51e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c522:	1899      	adds	r1, r3, r2
 800c524:	4b0b      	ldr	r3, [pc, #44]	; (800c554 <Form_Siemens_Reply+0x338>)
 800c526:	7e9b      	ldrb	r3, [r3, #26]
 800c528:	b2db      	uxtb	r3, r3
 800c52a:	2200      	movs	r2, #0
 800c52c:	62bb      	str	r3, [r7, #40]	; 0x28
 800c52e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c530:	2302      	movs	r3, #2
 800c532:	9302      	str	r3, [sp, #8]
 800c534:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800c538:	e9cd 3400 	strd	r3, r4, [sp]
 800c53c:	460a      	mov	r2, r1
 800c53e:	2108      	movs	r1, #8
 800c540:	f001 f9b2 	bl	800d8a8 <Insert_cal_parity>
	//	printf("dst_port:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800c544:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c548:	3308      	adds	r3, #8
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	da06      	bge.n	800c55c <Form_Siemens_Reply+0x340>
 800c54e:	3307      	adds	r3, #7
 800c550:	e004      	b.n	800c55c <Form_Siemens_Reply+0x340>
 800c552:	bf00      	nop
 800c554:	20002a28 	.word	0x20002a28
 800c558:	20002800 	.word	0x20002800
 800c55c:	10db      	asrs	r3, r3, #3
 800c55e:	b29a      	uxth	r2, r3
 800c560:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c564:	4413      	add	r3, r2
 800c566:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c56a:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c56e:	3308      	adds	r3, #8
 800c570:	b29b      	uxth	r3, r3
 800c572:	b21b      	sxth	r3, r3
 800c574:	425a      	negs	r2, r3
 800c576:	f003 0307 	and.w	r3, r3, #7
 800c57a:	f002 0207 	and.w	r2, r2, #7
 800c57e:	bf58      	it	pl
 800c580:	4253      	negpl	r3, r2
 800c582:	b21b      	sxth	r3, r3
 800c584:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.SourcePort = Siemens_RX_st.DestPort; //Source Port
 800c588:	4bc4      	ldr	r3, [pc, #784]	; (800c89c <Form_Siemens_Reply+0x680>)
 800c58a:	7e9a      	ldrb	r2, [r3, #26]
 800c58c:	4bc4      	ldr	r3, [pc, #784]	; (800c8a0 <Form_Siemens_Reply+0x684>)
 800c58e:	76da      	strb	r2, [r3, #27]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.SourcePort,NO_PARITY);
 800c590:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c594:	b2d8      	uxtb	r0, r3
 800c596:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c59a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800c59e:	441a      	add	r2, r3
 800c5a0:	4bbf      	ldr	r3, [pc, #764]	; (800c8a0 <Form_Siemens_Reply+0x684>)
 800c5a2:	7edb      	ldrb	r3, [r3, #27]
 800c5a4:	b2db      	uxtb	r3, r3
 800c5a6:	2100      	movs	r1, #0
 800c5a8:	623b      	str	r3, [r7, #32]
 800c5aa:	6279      	str	r1, [r7, #36]	; 0x24
 800c5ac:	2302      	movs	r3, #2
 800c5ae:	9302      	str	r3, [sp, #8]
 800c5b0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800c5b4:	e9cd 3400 	strd	r3, r4, [sp]
 800c5b8:	2108      	movs	r1, #8
 800c5ba:	f001 f975 	bl	800d8a8 <Insert_cal_parity>
	//	printf("src_port:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800c5be:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c5c2:	3308      	adds	r3, #8
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	da00      	bge.n	800c5ca <Form_Siemens_Reply+0x3ae>
 800c5c8:	3307      	adds	r3, #7
 800c5ca:	10db      	asrs	r3, r3, #3
 800c5cc:	b29a      	uxth	r2, r3
 800c5ce:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c5d2:	4413      	add	r3, r2
 800c5d4:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c5d8:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c5dc:	3308      	adds	r3, #8
 800c5de:	b29b      	uxth	r3, r3
 800c5e0:	b21b      	sxth	r3, r3
 800c5e2:	425a      	negs	r2, r3
 800c5e4:	f003 0307 	and.w	r3, r3, #7
 800c5e8:	f002 0207 	and.w	r2, r2, #7
 800c5ec:	bf58      	it	pl
 800c5ee:	4253      	negpl	r3, r2
 800c5f0:	b21b      	sxth	r3, r3
 800c5f2:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.RxTimeStamp = Siemens_RX_st.TxTimeStamp; //Source Port
 800c5f6:	4ba9      	ldr	r3, [pc, #676]	; (800c89c <Form_Siemens_Reply+0x680>)
 800c5f8:	6a1b      	ldr	r3, [r3, #32]
 800c5fa:	4aa9      	ldr	r2, [pc, #676]	; (800c8a0 <Form_Siemens_Reply+0x684>)
 800c5fc:	61d3      	str	r3, [r2, #28]
	Insert_cal_parity(ucBit,32,&Buffer[ucByte],Siemens_TX_st.RxTimeStamp,NO_PARITY);
 800c5fe:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c602:	b2d8      	uxtb	r0, r3
 800c604:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c608:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800c60c:	4413      	add	r3, r2
 800c60e:	4aa4      	ldr	r2, [pc, #656]	; (800c8a0 <Form_Siemens_Reply+0x684>)
 800c610:	69d2      	ldr	r2, [r2, #28]
 800c612:	2100      	movs	r1, #0
 800c614:	61ba      	str	r2, [r7, #24]
 800c616:	61f9      	str	r1, [r7, #28]
 800c618:	2202      	movs	r2, #2
 800c61a:	9202      	str	r2, [sp, #8]
 800c61c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c620:	e9cd 1200 	strd	r1, r2, [sp]
 800c624:	461a      	mov	r2, r3
 800c626:	2120      	movs	r1, #32
 800c628:	f001 f93e 	bl	800d8a8 <Insert_cal_parity>
	//	printf("Rx_time_stamp:%lu\n",Siemens_TX_st.Rx_time_stamp);
	BITSTUFFINC(32);
 800c62c:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c630:	3320      	adds	r3, #32
 800c632:	2b00      	cmp	r3, #0
 800c634:	da00      	bge.n	800c638 <Form_Siemens_Reply+0x41c>
 800c636:	3307      	adds	r3, #7
 800c638:	10db      	asrs	r3, r3, #3
 800c63a:	b29a      	uxth	r2, r3
 800c63c:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c640:	4413      	add	r3, r2
 800c642:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c646:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c64a:	3320      	adds	r3, #32
 800c64c:	b29b      	uxth	r3, r3
 800c64e:	b21b      	sxth	r3, r3
 800c650:	425a      	negs	r2, r3
 800c652:	f003 0307 	and.w	r3, r3, #7
 800c656:	f002 0207 	and.w	r2, r2, #7
 800c65a:	bf58      	it	pl
 800c65c:	4253      	negpl	r3, r2
 800c65e:	b21b      	sxth	r3, r3
 800c660:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.TxTimeStamp = SelfTimeStamp;//(uint32_t)(HAL_GetTick()/100);//Temp_Siemens_RX_st.Tx_time_stamp; //Source Port
 800c664:	4b8f      	ldr	r3, [pc, #572]	; (800c8a4 <Form_Siemens_Reply+0x688>)
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	4a8d      	ldr	r2, [pc, #564]	; (800c8a0 <Form_Siemens_Reply+0x684>)
 800c66a:	6213      	str	r3, [r2, #32]
	Insert_cal_parity(ucBit,32,&Buffer[ucByte],Siemens_TX_st.TxTimeStamp,NO_PARITY);
 800c66c:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c670:	b2d8      	uxtb	r0, r3
 800c672:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c676:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800c67a:	4413      	add	r3, r2
 800c67c:	4a88      	ldr	r2, [pc, #544]	; (800c8a0 <Form_Siemens_Reply+0x684>)
 800c67e:	6a12      	ldr	r2, [r2, #32]
 800c680:	2100      	movs	r1, #0
 800c682:	613a      	str	r2, [r7, #16]
 800c684:	6179      	str	r1, [r7, #20]
 800c686:	2202      	movs	r2, #2
 800c688:	9202      	str	r2, [sp, #8]
 800c68a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c68e:	e9cd 1200 	strd	r1, r2, [sp]
 800c692:	461a      	mov	r2, r3
 800c694:	2120      	movs	r1, #32
 800c696:	f001 f907 	bl	800d8a8 <Insert_cal_parity>
	//	printf("Tx_time_stamp:%lu\n",Siemens_TX_st.Tx_time_stamp);
	BITSTUFFINC(32);
 800c69a:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c69e:	3320      	adds	r3, #32
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	da00      	bge.n	800c6a6 <Form_Siemens_Reply+0x48a>
 800c6a4:	3307      	adds	r3, #7
 800c6a6:	10db      	asrs	r3, r3, #3
 800c6a8:	b29a      	uxth	r2, r3
 800c6aa:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c6ae:	4413      	add	r3, r2
 800c6b0:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c6b4:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c6b8:	3320      	adds	r3, #32
 800c6ba:	b29b      	uxth	r3, r3
 800c6bc:	b21b      	sxth	r3, r3
 800c6be:	425a      	negs	r2, r3
 800c6c0:	f003 0307 	and.w	r3, r3, #7
 800c6c4:	f002 0207 	and.w	r2, r2, #7
 800c6c8:	bf58      	it	pl
 800c6ca:	4253      	negpl	r3, r2
 800c6cc:	b21b      	sxth	r3, r3
 800c6ce:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	CRC_Compliment_Loc = Data_Compliment(Buffer,ucByte,CONVERT); //ucByte = 30;
 800c6d2:	f8b7 164e 	ldrh.w	r1, [r7, #1614]	; 0x64e
 800c6d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c6da:	2201      	movs	r2, #1
 800c6dc:	4618      	mov	r0, r3
 800c6de:	f001 fa49 	bl	800db74 <Data_Compliment>
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	f8a7 3650 	strh.w	r3, [r7, #1616]	; 0x650

	Calc_CRC = Siemens_CRC(Buffer,ucByte); //30
 800c6e8:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800c6ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c6f0:	4611      	mov	r1, r2
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	f000 ff42 	bl	800d57c <Siemens_CRC>
 800c6f8:	4603      	mov	r3, r0
 800c6fa:	f8a7 3656 	strh.w	r3, [r7, #1622]	; 0x656


#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800c6fe:	4b6a      	ldr	r3, [pc, #424]	; (800c8a8 <Form_Siemens_Reply+0x68c>)
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	09db      	lsrs	r3, r3, #7
 800c704:	f003 0301 	and.w	r3, r3, #1
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d02c      	beq.n	800c766 <Form_Siemens_Reply+0x54a>
	{
		uint16_t Temp_Crc = Calc_CRC;
 800c70c:	f8b7 3656 	ldrh.w	r3, [r7, #1622]	; 0x656
 800c710:	f8a7 364a 	strh.w	r3, [r7, #1610]	; 0x64a
		printf("Injecting INVALID_PACKET_CRC_SIEMENS\n");
 800c714:	4865      	ldr	r0, [pc, #404]	; (800c8ac <Form_Siemens_Reply+0x690>)
 800c716:	f015 ffe1 	bl	80226dc <puts>
		printf("Actual CRC:%04x\n",Calc_CRC);
 800c71a:	f8b7 3656 	ldrh.w	r3, [r7, #1622]	; 0x656
 800c71e:	4619      	mov	r1, r3
 800c720:	4863      	ldr	r0, [pc, #396]	; (800c8b0 <Form_Siemens_Reply+0x694>)
 800c722:	f015 ff3f 	bl	80225a4 <iprintf>

		Calc_CRC = HAL_RNG_GetRandomNumber(&hrng) % 0xffff;
 800c726:	4863      	ldr	r0, [pc, #396]	; (800c8b4 <Form_Siemens_Reply+0x698>)
 800c728:	f00d fbe4 	bl	8019ef4 <HAL_RNG_GetRandomNumber>
 800c72c:	4601      	mov	r1, r0
 800c72e:	4b62      	ldr	r3, [pc, #392]	; (800c8b8 <Form_Siemens_Reply+0x69c>)
 800c730:	fba3 2301 	umull	r2, r3, r3, r1
 800c734:	0bda      	lsrs	r2, r3, #15
 800c736:	4613      	mov	r3, r2
 800c738:	041b      	lsls	r3, r3, #16
 800c73a:	1a9b      	subs	r3, r3, r2
 800c73c:	1aca      	subs	r2, r1, r3
 800c73e:	4613      	mov	r3, r2
 800c740:	f8a7 3656 	strh.w	r3, [r7, #1622]	; 0x656
		if(Calc_CRC == Temp_Crc)
 800c744:	f8b7 2656 	ldrh.w	r2, [r7, #1622]	; 0x656
 800c748:	f8b7 364a 	ldrh.w	r3, [r7, #1610]	; 0x64a
 800c74c:	429a      	cmp	r2, r3
 800c74e:	d104      	bne.n	800c75a <Form_Siemens_Reply+0x53e>
		{
			Calc_CRC += 4;
 800c750:	f8b7 3656 	ldrh.w	r3, [r7, #1622]	; 0x656
 800c754:	3304      	adds	r3, #4
 800c756:	f8a7 3656 	strh.w	r3, [r7, #1622]	; 0x656
		}
		printf("Injected CRC:%04x\n",Calc_CRC);
 800c75a:	f8b7 3656 	ldrh.w	r3, [r7, #1622]	; 0x656
 800c75e:	4619      	mov	r1, r3
 800c760:	4856      	ldr	r0, [pc, #344]	; (800c8bc <Form_Siemens_Reply+0x6a0>)
 800c762:	f015 ff1f 	bl	80225a4 <iprintf>




	//	printf("Cal_CRC:0x%04x\n",Calc_CRC);
	Insert_cal_parity(ucBit,16,&Buffer[ucByte],Calc_CRC,NO_PARITY);
 800c766:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c76a:	b2d8      	uxtb	r0, r3
 800c76c:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c770:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800c774:	4413      	add	r3, r2
 800c776:	f8b7 2656 	ldrh.w	r2, [r7, #1622]	; 0x656
 800c77a:	2100      	movs	r1, #0
 800c77c:	60ba      	str	r2, [r7, #8]
 800c77e:	60f9      	str	r1, [r7, #12]
 800c780:	2202      	movs	r2, #2
 800c782:	9202      	str	r2, [sp, #8]
 800c784:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c788:	e9cd 1200 	strd	r1, r2, [sp]
 800c78c:	461a      	mov	r2, r3
 800c78e:	2110      	movs	r1, #16
 800c790:	f001 f88a 	bl	800d8a8 <Insert_cal_parity>
	BITSTUFFINC(16);
 800c794:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c798:	3310      	adds	r3, #16
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	da00      	bge.n	800c7a0 <Form_Siemens_Reply+0x584>
 800c79e:	3307      	adds	r3, #7
 800c7a0:	10db      	asrs	r3, r3, #3
 800c7a2:	b29a      	uxth	r2, r3
 800c7a4:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c7a8:	4413      	add	r3, r2
 800c7aa:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c7ae:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c7b2:	3310      	adds	r3, #16
 800c7b4:	b29b      	uxth	r3, r3
 800c7b6:	b21b      	sxth	r3, r3
 800c7b8:	425a      	negs	r2, r3
 800c7ba:	f003 0307 	and.w	r3, r3, #7
 800c7be:	f002 0207 	and.w	r2, r2, #7
 800c7c2:	bf58      	it	pl
 800c7c4:	4253      	negpl	r3, r2
 800c7c6:	b21b      	sxth	r3, r3
 800c7c8:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Calc_Compliment_CRC = Siemens_CRC(&Buffer[ucByte],ucByte-2);//32,30
 800c7cc:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c7d0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800c7d4:	441a      	add	r2, r3
 800c7d6:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c7da:	3b02      	subs	r3, #2
 800c7dc:	b29b      	uxth	r3, r3
 800c7de:	4619      	mov	r1, r3
 800c7e0:	4610      	mov	r0, r2
 800c7e2:	f000 fecb 	bl	800d57c <Siemens_CRC>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	f8a7 3654 	strh.w	r3, [r7, #1620]	; 0x654
#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_COMP_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800c7ec:	4b2e      	ldr	r3, [pc, #184]	; (800c8a8 <Form_Siemens_Reply+0x68c>)
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	0a5b      	lsrs	r3, r3, #9
 800c7f2:	f003 0301 	and.w	r3, r3, #1
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d02c      	beq.n	800c854 <Form_Siemens_Reply+0x638>
	{
		uint16_t Temp_Crc = Calc_Compliment_CRC;
 800c7fa:	f8b7 3654 	ldrh.w	r3, [r7, #1620]	; 0x654
 800c7fe:	f8a7 3648 	strh.w	r3, [r7, #1608]	; 0x648
		printf("Injecting INVALID_PACKET_CRC_SIEMENS\n");
 800c802:	482a      	ldr	r0, [pc, #168]	; (800c8ac <Form_Siemens_Reply+0x690>)
 800c804:	f015 ff6a 	bl	80226dc <puts>
		printf("Actual Compliment CRC:%04x\n",Calc_Compliment_CRC);
 800c808:	f8b7 3654 	ldrh.w	r3, [r7, #1620]	; 0x654
 800c80c:	4619      	mov	r1, r3
 800c80e:	482c      	ldr	r0, [pc, #176]	; (800c8c0 <Form_Siemens_Reply+0x6a4>)
 800c810:	f015 fec8 	bl	80225a4 <iprintf>
		Calc_Compliment_CRC = HAL_RNG_GetRandomNumber(&hrng) % 0xffff;
 800c814:	4827      	ldr	r0, [pc, #156]	; (800c8b4 <Form_Siemens_Reply+0x698>)
 800c816:	f00d fb6d 	bl	8019ef4 <HAL_RNG_GetRandomNumber>
 800c81a:	4601      	mov	r1, r0
 800c81c:	4b26      	ldr	r3, [pc, #152]	; (800c8b8 <Form_Siemens_Reply+0x69c>)
 800c81e:	fba3 2301 	umull	r2, r3, r3, r1
 800c822:	0bda      	lsrs	r2, r3, #15
 800c824:	4613      	mov	r3, r2
 800c826:	041b      	lsls	r3, r3, #16
 800c828:	1a9b      	subs	r3, r3, r2
 800c82a:	1aca      	subs	r2, r1, r3
 800c82c:	4613      	mov	r3, r2
 800c82e:	f8a7 3654 	strh.w	r3, [r7, #1620]	; 0x654
		if(Calc_Compliment_CRC == Temp_Crc)
 800c832:	f8b7 2654 	ldrh.w	r2, [r7, #1620]	; 0x654
 800c836:	f8b7 3648 	ldrh.w	r3, [r7, #1608]	; 0x648
 800c83a:	429a      	cmp	r2, r3
 800c83c:	d104      	bne.n	800c848 <Form_Siemens_Reply+0x62c>
		{
			Calc_Compliment_CRC += 4;
 800c83e:	f8b7 3654 	ldrh.w	r3, [r7, #1620]	; 0x654
 800c842:	3304      	adds	r3, #4
 800c844:	f8a7 3654 	strh.w	r3, [r7, #1620]	; 0x654
		}
		printf("Injected Compliment CRC:%04x\n",Calc_Compliment_CRC);
 800c848:	f8b7 3654 	ldrh.w	r3, [r7, #1620]	; 0x654
 800c84c:	4619      	mov	r1, r3
 800c84e:	481d      	ldr	r0, [pc, #116]	; (800c8c4 <Form_Siemens_Reply+0x6a8>)
 800c850:	f015 fea8 	bl	80225a4 <iprintf>
	}
#endif
	//	printf("Calc_Compliment_CRC:0x%04x\n",Calc_Compliment_CRC);
	ucByte+=ucByte;
 800c854:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c858:	005b      	lsls	r3, r3, #1
 800c85a:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
	Insert_cal_parity(ucBit,16,&Buffer[CRC_Compliment_Loc],Calc_Compliment_CRC,NO_PARITY);
 800c85e:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c862:	b2d8      	uxtb	r0, r3
 800c864:	f8b7 3650 	ldrh.w	r3, [r7, #1616]	; 0x650
 800c868:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800c86c:	4413      	add	r3, r2
 800c86e:	f8b7 2654 	ldrh.w	r2, [r7, #1620]	; 0x654
 800c872:	2100      	movs	r1, #0
 800c874:	603a      	str	r2, [r7, #0]
 800c876:	6079      	str	r1, [r7, #4]
 800c878:	2202      	movs	r2, #2
 800c87a:	9202      	str	r2, [sp, #8]
 800c87c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c880:	e9cd 1200 	strd	r1, r2, [sp]
 800c884:	461a      	mov	r2, r3
 800c886:	2110      	movs	r1, #16
 800c888:	f001 f80e 	bl	800d8a8 <Insert_cal_parity>
	BITSTUFFINC(16);
 800c88c:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c890:	3310      	adds	r3, #16
 800c892:	2b00      	cmp	r3, #0
 800c894:	da18      	bge.n	800c8c8 <Form_Siemens_Reply+0x6ac>
 800c896:	3307      	adds	r3, #7
 800c898:	e016      	b.n	800c8c8 <Form_Siemens_Reply+0x6ac>
 800c89a:	bf00      	nop
 800c89c:	20002800 	.word	0x20002800
 800c8a0:	20002a28 	.word	0x20002a28
 800c8a4:	20003cc4 	.word	0x20003cc4
 800c8a8:	2000347c 	.word	0x2000347c
 800c8ac:	08025cc4 	.word	0x08025cc4
 800c8b0:	08025f74 	.word	0x08025f74
 800c8b4:	20009c84 	.word	0x20009c84
 800c8b8:	80008001 	.word	0x80008001
 800c8bc:	08025f88 	.word	0x08025f88
 800c8c0:	08025f9c 	.word	0x08025f9c
 800c8c4:	08025fb8 	.word	0x08025fb8
 800c8c8:	10db      	asrs	r3, r3, #3
 800c8ca:	b29a      	uxth	r2, r3
 800c8cc:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c8d0:	4413      	add	r3, r2
 800c8d2:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c8d6:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c8da:	3310      	adds	r3, #16
 800c8dc:	b29b      	uxth	r3, r3
 800c8de:	b21b      	sxth	r3, r3
 800c8e0:	425a      	negs	r2, r3
 800c8e2:	f003 0307 	and.w	r3, r3, #7
 800c8e6:	f002 0207 	and.w	r2, r2, #7
 800c8ea:	bf58      	it	pl
 800c8ec:	4253      	negpl	r3, r2
 800c8ee:	b21b      	sxth	r3, r3
 800c8f0:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c


	memcpy(Siemens_tx_Buffer_st.Tx_Buff,Buffer,CRC_Compliment_Loc+2);
 800c8f4:	f8b7 3650 	ldrh.w	r3, [r7, #1616]	; 0x650
 800c8f8:	3302      	adds	r3, #2
 800c8fa:	461a      	mov	r2, r3
 800c8fc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c900:	4619      	mov	r1, r3
 800c902:	481e      	ldr	r0, [pc, #120]	; (800c97c <Form_Siemens_Reply+0x760>)
 800c904:	f015 fd3e 	bl	8022384 <memcpy>
	Siemens_tx_Buffer_st.Tx_Length = (CRC_Compliment_Loc+2);
 800c908:	f8b7 3650 	ldrh.w	r3, [r7, #1616]	; 0x650
 800c90c:	3302      	adds	r3, #2
 800c90e:	b29a      	uxth	r2, r3
 800c910:	4b1a      	ldr	r3, [pc, #104]	; (800c97c <Form_Siemens_Reply+0x760>)
 800c912:	f8a3 2600 	strh.w	r2, [r3, #1536]	; 0x600

	CheckToSendReplyorNot();
 800c916:	f001 f999 	bl	800dc4c <CheckToSendReplyorNot>

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(NO_REPLY_FROM_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800c91a:	4b19      	ldr	r3, [pc, #100]	; (800c980 <Form_Siemens_Reply+0x764>)
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	099b      	lsrs	r3, r3, #6
 800c920:	f003 0301 	and.w	r3, r3, #1
 800c924:	2b00      	cmp	r3, #0
 800c926:	d003      	beq.n	800c930 <Form_Siemens_Reply+0x714>
	{
		printf("Injecting NO REPLY FROM EIPC Failure\n");
 800c928:	4816      	ldr	r0, [pc, #88]	; (800c984 <Form_Siemens_Reply+0x768>)
 800c92a:	f015 fed7 	bl	80226dc <puts>
 800c92e:	e00f      	b.n	800c950 <Form_Siemens_Reply+0x734>
	}
	else
	{
		if(SendReply == 1)
 800c930:	4b15      	ldr	r3, [pc, #84]	; (800c988 <Form_Siemens_Reply+0x76c>)
 800c932:	781b      	ldrb	r3, [r3, #0]
 800c934:	2b01      	cmp	r3, #1
 800c936:	d10b      	bne.n	800c950 <Form_Siemens_Reply+0x734>
		{
			udpClient_send(Buffer,CRC_Compliment_Loc+2,Source_IP);
 800c938:	f8b7 3650 	ldrh.w	r3, [r7, #1616]	; 0x650
 800c93c:	b2db      	uxtb	r3, r3
 800c93e:	3302      	adds	r3, #2
 800c940:	b2d9      	uxtb	r1, r3
 800c942:	4a12      	ldr	r2, [pc, #72]	; (800c98c <Form_Siemens_Reply+0x770>)
 800c944:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c948:	6812      	ldr	r2, [r2, #0]
 800c94a:	4618      	mov	r0, r3
 800c94c:	f002 fbe4 	bl	800f118 <udpClient_send>
	{
		udpClient_send(Buffer,CRC_Compliment_Loc+2,Source_IP);
	}
#endif

	memset(&Temp_SiemensTx_st,0,sizeof(SIEMENS_PKT_t));
 800c950:	f44f 720a 	mov.w	r2, #552	; 0x228
 800c954:	2100      	movs	r1, #0
 800c956:	480e      	ldr	r0, [pc, #56]	; (800c990 <Form_Siemens_Reply+0x774>)
 800c958:	f015 fd3c 	bl	80223d4 <memset>
	memcpy(&Temp_SiemensTx_st,&Siemens_TX_st,sizeof(SIEMENS_PKT_t));
 800c95c:	4a0c      	ldr	r2, [pc, #48]	; (800c990 <Form_Siemens_Reply+0x774>)
 800c95e:	4b0d      	ldr	r3, [pc, #52]	; (800c994 <Form_Siemens_Reply+0x778>)
 800c960:	4610      	mov	r0, r2
 800c962:	4619      	mov	r1, r3
 800c964:	f44f 730a 	mov.w	r3, #552	; 0x228
 800c968:	461a      	mov	r2, r3
 800c96a:	f015 fd0b 	bl	8022384 <memcpy>
	UNUSED(App_data_Traverser);
}
 800c96e:	bf00      	nop
 800c970:	f507 67cb 	add.w	r7, r7, #1624	; 0x658
 800c974:	46bd      	mov	sp, r7
 800c976:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c97a:	bf00      	nop
 800c97c:	20002e78 	.word	0x20002e78
 800c980:	2000347c 	.word	0x2000347c
 800c984:	08025fd8 	.word	0x08025fd8
 800c988:	20004ba5 	.word	0x20004ba5
 800c98c:	2000520c 	.word	0x2000520c
 800c990:	20002c50 	.word	0x20002c50
 800c994:	20002a28 	.word	0x20002a28

0800c998 <ProcessSendingSignals2MIE>:

void ProcessSendingSignals2MIE(void)
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	af00      	add	r7, sp, #0
	if(HAL_Elaps_Ticks(SiemensClocks_st.Signal2MIE_Clk) > EI_data.Siemens_st.MIE_SIGNAL_SEND_CLK)
 800c99c:	4b54      	ldr	r3, [pc, #336]	; (800caf0 <ProcessSendingSignals2MIE+0x158>)
 800c99e:	685b      	ldr	r3, [r3, #4]
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	f002 f843 	bl	800ea2c <HAL_Elaps_Ticks>
 800c9a6:	4602      	mov	r2, r0
 800c9a8:	4b52      	ldr	r3, [pc, #328]	; (800caf4 <ProcessSendingSignals2MIE+0x15c>)
 800c9aa:	f8d3 3318 	ldr.w	r3, [r3, #792]	; 0x318
 800c9ae:	429a      	cmp	r2, r3
 800c9b0:	f240 809c 	bls.w	800caec <ProcessSendingSignals2MIE+0x154>
	{
		if(
				(SiemensClocks_st.MisMatchFlag == CLEAR) &&
 800c9b4:	4b4e      	ldr	r3, [pc, #312]	; (800caf0 <ProcessSendingSignals2MIE+0x158>)
 800c9b6:	781b      	ldrb	r3, [r3, #0]
		if(
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d113      	bne.n	800c9e4 <ProcessSendingSignals2MIE+0x4c>
				(SiemensClocks_st.SiemensCanXchangeHappening == YES) &&
 800c9bc:	4b4c      	ldr	r3, [pc, #304]	; (800caf0 <ProcessSendingSignals2MIE+0x158>)
 800c9be:	785b      	ldrb	r3, [r3, #1]
				(SiemensClocks_st.MisMatchFlag == CLEAR) &&
 800c9c0:	2b01      	cmp	r3, #1
 800c9c2:	d10f      	bne.n	800c9e4 <ProcessSendingSignals2MIE+0x4c>
				( (Rx_Siemens_self_sharing_st.DataReceving == RECEIVING) && (Tx_Siemens_self_sharing_st.DataReceving == RECEIVING) )
 800c9c4:	4b4c      	ldr	r3, [pc, #304]	; (800caf8 <ProcessSendingSignals2MIE+0x160>)
 800c9c6:	781b      	ldrb	r3, [r3, #0]
				(SiemensClocks_st.SiemensCanXchangeHappening == YES) &&
 800c9c8:	2b01      	cmp	r3, #1
 800c9ca:	d10b      	bne.n	800c9e4 <ProcessSendingSignals2MIE+0x4c>
				( (Rx_Siemens_self_sharing_st.DataReceving == RECEIVING) && (Tx_Siemens_self_sharing_st.DataReceving == RECEIVING) )
 800c9cc:	4b4b      	ldr	r3, [pc, #300]	; (800cafc <ProcessSendingSignals2MIE+0x164>)
 800c9ce:	781b      	ldrb	r3, [r3, #0]
 800c9d0:	2b01      	cmp	r3, #1
 800c9d2:	d107      	bne.n	800c9e4 <ProcessSendingSignals2MIE+0x4c>
			/*
			 * CAN Exchange Happening.
			 * No MisMatch Found
			 */
			//			printf("\n1\n");
			memcpy(&VitalData2MIE_st.Relays,&SiemensMain_Relays_st.Relays,SiemensMain_Relays_st.NoofDataBytes);
 800c9d4:	4b4a      	ldr	r3, [pc, #296]	; (800cb00 <ProcessSendingSignals2MIE+0x168>)
 800c9d6:	881b      	ldrh	r3, [r3, #0]
 800c9d8:	461a      	mov	r2, r3
 800c9da:	494a      	ldr	r1, [pc, #296]	; (800cb04 <ProcessSendingSignals2MIE+0x16c>)
 800c9dc:	484a      	ldr	r0, [pc, #296]	; (800cb08 <ProcessSendingSignals2MIE+0x170>)
 800c9de:	f015 fcd1 	bl	8022384 <memcpy>
 800c9e2:	e02d      	b.n	800ca40 <ProcessSendingSignals2MIE+0xa8>
		}
		else if( ((Rx_Siemens_self_sharing_st.DataReceving == RECEIVING) && (Tx_Siemens_self_sharing_st.DataReceving == NOT_RECEIVING)) && (SiemensClocks_st.SiemensCanXchangeHappening == YES) )
 800c9e4:	4b44      	ldr	r3, [pc, #272]	; (800caf8 <ProcessSendingSignals2MIE+0x160>)
 800c9e6:	781b      	ldrb	r3, [r3, #0]
 800c9e8:	2b01      	cmp	r3, #1
 800c9ea:	d10f      	bne.n	800ca0c <ProcessSendingSignals2MIE+0x74>
 800c9ec:	4b43      	ldr	r3, [pc, #268]	; (800cafc <ProcessSendingSignals2MIE+0x164>)
 800c9ee:	781b      	ldrb	r3, [r3, #0]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d10b      	bne.n	800ca0c <ProcessSendingSignals2MIE+0x74>
 800c9f4:	4b3e      	ldr	r3, [pc, #248]	; (800caf0 <ProcessSendingSignals2MIE+0x158>)
 800c9f6:	785b      	ldrb	r3, [r3, #1]
 800c9f8:	2b01      	cmp	r3, #1
 800c9fa:	d107      	bne.n	800ca0c <ProcessSendingSignals2MIE+0x74>
			 * CAN Exchange Happening
			 * MisMatch Found because of Other Card is Receiving,
			 * This Card is Not Receiving
			 */
			//			printf("\n2\n");
			memcpy(&VitalData2MIE_st.Relays,&Siemens_OtherRelays_st.Relays,Siemens_OtherRelays_st.NoofDataBytes);
 800c9fc:	4b43      	ldr	r3, [pc, #268]	; (800cb0c <ProcessSendingSignals2MIE+0x174>)
 800c9fe:	881b      	ldrh	r3, [r3, #0]
 800ca00:	461a      	mov	r2, r3
 800ca02:	4943      	ldr	r1, [pc, #268]	; (800cb10 <ProcessSendingSignals2MIE+0x178>)
 800ca04:	4840      	ldr	r0, [pc, #256]	; (800cb08 <ProcessSendingSignals2MIE+0x170>)
 800ca06:	f015 fcbd 	bl	8022384 <memcpy>
 800ca0a:	e019      	b.n	800ca40 <ProcessSendingSignals2MIE+0xa8>
		}
		else if( ((Tx_Siemens_self_sharing_st.DataReceving == RECEIVING) && (Rx_Siemens_self_sharing_st.DataReceving == NOT_RECEIVING)) && (SiemensClocks_st.SiemensCanXchangeHappening == YES) )
 800ca0c:	4b3b      	ldr	r3, [pc, #236]	; (800cafc <ProcessSendingSignals2MIE+0x164>)
 800ca0e:	781b      	ldrb	r3, [r3, #0]
 800ca10:	2b01      	cmp	r3, #1
 800ca12:	d10f      	bne.n	800ca34 <ProcessSendingSignals2MIE+0x9c>
 800ca14:	4b38      	ldr	r3, [pc, #224]	; (800caf8 <ProcessSendingSignals2MIE+0x160>)
 800ca16:	781b      	ldrb	r3, [r3, #0]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d10b      	bne.n	800ca34 <ProcessSendingSignals2MIE+0x9c>
 800ca1c:	4b34      	ldr	r3, [pc, #208]	; (800caf0 <ProcessSendingSignals2MIE+0x158>)
 800ca1e:	785b      	ldrb	r3, [r3, #1]
 800ca20:	2b01      	cmp	r3, #1
 800ca22:	d107      	bne.n	800ca34 <ProcessSendingSignals2MIE+0x9c>
			 * CAN Exchange Happening
			 * MisMatch Found because of This Card is Receiving,
			 * Other Card is Not Receiving
			 */
			//			printf("\n4\n");
			memcpy(&VitalData2MIE_st.Relays,&SiemensMain_Relays_st.Relays,SiemensMain_Relays_st.NoofDataBytes);
 800ca24:	4b36      	ldr	r3, [pc, #216]	; (800cb00 <ProcessSendingSignals2MIE+0x168>)
 800ca26:	881b      	ldrh	r3, [r3, #0]
 800ca28:	461a      	mov	r2, r3
 800ca2a:	4936      	ldr	r1, [pc, #216]	; (800cb04 <ProcessSendingSignals2MIE+0x16c>)
 800ca2c:	4836      	ldr	r0, [pc, #216]	; (800cb08 <ProcessSendingSignals2MIE+0x170>)
 800ca2e:	f015 fca9 	bl	8022384 <memcpy>
 800ca32:	e005      	b.n	800ca40 <ProcessSendingSignals2MIE+0xa8>
		}
		else
		{
			//			printf("\n5\n");
			memset(&VitalData2MIE_st.Relays,0,sizeof(VitalData2MIE_st.Relays));
 800ca34:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ca38:	2100      	movs	r1, #0
 800ca3a:	4833      	ldr	r0, [pc, #204]	; (800cb08 <ProcessSendingSignals2MIE+0x170>)
 800ca3c:	f015 fcca 	bl	80223d4 <memset>
		}


		if((Tx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount >= EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) && (Rx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount >= EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) )
 800ca40:	4b2e      	ldr	r3, [pc, #184]	; (800cafc <ProcessSendingSignals2MIE+0x164>)
 800ca42:	885b      	ldrh	r3, [r3, #2]
 800ca44:	461a      	mov	r2, r3
 800ca46:	4b2b      	ldr	r3, [pc, #172]	; (800caf4 <ProcessSendingSignals2MIE+0x15c>)
 800ca48:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800ca4c:	429a      	cmp	r2, r3
 800ca4e:	d315      	bcc.n	800ca7c <ProcessSendingSignals2MIE+0xe4>
 800ca50:	4b29      	ldr	r3, [pc, #164]	; (800caf8 <ProcessSendingSignals2MIE+0x160>)
 800ca52:	885b      	ldrh	r3, [r3, #2]
 800ca54:	461a      	mov	r2, r3
 800ca56:	4b27      	ldr	r3, [pc, #156]	; (800caf4 <ProcessSendingSignals2MIE+0x15c>)
 800ca58:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800ca5c:	429a      	cmp	r2, r3
 800ca5e:	d30d      	bcc.n	800ca7c <ProcessSendingSignals2MIE+0xe4>
		{
			//			printf("\n6\n");
			memset(&VitalData2MIE_st.Relays,0,sizeof(VitalData2MIE_st.Relays));
 800ca60:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ca64:	2100      	movs	r1, #0
 800ca66:	4828      	ldr	r0, [pc, #160]	; (800cb08 <ProcessSendingSignals2MIE+0x170>)
 800ca68:	f015 fcb4 	bl	80223d4 <memset>
			SET_BIT_USER(0,EI_HealthStatus); /* For Sending to MIE */
 800ca6c:	4b29      	ldr	r3, [pc, #164]	; (800cb14 <ProcessSendingSignals2MIE+0x17c>)
 800ca6e:	881b      	ldrh	r3, [r3, #0]
 800ca70:	f043 0301 	orr.w	r3, r3, #1
 800ca74:	b29a      	uxth	r2, r3
 800ca76:	4b27      	ldr	r3, [pc, #156]	; (800cb14 <ProcessSendingSignals2MIE+0x17c>)
 800ca78:	801a      	strh	r2, [r3, #0]
 800ca7a:	e006      	b.n	800ca8a <ProcessSendingSignals2MIE+0xf2>
		}
		else
		{
			CLEAR_BIT_USER(0,EI_HealthStatus); /* For Sending to MIE */
 800ca7c:	4b25      	ldr	r3, [pc, #148]	; (800cb14 <ProcessSendingSignals2MIE+0x17c>)
 800ca7e:	881b      	ldrh	r3, [r3, #0]
 800ca80:	f023 0301 	bic.w	r3, r3, #1
 800ca84:	b29a      	uxth	r2, r3
 800ca86:	4b23      	ldr	r3, [pc, #140]	; (800cb14 <ProcessSendingSignals2MIE+0x17c>)
 800ca88:	801a      	strh	r2, [r3, #0]
		}

		VitalData2MIE_st.NoofDataBytes = EI_data.Siemens_st.Booloutputs  % 8;
 800ca8a:	4b1a      	ldr	r3, [pc, #104]	; (800caf4 <ProcessSendingSignals2MIE+0x15c>)
 800ca8c:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800ca90:	f003 0307 	and.w	r3, r3, #7
 800ca94:	b29a      	uxth	r2, r3
 800ca96:	4b20      	ldr	r3, [pc, #128]	; (800cb18 <ProcessSendingSignals2MIE+0x180>)
 800ca98:	801a      	strh	r2, [r3, #0]

		if(VitalData2MIE_st.NoofDataBytes != 0)
 800ca9a:	4b1f      	ldr	r3, [pc, #124]	; (800cb18 <ProcessSendingSignals2MIE+0x180>)
 800ca9c:	881b      	ldrh	r3, [r3, #0]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d009      	beq.n	800cab6 <ProcessSendingSignals2MIE+0x11e>
		{
			VitalData2MIE_st.NoofDataBytes  = (EI_data.Siemens_st.Booloutputs / 8) + 1;
 800caa2:	4b14      	ldr	r3, [pc, #80]	; (800caf4 <ProcessSendingSignals2MIE+0x15c>)
 800caa4:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800caa8:	08db      	lsrs	r3, r3, #3
 800caaa:	b29b      	uxth	r3, r3
 800caac:	3301      	adds	r3, #1
 800caae:	b29a      	uxth	r2, r3
 800cab0:	4b19      	ldr	r3, [pc, #100]	; (800cb18 <ProcessSendingSignals2MIE+0x180>)
 800cab2:	801a      	strh	r2, [r3, #0]
 800cab4:	e006      	b.n	800cac4 <ProcessSendingSignals2MIE+0x12c>
		}
		else
		{
			VitalData2MIE_st.NoofDataBytes = (EI_data.Siemens_st.Booloutputs / 8);
 800cab6:	4b0f      	ldr	r3, [pc, #60]	; (800caf4 <ProcessSendingSignals2MIE+0x15c>)
 800cab8:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800cabc:	08db      	lsrs	r3, r3, #3
 800cabe:	b29a      	uxth	r2, r3
 800cac0:	4b15      	ldr	r3, [pc, #84]	; (800cb18 <ProcessSendingSignals2MIE+0x180>)
 800cac2:	801a      	strh	r2, [r3, #0]
		}

		if(((strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)) && (SiemensClocks_st.SiemensCanXchangeHappening == NO))
 800cac4:	4915      	ldr	r1, [pc, #84]	; (800cb1c <ProcessSendingSignals2MIE+0x184>)
 800cac6:	4816      	ldr	r0, [pc, #88]	; (800cb20 <ProcessSendingSignals2MIE+0x188>)
 800cac8:	f7f3 fbba 	bl	8000240 <strcmp>
 800cacc:	4603      	mov	r3, r0
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d007      	beq.n	800cae2 <ProcessSendingSignals2MIE+0x14a>
 800cad2:	4b07      	ldr	r3, [pc, #28]	; (800caf0 <ProcessSendingSignals2MIE+0x158>)
 800cad4:	785b      	ldrb	r3, [r3, #1]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d103      	bne.n	800cae2 <ProcessSendingSignals2MIE+0x14a>
		{
			TransmitCanPkt(EI_PROCESS_DATA);
 800cada:	f240 1019 	movw	r0, #281	; 0x119
 800cade:	f002 fd27 	bl	800f530 <TransmitCanPkt>




#endif
		SiemensClocks_st.Signal2MIE_Clk = HAL_GetTick();
 800cae2:	f008 fd55 	bl	8015590 <HAL_GetTick>
 800cae6:	4603      	mov	r3, r0
 800cae8:	4a01      	ldr	r2, [pc, #4]	; (800caf0 <ProcessSendingSignals2MIE+0x158>)
 800caea:	6053      	str	r3, [r2, #4]
	}
}
 800caec:	bf00      	nop
 800caee:	bd80      	pop	{r7, pc}
 800caf0:	20003490 	.word	0x20003490
 800caf4:	20000304 	.word	0x20000304
 800caf8:	20003488 	.word	0x20003488
 800cafc:	20003484 	.word	0x20003484
 800cb00:	200036b0 	.word	0x200036b0
 800cb04:	200036b4 	.word	0x200036b4
 800cb08:	200034ae 	.word	0x200034ae
 800cb0c:	200038b4 	.word	0x200038b4
 800cb10:	200038b8 	.word	0x200038b8
 800cb14:	20000e3a 	.word	0x20000e3a
 800cb18:	200034ac 	.word	0x200034ac
 800cb1c:	08025f44 	.word	0x08025f44
 800cb20:	20000305 	.word	0x20000305

0800cb24 <ProcessSelfSharing>:


void ProcessSelfSharing(void)
{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	af00      	add	r7, sp, #0
	if( HAL_Elaps_Ticks(SiemensClocks_st.SelfSharingClk) > EI_data.Siemens_st.CAN_Xchange_Time)
 800cb28:	4b0c      	ldr	r3, [pc, #48]	; (800cb5c <ProcessSelfSharing+0x38>)
 800cb2a:	689b      	ldr	r3, [r3, #8]
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	f001 ff7d 	bl	800ea2c <HAL_Elaps_Ticks>
 800cb32:	4602      	mov	r2, r0
 800cb34:	4b0a      	ldr	r3, [pc, #40]	; (800cb60 <ProcessSelfSharing+0x3c>)
 800cb36:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 800cb3a:	429a      	cmp	r2, r3
 800cb3c:	d90b      	bls.n	800cb56 <ProcessSelfSharing+0x32>
	{
		Tx_Siemens_self_sharing_st.MesgReceived = NOT_RECEIVED;
 800cb3e:	4b09      	ldr	r3, [pc, #36]	; (800cb64 <ProcessSelfSharing+0x40>)
 800cb40:	2200      	movs	r2, #0
 800cb42:	705a      	strb	r2, [r3, #1]

#ifdef EI_1
		TransmitCanPkt(EI_1_SELF_SHARING);
#endif
#ifdef EI_2
		TransmitCanPkt(EI_2_SELF_SHARING);
 800cb44:	f240 2002 	movw	r0, #514	; 0x202
 800cb48:	f002 fcf2 	bl	800f530 <TransmitCanPkt>
#endif

		SiemensClocks_st.SelfSharingClk = HAL_GetTick();
 800cb4c:	f008 fd20 	bl	8015590 <HAL_GetTick>
 800cb50:	4603      	mov	r3, r0
 800cb52:	4a02      	ldr	r2, [pc, #8]	; (800cb5c <ProcessSelfSharing+0x38>)
 800cb54:	6093      	str	r3, [r2, #8]
	}
}
 800cb56:	bf00      	nop
 800cb58:	bd80      	pop	{r7, pc}
 800cb5a:	bf00      	nop
 800cb5c:	20003490 	.word	0x20003490
 800cb60:	20000304 	.word	0x20000304
 800cb64:	20003484 	.word	0x20003484

0800cb68 <ProcessDetectNoValidDataReceive>:

void ProcessDetectNoValidDataReceive(void)
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	af00      	add	r7, sp, #0

	if((SiemensClocks_st.LastReceiveClk != 0) && (HAL_Elaps_Ticks(SiemensClocks_st.LastReceiveClk) > EI_data.Siemens_st.COMM_FAILURE_TIME_OUT) )
 800cb6c:	4b1a      	ldr	r3, [pc, #104]	; (800cbd8 <ProcessDetectNoValidDataReceive+0x70>)
 800cb6e:	68db      	ldr	r3, [r3, #12]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d014      	beq.n	800cb9e <ProcessDetectNoValidDataReceive+0x36>
 800cb74:	4b18      	ldr	r3, [pc, #96]	; (800cbd8 <ProcessDetectNoValidDataReceive+0x70>)
 800cb76:	68db      	ldr	r3, [r3, #12]
 800cb78:	4618      	mov	r0, r3
 800cb7a:	f001 ff57 	bl	800ea2c <HAL_Elaps_Ticks>
 800cb7e:	4602      	mov	r2, r0
 800cb80:	4b16      	ldr	r3, [pc, #88]	; (800cbdc <ProcessDetectNoValidDataReceive+0x74>)
 800cb82:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 800cb86:	429a      	cmp	r2, r3
 800cb88:	d909      	bls.n	800cb9e <ProcessDetectNoValidDataReceive+0x36>
	{
		if(Tx_Siemens_self_sharing_st.DataReceving != NOT_RECEIVED)
 800cb8a:	4b15      	ldr	r3, [pc, #84]	; (800cbe0 <ProcessDetectNoValidDataReceive+0x78>)
 800cb8c:	781b      	ldrb	r3, [r3, #0]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d005      	beq.n	800cb9e <ProcessDetectNoValidDataReceive+0x36>
		{
			printf("This Card Not Receiving Data\n");
 800cb92:	4814      	ldr	r0, [pc, #80]	; (800cbe4 <ProcessDetectNoValidDataReceive+0x7c>)
 800cb94:	f015 fda2 	bl	80226dc <puts>
			Tx_Siemens_self_sharing_st.DataReceving = NOT_RECEIVED;
 800cb98:	4b11      	ldr	r3, [pc, #68]	; (800cbe0 <ProcessDetectNoValidDataReceive+0x78>)
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	701a      	strb	r2, [r3, #0]
		}
	}

	if((Tx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount > EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) && (Rx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount > EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) )
 800cb9e:	4b10      	ldr	r3, [pc, #64]	; (800cbe0 <ProcessDetectNoValidDataReceive+0x78>)
 800cba0:	885b      	ldrh	r3, [r3, #2]
 800cba2:	461a      	mov	r2, r3
 800cba4:	4b0d      	ldr	r3, [pc, #52]	; (800cbdc <ProcessDetectNoValidDataReceive+0x74>)
 800cba6:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800cbaa:	429a      	cmp	r2, r3
 800cbac:	d911      	bls.n	800cbd2 <ProcessDetectNoValidDataReceive+0x6a>
 800cbae:	4b0e      	ldr	r3, [pc, #56]	; (800cbe8 <ProcessDetectNoValidDataReceive+0x80>)
 800cbb0:	885b      	ldrh	r3, [r3, #2]
 800cbb2:	461a      	mov	r2, r3
 800cbb4:	4b09      	ldr	r3, [pc, #36]	; (800cbdc <ProcessDetectNoValidDataReceive+0x74>)
 800cbb6:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800cbba:	429a      	cmp	r2, r3
 800cbbc:	d909      	bls.n	800cbd2 <ProcessDetectNoValidDataReceive+0x6a>
	{
		if(Tx_Siemens_self_sharing_st.DataReceving != NOT_RECEIVED)
 800cbbe:	4b08      	ldr	r3, [pc, #32]	; (800cbe0 <ProcessDetectNoValidDataReceive+0x78>)
 800cbc0:	781b      	ldrb	r3, [r3, #0]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d005      	beq.n	800cbd2 <ProcessDetectNoValidDataReceive+0x6a>
		{
			printf("This Card Not Valid Receiving Data\n");
 800cbc6:	4809      	ldr	r0, [pc, #36]	; (800cbec <ProcessDetectNoValidDataReceive+0x84>)
 800cbc8:	f015 fd88 	bl	80226dc <puts>
			Tx_Siemens_self_sharing_st.DataReceving = NOT_RECEIVED;
 800cbcc:	4b04      	ldr	r3, [pc, #16]	; (800cbe0 <ProcessDetectNoValidDataReceive+0x78>)
 800cbce:	2200      	movs	r2, #0
 800cbd0:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800cbd2:	bf00      	nop
 800cbd4:	bd80      	pop	{r7, pc}
 800cbd6:	bf00      	nop
 800cbd8:	20003490 	.word	0x20003490
 800cbdc:	20000304 	.word	0x20000304
 800cbe0:	20003484 	.word	0x20003484
 800cbe4:	08026000 	.word	0x08026000
 800cbe8:	20003488 	.word	0x20003488
 800cbec:	08026020 	.word	0x08026020

0800cbf0 <SendRelays2Other>:

void SendRelays2Other(void)
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	af00      	add	r7, sp, #0
	if( HAL_Elaps_Ticks(SiemensClocks_st.Relays2OtheClk) > ONE_SEC)
 800cbf4:	4b09      	ldr	r3, [pc, #36]	; (800cc1c <SendRelays2Other+0x2c>)
 800cbf6:	691b      	ldr	r3, [r3, #16]
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	f001 ff17 	bl	800ea2c <HAL_Elaps_Ticks>
 800cbfe:	4603      	mov	r3, r0
 800cc00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cc04:	d908      	bls.n	800cc18 <SendRelays2Other+0x28>

#ifdef EI_1
		TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
#endif
#ifdef EI_2
		TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
 800cc06:	f44f 7002 	mov.w	r0, #520	; 0x208
 800cc0a:	f002 fc91 	bl	800f530 <TransmitCanPkt>
#endif
		SiemensClocks_st.Relays2OtheClk = HAL_GetTick();
 800cc0e:	f008 fcbf 	bl	8015590 <HAL_GetTick>
 800cc12:	4603      	mov	r3, r0
 800cc14:	4a01      	ldr	r2, [pc, #4]	; (800cc1c <SendRelays2Other+0x2c>)
 800cc16:	6113      	str	r3, [r2, #16]

	}
}
 800cc18:	bf00      	nop
 800cc1a:	bd80      	pop	{r7, pc}
 800cc1c:	20003490 	.word	0x20003490

0800cc20 <CheckRelayMisMatch>:

void CheckRelayMisMatch(void)
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	af00      	add	r7, sp, #0
	if(HAL_Elaps_Ticks(SiemensClocks_st.RelayMisMatchCheckClk) > FIVE_HUNDRED_MS)
 800cc24:	4b16      	ldr	r3, [pc, #88]	; (800cc80 <CheckRelayMisMatch+0x60>)
 800cc26:	695b      	ldr	r3, [r3, #20]
 800cc28:	4618      	mov	r0, r3
 800cc2a:	f001 feff 	bl	800ea2c <HAL_Elaps_Ticks>
 800cc2e:	4603      	mov	r3, r0
 800cc30:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800cc34:	d922      	bls.n	800cc7c <CheckRelayMisMatch+0x5c>
	{
		if( (Tx_Siemens_self_sharing_st.DataReceving == NOT_RECEIVING) && (Rx_Siemens_self_sharing_st.DataReceving == RECEIVING) )
 800cc36:	4b13      	ldr	r3, [pc, #76]	; (800cc84 <CheckRelayMisMatch+0x64>)
 800cc38:	781b      	ldrb	r3, [r3, #0]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d10c      	bne.n	800cc58 <CheckRelayMisMatch+0x38>
 800cc3e:	4b12      	ldr	r3, [pc, #72]	; (800cc88 <CheckRelayMisMatch+0x68>)
 800cc40:	781b      	ldrb	r3, [r3, #0]
 800cc42:	2b01      	cmp	r3, #1
 800cc44:	d108      	bne.n	800cc58 <CheckRelayMisMatch+0x38>
		{
			memcpy(&SiemensMain_Relays_st,&Siemens_OtherRelays_st,sizeof(VITAL_DATA_SHARING_t));
 800cc46:	4a11      	ldr	r2, [pc, #68]	; (800cc8c <CheckRelayMisMatch+0x6c>)
 800cc48:	4b11      	ldr	r3, [pc, #68]	; (800cc90 <CheckRelayMisMatch+0x70>)
 800cc4a:	4610      	mov	r0, r2
 800cc4c:	4619      	mov	r1, r3
 800cc4e:	f44f 7301 	mov.w	r3, #516	; 0x204
 800cc52:	461a      	mov	r2, r3
 800cc54:	f015 fb96 	bl	8022384 <memcpy>
		}
		if(Siemens_OtherRelays_st.VitalCRC != SiemensMain_Relays_st.VitalCRC)
 800cc58:	4b0d      	ldr	r3, [pc, #52]	; (800cc90 <CheckRelayMisMatch+0x70>)
 800cc5a:	885a      	ldrh	r2, [r3, #2]
 800cc5c:	4b0b      	ldr	r3, [pc, #44]	; (800cc8c <CheckRelayMisMatch+0x6c>)
 800cc5e:	885b      	ldrh	r3, [r3, #2]
 800cc60:	429a      	cmp	r2, r3
 800cc62:	d003      	beq.n	800cc6c <CheckRelayMisMatch+0x4c>
		{
			SiemensClocks_st.MisMatchFlag = SET;
 800cc64:	4b06      	ldr	r3, [pc, #24]	; (800cc80 <CheckRelayMisMatch+0x60>)
 800cc66:	2201      	movs	r2, #1
 800cc68:	701a      	strb	r2, [r3, #0]
 800cc6a:	e002      	b.n	800cc72 <CheckRelayMisMatch+0x52>
		}
		else
		{
			SiemensClocks_st.MisMatchFlag = CLEAR;
 800cc6c:	4b04      	ldr	r3, [pc, #16]	; (800cc80 <CheckRelayMisMatch+0x60>)
 800cc6e:	2200      	movs	r2, #0
 800cc70:	701a      	strb	r2, [r3, #0]
		}

		SiemensClocks_st.RelayMisMatchCheckClk = HAL_GetTick();
 800cc72:	f008 fc8d 	bl	8015590 <HAL_GetTick>
 800cc76:	4603      	mov	r3, r0
 800cc78:	4a01      	ldr	r2, [pc, #4]	; (800cc80 <CheckRelayMisMatch+0x60>)
 800cc7a:	6153      	str	r3, [r2, #20]
	}
}
 800cc7c:	bf00      	nop
 800cc7e:	bd80      	pop	{r7, pc}
 800cc80:	20003490 	.word	0x20003490
 800cc84:	20003484 	.word	0x20003484
 800cc88:	20003488 	.word	0x20003488
 800cc8c:	200036b0 	.word	0x200036b0
 800cc90:	200038b4 	.word	0x200038b4

0800cc94 <Detect_SiemensCAN_Xchange_Failure>:

void Detect_SiemensCAN_Xchange_Failure(void)
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	af00      	add	r7, sp, #0
	static uint32_t Previous_Clock_RCV_SELF_XCHG_CLK = 0;

	if(SiemensClocks_st.SiemensCanXchangeHappening == YES)
 800cc98:	4b16      	ldr	r3, [pc, #88]	; (800ccf4 <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800cc9a:	785b      	ldrb	r3, [r3, #1]
 800cc9c:	2b01      	cmp	r3, #1
 800cc9e:	d101      	bne.n	800cca4 <Detect_SiemensCAN_Xchange_Failure+0x10>
	{
		Blink_S2();
 800cca0:	f006 fb4e 	bl	8013340 <Blink_S2>
	}

	if(HAL_Elaps_Ticks(SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK)>= EI_data.Siemens_st.CAN_EXCHANGE_TIME_OUT)
 800cca4:	4b13      	ldr	r3, [pc, #76]	; (800ccf4 <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800cca6:	699b      	ldr	r3, [r3, #24]
 800cca8:	4618      	mov	r0, r3
 800ccaa:	f001 febf 	bl	800ea2c <HAL_Elaps_Ticks>
 800ccae:	4602      	mov	r2, r0
 800ccb0:	4b11      	ldr	r3, [pc, #68]	; (800ccf8 <Detect_SiemensCAN_Xchange_Failure+0x64>)
 800ccb2:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
 800ccb6:	429a      	cmp	r2, r3
 800ccb8:	d31a      	bcc.n	800ccf0 <Detect_SiemensCAN_Xchange_Failure+0x5c>
	{
		if(Previous_Clock_RCV_SELF_XCHG_CLK != SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK)
 800ccba:	4b0e      	ldr	r3, [pc, #56]	; (800ccf4 <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800ccbc:	699a      	ldr	r2, [r3, #24]
 800ccbe:	4b0f      	ldr	r3, [pc, #60]	; (800ccfc <Detect_SiemensCAN_Xchange_Failure+0x68>)
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	429a      	cmp	r2, r3
 800ccc4:	d014      	beq.n	800ccf0 <Detect_SiemensCAN_Xchange_Failure+0x5c>
		{
			SiemensClocks_st.SiemensCanXchangeHappening = NO;
 800ccc6:	4b0b      	ldr	r3, [pc, #44]	; (800ccf4 <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800ccc8:	2200      	movs	r2, #0
 800ccca:	705a      	strb	r2, [r3, #1]
			Previous_Clock_RCV_SELF_XCHG_CLK = SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK;
 800cccc:	4b09      	ldr	r3, [pc, #36]	; (800ccf4 <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800ccce:	699b      	ldr	r3, [r3, #24]
 800ccd0:	4a0a      	ldr	r2, [pc, #40]	; (800ccfc <Detect_SiemensCAN_Xchange_Failure+0x68>)
 800ccd2:	6013      	str	r3, [r2, #0]
			printf("CAN Data Not Received from last %lu Seconds\n",(HAL_Elaps_Ticks(SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK)/1000));
 800ccd4:	4b07      	ldr	r3, [pc, #28]	; (800ccf4 <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800ccd6:	699b      	ldr	r3, [r3, #24]
 800ccd8:	4618      	mov	r0, r3
 800ccda:	f001 fea7 	bl	800ea2c <HAL_Elaps_Ticks>
 800ccde:	4603      	mov	r3, r0
 800cce0:	4a07      	ldr	r2, [pc, #28]	; (800cd00 <Detect_SiemensCAN_Xchange_Failure+0x6c>)
 800cce2:	fba2 2303 	umull	r2, r3, r2, r3
 800cce6:	099b      	lsrs	r3, r3, #6
 800cce8:	4619      	mov	r1, r3
 800ccea:	4806      	ldr	r0, [pc, #24]	; (800cd04 <Detect_SiemensCAN_Xchange_Failure+0x70>)
 800ccec:	f015 fc5a 	bl	80225a4 <iprintf>
		}
	}
}
 800ccf0:	bf00      	nop
 800ccf2:	bd80      	pop	{r7, pc}
 800ccf4:	20003490 	.word	0x20003490
 800ccf8:	20000304 	.word	0x20000304
 800ccfc:	20004ba8 	.word	0x20004ba8
 800cd00:	10624dd3 	.word	0x10624dd3
 800cd04:	08026044 	.word	0x08026044

0800cd08 <Print_Siemens_MSG>:

void Print_Siemens_MSG(SIEMENS_PKT_t *SiemensPrint_st,uint8_t *Buff,uint16_t Length,uint8_t TX_RX)
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b086      	sub	sp, #24
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	60f8      	str	r0, [r7, #12]
 800cd10:	60b9      	str	r1, [r7, #8]
 800cd12:	4611      	mov	r1, r2
 800cd14:	461a      	mov	r2, r3
 800cd16:	460b      	mov	r3, r1
 800cd18:	80fb      	strh	r3, [r7, #6]
 800cd1a:	4613      	mov	r3, r2
 800cd1c:	717b      	strb	r3, [r7, #5]

	//	printf("\n________________________________________________________________________________________________\n");
	printf("\nTX_RX:");
 800cd1e:	484d      	ldr	r0, [pc, #308]	; (800ce54 <Print_Siemens_MSG+0x14c>)
 800cd20:	f015 fc40 	bl	80225a4 <iprintf>
	if(TX_RX == TX)
 800cd24:	797b      	ldrb	r3, [r7, #5]
 800cd26:	2b01      	cmp	r3, #1
 800cd28:	d103      	bne.n	800cd32 <Print_Siemens_MSG+0x2a>
	{
		printf("TX|");
 800cd2a:	484b      	ldr	r0, [pc, #300]	; (800ce58 <Print_Siemens_MSG+0x150>)
 800cd2c:	f015 fc3a 	bl	80225a4 <iprintf>
 800cd30:	e005      	b.n	800cd3e <Print_Siemens_MSG+0x36>
	}
	else if(TX_RX == RX)
 800cd32:	797b      	ldrb	r3, [r7, #5]
 800cd34:	2b02      	cmp	r3, #2
 800cd36:	d102      	bne.n	800cd3e <Print_Siemens_MSG+0x36>
	{
		printf("RX|");
 800cd38:	4848      	ldr	r0, [pc, #288]	; (800ce5c <Print_Siemens_MSG+0x154>)
 800cd3a:	f015 fc33 	bl	80225a4 <iprintf>
	}
	printf("DT:%u|",SiemensPrint_st->DesSysType);
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	781b      	ldrb	r3, [r3, #0]
 800cd42:	4619      	mov	r1, r3
 800cd44:	4846      	ldr	r0, [pc, #280]	; (800ce60 <Print_Siemens_MSG+0x158>)
 800cd46:	f015 fc2d 	bl	80225a4 <iprintf>
	printf("DA:%lu|",SiemensPrint_st->ExtDestAddr);
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	689b      	ldr	r3, [r3, #8]
 800cd4e:	4619      	mov	r1, r3
 800cd50:	4844      	ldr	r0, [pc, #272]	; (800ce64 <Print_Siemens_MSG+0x15c>)
 800cd52:	f015 fc27 	bl	80225a4 <iprintf>
	printf("ST:%u|",SiemensPrint_st->SrcSysType);
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	7b1b      	ldrb	r3, [r3, #12]
 800cd5a:	4619      	mov	r1, r3
 800cd5c:	4842      	ldr	r0, [pc, #264]	; (800ce68 <Print_Siemens_MSG+0x160>)
 800cd5e:	f015 fc21 	bl	80225a4 <iprintf>
	printf("SA:%lu|",SiemensPrint_st->ExtSourceAddr);
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	695b      	ldr	r3, [r3, #20]
 800cd66:	4619      	mov	r1, r3
 800cd68:	4840      	ldr	r0, [pc, #256]	; (800ce6c <Print_Siemens_MSG+0x164>)
 800cd6a:	f015 fc1b 	bl	80225a4 <iprintf>
	printf("PD_V:%u|",SiemensPrint_st->ProdDataVer);
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	7e1b      	ldrb	r3, [r3, #24]
 800cd72:	4619      	mov	r1, r3
 800cd74:	483e      	ldr	r0, [pc, #248]	; (800ce70 <Print_Siemens_MSG+0x168>)
 800cd76:	f015 fc15 	bl	80225a4 <iprintf>
	printf("CI:%u|",SiemensPrint_st->CompIndex);
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	7e5b      	ldrb	r3, [r3, #25]
 800cd7e:	4619      	mov	r1, r3
 800cd80:	483c      	ldr	r0, [pc, #240]	; (800ce74 <Print_Siemens_MSG+0x16c>)
 800cd82:	f015 fc0f 	bl	80225a4 <iprintf>
	printf("DP:%u|",SiemensPrint_st->DestPort);
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	7e9b      	ldrb	r3, [r3, #26]
 800cd8a:	4619      	mov	r1, r3
 800cd8c:	483a      	ldr	r0, [pc, #232]	; (800ce78 <Print_Siemens_MSG+0x170>)
 800cd8e:	f015 fc09 	bl	80225a4 <iprintf>
	printf("SP:%u|",SiemensPrint_st->SourcePort);
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	7edb      	ldrb	r3, [r3, #27]
 800cd96:	4619      	mov	r1, r3
 800cd98:	4838      	ldr	r0, [pc, #224]	; (800ce7c <Print_Siemens_MSG+0x174>)
 800cd9a:	f015 fc03 	bl	80225a4 <iprintf>
	printf("RX_TS:%lu|",SiemensPrint_st->RxTimeStamp);
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	69db      	ldr	r3, [r3, #28]
 800cda2:	4619      	mov	r1, r3
 800cda4:	4836      	ldr	r0, [pc, #216]	; (800ce80 <Print_Siemens_MSG+0x178>)
 800cda6:	f015 fbfd 	bl	80225a4 <iprintf>
	printf("TX_TS:%lu\n",SiemensPrint_st->TxTimeStamp);
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	6a1b      	ldr	r3, [r3, #32]
 800cdae:	4619      	mov	r1, r3
 800cdb0:	4834      	ldr	r0, [pc, #208]	; (800ce84 <Print_Siemens_MSG+0x17c>)
 800cdb2:	f015 fbf7 	bl	80225a4 <iprintf>
	if(TX_RX == RX)
 800cdb6:	797b      	ldrb	r3, [r7, #5]
 800cdb8:	2b02      	cmp	r3, #2
 800cdba:	d122      	bne.n	800ce02 <Print_Siemens_MSG+0xfa>
	{
		printf("RC:%u|",SiemensPrint_st->No_ofDataBytes);
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cdc0:	4619      	mov	r1, r3
 800cdc2:	4831      	ldr	r0, [pc, #196]	; (800ce88 <Print_Siemens_MSG+0x180>)
 800cdc4:	f015 fbee 	bl	80225a4 <iprintf>
		for(uint16_t Traverser = 0;Traverser <SiemensPrint_st->No_ofDataBytes;++Traverser)
 800cdc8:	2300      	movs	r3, #0
 800cdca:	82fb      	strh	r3, [r7, #22]
 800cdcc:	e00b      	b.n	800cde6 <Print_Siemens_MSG+0xde>
		{
			printf("%02X ",SiemensPrint_st->AppData[Traverser]);
 800cdce:	8afb      	ldrh	r3, [r7, #22]
 800cdd0:	68fa      	ldr	r2, [r7, #12]
 800cdd2:	4413      	add	r3, r2
 800cdd4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800cdd8:	4619      	mov	r1, r3
 800cdda:	482c      	ldr	r0, [pc, #176]	; (800ce8c <Print_Siemens_MSG+0x184>)
 800cddc:	f015 fbe2 	bl	80225a4 <iprintf>
		for(uint16_t Traverser = 0;Traverser <SiemensPrint_st->No_ofDataBytes;++Traverser)
 800cde0:	8afb      	ldrh	r3, [r7, #22]
 800cde2:	3301      	adds	r3, #1
 800cde4:	82fb      	strh	r3, [r7, #22]
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cdea:	8afa      	ldrh	r2, [r7, #22]
 800cdec:	429a      	cmp	r2, r3
 800cdee:	d3ee      	bcc.n	800cdce <Print_Siemens_MSG+0xc6>
		}
		printf("\n");
 800cdf0:	200a      	movs	r0, #10
 800cdf2:	f015 fbef 	bl	80225d4 <putchar>

		if(Debug_flag == 2)
 800cdf6:	4b26      	ldr	r3, [pc, #152]	; (800ce90 <Print_Siemens_MSG+0x188>)
 800cdf8:	781b      	ldrb	r3, [r3, #0]
 800cdfa:	2b02      	cmp	r3, #2
 800cdfc:	d101      	bne.n	800ce02 <Print_Siemens_MSG+0xfa>
		{
			PrintSignals();
 800cdfe:	f000 ff65 	bl	800dccc <PrintSignals>
		//		}
		//		printf("\n____________________________________ \n");


	}
	if(Debug_flag == 1)
 800ce02:	4b23      	ldr	r3, [pc, #140]	; (800ce90 <Print_Siemens_MSG+0x188>)
 800ce04:	781b      	ldrb	r3, [r3, #0]
 800ce06:	2b01      	cmp	r3, #1
 800ce08:	d120      	bne.n	800ce4c <Print_Siemens_MSG+0x144>
	{
		for(uint16_t Byte = 0;Byte<Length;++Byte)
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	82bb      	strh	r3, [r7, #20]
 800ce0e:	e016      	b.n	800ce3e <Print_Siemens_MSG+0x136>
		{
			if((Byte != 0) && ( (Byte % 32) == 0) )
 800ce10:	8abb      	ldrh	r3, [r7, #20]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d008      	beq.n	800ce28 <Print_Siemens_MSG+0x120>
 800ce16:	8abb      	ldrh	r3, [r7, #20]
 800ce18:	f003 031f 	and.w	r3, r3, #31
 800ce1c:	b29b      	uxth	r3, r3
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d102      	bne.n	800ce28 <Print_Siemens_MSG+0x120>
			{
				printf("\n");
 800ce22:	200a      	movs	r0, #10
 800ce24:	f015 fbd6 	bl	80225d4 <putchar>
			}
			printf("%02X ",Buff[Byte]);
 800ce28:	8abb      	ldrh	r3, [r7, #20]
 800ce2a:	68ba      	ldr	r2, [r7, #8]
 800ce2c:	4413      	add	r3, r2
 800ce2e:	781b      	ldrb	r3, [r3, #0]
 800ce30:	4619      	mov	r1, r3
 800ce32:	4816      	ldr	r0, [pc, #88]	; (800ce8c <Print_Siemens_MSG+0x184>)
 800ce34:	f015 fbb6 	bl	80225a4 <iprintf>
		for(uint16_t Byte = 0;Byte<Length;++Byte)
 800ce38:	8abb      	ldrh	r3, [r7, #20]
 800ce3a:	3301      	adds	r3, #1
 800ce3c:	82bb      	strh	r3, [r7, #20]
 800ce3e:	8aba      	ldrh	r2, [r7, #20]
 800ce40:	88fb      	ldrh	r3, [r7, #6]
 800ce42:	429a      	cmp	r2, r3
 800ce44:	d3e4      	bcc.n	800ce10 <Print_Siemens_MSG+0x108>
		}
		printf("\n");
 800ce46:	200a      	movs	r0, #10
 800ce48:	f015 fbc4 	bl	80225d4 <putchar>
	}
	//	printf("\n");
	//	printf("\n________________________________________________________________________________________________\n");
}
 800ce4c:	bf00      	nop
 800ce4e:	3718      	adds	r7, #24
 800ce50:	46bd      	mov	sp, r7
 800ce52:	bd80      	pop	{r7, pc}
 800ce54:	08026074 	.word	0x08026074
 800ce58:	0802607c 	.word	0x0802607c
 800ce5c:	08026080 	.word	0x08026080
 800ce60:	08026084 	.word	0x08026084
 800ce64:	0802608c 	.word	0x0802608c
 800ce68:	08026094 	.word	0x08026094
 800ce6c:	0802609c 	.word	0x0802609c
 800ce70:	080260a4 	.word	0x080260a4
 800ce74:	080260b0 	.word	0x080260b0
 800ce78:	080260b8 	.word	0x080260b8
 800ce7c:	080260c0 	.word	0x080260c0
 800ce80:	080260c8 	.word	0x080260c8
 800ce84:	080260d4 	.word	0x080260d4
 800ce88:	080260e0 	.word	0x080260e0
 800ce8c:	080260e8 	.word	0x080260e8
 800ce90:	20000645 	.word	0x20000645

0800ce94 <Chech_forSiemensCMD>:



void Chech_forSiemensCMD(void)
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b09a      	sub	sp, #104	; 0x68
 800ce98:	af00      	add	r7, sp, #0
	//	unsigned char ch[20] = {0,},i=0;
	uint8_t IS_COMMAND_RECEIVED = NO;
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t Index = 0;
 800cea0:	2300      	movs	r3, #0
 800cea2:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t Byte = 0;
 800cea6:	2300      	movs	r3, #0
 800cea8:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	uint8_t Buffer[100] = {0,};
 800ceac:	2300      	movs	r3, #0
 800ceae:	603b      	str	r3, [r7, #0]
 800ceb0:	1d3b      	adds	r3, r7, #4
 800ceb2:	2260      	movs	r2, #96	; 0x60
 800ceb4:	2100      	movs	r1, #0
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	f015 fa8c 	bl	80223d4 <memset>
	if(HAL_Elaps_Ticks(Isp_Intr_Clk) < 10)
 800cebc:	4bb9      	ldr	r3, [pc, #740]	; (800d1a4 <Chech_forSiemensCMD+0x310>)
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	4618      	mov	r0, r3
 800cec2:	f001 fdb3 	bl	800ea2c <HAL_Elaps_Ticks>
 800cec6:	4603      	mov	r3, r0
 800cec8:	2b09      	cmp	r3, #9
 800ceca:	f240 81ad 	bls.w	800d228 <Chech_forSiemensCMD+0x394>
	{
		return;
	}
	else
	{
		while(Com_DataReady(ISP_PORT))
 800cece:	e010      	b.n	800cef2 <Chech_forSiemensCMD+0x5e>
		{
			Byte = Com_Get_Byte(ISP_PORT);
 800ced0:	2000      	movs	r0, #0
 800ced2:	f008 f835 	bl	8014f40 <Com_Get_Byte>
 800ced6:	4603      	mov	r3, r0
 800ced8:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			Buffer[Index++] = Byte;
 800cedc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800cee0:	1c5a      	adds	r2, r3, #1
 800cee2:	f887 2066 	strb.w	r2, [r7, #102]	; 0x66
 800cee6:	3368      	adds	r3, #104	; 0x68
 800cee8:	443b      	add	r3, r7
 800ceea:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 800ceee:	f803 2c68 	strb.w	r2, [r3, #-104]
		while(Com_DataReady(ISP_PORT))
 800cef2:	2000      	movs	r0, #0
 800cef4:	f007 ffe4 	bl	8014ec0 <Com_DataReady>
 800cef8:	4603      	mov	r3, r0
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d1e8      	bne.n	800ced0 <Chech_forSiemensCMD+0x3c>
		}
		if(Index>0)
 800cefe:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	f000 8144 	beq.w	800d190 <Chech_forSiemensCMD+0x2fc>
		{
			Buffer[Index] = 0;
 800cf08:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800cf0c:	3368      	adds	r3, #104	; 0x68
 800cf0e:	443b      	add	r3, r7
 800cf10:	2200      	movs	r2, #0
 800cf12:	f803 2c68 	strb.w	r2, [r3, #-104]
			printf("Received from ISP:%s\n",Buffer);
 800cf16:	463b      	mov	r3, r7
 800cf18:	4619      	mov	r1, r3
 800cf1a:	48a3      	ldr	r0, [pc, #652]	; (800d1a8 <Chech_forSiemensCMD+0x314>)
 800cf1c:	f015 fb42 	bl	80225a4 <iprintf>
			switch(Is_SiemensCommand_Valid(Buffer,Index))
 800cf20:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 800cf24:	463b      	mov	r3, r7
 800cf26:	4611      	mov	r1, r2
 800cf28:	4618      	mov	r0, r3
 800cf2a:	f000 faf3 	bl	800d514 <Is_SiemensCommand_Valid>
 800cf2e:	4603      	mov	r3, r0
 800cf30:	2b0c      	cmp	r3, #12
 800cf32:	f200 8129 	bhi.w	800d188 <Chech_forSiemensCMD+0x2f4>
 800cf36:	a201      	add	r2, pc, #4	; (adr r2, 800cf3c <Chech_forSiemensCMD+0xa8>)
 800cf38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf3c:	0800cf71 	.word	0x0800cf71
 800cf40:	0800cf7f 	.word	0x0800cf7f
 800cf44:	0800cfe3 	.word	0x0800cfe3
 800cf48:	0800d005 	.word	0x0800d005
 800cf4c:	0800d02d 	.word	0x0800d02d
 800cf50:	0800d055 	.word	0x0800d055
 800cf54:	0800d07d 	.word	0x0800d07d
 800cf58:	0800d0a5 	.word	0x0800d0a5
 800cf5c:	0800d0cd 	.word	0x0800d0cd
 800cf60:	0800d0f5 	.word	0x0800d0f5
 800cf64:	0800d11d 	.word	0x0800d11d
 800cf68:	0800d145 	.word	0x0800d145
 800cf6c:	0800d16d 	.word	0x0800d16d
			{
			case ZERO:
				Dats_Request_Flag = 1;
 800cf70:	4b8e      	ldr	r3, [pc, #568]	; (800d1ac <Chech_forSiemensCMD+0x318>)
 800cf72:	2201      	movs	r2, #1
 800cf74:	701a      	strb	r2, [r3, #0]
				printf("\n*************PLEASE LOAD EI DATS USING APPLICATION************\n");
 800cf76:	488e      	ldr	r0, [pc, #568]	; (800d1b0 <Chech_forSiemensCMD+0x31c>)
 800cf78:	f015 fbb0 	bl	80226dc <puts>
				break;
 800cf7c:	e109      	b.n	800d192 <Chech_forSiemensCMD+0x2fe>
			case ONE:
				printf("Received \"%s\":%u\n",Commands_List[ONE],(Buffer[Index-1])-'0');
 800cf7e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800cf82:	3b01      	subs	r3, #1
 800cf84:	3368      	adds	r3, #104	; 0x68
 800cf86:	443b      	add	r3, r7
 800cf88:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800cf8c:	3b30      	subs	r3, #48	; 0x30
 800cf8e:	461a      	mov	r2, r3
 800cf90:	4988      	ldr	r1, [pc, #544]	; (800d1b4 <Chech_forSiemensCMD+0x320>)
 800cf92:	4889      	ldr	r0, [pc, #548]	; (800d1b8 <Chech_forSiemensCMD+0x324>)
 800cf94:	f015 fb06 	bl	80225a4 <iprintf>
				if( (((Buffer[Index-1])-'0') >= 0) && ((Buffer[Index-1])-'0') < 3)
 800cf98:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800cf9c:	3b01      	subs	r3, #1
 800cf9e:	3368      	adds	r3, #104	; 0x68
 800cfa0:	443b      	add	r3, r7
 800cfa2:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800cfa6:	2b2f      	cmp	r3, #47	; 0x2f
 800cfa8:	d914      	bls.n	800cfd4 <Chech_forSiemensCMD+0x140>
 800cfaa:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800cfae:	3b01      	subs	r3, #1
 800cfb0:	3368      	adds	r3, #104	; 0x68
 800cfb2:	443b      	add	r3, r7
 800cfb4:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800cfb8:	2b32      	cmp	r3, #50	; 0x32
 800cfba:	d80b      	bhi.n	800cfd4 <Chech_forSiemensCMD+0x140>
				{
					Debug_flag = (Buffer[Index-1])-'0';
 800cfbc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800cfc0:	3b01      	subs	r3, #1
 800cfc2:	3368      	adds	r3, #104	; 0x68
 800cfc4:	443b      	add	r3, r7
 800cfc6:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800cfca:	3b30      	subs	r3, #48	; 0x30
 800cfcc:	b2da      	uxtb	r2, r3
 800cfce:	4b7b      	ldr	r3, [pc, #492]	; (800d1bc <Chech_forSiemensCMD+0x328>)
 800cfd0:	701a      	strb	r2, [r3, #0]
 800cfd2:	e002      	b.n	800cfda <Chech_forSiemensCMD+0x146>
				}
				else
				{
					printf("Please Send Valid Command\n");
 800cfd4:	487a      	ldr	r0, [pc, #488]	; (800d1c0 <Chech_forSiemensCMD+0x32c>)
 800cfd6:	f015 fb81 	bl	80226dc <puts>
				}
				IS_COMMAND_RECEIVED = YES;
 800cfda:	2301      	movs	r3, #1
 800cfdc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800cfe0:	e0d7      	b.n	800d192 <Chech_forSiemensCMD+0x2fe>

			case TWO:
				printf("Received %s\n",Commands_List[TWO]);
 800cfe2:	4978      	ldr	r1, [pc, #480]	; (800d1c4 <Chech_forSiemensCMD+0x330>)
 800cfe4:	4878      	ldr	r0, [pc, #480]	; (800d1c8 <Chech_forSiemensCMD+0x334>)
 800cfe6:	f015 fadd 	bl	80225a4 <iprintf>
				printf("INVALID_DES_SYS_TYPE\n");
 800cfea:	4878      	ldr	r0, [pc, #480]	; (800d1cc <Chech_forSiemensCMD+0x338>)
 800cfec:	f015 fb76 	bl	80226dc <puts>
				SET_BIT_USER(INVALID_DES_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800cff0:	4b77      	ldr	r3, [pc, #476]	; (800d1d0 <Chech_forSiemensCMD+0x33c>)
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	f043 0301 	orr.w	r3, r3, #1
 800cff8:	4a75      	ldr	r2, [pc, #468]	; (800d1d0 <Chech_forSiemensCMD+0x33c>)
 800cffa:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800cffc:	2301      	movs	r3, #1
 800cffe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d002:	e0c6      	b.n	800d192 <Chech_forSiemensCMD+0x2fe>

			case THREE:
				printf("Received %s\n",Commands_List[THREE]);
 800d004:	4973      	ldr	r1, [pc, #460]	; (800d1d4 <Chech_forSiemensCMD+0x340>)
 800d006:	4870      	ldr	r0, [pc, #448]	; (800d1c8 <Chech_forSiemensCMD+0x334>)
 800d008:	f015 facc 	bl	80225a4 <iprintf>
				printf("INVALID_SRC_SYS_TYPE\n");
 800d00c:	4872      	ldr	r0, [pc, #456]	; (800d1d8 <Chech_forSiemensCMD+0x344>)
 800d00e:	f015 fb65 	bl	80226dc <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800d012:	4b6f      	ldr	r3, [pc, #444]	; (800d1d0 <Chech_forSiemensCMD+0x33c>)
 800d014:	2200      	movs	r2, #0
 800d016:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800d018:	4b6d      	ldr	r3, [pc, #436]	; (800d1d0 <Chech_forSiemensCMD+0x33c>)
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	f043 0302 	orr.w	r3, r3, #2
 800d020:	4a6b      	ldr	r2, [pc, #428]	; (800d1d0 <Chech_forSiemensCMD+0x33c>)
 800d022:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800d024:	2301      	movs	r3, #1
 800d026:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d02a:	e0b2      	b.n	800d192 <Chech_forSiemensCMD+0x2fe>

			case FOUR:
				printf("Received %s\n",Commands_List[FOUR]);
 800d02c:	496b      	ldr	r1, [pc, #428]	; (800d1dc <Chech_forSiemensCMD+0x348>)
 800d02e:	4866      	ldr	r0, [pc, #408]	; (800d1c8 <Chech_forSiemensCMD+0x334>)
 800d030:	f015 fab8 	bl	80225a4 <iprintf>
				printf("INVALID_SRC_ADDR\n");
 800d034:	486a      	ldr	r0, [pc, #424]	; (800d1e0 <Chech_forSiemensCMD+0x34c>)
 800d036:	f015 fb51 	bl	80226dc <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800d03a:	4b65      	ldr	r3, [pc, #404]	; (800d1d0 <Chech_forSiemensCMD+0x33c>)
 800d03c:	2200      	movs	r2, #0
 800d03e:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_ADDR,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800d040:	4b63      	ldr	r3, [pc, #396]	; (800d1d0 <Chech_forSiemensCMD+0x33c>)
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	f043 0304 	orr.w	r3, r3, #4
 800d048:	4a61      	ldr	r2, [pc, #388]	; (800d1d0 <Chech_forSiemensCMD+0x33c>)
 800d04a:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800d04c:	2301      	movs	r3, #1
 800d04e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d052:	e09e      	b.n	800d192 <Chech_forSiemensCMD+0x2fe>

			case FIVE:
				printf("Received %s\n",Commands_List[FIVE]);
 800d054:	4963      	ldr	r1, [pc, #396]	; (800d1e4 <Chech_forSiemensCMD+0x350>)
 800d056:	485c      	ldr	r0, [pc, #368]	; (800d1c8 <Chech_forSiemensCMD+0x334>)
 800d058:	f015 faa4 	bl	80225a4 <iprintf>
				printf("INVALID_DES_PORT\n");
 800d05c:	4862      	ldr	r0, [pc, #392]	; (800d1e8 <Chech_forSiemensCMD+0x354>)
 800d05e:	f015 fb3d 	bl	80226dc <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800d062:	4b5b      	ldr	r3, [pc, #364]	; (800d1d0 <Chech_forSiemensCMD+0x33c>)
 800d064:	2200      	movs	r2, #0
 800d066:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_DES_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800d068:	4b59      	ldr	r3, [pc, #356]	; (800d1d0 <Chech_forSiemensCMD+0x33c>)
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	f043 0308 	orr.w	r3, r3, #8
 800d070:	4a57      	ldr	r2, [pc, #348]	; (800d1d0 <Chech_forSiemensCMD+0x33c>)
 800d072:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800d074:	2301      	movs	r3, #1
 800d076:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d07a:	e08a      	b.n	800d192 <Chech_forSiemensCMD+0x2fe>

			case SIX:
				printf("Received %s\n",Commands_List[SIX]);
 800d07c:	495b      	ldr	r1, [pc, #364]	; (800d1ec <Chech_forSiemensCMD+0x358>)
 800d07e:	4852      	ldr	r0, [pc, #328]	; (800d1c8 <Chech_forSiemensCMD+0x334>)
 800d080:	f015 fa90 	bl	80225a4 <iprintf>
				printf("INVALID_SRC_PORT\n");
 800d084:	485a      	ldr	r0, [pc, #360]	; (800d1f0 <Chech_forSiemensCMD+0x35c>)
 800d086:	f015 fb29 	bl	80226dc <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800d08a:	4b51      	ldr	r3, [pc, #324]	; (800d1d0 <Chech_forSiemensCMD+0x33c>)
 800d08c:	2200      	movs	r2, #0
 800d08e:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800d090:	4b4f      	ldr	r3, [pc, #316]	; (800d1d0 <Chech_forSiemensCMD+0x33c>)
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	f043 0310 	orr.w	r3, r3, #16
 800d098:	4a4d      	ldr	r2, [pc, #308]	; (800d1d0 <Chech_forSiemensCMD+0x33c>)
 800d09a:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800d09c:	2301      	movs	r3, #1
 800d09e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d0a2:	e076      	b.n	800d192 <Chech_forSiemensCMD+0x2fe>
			case SEVEN:
				printf("Received %s\n",Commands_List[SEVEN]);
 800d0a4:	4953      	ldr	r1, [pc, #332]	; (800d1f4 <Chech_forSiemensCMD+0x360>)
 800d0a6:	4848      	ldr	r0, [pc, #288]	; (800d1c8 <Chech_forSiemensCMD+0x334>)
 800d0a8:	f015 fa7c 	bl	80225a4 <iprintf>
				printf("INVALID_PACKET_CRC_SIEMENS\n");
 800d0ac:	4852      	ldr	r0, [pc, #328]	; (800d1f8 <Chech_forSiemensCMD+0x364>)
 800d0ae:	f015 fb15 	bl	80226dc <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800d0b2:	4b47      	ldr	r3, [pc, #284]	; (800d1d0 <Chech_forSiemensCMD+0x33c>)
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800d0b8:	4b45      	ldr	r3, [pc, #276]	; (800d1d0 <Chech_forSiemensCMD+0x33c>)
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	f043 0320 	orr.w	r3, r3, #32
 800d0c0:	4a43      	ldr	r2, [pc, #268]	; (800d1d0 <Chech_forSiemensCMD+0x33c>)
 800d0c2:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800d0c4:	2301      	movs	r3, #1
 800d0c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d0ca:	e062      	b.n	800d192 <Chech_forSiemensCMD+0x2fe>
			case EIGHT:
				printf("Received %s Command\n",Commands_List[EIGHT]);
 800d0cc:	494b      	ldr	r1, [pc, #300]	; (800d1fc <Chech_forSiemensCMD+0x368>)
 800d0ce:	484c      	ldr	r0, [pc, #304]	; (800d200 <Chech_forSiemensCMD+0x36c>)
 800d0d0:	f015 fa68 	bl	80225a4 <iprintf>
				printf("NO_REPLY_FROM_EIPC\n");
 800d0d4:	484b      	ldr	r0, [pc, #300]	; (800d204 <Chech_forSiemensCMD+0x370>)
 800d0d6:	f015 fb01 	bl	80226dc <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800d0da:	4b3d      	ldr	r3, [pc, #244]	; (800d1d0 <Chech_forSiemensCMD+0x33c>)
 800d0dc:	2200      	movs	r2, #0
 800d0de:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(NO_REPLY_FROM_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800d0e0:	4b3b      	ldr	r3, [pc, #236]	; (800d1d0 <Chech_forSiemensCMD+0x33c>)
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0e8:	4a39      	ldr	r2, [pc, #228]	; (800d1d0 <Chech_forSiemensCMD+0x33c>)
 800d0ea:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800d0ec:	2301      	movs	r3, #1
 800d0ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d0f2:	e04e      	b.n	800d192 <Chech_forSiemensCMD+0x2fe>
			case NINE:
				printf("Received %s\n",Commands_List[NINE]);
 800d0f4:	4944      	ldr	r1, [pc, #272]	; (800d208 <Chech_forSiemensCMD+0x374>)
 800d0f6:	4834      	ldr	r0, [pc, #208]	; (800d1c8 <Chech_forSiemensCMD+0x334>)
 800d0f8:	f015 fa54 	bl	80225a4 <iprintf>
				printf("INVALID_PACKET_CRC_EIPC\n");
 800d0fc:	4843      	ldr	r0, [pc, #268]	; (800d20c <Chech_forSiemensCMD+0x378>)
 800d0fe:	f015 faed 	bl	80226dc <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800d102:	4b33      	ldr	r3, [pc, #204]	; (800d1d0 <Chech_forSiemensCMD+0x33c>)
 800d104:	2200      	movs	r2, #0
 800d106:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800d108:	4b31      	ldr	r3, [pc, #196]	; (800d1d0 <Chech_forSiemensCMD+0x33c>)
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d110:	4a2f      	ldr	r2, [pc, #188]	; (800d1d0 <Chech_forSiemensCMD+0x33c>)
 800d112:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800d114:	2301      	movs	r3, #1
 800d116:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d11a:	e03a      	b.n	800d192 <Chech_forSiemensCMD+0x2fe>
			case TEN:
				printf("Received %s\n",Commands_List[TEN]);
 800d11c:	493c      	ldr	r1, [pc, #240]	; (800d210 <Chech_forSiemensCMD+0x37c>)
 800d11e:	482a      	ldr	r0, [pc, #168]	; (800d1c8 <Chech_forSiemensCMD+0x334>)
 800d120:	f015 fa40 	bl	80225a4 <iprintf>
				printf("INVALID_COMP_PACKET_CRC_SIEMENS\n");
 800d124:	483b      	ldr	r0, [pc, #236]	; (800d214 <Chech_forSiemensCMD+0x380>)
 800d126:	f015 fad9 	bl	80226dc <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800d12a:	4b29      	ldr	r3, [pc, #164]	; (800d1d0 <Chech_forSiemensCMD+0x33c>)
 800d12c:	2200      	movs	r2, #0
 800d12e:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_COMP_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800d130:	4b27      	ldr	r3, [pc, #156]	; (800d1d0 <Chech_forSiemensCMD+0x33c>)
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d138:	4a25      	ldr	r2, [pc, #148]	; (800d1d0 <Chech_forSiemensCMD+0x33c>)
 800d13a:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800d13c:	2301      	movs	r3, #1
 800d13e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d142:	e026      	b.n	800d192 <Chech_forSiemensCMD+0x2fe>
			case ELEVEN:
				printf("Received %s\n",Commands_List[ELEVEN]);
 800d144:	4934      	ldr	r1, [pc, #208]	; (800d218 <Chech_forSiemensCMD+0x384>)
 800d146:	4820      	ldr	r0, [pc, #128]	; (800d1c8 <Chech_forSiemensCMD+0x334>)
 800d148:	f015 fa2c 	bl	80225a4 <iprintf>
				printf("INVALID_COMP_PACKET_CRC_EIPC\n");
 800d14c:	4833      	ldr	r0, [pc, #204]	; (800d21c <Chech_forSiemensCMD+0x388>)
 800d14e:	f015 fac5 	bl	80226dc <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800d152:	4b1f      	ldr	r3, [pc, #124]	; (800d1d0 <Chech_forSiemensCMD+0x33c>)
 800d154:	2200      	movs	r2, #0
 800d156:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_COMP_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800d158:	4b1d      	ldr	r3, [pc, #116]	; (800d1d0 <Chech_forSiemensCMD+0x33c>)
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d160:	4a1b      	ldr	r2, [pc, #108]	; (800d1d0 <Chech_forSiemensCMD+0x33c>)
 800d162:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800d164:	2301      	movs	r3, #1
 800d166:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d16a:	e012      	b.n	800d192 <Chech_forSiemensCMD+0x2fe>
			case TWELVE:
				printf("Received %s\n",Commands_List[TWELVE]);
 800d16c:	492c      	ldr	r1, [pc, #176]	; (800d220 <Chech_forSiemensCMD+0x38c>)
 800d16e:	4816      	ldr	r0, [pc, #88]	; (800d1c8 <Chech_forSiemensCMD+0x334>)
 800d170:	f015 fa18 	bl	80225a4 <iprintf>
				printf("CLEAR ALL\n");
 800d174:	482b      	ldr	r0, [pc, #172]	; (800d224 <Chech_forSiemensCMD+0x390>)
 800d176:	f015 fab1 	bl	80226dc <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800d17a:	4b15      	ldr	r3, [pc, #84]	; (800d1d0 <Chech_forSiemensCMD+0x33c>)
 800d17c:	2200      	movs	r2, #0
 800d17e:	601a      	str	r2, [r3, #0]
				IS_COMMAND_RECEIVED = YES;
 800d180:	2301      	movs	r3, #1
 800d182:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d186:	e004      	b.n	800d192 <Chech_forSiemensCMD+0x2fe>
			default:
				printf("Please Send Valid Command\n");
 800d188:	480d      	ldr	r0, [pc, #52]	; (800d1c0 <Chech_forSiemensCMD+0x32c>)
 800d18a:	f015 faa7 	bl	80226dc <puts>
 800d18e:	e000      	b.n	800d192 <Chech_forSiemensCMD+0x2fe>
			}
		}
 800d190:	bf00      	nop

		if(IS_COMMAND_RECEIVED == YES)
 800d192:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d196:	2b01      	cmp	r3, #1
 800d198:	d147      	bne.n	800d22a <Chech_forSiemensCMD+0x396>
		{
			TransmitCanPkt(CAN_FAULT_INJECTION);
 800d19a:	f240 2005 	movw	r0, #517	; 0x205
 800d19e:	f002 f9c7 	bl	800f530 <TransmitCanPkt>
 800d1a2:	e042      	b.n	800d22a <Chech_forSiemensCMD+0x396>
 800d1a4:	2000a00c 	.word	0x2000a00c
 800d1a8:	080260f0 	.word	0x080260f0
 800d1ac:	20000644 	.word	0x20000644
 800d1b0:	08026108 	.word	0x08026108
 800d1b4:	200047ee 	.word	0x200047ee
 800d1b8:	08026148 	.word	0x08026148
 800d1bc:	20000645 	.word	0x20000645
 800d1c0:	0802615c 	.word	0x0802615c
 800d1c4:	20004820 	.word	0x20004820
 800d1c8:	08026178 	.word	0x08026178
 800d1cc:	08026188 	.word	0x08026188
 800d1d0:	2000347c 	.word	0x2000347c
 800d1d4:	20004852 	.word	0x20004852
 800d1d8:	080261a0 	.word	0x080261a0
 800d1dc:	20004884 	.word	0x20004884
 800d1e0:	080261b8 	.word	0x080261b8
 800d1e4:	200048b6 	.word	0x200048b6
 800d1e8:	080261cc 	.word	0x080261cc
 800d1ec:	200048e8 	.word	0x200048e8
 800d1f0:	080261e0 	.word	0x080261e0
 800d1f4:	2000491a 	.word	0x2000491a
 800d1f8:	080261f4 	.word	0x080261f4
 800d1fc:	2000494c 	.word	0x2000494c
 800d200:	08026210 	.word	0x08026210
 800d204:	08026228 	.word	0x08026228
 800d208:	2000497e 	.word	0x2000497e
 800d20c:	0802623c 	.word	0x0802623c
 800d210:	200049b0 	.word	0x200049b0
 800d214:	08026254 	.word	0x08026254
 800d218:	200049e2 	.word	0x200049e2
 800d21c:	08026274 	.word	0x08026274
 800d220:	20004a14 	.word	0x20004a14
 800d224:	08026294 	.word	0x08026294
		return;
 800d228:	bf00      	nop
		}
	}
}
 800d22a:	3768      	adds	r7, #104	; 0x68
 800d22c:	46bd      	mov	sp, r7
 800d22e:	bd80      	pop	{r7, pc}

0800d230 <Update_SiemensCommands>:


void Update_SiemensCommands(void)
{
 800d230:	b4b0      	push	{r4, r5, r7}
 800d232:	b083      	sub	sp, #12
 800d234:	af00      	add	r7, sp, #0
	uint8_t CmdCnt = 0;
 800d236:	2300      	movs	r3, #0
 800d238:	71fb      	strb	r3, [r7, #7]

	Commands_List[CmdCnt][0] = 0X24;
 800d23a:	79fb      	ldrb	r3, [r7, #7]
 800d23c:	4aa6      	ldr	r2, [pc, #664]	; (800d4d8 <Update_SiemensCommands+0x2a8>)
 800d23e:	2132      	movs	r1, #50	; 0x32
 800d240:	fb01 f303 	mul.w	r3, r1, r3
 800d244:	4413      	add	r3, r2
 800d246:	2224      	movs	r2, #36	; 0x24
 800d248:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][1] = 0X01;
 800d24a:	79fb      	ldrb	r3, [r7, #7]
 800d24c:	4aa2      	ldr	r2, [pc, #648]	; (800d4d8 <Update_SiemensCommands+0x2a8>)
 800d24e:	2132      	movs	r1, #50	; 0x32
 800d250:	fb01 f303 	mul.w	r3, r1, r3
 800d254:	4413      	add	r3, r2
 800d256:	3301      	adds	r3, #1
 800d258:	2201      	movs	r2, #1
 800d25a:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][2] = 0X30;
 800d25c:	79fb      	ldrb	r3, [r7, #7]
 800d25e:	4a9e      	ldr	r2, [pc, #632]	; (800d4d8 <Update_SiemensCommands+0x2a8>)
 800d260:	2132      	movs	r1, #50	; 0x32
 800d262:	fb01 f303 	mul.w	r3, r1, r3
 800d266:	4413      	add	r3, r2
 800d268:	3302      	adds	r3, #2
 800d26a:	2230      	movs	r2, #48	; 0x30
 800d26c:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][3] = 0X40;
 800d26e:	79fb      	ldrb	r3, [r7, #7]
 800d270:	4a99      	ldr	r2, [pc, #612]	; (800d4d8 <Update_SiemensCommands+0x2a8>)
 800d272:	2132      	movs	r1, #50	; 0x32
 800d274:	fb01 f303 	mul.w	r3, r1, r3
 800d278:	4413      	add	r3, r2
 800d27a:	3303      	adds	r3, #3
 800d27c:	2240      	movs	r2, #64	; 0x40
 800d27e:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][4] = 0XC0;
 800d280:	79fb      	ldrb	r3, [r7, #7]
 800d282:	4a95      	ldr	r2, [pc, #596]	; (800d4d8 <Update_SiemensCommands+0x2a8>)
 800d284:	2132      	movs	r1, #50	; 0x32
 800d286:	fb01 f303 	mul.w	r3, r1, r3
 800d28a:	4413      	add	r3, r2
 800d28c:	3304      	adds	r3, #4
 800d28e:	22c0      	movs	r2, #192	; 0xc0
 800d290:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][5] = 0X4E;
 800d292:	79fb      	ldrb	r3, [r7, #7]
 800d294:	4a90      	ldr	r2, [pc, #576]	; (800d4d8 <Update_SiemensCommands+0x2a8>)
 800d296:	2132      	movs	r1, #50	; 0x32
 800d298:	fb01 f303 	mul.w	r3, r1, r3
 800d29c:	4413      	add	r3, r2
 800d29e:	3305      	adds	r3, #5
 800d2a0:	224e      	movs	r2, #78	; 0x4e
 800d2a2:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][6] = 0X26;
 800d2a4:	79fb      	ldrb	r3, [r7, #7]
 800d2a6:	4a8c      	ldr	r2, [pc, #560]	; (800d4d8 <Update_SiemensCommands+0x2a8>)
 800d2a8:	2132      	movs	r1, #50	; 0x32
 800d2aa:	fb01 f303 	mul.w	r3, r1, r3
 800d2ae:	4413      	add	r3, r2
 800d2b0:	3306      	adds	r3, #6
 800d2b2:	2226      	movs	r2, #38	; 0x26
 800d2b4:	701a      	strb	r2, [r3, #0]
	++CmdCnt;
 800d2b6:	79fb      	ldrb	r3, [r7, #7]
 800d2b8:	3301      	adds	r3, #1
 800d2ba:	71fb      	strb	r3, [r7, #7]

	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"DEBUG_MODE");
 800d2bc:	79fb      	ldrb	r3, [r7, #7]
 800d2be:	1c5a      	adds	r2, r3, #1
 800d2c0:	71fa      	strb	r2, [r7, #7]
 800d2c2:	461a      	mov	r2, r3
 800d2c4:	2332      	movs	r3, #50	; 0x32
 800d2c6:	fb02 f303 	mul.w	r3, r2, r3
 800d2ca:	4a83      	ldr	r2, [pc, #524]	; (800d4d8 <Update_SiemensCommands+0x2a8>)
 800d2cc:	4413      	add	r3, r2
 800d2ce:	4983      	ldr	r1, [pc, #524]	; (800d4dc <Update_SiemensCommands+0x2ac>)
 800d2d0:	461a      	mov	r2, r3
 800d2d2:	460b      	mov	r3, r1
 800d2d4:	cb03      	ldmia	r3!, {r0, r1}
 800d2d6:	6010      	str	r0, [r2, #0]
 800d2d8:	6051      	str	r1, [r2, #4]
 800d2da:	8819      	ldrh	r1, [r3, #0]
 800d2dc:	789b      	ldrb	r3, [r3, #2]
 800d2de:	8111      	strh	r1, [r2, #8]
 800d2e0:	7293      	strb	r3, [r2, #10]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_DES_SYS_TYPE");
 800d2e2:	79fb      	ldrb	r3, [r7, #7]
 800d2e4:	1c5a      	adds	r2, r3, #1
 800d2e6:	71fa      	strb	r2, [r7, #7]
 800d2e8:	461a      	mov	r2, r3
 800d2ea:	2332      	movs	r3, #50	; 0x32
 800d2ec:	fb02 f303 	mul.w	r3, r2, r3
 800d2f0:	4a79      	ldr	r2, [pc, #484]	; (800d4d8 <Update_SiemensCommands+0x2a8>)
 800d2f2:	4413      	add	r3, r2
 800d2f4:	4a7a      	ldr	r2, [pc, #488]	; (800d4e0 <Update_SiemensCommands+0x2b0>)
 800d2f6:	461d      	mov	r5, r3
 800d2f8:	4614      	mov	r4, r2
 800d2fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d2fc:	6028      	str	r0, [r5, #0]
 800d2fe:	6069      	str	r1, [r5, #4]
 800d300:	60aa      	str	r2, [r5, #8]
 800d302:	60eb      	str	r3, [r5, #12]
 800d304:	6820      	ldr	r0, [r4, #0]
 800d306:	6128      	str	r0, [r5, #16]
 800d308:	7923      	ldrb	r3, [r4, #4]
 800d30a:	752b      	strb	r3, [r5, #20]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_SRC_SYS_TYPE");
 800d30c:	79fb      	ldrb	r3, [r7, #7]
 800d30e:	1c5a      	adds	r2, r3, #1
 800d310:	71fa      	strb	r2, [r7, #7]
 800d312:	461a      	mov	r2, r3
 800d314:	2332      	movs	r3, #50	; 0x32
 800d316:	fb02 f303 	mul.w	r3, r2, r3
 800d31a:	4a6f      	ldr	r2, [pc, #444]	; (800d4d8 <Update_SiemensCommands+0x2a8>)
 800d31c:	4413      	add	r3, r2
 800d31e:	4a71      	ldr	r2, [pc, #452]	; (800d4e4 <Update_SiemensCommands+0x2b4>)
 800d320:	461d      	mov	r5, r3
 800d322:	4614      	mov	r4, r2
 800d324:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d326:	6028      	str	r0, [r5, #0]
 800d328:	6069      	str	r1, [r5, #4]
 800d32a:	60aa      	str	r2, [r5, #8]
 800d32c:	60eb      	str	r3, [r5, #12]
 800d32e:	6820      	ldr	r0, [r4, #0]
 800d330:	6128      	str	r0, [r5, #16]
 800d332:	7923      	ldrb	r3, [r4, #4]
 800d334:	752b      	strb	r3, [r5, #20]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_SRC_ADDR");
 800d336:	79fb      	ldrb	r3, [r7, #7]
 800d338:	1c5a      	adds	r2, r3, #1
 800d33a:	71fa      	strb	r2, [r7, #7]
 800d33c:	461a      	mov	r2, r3
 800d33e:	2332      	movs	r3, #50	; 0x32
 800d340:	fb02 f303 	mul.w	r3, r2, r3
 800d344:	4a64      	ldr	r2, [pc, #400]	; (800d4d8 <Update_SiemensCommands+0x2a8>)
 800d346:	4413      	add	r3, r2
 800d348:	4a67      	ldr	r2, [pc, #412]	; (800d4e8 <Update_SiemensCommands+0x2b8>)
 800d34a:	461d      	mov	r5, r3
 800d34c:	4614      	mov	r4, r2
 800d34e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d350:	6028      	str	r0, [r5, #0]
 800d352:	6069      	str	r1, [r5, #4]
 800d354:	60aa      	str	r2, [r5, #8]
 800d356:	60eb      	str	r3, [r5, #12]
 800d358:	7823      	ldrb	r3, [r4, #0]
 800d35a:	742b      	strb	r3, [r5, #16]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_DES_PORT");
 800d35c:	79fb      	ldrb	r3, [r7, #7]
 800d35e:	1c5a      	adds	r2, r3, #1
 800d360:	71fa      	strb	r2, [r7, #7]
 800d362:	461a      	mov	r2, r3
 800d364:	2332      	movs	r3, #50	; 0x32
 800d366:	fb02 f303 	mul.w	r3, r2, r3
 800d36a:	4a5b      	ldr	r2, [pc, #364]	; (800d4d8 <Update_SiemensCommands+0x2a8>)
 800d36c:	4413      	add	r3, r2
 800d36e:	4a5f      	ldr	r2, [pc, #380]	; (800d4ec <Update_SiemensCommands+0x2bc>)
 800d370:	461d      	mov	r5, r3
 800d372:	4614      	mov	r4, r2
 800d374:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d376:	6028      	str	r0, [r5, #0]
 800d378:	6069      	str	r1, [r5, #4]
 800d37a:	60aa      	str	r2, [r5, #8]
 800d37c:	60eb      	str	r3, [r5, #12]
 800d37e:	7823      	ldrb	r3, [r4, #0]
 800d380:	742b      	strb	r3, [r5, #16]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_SRC_PORT");
 800d382:	79fb      	ldrb	r3, [r7, #7]
 800d384:	1c5a      	adds	r2, r3, #1
 800d386:	71fa      	strb	r2, [r7, #7]
 800d388:	461a      	mov	r2, r3
 800d38a:	2332      	movs	r3, #50	; 0x32
 800d38c:	fb02 f303 	mul.w	r3, r2, r3
 800d390:	4a51      	ldr	r2, [pc, #324]	; (800d4d8 <Update_SiemensCommands+0x2a8>)
 800d392:	4413      	add	r3, r2
 800d394:	4a56      	ldr	r2, [pc, #344]	; (800d4f0 <Update_SiemensCommands+0x2c0>)
 800d396:	461d      	mov	r5, r3
 800d398:	4614      	mov	r4, r2
 800d39a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d39c:	6028      	str	r0, [r5, #0]
 800d39e:	6069      	str	r1, [r5, #4]
 800d3a0:	60aa      	str	r2, [r5, #8]
 800d3a2:	60eb      	str	r3, [r5, #12]
 800d3a4:	7823      	ldrb	r3, [r4, #0]
 800d3a6:	742b      	strb	r3, [r5, #16]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INAVLID_PACKET_CRC_SIEMENS");
 800d3a8:	79fb      	ldrb	r3, [r7, #7]
 800d3aa:	1c5a      	adds	r2, r3, #1
 800d3ac:	71fa      	strb	r2, [r7, #7]
 800d3ae:	461a      	mov	r2, r3
 800d3b0:	2332      	movs	r3, #50	; 0x32
 800d3b2:	fb02 f303 	mul.w	r3, r2, r3
 800d3b6:	4a48      	ldr	r2, [pc, #288]	; (800d4d8 <Update_SiemensCommands+0x2a8>)
 800d3b8:	4413      	add	r3, r2
 800d3ba:	4a4e      	ldr	r2, [pc, #312]	; (800d4f4 <Update_SiemensCommands+0x2c4>)
 800d3bc:	461d      	mov	r5, r3
 800d3be:	4614      	mov	r4, r2
 800d3c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d3c2:	6028      	str	r0, [r5, #0]
 800d3c4:	6069      	str	r1, [r5, #4]
 800d3c6:	60aa      	str	r2, [r5, #8]
 800d3c8:	60eb      	str	r3, [r5, #12]
 800d3ca:	cc03      	ldmia	r4!, {r0, r1}
 800d3cc:	6128      	str	r0, [r5, #16]
 800d3ce:	6169      	str	r1, [r5, #20]
 800d3d0:	8823      	ldrh	r3, [r4, #0]
 800d3d2:	78a2      	ldrb	r2, [r4, #2]
 800d3d4:	832b      	strh	r3, [r5, #24]
 800d3d6:	4613      	mov	r3, r2
 800d3d8:	76ab      	strb	r3, [r5, #26]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"NO_REPLY_FROM_EIPC");
 800d3da:	79fb      	ldrb	r3, [r7, #7]
 800d3dc:	1c5a      	adds	r2, r3, #1
 800d3de:	71fa      	strb	r2, [r7, #7]
 800d3e0:	461a      	mov	r2, r3
 800d3e2:	2332      	movs	r3, #50	; 0x32
 800d3e4:	fb02 f303 	mul.w	r3, r2, r3
 800d3e8:	4a3b      	ldr	r2, [pc, #236]	; (800d4d8 <Update_SiemensCommands+0x2a8>)
 800d3ea:	4413      	add	r3, r2
 800d3ec:	4a42      	ldr	r2, [pc, #264]	; (800d4f8 <Update_SiemensCommands+0x2c8>)
 800d3ee:	461d      	mov	r5, r3
 800d3f0:	4614      	mov	r4, r2
 800d3f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d3f4:	6028      	str	r0, [r5, #0]
 800d3f6:	6069      	str	r1, [r5, #4]
 800d3f8:	60aa      	str	r2, [r5, #8]
 800d3fa:	60eb      	str	r3, [r5, #12]
 800d3fc:	8823      	ldrh	r3, [r4, #0]
 800d3fe:	78a2      	ldrb	r2, [r4, #2]
 800d400:	822b      	strh	r3, [r5, #16]
 800d402:	4613      	mov	r3, r2
 800d404:	74ab      	strb	r3, [r5, #18]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_PACKET_CRC_EIPC");
 800d406:	79fb      	ldrb	r3, [r7, #7]
 800d408:	1c5a      	adds	r2, r3, #1
 800d40a:	71fa      	strb	r2, [r7, #7]
 800d40c:	461a      	mov	r2, r3
 800d40e:	2332      	movs	r3, #50	; 0x32
 800d410:	fb02 f303 	mul.w	r3, r2, r3
 800d414:	4a30      	ldr	r2, [pc, #192]	; (800d4d8 <Update_SiemensCommands+0x2a8>)
 800d416:	4413      	add	r3, r2
 800d418:	4a38      	ldr	r2, [pc, #224]	; (800d4fc <Update_SiemensCommands+0x2cc>)
 800d41a:	461d      	mov	r5, r3
 800d41c:	4614      	mov	r4, r2
 800d41e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d420:	6028      	str	r0, [r5, #0]
 800d422:	6069      	str	r1, [r5, #4]
 800d424:	60aa      	str	r2, [r5, #8]
 800d426:	60eb      	str	r3, [r5, #12]
 800d428:	cc03      	ldmia	r4!, {r0, r1}
 800d42a:	6128      	str	r0, [r5, #16]
 800d42c:	6169      	str	r1, [r5, #20]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_COMP_PACKET_CRC_SIEMENS");
 800d42e:	79fb      	ldrb	r3, [r7, #7]
 800d430:	1c5a      	adds	r2, r3, #1
 800d432:	71fa      	strb	r2, [r7, #7]
 800d434:	461a      	mov	r2, r3
 800d436:	2332      	movs	r3, #50	; 0x32
 800d438:	fb02 f303 	mul.w	r3, r2, r3
 800d43c:	4a26      	ldr	r2, [pc, #152]	; (800d4d8 <Update_SiemensCommands+0x2a8>)
 800d43e:	4413      	add	r3, r2
 800d440:	4a2f      	ldr	r2, [pc, #188]	; (800d500 <Update_SiemensCommands+0x2d0>)
 800d442:	461c      	mov	r4, r3
 800d444:	4615      	mov	r5, r2
 800d446:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d448:	6020      	str	r0, [r4, #0]
 800d44a:	6061      	str	r1, [r4, #4]
 800d44c:	60a2      	str	r2, [r4, #8]
 800d44e:	60e3      	str	r3, [r4, #12]
 800d450:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d452:	6120      	str	r0, [r4, #16]
 800d454:	6161      	str	r1, [r4, #20]
 800d456:	61a2      	str	r2, [r4, #24]
 800d458:	61e3      	str	r3, [r4, #28]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_COMP_PACKET_CRC_EIPC");
 800d45a:	79fb      	ldrb	r3, [r7, #7]
 800d45c:	1c5a      	adds	r2, r3, #1
 800d45e:	71fa      	strb	r2, [r7, #7]
 800d460:	461a      	mov	r2, r3
 800d462:	2332      	movs	r3, #50	; 0x32
 800d464:	fb02 f303 	mul.w	r3, r2, r3
 800d468:	4a1b      	ldr	r2, [pc, #108]	; (800d4d8 <Update_SiemensCommands+0x2a8>)
 800d46a:	4413      	add	r3, r2
 800d46c:	4a25      	ldr	r2, [pc, #148]	; (800d504 <Update_SiemensCommands+0x2d4>)
 800d46e:	461d      	mov	r5, r3
 800d470:	4614      	mov	r4, r2
 800d472:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d474:	6028      	str	r0, [r5, #0]
 800d476:	6069      	str	r1, [r5, #4]
 800d478:	60aa      	str	r2, [r5, #8]
 800d47a:	60eb      	str	r3, [r5, #12]
 800d47c:	cc07      	ldmia	r4!, {r0, r1, r2}
 800d47e:	6128      	str	r0, [r5, #16]
 800d480:	6169      	str	r1, [r5, #20]
 800d482:	61aa      	str	r2, [r5, #24]
 800d484:	7823      	ldrb	r3, [r4, #0]
 800d486:	772b      	strb	r3, [r5, #28]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"CLEAR_ALL");
 800d488:	79fb      	ldrb	r3, [r7, #7]
 800d48a:	1c5a      	adds	r2, r3, #1
 800d48c:	71fa      	strb	r2, [r7, #7]
 800d48e:	461a      	mov	r2, r3
 800d490:	2332      	movs	r3, #50	; 0x32
 800d492:	fb02 f303 	mul.w	r3, r2, r3
 800d496:	4a10      	ldr	r2, [pc, #64]	; (800d4d8 <Update_SiemensCommands+0x2a8>)
 800d498:	4413      	add	r3, r2
 800d49a:	491b      	ldr	r1, [pc, #108]	; (800d508 <Update_SiemensCommands+0x2d8>)
 800d49c:	461a      	mov	r2, r3
 800d49e:	460b      	mov	r3, r1
 800d4a0:	cb03      	ldmia	r3!, {r0, r1}
 800d4a2:	6010      	str	r0, [r2, #0]
 800d4a4:	6051      	str	r1, [r2, #4]
 800d4a6:	881b      	ldrh	r3, [r3, #0]
 800d4a8:	8113      	strh	r3, [r2, #8]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"HELP");
 800d4aa:	79fb      	ldrb	r3, [r7, #7]
 800d4ac:	1c5a      	adds	r2, r3, #1
 800d4ae:	71fa      	strb	r2, [r7, #7]
 800d4b0:	461a      	mov	r2, r3
 800d4b2:	2332      	movs	r3, #50	; 0x32
 800d4b4:	fb02 f303 	mul.w	r3, r2, r3
 800d4b8:	4a07      	ldr	r2, [pc, #28]	; (800d4d8 <Update_SiemensCommands+0x2a8>)
 800d4ba:	4413      	add	r3, r2
 800d4bc:	4a13      	ldr	r2, [pc, #76]	; (800d50c <Update_SiemensCommands+0x2dc>)
 800d4be:	6810      	ldr	r0, [r2, #0]
 800d4c0:	6018      	str	r0, [r3, #0]
 800d4c2:	7912      	ldrb	r2, [r2, #4]
 800d4c4:	711a      	strb	r2, [r3, #4]
	Commands_Count =  CmdCnt;
 800d4c6:	4a12      	ldr	r2, [pc, #72]	; (800d510 <Update_SiemensCommands+0x2e0>)
 800d4c8:	79fb      	ldrb	r3, [r7, #7]
 800d4ca:	7013      	strb	r3, [r2, #0]
}
 800d4cc:	bf00      	nop
 800d4ce:	370c      	adds	r7, #12
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	bcb0      	pop	{r4, r5, r7}
 800d4d4:	4770      	bx	lr
 800d4d6:	bf00      	nop
 800d4d8:	200047bc 	.word	0x200047bc
 800d4dc:	080262a0 	.word	0x080262a0
 800d4e0:	08026188 	.word	0x08026188
 800d4e4:	080261a0 	.word	0x080261a0
 800d4e8:	080261b8 	.word	0x080261b8
 800d4ec:	080261cc 	.word	0x080261cc
 800d4f0:	080261e0 	.word	0x080261e0
 800d4f4:	080262ac 	.word	0x080262ac
 800d4f8:	08026228 	.word	0x08026228
 800d4fc:	0802623c 	.word	0x0802623c
 800d500:	08026254 	.word	0x08026254
 800d504:	08026274 	.word	0x08026274
 800d508:	080262c8 	.word	0x080262c8
 800d50c:	080262d4 	.word	0x080262d4
 800d510:	20004ba4 	.word	0x20004ba4

0800d514 <Is_SiemensCommand_Valid>:

uint8_t Is_SiemensCommand_Valid(uint8_t *Buffer,uint8_t Length)
{
 800d514:	b590      	push	{r4, r7, lr}
 800d516:	b085      	sub	sp, #20
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
 800d51c:	460b      	mov	r3, r1
 800d51e:	70fb      	strb	r3, [r7, #3]
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 800d520:	2300      	movs	r3, #0
 800d522:	73fb      	strb	r3, [r7, #15]
 800d524:	e01c      	b.n	800d560 <Is_SiemensCommand_Valid+0x4c>
	{
		//		if(strstr((char *)Buffer,(char *)Commands_List[Traverser]) != NULL)
		if(memcmp(Buffer,Commands_List[Traverser],strlen((char *)Commands_List[Traverser])) == 0)
 800d526:	7bfb      	ldrb	r3, [r7, #15]
 800d528:	2232      	movs	r2, #50	; 0x32
 800d52a:	fb02 f303 	mul.w	r3, r2, r3
 800d52e:	4a11      	ldr	r2, [pc, #68]	; (800d574 <Is_SiemensCommand_Valid+0x60>)
 800d530:	189c      	adds	r4, r3, r2
 800d532:	7bfb      	ldrb	r3, [r7, #15]
 800d534:	2232      	movs	r2, #50	; 0x32
 800d536:	fb02 f303 	mul.w	r3, r2, r3
 800d53a:	4a0e      	ldr	r2, [pc, #56]	; (800d574 <Is_SiemensCommand_Valid+0x60>)
 800d53c:	4413      	add	r3, r2
 800d53e:	4618      	mov	r0, r3
 800d540:	f7f2 fe88 	bl	8000254 <strlen>
 800d544:	4603      	mov	r3, r0
 800d546:	461a      	mov	r2, r3
 800d548:	4621      	mov	r1, r4
 800d54a:	6878      	ldr	r0, [r7, #4]
 800d54c:	f014 ff0a 	bl	8022364 <memcmp>
 800d550:	4603      	mov	r3, r0
 800d552:	2b00      	cmp	r3, #0
 800d554:	d101      	bne.n	800d55a <Is_SiemensCommand_Valid+0x46>
		{
			return Traverser;
 800d556:	7bfb      	ldrb	r3, [r7, #15]
 800d558:	e008      	b.n	800d56c <Is_SiemensCommand_Valid+0x58>
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 800d55a:	7bfb      	ldrb	r3, [r7, #15]
 800d55c:	3301      	adds	r3, #1
 800d55e:	73fb      	strb	r3, [r7, #15]
 800d560:	4b05      	ldr	r3, [pc, #20]	; (800d578 <Is_SiemensCommand_Valid+0x64>)
 800d562:	781b      	ldrb	r3, [r3, #0]
 800d564:	7bfa      	ldrb	r2, [r7, #15]
 800d566:	429a      	cmp	r2, r3
 800d568:	d3dd      	bcc.n	800d526 <Is_SiemensCommand_Valid+0x12>
		}
	}
	return 255;
 800d56a:	23ff      	movs	r3, #255	; 0xff
}
 800d56c:	4618      	mov	r0, r3
 800d56e:	3714      	adds	r7, #20
 800d570:	46bd      	mov	sp, r7
 800d572:	bd90      	pop	{r4, r7, pc}
 800d574:	200047bc 	.word	0x200047bc
 800d578:	20004ba4 	.word	0x20004ba4

0800d57c <Siemens_CRC>:
/*
 * SIEMENS CRC & Data Extract FUNTIONS
 */

uint16_t Siemens_CRC(uint8_t *data, uint16_t len)
{
 800d57c:	b480      	push	{r7}
 800d57e:	b087      	sub	sp, #28
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
 800d584:	460b      	mov	r3, r1
 800d586:	807b      	strh	r3, [r7, #2]
	uint16_t crc = 0xFFFF;
 800d588:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d58c:	82fb      	strh	r3, [r7, #22]
	uint16_t i=0;
 800d58e:	2300      	movs	r3, #0
 800d590:	82bb      	strh	r3, [r7, #20]
	int j =0;
 800d592:	2300      	movs	r3, #0
 800d594:	613b      	str	r3, [r7, #16]
		printf("0x%02x|",data[i]);
	}
	printf("\n");
#endif

	for ( i = 0; i < len; i++)
 800d596:	2300      	movs	r3, #0
 800d598:	82bb      	strh	r3, [r7, #20]
 800d59a:	e022      	b.n	800d5e2 <Siemens_CRC+0x66>
	{
		crc ^= data[i];
 800d59c:	8abb      	ldrh	r3, [r7, #20]
 800d59e:	687a      	ldr	r2, [r7, #4]
 800d5a0:	4413      	add	r3, r2
 800d5a2:	781b      	ldrb	r3, [r3, #0]
 800d5a4:	b29a      	uxth	r2, r3
 800d5a6:	8afb      	ldrh	r3, [r7, #22]
 800d5a8:	4053      	eors	r3, r2
 800d5aa:	82fb      	strh	r3, [r7, #22]
		for ( j = 0; j < 8; j++)
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	613b      	str	r3, [r7, #16]
 800d5b0:	e011      	b.n	800d5d6 <Siemens_CRC+0x5a>
		{
			if (crc & 0x0001)
 800d5b2:	8afb      	ldrh	r3, [r7, #22]
 800d5b4:	f003 0301 	and.w	r3, r3, #1
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d006      	beq.n	800d5ca <Siemens_CRC+0x4e>
			{
				crc = (crc >> 1) ^ 0x8408;
 800d5bc:	8afb      	ldrh	r3, [r7, #22]
 800d5be:	085b      	lsrs	r3, r3, #1
 800d5c0:	b29a      	uxth	r2, r3
 800d5c2:	4b17      	ldr	r3, [pc, #92]	; (800d620 <Siemens_CRC+0xa4>)
 800d5c4:	4053      	eors	r3, r2
 800d5c6:	82fb      	strh	r3, [r7, #22]
 800d5c8:	e002      	b.n	800d5d0 <Siemens_CRC+0x54>
			}
			else
			{
				crc >>= 1;
 800d5ca:	8afb      	ldrh	r3, [r7, #22]
 800d5cc:	085b      	lsrs	r3, r3, #1
 800d5ce:	82fb      	strh	r3, [r7, #22]
		for ( j = 0; j < 8; j++)
 800d5d0:	693b      	ldr	r3, [r7, #16]
 800d5d2:	3301      	adds	r3, #1
 800d5d4:	613b      	str	r3, [r7, #16]
 800d5d6:	693b      	ldr	r3, [r7, #16]
 800d5d8:	2b07      	cmp	r3, #7
 800d5da:	ddea      	ble.n	800d5b2 <Siemens_CRC+0x36>
	for ( i = 0; i < len; i++)
 800d5dc:	8abb      	ldrh	r3, [r7, #20]
 800d5de:	3301      	adds	r3, #1
 800d5e0:	82bb      	strh	r3, [r7, #20]
 800d5e2:	8aba      	ldrh	r2, [r7, #20]
 800d5e4:	887b      	ldrh	r3, [r7, #2]
 800d5e6:	429a      	cmp	r2, r3
 800d5e8:	d3d8      	bcc.n	800d59c <Siemens_CRC+0x20>
			}
		}
	}

	crc_le[0] = crc & 0xFF;
 800d5ea:	8afb      	ldrh	r3, [r7, #22]
 800d5ec:	b2db      	uxtb	r3, r3
 800d5ee:	733b      	strb	r3, [r7, #12]
	crc_le[1] = (crc >> 8) & 0xFF;
 800d5f0:	8afb      	ldrh	r3, [r7, #22]
 800d5f2:	0a1b      	lsrs	r3, r3, #8
 800d5f4:	b29b      	uxth	r3, r3
 800d5f6:	b2db      	uxtb	r3, r3
 800d5f8:	737b      	strb	r3, [r7, #13]
	//printf("Before Reverse 1:0x%02x|0x%02x\n",crc_le[0],crc_le[1]);



	crc = crc_le[0] << 8 | crc_le[1]; // reverse CRC bytes
 800d5fa:	7b3b      	ldrb	r3, [r7, #12]
 800d5fc:	021b      	lsls	r3, r3, #8
 800d5fe:	b21a      	sxth	r2, r3
 800d600:	7b7b      	ldrb	r3, [r7, #13]
 800d602:	b21b      	sxth	r3, r3
 800d604:	4313      	orrs	r3, r2
 800d606:	b21b      	sxth	r3, r3
 800d608:	82fb      	strh	r3, [r7, #22]
	crc ^= 0xFFFF; // perform final XOR with 0xFFFF
 800d60a:	8afb      	ldrh	r3, [r7, #22]
 800d60c:	43db      	mvns	r3, r3
 800d60e:	82fb      	strh	r3, [r7, #22]
	//printf("Before Reverse 2:0x%02x\n",crc);


	// crc = crc_le[1] << 8 | crc_le[0]; // reverse CRC bytes
	// crc ^= 0xFFFF; // perform final XOR with 0xFFFF
	return crc;
 800d610:	8afb      	ldrh	r3, [r7, #22]
}
 800d612:	4618      	mov	r0, r3
 800d614:	371c      	adds	r7, #28
 800d616:	46bd      	mov	sp, r7
 800d618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61c:	4770      	bx	lr
 800d61e:	bf00      	nop
 800d620:	ffff8408 	.word	0xffff8408

0800d624 <Extract_Parity_Data>:


int32_t Extract_Parity_Data(uint8_t Start,uint8_t No_of_Bits,uint8_t *DataIn,uint8_t Parity_Type)
{
 800d624:	b580      	push	{r7, lr}
 800d626:	b086      	sub	sp, #24
 800d628:	af00      	add	r7, sp, #0
 800d62a:	603a      	str	r2, [r7, #0]
 800d62c:	461a      	mov	r2, r3
 800d62e:	4603      	mov	r3, r0
 800d630:	71fb      	strb	r3, [r7, #7]
 800d632:	460b      	mov	r3, r1
 800d634:	71bb      	strb	r3, [r7, #6]
 800d636:	4613      	mov	r3, r2
 800d638:	717b      	strb	r3, [r7, #5]
	uint8_t Temp_val = 0,t1,t2,t3;
 800d63a:	2300      	movs	r3, #0
 800d63c:	75fb      	strb	r3, [r7, #23]
	uint32_t Return_value = 0;
 800d63e:	2300      	movs	r3, #0
 800d640:	613b      	str	r3, [r7, #16]

	if(Parity_Type != NO_PARITY)
 800d642:	797b      	ldrb	r3, [r7, #5]
 800d644:	2b02      	cmp	r3, #2
 800d646:	d010      	beq.n	800d66a <Extract_Parity_Data+0x46>
	{
		if(Verify_parity(DataIn,(No_of_Bits/8),Parity_Type)==0)
 800d648:	79bb      	ldrb	r3, [r7, #6]
 800d64a:	08db      	lsrs	r3, r3, #3
 800d64c:	b2db      	uxtb	r3, r3
 800d64e:	797a      	ldrb	r2, [r7, #5]
 800d650:	4619      	mov	r1, r3
 800d652:	6838      	ldr	r0, [r7, #0]
 800d654:	f000 f8d0 	bl	800d7f8 <Verify_parity>
 800d658:	4603      	mov	r3, r0
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d110      	bne.n	800d680 <Extract_Parity_Data+0x5c>
		{
			printf("Parity Verfication Failed\n");
 800d65e:	4840      	ldr	r0, [pc, #256]	; (800d760 <Extract_Parity_Data+0x13c>)
 800d660:	f015 f83c 	bl	80226dc <puts>
			return -1;
 800d664:	f04f 33ff 	mov.w	r3, #4294967295
 800d668:	e075      	b.n	800d756 <Extract_Parity_Data+0x132>
			//printf("Parity Verfication Success\n");
		}
	}
	else
	{
		Return_value = ExtractBits(Start,No_of_Bits,DataIn);
 800d66a:	79fb      	ldrb	r3, [r7, #7]
 800d66c:	b29b      	uxth	r3, r3
 800d66e:	79ba      	ldrb	r2, [r7, #6]
 800d670:	b291      	uxth	r1, r2
 800d672:	683a      	ldr	r2, [r7, #0]
 800d674:	4618      	mov	r0, r3
 800d676:	f7f2 ffcd 	bl	8000614 <ExtractBits>
 800d67a:	6138      	str	r0, [r7, #16]
		return Return_value;
 800d67c:	693b      	ldr	r3, [r7, #16]
 800d67e:	e06a      	b.n	800d756 <Extract_Parity_Data+0x132>
	}



	if(No_of_Bits==8)
 800d680:	79bb      	ldrb	r3, [r7, #6]
 800d682:	2b08      	cmp	r3, #8
 800d684:	d108      	bne.n	800d698 <Extract_Parity_Data+0x74>
	{
		//printf("Data:0x%02x\n",DataIn[0]);
		Temp_val = DataIn[0];
 800d686:	683b      	ldr	r3, [r7, #0]
 800d688:	781b      	ldrb	r3, [r3, #0]
 800d68a:	75fb      	strb	r3, [r7, #23]
		Temp_val &= ~(1<<7);
 800d68c:	7dfb      	ldrb	r3, [r7, #23]
 800d68e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d692:	75fb      	strb	r3, [r7, #23]
		return (Temp_val);
 800d694:	7dfb      	ldrb	r3, [r7, #23]
 800d696:	e05e      	b.n	800d756 <Extract_Parity_Data+0x132>
	}
	else if(No_of_Bits==24)
 800d698:	79bb      	ldrb	r3, [r7, #6]
 800d69a:	2b18      	cmp	r3, #24
 800d69c:	d15a      	bne.n	800d754 <Extract_Parity_Data+0x130>
	{
		//printf("24 bit extraction\n");
		Temp_val = DataIn[0];
 800d69e:	683b      	ldr	r3, [r7, #0]
 800d6a0:	781b      	ldrb	r3, [r3, #0]
 800d6a2:	75fb      	strb	r3, [r7, #23]
		//printf("Data:0x%02x\n",DataIn[0]);
		t1 = ((Temp_val>>0)&1); //copy of 0th bit
 800d6a4:	7dfb      	ldrb	r3, [r7, #23]
 800d6a6:	f003 0301 	and.w	r3, r3, #1
 800d6aa:	73fb      	strb	r3, [r7, #15]
		t2 = ((Temp_val>>1)&1); //copy of 1st bit
 800d6ac:	7dfb      	ldrb	r3, [r7, #23]
 800d6ae:	085b      	lsrs	r3, r3, #1
 800d6b0:	b2db      	uxtb	r3, r3
 800d6b2:	f003 0301 	and.w	r3, r3, #1
 800d6b6:	73bb      	strb	r3, [r7, #14]
		Temp_val &= ~(1<<7); //clearing 7th bit
 800d6b8:	7dfb      	ldrb	r3, [r7, #23]
 800d6ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d6be:	75fb      	strb	r3, [r7, #23]
		Temp_val>>=2; //Shift two times.
 800d6c0:	7dfb      	ldrb	r3, [r7, #23]
 800d6c2:	089b      	lsrs	r3, r3, #2
 800d6c4:	75fb      	strb	r3, [r7, #23]
		//printf("Temp:0x%02x\n",Temp_val);
		Return_value = Temp_val;
 800d6c6:	7dfb      	ldrb	r3, [r7, #23]
 800d6c8:	613b      	str	r3, [r7, #16]

		Temp_val = DataIn[1];
 800d6ca:	683b      	ldr	r3, [r7, #0]
 800d6cc:	785b      	ldrb	r3, [r3, #1]
 800d6ce:	75fb      	strb	r3, [r7, #23]
		//printf("Data:0x%02x\n",DataIn[1]);
		t3 = ((Temp_val>>0)&1);//copy of 0th bit.
 800d6d0:	7dfb      	ldrb	r3, [r7, #23]
 800d6d2:	f003 0301 	and.w	r3, r3, #1
 800d6d6:	737b      	strb	r3, [r7, #13]
		Temp_val &= ~(1<<7); //clearing 7th bit.
 800d6d8:	7dfb      	ldrb	r3, [r7, #23]
 800d6da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d6de:	75fb      	strb	r3, [r7, #23]
		Temp_val>>=1; //Shift one time.
 800d6e0:	7dfb      	ldrb	r3, [r7, #23]
 800d6e2:	085b      	lsrs	r3, r3, #1
 800d6e4:	75fb      	strb	r3, [r7, #23]

		(t2==0)?(Temp_val &= ~(1 << 7)):(Temp_val|= 1 << 7);//copying Previous bit
 800d6e6:	7bbb      	ldrb	r3, [r7, #14]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d104      	bne.n	800d6f6 <Extract_Parity_Data+0xd2>
 800d6ec:	7dfb      	ldrb	r3, [r7, #23]
 800d6ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d6f2:	75fb      	strb	r3, [r7, #23]
 800d6f4:	e003      	b.n	800d6fe <Extract_Parity_Data+0xda>
 800d6f6:	7dfb      	ldrb	r3, [r7, #23]
 800d6f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d6fc:	75fb      	strb	r3, [r7, #23]
		(t1==0)?(Temp_val &= ~(1 << 6)):(Temp_val|= 1 << 6);//copying Previous bit
 800d6fe:	7bfb      	ldrb	r3, [r7, #15]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d104      	bne.n	800d70e <Extract_Parity_Data+0xea>
 800d704:	7dfb      	ldrb	r3, [r7, #23]
 800d706:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d70a:	75fb      	strb	r3, [r7, #23]
 800d70c:	e003      	b.n	800d716 <Extract_Parity_Data+0xf2>
 800d70e:	7dfb      	ldrb	r3, [r7, #23]
 800d710:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d714:	75fb      	strb	r3, [r7, #23]
		//printf("Temp2:0x%02x\n",Temp_val);
		Return_value<<=8;
 800d716:	693b      	ldr	r3, [r7, #16]
 800d718:	021b      	lsls	r3, r3, #8
 800d71a:	613b      	str	r3, [r7, #16]
		Return_value+=Temp_val;
 800d71c:	7dfb      	ldrb	r3, [r7, #23]
 800d71e:	693a      	ldr	r2, [r7, #16]
 800d720:	4413      	add	r3, r2
 800d722:	613b      	str	r3, [r7, #16]


		Temp_val = DataIn[2];
 800d724:	683b      	ldr	r3, [r7, #0]
 800d726:	789b      	ldrb	r3, [r3, #2]
 800d728:	75fb      	strb	r3, [r7, #23]
		//printf("Data:0x%02x\n",DataIn[2]);
		(t3==0)?(Temp_val &= ~(1 << 7)):(Temp_val|= 1 << 7);//copying Previous bit
 800d72a:	7b7b      	ldrb	r3, [r7, #13]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d104      	bne.n	800d73a <Extract_Parity_Data+0x116>
 800d730:	7dfb      	ldrb	r3, [r7, #23]
 800d732:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d736:	75fb      	strb	r3, [r7, #23]
 800d738:	e003      	b.n	800d742 <Extract_Parity_Data+0x11e>
 800d73a:	7dfb      	ldrb	r3, [r7, #23]
 800d73c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d740:	75fb      	strb	r3, [r7, #23]
		//printf("Temp3:0x%02x\n",Temp_val);
		Return_value<<=8;
 800d742:	693b      	ldr	r3, [r7, #16]
 800d744:	021b      	lsls	r3, r3, #8
 800d746:	613b      	str	r3, [r7, #16]
		Return_value+=Temp_val;
 800d748:	7dfb      	ldrb	r3, [r7, #23]
 800d74a:	693a      	ldr	r2, [r7, #16]
 800d74c:	4413      	add	r3, r2
 800d74e:	613b      	str	r3, [r7, #16]
		//printf("Data:0x%02x\n",DataIn[2]);
		//printf("Data:0x%02x\n",DataIn[1]);
		//printf("Data:0x%02x\n",DataIn[0]);
		return Return_value;
 800d750:	693b      	ldr	r3, [r7, #16]
 800d752:	e000      	b.n	800d756 <Extract_Parity_Data+0x132>
	}
	return 0;
 800d754:	2300      	movs	r3, #0
}
 800d756:	4618      	mov	r0, r3
 800d758:	3718      	adds	r7, #24
 800d75a:	46bd      	mov	sp, r7
 800d75c:	bd80      	pop	{r7, pc}
 800d75e:	bf00      	nop
 800d760:	080262dc 	.word	0x080262dc

0800d764 <Calculate_Parity>:

uint8_t Calculate_Parity(uint8_t Buff, uint8_t Parity_Type)
{
 800d764:	b480      	push	{r7}
 800d766:	b085      	sub	sp, #20
 800d768:	af00      	add	r7, sp, #0
 800d76a:	4603      	mov	r3, r0
 800d76c:	460a      	mov	r2, r1
 800d76e:	71fb      	strb	r3, [r7, #7]
 800d770:	4613      	mov	r3, r2
 800d772:	71bb      	strb	r3, [r7, #6]
	int8_t bit = 0;
 800d774:	2300      	movs	r3, #0
 800d776:	73fb      	strb	r3, [r7, #15]
	int8_t count = 0;
 800d778:	2300      	movs	r3, #0
 800d77a:	73bb      	strb	r3, [r7, #14]

	// printf("For Value:0x%02x\n", Buff);
	for (bit = 6; bit >= 0; bit--)
 800d77c:	2306      	movs	r3, #6
 800d77e:	73fb      	strb	r3, [r7, #15]
 800d780:	e014      	b.n	800d7ac <Calculate_Parity+0x48>
	{
		//printf("[%02u]:%u| ", bit, ((Buff >> bit) & 1));
		if ((Buff >> bit) & 1)
 800d782:	79fa      	ldrb	r2, [r7, #7]
 800d784:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d788:	fa42 f303 	asr.w	r3, r2, r3
 800d78c:	f003 0301 	and.w	r3, r3, #1
 800d790:	2b00      	cmp	r3, #0
 800d792:	d005      	beq.n	800d7a0 <Calculate_Parity+0x3c>
		{
			count++;
 800d794:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d798:	b2db      	uxtb	r3, r3
 800d79a:	3301      	adds	r3, #1
 800d79c:	b2db      	uxtb	r3, r3
 800d79e:	73bb      	strb	r3, [r7, #14]
	for (bit = 6; bit >= 0; bit--)
 800d7a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d7a4:	b2db      	uxtb	r3, r3
 800d7a6:	3b01      	subs	r3, #1
 800d7a8:	b2db      	uxtb	r3, r3
 800d7aa:	73fb      	strb	r3, [r7, #15]
 800d7ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	dae6      	bge.n	800d782 <Calculate_Parity+0x1e>
		}
	}
	//printf("\n");
	if (Parity_Type == 0)
 800d7b4:	79bb      	ldrb	r3, [r7, #6]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d109      	bne.n	800d7ce <Calculate_Parity+0x6a>
	{
		if ((count % 2) == 0)
 800d7ba:	7bbb      	ldrb	r3, [r7, #14]
 800d7bc:	f003 0301 	and.w	r3, r3, #1
 800d7c0:	b2db      	uxtb	r3, r3
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d101      	bne.n	800d7ca <Calculate_Parity+0x66>
		{
			return 0;
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	e00f      	b.n	800d7ea <Calculate_Parity+0x86>
		}
		else
		{
			return 1;
 800d7ca:	2301      	movs	r3, #1
 800d7cc:	e00d      	b.n	800d7ea <Calculate_Parity+0x86>
		}
	}
	if (Parity_Type == 1)
 800d7ce:	79bb      	ldrb	r3, [r7, #6]
 800d7d0:	2b01      	cmp	r3, #1
 800d7d2:	d109      	bne.n	800d7e8 <Calculate_Parity+0x84>
	{
		if ((count % 2) == 0)
 800d7d4:	7bbb      	ldrb	r3, [r7, #14]
 800d7d6:	f003 0301 	and.w	r3, r3, #1
 800d7da:	b2db      	uxtb	r3, r3
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d101      	bne.n	800d7e4 <Calculate_Parity+0x80>
		{
			return 1;
 800d7e0:	2301      	movs	r3, #1
 800d7e2:	e002      	b.n	800d7ea <Calculate_Parity+0x86>
		}
		else
		{
			return 0;
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	e000      	b.n	800d7ea <Calculate_Parity+0x86>
		}
	}
	return 0;
 800d7e8:	2300      	movs	r3, #0
}
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	3714      	adds	r7, #20
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f4:	4770      	bx	lr
	...

0800d7f8 <Verify_parity>:

uint8_t Verify_parity(uint8_t *Data,uint8_t Length,uint8_t Parity_Type)
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b084      	sub	sp, #16
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
 800d800:	460b      	mov	r3, r1
 800d802:	70fb      	strb	r3, [r7, #3]
 800d804:	4613      	mov	r3, r2
 800d806:	70bb      	strb	r3, [r7, #2]
	uint8_t Byte_Traverser = 0;
 800d808:	2300      	movs	r3, #0
 800d80a:	73fb      	strb	r3, [r7, #15]

	for(Byte_Traverser= 0; Byte_Traverser < Length; ++Byte_Traverser)
 800d80c:	2300      	movs	r3, #0
 800d80e:	73fb      	strb	r3, [r7, #15]
 800d810:	e03b      	b.n	800d88a <Verify_parity+0x92>
	{
		if( (Calculate_Parity(Data[Byte_Traverser],Parity_Type)) != ((Data[Byte_Traverser]>>7)&1))
 800d812:	7bfb      	ldrb	r3, [r7, #15]
 800d814:	687a      	ldr	r2, [r7, #4]
 800d816:	4413      	add	r3, r2
 800d818:	781b      	ldrb	r3, [r3, #0]
 800d81a:	78ba      	ldrb	r2, [r7, #2]
 800d81c:	4611      	mov	r1, r2
 800d81e:	4618      	mov	r0, r3
 800d820:	f7ff ffa0 	bl	800d764 <Calculate_Parity>
 800d824:	4603      	mov	r3, r0
 800d826:	4619      	mov	r1, r3
 800d828:	7bfb      	ldrb	r3, [r7, #15]
 800d82a:	687a      	ldr	r2, [r7, #4]
 800d82c:	4413      	add	r3, r2
 800d82e:	781b      	ldrb	r3, [r3, #0]
 800d830:	09db      	lsrs	r3, r3, #7
 800d832:	b2db      	uxtb	r3, r3
 800d834:	f003 0301 	and.w	r3, r3, #1
 800d838:	4299      	cmp	r1, r3
 800d83a:	d023      	beq.n	800d884 <Verify_parity+0x8c>
		{
			printf("Failed for data:0x%02x\n",Data[Byte_Traverser]);
 800d83c:	7bfb      	ldrb	r3, [r7, #15]
 800d83e:	687a      	ldr	r2, [r7, #4]
 800d840:	4413      	add	r3, r2
 800d842:	781b      	ldrb	r3, [r3, #0]
 800d844:	4619      	mov	r1, r3
 800d846:	4815      	ldr	r0, [pc, #84]	; (800d89c <Verify_parity+0xa4>)
 800d848:	f014 feac 	bl	80225a4 <iprintf>
			printf("Expected Parity:%u\n",Calculate_Parity(Data[Byte_Traverser],Parity_Type));
 800d84c:	7bfb      	ldrb	r3, [r7, #15]
 800d84e:	687a      	ldr	r2, [r7, #4]
 800d850:	4413      	add	r3, r2
 800d852:	781b      	ldrb	r3, [r3, #0]
 800d854:	78ba      	ldrb	r2, [r7, #2]
 800d856:	4611      	mov	r1, r2
 800d858:	4618      	mov	r0, r3
 800d85a:	f7ff ff83 	bl	800d764 <Calculate_Parity>
 800d85e:	4603      	mov	r3, r0
 800d860:	4619      	mov	r1, r3
 800d862:	480f      	ldr	r0, [pc, #60]	; (800d8a0 <Verify_parity+0xa8>)
 800d864:	f014 fe9e 	bl	80225a4 <iprintf>
			printf("Available Parity:%u\n",((Data[Byte_Traverser]>>7)&1));
 800d868:	7bfb      	ldrb	r3, [r7, #15]
 800d86a:	687a      	ldr	r2, [r7, #4]
 800d86c:	4413      	add	r3, r2
 800d86e:	781b      	ldrb	r3, [r3, #0]
 800d870:	09db      	lsrs	r3, r3, #7
 800d872:	b2db      	uxtb	r3, r3
 800d874:	f003 0301 	and.w	r3, r3, #1
 800d878:	4619      	mov	r1, r3
 800d87a:	480a      	ldr	r0, [pc, #40]	; (800d8a4 <Verify_parity+0xac>)
 800d87c:	f014 fe92 	bl	80225a4 <iprintf>
			return 0;
 800d880:	2300      	movs	r3, #0
 800d882:	e007      	b.n	800d894 <Verify_parity+0x9c>
	for(Byte_Traverser= 0; Byte_Traverser < Length; ++Byte_Traverser)
 800d884:	7bfb      	ldrb	r3, [r7, #15]
 800d886:	3301      	adds	r3, #1
 800d888:	73fb      	strb	r3, [r7, #15]
 800d88a:	7bfa      	ldrb	r2, [r7, #15]
 800d88c:	78fb      	ldrb	r3, [r7, #3]
 800d88e:	429a      	cmp	r2, r3
 800d890:	d3bf      	bcc.n	800d812 <Verify_parity+0x1a>
		}
	}
	return 1;
 800d892:	2301      	movs	r3, #1
}
 800d894:	4618      	mov	r0, r3
 800d896:	3710      	adds	r7, #16
 800d898:	46bd      	mov	sp, r7
 800d89a:	bd80      	pop	{r7, pc}
 800d89c:	080262f8 	.word	0x080262f8
 800d8a0:	08026310 	.word	0x08026310
 800d8a4:	08026324 	.word	0x08026324

0800d8a8 <Insert_cal_parity>:


void Insert_cal_parity(uint8_t start, uint8_t No_of_Bits, uint8_t *Dest_Buff, uint64_t DataIn, uint8_t Parity_Type)
{
 800d8a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8ac:	b089      	sub	sp, #36	; 0x24
 800d8ae:	af00      	add	r7, sp, #0
 800d8b0:	4603      	mov	r3, r0
 800d8b2:	60ba      	str	r2, [r7, #8]
 800d8b4:	73fb      	strb	r3, [r7, #15]
 800d8b6:	460b      	mov	r3, r1
 800d8b8:	73bb      	strb	r3, [r7, #14]
	uint16_t t1 = 0, t2 = 0, t3 = 0, t4 = 0;
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	83fb      	strh	r3, [r7, #30]
 800d8be:	2300      	movs	r3, #0
 800d8c0:	83bb      	strh	r3, [r7, #28]
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	833b      	strh	r3, [r7, #24]
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp_Data = 0;
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	76fb      	strb	r3, [r7, #27]

	if(Parity_Type == NO_PARITY)
 800d8ce:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800d8d2:	2b02      	cmp	r3, #2
 800d8d4:	d108      	bne.n	800d8e8 <Insert_cal_parity+0x40>
	{
		InsertBits(start,No_of_Bits,Dest_Buff,DataIn);
 800d8d6:	7bfb      	ldrb	r3, [r7, #15]
 800d8d8:	b298      	uxth	r0, r3
 800d8da:	7bbb      	ldrb	r3, [r7, #14]
 800d8dc:	b299      	uxth	r1, r3
 800d8de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d8e0:	68ba      	ldr	r2, [r7, #8]
 800d8e2:	f7f2 ff23 	bl	800072c <InsertBits>
		return;
 800d8e6:	e13b      	b.n	800db60 <Insert_cal_parity+0x2b8>
	}

	if (No_of_Bits == 8)
 800d8e8:	7bbb      	ldrb	r3, [r7, #14]
 800d8ea:	2b08      	cmp	r3, #8
 800d8ec:	d12c      	bne.n	800d948 <Insert_cal_parity+0xa0>
	{
		// printf("One Byte Calculation\n");
		if (DataIn > 0x7f)
 800d8ee:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d8f2:	2a80      	cmp	r2, #128	; 0x80
 800d8f4:	f173 0300 	sbcs.w	r3, r3, #0
 800d8f8:	d303      	bcc.n	800d902 <Insert_cal_parity+0x5a>
		{
			printf("Can't Insert Data as it is more than 7 Bits Length\n");
 800d8fa:	489b      	ldr	r0, [pc, #620]	; (800db68 <Insert_cal_parity+0x2c0>)
 800d8fc:	f014 feee 	bl	80226dc <puts>
			return;
 800d900:	e12e      	b.n	800db60 <Insert_cal_parity+0x2b8>
		}
		else
		{
			if (Calculate_Parity(DataIn, Parity_Type) == 1)
 800d902:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800d906:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800d90a:	4611      	mov	r1, r2
 800d90c:	4618      	mov	r0, r3
 800d90e:	f7ff ff29 	bl	800d764 <Calculate_Parity>
 800d912:	4603      	mov	r3, r0
 800d914:	2b01      	cmp	r3, #1
 800d916:	d10b      	bne.n	800d930 <Insert_cal_parity+0x88>
			{
				//printf("\nSET\n");
				Dest_Buff[0] = DataIn;
 800d918:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800d91c:	68bb      	ldr	r3, [r7, #8]
 800d91e:	701a      	strb	r2, [r3, #0]
				Dest_Buff[0] |= 1 << 7;
 800d920:	68bb      	ldr	r3, [r7, #8]
 800d922:	781b      	ldrb	r3, [r3, #0]
 800d924:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d928:	b2da      	uxtb	r2, r3
 800d92a:	68bb      	ldr	r3, [r7, #8]
 800d92c:	701a      	strb	r2, [r3, #0]
 800d92e:	e117      	b.n	800db60 <Insert_cal_parity+0x2b8>
			}
			else
			{
				//printf("\nCLEAR\n");
				Dest_Buff[0] = DataIn;
 800d930:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800d934:	68bb      	ldr	r3, [r7, #8]
 800d936:	701a      	strb	r2, [r3, #0]
				Dest_Buff[0] &= ~(1 << 7);
 800d938:	68bb      	ldr	r3, [r7, #8]
 800d93a:	781b      	ldrb	r3, [r3, #0]
 800d93c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d940:	b2da      	uxtb	r2, r3
 800d942:	68bb      	ldr	r3, [r7, #8]
 800d944:	701a      	strb	r2, [r3, #0]
 800d946:	e10b      	b.n	800db60 <Insert_cal_parity+0x2b8>
			}
		}
	}
	else if (No_of_Bits == 24)
 800d948:	7bbb      	ldrb	r3, [r7, #14]
 800d94a:	2b18      	cmp	r3, #24
 800d94c:	f040 8104 	bne.w	800db58 <Insert_cal_parity+0x2b0>
	{
		// printf("Three Byte's Calculation\n");
		if (DataIn > 0x1fffff)
 800d950:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d954:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800d958:	f173 0300 	sbcs.w	r3, r3, #0
 800d95c:	d303      	bcc.n	800d966 <Insert_cal_parity+0xbe>
		{
			printf("Can't Insert Data as it is more than 21 Bits Length\n");
 800d95e:	4883      	ldr	r0, [pc, #524]	; (800db6c <Insert_cal_parity+0x2c4>)
 800d960:	f014 febc 	bl	80226dc <puts>
			return;
 800d964:	e0fc      	b.n	800db60 <Insert_cal_parity+0x2b8>
		}
		else
		{
			uint8_t Byte_Traverser = 0;
 800d966:	2300      	movs	r3, #0
 800d968:	76bb      	strb	r3, [r7, #26]

			for (Byte_Traverser = 0; Byte_Traverser < 3; Byte_Traverser++)
 800d96a:	2300      	movs	r3, #0
 800d96c:	76bb      	strb	r3, [r7, #26]
 800d96e:	e0ee      	b.n	800db4e <Insert_cal_parity+0x2a6>
			{
				Temp_Data = DataIn >> (((Byte_Traverser * 8)));
 800d970:	7ebb      	ldrb	r3, [r7, #26]
 800d972:	00d9      	lsls	r1, r3, #3
 800d974:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d978:	f1c1 0620 	rsb	r6, r1, #32
 800d97c:	f1a1 0c20 	sub.w	ip, r1, #32
 800d980:	fa22 f001 	lsr.w	r0, r2, r1
 800d984:	6038      	str	r0, [r7, #0]
 800d986:	fa03 f606 	lsl.w	r6, r3, r6
 800d98a:	6838      	ldr	r0, [r7, #0]
 800d98c:	4330      	orrs	r0, r6
 800d98e:	6038      	str	r0, [r7, #0]
 800d990:	fa23 fc0c 	lsr.w	ip, r3, ip
 800d994:	6838      	ldr	r0, [r7, #0]
 800d996:	ea40 000c 	orr.w	r0, r0, ip
 800d99a:	6038      	str	r0, [r7, #0]
 800d99c:	40cb      	lsrs	r3, r1
 800d99e:	607b      	str	r3, [r7, #4]
 800d9a0:	783b      	ldrb	r3, [r7, #0]
 800d9a2:	76fb      	strb	r3, [r7, #27]
				// printf("#Temp_Data:0x%02x\n",Temp_Data);
				switch (Byte_Traverser)
 800d9a4:	7ebb      	ldrb	r3, [r7, #26]
 800d9a6:	2b02      	cmp	r3, #2
 800d9a8:	d07a      	beq.n	800daa0 <Insert_cal_parity+0x1f8>
 800d9aa:	2b02      	cmp	r3, #2
 800d9ac:	f300 8094 	bgt.w	800dad8 <Insert_cal_parity+0x230>
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d002      	beq.n	800d9ba <Insert_cal_parity+0x112>
 800d9b4:	2b01      	cmp	r3, #1
 800d9b6:	d01f      	beq.n	800d9f8 <Insert_cal_parity+0x150>
					(t2==0)?(Temp_Data &= ~(1 << 0)):(Temp_Data|= 1 << 0);//copying Previous bit
					(t1==0)?(Temp_Data &= ~(1 << 1)):(Temp_Data|= 1 << 1);//copying Previous bit
					//printf("Temp_Data:%u\n",Temp_Data);
					break;
				default:
					break;
 800d9b8:	e08e      	b.n	800dad8 <Insert_cal_parity+0x230>
					t1 = (((DataIn >> (((Byte_Traverser * 8)))) >> 7) & 1);
 800d9ba:	7ebb      	ldrb	r3, [r7, #26]
 800d9bc:	00d9      	lsls	r1, r3, #3
 800d9be:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d9c2:	f1c1 0620 	rsb	r6, r1, #32
 800d9c6:	f1a1 0020 	sub.w	r0, r1, #32
 800d9ca:	fa22 f401 	lsr.w	r4, r2, r1
 800d9ce:	fa03 f606 	lsl.w	r6, r3, r6
 800d9d2:	4334      	orrs	r4, r6
 800d9d4:	fa23 f000 	lsr.w	r0, r3, r0
 800d9d8:	4304      	orrs	r4, r0
 800d9da:	fa23 f501 	lsr.w	r5, r3, r1
 800d9de:	f04f 0200 	mov.w	r2, #0
 800d9e2:	f04f 0300 	mov.w	r3, #0
 800d9e6:	09e2      	lsrs	r2, r4, #7
 800d9e8:	ea42 6245 	orr.w	r2, r2, r5, lsl #25
 800d9ec:	09eb      	lsrs	r3, r5, #7
 800d9ee:	b293      	uxth	r3, r2
 800d9f0:	f003 0301 	and.w	r3, r3, #1
 800d9f4:	83fb      	strh	r3, [r7, #30]
					break;
 800d9f6:	e070      	b.n	800dada <Insert_cal_parity+0x232>
					Temp_Data<<=1; //Shifting data by 1 bit
 800d9f8:	7efb      	ldrb	r3, [r7, #27]
 800d9fa:	005b      	lsls	r3, r3, #1
 800d9fc:	76fb      	strb	r3, [r7, #27]
					(t1==0)?(Temp_Data &= ~(1 << 0)):(Temp_Data|= 1 << 0);//copying Previous bit
 800d9fe:	8bfb      	ldrh	r3, [r7, #30]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d104      	bne.n	800da0e <Insert_cal_parity+0x166>
 800da04:	7efb      	ldrb	r3, [r7, #27]
 800da06:	f023 0301 	bic.w	r3, r3, #1
 800da0a:	76fb      	strb	r3, [r7, #27]
 800da0c:	e003      	b.n	800da16 <Insert_cal_parity+0x16e>
 800da0e:	7efb      	ldrb	r3, [r7, #27]
 800da10:	f043 0301 	orr.w	r3, r3, #1
 800da14:	76fb      	strb	r3, [r7, #27]
					t1 = (((DataIn >> (((Byte_Traverser * 8)))) >> 7) & 1);
 800da16:	7ebb      	ldrb	r3, [r7, #26]
 800da18:	00d9      	lsls	r1, r3, #3
 800da1a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800da1e:	f1c1 0620 	rsb	r6, r1, #32
 800da22:	f1a1 0020 	sub.w	r0, r1, #32
 800da26:	fa22 f801 	lsr.w	r8, r2, r1
 800da2a:	fa03 f606 	lsl.w	r6, r3, r6
 800da2e:	ea48 0806 	orr.w	r8, r8, r6
 800da32:	fa23 f000 	lsr.w	r0, r3, r0
 800da36:	ea48 0800 	orr.w	r8, r8, r0
 800da3a:	fa23 f901 	lsr.w	r9, r3, r1
 800da3e:	f04f 0200 	mov.w	r2, #0
 800da42:	f04f 0300 	mov.w	r3, #0
 800da46:	ea4f 12d8 	mov.w	r2, r8, lsr #7
 800da4a:	ea42 6249 	orr.w	r2, r2, r9, lsl #25
 800da4e:	ea4f 13d9 	mov.w	r3, r9, lsr #7
 800da52:	b293      	uxth	r3, r2
 800da54:	f003 0301 	and.w	r3, r3, #1
 800da58:	83fb      	strh	r3, [r7, #30]
					t2 = (((DataIn >> (((Byte_Traverser * 8)))) >> 6) & 1);
 800da5a:	7ebb      	ldrb	r3, [r7, #26]
 800da5c:	00d9      	lsls	r1, r3, #3
 800da5e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800da62:	f1c1 0620 	rsb	r6, r1, #32
 800da66:	f1a1 0020 	sub.w	r0, r1, #32
 800da6a:	fa22 fa01 	lsr.w	sl, r2, r1
 800da6e:	fa03 f606 	lsl.w	r6, r3, r6
 800da72:	ea4a 0a06 	orr.w	sl, sl, r6
 800da76:	fa23 f000 	lsr.w	r0, r3, r0
 800da7a:	ea4a 0a00 	orr.w	sl, sl, r0
 800da7e:	fa23 fb01 	lsr.w	fp, r3, r1
 800da82:	f04f 0200 	mov.w	r2, #0
 800da86:	f04f 0300 	mov.w	r3, #0
 800da8a:	ea4f 129a 	mov.w	r2, sl, lsr #6
 800da8e:	ea42 628b 	orr.w	r2, r2, fp, lsl #26
 800da92:	ea4f 139b 	mov.w	r3, fp, lsr #6
 800da96:	b293      	uxth	r3, r2
 800da98:	f003 0301 	and.w	r3, r3, #1
 800da9c:	83bb      	strh	r3, [r7, #28]
					break;
 800da9e:	e01c      	b.n	800dada <Insert_cal_parity+0x232>
					Temp_Data<<=2; //Shifting data by 2 bit
 800daa0:	7efb      	ldrb	r3, [r7, #27]
 800daa2:	009b      	lsls	r3, r3, #2
 800daa4:	76fb      	strb	r3, [r7, #27]
					(t2==0)?(Temp_Data &= ~(1 << 0)):(Temp_Data|= 1 << 0);//copying Previous bit
 800daa6:	8bbb      	ldrh	r3, [r7, #28]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d104      	bne.n	800dab6 <Insert_cal_parity+0x20e>
 800daac:	7efb      	ldrb	r3, [r7, #27]
 800daae:	f023 0301 	bic.w	r3, r3, #1
 800dab2:	76fb      	strb	r3, [r7, #27]
 800dab4:	e003      	b.n	800dabe <Insert_cal_parity+0x216>
 800dab6:	7efb      	ldrb	r3, [r7, #27]
 800dab8:	f043 0301 	orr.w	r3, r3, #1
 800dabc:	76fb      	strb	r3, [r7, #27]
					(t1==0)?(Temp_Data &= ~(1 << 1)):(Temp_Data|= 1 << 1);//copying Previous bit
 800dabe:	8bfb      	ldrh	r3, [r7, #30]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d104      	bne.n	800dace <Insert_cal_parity+0x226>
 800dac4:	7efb      	ldrb	r3, [r7, #27]
 800dac6:	f023 0302 	bic.w	r3, r3, #2
 800daca:	76fb      	strb	r3, [r7, #27]
					break;
 800dacc:	e005      	b.n	800dada <Insert_cal_parity+0x232>
					(t1==0)?(Temp_Data &= ~(1 << 1)):(Temp_Data|= 1 << 1);//copying Previous bit
 800dace:	7efb      	ldrb	r3, [r7, #27]
 800dad0:	f043 0302 	orr.w	r3, r3, #2
 800dad4:	76fb      	strb	r3, [r7, #27]
					break;
 800dad6:	e000      	b.n	800dada <Insert_cal_parity+0x232>
					break;
 800dad8:	bf00      	nop
				}
				//if (Calculate_Parity(DataIn >> ((16 - (Byte_Traverser * 8))), Parity_Type) == 1)
				if (Calculate_Parity(Temp_Data, Parity_Type) == 1)
 800dada:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800dade:	7efb      	ldrb	r3, [r7, #27]
 800dae0:	4611      	mov	r1, r2
 800dae2:	4618      	mov	r0, r3
 800dae4:	f7ff fe3e 	bl	800d764 <Calculate_Parity>
 800dae8:	4603      	mov	r3, r0
 800daea:	2b01      	cmp	r3, #1
 800daec:	d116      	bne.n	800db1c <Insert_cal_parity+0x274>
				{
					// printf("SET\n");
					//Dest_Buff[Byte_Traverser] = DataIn >> ((16 - (Byte_Traverser * 8)));
					Dest_Buff[3- Byte_Traverser-1] = Temp_Data;
 800daee:	7ebb      	ldrb	r3, [r7, #26]
 800daf0:	f1c3 0302 	rsb	r3, r3, #2
 800daf4:	68ba      	ldr	r2, [r7, #8]
 800daf6:	4413      	add	r3, r2
 800daf8:	7efa      	ldrb	r2, [r7, #27]
 800dafa:	701a      	strb	r2, [r3, #0]
					Dest_Buff[3- Byte_Traverser-1] |= 1 << 7;
 800dafc:	7ebb      	ldrb	r3, [r7, #26]
 800dafe:	f1c3 0302 	rsb	r3, r3, #2
 800db02:	68ba      	ldr	r2, [r7, #8]
 800db04:	4413      	add	r3, r2
 800db06:	781a      	ldrb	r2, [r3, #0]
 800db08:	7ebb      	ldrb	r3, [r7, #26]
 800db0a:	f1c3 0302 	rsb	r3, r3, #2
 800db0e:	68b9      	ldr	r1, [r7, #8]
 800db10:	440b      	add	r3, r1
 800db12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800db16:	b2d2      	uxtb	r2, r2
 800db18:	701a      	strb	r2, [r3, #0]
 800db1a:	e015      	b.n	800db48 <Insert_cal_parity+0x2a0>
				}
				else
				{
					// printf("CLEAR\n");
					//Dest_Buff[Byte_Traverser] = DataIn >> ((16 - (Byte_Traverser * 8)));
					Dest_Buff[3- Byte_Traverser-1] = Temp_Data;
 800db1c:	7ebb      	ldrb	r3, [r7, #26]
 800db1e:	f1c3 0302 	rsb	r3, r3, #2
 800db22:	68ba      	ldr	r2, [r7, #8]
 800db24:	4413      	add	r3, r2
 800db26:	7efa      	ldrb	r2, [r7, #27]
 800db28:	701a      	strb	r2, [r3, #0]
					Dest_Buff[3 -Byte_Traverser-1] &= ~(1 << 7);
 800db2a:	7ebb      	ldrb	r3, [r7, #26]
 800db2c:	f1c3 0302 	rsb	r3, r3, #2
 800db30:	68ba      	ldr	r2, [r7, #8]
 800db32:	4413      	add	r3, r2
 800db34:	781a      	ldrb	r2, [r3, #0]
 800db36:	7ebb      	ldrb	r3, [r7, #26]
 800db38:	f1c3 0302 	rsb	r3, r3, #2
 800db3c:	68b9      	ldr	r1, [r7, #8]
 800db3e:	440b      	add	r3, r1
 800db40:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800db44:	b2d2      	uxtb	r2, r2
 800db46:	701a      	strb	r2, [r3, #0]
			for (Byte_Traverser = 0; Byte_Traverser < 3; Byte_Traverser++)
 800db48:	7ebb      	ldrb	r3, [r7, #26]
 800db4a:	3301      	adds	r3, #1
 800db4c:	76bb      	strb	r3, [r7, #26]
 800db4e:	7ebb      	ldrb	r3, [r7, #26]
 800db50:	2b02      	cmp	r3, #2
 800db52:	f67f af0d 	bls.w	800d970 <Insert_cal_parity+0xc8>
 800db56:	e003      	b.n	800db60 <Insert_cal_parity+0x2b8>
			}
		}
	}
	else
	{
		printf("Selection Wrong\n");
 800db58:	4805      	ldr	r0, [pc, #20]	; (800db70 <Insert_cal_parity+0x2c8>)
 800db5a:	f014 fdbf 	bl	80226dc <puts>
		return;
 800db5e:	bf00      	nop
	}
	UNUSED(t1);UNUSED(t2);UNUSED(t3);UNUSED(t4);
}
 800db60:	3724      	adds	r7, #36	; 0x24
 800db62:	46bd      	mov	sp, r7
 800db64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db68:	0802633c 	.word	0x0802633c
 800db6c:	08026370 	.word	0x08026370
 800db70:	080263a4 	.word	0x080263a4

0800db74 <Data_Compliment>:

uint16_t Data_Compliment(uint8_t *Buff,uint16_t Size,uint8_t Type)
{
 800db74:	b580      	push	{r7, lr}
 800db76:	b084      	sub	sp, #16
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
 800db7c:	460b      	mov	r3, r1
 800db7e:	807b      	strh	r3, [r7, #2]
 800db80:	4613      	mov	r3, r2
 800db82:	707b      	strb	r3, [r7, #1]
	uint16_t Traverser = 0;
 800db84:	2300      	movs	r3, #0
 800db86:	81fb      	strh	r3, [r7, #14]
	uint16_t Actual_Size = 0;
 800db88:	2300      	movs	r3, #0
 800db8a:	81bb      	strh	r3, [r7, #12]

#if (SIEMENS_DEBUG==1)
	printf("Size:%u\n",Size);
#endif

	if(Type == VERIFY)
 800db8c:	787b      	ldrb	r3, [r7, #1]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d133      	bne.n	800dbfa <Data_Compliment+0x86>
	{
		Actual_Size = ((Size/2)-2);
 800db92:	887b      	ldrh	r3, [r7, #2]
 800db94:	085b      	lsrs	r3, r3, #1
 800db96:	b29b      	uxth	r3, r3
 800db98:	3b02      	subs	r3, #2
 800db9a:	81bb      	strh	r3, [r7, #12]
		for(Traverser = 0; Traverser < Actual_Size; ++Traverser)
 800db9c:	2300      	movs	r3, #0
 800db9e:	81fb      	strh	r3, [r7, #14]
 800dba0:	e025      	b.n	800dbee <Data_Compliment+0x7a>
		{
			// printf("0x%02x|Compliment:0x%02x\n",Buff[Traverser],Buff[Traverser+Actual_Size+2]);
			if(Buff[Traverser] != (uint8_t)~Buff[Traverser+Actual_Size+2])
 800dba2:	89fb      	ldrh	r3, [r7, #14]
 800dba4:	687a      	ldr	r2, [r7, #4]
 800dba6:	4413      	add	r3, r2
 800dba8:	781a      	ldrb	r2, [r3, #0]
 800dbaa:	89f9      	ldrh	r1, [r7, #14]
 800dbac:	89bb      	ldrh	r3, [r7, #12]
 800dbae:	440b      	add	r3, r1
 800dbb0:	3302      	adds	r3, #2
 800dbb2:	6879      	ldr	r1, [r7, #4]
 800dbb4:	440b      	add	r3, r1
 800dbb6:	781b      	ldrb	r3, [r3, #0]
 800dbb8:	43db      	mvns	r3, r3
 800dbba:	b2db      	uxtb	r3, r3
 800dbbc:	429a      	cmp	r2, r3
 800dbbe:	d013      	beq.n	800dbe8 <Data_Compliment+0x74>
			{
				printf("Compliment failed for DATA\n0x%02x|Compliment:0x%02x\n",Buff[Traverser],(uint8_t)~Buff[Traverser+Actual_Size+2]);
 800dbc0:	89fb      	ldrh	r3, [r7, #14]
 800dbc2:	687a      	ldr	r2, [r7, #4]
 800dbc4:	4413      	add	r3, r2
 800dbc6:	781b      	ldrb	r3, [r3, #0]
 800dbc8:	4619      	mov	r1, r3
 800dbca:	89fa      	ldrh	r2, [r7, #14]
 800dbcc:	89bb      	ldrh	r3, [r7, #12]
 800dbce:	4413      	add	r3, r2
 800dbd0:	3302      	adds	r3, #2
 800dbd2:	687a      	ldr	r2, [r7, #4]
 800dbd4:	4413      	add	r3, r2
 800dbd6:	781b      	ldrb	r3, [r3, #0]
 800dbd8:	43db      	mvns	r3, r3
 800dbda:	b2db      	uxtb	r3, r3
 800dbdc:	461a      	mov	r2, r3
 800dbde:	481a      	ldr	r0, [pc, #104]	; (800dc48 <Data_Compliment+0xd4>)
 800dbe0:	f014 fce0 	bl	80225a4 <iprintf>
				return 0;
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	e02b      	b.n	800dc40 <Data_Compliment+0xcc>
		for(Traverser = 0; Traverser < Actual_Size; ++Traverser)
 800dbe8:	89fb      	ldrh	r3, [r7, #14]
 800dbea:	3301      	adds	r3, #1
 800dbec:	81fb      	strh	r3, [r7, #14]
 800dbee:	89fa      	ldrh	r2, [r7, #14]
 800dbf0:	89bb      	ldrh	r3, [r7, #12]
 800dbf2:	429a      	cmp	r2, r3
 800dbf4:	d3d5      	bcc.n	800dba2 <Data_Compliment+0x2e>
			}
		}
		return 1;
 800dbf6:	2301      	movs	r3, #1
 800dbf8:	e022      	b.n	800dc40 <Data_Compliment+0xcc>
	}
	else if(Type == CONVERT)
 800dbfa:	787b      	ldrb	r3, [r7, #1]
 800dbfc:	2b01      	cmp	r3, #1
 800dbfe:	d11e      	bne.n	800dc3e <Data_Compliment+0xca>
		{
			printf("0x%02x|",Buff[Traverser]);
		}
		printf("Compliment Data:\n");
#endif
		for(Traverser = 0; Traverser <(Size); ++Traverser)
 800dc00:	2300      	movs	r3, #0
 800dc02:	81fb      	strh	r3, [r7, #14]
 800dc04:	e010      	b.n	800dc28 <Data_Compliment+0xb4>
		{
			Buff[Traverser+2+Size] = ~Buff[Traverser];
 800dc06:	89fb      	ldrh	r3, [r7, #14]
 800dc08:	687a      	ldr	r2, [r7, #4]
 800dc0a:	4413      	add	r3, r2
 800dc0c:	781a      	ldrb	r2, [r3, #0]
 800dc0e:	89fb      	ldrh	r3, [r7, #14]
 800dc10:	1c99      	adds	r1, r3, #2
 800dc12:	887b      	ldrh	r3, [r7, #2]
 800dc14:	440b      	add	r3, r1
 800dc16:	4619      	mov	r1, r3
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	440b      	add	r3, r1
 800dc1c:	43d2      	mvns	r2, r2
 800dc1e:	b2d2      	uxtb	r2, r2
 800dc20:	701a      	strb	r2, [r3, #0]
		for(Traverser = 0; Traverser <(Size); ++Traverser)
 800dc22:	89fb      	ldrh	r3, [r7, #14]
 800dc24:	3301      	adds	r3, #1
 800dc26:	81fb      	strh	r3, [r7, #14]
 800dc28:	89fa      	ldrh	r2, [r7, #14]
 800dc2a:	887b      	ldrh	r3, [r7, #2]
 800dc2c:	429a      	cmp	r2, r3
 800dc2e:	d3ea      	bcc.n	800dc06 <Data_Compliment+0x92>
#if (SIEMENS_DEBUG==1)
			printf("0x%02x|",Buff[Traverser+2+Size]);
#endif
		}
		return (Traverser+Size+2);
 800dc30:	89fa      	ldrh	r2, [r7, #14]
 800dc32:	887b      	ldrh	r3, [r7, #2]
 800dc34:	4413      	add	r3, r2
 800dc36:	b29b      	uxth	r3, r3
 800dc38:	3302      	adds	r3, #2
 800dc3a:	b29b      	uxth	r3, r3
 800dc3c:	e000      	b.n	800dc40 <Data_Compliment+0xcc>
	}
	return 0;
 800dc3e:	2300      	movs	r3, #0
}
 800dc40:	4618      	mov	r0, r3
 800dc42:	3710      	adds	r7, #16
 800dc44:	46bd      	mov	sp, r7
 800dc46:	bd80      	pop	{r7, pc}
 800dc48:	080263b4 	.word	0x080263b4

0800dc4c <CheckToSendReplyorNot>:

void CheckToSendReplyorNot(void)
{
 800dc4c:	b480      	push	{r7}
 800dc4e:	b083      	sub	sp, #12
 800dc50:	af00      	add	r7, sp, #0
	uint8_t Value = 0;
 800dc52:	2300      	movs	r3, #0
 800dc54:	71fb      	strb	r3, [r7, #7]

	if(Tx_Siemens_self_sharing_st.MesgReceived == RECEIVED)
 800dc56:	4b1a      	ldr	r3, [pc, #104]	; (800dcc0 <CheckToSendReplyorNot+0x74>)
 800dc58:	785b      	ldrb	r3, [r3, #1]
 800dc5a:	2b01      	cmp	r3, #1
 800dc5c:	d104      	bne.n	800dc68 <CheckToSendReplyorNot+0x1c>
	{
		SET_BIT_USER(0,Value);
 800dc5e:	79fb      	ldrb	r3, [r7, #7]
 800dc60:	f043 0301 	orr.w	r3, r3, #1
 800dc64:	71fb      	strb	r3, [r7, #7]
 800dc66:	e003      	b.n	800dc70 <CheckToSendReplyorNot+0x24>
	}
	else
	{
		CLEAR_BIT_USER(0,Value);
 800dc68:	79fb      	ldrb	r3, [r7, #7]
 800dc6a:	f023 0301 	bic.w	r3, r3, #1
 800dc6e:	71fb      	strb	r3, [r7, #7]
	}
	if(Rx_Siemens_self_sharing_st.MesgReceived == RECEIVED)
 800dc70:	4b14      	ldr	r3, [pc, #80]	; (800dcc4 <CheckToSendReplyorNot+0x78>)
 800dc72:	785b      	ldrb	r3, [r3, #1]
 800dc74:	2b01      	cmp	r3, #1
 800dc76:	d104      	bne.n	800dc82 <CheckToSendReplyorNot+0x36>
	{
		SET_BIT_USER(1,Value);
 800dc78:	79fb      	ldrb	r3, [r7, #7]
 800dc7a:	f043 0302 	orr.w	r3, r3, #2
 800dc7e:	71fb      	strb	r3, [r7, #7]
 800dc80:	e003      	b.n	800dc8a <CheckToSendReplyorNot+0x3e>
	}
	else
	{
		CLEAR_BIT_USER(1,Value);
 800dc82:	79fb      	ldrb	r3, [r7, #7]
 800dc84:	f023 0302 	bic.w	r3, r3, #2
 800dc88:	71fb      	strb	r3, [r7, #7]
	}

	//	printf("Value:%u\n",Value);

	switch(Value)
 800dc8a:	79fb      	ldrb	r3, [r7, #7]
 800dc8c:	2b02      	cmp	r3, #2
 800dc8e:	dc02      	bgt.n	800dc96 <CheckToSendReplyorNot+0x4a>
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	da03      	bge.n	800dc9c <CheckToSendReplyorNot+0x50>
 800dc94:	e00a      	b.n	800dcac <CheckToSendReplyorNot+0x60>
 800dc96:	2b03      	cmp	r3, #3
 800dc98:	d004      	beq.n	800dca4 <CheckToSendReplyorNot+0x58>
 800dc9a:	e007      	b.n	800dcac <CheckToSendReplyorNot+0x60>
	{
	case ZERO:
	case ONE:
	case TWO:
		SendReply = 1;
 800dc9c:	4b0a      	ldr	r3, [pc, #40]	; (800dcc8 <CheckToSendReplyorNot+0x7c>)
 800dc9e:	2201      	movs	r2, #1
 800dca0:	701a      	strb	r2, [r3, #0]
		break;
 800dca2:	e007      	b.n	800dcb4 <CheckToSendReplyorNot+0x68>
	case THREE:
#ifdef EI_1
		SendReply = 1;
#endif
#ifdef EI_2
		SendReply = 0;
 800dca4:	4b08      	ldr	r3, [pc, #32]	; (800dcc8 <CheckToSendReplyorNot+0x7c>)
 800dca6:	2200      	movs	r2, #0
 800dca8:	701a      	strb	r2, [r3, #0]
#endif
		break;
 800dcaa:	e003      	b.n	800dcb4 <CheckToSendReplyorNot+0x68>
	default:
		SendReply = 1;
 800dcac:	4b06      	ldr	r3, [pc, #24]	; (800dcc8 <CheckToSendReplyorNot+0x7c>)
 800dcae:	2201      	movs	r2, #1
 800dcb0:	701a      	strb	r2, [r3, #0]
		break;
 800dcb2:	bf00      	nop
	}

}
 800dcb4:	bf00      	nop
 800dcb6:	370c      	adds	r7, #12
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcbe:	4770      	bx	lr
 800dcc0:	20003484 	.word	0x20003484
 800dcc4:	20003488 	.word	0x20003488
 800dcc8:	20004ba5 	.word	0x20004ba5

0800dccc <PrintSignals>:



void PrintSignals(void)
{
 800dccc:	b580      	push	{r7, lr}
 800dcce:	b082      	sub	sp, #8
 800dcd0:	af00      	add	r7, sp, #0
	memcpy(&VitalData2MIE_st.Relays,&SiemensMain_Relays_st.Relays,SiemensMain_Relays_st.NoofDataBytes);
 800dcd2:	4b2d      	ldr	r3, [pc, #180]	; (800dd88 <PrintSignals+0xbc>)
 800dcd4:	881b      	ldrh	r3, [r3, #0]
 800dcd6:	461a      	mov	r2, r3
 800dcd8:	492c      	ldr	r1, [pc, #176]	; (800dd8c <PrintSignals+0xc0>)
 800dcda:	482d      	ldr	r0, [pc, #180]	; (800dd90 <PrintSignals+0xc4>)
 800dcdc:	f014 fb52 	bl	8022384 <memcpy>

	for(uint16_t Traverser = 1;Traverser<=(VitalData2MIE_st.NoofDataBytes * 8);++Traverser)
 800dce0:	2301      	movs	r3, #1
 800dce2:	80fb      	strh	r3, [r7, #6]
 800dce4:	e045      	b.n	800dd72 <PrintSignals+0xa6>
	{
		if(Traverser > TotalSigCount)
 800dce6:	4b2b      	ldr	r3, [pc, #172]	; (800dd94 <PrintSignals+0xc8>)
 800dce8:	881b      	ldrh	r3, [r3, #0]
 800dcea:	88fa      	ldrh	r2, [r7, #6]
 800dcec:	429a      	cmp	r2, r3
 800dcee:	d83c      	bhi.n	800dd6a <PrintSignals+0x9e>
		{
			continue;
		}

		if(GETPIN(Traverser) > 0)
 800dcf0:	88fb      	ldrh	r3, [r7, #6]
 800dcf2:	3b01      	subs	r3, #1
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	da00      	bge.n	800dcfa <PrintSignals+0x2e>
 800dcf8:	3307      	adds	r3, #7
 800dcfa:	10db      	asrs	r3, r3, #3
 800dcfc:	461a      	mov	r2, r3
 800dcfe:	4b26      	ldr	r3, [pc, #152]	; (800dd98 <PrintSignals+0xcc>)
 800dd00:	4413      	add	r3, r2
 800dd02:	789b      	ldrb	r3, [r3, #2]
 800dd04:	4619      	mov	r1, r3
 800dd06:	88fb      	ldrh	r3, [r7, #6]
 800dd08:	3b01      	subs	r3, #1
 800dd0a:	425a      	negs	r2, r3
 800dd0c:	f003 0307 	and.w	r3, r3, #7
 800dd10:	f002 0207 	and.w	r2, r2, #7
 800dd14:	bf58      	it	pl
 800dd16:	4253      	negpl	r3, r2
 800dd18:	2201      	movs	r2, #1
 800dd1a:	fa02 f303 	lsl.w	r3, r2, r3
 800dd1e:	400b      	ands	r3, r1
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	dd0c      	ble.n	800dd3e <PrintSignals+0x72>
		{
			printf("%15s:PICKUP   ",Signals[Traverser-1]);
 800dd24:	88fb      	ldrh	r3, [r7, #6]
 800dd26:	1e5a      	subs	r2, r3, #1
 800dd28:	4613      	mov	r3, r2
 800dd2a:	009b      	lsls	r3, r3, #2
 800dd2c:	4413      	add	r3, r2
 800dd2e:	00db      	lsls	r3, r3, #3
 800dd30:	4a1a      	ldr	r2, [pc, #104]	; (800dd9c <PrintSignals+0xd0>)
 800dd32:	4413      	add	r3, r2
 800dd34:	4619      	mov	r1, r3
 800dd36:	481a      	ldr	r0, [pc, #104]	; (800dda0 <PrintSignals+0xd4>)
 800dd38:	f014 fc34 	bl	80225a4 <iprintf>
 800dd3c:	e00b      	b.n	800dd56 <PrintSignals+0x8a>
		}
		else
		{
			printf("%15s:DROP      ",Signals[Traverser-1]);
 800dd3e:	88fb      	ldrh	r3, [r7, #6]
 800dd40:	1e5a      	subs	r2, r3, #1
 800dd42:	4613      	mov	r3, r2
 800dd44:	009b      	lsls	r3, r3, #2
 800dd46:	4413      	add	r3, r2
 800dd48:	00db      	lsls	r3, r3, #3
 800dd4a:	4a14      	ldr	r2, [pc, #80]	; (800dd9c <PrintSignals+0xd0>)
 800dd4c:	4413      	add	r3, r2
 800dd4e:	4619      	mov	r1, r3
 800dd50:	4814      	ldr	r0, [pc, #80]	; (800dda4 <PrintSignals+0xd8>)
 800dd52:	f014 fc27 	bl	80225a4 <iprintf>
		}

		if( (Traverser%2) == 0)
 800dd56:	88fb      	ldrh	r3, [r7, #6]
 800dd58:	f003 0301 	and.w	r3, r3, #1
 800dd5c:	b29b      	uxth	r3, r3
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d104      	bne.n	800dd6c <PrintSignals+0xa0>
		{
			printf("\n");
 800dd62:	200a      	movs	r0, #10
 800dd64:	f014 fc36 	bl	80225d4 <putchar>
 800dd68:	e000      	b.n	800dd6c <PrintSignals+0xa0>
			continue;
 800dd6a:	bf00      	nop
	for(uint16_t Traverser = 1;Traverser<=(VitalData2MIE_st.NoofDataBytes * 8);++Traverser)
 800dd6c:	88fb      	ldrh	r3, [r7, #6]
 800dd6e:	3301      	adds	r3, #1
 800dd70:	80fb      	strh	r3, [r7, #6]
 800dd72:	88fa      	ldrh	r2, [r7, #6]
 800dd74:	4b08      	ldr	r3, [pc, #32]	; (800dd98 <PrintSignals+0xcc>)
 800dd76:	881b      	ldrh	r3, [r3, #0]
 800dd78:	00db      	lsls	r3, r3, #3
 800dd7a:	429a      	cmp	r2, r3
 800dd7c:	ddb3      	ble.n	800dce6 <PrintSignals+0x1a>
		}
	}
}
 800dd7e:	bf00      	nop
 800dd80:	bf00      	nop
 800dd82:	3708      	adds	r7, #8
 800dd84:	46bd      	mov	sp, r7
 800dd86:	bd80      	pop	{r7, pc}
 800dd88:	200036b0 	.word	0x200036b0
 800dd8c:	200036b4 	.word	0x200036b4
 800dd90:	200034ae 	.word	0x200034ae
 800dd94:	200047b8 	.word	0x200047b8
 800dd98:	200034ac 	.word	0x200034ac
 800dd9c:	20003cc8 	.word	0x20003cc8
 800dda0:	080263ec 	.word	0x080263ec
 800dda4:	080263fc 	.word	0x080263fc

0800dda8 <GetTimeStamp>:

void GetTimeStamp(void)
{
 800dda8:	b580      	push	{r7, lr}
 800ddaa:	b084      	sub	sp, #16
 800ddac:	af00      	add	r7, sp, #0
	uint32_t TimeFrame = 0;
 800ddae:	2300      	movs	r3, #0
 800ddb0:	60fb      	str	r3, [r7, #12]
	static uint32_t PrevTimeFrame = 0;
	uint32_t TimeStamp = 0;
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	60bb      	str	r3, [r7, #8]
	static 	uint32_t PrevTimeStamp = 0;
	static uint32_t TickswhenTimeChanged = 0;
	uint32_t ElapsTicksAfterTimeChange = 0;
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	607b      	str	r3, [r7, #4]

	Get_time();
 800ddba:	f7fd f9e7 	bl	800b18c <Get_time>
	TimeFrame = (((RTC_Date_time_Dec_st.Hour * 3600) +(RTC_Date_time_Dec_st.Mins * 60) + (RTC_Date_time_Dec_st.Secs)));
 800ddbe:	4b21      	ldr	r3, [pc, #132]	; (800de44 <GetTimeStamp+0x9c>)
 800ddc0:	781b      	ldrb	r3, [r3, #0]
 800ddc2:	461a      	mov	r2, r3
 800ddc4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800ddc8:	fb03 f202 	mul.w	r2, r3, r2
 800ddcc:	4b1d      	ldr	r3, [pc, #116]	; (800de44 <GetTimeStamp+0x9c>)
 800ddce:	785b      	ldrb	r3, [r3, #1]
 800ddd0:	4619      	mov	r1, r3
 800ddd2:	460b      	mov	r3, r1
 800ddd4:	011b      	lsls	r3, r3, #4
 800ddd6:	1a5b      	subs	r3, r3, r1
 800ddd8:	009b      	lsls	r3, r3, #2
 800ddda:	4413      	add	r3, r2
 800dddc:	4a19      	ldr	r2, [pc, #100]	; (800de44 <GetTimeStamp+0x9c>)
 800ddde:	7892      	ldrb	r2, [r2, #2]
 800dde0:	4413      	add	r3, r2
 800dde2:	60fb      	str	r3, [r7, #12]

	if(TimeFrame != PrevTimeFrame)
 800dde4:	4b18      	ldr	r3, [pc, #96]	; (800de48 <GetTimeStamp+0xa0>)
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	68fa      	ldr	r2, [r7, #12]
 800ddea:	429a      	cmp	r2, r3
 800ddec:	d007      	beq.n	800ddfe <GetTimeStamp+0x56>
	{
		PrevTimeFrame = TimeFrame;
 800ddee:	4a16      	ldr	r2, [pc, #88]	; (800de48 <GetTimeStamp+0xa0>)
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	6013      	str	r3, [r2, #0]
		TickswhenTimeChanged = HAL_GetTick();
 800ddf4:	f007 fbcc 	bl	8015590 <HAL_GetTick>
 800ddf8:	4603      	mov	r3, r0
 800ddfa:	4a14      	ldr	r2, [pc, #80]	; (800de4c <GetTimeStamp+0xa4>)
 800ddfc:	6013      	str	r3, [r2, #0]
	}

	ElapsTicksAfterTimeChange = HAL_Elaps_Ticks(TickswhenTimeChanged);
 800ddfe:	4b13      	ldr	r3, [pc, #76]	; (800de4c <GetTimeStamp+0xa4>)
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	4618      	mov	r0, r3
 800de04:	f000 fe12 	bl	800ea2c <HAL_Elaps_Ticks>
 800de08:	6078      	str	r0, [r7, #4]

	TimeStamp  = (TimeFrame * 10) + (ElapsTicksAfterTimeChange/100);
 800de0a:	68fa      	ldr	r2, [r7, #12]
 800de0c:	4613      	mov	r3, r2
 800de0e:	009b      	lsls	r3, r3, #2
 800de10:	4413      	add	r3, r2
 800de12:	005b      	lsls	r3, r3, #1
 800de14:	4619      	mov	r1, r3
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	4a0d      	ldr	r2, [pc, #52]	; (800de50 <GetTimeStamp+0xa8>)
 800de1a:	fba2 2303 	umull	r2, r3, r2, r3
 800de1e:	095b      	lsrs	r3, r3, #5
 800de20:	440b      	add	r3, r1
 800de22:	60bb      	str	r3, [r7, #8]
	if(TimeStamp != PrevTimeStamp)
 800de24:	4b0b      	ldr	r3, [pc, #44]	; (800de54 <GetTimeStamp+0xac>)
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	68ba      	ldr	r2, [r7, #8]
 800de2a:	429a      	cmp	r2, r3
 800de2c:	d005      	beq.n	800de3a <GetTimeStamp+0x92>
	{
		PrevTimeStamp = TimeStamp;
 800de2e:	4a09      	ldr	r2, [pc, #36]	; (800de54 <GetTimeStamp+0xac>)
 800de30:	68bb      	ldr	r3, [r7, #8]
 800de32:	6013      	str	r3, [r2, #0]
		SelfTimeStamp = TimeStamp;
 800de34:	4a08      	ldr	r2, [pc, #32]	; (800de58 <GetTimeStamp+0xb0>)
 800de36:	68bb      	ldr	r3, [r7, #8]
 800de38:	6013      	str	r3, [r2, #0]
		//		printf("Ticks:%lu|ms:%lu|%lu\n",HAL_GetTick(),	TimeStamp,(ElapsTicksAfterTimeChange));
	}
}
 800de3a:	bf00      	nop
 800de3c:	3710      	adds	r7, #16
 800de3e:	46bd      	mov	sp, r7
 800de40:	bd80      	pop	{r7, pc}
 800de42:	bf00      	nop
 800de44:	200027ec 	.word	0x200027ec
 800de48:	20004bac 	.word	0x20004bac
 800de4c:	20004bb0 	.word	0x20004bb0
 800de50:	51eb851f 	.word	0x51eb851f
 800de54:	20004bb4 	.word	0x20004bb4
 800de58:	20003cc4 	.word	0x20003cc4

0800de5c <UpdateSIGNALSNames>:


void UpdateSIGNALSNames(void)
{
 800de5c:	b490      	push	{r4, r7}
 800de5e:	b082      	sub	sp, #8
 800de60:	af00      	add	r7, sp, #0
	uint8_t Signals_Cnt = 0;
 800de62:	2300      	movs	r3, #0
 800de64:	71fb      	strb	r3, [r7, #7]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"CLTPR");
 800de66:	79fb      	ldrb	r3, [r7, #7]
 800de68:	1c5a      	adds	r2, r3, #1
 800de6a:	71fa      	strb	r2, [r7, #7]
 800de6c:	461a      	mov	r2, r3
 800de6e:	4613      	mov	r3, r2
 800de70:	009b      	lsls	r3, r3, #2
 800de72:	4413      	add	r3, r2
 800de74:	00db      	lsls	r3, r3, #3
 800de76:	4acd      	ldr	r2, [pc, #820]	; (800e1ac <UpdateSIGNALSNames+0x350>)
 800de78:	4413      	add	r3, r2
 800de7a:	4acd      	ldr	r2, [pc, #820]	; (800e1b0 <UpdateSIGNALSNames+0x354>)
 800de7c:	6810      	ldr	r0, [r2, #0]
 800de7e:	6018      	str	r0, [r3, #0]
 800de80:	8892      	ldrh	r2, [r2, #4]
 800de82:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"DMTPR");
 800de84:	79fb      	ldrb	r3, [r7, #7]
 800de86:	1c5a      	adds	r2, r3, #1
 800de88:	71fa      	strb	r2, [r7, #7]
 800de8a:	461a      	mov	r2, r3
 800de8c:	4613      	mov	r3, r2
 800de8e:	009b      	lsls	r3, r3, #2
 800de90:	4413      	add	r3, r2
 800de92:	00db      	lsls	r3, r3, #3
 800de94:	4ac5      	ldr	r2, [pc, #788]	; (800e1ac <UpdateSIGNALSNames+0x350>)
 800de96:	4413      	add	r3, r2
 800de98:	4ac6      	ldr	r2, [pc, #792]	; (800e1b4 <UpdateSIGNALSNames+0x358>)
 800de9a:	6810      	ldr	r0, [r2, #0]
 800de9c:	6018      	str	r0, [r3, #0]
 800de9e:	8892      	ldrh	r2, [r2, #4]
 800dea0:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"UMTPR");
 800dea2:	79fb      	ldrb	r3, [r7, #7]
 800dea4:	1c5a      	adds	r2, r3, #1
 800dea6:	71fa      	strb	r2, [r7, #7]
 800dea8:	461a      	mov	r2, r3
 800deaa:	4613      	mov	r3, r2
 800deac:	009b      	lsls	r3, r3, #2
 800deae:	4413      	add	r3, r2
 800deb0:	00db      	lsls	r3, r3, #3
 800deb2:	4abe      	ldr	r2, [pc, #760]	; (800e1ac <UpdateSIGNALSNames+0x350>)
 800deb4:	4413      	add	r3, r2
 800deb6:	4ac0      	ldr	r2, [pc, #768]	; (800e1b8 <UpdateSIGNALSNames+0x35c>)
 800deb8:	6810      	ldr	r0, [r2, #0]
 800deba:	6018      	str	r0, [r3, #0]
 800debc:	8892      	ldrh	r2, [r2, #4]
 800debe:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"ULTPR");
 800dec0:	79fb      	ldrb	r3, [r7, #7]
 800dec2:	1c5a      	adds	r2, r3, #1
 800dec4:	71fa      	strb	r2, [r7, #7]
 800dec6:	461a      	mov	r2, r3
 800dec8:	4613      	mov	r3, r2
 800deca:	009b      	lsls	r3, r3, #2
 800decc:	4413      	add	r3, r2
 800dece:	00db      	lsls	r3, r3, #3
 800ded0:	4ab6      	ldr	r2, [pc, #728]	; (800e1ac <UpdateSIGNALSNames+0x350>)
 800ded2:	4413      	add	r3, r2
 800ded4:	4ab9      	ldr	r2, [pc, #740]	; (800e1bc <UpdateSIGNALSNames+0x360>)
 800ded6:	6810      	ldr	r0, [r2, #0]
 800ded8:	6018      	str	r0, [r3, #0]
 800deda:	8892      	ldrh	r2, [r2, #4]
 800dedc:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"1ATPR");
 800dede:	79fb      	ldrb	r3, [r7, #7]
 800dee0:	1c5a      	adds	r2, r3, #1
 800dee2:	71fa      	strb	r2, [r7, #7]
 800dee4:	461a      	mov	r2, r3
 800dee6:	4613      	mov	r3, r2
 800dee8:	009b      	lsls	r3, r3, #2
 800deea:	4413      	add	r3, r2
 800deec:	00db      	lsls	r3, r3, #3
 800deee:	4aaf      	ldr	r2, [pc, #700]	; (800e1ac <UpdateSIGNALSNames+0x350>)
 800def0:	4413      	add	r3, r2
 800def2:	4ab3      	ldr	r2, [pc, #716]	; (800e1c0 <UpdateSIGNALSNames+0x364>)
 800def4:	6810      	ldr	r0, [r2, #0]
 800def6:	6018      	str	r0, [r3, #0]
 800def8:	8892      	ldrh	r2, [r2, #4]
 800defa:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"30ATPR");
 800defc:	79fb      	ldrb	r3, [r7, #7]
 800defe:	1c5a      	adds	r2, r3, #1
 800df00:	71fa      	strb	r2, [r7, #7]
 800df02:	461a      	mov	r2, r3
 800df04:	4613      	mov	r3, r2
 800df06:	009b      	lsls	r3, r3, #2
 800df08:	4413      	add	r3, r2
 800df0a:	00db      	lsls	r3, r3, #3
 800df0c:	4aa7      	ldr	r2, [pc, #668]	; (800e1ac <UpdateSIGNALSNames+0x350>)
 800df0e:	4413      	add	r3, r2
 800df10:	4aac      	ldr	r2, [pc, #688]	; (800e1c4 <UpdateSIGNALSNames+0x368>)
 800df12:	6810      	ldr	r0, [r2, #0]
 800df14:	6018      	str	r0, [r3, #0]
 800df16:	8891      	ldrh	r1, [r2, #4]
 800df18:	7992      	ldrb	r2, [r2, #6]
 800df1a:	8099      	strh	r1, [r3, #4]
 800df1c:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"3_4TPR");
 800df1e:	79fb      	ldrb	r3, [r7, #7]
 800df20:	1c5a      	adds	r2, r3, #1
 800df22:	71fa      	strb	r2, [r7, #7]
 800df24:	461a      	mov	r2, r3
 800df26:	4613      	mov	r3, r2
 800df28:	009b      	lsls	r3, r3, #2
 800df2a:	4413      	add	r3, r2
 800df2c:	00db      	lsls	r3, r3, #3
 800df2e:	4a9f      	ldr	r2, [pc, #636]	; (800e1ac <UpdateSIGNALSNames+0x350>)
 800df30:	4413      	add	r3, r2
 800df32:	4aa5      	ldr	r2, [pc, #660]	; (800e1c8 <UpdateSIGNALSNames+0x36c>)
 800df34:	6810      	ldr	r0, [r2, #0]
 800df36:	6018      	str	r0, [r3, #0]
 800df38:	8891      	ldrh	r1, [r2, #4]
 800df3a:	7992      	ldrb	r2, [r2, #6]
 800df3c:	8099      	strh	r1, [r3, #4]
 800df3e:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"6TPR");
 800df40:	79fb      	ldrb	r3, [r7, #7]
 800df42:	1c5a      	adds	r2, r3, #1
 800df44:	71fa      	strb	r2, [r7, #7]
 800df46:	461a      	mov	r2, r3
 800df48:	4613      	mov	r3, r2
 800df4a:	009b      	lsls	r3, r3, #2
 800df4c:	4413      	add	r3, r2
 800df4e:	00db      	lsls	r3, r3, #3
 800df50:	4a96      	ldr	r2, [pc, #600]	; (800e1ac <UpdateSIGNALSNames+0x350>)
 800df52:	4413      	add	r3, r2
 800df54:	4a9d      	ldr	r2, [pc, #628]	; (800e1cc <UpdateSIGNALSNames+0x370>)
 800df56:	6810      	ldr	r0, [r2, #0]
 800df58:	6018      	str	r0, [r3, #0]
 800df5a:	7912      	ldrb	r2, [r2, #4]
 800df5c:	711a      	strb	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"26_28TPR");
 800df5e:	79fb      	ldrb	r3, [r7, #7]
 800df60:	1c5a      	adds	r2, r3, #1
 800df62:	71fa      	strb	r2, [r7, #7]
 800df64:	461a      	mov	r2, r3
 800df66:	4613      	mov	r3, r2
 800df68:	009b      	lsls	r3, r3, #2
 800df6a:	4413      	add	r3, r2
 800df6c:	00db      	lsls	r3, r3, #3
 800df6e:	4a8f      	ldr	r2, [pc, #572]	; (800e1ac <UpdateSIGNALSNames+0x350>)
 800df70:	4413      	add	r3, r2
 800df72:	4997      	ldr	r1, [pc, #604]	; (800e1d0 <UpdateSIGNALSNames+0x374>)
 800df74:	461a      	mov	r2, r3
 800df76:	460b      	mov	r3, r1
 800df78:	cb03      	ldmia	r3!, {r0, r1}
 800df7a:	6010      	str	r0, [r2, #0]
 800df7c:	6051      	str	r1, [r2, #4]
 800df7e:	781b      	ldrb	r3, [r3, #0]
 800df80:	7213      	strb	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"25TPR");
 800df82:	79fb      	ldrb	r3, [r7, #7]
 800df84:	1c5a      	adds	r2, r3, #1
 800df86:	71fa      	strb	r2, [r7, #7]
 800df88:	461a      	mov	r2, r3
 800df8a:	4613      	mov	r3, r2
 800df8c:	009b      	lsls	r3, r3, #2
 800df8e:	4413      	add	r3, r2
 800df90:	00db      	lsls	r3, r3, #3
 800df92:	4a86      	ldr	r2, [pc, #536]	; (800e1ac <UpdateSIGNALSNames+0x350>)
 800df94:	4413      	add	r3, r2
 800df96:	4a8f      	ldr	r2, [pc, #572]	; (800e1d4 <UpdateSIGNALSNames+0x378>)
 800df98:	6810      	ldr	r0, [r2, #0]
 800df9a:	6018      	str	r0, [r3, #0]
 800df9c:	8892      	ldrh	r2, [r2, #4]
 800df9e:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D1_DECR");
 800dfa0:	79fb      	ldrb	r3, [r7, #7]
 800dfa2:	1c5a      	adds	r2, r3, #1
 800dfa4:	71fa      	strb	r2, [r7, #7]
 800dfa6:	461a      	mov	r2, r3
 800dfa8:	4613      	mov	r3, r2
 800dfaa:	009b      	lsls	r3, r3, #2
 800dfac:	4413      	add	r3, r2
 800dfae:	00db      	lsls	r3, r3, #3
 800dfb0:	4a7e      	ldr	r2, [pc, #504]	; (800e1ac <UpdateSIGNALSNames+0x350>)
 800dfb2:	4413      	add	r3, r2
 800dfb4:	4988      	ldr	r1, [pc, #544]	; (800e1d8 <UpdateSIGNALSNames+0x37c>)
 800dfb6:	461a      	mov	r2, r3
 800dfb8:	460b      	mov	r3, r1
 800dfba:	cb03      	ldmia	r3!, {r0, r1}
 800dfbc:	6010      	str	r0, [r2, #0]
 800dfbe:	6051      	str	r1, [r2, #4]
 800dfc0:	881b      	ldrh	r3, [r3, #0]
 800dfc2:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D1_HHECR");
 800dfc4:	79fb      	ldrb	r3, [r7, #7]
 800dfc6:	1c5a      	adds	r2, r3, #1
 800dfc8:	71fa      	strb	r2, [r7, #7]
 800dfca:	461a      	mov	r2, r3
 800dfcc:	4613      	mov	r3, r2
 800dfce:	009b      	lsls	r3, r3, #2
 800dfd0:	4413      	add	r3, r2
 800dfd2:	00db      	lsls	r3, r3, #3
 800dfd4:	4a75      	ldr	r2, [pc, #468]	; (800e1ac <UpdateSIGNALSNames+0x350>)
 800dfd6:	4413      	add	r3, r2
 800dfd8:	4980      	ldr	r1, [pc, #512]	; (800e1dc <UpdateSIGNALSNames+0x380>)
 800dfda:	461a      	mov	r2, r3
 800dfdc:	460b      	mov	r3, r1
 800dfde:	cb03      	ldmia	r3!, {r0, r1}
 800dfe0:	6010      	str	r0, [r2, #0]
 800dfe2:	6051      	str	r1, [r2, #4]
 800dfe4:	8819      	ldrh	r1, [r3, #0]
 800dfe6:	789b      	ldrb	r3, [r3, #2]
 800dfe8:	8111      	strh	r1, [r2, #8]
 800dfea:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D1_HECR");
 800dfec:	79fb      	ldrb	r3, [r7, #7]
 800dfee:	1c5a      	adds	r2, r3, #1
 800dff0:	71fa      	strb	r2, [r7, #7]
 800dff2:	461a      	mov	r2, r3
 800dff4:	4613      	mov	r3, r2
 800dff6:	009b      	lsls	r3, r3, #2
 800dff8:	4413      	add	r3, r2
 800dffa:	00db      	lsls	r3, r3, #3
 800dffc:	4a6b      	ldr	r2, [pc, #428]	; (800e1ac <UpdateSIGNALSNames+0x350>)
 800dffe:	4413      	add	r3, r2
 800e000:	4977      	ldr	r1, [pc, #476]	; (800e1e0 <UpdateSIGNALSNames+0x384>)
 800e002:	461a      	mov	r2, r3
 800e004:	460b      	mov	r3, r1
 800e006:	cb03      	ldmia	r3!, {r0, r1}
 800e008:	6010      	str	r0, [r2, #0]
 800e00a:	6051      	str	r1, [r2, #4]
 800e00c:	881b      	ldrh	r3, [r3, #0]
 800e00e:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D2_DECR");
 800e010:	79fb      	ldrb	r3, [r7, #7]
 800e012:	1c5a      	adds	r2, r3, #1
 800e014:	71fa      	strb	r2, [r7, #7]
 800e016:	461a      	mov	r2, r3
 800e018:	4613      	mov	r3, r2
 800e01a:	009b      	lsls	r3, r3, #2
 800e01c:	4413      	add	r3, r2
 800e01e:	00db      	lsls	r3, r3, #3
 800e020:	4a62      	ldr	r2, [pc, #392]	; (800e1ac <UpdateSIGNALSNames+0x350>)
 800e022:	4413      	add	r3, r2
 800e024:	496f      	ldr	r1, [pc, #444]	; (800e1e4 <UpdateSIGNALSNames+0x388>)
 800e026:	461a      	mov	r2, r3
 800e028:	460b      	mov	r3, r1
 800e02a:	cb03      	ldmia	r3!, {r0, r1}
 800e02c:	6010      	str	r0, [r2, #0]
 800e02e:	6051      	str	r1, [r2, #4]
 800e030:	881b      	ldrh	r3, [r3, #0]
 800e032:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D2_HHECR");
 800e034:	79fb      	ldrb	r3, [r7, #7]
 800e036:	1c5a      	adds	r2, r3, #1
 800e038:	71fa      	strb	r2, [r7, #7]
 800e03a:	461a      	mov	r2, r3
 800e03c:	4613      	mov	r3, r2
 800e03e:	009b      	lsls	r3, r3, #2
 800e040:	4413      	add	r3, r2
 800e042:	00db      	lsls	r3, r3, #3
 800e044:	4a59      	ldr	r2, [pc, #356]	; (800e1ac <UpdateSIGNALSNames+0x350>)
 800e046:	4413      	add	r3, r2
 800e048:	4967      	ldr	r1, [pc, #412]	; (800e1e8 <UpdateSIGNALSNames+0x38c>)
 800e04a:	461a      	mov	r2, r3
 800e04c:	460b      	mov	r3, r1
 800e04e:	cb03      	ldmia	r3!, {r0, r1}
 800e050:	6010      	str	r0, [r2, #0]
 800e052:	6051      	str	r1, [r2, #4]
 800e054:	8819      	ldrh	r1, [r3, #0]
 800e056:	789b      	ldrb	r3, [r3, #2]
 800e058:	8111      	strh	r1, [r2, #8]
 800e05a:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D2_HECR");
 800e05c:	79fb      	ldrb	r3, [r7, #7]
 800e05e:	1c5a      	adds	r2, r3, #1
 800e060:	71fa      	strb	r2, [r7, #7]
 800e062:	461a      	mov	r2, r3
 800e064:	4613      	mov	r3, r2
 800e066:	009b      	lsls	r3, r3, #2
 800e068:	4413      	add	r3, r2
 800e06a:	00db      	lsls	r3, r3, #3
 800e06c:	4a4f      	ldr	r2, [pc, #316]	; (800e1ac <UpdateSIGNALSNames+0x350>)
 800e06e:	4413      	add	r3, r2
 800e070:	495e      	ldr	r1, [pc, #376]	; (800e1ec <UpdateSIGNALSNames+0x390>)
 800e072:	461a      	mov	r2, r3
 800e074:	460b      	mov	r3, r1
 800e076:	cb03      	ldmia	r3!, {r0, r1}
 800e078:	6010      	str	r0, [r2, #0]
 800e07a:	6051      	str	r1, [r2, #4]
 800e07c:	881b      	ldrh	r3, [r3, #0]
 800e07e:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1DECR");
 800e080:	79fb      	ldrb	r3, [r7, #7]
 800e082:	1c5a      	adds	r2, r3, #1
 800e084:	71fa      	strb	r2, [r7, #7]
 800e086:	461a      	mov	r2, r3
 800e088:	4613      	mov	r3, r2
 800e08a:	009b      	lsls	r3, r3, #2
 800e08c:	4413      	add	r3, r2
 800e08e:	00db      	lsls	r3, r3, #3
 800e090:	4a46      	ldr	r2, [pc, #280]	; (800e1ac <UpdateSIGNALSNames+0x350>)
 800e092:	4413      	add	r3, r2
 800e094:	4a56      	ldr	r2, [pc, #344]	; (800e1f0 <UpdateSIGNALSNames+0x394>)
 800e096:	6810      	ldr	r0, [r2, #0]
 800e098:	6018      	str	r0, [r3, #0]
 800e09a:	8891      	ldrh	r1, [r2, #4]
 800e09c:	7992      	ldrb	r2, [r2, #6]
 800e09e:	8099      	strh	r1, [r3, #4]
 800e0a0:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1HECR");
 800e0a2:	79fb      	ldrb	r3, [r7, #7]
 800e0a4:	1c5a      	adds	r2, r3, #1
 800e0a6:	71fa      	strb	r2, [r7, #7]
 800e0a8:	461a      	mov	r2, r3
 800e0aa:	4613      	mov	r3, r2
 800e0ac:	009b      	lsls	r3, r3, #2
 800e0ae:	4413      	add	r3, r2
 800e0b0:	00db      	lsls	r3, r3, #3
 800e0b2:	4a3e      	ldr	r2, [pc, #248]	; (800e1ac <UpdateSIGNALSNames+0x350>)
 800e0b4:	4413      	add	r3, r2
 800e0b6:	4a4f      	ldr	r2, [pc, #316]	; (800e1f4 <UpdateSIGNALSNames+0x398>)
 800e0b8:	6810      	ldr	r0, [r2, #0]
 800e0ba:	6018      	str	r0, [r3, #0]
 800e0bc:	8891      	ldrh	r1, [r2, #4]
 800e0be:	7992      	ldrb	r2, [r2, #6]
 800e0c0:	8099      	strh	r1, [r3, #4]
 800e0c2:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1RECR");
 800e0c4:	79fb      	ldrb	r3, [r7, #7]
 800e0c6:	1c5a      	adds	r2, r3, #1
 800e0c8:	71fa      	strb	r2, [r7, #7]
 800e0ca:	461a      	mov	r2, r3
 800e0cc:	4613      	mov	r3, r2
 800e0ce:	009b      	lsls	r3, r3, #2
 800e0d0:	4413      	add	r3, r2
 800e0d2:	00db      	lsls	r3, r3, #3
 800e0d4:	4a35      	ldr	r2, [pc, #212]	; (800e1ac <UpdateSIGNALSNames+0x350>)
 800e0d6:	4413      	add	r3, r2
 800e0d8:	4a47      	ldr	r2, [pc, #284]	; (800e1f8 <UpdateSIGNALSNames+0x39c>)
 800e0da:	6810      	ldr	r0, [r2, #0]
 800e0dc:	6018      	str	r0, [r3, #0]
 800e0de:	8891      	ldrh	r1, [r2, #4]
 800e0e0:	7992      	ldrb	r2, [r2, #6]
 800e0e2:	8099      	strh	r1, [r3, #4]
 800e0e4:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1UECR");
 800e0e6:	79fb      	ldrb	r3, [r7, #7]
 800e0e8:	1c5a      	adds	r2, r3, #1
 800e0ea:	71fa      	strb	r2, [r7, #7]
 800e0ec:	461a      	mov	r2, r3
 800e0ee:	4613      	mov	r3, r2
 800e0f0:	009b      	lsls	r3, r3, #2
 800e0f2:	4413      	add	r3, r2
 800e0f4:	00db      	lsls	r3, r3, #3
 800e0f6:	4a2d      	ldr	r2, [pc, #180]	; (800e1ac <UpdateSIGNALSNames+0x350>)
 800e0f8:	4413      	add	r3, r2
 800e0fa:	4a40      	ldr	r2, [pc, #256]	; (800e1fc <UpdateSIGNALSNames+0x3a0>)
 800e0fc:	6810      	ldr	r0, [r2, #0]
 800e0fe:	6018      	str	r0, [r3, #0]
 800e100:	8891      	ldrh	r1, [r2, #4]
 800e102:	7992      	ldrb	r2, [r2, #6]
 800e104:	8099      	strh	r1, [r3, #4]
 800e106:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1A_COHECR");
 800e108:	79fb      	ldrb	r3, [r7, #7]
 800e10a:	1c5a      	adds	r2, r3, #1
 800e10c:	71fa      	strb	r2, [r7, #7]
 800e10e:	461a      	mov	r2, r3
 800e110:	4613      	mov	r3, r2
 800e112:	009b      	lsls	r3, r3, #2
 800e114:	4413      	add	r3, r2
 800e116:	00db      	lsls	r3, r3, #3
 800e118:	4a24      	ldr	r2, [pc, #144]	; (800e1ac <UpdateSIGNALSNames+0x350>)
 800e11a:	4413      	add	r3, r2
 800e11c:	4938      	ldr	r1, [pc, #224]	; (800e200 <UpdateSIGNALSNames+0x3a4>)
 800e11e:	461a      	mov	r2, r3
 800e120:	460b      	mov	r3, r1
 800e122:	cb03      	ldmia	r3!, {r0, r1}
 800e124:	6010      	str	r0, [r2, #0]
 800e126:	6051      	str	r1, [r2, #4]
 800e128:	8819      	ldrh	r1, [r3, #0]
 800e12a:	789b      	ldrb	r3, [r3, #2]
 800e12c:	8111      	strh	r1, [r2, #8]
 800e12e:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S3DECR");
 800e130:	79fb      	ldrb	r3, [r7, #7]
 800e132:	1c5a      	adds	r2, r3, #1
 800e134:	71fa      	strb	r2, [r7, #7]
 800e136:	461a      	mov	r2, r3
 800e138:	4613      	mov	r3, r2
 800e13a:	009b      	lsls	r3, r3, #2
 800e13c:	4413      	add	r3, r2
 800e13e:	00db      	lsls	r3, r3, #3
 800e140:	4a1a      	ldr	r2, [pc, #104]	; (800e1ac <UpdateSIGNALSNames+0x350>)
 800e142:	4413      	add	r3, r2
 800e144:	4a2f      	ldr	r2, [pc, #188]	; (800e204 <UpdateSIGNALSNames+0x3a8>)
 800e146:	6810      	ldr	r0, [r2, #0]
 800e148:	6018      	str	r0, [r3, #0]
 800e14a:	8891      	ldrh	r1, [r2, #4]
 800e14c:	7992      	ldrb	r2, [r2, #6]
 800e14e:	8099      	strh	r1, [r3, #4]
 800e150:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S3HECR");
 800e152:	79fb      	ldrb	r3, [r7, #7]
 800e154:	1c5a      	adds	r2, r3, #1
 800e156:	71fa      	strb	r2, [r7, #7]
 800e158:	461a      	mov	r2, r3
 800e15a:	4613      	mov	r3, r2
 800e15c:	009b      	lsls	r3, r3, #2
 800e15e:	4413      	add	r3, r2
 800e160:	00db      	lsls	r3, r3, #3
 800e162:	4a12      	ldr	r2, [pc, #72]	; (800e1ac <UpdateSIGNALSNames+0x350>)
 800e164:	4413      	add	r3, r2
 800e166:	4a28      	ldr	r2, [pc, #160]	; (800e208 <UpdateSIGNALSNames+0x3ac>)
 800e168:	6810      	ldr	r0, [r2, #0]
 800e16a:	6018      	str	r0, [r3, #0]
 800e16c:	8891      	ldrh	r1, [r2, #4]
 800e16e:	7992      	ldrb	r2, [r2, #6]
 800e170:	8099      	strh	r1, [r3, #4]
 800e172:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S3RECR");
 800e174:	79fb      	ldrb	r3, [r7, #7]
 800e176:	1c5a      	adds	r2, r3, #1
 800e178:	71fa      	strb	r2, [r7, #7]
 800e17a:	461a      	mov	r2, r3
 800e17c:	4613      	mov	r3, r2
 800e17e:	009b      	lsls	r3, r3, #2
 800e180:	4413      	add	r3, r2
 800e182:	00db      	lsls	r3, r3, #3
 800e184:	4a09      	ldr	r2, [pc, #36]	; (800e1ac <UpdateSIGNALSNames+0x350>)
 800e186:	4413      	add	r3, r2
 800e188:	4a20      	ldr	r2, [pc, #128]	; (800e20c <UpdateSIGNALSNames+0x3b0>)
 800e18a:	6810      	ldr	r0, [r2, #0]
 800e18c:	6018      	str	r0, [r3, #0]
 800e18e:	8891      	ldrh	r1, [r2, #4]
 800e190:	7992      	ldrb	r2, [r2, #6]
 800e192:	8099      	strh	r1, [r3, #4]
 800e194:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S4HECR");
 800e196:	79fb      	ldrb	r3, [r7, #7]
 800e198:	1c5a      	adds	r2, r3, #1
 800e19a:	71fa      	strb	r2, [r7, #7]
 800e19c:	461a      	mov	r2, r3
 800e19e:	4613      	mov	r3, r2
 800e1a0:	009b      	lsls	r3, r3, #2
 800e1a2:	4413      	add	r3, r2
 800e1a4:	00db      	lsls	r3, r3, #3
 800e1a6:	4a01      	ldr	r2, [pc, #4]	; (800e1ac <UpdateSIGNALSNames+0x350>)
 800e1a8:	4413      	add	r3, r2
 800e1aa:	e031      	b.n	800e210 <UpdateSIGNALSNames+0x3b4>
 800e1ac:	20003cc8 	.word	0x20003cc8
 800e1b0:	0802640c 	.word	0x0802640c
 800e1b4:	08026414 	.word	0x08026414
 800e1b8:	0802641c 	.word	0x0802641c
 800e1bc:	08026424 	.word	0x08026424
 800e1c0:	0802642c 	.word	0x0802642c
 800e1c4:	08026434 	.word	0x08026434
 800e1c8:	0802643c 	.word	0x0802643c
 800e1cc:	08026444 	.word	0x08026444
 800e1d0:	0802644c 	.word	0x0802644c
 800e1d4:	08026458 	.word	0x08026458
 800e1d8:	08026460 	.word	0x08026460
 800e1dc:	0802646c 	.word	0x0802646c
 800e1e0:	08026478 	.word	0x08026478
 800e1e4:	08026484 	.word	0x08026484
 800e1e8:	08026490 	.word	0x08026490
 800e1ec:	0802649c 	.word	0x0802649c
 800e1f0:	080264a8 	.word	0x080264a8
 800e1f4:	080264b0 	.word	0x080264b0
 800e1f8:	080264b8 	.word	0x080264b8
 800e1fc:	080264c0 	.word	0x080264c0
 800e200:	080264c8 	.word	0x080264c8
 800e204:	080264d4 	.word	0x080264d4
 800e208:	080264dc 	.word	0x080264dc
 800e20c:	080264e4 	.word	0x080264e4
 800e210:	4acd      	ldr	r2, [pc, #820]	; (800e548 <UpdateSIGNALSNames+0x6ec>)
 800e212:	6810      	ldr	r0, [r2, #0]
 800e214:	6018      	str	r0, [r3, #0]
 800e216:	8891      	ldrh	r1, [r2, #4]
 800e218:	7992      	ldrb	r2, [r2, #6]
 800e21a:	8099      	strh	r1, [r3, #4]
 800e21c:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S4RECR");
 800e21e:	79fb      	ldrb	r3, [r7, #7]
 800e220:	1c5a      	adds	r2, r3, #1
 800e222:	71fa      	strb	r2, [r7, #7]
 800e224:	461a      	mov	r2, r3
 800e226:	4613      	mov	r3, r2
 800e228:	009b      	lsls	r3, r3, #2
 800e22a:	4413      	add	r3, r2
 800e22c:	00db      	lsls	r3, r3, #3
 800e22e:	4ac7      	ldr	r2, [pc, #796]	; (800e54c <UpdateSIGNALSNames+0x6f0>)
 800e230:	4413      	add	r3, r2
 800e232:	4ac7      	ldr	r2, [pc, #796]	; (800e550 <UpdateSIGNALSNames+0x6f4>)
 800e234:	6810      	ldr	r0, [r2, #0]
 800e236:	6018      	str	r0, [r3, #0]
 800e238:	8891      	ldrh	r1, [r2, #4]
 800e23a:	7992      	ldrb	r2, [r2, #6]
 800e23c:	8099      	strh	r1, [r3, #4]
 800e23e:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S6DECR");
 800e240:	79fb      	ldrb	r3, [r7, #7]
 800e242:	1c5a      	adds	r2, r3, #1
 800e244:	71fa      	strb	r2, [r7, #7]
 800e246:	461a      	mov	r2, r3
 800e248:	4613      	mov	r3, r2
 800e24a:	009b      	lsls	r3, r3, #2
 800e24c:	4413      	add	r3, r2
 800e24e:	00db      	lsls	r3, r3, #3
 800e250:	4abe      	ldr	r2, [pc, #760]	; (800e54c <UpdateSIGNALSNames+0x6f0>)
 800e252:	4413      	add	r3, r2
 800e254:	4abf      	ldr	r2, [pc, #764]	; (800e554 <UpdateSIGNALSNames+0x6f8>)
 800e256:	6810      	ldr	r0, [r2, #0]
 800e258:	6018      	str	r0, [r3, #0]
 800e25a:	8891      	ldrh	r1, [r2, #4]
 800e25c:	7992      	ldrb	r2, [r2, #6]
 800e25e:	8099      	strh	r1, [r3, #4]
 800e260:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S6RECR");
 800e262:	79fb      	ldrb	r3, [r7, #7]
 800e264:	1c5a      	adds	r2, r3, #1
 800e266:	71fa      	strb	r2, [r7, #7]
 800e268:	461a      	mov	r2, r3
 800e26a:	4613      	mov	r3, r2
 800e26c:	009b      	lsls	r3, r3, #2
 800e26e:	4413      	add	r3, r2
 800e270:	00db      	lsls	r3, r3, #3
 800e272:	4ab6      	ldr	r2, [pc, #728]	; (800e54c <UpdateSIGNALSNames+0x6f0>)
 800e274:	4413      	add	r3, r2
 800e276:	4ab8      	ldr	r2, [pc, #736]	; (800e558 <UpdateSIGNALSNames+0x6fc>)
 800e278:	6810      	ldr	r0, [r2, #0]
 800e27a:	6018      	str	r0, [r3, #0]
 800e27c:	8891      	ldrh	r1, [r2, #4]
 800e27e:	7992      	ldrb	r2, [r2, #6]
 800e280:	8099      	strh	r1, [r3, #4]
 800e282:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S25DECR");
 800e284:	79fb      	ldrb	r3, [r7, #7]
 800e286:	1c5a      	adds	r2, r3, #1
 800e288:	71fa      	strb	r2, [r7, #7]
 800e28a:	461a      	mov	r2, r3
 800e28c:	4613      	mov	r3, r2
 800e28e:	009b      	lsls	r3, r3, #2
 800e290:	4413      	add	r3, r2
 800e292:	00db      	lsls	r3, r3, #3
 800e294:	4aad      	ldr	r2, [pc, #692]	; (800e54c <UpdateSIGNALSNames+0x6f0>)
 800e296:	4413      	add	r3, r2
 800e298:	49b0      	ldr	r1, [pc, #704]	; (800e55c <UpdateSIGNALSNames+0x700>)
 800e29a:	461a      	mov	r2, r3
 800e29c:	460b      	mov	r3, r1
 800e29e:	cb03      	ldmia	r3!, {r0, r1}
 800e2a0:	6010      	str	r0, [r2, #0]
 800e2a2:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S25RECR");
 800e2a4:	79fb      	ldrb	r3, [r7, #7]
 800e2a6:	1c5a      	adds	r2, r3, #1
 800e2a8:	71fa      	strb	r2, [r7, #7]
 800e2aa:	461a      	mov	r2, r3
 800e2ac:	4613      	mov	r3, r2
 800e2ae:	009b      	lsls	r3, r3, #2
 800e2b0:	4413      	add	r3, r2
 800e2b2:	00db      	lsls	r3, r3, #3
 800e2b4:	4aa5      	ldr	r2, [pc, #660]	; (800e54c <UpdateSIGNALSNames+0x6f0>)
 800e2b6:	4413      	add	r3, r2
 800e2b8:	49a9      	ldr	r1, [pc, #676]	; (800e560 <UpdateSIGNALSNames+0x704>)
 800e2ba:	461a      	mov	r2, r3
 800e2bc:	460b      	mov	r3, r1
 800e2be:	cb03      	ldmia	r3!, {r0, r1}
 800e2c0:	6010      	str	r0, [r2, #0]
 800e2c2:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S26HECR");
 800e2c4:	79fb      	ldrb	r3, [r7, #7]
 800e2c6:	1c5a      	adds	r2, r3, #1
 800e2c8:	71fa      	strb	r2, [r7, #7]
 800e2ca:	461a      	mov	r2, r3
 800e2cc:	4613      	mov	r3, r2
 800e2ce:	009b      	lsls	r3, r3, #2
 800e2d0:	4413      	add	r3, r2
 800e2d2:	00db      	lsls	r3, r3, #3
 800e2d4:	4a9d      	ldr	r2, [pc, #628]	; (800e54c <UpdateSIGNALSNames+0x6f0>)
 800e2d6:	4413      	add	r3, r2
 800e2d8:	49a2      	ldr	r1, [pc, #648]	; (800e564 <UpdateSIGNALSNames+0x708>)
 800e2da:	461a      	mov	r2, r3
 800e2dc:	460b      	mov	r3, r1
 800e2de:	cb03      	ldmia	r3!, {r0, r1}
 800e2e0:	6010      	str	r0, [r2, #0]
 800e2e2:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S26RECR");
 800e2e4:	79fb      	ldrb	r3, [r7, #7]
 800e2e6:	1c5a      	adds	r2, r3, #1
 800e2e8:	71fa      	strb	r2, [r7, #7]
 800e2ea:	461a      	mov	r2, r3
 800e2ec:	4613      	mov	r3, r2
 800e2ee:	009b      	lsls	r3, r3, #2
 800e2f0:	4413      	add	r3, r2
 800e2f2:	00db      	lsls	r3, r3, #3
 800e2f4:	4a95      	ldr	r2, [pc, #596]	; (800e54c <UpdateSIGNALSNames+0x6f0>)
 800e2f6:	4413      	add	r3, r2
 800e2f8:	499b      	ldr	r1, [pc, #620]	; (800e568 <UpdateSIGNALSNames+0x70c>)
 800e2fa:	461a      	mov	r2, r3
 800e2fc:	460b      	mov	r3, r1
 800e2fe:	cb03      	ldmia	r3!, {r0, r1}
 800e300:	6010      	str	r0, [r2, #0]
 800e302:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S27HECR");
 800e304:	79fb      	ldrb	r3, [r7, #7]
 800e306:	1c5a      	adds	r2, r3, #1
 800e308:	71fa      	strb	r2, [r7, #7]
 800e30a:	461a      	mov	r2, r3
 800e30c:	4613      	mov	r3, r2
 800e30e:	009b      	lsls	r3, r3, #2
 800e310:	4413      	add	r3, r2
 800e312:	00db      	lsls	r3, r3, #3
 800e314:	4a8d      	ldr	r2, [pc, #564]	; (800e54c <UpdateSIGNALSNames+0x6f0>)
 800e316:	4413      	add	r3, r2
 800e318:	4994      	ldr	r1, [pc, #592]	; (800e56c <UpdateSIGNALSNames+0x710>)
 800e31a:	461a      	mov	r2, r3
 800e31c:	460b      	mov	r3, r1
 800e31e:	cb03      	ldmia	r3!, {r0, r1}
 800e320:	6010      	str	r0, [r2, #0]
 800e322:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S27RECR");
 800e324:	79fb      	ldrb	r3, [r7, #7]
 800e326:	1c5a      	adds	r2, r3, #1
 800e328:	71fa      	strb	r2, [r7, #7]
 800e32a:	461a      	mov	r2, r3
 800e32c:	4613      	mov	r3, r2
 800e32e:	009b      	lsls	r3, r3, #2
 800e330:	4413      	add	r3, r2
 800e332:	00db      	lsls	r3, r3, #3
 800e334:	4a85      	ldr	r2, [pc, #532]	; (800e54c <UpdateSIGNALSNames+0x6f0>)
 800e336:	4413      	add	r3, r2
 800e338:	498d      	ldr	r1, [pc, #564]	; (800e570 <UpdateSIGNALSNames+0x714>)
 800e33a:	461a      	mov	r2, r3
 800e33c:	460b      	mov	r3, r1
 800e33e:	cb03      	ldmia	r3!, {r0, r1}
 800e340:	6010      	str	r0, [r2, #0]
 800e342:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S28DECR");
 800e344:	79fb      	ldrb	r3, [r7, #7]
 800e346:	1c5a      	adds	r2, r3, #1
 800e348:	71fa      	strb	r2, [r7, #7]
 800e34a:	461a      	mov	r2, r3
 800e34c:	4613      	mov	r3, r2
 800e34e:	009b      	lsls	r3, r3, #2
 800e350:	4413      	add	r3, r2
 800e352:	00db      	lsls	r3, r3, #3
 800e354:	4a7d      	ldr	r2, [pc, #500]	; (800e54c <UpdateSIGNALSNames+0x6f0>)
 800e356:	4413      	add	r3, r2
 800e358:	4986      	ldr	r1, [pc, #536]	; (800e574 <UpdateSIGNALSNames+0x718>)
 800e35a:	461a      	mov	r2, r3
 800e35c:	460b      	mov	r3, r1
 800e35e:	cb03      	ldmia	r3!, {r0, r1}
 800e360:	6010      	str	r0, [r2, #0]
 800e362:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S28HECR");
 800e364:	79fb      	ldrb	r3, [r7, #7]
 800e366:	1c5a      	adds	r2, r3, #1
 800e368:	71fa      	strb	r2, [r7, #7]
 800e36a:	461a      	mov	r2, r3
 800e36c:	4613      	mov	r3, r2
 800e36e:	009b      	lsls	r3, r3, #2
 800e370:	4413      	add	r3, r2
 800e372:	00db      	lsls	r3, r3, #3
 800e374:	4a75      	ldr	r2, [pc, #468]	; (800e54c <UpdateSIGNALSNames+0x6f0>)
 800e376:	4413      	add	r3, r2
 800e378:	497f      	ldr	r1, [pc, #508]	; (800e578 <UpdateSIGNALSNames+0x71c>)
 800e37a:	461a      	mov	r2, r3
 800e37c:	460b      	mov	r3, r1
 800e37e:	cb03      	ldmia	r3!, {r0, r1}
 800e380:	6010      	str	r0, [r2, #0]
 800e382:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S28RECR");
 800e384:	79fb      	ldrb	r3, [r7, #7]
 800e386:	1c5a      	adds	r2, r3, #1
 800e388:	71fa      	strb	r2, [r7, #7]
 800e38a:	461a      	mov	r2, r3
 800e38c:	4613      	mov	r3, r2
 800e38e:	009b      	lsls	r3, r3, #2
 800e390:	4413      	add	r3, r2
 800e392:	00db      	lsls	r3, r3, #3
 800e394:	4a6d      	ldr	r2, [pc, #436]	; (800e54c <UpdateSIGNALSNames+0x6f0>)
 800e396:	4413      	add	r3, r2
 800e398:	4978      	ldr	r1, [pc, #480]	; (800e57c <UpdateSIGNALSNames+0x720>)
 800e39a:	461a      	mov	r2, r3
 800e39c:	460b      	mov	r3, r1
 800e39e:	cb03      	ldmia	r3!, {r0, r1}
 800e3a0:	6010      	str	r0, [r2, #0]
 800e3a2:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30DECR");
 800e3a4:	79fb      	ldrb	r3, [r7, #7]
 800e3a6:	1c5a      	adds	r2, r3, #1
 800e3a8:	71fa      	strb	r2, [r7, #7]
 800e3aa:	461a      	mov	r2, r3
 800e3ac:	4613      	mov	r3, r2
 800e3ae:	009b      	lsls	r3, r3, #2
 800e3b0:	4413      	add	r3, r2
 800e3b2:	00db      	lsls	r3, r3, #3
 800e3b4:	4a65      	ldr	r2, [pc, #404]	; (800e54c <UpdateSIGNALSNames+0x6f0>)
 800e3b6:	4413      	add	r3, r2
 800e3b8:	4971      	ldr	r1, [pc, #452]	; (800e580 <UpdateSIGNALSNames+0x724>)
 800e3ba:	461a      	mov	r2, r3
 800e3bc:	460b      	mov	r3, r1
 800e3be:	cb03      	ldmia	r3!, {r0, r1}
 800e3c0:	6010      	str	r0, [r2, #0]
 800e3c2:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30HECR");
 800e3c4:	79fb      	ldrb	r3, [r7, #7]
 800e3c6:	1c5a      	adds	r2, r3, #1
 800e3c8:	71fa      	strb	r2, [r7, #7]
 800e3ca:	461a      	mov	r2, r3
 800e3cc:	4613      	mov	r3, r2
 800e3ce:	009b      	lsls	r3, r3, #2
 800e3d0:	4413      	add	r3, r2
 800e3d2:	00db      	lsls	r3, r3, #3
 800e3d4:	4a5d      	ldr	r2, [pc, #372]	; (800e54c <UpdateSIGNALSNames+0x6f0>)
 800e3d6:	4413      	add	r3, r2
 800e3d8:	496a      	ldr	r1, [pc, #424]	; (800e584 <UpdateSIGNALSNames+0x728>)
 800e3da:	461a      	mov	r2, r3
 800e3dc:	460b      	mov	r3, r1
 800e3de:	cb03      	ldmia	r3!, {r0, r1}
 800e3e0:	6010      	str	r0, [r2, #0]
 800e3e2:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30RECR");
 800e3e4:	79fb      	ldrb	r3, [r7, #7]
 800e3e6:	1c5a      	adds	r2, r3, #1
 800e3e8:	71fa      	strb	r2, [r7, #7]
 800e3ea:	461a      	mov	r2, r3
 800e3ec:	4613      	mov	r3, r2
 800e3ee:	009b      	lsls	r3, r3, #2
 800e3f0:	4413      	add	r3, r2
 800e3f2:	00db      	lsls	r3, r3, #3
 800e3f4:	4a55      	ldr	r2, [pc, #340]	; (800e54c <UpdateSIGNALSNames+0x6f0>)
 800e3f6:	4413      	add	r3, r2
 800e3f8:	4963      	ldr	r1, [pc, #396]	; (800e588 <UpdateSIGNALSNames+0x72c>)
 800e3fa:	461a      	mov	r2, r3
 800e3fc:	460b      	mov	r3, r1
 800e3fe:	cb03      	ldmia	r3!, {r0, r1}
 800e400:	6010      	str	r0, [r2, #0]
 800e402:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30UECR");
 800e404:	79fb      	ldrb	r3, [r7, #7]
 800e406:	1c5a      	adds	r2, r3, #1
 800e408:	71fa      	strb	r2, [r7, #7]
 800e40a:	461a      	mov	r2, r3
 800e40c:	4613      	mov	r3, r2
 800e40e:	009b      	lsls	r3, r3, #2
 800e410:	4413      	add	r3, r2
 800e412:	00db      	lsls	r3, r3, #3
 800e414:	4a4d      	ldr	r2, [pc, #308]	; (800e54c <UpdateSIGNALSNames+0x6f0>)
 800e416:	4413      	add	r3, r2
 800e418:	495c      	ldr	r1, [pc, #368]	; (800e58c <UpdateSIGNALSNames+0x730>)
 800e41a:	461a      	mov	r2, r3
 800e41c:	460b      	mov	r3, r1
 800e41e:	cb03      	ldmia	r3!, {r0, r1}
 800e420:	6010      	str	r0, [r2, #0]
 800e422:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30A_COHECR");
 800e424:	79fb      	ldrb	r3, [r7, #7]
 800e426:	1c5a      	adds	r2, r3, #1
 800e428:	71fa      	strb	r2, [r7, #7]
 800e42a:	461a      	mov	r2, r3
 800e42c:	4613      	mov	r3, r2
 800e42e:	009b      	lsls	r3, r3, #2
 800e430:	4413      	add	r3, r2
 800e432:	00db      	lsls	r3, r3, #3
 800e434:	4a45      	ldr	r2, [pc, #276]	; (800e54c <UpdateSIGNALSNames+0x6f0>)
 800e436:	4413      	add	r3, r2
 800e438:	4a55      	ldr	r2, [pc, #340]	; (800e590 <UpdateSIGNALSNames+0x734>)
 800e43a:	461c      	mov	r4, r3
 800e43c:	4613      	mov	r3, r2
 800e43e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e440:	6020      	str	r0, [r4, #0]
 800e442:	6061      	str	r1, [r4, #4]
 800e444:	60a2      	str	r2, [r4, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D2_DECR");
 800e446:	79fb      	ldrb	r3, [r7, #7]
 800e448:	1c5a      	adds	r2, r3, #1
 800e44a:	71fa      	strb	r2, [r7, #7]
 800e44c:	461a      	mov	r2, r3
 800e44e:	4613      	mov	r3, r2
 800e450:	009b      	lsls	r3, r3, #2
 800e452:	4413      	add	r3, r2
 800e454:	00db      	lsls	r3, r3, #3
 800e456:	4a3d      	ldr	r2, [pc, #244]	; (800e54c <UpdateSIGNALSNames+0x6f0>)
 800e458:	4413      	add	r3, r2
 800e45a:	494e      	ldr	r1, [pc, #312]	; (800e594 <UpdateSIGNALSNames+0x738>)
 800e45c:	461a      	mov	r2, r3
 800e45e:	460b      	mov	r3, r1
 800e460:	cb03      	ldmia	r3!, {r0, r1}
 800e462:	6010      	str	r0, [r2, #0]
 800e464:	6051      	str	r1, [r2, #4]
 800e466:	8819      	ldrh	r1, [r3, #0]
 800e468:	789b      	ldrb	r3, [r3, #2]
 800e46a:	8111      	strh	r1, [r2, #8]
 800e46c:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D2_HHECR");
 800e46e:	79fb      	ldrb	r3, [r7, #7]
 800e470:	1c5a      	adds	r2, r3, #1
 800e472:	71fa      	strb	r2, [r7, #7]
 800e474:	461a      	mov	r2, r3
 800e476:	4613      	mov	r3, r2
 800e478:	009b      	lsls	r3, r3, #2
 800e47a:	4413      	add	r3, r2
 800e47c:	00db      	lsls	r3, r3, #3
 800e47e:	4a33      	ldr	r2, [pc, #204]	; (800e54c <UpdateSIGNALSNames+0x6f0>)
 800e480:	4413      	add	r3, r2
 800e482:	4a45      	ldr	r2, [pc, #276]	; (800e598 <UpdateSIGNALSNames+0x73c>)
 800e484:	461c      	mov	r4, r3
 800e486:	4613      	mov	r3, r2
 800e488:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e48a:	6020      	str	r0, [r4, #0]
 800e48c:	6061      	str	r1, [r4, #4]
 800e48e:	60a2      	str	r2, [r4, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D2_HECR");
 800e490:	79fb      	ldrb	r3, [r7, #7]
 800e492:	1c5a      	adds	r2, r3, #1
 800e494:	71fa      	strb	r2, [r7, #7]
 800e496:	461a      	mov	r2, r3
 800e498:	4613      	mov	r3, r2
 800e49a:	009b      	lsls	r3, r3, #2
 800e49c:	4413      	add	r3, r2
 800e49e:	00db      	lsls	r3, r3, #3
 800e4a0:	4a2a      	ldr	r2, [pc, #168]	; (800e54c <UpdateSIGNALSNames+0x6f0>)
 800e4a2:	4413      	add	r3, r2
 800e4a4:	493d      	ldr	r1, [pc, #244]	; (800e59c <UpdateSIGNALSNames+0x740>)
 800e4a6:	461a      	mov	r2, r3
 800e4a8:	460b      	mov	r3, r1
 800e4aa:	cb03      	ldmia	r3!, {r0, r1}
 800e4ac:	6010      	str	r0, [r2, #0]
 800e4ae:	6051      	str	r1, [r2, #4]
 800e4b0:	8819      	ldrh	r1, [r3, #0]
 800e4b2:	789b      	ldrb	r3, [r3, #2]
 800e4b4:	8111      	strh	r1, [r2, #8]
 800e4b6:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D1_DECR");
 800e4b8:	79fb      	ldrb	r3, [r7, #7]
 800e4ba:	1c5a      	adds	r2, r3, #1
 800e4bc:	71fa      	strb	r2, [r7, #7]
 800e4be:	461a      	mov	r2, r3
 800e4c0:	4613      	mov	r3, r2
 800e4c2:	009b      	lsls	r3, r3, #2
 800e4c4:	4413      	add	r3, r2
 800e4c6:	00db      	lsls	r3, r3, #3
 800e4c8:	4a20      	ldr	r2, [pc, #128]	; (800e54c <UpdateSIGNALSNames+0x6f0>)
 800e4ca:	4413      	add	r3, r2
 800e4cc:	4934      	ldr	r1, [pc, #208]	; (800e5a0 <UpdateSIGNALSNames+0x744>)
 800e4ce:	461a      	mov	r2, r3
 800e4d0:	460b      	mov	r3, r1
 800e4d2:	cb03      	ldmia	r3!, {r0, r1}
 800e4d4:	6010      	str	r0, [r2, #0]
 800e4d6:	6051      	str	r1, [r2, #4]
 800e4d8:	8819      	ldrh	r1, [r3, #0]
 800e4da:	789b      	ldrb	r3, [r3, #2]
 800e4dc:	8111      	strh	r1, [r2, #8]
 800e4de:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D1_HHECR");
 800e4e0:	79fb      	ldrb	r3, [r7, #7]
 800e4e2:	1c5a      	adds	r2, r3, #1
 800e4e4:	71fa      	strb	r2, [r7, #7]
 800e4e6:	461a      	mov	r2, r3
 800e4e8:	4613      	mov	r3, r2
 800e4ea:	009b      	lsls	r3, r3, #2
 800e4ec:	4413      	add	r3, r2
 800e4ee:	00db      	lsls	r3, r3, #3
 800e4f0:	4a16      	ldr	r2, [pc, #88]	; (800e54c <UpdateSIGNALSNames+0x6f0>)
 800e4f2:	4413      	add	r3, r2
 800e4f4:	4a2b      	ldr	r2, [pc, #172]	; (800e5a4 <UpdateSIGNALSNames+0x748>)
 800e4f6:	461c      	mov	r4, r3
 800e4f8:	4613      	mov	r3, r2
 800e4fa:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e4fc:	6020      	str	r0, [r4, #0]
 800e4fe:	6061      	str	r1, [r4, #4]
 800e500:	60a2      	str	r2, [r4, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D1_HECR");
 800e502:	79fb      	ldrb	r3, [r7, #7]
 800e504:	1c5a      	adds	r2, r3, #1
 800e506:	71fa      	strb	r2, [r7, #7]
 800e508:	461a      	mov	r2, r3
 800e50a:	4613      	mov	r3, r2
 800e50c:	009b      	lsls	r3, r3, #2
 800e50e:	4413      	add	r3, r2
 800e510:	00db      	lsls	r3, r3, #3
 800e512:	4a0e      	ldr	r2, [pc, #56]	; (800e54c <UpdateSIGNALSNames+0x6f0>)
 800e514:	4413      	add	r3, r2
 800e516:	4924      	ldr	r1, [pc, #144]	; (800e5a8 <UpdateSIGNALSNames+0x74c>)
 800e518:	461a      	mov	r2, r3
 800e51a:	460b      	mov	r3, r1
 800e51c:	cb03      	ldmia	r3!, {r0, r1}
 800e51e:	6010      	str	r0, [r2, #0]
 800e520:	6051      	str	r1, [r2, #4]
 800e522:	8819      	ldrh	r1, [r3, #0]
 800e524:	789b      	ldrb	r3, [r3, #2]
 800e526:	8111      	strh	r1, [r2, #8]
 800e528:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"11NWKR");
 800e52a:	79fb      	ldrb	r3, [r7, #7]
 800e52c:	1c5a      	adds	r2, r3, #1
 800e52e:	71fa      	strb	r2, [r7, #7]
 800e530:	461a      	mov	r2, r3
 800e532:	4613      	mov	r3, r2
 800e534:	009b      	lsls	r3, r3, #2
 800e536:	4413      	add	r3, r2
 800e538:	00db      	lsls	r3, r3, #3
 800e53a:	4a04      	ldr	r2, [pc, #16]	; (800e54c <UpdateSIGNALSNames+0x6f0>)
 800e53c:	4413      	add	r3, r2
 800e53e:	4a1b      	ldr	r2, [pc, #108]	; (800e5ac <UpdateSIGNALSNames+0x750>)
 800e540:	6810      	ldr	r0, [r2, #0]
 800e542:	6018      	str	r0, [r3, #0]
 800e544:	e034      	b.n	800e5b0 <UpdateSIGNALSNames+0x754>
 800e546:	bf00      	nop
 800e548:	080264ec 	.word	0x080264ec
 800e54c:	20003cc8 	.word	0x20003cc8
 800e550:	080264f4 	.word	0x080264f4
 800e554:	080264fc 	.word	0x080264fc
 800e558:	08026504 	.word	0x08026504
 800e55c:	0802650c 	.word	0x0802650c
 800e560:	08026514 	.word	0x08026514
 800e564:	0802651c 	.word	0x0802651c
 800e568:	08026524 	.word	0x08026524
 800e56c:	0802652c 	.word	0x0802652c
 800e570:	08026534 	.word	0x08026534
 800e574:	0802653c 	.word	0x0802653c
 800e578:	08026544 	.word	0x08026544
 800e57c:	0802654c 	.word	0x0802654c
 800e580:	08026554 	.word	0x08026554
 800e584:	0802655c 	.word	0x0802655c
 800e588:	08026564 	.word	0x08026564
 800e58c:	0802656c 	.word	0x0802656c
 800e590:	08026574 	.word	0x08026574
 800e594:	08026580 	.word	0x08026580
 800e598:	0802658c 	.word	0x0802658c
 800e59c:	08026598 	.word	0x08026598
 800e5a0:	080265a4 	.word	0x080265a4
 800e5a4:	080265b0 	.word	0x080265b0
 800e5a8:	080265bc 	.word	0x080265bc
 800e5ac:	080265c8 	.word	0x080265c8
 800e5b0:	8891      	ldrh	r1, [r2, #4]
 800e5b2:	7992      	ldrb	r2, [r2, #6]
 800e5b4:	8099      	strh	r1, [r3, #4]
 800e5b6:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"11RWKR");
 800e5b8:	79fb      	ldrb	r3, [r7, #7]
 800e5ba:	1c5a      	adds	r2, r3, #1
 800e5bc:	71fa      	strb	r2, [r7, #7]
 800e5be:	461a      	mov	r2, r3
 800e5c0:	4613      	mov	r3, r2
 800e5c2:	009b      	lsls	r3, r3, #2
 800e5c4:	4413      	add	r3, r2
 800e5c6:	00db      	lsls	r3, r3, #3
 800e5c8:	4a82      	ldr	r2, [pc, #520]	; (800e7d4 <UpdateSIGNALSNames+0x978>)
 800e5ca:	4413      	add	r3, r2
 800e5cc:	4a82      	ldr	r2, [pc, #520]	; (800e7d8 <UpdateSIGNALSNames+0x97c>)
 800e5ce:	6810      	ldr	r0, [r2, #0]
 800e5d0:	6018      	str	r0, [r3, #0]
 800e5d2:	8891      	ldrh	r1, [r2, #4]
 800e5d4:	7992      	ldrb	r2, [r2, #6]
 800e5d6:	8099      	strh	r1, [r3, #4]
 800e5d8:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"12NWKR");
 800e5da:	79fb      	ldrb	r3, [r7, #7]
 800e5dc:	1c5a      	adds	r2, r3, #1
 800e5de:	71fa      	strb	r2, [r7, #7]
 800e5e0:	461a      	mov	r2, r3
 800e5e2:	4613      	mov	r3, r2
 800e5e4:	009b      	lsls	r3, r3, #2
 800e5e6:	4413      	add	r3, r2
 800e5e8:	00db      	lsls	r3, r3, #3
 800e5ea:	4a7a      	ldr	r2, [pc, #488]	; (800e7d4 <UpdateSIGNALSNames+0x978>)
 800e5ec:	4413      	add	r3, r2
 800e5ee:	4a7b      	ldr	r2, [pc, #492]	; (800e7dc <UpdateSIGNALSNames+0x980>)
 800e5f0:	6810      	ldr	r0, [r2, #0]
 800e5f2:	6018      	str	r0, [r3, #0]
 800e5f4:	8891      	ldrh	r1, [r2, #4]
 800e5f6:	7992      	ldrb	r2, [r2, #6]
 800e5f8:	8099      	strh	r1, [r3, #4]
 800e5fa:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"12RWKR");
 800e5fc:	79fb      	ldrb	r3, [r7, #7]
 800e5fe:	1c5a      	adds	r2, r3, #1
 800e600:	71fa      	strb	r2, [r7, #7]
 800e602:	461a      	mov	r2, r3
 800e604:	4613      	mov	r3, r2
 800e606:	009b      	lsls	r3, r3, #2
 800e608:	4413      	add	r3, r2
 800e60a:	00db      	lsls	r3, r3, #3
 800e60c:	4a71      	ldr	r2, [pc, #452]	; (800e7d4 <UpdateSIGNALSNames+0x978>)
 800e60e:	4413      	add	r3, r2
 800e610:	4a73      	ldr	r2, [pc, #460]	; (800e7e0 <UpdateSIGNALSNames+0x984>)
 800e612:	6810      	ldr	r0, [r2, #0]
 800e614:	6018      	str	r0, [r3, #0]
 800e616:	8891      	ldrh	r1, [r2, #4]
 800e618:	7992      	ldrb	r2, [r2, #6]
 800e61a:	8099      	strh	r1, [r3, #4]
 800e61c:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"13NWKR");
 800e61e:	79fb      	ldrb	r3, [r7, #7]
 800e620:	1c5a      	adds	r2, r3, #1
 800e622:	71fa      	strb	r2, [r7, #7]
 800e624:	461a      	mov	r2, r3
 800e626:	4613      	mov	r3, r2
 800e628:	009b      	lsls	r3, r3, #2
 800e62a:	4413      	add	r3, r2
 800e62c:	00db      	lsls	r3, r3, #3
 800e62e:	4a69      	ldr	r2, [pc, #420]	; (800e7d4 <UpdateSIGNALSNames+0x978>)
 800e630:	4413      	add	r3, r2
 800e632:	4a6c      	ldr	r2, [pc, #432]	; (800e7e4 <UpdateSIGNALSNames+0x988>)
 800e634:	6810      	ldr	r0, [r2, #0]
 800e636:	6018      	str	r0, [r3, #0]
 800e638:	8891      	ldrh	r1, [r2, #4]
 800e63a:	7992      	ldrb	r2, [r2, #6]
 800e63c:	8099      	strh	r1, [r3, #4]
 800e63e:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"13RWKR");
 800e640:	79fb      	ldrb	r3, [r7, #7]
 800e642:	1c5a      	adds	r2, r3, #1
 800e644:	71fa      	strb	r2, [r7, #7]
 800e646:	461a      	mov	r2, r3
 800e648:	4613      	mov	r3, r2
 800e64a:	009b      	lsls	r3, r3, #2
 800e64c:	4413      	add	r3, r2
 800e64e:	00db      	lsls	r3, r3, #3
 800e650:	4a60      	ldr	r2, [pc, #384]	; (800e7d4 <UpdateSIGNALSNames+0x978>)
 800e652:	4413      	add	r3, r2
 800e654:	4a64      	ldr	r2, [pc, #400]	; (800e7e8 <UpdateSIGNALSNames+0x98c>)
 800e656:	6810      	ldr	r0, [r2, #0]
 800e658:	6018      	str	r0, [r3, #0]
 800e65a:	8891      	ldrh	r1, [r2, #4]
 800e65c:	7992      	ldrb	r2, [r2, #6]
 800e65e:	8099      	strh	r1, [r3, #4]
 800e660:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"18NWKR");
 800e662:	79fb      	ldrb	r3, [r7, #7]
 800e664:	1c5a      	adds	r2, r3, #1
 800e666:	71fa      	strb	r2, [r7, #7]
 800e668:	461a      	mov	r2, r3
 800e66a:	4613      	mov	r3, r2
 800e66c:	009b      	lsls	r3, r3, #2
 800e66e:	4413      	add	r3, r2
 800e670:	00db      	lsls	r3, r3, #3
 800e672:	4a58      	ldr	r2, [pc, #352]	; (800e7d4 <UpdateSIGNALSNames+0x978>)
 800e674:	4413      	add	r3, r2
 800e676:	4a5d      	ldr	r2, [pc, #372]	; (800e7ec <UpdateSIGNALSNames+0x990>)
 800e678:	6810      	ldr	r0, [r2, #0]
 800e67a:	6018      	str	r0, [r3, #0]
 800e67c:	8891      	ldrh	r1, [r2, #4]
 800e67e:	7992      	ldrb	r2, [r2, #6]
 800e680:	8099      	strh	r1, [r3, #4]
 800e682:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"18RWKR");
 800e684:	79fb      	ldrb	r3, [r7, #7]
 800e686:	1c5a      	adds	r2, r3, #1
 800e688:	71fa      	strb	r2, [r7, #7]
 800e68a:	461a      	mov	r2, r3
 800e68c:	4613      	mov	r3, r2
 800e68e:	009b      	lsls	r3, r3, #2
 800e690:	4413      	add	r3, r2
 800e692:	00db      	lsls	r3, r3, #3
 800e694:	4a4f      	ldr	r2, [pc, #316]	; (800e7d4 <UpdateSIGNALSNames+0x978>)
 800e696:	4413      	add	r3, r2
 800e698:	4a55      	ldr	r2, [pc, #340]	; (800e7f0 <UpdateSIGNALSNames+0x994>)
 800e69a:	6810      	ldr	r0, [r2, #0]
 800e69c:	6018      	str	r0, [r3, #0]
 800e69e:	8891      	ldrh	r1, [r2, #4]
 800e6a0:	7992      	ldrb	r2, [r2, #6]
 800e6a2:	8099      	strh	r1, [r3, #4]
 800e6a4:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"19NWKR");
 800e6a6:	79fb      	ldrb	r3, [r7, #7]
 800e6a8:	1c5a      	adds	r2, r3, #1
 800e6aa:	71fa      	strb	r2, [r7, #7]
 800e6ac:	461a      	mov	r2, r3
 800e6ae:	4613      	mov	r3, r2
 800e6b0:	009b      	lsls	r3, r3, #2
 800e6b2:	4413      	add	r3, r2
 800e6b4:	00db      	lsls	r3, r3, #3
 800e6b6:	4a47      	ldr	r2, [pc, #284]	; (800e7d4 <UpdateSIGNALSNames+0x978>)
 800e6b8:	4413      	add	r3, r2
 800e6ba:	4a4e      	ldr	r2, [pc, #312]	; (800e7f4 <UpdateSIGNALSNames+0x998>)
 800e6bc:	6810      	ldr	r0, [r2, #0]
 800e6be:	6018      	str	r0, [r3, #0]
 800e6c0:	8891      	ldrh	r1, [r2, #4]
 800e6c2:	7992      	ldrb	r2, [r2, #6]
 800e6c4:	8099      	strh	r1, [r3, #4]
 800e6c6:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"19RWKR");
 800e6c8:	79fb      	ldrb	r3, [r7, #7]
 800e6ca:	1c5a      	adds	r2, r3, #1
 800e6cc:	71fa      	strb	r2, [r7, #7]
 800e6ce:	461a      	mov	r2, r3
 800e6d0:	4613      	mov	r3, r2
 800e6d2:	009b      	lsls	r3, r3, #2
 800e6d4:	4413      	add	r3, r2
 800e6d6:	00db      	lsls	r3, r3, #3
 800e6d8:	4a3e      	ldr	r2, [pc, #248]	; (800e7d4 <UpdateSIGNALSNames+0x978>)
 800e6da:	4413      	add	r3, r2
 800e6dc:	4a46      	ldr	r2, [pc, #280]	; (800e7f8 <UpdateSIGNALSNames+0x99c>)
 800e6de:	6810      	ldr	r0, [r2, #0]
 800e6e0:	6018      	str	r0, [r3, #0]
 800e6e2:	8891      	ldrh	r1, [r2, #4]
 800e6e4:	7992      	ldrb	r2, [r2, #6]
 800e6e6:	8099      	strh	r1, [r3, #4]
 800e6e8:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"20NWKR");
 800e6ea:	79fb      	ldrb	r3, [r7, #7]
 800e6ec:	1c5a      	adds	r2, r3, #1
 800e6ee:	71fa      	strb	r2, [r7, #7]
 800e6f0:	461a      	mov	r2, r3
 800e6f2:	4613      	mov	r3, r2
 800e6f4:	009b      	lsls	r3, r3, #2
 800e6f6:	4413      	add	r3, r2
 800e6f8:	00db      	lsls	r3, r3, #3
 800e6fa:	4a36      	ldr	r2, [pc, #216]	; (800e7d4 <UpdateSIGNALSNames+0x978>)
 800e6fc:	4413      	add	r3, r2
 800e6fe:	4a3f      	ldr	r2, [pc, #252]	; (800e7fc <UpdateSIGNALSNames+0x9a0>)
 800e700:	6810      	ldr	r0, [r2, #0]
 800e702:	6018      	str	r0, [r3, #0]
 800e704:	8891      	ldrh	r1, [r2, #4]
 800e706:	7992      	ldrb	r2, [r2, #6]
 800e708:	8099      	strh	r1, [r3, #4]
 800e70a:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"20RWKR");
 800e70c:	79fb      	ldrb	r3, [r7, #7]
 800e70e:	1c5a      	adds	r2, r3, #1
 800e710:	71fa      	strb	r2, [r7, #7]
 800e712:	461a      	mov	r2, r3
 800e714:	4613      	mov	r3, r2
 800e716:	009b      	lsls	r3, r3, #2
 800e718:	4413      	add	r3, r2
 800e71a:	00db      	lsls	r3, r3, #3
 800e71c:	4a2d      	ldr	r2, [pc, #180]	; (800e7d4 <UpdateSIGNALSNames+0x978>)
 800e71e:	4413      	add	r3, r2
 800e720:	4a37      	ldr	r2, [pc, #220]	; (800e800 <UpdateSIGNALSNames+0x9a4>)
 800e722:	6810      	ldr	r0, [r2, #0]
 800e724:	6018      	str	r0, [r3, #0]
 800e726:	8891      	ldrh	r1, [r2, #4]
 800e728:	7992      	ldrb	r2, [r2, #6]
 800e72a:	8099      	strh	r1, [r3, #4]
 800e72c:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"15KL_NWKR");
 800e72e:	79fb      	ldrb	r3, [r7, #7]
 800e730:	1c5a      	adds	r2, r3, #1
 800e732:	71fa      	strb	r2, [r7, #7]
 800e734:	461a      	mov	r2, r3
 800e736:	4613      	mov	r3, r2
 800e738:	009b      	lsls	r3, r3, #2
 800e73a:	4413      	add	r3, r2
 800e73c:	00db      	lsls	r3, r3, #3
 800e73e:	4a25      	ldr	r2, [pc, #148]	; (800e7d4 <UpdateSIGNALSNames+0x978>)
 800e740:	4413      	add	r3, r2
 800e742:	4930      	ldr	r1, [pc, #192]	; (800e804 <UpdateSIGNALSNames+0x9a8>)
 800e744:	461a      	mov	r2, r3
 800e746:	460b      	mov	r3, r1
 800e748:	cb03      	ldmia	r3!, {r0, r1}
 800e74a:	6010      	str	r0, [r2, #0]
 800e74c:	6051      	str	r1, [r2, #4]
 800e74e:	881b      	ldrh	r3, [r3, #0]
 800e750:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"22LXCR");
 800e752:	79fb      	ldrb	r3, [r7, #7]
 800e754:	1c5a      	adds	r2, r3, #1
 800e756:	71fa      	strb	r2, [r7, #7]
 800e758:	461a      	mov	r2, r3
 800e75a:	4613      	mov	r3, r2
 800e75c:	009b      	lsls	r3, r3, #2
 800e75e:	4413      	add	r3, r2
 800e760:	00db      	lsls	r3, r3, #3
 800e762:	4a1c      	ldr	r2, [pc, #112]	; (800e7d4 <UpdateSIGNALSNames+0x978>)
 800e764:	4413      	add	r3, r2
 800e766:	4a28      	ldr	r2, [pc, #160]	; (800e808 <UpdateSIGNALSNames+0x9ac>)
 800e768:	6810      	ldr	r0, [r2, #0]
 800e76a:	6018      	str	r0, [r3, #0]
 800e76c:	8891      	ldrh	r1, [r2, #4]
 800e76e:	7992      	ldrb	r2, [r2, #6]
 800e770:	8099      	strh	r1, [r3, #4]
 800e772:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"BR_LCPR_STNA");
 800e774:	79fb      	ldrb	r3, [r7, #7]
 800e776:	1c5a      	adds	r2, r3, #1
 800e778:	71fa      	strb	r2, [r7, #7]
 800e77a:	461a      	mov	r2, r3
 800e77c:	4613      	mov	r3, r2
 800e77e:	009b      	lsls	r3, r3, #2
 800e780:	4413      	add	r3, r2
 800e782:	00db      	lsls	r3, r3, #3
 800e784:	4a13      	ldr	r2, [pc, #76]	; (800e7d4 <UpdateSIGNALSNames+0x978>)
 800e786:	4413      	add	r3, r2
 800e788:	4a20      	ldr	r2, [pc, #128]	; (800e80c <UpdateSIGNALSNames+0x9b0>)
 800e78a:	461c      	mov	r4, r3
 800e78c:	4613      	mov	r3, r2
 800e78e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e790:	6020      	str	r0, [r4, #0]
 800e792:	6061      	str	r1, [r4, #4]
 800e794:	60a2      	str	r2, [r4, #8]
 800e796:	781b      	ldrb	r3, [r3, #0]
 800e798:	7323      	strb	r3, [r4, #12]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"BR_LCPR_STNC");
 800e79a:	79fb      	ldrb	r3, [r7, #7]
 800e79c:	1c5a      	adds	r2, r3, #1
 800e79e:	71fa      	strb	r2, [r7, #7]
 800e7a0:	461a      	mov	r2, r3
 800e7a2:	4613      	mov	r3, r2
 800e7a4:	009b      	lsls	r3, r3, #2
 800e7a6:	4413      	add	r3, r2
 800e7a8:	00db      	lsls	r3, r3, #3
 800e7aa:	4a0a      	ldr	r2, [pc, #40]	; (800e7d4 <UpdateSIGNALSNames+0x978>)
 800e7ac:	4413      	add	r3, r2
 800e7ae:	4a18      	ldr	r2, [pc, #96]	; (800e810 <UpdateSIGNALSNames+0x9b4>)
 800e7b0:	461c      	mov	r4, r3
 800e7b2:	4613      	mov	r3, r2
 800e7b4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e7b6:	6020      	str	r0, [r4, #0]
 800e7b8:	6061      	str	r1, [r4, #4]
 800e7ba:	60a2      	str	r2, [r4, #8]
 800e7bc:	781b      	ldrb	r3, [r3, #0]
 800e7be:	7323      	strb	r3, [r4, #12]
	TotalSigCount = Signals_Cnt;
 800e7c0:	79fb      	ldrb	r3, [r7, #7]
 800e7c2:	b29a      	uxth	r2, r3
 800e7c4:	4b13      	ldr	r3, [pc, #76]	; (800e814 <UpdateSIGNALSNames+0x9b8>)
 800e7c6:	801a      	strh	r2, [r3, #0]


}
 800e7c8:	bf00      	nop
 800e7ca:	3708      	adds	r7, #8
 800e7cc:	46bd      	mov	sp, r7
 800e7ce:	bc90      	pop	{r4, r7}
 800e7d0:	4770      	bx	lr
 800e7d2:	bf00      	nop
 800e7d4:	20003cc8 	.word	0x20003cc8
 800e7d8:	080265d0 	.word	0x080265d0
 800e7dc:	080265d8 	.word	0x080265d8
 800e7e0:	080265e0 	.word	0x080265e0
 800e7e4:	080265e8 	.word	0x080265e8
 800e7e8:	080265f0 	.word	0x080265f0
 800e7ec:	080265f8 	.word	0x080265f8
 800e7f0:	08026600 	.word	0x08026600
 800e7f4:	08026608 	.word	0x08026608
 800e7f8:	08026610 	.word	0x08026610
 800e7fc:	08026618 	.word	0x08026618
 800e800:	08026620 	.word	0x08026620
 800e804:	08026628 	.word	0x08026628
 800e808:	08026634 	.word	0x08026634
 800e80c:	0802663c 	.word	0x0802663c
 800e810:	0802664c 	.word	0x0802664c
 800e814:	200047b8 	.word	0x200047b8

0800e818 <print_self_DetailsSiemens>:

void print_self_DetailsSiemens(void)
{
 800e818:	b5b0      	push	{r4, r5, r7, lr}
 800e81a:	b086      	sub	sp, #24
 800e81c:	af04      	add	r7, sp, #16

	printf("Station Name:%s\n",EI_data.STN_NAME);
 800e81e:	496f      	ldr	r1, [pc, #444]	; (800e9dc <print_self_DetailsSiemens+0x1c4>)
 800e820:	486f      	ldr	r0, [pc, #444]	; (800e9e0 <print_self_DetailsSiemens+0x1c8>)
 800e822:	f013 febf 	bl	80225a4 <iprintf>
	printf("No of IPS:%u\n",EI_data.Siemens_st.No_of_IP_s);
 800e826:	4b6f      	ldr	r3, [pc, #444]	; (800e9e4 <print_self_DetailsSiemens+0x1cc>)
 800e828:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800e82c:	4619      	mov	r1, r3
 800e82e:	486e      	ldr	r0, [pc, #440]	; (800e9e8 <print_self_DetailsSiemens+0x1d0>)
 800e830:	f013 feb8 	bl	80225a4 <iprintf>
	printf("Self IP:%u.%u.%u.%u\n",EI_data.Siemens_st.Self_IP[CARD_INDEX][0],EI_data.Siemens_st.Self_IP[CARD_INDEX][1],EI_data.Siemens_st.Self_IP[CARD_INDEX][2],EI_data.Siemens_st.Self_IP[CARD_INDEX][3]);
 800e834:	4b6b      	ldr	r3, [pc, #428]	; (800e9e4 <print_self_DetailsSiemens+0x1cc>)
 800e836:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800e83a:	4619      	mov	r1, r3
 800e83c:	4b69      	ldr	r3, [pc, #420]	; (800e9e4 <print_self_DetailsSiemens+0x1cc>)
 800e83e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e842:	461a      	mov	r2, r3
 800e844:	4b67      	ldr	r3, [pc, #412]	; (800e9e4 <print_self_DetailsSiemens+0x1cc>)
 800e846:	f893 32ab 	ldrb.w	r3, [r3, #683]	; 0x2ab
 800e84a:	4618      	mov	r0, r3
 800e84c:	4b65      	ldr	r3, [pc, #404]	; (800e9e4 <print_self_DetailsSiemens+0x1cc>)
 800e84e:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 800e852:	9300      	str	r3, [sp, #0]
 800e854:	4603      	mov	r3, r0
 800e856:	4865      	ldr	r0, [pc, #404]	; (800e9ec <print_self_DetailsSiemens+0x1d4>)
 800e858:	f013 fea4 	bl	80225a4 <iprintf>
	printf("Self MAC:%02X-%02X-%02X-%02X-%02X-%02X\n",EI_data.Siemens_st.Self_MAC[CARD_INDEX][0],EI_data.Siemens_st.Self_MAC[CARD_INDEX][1],EI_data.Siemens_st.Self_MAC[CARD_INDEX][2],EI_data.Siemens_st.Self_MAC[CARD_INDEX][3],EI_data.Siemens_st.Self_MAC[CARD_INDEX][4],EI_data.Siemens_st.Self_MAC[CARD_INDEX][5]);
 800e85c:	4b61      	ldr	r3, [pc, #388]	; (800e9e4 <print_self_DetailsSiemens+0x1cc>)
 800e85e:	f893 32b3 	ldrb.w	r3, [r3, #691]	; 0x2b3
 800e862:	4618      	mov	r0, r3
 800e864:	4b5f      	ldr	r3, [pc, #380]	; (800e9e4 <print_self_DetailsSiemens+0x1cc>)
 800e866:	f893 32b4 	ldrb.w	r3, [r3, #692]	; 0x2b4
 800e86a:	461c      	mov	r4, r3
 800e86c:	4b5d      	ldr	r3, [pc, #372]	; (800e9e4 <print_self_DetailsSiemens+0x1cc>)
 800e86e:	f893 32b5 	ldrb.w	r3, [r3, #693]	; 0x2b5
 800e872:	461d      	mov	r5, r3
 800e874:	4b5b      	ldr	r3, [pc, #364]	; (800e9e4 <print_self_DetailsSiemens+0x1cc>)
 800e876:	f893 32b6 	ldrb.w	r3, [r3, #694]	; 0x2b6
 800e87a:	461a      	mov	r2, r3
 800e87c:	4b59      	ldr	r3, [pc, #356]	; (800e9e4 <print_self_DetailsSiemens+0x1cc>)
 800e87e:	f893 32b7 	ldrb.w	r3, [r3, #695]	; 0x2b7
 800e882:	4619      	mov	r1, r3
 800e884:	4b57      	ldr	r3, [pc, #348]	; (800e9e4 <print_self_DetailsSiemens+0x1cc>)
 800e886:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800e88a:	9302      	str	r3, [sp, #8]
 800e88c:	9101      	str	r1, [sp, #4]
 800e88e:	9200      	str	r2, [sp, #0]
 800e890:	462b      	mov	r3, r5
 800e892:	4622      	mov	r2, r4
 800e894:	4601      	mov	r1, r0
 800e896:	4856      	ldr	r0, [pc, #344]	; (800e9f0 <print_self_DetailsSiemens+0x1d8>)
 800e898:	f013 fe84 	bl	80225a4 <iprintf>
	printf("Self Listening Port:%u\n",EI_data.Siemens_st.Self_Listening_Port[CARD_INDEX]);
 800e89c:	4b51      	ldr	r3, [pc, #324]	; (800e9e4 <print_self_DetailsSiemens+0x1cc>)
 800e89e:	f8b3 32dc 	ldrh.w	r3, [r3, #732]	; 0x2dc
 800e8a2:	4619      	mov	r1, r3
 800e8a4:	4853      	ldr	r0, [pc, #332]	; (800e9f4 <print_self_DetailsSiemens+0x1dc>)
 800e8a6:	f013 fe7d 	bl	80225a4 <iprintf>

	for(uint8_t i=0;i<EI_data.Siemens_st.No_of_IP_s;++i)
 800e8aa:	2300      	movs	r3, #0
 800e8ac:	71fb      	strb	r3, [r7, #7]
 800e8ae:	e037      	b.n	800e920 <print_self_DetailsSiemens+0x108>
	{
		printf("IP[%u]:%u.%u.%u.%u\n",i+1,EI_data.Siemens_st.Source_IP[CARD_INDEX][i][0],EI_data.Siemens_st.Source_IP[CARD_INDEX][i][1],EI_data.Siemens_st.Source_IP[CARD_INDEX][i][2],EI_data.Siemens_st.Source_IP[CARD_INDEX][i][3]);
 800e8b0:	79fb      	ldrb	r3, [r7, #7]
 800e8b2:	1c59      	adds	r1, r3, #1
 800e8b4:	79fb      	ldrb	r3, [r7, #7]
 800e8b6:	4a4b      	ldr	r2, [pc, #300]	; (800e9e4 <print_self_DetailsSiemens+0x1cc>)
 800e8b8:	33b2      	adds	r3, #178	; 0xb2
 800e8ba:	009b      	lsls	r3, r3, #2
 800e8bc:	4413      	add	r3, r2
 800e8be:	785b      	ldrb	r3, [r3, #1]
 800e8c0:	461c      	mov	r4, r3
 800e8c2:	79fb      	ldrb	r3, [r7, #7]
 800e8c4:	4a47      	ldr	r2, [pc, #284]	; (800e9e4 <print_self_DetailsSiemens+0x1cc>)
 800e8c6:	009b      	lsls	r3, r3, #2
 800e8c8:	4413      	add	r3, r2
 800e8ca:	f893 32ca 	ldrb.w	r3, [r3, #714]	; 0x2ca
 800e8ce:	461d      	mov	r5, r3
 800e8d0:	79fb      	ldrb	r3, [r7, #7]
 800e8d2:	4a44      	ldr	r2, [pc, #272]	; (800e9e4 <print_self_DetailsSiemens+0x1cc>)
 800e8d4:	009b      	lsls	r3, r3, #2
 800e8d6:	4413      	add	r3, r2
 800e8d8:	f893 32cb 	ldrb.w	r3, [r3, #715]	; 0x2cb
 800e8dc:	4618      	mov	r0, r3
 800e8de:	79fb      	ldrb	r3, [r7, #7]
 800e8e0:	4a40      	ldr	r2, [pc, #256]	; (800e9e4 <print_self_DetailsSiemens+0x1cc>)
 800e8e2:	009b      	lsls	r3, r3, #2
 800e8e4:	4413      	add	r3, r2
 800e8e6:	f893 32cc 	ldrb.w	r3, [r3, #716]	; 0x2cc
 800e8ea:	9301      	str	r3, [sp, #4]
 800e8ec:	9000      	str	r0, [sp, #0]
 800e8ee:	462b      	mov	r3, r5
 800e8f0:	4622      	mov	r2, r4
 800e8f2:	4841      	ldr	r0, [pc, #260]	; (800e9f8 <print_self_DetailsSiemens+0x1e0>)
 800e8f4:	f013 fe56 	bl	80225a4 <iprintf>
		printf("Dest Port-TX:%u-RX:%u\n",EI_data.Siemens_st.PORTS[CARD_INDEX][i][TX_PORT],EI_data.Siemens_st.PORTS[CARD_INDEX][i][RX_PORT]);
 800e8f8:	79fb      	ldrb	r3, [r7, #7]
 800e8fa:	4a3a      	ldr	r2, [pc, #232]	; (800e9e4 <print_self_DetailsSiemens+0x1cc>)
 800e8fc:	33ba      	adds	r3, #186	; 0xba
 800e8fe:	009b      	lsls	r3, r3, #2
 800e900:	4413      	add	r3, r2
 800e902:	88db      	ldrh	r3, [r3, #6]
 800e904:	4619      	mov	r1, r3
 800e906:	79fb      	ldrb	r3, [r7, #7]
 800e908:	4a36      	ldr	r2, [pc, #216]	; (800e9e4 <print_self_DetailsSiemens+0x1cc>)
 800e90a:	009b      	lsls	r3, r3, #2
 800e90c:	4413      	add	r3, r2
 800e90e:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
 800e912:	461a      	mov	r2, r3
 800e914:	4839      	ldr	r0, [pc, #228]	; (800e9fc <print_self_DetailsSiemens+0x1e4>)
 800e916:	f013 fe45 	bl	80225a4 <iprintf>
	for(uint8_t i=0;i<EI_data.Siemens_st.No_of_IP_s;++i)
 800e91a:	79fb      	ldrb	r3, [r7, #7]
 800e91c:	3301      	adds	r3, #1
 800e91e:	71fb      	strb	r3, [r7, #7]
 800e920:	4b30      	ldr	r3, [pc, #192]	; (800e9e4 <print_self_DetailsSiemens+0x1cc>)
 800e922:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800e926:	79fa      	ldrb	r2, [r7, #7]
 800e928:	429a      	cmp	r2, r3
 800e92a:	d3c1      	bcc.n	800e8b0 <print_self_DetailsSiemens+0x98>
	}
	printf("DestSysType:%u\n",EI_data.Siemens_st.DestSysType);
 800e92c:	4b2d      	ldr	r3, [pc, #180]	; (800e9e4 <print_self_DetailsSiemens+0x1cc>)
 800e92e:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 800e932:	4619      	mov	r1, r3
 800e934:	4832      	ldr	r0, [pc, #200]	; (800ea00 <print_self_DetailsSiemens+0x1e8>)
 800e936:	f013 fe35 	bl	80225a4 <iprintf>
	printf("SourceSysType:%u\n",EI_data.Siemens_st.SourceSysType);
 800e93a:	4b2a      	ldr	r3, [pc, #168]	; (800e9e4 <print_self_DetailsSiemens+0x1cc>)
 800e93c:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
 800e940:	4619      	mov	r1, r3
 800e942:	4830      	ldr	r0, [pc, #192]	; (800ea04 <print_self_DetailsSiemens+0x1ec>)
 800e944:	f013 fe2e 	bl	80225a4 <iprintf>
	printf("SourceAddress:%lu\n",EI_data.Siemens_st.SourceAddress);
 800e948:	4b26      	ldr	r3, [pc, #152]	; (800e9e4 <print_self_DetailsSiemens+0x1cc>)
 800e94a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e94e:	4619      	mov	r1, r3
 800e950:	482d      	ldr	r0, [pc, #180]	; (800ea08 <print_self_DetailsSiemens+0x1f0>)
 800e952:	f013 fe27 	bl	80225a4 <iprintf>
	printf("SourceAddress:%lu\n",EI_data.Siemens_st.DestAddress);
 800e956:	4b23      	ldr	r3, [pc, #140]	; (800e9e4 <print_self_DetailsSiemens+0x1cc>)
 800e958:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 800e95c:	4619      	mov	r1, r3
 800e95e:	482a      	ldr	r0, [pc, #168]	; (800ea08 <print_self_DetailsSiemens+0x1f0>)
 800e960:	f013 fe20 	bl	80225a4 <iprintf>
	printf("DestPort:%u\n",EI_data.Siemens_st.DestPort);
 800e964:	4b1f      	ldr	r3, [pc, #124]	; (800e9e4 <print_self_DetailsSiemens+0x1cc>)
 800e966:	f893 32a3 	ldrb.w	r3, [r3, #675]	; 0x2a3
 800e96a:	4619      	mov	r1, r3
 800e96c:	4827      	ldr	r0, [pc, #156]	; (800ea0c <print_self_DetailsSiemens+0x1f4>)
 800e96e:	f013 fe19 	bl	80225a4 <iprintf>
	printf("SourcePort:%u\n",EI_data.Siemens_st.SourcePort);
 800e972:	4b1c      	ldr	r3, [pc, #112]	; (800e9e4 <print_self_DetailsSiemens+0x1cc>)
 800e974:	f893 32a4 	ldrb.w	r3, [r3, #676]	; 0x2a4
 800e978:	4619      	mov	r1, r3
 800e97a:	4825      	ldr	r0, [pc, #148]	; (800ea10 <print_self_DetailsSiemens+0x1f8>)
 800e97c:	f013 fe12 	bl	80225a4 <iprintf>
	printf("No of Inputs:%u\n",EI_data.Siemens_st.Booloutputs);
 800e980:	4b18      	ldr	r3, [pc, #96]	; (800e9e4 <print_self_DetailsSiemens+0x1cc>)
 800e982:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800e986:	4619      	mov	r1, r3
 800e988:	4822      	ldr	r0, [pc, #136]	; (800ea14 <print_self_DetailsSiemens+0x1fc>)
 800e98a:	f013 fe0b 	bl	80225a4 <iprintf>

	printf("CAN_Xchange_Time:%lu\n",EI_data.Siemens_st.CAN_Xchange_Time);
 800e98e:	4b15      	ldr	r3, [pc, #84]	; (800e9e4 <print_self_DetailsSiemens+0x1cc>)
 800e990:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 800e994:	4619      	mov	r1, r3
 800e996:	4820      	ldr	r0, [pc, #128]	; (800ea18 <print_self_DetailsSiemens+0x200>)
 800e998:	f013 fe04 	bl	80225a4 <iprintf>
	printf("HEALTH_PACKET_TIME:%lu\n",EI_data.Siemens_st.HEALTH_PACKET_TIME);
 800e99c:	4b11      	ldr	r3, [pc, #68]	; (800e9e4 <print_self_DetailsSiemens+0x1cc>)
 800e99e:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800e9a2:	4619      	mov	r1, r3
 800e9a4:	481d      	ldr	r0, [pc, #116]	; (800ea1c <print_self_DetailsSiemens+0x204>)
 800e9a6:	f013 fdfd 	bl	80225a4 <iprintf>
	printf("COMM_FAILURE_TIME_OUT:%lu\n",EI_data.Siemens_st.COMM_FAILURE_TIME_OUT);
 800e9aa:	4b0e      	ldr	r3, [pc, #56]	; (800e9e4 <print_self_DetailsSiemens+0x1cc>)
 800e9ac:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 800e9b0:	4619      	mov	r1, r3
 800e9b2:	481b      	ldr	r0, [pc, #108]	; (800ea20 <print_self_DetailsSiemens+0x208>)
 800e9b4:	f013 fdf6 	bl	80225a4 <iprintf>
	printf("MIE_SIGNAL_SEND_CLK:%lu\n",EI_data.Siemens_st.MIE_SIGNAL_SEND_CLK);
 800e9b8:	4b0a      	ldr	r3, [pc, #40]	; (800e9e4 <print_self_DetailsSiemens+0x1cc>)
 800e9ba:	f8d3 3318 	ldr.w	r3, [r3, #792]	; 0x318
 800e9be:	4619      	mov	r1, r3
 800e9c0:	4818      	ldr	r0, [pc, #96]	; (800ea24 <print_self_DetailsSiemens+0x20c>)
 800e9c2:	f013 fdef 	bl	80225a4 <iprintf>
	printf("Max_NoRXTSUpdatedFailCount:%lu\n",EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount);
 800e9c6:	4b07      	ldr	r3, [pc, #28]	; (800e9e4 <print_self_DetailsSiemens+0x1cc>)
 800e9c8:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800e9cc:	4619      	mov	r1, r3
 800e9ce:	4816      	ldr	r0, [pc, #88]	; (800ea28 <print_self_DetailsSiemens+0x210>)
 800e9d0:	f013 fde8 	bl	80225a4 <iprintf>

}
 800e9d4:	bf00      	nop
 800e9d6:	3708      	adds	r7, #8
 800e9d8:	46bd      	mov	sp, r7
 800e9da:	bdb0      	pop	{r4, r5, r7, pc}
 800e9dc:	20000305 	.word	0x20000305
 800e9e0:	0802665c 	.word	0x0802665c
 800e9e4:	20000304 	.word	0x20000304
 800e9e8:	08026670 	.word	0x08026670
 800e9ec:	08026680 	.word	0x08026680
 800e9f0:	08026698 	.word	0x08026698
 800e9f4:	080266c0 	.word	0x080266c0
 800e9f8:	080266d8 	.word	0x080266d8
 800e9fc:	080266ec 	.word	0x080266ec
 800ea00:	08026704 	.word	0x08026704
 800ea04:	08026714 	.word	0x08026714
 800ea08:	08026728 	.word	0x08026728
 800ea0c:	0802673c 	.word	0x0802673c
 800ea10:	0802674c 	.word	0x0802674c
 800ea14:	0802675c 	.word	0x0802675c
 800ea18:	08026770 	.word	0x08026770
 800ea1c:	08026788 	.word	0x08026788
 800ea20:	080267a0 	.word	0x080267a0
 800ea24:	080267bc 	.word	0x080267bc
 800ea28:	080267d8 	.word	0x080267d8

0800ea2c <HAL_Elaps_Ticks>:

#include "Headers.h"


uint32_t HAL_Elaps_Ticks(uint32_t Ticks)
{
 800ea2c:	b580      	push	{r7, lr}
 800ea2e:	b082      	sub	sp, #8
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	6078      	str	r0, [r7, #4]
	return abs( (HAL_GetTick()-Ticks) );
 800ea34:	f006 fdac 	bl	8015590 <HAL_GetTick>
 800ea38:	4602      	mov	r2, r0
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	1ad3      	subs	r3, r2, r3
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	bfb8      	it	lt
 800ea42:	425b      	neglt	r3, r3
}
 800ea44:	4618      	mov	r0, r3
 800ea46:	3708      	adds	r7, #8
 800ea48:	46bd      	mov	sp, r7
 800ea4a:	bd80      	pop	{r7, pc}

0800ea4c <udpServer_init>:
struct udp_pcb *upcb;



void udpServer_init(void)
{
 800ea4c:	b580      	push	{r7, lr}
 800ea4e:	b082      	sub	sp, #8
 800ea50:	af00      	add	r7, sp, #0

	ip_addr_t myIPADDR;
	err_t err = ERR_ABRT;
 800ea52:	23f3      	movs	r3, #243	; 0xf3
 800ea54:	71fb      	strb	r3, [r7, #7]

	upcb = udp_new();
 800ea56:	f011 f8af 	bl	801fbb8 <udp_new>
 800ea5a:	4603      	mov	r3, r0
 800ea5c:	4a7a      	ldr	r2, [pc, #488]	; (800ec48 <udpServer_init+0x1fc>)
 800ea5e:	6013      	str	r3, [r2, #0]

	switch(EI_data.ProtocolType)
 800ea60:	4b7a      	ldr	r3, [pc, #488]	; (800ec4c <udpServer_init+0x200>)
 800ea62:	781b      	ldrb	r3, [r3, #0]
 800ea64:	2b01      	cmp	r3, #1
 800ea66:	d002      	beq.n	800ea6e <udpServer_init+0x22>
 800ea68:	2b02      	cmp	r3, #2
 800ea6a:	d074      	beq.n	800eb56 <udpServer_init+0x10a>
			printf("N-OK\n");
			udp_remove(upcb);
		}
		break;
	default:
		return;
 800ea6c:	e0e9      	b.n	800ec42 <udpServer_init+0x1f6>
		IP_ADDR4(&myIPADDR, EI_data.Hitachi_st.Self_IP[CARD_INDEX][0], EI_data.Hitachi_st.Self_IP[CARD_INDEX][1], EI_data.Hitachi_st.Self_IP[CARD_INDEX][2], EI_data.Hitachi_st.Self_IP[CARD_INDEX][3]);
 800ea6e:	4b77      	ldr	r3, [pc, #476]	; (800ec4c <udpServer_init+0x200>)
 800ea70:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800ea74:	061a      	lsls	r2, r3, #24
 800ea76:	4b75      	ldr	r3, [pc, #468]	; (800ec4c <udpServer_init+0x200>)
 800ea78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ea7c:	041b      	lsls	r3, r3, #16
 800ea7e:	431a      	orrs	r2, r3
 800ea80:	4b72      	ldr	r3, [pc, #456]	; (800ec4c <udpServer_init+0x200>)
 800ea82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ea86:	021b      	lsls	r3, r3, #8
 800ea88:	4313      	orrs	r3, r2
 800ea8a:	4a70      	ldr	r2, [pc, #448]	; (800ec4c <udpServer_init+0x200>)
 800ea8c:	f892 203e 	ldrb.w	r2, [r2, #62]	; 0x3e
 800ea90:	4313      	orrs	r3, r2
 800ea92:	061a      	lsls	r2, r3, #24
 800ea94:	4b6d      	ldr	r3, [pc, #436]	; (800ec4c <udpServer_init+0x200>)
 800ea96:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800ea9a:	0619      	lsls	r1, r3, #24
 800ea9c:	4b6b      	ldr	r3, [pc, #428]	; (800ec4c <udpServer_init+0x200>)
 800ea9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eaa2:	041b      	lsls	r3, r3, #16
 800eaa4:	4319      	orrs	r1, r3
 800eaa6:	4b69      	ldr	r3, [pc, #420]	; (800ec4c <udpServer_init+0x200>)
 800eaa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eaac:	021b      	lsls	r3, r3, #8
 800eaae:	430b      	orrs	r3, r1
 800eab0:	4966      	ldr	r1, [pc, #408]	; (800ec4c <udpServer_init+0x200>)
 800eab2:	f891 103e 	ldrb.w	r1, [r1, #62]	; 0x3e
 800eab6:	430b      	orrs	r3, r1
 800eab8:	021b      	lsls	r3, r3, #8
 800eaba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800eabe:	431a      	orrs	r2, r3
 800eac0:	4b62      	ldr	r3, [pc, #392]	; (800ec4c <udpServer_init+0x200>)
 800eac2:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800eac6:	0619      	lsls	r1, r3, #24
 800eac8:	4b60      	ldr	r3, [pc, #384]	; (800ec4c <udpServer_init+0x200>)
 800eaca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eace:	041b      	lsls	r3, r3, #16
 800ead0:	4319      	orrs	r1, r3
 800ead2:	4b5e      	ldr	r3, [pc, #376]	; (800ec4c <udpServer_init+0x200>)
 800ead4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ead8:	021b      	lsls	r3, r3, #8
 800eada:	430b      	orrs	r3, r1
 800eadc:	495b      	ldr	r1, [pc, #364]	; (800ec4c <udpServer_init+0x200>)
 800eade:	f891 103e 	ldrb.w	r1, [r1, #62]	; 0x3e
 800eae2:	430b      	orrs	r3, r1
 800eae4:	0a1b      	lsrs	r3, r3, #8
 800eae6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800eaea:	431a      	orrs	r2, r3
 800eaec:	4b57      	ldr	r3, [pc, #348]	; (800ec4c <udpServer_init+0x200>)
 800eaee:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800eaf2:	0619      	lsls	r1, r3, #24
 800eaf4:	4b55      	ldr	r3, [pc, #340]	; (800ec4c <udpServer_init+0x200>)
 800eaf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eafa:	041b      	lsls	r3, r3, #16
 800eafc:	4319      	orrs	r1, r3
 800eafe:	4b53      	ldr	r3, [pc, #332]	; (800ec4c <udpServer_init+0x200>)
 800eb00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eb04:	021b      	lsls	r3, r3, #8
 800eb06:	430b      	orrs	r3, r1
 800eb08:	4950      	ldr	r1, [pc, #320]	; (800ec4c <udpServer_init+0x200>)
 800eb0a:	f891 103e 	ldrb.w	r1, [r1, #62]	; 0x3e
 800eb0e:	430b      	orrs	r3, r1
 800eb10:	0e1b      	lsrs	r3, r3, #24
 800eb12:	4313      	orrs	r3, r2
 800eb14:	603b      	str	r3, [r7, #0]
		err = udp_bind(upcb, &myIPADDR, EI_data.Hitachi_st.Self_Listening_Port[CARD_INDEX]);  // 7 is the server UDP port
 800eb16:	4b4c      	ldr	r3, [pc, #304]	; (800ec48 <udpServer_init+0x1fc>)
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	4a4c      	ldr	r2, [pc, #304]	; (800ec4c <udpServer_init+0x200>)
 800eb1c:	f8b2 20f8 	ldrh.w	r2, [r2, #248]	; 0xf8
 800eb20:	4639      	mov	r1, r7
 800eb22:	4618      	mov	r0, r3
 800eb24:	f010 ff5e 	bl	801f9e4 <udp_bind>
 800eb28:	4603      	mov	r3, r0
 800eb2a:	71fb      	strb	r3, [r7, #7]
		if(err == ERR_OK)
 800eb2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d107      	bne.n	800eb44 <udpServer_init+0xf8>
			udp_recv(upcb, UDP_Receive_Callback, NULL);
 800eb34:	4b44      	ldr	r3, [pc, #272]	; (800ec48 <udpServer_init+0x1fc>)
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	2200      	movs	r2, #0
 800eb3a:	4945      	ldr	r1, [pc, #276]	; (800ec50 <udpServer_init+0x204>)
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	f010 ffd9 	bl	801faf4 <udp_recv>
		break;
 800eb42:	e07c      	b.n	800ec3e <udpServer_init+0x1f2>
			printf("N-OK\n");
 800eb44:	4843      	ldr	r0, [pc, #268]	; (800ec54 <udpServer_init+0x208>)
 800eb46:	f013 fdc9 	bl	80226dc <puts>
			udp_remove(upcb);
 800eb4a:	4b3f      	ldr	r3, [pc, #252]	; (800ec48 <udpServer_init+0x1fc>)
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	4618      	mov	r0, r3
 800eb50:	f010 fff0 	bl	801fb34 <udp_remove>
		break;
 800eb54:	e073      	b.n	800ec3e <udpServer_init+0x1f2>
		IP_ADDR4(&myIPADDR, EI_data.Siemens_st.Self_IP[CARD_INDEX][0], EI_data.Siemens_st.Self_IP[CARD_INDEX][1], EI_data.Siemens_st.Self_IP[CARD_INDEX][2], EI_data.Siemens_st.Self_IP[CARD_INDEX][3]);
 800eb56:	4b3d      	ldr	r3, [pc, #244]	; (800ec4c <udpServer_init+0x200>)
 800eb58:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800eb5c:	061a      	lsls	r2, r3, #24
 800eb5e:	4b3b      	ldr	r3, [pc, #236]	; (800ec4c <udpServer_init+0x200>)
 800eb60:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800eb64:	041b      	lsls	r3, r3, #16
 800eb66:	431a      	orrs	r2, r3
 800eb68:	4b38      	ldr	r3, [pc, #224]	; (800ec4c <udpServer_init+0x200>)
 800eb6a:	f893 32ab 	ldrb.w	r3, [r3, #683]	; 0x2ab
 800eb6e:	021b      	lsls	r3, r3, #8
 800eb70:	4313      	orrs	r3, r2
 800eb72:	4a36      	ldr	r2, [pc, #216]	; (800ec4c <udpServer_init+0x200>)
 800eb74:	f892 22ac 	ldrb.w	r2, [r2, #684]	; 0x2ac
 800eb78:	4313      	orrs	r3, r2
 800eb7a:	061a      	lsls	r2, r3, #24
 800eb7c:	4b33      	ldr	r3, [pc, #204]	; (800ec4c <udpServer_init+0x200>)
 800eb7e:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800eb82:	0619      	lsls	r1, r3, #24
 800eb84:	4b31      	ldr	r3, [pc, #196]	; (800ec4c <udpServer_init+0x200>)
 800eb86:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800eb8a:	041b      	lsls	r3, r3, #16
 800eb8c:	4319      	orrs	r1, r3
 800eb8e:	4b2f      	ldr	r3, [pc, #188]	; (800ec4c <udpServer_init+0x200>)
 800eb90:	f893 32ab 	ldrb.w	r3, [r3, #683]	; 0x2ab
 800eb94:	021b      	lsls	r3, r3, #8
 800eb96:	430b      	orrs	r3, r1
 800eb98:	492c      	ldr	r1, [pc, #176]	; (800ec4c <udpServer_init+0x200>)
 800eb9a:	f891 12ac 	ldrb.w	r1, [r1, #684]	; 0x2ac
 800eb9e:	430b      	orrs	r3, r1
 800eba0:	021b      	lsls	r3, r3, #8
 800eba2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800eba6:	431a      	orrs	r2, r3
 800eba8:	4b28      	ldr	r3, [pc, #160]	; (800ec4c <udpServer_init+0x200>)
 800ebaa:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800ebae:	0619      	lsls	r1, r3, #24
 800ebb0:	4b26      	ldr	r3, [pc, #152]	; (800ec4c <udpServer_init+0x200>)
 800ebb2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ebb6:	041b      	lsls	r3, r3, #16
 800ebb8:	4319      	orrs	r1, r3
 800ebba:	4b24      	ldr	r3, [pc, #144]	; (800ec4c <udpServer_init+0x200>)
 800ebbc:	f893 32ab 	ldrb.w	r3, [r3, #683]	; 0x2ab
 800ebc0:	021b      	lsls	r3, r3, #8
 800ebc2:	430b      	orrs	r3, r1
 800ebc4:	4921      	ldr	r1, [pc, #132]	; (800ec4c <udpServer_init+0x200>)
 800ebc6:	f891 12ac 	ldrb.w	r1, [r1, #684]	; 0x2ac
 800ebca:	430b      	orrs	r3, r1
 800ebcc:	0a1b      	lsrs	r3, r3, #8
 800ebce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ebd2:	431a      	orrs	r2, r3
 800ebd4:	4b1d      	ldr	r3, [pc, #116]	; (800ec4c <udpServer_init+0x200>)
 800ebd6:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800ebda:	0619      	lsls	r1, r3, #24
 800ebdc:	4b1b      	ldr	r3, [pc, #108]	; (800ec4c <udpServer_init+0x200>)
 800ebde:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ebe2:	041b      	lsls	r3, r3, #16
 800ebe4:	4319      	orrs	r1, r3
 800ebe6:	4b19      	ldr	r3, [pc, #100]	; (800ec4c <udpServer_init+0x200>)
 800ebe8:	f893 32ab 	ldrb.w	r3, [r3, #683]	; 0x2ab
 800ebec:	021b      	lsls	r3, r3, #8
 800ebee:	430b      	orrs	r3, r1
 800ebf0:	4916      	ldr	r1, [pc, #88]	; (800ec4c <udpServer_init+0x200>)
 800ebf2:	f891 12ac 	ldrb.w	r1, [r1, #684]	; 0x2ac
 800ebf6:	430b      	orrs	r3, r1
 800ebf8:	0e1b      	lsrs	r3, r3, #24
 800ebfa:	4313      	orrs	r3, r2
 800ebfc:	603b      	str	r3, [r7, #0]
		err = udp_bind(upcb, &myIPADDR, EI_data.Siemens_st.Self_Listening_Port[CARD_INDEX]);  // 7 is the server UDP port
 800ebfe:	4b12      	ldr	r3, [pc, #72]	; (800ec48 <udpServer_init+0x1fc>)
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	4a12      	ldr	r2, [pc, #72]	; (800ec4c <udpServer_init+0x200>)
 800ec04:	f8b2 22dc 	ldrh.w	r2, [r2, #732]	; 0x2dc
 800ec08:	4639      	mov	r1, r7
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	f010 feea 	bl	801f9e4 <udp_bind>
 800ec10:	4603      	mov	r3, r0
 800ec12:	71fb      	strb	r3, [r7, #7]
		if(err == ERR_OK)
 800ec14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d107      	bne.n	800ec2c <udpServer_init+0x1e0>
			udp_recv(upcb, UDP_Receive_Callback, NULL);
 800ec1c:	4b0a      	ldr	r3, [pc, #40]	; (800ec48 <udpServer_init+0x1fc>)
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	2200      	movs	r2, #0
 800ec22:	490b      	ldr	r1, [pc, #44]	; (800ec50 <udpServer_init+0x204>)
 800ec24:	4618      	mov	r0, r3
 800ec26:	f010 ff65 	bl	801faf4 <udp_recv>
		break;
 800ec2a:	e007      	b.n	800ec3c <udpServer_init+0x1f0>
			printf("N-OK\n");
 800ec2c:	4809      	ldr	r0, [pc, #36]	; (800ec54 <udpServer_init+0x208>)
 800ec2e:	f013 fd55 	bl	80226dc <puts>
			udp_remove(upcb);
 800ec32:	4b05      	ldr	r3, [pc, #20]	; (800ec48 <udpServer_init+0x1fc>)
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	4618      	mov	r0, r3
 800ec38:	f010 ff7c 	bl	801fb34 <udp_remove>
		break;
 800ec3c:	bf00      	nop
	}

	udpClient_connect();
 800ec3e:	f000 f913 	bl	800ee68 <udpClient_connect>
	//	//	{
	//	//		printf("N-OK\n");
	//	//		udp_remove(upcb);
	//	//	}
	//	//	udpClient_connect();
}
 800ec42:	3708      	adds	r7, #8
 800ec44:	46bd      	mov	sp, r7
 800ec46:	bd80      	pop	{r7, pc}
 800ec48:	20005238 	.word	0x20005238
 800ec4c:	20000304 	.word	0x20000304
 800ec50:	0800ec59 	.word	0x0800ec59
 800ec54:	080267f8 	.word	0x080267f8

0800ec58 <UDP_Receive_Callback>:

void UDP_Receive_Callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800ec58:	b580      	push	{r7, lr}
 800ec5a:	b086      	sub	sp, #24
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	60f8      	str	r0, [r7, #12]
 800ec60:	60b9      	str	r1, [r7, #8]
 800ec62:	607a      	str	r2, [r7, #4]
 800ec64:	603b      	str	r3, [r7, #0]
	uint8_t Traverser = 0;
 800ec66:	2300      	movs	r3, #0
 800ec68:	75fb      	strb	r3, [r7, #23]
	uint16_t Length = 0;
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	82bb      	strh	r3, [r7, #20]
	uint8_t IpMatched = 0;
 800ec6e:	2300      	movs	r3, #0
 800ec70:	75bb      	strb	r3, [r7, #22]
#if INTR_SOURCE_DETECT
	uint16_t Src_adrr = 0;
	uint8_t Get_src[4] = {0,0},Modified_data[4] = {0,};
#endif

	Source_IP = *addr;
 800ec72:	4a72      	ldr	r2, [pc, #456]	; (800ee3c <UDP_Receive_Callback+0x1e4>)
 800ec74:	683b      	ldr	r3, [r7, #0]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	6013      	str	r3, [r2, #0]
	Length = p->len;
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	895b      	ldrh	r3, [r3, #10]
 800ec7e:	82bb      	strh	r3, [r7, #20]
	switch(EI_data.ProtocolType)
 800ec80:	4b6f      	ldr	r3, [pc, #444]	; (800ee40 <UDP_Receive_Callback+0x1e8>)
 800ec82:	781b      	ldrb	r3, [r3, #0]
 800ec84:	2b01      	cmp	r3, #1
 800ec86:	d032      	beq.n	800ecee <UDP_Receive_Callback+0x96>
 800ec88:	2b02      	cmp	r3, #2
 800ec8a:	d049      	beq.n	800ed20 <UDP_Receive_Callback+0xc8>
 800ec8c:	e06d      	b.n	800ed6a <UDP_Receive_Callback+0x112>
	{

	case HITACHI:
		for(;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
		{
			if( (Source_IP.addr) == (remote_ip[Traverser].addr) )
 800ec8e:	4b6b      	ldr	r3, [pc, #428]	; (800ee3c <UDP_Receive_Callback+0x1e4>)
 800ec90:	681a      	ldr	r2, [r3, #0]
 800ec92:	7dfb      	ldrb	r3, [r7, #23]
 800ec94:	496b      	ldr	r1, [pc, #428]	; (800ee44 <UDP_Receive_Callback+0x1ec>)
 800ec96:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ec9a:	429a      	cmp	r2, r3
 800ec9c:	d124      	bne.n	800ece8 <UDP_Receive_Callback+0x90>
			{
				if(IpMatched == 0)
 800ec9e:	7dbb      	ldrb	r3, [r7, #22]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d10d      	bne.n	800ecc0 <UDP_Receive_Callback+0x68>
				{
					if(Debug_flag == 1)
 800eca4:	4b68      	ldr	r3, [pc, #416]	; (800ee48 <UDP_Receive_Callback+0x1f0>)
 800eca6:	781b      	ldrb	r3, [r3, #0]
 800eca8:	2b01      	cmp	r3, #1
 800ecaa:	d107      	bne.n	800ecbc <UDP_Receive_Callback+0x64>
					{
						printf("\nFromIP:%s\n",ipaddr_ntoa(addr));
 800ecac:	6838      	ldr	r0, [r7, #0]
 800ecae:	f012 fb81 	bl	80213b4 <ip4addr_ntoa>
 800ecb2:	4603      	mov	r3, r0
 800ecb4:	4619      	mov	r1, r3
 800ecb6:	4865      	ldr	r0, [pc, #404]	; (800ee4c <UDP_Receive_Callback+0x1f4>)
 800ecb8:	f013 fc74 	bl	80225a4 <iprintf>
					}
					IpMatched = 1;
 800ecbc:	2301      	movs	r3, #1
 800ecbe:	75bb      	strb	r3, [r7, #22]
				}
				Recv_IP_List[Traverser/2] = *addr;
 800ecc0:	7dfb      	ldrb	r3, [r7, #23]
 800ecc2:	085b      	lsrs	r3, r3, #1
 800ecc4:	b2db      	uxtb	r3, r3
 800ecc6:	4619      	mov	r1, r3
 800ecc8:	4a61      	ldr	r2, [pc, #388]	; (800ee50 <UDP_Receive_Callback+0x1f8>)
 800ecca:	683b      	ldr	r3, [r7, #0]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				Recv_IP_Index[Traverser/2] = (Traverser%2) + 1;
 800ecd2:	7dfb      	ldrb	r3, [r7, #23]
 800ecd4:	f003 0301 	and.w	r3, r3, #1
 800ecd8:	b2db      	uxtb	r3, r3
 800ecda:	7dfa      	ldrb	r2, [r7, #23]
 800ecdc:	0852      	lsrs	r2, r2, #1
 800ecde:	b2d2      	uxtb	r2, r2
 800ece0:	3301      	adds	r3, #1
 800ece2:	b2d9      	uxtb	r1, r3
 800ece4:	4b5b      	ldr	r3, [pc, #364]	; (800ee54 <UDP_Receive_Callback+0x1fc>)
 800ece6:	5499      	strb	r1, [r3, r2]
		for(;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 800ece8:	7dfb      	ldrb	r3, [r7, #23]
 800ecea:	3301      	adds	r3, #1
 800ecec:	75fb      	strb	r3, [r7, #23]
 800ecee:	4b54      	ldr	r3, [pc, #336]	; (800ee40 <UDP_Receive_Callback+0x1e8>)
 800ecf0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800ecf4:	7dfa      	ldrb	r2, [r7, #23]
 800ecf6:	429a      	cmp	r2, r3
 800ecf8:	d3c9      	bcc.n	800ec8e <UDP_Receive_Callback+0x36>
				//break;
			}
		}
		if(Traverser>EI_data.Hitachi_st.No_of_IP_s)
 800ecfa:	4b51      	ldr	r3, [pc, #324]	; (800ee40 <UDP_Receive_Callback+0x1e8>)
 800ecfc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800ed00:	7dfa      	ldrb	r2, [r7, #23]
 800ed02:	429a      	cmp	r2, r3
 800ed04:	d935      	bls.n	800ed72 <UDP_Receive_Callback+0x11a>
		{
			pbuf_free(p);
 800ed06:	6878      	ldr	r0, [r7, #4]
 800ed08:	f00f ff14 	bl	801eb34 <pbuf_free>
			printf("\nPacket Rejected-Unknown IP:%s !\nIndex:%u\n",ipaddr_ntoa(addr),Traverser);
 800ed0c:	6838      	ldr	r0, [r7, #0]
 800ed0e:	f012 fb51 	bl	80213b4 <ip4addr_ntoa>
 800ed12:	4601      	mov	r1, r0
 800ed14:	7dfb      	ldrb	r3, [r7, #23]
 800ed16:	461a      	mov	r2, r3
 800ed18:	484f      	ldr	r0, [pc, #316]	; (800ee58 <UDP_Receive_Callback+0x200>)
 800ed1a:	f013 fc43 	bl	80225a4 <iprintf>
			return;
 800ed1e:	e08a      	b.n	800ee36 <UDP_Receive_Callback+0x1de>
		}
		break;
	case SIEMENS:
		for(Traverser = 0;Traverser<EI_data.Siemens_st.No_of_IP_s;++Traverser)
 800ed20:	2300      	movs	r3, #0
 800ed22:	75fb      	strb	r3, [r7, #23]
 800ed24:	e00a      	b.n	800ed3c <UDP_Receive_Callback+0xe4>
		{
			if( (Source_IP.addr) == (remote_ip[Traverser].addr) )
 800ed26:	4b45      	ldr	r3, [pc, #276]	; (800ee3c <UDP_Receive_Callback+0x1e4>)
 800ed28:	681a      	ldr	r2, [r3, #0]
 800ed2a:	7dfb      	ldrb	r3, [r7, #23]
 800ed2c:	4945      	ldr	r1, [pc, #276]	; (800ee44 <UDP_Receive_Callback+0x1ec>)
 800ed2e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ed32:	429a      	cmp	r2, r3
 800ed34:	d009      	beq.n	800ed4a <UDP_Receive_Callback+0xf2>
		for(Traverser = 0;Traverser<EI_data.Siemens_st.No_of_IP_s;++Traverser)
 800ed36:	7dfb      	ldrb	r3, [r7, #23]
 800ed38:	3301      	adds	r3, #1
 800ed3a:	75fb      	strb	r3, [r7, #23]
 800ed3c:	4b40      	ldr	r3, [pc, #256]	; (800ee40 <UDP_Receive_Callback+0x1e8>)
 800ed3e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ed42:	7dfa      	ldrb	r2, [r7, #23]
 800ed44:	429a      	cmp	r2, r3
 800ed46:	d3ee      	bcc.n	800ed26 <UDP_Receive_Callback+0xce>
 800ed48:	e000      	b.n	800ed4c <UDP_Receive_Callback+0xf4>
			{
				break;
 800ed4a:	bf00      	nop
			}
		}
		if(Traverser>EI_data.Siemens_st.No_of_IP_s)
 800ed4c:	4b3c      	ldr	r3, [pc, #240]	; (800ee40 <UDP_Receive_Callback+0x1e8>)
 800ed4e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ed52:	7dfa      	ldrb	r2, [r7, #23]
 800ed54:	429a      	cmp	r2, r3
 800ed56:	d90e      	bls.n	800ed76 <UDP_Receive_Callback+0x11e>
		{
			pbuf_free(p);
 800ed58:	6878      	ldr	r0, [r7, #4]
 800ed5a:	f00f feeb 	bl	801eb34 <pbuf_free>
			printf("\nPacket Rejected-Unknown IP!\nIndex:%u\n",Traverser);
 800ed5e:	7dfb      	ldrb	r3, [r7, #23]
 800ed60:	4619      	mov	r1, r3
 800ed62:	483e      	ldr	r0, [pc, #248]	; (800ee5c <UDP_Receive_Callback+0x204>)
 800ed64:	f013 fc1e 	bl	80225a4 <iprintf>
			return;
 800ed68:	e065      	b.n	800ee36 <UDP_Receive_Callback+0x1de>
		}
		break;
	default:
		pbuf_free(p);
 800ed6a:	6878      	ldr	r0, [r7, #4]
 800ed6c:	f00f fee2 	bl	801eb34 <pbuf_free>
		return;
 800ed70:	e061      	b.n	800ee36 <UDP_Receive_Callback+0x1de>
		break;
 800ed72:	bf00      	nop
 800ed74:	e000      	b.n	800ed78 <UDP_Receive_Callback+0x120>
		break;
 800ed76:	bf00      	nop
	}

	switch(EI_data.ProtocolType)
 800ed78:	4b31      	ldr	r3, [pc, #196]	; (800ee40 <UDP_Receive_Callback+0x1e8>)
 800ed7a:	781b      	ldrb	r3, [r3, #0]
 800ed7c:	2b01      	cmp	r3, #1
 800ed7e:	d002      	beq.n	800ed86 <UDP_Receive_Callback+0x12e>
 800ed80:	2b02      	cmp	r3, #2
 800ed82:	d049      	beq.n	800ee18 <UDP_Receive_Callback+0x1c0>
		Ethernet_Circle_buff_st.Write_end = Length;
		break;

	default:
		/* Do Nothing */
		break;
 800ed84:	e054      	b.n	800ee30 <UDP_Receive_Callback+0x1d8>
		Interrupt_clock = HAL_GetTick();
 800ed86:	f006 fc03 	bl	8015590 <HAL_GetTick>
 800ed8a:	4603      	mov	r3, r0
 800ed8c:	4a34      	ldr	r2, [pc, #208]	; (800ee60 <UDP_Receive_Callback+0x208>)
 800ed8e:	6013      	str	r3, [r2, #0]
		if( (Ethernet_Circle_buff_st.Write_end + Length ) > ETH_MAX_SIZE)
 800ed90:	4b34      	ldr	r3, [pc, #208]	; (800ee64 <UDP_Receive_Callback+0x20c>)
 800ed92:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800ed96:	461a      	mov	r2, r3
 800ed98:	8abb      	ldrh	r3, [r7, #20]
 800ed9a:	4413      	add	r3, r2
 800ed9c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800eda0:	dd24      	ble.n	800edec <UDP_Receive_Callback+0x194>
			uint16_t Packets_to_copy_1 = (ETH_MAX_SIZE -Ethernet_Circle_buff_st.Write_end);
 800eda2:	4b30      	ldr	r3, [pc, #192]	; (800ee64 <UDP_Receive_Callback+0x20c>)
 800eda4:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800eda8:	f5c3 63c0 	rsb	r3, r3, #1536	; 0x600
 800edac:	827b      	strh	r3, [r7, #18]
			memcpy(&Ethernet_Circle_buff_st.Ethernet_Buffers[Ethernet_Circle_buff_st.Write_end],(char *)p->payload,Packets_to_copy_1);
 800edae:	4b2d      	ldr	r3, [pc, #180]	; (800ee64 <UDP_Receive_Callback+0x20c>)
 800edb0:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800edb4:	461a      	mov	r2, r3
 800edb6:	4b2b      	ldr	r3, [pc, #172]	; (800ee64 <UDP_Receive_Callback+0x20c>)
 800edb8:	18d0      	adds	r0, r2, r3
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	685b      	ldr	r3, [r3, #4]
 800edbe:	8a7a      	ldrh	r2, [r7, #18]
 800edc0:	4619      	mov	r1, r3
 800edc2:	f013 fadf 	bl	8022384 <memcpy>
			memcpy(&Ethernet_Circle_buff_st.Ethernet_Buffers[0],&((char *)p->payload)[Packets_to_copy_1],(Length-Packets_to_copy_1));
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	685a      	ldr	r2, [r3, #4]
 800edca:	8a7b      	ldrh	r3, [r7, #18]
 800edcc:	18d1      	adds	r1, r2, r3
 800edce:	8aba      	ldrh	r2, [r7, #20]
 800edd0:	8a7b      	ldrh	r3, [r7, #18]
 800edd2:	1ad3      	subs	r3, r2, r3
 800edd4:	461a      	mov	r2, r3
 800edd6:	4823      	ldr	r0, [pc, #140]	; (800ee64 <UDP_Receive_Callback+0x20c>)
 800edd8:	f013 fad4 	bl	8022384 <memcpy>
			Ethernet_Circle_buff_st.Write_end = (Length-Packets_to_copy_1);
 800eddc:	8aba      	ldrh	r2, [r7, #20]
 800edde:	8a7b      	ldrh	r3, [r7, #18]
 800ede0:	1ad3      	subs	r3, r2, r3
 800ede2:	b29a      	uxth	r2, r3
 800ede4:	4b1f      	ldr	r3, [pc, #124]	; (800ee64 <UDP_Receive_Callback+0x20c>)
 800ede6:	f8a3 2602 	strh.w	r2, [r3, #1538]	; 0x602
		break;
 800edea:	e021      	b.n	800ee30 <UDP_Receive_Callback+0x1d8>
			memcpy(&Ethernet_Circle_buff_st.Ethernet_Buffers[Ethernet_Circle_buff_st.Write_end],(char *)p->payload,Length);
 800edec:	4b1d      	ldr	r3, [pc, #116]	; (800ee64 <UDP_Receive_Callback+0x20c>)
 800edee:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800edf2:	461a      	mov	r2, r3
 800edf4:	4b1b      	ldr	r3, [pc, #108]	; (800ee64 <UDP_Receive_Callback+0x20c>)
 800edf6:	18d0      	adds	r0, r2, r3
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	685b      	ldr	r3, [r3, #4]
 800edfc:	8aba      	ldrh	r2, [r7, #20]
 800edfe:	4619      	mov	r1, r3
 800ee00:	f013 fac0 	bl	8022384 <memcpy>
			Ethernet_Circle_buff_st.Write_end = (Ethernet_Circle_buff_st.Write_end + Length);
 800ee04:	4b17      	ldr	r3, [pc, #92]	; (800ee64 <UDP_Receive_Callback+0x20c>)
 800ee06:	f8b3 2602 	ldrh.w	r2, [r3, #1538]	; 0x602
 800ee0a:	8abb      	ldrh	r3, [r7, #20]
 800ee0c:	4413      	add	r3, r2
 800ee0e:	b29a      	uxth	r2, r3
 800ee10:	4b14      	ldr	r3, [pc, #80]	; (800ee64 <UDP_Receive_Callback+0x20c>)
 800ee12:	f8a3 2602 	strh.w	r2, [r3, #1538]	; 0x602
		break;
 800ee16:	e00b      	b.n	800ee30 <UDP_Receive_Callback+0x1d8>
		memcpy(&Ethernet_Circle_buff_st.Ethernet_Buffers,(char *)p->payload,Length);
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	685b      	ldr	r3, [r3, #4]
 800ee1c:	8aba      	ldrh	r2, [r7, #20]
 800ee1e:	4619      	mov	r1, r3
 800ee20:	4810      	ldr	r0, [pc, #64]	; (800ee64 <UDP_Receive_Callback+0x20c>)
 800ee22:	f013 faaf 	bl	8022384 <memcpy>
		Ethernet_Circle_buff_st.Write_end = Length;
 800ee26:	4a0f      	ldr	r2, [pc, #60]	; (800ee64 <UDP_Receive_Callback+0x20c>)
 800ee28:	8abb      	ldrh	r3, [r7, #20]
 800ee2a:	f8a2 3602 	strh.w	r3, [r2, #1538]	; 0x602
		break;
 800ee2e:	bf00      	nop
	}


	pbuf_free(p);
 800ee30:	6878      	ldr	r0, [r7, #4]
 800ee32:	f00f fe7f 	bl	801eb34 <pbuf_free>
}
 800ee36:	3718      	adds	r7, #24
 800ee38:	46bd      	mov	sp, r7
 800ee3a:	bd80      	pop	{r7, pc}
 800ee3c:	2000520c 	.word	0x2000520c
 800ee40:	20000304 	.word	0x20000304
 800ee44:	200051bc 	.word	0x200051bc
 800ee48:	20000645 	.word	0x20000645
 800ee4c:	08026800 	.word	0x08026800
 800ee50:	20001064 	.word	0x20001064
 800ee54:	2000108c 	.word	0x2000108c
 800ee58:	0802680c 	.word	0x0802680c
 800ee5c:	08026838 	.word	0x08026838
 800ee60:	20000e48 	.word	0x20000e48
 800ee64:	20004bb8 	.word	0x20004bb8

0800ee68 <udpClient_connect>:
void udpClient_connect(void)
{
 800ee68:	b480      	push	{r7}
 800ee6a:	b083      	sub	sp, #12
 800ee6c:	af00      	add	r7, sp, #0
	err_t err;
	uint8_t Traverser = 0;
 800ee6e:	2300      	movs	r3, #0
 800ee70:	71fb      	strb	r3, [r7, #7]

	switch(EI_data.ProtocolType)
 800ee72:	4ba6      	ldr	r3, [pc, #664]	; (800f10c <udpClient_connect+0x2a4>)
 800ee74:	781b      	ldrb	r3, [r3, #0]
 800ee76:	2b01      	cmp	r3, #1
 800ee78:	d003      	beq.n	800ee82 <udpClient_connect+0x1a>
 800ee7a:	2b02      	cmp	r3, #2
 800ee7c:	f000 80a1 	beq.w	800efc2 <udpClient_connect+0x15a>
			//			}
		}
		break;

	default:
		return;
 800ee80:	e13f      	b.n	800f102 <udpClient_connect+0x29a>
		for(Traverser = 0;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 800ee82:	2300      	movs	r3, #0
 800ee84:	71fb      	strb	r3, [r7, #7]
 800ee86:	e094      	b.n	800efb2 <udpClient_connect+0x14a>
			IP_ADDR4(&remote_ip[Traverser], EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][0], EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][1], EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][2], EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][3]);
 800ee88:	79fb      	ldrb	r3, [r7, #7]
 800ee8a:	4aa0      	ldr	r2, [pc, #640]	; (800f10c <udpClient_connect+0x2a4>)
 800ee8c:	3326      	adds	r3, #38	; 0x26
 800ee8e:	009b      	lsls	r3, r3, #2
 800ee90:	4413      	add	r3, r2
 800ee92:	78db      	ldrb	r3, [r3, #3]
 800ee94:	061a      	lsls	r2, r3, #24
 800ee96:	79fb      	ldrb	r3, [r7, #7]
 800ee98:	499c      	ldr	r1, [pc, #624]	; (800f10c <udpClient_connect+0x2a4>)
 800ee9a:	009b      	lsls	r3, r3, #2
 800ee9c:	440b      	add	r3, r1
 800ee9e:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800eea2:	041b      	lsls	r3, r3, #16
 800eea4:	431a      	orrs	r2, r3
 800eea6:	79fb      	ldrb	r3, [r7, #7]
 800eea8:	4998      	ldr	r1, [pc, #608]	; (800f10c <udpClient_connect+0x2a4>)
 800eeaa:	009b      	lsls	r3, r3, #2
 800eeac:	440b      	add	r3, r1
 800eeae:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800eeb2:	021b      	lsls	r3, r3, #8
 800eeb4:	431a      	orrs	r2, r3
 800eeb6:	79fb      	ldrb	r3, [r7, #7]
 800eeb8:	4994      	ldr	r1, [pc, #592]	; (800f10c <udpClient_connect+0x2a4>)
 800eeba:	009b      	lsls	r3, r3, #2
 800eebc:	440b      	add	r3, r1
 800eebe:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800eec2:	4313      	orrs	r3, r2
 800eec4:	061a      	lsls	r2, r3, #24
 800eec6:	79fb      	ldrb	r3, [r7, #7]
 800eec8:	4990      	ldr	r1, [pc, #576]	; (800f10c <udpClient_connect+0x2a4>)
 800eeca:	3326      	adds	r3, #38	; 0x26
 800eecc:	009b      	lsls	r3, r3, #2
 800eece:	440b      	add	r3, r1
 800eed0:	78db      	ldrb	r3, [r3, #3]
 800eed2:	0619      	lsls	r1, r3, #24
 800eed4:	79fb      	ldrb	r3, [r7, #7]
 800eed6:	488d      	ldr	r0, [pc, #564]	; (800f10c <udpClient_connect+0x2a4>)
 800eed8:	009b      	lsls	r3, r3, #2
 800eeda:	4403      	add	r3, r0
 800eedc:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800eee0:	041b      	lsls	r3, r3, #16
 800eee2:	4319      	orrs	r1, r3
 800eee4:	79fb      	ldrb	r3, [r7, #7]
 800eee6:	4889      	ldr	r0, [pc, #548]	; (800f10c <udpClient_connect+0x2a4>)
 800eee8:	009b      	lsls	r3, r3, #2
 800eeea:	4403      	add	r3, r0
 800eeec:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800eef0:	021b      	lsls	r3, r3, #8
 800eef2:	4319      	orrs	r1, r3
 800eef4:	79fb      	ldrb	r3, [r7, #7]
 800eef6:	4885      	ldr	r0, [pc, #532]	; (800f10c <udpClient_connect+0x2a4>)
 800eef8:	009b      	lsls	r3, r3, #2
 800eefa:	4403      	add	r3, r0
 800eefc:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800ef00:	430b      	orrs	r3, r1
 800ef02:	021b      	lsls	r3, r3, #8
 800ef04:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ef08:	431a      	orrs	r2, r3
 800ef0a:	79fb      	ldrb	r3, [r7, #7]
 800ef0c:	497f      	ldr	r1, [pc, #508]	; (800f10c <udpClient_connect+0x2a4>)
 800ef0e:	3326      	adds	r3, #38	; 0x26
 800ef10:	009b      	lsls	r3, r3, #2
 800ef12:	440b      	add	r3, r1
 800ef14:	78db      	ldrb	r3, [r3, #3]
 800ef16:	0619      	lsls	r1, r3, #24
 800ef18:	79fb      	ldrb	r3, [r7, #7]
 800ef1a:	487c      	ldr	r0, [pc, #496]	; (800f10c <udpClient_connect+0x2a4>)
 800ef1c:	009b      	lsls	r3, r3, #2
 800ef1e:	4403      	add	r3, r0
 800ef20:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800ef24:	041b      	lsls	r3, r3, #16
 800ef26:	4319      	orrs	r1, r3
 800ef28:	79fb      	ldrb	r3, [r7, #7]
 800ef2a:	4878      	ldr	r0, [pc, #480]	; (800f10c <udpClient_connect+0x2a4>)
 800ef2c:	009b      	lsls	r3, r3, #2
 800ef2e:	4403      	add	r3, r0
 800ef30:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800ef34:	021b      	lsls	r3, r3, #8
 800ef36:	4319      	orrs	r1, r3
 800ef38:	79fb      	ldrb	r3, [r7, #7]
 800ef3a:	4874      	ldr	r0, [pc, #464]	; (800f10c <udpClient_connect+0x2a4>)
 800ef3c:	009b      	lsls	r3, r3, #2
 800ef3e:	4403      	add	r3, r0
 800ef40:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800ef44:	430b      	orrs	r3, r1
 800ef46:	0a1b      	lsrs	r3, r3, #8
 800ef48:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ef4c:	ea42 0103 	orr.w	r1, r2, r3
 800ef50:	79fb      	ldrb	r3, [r7, #7]
 800ef52:	4a6e      	ldr	r2, [pc, #440]	; (800f10c <udpClient_connect+0x2a4>)
 800ef54:	3326      	adds	r3, #38	; 0x26
 800ef56:	009b      	lsls	r3, r3, #2
 800ef58:	4413      	add	r3, r2
 800ef5a:	78db      	ldrb	r3, [r3, #3]
 800ef5c:	061a      	lsls	r2, r3, #24
 800ef5e:	79fb      	ldrb	r3, [r7, #7]
 800ef60:	486a      	ldr	r0, [pc, #424]	; (800f10c <udpClient_connect+0x2a4>)
 800ef62:	009b      	lsls	r3, r3, #2
 800ef64:	4403      	add	r3, r0
 800ef66:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800ef6a:	041b      	lsls	r3, r3, #16
 800ef6c:	431a      	orrs	r2, r3
 800ef6e:	79fb      	ldrb	r3, [r7, #7]
 800ef70:	4866      	ldr	r0, [pc, #408]	; (800f10c <udpClient_connect+0x2a4>)
 800ef72:	009b      	lsls	r3, r3, #2
 800ef74:	4403      	add	r3, r0
 800ef76:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800ef7a:	021b      	lsls	r3, r3, #8
 800ef7c:	431a      	orrs	r2, r3
 800ef7e:	79fb      	ldrb	r3, [r7, #7]
 800ef80:	4862      	ldr	r0, [pc, #392]	; (800f10c <udpClient_connect+0x2a4>)
 800ef82:	009b      	lsls	r3, r3, #2
 800ef84:	4403      	add	r3, r0
 800ef86:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800ef8a:	4313      	orrs	r3, r2
 800ef8c:	0e1a      	lsrs	r2, r3, #24
 800ef8e:	79fb      	ldrb	r3, [r7, #7]
 800ef90:	430a      	orrs	r2, r1
 800ef92:	495f      	ldr	r1, [pc, #380]	; (800f110 <udpClient_connect+0x2a8>)
 800ef94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			des_port[Traverser] = EI_data.Hitachi_st.PORTS[CARD_INDEX][Traverser][RX_PORT];
 800ef98:	79fb      	ldrb	r3, [r7, #7]
 800ef9a:	79fa      	ldrb	r2, [r7, #7]
 800ef9c:	495b      	ldr	r1, [pc, #364]	; (800f10c <udpClient_connect+0x2a4>)
 800ef9e:	009b      	lsls	r3, r3, #2
 800efa0:	440b      	add	r3, r1
 800efa2:	f8b3 114c 	ldrh.w	r1, [r3, #332]	; 0x14c
 800efa6:	4b5b      	ldr	r3, [pc, #364]	; (800f114 <udpClient_connect+0x2ac>)
 800efa8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for(Traverser = 0;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 800efac:	79fb      	ldrb	r3, [r7, #7]
 800efae:	3301      	adds	r3, #1
 800efb0:	71fb      	strb	r3, [r7, #7]
 800efb2:	4b56      	ldr	r3, [pc, #344]	; (800f10c <udpClient_connect+0x2a4>)
 800efb4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800efb8:	79fa      	ldrb	r2, [r7, #7]
 800efba:	429a      	cmp	r2, r3
 800efbc:	f4ff af64 	bcc.w	800ee88 <udpClient_connect+0x20>
		break;
 800efc0:	e09f      	b.n	800f102 <udpClient_connect+0x29a>
		for(Traverser = 0;Traverser<EI_data.Siemens_st.No_of_IP_s;++Traverser)
 800efc2:	2300      	movs	r3, #0
 800efc4:	71fb      	strb	r3, [r7, #7]
 800efc6:	e094      	b.n	800f0f2 <udpClient_connect+0x28a>
			IP_ADDR4(&remote_ip[Traverser], EI_data.Siemens_st.Source_IP[CARD_INDEX][Traverser][0], EI_data.Siemens_st.Source_IP[CARD_INDEX][Traverser][1], EI_data.Siemens_st.Source_IP[CARD_INDEX][Traverser][2], EI_data.Siemens_st.Source_IP[CARD_INDEX][Traverser][3]);
 800efc8:	79fb      	ldrb	r3, [r7, #7]
 800efca:	4a50      	ldr	r2, [pc, #320]	; (800f10c <udpClient_connect+0x2a4>)
 800efcc:	33b2      	adds	r3, #178	; 0xb2
 800efce:	009b      	lsls	r3, r3, #2
 800efd0:	4413      	add	r3, r2
 800efd2:	785b      	ldrb	r3, [r3, #1]
 800efd4:	061a      	lsls	r2, r3, #24
 800efd6:	79fb      	ldrb	r3, [r7, #7]
 800efd8:	494c      	ldr	r1, [pc, #304]	; (800f10c <udpClient_connect+0x2a4>)
 800efda:	009b      	lsls	r3, r3, #2
 800efdc:	440b      	add	r3, r1
 800efde:	f893 32ca 	ldrb.w	r3, [r3, #714]	; 0x2ca
 800efe2:	041b      	lsls	r3, r3, #16
 800efe4:	431a      	orrs	r2, r3
 800efe6:	79fb      	ldrb	r3, [r7, #7]
 800efe8:	4948      	ldr	r1, [pc, #288]	; (800f10c <udpClient_connect+0x2a4>)
 800efea:	009b      	lsls	r3, r3, #2
 800efec:	440b      	add	r3, r1
 800efee:	f893 32cb 	ldrb.w	r3, [r3, #715]	; 0x2cb
 800eff2:	021b      	lsls	r3, r3, #8
 800eff4:	431a      	orrs	r2, r3
 800eff6:	79fb      	ldrb	r3, [r7, #7]
 800eff8:	4944      	ldr	r1, [pc, #272]	; (800f10c <udpClient_connect+0x2a4>)
 800effa:	009b      	lsls	r3, r3, #2
 800effc:	440b      	add	r3, r1
 800effe:	f893 32cc 	ldrb.w	r3, [r3, #716]	; 0x2cc
 800f002:	4313      	orrs	r3, r2
 800f004:	061a      	lsls	r2, r3, #24
 800f006:	79fb      	ldrb	r3, [r7, #7]
 800f008:	4940      	ldr	r1, [pc, #256]	; (800f10c <udpClient_connect+0x2a4>)
 800f00a:	33b2      	adds	r3, #178	; 0xb2
 800f00c:	009b      	lsls	r3, r3, #2
 800f00e:	440b      	add	r3, r1
 800f010:	785b      	ldrb	r3, [r3, #1]
 800f012:	0619      	lsls	r1, r3, #24
 800f014:	79fb      	ldrb	r3, [r7, #7]
 800f016:	483d      	ldr	r0, [pc, #244]	; (800f10c <udpClient_connect+0x2a4>)
 800f018:	009b      	lsls	r3, r3, #2
 800f01a:	4403      	add	r3, r0
 800f01c:	f893 32ca 	ldrb.w	r3, [r3, #714]	; 0x2ca
 800f020:	041b      	lsls	r3, r3, #16
 800f022:	4319      	orrs	r1, r3
 800f024:	79fb      	ldrb	r3, [r7, #7]
 800f026:	4839      	ldr	r0, [pc, #228]	; (800f10c <udpClient_connect+0x2a4>)
 800f028:	009b      	lsls	r3, r3, #2
 800f02a:	4403      	add	r3, r0
 800f02c:	f893 32cb 	ldrb.w	r3, [r3, #715]	; 0x2cb
 800f030:	021b      	lsls	r3, r3, #8
 800f032:	4319      	orrs	r1, r3
 800f034:	79fb      	ldrb	r3, [r7, #7]
 800f036:	4835      	ldr	r0, [pc, #212]	; (800f10c <udpClient_connect+0x2a4>)
 800f038:	009b      	lsls	r3, r3, #2
 800f03a:	4403      	add	r3, r0
 800f03c:	f893 32cc 	ldrb.w	r3, [r3, #716]	; 0x2cc
 800f040:	430b      	orrs	r3, r1
 800f042:	021b      	lsls	r3, r3, #8
 800f044:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f048:	431a      	orrs	r2, r3
 800f04a:	79fb      	ldrb	r3, [r7, #7]
 800f04c:	492f      	ldr	r1, [pc, #188]	; (800f10c <udpClient_connect+0x2a4>)
 800f04e:	33b2      	adds	r3, #178	; 0xb2
 800f050:	009b      	lsls	r3, r3, #2
 800f052:	440b      	add	r3, r1
 800f054:	785b      	ldrb	r3, [r3, #1]
 800f056:	0619      	lsls	r1, r3, #24
 800f058:	79fb      	ldrb	r3, [r7, #7]
 800f05a:	482c      	ldr	r0, [pc, #176]	; (800f10c <udpClient_connect+0x2a4>)
 800f05c:	009b      	lsls	r3, r3, #2
 800f05e:	4403      	add	r3, r0
 800f060:	f893 32ca 	ldrb.w	r3, [r3, #714]	; 0x2ca
 800f064:	041b      	lsls	r3, r3, #16
 800f066:	4319      	orrs	r1, r3
 800f068:	79fb      	ldrb	r3, [r7, #7]
 800f06a:	4828      	ldr	r0, [pc, #160]	; (800f10c <udpClient_connect+0x2a4>)
 800f06c:	009b      	lsls	r3, r3, #2
 800f06e:	4403      	add	r3, r0
 800f070:	f893 32cb 	ldrb.w	r3, [r3, #715]	; 0x2cb
 800f074:	021b      	lsls	r3, r3, #8
 800f076:	4319      	orrs	r1, r3
 800f078:	79fb      	ldrb	r3, [r7, #7]
 800f07a:	4824      	ldr	r0, [pc, #144]	; (800f10c <udpClient_connect+0x2a4>)
 800f07c:	009b      	lsls	r3, r3, #2
 800f07e:	4403      	add	r3, r0
 800f080:	f893 32cc 	ldrb.w	r3, [r3, #716]	; 0x2cc
 800f084:	430b      	orrs	r3, r1
 800f086:	0a1b      	lsrs	r3, r3, #8
 800f088:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f08c:	ea42 0103 	orr.w	r1, r2, r3
 800f090:	79fb      	ldrb	r3, [r7, #7]
 800f092:	4a1e      	ldr	r2, [pc, #120]	; (800f10c <udpClient_connect+0x2a4>)
 800f094:	33b2      	adds	r3, #178	; 0xb2
 800f096:	009b      	lsls	r3, r3, #2
 800f098:	4413      	add	r3, r2
 800f09a:	785b      	ldrb	r3, [r3, #1]
 800f09c:	061a      	lsls	r2, r3, #24
 800f09e:	79fb      	ldrb	r3, [r7, #7]
 800f0a0:	481a      	ldr	r0, [pc, #104]	; (800f10c <udpClient_connect+0x2a4>)
 800f0a2:	009b      	lsls	r3, r3, #2
 800f0a4:	4403      	add	r3, r0
 800f0a6:	f893 32ca 	ldrb.w	r3, [r3, #714]	; 0x2ca
 800f0aa:	041b      	lsls	r3, r3, #16
 800f0ac:	431a      	orrs	r2, r3
 800f0ae:	79fb      	ldrb	r3, [r7, #7]
 800f0b0:	4816      	ldr	r0, [pc, #88]	; (800f10c <udpClient_connect+0x2a4>)
 800f0b2:	009b      	lsls	r3, r3, #2
 800f0b4:	4403      	add	r3, r0
 800f0b6:	f893 32cb 	ldrb.w	r3, [r3, #715]	; 0x2cb
 800f0ba:	021b      	lsls	r3, r3, #8
 800f0bc:	431a      	orrs	r2, r3
 800f0be:	79fb      	ldrb	r3, [r7, #7]
 800f0c0:	4812      	ldr	r0, [pc, #72]	; (800f10c <udpClient_connect+0x2a4>)
 800f0c2:	009b      	lsls	r3, r3, #2
 800f0c4:	4403      	add	r3, r0
 800f0c6:	f893 32cc 	ldrb.w	r3, [r3, #716]	; 0x2cc
 800f0ca:	4313      	orrs	r3, r2
 800f0cc:	0e1a      	lsrs	r2, r3, #24
 800f0ce:	79fb      	ldrb	r3, [r7, #7]
 800f0d0:	430a      	orrs	r2, r1
 800f0d2:	490f      	ldr	r1, [pc, #60]	; (800f110 <udpClient_connect+0x2a8>)
 800f0d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			des_port[Traverser] = EI_data.Siemens_st.PORTS[CARD_INDEX][Traverser][RX_PORT];
 800f0d8:	79fb      	ldrb	r3, [r7, #7]
 800f0da:	79fa      	ldrb	r2, [r7, #7]
 800f0dc:	490b      	ldr	r1, [pc, #44]	; (800f10c <udpClient_connect+0x2a4>)
 800f0de:	009b      	lsls	r3, r3, #2
 800f0e0:	440b      	add	r3, r1
 800f0e2:	f8b3 12f0 	ldrh.w	r1, [r3, #752]	; 0x2f0
 800f0e6:	4b0b      	ldr	r3, [pc, #44]	; (800f114 <udpClient_connect+0x2ac>)
 800f0e8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for(Traverser = 0;Traverser<EI_data.Siemens_st.No_of_IP_s;++Traverser)
 800f0ec:	79fb      	ldrb	r3, [r7, #7]
 800f0ee:	3301      	adds	r3, #1
 800f0f0:	71fb      	strb	r3, [r7, #7]
 800f0f2:	4b06      	ldr	r3, [pc, #24]	; (800f10c <udpClient_connect+0x2a4>)
 800f0f4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800f0f8:	79fa      	ldrb	r2, [r7, #7]
 800f0fa:	429a      	cmp	r2, r3
 800f0fc:	f4ff af64 	bcc.w	800efc8 <udpClient_connect+0x160>
		break;
 800f100:	bf00      	nop
	}
}
 800f102:	370c      	adds	r7, #12
 800f104:	46bd      	mov	sp, r7
 800f106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f10a:	4770      	bx	lr
 800f10c:	20000304 	.word	0x20000304
 800f110:	200051bc 	.word	0x200051bc
 800f114:	20005210 	.word	0x20005210

0800f118 <udpClient_send>:
void udpClient_send(uint8_t *data,uint8_t len,const ip_addr_t IP_addr)
{
 800f118:	b580      	push	{r7, lr}
 800f11a:	b086      	sub	sp, #24
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	60f8      	str	r0, [r7, #12]
 800f120:	460b      	mov	r3, r1
 800f122:	607a      	str	r2, [r7, #4]
 800f124:	72fb      	strb	r3, [r7, #11]
	struct pbuf *txBuf;
	err_t udp_sendto_error = 0;
 800f126:	2300      	movs	r3, #0
 800f128:	75fb      	strb	r3, [r7, #23]
	txBuf = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
 800f12a:	7afb      	ldrb	r3, [r7, #11]
 800f12c:	b29b      	uxth	r3, r3
 800f12e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f132:	4619      	mov	r1, r3
 800f134:	2036      	movs	r0, #54	; 0x36
 800f136:	f00f fa1b 	bl	801e570 <pbuf_alloc>
 800f13a:	6138      	str	r0, [r7, #16]

	//	char *SendingIP = ipaddr_ntoa(&IP_addr);
	//
	//	printf("\nSent IP:%s\n",SendingIP);

	if (txBuf != NULL)
 800f13c:	693b      	ldr	r3, [r7, #16]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d01d      	beq.n	800f17e <udpClient_send+0x66>
	{
		pbuf_take(txBuf, data, len);
 800f142:	7afb      	ldrb	r3, [r7, #11]
 800f144:	b29b      	uxth	r3, r3
 800f146:	461a      	mov	r2, r3
 800f148:	68f9      	ldr	r1, [r7, #12]
 800f14a:	6938      	ldr	r0, [r7, #16]
 800f14c:	f00f feec 	bl	801ef28 <pbuf_take>
		udp_sendto_error = udp_sendto(upcb, txBuf, &IP_addr,des_port[0]);
 800f150:	4b0d      	ldr	r3, [pc, #52]	; (800f188 <udpClient_send+0x70>)
 800f152:	6818      	ldr	r0, [r3, #0]
 800f154:	4b0d      	ldr	r3, [pc, #52]	; (800f18c <udpClient_send+0x74>)
 800f156:	881b      	ldrh	r3, [r3, #0]
 800f158:	1d3a      	adds	r2, r7, #4
 800f15a:	6939      	ldr	r1, [r7, #16]
 800f15c:	f010 fa8c 	bl	801f678 <udp_sendto>
 800f160:	4603      	mov	r3, r0
 800f162:	75fb      	strb	r3, [r7, #23]
		if(udp_sendto_error != ERR_OK)
 800f164:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d005      	beq.n	800f178 <udpClient_send+0x60>
		{
			printf("Packet Sending Failed:%d\nTrying again\n",udp_sendto_error);
 800f16c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f170:	4619      	mov	r1, r3
 800f172:	4807      	ldr	r0, [pc, #28]	; (800f190 <udpClient_send+0x78>)
 800f174:	f013 fa16 	bl	80225a4 <iprintf>
		//				printf("\n------------------------------------Differnece :%lu\n",HAL_Elaps_Ticks(Interrupt_clock));
		//				printf("Packet Sent Success\n");
		//				break;
		//			}
		//		}
		pbuf_free(txBuf);
 800f178:	6938      	ldr	r0, [r7, #16]
 800f17a:	f00f fcdb 	bl	801eb34 <pbuf_free>
	}
}
 800f17e:	bf00      	nop
 800f180:	3718      	adds	r7, #24
 800f182:	46bd      	mov	sp, r7
 800f184:	bd80      	pop	{r7, pc}
 800f186:	bf00      	nop
 800f188:	20005238 	.word	0x20005238
 800f18c:	20005210 	.word	0x20005210
 800f190:	08026860 	.word	0x08026860

0800f194 <Is_There_EI_Data>:

uint8_t Is_There_EI_Data(void)
{
 800f194:	b480      	push	{r7}
 800f196:	af00      	add	r7, sp, #0
	if(Ethernet_Circle_buff_st.Read_end != Ethernet_Circle_buff_st.Write_end)
 800f198:	4b07      	ldr	r3, [pc, #28]	; (800f1b8 <Is_There_EI_Data+0x24>)
 800f19a:	f8b3 2600 	ldrh.w	r2, [r3, #1536]	; 0x600
 800f19e:	4b06      	ldr	r3, [pc, #24]	; (800f1b8 <Is_There_EI_Data+0x24>)
 800f1a0:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800f1a4:	429a      	cmp	r2, r3
 800f1a6:	d001      	beq.n	800f1ac <Is_There_EI_Data+0x18>
	{
		return AVAILABLE;
 800f1a8:	2301      	movs	r3, #1
 800f1aa:	e000      	b.n	800f1ae <Is_There_EI_Data+0x1a>
	}
	else
	{
		return NOT_AVAILABLE;
 800f1ac:	2300      	movs	r3, #0
	}
}
 800f1ae:	4618      	mov	r0, r3
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b6:	4770      	bx	lr
 800f1b8:	20004bb8 	.word	0x20004bb8

0800f1bc <Get_Eth_Byte>:

uint8_t Get_Eth_Byte(void)
{
 800f1bc:	b580      	push	{r7, lr}
 800f1be:	b082      	sub	sp, #8
 800f1c0:	af00      	add	r7, sp, #0
	uint8_t Data = Ethernet_Circle_buff_st.Ethernet_Buffers[Ethernet_Circle_buff_st.Read_end++];
 800f1c2:	4b15      	ldr	r3, [pc, #84]	; (800f218 <Get_Eth_Byte+0x5c>)
 800f1c4:	f8b3 3600 	ldrh.w	r3, [r3, #1536]	; 0x600
 800f1c8:	1c5a      	adds	r2, r3, #1
 800f1ca:	b291      	uxth	r1, r2
 800f1cc:	4a12      	ldr	r2, [pc, #72]	; (800f218 <Get_Eth_Byte+0x5c>)
 800f1ce:	f8a2 1600 	strh.w	r1, [r2, #1536]	; 0x600
 800f1d2:	461a      	mov	r2, r3
 800f1d4:	4b10      	ldr	r3, [pc, #64]	; (800f218 <Get_Eth_Byte+0x5c>)
 800f1d6:	5c9b      	ldrb	r3, [r3, r2]
 800f1d8:	71fb      	strb	r3, [r7, #7]
	if(Ethernet_Circle_buff_st.Read_end >= ETH_MAX_SIZE)
 800f1da:	4b0f      	ldr	r3, [pc, #60]	; (800f218 <Get_Eth_Byte+0x5c>)
 800f1dc:	f8b3 3600 	ldrh.w	r3, [r3, #1536]	; 0x600
 800f1e0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800f1e4:	d313      	bcc.n	800f20e <Get_Eth_Byte+0x52>
	{
		Ethernet_Circle_buff_st.Read_end = 0;
 800f1e6:	4b0c      	ldr	r3, [pc, #48]	; (800f218 <Get_Eth_Byte+0x5c>)
 800f1e8:	2200      	movs	r2, #0
 800f1ea:	f8a3 2600 	strh.w	r2, [r3, #1536]	; 0x600
		if(Ethernet_Circle_buff_st.Write_end == ETH_MAX_SIZE)
 800f1ee:	4b0a      	ldr	r3, [pc, #40]	; (800f218 <Get_Eth_Byte+0x5c>)
 800f1f0:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800f1f4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800f1f8:	d109      	bne.n	800f20e <Get_Eth_Byte+0x52>
		{
			memset(Ethernet_Circle_buff_st.Ethernet_Buffers,0,ETH_MAX_SIZE);
 800f1fa:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800f1fe:	2100      	movs	r1, #0
 800f200:	4805      	ldr	r0, [pc, #20]	; (800f218 <Get_Eth_Byte+0x5c>)
 800f202:	f013 f8e7 	bl	80223d4 <memset>
			Ethernet_Circle_buff_st.Write_end = 0;
 800f206:	4b04      	ldr	r3, [pc, #16]	; (800f218 <Get_Eth_Byte+0x5c>)
 800f208:	2200      	movs	r2, #0
 800f20a:	f8a3 2602 	strh.w	r2, [r3, #1538]	; 0x602
		}
	}
	return Data;
 800f20e:	79fb      	ldrb	r3, [r7, #7]
}
 800f210:	4618      	mov	r0, r3
 800f212:	3708      	adds	r7, #8
 800f214:	46bd      	mov	sp, r7
 800f216:	bd80      	pop	{r7, pc}
 800f218:	20004bb8 	.word	0x20004bb8

0800f21c <MX_CAN2_Init>:
CAN_HandleTypeDef hcan2;
CAN_HandleTypeDef hcan3;

/* CAN2 init function */
void MX_CAN2_Init(void)
{
 800f21c:	b580      	push	{r7, lr}
 800f21e:	b094      	sub	sp, #80	; 0x50
 800f220:	af00      	add	r7, sp, #0
	/* USER CODE END CAN2_Init 0 */

	/* USER CODE BEGIN CAN2_Init 1 */

	/* USER CODE END CAN2_Init 1 */
	hcan2.Instance = CAN2;
 800f222:	4b38      	ldr	r3, [pc, #224]	; (800f304 <MX_CAN2_Init+0xe8>)
 800f224:	4a38      	ldr	r2, [pc, #224]	; (800f308 <MX_CAN2_Init+0xec>)
 800f226:	601a      	str	r2, [r3, #0]
	hcan2.Init.Prescaler = 18;
 800f228:	4b36      	ldr	r3, [pc, #216]	; (800f304 <MX_CAN2_Init+0xe8>)
 800f22a:	2212      	movs	r2, #18
 800f22c:	605a      	str	r2, [r3, #4]
	hcan2.Init.Mode = CAN_MODE_NORMAL;
 800f22e:	4b35      	ldr	r3, [pc, #212]	; (800f304 <MX_CAN2_Init+0xe8>)
 800f230:	2200      	movs	r2, #0
 800f232:	609a      	str	r2, [r3, #8]
	hcan2.Init.SyncJumpWidth = CAN_SJW_4TQ;
 800f234:	4b33      	ldr	r3, [pc, #204]	; (800f304 <MX_CAN2_Init+0xe8>)
 800f236:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 800f23a:	60da      	str	r2, [r3, #12]
	hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 800f23c:	4b31      	ldr	r3, [pc, #196]	; (800f304 <MX_CAN2_Init+0xe8>)
 800f23e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800f242:	611a      	str	r2, [r3, #16]
	hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 800f244:	4b2f      	ldr	r3, [pc, #188]	; (800f304 <MX_CAN2_Init+0xe8>)
 800f246:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800f24a:	615a      	str	r2, [r3, #20]
	hcan2.Init.TimeTriggeredMode = DISABLE;
 800f24c:	4b2d      	ldr	r3, [pc, #180]	; (800f304 <MX_CAN2_Init+0xe8>)
 800f24e:	2200      	movs	r2, #0
 800f250:	761a      	strb	r2, [r3, #24]
	hcan2.Init.AutoBusOff = DISABLE;
 800f252:	4b2c      	ldr	r3, [pc, #176]	; (800f304 <MX_CAN2_Init+0xe8>)
 800f254:	2200      	movs	r2, #0
 800f256:	765a      	strb	r2, [r3, #25]
	hcan2.Init.AutoWakeUp = DISABLE;
 800f258:	4b2a      	ldr	r3, [pc, #168]	; (800f304 <MX_CAN2_Init+0xe8>)
 800f25a:	2200      	movs	r2, #0
 800f25c:	769a      	strb	r2, [r3, #26]
	hcan2.Init.AutoRetransmission = ENABLE;
 800f25e:	4b29      	ldr	r3, [pc, #164]	; (800f304 <MX_CAN2_Init+0xe8>)
 800f260:	2201      	movs	r2, #1
 800f262:	76da      	strb	r2, [r3, #27]
	hcan2.Init.ReceiveFifoLocked = DISABLE;
 800f264:	4b27      	ldr	r3, [pc, #156]	; (800f304 <MX_CAN2_Init+0xe8>)
 800f266:	2200      	movs	r2, #0
 800f268:	771a      	strb	r2, [r3, #28]
	hcan2.Init.TransmitFifoPriority = DISABLE;
 800f26a:	4b26      	ldr	r3, [pc, #152]	; (800f304 <MX_CAN2_Init+0xe8>)
 800f26c:	2200      	movs	r2, #0
 800f26e:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800f270:	4824      	ldr	r0, [pc, #144]	; (800f304 <MX_CAN2_Init+0xe8>)
 800f272:	f006 f9bd 	bl	80155f0 <HAL_CAN_Init>
 800f276:	4603      	mov	r3, r0
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d001      	beq.n	800f280 <MX_CAN2_Init+0x64>
	{
		Error_Handler();
 800f27c:	f004 fbfc 	bl	8013a78 <Error_Handler>

	HAL_CAN_ConfigFilter(&hcan2,&Can_FilterConfig2 );
#endif
	CAN_FilterTypeDef Can_FilterConfig3;
	/*____________for Testing________________*/
	Can_FilterConfig3.FilterActivation = CAN_FILTER_ENABLE ;
 800f280:	2301      	movs	r3, #1
 800f282:	64bb      	str	r3, [r7, #72]	; 0x48
	Can_FilterConfig3.FilterBank = 4;
 800f284:	2304      	movs	r3, #4
 800f286:	63fb      	str	r3, [r7, #60]	; 0x3c
	Can_FilterConfig3.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 800f288:	2301      	movs	r3, #1
 800f28a:	63bb      	str	r3, [r7, #56]	; 0x38
	Can_FilterConfig3.FilterIdHigh = (GPS_TIME_PKT<<5);//CM_LPM_GPSINFO
 800f28c:	f242 0360 	movw	r3, #8288	; 0x2060
 800f290:	62bb      	str	r3, [r7, #40]	; 0x28
	Can_FilterConfig3.FilterIdLow=0x0000;
 800f292:	2300      	movs	r3, #0
 800f294:	62fb      	str	r3, [r7, #44]	; 0x2c
	Can_FilterConfig3.FilterMaskIdHigh= (GPS_TIME_PKT<<5);
 800f296:	f242 0360 	movw	r3, #8288	; 0x2060
 800f29a:	633b      	str	r3, [r7, #48]	; 0x30
	Can_FilterConfig3.FilterMaskIdLow =0x0000;
 800f29c:	2300      	movs	r3, #0
 800f29e:	637b      	str	r3, [r7, #52]	; 0x34
	Can_FilterConfig3.FilterMode= CAN_FILTERMODE_IDLIST;
 800f2a0:	2301      	movs	r3, #1
 800f2a2:	643b      	str	r3, [r7, #64]	; 0x40
	Can_FilterConfig3.FilterScale = CAN_FILTERSCALE_32BIT;
 800f2a4:	2301      	movs	r3, #1
 800f2a6:	647b      	str	r3, [r7, #68]	; 0x44
	Can_FilterConfig3.SlaveStartFilterBank = 2;
 800f2a8:	2302      	movs	r3, #2
 800f2aa:	64fb      	str	r3, [r7, #76]	; 0x4c


	HAL_CAN_ConfigFilter(&hcan2,&Can_FilterConfig3 );
 800f2ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f2b0:	4619      	mov	r1, r3
 800f2b2:	4814      	ldr	r0, [pc, #80]	; (800f304 <MX_CAN2_Init+0xe8>)
 800f2b4:	f006 fae2 	bl	801587c <HAL_CAN_ConfigFilter>

	CAN_FilterTypeDef Can_FilterConfig4;
	/*____________for Testing________________*/
	Can_FilterConfig4.FilterActivation = CAN_FILTER_ENABLE ;
 800f2b8:	2301      	movs	r3, #1
 800f2ba:	623b      	str	r3, [r7, #32]
	Can_FilterConfig4.FilterBank = 5;
 800f2bc:	2305      	movs	r3, #5
 800f2be:	617b      	str	r3, [r7, #20]
	Can_FilterConfig4.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 800f2c0:	2301      	movs	r3, #1
 800f2c2:	613b      	str	r3, [r7, #16]
	Can_FilterConfig4.FilterIdHigh = (GPS2_TIME_PKT<<5);//CM_LPM_GPSINFO
 800f2c4:	f242 1320 	movw	r3, #8480	; 0x2120
 800f2c8:	603b      	str	r3, [r7, #0]
	Can_FilterConfig4.FilterIdLow=0x0000;
 800f2ca:	2300      	movs	r3, #0
 800f2cc:	607b      	str	r3, [r7, #4]
	Can_FilterConfig4.FilterMaskIdHigh= (GPS2_TIME_PKT<<5);
 800f2ce:	f242 1320 	movw	r3, #8480	; 0x2120
 800f2d2:	60bb      	str	r3, [r7, #8]
	Can_FilterConfig4.FilterMaskIdLow =0x0000;
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	60fb      	str	r3, [r7, #12]
	Can_FilterConfig4.FilterMode= CAN_FILTERMODE_IDLIST;
 800f2d8:	2301      	movs	r3, #1
 800f2da:	61bb      	str	r3, [r7, #24]
	Can_FilterConfig4.FilterScale = CAN_FILTERSCALE_32BIT;
 800f2dc:	2301      	movs	r3, #1
 800f2de:	61fb      	str	r3, [r7, #28]
	Can_FilterConfig4.SlaveStartFilterBank = 2;
 800f2e0:	2302      	movs	r3, #2
 800f2e2:	627b      	str	r3, [r7, #36]	; 0x24


	HAL_CAN_ConfigFilter(&hcan2,&Can_FilterConfig4 );
 800f2e4:	463b      	mov	r3, r7
 800f2e6:	4619      	mov	r1, r3
 800f2e8:	4806      	ldr	r0, [pc, #24]	; (800f304 <MX_CAN2_Init+0xe8>)
 800f2ea:	f006 fac7 	bl	801587c <HAL_CAN_ConfigFilter>

	/*_______________________for Testing___________	 */


	HAL_CAN_Start(&hcan2);
 800f2ee:	4805      	ldr	r0, [pc, #20]	; (800f304 <MX_CAN2_Init+0xe8>)
 800f2f0:	f006 fbb0 	bl	8015a54 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan2,CAN_IT_RX_FIFO1_MSG_PENDING);
 800f2f4:	2110      	movs	r1, #16
 800f2f6:	4803      	ldr	r0, [pc, #12]	; (800f304 <MX_CAN2_Init+0xe8>)
 800f2f8:	f006 fdf6 	bl	8015ee8 <HAL_CAN_ActivateNotification>

	/* USER CODE END CAN2_Init 2 */

}
 800f2fc:	bf00      	nop
 800f2fe:	3750      	adds	r7, #80	; 0x50
 800f300:	46bd      	mov	sp, r7
 800f302:	bd80      	pop	{r7, pc}
 800f304:	20009af0 	.word	0x20009af0
 800f308:	40006800 	.word	0x40006800

0800f30c <MX_CAN3_Init>:
/* CAN3 init function */
void MX_CAN3_Init(void)
{
 800f30c:	b580      	push	{r7, lr}
 800f30e:	b08a      	sub	sp, #40	; 0x28
 800f310:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN CAN3_Init 0 */

	hcan3.Instance = CAN3;
 800f312:	4b34      	ldr	r3, [pc, #208]	; (800f3e4 <MX_CAN3_Init+0xd8>)
 800f314:	4a34      	ldr	r2, [pc, #208]	; (800f3e8 <MX_CAN3_Init+0xdc>)
 800f316:	601a      	str	r2, [r3, #0]
	hcan3.Init.Prescaler = 5;
 800f318:	4b32      	ldr	r3, [pc, #200]	; (800f3e4 <MX_CAN3_Init+0xd8>)
 800f31a:	2205      	movs	r2, #5
 800f31c:	605a      	str	r2, [r3, #4]
	hcan3.Init.Mode = CAN_MODE_NORMAL;
 800f31e:	4b31      	ldr	r3, [pc, #196]	; (800f3e4 <MX_CAN3_Init+0xd8>)
 800f320:	2200      	movs	r2, #0
 800f322:	609a      	str	r2, [r3, #8]
	hcan3.Init.SyncJumpWidth = CAN_SJW_4TQ;
 800f324:	4b2f      	ldr	r3, [pc, #188]	; (800f3e4 <MX_CAN3_Init+0xd8>)
 800f326:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 800f32a:	60da      	str	r2, [r3, #12]
	hcan3.Init.TimeSeg1 = CAN_BS1_7TQ;
 800f32c:	4b2d      	ldr	r3, [pc, #180]	; (800f3e4 <MX_CAN3_Init+0xd8>)
 800f32e:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 800f332:	611a      	str	r2, [r3, #16]
	hcan3.Init.TimeSeg2 = CAN_BS2_1TQ;
 800f334:	4b2b      	ldr	r3, [pc, #172]	; (800f3e4 <MX_CAN3_Init+0xd8>)
 800f336:	2200      	movs	r2, #0
 800f338:	615a      	str	r2, [r3, #20]
	/* USER CODE END CAN3_Init 0 */

	/* USER CODE BEGIN CAN3_Init 1 */

	/* USER CODE END CAN3_Init 1 */
	hcan3.Instance = CAN3;
 800f33a:	4b2a      	ldr	r3, [pc, #168]	; (800f3e4 <MX_CAN3_Init+0xd8>)
 800f33c:	4a2a      	ldr	r2, [pc, #168]	; (800f3e8 <MX_CAN3_Init+0xdc>)
 800f33e:	601a      	str	r2, [r3, #0]
	hcan3.Init.Prescaler = 18;
 800f340:	4b28      	ldr	r3, [pc, #160]	; (800f3e4 <MX_CAN3_Init+0xd8>)
 800f342:	2212      	movs	r2, #18
 800f344:	605a      	str	r2, [r3, #4]
	hcan3.Init.Mode = CAN_MODE_NORMAL;
 800f346:	4b27      	ldr	r3, [pc, #156]	; (800f3e4 <MX_CAN3_Init+0xd8>)
 800f348:	2200      	movs	r2, #0
 800f34a:	609a      	str	r2, [r3, #8]
	hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800f34c:	4b25      	ldr	r3, [pc, #148]	; (800f3e4 <MX_CAN3_Init+0xd8>)
 800f34e:	2200      	movs	r2, #0
 800f350:	60da      	str	r2, [r3, #12]
	hcan3.Init.TimeSeg1 = CAN_BS1_2TQ;
 800f352:	4b24      	ldr	r3, [pc, #144]	; (800f3e4 <MX_CAN3_Init+0xd8>)
 800f354:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800f358:	611a      	str	r2, [r3, #16]
	hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 800f35a:	4b22      	ldr	r3, [pc, #136]	; (800f3e4 <MX_CAN3_Init+0xd8>)
 800f35c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800f360:	615a      	str	r2, [r3, #20]
	hcan3.Init.TimeTriggeredMode = DISABLE;
 800f362:	4b20      	ldr	r3, [pc, #128]	; (800f3e4 <MX_CAN3_Init+0xd8>)
 800f364:	2200      	movs	r2, #0
 800f366:	761a      	strb	r2, [r3, #24]
	hcan3.Init.AutoBusOff = DISABLE;
 800f368:	4b1e      	ldr	r3, [pc, #120]	; (800f3e4 <MX_CAN3_Init+0xd8>)
 800f36a:	2200      	movs	r2, #0
 800f36c:	765a      	strb	r2, [r3, #25]
	hcan3.Init.AutoWakeUp = DISABLE;
 800f36e:	4b1d      	ldr	r3, [pc, #116]	; (800f3e4 <MX_CAN3_Init+0xd8>)
 800f370:	2200      	movs	r2, #0
 800f372:	769a      	strb	r2, [r3, #26]
	hcan3.Init.AutoRetransmission = ENABLE;
 800f374:	4b1b      	ldr	r3, [pc, #108]	; (800f3e4 <MX_CAN3_Init+0xd8>)
 800f376:	2201      	movs	r2, #1
 800f378:	76da      	strb	r2, [r3, #27]
	hcan3.Init.ReceiveFifoLocked = DISABLE;
 800f37a:	4b1a      	ldr	r3, [pc, #104]	; (800f3e4 <MX_CAN3_Init+0xd8>)
 800f37c:	2200      	movs	r2, #0
 800f37e:	771a      	strb	r2, [r3, #28]
	hcan3.Init.TransmitFifoPriority = DISABLE;
 800f380:	4b18      	ldr	r3, [pc, #96]	; (800f3e4 <MX_CAN3_Init+0xd8>)
 800f382:	2200      	movs	r2, #0
 800f384:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan3) != HAL_OK)
 800f386:	4817      	ldr	r0, [pc, #92]	; (800f3e4 <MX_CAN3_Init+0xd8>)
 800f388:	f006 f932 	bl	80155f0 <HAL_CAN_Init>
 800f38c:	4603      	mov	r3, r0
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d001      	beq.n	800f396 <MX_CAN3_Init+0x8a>
	{
		Error_Handler();
 800f392:	f004 fb71 	bl	8013a78 <Error_Handler>
	}
	/* USER CODE BEGIN CAN3_Init 2 */
	CAN_FilterTypeDef Can_FilterConfig3;
	Can_FilterConfig3.FilterActivation = CAN_FILTER_ENABLE ;
 800f396:	2301      	movs	r3, #1
 800f398:	623b      	str	r3, [r7, #32]
	Can_FilterConfig3.FilterBank = 1;
 800f39a:	2301      	movs	r3, #1
 800f39c:	617b      	str	r3, [r7, #20]
	Can_FilterConfig3.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800f39e:	2300      	movs	r3, #0
 800f3a0:	613b      	str	r3, [r7, #16]
	Can_FilterConfig3.FilterIdHigh = 0x200<<5;
 800f3a2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f3a6:	603b      	str	r3, [r7, #0]
	Can_FilterConfig3.FilterIdLow=0x0000;
 800f3a8:	2300      	movs	r3, #0
 800f3aa:	607b      	str	r3, [r7, #4]
	Can_FilterConfig3.FilterMaskIdHigh=0x200<<5;
 800f3ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f3b0:	60bb      	str	r3, [r7, #8]
	Can_FilterConfig3.FilterMaskIdLow =0x0000;
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	60fb      	str	r3, [r7, #12]
	Can_FilterConfig3.FilterMode= CAN_FILTERMODE_IDMASK;
 800f3b6:	2300      	movs	r3, #0
 800f3b8:	61bb      	str	r3, [r7, #24]
	Can_FilterConfig3.FilterScale = CAN_FILTERSCALE_32BIT;
 800f3ba:	2301      	movs	r3, #1
 800f3bc:	61fb      	str	r3, [r7, #28]
	Can_FilterConfig3.SlaveStartFilterBank = 6;
 800f3be:	2306      	movs	r3, #6
 800f3c0:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan3,&Can_FilterConfig3 );
 800f3c2:	463b      	mov	r3, r7
 800f3c4:	4619      	mov	r1, r3
 800f3c6:	4807      	ldr	r0, [pc, #28]	; (800f3e4 <MX_CAN3_Init+0xd8>)
 800f3c8:	f006 fa58 	bl	801587c <HAL_CAN_ConfigFilter>
	//
	HAL_CAN_Start(&hcan3);
 800f3cc:	4805      	ldr	r0, [pc, #20]	; (800f3e4 <MX_CAN3_Init+0xd8>)
 800f3ce:	f006 fb41 	bl	8015a54 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan3,CAN_IT_RX_FIFO0_MSG_PENDING);
 800f3d2:	2102      	movs	r1, #2
 800f3d4:	4803      	ldr	r0, [pc, #12]	; (800f3e4 <MX_CAN3_Init+0xd8>)
 800f3d6:	f006 fd87 	bl	8015ee8 <HAL_CAN_ActivateNotification>
	/* USER CODE END CAN3_Init 2 */

}
 800f3da:	bf00      	nop
 800f3dc:	3728      	adds	r7, #40	; 0x28
 800f3de:	46bd      	mov	sp, r7
 800f3e0:	bd80      	pop	{r7, pc}
 800f3e2:	bf00      	nop
 800f3e4:	20009b54 	.word	0x20009b54
 800f3e8:	40003400 	.word	0x40003400

0800f3ec <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800f3ec:	b580      	push	{r7, lr}
 800f3ee:	b08c      	sub	sp, #48	; 0x30
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f3f4:	f107 031c 	add.w	r3, r7, #28
 800f3f8:	2200      	movs	r2, #0
 800f3fa:	601a      	str	r2, [r3, #0]
 800f3fc:	605a      	str	r2, [r3, #4]
 800f3fe:	609a      	str	r2, [r3, #8]
 800f400:	60da      	str	r2, [r3, #12]
 800f402:	611a      	str	r2, [r3, #16]
	if(canHandle->Instance==CAN2)
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	4a44      	ldr	r2, [pc, #272]	; (800f51c <HAL_CAN_MspInit+0x130>)
 800f40a:	4293      	cmp	r3, r2
 800f40c:	d144      	bne.n	800f498 <HAL_CAN_MspInit+0xac>
	{
		/* USER CODE BEGIN CAN2_MspInit 0 */

		/* USER CODE END CAN2_MspInit 0 */
		/* CAN2 clock enable */
		__HAL_RCC_CAN2_CLK_ENABLE();
 800f40e:	4b44      	ldr	r3, [pc, #272]	; (800f520 <HAL_CAN_MspInit+0x134>)
 800f410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f412:	4a43      	ldr	r2, [pc, #268]	; (800f520 <HAL_CAN_MspInit+0x134>)
 800f414:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f418:	6413      	str	r3, [r2, #64]	; 0x40
 800f41a:	4b41      	ldr	r3, [pc, #260]	; (800f520 <HAL_CAN_MspInit+0x134>)
 800f41c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f41e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f422:	61bb      	str	r3, [r7, #24]
 800f424:	69bb      	ldr	r3, [r7, #24]
		__HAL_RCC_CAN1_CLK_ENABLE();
 800f426:	4b3e      	ldr	r3, [pc, #248]	; (800f520 <HAL_CAN_MspInit+0x134>)
 800f428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f42a:	4a3d      	ldr	r2, [pc, #244]	; (800f520 <HAL_CAN_MspInit+0x134>)
 800f42c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800f430:	6413      	str	r3, [r2, #64]	; 0x40
 800f432:	4b3b      	ldr	r3, [pc, #236]	; (800f520 <HAL_CAN_MspInit+0x134>)
 800f434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f43a:	617b      	str	r3, [r7, #20]
 800f43c:	697b      	ldr	r3, [r7, #20]

		__HAL_RCC_GPIOB_CLK_ENABLE();
 800f43e:	4b38      	ldr	r3, [pc, #224]	; (800f520 <HAL_CAN_MspInit+0x134>)
 800f440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f442:	4a37      	ldr	r2, [pc, #220]	; (800f520 <HAL_CAN_MspInit+0x134>)
 800f444:	f043 0302 	orr.w	r3, r3, #2
 800f448:	6313      	str	r3, [r2, #48]	; 0x30
 800f44a:	4b35      	ldr	r3, [pc, #212]	; (800f520 <HAL_CAN_MspInit+0x134>)
 800f44c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f44e:	f003 0302 	and.w	r3, r3, #2
 800f452:	613b      	str	r3, [r7, #16]
 800f454:	693b      	ldr	r3, [r7, #16]
		/**CAN2 GPIO Configuration
    PB5     ------> CAN2_RX
    PB6     ------> CAN2_TX
		 */
		GPIO_InitStruct.Pin = CAN2_RX_Pin|CAN2_TX_Pin;
 800f456:	2360      	movs	r3, #96	; 0x60
 800f458:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f45a:	2302      	movs	r3, #2
 800f45c:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f45e:	2300      	movs	r3, #0
 800f460:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f462:	2303      	movs	r3, #3
 800f464:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800f466:	2309      	movs	r3, #9
 800f468:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f46a:	f107 031c 	add.w	r3, r7, #28
 800f46e:	4619      	mov	r1, r3
 800f470:	482c      	ldr	r0, [pc, #176]	; (800f524 <HAL_CAN_MspInit+0x138>)
 800f472:	f008 fb99 	bl	8017ba8 <HAL_GPIO_Init>

		/* CAN2 interrupt Init */
		HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 4, 0);
 800f476:	2200      	movs	r2, #0
 800f478:	2104      	movs	r1, #4
 800f47a:	2040      	movs	r0, #64	; 0x40
 800f47c:	f007 f869 	bl	8016552 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800f480:	2040      	movs	r0, #64	; 0x40
 800f482:	f007 f882 	bl	801658a <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 4, 1);
 800f486:	2201      	movs	r2, #1
 800f488:	2104      	movs	r1, #4
 800f48a:	2041      	movs	r0, #65	; 0x41
 800f48c:	f007 f861 	bl	8016552 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 800f490:	2041      	movs	r0, #65	; 0x41
 800f492:	f007 f87a 	bl	801658a <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(CAN3_RX1_IRQn);
		/* USER CODE BEGIN CAN3_MspInit 1 */

		/* USER CODE END CAN3_MspInit 1 */
	}
}
 800f496:	e03d      	b.n	800f514 <HAL_CAN_MspInit+0x128>
	else if(canHandle->Instance==CAN3)
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	4a22      	ldr	r2, [pc, #136]	; (800f528 <HAL_CAN_MspInit+0x13c>)
 800f49e:	4293      	cmp	r3, r2
 800f4a0:	d138      	bne.n	800f514 <HAL_CAN_MspInit+0x128>
		__HAL_RCC_CAN3_CLK_ENABLE();
 800f4a2:	4b1f      	ldr	r3, [pc, #124]	; (800f520 <HAL_CAN_MspInit+0x134>)
 800f4a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4a6:	4a1e      	ldr	r2, [pc, #120]	; (800f520 <HAL_CAN_MspInit+0x134>)
 800f4a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f4ac:	6413      	str	r3, [r2, #64]	; 0x40
 800f4ae:	4b1c      	ldr	r3, [pc, #112]	; (800f520 <HAL_CAN_MspInit+0x134>)
 800f4b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f4b6:	60fb      	str	r3, [r7, #12]
 800f4b8:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800f4ba:	4b19      	ldr	r3, [pc, #100]	; (800f520 <HAL_CAN_MspInit+0x134>)
 800f4bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4be:	4a18      	ldr	r2, [pc, #96]	; (800f520 <HAL_CAN_MspInit+0x134>)
 800f4c0:	f043 0301 	orr.w	r3, r3, #1
 800f4c4:	6313      	str	r3, [r2, #48]	; 0x30
 800f4c6:	4b16      	ldr	r3, [pc, #88]	; (800f520 <HAL_CAN_MspInit+0x134>)
 800f4c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4ca:	f003 0301 	and.w	r3, r3, #1
 800f4ce:	60bb      	str	r3, [r7, #8]
 800f4d0:	68bb      	ldr	r3, [r7, #8]
		GPIO_InitStruct.Pin = CAN3_RX_Pin|CAN3_TX_Pin;
 800f4d2:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 800f4d6:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f4d8:	2302      	movs	r3, #2
 800f4da:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f4dc:	2300      	movs	r3, #0
 800f4de:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f4e0:	2303      	movs	r3, #3
 800f4e2:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 800f4e4:	230b      	movs	r3, #11
 800f4e6:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f4e8:	f107 031c 	add.w	r3, r7, #28
 800f4ec:	4619      	mov	r1, r3
 800f4ee:	480f      	ldr	r0, [pc, #60]	; (800f52c <HAL_CAN_MspInit+0x140>)
 800f4f0:	f008 fb5a 	bl	8017ba8 <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(CAN3_RX0_IRQn, 0, 0);
 800f4f4:	2200      	movs	r2, #0
 800f4f6:	2100      	movs	r1, #0
 800f4f8:	2069      	movs	r0, #105	; 0x69
 800f4fa:	f007 f82a 	bl	8016552 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN3_RX0_IRQn);
 800f4fe:	2069      	movs	r0, #105	; 0x69
 800f500:	f007 f843 	bl	801658a <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN3_RX1_IRQn, 0, 0);
 800f504:	2200      	movs	r2, #0
 800f506:	2100      	movs	r1, #0
 800f508:	206a      	movs	r0, #106	; 0x6a
 800f50a:	f007 f822 	bl	8016552 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN3_RX1_IRQn);
 800f50e:	206a      	movs	r0, #106	; 0x6a
 800f510:	f007 f83b 	bl	801658a <HAL_NVIC_EnableIRQ>
}
 800f514:	bf00      	nop
 800f516:	3730      	adds	r7, #48	; 0x30
 800f518:	46bd      	mov	sp, r7
 800f51a:	bd80      	pop	{r7, pc}
 800f51c:	40006800 	.word	0x40006800
 800f520:	40023800 	.word	0x40023800
 800f524:	40020400 	.word	0x40020400
 800f528:	40003400 	.word	0x40003400
 800f52c:	40020000 	.word	0x40020000

0800f530 <TransmitCanPkt>:
}

/* USER CODE BEGIN 1 */

void TransmitCanPkt(const enum enumCanId Ken_idetifier)
{
 800f530:	b580      	push	{r7, lr}
 800f532:	b084      	sub	sp, #16
 800f534:	af00      	add	r7, sp, #0
 800f536:	4603      	mov	r3, r0
 800f538:	80fb      	strh	r3, [r7, #6]
	void *pp_ptr;
	uint16_t Traverser = 0;
 800f53a:	2300      	movs	r3, #0
 800f53c:	81bb      	strh	r3, [r7, #12]
	uint16_t uc_size = 0;
 800f53e:	2300      	movs	r3, #0
 800f540:	81fb      	strh	r3, [r7, #14]



	switch(EI_data.ProtocolType)
 800f542:	4ba6      	ldr	r3, [pc, #664]	; (800f7dc <TransmitCanPkt+0x2ac>)
 800f544:	781b      	ldrb	r3, [r3, #0]
 800f546:	2b03      	cmp	r3, #3
 800f548:	f000 819a 	beq.w	800f880 <TransmitCanPkt+0x350>
 800f54c:	2b03      	cmp	r3, #3
 800f54e:	f300 823d 	bgt.w	800f9cc <TransmitCanPkt+0x49c>
 800f552:	2b01      	cmp	r3, #1
 800f554:	d003      	beq.n	800f55e <TransmitCanPkt+0x2e>
 800f556:	2b02      	cmp	r3, #2
 800f558:	f000 80e5 	beq.w	800f726 <TransmitCanPkt+0x1f6>
 800f55c:	e236      	b.n	800f9cc <TransmitCanPkt+0x49c>
	{

	case HITACHI:
	{
		/* _____________________________ HITACHI ________________________________________ */
		if( (CHECKFLAG(8,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800f55e:	4ba0      	ldr	r3, [pc, #640]	; (800f7e0 <TransmitCanPkt+0x2b0>)
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	0a1b      	lsrs	r3, r3, #8
 800f564:	f003 0301 	and.w	r3, r3, #1
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d003      	beq.n	800f574 <TransmitCanPkt+0x44>
		{
			printf("Stopping CAN Transmission\n");
 800f56c:	489d      	ldr	r0, [pc, #628]	; (800f7e4 <TransmitCanPkt+0x2b4>)
 800f56e:	f013 f8b5 	bl	80226dc <puts>
			return;
 800f572:	e22b      	b.n	800f9cc <TransmitCanPkt+0x49c>
		}

		switch((int)Ken_idetifier)
 800f574:	88fb      	ldrh	r3, [r7, #6]
 800f576:	f240 1219 	movw	r2, #281	; 0x119
 800f57a:	4293      	cmp	r3, r2
 800f57c:	d042      	beq.n	800f604 <TransmitCanPkt+0xd4>
 800f57e:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 800f582:	f340 80ca 	ble.w	800f71a <TransmitCanPkt+0x1ea>
 800f586:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800f58a:	f300 80c6 	bgt.w	800f71a <TransmitCanPkt+0x1ea>
 800f58e:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 800f592:	f2c0 80c2 	blt.w	800f71a <TransmitCanPkt+0x1ea>
 800f596:	f5a3 73f9 	sub.w	r3, r3, #498	; 0x1f2
 800f59a:	2b16      	cmp	r3, #22
 800f59c:	f200 80bd 	bhi.w	800f71a <TransmitCanPkt+0x1ea>
 800f5a0:	a201      	add	r2, pc, #4	; (adr r2, 800f5a8 <TransmitCanPkt+0x78>)
 800f5a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5a6:	bf00      	nop
 800f5a8:	0800f63d 	.word	0x0800f63d
 800f5ac:	0800f63d 	.word	0x0800f63d
 800f5b0:	0800f6f7 	.word	0x0800f6f7
 800f5b4:	0800f71b 	.word	0x0800f71b
 800f5b8:	0800f71b 	.word	0x0800f71b
 800f5bc:	0800f71b 	.word	0x0800f71b
 800f5c0:	0800f71b 	.word	0x0800f71b
 800f5c4:	0800f71b 	.word	0x0800f71b
 800f5c8:	0800f71b 	.word	0x0800f71b
 800f5cc:	0800f71b 	.word	0x0800f71b
 800f5d0:	0800f71b 	.word	0x0800f71b
 800f5d4:	0800f71b 	.word	0x0800f71b
 800f5d8:	0800f71b 	.word	0x0800f71b
 800f5dc:	0800f71b 	.word	0x0800f71b
 800f5e0:	0800f71b 	.word	0x0800f71b
 800f5e4:	0800f661 	.word	0x0800f661
 800f5e8:	0800f661 	.word	0x0800f661
 800f5ec:	0800f68b 	.word	0x0800f68b
 800f5f0:	0800f68b 	.word	0x0800f68b
 800f5f4:	0800f6af 	.word	0x0800f6af
 800f5f8:	0800f71b 	.word	0x0800f71b
 800f5fc:	0800f6d3 	.word	0x0800f6d3
 800f600:	0800f6d3 	.word	0x0800f6d3
		{
		case EI_PROCESS_DATA:
			vEI_Transver_EI_To_MIE.ActualDataBytes = (EI_data.Hitachi_st.PeersCnt * MAX_OUTPUTS_PER_PEER);
 800f604:	4b75      	ldr	r3, [pc, #468]	; (800f7dc <TransmitCanPkt+0x2ac>)
 800f606:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f60a:	b29b      	uxth	r3, r3
 800f60c:	011b      	lsls	r3, r3, #4
 800f60e:	b29a      	uxth	r2, r3
 800f610:	4b75      	ldr	r3, [pc, #468]	; (800f7e8 <TransmitCanPkt+0x2b8>)
 800f612:	801a      	strh	r2, [r3, #0]
			pp_ptr = &vEI_Transver_EI_To_MIE;
 800f614:	4b74      	ldr	r3, [pc, #464]	; (800f7e8 <TransmitCanPkt+0x2b8>)
 800f616:	60bb      	str	r3, [r7, #8]
			uc_size =(vEI_Transver_EI_To_MIE.ActualDataBytes + sizeof(vEI_Transver_EI_To_MIE.ActualDataBytes)); /* +2 is by Considering */
 800f618:	4b73      	ldr	r3, [pc, #460]	; (800f7e8 <TransmitCanPkt+0x2b8>)
 800f61a:	881b      	ldrh	r3, [r3, #0]
 800f61c:	3302      	adds	r3, #2
 800f61e:	81fb      	strh	r3, [r7, #14]
			//uc_size = sizeof(EI_VITAL_DATA_TO_VITAL_COMPUTER_t);
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 800f620:	89fb      	ldrh	r3, [r7, #14]
 800f622:	88fa      	ldrh	r2, [r7, #6]
 800f624:	4619      	mov	r1, r3
 800f626:	68b8      	ldr	r0, [r7, #8]
 800f628:	f000 f9f2 	bl	800fa10 <sendCanPkts>
			if(Debug_flag == 1)
 800f62c:	4b6f      	ldr	r3, [pc, #444]	; (800f7ec <TransmitCanPkt+0x2bc>)
 800f62e:	781b      	ldrb	r3, [r3, #0]
 800f630:	2b01      	cmp	r3, #1
 800f632:	d174      	bne.n	800f71e <TransmitCanPkt+0x1ee>
			{
				printf("SENT SIGNAL DATA TO MIE\n");
 800f634:	486e      	ldr	r0, [pc, #440]	; (800f7f0 <TransmitCanPkt+0x2c0>)
 800f636:	f013 f851 	bl	80226dc <puts>
			}
			break;
 800f63a:	e070      	b.n	800f71e <TransmitCanPkt+0x1ee>

		case EiPC_1_HEALTH:
		case EiPC_2_HEALTH:
			pp_ptr = &Hitachi_fault_logging_st;
 800f63c:	4b6d      	ldr	r3, [pc, #436]	; (800f7f4 <TransmitCanPkt+0x2c4>)
 800f63e:	60bb      	str	r3, [r7, #8]
			uc_size = sizeof(HITACHI_FAULT_LOGGING_t);
 800f640:	2316      	movs	r3, #22
 800f642:	81fb      	strh	r3, [r7, #14]
			if(Debug_flag == 1)
 800f644:	4b69      	ldr	r3, [pc, #420]	; (800f7ec <TransmitCanPkt+0x2bc>)
 800f646:	781b      	ldrb	r3, [r3, #0]
 800f648:	2b01      	cmp	r3, #1
 800f64a:	d102      	bne.n	800f652 <TransmitCanPkt+0x122>
			{
				printf("\nHealth 2 MIE\n");
 800f64c:	486a      	ldr	r0, [pc, #424]	; (800f7f8 <TransmitCanPkt+0x2c8>)
 800f64e:	f013 f845 	bl	80226dc <puts>
			}
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 800f652:	89fb      	ldrh	r3, [r7, #14]
 800f654:	88fa      	ldrh	r2, [r7, #6]
 800f656:	4619      	mov	r1, r3
 800f658:	68b8      	ldr	r0, [r7, #8]
 800f65a:	f000 f9d9 	bl	800fa10 <sendCanPkts>
			break;
 800f65e:	e061      	b.n	800f724 <TransmitCanPkt+0x1f4>

		case EI_1_SELF_SHARING:
		case EI_2_SELF_SHARING:
			pp_ptr = &Temp_Tx_Ei_self_sharing_st;
 800f660:	4b66      	ldr	r3, [pc, #408]	; (800f7fc <TransmitCanPkt+0x2cc>)
 800f662:	60bb      	str	r3, [r7, #8]
			uc_size = sizeof(EI_SELF_SHARING_t);
 800f664:	2318      	movs	r3, #24
 800f666:	81fb      	strh	r3, [r7, #14]
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 800f668:	89fb      	ldrh	r3, [r7, #14]
 800f66a:	88fa      	ldrh	r2, [r7, #6]
 800f66c:	4619      	mov	r1, r3
 800f66e:	68b8      	ldr	r0, [r7, #8]
 800f670:	f000 f9ce 	bl	800fa10 <sendCanPkts>
			if(Debug_flag == 1)
 800f674:	4b5d      	ldr	r3, [pc, #372]	; (800f7ec <TransmitCanPkt+0x2bc>)
 800f676:	781b      	ldrb	r3, [r3, #0]
 800f678:	2b01      	cmp	r3, #1
 800f67a:	d152      	bne.n	800f722 <TransmitCanPkt+0x1f2>
			{
				printf("Sent2_O:%u\n",Temp_Tx_Ei_self_sharing_st.Peer_Index);
 800f67c:	4b5f      	ldr	r3, [pc, #380]	; (800f7fc <TransmitCanPkt+0x2cc>)
 800f67e:	781b      	ldrb	r3, [r3, #0]
 800f680:	4619      	mov	r1, r3
 800f682:	485f      	ldr	r0, [pc, #380]	; (800f800 <TransmitCanPkt+0x2d0>)
 800f684:	f012 ff8e 	bl	80225a4 <iprintf>
			}
			break;
 800f688:	e04b      	b.n	800f722 <TransmitCanPkt+0x1f2>

		case SEND_VITAL_MSG_1:
		case SEND_VITAL_MSG_2:
			pp_ptr = &Tx_VITAL_MSG_CAN_st;
 800f68a:	4b5e      	ldr	r3, [pc, #376]	; (800f804 <TransmitCanPkt+0x2d4>)
 800f68c:	60bb      	str	r3, [r7, #8]
			uc_size = sizeof(SEND_VITAL_MSG_2_OTH_t);
 800f68e:	2346      	movs	r3, #70	; 0x46
 800f690:	81fb      	strh	r3, [r7, #14]
			if(Debug_flag == 1)
 800f692:	4b56      	ldr	r3, [pc, #344]	; (800f7ec <TransmitCanPkt+0x2bc>)
 800f694:	781b      	ldrb	r3, [r3, #0]
 800f696:	2b01      	cmp	r3, #1
 800f698:	d102      	bne.n	800f6a0 <TransmitCanPkt+0x170>
			{
				printf("\nSending V-Message 2-O\n");
 800f69a:	485b      	ldr	r0, [pc, #364]	; (800f808 <TransmitCanPkt+0x2d8>)
 800f69c:	f013 f81e 	bl	80226dc <puts>
			}
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 800f6a0:	89fb      	ldrh	r3, [r7, #14]
 800f6a2:	88fa      	ldrh	r2, [r7, #6]
 800f6a4:	4619      	mov	r1, r3
 800f6a6:	68b8      	ldr	r0, [r7, #8]
 800f6a8:	f000 f9b2 	bl	800fa10 <sendCanPkts>
			break;
 800f6ac:	e03a      	b.n	800f724 <TransmitCanPkt+0x1f4>

		case CAN_FAULT_INJECTION:
			pp_ptr = &Hitachi_fault_injection_st;
 800f6ae:	4b4c      	ldr	r3, [pc, #304]	; (800f7e0 <TransmitCanPkt+0x2b0>)
 800f6b0:	60bb      	str	r3, [r7, #8]
			uc_size = sizeof(HITACHI_FAULT_INJECTION_t);
 800f6b2:	2308      	movs	r3, #8
 800f6b4:	81fb      	strh	r3, [r7, #14]
			if(Debug_flag == 1)
 800f6b6:	4b4d      	ldr	r3, [pc, #308]	; (800f7ec <TransmitCanPkt+0x2bc>)
 800f6b8:	781b      	ldrb	r3, [r3, #0]
 800f6ba:	2b01      	cmp	r3, #1
 800f6bc:	d102      	bne.n	800f6c4 <TransmitCanPkt+0x194>
			{
				printf("\nSending Fault Injection data 2-O\n");
 800f6be:	4853      	ldr	r0, [pc, #332]	; (800f80c <TransmitCanPkt+0x2dc>)
 800f6c0:	f013 f80c 	bl	80226dc <puts>
			}
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 800f6c4:	89fb      	ldrh	r3, [r7, #14]
 800f6c6:	88fa      	ldrh	r2, [r7, #6]
 800f6c8:	4619      	mov	r1, r3
 800f6ca:	68b8      	ldr	r0, [r7, #8]
 800f6cc:	f000 f9a0 	bl	800fa10 <sendCanPkts>
			break;
 800f6d0:	e028      	b.n	800f724 <TransmitCanPkt+0x1f4>

		case EIPC1_RELAYS_2_OTHER:
		case EIPC2_RELAYS_2_OTHER:
			pp_ptr = &Tx_Temp_Main_Relays_st;
 800f6d2:	4b4f      	ldr	r3, [pc, #316]	; (800f810 <TransmitCanPkt+0x2e0>)
 800f6d4:	60bb      	str	r3, [r7, #8]
			uc_size = sizeof(RELAYS_t);
 800f6d6:	2314      	movs	r3, #20
 800f6d8:	81fb      	strh	r3, [r7, #14]
			if(Debug_flag == 1)
 800f6da:	4b44      	ldr	r3, [pc, #272]	; (800f7ec <TransmitCanPkt+0x2bc>)
 800f6dc:	781b      	ldrb	r3, [r3, #0]
 800f6de:	2b01      	cmp	r3, #1
 800f6e0:	d102      	bne.n	800f6e8 <TransmitCanPkt+0x1b8>
			{
				printf("Sending Relays-O\n");
 800f6e2:	484c      	ldr	r0, [pc, #304]	; (800f814 <TransmitCanPkt+0x2e4>)
 800f6e4:	f012 fffa 	bl	80226dc <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 800f6e8:	89fb      	ldrh	r3, [r7, #14]
 800f6ea:	88fa      	ldrh	r2, [r7, #6]
 800f6ec:	4619      	mov	r1, r3
 800f6ee:	68b8      	ldr	r0, [r7, #8]
 800f6f0:	f000 f98e 	bl	800fa10 <sendCanPkts>
			break;
 800f6f4:	e016      	b.n	800f724 <TransmitCanPkt+0x1f4>


		case COMBINE_EiPC_HEALTH:
			pp_ptr = &Ei_health_2_mie_st;
 800f6f6:	4b48      	ldr	r3, [pc, #288]	; (800f818 <TransmitCanPkt+0x2e8>)
 800f6f8:	60bb      	str	r3, [r7, #8]
			uc_size = sizeof(EI_HEALTH_2_MIE_t);
 800f6fa:	2304      	movs	r3, #4
 800f6fc:	81fb      	strh	r3, [r7, #14]
			if(Debug_flag == 1)
 800f6fe:	4b3b      	ldr	r3, [pc, #236]	; (800f7ec <TransmitCanPkt+0x2bc>)
 800f700:	781b      	ldrb	r3, [r3, #0]
 800f702:	2b01      	cmp	r3, #1
 800f704:	d102      	bne.n	800f70c <TransmitCanPkt+0x1dc>
			{
				printf("Sending Combine Health\n");
 800f706:	4845      	ldr	r0, [pc, #276]	; (800f81c <TransmitCanPkt+0x2ec>)
 800f708:	f012 ffe8 	bl	80226dc <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 800f70c:	89fb      	ldrh	r3, [r7, #14]
 800f70e:	88fa      	ldrh	r2, [r7, #6]
 800f710:	4619      	mov	r1, r3
 800f712:	68b8      	ldr	r0, [r7, #8]
 800f714:	f000 f97c 	bl	800fa10 <sendCanPkts>
			break;
 800f718:	e004      	b.n	800f724 <TransmitCanPkt+0x1f4>



		default:
			break;
 800f71a:	bf00      	nop
 800f71c:	e156      	b.n	800f9cc <TransmitCanPkt+0x49c>
			break;
 800f71e:	bf00      	nop
 800f720:	e154      	b.n	800f9cc <TransmitCanPkt+0x49c>
			break;
 800f722:	bf00      	nop

		} /* 	switch((int)Ken_idetifier) for HITACHI 	*/
		break; /* case HITACHI: break */
 800f724:	e152      	b.n	800f9cc <TransmitCanPkt+0x49c>
	/* _____________________________ HITACHI ________________________________________ */

	case SIEMENS:
	{
		/* _____________________________ SIEMENS ________________________________________ */
		switch((int)Ken_idetifier)
 800f726:	88fb      	ldrh	r3, [r7, #6]
 800f728:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800f72c:	f300 814b 	bgt.w	800f9c6 <TransmitCanPkt+0x496>
 800f730:	f240 2207 	movw	r2, #519	; 0x207
 800f734:	4293      	cmp	r3, r2
 800f736:	da3d      	bge.n	800f7b4 <TransmitCanPkt+0x284>
 800f738:	f240 2205 	movw	r2, #517	; 0x205
 800f73c:	4293      	cmp	r3, r2
 800f73e:	f000 8090 	beq.w	800f862 <TransmitCanPkt+0x332>
 800f742:	f240 2205 	movw	r2, #517	; 0x205
 800f746:	4293      	cmp	r3, r2
 800f748:	f300 813d 	bgt.w	800f9c6 <TransmitCanPkt+0x496>
 800f74c:	f240 1219 	movw	r2, #281	; 0x119
 800f750:	4293      	cmp	r3, r2
 800f752:	d009      	beq.n	800f768 <TransmitCanPkt+0x238>
 800f754:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 800f758:	f340 8135 	ble.w	800f9c6 <TransmitCanPkt+0x496>
 800f75c:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 800f760:	2b01      	cmp	r3, #1
 800f762:	f200 8130 	bhi.w	800f9c6 <TransmitCanPkt+0x496>
 800f766:	e013      	b.n	800f790 <TransmitCanPkt+0x260>
		{

		case EI_PROCESS_DATA:
			pp_ptr = &VitalData2MIE_st;
 800f768:	4b2d      	ldr	r3, [pc, #180]	; (800f820 <TransmitCanPkt+0x2f0>)
 800f76a:	60bb      	str	r3, [r7, #8]
			//				uc_size = sizeof(VITAL_DATA_t);
			uc_size =(VitalData2MIE_st.NoofDataBytes + sizeof(VitalData2MIE_st.NoofDataBytes)); /* +2 is by Considering */
 800f76c:	4b2c      	ldr	r3, [pc, #176]	; (800f820 <TransmitCanPkt+0x2f0>)
 800f76e:	881b      	ldrh	r3, [r3, #0]
 800f770:	3302      	adds	r3, #2
 800f772:	81fb      	strh	r3, [r7, #14]

			if(Debug_flag == 1)
 800f774:	4b1d      	ldr	r3, [pc, #116]	; (800f7ec <TransmitCanPkt+0x2bc>)
 800f776:	781b      	ldrb	r3, [r3, #0]
 800f778:	2b01      	cmp	r3, #1
 800f77a:	d102      	bne.n	800f782 <TransmitCanPkt+0x252>
			{
				printf("Sending Signals 2 MIE\n");
 800f77c:	4829      	ldr	r0, [pc, #164]	; (800f824 <TransmitCanPkt+0x2f4>)
 800f77e:	f012 ffad 	bl	80226dc <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 800f782:	89fb      	ldrh	r3, [r7, #14]
 800f784:	88fa      	ldrh	r2, [r7, #6]
 800f786:	4619      	mov	r1, r3
 800f788:	68b8      	ldr	r0, [r7, #8]
 800f78a:	f000 f941 	bl	800fa10 <sendCanPkts>
			break;
 800f78e:	e076      	b.n	800f87e <TransmitCanPkt+0x34e>

		case EI_1_SELF_SHARING:
		case EI_2_SELF_SHARING:
			pp_ptr = &Tx_Siemens_self_sharing_st;
 800f790:	4b25      	ldr	r3, [pc, #148]	; (800f828 <TransmitCanPkt+0x2f8>)
 800f792:	60bb      	str	r3, [r7, #8]
			uc_size = sizeof(SIEMENS_SELF_SHARING_t);
 800f794:	2304      	movs	r3, #4
 800f796:	81fb      	strh	r3, [r7, #14]
			if(Debug_flag == 1)
 800f798:	4b14      	ldr	r3, [pc, #80]	; (800f7ec <TransmitCanPkt+0x2bc>)
 800f79a:	781b      	ldrb	r3, [r3, #0]
 800f79c:	2b01      	cmp	r3, #1
 800f79e:	d102      	bne.n	800f7a6 <TransmitCanPkt+0x276>
			{
				printf("Sending Signals 2 MIE\n");
 800f7a0:	4820      	ldr	r0, [pc, #128]	; (800f824 <TransmitCanPkt+0x2f4>)
 800f7a2:	f012 ff9b 	bl	80226dc <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 800f7a6:	89fb      	ldrh	r3, [r7, #14]
 800f7a8:	88fa      	ldrh	r2, [r7, #6]
 800f7aa:	4619      	mov	r1, r3
 800f7ac:	68b8      	ldr	r0, [r7, #8]
 800f7ae:	f000 f92f 	bl	800fa10 <sendCanPkts>
			break;
 800f7b2:	e064      	b.n	800f87e <TransmitCanPkt+0x34e>

		case EIPC1_RELAYS_2_OTHER:
		case EIPC2_RELAYS_2_OTHER:
			pp_ptr = &SiemensMain_Relays_st;
 800f7b4:	4b1d      	ldr	r3, [pc, #116]	; (800f82c <TransmitCanPkt+0x2fc>)
 800f7b6:	60bb      	str	r3, [r7, #8]

			uc_size = (EI_data.Siemens_st.Booloutputs % 8);
 800f7b8:	4b08      	ldr	r3, [pc, #32]	; (800f7dc <TransmitCanPkt+0x2ac>)
 800f7ba:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800f7be:	f003 0307 	and.w	r3, r3, #7
 800f7c2:	81fb      	strh	r3, [r7, #14]
			if (uc_size != 0)
 800f7c4:	89fb      	ldrh	r3, [r7, #14]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d032      	beq.n	800f830 <TransmitCanPkt+0x300>
			{
				uc_size = ((EI_data.Siemens_st.Booloutputs / 8)) + 1; //	including 0th buffer
 800f7ca:	4b04      	ldr	r3, [pc, #16]	; (800f7dc <TransmitCanPkt+0x2ac>)
 800f7cc:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800f7d0:	08db      	lsrs	r3, r3, #3
 800f7d2:	b29b      	uxth	r3, r3
 800f7d4:	3301      	adds	r3, #1
 800f7d6:	81fb      	strh	r3, [r7, #14]
 800f7d8:	e02f      	b.n	800f83a <TransmitCanPkt+0x30a>
 800f7da:	bf00      	nop
 800f7dc:	20000304 	.word	0x20000304
 800f7e0:	20001968 	.word	0x20001968
 800f7e4:	0802689c 	.word	0x0802689c
 800f7e8:	200010f0 	.word	0x200010f0
 800f7ec:	20000645 	.word	0x20000645
 800f7f0:	080268b8 	.word	0x080268b8
 800f7f4:	20001970 	.word	0x20001970
 800f7f8:	080268d0 	.word	0x080268d0
 800f7fc:	20001860 	.word	0x20001860
 800f800:	080268e0 	.word	0x080268e0
 800f804:	20001890 	.word	0x20001890
 800f808:	080268ec 	.word	0x080268ec
 800f80c:	08026904 	.word	0x08026904
 800f810:	2000201c 	.word	0x2000201c
 800f814:	08026928 	.word	0x08026928
 800f818:	20000e3c 	.word	0x20000e3c
 800f81c:	0802693c 	.word	0x0802693c
 800f820:	200034ac 	.word	0x200034ac
 800f824:	08026954 	.word	0x08026954
 800f828:	20003484 	.word	0x20003484
 800f82c:	200036b0 	.word	0x200036b0
			}
			else
			{
				uc_size = (EI_data.Siemens_st.Booloutputs / 8);
 800f830:	4b68      	ldr	r3, [pc, #416]	; (800f9d4 <TransmitCanPkt+0x4a4>)
 800f832:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800f836:	08db      	lsrs	r3, r3, #3
 800f838:	81fb      	strh	r3, [r7, #14]
			}

			SiemensMain_Relays_st.NoofDataBytes = uc_size;
 800f83a:	4a67      	ldr	r2, [pc, #412]	; (800f9d8 <TransmitCanPkt+0x4a8>)
 800f83c:	89fb      	ldrh	r3, [r7, #14]
 800f83e:	8013      	strh	r3, [r2, #0]
			//				printf("NoofDataBytes:%u\n",SiemensMain_Relays_st.NoofDataBytes);
			uc_size = uc_size + ( (sizeof(SiemensMain_Relays_st.NoofDataBytes)) + (sizeof(SiemensMain_Relays_st.VitalCRC)) );
 800f840:	89fb      	ldrh	r3, [r7, #14]
 800f842:	3304      	adds	r3, #4
 800f844:	81fb      	strh	r3, [r7, #14]
			//				printf("Relays2Other:%u\n",uc_size);
			if(Debug_flag == 1)
 800f846:	4b65      	ldr	r3, [pc, #404]	; (800f9dc <TransmitCanPkt+0x4ac>)
 800f848:	781b      	ldrb	r3, [r3, #0]
 800f84a:	2b01      	cmp	r3, #1
 800f84c:	d102      	bne.n	800f854 <TransmitCanPkt+0x324>
			{
				printf("Sending Relays 2 Other\n");
 800f84e:	4864      	ldr	r0, [pc, #400]	; (800f9e0 <TransmitCanPkt+0x4b0>)
 800f850:	f012 ff44 	bl	80226dc <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 800f854:	89fb      	ldrh	r3, [r7, #14]
 800f856:	88fa      	ldrh	r2, [r7, #6]
 800f858:	4619      	mov	r1, r3
 800f85a:	68b8      	ldr	r0, [r7, #8]
 800f85c:	f000 f8d8 	bl	800fa10 <sendCanPkts>
			break;
 800f860:	e00d      	b.n	800f87e <TransmitCanPkt+0x34e>

		case CAN_FAULT_INJECTION:
			pp_ptr = &Siemens_fault_injection_st;
 800f862:	4b60      	ldr	r3, [pc, #384]	; (800f9e4 <TransmitCanPkt+0x4b4>)
 800f864:	60bb      	str	r3, [r7, #8]
			uc_size = sizeof(SIEMENS_FAULT_INJECTION_t);
 800f866:	2308      	movs	r3, #8
 800f868:	81fb      	strh	r3, [r7, #14]
			printf("\nSending Fault Injection data 2-O\n");
 800f86a:	485f      	ldr	r0, [pc, #380]	; (800f9e8 <TransmitCanPkt+0x4b8>)
 800f86c:	f012 ff36 	bl	80226dc <puts>
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 800f870:	89fb      	ldrh	r3, [r7, #14]
 800f872:	88fa      	ldrh	r2, [r7, #6]
 800f874:	4619      	mov	r1, r3
 800f876:	68b8      	ldr	r0, [r7, #8]
 800f878:	f000 f8ca 	bl	800fa10 <sendCanPkts>
			break;
 800f87c:	bf00      	nop
		}
		break; /* case SIEMENS: break */
 800f87e:	e0a2      	b.n	800f9c6 <TransmitCanPkt+0x496>


	case MEDHA:
	{
		/* _____________________________ MEDHA ________________________________________ */
		switch((int)Ken_idetifier)
 800f880:	88fb      	ldrh	r3, [r7, #6]
 800f882:	f240 1219 	movw	r2, #281	; 0x119
 800f886:	4293      	cmp	r3, r2
 800f888:	d042      	beq.n	800f910 <TransmitCanPkt+0x3e0>
 800f88a:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 800f88e:	f340 809c 	ble.w	800f9ca <TransmitCanPkt+0x49a>
 800f892:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800f896:	f300 8098 	bgt.w	800f9ca <TransmitCanPkt+0x49a>
 800f89a:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 800f89e:	f2c0 8094 	blt.w	800f9ca <TransmitCanPkt+0x49a>
 800f8a2:	f5a3 73f9 	sub.w	r3, r3, #498	; 0x1f2
 800f8a6:	2b16      	cmp	r3, #22
 800f8a8:	f200 808f 	bhi.w	800f9ca <TransmitCanPkt+0x49a>
 800f8ac:	a201      	add	r2, pc, #4	; (adr r2, 800f8b4 <TransmitCanPkt+0x384>)
 800f8ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8b2:	bf00      	nop
 800f8b4:	0800f95f 	.word	0x0800f95f
 800f8b8:	0800f95f 	.word	0x0800f95f
 800f8bc:	0800f9cb 	.word	0x0800f9cb
 800f8c0:	0800f9cb 	.word	0x0800f9cb
 800f8c4:	0800f9cb 	.word	0x0800f9cb
 800f8c8:	0800f9cb 	.word	0x0800f9cb
 800f8cc:	0800f9cb 	.word	0x0800f9cb
 800f8d0:	0800f9cb 	.word	0x0800f9cb
 800f8d4:	0800f9cb 	.word	0x0800f9cb
 800f8d8:	0800f9cb 	.word	0x0800f9cb
 800f8dc:	0800f9cb 	.word	0x0800f9cb
 800f8e0:	0800f9cb 	.word	0x0800f9cb
 800f8e4:	0800f9cb 	.word	0x0800f9cb
 800f8e8:	0800f9cb 	.word	0x0800f9cb
 800f8ec:	0800f9cb 	.word	0x0800f9cb
 800f8f0:	0800f93d 	.word	0x0800f93d
 800f8f4:	0800f93d 	.word	0x0800f93d
 800f8f8:	0800f9cb 	.word	0x0800f9cb
 800f8fc:	0800f9cb 	.word	0x0800f9cb
 800f900:	0800f983 	.word	0x0800f983
 800f904:	0800f9cb 	.word	0x0800f9cb
 800f908:	0800f99f 	.word	0x0800f99f
 800f90c:	0800f99f 	.word	0x0800f99f
		{
		case EI_PROCESS_DATA:
			pp_ptr = &Medha_Relay_Sts_st;
 800f910:	4b36      	ldr	r3, [pc, #216]	; (800f9ec <TransmitCanPkt+0x4bc>)
 800f912:	60bb      	str	r3, [r7, #8]
			uc_size = sizeof(MEDHA_RELAY_STS_t);
 800f914:	2330      	movs	r3, #48	; 0x30
 800f916:	81fb      	strh	r3, [r7, #14]
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 800f918:	89fb      	ldrh	r3, [r7, #14]
 800f91a:	88fa      	ldrh	r2, [r7, #6]
 800f91c:	4619      	mov	r1, r3
 800f91e:	68b8      	ldr	r0, [r7, #8]
 800f920:	f000 f876 	bl	800fa10 <sendCanPkts>
			if(Debug_flag == 1)
 800f924:	4b2d      	ldr	r3, [pc, #180]	; (800f9dc <TransmitCanPkt+0x4ac>)
 800f926:	781b      	ldrb	r3, [r3, #0]
 800f928:	2b01      	cmp	r3, #1
 800f92a:	d14a      	bne.n	800f9c2 <TransmitCanPkt+0x492>
			{
				printf("SENT MEDHA SIGNAL DATA TO MIE:%lu\n",HAL_GetTick());
 800f92c:	f005 fe30 	bl	8015590 <HAL_GetTick>
 800f930:	4603      	mov	r3, r0
 800f932:	4619      	mov	r1, r3
 800f934:	482e      	ldr	r0, [pc, #184]	; (800f9f0 <TransmitCanPkt+0x4c0>)
 800f936:	f012 fe35 	bl	80225a4 <iprintf>
			}
			break;
 800f93a:	e042      	b.n	800f9c2 <TransmitCanPkt+0x492>

		case EI_1_SELF_SHARING:
		case EI_2_SELF_SHARING:
			pp_ptr = &Medha_ei_self_sharing_TX_st;
 800f93c:	4b2d      	ldr	r3, [pc, #180]	; (800f9f4 <TransmitCanPkt+0x4c4>)
 800f93e:	60bb      	str	r3, [r7, #8]
			uc_size = sizeof(MEDHA_EI_SELF_SHARING_t);
 800f940:	2308      	movs	r3, #8
 800f942:	81fb      	strh	r3, [r7, #14]
			if(Debug_flag == 1)
 800f944:	4b25      	ldr	r3, [pc, #148]	; (800f9dc <TransmitCanPkt+0x4ac>)
 800f946:	781b      	ldrb	r3, [r3, #0]
 800f948:	2b01      	cmp	r3, #1
 800f94a:	d102      	bne.n	800f952 <TransmitCanPkt+0x422>
			{
				printf("\nSending_2_O\n");
 800f94c:	482a      	ldr	r0, [pc, #168]	; (800f9f8 <TransmitCanPkt+0x4c8>)
 800f94e:	f012 fec5 	bl	80226dc <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 800f952:	89fb      	ldrh	r3, [r7, #14]
 800f954:	88fa      	ldrh	r2, [r7, #6]
 800f956:	4619      	mov	r1, r3
 800f958:	68b8      	ldr	r0, [r7, #8]
 800f95a:	f000 f859 	bl	800fa10 <sendCanPkts>

		case EiPC_1_HEALTH:
		case EiPC_2_HEALTH:
			pp_ptr = &Hitachi_fault_logging_st;
 800f95e:	4b27      	ldr	r3, [pc, #156]	; (800f9fc <TransmitCanPkt+0x4cc>)
 800f960:	60bb      	str	r3, [r7, #8]
			uc_size = sizeof(HITACHI_FAULT_LOGGING_t);
 800f962:	2316      	movs	r3, #22
 800f964:	81fb      	strh	r3, [r7, #14]
			if(Debug_flag == 1)
 800f966:	4b1d      	ldr	r3, [pc, #116]	; (800f9dc <TransmitCanPkt+0x4ac>)
 800f968:	781b      	ldrb	r3, [r3, #0]
 800f96a:	2b01      	cmp	r3, #1
 800f96c:	d102      	bne.n	800f974 <TransmitCanPkt+0x444>
			{
				printf("\nHealth 2 MIE\n");
 800f96e:	4824      	ldr	r0, [pc, #144]	; (800fa00 <TransmitCanPkt+0x4d0>)
 800f970:	f012 feb4 	bl	80226dc <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 800f974:	89fb      	ldrh	r3, [r7, #14]
 800f976:	88fa      	ldrh	r2, [r7, #6]
 800f978:	4619      	mov	r1, r3
 800f97a:	68b8      	ldr	r0, [r7, #8]
 800f97c:	f000 f848 	bl	800fa10 <sendCanPkts>
			break;
 800f980:	e020      	b.n	800f9c4 <TransmitCanPkt+0x494>

		case CAN_FAULT_INJECTION:
			pp_ptr = &Medha_Fault_Injection_st;
 800f982:	4b20      	ldr	r3, [pc, #128]	; (800fa04 <TransmitCanPkt+0x4d4>)
 800f984:	60bb      	str	r3, [r7, #8]
			uc_size = sizeof(MEDHA_FAULT_INJECTION_t);
 800f986:	2304      	movs	r3, #4
 800f988:	81fb      	strh	r3, [r7, #14]
			printf("\nSending Fault Injection data 2-O\n");
 800f98a:	4817      	ldr	r0, [pc, #92]	; (800f9e8 <TransmitCanPkt+0x4b8>)
 800f98c:	f012 fea6 	bl	80226dc <puts>
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 800f990:	89fb      	ldrh	r3, [r7, #14]
 800f992:	88fa      	ldrh	r2, [r7, #6]
 800f994:	4619      	mov	r1, r3
 800f996:	68b8      	ldr	r0, [r7, #8]
 800f998:	f000 f83a 	bl	800fa10 <sendCanPkts>
			break;
 800f99c:	e012      	b.n	800f9c4 <TransmitCanPkt+0x494>

		case EIPC1_RELAYS_2_OTHER:
		case EIPC2_RELAYS_2_OTHER:
			pp_ptr = &Medha_Cur_Relay_Status_st;
 800f99e:	4b1a      	ldr	r3, [pc, #104]	; (800fa08 <TransmitCanPkt+0x4d8>)
 800f9a0:	60bb      	str	r3, [r7, #8]
			uc_size = sizeof(MEDHA_CUR_RELAY_STS_t);
 800f9a2:	2384      	movs	r3, #132	; 0x84
 800f9a4:	81fb      	strh	r3, [r7, #14]
			if(Debug_flag == 1)
 800f9a6:	4b0d      	ldr	r3, [pc, #52]	; (800f9dc <TransmitCanPkt+0x4ac>)
 800f9a8:	781b      	ldrb	r3, [r3, #0]
 800f9aa:	2b01      	cmp	r3, #1
 800f9ac:	d102      	bne.n	800f9b4 <TransmitCanPkt+0x484>
			{
				printf("\nRelay Data 2-O\n");
 800f9ae:	4817      	ldr	r0, [pc, #92]	; (800fa0c <TransmitCanPkt+0x4dc>)
 800f9b0:	f012 fe94 	bl	80226dc <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 800f9b4:	89fb      	ldrh	r3, [r7, #14]
 800f9b6:	88fa      	ldrh	r2, [r7, #6]
 800f9b8:	4619      	mov	r1, r3
 800f9ba:	68b8      	ldr	r0, [r7, #8]
 800f9bc:	f000 f828 	bl	800fa10 <sendCanPkts>
			break;
 800f9c0:	e000      	b.n	800f9c4 <TransmitCanPkt+0x494>
			break;
 800f9c2:	bf00      	nop
		}

		break;
 800f9c4:	e001      	b.n	800f9ca <TransmitCanPkt+0x49a>
		break; /* case SIEMENS: break */
 800f9c6:	bf00      	nop
 800f9c8:	e000      	b.n	800f9cc <TransmitCanPkt+0x49c>
		break;
 800f9ca:	bf00      	nop
	}

	} /* 	switch(EI_data.ProtocolType) */

	UNUSED(Traverser);
}
 800f9cc:	3710      	adds	r7, #16
 800f9ce:	46bd      	mov	sp, r7
 800f9d0:	bd80      	pop	{r7, pc}
 800f9d2:	bf00      	nop
 800f9d4:	20000304 	.word	0x20000304
 800f9d8:	200036b0 	.word	0x200036b0
 800f9dc:	20000645 	.word	0x20000645
 800f9e0:	0802696c 	.word	0x0802696c
 800f9e4:	2000347c 	.word	0x2000347c
 800f9e8:	08026904 	.word	0x08026904
 800f9ec:	200025d4 	.word	0x200025d4
 800f9f0:	08026984 	.word	0x08026984
 800f9f4:	20002614 	.word	0x20002614
 800f9f8:	080269a8 	.word	0x080269a8
 800f9fc:	20001970 	.word	0x20001970
 800fa00:	080268d0 	.word	0x080268d0
 800fa04:	20002610 	.word	0x20002610
 800fa08:	2000262c 	.word	0x2000262c
 800fa0c:	080269b8 	.word	0x080269b8

0800fa10 <sendCanPkts>:

void sendCanPkts(void *sptr, int size,enum enumCanId canId)
{
 800fa10:	b580      	push	{r7, lr}
 800fa12:	b088      	sub	sp, #32
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	60f8      	str	r0, [r7, #12]
 800fa18:	60b9      	str	r1, [r7, #8]
 800fa1a:	4613      	mov	r3, r2
 800fa1c:	80fb      	strh	r3, [r7, #6]
	int32_t j = size,seqNo=0;
 800fa1e:	68bb      	ldr	r3, [r7, #8]
 800fa20:	61fb      	str	r3, [r7, #28]
 800fa22:	2300      	movs	r3, #0
 800fa24:	61bb      	str	r3, [r7, #24]
	char *cptr = sptr;
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	617b      	str	r3, [r7, #20]
	while(j > 0)
 800fa2a:	e019      	b.n	800fa60 <sendCanPkts+0x50>
	{
		//printf("J=%u\n",j);
		if(j < 7)
 800fa2c:	69fb      	ldr	r3, [r7, #28]
 800fa2e:	2b06      	cmp	r3, #6
 800fa30:	dc07      	bgt.n	800fa42 <sendCanPkts+0x32>
		{
			CAN_transmit(canId,cptr,j+1,seqNo);
 800fa32:	88f8      	ldrh	r0, [r7, #6]
 800fa34:	69fb      	ldr	r3, [r7, #28]
 800fa36:	1c5a      	adds	r2, r3, #1
 800fa38:	69bb      	ldr	r3, [r7, #24]
 800fa3a:	6979      	ldr	r1, [r7, #20]
 800fa3c:	f000 f818 	bl	800fa70 <CAN_transmit>
 800fa40:	e005      	b.n	800fa4e <sendCanPkts+0x3e>
		}
		else
		{
			CAN_transmit(canId,cptr,8,seqNo);
 800fa42:	88f8      	ldrh	r0, [r7, #6]
 800fa44:	69bb      	ldr	r3, [r7, #24]
 800fa46:	2208      	movs	r2, #8
 800fa48:	6979      	ldr	r1, [r7, #20]
 800fa4a:	f000 f811 	bl	800fa70 <CAN_transmit>
		}
		cptr += 7;
 800fa4e:	697b      	ldr	r3, [r7, #20]
 800fa50:	3307      	adds	r3, #7
 800fa52:	617b      	str	r3, [r7, #20]
		j-=7;
 800fa54:	69fb      	ldr	r3, [r7, #28]
 800fa56:	3b07      	subs	r3, #7
 800fa58:	61fb      	str	r3, [r7, #28]
		seqNo++;
 800fa5a:	69bb      	ldr	r3, [r7, #24]
 800fa5c:	3301      	adds	r3, #1
 800fa5e:	61bb      	str	r3, [r7, #24]
	while(j > 0)
 800fa60:	69fb      	ldr	r3, [r7, #28]
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	dce2      	bgt.n	800fa2c <sendCanPkts+0x1c>
	}
}
 800fa66:	bf00      	nop
 800fa68:	bf00      	nop
 800fa6a:	3720      	adds	r7, #32
 800fa6c:	46bd      	mov	sp, r7
 800fa6e:	bd80      	pop	{r7, pc}

0800fa70 <CAN_transmit>:

void CAN_transmit (int can_id ,char* datPtr,int len,int seqNo)
{
 800fa70:	b580      	push	{r7, lr}
 800fa72:	b088      	sub	sp, #32
 800fa74:	af00      	add	r7, sp, #0
 800fa76:	60f8      	str	r0, [r7, #12]
 800fa78:	60b9      	str	r1, [r7, #8]
 800fa7a:	607a      	str	r2, [r7, #4]
 800fa7c:	603b      	str	r3, [r7, #0]
	char i=0;
 800fa7e:	2300      	movs	r3, #0
 800fa80:	77fb      	strb	r3, [r7, #31]
	uint32_t CAN_TxWaitClk = HAL_GetTick();
 800fa82:	f005 fd85 	bl	8015590 <HAL_GetTick>
 800fa86:	61b8      	str	r0, [r7, #24]

	//	CAN_TxMsg.id = can_id;
	TxData[0] = seqNo;
 800fa88:	683b      	ldr	r3, [r7, #0]
 800fa8a:	b2da      	uxtb	r2, r3
 800fa8c:	4b4d      	ldr	r3, [pc, #308]	; (800fbc4 <CAN_transmit+0x154>)
 800fa8e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < len-1; i++)
 800fa90:	2300      	movs	r3, #0
 800fa92:	77fb      	strb	r3, [r7, #31]
 800fa94:	e00a      	b.n	800faac <CAN_transmit+0x3c>
	{
		TxData[i+1] = *(datPtr+i);
 800fa96:	7ffb      	ldrb	r3, [r7, #31]
 800fa98:	68ba      	ldr	r2, [r7, #8]
 800fa9a:	441a      	add	r2, r3
 800fa9c:	7ffb      	ldrb	r3, [r7, #31]
 800fa9e:	3301      	adds	r3, #1
 800faa0:	7811      	ldrb	r1, [r2, #0]
 800faa2:	4a48      	ldr	r2, [pc, #288]	; (800fbc4 <CAN_transmit+0x154>)
 800faa4:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < len-1; i++)
 800faa6:	7ffb      	ldrb	r3, [r7, #31]
 800faa8:	3301      	adds	r3, #1
 800faaa:	77fb      	strb	r3, [r7, #31]
 800faac:	7ffa      	ldrb	r2, [r7, #31]
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	3b01      	subs	r3, #1
 800fab2:	429a      	cmp	r2, r3
 800fab4:	dbef      	blt.n	800fa96 <CAN_transmit+0x26>
	}
	if(can_id < (0x200) )
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fabc:	da3b      	bge.n	800fb36 <CAN_transmit+0xc6>
	{
		while(len!=0)
 800fabe:	e036      	b.n	800fb2e <CAN_transmit+0xbe>
		{
			/* transmit message to 3,4 nodes: CAN2*/
			TxHeader2.IDE = CAN_ID_STD;
 800fac0:	4b41      	ldr	r3, [pc, #260]	; (800fbc8 <CAN_transmit+0x158>)
 800fac2:	2200      	movs	r2, #0
 800fac4:	609a      	str	r2, [r3, #8]
			TxHeader2.StdId=can_id;
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	4a3f      	ldr	r2, [pc, #252]	; (800fbc8 <CAN_transmit+0x158>)
 800faca:	6013      	str	r3, [r2, #0]
			TxHeader2.RTR=CAN_RTR_DATA;
 800facc:	4b3e      	ldr	r3, [pc, #248]	; (800fbc8 <CAN_transmit+0x158>)
 800face:	2200      	movs	r2, #0
 800fad0:	60da      	str	r2, [r3, #12]
			TxHeader2.DLC=len;
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	4a3c      	ldr	r2, [pc, #240]	; (800fbc8 <CAN_transmit+0x158>)
 800fad6:	6113      	str	r3, [r2, #16]
			uint8_t txbuff=0;
 800fad8:	2300      	movs	r3, #0
 800fada:	75bb      	strb	r3, [r7, #22]
			//				{
			//					printf("%02X ",TxData[i]);
			//				}
			//				printf("\n");
			//			}
			if((Error=HAL_CAN_AddTxMessage(&hcan2, &TxHeader2, TxData, &pTxMailbox2))!=HAL_OK)
 800fadc:	4b3b      	ldr	r3, [pc, #236]	; (800fbcc <CAN_transmit+0x15c>)
 800fade:	4a39      	ldr	r2, [pc, #228]	; (800fbc4 <CAN_transmit+0x154>)
 800fae0:	4939      	ldr	r1, [pc, #228]	; (800fbc8 <CAN_transmit+0x158>)
 800fae2:	483b      	ldr	r0, [pc, #236]	; (800fbd0 <CAN_transmit+0x160>)
 800fae4:	f005 fffa 	bl	8015adc <HAL_CAN_AddTxMessage>
 800fae8:	4603      	mov	r3, r0
 800faea:	461a      	mov	r2, r3
 800faec:	4b39      	ldr	r3, [pc, #228]	; (800fbd4 <CAN_transmit+0x164>)
 800faee:	701a      	strb	r2, [r3, #0]
 800faf0:	4b38      	ldr	r3, [pc, #224]	; (800fbd4 <CAN_transmit+0x164>)
 800faf2:	781b      	ldrb	r3, [r3, #0]
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d00d      	beq.n	800fb14 <CAN_transmit+0xa4>
			{
				printf("CAN2 Tx Fail\n");
 800faf8:	4837      	ldr	r0, [pc, #220]	; (800fbd8 <CAN_transmit+0x168>)
 800fafa:	f012 fdef 	bl	80226dc <puts>
				return;
 800fafe:	e05e      	b.n	800fbbe <CAN_transmit+0x14e>
				//				Error_Handler();
			}
			while( (txbuff=HAL_CAN_IsTxMessagePending(&hcan2, pTxMailbox2))>=1)
			{
				if(HAL_Elaps_Ticks(CAN_TxWaitClk) > 100)
 800fb00:	69b8      	ldr	r0, [r7, #24]
 800fb02:	f7fe ff93 	bl	800ea2c <HAL_Elaps_Ticks>
 800fb06:	4603      	mov	r3, r0
 800fb08:	2b64      	cmp	r3, #100	; 0x64
 800fb0a:	d903      	bls.n	800fb14 <CAN_transmit+0xa4>
				{
					printf("CAN2 Tx Fail\n");
 800fb0c:	4832      	ldr	r0, [pc, #200]	; (800fbd8 <CAN_transmit+0x168>)
 800fb0e:	f012 fde5 	bl	80226dc <puts>
					return;
 800fb12:	e054      	b.n	800fbbe <CAN_transmit+0x14e>
			while( (txbuff=HAL_CAN_IsTxMessagePending(&hcan2, pTxMailbox2))>=1)
 800fb14:	4b2d      	ldr	r3, [pc, #180]	; (800fbcc <CAN_transmit+0x15c>)
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	4619      	mov	r1, r3
 800fb1a:	482d      	ldr	r0, [pc, #180]	; (800fbd0 <CAN_transmit+0x160>)
 800fb1c:	f006 f8ae 	bl	8015c7c <HAL_CAN_IsTxMessagePending>
 800fb20:	4603      	mov	r3, r0
 800fb22:	75bb      	strb	r3, [r7, #22]
 800fb24:	7dbb      	ldrb	r3, [r7, #22]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d1ea      	bne.n	800fb00 <CAN_transmit+0x90>
				}
			}

			len=0;
 800fb2a:	2300      	movs	r3, #0
 800fb2c:	607b      	str	r3, [r7, #4]
		while(len!=0)
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d1c5      	bne.n	800fac0 <CAN_transmit+0x50>
 800fb34:	e043      	b.n	800fbbe <CAN_transmit+0x14e>
		}
	}
	else
	{

		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 800fb36:	4929      	ldr	r1, [pc, #164]	; (800fbdc <CAN_transmit+0x16c>)
 800fb38:	4829      	ldr	r0, [pc, #164]	; (800fbe0 <CAN_transmit+0x170>)
 800fb3a:	f7f0 fb81 	bl	8000240 <strcmp>
 800fb3e:	4603      	mov	r3, r0
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d03b      	beq.n	800fbbc <CAN_transmit+0x14c>
		{
			return;
		}

		while(len!=0)
 800fb44:	e036      	b.n	800fbb4 <CAN_transmit+0x144>
		{
			/* transmit message to 3,4 nodes: CAN2*/
			TxHeader3.IDE = CAN_ID_STD;
 800fb46:	4b27      	ldr	r3, [pc, #156]	; (800fbe4 <CAN_transmit+0x174>)
 800fb48:	2200      	movs	r2, #0
 800fb4a:	609a      	str	r2, [r3, #8]
			TxHeader3.StdId=can_id;
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	4a25      	ldr	r2, [pc, #148]	; (800fbe4 <CAN_transmit+0x174>)
 800fb50:	6013      	str	r3, [r2, #0]
			TxHeader3.RTR=CAN_RTR_DATA;
 800fb52:	4b24      	ldr	r3, [pc, #144]	; (800fbe4 <CAN_transmit+0x174>)
 800fb54:	2200      	movs	r2, #0
 800fb56:	60da      	str	r2, [r3, #12]
			TxHeader3.DLC=len;
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	4a22      	ldr	r2, [pc, #136]	; (800fbe4 <CAN_transmit+0x174>)
 800fb5c:	6113      	str	r3, [r2, #16]
			uint8_t txbuff=0;
 800fb5e:	2300      	movs	r3, #0
 800fb60:	75fb      	strb	r3, [r7, #23]
			//				}
			//				printf("\n");
			//			}

			//printf("TxHeader1.DLC:%u\n",TxHeader1.DLC);
			if((Error=HAL_CAN_AddTxMessage(&hcan3, &TxHeader3, TxData, &pTxMailbox3))!=HAL_OK)
 800fb62:	4b21      	ldr	r3, [pc, #132]	; (800fbe8 <CAN_transmit+0x178>)
 800fb64:	4a17      	ldr	r2, [pc, #92]	; (800fbc4 <CAN_transmit+0x154>)
 800fb66:	491f      	ldr	r1, [pc, #124]	; (800fbe4 <CAN_transmit+0x174>)
 800fb68:	4820      	ldr	r0, [pc, #128]	; (800fbec <CAN_transmit+0x17c>)
 800fb6a:	f005 ffb7 	bl	8015adc <HAL_CAN_AddTxMessage>
 800fb6e:	4603      	mov	r3, r0
 800fb70:	461a      	mov	r2, r3
 800fb72:	4b18      	ldr	r3, [pc, #96]	; (800fbd4 <CAN_transmit+0x164>)
 800fb74:	701a      	strb	r2, [r3, #0]
 800fb76:	4b17      	ldr	r3, [pc, #92]	; (800fbd4 <CAN_transmit+0x164>)
 800fb78:	781b      	ldrb	r3, [r3, #0]
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d00d      	beq.n	800fb9a <CAN_transmit+0x12a>
			{
				printf("CAN3 Tx Fail\n");
 800fb7e:	481c      	ldr	r0, [pc, #112]	; (800fbf0 <CAN_transmit+0x180>)
 800fb80:	f012 fdac 	bl	80226dc <puts>
				return;
 800fb84:	e01b      	b.n	800fbbe <CAN_transmit+0x14e>
				//				Error_Handler();
			}
			while( (txbuff=HAL_CAN_IsTxMessagePending(&hcan3, pTxMailbox3))>=1)
			{
				if(HAL_Elaps_Ticks(CAN_TxWaitClk) > 100)
 800fb86:	69b8      	ldr	r0, [r7, #24]
 800fb88:	f7fe ff50 	bl	800ea2c <HAL_Elaps_Ticks>
 800fb8c:	4603      	mov	r3, r0
 800fb8e:	2b64      	cmp	r3, #100	; 0x64
 800fb90:	d903      	bls.n	800fb9a <CAN_transmit+0x12a>
				{
					printf("CAN3 Tx Fail\n");
 800fb92:	4817      	ldr	r0, [pc, #92]	; (800fbf0 <CAN_transmit+0x180>)
 800fb94:	f012 fda2 	bl	80226dc <puts>
					return;
 800fb98:	e011      	b.n	800fbbe <CAN_transmit+0x14e>
			while( (txbuff=HAL_CAN_IsTxMessagePending(&hcan3, pTxMailbox3))>=1)
 800fb9a:	4b13      	ldr	r3, [pc, #76]	; (800fbe8 <CAN_transmit+0x178>)
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	4619      	mov	r1, r3
 800fba0:	4812      	ldr	r0, [pc, #72]	; (800fbec <CAN_transmit+0x17c>)
 800fba2:	f006 f86b 	bl	8015c7c <HAL_CAN_IsTxMessagePending>
 800fba6:	4603      	mov	r3, r0
 800fba8:	75fb      	strb	r3, [r7, #23]
 800fbaa:	7dfb      	ldrb	r3, [r7, #23]
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d1ea      	bne.n	800fb86 <CAN_transmit+0x116>
				}
			}
			len=0;
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	607b      	str	r3, [r7, #4]
		while(len!=0)
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d1c5      	bne.n	800fb46 <CAN_transmit+0xd6>
 800fbba:	e000      	b.n	800fbbe <CAN_transmit+0x14e>
			return;
 800fbbc:	bf00      	nop
		}
	}
}
 800fbbe:	3720      	adds	r7, #32
 800fbc0:	46bd      	mov	sp, r7
 800fbc2:	bd80      	pop	{r7, pc}
 800fbc4:	20009ae4 	.word	0x20009ae4
 800fbc8:	20009a64 	.word	0x20009a64
 800fbcc:	20009a94 	.word	0x20009a94
 800fbd0:	20009af0 	.word	0x20009af0
 800fbd4:	20009aec 	.word	0x20009aec
 800fbd8:	080269c8 	.word	0x080269c8
 800fbdc:	080269d8 	.word	0x080269d8
 800fbe0:	20000305 	.word	0x20000305
 800fbe4:	20009a7c 	.word	0x20009a7c
 800fbe8:	20009a98 	.word	0x20009a98
 800fbec:	20009b54 	.word	0x20009b54
 800fbf0:	080269e4 	.word	0x080269e4

0800fbf4 <HAL_CAN_RxFifo0MsgPendingCallback>:

/******************Function to be invoked when we get an interrupt on CAN1*****************/
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800fbf4:	b580      	push	{r7, lr}
 800fbf6:	b082      	sub	sp, #8
 800fbf8:	af00      	add	r7, sp, #0
 800fbfa:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN3)
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	4a3e      	ldr	r2, [pc, #248]	; (800fcfc <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 800fc02:	4293      	cmp	r3, r2
 800fc04:	d175      	bne.n	800fcf2 <HAL_CAN_RxFifo0MsgPendingCallback+0xfe>
	{
		//		printf("^");
		if(CANBUFFSIZE==canRead.In)
 800fc06:	4b3e      	ldr	r3, [pc, #248]	; (800fd00 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800fc08:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fc0c:	881b      	ldrh	r3, [r3, #0]
 800fc0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fc12:	d104      	bne.n	800fc1e <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
		{
			canRead.In=0;
 800fc14:	4b3a      	ldr	r3, [pc, #232]	; (800fd00 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800fc16:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fc1a:	2200      	movs	r2, #0
 800fc1c:	801a      	strh	r2, [r3, #0]
		}
		if (HAL_CAN_GetRxMessage(&hcan3,CAN_RX_FIFO0,&RxHeader2,RxData_can3) != HAL_OK)
 800fc1e:	4b39      	ldr	r3, [pc, #228]	; (800fd04 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 800fc20:	4a39      	ldr	r2, [pc, #228]	; (800fd08 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 800fc22:	2100      	movs	r1, #0
 800fc24:	4839      	ldr	r0, [pc, #228]	; (800fd0c <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 800fc26:	f006 f84d 	bl	8015cc4 <HAL_CAN_GetRxMessage>
 800fc2a:	4603      	mov	r3, r0
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d001      	beq.n	800fc34 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
		{
			Error_Handler();
 800fc30:	f003 ff22 	bl	8013a78 <Error_Handler>
		}
		(canRead.CAN_msg[canRead.In]).canPort=3;
 800fc34:	4b32      	ldr	r3, [pc, #200]	; (800fd00 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800fc36:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fc3a:	881b      	ldrh	r3, [r3, #0]
 800fc3c:	4a30      	ldr	r2, [pc, #192]	; (800fd00 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800fc3e:	011b      	lsls	r3, r3, #4
 800fc40:	4413      	add	r3, r2
 800fc42:	330f      	adds	r3, #15
 800fc44:	2203      	movs	r2, #3
 800fc46:	701a      	strb	r2, [r3, #0]
		(canRead.CAN_msg[canRead.In]).Dlc=RxHeader2.DLC;
 800fc48:	4b2f      	ldr	r3, [pc, #188]	; (800fd08 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 800fc4a:	691a      	ldr	r2, [r3, #16]
 800fc4c:	4b2c      	ldr	r3, [pc, #176]	; (800fd00 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800fc4e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fc52:	881b      	ldrh	r3, [r3, #0]
 800fc54:	b2d1      	uxtb	r1, r2
 800fc56:	4a2a      	ldr	r2, [pc, #168]	; (800fd00 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800fc58:	011b      	lsls	r3, r3, #4
 800fc5a:	4413      	add	r3, r2
 800fc5c:	330c      	adds	r3, #12
 800fc5e:	460a      	mov	r2, r1
 800fc60:	701a      	strb	r2, [r3, #0]
		(canRead.CAN_msg[canRead.In]).Ide=RxHeader2.IDE;
 800fc62:	4b29      	ldr	r3, [pc, #164]	; (800fd08 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 800fc64:	689a      	ldr	r2, [r3, #8]
 800fc66:	4b26      	ldr	r3, [pc, #152]	; (800fd00 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800fc68:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fc6c:	881b      	ldrh	r3, [r3, #0]
 800fc6e:	b2d1      	uxtb	r1, r2
 800fc70:	4a23      	ldr	r2, [pc, #140]	; (800fd00 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800fc72:	011b      	lsls	r3, r3, #4
 800fc74:	4413      	add	r3, r2
 800fc76:	330d      	adds	r3, #13
 800fc78:	460a      	mov	r2, r1
 800fc7a:	701a      	strb	r2, [r3, #0]
		(canRead.CAN_msg[canRead.In]).Rtr=RxHeader2.RTR;
 800fc7c:	4b22      	ldr	r3, [pc, #136]	; (800fd08 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 800fc7e:	68da      	ldr	r2, [r3, #12]
 800fc80:	4b1f      	ldr	r3, [pc, #124]	; (800fd00 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800fc82:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fc86:	881b      	ldrh	r3, [r3, #0]
 800fc88:	b2d1      	uxtb	r1, r2
 800fc8a:	4a1d      	ldr	r2, [pc, #116]	; (800fd00 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800fc8c:	011b      	lsls	r3, r3, #4
 800fc8e:	4413      	add	r3, r2
 800fc90:	330e      	adds	r3, #14
 800fc92:	460a      	mov	r2, r1
 800fc94:	701a      	strb	r2, [r3, #0]
		(canRead.CAN_msg[canRead.In]).StdId=RxHeader2.StdId;
 800fc96:	4b1a      	ldr	r3, [pc, #104]	; (800fd00 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800fc98:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fc9c:	881b      	ldrh	r3, [r3, #0]
 800fc9e:	4618      	mov	r0, r3
 800fca0:	4b19      	ldr	r3, [pc, #100]	; (800fd08 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 800fca2:	681a      	ldr	r2, [r3, #0]
 800fca4:	4916      	ldr	r1, [pc, #88]	; (800fd00 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800fca6:	0103      	lsls	r3, r0, #4
 800fca8:	440b      	add	r3, r1
 800fcaa:	601a      	str	r2, [r3, #0]
		//printf("stdid in Int_Handler=%x\n",RxHeader1.StdId);
		if((canRead.CAN_msg[canRead.In]).Rtr==CAN_RTR_DATA)
 800fcac:	4b14      	ldr	r3, [pc, #80]	; (800fd00 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800fcae:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fcb2:	881b      	ldrh	r3, [r3, #0]
 800fcb4:	4a12      	ldr	r2, [pc, #72]	; (800fd00 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800fcb6:	011b      	lsls	r3, r3, #4
 800fcb8:	4413      	add	r3, r2
 800fcba:	330e      	adds	r3, #14
 800fcbc:	781b      	ldrb	r3, [r3, #0]
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d117      	bne.n	800fcf2 <HAL_CAN_RxFifo0MsgPendingCallback+0xfe>
		{
			memcpy((canRead.CAN_msg[canRead.In]).data,RxData_can3,8);
 800fcc2:	4b0f      	ldr	r3, [pc, #60]	; (800fd00 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800fcc4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fcc8:	881b      	ldrh	r3, [r3, #0]
 800fcca:	011b      	lsls	r3, r3, #4
 800fccc:	4a0c      	ldr	r2, [pc, #48]	; (800fd00 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800fcce:	4413      	add	r3, r2
 800fcd0:	3304      	adds	r3, #4
 800fcd2:	490c      	ldr	r1, [pc, #48]	; (800fd04 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 800fcd4:	461a      	mov	r2, r3
 800fcd6:	460b      	mov	r3, r1
 800fcd8:	cb03      	ldmia	r3!, {r0, r1}
 800fcda:	6010      	str	r0, [r2, #0]
 800fcdc:	6051      	str	r1, [r2, #4]
			canRead.In++;
 800fcde:	4b08      	ldr	r3, [pc, #32]	; (800fd00 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800fce0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fce4:	881b      	ldrh	r3, [r3, #0]
 800fce6:	3301      	adds	r3, #1
 800fce8:	b29a      	uxth	r2, r3
 800fcea:	4b05      	ldr	r3, [pc, #20]	; (800fd00 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800fcec:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fcf0:	801a      	strh	r2, [r3, #0]
		}
	}
}
 800fcf2:	bf00      	nop
 800fcf4:	3708      	adds	r7, #8
 800fcf6:	46bd      	mov	sp, r7
 800fcf8:	bd80      	pop	{r7, pc}
 800fcfa:	bf00      	nop
 800fcfc:	40003400 	.word	0x40003400
 800fd00:	20005a60 	.word	0x20005a60
 800fd04:	20009adc 	.word	0x20009adc
 800fd08:	20009ab8 	.word	0x20009ab8
 800fd0c:	20009b54 	.word	0x20009b54

0800fd10 <HAL_CAN_RxFifo1MsgPendingCallback>:

/******************Function to be invoked when we get an interrupt on CAN2*****************/
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800fd10:	b580      	push	{r7, lr}
 800fd12:	b082      	sub	sp, #8
 800fd14:	af00      	add	r7, sp, #0
 800fd16:	6078      	str	r0, [r7, #4]
	//printf("Interrupt invoked for CAN2\n");
	if(CANBUFFSIZE==canRead.In)
 800fd18:	4b42      	ldr	r3, [pc, #264]	; (800fe24 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fd1a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fd1e:	881b      	ldrh	r3, [r3, #0]
 800fd20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fd24:	d104      	bne.n	800fd30 <HAL_CAN_RxFifo1MsgPendingCallback+0x20>
		canRead.In=0;
 800fd26:	4b3f      	ldr	r3, [pc, #252]	; (800fe24 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fd28:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fd2c:	2200      	movs	r2, #0
 800fd2e:	801a      	strh	r2, [r3, #0]
	if ((Error=HAL_CAN_GetRxMessage(&hcan2,CAN_RX_FIFO1,&RxHeader1,RxData_can2)) != HAL_OK)
 800fd30:	4b3d      	ldr	r3, [pc, #244]	; (800fe28 <HAL_CAN_RxFifo1MsgPendingCallback+0x118>)
 800fd32:	4a3e      	ldr	r2, [pc, #248]	; (800fe2c <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 800fd34:	2101      	movs	r1, #1
 800fd36:	483e      	ldr	r0, [pc, #248]	; (800fe30 <HAL_CAN_RxFifo1MsgPendingCallback+0x120>)
 800fd38:	f005 ffc4 	bl	8015cc4 <HAL_CAN_GetRxMessage>
 800fd3c:	4603      	mov	r3, r0
 800fd3e:	461a      	mov	r2, r3
 800fd40:	4b3c      	ldr	r3, [pc, #240]	; (800fe34 <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 800fd42:	701a      	strb	r2, [r3, #0]
 800fd44:	4b3b      	ldr	r3, [pc, #236]	; (800fe34 <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 800fd46:	781b      	ldrb	r3, [r3, #0]
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d007      	beq.n	800fd5c <HAL_CAN_RxFifo1MsgPendingCallback+0x4c>
	{
		printf("Error in CAN2 Reception Interrupt: %d\n",Error);
 800fd4c:	4b39      	ldr	r3, [pc, #228]	; (800fe34 <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 800fd4e:	781b      	ldrb	r3, [r3, #0]
 800fd50:	4619      	mov	r1, r3
 800fd52:	4839      	ldr	r0, [pc, #228]	; (800fe38 <HAL_CAN_RxFifo1MsgPendingCallback+0x128>)
 800fd54:	f012 fc26 	bl	80225a4 <iprintf>
		Error_Handler();
 800fd58:	f003 fe8e 	bl	8013a78 <Error_Handler>
	}
	//	printf("RxHeader1.stdid=%lx \n",RxHeader1.StdId);

	(canRead.CAN_msg[canRead.In]).canPort=2;
 800fd5c:	4b31      	ldr	r3, [pc, #196]	; (800fe24 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fd5e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fd62:	881b      	ldrh	r3, [r3, #0]
 800fd64:	4a2f      	ldr	r2, [pc, #188]	; (800fe24 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fd66:	011b      	lsls	r3, r3, #4
 800fd68:	4413      	add	r3, r2
 800fd6a:	330f      	adds	r3, #15
 800fd6c:	2202      	movs	r2, #2
 800fd6e:	701a      	strb	r2, [r3, #0]
	(canRead.CAN_msg[canRead.In]).Dlc=RxHeader1.DLC;
 800fd70:	4b2e      	ldr	r3, [pc, #184]	; (800fe2c <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 800fd72:	691a      	ldr	r2, [r3, #16]
 800fd74:	4b2b      	ldr	r3, [pc, #172]	; (800fe24 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fd76:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fd7a:	881b      	ldrh	r3, [r3, #0]
 800fd7c:	b2d1      	uxtb	r1, r2
 800fd7e:	4a29      	ldr	r2, [pc, #164]	; (800fe24 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fd80:	011b      	lsls	r3, r3, #4
 800fd82:	4413      	add	r3, r2
 800fd84:	330c      	adds	r3, #12
 800fd86:	460a      	mov	r2, r1
 800fd88:	701a      	strb	r2, [r3, #0]
	(canRead.CAN_msg[canRead.In]).Ide=RxHeader1.IDE;
 800fd8a:	4b28      	ldr	r3, [pc, #160]	; (800fe2c <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 800fd8c:	689a      	ldr	r2, [r3, #8]
 800fd8e:	4b25      	ldr	r3, [pc, #148]	; (800fe24 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fd90:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fd94:	881b      	ldrh	r3, [r3, #0]
 800fd96:	b2d1      	uxtb	r1, r2
 800fd98:	4a22      	ldr	r2, [pc, #136]	; (800fe24 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fd9a:	011b      	lsls	r3, r3, #4
 800fd9c:	4413      	add	r3, r2
 800fd9e:	330d      	adds	r3, #13
 800fda0:	460a      	mov	r2, r1
 800fda2:	701a      	strb	r2, [r3, #0]
	(canRead.CAN_msg[canRead.In]).Rtr=RxHeader1.RTR;
 800fda4:	4b21      	ldr	r3, [pc, #132]	; (800fe2c <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 800fda6:	68da      	ldr	r2, [r3, #12]
 800fda8:	4b1e      	ldr	r3, [pc, #120]	; (800fe24 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fdaa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fdae:	881b      	ldrh	r3, [r3, #0]
 800fdb0:	b2d1      	uxtb	r1, r2
 800fdb2:	4a1c      	ldr	r2, [pc, #112]	; (800fe24 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fdb4:	011b      	lsls	r3, r3, #4
 800fdb6:	4413      	add	r3, r2
 800fdb8:	330e      	adds	r3, #14
 800fdba:	460a      	mov	r2, r1
 800fdbc:	701a      	strb	r2, [r3, #0]
	(canRead.CAN_msg[canRead.In]).StdId=RxHeader1.StdId;
 800fdbe:	4b19      	ldr	r3, [pc, #100]	; (800fe24 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fdc0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fdc4:	881b      	ldrh	r3, [r3, #0]
 800fdc6:	4618      	mov	r0, r3
 800fdc8:	4b18      	ldr	r3, [pc, #96]	; (800fe2c <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 800fdca:	681a      	ldr	r2, [r3, #0]
 800fdcc:	4915      	ldr	r1, [pc, #84]	; (800fe24 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fdce:	0103      	lsls	r3, r0, #4
 800fdd0:	440b      	add	r3, r1
 800fdd2:	601a      	str	r2, [r3, #0]

	if((canRead.CAN_msg[canRead.In]).Rtr==CAN_RTR_DATA){
 800fdd4:	4b13      	ldr	r3, [pc, #76]	; (800fe24 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fdd6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fdda:	881b      	ldrh	r3, [r3, #0]
 800fddc:	4a11      	ldr	r2, [pc, #68]	; (800fe24 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fdde:	011b      	lsls	r3, r3, #4
 800fde0:	4413      	add	r3, r2
 800fde2:	330e      	adds	r3, #14
 800fde4:	781b      	ldrb	r3, [r3, #0]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d117      	bne.n	800fe1a <HAL_CAN_RxFifo1MsgPendingCallback+0x10a>
		//	printf("copying in to buffer on can2\n");
		memcpy((canRead.CAN_msg[canRead.In]).data,RxData_can2,8);
 800fdea:	4b0e      	ldr	r3, [pc, #56]	; (800fe24 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fdec:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fdf0:	881b      	ldrh	r3, [r3, #0]
 800fdf2:	011b      	lsls	r3, r3, #4
 800fdf4:	4a0b      	ldr	r2, [pc, #44]	; (800fe24 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fdf6:	4413      	add	r3, r2
 800fdf8:	3304      	adds	r3, #4
 800fdfa:	490b      	ldr	r1, [pc, #44]	; (800fe28 <HAL_CAN_RxFifo1MsgPendingCallback+0x118>)
 800fdfc:	461a      	mov	r2, r3
 800fdfe:	460b      	mov	r3, r1
 800fe00:	cb03      	ldmia	r3!, {r0, r1}
 800fe02:	6010      	str	r0, [r2, #0]
 800fe04:	6051      	str	r1, [r2, #4]
		canRead.In++;
 800fe06:	4b07      	ldr	r3, [pc, #28]	; (800fe24 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fe08:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fe0c:	881b      	ldrh	r3, [r3, #0]
 800fe0e:	3301      	adds	r3, #1
 800fe10:	b29a      	uxth	r2, r3
 800fe12:	4b04      	ldr	r3, [pc, #16]	; (800fe24 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fe14:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fe18:	801a      	strh	r2, [r3, #0]
	}
}
 800fe1a:	bf00      	nop
 800fe1c:	3708      	adds	r7, #8
 800fe1e:	46bd      	mov	sp, r7
 800fe20:	bd80      	pop	{r7, pc}
 800fe22:	bf00      	nop
 800fe24:	20005a60 	.word	0x20005a60
 800fe28:	20009ad4 	.word	0x20009ad4
 800fe2c:	20009a9c 	.word	0x20009a9c
 800fe30:	20009af0 	.word	0x20009af0
 800fe34:	20009aec 	.word	0x20009aec
 800fe38:	080269f4 	.word	0x080269f4

0800fe3c <canDataReady>:


unsigned char canDataReady()
{
 800fe3c:	b580      	push	{r7, lr}
 800fe3e:	b082      	sub	sp, #8
 800fe40:	af00      	add	r7, sp, #0
	unsigned int ui_Read_CAN_index  = 0;
 800fe42:	2300      	movs	r3, #0
 800fe44:	607b      	str	r3, [r7, #4]

	if(canRead.In == canRead.Out)
 800fe46:	4b27      	ldr	r3, [pc, #156]	; (800fee4 <canDataReady+0xa8>)
 800fe48:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fe4c:	881a      	ldrh	r2, [r3, #0]
 800fe4e:	4b25      	ldr	r3, [pc, #148]	; (800fee4 <canDataReady+0xa8>)
 800fe50:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fe54:	885b      	ldrh	r3, [r3, #2]
 800fe56:	429a      	cmp	r2, r3
 800fe58:	d101      	bne.n	800fe5e <canDataReady+0x22>
	{
		return 0;
 800fe5a:	2300      	movs	r3, #0
 800fe5c:	e03e      	b.n	800fedc <canDataReady+0xa0>
	}
	/* for removing duplicates in the buffer */
	for(ui_Read_CAN_index = (canRead.Out+1);ui_Read_CAN_index<canRead.In;ui_Read_CAN_index++)
 800fe5e:	4b21      	ldr	r3, [pc, #132]	; (800fee4 <canDataReady+0xa8>)
 800fe60:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fe64:	885b      	ldrh	r3, [r3, #2]
 800fe66:	3301      	adds	r3, #1
 800fe68:	607b      	str	r3, [r7, #4]
 800fe6a:	e02e      	b.n	800feca <canDataReady+0x8e>
	{
		if(0 == memcmp(&canRead.CAN_msg[canRead.Out],&canRead.CAN_msg[canRead.In],sizeof(CAN_msg)))
 800fe6c:	4b1d      	ldr	r3, [pc, #116]	; (800fee4 <canDataReady+0xa8>)
 800fe6e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fe72:	885b      	ldrh	r3, [r3, #2]
 800fe74:	011b      	lsls	r3, r3, #4
 800fe76:	4a1b      	ldr	r2, [pc, #108]	; (800fee4 <canDataReady+0xa8>)
 800fe78:	1898      	adds	r0, r3, r2
 800fe7a:	4b1a      	ldr	r3, [pc, #104]	; (800fee4 <canDataReady+0xa8>)
 800fe7c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fe80:	881b      	ldrh	r3, [r3, #0]
 800fe82:	011b      	lsls	r3, r3, #4
 800fe84:	4a17      	ldr	r2, [pc, #92]	; (800fee4 <canDataReady+0xa8>)
 800fe86:	4413      	add	r3, r2
 800fe88:	2210      	movs	r2, #16
 800fe8a:	4619      	mov	r1, r3
 800fe8c:	f012 fa6a 	bl	8022364 <memcmp>
 800fe90:	4603      	mov	r3, r0
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d116      	bne.n	800fec4 <canDataReady+0x88>
		{
			memset(&canRead.CAN_msg[canRead.Out],0,sizeof(CAN_msg));
 800fe96:	4b13      	ldr	r3, [pc, #76]	; (800fee4 <canDataReady+0xa8>)
 800fe98:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fe9c:	885b      	ldrh	r3, [r3, #2]
 800fe9e:	011b      	lsls	r3, r3, #4
 800fea0:	4a10      	ldr	r2, [pc, #64]	; (800fee4 <canDataReady+0xa8>)
 800fea2:	4413      	add	r3, r2
 800fea4:	2210      	movs	r2, #16
 800fea6:	2100      	movs	r1, #0
 800fea8:	4618      	mov	r0, r3
 800feaa:	f012 fa93 	bl	80223d4 <memset>
			canRead.Out++;
 800feae:	4b0d      	ldr	r3, [pc, #52]	; (800fee4 <canDataReady+0xa8>)
 800feb0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800feb4:	885b      	ldrh	r3, [r3, #2]
 800feb6:	3301      	adds	r3, #1
 800feb8:	b29a      	uxth	r2, r3
 800feba:	4b0a      	ldr	r3, [pc, #40]	; (800fee4 <canDataReady+0xa8>)
 800febc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fec0:	805a      	strh	r2, [r3, #2]
			break;
 800fec2:	e00a      	b.n	800feda <canDataReady+0x9e>
	for(ui_Read_CAN_index = (canRead.Out+1);ui_Read_CAN_index<canRead.In;ui_Read_CAN_index++)
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	3301      	adds	r3, #1
 800fec8:	607b      	str	r3, [r7, #4]
 800feca:	4b06      	ldr	r3, [pc, #24]	; (800fee4 <canDataReady+0xa8>)
 800fecc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fed0:	881b      	ldrh	r3, [r3, #0]
 800fed2:	461a      	mov	r2, r3
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	4293      	cmp	r3, r2
 800fed8:	d3c8      	bcc.n	800fe6c <canDataReady+0x30>
		}
	}
	return 1;
 800feda:	2301      	movs	r3, #1
}
 800fedc:	4618      	mov	r0, r3
 800fede:	3708      	adds	r7, #8
 800fee0:	46bd      	mov	sp, r7
 800fee2:	bd80      	pop	{r7, pc}
 800fee4:	20005a60 	.word	0x20005a60

0800fee8 <readCanToStructs>:

void readCanToStructs(void)
{
 800fee8:	b580      	push	{r7, lr}
 800feea:	b08e      	sub	sp, #56	; 0x38
 800feec:	af00      	add	r7, sp, #0
	unsigned char uc_seqNo,uc_Loop_Index = 0,uc_index = 0,uc_LocIndex = 0;
 800feee:	2300      	movs	r3, #0
 800fef0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800fef4:	2300      	movs	r3, #0
 800fef6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800fefa:	2300      	movs	r3, #0
 800fefc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t *uc_pp_charPtr= 0;
 800ff00:	2300      	movs	r3, #0
 800ff02:	633b      	str	r3, [r7, #48]	; 0x30

	static uint16_t DataLength = 0;
	static uint16_t DataTraverser = 0;


	switch(EI_data.ProtocolType)
 800ff04:	4bc0      	ldr	r3, [pc, #768]	; (8010208 <readCanToStructs+0x320>)
 800ff06:	781b      	ldrb	r3, [r3, #0]
 800ff08:	2b03      	cmp	r3, #3
 800ff0a:	f002 8640 	beq.w	8012b8e <readCanToStructs+0x2ca6>
 800ff0e:	2b03      	cmp	r3, #3
 800ff10:	f302 8644 	bgt.w	8012b9c <readCanToStructs+0x2cb4>
 800ff14:	2b01      	cmp	r3, #1
 800ff16:	d004      	beq.n	800ff22 <readCanToStructs+0x3a>
 800ff18:	2b02      	cmp	r3, #2
 800ff1a:	f001 87f4 	beq.w	8011f06 <readCanToStructs+0x201e>
		/* __________ MEDHA _________ */
	}
	break;

	default:
		break;
 800ff1e:	f002 be3d 	b.w	8012b9c <readCanToStructs+0x2cb4>
		if( (CHECKFLAG(7,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800ff22:	4bba      	ldr	r3, [pc, #744]	; (801020c <readCanToStructs+0x324>)
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	09db      	lsrs	r3, r3, #7
 800ff28:	f003 0301 	and.w	r3, r3, #1
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	f042 8637 	bne.w	8012ba0 <readCanToStructs+0x2cb8>
		while(canDataReady())
 800ff32:	f001 b92f 	b.w	8011194 <readCanToStructs+0x12ac>
			uc_index = canRead.CAN_msg[canRead.Out].canPort-1;
 800ff36:	4bb6      	ldr	r3, [pc, #728]	; (8010210 <readCanToStructs+0x328>)
 800ff38:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800ff3c:	885b      	ldrh	r3, [r3, #2]
 800ff3e:	4ab4      	ldr	r2, [pc, #720]	; (8010210 <readCanToStructs+0x328>)
 800ff40:	011b      	lsls	r3, r3, #4
 800ff42:	4413      	add	r3, r2
 800ff44:	330f      	adds	r3, #15
 800ff46:	781b      	ldrb	r3, [r3, #0]
 800ff48:	3b01      	subs	r3, #1
 800ff4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			switch(canRead.CAN_msg[canRead.Out].StdId)
 800ff4e:	4bb0      	ldr	r3, [pc, #704]	; (8010210 <readCanToStructs+0x328>)
 800ff50:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800ff54:	885b      	ldrh	r3, [r3, #2]
 800ff56:	4aae      	ldr	r2, [pc, #696]	; (8010210 <readCanToStructs+0x328>)
 800ff58:	011b      	lsls	r3, r3, #4
 800ff5a:	4413      	add	r3, r2
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800ff62:	f201 80f4 	bhi.w	801114e <readCanToStructs+0x1266>
 800ff66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ff6a:	d80a      	bhi.n	800ff82 <readCanToStructs+0x9a>
 800ff6c:	f240 1203 	movw	r2, #259	; 0x103
 800ff70:	4293      	cmp	r3, r2
 800ff72:	d01f      	beq.n	800ffb4 <readCanToStructs+0xcc>
 800ff74:	f240 1209 	movw	r2, #265	; 0x109
 800ff78:	4293      	cmp	r3, r2
 800ff7a:	f000 80f1 	beq.w	8010160 <readCanToStructs+0x278>
				break;
 800ff7e:	f001 b8e6 	b.w	801114e <readCanToStructs+0x1266>
 800ff82:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 800ff86:	2b07      	cmp	r3, #7
 800ff88:	f201 80e1 	bhi.w	801114e <readCanToStructs+0x1266>
 800ff8c:	a201      	add	r2, pc, #4	; (adr r2, 800ff94 <readCanToStructs+0xac>)
 800ff8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff92:	bf00      	nop
 800ff94:	08010335 	.word	0x08010335
 800ff98:	0801053d 	.word	0x0801053d
 800ff9c:	08010715 	.word	0x08010715
 800ffa0:	0801092f 	.word	0x0801092f
 800ffa4:	08010b45 	.word	0x08010b45
 800ffa8:	0801114f 	.word	0x0801114f
 800ffac:	08010cd9 	.word	0x08010cd9
 800ffb0:	08010f13 	.word	0x08010f13
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 800ffb4:	4b97      	ldr	r3, [pc, #604]	; (8010214 <readCanToStructs+0x32c>)
 800ffb6:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 800ffb8:	4b95      	ldr	r3, [pc, #596]	; (8010210 <readCanToStructs+0x328>)
 800ffba:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800ffbe:	885b      	ldrh	r3, [r3, #2]
 800ffc0:	4a93      	ldr	r2, [pc, #588]	; (8010210 <readCanToStructs+0x328>)
 800ffc2:	011b      	lsls	r3, r3, #4
 800ffc4:	4413      	add	r3, r2
 800ffc6:	3304      	adds	r3, #4
 800ffc8:	781b      	ldrb	r3, [r3, #0]
 800ffca:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 800ffce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d110      	bne.n	800fff8 <readCanToStructs+0x110>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 800ffd6:	2206      	movs	r2, #6
 800ffd8:	2100      	movs	r1, #0
 800ffda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ffdc:	f012 f9fa 	bl	80223d4 <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 800ffe0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ffe4:	4a8c      	ldr	r2, [pc, #560]	; (8010218 <readCanToStructs+0x330>)
 800ffe6:	f240 4112 	movw	r1, #1042	; 0x412
 800ffea:	fb01 f303 	mul.w	r3, r1, r3
 800ffee:	4413      	add	r3, r2
 800fff0:	f203 2307 	addw	r3, r3, #519	; 0x207
 800fff4:	2200      	movs	r2, #0
 800fff6:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS_TIME_PKT].expSeqNo)
 800fff8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fffc:	4a86      	ldr	r2, [pc, #536]	; (8010218 <readCanToStructs+0x330>)
 800fffe:	f240 4112 	movw	r1, #1042	; 0x412
 8010002:	fb01 f303 	mul.w	r3, r1, r3
 8010006:	4413      	add	r3, r2
 8010008:	f203 2307 	addw	r3, r3, #519	; 0x207
 801000c:	781b      	ldrb	r3, [r3, #0]
 801000e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010012:	429a      	cmp	r2, r3
 8010014:	d015      	beq.n	8010042 <readCanToStructs+0x15a>
					printf("GPS Packet Seq no MisMatch\n");
 8010016:	4881      	ldr	r0, [pc, #516]	; (801021c <readCanToStructs+0x334>)
 8010018:	f012 fb60 	bl	80226dc <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 801001c:	2206      	movs	r2, #6
 801001e:	2100      	movs	r1, #0
 8010020:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010022:	f012 f9d7 	bl	80223d4 <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8010026:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801002a:	4a7b      	ldr	r2, [pc, #492]	; (8010218 <readCanToStructs+0x330>)
 801002c:	f240 4112 	movw	r1, #1042	; 0x412
 8010030:	fb01 f303 	mul.w	r3, r1, r3
 8010034:	4413      	add	r3, r2
 8010036:	f203 2307 	addw	r3, r3, #519	; 0x207
 801003a:	2200      	movs	r2, #0
 801003c:	701a      	strb	r2, [r3, #0]
					break;
 801003e:	f001 b887 	b.w	8011150 <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 8010042:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010046:	4613      	mov	r3, r2
 8010048:	00db      	lsls	r3, r3, #3
 801004a:	1a9b      	subs	r3, r3, r2
 801004c:	461a      	mov	r2, r3
 801004e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010050:	4413      	add	r3, r2
 8010052:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010054:	2301      	movs	r3, #1
 8010056:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801005a:	e016      	b.n	801008a <readCanToStructs+0x1a2>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 801005c:	4b6c      	ldr	r3, [pc, #432]	; (8010210 <readCanToStructs+0x328>)
 801005e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010062:	885b      	ldrh	r3, [r3, #2]
 8010064:	461a      	mov	r2, r3
 8010066:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801006a:	4969      	ldr	r1, [pc, #420]	; (8010210 <readCanToStructs+0x328>)
 801006c:	0112      	lsls	r2, r2, #4
 801006e:	440a      	add	r2, r1
 8010070:	4413      	add	r3, r2
 8010072:	3304      	adds	r3, #4
 8010074:	781a      	ldrb	r2, [r3, #0]
 8010076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010078:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801007a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801007c:	3301      	adds	r3, #1
 801007e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010080:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010084:	3301      	adds	r3, #1
 8010086:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801008a:	4b61      	ldr	r3, [pc, #388]	; (8010210 <readCanToStructs+0x328>)
 801008c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010090:	885b      	ldrh	r3, [r3, #2]
 8010092:	4a5f      	ldr	r2, [pc, #380]	; (8010210 <readCanToStructs+0x328>)
 8010094:	011b      	lsls	r3, r3, #4
 8010096:	4413      	add	r3, r2
 8010098:	330c      	adds	r3, #12
 801009a:	781b      	ldrb	r3, [r3, #0]
 801009c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80100a0:	429a      	cmp	r2, r3
 80100a2:	d3db      	bcc.n	801005c <readCanToStructs+0x174>
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 80100a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80100a8:	4a5b      	ldr	r2, [pc, #364]	; (8010218 <readCanToStructs+0x330>)
 80100aa:	f240 4112 	movw	r1, #1042	; 0x412
 80100ae:	fb01 f303 	mul.w	r3, r1, r3
 80100b2:	4413      	add	r3, r2
 80100b4:	f203 2307 	addw	r3, r3, #519	; 0x207
 80100b8:	781b      	ldrb	r3, [r3, #0]
 80100ba:	461a      	mov	r2, r3
 80100bc:	4613      	mov	r3, r2
 80100be:	00db      	lsls	r3, r3, #3
 80100c0:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 80100c2:	4b53      	ldr	r3, [pc, #332]	; (8010210 <readCanToStructs+0x328>)
 80100c4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80100c8:	885b      	ldrh	r3, [r3, #2]
 80100ca:	4951      	ldr	r1, [pc, #324]	; (8010210 <readCanToStructs+0x328>)
 80100cc:	011b      	lsls	r3, r3, #4
 80100ce:	440b      	add	r3, r1
 80100d0:	330c      	adds	r3, #12
 80100d2:	781b      	ldrb	r3, [r3, #0]
 80100d4:	3b01      	subs	r3, #1
 80100d6:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 80100d8:	2b05      	cmp	r3, #5
 80100da:	d91c      	bls.n	8010116 <readCanToStructs+0x22e>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 80100dc:	4b50      	ldr	r3, [pc, #320]	; (8010220 <readCanToStructs+0x338>)
 80100de:	4a4d      	ldr	r2, [pc, #308]	; (8010214 <readCanToStructs+0x32c>)
 80100e0:	6811      	ldr	r1, [r2, #0]
 80100e2:	6019      	str	r1, [r3, #0]
 80100e4:	8892      	ldrh	r2, [r2, #4]
 80100e6:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 80100e8:	4b4e      	ldr	r3, [pc, #312]	; (8010224 <readCanToStructs+0x33c>)
 80100ea:	781b      	ldrb	r3, [r3, #0]
 80100ec:	2b01      	cmp	r3, #1
 80100ee:	d102      	bne.n	80100f6 <readCanToStructs+0x20e>
						printf("GPS_PACKET_RECEIVED\n");
 80100f0:	484d      	ldr	r0, [pc, #308]	; (8010228 <readCanToStructs+0x340>)
 80100f2:	f012 faf3 	bl	80226dc <puts>
					Write_RTC();
 80100f6:	f7fa ffa7 	bl	800b048 <Write_RTC>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 80100fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80100fe:	4a46      	ldr	r2, [pc, #280]	; (8010218 <readCanToStructs+0x330>)
 8010100:	f240 4112 	movw	r1, #1042	; 0x412
 8010104:	fb01 f303 	mul.w	r3, r1, r3
 8010108:	4413      	add	r3, r2
 801010a:	f203 2307 	addw	r3, r3, #519	; 0x207
 801010e:	2200      	movs	r2, #0
 8010110:	701a      	strb	r2, [r3, #0]
				break;
 8010112:	f001 b81d 	b.w	8011150 <readCanToStructs+0x1268>
					canStatus[uc_index][GPS_TIME_PKT].invalid = 1;
 8010116:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801011a:	4a3f      	ldr	r2, [pc, #252]	; (8010218 <readCanToStructs+0x330>)
 801011c:	f240 4112 	movw	r1, #1042	; 0x412
 8010120:	fb01 f303 	mul.w	r3, r1, r3
 8010124:	4413      	add	r3, r2
 8010126:	f203 2306 	addw	r3, r3, #518	; 0x206
 801012a:	2201      	movs	r2, #1
 801012c:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo++;
 801012e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010132:	4939      	ldr	r1, [pc, #228]	; (8010218 <readCanToStructs+0x330>)
 8010134:	f240 4212 	movw	r2, #1042	; 0x412
 8010138:	fb03 f202 	mul.w	r2, r3, r2
 801013c:	440a      	add	r2, r1
 801013e:	f202 2207 	addw	r2, r2, #519	; 0x207
 8010142:	7812      	ldrb	r2, [r2, #0]
 8010144:	3201      	adds	r2, #1
 8010146:	b2d0      	uxtb	r0, r2
 8010148:	4a33      	ldr	r2, [pc, #204]	; (8010218 <readCanToStructs+0x330>)
 801014a:	f240 4112 	movw	r1, #1042	; 0x412
 801014e:	fb01 f303 	mul.w	r3, r1, r3
 8010152:	4413      	add	r3, r2
 8010154:	f203 2307 	addw	r3, r3, #519	; 0x207
 8010158:	4602      	mov	r2, r0
 801015a:	701a      	strb	r2, [r3, #0]
				break;
 801015c:	f000 bff8 	b.w	8011150 <readCanToStructs+0x1268>
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 8010160:	4b2c      	ldr	r3, [pc, #176]	; (8010214 <readCanToStructs+0x32c>)
 8010162:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8010164:	4b2a      	ldr	r3, [pc, #168]	; (8010210 <readCanToStructs+0x328>)
 8010166:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801016a:	885b      	ldrh	r3, [r3, #2]
 801016c:	4a28      	ldr	r2, [pc, #160]	; (8010210 <readCanToStructs+0x328>)
 801016e:	011b      	lsls	r3, r3, #4
 8010170:	4413      	add	r3, r2
 8010172:	3304      	adds	r3, #4
 8010174:	781b      	ldrb	r3, [r3, #0]
 8010176:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 801017a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801017e:	2b00      	cmp	r3, #0
 8010180:	d110      	bne.n	80101a4 <readCanToStructs+0x2bc>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8010182:	2206      	movs	r2, #6
 8010184:	2100      	movs	r1, #0
 8010186:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010188:	f012 f924 	bl	80223d4 <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 801018c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010190:	4a21      	ldr	r2, [pc, #132]	; (8010218 <readCanToStructs+0x330>)
 8010192:	f240 4112 	movw	r1, #1042	; 0x412
 8010196:	fb01 f303 	mul.w	r3, r1, r3
 801019a:	4413      	add	r3, r2
 801019c:	f203 2313 	addw	r3, r3, #531	; 0x213
 80101a0:	2200      	movs	r2, #0
 80101a2:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS2_TIME_PKT].expSeqNo)
 80101a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80101a8:	4a1b      	ldr	r2, [pc, #108]	; (8010218 <readCanToStructs+0x330>)
 80101aa:	f240 4112 	movw	r1, #1042	; 0x412
 80101ae:	fb01 f303 	mul.w	r3, r1, r3
 80101b2:	4413      	add	r3, r2
 80101b4:	f203 2313 	addw	r3, r3, #531	; 0x213
 80101b8:	781b      	ldrb	r3, [r3, #0]
 80101ba:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80101be:	429a      	cmp	r2, r3
 80101c0:	d015      	beq.n	80101ee <readCanToStructs+0x306>
					printf("GPS2 Packet Seq no MisMatch\n");
 80101c2:	481a      	ldr	r0, [pc, #104]	; (801022c <readCanToStructs+0x344>)
 80101c4:	f012 fa8a 	bl	80226dc <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 80101c8:	2206      	movs	r2, #6
 80101ca:	2100      	movs	r1, #0
 80101cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80101ce:	f012 f901 	bl	80223d4 <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 80101d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80101d6:	4a10      	ldr	r2, [pc, #64]	; (8010218 <readCanToStructs+0x330>)
 80101d8:	f240 4112 	movw	r1, #1042	; 0x412
 80101dc:	fb01 f303 	mul.w	r3, r1, r3
 80101e0:	4413      	add	r3, r2
 80101e2:	f203 2313 	addw	r3, r3, #531	; 0x213
 80101e6:	2200      	movs	r2, #0
 80101e8:	701a      	strb	r2, [r3, #0]
					break;
 80101ea:	f000 bfb1 	b.w	8011150 <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 80101ee:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80101f2:	4613      	mov	r3, r2
 80101f4:	00db      	lsls	r3, r3, #3
 80101f6:	1a9b      	subs	r3, r3, r2
 80101f8:	461a      	mov	r2, r3
 80101fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101fc:	4413      	add	r3, r2
 80101fe:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010200:	2301      	movs	r3, #1
 8010202:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010206:	e02a      	b.n	801025e <readCanToStructs+0x376>
 8010208:	20000304 	.word	0x20000304
 801020c:	20001968 	.word	0x20001968
 8010210:	20005a60 	.word	0x20005a60
 8010214:	200027e4 	.word	0x200027e4
 8010218:	2000523c 	.word	0x2000523c
 801021c:	08026a1c 	.word	0x08026a1c
 8010220:	200027dc 	.word	0x200027dc
 8010224:	20000645 	.word	0x20000645
 8010228:	08026a38 	.word	0x08026a38
 801022c:	08026a4c 	.word	0x08026a4c
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8010230:	4bb6      	ldr	r3, [pc, #728]	; (801050c <readCanToStructs+0x624>)
 8010232:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010236:	885b      	ldrh	r3, [r3, #2]
 8010238:	461a      	mov	r2, r3
 801023a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801023e:	49b3      	ldr	r1, [pc, #716]	; (801050c <readCanToStructs+0x624>)
 8010240:	0112      	lsls	r2, r2, #4
 8010242:	440a      	add	r2, r1
 8010244:	4413      	add	r3, r2
 8010246:	3304      	adds	r3, #4
 8010248:	781a      	ldrb	r2, [r3, #0]
 801024a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801024c:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801024e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010250:	3301      	adds	r3, #1
 8010252:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010254:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010258:	3301      	adds	r3, #1
 801025a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801025e:	4bab      	ldr	r3, [pc, #684]	; (801050c <readCanToStructs+0x624>)
 8010260:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010264:	885b      	ldrh	r3, [r3, #2]
 8010266:	4aa9      	ldr	r2, [pc, #676]	; (801050c <readCanToStructs+0x624>)
 8010268:	011b      	lsls	r3, r3, #4
 801026a:	4413      	add	r3, r2
 801026c:	330c      	adds	r3, #12
 801026e:	781b      	ldrb	r3, [r3, #0]
 8010270:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8010274:	429a      	cmp	r2, r3
 8010276:	d3db      	bcc.n	8010230 <readCanToStructs+0x348>
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 8010278:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801027c:	4aa4      	ldr	r2, [pc, #656]	; (8010510 <readCanToStructs+0x628>)
 801027e:	f240 4112 	movw	r1, #1042	; 0x412
 8010282:	fb01 f303 	mul.w	r3, r1, r3
 8010286:	4413      	add	r3, r2
 8010288:	f203 2313 	addw	r3, r3, #531	; 0x213
 801028c:	781b      	ldrb	r3, [r3, #0]
 801028e:	461a      	mov	r2, r3
 8010290:	4613      	mov	r3, r2
 8010292:	00db      	lsls	r3, r3, #3
 8010294:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 8010296:	4b9d      	ldr	r3, [pc, #628]	; (801050c <readCanToStructs+0x624>)
 8010298:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801029c:	885b      	ldrh	r3, [r3, #2]
 801029e:	499b      	ldr	r1, [pc, #620]	; (801050c <readCanToStructs+0x624>)
 80102a0:	011b      	lsls	r3, r3, #4
 80102a2:	440b      	add	r3, r1
 80102a4:	330c      	adds	r3, #12
 80102a6:	781b      	ldrb	r3, [r3, #0]
 80102a8:	3b01      	subs	r3, #1
 80102aa:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 80102ac:	2b05      	cmp	r3, #5
 80102ae:	d91c      	bls.n	80102ea <readCanToStructs+0x402>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 80102b0:	4b98      	ldr	r3, [pc, #608]	; (8010514 <readCanToStructs+0x62c>)
 80102b2:	4a99      	ldr	r2, [pc, #612]	; (8010518 <readCanToStructs+0x630>)
 80102b4:	6811      	ldr	r1, [r2, #0]
 80102b6:	6019      	str	r1, [r3, #0]
 80102b8:	8892      	ldrh	r2, [r2, #4]
 80102ba:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 80102bc:	4b97      	ldr	r3, [pc, #604]	; (801051c <readCanToStructs+0x634>)
 80102be:	781b      	ldrb	r3, [r3, #0]
 80102c0:	2b01      	cmp	r3, #1
 80102c2:	d102      	bne.n	80102ca <readCanToStructs+0x3e2>
						printf("GPS2_PACKET_RECEIVED\n");
 80102c4:	4896      	ldr	r0, [pc, #600]	; (8010520 <readCanToStructs+0x638>)
 80102c6:	f012 fa09 	bl	80226dc <puts>
					Write_RTC();
 80102ca:	f7fa febd 	bl	800b048 <Write_RTC>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 80102ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80102d2:	4a8f      	ldr	r2, [pc, #572]	; (8010510 <readCanToStructs+0x628>)
 80102d4:	f240 4112 	movw	r1, #1042	; 0x412
 80102d8:	fb01 f303 	mul.w	r3, r1, r3
 80102dc:	4413      	add	r3, r2
 80102de:	f203 2313 	addw	r3, r3, #531	; 0x213
 80102e2:	2200      	movs	r2, #0
 80102e4:	701a      	strb	r2, [r3, #0]
				break;
 80102e6:	f000 bf33 	b.w	8011150 <readCanToStructs+0x1268>
					canStatus[uc_index][GPS2_TIME_PKT].invalid = 1;
 80102ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80102ee:	4a88      	ldr	r2, [pc, #544]	; (8010510 <readCanToStructs+0x628>)
 80102f0:	f240 4112 	movw	r1, #1042	; 0x412
 80102f4:	fb01 f303 	mul.w	r3, r1, r3
 80102f8:	4413      	add	r3, r2
 80102fa:	f203 2312 	addw	r3, r3, #530	; 0x212
 80102fe:	2201      	movs	r2, #1
 8010300:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo++;
 8010302:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010306:	4982      	ldr	r1, [pc, #520]	; (8010510 <readCanToStructs+0x628>)
 8010308:	f240 4212 	movw	r2, #1042	; 0x412
 801030c:	fb03 f202 	mul.w	r2, r3, r2
 8010310:	440a      	add	r2, r1
 8010312:	f202 2213 	addw	r2, r2, #531	; 0x213
 8010316:	7812      	ldrb	r2, [r2, #0]
 8010318:	3201      	adds	r2, #1
 801031a:	b2d0      	uxtb	r0, r2
 801031c:	4a7c      	ldr	r2, [pc, #496]	; (8010510 <readCanToStructs+0x628>)
 801031e:	f240 4112 	movw	r1, #1042	; 0x412
 8010322:	fb01 f303 	mul.w	r3, r1, r3
 8010326:	4413      	add	r3, r2
 8010328:	f203 2313 	addw	r3, r3, #531	; 0x213
 801032c:	4602      	mov	r2, r0
 801032e:	701a      	strb	r2, [r3, #0]
				break;
 8010330:	f000 bf0e 	b.w	8011150 <readCanToStructs+0x1268>
				uc_pp_charPtr = (uint8_t *)&Temp_Rx_Ei_self_sharing_st;
 8010334:	4b7b      	ldr	r3, [pc, #492]	; (8010524 <readCanToStructs+0x63c>)
 8010336:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8010338:	4b74      	ldr	r3, [pc, #464]	; (801050c <readCanToStructs+0x624>)
 801033a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801033e:	885b      	ldrh	r3, [r3, #2]
 8010340:	4a72      	ldr	r2, [pc, #456]	; (801050c <readCanToStructs+0x624>)
 8010342:	011b      	lsls	r3, r3, #4
 8010344:	4413      	add	r3, r2
 8010346:	3304      	adds	r3, #4
 8010348:	781b      	ldrb	r3, [r3, #0]
 801034a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 801034e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010352:	2b00      	cmp	r3, #0
 8010354:	d110      	bne.n	8010378 <readCanToStructs+0x490>
					memset(uc_pp_charPtr,0,sizeof(EI_SELF_SHARING_t));
 8010356:	2218      	movs	r2, #24
 8010358:	2100      	movs	r1, #0
 801035a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801035c:	f012 f83a 	bl	80223d4 <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 8010360:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010364:	4a6a      	ldr	r2, [pc, #424]	; (8010510 <readCanToStructs+0x628>)
 8010366:	f240 4112 	movw	r1, #1042	; 0x412
 801036a:	fb01 f303 	mul.w	r3, r1, r3
 801036e:	4413      	add	r3, r2
 8010370:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8010374:	2200      	movs	r2, #0
 8010376:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo)
 8010378:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801037c:	4a64      	ldr	r2, [pc, #400]	; (8010510 <readCanToStructs+0x628>)
 801037e:	f240 4112 	movw	r1, #1042	; 0x412
 8010382:	fb01 f303 	mul.w	r3, r1, r3
 8010386:	4413      	add	r3, r2
 8010388:	f203 4303 	addw	r3, r3, #1027	; 0x403
 801038c:	781b      	ldrb	r3, [r3, #0]
 801038e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010392:	429a      	cmp	r2, r3
 8010394:	d015      	beq.n	80103c2 <readCanToStructs+0x4da>
					printf("EI_1_SELF_SHARING Seq no MisMatch\n");
 8010396:	4864      	ldr	r0, [pc, #400]	; (8010528 <readCanToStructs+0x640>)
 8010398:	f012 f9a0 	bl	80226dc <puts>
					memset(uc_pp_charPtr,0,sizeof(EI_SELF_SHARING_t));
 801039c:	2218      	movs	r2, #24
 801039e:	2100      	movs	r1, #0
 80103a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80103a2:	f012 f817 	bl	80223d4 <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 80103a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80103aa:	4a59      	ldr	r2, [pc, #356]	; (8010510 <readCanToStructs+0x628>)
 80103ac:	f240 4112 	movw	r1, #1042	; 0x412
 80103b0:	fb01 f303 	mul.w	r3, r1, r3
 80103b4:	4413      	add	r3, r2
 80103b6:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80103ba:	2200      	movs	r2, #0
 80103bc:	701a      	strb	r2, [r3, #0]
					break;
 80103be:	f000 bec7 	b.w	8011150 <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 80103c2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80103c6:	4613      	mov	r3, r2
 80103c8:	00db      	lsls	r3, r3, #3
 80103ca:	1a9b      	subs	r3, r3, r2
 80103cc:	461a      	mov	r2, r3
 80103ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103d0:	4413      	add	r3, r2
 80103d2:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80103d4:	2301      	movs	r3, #1
 80103d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80103da:	e016      	b.n	801040a <readCanToStructs+0x522>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80103dc:	4b4b      	ldr	r3, [pc, #300]	; (801050c <readCanToStructs+0x624>)
 80103de:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80103e2:	885b      	ldrh	r3, [r3, #2]
 80103e4:	461a      	mov	r2, r3
 80103e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80103ea:	4948      	ldr	r1, [pc, #288]	; (801050c <readCanToStructs+0x624>)
 80103ec:	0112      	lsls	r2, r2, #4
 80103ee:	440a      	add	r2, r1
 80103f0:	4413      	add	r3, r2
 80103f2:	3304      	adds	r3, #4
 80103f4:	781a      	ldrb	r2, [r3, #0]
 80103f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103f8:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80103fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103fc:	3301      	adds	r3, #1
 80103fe:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010400:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010404:	3301      	adds	r3, #1
 8010406:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801040a:	4b40      	ldr	r3, [pc, #256]	; (801050c <readCanToStructs+0x624>)
 801040c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010410:	885b      	ldrh	r3, [r3, #2]
 8010412:	4a3e      	ldr	r2, [pc, #248]	; (801050c <readCanToStructs+0x624>)
 8010414:	011b      	lsls	r3, r3, #4
 8010416:	4413      	add	r3, r2
 8010418:	330c      	adds	r3, #12
 801041a:	781b      	ldrb	r3, [r3, #0]
 801041c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8010420:	429a      	cmp	r2, r3
 8010422:	d3db      	bcc.n	80103dc <readCanToStructs+0x4f4>
				if((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7)
 8010424:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010428:	4a39      	ldr	r2, [pc, #228]	; (8010510 <readCanToStructs+0x628>)
 801042a:	f240 4112 	movw	r1, #1042	; 0x412
 801042e:	fb01 f303 	mul.w	r3, r1, r3
 8010432:	4413      	add	r3, r2
 8010434:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8010438:	781b      	ldrb	r3, [r3, #0]
 801043a:	461a      	mov	r2, r3
 801043c:	4613      	mov	r3, r2
 801043e:	00db      	lsls	r3, r3, #3
 8010440:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(EI_SELF_SHARING_t))
 8010442:	4b32      	ldr	r3, [pc, #200]	; (801050c <readCanToStructs+0x624>)
 8010444:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010448:	885b      	ldrh	r3, [r3, #2]
 801044a:	4930      	ldr	r1, [pc, #192]	; (801050c <readCanToStructs+0x624>)
 801044c:	011b      	lsls	r3, r3, #4
 801044e:	440b      	add	r3, r1
 8010450:	330c      	adds	r3, #12
 8010452:	781b      	ldrb	r3, [r3, #0]
 8010454:	3b01      	subs	r3, #1
 8010456:	4413      	add	r3, r2
				if((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7)
 8010458:	2b17      	cmp	r3, #23
 801045a:	d932      	bls.n	80104c2 <readCanToStructs+0x5da>
					memcpy(&Rx_Ei_self_sharing_st[Temp_Rx_Ei_self_sharing_st.Peer_Index],&Temp_Rx_Ei_self_sharing_st,sizeof(EI_SELF_SHARING_t));
 801045c:	4b31      	ldr	r3, [pc, #196]	; (8010524 <readCanToStructs+0x63c>)
 801045e:	781b      	ldrb	r3, [r3, #0]
 8010460:	461a      	mov	r2, r3
 8010462:	4613      	mov	r3, r2
 8010464:	005b      	lsls	r3, r3, #1
 8010466:	4413      	add	r3, r2
 8010468:	00db      	lsls	r3, r3, #3
 801046a:	4a30      	ldr	r2, [pc, #192]	; (801052c <readCanToStructs+0x644>)
 801046c:	4413      	add	r3, r2
 801046e:	2218      	movs	r2, #24
 8010470:	492c      	ldr	r1, [pc, #176]	; (8010524 <readCanToStructs+0x63c>)
 8010472:	4618      	mov	r0, r3
 8010474:	f011 ff86 	bl	8022384 <memcpy>
					if(Debug_flag == 1)
 8010478:	4b28      	ldr	r3, [pc, #160]	; (801051c <readCanToStructs+0x634>)
 801047a:	781b      	ldrb	r3, [r3, #0]
 801047c:	2b01      	cmp	r3, #1
 801047e:	d105      	bne.n	801048c <readCanToStructs+0x5a4>
						printf("O_Info1_RCV:%u\n",Temp_Rx_Ei_self_sharing_st.Peer_Index);
 8010480:	4b28      	ldr	r3, [pc, #160]	; (8010524 <readCanToStructs+0x63c>)
 8010482:	781b      	ldrb	r3, [r3, #0]
 8010484:	4619      	mov	r1, r3
 8010486:	482a      	ldr	r0, [pc, #168]	; (8010530 <readCanToStructs+0x648>)
 8010488:	f012 f88c 	bl	80225a4 <iprintf>
					Is_CAN_Exchange_happening = YES;
 801048c:	4b29      	ldr	r3, [pc, #164]	; (8010534 <readCanToStructs+0x64c>)
 801048e:	2201      	movs	r2, #1
 8010490:	701a      	strb	r2, [r3, #0]
					RCV_SELF_XCHG_CLK = HAL_GetTick();
 8010492:	f005 f87d 	bl	8015590 <HAL_GetTick>
 8010496:	4603      	mov	r3, r0
 8010498:	4a27      	ldr	r2, [pc, #156]	; (8010538 <readCanToStructs+0x650>)
 801049a:	6013      	str	r3, [r2, #0]
					Check_Other_EiPC_Packet(Temp_Rx_Ei_self_sharing_st.Peer_Index);
 801049c:	4b21      	ldr	r3, [pc, #132]	; (8010524 <readCanToStructs+0x63c>)
 801049e:	781b      	ldrb	r3, [r3, #0]
 80104a0:	4618      	mov	r0, r3
 80104a2:	f7f7 fc5b 	bl	8007d5c <Check_Other_EiPC_Packet>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 80104a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80104aa:	4a19      	ldr	r2, [pc, #100]	; (8010510 <readCanToStructs+0x628>)
 80104ac:	f240 4112 	movw	r1, #1042	; 0x412
 80104b0:	fb01 f303 	mul.w	r3, r1, r3
 80104b4:	4413      	add	r3, r2
 80104b6:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80104ba:	2200      	movs	r2, #0
 80104bc:	701a      	strb	r2, [r3, #0]
				break;
 80104be:	f000 be47 	b.w	8011150 <readCanToStructs+0x1268>
					canStatus[uc_index][EI_1_SELF_SHARING].invalid = 1;
 80104c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80104c6:	4a12      	ldr	r2, [pc, #72]	; (8010510 <readCanToStructs+0x628>)
 80104c8:	f240 4112 	movw	r1, #1042	; 0x412
 80104cc:	fb01 f303 	mul.w	r3, r1, r3
 80104d0:	4413      	add	r3, r2
 80104d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80104d6:	2201      	movs	r2, #1
 80104d8:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo++;
 80104da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80104de:	490c      	ldr	r1, [pc, #48]	; (8010510 <readCanToStructs+0x628>)
 80104e0:	f240 4212 	movw	r2, #1042	; 0x412
 80104e4:	fb03 f202 	mul.w	r2, r3, r2
 80104e8:	440a      	add	r2, r1
 80104ea:	f202 4203 	addw	r2, r2, #1027	; 0x403
 80104ee:	7812      	ldrb	r2, [r2, #0]
 80104f0:	3201      	adds	r2, #1
 80104f2:	b2d0      	uxtb	r0, r2
 80104f4:	4a06      	ldr	r2, [pc, #24]	; (8010510 <readCanToStructs+0x628>)
 80104f6:	f240 4112 	movw	r1, #1042	; 0x412
 80104fa:	fb01 f303 	mul.w	r3, r1, r3
 80104fe:	4413      	add	r3, r2
 8010500:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8010504:	4602      	mov	r2, r0
 8010506:	701a      	strb	r2, [r3, #0]
				break;
 8010508:	f000 be22 	b.w	8011150 <readCanToStructs+0x1268>
 801050c:	20005a60 	.word	0x20005a60
 8010510:	2000523c 	.word	0x2000523c
 8010514:	200027dc 	.word	0x200027dc
 8010518:	200027e4 	.word	0x200027e4
 801051c:	20000645 	.word	0x20000645
 8010520:	08026a68 	.word	0x08026a68
 8010524:	20001878 	.word	0x20001878
 8010528:	08026a80 	.word	0x08026a80
 801052c:	20001770 	.word	0x20001770
 8010530:	08026aa4 	.word	0x08026aa4
 8010534:	20000108 	.word	0x20000108
 8010538:	20000e4c 	.word	0x20000e4c
				uc_pp_charPtr = (uint8_t *)&Temp_Rx_Ei_self_sharing_st;
 801053c:	4b9f      	ldr	r3, [pc, #636]	; (80107bc <readCanToStructs+0x8d4>)
 801053e:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8010540:	4b9f      	ldr	r3, [pc, #636]	; (80107c0 <readCanToStructs+0x8d8>)
 8010542:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010546:	885b      	ldrh	r3, [r3, #2]
 8010548:	4a9d      	ldr	r2, [pc, #628]	; (80107c0 <readCanToStructs+0x8d8>)
 801054a:	011b      	lsls	r3, r3, #4
 801054c:	4413      	add	r3, r2
 801054e:	3304      	adds	r3, #4
 8010550:	781b      	ldrb	r3, [r3, #0]
 8010552:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8010556:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801055a:	2b00      	cmp	r3, #0
 801055c:	d110      	bne.n	8010580 <readCanToStructs+0x698>
					memset(uc_pp_charPtr,0,sizeof(EI_SELF_SHARING_t));
 801055e:	2218      	movs	r2, #24
 8010560:	2100      	movs	r1, #0
 8010562:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010564:	f011 ff36 	bl	80223d4 <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8010568:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801056c:	4a95      	ldr	r2, [pc, #596]	; (80107c4 <readCanToStructs+0x8dc>)
 801056e:	f240 4112 	movw	r1, #1042	; 0x412
 8010572:	fb01 f303 	mul.w	r3, r1, r3
 8010576:	4413      	add	r3, r2
 8010578:	f203 4305 	addw	r3, r3, #1029	; 0x405
 801057c:	2200      	movs	r2, #0
 801057e:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo)
 8010580:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010584:	4a8f      	ldr	r2, [pc, #572]	; (80107c4 <readCanToStructs+0x8dc>)
 8010586:	f240 4112 	movw	r1, #1042	; 0x412
 801058a:	fb01 f303 	mul.w	r3, r1, r3
 801058e:	4413      	add	r3, r2
 8010590:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8010594:	781b      	ldrb	r3, [r3, #0]
 8010596:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801059a:	429a      	cmp	r2, r3
 801059c:	d015      	beq.n	80105ca <readCanToStructs+0x6e2>
					printf("EI_2_SELF_SHARING Seq no MisMatch\n");
 801059e:	488a      	ldr	r0, [pc, #552]	; (80107c8 <readCanToStructs+0x8e0>)
 80105a0:	f012 f89c 	bl	80226dc <puts>
					memset(uc_pp_charPtr,0,sizeof(EI_SELF_SHARING_t));
 80105a4:	2218      	movs	r2, #24
 80105a6:	2100      	movs	r1, #0
 80105a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80105aa:	f011 ff13 	bl	80223d4 <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 80105ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80105b2:	4a84      	ldr	r2, [pc, #528]	; (80107c4 <readCanToStructs+0x8dc>)
 80105b4:	f240 4112 	movw	r1, #1042	; 0x412
 80105b8:	fb01 f303 	mul.w	r3, r1, r3
 80105bc:	4413      	add	r3, r2
 80105be:	f203 4305 	addw	r3, r3, #1029	; 0x405
 80105c2:	2200      	movs	r2, #0
 80105c4:	701a      	strb	r2, [r3, #0]
					break;
 80105c6:	f000 bdc3 	b.w	8011150 <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 80105ca:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80105ce:	4613      	mov	r3, r2
 80105d0:	00db      	lsls	r3, r3, #3
 80105d2:	1a9b      	subs	r3, r3, r2
 80105d4:	461a      	mov	r2, r3
 80105d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105d8:	4413      	add	r3, r2
 80105da:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80105dc:	2301      	movs	r3, #1
 80105de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80105e2:	e016      	b.n	8010612 <readCanToStructs+0x72a>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80105e4:	4b76      	ldr	r3, [pc, #472]	; (80107c0 <readCanToStructs+0x8d8>)
 80105e6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80105ea:	885b      	ldrh	r3, [r3, #2]
 80105ec:	461a      	mov	r2, r3
 80105ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80105f2:	4973      	ldr	r1, [pc, #460]	; (80107c0 <readCanToStructs+0x8d8>)
 80105f4:	0112      	lsls	r2, r2, #4
 80105f6:	440a      	add	r2, r1
 80105f8:	4413      	add	r3, r2
 80105fa:	3304      	adds	r3, #4
 80105fc:	781a      	ldrb	r2, [r3, #0]
 80105fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010600:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8010602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010604:	3301      	adds	r3, #1
 8010606:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010608:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801060c:	3301      	adds	r3, #1
 801060e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010612:	4b6b      	ldr	r3, [pc, #428]	; (80107c0 <readCanToStructs+0x8d8>)
 8010614:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010618:	885b      	ldrh	r3, [r3, #2]
 801061a:	4a69      	ldr	r2, [pc, #420]	; (80107c0 <readCanToStructs+0x8d8>)
 801061c:	011b      	lsls	r3, r3, #4
 801061e:	4413      	add	r3, r2
 8010620:	330c      	adds	r3, #12
 8010622:	781b      	ldrb	r3, [r3, #0]
 8010624:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8010628:	429a      	cmp	r2, r3
 801062a:	d3db      	bcc.n	80105e4 <readCanToStructs+0x6fc>
				if((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7)
 801062c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010630:	4a64      	ldr	r2, [pc, #400]	; (80107c4 <readCanToStructs+0x8dc>)
 8010632:	f240 4112 	movw	r1, #1042	; 0x412
 8010636:	fb01 f303 	mul.w	r3, r1, r3
 801063a:	4413      	add	r3, r2
 801063c:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8010640:	781b      	ldrb	r3, [r3, #0]
 8010642:	461a      	mov	r2, r3
 8010644:	4613      	mov	r3, r2
 8010646:	00db      	lsls	r3, r3, #3
 8010648:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(EI_SELF_SHARING_t))
 801064a:	4b5d      	ldr	r3, [pc, #372]	; (80107c0 <readCanToStructs+0x8d8>)
 801064c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010650:	885b      	ldrh	r3, [r3, #2]
 8010652:	495b      	ldr	r1, [pc, #364]	; (80107c0 <readCanToStructs+0x8d8>)
 8010654:	011b      	lsls	r3, r3, #4
 8010656:	440b      	add	r3, r1
 8010658:	330c      	adds	r3, #12
 801065a:	781b      	ldrb	r3, [r3, #0]
 801065c:	3b01      	subs	r3, #1
 801065e:	4413      	add	r3, r2
				if((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7)
 8010660:	2b17      	cmp	r3, #23
 8010662:	d932      	bls.n	80106ca <readCanToStructs+0x7e2>
					memcpy(&Rx_Ei_self_sharing_st[Temp_Rx_Ei_self_sharing_st.Peer_Index],&Temp_Rx_Ei_self_sharing_st,sizeof(EI_SELF_SHARING_t));
 8010664:	4b55      	ldr	r3, [pc, #340]	; (80107bc <readCanToStructs+0x8d4>)
 8010666:	781b      	ldrb	r3, [r3, #0]
 8010668:	461a      	mov	r2, r3
 801066a:	4613      	mov	r3, r2
 801066c:	005b      	lsls	r3, r3, #1
 801066e:	4413      	add	r3, r2
 8010670:	00db      	lsls	r3, r3, #3
 8010672:	4a56      	ldr	r2, [pc, #344]	; (80107cc <readCanToStructs+0x8e4>)
 8010674:	4413      	add	r3, r2
 8010676:	2218      	movs	r2, #24
 8010678:	4950      	ldr	r1, [pc, #320]	; (80107bc <readCanToStructs+0x8d4>)
 801067a:	4618      	mov	r0, r3
 801067c:	f011 fe82 	bl	8022384 <memcpy>
					if(Debug_flag == 1)
 8010680:	4b53      	ldr	r3, [pc, #332]	; (80107d0 <readCanToStructs+0x8e8>)
 8010682:	781b      	ldrb	r3, [r3, #0]
 8010684:	2b01      	cmp	r3, #1
 8010686:	d105      	bne.n	8010694 <readCanToStructs+0x7ac>
						printf("O_Info2_RCV:%u\n",Temp_Rx_Ei_self_sharing_st.Peer_Index);
 8010688:	4b4c      	ldr	r3, [pc, #304]	; (80107bc <readCanToStructs+0x8d4>)
 801068a:	781b      	ldrb	r3, [r3, #0]
 801068c:	4619      	mov	r1, r3
 801068e:	4851      	ldr	r0, [pc, #324]	; (80107d4 <readCanToStructs+0x8ec>)
 8010690:	f011 ff88 	bl	80225a4 <iprintf>
					RCV_SELF_XCHG_CLK = HAL_GetTick();
 8010694:	f004 ff7c 	bl	8015590 <HAL_GetTick>
 8010698:	4603      	mov	r3, r0
 801069a:	4a4f      	ldr	r2, [pc, #316]	; (80107d8 <readCanToStructs+0x8f0>)
 801069c:	6013      	str	r3, [r2, #0]
					Is_CAN_Exchange_happening = YES;
 801069e:	4b4f      	ldr	r3, [pc, #316]	; (80107dc <readCanToStructs+0x8f4>)
 80106a0:	2201      	movs	r2, #1
 80106a2:	701a      	strb	r2, [r3, #0]
					Check_Other_EiPC_Packet(Temp_Rx_Ei_self_sharing_st.Peer_Index);
 80106a4:	4b45      	ldr	r3, [pc, #276]	; (80107bc <readCanToStructs+0x8d4>)
 80106a6:	781b      	ldrb	r3, [r3, #0]
 80106a8:	4618      	mov	r0, r3
 80106aa:	f7f7 fb57 	bl	8007d5c <Check_Other_EiPC_Packet>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 80106ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80106b2:	4a44      	ldr	r2, [pc, #272]	; (80107c4 <readCanToStructs+0x8dc>)
 80106b4:	f240 4112 	movw	r1, #1042	; 0x412
 80106b8:	fb01 f303 	mul.w	r3, r1, r3
 80106bc:	4413      	add	r3, r2
 80106be:	f203 4305 	addw	r3, r3, #1029	; 0x405
 80106c2:	2200      	movs	r2, #0
 80106c4:	701a      	strb	r2, [r3, #0]
				break;
 80106c6:	f000 bd43 	b.w	8011150 <readCanToStructs+0x1268>
					canStatus[uc_index][EI_2_SELF_SHARING].invalid = 1;
 80106ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80106ce:	4a3d      	ldr	r2, [pc, #244]	; (80107c4 <readCanToStructs+0x8dc>)
 80106d0:	f240 4112 	movw	r1, #1042	; 0x412
 80106d4:	fb01 f303 	mul.w	r3, r1, r3
 80106d8:	4413      	add	r3, r2
 80106da:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80106de:	2201      	movs	r2, #1
 80106e0:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo++;
 80106e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80106e6:	4937      	ldr	r1, [pc, #220]	; (80107c4 <readCanToStructs+0x8dc>)
 80106e8:	f240 4212 	movw	r2, #1042	; 0x412
 80106ec:	fb03 f202 	mul.w	r2, r3, r2
 80106f0:	440a      	add	r2, r1
 80106f2:	f202 4205 	addw	r2, r2, #1029	; 0x405
 80106f6:	7812      	ldrb	r2, [r2, #0]
 80106f8:	3201      	adds	r2, #1
 80106fa:	b2d0      	uxtb	r0, r2
 80106fc:	4a31      	ldr	r2, [pc, #196]	; (80107c4 <readCanToStructs+0x8dc>)
 80106fe:	f240 4112 	movw	r1, #1042	; 0x412
 8010702:	fb01 f303 	mul.w	r3, r1, r3
 8010706:	4413      	add	r3, r2
 8010708:	f203 4305 	addw	r3, r3, #1029	; 0x405
 801070c:	4602      	mov	r2, r0
 801070e:	701a      	strb	r2, [r3, #0]
				break;
 8010710:	f000 bd1e 	b.w	8011150 <readCanToStructs+0x1268>
				uc_pp_charPtr = (uint8_t *)&Temp_Rx_VITAL_MSG_CAN_st;
 8010714:	4b32      	ldr	r3, [pc, #200]	; (80107e0 <readCanToStructs+0x8f8>)
 8010716:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8010718:	4b29      	ldr	r3, [pc, #164]	; (80107c0 <readCanToStructs+0x8d8>)
 801071a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801071e:	885b      	ldrh	r3, [r3, #2]
 8010720:	4a27      	ldr	r2, [pc, #156]	; (80107c0 <readCanToStructs+0x8d8>)
 8010722:	011b      	lsls	r3, r3, #4
 8010724:	4413      	add	r3, r2
 8010726:	3304      	adds	r3, #4
 8010728:	781b      	ldrb	r3, [r3, #0]
 801072a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 801072e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010732:	2b00      	cmp	r3, #0
 8010734:	d110      	bne.n	8010758 <readCanToStructs+0x870>
					memset(uc_pp_charPtr,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8010736:	2246      	movs	r2, #70	; 0x46
 8010738:	2100      	movs	r1, #0
 801073a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801073c:	f011 fe4a 	bl	80223d4 <memset>
					canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo = 0;
 8010740:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010744:	4a1f      	ldr	r2, [pc, #124]	; (80107c4 <readCanToStructs+0x8dc>)
 8010746:	f240 4112 	movw	r1, #1042	; 0x412
 801074a:	fb01 f303 	mul.w	r3, r1, r3
 801074e:	4413      	add	r3, r2
 8010750:	f203 4307 	addw	r3, r3, #1031	; 0x407
 8010754:	2200      	movs	r2, #0
 8010756:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo)
 8010758:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801075c:	4a19      	ldr	r2, [pc, #100]	; (80107c4 <readCanToStructs+0x8dc>)
 801075e:	f240 4112 	movw	r1, #1042	; 0x412
 8010762:	fb01 f303 	mul.w	r3, r1, r3
 8010766:	4413      	add	r3, r2
 8010768:	f203 4307 	addw	r3, r3, #1031	; 0x407
 801076c:	781b      	ldrb	r3, [r3, #0]
 801076e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010772:	429a      	cmp	r2, r3
 8010774:	d015      	beq.n	80107a2 <readCanToStructs+0x8ba>
					printf("SEND_VITAL_MSG_1 Seq no MisMatch\n");
 8010776:	481b      	ldr	r0, [pc, #108]	; (80107e4 <readCanToStructs+0x8fc>)
 8010778:	f011 ffb0 	bl	80226dc <puts>
					memset(uc_pp_charPtr,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 801077c:	2246      	movs	r2, #70	; 0x46
 801077e:	2100      	movs	r1, #0
 8010780:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010782:	f011 fe27 	bl	80223d4 <memset>
					canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo = 0;
 8010786:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801078a:	4a0e      	ldr	r2, [pc, #56]	; (80107c4 <readCanToStructs+0x8dc>)
 801078c:	f240 4112 	movw	r1, #1042	; 0x412
 8010790:	fb01 f303 	mul.w	r3, r1, r3
 8010794:	4413      	add	r3, r2
 8010796:	f203 4307 	addw	r3, r3, #1031	; 0x407
 801079a:	2200      	movs	r2, #0
 801079c:	701a      	strb	r2, [r3, #0]
					break;
 801079e:	f000 bcd7 	b.w	8011150 <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 80107a2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80107a6:	4613      	mov	r3, r2
 80107a8:	00db      	lsls	r3, r3, #3
 80107aa:	1a9b      	subs	r3, r3, r2
 80107ac:	461a      	mov	r2, r3
 80107ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107b0:	4413      	add	r3, r2
 80107b2:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80107b4:	2301      	movs	r3, #1
 80107b6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80107ba:	e02c      	b.n	8010816 <readCanToStructs+0x92e>
 80107bc:	20001878 	.word	0x20001878
 80107c0:	20005a60 	.word	0x20005a60
 80107c4:	2000523c 	.word	0x2000523c
 80107c8:	08026ab4 	.word	0x08026ab4
 80107cc:	20001770 	.word	0x20001770
 80107d0:	20000645 	.word	0x20000645
 80107d4:	08026ad8 	.word	0x08026ad8
 80107d8:	20000e4c 	.word	0x20000e4c
 80107dc:	20000108 	.word	0x20000108
 80107e0:	20001920 	.word	0x20001920
 80107e4:	08026ae8 	.word	0x08026ae8
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80107e8:	4bb9      	ldr	r3, [pc, #740]	; (8010ad0 <readCanToStructs+0xbe8>)
 80107ea:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80107ee:	885b      	ldrh	r3, [r3, #2]
 80107f0:	461a      	mov	r2, r3
 80107f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80107f6:	49b6      	ldr	r1, [pc, #728]	; (8010ad0 <readCanToStructs+0xbe8>)
 80107f8:	0112      	lsls	r2, r2, #4
 80107fa:	440a      	add	r2, r1
 80107fc:	4413      	add	r3, r2
 80107fe:	3304      	adds	r3, #4
 8010800:	781a      	ldrb	r2, [r3, #0]
 8010802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010804:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8010806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010808:	3301      	adds	r3, #1
 801080a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801080c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010810:	3301      	adds	r3, #1
 8010812:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010816:	4bae      	ldr	r3, [pc, #696]	; (8010ad0 <readCanToStructs+0xbe8>)
 8010818:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801081c:	885b      	ldrh	r3, [r3, #2]
 801081e:	4aac      	ldr	r2, [pc, #688]	; (8010ad0 <readCanToStructs+0xbe8>)
 8010820:	011b      	lsls	r3, r3, #4
 8010822:	4413      	add	r3, r2
 8010824:	330c      	adds	r3, #12
 8010826:	781b      	ldrb	r3, [r3, #0]
 8010828:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801082c:	429a      	cmp	r2, r3
 801082e:	d3db      	bcc.n	80107e8 <readCanToStructs+0x900>
				if((((canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo) * 7)
 8010830:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010834:	4aa7      	ldr	r2, [pc, #668]	; (8010ad4 <readCanToStructs+0xbec>)
 8010836:	f240 4112 	movw	r1, #1042	; 0x412
 801083a:	fb01 f303 	mul.w	r3, r1, r3
 801083e:	4413      	add	r3, r2
 8010840:	f203 4307 	addw	r3, r3, #1031	; 0x407
 8010844:	781b      	ldrb	r3, [r3, #0]
 8010846:	461a      	mov	r2, r3
 8010848:	4613      	mov	r3, r2
 801084a:	00db      	lsls	r3, r3, #3
 801084c:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SEND_VITAL_MSG_2_OTH_t))
 801084e:	4ba0      	ldr	r3, [pc, #640]	; (8010ad0 <readCanToStructs+0xbe8>)
 8010850:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010854:	885b      	ldrh	r3, [r3, #2]
 8010856:	499e      	ldr	r1, [pc, #632]	; (8010ad0 <readCanToStructs+0xbe8>)
 8010858:	011b      	lsls	r3, r3, #4
 801085a:	440b      	add	r3, r1
 801085c:	330c      	adds	r3, #12
 801085e:	781b      	ldrb	r3, [r3, #0]
 8010860:	3b01      	subs	r3, #1
 8010862:	4413      	add	r3, r2
				if((((canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo) * 7)
 8010864:	2b45      	cmp	r3, #69	; 0x45
 8010866:	d93d      	bls.n	80108e4 <readCanToStructs+0x9fc>
					if(Debug_flag == 1)
 8010868:	4b9b      	ldr	r3, [pc, #620]	; (8010ad8 <readCanToStructs+0xbf0>)
 801086a:	781b      	ldrb	r3, [r3, #0]
 801086c:	2b01      	cmp	r3, #1
 801086e:	d102      	bne.n	8010876 <readCanToStructs+0x98e>
						printf("RCV V-Message-1\n");
 8010870:	489a      	ldr	r0, [pc, #616]	; (8010adc <readCanToStructs+0xbf4>)
 8010872:	f011 ff33 	bl	80226dc <puts>
					memset(&Rx_VITAL_MSG_CAN_st,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8010876:	2246      	movs	r2, #70	; 0x46
 8010878:	2100      	movs	r1, #0
 801087a:	4899      	ldr	r0, [pc, #612]	; (8010ae0 <readCanToStructs+0xbf8>)
 801087c:	f011 fdaa 	bl	80223d4 <memset>
					memcpy(&Rx_VITAL_MSG_CAN_st,&Temp_Rx_VITAL_MSG_CAN_st,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8010880:	4a97      	ldr	r2, [pc, #604]	; (8010ae0 <readCanToStructs+0xbf8>)
 8010882:	4b98      	ldr	r3, [pc, #608]	; (8010ae4 <readCanToStructs+0xbfc>)
 8010884:	4610      	mov	r0, r2
 8010886:	4619      	mov	r1, r3
 8010888:	2346      	movs	r3, #70	; 0x46
 801088a:	461a      	mov	r2, r3
 801088c:	f011 fd7a 	bl	8022384 <memcpy>
					Is_CAN_Exchange_happening = YES;
 8010890:	4b95      	ldr	r3, [pc, #596]	; (8010ae8 <readCanToStructs+0xc00>)
 8010892:	2201      	movs	r2, #1
 8010894:	701a      	strb	r2, [r3, #0]
					if(Tx_Ei_self_sharing_st[Rx_VITAL_MSG_CAN_st.Source_Peer_Index].IS_PRIMARY != RECEIVED)
 8010896:	4b92      	ldr	r3, [pc, #584]	; (8010ae0 <readCanToStructs+0xbf8>)
 8010898:	881b      	ldrh	r3, [r3, #0]
 801089a:	4619      	mov	r1, r3
 801089c:	4a93      	ldr	r2, [pc, #588]	; (8010aec <readCanToStructs+0xc04>)
 801089e:	460b      	mov	r3, r1
 80108a0:	005b      	lsls	r3, r3, #1
 80108a2:	440b      	add	r3, r1
 80108a4:	00db      	lsls	r3, r3, #3
 80108a6:	4413      	add	r3, r2
 80108a8:	3304      	adds	r3, #4
 80108aa:	781b      	ldrb	r3, [r3, #0]
 80108ac:	2b01      	cmp	r3, #1
 80108ae:	d00b      	beq.n	80108c8 <readCanToStructs+0x9e0>
						Vital_Msg_extr_from_CAN(Rx_VITAL_MSG_CAN_st.VITAL_MESSAGE,Rx_VITAL_MSG_CAN_st.Packet_Length,Rx_VITAL_MSG_CAN_st.Source_Peer_Index,Rx_VITAL_MSG_CAN_st.Dest_Peer_Index);
 80108b0:	4b8b      	ldr	r3, [pc, #556]	; (8010ae0 <readCanToStructs+0xbf8>)
 80108b2:	889b      	ldrh	r3, [r3, #4]
 80108b4:	b2d9      	uxtb	r1, r3
 80108b6:	4b8a      	ldr	r3, [pc, #552]	; (8010ae0 <readCanToStructs+0xbf8>)
 80108b8:	881b      	ldrh	r3, [r3, #0]
 80108ba:	b2da      	uxtb	r2, r3
 80108bc:	4b88      	ldr	r3, [pc, #544]	; (8010ae0 <readCanToStructs+0xbf8>)
 80108be:	885b      	ldrh	r3, [r3, #2]
 80108c0:	b2db      	uxtb	r3, r3
 80108c2:	488b      	ldr	r0, [pc, #556]	; (8010af0 <readCanToStructs+0xc08>)
 80108c4:	f7f3 ff1e 	bl	8004704 <Vital_Msg_extr_from_CAN>
					canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo = 0;
 80108c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80108cc:	4a81      	ldr	r2, [pc, #516]	; (8010ad4 <readCanToStructs+0xbec>)
 80108ce:	f240 4112 	movw	r1, #1042	; 0x412
 80108d2:	fb01 f303 	mul.w	r3, r1, r3
 80108d6:	4413      	add	r3, r2
 80108d8:	f203 4307 	addw	r3, r3, #1031	; 0x407
 80108dc:	2200      	movs	r2, #0
 80108de:	701a      	strb	r2, [r3, #0]
				break;
 80108e0:	f000 bc36 	b.w	8011150 <readCanToStructs+0x1268>
					canStatus[uc_index][SEND_VITAL_MSG_1].invalid = 1;
 80108e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80108e8:	4a7a      	ldr	r2, [pc, #488]	; (8010ad4 <readCanToStructs+0xbec>)
 80108ea:	f240 4112 	movw	r1, #1042	; 0x412
 80108ee:	fb01 f303 	mul.w	r3, r1, r3
 80108f2:	4413      	add	r3, r2
 80108f4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80108f8:	2201      	movs	r2, #1
 80108fa:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo++;
 80108fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010900:	4974      	ldr	r1, [pc, #464]	; (8010ad4 <readCanToStructs+0xbec>)
 8010902:	f240 4212 	movw	r2, #1042	; 0x412
 8010906:	fb03 f202 	mul.w	r2, r3, r2
 801090a:	440a      	add	r2, r1
 801090c:	f202 4207 	addw	r2, r2, #1031	; 0x407
 8010910:	7812      	ldrb	r2, [r2, #0]
 8010912:	3201      	adds	r2, #1
 8010914:	b2d0      	uxtb	r0, r2
 8010916:	4a6f      	ldr	r2, [pc, #444]	; (8010ad4 <readCanToStructs+0xbec>)
 8010918:	f240 4112 	movw	r1, #1042	; 0x412
 801091c:	fb01 f303 	mul.w	r3, r1, r3
 8010920:	4413      	add	r3, r2
 8010922:	f203 4307 	addw	r3, r3, #1031	; 0x407
 8010926:	4602      	mov	r2, r0
 8010928:	701a      	strb	r2, [r3, #0]
				break;
 801092a:	f000 bc11 	b.w	8011150 <readCanToStructs+0x1268>
				uc_pp_charPtr = (uint8_t *)&Temp_Rx_VITAL_MSG_CAN_st;
 801092e:	4b6d      	ldr	r3, [pc, #436]	; (8010ae4 <readCanToStructs+0xbfc>)
 8010930:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8010932:	4b67      	ldr	r3, [pc, #412]	; (8010ad0 <readCanToStructs+0xbe8>)
 8010934:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010938:	885b      	ldrh	r3, [r3, #2]
 801093a:	4a65      	ldr	r2, [pc, #404]	; (8010ad0 <readCanToStructs+0xbe8>)
 801093c:	011b      	lsls	r3, r3, #4
 801093e:	4413      	add	r3, r2
 8010940:	3304      	adds	r3, #4
 8010942:	781b      	ldrb	r3, [r3, #0]
 8010944:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8010948:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801094c:	2b00      	cmp	r3, #0
 801094e:	d110      	bne.n	8010972 <readCanToStructs+0xa8a>
					memset(uc_pp_charPtr,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8010950:	2246      	movs	r2, #70	; 0x46
 8010952:	2100      	movs	r1, #0
 8010954:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010956:	f011 fd3d 	bl	80223d4 <memset>
					canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo = 0;
 801095a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801095e:	4a5d      	ldr	r2, [pc, #372]	; (8010ad4 <readCanToStructs+0xbec>)
 8010960:	f240 4112 	movw	r1, #1042	; 0x412
 8010964:	fb01 f303 	mul.w	r3, r1, r3
 8010968:	4413      	add	r3, r2
 801096a:	f203 4309 	addw	r3, r3, #1033	; 0x409
 801096e:	2200      	movs	r2, #0
 8010970:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo)
 8010972:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010976:	4a57      	ldr	r2, [pc, #348]	; (8010ad4 <readCanToStructs+0xbec>)
 8010978:	f240 4112 	movw	r1, #1042	; 0x412
 801097c:	fb01 f303 	mul.w	r3, r1, r3
 8010980:	4413      	add	r3, r2
 8010982:	f203 4309 	addw	r3, r3, #1033	; 0x409
 8010986:	781b      	ldrb	r3, [r3, #0]
 8010988:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801098c:	429a      	cmp	r2, r3
 801098e:	d014      	beq.n	80109ba <readCanToStructs+0xad2>
					printf("SEND_VITAL_MSG_2 Seq no MisMatch\n");
 8010990:	4858      	ldr	r0, [pc, #352]	; (8010af4 <readCanToStructs+0xc0c>)
 8010992:	f011 fea3 	bl	80226dc <puts>
					memset(uc_pp_charPtr,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8010996:	2246      	movs	r2, #70	; 0x46
 8010998:	2100      	movs	r1, #0
 801099a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801099c:	f011 fd1a 	bl	80223d4 <memset>
					canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo = 0;
 80109a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80109a4:	4a4b      	ldr	r2, [pc, #300]	; (8010ad4 <readCanToStructs+0xbec>)
 80109a6:	f240 4112 	movw	r1, #1042	; 0x412
 80109aa:	fb01 f303 	mul.w	r3, r1, r3
 80109ae:	4413      	add	r3, r2
 80109b0:	f203 4309 	addw	r3, r3, #1033	; 0x409
 80109b4:	2200      	movs	r2, #0
 80109b6:	701a      	strb	r2, [r3, #0]
					break;
 80109b8:	e3ca      	b.n	8011150 <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 80109ba:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80109be:	4613      	mov	r3, r2
 80109c0:	00db      	lsls	r3, r3, #3
 80109c2:	1a9b      	subs	r3, r3, r2
 80109c4:	461a      	mov	r2, r3
 80109c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109c8:	4413      	add	r3, r2
 80109ca:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80109cc:	2301      	movs	r3, #1
 80109ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80109d2:	e016      	b.n	8010a02 <readCanToStructs+0xb1a>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80109d4:	4b3e      	ldr	r3, [pc, #248]	; (8010ad0 <readCanToStructs+0xbe8>)
 80109d6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80109da:	885b      	ldrh	r3, [r3, #2]
 80109dc:	461a      	mov	r2, r3
 80109de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80109e2:	493b      	ldr	r1, [pc, #236]	; (8010ad0 <readCanToStructs+0xbe8>)
 80109e4:	0112      	lsls	r2, r2, #4
 80109e6:	440a      	add	r2, r1
 80109e8:	4413      	add	r3, r2
 80109ea:	3304      	adds	r3, #4
 80109ec:	781a      	ldrb	r2, [r3, #0]
 80109ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109f0:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80109f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109f4:	3301      	adds	r3, #1
 80109f6:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80109f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80109fc:	3301      	adds	r3, #1
 80109fe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010a02:	4b33      	ldr	r3, [pc, #204]	; (8010ad0 <readCanToStructs+0xbe8>)
 8010a04:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010a08:	885b      	ldrh	r3, [r3, #2]
 8010a0a:	4a31      	ldr	r2, [pc, #196]	; (8010ad0 <readCanToStructs+0xbe8>)
 8010a0c:	011b      	lsls	r3, r3, #4
 8010a0e:	4413      	add	r3, r2
 8010a10:	330c      	adds	r3, #12
 8010a12:	781b      	ldrb	r3, [r3, #0]
 8010a14:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8010a18:	429a      	cmp	r2, r3
 8010a1a:	d3db      	bcc.n	80109d4 <readCanToStructs+0xaec>
				if((((canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo) * 7)
 8010a1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010a20:	4a2c      	ldr	r2, [pc, #176]	; (8010ad4 <readCanToStructs+0xbec>)
 8010a22:	f240 4112 	movw	r1, #1042	; 0x412
 8010a26:	fb01 f303 	mul.w	r3, r1, r3
 8010a2a:	4413      	add	r3, r2
 8010a2c:	f203 4309 	addw	r3, r3, #1033	; 0x409
 8010a30:	781b      	ldrb	r3, [r3, #0]
 8010a32:	461a      	mov	r2, r3
 8010a34:	4613      	mov	r3, r2
 8010a36:	00db      	lsls	r3, r3, #3
 8010a38:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SEND_VITAL_MSG_2_OTH_t))
 8010a3a:	4b25      	ldr	r3, [pc, #148]	; (8010ad0 <readCanToStructs+0xbe8>)
 8010a3c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010a40:	885b      	ldrh	r3, [r3, #2]
 8010a42:	4923      	ldr	r1, [pc, #140]	; (8010ad0 <readCanToStructs+0xbe8>)
 8010a44:	011b      	lsls	r3, r3, #4
 8010a46:	440b      	add	r3, r1
 8010a48:	330c      	adds	r3, #12
 8010a4a:	781b      	ldrb	r3, [r3, #0]
 8010a4c:	3b01      	subs	r3, #1
 8010a4e:	4413      	add	r3, r2
				if((((canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo) * 7)
 8010a50:	2b45      	cmp	r3, #69	; 0x45
 8010a52:	d953      	bls.n	8010afc <readCanToStructs+0xc14>
					if(Debug_flag == 1)
 8010a54:	4b20      	ldr	r3, [pc, #128]	; (8010ad8 <readCanToStructs+0xbf0>)
 8010a56:	781b      	ldrb	r3, [r3, #0]
 8010a58:	2b01      	cmp	r3, #1
 8010a5a:	d102      	bne.n	8010a62 <readCanToStructs+0xb7a>
						printf("RCV V-Message-2\n");
 8010a5c:	4826      	ldr	r0, [pc, #152]	; (8010af8 <readCanToStructs+0xc10>)
 8010a5e:	f011 fe3d 	bl	80226dc <puts>
					memset(&Rx_VITAL_MSG_CAN_st,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8010a62:	2246      	movs	r2, #70	; 0x46
 8010a64:	2100      	movs	r1, #0
 8010a66:	481e      	ldr	r0, [pc, #120]	; (8010ae0 <readCanToStructs+0xbf8>)
 8010a68:	f011 fcb4 	bl	80223d4 <memset>
					memcpy(&Rx_VITAL_MSG_CAN_st,&Temp_Rx_VITAL_MSG_CAN_st,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8010a6c:	4a1c      	ldr	r2, [pc, #112]	; (8010ae0 <readCanToStructs+0xbf8>)
 8010a6e:	4b1d      	ldr	r3, [pc, #116]	; (8010ae4 <readCanToStructs+0xbfc>)
 8010a70:	4610      	mov	r0, r2
 8010a72:	4619      	mov	r1, r3
 8010a74:	2346      	movs	r3, #70	; 0x46
 8010a76:	461a      	mov	r2, r3
 8010a78:	f011 fc84 	bl	8022384 <memcpy>
					Is_CAN_Exchange_happening = YES;
 8010a7c:	4b1a      	ldr	r3, [pc, #104]	; (8010ae8 <readCanToStructs+0xc00>)
 8010a7e:	2201      	movs	r2, #1
 8010a80:	701a      	strb	r2, [r3, #0]
					if(Tx_Ei_self_sharing_st[Rx_VITAL_MSG_CAN_st.Source_Peer_Index].EI_Receiving_Status != 1)
 8010a82:	4b17      	ldr	r3, [pc, #92]	; (8010ae0 <readCanToStructs+0xbf8>)
 8010a84:	881b      	ldrh	r3, [r3, #0]
 8010a86:	4619      	mov	r1, r3
 8010a88:	4a18      	ldr	r2, [pc, #96]	; (8010aec <readCanToStructs+0xc04>)
 8010a8a:	460b      	mov	r3, r1
 8010a8c:	005b      	lsls	r3, r3, #1
 8010a8e:	440b      	add	r3, r1
 8010a90:	00db      	lsls	r3, r3, #3
 8010a92:	4413      	add	r3, r2
 8010a94:	3303      	adds	r3, #3
 8010a96:	781b      	ldrb	r3, [r3, #0]
 8010a98:	2b01      	cmp	r3, #1
 8010a9a:	d00b      	beq.n	8010ab4 <readCanToStructs+0xbcc>
						Vital_Msg_extr_from_CAN(Rx_VITAL_MSG_CAN_st.VITAL_MESSAGE,Rx_VITAL_MSG_CAN_st.Packet_Length,Rx_VITAL_MSG_CAN_st.Source_Peer_Index,Rx_VITAL_MSG_CAN_st.Dest_Peer_Index);
 8010a9c:	4b10      	ldr	r3, [pc, #64]	; (8010ae0 <readCanToStructs+0xbf8>)
 8010a9e:	889b      	ldrh	r3, [r3, #4]
 8010aa0:	b2d9      	uxtb	r1, r3
 8010aa2:	4b0f      	ldr	r3, [pc, #60]	; (8010ae0 <readCanToStructs+0xbf8>)
 8010aa4:	881b      	ldrh	r3, [r3, #0]
 8010aa6:	b2da      	uxtb	r2, r3
 8010aa8:	4b0d      	ldr	r3, [pc, #52]	; (8010ae0 <readCanToStructs+0xbf8>)
 8010aaa:	885b      	ldrh	r3, [r3, #2]
 8010aac:	b2db      	uxtb	r3, r3
 8010aae:	4810      	ldr	r0, [pc, #64]	; (8010af0 <readCanToStructs+0xc08>)
 8010ab0:	f7f3 fe28 	bl	8004704 <Vital_Msg_extr_from_CAN>
					canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo = 0;
 8010ab4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010ab8:	4a06      	ldr	r2, [pc, #24]	; (8010ad4 <readCanToStructs+0xbec>)
 8010aba:	f240 4112 	movw	r1, #1042	; 0x412
 8010abe:	fb01 f303 	mul.w	r3, r1, r3
 8010ac2:	4413      	add	r3, r2
 8010ac4:	f203 4309 	addw	r3, r3, #1033	; 0x409
 8010ac8:	2200      	movs	r2, #0
 8010aca:	701a      	strb	r2, [r3, #0]
				break;
 8010acc:	e340      	b.n	8011150 <readCanToStructs+0x1268>
 8010ace:	bf00      	nop
 8010ad0:	20005a60 	.word	0x20005a60
 8010ad4:	2000523c 	.word	0x2000523c
 8010ad8:	20000645 	.word	0x20000645
 8010adc:	08026b0c 	.word	0x08026b0c
 8010ae0:	200018d8 	.word	0x200018d8
 8010ae4:	20001920 	.word	0x20001920
 8010ae8:	20000108 	.word	0x20000108
 8010aec:	20001680 	.word	0x20001680
 8010af0:	200018de 	.word	0x200018de
 8010af4:	08026b1c 	.word	0x08026b1c
 8010af8:	08026b40 	.word	0x08026b40
					canStatus[uc_index][SEND_VITAL_MSG_2].invalid = 1;
 8010afc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010b00:	4a9f      	ldr	r2, [pc, #636]	; (8010d80 <readCanToStructs+0xe98>)
 8010b02:	f240 4112 	movw	r1, #1042	; 0x412
 8010b06:	fb01 f303 	mul.w	r3, r1, r3
 8010b0a:	4413      	add	r3, r2
 8010b0c:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8010b10:	2201      	movs	r2, #1
 8010b12:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo++;
 8010b14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010b18:	4999      	ldr	r1, [pc, #612]	; (8010d80 <readCanToStructs+0xe98>)
 8010b1a:	f240 4212 	movw	r2, #1042	; 0x412
 8010b1e:	fb03 f202 	mul.w	r2, r3, r2
 8010b22:	440a      	add	r2, r1
 8010b24:	f202 4209 	addw	r2, r2, #1033	; 0x409
 8010b28:	7812      	ldrb	r2, [r2, #0]
 8010b2a:	3201      	adds	r2, #1
 8010b2c:	b2d0      	uxtb	r0, r2
 8010b2e:	4a94      	ldr	r2, [pc, #592]	; (8010d80 <readCanToStructs+0xe98>)
 8010b30:	f240 4112 	movw	r1, #1042	; 0x412
 8010b34:	fb01 f303 	mul.w	r3, r1, r3
 8010b38:	4413      	add	r3, r2
 8010b3a:	f203 4309 	addw	r3, r3, #1033	; 0x409
 8010b3e:	4602      	mov	r2, r0
 8010b40:	701a      	strb	r2, [r3, #0]
				break;
 8010b42:	e305      	b.n	8011150 <readCanToStructs+0x1268>
				uc_pp_charPtr = (uint8_t *)&Hitachi_fault_injection_st;
 8010b44:	4b8f      	ldr	r3, [pc, #572]	; (8010d84 <readCanToStructs+0xe9c>)
 8010b46:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8010b48:	4b8f      	ldr	r3, [pc, #572]	; (8010d88 <readCanToStructs+0xea0>)
 8010b4a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010b4e:	885b      	ldrh	r3, [r3, #2]
 8010b50:	4a8d      	ldr	r2, [pc, #564]	; (8010d88 <readCanToStructs+0xea0>)
 8010b52:	011b      	lsls	r3, r3, #4
 8010b54:	4413      	add	r3, r2
 8010b56:	3304      	adds	r3, #4
 8010b58:	781b      	ldrb	r3, [r3, #0]
 8010b5a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8010b5e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d110      	bne.n	8010b88 <readCanToStructs+0xca0>
					memset(uc_pp_charPtr,0,sizeof(HITACHI_FAULT_INJECTION_t));
 8010b66:	2208      	movs	r2, #8
 8010b68:	2100      	movs	r1, #0
 8010b6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010b6c:	f011 fc32 	bl	80223d4 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8010b70:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010b74:	4a82      	ldr	r2, [pc, #520]	; (8010d80 <readCanToStructs+0xe98>)
 8010b76:	f240 4112 	movw	r1, #1042	; 0x412
 8010b7a:	fb01 f303 	mul.w	r3, r1, r3
 8010b7e:	4413      	add	r3, r2
 8010b80:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8010b84:	2200      	movs	r2, #0
 8010b86:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo)
 8010b88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010b8c:	4a7c      	ldr	r2, [pc, #496]	; (8010d80 <readCanToStructs+0xe98>)
 8010b8e:	f240 4112 	movw	r1, #1042	; 0x412
 8010b92:	fb01 f303 	mul.w	r3, r1, r3
 8010b96:	4413      	add	r3, r2
 8010b98:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8010b9c:	781b      	ldrb	r3, [r3, #0]
 8010b9e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010ba2:	429a      	cmp	r2, r3
 8010ba4:	d014      	beq.n	8010bd0 <readCanToStructs+0xce8>
					printf("FAULT_INJECTION Seq no MisMatch\n");
 8010ba6:	4879      	ldr	r0, [pc, #484]	; (8010d8c <readCanToStructs+0xea4>)
 8010ba8:	f011 fd98 	bl	80226dc <puts>
					memset(uc_pp_charPtr,0,sizeof(HITACHI_FAULT_INJECTION_t));
 8010bac:	2208      	movs	r2, #8
 8010bae:	2100      	movs	r1, #0
 8010bb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010bb2:	f011 fc0f 	bl	80223d4 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8010bb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010bba:	4a71      	ldr	r2, [pc, #452]	; (8010d80 <readCanToStructs+0xe98>)
 8010bbc:	f240 4112 	movw	r1, #1042	; 0x412
 8010bc0:	fb01 f303 	mul.w	r3, r1, r3
 8010bc4:	4413      	add	r3, r2
 8010bc6:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8010bca:	2200      	movs	r2, #0
 8010bcc:	701a      	strb	r2, [r3, #0]
					break;
 8010bce:	e2bf      	b.n	8011150 <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 8010bd0:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010bd4:	4613      	mov	r3, r2
 8010bd6:	00db      	lsls	r3, r3, #3
 8010bd8:	1a9b      	subs	r3, r3, r2
 8010bda:	461a      	mov	r2, r3
 8010bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bde:	4413      	add	r3, r2
 8010be0:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010be2:	2301      	movs	r3, #1
 8010be4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010be8:	e016      	b.n	8010c18 <readCanToStructs+0xd30>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8010bea:	4b67      	ldr	r3, [pc, #412]	; (8010d88 <readCanToStructs+0xea0>)
 8010bec:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010bf0:	885b      	ldrh	r3, [r3, #2]
 8010bf2:	461a      	mov	r2, r3
 8010bf4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010bf8:	4963      	ldr	r1, [pc, #396]	; (8010d88 <readCanToStructs+0xea0>)
 8010bfa:	0112      	lsls	r2, r2, #4
 8010bfc:	440a      	add	r2, r1
 8010bfe:	4413      	add	r3, r2
 8010c00:	3304      	adds	r3, #4
 8010c02:	781a      	ldrb	r2, [r3, #0]
 8010c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c06:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8010c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c0a:	3301      	adds	r3, #1
 8010c0c:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010c0e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010c12:	3301      	adds	r3, #1
 8010c14:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010c18:	4b5b      	ldr	r3, [pc, #364]	; (8010d88 <readCanToStructs+0xea0>)
 8010c1a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010c1e:	885b      	ldrh	r3, [r3, #2]
 8010c20:	4a59      	ldr	r2, [pc, #356]	; (8010d88 <readCanToStructs+0xea0>)
 8010c22:	011b      	lsls	r3, r3, #4
 8010c24:	4413      	add	r3, r2
 8010c26:	330c      	adds	r3, #12
 8010c28:	781b      	ldrb	r3, [r3, #0]
 8010c2a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8010c2e:	429a      	cmp	r2, r3
 8010c30:	d3db      	bcc.n	8010bea <readCanToStructs+0xd02>
				if((((canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(HITACHI_FAULT_INJECTION_t))
 8010c32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010c36:	4a52      	ldr	r2, [pc, #328]	; (8010d80 <readCanToStructs+0xe98>)
 8010c38:	f240 4112 	movw	r1, #1042	; 0x412
 8010c3c:	fb01 f303 	mul.w	r3, r1, r3
 8010c40:	4413      	add	r3, r2
 8010c42:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8010c46:	781b      	ldrb	r3, [r3, #0]
 8010c48:	461a      	mov	r2, r3
 8010c4a:	4613      	mov	r3, r2
 8010c4c:	00db      	lsls	r3, r3, #3
 8010c4e:	1a9a      	subs	r2, r3, r2
 8010c50:	4b4d      	ldr	r3, [pc, #308]	; (8010d88 <readCanToStructs+0xea0>)
 8010c52:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010c56:	885b      	ldrh	r3, [r3, #2]
 8010c58:	494b      	ldr	r1, [pc, #300]	; (8010d88 <readCanToStructs+0xea0>)
 8010c5a:	011b      	lsls	r3, r3, #4
 8010c5c:	440b      	add	r3, r1
 8010c5e:	330c      	adds	r3, #12
 8010c60:	781b      	ldrb	r3, [r3, #0]
 8010c62:	3b01      	subs	r3, #1
 8010c64:	4413      	add	r3, r2
 8010c66:	2b07      	cmp	r3, #7
 8010c68:	d912      	bls.n	8010c90 <readCanToStructs+0xda8>
					printf("Received Fault Injection Data\n");
 8010c6a:	4849      	ldr	r0, [pc, #292]	; (8010d90 <readCanToStructs+0xea8>)
 8010c6c:	f011 fd36 	bl	80226dc <puts>
					Is_CAN_Exchange_happening = YES;
 8010c70:	4b48      	ldr	r3, [pc, #288]	; (8010d94 <readCanToStructs+0xeac>)
 8010c72:	2201      	movs	r2, #1
 8010c74:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8010c76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010c7a:	4a41      	ldr	r2, [pc, #260]	; (8010d80 <readCanToStructs+0xe98>)
 8010c7c:	f240 4112 	movw	r1, #1042	; 0x412
 8010c80:	fb01 f303 	mul.w	r3, r1, r3
 8010c84:	4413      	add	r3, r2
 8010c86:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8010c8a:	2200      	movs	r2, #0
 8010c8c:	701a      	strb	r2, [r3, #0]
				break;
 8010c8e:	e25f      	b.n	8011150 <readCanToStructs+0x1268>
					canStatus[uc_index][CAN_FAULT_INJECTION].invalid = 1;
 8010c90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010c94:	4a3a      	ldr	r2, [pc, #232]	; (8010d80 <readCanToStructs+0xe98>)
 8010c96:	f240 4112 	movw	r1, #1042	; 0x412
 8010c9a:	fb01 f303 	mul.w	r3, r1, r3
 8010c9e:	4413      	add	r3, r2
 8010ca0:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8010ca4:	2201      	movs	r2, #1
 8010ca6:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo++;
 8010ca8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010cac:	4934      	ldr	r1, [pc, #208]	; (8010d80 <readCanToStructs+0xe98>)
 8010cae:	f240 4212 	movw	r2, #1042	; 0x412
 8010cb2:	fb03 f202 	mul.w	r2, r3, r2
 8010cb6:	440a      	add	r2, r1
 8010cb8:	f202 420b 	addw	r2, r2, #1035	; 0x40b
 8010cbc:	7812      	ldrb	r2, [r2, #0]
 8010cbe:	3201      	adds	r2, #1
 8010cc0:	b2d0      	uxtb	r0, r2
 8010cc2:	4a2f      	ldr	r2, [pc, #188]	; (8010d80 <readCanToStructs+0xe98>)
 8010cc4:	f240 4112 	movw	r1, #1042	; 0x412
 8010cc8:	fb01 f303 	mul.w	r3, r1, r3
 8010ccc:	4413      	add	r3, r2
 8010cce:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8010cd2:	4602      	mov	r2, r0
 8010cd4:	701a      	strb	r2, [r3, #0]
				break;
 8010cd6:	e23b      	b.n	8011150 <readCanToStructs+0x1268>
				uc_pp_charPtr = (uint8_t *)&Rx_Temp_Main_Relays_st;
 8010cd8:	4b2f      	ldr	r3, [pc, #188]	; (8010d98 <readCanToStructs+0xeb0>)
 8010cda:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8010cdc:	4b2a      	ldr	r3, [pc, #168]	; (8010d88 <readCanToStructs+0xea0>)
 8010cde:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010ce2:	885b      	ldrh	r3, [r3, #2]
 8010ce4:	4a28      	ldr	r2, [pc, #160]	; (8010d88 <readCanToStructs+0xea0>)
 8010ce6:	011b      	lsls	r3, r3, #4
 8010ce8:	4413      	add	r3, r2
 8010cea:	3304      	adds	r3, #4
 8010cec:	781b      	ldrb	r3, [r3, #0]
 8010cee:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8010cf2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d110      	bne.n	8010d1c <readCanToStructs+0xe34>
					memset(uc_pp_charPtr,0,sizeof(RELAYS_t));
 8010cfa:	2214      	movs	r2, #20
 8010cfc:	2100      	movs	r1, #0
 8010cfe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010d00:	f011 fb68 	bl	80223d4 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8010d04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010d08:	4a1d      	ldr	r2, [pc, #116]	; (8010d80 <readCanToStructs+0xe98>)
 8010d0a:	f240 4112 	movw	r1, #1042	; 0x412
 8010d0e:	fb01 f303 	mul.w	r3, r1, r3
 8010d12:	4413      	add	r3, r2
 8010d14:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8010d18:	2200      	movs	r2, #0
 8010d1a:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo)
 8010d1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010d20:	4a17      	ldr	r2, [pc, #92]	; (8010d80 <readCanToStructs+0xe98>)
 8010d22:	f240 4112 	movw	r1, #1042	; 0x412
 8010d26:	fb01 f303 	mul.w	r3, r1, r3
 8010d2a:	4413      	add	r3, r2
 8010d2c:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8010d30:	781b      	ldrb	r3, [r3, #0]
 8010d32:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010d36:	429a      	cmp	r2, r3
 8010d38:	d014      	beq.n	8010d64 <readCanToStructs+0xe7c>
					printf("EIPC1RELAYS Seq no MisMatch\n");
 8010d3a:	4818      	ldr	r0, [pc, #96]	; (8010d9c <readCanToStructs+0xeb4>)
 8010d3c:	f011 fcce 	bl	80226dc <puts>
					memset(uc_pp_charPtr,0,sizeof(RELAYS_t));
 8010d40:	2214      	movs	r2, #20
 8010d42:	2100      	movs	r1, #0
 8010d44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010d46:	f011 fb45 	bl	80223d4 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8010d4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010d4e:	4a0c      	ldr	r2, [pc, #48]	; (8010d80 <readCanToStructs+0xe98>)
 8010d50:	f240 4112 	movw	r1, #1042	; 0x412
 8010d54:	fb01 f303 	mul.w	r3, r1, r3
 8010d58:	4413      	add	r3, r2
 8010d5a:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8010d5e:	2200      	movs	r2, #0
 8010d60:	701a      	strb	r2, [r3, #0]
					break;
 8010d62:	e1f5      	b.n	8011150 <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 8010d64:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010d68:	4613      	mov	r3, r2
 8010d6a:	00db      	lsls	r3, r3, #3
 8010d6c:	1a9b      	subs	r3, r3, r2
 8010d6e:	461a      	mov	r2, r3
 8010d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d72:	4413      	add	r3, r2
 8010d74:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010d76:	2301      	movs	r3, #1
 8010d78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010d7c:	e027      	b.n	8010dce <readCanToStructs+0xee6>
 8010d7e:	bf00      	nop
 8010d80:	2000523c 	.word	0x2000523c
 8010d84:	20001968 	.word	0x20001968
 8010d88:	20005a60 	.word	0x20005a60
 8010d8c:	08026b50 	.word	0x08026b50
 8010d90:	08026b70 	.word	0x08026b70
 8010d94:	20000108 	.word	0x20000108
 8010d98:	20002030 	.word	0x20002030
 8010d9c:	08026b90 	.word	0x08026b90
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8010da0:	4bb9      	ldr	r3, [pc, #740]	; (8011088 <readCanToStructs+0x11a0>)
 8010da2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010da6:	885b      	ldrh	r3, [r3, #2]
 8010da8:	461a      	mov	r2, r3
 8010daa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010dae:	49b6      	ldr	r1, [pc, #728]	; (8011088 <readCanToStructs+0x11a0>)
 8010db0:	0112      	lsls	r2, r2, #4
 8010db2:	440a      	add	r2, r1
 8010db4:	4413      	add	r3, r2
 8010db6:	3304      	adds	r3, #4
 8010db8:	781a      	ldrb	r2, [r3, #0]
 8010dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dbc:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8010dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dc0:	3301      	adds	r3, #1
 8010dc2:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010dc4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010dc8:	3301      	adds	r3, #1
 8010dca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010dce:	4bae      	ldr	r3, [pc, #696]	; (8011088 <readCanToStructs+0x11a0>)
 8010dd0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010dd4:	885b      	ldrh	r3, [r3, #2]
 8010dd6:	4aac      	ldr	r2, [pc, #688]	; (8011088 <readCanToStructs+0x11a0>)
 8010dd8:	011b      	lsls	r3, r3, #4
 8010dda:	4413      	add	r3, r2
 8010ddc:	330c      	adds	r3, #12
 8010dde:	781b      	ldrb	r3, [r3, #0]
 8010de0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8010de4:	429a      	cmp	r2, r3
 8010de6:	d3db      	bcc.n	8010da0 <readCanToStructs+0xeb8>
				if((((canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(RELAYS_t))
 8010de8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010dec:	4aa7      	ldr	r2, [pc, #668]	; (801108c <readCanToStructs+0x11a4>)
 8010dee:	f240 4112 	movw	r1, #1042	; 0x412
 8010df2:	fb01 f303 	mul.w	r3, r1, r3
 8010df6:	4413      	add	r3, r2
 8010df8:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8010dfc:	781b      	ldrb	r3, [r3, #0]
 8010dfe:	461a      	mov	r2, r3
 8010e00:	4613      	mov	r3, r2
 8010e02:	00db      	lsls	r3, r3, #3
 8010e04:	1a9a      	subs	r2, r3, r2
 8010e06:	4ba0      	ldr	r3, [pc, #640]	; (8011088 <readCanToStructs+0x11a0>)
 8010e08:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010e0c:	885b      	ldrh	r3, [r3, #2]
 8010e0e:	499e      	ldr	r1, [pc, #632]	; (8011088 <readCanToStructs+0x11a0>)
 8010e10:	011b      	lsls	r3, r3, #4
 8010e12:	440b      	add	r3, r1
 8010e14:	330c      	adds	r3, #12
 8010e16:	781b      	ldrb	r3, [r3, #0]
 8010e18:	3b01      	subs	r3, #1
 8010e1a:	4413      	add	r3, r2
 8010e1c:	2b13      	cmp	r3, #19
 8010e1e:	d954      	bls.n	8010eca <readCanToStructs+0xfe2>
					uint16_t CRC16 = 0;
 8010e20:	2300      	movs	r3, #0
 8010e22:	853b      	strh	r3, [r7, #40]	; 0x28
					uint8_t Buff[40] = {0,};
 8010e24:	2300      	movs	r3, #0
 8010e26:	603b      	str	r3, [r7, #0]
 8010e28:	1d3b      	adds	r3, r7, #4
 8010e2a:	2224      	movs	r2, #36	; 0x24
 8010e2c:	2100      	movs	r1, #0
 8010e2e:	4618      	mov	r0, r3
 8010e30:	f011 fad0 	bl	80223d4 <memset>
					memcpy(Buff,&Rx_Temp_Main_Relays_st,sizeof(Rx_Temp_Main_Relays_st));
 8010e34:	463b      	mov	r3, r7
 8010e36:	2214      	movs	r2, #20
 8010e38:	4995      	ldr	r1, [pc, #596]	; (8011090 <readCanToStructs+0x11a8>)
 8010e3a:	4618      	mov	r0, r3
 8010e3c:	f011 faa2 	bl	8022384 <memcpy>
					CRC16 = GetCRC16(0,Buff, sizeof(Rx_Temp_Main_Relays_st));
 8010e40:	463b      	mov	r3, r7
 8010e42:	2214      	movs	r2, #20
 8010e44:	4619      	mov	r1, r3
 8010e46:	2000      	movs	r0, #0
 8010e48:	f001 ff10 	bl	8012c6c <GetCRC16>
 8010e4c:	4603      	mov	r3, r0
 8010e4e:	853b      	strh	r3, [r7, #40]	; 0x28
					if(CRC16 == 0)
 8010e50:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d10c      	bne.n	8010e70 <readCanToStructs+0xf88>
						canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8010e56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010e5a:	4a8c      	ldr	r2, [pc, #560]	; (801108c <readCanToStructs+0x11a4>)
 8010e5c:	f240 4112 	movw	r1, #1042	; 0x412
 8010e60:	fb01 f303 	mul.w	r3, r1, r3
 8010e64:	4413      	add	r3, r2
 8010e66:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8010e6a:	2200      	movs	r2, #0
 8010e6c:	701a      	strb	r2, [r3, #0]
				break;
 8010e6e:	e16f      	b.n	8011150 <readCanToStructs+0x1268>
						if(Debug_flag == 1)
 8010e70:	4b88      	ldr	r3, [pc, #544]	; (8011094 <readCanToStructs+0x11ac>)
 8010e72:	781b      	ldrb	r3, [r3, #0]
 8010e74:	2b01      	cmp	r3, #1
 8010e76:	d10a      	bne.n	8010e8e <readCanToStructs+0xfa6>
							printf("Rcv Relays1-O:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Rx_Temp_Main_Relays_st.Peer_Index]);
 8010e78:	4b85      	ldr	r3, [pc, #532]	; (8011090 <readCanToStructs+0x11a8>)
 8010e7a:	781b      	ldrb	r3, [r3, #0]
 8010e7c:	4a86      	ldr	r2, [pc, #536]	; (8011098 <readCanToStructs+0x11b0>)
 8010e7e:	3366      	adds	r3, #102	; 0x66
 8010e80:	009b      	lsls	r3, r3, #2
 8010e82:	4413      	add	r3, r2
 8010e84:	685b      	ldr	r3, [r3, #4]
 8010e86:	4619      	mov	r1, r3
 8010e88:	4884      	ldr	r0, [pc, #528]	; (801109c <readCanToStructs+0x11b4>)
 8010e8a:	f011 fb8b 	bl	80225a4 <iprintf>
						memcpy(&OtherCard_Relays_st[Rx_Temp_Main_Relays_st.Peer_Index],&Rx_Temp_Main_Relays_st,sizeof(RELAYS_t));
 8010e8e:	4b80      	ldr	r3, [pc, #512]	; (8011090 <readCanToStructs+0x11a8>)
 8010e90:	781b      	ldrb	r3, [r3, #0]
 8010e92:	461a      	mov	r2, r3
 8010e94:	4613      	mov	r3, r2
 8010e96:	009b      	lsls	r3, r3, #2
 8010e98:	4413      	add	r3, r2
 8010e9a:	009b      	lsls	r3, r3, #2
 8010e9c:	4a80      	ldr	r2, [pc, #512]	; (80110a0 <readCanToStructs+0x11b8>)
 8010e9e:	4413      	add	r3, r2
 8010ea0:	2214      	movs	r2, #20
 8010ea2:	497b      	ldr	r1, [pc, #492]	; (8011090 <readCanToStructs+0x11a8>)
 8010ea4:	4618      	mov	r0, r3
 8010ea6:	f011 fa6d 	bl	8022384 <memcpy>
						Is_CAN_Exchange_happening = YES;
 8010eaa:	4b7e      	ldr	r3, [pc, #504]	; (80110a4 <readCanToStructs+0x11bc>)
 8010eac:	2201      	movs	r2, #1
 8010eae:	701a      	strb	r2, [r3, #0]
						canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8010eb0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010eb4:	4a75      	ldr	r2, [pc, #468]	; (801108c <readCanToStructs+0x11a4>)
 8010eb6:	f240 4112 	movw	r1, #1042	; 0x412
 8010eba:	fb01 f303 	mul.w	r3, r1, r3
 8010ebe:	4413      	add	r3, r2
 8010ec0:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8010ec4:	2200      	movs	r2, #0
 8010ec6:	701a      	strb	r2, [r3, #0]
				break;
 8010ec8:	e142      	b.n	8011150 <readCanToStructs+0x1268>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].invalid = 1;
 8010eca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010ece:	4a6f      	ldr	r2, [pc, #444]	; (801108c <readCanToStructs+0x11a4>)
 8010ed0:	f240 4112 	movw	r1, #1042	; 0x412
 8010ed4:	fb01 f303 	mul.w	r3, r1, r3
 8010ed8:	4413      	add	r3, r2
 8010eda:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8010ede:	2201      	movs	r2, #1
 8010ee0:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo++;
 8010ee2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010ee6:	4969      	ldr	r1, [pc, #420]	; (801108c <readCanToStructs+0x11a4>)
 8010ee8:	f240 4212 	movw	r2, #1042	; 0x412
 8010eec:	fb03 f202 	mul.w	r2, r3, r2
 8010ef0:	440a      	add	r2, r1
 8010ef2:	f202 420f 	addw	r2, r2, #1039	; 0x40f
 8010ef6:	7812      	ldrb	r2, [r2, #0]
 8010ef8:	3201      	adds	r2, #1
 8010efa:	b2d0      	uxtb	r0, r2
 8010efc:	4a63      	ldr	r2, [pc, #396]	; (801108c <readCanToStructs+0x11a4>)
 8010efe:	f240 4112 	movw	r1, #1042	; 0x412
 8010f02:	fb01 f303 	mul.w	r3, r1, r3
 8010f06:	4413      	add	r3, r2
 8010f08:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8010f0c:	4602      	mov	r2, r0
 8010f0e:	701a      	strb	r2, [r3, #0]
				break;
 8010f10:	e11e      	b.n	8011150 <readCanToStructs+0x1268>
				uc_pp_charPtr = (uint8_t *)&Rx_Temp_Main_Relays_st;
 8010f12:	4b5f      	ldr	r3, [pc, #380]	; (8011090 <readCanToStructs+0x11a8>)
 8010f14:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8010f16:	4b5c      	ldr	r3, [pc, #368]	; (8011088 <readCanToStructs+0x11a0>)
 8010f18:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010f1c:	885b      	ldrh	r3, [r3, #2]
 8010f1e:	4a5a      	ldr	r2, [pc, #360]	; (8011088 <readCanToStructs+0x11a0>)
 8010f20:	011b      	lsls	r3, r3, #4
 8010f22:	4413      	add	r3, r2
 8010f24:	3304      	adds	r3, #4
 8010f26:	781b      	ldrb	r3, [r3, #0]
 8010f28:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8010f2c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d110      	bne.n	8010f56 <readCanToStructs+0x106e>
					memset(uc_pp_charPtr,0,sizeof(RELAYS_t));
 8010f34:	2214      	movs	r2, #20
 8010f36:	2100      	movs	r1, #0
 8010f38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010f3a:	f011 fa4b 	bl	80223d4 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8010f3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010f42:	4a52      	ldr	r2, [pc, #328]	; (801108c <readCanToStructs+0x11a4>)
 8010f44:	f240 4112 	movw	r1, #1042	; 0x412
 8010f48:	fb01 f303 	mul.w	r3, r1, r3
 8010f4c:	4413      	add	r3, r2
 8010f4e:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8010f52:	2200      	movs	r2, #0
 8010f54:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo)
 8010f56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010f5a:	4a4c      	ldr	r2, [pc, #304]	; (801108c <readCanToStructs+0x11a4>)
 8010f5c:	f240 4112 	movw	r1, #1042	; 0x412
 8010f60:	fb01 f303 	mul.w	r3, r1, r3
 8010f64:	4413      	add	r3, r2
 8010f66:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8010f6a:	781b      	ldrb	r3, [r3, #0]
 8010f6c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010f70:	429a      	cmp	r2, r3
 8010f72:	d014      	beq.n	8010f9e <readCanToStructs+0x10b6>
					printf("EIPC2 RELAYS Seq no MisMatch\n");
 8010f74:	484c      	ldr	r0, [pc, #304]	; (80110a8 <readCanToStructs+0x11c0>)
 8010f76:	f011 fbb1 	bl	80226dc <puts>
					memset(uc_pp_charPtr,0,sizeof(RELAYS_t));
 8010f7a:	2214      	movs	r2, #20
 8010f7c:	2100      	movs	r1, #0
 8010f7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010f80:	f011 fa28 	bl	80223d4 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8010f84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010f88:	4a40      	ldr	r2, [pc, #256]	; (801108c <readCanToStructs+0x11a4>)
 8010f8a:	f240 4112 	movw	r1, #1042	; 0x412
 8010f8e:	fb01 f303 	mul.w	r3, r1, r3
 8010f92:	4413      	add	r3, r2
 8010f94:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8010f98:	2200      	movs	r2, #0
 8010f9a:	701a      	strb	r2, [r3, #0]
					break;
 8010f9c:	e0d8      	b.n	8011150 <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 8010f9e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010fa2:	4613      	mov	r3, r2
 8010fa4:	00db      	lsls	r3, r3, #3
 8010fa6:	1a9b      	subs	r3, r3, r2
 8010fa8:	461a      	mov	r2, r3
 8010faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fac:	4413      	add	r3, r2
 8010fae:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010fb0:	2301      	movs	r3, #1
 8010fb2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010fb6:	e016      	b.n	8010fe6 <readCanToStructs+0x10fe>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8010fb8:	4b33      	ldr	r3, [pc, #204]	; (8011088 <readCanToStructs+0x11a0>)
 8010fba:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010fbe:	885b      	ldrh	r3, [r3, #2]
 8010fc0:	461a      	mov	r2, r3
 8010fc2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010fc6:	4930      	ldr	r1, [pc, #192]	; (8011088 <readCanToStructs+0x11a0>)
 8010fc8:	0112      	lsls	r2, r2, #4
 8010fca:	440a      	add	r2, r1
 8010fcc:	4413      	add	r3, r2
 8010fce:	3304      	adds	r3, #4
 8010fd0:	781a      	ldrb	r2, [r3, #0]
 8010fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fd4:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8010fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fd8:	3301      	adds	r3, #1
 8010fda:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010fdc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010fe0:	3301      	adds	r3, #1
 8010fe2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010fe6:	4b28      	ldr	r3, [pc, #160]	; (8011088 <readCanToStructs+0x11a0>)
 8010fe8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010fec:	885b      	ldrh	r3, [r3, #2]
 8010fee:	4a26      	ldr	r2, [pc, #152]	; (8011088 <readCanToStructs+0x11a0>)
 8010ff0:	011b      	lsls	r3, r3, #4
 8010ff2:	4413      	add	r3, r2
 8010ff4:	330c      	adds	r3, #12
 8010ff6:	781b      	ldrb	r3, [r3, #0]
 8010ff8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8010ffc:	429a      	cmp	r2, r3
 8010ffe:	d3db      	bcc.n	8010fb8 <readCanToStructs+0x10d0>
				if((((canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(RELAYS_t))
 8011000:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011004:	4a21      	ldr	r2, [pc, #132]	; (801108c <readCanToStructs+0x11a4>)
 8011006:	f240 4112 	movw	r1, #1042	; 0x412
 801100a:	fb01 f303 	mul.w	r3, r1, r3
 801100e:	4413      	add	r3, r2
 8011010:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8011014:	781b      	ldrb	r3, [r3, #0]
 8011016:	461a      	mov	r2, r3
 8011018:	4613      	mov	r3, r2
 801101a:	00db      	lsls	r3, r3, #3
 801101c:	1a9a      	subs	r2, r3, r2
 801101e:	4b1a      	ldr	r3, [pc, #104]	; (8011088 <readCanToStructs+0x11a0>)
 8011020:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011024:	885b      	ldrh	r3, [r3, #2]
 8011026:	4918      	ldr	r1, [pc, #96]	; (8011088 <readCanToStructs+0x11a0>)
 8011028:	011b      	lsls	r3, r3, #4
 801102a:	440b      	add	r3, r1
 801102c:	330c      	adds	r3, #12
 801102e:	781b      	ldrb	r3, [r3, #0]
 8011030:	3b01      	subs	r3, #1
 8011032:	4413      	add	r3, r2
 8011034:	2b13      	cmp	r3, #19
 8011036:	d966      	bls.n	8011106 <readCanToStructs+0x121e>
					uint16_t CRC16 = 0;
 8011038:	2300      	movs	r3, #0
 801103a:	857b      	strh	r3, [r7, #42]	; 0x2a
					uint8_t Buff[40] = {0,};
 801103c:	2300      	movs	r3, #0
 801103e:	603b      	str	r3, [r7, #0]
 8011040:	1d3b      	adds	r3, r7, #4
 8011042:	2224      	movs	r2, #36	; 0x24
 8011044:	2100      	movs	r1, #0
 8011046:	4618      	mov	r0, r3
 8011048:	f011 f9c4 	bl	80223d4 <memset>
					memcpy(Buff,&Rx_Temp_Main_Relays_st,sizeof(Rx_Temp_Main_Relays_st));
 801104c:	463b      	mov	r3, r7
 801104e:	2214      	movs	r2, #20
 8011050:	490f      	ldr	r1, [pc, #60]	; (8011090 <readCanToStructs+0x11a8>)
 8011052:	4618      	mov	r0, r3
 8011054:	f011 f996 	bl	8022384 <memcpy>
					CRC16 = GetCRC16(0,Buff, sizeof(Rx_Temp_Main_Relays_st));
 8011058:	463b      	mov	r3, r7
 801105a:	2214      	movs	r2, #20
 801105c:	4619      	mov	r1, r3
 801105e:	2000      	movs	r0, #0
 8011060:	f001 fe04 	bl	8012c6c <GetCRC16>
 8011064:	4603      	mov	r3, r0
 8011066:	857b      	strh	r3, [r7, #42]	; 0x2a
					if(CRC16 == 0)
 8011068:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801106a:	2b00      	cmp	r3, #0
 801106c:	d11e      	bne.n	80110ac <readCanToStructs+0x11c4>
						canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 801106e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011072:	4a06      	ldr	r2, [pc, #24]	; (801108c <readCanToStructs+0x11a4>)
 8011074:	f240 4112 	movw	r1, #1042	; 0x412
 8011078:	fb01 f303 	mul.w	r3, r1, r3
 801107c:	4413      	add	r3, r2
 801107e:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8011082:	2200      	movs	r2, #0
 8011084:	701a      	strb	r2, [r3, #0]
				break;
 8011086:	e063      	b.n	8011150 <readCanToStructs+0x1268>
 8011088:	20005a60 	.word	0x20005a60
 801108c:	2000523c 	.word	0x2000523c
 8011090:	20002030 	.word	0x20002030
 8011094:	20000645 	.word	0x20000645
 8011098:	20000304 	.word	0x20000304
 801109c:	08026bac 	.word	0x08026bac
 80110a0:	20001f54 	.word	0x20001f54
 80110a4:	20000108 	.word	0x20000108
 80110a8:	08026bc0 	.word	0x08026bc0
						if(Debug_flag == 1)
 80110ac:	4bc7      	ldr	r3, [pc, #796]	; (80113cc <readCanToStructs+0x14e4>)
 80110ae:	781b      	ldrb	r3, [r3, #0]
 80110b0:	2b01      	cmp	r3, #1
 80110b2:	d10a      	bne.n	80110ca <readCanToStructs+0x11e2>
							printf("Rcv Relays2-O:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Rx_Temp_Main_Relays_st.Peer_Index]);
 80110b4:	4bc6      	ldr	r3, [pc, #792]	; (80113d0 <readCanToStructs+0x14e8>)
 80110b6:	781b      	ldrb	r3, [r3, #0]
 80110b8:	4ac6      	ldr	r2, [pc, #792]	; (80113d4 <readCanToStructs+0x14ec>)
 80110ba:	3366      	adds	r3, #102	; 0x66
 80110bc:	009b      	lsls	r3, r3, #2
 80110be:	4413      	add	r3, r2
 80110c0:	685b      	ldr	r3, [r3, #4]
 80110c2:	4619      	mov	r1, r3
 80110c4:	48c4      	ldr	r0, [pc, #784]	; (80113d8 <readCanToStructs+0x14f0>)
 80110c6:	f011 fa6d 	bl	80225a4 <iprintf>
						memcpy(&OtherCard_Relays_st[Rx_Temp_Main_Relays_st.Peer_Index],&Rx_Temp_Main_Relays_st,sizeof(RELAYS_t));
 80110ca:	4bc1      	ldr	r3, [pc, #772]	; (80113d0 <readCanToStructs+0x14e8>)
 80110cc:	781b      	ldrb	r3, [r3, #0]
 80110ce:	461a      	mov	r2, r3
 80110d0:	4613      	mov	r3, r2
 80110d2:	009b      	lsls	r3, r3, #2
 80110d4:	4413      	add	r3, r2
 80110d6:	009b      	lsls	r3, r3, #2
 80110d8:	4ac0      	ldr	r2, [pc, #768]	; (80113dc <readCanToStructs+0x14f4>)
 80110da:	4413      	add	r3, r2
 80110dc:	2214      	movs	r2, #20
 80110de:	49bc      	ldr	r1, [pc, #752]	; (80113d0 <readCanToStructs+0x14e8>)
 80110e0:	4618      	mov	r0, r3
 80110e2:	f011 f94f 	bl	8022384 <memcpy>
						Is_CAN_Exchange_happening = YES;
 80110e6:	4bbe      	ldr	r3, [pc, #760]	; (80113e0 <readCanToStructs+0x14f8>)
 80110e8:	2201      	movs	r2, #1
 80110ea:	701a      	strb	r2, [r3, #0]
						canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 80110ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80110f0:	4abc      	ldr	r2, [pc, #752]	; (80113e4 <readCanToStructs+0x14fc>)
 80110f2:	f240 4112 	movw	r1, #1042	; 0x412
 80110f6:	fb01 f303 	mul.w	r3, r1, r3
 80110fa:	4413      	add	r3, r2
 80110fc:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8011100:	2200      	movs	r2, #0
 8011102:	701a      	strb	r2, [r3, #0]
				break;
 8011104:	e024      	b.n	8011150 <readCanToStructs+0x1268>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].invalid = 1;
 8011106:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801110a:	4ab6      	ldr	r2, [pc, #728]	; (80113e4 <readCanToStructs+0x14fc>)
 801110c:	f240 4112 	movw	r1, #1042	; 0x412
 8011110:	fb01 f303 	mul.w	r3, r1, r3
 8011114:	4413      	add	r3, r2
 8011116:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 801111a:	2201      	movs	r2, #1
 801111c:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo++;
 801111e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011122:	49b0      	ldr	r1, [pc, #704]	; (80113e4 <readCanToStructs+0x14fc>)
 8011124:	f240 4212 	movw	r2, #1042	; 0x412
 8011128:	fb03 f202 	mul.w	r2, r3, r2
 801112c:	440a      	add	r2, r1
 801112e:	f202 4211 	addw	r2, r2, #1041	; 0x411
 8011132:	7812      	ldrb	r2, [r2, #0]
 8011134:	3201      	adds	r2, #1
 8011136:	b2d0      	uxtb	r0, r2
 8011138:	4aaa      	ldr	r2, [pc, #680]	; (80113e4 <readCanToStructs+0x14fc>)
 801113a:	f240 4112 	movw	r1, #1042	; 0x412
 801113e:	fb01 f303 	mul.w	r3, r1, r3
 8011142:	4413      	add	r3, r2
 8011144:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8011148:	4602      	mov	r2, r0
 801114a:	701a      	strb	r2, [r3, #0]
				break;
 801114c:	e000      	b.n	8011150 <readCanToStructs+0x1268>
				break;
 801114e:	bf00      	nop
			memset(&canRead.CAN_msg[canRead.Out],0,sizeof(CAN_msg));
 8011150:	4ba5      	ldr	r3, [pc, #660]	; (80113e8 <readCanToStructs+0x1500>)
 8011152:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011156:	885b      	ldrh	r3, [r3, #2]
 8011158:	011b      	lsls	r3, r3, #4
 801115a:	4aa3      	ldr	r2, [pc, #652]	; (80113e8 <readCanToStructs+0x1500>)
 801115c:	4413      	add	r3, r2
 801115e:	2210      	movs	r2, #16
 8011160:	2100      	movs	r1, #0
 8011162:	4618      	mov	r0, r3
 8011164:	f011 f936 	bl	80223d4 <memset>
			canRead.Out++;
 8011168:	4b9f      	ldr	r3, [pc, #636]	; (80113e8 <readCanToStructs+0x1500>)
 801116a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801116e:	885b      	ldrh	r3, [r3, #2]
 8011170:	3301      	adds	r3, #1
 8011172:	b29a      	uxth	r2, r3
 8011174:	4b9c      	ldr	r3, [pc, #624]	; (80113e8 <readCanToStructs+0x1500>)
 8011176:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801117a:	805a      	strh	r2, [r3, #2]
			if(CANBUFFSIZE == canRead.Out)
 801117c:	4b9a      	ldr	r3, [pc, #616]	; (80113e8 <readCanToStructs+0x1500>)
 801117e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011182:	885b      	ldrh	r3, [r3, #2]
 8011184:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011188:	d104      	bne.n	8011194 <readCanToStructs+0x12ac>
				canRead.Out = 0;
 801118a:	4b97      	ldr	r3, [pc, #604]	; (80113e8 <readCanToStructs+0x1500>)
 801118c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011190:	2200      	movs	r2, #0
 8011192:	805a      	strh	r2, [r3, #2]
		while(canDataReady())
 8011194:	f7fe fe52 	bl	800fe3c <canDataReady>
 8011198:	4603      	mov	r3, r0
 801119a:	2b00      	cmp	r3, #0
 801119c:	f47e aecb 	bne.w	800ff36 <readCanToStructs+0x4e>
	break;
 80111a0:	f001 bcff 	b.w	8012ba2 <readCanToStructs+0x2cba>
			uc_index = canRead.CAN_msg[canRead.Out].canPort-1;
 80111a4:	4b90      	ldr	r3, [pc, #576]	; (80113e8 <readCanToStructs+0x1500>)
 80111a6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80111aa:	885b      	ldrh	r3, [r3, #2]
 80111ac:	4a8e      	ldr	r2, [pc, #568]	; (80113e8 <readCanToStructs+0x1500>)
 80111ae:	011b      	lsls	r3, r3, #4
 80111b0:	4413      	add	r3, r2
 80111b2:	330f      	adds	r3, #15
 80111b4:	781b      	ldrb	r3, [r3, #0]
 80111b6:	3b01      	subs	r3, #1
 80111b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			switch(canRead.CAN_msg[canRead.Out].StdId)
 80111bc:	4b8a      	ldr	r3, [pc, #552]	; (80113e8 <readCanToStructs+0x1500>)
 80111be:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80111c2:	885b      	ldrh	r3, [r3, #2]
 80111c4:	4a88      	ldr	r2, [pc, #544]	; (80113e8 <readCanToStructs+0x1500>)
 80111c6:	011b      	lsls	r3, r3, #4
 80111c8:	4413      	add	r3, r2
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 80111d0:	f200 8672 	bhi.w	8011eb8 <readCanToStructs+0x1fd0>
 80111d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80111d8:	d80a      	bhi.n	80111f0 <readCanToStructs+0x1308>
 80111da:	f240 1203 	movw	r2, #259	; 0x103
 80111de:	4293      	cmp	r3, r2
 80111e0:	d01e      	beq.n	8011220 <readCanToStructs+0x1338>
 80111e2:	f240 1209 	movw	r2, #265	; 0x109
 80111e6:	4293      	cmp	r3, r2
 80111e8:	f000 8108 	beq.w	80113fc <readCanToStructs+0x1514>
				break;
 80111ec:	f000 be64 	b.w	8011eb8 <readCanToStructs+0x1fd0>
 80111f0:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 80111f4:	2b07      	cmp	r3, #7
 80111f6:	f200 865f 	bhi.w	8011eb8 <readCanToStructs+0x1fd0>
 80111fa:	a201      	add	r2, pc, #4	; (adr r2, 8011200 <readCanToStructs+0x1318>)
 80111fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011200:	080115a9 	.word	0x080115a9
 8011204:	0801178d 	.word	0x0801178d
 8011208:	08011eb9 	.word	0x08011eb9
 801120c:	08011eb9 	.word	0x08011eb9
 8011210:	08011d1b 	.word	0x08011d1b
 8011214:	08011eb9 	.word	0x08011eb9
 8011218:	0801193d 	.word	0x0801193d
 801121c:	08011b2f 	.word	0x08011b2f
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 8011220:	4b72      	ldr	r3, [pc, #456]	; (80113ec <readCanToStructs+0x1504>)
 8011222:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8011224:	4b70      	ldr	r3, [pc, #448]	; (80113e8 <readCanToStructs+0x1500>)
 8011226:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801122a:	885b      	ldrh	r3, [r3, #2]
 801122c:	4a6e      	ldr	r2, [pc, #440]	; (80113e8 <readCanToStructs+0x1500>)
 801122e:	011b      	lsls	r3, r3, #4
 8011230:	4413      	add	r3, r2
 8011232:	3304      	adds	r3, #4
 8011234:	781b      	ldrb	r3, [r3, #0]
 8011236:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 801123a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801123e:	2b00      	cmp	r3, #0
 8011240:	d110      	bne.n	8011264 <readCanToStructs+0x137c>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8011242:	2206      	movs	r2, #6
 8011244:	2100      	movs	r1, #0
 8011246:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011248:	f011 f8c4 	bl	80223d4 <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 801124c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011250:	4a64      	ldr	r2, [pc, #400]	; (80113e4 <readCanToStructs+0x14fc>)
 8011252:	f240 4112 	movw	r1, #1042	; 0x412
 8011256:	fb01 f303 	mul.w	r3, r1, r3
 801125a:	4413      	add	r3, r2
 801125c:	f203 2307 	addw	r3, r3, #519	; 0x207
 8011260:	2200      	movs	r2, #0
 8011262:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS_TIME_PKT].expSeqNo)
 8011264:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011268:	4a5e      	ldr	r2, [pc, #376]	; (80113e4 <readCanToStructs+0x14fc>)
 801126a:	f240 4112 	movw	r1, #1042	; 0x412
 801126e:	fb01 f303 	mul.w	r3, r1, r3
 8011272:	4413      	add	r3, r2
 8011274:	f203 2307 	addw	r3, r3, #519	; 0x207
 8011278:	781b      	ldrb	r3, [r3, #0]
 801127a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801127e:	429a      	cmp	r2, r3
 8011280:	d015      	beq.n	80112ae <readCanToStructs+0x13c6>
					printf("GPS Packet Seq no MisMatch\n");
 8011282:	485b      	ldr	r0, [pc, #364]	; (80113f0 <readCanToStructs+0x1508>)
 8011284:	f011 fa2a 	bl	80226dc <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8011288:	2206      	movs	r2, #6
 801128a:	2100      	movs	r1, #0
 801128c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801128e:	f011 f8a1 	bl	80223d4 <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8011292:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011296:	4a53      	ldr	r2, [pc, #332]	; (80113e4 <readCanToStructs+0x14fc>)
 8011298:	f240 4112 	movw	r1, #1042	; 0x412
 801129c:	fb01 f303 	mul.w	r3, r1, r3
 80112a0:	4413      	add	r3, r2
 80112a2:	f203 2307 	addw	r3, r3, #519	; 0x207
 80112a6:	2200      	movs	r2, #0
 80112a8:	701a      	strb	r2, [r3, #0]
					break;
 80112aa:	f000 be0a 	b.w	8011ec2 <readCanToStructs+0x1fda>
				uc_pp_charPtr += (7 * uc_seqNo);
 80112ae:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80112b2:	4613      	mov	r3, r2
 80112b4:	00db      	lsls	r3, r3, #3
 80112b6:	1a9b      	subs	r3, r3, r2
 80112b8:	461a      	mov	r2, r3
 80112ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112bc:	4413      	add	r3, r2
 80112be:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80112c0:	2301      	movs	r3, #1
 80112c2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80112c6:	e016      	b.n	80112f6 <readCanToStructs+0x140e>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80112c8:	4b47      	ldr	r3, [pc, #284]	; (80113e8 <readCanToStructs+0x1500>)
 80112ca:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80112ce:	885b      	ldrh	r3, [r3, #2]
 80112d0:	461a      	mov	r2, r3
 80112d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80112d6:	4944      	ldr	r1, [pc, #272]	; (80113e8 <readCanToStructs+0x1500>)
 80112d8:	0112      	lsls	r2, r2, #4
 80112da:	440a      	add	r2, r1
 80112dc:	4413      	add	r3, r2
 80112de:	3304      	adds	r3, #4
 80112e0:	781a      	ldrb	r2, [r3, #0]
 80112e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112e4:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80112e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112e8:	3301      	adds	r3, #1
 80112ea:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80112ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80112f0:	3301      	adds	r3, #1
 80112f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80112f6:	4b3c      	ldr	r3, [pc, #240]	; (80113e8 <readCanToStructs+0x1500>)
 80112f8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80112fc:	885b      	ldrh	r3, [r3, #2]
 80112fe:	4a3a      	ldr	r2, [pc, #232]	; (80113e8 <readCanToStructs+0x1500>)
 8011300:	011b      	lsls	r3, r3, #4
 8011302:	4413      	add	r3, r2
 8011304:	330c      	adds	r3, #12
 8011306:	781b      	ldrb	r3, [r3, #0]
 8011308:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801130c:	429a      	cmp	r2, r3
 801130e:	d3db      	bcc.n	80112c8 <readCanToStructs+0x13e0>
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 8011310:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011314:	4a33      	ldr	r2, [pc, #204]	; (80113e4 <readCanToStructs+0x14fc>)
 8011316:	f240 4112 	movw	r1, #1042	; 0x412
 801131a:	fb01 f303 	mul.w	r3, r1, r3
 801131e:	4413      	add	r3, r2
 8011320:	f203 2307 	addw	r3, r3, #519	; 0x207
 8011324:	781b      	ldrb	r3, [r3, #0]
 8011326:	461a      	mov	r2, r3
 8011328:	4613      	mov	r3, r2
 801132a:	00db      	lsls	r3, r3, #3
 801132c:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 801132e:	4b2e      	ldr	r3, [pc, #184]	; (80113e8 <readCanToStructs+0x1500>)
 8011330:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011334:	885b      	ldrh	r3, [r3, #2]
 8011336:	492c      	ldr	r1, [pc, #176]	; (80113e8 <readCanToStructs+0x1500>)
 8011338:	011b      	lsls	r3, r3, #4
 801133a:	440b      	add	r3, r1
 801133c:	330c      	adds	r3, #12
 801133e:	781b      	ldrb	r3, [r3, #0]
 8011340:	3b01      	subs	r3, #1
 8011342:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 8011344:	2b05      	cmp	r3, #5
 8011346:	d91c      	bls.n	8011382 <readCanToStructs+0x149a>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 8011348:	4b2a      	ldr	r3, [pc, #168]	; (80113f4 <readCanToStructs+0x150c>)
 801134a:	4a28      	ldr	r2, [pc, #160]	; (80113ec <readCanToStructs+0x1504>)
 801134c:	6811      	ldr	r1, [r2, #0]
 801134e:	6019      	str	r1, [r3, #0]
 8011350:	8892      	ldrh	r2, [r2, #4]
 8011352:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 8011354:	4b1d      	ldr	r3, [pc, #116]	; (80113cc <readCanToStructs+0x14e4>)
 8011356:	781b      	ldrb	r3, [r3, #0]
 8011358:	2b01      	cmp	r3, #1
 801135a:	d102      	bne.n	8011362 <readCanToStructs+0x147a>
						printf("GPS_PACKET_RECEIVED\n");
 801135c:	4826      	ldr	r0, [pc, #152]	; (80113f8 <readCanToStructs+0x1510>)
 801135e:	f011 f9bd 	bl	80226dc <puts>
					Write_RTC();
 8011362:	f7f9 fe71 	bl	800b048 <Write_RTC>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8011366:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801136a:	4a1e      	ldr	r2, [pc, #120]	; (80113e4 <readCanToStructs+0x14fc>)
 801136c:	f240 4112 	movw	r1, #1042	; 0x412
 8011370:	fb01 f303 	mul.w	r3, r1, r3
 8011374:	4413      	add	r3, r2
 8011376:	f203 2307 	addw	r3, r3, #519	; 0x207
 801137a:	2200      	movs	r2, #0
 801137c:	701a      	strb	r2, [r3, #0]
				break;
 801137e:	f000 bda0 	b.w	8011ec2 <readCanToStructs+0x1fda>
					canStatus[uc_index][GPS_TIME_PKT].invalid = 1;
 8011382:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011386:	4a17      	ldr	r2, [pc, #92]	; (80113e4 <readCanToStructs+0x14fc>)
 8011388:	f240 4112 	movw	r1, #1042	; 0x412
 801138c:	fb01 f303 	mul.w	r3, r1, r3
 8011390:	4413      	add	r3, r2
 8011392:	f203 2306 	addw	r3, r3, #518	; 0x206
 8011396:	2201      	movs	r2, #1
 8011398:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo++;
 801139a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801139e:	4911      	ldr	r1, [pc, #68]	; (80113e4 <readCanToStructs+0x14fc>)
 80113a0:	f240 4212 	movw	r2, #1042	; 0x412
 80113a4:	fb03 f202 	mul.w	r2, r3, r2
 80113a8:	440a      	add	r2, r1
 80113aa:	f202 2207 	addw	r2, r2, #519	; 0x207
 80113ae:	7812      	ldrb	r2, [r2, #0]
 80113b0:	3201      	adds	r2, #1
 80113b2:	b2d0      	uxtb	r0, r2
 80113b4:	4a0b      	ldr	r2, [pc, #44]	; (80113e4 <readCanToStructs+0x14fc>)
 80113b6:	f240 4112 	movw	r1, #1042	; 0x412
 80113ba:	fb01 f303 	mul.w	r3, r1, r3
 80113be:	4413      	add	r3, r2
 80113c0:	f203 2307 	addw	r3, r3, #519	; 0x207
 80113c4:	4602      	mov	r2, r0
 80113c6:	701a      	strb	r2, [r3, #0]
				break;
 80113c8:	f000 bd7b 	b.w	8011ec2 <readCanToStructs+0x1fda>
 80113cc:	20000645 	.word	0x20000645
 80113d0:	20002030 	.word	0x20002030
 80113d4:	20000304 	.word	0x20000304
 80113d8:	08026be0 	.word	0x08026be0
 80113dc:	20001f54 	.word	0x20001f54
 80113e0:	20000108 	.word	0x20000108
 80113e4:	2000523c 	.word	0x2000523c
 80113e8:	20005a60 	.word	0x20005a60
 80113ec:	200027e4 	.word	0x200027e4
 80113f0:	08026a1c 	.word	0x08026a1c
 80113f4:	200027dc 	.word	0x200027dc
 80113f8:	08026a38 	.word	0x08026a38
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 80113fc:	4bc5      	ldr	r3, [pc, #788]	; (8011714 <readCanToStructs+0x182c>)
 80113fe:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8011400:	4bc5      	ldr	r3, [pc, #788]	; (8011718 <readCanToStructs+0x1830>)
 8011402:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011406:	885b      	ldrh	r3, [r3, #2]
 8011408:	4ac3      	ldr	r2, [pc, #780]	; (8011718 <readCanToStructs+0x1830>)
 801140a:	011b      	lsls	r3, r3, #4
 801140c:	4413      	add	r3, r2
 801140e:	3304      	adds	r3, #4
 8011410:	781b      	ldrb	r3, [r3, #0]
 8011412:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8011416:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801141a:	2b00      	cmp	r3, #0
 801141c:	d110      	bne.n	8011440 <readCanToStructs+0x1558>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 801141e:	2206      	movs	r2, #6
 8011420:	2100      	movs	r1, #0
 8011422:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011424:	f010 ffd6 	bl	80223d4 <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 8011428:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801142c:	4abb      	ldr	r2, [pc, #748]	; (801171c <readCanToStructs+0x1834>)
 801142e:	f240 4112 	movw	r1, #1042	; 0x412
 8011432:	fb01 f303 	mul.w	r3, r1, r3
 8011436:	4413      	add	r3, r2
 8011438:	f203 2313 	addw	r3, r3, #531	; 0x213
 801143c:	2200      	movs	r2, #0
 801143e:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS2_TIME_PKT].expSeqNo)
 8011440:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011444:	4ab5      	ldr	r2, [pc, #724]	; (801171c <readCanToStructs+0x1834>)
 8011446:	f240 4112 	movw	r1, #1042	; 0x412
 801144a:	fb01 f303 	mul.w	r3, r1, r3
 801144e:	4413      	add	r3, r2
 8011450:	f203 2313 	addw	r3, r3, #531	; 0x213
 8011454:	781b      	ldrb	r3, [r3, #0]
 8011456:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801145a:	429a      	cmp	r2, r3
 801145c:	d015      	beq.n	801148a <readCanToStructs+0x15a2>
					printf("GPS2 Packet Seq no MisMatch\n");
 801145e:	48b0      	ldr	r0, [pc, #704]	; (8011720 <readCanToStructs+0x1838>)
 8011460:	f011 f93c 	bl	80226dc <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8011464:	2206      	movs	r2, #6
 8011466:	2100      	movs	r1, #0
 8011468:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801146a:	f010 ffb3 	bl	80223d4 <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 801146e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011472:	4aaa      	ldr	r2, [pc, #680]	; (801171c <readCanToStructs+0x1834>)
 8011474:	f240 4112 	movw	r1, #1042	; 0x412
 8011478:	fb01 f303 	mul.w	r3, r1, r3
 801147c:	4413      	add	r3, r2
 801147e:	f203 2313 	addw	r3, r3, #531	; 0x213
 8011482:	2200      	movs	r2, #0
 8011484:	701a      	strb	r2, [r3, #0]
					break;
 8011486:	f000 bd1c 	b.w	8011ec2 <readCanToStructs+0x1fda>
				uc_pp_charPtr += (7 * uc_seqNo);
 801148a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801148e:	4613      	mov	r3, r2
 8011490:	00db      	lsls	r3, r3, #3
 8011492:	1a9b      	subs	r3, r3, r2
 8011494:	461a      	mov	r2, r3
 8011496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011498:	4413      	add	r3, r2
 801149a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801149c:	2301      	movs	r3, #1
 801149e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80114a2:	e016      	b.n	80114d2 <readCanToStructs+0x15ea>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80114a4:	4b9c      	ldr	r3, [pc, #624]	; (8011718 <readCanToStructs+0x1830>)
 80114a6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80114aa:	885b      	ldrh	r3, [r3, #2]
 80114ac:	461a      	mov	r2, r3
 80114ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80114b2:	4999      	ldr	r1, [pc, #612]	; (8011718 <readCanToStructs+0x1830>)
 80114b4:	0112      	lsls	r2, r2, #4
 80114b6:	440a      	add	r2, r1
 80114b8:	4413      	add	r3, r2
 80114ba:	3304      	adds	r3, #4
 80114bc:	781a      	ldrb	r2, [r3, #0]
 80114be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114c0:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80114c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114c4:	3301      	adds	r3, #1
 80114c6:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80114c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80114cc:	3301      	adds	r3, #1
 80114ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80114d2:	4b91      	ldr	r3, [pc, #580]	; (8011718 <readCanToStructs+0x1830>)
 80114d4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80114d8:	885b      	ldrh	r3, [r3, #2]
 80114da:	4a8f      	ldr	r2, [pc, #572]	; (8011718 <readCanToStructs+0x1830>)
 80114dc:	011b      	lsls	r3, r3, #4
 80114de:	4413      	add	r3, r2
 80114e0:	330c      	adds	r3, #12
 80114e2:	781b      	ldrb	r3, [r3, #0]
 80114e4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80114e8:	429a      	cmp	r2, r3
 80114ea:	d3db      	bcc.n	80114a4 <readCanToStructs+0x15bc>
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 80114ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80114f0:	4a8a      	ldr	r2, [pc, #552]	; (801171c <readCanToStructs+0x1834>)
 80114f2:	f240 4112 	movw	r1, #1042	; 0x412
 80114f6:	fb01 f303 	mul.w	r3, r1, r3
 80114fa:	4413      	add	r3, r2
 80114fc:	f203 2313 	addw	r3, r3, #531	; 0x213
 8011500:	781b      	ldrb	r3, [r3, #0]
 8011502:	461a      	mov	r2, r3
 8011504:	4613      	mov	r3, r2
 8011506:	00db      	lsls	r3, r3, #3
 8011508:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 801150a:	4b83      	ldr	r3, [pc, #524]	; (8011718 <readCanToStructs+0x1830>)
 801150c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011510:	885b      	ldrh	r3, [r3, #2]
 8011512:	4981      	ldr	r1, [pc, #516]	; (8011718 <readCanToStructs+0x1830>)
 8011514:	011b      	lsls	r3, r3, #4
 8011516:	440b      	add	r3, r1
 8011518:	330c      	adds	r3, #12
 801151a:	781b      	ldrb	r3, [r3, #0]
 801151c:	3b01      	subs	r3, #1
 801151e:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 8011520:	2b05      	cmp	r3, #5
 8011522:	d91c      	bls.n	801155e <readCanToStructs+0x1676>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 8011524:	4b7f      	ldr	r3, [pc, #508]	; (8011724 <readCanToStructs+0x183c>)
 8011526:	4a7b      	ldr	r2, [pc, #492]	; (8011714 <readCanToStructs+0x182c>)
 8011528:	6811      	ldr	r1, [r2, #0]
 801152a:	6019      	str	r1, [r3, #0]
 801152c:	8892      	ldrh	r2, [r2, #4]
 801152e:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 8011530:	4b7d      	ldr	r3, [pc, #500]	; (8011728 <readCanToStructs+0x1840>)
 8011532:	781b      	ldrb	r3, [r3, #0]
 8011534:	2b01      	cmp	r3, #1
 8011536:	d102      	bne.n	801153e <readCanToStructs+0x1656>
						printf("GPS2_PACKET_RECEIVED\n");
 8011538:	487c      	ldr	r0, [pc, #496]	; (801172c <readCanToStructs+0x1844>)
 801153a:	f011 f8cf 	bl	80226dc <puts>
					Write_RTC();
 801153e:	f7f9 fd83 	bl	800b048 <Write_RTC>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 8011542:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011546:	4a75      	ldr	r2, [pc, #468]	; (801171c <readCanToStructs+0x1834>)
 8011548:	f240 4112 	movw	r1, #1042	; 0x412
 801154c:	fb01 f303 	mul.w	r3, r1, r3
 8011550:	4413      	add	r3, r2
 8011552:	f203 2313 	addw	r3, r3, #531	; 0x213
 8011556:	2200      	movs	r2, #0
 8011558:	701a      	strb	r2, [r3, #0]
				break;
 801155a:	f000 bcb2 	b.w	8011ec2 <readCanToStructs+0x1fda>
					canStatus[uc_index][GPS2_TIME_PKT].invalid = 1;
 801155e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011562:	4a6e      	ldr	r2, [pc, #440]	; (801171c <readCanToStructs+0x1834>)
 8011564:	f240 4112 	movw	r1, #1042	; 0x412
 8011568:	fb01 f303 	mul.w	r3, r1, r3
 801156c:	4413      	add	r3, r2
 801156e:	f203 2312 	addw	r3, r3, #530	; 0x212
 8011572:	2201      	movs	r2, #1
 8011574:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo++;
 8011576:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801157a:	4968      	ldr	r1, [pc, #416]	; (801171c <readCanToStructs+0x1834>)
 801157c:	f240 4212 	movw	r2, #1042	; 0x412
 8011580:	fb03 f202 	mul.w	r2, r3, r2
 8011584:	440a      	add	r2, r1
 8011586:	f202 2213 	addw	r2, r2, #531	; 0x213
 801158a:	7812      	ldrb	r2, [r2, #0]
 801158c:	3201      	adds	r2, #1
 801158e:	b2d0      	uxtb	r0, r2
 8011590:	4a62      	ldr	r2, [pc, #392]	; (801171c <readCanToStructs+0x1834>)
 8011592:	f240 4112 	movw	r1, #1042	; 0x412
 8011596:	fb01 f303 	mul.w	r3, r1, r3
 801159a:	4413      	add	r3, r2
 801159c:	f203 2313 	addw	r3, r3, #531	; 0x213
 80115a0:	4602      	mov	r2, r0
 80115a2:	701a      	strb	r2, [r3, #0]
				break;
 80115a4:	f000 bc8d 	b.w	8011ec2 <readCanToStructs+0x1fda>
				uc_pp_charPtr = (uint8_t *)&Temp_Siemens_self_sharing_st;
 80115a8:	4b61      	ldr	r3, [pc, #388]	; (8011730 <readCanToStructs+0x1848>)
 80115aa:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80115ac:	4b5a      	ldr	r3, [pc, #360]	; (8011718 <readCanToStructs+0x1830>)
 80115ae:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80115b2:	885b      	ldrh	r3, [r3, #2]
 80115b4:	4a58      	ldr	r2, [pc, #352]	; (8011718 <readCanToStructs+0x1830>)
 80115b6:	011b      	lsls	r3, r3, #4
 80115b8:	4413      	add	r3, r2
 80115ba:	3304      	adds	r3, #4
 80115bc:	781b      	ldrb	r3, [r3, #0]
 80115be:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 80115c2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d110      	bne.n	80115ec <readCanToStructs+0x1704>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_SELF_SHARING_t));
 80115ca:	2204      	movs	r2, #4
 80115cc:	2100      	movs	r1, #0
 80115ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80115d0:	f010 ff00 	bl	80223d4 <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 80115d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80115d8:	4a50      	ldr	r2, [pc, #320]	; (801171c <readCanToStructs+0x1834>)
 80115da:	f240 4112 	movw	r1, #1042	; 0x412
 80115de:	fb01 f303 	mul.w	r3, r1, r3
 80115e2:	4413      	add	r3, r2
 80115e4:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80115e8:	2200      	movs	r2, #0
 80115ea:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo)
 80115ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80115f0:	4a4a      	ldr	r2, [pc, #296]	; (801171c <readCanToStructs+0x1834>)
 80115f2:	f240 4112 	movw	r1, #1042	; 0x412
 80115f6:	fb01 f303 	mul.w	r3, r1, r3
 80115fa:	4413      	add	r3, r2
 80115fc:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8011600:	781b      	ldrb	r3, [r3, #0]
 8011602:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011606:	429a      	cmp	r2, r3
 8011608:	d015      	beq.n	8011636 <readCanToStructs+0x174e>
					printf("EI_1_SELF_SHARING Seq no MisMatch\n");
 801160a:	484a      	ldr	r0, [pc, #296]	; (8011734 <readCanToStructs+0x184c>)
 801160c:	f011 f866 	bl	80226dc <puts>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_SELF_SHARING_t));
 8011610:	2204      	movs	r2, #4
 8011612:	2100      	movs	r1, #0
 8011614:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011616:	f010 fedd 	bl	80223d4 <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 801161a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801161e:	4a3f      	ldr	r2, [pc, #252]	; (801171c <readCanToStructs+0x1834>)
 8011620:	f240 4112 	movw	r1, #1042	; 0x412
 8011624:	fb01 f303 	mul.w	r3, r1, r3
 8011628:	4413      	add	r3, r2
 801162a:	f203 4303 	addw	r3, r3, #1027	; 0x403
 801162e:	2200      	movs	r2, #0
 8011630:	701a      	strb	r2, [r3, #0]
					break;
 8011632:	f000 bc46 	b.w	8011ec2 <readCanToStructs+0x1fda>
				uc_pp_charPtr += (7 * uc_seqNo);
 8011636:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801163a:	4613      	mov	r3, r2
 801163c:	00db      	lsls	r3, r3, #3
 801163e:	1a9b      	subs	r3, r3, r2
 8011640:	461a      	mov	r2, r3
 8011642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011644:	4413      	add	r3, r2
 8011646:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011648:	2301      	movs	r3, #1
 801164a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801164e:	e016      	b.n	801167e <readCanToStructs+0x1796>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8011650:	4b31      	ldr	r3, [pc, #196]	; (8011718 <readCanToStructs+0x1830>)
 8011652:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011656:	885b      	ldrh	r3, [r3, #2]
 8011658:	461a      	mov	r2, r3
 801165a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801165e:	492e      	ldr	r1, [pc, #184]	; (8011718 <readCanToStructs+0x1830>)
 8011660:	0112      	lsls	r2, r2, #4
 8011662:	440a      	add	r2, r1
 8011664:	4413      	add	r3, r2
 8011666:	3304      	adds	r3, #4
 8011668:	781a      	ldrb	r2, [r3, #0]
 801166a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801166c:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801166e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011670:	3301      	adds	r3, #1
 8011672:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011674:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011678:	3301      	adds	r3, #1
 801167a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801167e:	4b26      	ldr	r3, [pc, #152]	; (8011718 <readCanToStructs+0x1830>)
 8011680:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011684:	885b      	ldrh	r3, [r3, #2]
 8011686:	4a24      	ldr	r2, [pc, #144]	; (8011718 <readCanToStructs+0x1830>)
 8011688:	011b      	lsls	r3, r3, #4
 801168a:	4413      	add	r3, r2
 801168c:	330c      	adds	r3, #12
 801168e:	781b      	ldrb	r3, [r3, #0]
 8011690:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011694:	429a      	cmp	r2, r3
 8011696:	d3db      	bcc.n	8011650 <readCanToStructs+0x1768>
				if((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7)
 8011698:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801169c:	4a1f      	ldr	r2, [pc, #124]	; (801171c <readCanToStructs+0x1834>)
 801169e:	f240 4112 	movw	r1, #1042	; 0x412
 80116a2:	fb01 f303 	mul.w	r3, r1, r3
 80116a6:	4413      	add	r3, r2
 80116a8:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80116ac:	781b      	ldrb	r3, [r3, #0]
 80116ae:	461a      	mov	r2, r3
 80116b0:	4613      	mov	r3, r2
 80116b2:	00db      	lsls	r3, r3, #3
 80116b4:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SIEMENS_SELF_SHARING_t))
 80116b6:	4b18      	ldr	r3, [pc, #96]	; (8011718 <readCanToStructs+0x1830>)
 80116b8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80116bc:	885b      	ldrh	r3, [r3, #2]
 80116be:	4916      	ldr	r1, [pc, #88]	; (8011718 <readCanToStructs+0x1830>)
 80116c0:	011b      	lsls	r3, r3, #4
 80116c2:	440b      	add	r3, r1
 80116c4:	330c      	adds	r3, #12
 80116c6:	781b      	ldrb	r3, [r3, #0]
 80116c8:	3b01      	subs	r3, #1
 80116ca:	4413      	add	r3, r2
				if((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7)
 80116cc:	2b03      	cmp	r3, #3
 80116ce:	d939      	bls.n	8011744 <readCanToStructs+0x185c>
 80116d0:	4b17      	ldr	r3, [pc, #92]	; (8011730 <readCanToStructs+0x1848>)
 80116d2:	681b      	ldr	r3, [r3, #0]
 80116d4:	461a      	mov	r2, r3
					memcpy(&Rx_Siemens_self_sharing_st,&Temp_Siemens_self_sharing_st,sizeof(SIEMENS_SELF_SHARING_t));
 80116d6:	4b18      	ldr	r3, [pc, #96]	; (8011738 <readCanToStructs+0x1850>)
 80116d8:	601a      	str	r2, [r3, #0]
					if(Debug_flag == 1)
 80116da:	4b13      	ldr	r3, [pc, #76]	; (8011728 <readCanToStructs+0x1840>)
 80116dc:	781b      	ldrb	r3, [r3, #0]
 80116de:	2b01      	cmp	r3, #1
 80116e0:	d102      	bne.n	80116e8 <readCanToStructs+0x1800>
						printf("O_Info1_RCV\n");
 80116e2:	4816      	ldr	r0, [pc, #88]	; (801173c <readCanToStructs+0x1854>)
 80116e4:	f010 fffa 	bl	80226dc <puts>
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 80116e8:	4b15      	ldr	r3, [pc, #84]	; (8011740 <readCanToStructs+0x1858>)
 80116ea:	2201      	movs	r2, #1
 80116ec:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 80116ee:	f003 ff4f 	bl	8015590 <HAL_GetTick>
 80116f2:	4603      	mov	r3, r0
 80116f4:	4a12      	ldr	r2, [pc, #72]	; (8011740 <readCanToStructs+0x1858>)
 80116f6:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 80116f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80116fc:	4a07      	ldr	r2, [pc, #28]	; (801171c <readCanToStructs+0x1834>)
 80116fe:	f240 4112 	movw	r1, #1042	; 0x412
 8011702:	fb01 f303 	mul.w	r3, r1, r3
 8011706:	4413      	add	r3, r2
 8011708:	f203 4303 	addw	r3, r3, #1027	; 0x403
 801170c:	2200      	movs	r2, #0
 801170e:	701a      	strb	r2, [r3, #0]
				break;
 8011710:	e3d7      	b.n	8011ec2 <readCanToStructs+0x1fda>
 8011712:	bf00      	nop
 8011714:	200027e4 	.word	0x200027e4
 8011718:	20005a60 	.word	0x20005a60
 801171c:	2000523c 	.word	0x2000523c
 8011720:	08026a4c 	.word	0x08026a4c
 8011724:	200027dc 	.word	0x200027dc
 8011728:	20000645 	.word	0x20000645
 801172c:	08026a68 	.word	0x08026a68
 8011730:	2000348c 	.word	0x2000348c
 8011734:	08026a80 	.word	0x08026a80
 8011738:	20003488 	.word	0x20003488
 801173c:	08026bf4 	.word	0x08026bf4
 8011740:	20003490 	.word	0x20003490
					canStatus[uc_index][EI_1_SELF_SHARING].invalid = 1;
 8011744:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011748:	4a98      	ldr	r2, [pc, #608]	; (80119ac <readCanToStructs+0x1ac4>)
 801174a:	f240 4112 	movw	r1, #1042	; 0x412
 801174e:	fb01 f303 	mul.w	r3, r1, r3
 8011752:	4413      	add	r3, r2
 8011754:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011758:	2201      	movs	r2, #1
 801175a:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo++;
 801175c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011760:	4992      	ldr	r1, [pc, #584]	; (80119ac <readCanToStructs+0x1ac4>)
 8011762:	f240 4212 	movw	r2, #1042	; 0x412
 8011766:	fb03 f202 	mul.w	r2, r3, r2
 801176a:	440a      	add	r2, r1
 801176c:	f202 4203 	addw	r2, r2, #1027	; 0x403
 8011770:	7812      	ldrb	r2, [r2, #0]
 8011772:	3201      	adds	r2, #1
 8011774:	b2d0      	uxtb	r0, r2
 8011776:	4a8d      	ldr	r2, [pc, #564]	; (80119ac <readCanToStructs+0x1ac4>)
 8011778:	f240 4112 	movw	r1, #1042	; 0x412
 801177c:	fb01 f303 	mul.w	r3, r1, r3
 8011780:	4413      	add	r3, r2
 8011782:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8011786:	4602      	mov	r2, r0
 8011788:	701a      	strb	r2, [r3, #0]
				break;
 801178a:	e39a      	b.n	8011ec2 <readCanToStructs+0x1fda>
				uc_pp_charPtr = (uint8_t *)&Temp_Siemens_self_sharing_st;
 801178c:	4b88      	ldr	r3, [pc, #544]	; (80119b0 <readCanToStructs+0x1ac8>)
 801178e:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8011790:	4b88      	ldr	r3, [pc, #544]	; (80119b4 <readCanToStructs+0x1acc>)
 8011792:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011796:	885b      	ldrh	r3, [r3, #2]
 8011798:	4a86      	ldr	r2, [pc, #536]	; (80119b4 <readCanToStructs+0x1acc>)
 801179a:	011b      	lsls	r3, r3, #4
 801179c:	4413      	add	r3, r2
 801179e:	3304      	adds	r3, #4
 80117a0:	781b      	ldrb	r3, [r3, #0]
 80117a2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 80117a6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d110      	bne.n	80117d0 <readCanToStructs+0x18e8>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_SELF_SHARING_t));
 80117ae:	2204      	movs	r2, #4
 80117b0:	2100      	movs	r1, #0
 80117b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80117b4:	f010 fe0e 	bl	80223d4 <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 80117b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80117bc:	4a7b      	ldr	r2, [pc, #492]	; (80119ac <readCanToStructs+0x1ac4>)
 80117be:	f240 4112 	movw	r1, #1042	; 0x412
 80117c2:	fb01 f303 	mul.w	r3, r1, r3
 80117c6:	4413      	add	r3, r2
 80117c8:	f203 4305 	addw	r3, r3, #1029	; 0x405
 80117cc:	2200      	movs	r2, #0
 80117ce:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo)
 80117d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80117d4:	4a75      	ldr	r2, [pc, #468]	; (80119ac <readCanToStructs+0x1ac4>)
 80117d6:	f240 4112 	movw	r1, #1042	; 0x412
 80117da:	fb01 f303 	mul.w	r3, r1, r3
 80117de:	4413      	add	r3, r2
 80117e0:	f203 4305 	addw	r3, r3, #1029	; 0x405
 80117e4:	781b      	ldrb	r3, [r3, #0]
 80117e6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80117ea:	429a      	cmp	r2, r3
 80117ec:	d014      	beq.n	8011818 <readCanToStructs+0x1930>
					printf("EI_2_SELF_SHARING Seq no MisMatch\n");
 80117ee:	4872      	ldr	r0, [pc, #456]	; (80119b8 <readCanToStructs+0x1ad0>)
 80117f0:	f010 ff74 	bl	80226dc <puts>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_SELF_SHARING_t));
 80117f4:	2204      	movs	r2, #4
 80117f6:	2100      	movs	r1, #0
 80117f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80117fa:	f010 fdeb 	bl	80223d4 <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 80117fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011802:	4a6a      	ldr	r2, [pc, #424]	; (80119ac <readCanToStructs+0x1ac4>)
 8011804:	f240 4112 	movw	r1, #1042	; 0x412
 8011808:	fb01 f303 	mul.w	r3, r1, r3
 801180c:	4413      	add	r3, r2
 801180e:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8011812:	2200      	movs	r2, #0
 8011814:	701a      	strb	r2, [r3, #0]
					break;
 8011816:	e354      	b.n	8011ec2 <readCanToStructs+0x1fda>
				uc_pp_charPtr += (7 * uc_seqNo);
 8011818:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801181c:	4613      	mov	r3, r2
 801181e:	00db      	lsls	r3, r3, #3
 8011820:	1a9b      	subs	r3, r3, r2
 8011822:	461a      	mov	r2, r3
 8011824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011826:	4413      	add	r3, r2
 8011828:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801182a:	2301      	movs	r3, #1
 801182c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011830:	e016      	b.n	8011860 <readCanToStructs+0x1978>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8011832:	4b60      	ldr	r3, [pc, #384]	; (80119b4 <readCanToStructs+0x1acc>)
 8011834:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011838:	885b      	ldrh	r3, [r3, #2]
 801183a:	461a      	mov	r2, r3
 801183c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011840:	495c      	ldr	r1, [pc, #368]	; (80119b4 <readCanToStructs+0x1acc>)
 8011842:	0112      	lsls	r2, r2, #4
 8011844:	440a      	add	r2, r1
 8011846:	4413      	add	r3, r2
 8011848:	3304      	adds	r3, #4
 801184a:	781a      	ldrb	r2, [r3, #0]
 801184c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801184e:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8011850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011852:	3301      	adds	r3, #1
 8011854:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011856:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801185a:	3301      	adds	r3, #1
 801185c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011860:	4b54      	ldr	r3, [pc, #336]	; (80119b4 <readCanToStructs+0x1acc>)
 8011862:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011866:	885b      	ldrh	r3, [r3, #2]
 8011868:	4a52      	ldr	r2, [pc, #328]	; (80119b4 <readCanToStructs+0x1acc>)
 801186a:	011b      	lsls	r3, r3, #4
 801186c:	4413      	add	r3, r2
 801186e:	330c      	adds	r3, #12
 8011870:	781b      	ldrb	r3, [r3, #0]
 8011872:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011876:	429a      	cmp	r2, r3
 8011878:	d3db      	bcc.n	8011832 <readCanToStructs+0x194a>
				if((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7)
 801187a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801187e:	4a4b      	ldr	r2, [pc, #300]	; (80119ac <readCanToStructs+0x1ac4>)
 8011880:	f240 4112 	movw	r1, #1042	; 0x412
 8011884:	fb01 f303 	mul.w	r3, r1, r3
 8011888:	4413      	add	r3, r2
 801188a:	f203 4305 	addw	r3, r3, #1029	; 0x405
 801188e:	781b      	ldrb	r3, [r3, #0]
 8011890:	461a      	mov	r2, r3
 8011892:	4613      	mov	r3, r2
 8011894:	00db      	lsls	r3, r3, #3
 8011896:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SIEMENS_SELF_SHARING_t))
 8011898:	4b46      	ldr	r3, [pc, #280]	; (80119b4 <readCanToStructs+0x1acc>)
 801189a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801189e:	885b      	ldrh	r3, [r3, #2]
 80118a0:	4944      	ldr	r1, [pc, #272]	; (80119b4 <readCanToStructs+0x1acc>)
 80118a2:	011b      	lsls	r3, r3, #4
 80118a4:	440b      	add	r3, r1
 80118a6:	330c      	adds	r3, #12
 80118a8:	781b      	ldrb	r3, [r3, #0]
 80118aa:	3b01      	subs	r3, #1
 80118ac:	4413      	add	r3, r2
				if((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7)
 80118ae:	2b03      	cmp	r3, #3
 80118b0:	d920      	bls.n	80118f4 <readCanToStructs+0x1a0c>
 80118b2:	4b3f      	ldr	r3, [pc, #252]	; (80119b0 <readCanToStructs+0x1ac8>)
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	461a      	mov	r2, r3
					memcpy(&Rx_Siemens_self_sharing_st,&Temp_Siemens_self_sharing_st,sizeof(SIEMENS_SELF_SHARING_t));
 80118b8:	4b40      	ldr	r3, [pc, #256]	; (80119bc <readCanToStructs+0x1ad4>)
 80118ba:	601a      	str	r2, [r3, #0]
					if(Debug_flag == 1)
 80118bc:	4b40      	ldr	r3, [pc, #256]	; (80119c0 <readCanToStructs+0x1ad8>)
 80118be:	781b      	ldrb	r3, [r3, #0]
 80118c0:	2b01      	cmp	r3, #1
 80118c2:	d102      	bne.n	80118ca <readCanToStructs+0x19e2>
						printf("O_Info2_RCV\n");
 80118c4:	483f      	ldr	r0, [pc, #252]	; (80119c4 <readCanToStructs+0x1adc>)
 80118c6:	f010 ff09 	bl	80226dc <puts>
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 80118ca:	4b3f      	ldr	r3, [pc, #252]	; (80119c8 <readCanToStructs+0x1ae0>)
 80118cc:	2201      	movs	r2, #1
 80118ce:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 80118d0:	f003 fe5e 	bl	8015590 <HAL_GetTick>
 80118d4:	4603      	mov	r3, r0
 80118d6:	4a3c      	ldr	r2, [pc, #240]	; (80119c8 <readCanToStructs+0x1ae0>)
 80118d8:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 80118da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80118de:	4a33      	ldr	r2, [pc, #204]	; (80119ac <readCanToStructs+0x1ac4>)
 80118e0:	f240 4112 	movw	r1, #1042	; 0x412
 80118e4:	fb01 f303 	mul.w	r3, r1, r3
 80118e8:	4413      	add	r3, r2
 80118ea:	f203 4305 	addw	r3, r3, #1029	; 0x405
 80118ee:	2200      	movs	r2, #0
 80118f0:	701a      	strb	r2, [r3, #0]
				break;
 80118f2:	e2e6      	b.n	8011ec2 <readCanToStructs+0x1fda>
					canStatus[uc_index][EI_2_SELF_SHARING].invalid = 1;
 80118f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80118f8:	4a2c      	ldr	r2, [pc, #176]	; (80119ac <readCanToStructs+0x1ac4>)
 80118fa:	f240 4112 	movw	r1, #1042	; 0x412
 80118fe:	fb01 f303 	mul.w	r3, r1, r3
 8011902:	4413      	add	r3, r2
 8011904:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8011908:	2201      	movs	r2, #1
 801190a:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo++;
 801190c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011910:	4926      	ldr	r1, [pc, #152]	; (80119ac <readCanToStructs+0x1ac4>)
 8011912:	f240 4212 	movw	r2, #1042	; 0x412
 8011916:	fb03 f202 	mul.w	r2, r3, r2
 801191a:	440a      	add	r2, r1
 801191c:	f202 4205 	addw	r2, r2, #1029	; 0x405
 8011920:	7812      	ldrb	r2, [r2, #0]
 8011922:	3201      	adds	r2, #1
 8011924:	b2d0      	uxtb	r0, r2
 8011926:	4a21      	ldr	r2, [pc, #132]	; (80119ac <readCanToStructs+0x1ac4>)
 8011928:	f240 4112 	movw	r1, #1042	; 0x412
 801192c:	fb01 f303 	mul.w	r3, r1, r3
 8011930:	4413      	add	r3, r2
 8011932:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8011936:	4602      	mov	r2, r0
 8011938:	701a      	strb	r2, [r3, #0]
				break;
 801193a:	e2c2      	b.n	8011ec2 <readCanToStructs+0x1fda>
				uc_pp_charPtr = (uint8_t *)&TempSiemensRx_OtherRelays_st;
 801193c:	4b23      	ldr	r3, [pc, #140]	; (80119cc <readCanToStructs+0x1ae4>)
 801193e:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8011940:	4b1c      	ldr	r3, [pc, #112]	; (80119b4 <readCanToStructs+0x1acc>)
 8011942:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011946:	885b      	ldrh	r3, [r3, #2]
 8011948:	4a1a      	ldr	r2, [pc, #104]	; (80119b4 <readCanToStructs+0x1acc>)
 801194a:	011b      	lsls	r3, r3, #4
 801194c:	4413      	add	r3, r2
 801194e:	3304      	adds	r3, #4
 8011950:	781b      	ldrb	r3, [r3, #0]
 8011952:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo != 0)
 8011956:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801195a:	2b00      	cmp	r3, #0
 801195c:	d005      	beq.n	801196a <readCanToStructs+0x1a82>
					uc_pp_charPtr = uc_pp_charPtr + DataTraverser;
 801195e:	4b1c      	ldr	r3, [pc, #112]	; (80119d0 <readCanToStructs+0x1ae8>)
 8011960:	881b      	ldrh	r3, [r3, #0]
 8011962:	461a      	mov	r2, r3
 8011964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011966:	4413      	add	r3, r2
 8011968:	633b      	str	r3, [r7, #48]	; 0x30
				if(uc_seqNo==0)
 801196a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801196e:	2b00      	cmp	r3, #0
 8011970:	d117      	bne.n	80119a2 <readCanToStructs+0x1aba>
					memset(uc_pp_charPtr,0,sizeof(VITAL_DATA_SHARING_t));
 8011972:	f44f 7201 	mov.w	r2, #516	; 0x204
 8011976:	2100      	movs	r1, #0
 8011978:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801197a:	f010 fd2b 	bl	80223d4 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 801197e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011982:	4a0a      	ldr	r2, [pc, #40]	; (80119ac <readCanToStructs+0x1ac4>)
 8011984:	f240 4112 	movw	r1, #1042	; 0x412
 8011988:	fb01 f303 	mul.w	r3, r1, r3
 801198c:	4413      	add	r3, r2
 801198e:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8011992:	2200      	movs	r2, #0
 8011994:	701a      	strb	r2, [r3, #0]
					DataTraverser = 0;
 8011996:	4b0e      	ldr	r3, [pc, #56]	; (80119d0 <readCanToStructs+0x1ae8>)
 8011998:	2200      	movs	r2, #0
 801199a:	801a      	strh	r2, [r3, #0]
					DataLength= 0;
 801199c:	4b0d      	ldr	r3, [pc, #52]	; (80119d4 <readCanToStructs+0x1aec>)
 801199e:	2200      	movs	r2, #0
 80119a0:	801a      	strh	r2, [r3, #0]
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80119a2:	2301      	movs	r3, #1
 80119a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80119a8:	e033      	b.n	8011a12 <readCanToStructs+0x1b2a>
 80119aa:	bf00      	nop
 80119ac:	2000523c 	.word	0x2000523c
 80119b0:	2000348c 	.word	0x2000348c
 80119b4:	20005a60 	.word	0x20005a60
 80119b8:	08026ab4 	.word	0x08026ab4
 80119bc:	20003488 	.word	0x20003488
 80119c0:	20000645 	.word	0x20000645
 80119c4:	08026c00 	.word	0x08026c00
 80119c8:	20003490 	.word	0x20003490
 80119cc:	20003ab8 	.word	0x20003ab8
 80119d0:	20009bb8 	.word	0x20009bb8
 80119d4:	20009bba 	.word	0x20009bba
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80119d8:	4ba0      	ldr	r3, [pc, #640]	; (8011c5c <readCanToStructs+0x1d74>)
 80119da:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80119de:	885b      	ldrh	r3, [r3, #2]
 80119e0:	461a      	mov	r2, r3
 80119e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80119e6:	499d      	ldr	r1, [pc, #628]	; (8011c5c <readCanToStructs+0x1d74>)
 80119e8:	0112      	lsls	r2, r2, #4
 80119ea:	440a      	add	r2, r1
 80119ec:	4413      	add	r3, r2
 80119ee:	3304      	adds	r3, #4
 80119f0:	781a      	ldrb	r2, [r3, #0]
 80119f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119f4:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80119f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119f8:	3301      	adds	r3, #1
 80119fa:	633b      	str	r3, [r7, #48]	; 0x30
					DataTraverser++;
 80119fc:	4b98      	ldr	r3, [pc, #608]	; (8011c60 <readCanToStructs+0x1d78>)
 80119fe:	881b      	ldrh	r3, [r3, #0]
 8011a00:	3301      	adds	r3, #1
 8011a02:	b29a      	uxth	r2, r3
 8011a04:	4b96      	ldr	r3, [pc, #600]	; (8011c60 <readCanToStructs+0x1d78>)
 8011a06:	801a      	strh	r2, [r3, #0]
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011a08:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011a0c:	3301      	adds	r3, #1
 8011a0e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011a12:	4b92      	ldr	r3, [pc, #584]	; (8011c5c <readCanToStructs+0x1d74>)
 8011a14:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011a18:	885b      	ldrh	r3, [r3, #2]
 8011a1a:	4a90      	ldr	r2, [pc, #576]	; (8011c5c <readCanToStructs+0x1d74>)
 8011a1c:	011b      	lsls	r3, r3, #4
 8011a1e:	4413      	add	r3, r2
 8011a20:	330c      	adds	r3, #12
 8011a22:	781b      	ldrb	r3, [r3, #0]
 8011a24:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011a28:	429a      	cmp	r2, r3
 8011a2a:	d3d5      	bcc.n	80119d8 <readCanToStructs+0x1af0>
				if(uc_seqNo != canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo)
 8011a2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011a30:	4a8c      	ldr	r2, [pc, #560]	; (8011c64 <readCanToStructs+0x1d7c>)
 8011a32:	f240 4112 	movw	r1, #1042	; 0x412
 8011a36:	fb01 f303 	mul.w	r3, r1, r3
 8011a3a:	4413      	add	r3, r2
 8011a3c:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8011a40:	781b      	ldrb	r3, [r3, #0]
 8011a42:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011a46:	429a      	cmp	r2, r3
 8011a48:	d026      	beq.n	8011a98 <readCanToStructs+0x1bb0>
					printf("EIPC1_RELAYS_2_OTHER Seq no MisMatch:%u:%u\n",uc_seqNo,canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo);
 8011a4a:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8011a4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011a52:	4a84      	ldr	r2, [pc, #528]	; (8011c64 <readCanToStructs+0x1d7c>)
 8011a54:	f240 4012 	movw	r0, #1042	; 0x412
 8011a58:	fb00 f303 	mul.w	r3, r0, r3
 8011a5c:	4413      	add	r3, r2
 8011a5e:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8011a62:	781b      	ldrb	r3, [r3, #0]
 8011a64:	461a      	mov	r2, r3
 8011a66:	4880      	ldr	r0, [pc, #512]	; (8011c68 <readCanToStructs+0x1d80>)
 8011a68:	f010 fd9c 	bl	80225a4 <iprintf>
					memset(uc_pp_charPtr,0,sizeof(VITAL_DATA_SHARING_t));
 8011a6c:	f44f 7201 	mov.w	r2, #516	; 0x204
 8011a70:	2100      	movs	r1, #0
 8011a72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011a74:	f010 fcae 	bl	80223d4 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8011a78:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011a7c:	4a79      	ldr	r2, [pc, #484]	; (8011c64 <readCanToStructs+0x1d7c>)
 8011a7e:	f240 4112 	movw	r1, #1042	; 0x412
 8011a82:	fb01 f303 	mul.w	r3, r1, r3
 8011a86:	4413      	add	r3, r2
 8011a88:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8011a8c:	2200      	movs	r2, #0
 8011a8e:	701a      	strb	r2, [r3, #0]
					DataTraverser = 0;
 8011a90:	4b73      	ldr	r3, [pc, #460]	; (8011c60 <readCanToStructs+0x1d78>)
 8011a92:	2200      	movs	r2, #0
 8011a94:	801a      	strh	r2, [r3, #0]
					break;
 8011a96:	e214      	b.n	8011ec2 <readCanToStructs+0x1fda>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo++;
 8011a98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011a9c:	4971      	ldr	r1, [pc, #452]	; (8011c64 <readCanToStructs+0x1d7c>)
 8011a9e:	f240 4212 	movw	r2, #1042	; 0x412
 8011aa2:	fb03 f202 	mul.w	r2, r3, r2
 8011aa6:	440a      	add	r2, r1
 8011aa8:	f202 420f 	addw	r2, r2, #1039	; 0x40f
 8011aac:	7812      	ldrb	r2, [r2, #0]
 8011aae:	3201      	adds	r2, #1
 8011ab0:	b2d0      	uxtb	r0, r2
 8011ab2:	4a6c      	ldr	r2, [pc, #432]	; (8011c64 <readCanToStructs+0x1d7c>)
 8011ab4:	f240 4112 	movw	r1, #1042	; 0x412
 8011ab8:	fb01 f303 	mul.w	r3, r1, r3
 8011abc:	4413      	add	r3, r2
 8011abe:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8011ac2:	4602      	mov	r2, r0
 8011ac4:	701a      	strb	r2, [r3, #0]
				DataLength = ( (TempSiemensRx_OtherRelays_st.NoofDataBytes) + ((sizeof(TempSiemensRx_OtherRelays_st.NoofDataBytes))+ (sizeof(TempSiemensRx_OtherRelays_st.VitalCRC))));
 8011ac6:	4b69      	ldr	r3, [pc, #420]	; (8011c6c <readCanToStructs+0x1d84>)
 8011ac8:	881b      	ldrh	r3, [r3, #0]
 8011aca:	3304      	adds	r3, #4
 8011acc:	b29a      	uxth	r2, r3
 8011ace:	4b68      	ldr	r3, [pc, #416]	; (8011c70 <readCanToStructs+0x1d88>)
 8011ad0:	801a      	strh	r2, [r3, #0]
				if(DataTraverser >= DataLength)
 8011ad2:	4b63      	ldr	r3, [pc, #396]	; (8011c60 <readCanToStructs+0x1d78>)
 8011ad4:	881a      	ldrh	r2, [r3, #0]
 8011ad6:	4b66      	ldr	r3, [pc, #408]	; (8011c70 <readCanToStructs+0x1d88>)
 8011ad8:	881b      	ldrh	r3, [r3, #0]
 8011ada:	429a      	cmp	r2, r3
 8011adc:	f0c0 81ee 	bcc.w	8011ebc <readCanToStructs+0x1fd4>
					printf("EI1 Relay Info Received\n");
 8011ae0:	4864      	ldr	r0, [pc, #400]	; (8011c74 <readCanToStructs+0x1d8c>)
 8011ae2:	f010 fdfb 	bl	80226dc <puts>
					memcpy(&Siemens_OtherRelays_st,&TempSiemensRx_OtherRelays_st,sizeof(TempSiemensRx_OtherRelays_st));
 8011ae6:	4a64      	ldr	r2, [pc, #400]	; (8011c78 <readCanToStructs+0x1d90>)
 8011ae8:	4b60      	ldr	r3, [pc, #384]	; (8011c6c <readCanToStructs+0x1d84>)
 8011aea:	4610      	mov	r0, r2
 8011aec:	4619      	mov	r1, r3
 8011aee:	f44f 7301 	mov.w	r3, #516	; 0x204
 8011af2:	461a      	mov	r2, r3
 8011af4:	f010 fc46 	bl	8022384 <memcpy>
					DataTraverser = 0;
 8011af8:	4b59      	ldr	r3, [pc, #356]	; (8011c60 <readCanToStructs+0x1d78>)
 8011afa:	2200      	movs	r2, #0
 8011afc:	801a      	strh	r2, [r3, #0]
					DataLength = 0;
 8011afe:	4b5c      	ldr	r3, [pc, #368]	; (8011c70 <readCanToStructs+0x1d88>)
 8011b00:	2200      	movs	r2, #0
 8011b02:	801a      	strh	r2, [r3, #0]
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 8011b04:	4b5d      	ldr	r3, [pc, #372]	; (8011c7c <readCanToStructs+0x1d94>)
 8011b06:	2201      	movs	r2, #1
 8011b08:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 8011b0a:	f003 fd41 	bl	8015590 <HAL_GetTick>
 8011b0e:	4603      	mov	r3, r0
 8011b10:	4a5a      	ldr	r2, [pc, #360]	; (8011c7c <readCanToStructs+0x1d94>)
 8011b12:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8011b14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011b18:	4a52      	ldr	r2, [pc, #328]	; (8011c64 <readCanToStructs+0x1d7c>)
 8011b1a:	f240 4112 	movw	r1, #1042	; 0x412
 8011b1e:	fb01 f303 	mul.w	r3, r1, r3
 8011b22:	4413      	add	r3, r2
 8011b24:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8011b28:	2200      	movs	r2, #0
 8011b2a:	701a      	strb	r2, [r3, #0]
				break;
 8011b2c:	e1c6      	b.n	8011ebc <readCanToStructs+0x1fd4>
				uc_pp_charPtr = (uint8_t *)&TempSiemensRx_OtherRelays_st;
 8011b2e:	4b4f      	ldr	r3, [pc, #316]	; (8011c6c <readCanToStructs+0x1d84>)
 8011b30:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8011b32:	4b4a      	ldr	r3, [pc, #296]	; (8011c5c <readCanToStructs+0x1d74>)
 8011b34:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011b38:	885b      	ldrh	r3, [r3, #2]
 8011b3a:	4a48      	ldr	r2, [pc, #288]	; (8011c5c <readCanToStructs+0x1d74>)
 8011b3c:	011b      	lsls	r3, r3, #4
 8011b3e:	4413      	add	r3, r2
 8011b40:	3304      	adds	r3, #4
 8011b42:	781b      	ldrb	r3, [r3, #0]
 8011b44:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo != 0)
 8011b48:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d005      	beq.n	8011b5c <readCanToStructs+0x1c74>
					uc_pp_charPtr = uc_pp_charPtr + DataTraverser;
 8011b50:	4b43      	ldr	r3, [pc, #268]	; (8011c60 <readCanToStructs+0x1d78>)
 8011b52:	881b      	ldrh	r3, [r3, #0]
 8011b54:	461a      	mov	r2, r3
 8011b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b58:	4413      	add	r3, r2
 8011b5a:	633b      	str	r3, [r7, #48]	; 0x30
				if(uc_seqNo==0)
 8011b5c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d117      	bne.n	8011b94 <readCanToStructs+0x1cac>
					memset(uc_pp_charPtr,0,sizeof(VITAL_DATA_SHARING_t));
 8011b64:	f44f 7201 	mov.w	r2, #516	; 0x204
 8011b68:	2100      	movs	r1, #0
 8011b6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011b6c:	f010 fc32 	bl	80223d4 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8011b70:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011b74:	4a3b      	ldr	r2, [pc, #236]	; (8011c64 <readCanToStructs+0x1d7c>)
 8011b76:	f240 4112 	movw	r1, #1042	; 0x412
 8011b7a:	fb01 f303 	mul.w	r3, r1, r3
 8011b7e:	4413      	add	r3, r2
 8011b80:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8011b84:	2200      	movs	r2, #0
 8011b86:	701a      	strb	r2, [r3, #0]
					DataTraverser = 0;
 8011b88:	4b35      	ldr	r3, [pc, #212]	; (8011c60 <readCanToStructs+0x1d78>)
 8011b8a:	2200      	movs	r2, #0
 8011b8c:	801a      	strh	r2, [r3, #0]
					DataLength= 0;
 8011b8e:	4b38      	ldr	r3, [pc, #224]	; (8011c70 <readCanToStructs+0x1d88>)
 8011b90:	2200      	movs	r2, #0
 8011b92:	801a      	strh	r2, [r3, #0]
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011b94:	2301      	movs	r3, #1
 8011b96:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011b9a:	e01c      	b.n	8011bd6 <readCanToStructs+0x1cee>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8011b9c:	4b2f      	ldr	r3, [pc, #188]	; (8011c5c <readCanToStructs+0x1d74>)
 8011b9e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011ba2:	885b      	ldrh	r3, [r3, #2]
 8011ba4:	461a      	mov	r2, r3
 8011ba6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011baa:	492c      	ldr	r1, [pc, #176]	; (8011c5c <readCanToStructs+0x1d74>)
 8011bac:	0112      	lsls	r2, r2, #4
 8011bae:	440a      	add	r2, r1
 8011bb0:	4413      	add	r3, r2
 8011bb2:	3304      	adds	r3, #4
 8011bb4:	781a      	ldrb	r2, [r3, #0]
 8011bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bb8:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8011bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bbc:	3301      	adds	r3, #1
 8011bbe:	633b      	str	r3, [r7, #48]	; 0x30
					DataTraverser++;
 8011bc0:	4b27      	ldr	r3, [pc, #156]	; (8011c60 <readCanToStructs+0x1d78>)
 8011bc2:	881b      	ldrh	r3, [r3, #0]
 8011bc4:	3301      	adds	r3, #1
 8011bc6:	b29a      	uxth	r2, r3
 8011bc8:	4b25      	ldr	r3, [pc, #148]	; (8011c60 <readCanToStructs+0x1d78>)
 8011bca:	801a      	strh	r2, [r3, #0]
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011bcc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011bd0:	3301      	adds	r3, #1
 8011bd2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011bd6:	4b21      	ldr	r3, [pc, #132]	; (8011c5c <readCanToStructs+0x1d74>)
 8011bd8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011bdc:	885b      	ldrh	r3, [r3, #2]
 8011bde:	4a1f      	ldr	r2, [pc, #124]	; (8011c5c <readCanToStructs+0x1d74>)
 8011be0:	011b      	lsls	r3, r3, #4
 8011be2:	4413      	add	r3, r2
 8011be4:	330c      	adds	r3, #12
 8011be6:	781b      	ldrb	r3, [r3, #0]
 8011be8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011bec:	429a      	cmp	r2, r3
 8011bee:	d3d5      	bcc.n	8011b9c <readCanToStructs+0x1cb4>
				if(uc_seqNo != canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo)
 8011bf0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011bf4:	4a1b      	ldr	r2, [pc, #108]	; (8011c64 <readCanToStructs+0x1d7c>)
 8011bf6:	f240 4112 	movw	r1, #1042	; 0x412
 8011bfa:	fb01 f303 	mul.w	r3, r1, r3
 8011bfe:	4413      	add	r3, r2
 8011c00:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8011c04:	781b      	ldrb	r3, [r3, #0]
 8011c06:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011c0a:	429a      	cmp	r2, r3
 8011c0c:	d03a      	beq.n	8011c84 <readCanToStructs+0x1d9c>
					printf("EIPC2_RELAYS_2_OTHER Seq no MisMatch:%u:%u\n",uc_seqNo,canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo);
 8011c0e:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8011c12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011c16:	4a13      	ldr	r2, [pc, #76]	; (8011c64 <readCanToStructs+0x1d7c>)
 8011c18:	f240 4012 	movw	r0, #1042	; 0x412
 8011c1c:	fb00 f303 	mul.w	r3, r0, r3
 8011c20:	4413      	add	r3, r2
 8011c22:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8011c26:	781b      	ldrb	r3, [r3, #0]
 8011c28:	461a      	mov	r2, r3
 8011c2a:	4815      	ldr	r0, [pc, #84]	; (8011c80 <readCanToStructs+0x1d98>)
 8011c2c:	f010 fcba 	bl	80225a4 <iprintf>
					memset(uc_pp_charPtr,0,sizeof(VITAL_DATA_SHARING_t));
 8011c30:	f44f 7201 	mov.w	r2, #516	; 0x204
 8011c34:	2100      	movs	r1, #0
 8011c36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011c38:	f010 fbcc 	bl	80223d4 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8011c3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011c40:	4a08      	ldr	r2, [pc, #32]	; (8011c64 <readCanToStructs+0x1d7c>)
 8011c42:	f240 4112 	movw	r1, #1042	; 0x412
 8011c46:	fb01 f303 	mul.w	r3, r1, r3
 8011c4a:	4413      	add	r3, r2
 8011c4c:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8011c50:	2200      	movs	r2, #0
 8011c52:	701a      	strb	r2, [r3, #0]
					DataTraverser = 0;
 8011c54:	4b02      	ldr	r3, [pc, #8]	; (8011c60 <readCanToStructs+0x1d78>)
 8011c56:	2200      	movs	r2, #0
 8011c58:	801a      	strh	r2, [r3, #0]
					break;
 8011c5a:	e132      	b.n	8011ec2 <readCanToStructs+0x1fda>
 8011c5c:	20005a60 	.word	0x20005a60
 8011c60:	20009bb8 	.word	0x20009bb8
 8011c64:	2000523c 	.word	0x2000523c
 8011c68:	08026c0c 	.word	0x08026c0c
 8011c6c:	20003ab8 	.word	0x20003ab8
 8011c70:	20009bba 	.word	0x20009bba
 8011c74:	08026c38 	.word	0x08026c38
 8011c78:	200038b4 	.word	0x200038b4
 8011c7c:	20003490 	.word	0x20003490
 8011c80:	08026c50 	.word	0x08026c50
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo++;
 8011c84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011c88:	49c2      	ldr	r1, [pc, #776]	; (8011f94 <readCanToStructs+0x20ac>)
 8011c8a:	f240 4212 	movw	r2, #1042	; 0x412
 8011c8e:	fb03 f202 	mul.w	r2, r3, r2
 8011c92:	440a      	add	r2, r1
 8011c94:	f202 4211 	addw	r2, r2, #1041	; 0x411
 8011c98:	7812      	ldrb	r2, [r2, #0]
 8011c9a:	3201      	adds	r2, #1
 8011c9c:	b2d0      	uxtb	r0, r2
 8011c9e:	4abd      	ldr	r2, [pc, #756]	; (8011f94 <readCanToStructs+0x20ac>)
 8011ca0:	f240 4112 	movw	r1, #1042	; 0x412
 8011ca4:	fb01 f303 	mul.w	r3, r1, r3
 8011ca8:	4413      	add	r3, r2
 8011caa:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8011cae:	4602      	mov	r2, r0
 8011cb0:	701a      	strb	r2, [r3, #0]
				DataLength = ( (TempSiemensRx_OtherRelays_st.NoofDataBytes) + ((sizeof(TempSiemensRx_OtherRelays_st.NoofDataBytes))+ (sizeof(TempSiemensRx_OtherRelays_st.VitalCRC))));
 8011cb2:	4bb9      	ldr	r3, [pc, #740]	; (8011f98 <readCanToStructs+0x20b0>)
 8011cb4:	881b      	ldrh	r3, [r3, #0]
 8011cb6:	3304      	adds	r3, #4
 8011cb8:	b29a      	uxth	r2, r3
 8011cba:	4bb8      	ldr	r3, [pc, #736]	; (8011f9c <readCanToStructs+0x20b4>)
 8011cbc:	801a      	strh	r2, [r3, #0]
				if(DataTraverser >= DataLength)
 8011cbe:	4bb8      	ldr	r3, [pc, #736]	; (8011fa0 <readCanToStructs+0x20b8>)
 8011cc0:	881a      	ldrh	r2, [r3, #0]
 8011cc2:	4bb6      	ldr	r3, [pc, #728]	; (8011f9c <readCanToStructs+0x20b4>)
 8011cc4:	881b      	ldrh	r3, [r3, #0]
 8011cc6:	429a      	cmp	r2, r3
 8011cc8:	f0c0 80fa 	bcc.w	8011ec0 <readCanToStructs+0x1fd8>
					printf("EI2 Relay Info Received\n");
 8011ccc:	48b5      	ldr	r0, [pc, #724]	; (8011fa4 <readCanToStructs+0x20bc>)
 8011cce:	f010 fd05 	bl	80226dc <puts>
					memcpy(&Siemens_OtherRelays_st,&TempSiemensRx_OtherRelays_st,sizeof(TempSiemensRx_OtherRelays_st));
 8011cd2:	4ab5      	ldr	r2, [pc, #724]	; (8011fa8 <readCanToStructs+0x20c0>)
 8011cd4:	4bb0      	ldr	r3, [pc, #704]	; (8011f98 <readCanToStructs+0x20b0>)
 8011cd6:	4610      	mov	r0, r2
 8011cd8:	4619      	mov	r1, r3
 8011cda:	f44f 7301 	mov.w	r3, #516	; 0x204
 8011cde:	461a      	mov	r2, r3
 8011ce0:	f010 fb50 	bl	8022384 <memcpy>
					DataTraverser = 0;
 8011ce4:	4bae      	ldr	r3, [pc, #696]	; (8011fa0 <readCanToStructs+0x20b8>)
 8011ce6:	2200      	movs	r2, #0
 8011ce8:	801a      	strh	r2, [r3, #0]
					DataLength = 0;
 8011cea:	4bac      	ldr	r3, [pc, #688]	; (8011f9c <readCanToStructs+0x20b4>)
 8011cec:	2200      	movs	r2, #0
 8011cee:	801a      	strh	r2, [r3, #0]
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 8011cf0:	4bae      	ldr	r3, [pc, #696]	; (8011fac <readCanToStructs+0x20c4>)
 8011cf2:	2201      	movs	r2, #1
 8011cf4:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 8011cf6:	f003 fc4b 	bl	8015590 <HAL_GetTick>
 8011cfa:	4603      	mov	r3, r0
 8011cfc:	4aab      	ldr	r2, [pc, #684]	; (8011fac <readCanToStructs+0x20c4>)
 8011cfe:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8011d00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011d04:	4aa3      	ldr	r2, [pc, #652]	; (8011f94 <readCanToStructs+0x20ac>)
 8011d06:	f240 4112 	movw	r1, #1042	; 0x412
 8011d0a:	fb01 f303 	mul.w	r3, r1, r3
 8011d0e:	4413      	add	r3, r2
 8011d10:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8011d14:	2200      	movs	r2, #0
 8011d16:	701a      	strb	r2, [r3, #0]
				break;
 8011d18:	e0d2      	b.n	8011ec0 <readCanToStructs+0x1fd8>
				uc_pp_charPtr = (uint8_t *)&Siemens_fault_injection_st;
 8011d1a:	4ba5      	ldr	r3, [pc, #660]	; (8011fb0 <readCanToStructs+0x20c8>)
 8011d1c:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8011d1e:	4ba5      	ldr	r3, [pc, #660]	; (8011fb4 <readCanToStructs+0x20cc>)
 8011d20:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011d24:	885b      	ldrh	r3, [r3, #2]
 8011d26:	4aa3      	ldr	r2, [pc, #652]	; (8011fb4 <readCanToStructs+0x20cc>)
 8011d28:	011b      	lsls	r3, r3, #4
 8011d2a:	4413      	add	r3, r2
 8011d2c:	3304      	adds	r3, #4
 8011d2e:	781b      	ldrb	r3, [r3, #0]
 8011d30:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8011d34:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d110      	bne.n	8011d5e <readCanToStructs+0x1e76>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_FAULT_INJECTION_t));
 8011d3c:	2208      	movs	r2, #8
 8011d3e:	2100      	movs	r1, #0
 8011d40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011d42:	f010 fb47 	bl	80223d4 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8011d46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011d4a:	4a92      	ldr	r2, [pc, #584]	; (8011f94 <readCanToStructs+0x20ac>)
 8011d4c:	f240 4112 	movw	r1, #1042	; 0x412
 8011d50:	fb01 f303 	mul.w	r3, r1, r3
 8011d54:	4413      	add	r3, r2
 8011d56:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8011d5a:	2200      	movs	r2, #0
 8011d5c:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo)
 8011d5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011d62:	4a8c      	ldr	r2, [pc, #560]	; (8011f94 <readCanToStructs+0x20ac>)
 8011d64:	f240 4112 	movw	r1, #1042	; 0x412
 8011d68:	fb01 f303 	mul.w	r3, r1, r3
 8011d6c:	4413      	add	r3, r2
 8011d6e:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8011d72:	781b      	ldrb	r3, [r3, #0]
 8011d74:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011d78:	429a      	cmp	r2, r3
 8011d7a:	d014      	beq.n	8011da6 <readCanToStructs+0x1ebe>
					printf("FAULT_INJECTION Seq no MisMatch\n");
 8011d7c:	488e      	ldr	r0, [pc, #568]	; (8011fb8 <readCanToStructs+0x20d0>)
 8011d7e:	f010 fcad 	bl	80226dc <puts>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_FAULT_INJECTION_t));
 8011d82:	2208      	movs	r2, #8
 8011d84:	2100      	movs	r1, #0
 8011d86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011d88:	f010 fb24 	bl	80223d4 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8011d8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011d90:	4a80      	ldr	r2, [pc, #512]	; (8011f94 <readCanToStructs+0x20ac>)
 8011d92:	f240 4112 	movw	r1, #1042	; 0x412
 8011d96:	fb01 f303 	mul.w	r3, r1, r3
 8011d9a:	4413      	add	r3, r2
 8011d9c:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8011da0:	2200      	movs	r2, #0
 8011da2:	701a      	strb	r2, [r3, #0]
					break;
 8011da4:	e08d      	b.n	8011ec2 <readCanToStructs+0x1fda>
				uc_pp_charPtr += (7 * uc_seqNo);
 8011da6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011daa:	4613      	mov	r3, r2
 8011dac:	00db      	lsls	r3, r3, #3
 8011dae:	1a9b      	subs	r3, r3, r2
 8011db0:	461a      	mov	r2, r3
 8011db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011db4:	4413      	add	r3, r2
 8011db6:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011db8:	2301      	movs	r3, #1
 8011dba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011dbe:	e016      	b.n	8011dee <readCanToStructs+0x1f06>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8011dc0:	4b7c      	ldr	r3, [pc, #496]	; (8011fb4 <readCanToStructs+0x20cc>)
 8011dc2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011dc6:	885b      	ldrh	r3, [r3, #2]
 8011dc8:	461a      	mov	r2, r3
 8011dca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011dce:	4979      	ldr	r1, [pc, #484]	; (8011fb4 <readCanToStructs+0x20cc>)
 8011dd0:	0112      	lsls	r2, r2, #4
 8011dd2:	440a      	add	r2, r1
 8011dd4:	4413      	add	r3, r2
 8011dd6:	3304      	adds	r3, #4
 8011dd8:	781a      	ldrb	r2, [r3, #0]
 8011dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ddc:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8011dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011de0:	3301      	adds	r3, #1
 8011de2:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011de4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011de8:	3301      	adds	r3, #1
 8011dea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011dee:	4b71      	ldr	r3, [pc, #452]	; (8011fb4 <readCanToStructs+0x20cc>)
 8011df0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011df4:	885b      	ldrh	r3, [r3, #2]
 8011df6:	4a6f      	ldr	r2, [pc, #444]	; (8011fb4 <readCanToStructs+0x20cc>)
 8011df8:	011b      	lsls	r3, r3, #4
 8011dfa:	4413      	add	r3, r2
 8011dfc:	330c      	adds	r3, #12
 8011dfe:	781b      	ldrb	r3, [r3, #0]
 8011e00:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011e04:	429a      	cmp	r2, r3
 8011e06:	d3db      	bcc.n	8011dc0 <readCanToStructs+0x1ed8>
				if((((canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SIEMENS_FAULT_INJECTION_t))
 8011e08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011e0c:	4a61      	ldr	r2, [pc, #388]	; (8011f94 <readCanToStructs+0x20ac>)
 8011e0e:	f240 4112 	movw	r1, #1042	; 0x412
 8011e12:	fb01 f303 	mul.w	r3, r1, r3
 8011e16:	4413      	add	r3, r2
 8011e18:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8011e1c:	781b      	ldrb	r3, [r3, #0]
 8011e1e:	461a      	mov	r2, r3
 8011e20:	4613      	mov	r3, r2
 8011e22:	00db      	lsls	r3, r3, #3
 8011e24:	1a9a      	subs	r2, r3, r2
 8011e26:	4b63      	ldr	r3, [pc, #396]	; (8011fb4 <readCanToStructs+0x20cc>)
 8011e28:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011e2c:	885b      	ldrh	r3, [r3, #2]
 8011e2e:	4961      	ldr	r1, [pc, #388]	; (8011fb4 <readCanToStructs+0x20cc>)
 8011e30:	011b      	lsls	r3, r3, #4
 8011e32:	440b      	add	r3, r1
 8011e34:	330c      	adds	r3, #12
 8011e36:	781b      	ldrb	r3, [r3, #0]
 8011e38:	3b01      	subs	r3, #1
 8011e3a:	4413      	add	r3, r2
 8011e3c:	2b07      	cmp	r3, #7
 8011e3e:	d917      	bls.n	8011e70 <readCanToStructs+0x1f88>
					printf("Received Fault Injection Data\n");
 8011e40:	485e      	ldr	r0, [pc, #376]	; (8011fbc <readCanToStructs+0x20d4>)
 8011e42:	f010 fc4b 	bl	80226dc <puts>
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 8011e46:	4b59      	ldr	r3, [pc, #356]	; (8011fac <readCanToStructs+0x20c4>)
 8011e48:	2201      	movs	r2, #1
 8011e4a:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 8011e4c:	f003 fba0 	bl	8015590 <HAL_GetTick>
 8011e50:	4603      	mov	r3, r0
 8011e52:	4a56      	ldr	r2, [pc, #344]	; (8011fac <readCanToStructs+0x20c4>)
 8011e54:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8011e56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011e5a:	4a4e      	ldr	r2, [pc, #312]	; (8011f94 <readCanToStructs+0x20ac>)
 8011e5c:	f240 4112 	movw	r1, #1042	; 0x412
 8011e60:	fb01 f303 	mul.w	r3, r1, r3
 8011e64:	4413      	add	r3, r2
 8011e66:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8011e6a:	2200      	movs	r2, #0
 8011e6c:	701a      	strb	r2, [r3, #0]
				break;
 8011e6e:	e028      	b.n	8011ec2 <readCanToStructs+0x1fda>
					canStatus[uc_index][CAN_FAULT_INJECTION].invalid = 1;
 8011e70:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011e74:	4a47      	ldr	r2, [pc, #284]	; (8011f94 <readCanToStructs+0x20ac>)
 8011e76:	f240 4112 	movw	r1, #1042	; 0x412
 8011e7a:	fb01 f303 	mul.w	r3, r1, r3
 8011e7e:	4413      	add	r3, r2
 8011e80:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8011e84:	2201      	movs	r2, #1
 8011e86:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo++;
 8011e88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011e8c:	4941      	ldr	r1, [pc, #260]	; (8011f94 <readCanToStructs+0x20ac>)
 8011e8e:	f240 4212 	movw	r2, #1042	; 0x412
 8011e92:	fb03 f202 	mul.w	r2, r3, r2
 8011e96:	440a      	add	r2, r1
 8011e98:	f202 420b 	addw	r2, r2, #1035	; 0x40b
 8011e9c:	7812      	ldrb	r2, [r2, #0]
 8011e9e:	3201      	adds	r2, #1
 8011ea0:	b2d0      	uxtb	r0, r2
 8011ea2:	4a3c      	ldr	r2, [pc, #240]	; (8011f94 <readCanToStructs+0x20ac>)
 8011ea4:	f240 4112 	movw	r1, #1042	; 0x412
 8011ea8:	fb01 f303 	mul.w	r3, r1, r3
 8011eac:	4413      	add	r3, r2
 8011eae:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8011eb2:	4602      	mov	r2, r0
 8011eb4:	701a      	strb	r2, [r3, #0]
				break;
 8011eb6:	e004      	b.n	8011ec2 <readCanToStructs+0x1fda>
				break;
 8011eb8:	bf00      	nop
 8011eba:	e002      	b.n	8011ec2 <readCanToStructs+0x1fda>
				break;
 8011ebc:	bf00      	nop
 8011ebe:	e000      	b.n	8011ec2 <readCanToStructs+0x1fda>
				break;
 8011ec0:	bf00      	nop
			memset(&canRead.CAN_msg[canRead.Out],0,sizeof(CAN_msg));
 8011ec2:	4b3c      	ldr	r3, [pc, #240]	; (8011fb4 <readCanToStructs+0x20cc>)
 8011ec4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011ec8:	885b      	ldrh	r3, [r3, #2]
 8011eca:	011b      	lsls	r3, r3, #4
 8011ecc:	4a39      	ldr	r2, [pc, #228]	; (8011fb4 <readCanToStructs+0x20cc>)
 8011ece:	4413      	add	r3, r2
 8011ed0:	2210      	movs	r2, #16
 8011ed2:	2100      	movs	r1, #0
 8011ed4:	4618      	mov	r0, r3
 8011ed6:	f010 fa7d 	bl	80223d4 <memset>
			canRead.Out++;
 8011eda:	4b36      	ldr	r3, [pc, #216]	; (8011fb4 <readCanToStructs+0x20cc>)
 8011edc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011ee0:	885b      	ldrh	r3, [r3, #2]
 8011ee2:	3301      	adds	r3, #1
 8011ee4:	b29a      	uxth	r2, r3
 8011ee6:	4b33      	ldr	r3, [pc, #204]	; (8011fb4 <readCanToStructs+0x20cc>)
 8011ee8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011eec:	805a      	strh	r2, [r3, #2]
			if(CANBUFFSIZE == canRead.Out)
 8011eee:	4b31      	ldr	r3, [pc, #196]	; (8011fb4 <readCanToStructs+0x20cc>)
 8011ef0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011ef4:	885b      	ldrh	r3, [r3, #2]
 8011ef6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011efa:	d104      	bne.n	8011f06 <readCanToStructs+0x201e>
				canRead.Out = 0;
 8011efc:	4b2d      	ldr	r3, [pc, #180]	; (8011fb4 <readCanToStructs+0x20cc>)
 8011efe:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011f02:	2200      	movs	r2, #0
 8011f04:	805a      	strh	r2, [r3, #2]
		while(canDataReady())
 8011f06:	f7fd ff99 	bl	800fe3c <canDataReady>
 8011f0a:	4603      	mov	r3, r0
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	f47f a949 	bne.w	80111a4 <readCanToStructs+0x12bc>
	break;
 8011f12:	f000 be46 	b.w	8012ba2 <readCanToStructs+0x2cba>
			uc_index = canRead.CAN_msg[canRead.Out].canPort-1;
 8011f16:	4b27      	ldr	r3, [pc, #156]	; (8011fb4 <readCanToStructs+0x20cc>)
 8011f18:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011f1c:	885b      	ldrh	r3, [r3, #2]
 8011f1e:	4a25      	ldr	r2, [pc, #148]	; (8011fb4 <readCanToStructs+0x20cc>)
 8011f20:	011b      	lsls	r3, r3, #4
 8011f22:	4413      	add	r3, r2
 8011f24:	330f      	adds	r3, #15
 8011f26:	781b      	ldrb	r3, [r3, #0]
 8011f28:	3b01      	subs	r3, #1
 8011f2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			switch(canRead.CAN_msg[canRead.Out].StdId)
 8011f2e:	4b21      	ldr	r3, [pc, #132]	; (8011fb4 <readCanToStructs+0x20cc>)
 8011f30:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011f34:	885b      	ldrh	r3, [r3, #2]
 8011f36:	4a1f      	ldr	r2, [pc, #124]	; (8011fb4 <readCanToStructs+0x20cc>)
 8011f38:	011b      	lsls	r3, r3, #4
 8011f3a:	4413      	add	r3, r2
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 8011f42:	f200 8624 	bhi.w	8012b8e <readCanToStructs+0x2ca6>
 8011f46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011f4a:	d80a      	bhi.n	8011f62 <readCanToStructs+0x207a>
 8011f4c:	f240 1203 	movw	r2, #259	; 0x103
 8011f50:	4293      	cmp	r3, r2
 8011f52:	d035      	beq.n	8011fc0 <readCanToStructs+0x20d8>
 8011f54:	f240 1209 	movw	r2, #265	; 0x109
 8011f58:	4293      	cmp	r3, r2
 8011f5a:	f000 8107 	beq.w	801216c <readCanToStructs+0x2284>
 8011f5e:	f000 be16 	b.w	8012b8e <readCanToStructs+0x2ca6>
 8011f62:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8011f66:	2b07      	cmp	r3, #7
 8011f68:	f200 8611 	bhi.w	8012b8e <readCanToStructs+0x2ca6>
 8011f6c:	a201      	add	r2, pc, #4	; (adr r2, 8011f74 <readCanToStructs+0x208c>)
 8011f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f72:	bf00      	nop
 8011f74:	0801233f 	.word	0x0801233f
 8011f78:	080124e9 	.word	0x080124e9
 8011f7c:	08012b8f 	.word	0x08012b8f
 8011f80:	08012b8f 	.word	0x08012b8f
 8011f84:	080126b5 	.word	0x080126b5
 8011f88:	08012b8f 	.word	0x08012b8f
 8011f8c:	0801283d 	.word	0x0801283d
 8011f90:	080129fb 	.word	0x080129fb
 8011f94:	2000523c 	.word	0x2000523c
 8011f98:	20003ab8 	.word	0x20003ab8
 8011f9c:	20009bba 	.word	0x20009bba
 8011fa0:	20009bb8 	.word	0x20009bb8
 8011fa4:	08026c7c 	.word	0x08026c7c
 8011fa8:	200038b4 	.word	0x200038b4
 8011fac:	20003490 	.word	0x20003490
 8011fb0:	2000347c 	.word	0x2000347c
 8011fb4:	20005a60 	.word	0x20005a60
 8011fb8:	08026b50 	.word	0x08026b50
 8011fbc:	08026b70 	.word	0x08026b70
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 8011fc0:	4bc3      	ldr	r3, [pc, #780]	; (80122d0 <readCanToStructs+0x23e8>)
 8011fc2:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8011fc4:	4bc3      	ldr	r3, [pc, #780]	; (80122d4 <readCanToStructs+0x23ec>)
 8011fc6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011fca:	885b      	ldrh	r3, [r3, #2]
 8011fcc:	4ac1      	ldr	r2, [pc, #772]	; (80122d4 <readCanToStructs+0x23ec>)
 8011fce:	011b      	lsls	r3, r3, #4
 8011fd0:	4413      	add	r3, r2
 8011fd2:	3304      	adds	r3, #4
 8011fd4:	781b      	ldrb	r3, [r3, #0]
 8011fd6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8011fda:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d110      	bne.n	8012004 <readCanToStructs+0x211c>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8011fe2:	2206      	movs	r2, #6
 8011fe4:	2100      	movs	r1, #0
 8011fe6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011fe8:	f010 f9f4 	bl	80223d4 <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8011fec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011ff0:	4ab9      	ldr	r2, [pc, #740]	; (80122d8 <readCanToStructs+0x23f0>)
 8011ff2:	f240 4112 	movw	r1, #1042	; 0x412
 8011ff6:	fb01 f303 	mul.w	r3, r1, r3
 8011ffa:	4413      	add	r3, r2
 8011ffc:	f203 2307 	addw	r3, r3, #519	; 0x207
 8012000:	2200      	movs	r2, #0
 8012002:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS_TIME_PKT].expSeqNo)
 8012004:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012008:	4ab3      	ldr	r2, [pc, #716]	; (80122d8 <readCanToStructs+0x23f0>)
 801200a:	f240 4112 	movw	r1, #1042	; 0x412
 801200e:	fb01 f303 	mul.w	r3, r1, r3
 8012012:	4413      	add	r3, r2
 8012014:	f203 2307 	addw	r3, r3, #519	; 0x207
 8012018:	781b      	ldrb	r3, [r3, #0]
 801201a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801201e:	429a      	cmp	r2, r3
 8012020:	d015      	beq.n	801204e <readCanToStructs+0x2166>
					printf("GPS Packet Seq no MisMatch\n");
 8012022:	48ae      	ldr	r0, [pc, #696]	; (80122dc <readCanToStructs+0x23f4>)
 8012024:	f010 fb5a 	bl	80226dc <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8012028:	2206      	movs	r2, #6
 801202a:	2100      	movs	r1, #0
 801202c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801202e:	f010 f9d1 	bl	80223d4 <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8012032:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012036:	4aa8      	ldr	r2, [pc, #672]	; (80122d8 <readCanToStructs+0x23f0>)
 8012038:	f240 4112 	movw	r1, #1042	; 0x412
 801203c:	fb01 f303 	mul.w	r3, r1, r3
 8012040:	4413      	add	r3, r2
 8012042:	f203 2307 	addw	r3, r3, #519	; 0x207
 8012046:	2200      	movs	r2, #0
 8012048:	701a      	strb	r2, [r3, #0]
					break;
 801204a:	f000 bda0 	b.w	8012b8e <readCanToStructs+0x2ca6>
				uc_pp_charPtr += (7 * uc_seqNo);
 801204e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012052:	4613      	mov	r3, r2
 8012054:	00db      	lsls	r3, r3, #3
 8012056:	1a9b      	subs	r3, r3, r2
 8012058:	461a      	mov	r2, r3
 801205a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801205c:	4413      	add	r3, r2
 801205e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012060:	2301      	movs	r3, #1
 8012062:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012066:	e016      	b.n	8012096 <readCanToStructs+0x21ae>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8012068:	4b9a      	ldr	r3, [pc, #616]	; (80122d4 <readCanToStructs+0x23ec>)
 801206a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801206e:	885b      	ldrh	r3, [r3, #2]
 8012070:	461a      	mov	r2, r3
 8012072:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012076:	4997      	ldr	r1, [pc, #604]	; (80122d4 <readCanToStructs+0x23ec>)
 8012078:	0112      	lsls	r2, r2, #4
 801207a:	440a      	add	r2, r1
 801207c:	4413      	add	r3, r2
 801207e:	3304      	adds	r3, #4
 8012080:	781a      	ldrb	r2, [r3, #0]
 8012082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012084:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8012086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012088:	3301      	adds	r3, #1
 801208a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801208c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012090:	3301      	adds	r3, #1
 8012092:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012096:	4b8f      	ldr	r3, [pc, #572]	; (80122d4 <readCanToStructs+0x23ec>)
 8012098:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801209c:	885b      	ldrh	r3, [r3, #2]
 801209e:	4a8d      	ldr	r2, [pc, #564]	; (80122d4 <readCanToStructs+0x23ec>)
 80120a0:	011b      	lsls	r3, r3, #4
 80120a2:	4413      	add	r3, r2
 80120a4:	330c      	adds	r3, #12
 80120a6:	781b      	ldrb	r3, [r3, #0]
 80120a8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80120ac:	429a      	cmp	r2, r3
 80120ae:	d3db      	bcc.n	8012068 <readCanToStructs+0x2180>
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 80120b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80120b4:	4a88      	ldr	r2, [pc, #544]	; (80122d8 <readCanToStructs+0x23f0>)
 80120b6:	f240 4112 	movw	r1, #1042	; 0x412
 80120ba:	fb01 f303 	mul.w	r3, r1, r3
 80120be:	4413      	add	r3, r2
 80120c0:	f203 2307 	addw	r3, r3, #519	; 0x207
 80120c4:	781b      	ldrb	r3, [r3, #0]
 80120c6:	461a      	mov	r2, r3
 80120c8:	4613      	mov	r3, r2
 80120ca:	00db      	lsls	r3, r3, #3
 80120cc:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 80120ce:	4b81      	ldr	r3, [pc, #516]	; (80122d4 <readCanToStructs+0x23ec>)
 80120d0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80120d4:	885b      	ldrh	r3, [r3, #2]
 80120d6:	497f      	ldr	r1, [pc, #508]	; (80122d4 <readCanToStructs+0x23ec>)
 80120d8:	011b      	lsls	r3, r3, #4
 80120da:	440b      	add	r3, r1
 80120dc:	330c      	adds	r3, #12
 80120de:	781b      	ldrb	r3, [r3, #0]
 80120e0:	3b01      	subs	r3, #1
 80120e2:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 80120e4:	2b05      	cmp	r3, #5
 80120e6:	d91c      	bls.n	8012122 <readCanToStructs+0x223a>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 80120e8:	4b7d      	ldr	r3, [pc, #500]	; (80122e0 <readCanToStructs+0x23f8>)
 80120ea:	4a79      	ldr	r2, [pc, #484]	; (80122d0 <readCanToStructs+0x23e8>)
 80120ec:	6811      	ldr	r1, [r2, #0]
 80120ee:	6019      	str	r1, [r3, #0]
 80120f0:	8892      	ldrh	r2, [r2, #4]
 80120f2:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 80120f4:	4b7b      	ldr	r3, [pc, #492]	; (80122e4 <readCanToStructs+0x23fc>)
 80120f6:	781b      	ldrb	r3, [r3, #0]
 80120f8:	2b01      	cmp	r3, #1
 80120fa:	d102      	bne.n	8012102 <readCanToStructs+0x221a>
						printf("GPS_PACKET_RECEIVED\n");
 80120fc:	487a      	ldr	r0, [pc, #488]	; (80122e8 <readCanToStructs+0x2400>)
 80120fe:	f010 faed 	bl	80226dc <puts>
					Write_RTC();
 8012102:	f7f8 ffa1 	bl	800b048 <Write_RTC>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8012106:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801210a:	4a73      	ldr	r2, [pc, #460]	; (80122d8 <readCanToStructs+0x23f0>)
 801210c:	f240 4112 	movw	r1, #1042	; 0x412
 8012110:	fb01 f303 	mul.w	r3, r1, r3
 8012114:	4413      	add	r3, r2
 8012116:	f203 2307 	addw	r3, r3, #519	; 0x207
 801211a:	2200      	movs	r2, #0
 801211c:	701a      	strb	r2, [r3, #0]
 801211e:	f000 bd36 	b.w	8012b8e <readCanToStructs+0x2ca6>
					canStatus[uc_index][GPS_TIME_PKT].invalid = 1;
 8012122:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012126:	4a6c      	ldr	r2, [pc, #432]	; (80122d8 <readCanToStructs+0x23f0>)
 8012128:	f240 4112 	movw	r1, #1042	; 0x412
 801212c:	fb01 f303 	mul.w	r3, r1, r3
 8012130:	4413      	add	r3, r2
 8012132:	f203 2306 	addw	r3, r3, #518	; 0x206
 8012136:	2201      	movs	r2, #1
 8012138:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo++;
 801213a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801213e:	4966      	ldr	r1, [pc, #408]	; (80122d8 <readCanToStructs+0x23f0>)
 8012140:	f240 4212 	movw	r2, #1042	; 0x412
 8012144:	fb03 f202 	mul.w	r2, r3, r2
 8012148:	440a      	add	r2, r1
 801214a:	f202 2207 	addw	r2, r2, #519	; 0x207
 801214e:	7812      	ldrb	r2, [r2, #0]
 8012150:	3201      	adds	r2, #1
 8012152:	b2d0      	uxtb	r0, r2
 8012154:	4a60      	ldr	r2, [pc, #384]	; (80122d8 <readCanToStructs+0x23f0>)
 8012156:	f240 4112 	movw	r1, #1042	; 0x412
 801215a:	fb01 f303 	mul.w	r3, r1, r3
 801215e:	4413      	add	r3, r2
 8012160:	f203 2307 	addw	r3, r3, #519	; 0x207
 8012164:	4602      	mov	r2, r0
 8012166:	701a      	strb	r2, [r3, #0]
				break;
 8012168:	f000 bd11 	b.w	8012b8e <readCanToStructs+0x2ca6>
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 801216c:	4b58      	ldr	r3, [pc, #352]	; (80122d0 <readCanToStructs+0x23e8>)
 801216e:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8012170:	4b58      	ldr	r3, [pc, #352]	; (80122d4 <readCanToStructs+0x23ec>)
 8012172:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012176:	885b      	ldrh	r3, [r3, #2]
 8012178:	4a56      	ldr	r2, [pc, #344]	; (80122d4 <readCanToStructs+0x23ec>)
 801217a:	011b      	lsls	r3, r3, #4
 801217c:	4413      	add	r3, r2
 801217e:	3304      	adds	r3, #4
 8012180:	781b      	ldrb	r3, [r3, #0]
 8012182:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8012186:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801218a:	2b00      	cmp	r3, #0
 801218c:	d110      	bne.n	80121b0 <readCanToStructs+0x22c8>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 801218e:	2206      	movs	r2, #6
 8012190:	2100      	movs	r1, #0
 8012192:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012194:	f010 f91e 	bl	80223d4 <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 8012198:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801219c:	4a4e      	ldr	r2, [pc, #312]	; (80122d8 <readCanToStructs+0x23f0>)
 801219e:	f240 4112 	movw	r1, #1042	; 0x412
 80121a2:	fb01 f303 	mul.w	r3, r1, r3
 80121a6:	4413      	add	r3, r2
 80121a8:	f203 2313 	addw	r3, r3, #531	; 0x213
 80121ac:	2200      	movs	r2, #0
 80121ae:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS2_TIME_PKT].expSeqNo)
 80121b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80121b4:	4a48      	ldr	r2, [pc, #288]	; (80122d8 <readCanToStructs+0x23f0>)
 80121b6:	f240 4112 	movw	r1, #1042	; 0x412
 80121ba:	fb01 f303 	mul.w	r3, r1, r3
 80121be:	4413      	add	r3, r2
 80121c0:	f203 2313 	addw	r3, r3, #531	; 0x213
 80121c4:	781b      	ldrb	r3, [r3, #0]
 80121c6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80121ca:	429a      	cmp	r2, r3
 80121cc:	d015      	beq.n	80121fa <readCanToStructs+0x2312>
					printf("GPS2 Packet Seq no MisMatch\n");
 80121ce:	4847      	ldr	r0, [pc, #284]	; (80122ec <readCanToStructs+0x2404>)
 80121d0:	f010 fa84 	bl	80226dc <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 80121d4:	2206      	movs	r2, #6
 80121d6:	2100      	movs	r1, #0
 80121d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80121da:	f010 f8fb 	bl	80223d4 <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 80121de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80121e2:	4a3d      	ldr	r2, [pc, #244]	; (80122d8 <readCanToStructs+0x23f0>)
 80121e4:	f240 4112 	movw	r1, #1042	; 0x412
 80121e8:	fb01 f303 	mul.w	r3, r1, r3
 80121ec:	4413      	add	r3, r2
 80121ee:	f203 2313 	addw	r3, r3, #531	; 0x213
 80121f2:	2200      	movs	r2, #0
 80121f4:	701a      	strb	r2, [r3, #0]
					break;
 80121f6:	f000 bcca 	b.w	8012b8e <readCanToStructs+0x2ca6>
				uc_pp_charPtr += (7 * uc_seqNo);
 80121fa:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80121fe:	4613      	mov	r3, r2
 8012200:	00db      	lsls	r3, r3, #3
 8012202:	1a9b      	subs	r3, r3, r2
 8012204:	461a      	mov	r2, r3
 8012206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012208:	4413      	add	r3, r2
 801220a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801220c:	2301      	movs	r3, #1
 801220e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012212:	e016      	b.n	8012242 <readCanToStructs+0x235a>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8012214:	4b2f      	ldr	r3, [pc, #188]	; (80122d4 <readCanToStructs+0x23ec>)
 8012216:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801221a:	885b      	ldrh	r3, [r3, #2]
 801221c:	461a      	mov	r2, r3
 801221e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012222:	492c      	ldr	r1, [pc, #176]	; (80122d4 <readCanToStructs+0x23ec>)
 8012224:	0112      	lsls	r2, r2, #4
 8012226:	440a      	add	r2, r1
 8012228:	4413      	add	r3, r2
 801222a:	3304      	adds	r3, #4
 801222c:	781a      	ldrb	r2, [r3, #0]
 801222e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012230:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8012232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012234:	3301      	adds	r3, #1
 8012236:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012238:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801223c:	3301      	adds	r3, #1
 801223e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012242:	4b24      	ldr	r3, [pc, #144]	; (80122d4 <readCanToStructs+0x23ec>)
 8012244:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012248:	885b      	ldrh	r3, [r3, #2]
 801224a:	4a22      	ldr	r2, [pc, #136]	; (80122d4 <readCanToStructs+0x23ec>)
 801224c:	011b      	lsls	r3, r3, #4
 801224e:	4413      	add	r3, r2
 8012250:	330c      	adds	r3, #12
 8012252:	781b      	ldrb	r3, [r3, #0]
 8012254:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012258:	429a      	cmp	r2, r3
 801225a:	d3db      	bcc.n	8012214 <readCanToStructs+0x232c>
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 801225c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012260:	4a1d      	ldr	r2, [pc, #116]	; (80122d8 <readCanToStructs+0x23f0>)
 8012262:	f240 4112 	movw	r1, #1042	; 0x412
 8012266:	fb01 f303 	mul.w	r3, r1, r3
 801226a:	4413      	add	r3, r2
 801226c:	f203 2313 	addw	r3, r3, #531	; 0x213
 8012270:	781b      	ldrb	r3, [r3, #0]
 8012272:	461a      	mov	r2, r3
 8012274:	4613      	mov	r3, r2
 8012276:	00db      	lsls	r3, r3, #3
 8012278:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 801227a:	4b16      	ldr	r3, [pc, #88]	; (80122d4 <readCanToStructs+0x23ec>)
 801227c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012280:	885b      	ldrh	r3, [r3, #2]
 8012282:	4914      	ldr	r1, [pc, #80]	; (80122d4 <readCanToStructs+0x23ec>)
 8012284:	011b      	lsls	r3, r3, #4
 8012286:	440b      	add	r3, r1
 8012288:	330c      	adds	r3, #12
 801228a:	781b      	ldrb	r3, [r3, #0]
 801228c:	3b01      	subs	r3, #1
 801228e:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 8012290:	2b05      	cmp	r3, #5
 8012292:	d92f      	bls.n	80122f4 <readCanToStructs+0x240c>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 8012294:	4b12      	ldr	r3, [pc, #72]	; (80122e0 <readCanToStructs+0x23f8>)
 8012296:	4a0e      	ldr	r2, [pc, #56]	; (80122d0 <readCanToStructs+0x23e8>)
 8012298:	6811      	ldr	r1, [r2, #0]
 801229a:	6019      	str	r1, [r3, #0]
 801229c:	8892      	ldrh	r2, [r2, #4]
 801229e:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 80122a0:	4b10      	ldr	r3, [pc, #64]	; (80122e4 <readCanToStructs+0x23fc>)
 80122a2:	781b      	ldrb	r3, [r3, #0]
 80122a4:	2b01      	cmp	r3, #1
 80122a6:	d102      	bne.n	80122ae <readCanToStructs+0x23c6>
						printf("GPS2_PACKET_RECEIVED\n");
 80122a8:	4811      	ldr	r0, [pc, #68]	; (80122f0 <readCanToStructs+0x2408>)
 80122aa:	f010 fa17 	bl	80226dc <puts>
					Write_RTC();
 80122ae:	f7f8 fecb 	bl	800b048 <Write_RTC>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 80122b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80122b6:	4a08      	ldr	r2, [pc, #32]	; (80122d8 <readCanToStructs+0x23f0>)
 80122b8:	f240 4112 	movw	r1, #1042	; 0x412
 80122bc:	fb01 f303 	mul.w	r3, r1, r3
 80122c0:	4413      	add	r3, r2
 80122c2:	f203 2313 	addw	r3, r3, #531	; 0x213
 80122c6:	2200      	movs	r2, #0
 80122c8:	701a      	strb	r2, [r3, #0]
 80122ca:	f000 bc60 	b.w	8012b8e <readCanToStructs+0x2ca6>
 80122ce:	bf00      	nop
 80122d0:	200027e4 	.word	0x200027e4
 80122d4:	20005a60 	.word	0x20005a60
 80122d8:	2000523c 	.word	0x2000523c
 80122dc:	08026a1c 	.word	0x08026a1c
 80122e0:	200027dc 	.word	0x200027dc
 80122e4:	20000645 	.word	0x20000645
 80122e8:	08026a38 	.word	0x08026a38
 80122ec:	08026a4c 	.word	0x08026a4c
 80122f0:	08026a68 	.word	0x08026a68
					canStatus[uc_index][GPS2_TIME_PKT].invalid = 1;
 80122f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80122f8:	4aa5      	ldr	r2, [pc, #660]	; (8012590 <readCanToStructs+0x26a8>)
 80122fa:	f240 4112 	movw	r1, #1042	; 0x412
 80122fe:	fb01 f303 	mul.w	r3, r1, r3
 8012302:	4413      	add	r3, r2
 8012304:	f203 2312 	addw	r3, r3, #530	; 0x212
 8012308:	2201      	movs	r2, #1
 801230a:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo++;
 801230c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012310:	499f      	ldr	r1, [pc, #636]	; (8012590 <readCanToStructs+0x26a8>)
 8012312:	f240 4212 	movw	r2, #1042	; 0x412
 8012316:	fb03 f202 	mul.w	r2, r3, r2
 801231a:	440a      	add	r2, r1
 801231c:	f202 2213 	addw	r2, r2, #531	; 0x213
 8012320:	7812      	ldrb	r2, [r2, #0]
 8012322:	3201      	adds	r2, #1
 8012324:	b2d0      	uxtb	r0, r2
 8012326:	4a9a      	ldr	r2, [pc, #616]	; (8012590 <readCanToStructs+0x26a8>)
 8012328:	f240 4112 	movw	r1, #1042	; 0x412
 801232c:	fb01 f303 	mul.w	r3, r1, r3
 8012330:	4413      	add	r3, r2
 8012332:	f203 2313 	addw	r3, r3, #531	; 0x213
 8012336:	4602      	mov	r2, r0
 8012338:	701a      	strb	r2, [r3, #0]
				break;
 801233a:	f000 bc28 	b.w	8012b8e <readCanToStructs+0x2ca6>
				uc_pp_charPtr = (uint8_t *)&Medha_ei_self_sharing_Temp_st;
 801233e:	4b95      	ldr	r3, [pc, #596]	; (8012594 <readCanToStructs+0x26ac>)
 8012340:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8012342:	4b95      	ldr	r3, [pc, #596]	; (8012598 <readCanToStructs+0x26b0>)
 8012344:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012348:	885b      	ldrh	r3, [r3, #2]
 801234a:	4a93      	ldr	r2, [pc, #588]	; (8012598 <readCanToStructs+0x26b0>)
 801234c:	011b      	lsls	r3, r3, #4
 801234e:	4413      	add	r3, r2
 8012350:	3304      	adds	r3, #4
 8012352:	781b      	ldrb	r3, [r3, #0]
 8012354:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 8012358:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801235c:	2b00      	cmp	r3, #0
 801235e:	d110      	bne.n	8012382 <readCanToStructs+0x249a>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_EI_SELF_SHARING_t));
 8012360:	2208      	movs	r2, #8
 8012362:	2100      	movs	r1, #0
 8012364:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012366:	f010 f835 	bl	80223d4 <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 801236a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801236e:	4a88      	ldr	r2, [pc, #544]	; (8012590 <readCanToStructs+0x26a8>)
 8012370:	f240 4112 	movw	r1, #1042	; 0x412
 8012374:	fb01 f303 	mul.w	r3, r1, r3
 8012378:	4413      	add	r3, r2
 801237a:	f203 4303 	addw	r3, r3, #1027	; 0x403
 801237e:	2200      	movs	r2, #0
 8012380:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo)
 8012382:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012386:	4a82      	ldr	r2, [pc, #520]	; (8012590 <readCanToStructs+0x26a8>)
 8012388:	f240 4112 	movw	r1, #1042	; 0x412
 801238c:	fb01 f303 	mul.w	r3, r1, r3
 8012390:	4413      	add	r3, r2
 8012392:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8012396:	781b      	ldrb	r3, [r3, #0]
 8012398:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801239c:	429a      	cmp	r2, r3
 801239e:	d014      	beq.n	80123ca <readCanToStructs+0x24e2>
					printf("Seq No Mismatch for EI_1_SELF_SHARING\n");
 80123a0:	487e      	ldr	r0, [pc, #504]	; (801259c <readCanToStructs+0x26b4>)
 80123a2:	f010 f99b 	bl	80226dc <puts>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_EI_SELF_SHARING_t));
 80123a6:	2208      	movs	r2, #8
 80123a8:	2100      	movs	r1, #0
 80123aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80123ac:	f010 f812 	bl	80223d4 <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 80123b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80123b4:	4a76      	ldr	r2, [pc, #472]	; (8012590 <readCanToStructs+0x26a8>)
 80123b6:	f240 4112 	movw	r1, #1042	; 0x412
 80123ba:	fb01 f303 	mul.w	r3, r1, r3
 80123be:	4413      	add	r3, r2
 80123c0:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80123c4:	2200      	movs	r2, #0
 80123c6:	701a      	strb	r2, [r3, #0]
					break;
 80123c8:	e3e1      	b.n	8012b8e <readCanToStructs+0x2ca6>
				uc_pp_charPtr += (7 * uc_seqNo);
 80123ca:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80123ce:	4613      	mov	r3, r2
 80123d0:	00db      	lsls	r3, r3, #3
 80123d2:	1a9b      	subs	r3, r3, r2
 80123d4:	461a      	mov	r2, r3
 80123d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123d8:	4413      	add	r3, r2
 80123da:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80123dc:	2301      	movs	r3, #1
 80123de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80123e2:	e016      	b.n	8012412 <readCanToStructs+0x252a>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80123e4:	4b6c      	ldr	r3, [pc, #432]	; (8012598 <readCanToStructs+0x26b0>)
 80123e6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80123ea:	885b      	ldrh	r3, [r3, #2]
 80123ec:	461a      	mov	r2, r3
 80123ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80123f2:	4969      	ldr	r1, [pc, #420]	; (8012598 <readCanToStructs+0x26b0>)
 80123f4:	0112      	lsls	r2, r2, #4
 80123f6:	440a      	add	r2, r1
 80123f8:	4413      	add	r3, r2
 80123fa:	3304      	adds	r3, #4
 80123fc:	781a      	ldrb	r2, [r3, #0]
 80123fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012400:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8012402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012404:	3301      	adds	r3, #1
 8012406:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012408:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801240c:	3301      	adds	r3, #1
 801240e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012412:	4b61      	ldr	r3, [pc, #388]	; (8012598 <readCanToStructs+0x26b0>)
 8012414:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012418:	885b      	ldrh	r3, [r3, #2]
 801241a:	4a5f      	ldr	r2, [pc, #380]	; (8012598 <readCanToStructs+0x26b0>)
 801241c:	011b      	lsls	r3, r3, #4
 801241e:	4413      	add	r3, r2
 8012420:	330c      	adds	r3, #12
 8012422:	781b      	ldrb	r3, [r3, #0]
 8012424:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012428:	429a      	cmp	r2, r3
 801242a:	d3db      	bcc.n	80123e4 <readCanToStructs+0x24fc>
				if ((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_EI_SELF_SHARING_t))
 801242c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012430:	4a57      	ldr	r2, [pc, #348]	; (8012590 <readCanToStructs+0x26a8>)
 8012432:	f240 4112 	movw	r1, #1042	; 0x412
 8012436:	fb01 f303 	mul.w	r3, r1, r3
 801243a:	4413      	add	r3, r2
 801243c:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8012440:	781b      	ldrb	r3, [r3, #0]
 8012442:	461a      	mov	r2, r3
 8012444:	4613      	mov	r3, r2
 8012446:	00db      	lsls	r3, r3, #3
 8012448:	1a9a      	subs	r2, r3, r2
 801244a:	4b53      	ldr	r3, [pc, #332]	; (8012598 <readCanToStructs+0x26b0>)
 801244c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012450:	885b      	ldrh	r3, [r3, #2]
 8012452:	4951      	ldr	r1, [pc, #324]	; (8012598 <readCanToStructs+0x26b0>)
 8012454:	011b      	lsls	r3, r3, #4
 8012456:	440b      	add	r3, r1
 8012458:	330c      	adds	r3, #12
 801245a:	781b      	ldrb	r3, [r3, #0]
 801245c:	3b01      	subs	r3, #1
 801245e:	4413      	add	r3, r2
 8012460:	2b07      	cmp	r3, #7
 8012462:	d91d      	bls.n	80124a0 <readCanToStructs+0x25b8>
					printf("\nRCV OTH_INFO1\n");
 8012464:	484e      	ldr	r0, [pc, #312]	; (80125a0 <readCanToStructs+0x26b8>)
 8012466:	f010 f939 	bl	80226dc <puts>
					memcpy(&Medha_ei_self_sharing_RX_st, &Medha_ei_self_sharing_Temp_st, sizeof(MEDHA_EI_SELF_SHARING_t));
 801246a:	4b4e      	ldr	r3, [pc, #312]	; (80125a4 <readCanToStructs+0x26bc>)
 801246c:	4a49      	ldr	r2, [pc, #292]	; (8012594 <readCanToStructs+0x26ac>)
 801246e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012472:	e883 0003 	stmia.w	r3, {r0, r1}
					Medha_CAN_Xchanging_Happening = YES;
 8012476:	4b4c      	ldr	r3, [pc, #304]	; (80125a8 <readCanToStructs+0x26c0>)
 8012478:	2201      	movs	r2, #1
 801247a:	701a      	strb	r2, [r3, #0]
					Last_Received_Medha_Self_sharing = HAL_GetTick();
 801247c:	f003 f888 	bl	8015590 <HAL_GetTick>
 8012480:	4603      	mov	r3, r0
 8012482:	4a4a      	ldr	r2, [pc, #296]	; (80125ac <readCanToStructs+0x26c4>)
 8012484:	6013      	str	r3, [r2, #0]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 8012486:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801248a:	4a41      	ldr	r2, [pc, #260]	; (8012590 <readCanToStructs+0x26a8>)
 801248c:	f240 4112 	movw	r1, #1042	; 0x412
 8012490:	fb01 f303 	mul.w	r3, r1, r3
 8012494:	4413      	add	r3, r2
 8012496:	f203 4303 	addw	r3, r3, #1027	; 0x403
 801249a:	2200      	movs	r2, #0
 801249c:	701a      	strb	r2, [r3, #0]
 801249e:	e376      	b.n	8012b8e <readCanToStructs+0x2ca6>
					canStatus[uc_index][EI_1_SELF_SHARING].invalid = 1;
 80124a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80124a4:	4a3a      	ldr	r2, [pc, #232]	; (8012590 <readCanToStructs+0x26a8>)
 80124a6:	f240 4112 	movw	r1, #1042	; 0x412
 80124aa:	fb01 f303 	mul.w	r3, r1, r3
 80124ae:	4413      	add	r3, r2
 80124b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80124b4:	2201      	movs	r2, #1
 80124b6:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo++;
 80124b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80124bc:	4934      	ldr	r1, [pc, #208]	; (8012590 <readCanToStructs+0x26a8>)
 80124be:	f240 4212 	movw	r2, #1042	; 0x412
 80124c2:	fb03 f202 	mul.w	r2, r3, r2
 80124c6:	440a      	add	r2, r1
 80124c8:	f202 4203 	addw	r2, r2, #1027	; 0x403
 80124cc:	7812      	ldrb	r2, [r2, #0]
 80124ce:	3201      	adds	r2, #1
 80124d0:	b2d0      	uxtb	r0, r2
 80124d2:	4a2f      	ldr	r2, [pc, #188]	; (8012590 <readCanToStructs+0x26a8>)
 80124d4:	f240 4112 	movw	r1, #1042	; 0x412
 80124d8:	fb01 f303 	mul.w	r3, r1, r3
 80124dc:	4413      	add	r3, r2
 80124de:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80124e2:	4602      	mov	r2, r0
 80124e4:	701a      	strb	r2, [r3, #0]
				break;
 80124e6:	e352      	b.n	8012b8e <readCanToStructs+0x2ca6>
				uc_pp_charPtr = (uint8_t *)&Medha_ei_self_sharing_Temp_st;
 80124e8:	4b2a      	ldr	r3, [pc, #168]	; (8012594 <readCanToStructs+0x26ac>)
 80124ea:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80124ec:	4b2a      	ldr	r3, [pc, #168]	; (8012598 <readCanToStructs+0x26b0>)
 80124ee:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80124f2:	885b      	ldrh	r3, [r3, #2]
 80124f4:	4a28      	ldr	r2, [pc, #160]	; (8012598 <readCanToStructs+0x26b0>)
 80124f6:	011b      	lsls	r3, r3, #4
 80124f8:	4413      	add	r3, r2
 80124fa:	3304      	adds	r3, #4
 80124fc:	781b      	ldrb	r3, [r3, #0]
 80124fe:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 8012502:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012506:	2b00      	cmp	r3, #0
 8012508:	d110      	bne.n	801252c <readCanToStructs+0x2644>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_EI_SELF_SHARING_t));
 801250a:	2208      	movs	r2, #8
 801250c:	2100      	movs	r1, #0
 801250e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012510:	f00f ff60 	bl	80223d4 <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8012514:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012518:	4a1d      	ldr	r2, [pc, #116]	; (8012590 <readCanToStructs+0x26a8>)
 801251a:	f240 4112 	movw	r1, #1042	; 0x412
 801251e:	fb01 f303 	mul.w	r3, r1, r3
 8012522:	4413      	add	r3, r2
 8012524:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8012528:	2200      	movs	r2, #0
 801252a:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo)
 801252c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012530:	4a17      	ldr	r2, [pc, #92]	; (8012590 <readCanToStructs+0x26a8>)
 8012532:	f240 4112 	movw	r1, #1042	; 0x412
 8012536:	fb01 f303 	mul.w	r3, r1, r3
 801253a:	4413      	add	r3, r2
 801253c:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8012540:	781b      	ldrb	r3, [r3, #0]
 8012542:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012546:	429a      	cmp	r2, r3
 8012548:	d014      	beq.n	8012574 <readCanToStructs+0x268c>
					printf("Seq No Mismatch for EI_1_SELF_SHARING\n");
 801254a:	4814      	ldr	r0, [pc, #80]	; (801259c <readCanToStructs+0x26b4>)
 801254c:	f010 f8c6 	bl	80226dc <puts>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_EI_SELF_SHARING_t));
 8012550:	2208      	movs	r2, #8
 8012552:	2100      	movs	r1, #0
 8012554:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012556:	f00f ff3d 	bl	80223d4 <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 801255a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801255e:	4a0c      	ldr	r2, [pc, #48]	; (8012590 <readCanToStructs+0x26a8>)
 8012560:	f240 4112 	movw	r1, #1042	; 0x412
 8012564:	fb01 f303 	mul.w	r3, r1, r3
 8012568:	4413      	add	r3, r2
 801256a:	f203 4305 	addw	r3, r3, #1029	; 0x405
 801256e:	2200      	movs	r2, #0
 8012570:	701a      	strb	r2, [r3, #0]
					break;
 8012572:	e30c      	b.n	8012b8e <readCanToStructs+0x2ca6>
				uc_pp_charPtr += (7 * uc_seqNo);
 8012574:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012578:	4613      	mov	r3, r2
 801257a:	00db      	lsls	r3, r3, #3
 801257c:	1a9b      	subs	r3, r3, r2
 801257e:	461a      	mov	r2, r3
 8012580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012582:	4413      	add	r3, r2
 8012584:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012586:	2301      	movs	r3, #1
 8012588:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801258c:	e027      	b.n	80125de <readCanToStructs+0x26f6>
 801258e:	bf00      	nop
 8012590:	2000523c 	.word	0x2000523c
 8012594:	20002624 	.word	0x20002624
 8012598:	20005a60 	.word	0x20005a60
 801259c:	08026c94 	.word	0x08026c94
 80125a0:	08026cbc 	.word	0x08026cbc
 80125a4:	2000261c 	.word	0x2000261c
 80125a8:	200020bc 	.word	0x200020bc
 80125ac:	200020c0 	.word	0x200020c0
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80125b0:	4bc4      	ldr	r3, [pc, #784]	; (80128c4 <readCanToStructs+0x29dc>)
 80125b2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80125b6:	885b      	ldrh	r3, [r3, #2]
 80125b8:	461a      	mov	r2, r3
 80125ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80125be:	49c1      	ldr	r1, [pc, #772]	; (80128c4 <readCanToStructs+0x29dc>)
 80125c0:	0112      	lsls	r2, r2, #4
 80125c2:	440a      	add	r2, r1
 80125c4:	4413      	add	r3, r2
 80125c6:	3304      	adds	r3, #4
 80125c8:	781a      	ldrb	r2, [r3, #0]
 80125ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125cc:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80125ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125d0:	3301      	adds	r3, #1
 80125d2:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80125d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80125d8:	3301      	adds	r3, #1
 80125da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80125de:	4bb9      	ldr	r3, [pc, #740]	; (80128c4 <readCanToStructs+0x29dc>)
 80125e0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80125e4:	885b      	ldrh	r3, [r3, #2]
 80125e6:	4ab7      	ldr	r2, [pc, #732]	; (80128c4 <readCanToStructs+0x29dc>)
 80125e8:	011b      	lsls	r3, r3, #4
 80125ea:	4413      	add	r3, r2
 80125ec:	330c      	adds	r3, #12
 80125ee:	781b      	ldrb	r3, [r3, #0]
 80125f0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80125f4:	429a      	cmp	r2, r3
 80125f6:	d3db      	bcc.n	80125b0 <readCanToStructs+0x26c8>
				if ((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_EI_SELF_SHARING_t))
 80125f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80125fc:	4ab2      	ldr	r2, [pc, #712]	; (80128c8 <readCanToStructs+0x29e0>)
 80125fe:	f240 4112 	movw	r1, #1042	; 0x412
 8012602:	fb01 f303 	mul.w	r3, r1, r3
 8012606:	4413      	add	r3, r2
 8012608:	f203 4305 	addw	r3, r3, #1029	; 0x405
 801260c:	781b      	ldrb	r3, [r3, #0]
 801260e:	461a      	mov	r2, r3
 8012610:	4613      	mov	r3, r2
 8012612:	00db      	lsls	r3, r3, #3
 8012614:	1a9a      	subs	r2, r3, r2
 8012616:	4bab      	ldr	r3, [pc, #684]	; (80128c4 <readCanToStructs+0x29dc>)
 8012618:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801261c:	885b      	ldrh	r3, [r3, #2]
 801261e:	49a9      	ldr	r1, [pc, #676]	; (80128c4 <readCanToStructs+0x29dc>)
 8012620:	011b      	lsls	r3, r3, #4
 8012622:	440b      	add	r3, r1
 8012624:	330c      	adds	r3, #12
 8012626:	781b      	ldrb	r3, [r3, #0]
 8012628:	3b01      	subs	r3, #1
 801262a:	4413      	add	r3, r2
 801262c:	2b07      	cmp	r3, #7
 801262e:	d91d      	bls.n	801266c <readCanToStructs+0x2784>
					printf("\nRCV OTH_INFO2\n");
 8012630:	48a6      	ldr	r0, [pc, #664]	; (80128cc <readCanToStructs+0x29e4>)
 8012632:	f010 f853 	bl	80226dc <puts>
					memcpy(&Medha_ei_self_sharing_RX_st, &Medha_ei_self_sharing_Temp_st, sizeof(MEDHA_EI_SELF_SHARING_t));
 8012636:	4ba6      	ldr	r3, [pc, #664]	; (80128d0 <readCanToStructs+0x29e8>)
 8012638:	4aa6      	ldr	r2, [pc, #664]	; (80128d4 <readCanToStructs+0x29ec>)
 801263a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801263e:	e883 0003 	stmia.w	r3, {r0, r1}
					Medha_CAN_Xchanging_Happening = YES;
 8012642:	4ba5      	ldr	r3, [pc, #660]	; (80128d8 <readCanToStructs+0x29f0>)
 8012644:	2201      	movs	r2, #1
 8012646:	701a      	strb	r2, [r3, #0]
					Last_Received_Medha_Self_sharing = HAL_GetTick();
 8012648:	f002 ffa2 	bl	8015590 <HAL_GetTick>
 801264c:	4603      	mov	r3, r0
 801264e:	4aa3      	ldr	r2, [pc, #652]	; (80128dc <readCanToStructs+0x29f4>)
 8012650:	6013      	str	r3, [r2, #0]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8012652:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012656:	4a9c      	ldr	r2, [pc, #624]	; (80128c8 <readCanToStructs+0x29e0>)
 8012658:	f240 4112 	movw	r1, #1042	; 0x412
 801265c:	fb01 f303 	mul.w	r3, r1, r3
 8012660:	4413      	add	r3, r2
 8012662:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8012666:	2200      	movs	r2, #0
 8012668:	701a      	strb	r2, [r3, #0]
 801266a:	e290      	b.n	8012b8e <readCanToStructs+0x2ca6>
					canStatus[uc_index][EI_2_SELF_SHARING].invalid = 1;
 801266c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012670:	4a95      	ldr	r2, [pc, #596]	; (80128c8 <readCanToStructs+0x29e0>)
 8012672:	f240 4112 	movw	r1, #1042	; 0x412
 8012676:	fb01 f303 	mul.w	r3, r1, r3
 801267a:	4413      	add	r3, r2
 801267c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8012680:	2201      	movs	r2, #1
 8012682:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo++;
 8012684:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012688:	498f      	ldr	r1, [pc, #572]	; (80128c8 <readCanToStructs+0x29e0>)
 801268a:	f240 4212 	movw	r2, #1042	; 0x412
 801268e:	fb03 f202 	mul.w	r2, r3, r2
 8012692:	440a      	add	r2, r1
 8012694:	f202 4205 	addw	r2, r2, #1029	; 0x405
 8012698:	7812      	ldrb	r2, [r2, #0]
 801269a:	3201      	adds	r2, #1
 801269c:	b2d0      	uxtb	r0, r2
 801269e:	4a8a      	ldr	r2, [pc, #552]	; (80128c8 <readCanToStructs+0x29e0>)
 80126a0:	f240 4112 	movw	r1, #1042	; 0x412
 80126a4:	fb01 f303 	mul.w	r3, r1, r3
 80126a8:	4413      	add	r3, r2
 80126aa:	f203 4305 	addw	r3, r3, #1029	; 0x405
 80126ae:	4602      	mov	r2, r0
 80126b0:	701a      	strb	r2, [r3, #0]
				break;
 80126b2:	e26c      	b.n	8012b8e <readCanToStructs+0x2ca6>
				uc_pp_charPtr = (uint8_t *)&Medha_Fault_Injection_st;
 80126b4:	4b8a      	ldr	r3, [pc, #552]	; (80128e0 <readCanToStructs+0x29f8>)
 80126b6:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80126b8:	4b82      	ldr	r3, [pc, #520]	; (80128c4 <readCanToStructs+0x29dc>)
 80126ba:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80126be:	885b      	ldrh	r3, [r3, #2]
 80126c0:	4a80      	ldr	r2, [pc, #512]	; (80128c4 <readCanToStructs+0x29dc>)
 80126c2:	011b      	lsls	r3, r3, #4
 80126c4:	4413      	add	r3, r2
 80126c6:	3304      	adds	r3, #4
 80126c8:	781b      	ldrb	r3, [r3, #0]
 80126ca:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 80126ce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d110      	bne.n	80126f8 <readCanToStructs+0x2810>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_FAULT_INJECTION_t));
 80126d6:	2204      	movs	r2, #4
 80126d8:	2100      	movs	r1, #0
 80126da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80126dc:	f00f fe7a 	bl	80223d4 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 80126e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80126e4:	4a78      	ldr	r2, [pc, #480]	; (80128c8 <readCanToStructs+0x29e0>)
 80126e6:	f240 4112 	movw	r1, #1042	; 0x412
 80126ea:	fb01 f303 	mul.w	r3, r1, r3
 80126ee:	4413      	add	r3, r2
 80126f0:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 80126f4:	2200      	movs	r2, #0
 80126f6:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo)
 80126f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80126fc:	4a72      	ldr	r2, [pc, #456]	; (80128c8 <readCanToStructs+0x29e0>)
 80126fe:	f240 4112 	movw	r1, #1042	; 0x412
 8012702:	fb01 f303 	mul.w	r3, r1, r3
 8012706:	4413      	add	r3, r2
 8012708:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 801270c:	781b      	ldrb	r3, [r3, #0]
 801270e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012712:	429a      	cmp	r2, r3
 8012714:	d011      	beq.n	801273a <readCanToStructs+0x2852>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_FAULT_INJECTION_t));
 8012716:	2204      	movs	r2, #4
 8012718:	2100      	movs	r1, #0
 801271a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801271c:	f00f fe5a 	bl	80223d4 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8012720:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012724:	4a68      	ldr	r2, [pc, #416]	; (80128c8 <readCanToStructs+0x29e0>)
 8012726:	f240 4112 	movw	r1, #1042	; 0x412
 801272a:	fb01 f303 	mul.w	r3, r1, r3
 801272e:	4413      	add	r3, r2
 8012730:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8012734:	2200      	movs	r2, #0
 8012736:	701a      	strb	r2, [r3, #0]
					break;
 8012738:	e229      	b.n	8012b8e <readCanToStructs+0x2ca6>
				uc_pp_charPtr += (7 * uc_seqNo);
 801273a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801273e:	4613      	mov	r3, r2
 8012740:	00db      	lsls	r3, r3, #3
 8012742:	1a9b      	subs	r3, r3, r2
 8012744:	461a      	mov	r2, r3
 8012746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012748:	4413      	add	r3, r2
 801274a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801274c:	2301      	movs	r3, #1
 801274e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012752:	e016      	b.n	8012782 <readCanToStructs+0x289a>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8012754:	4b5b      	ldr	r3, [pc, #364]	; (80128c4 <readCanToStructs+0x29dc>)
 8012756:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801275a:	885b      	ldrh	r3, [r3, #2]
 801275c:	461a      	mov	r2, r3
 801275e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012762:	4958      	ldr	r1, [pc, #352]	; (80128c4 <readCanToStructs+0x29dc>)
 8012764:	0112      	lsls	r2, r2, #4
 8012766:	440a      	add	r2, r1
 8012768:	4413      	add	r3, r2
 801276a:	3304      	adds	r3, #4
 801276c:	781a      	ldrb	r2, [r3, #0]
 801276e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012770:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8012772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012774:	3301      	adds	r3, #1
 8012776:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012778:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801277c:	3301      	adds	r3, #1
 801277e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012782:	4b50      	ldr	r3, [pc, #320]	; (80128c4 <readCanToStructs+0x29dc>)
 8012784:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012788:	885b      	ldrh	r3, [r3, #2]
 801278a:	4a4e      	ldr	r2, [pc, #312]	; (80128c4 <readCanToStructs+0x29dc>)
 801278c:	011b      	lsls	r3, r3, #4
 801278e:	4413      	add	r3, r2
 8012790:	330c      	adds	r3, #12
 8012792:	781b      	ldrb	r3, [r3, #0]
 8012794:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012798:	429a      	cmp	r2, r3
 801279a:	d3db      	bcc.n	8012754 <readCanToStructs+0x286c>
				if ((((canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_FAULT_INJECTION_t))
 801279c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80127a0:	4a49      	ldr	r2, [pc, #292]	; (80128c8 <readCanToStructs+0x29e0>)
 80127a2:	f240 4112 	movw	r1, #1042	; 0x412
 80127a6:	fb01 f303 	mul.w	r3, r1, r3
 80127aa:	4413      	add	r3, r2
 80127ac:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 80127b0:	781b      	ldrb	r3, [r3, #0]
 80127b2:	461a      	mov	r2, r3
 80127b4:	4613      	mov	r3, r2
 80127b6:	00db      	lsls	r3, r3, #3
 80127b8:	1a9a      	subs	r2, r3, r2
 80127ba:	4b42      	ldr	r3, [pc, #264]	; (80128c4 <readCanToStructs+0x29dc>)
 80127bc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80127c0:	885b      	ldrh	r3, [r3, #2]
 80127c2:	4940      	ldr	r1, [pc, #256]	; (80128c4 <readCanToStructs+0x29dc>)
 80127c4:	011b      	lsls	r3, r3, #4
 80127c6:	440b      	add	r3, r1
 80127c8:	330c      	adds	r3, #12
 80127ca:	781b      	ldrb	r3, [r3, #0]
 80127cc:	3b01      	subs	r3, #1
 80127ce:	4413      	add	r3, r2
 80127d0:	2b03      	cmp	r3, #3
 80127d2:	d90f      	bls.n	80127f4 <readCanToStructs+0x290c>
					printf("Received CAN_FAULT_INJECTION\n");
 80127d4:	4843      	ldr	r0, [pc, #268]	; (80128e4 <readCanToStructs+0x29fc>)
 80127d6:	f00f ff81 	bl	80226dc <puts>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 80127da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80127de:	4a3a      	ldr	r2, [pc, #232]	; (80128c8 <readCanToStructs+0x29e0>)
 80127e0:	f240 4112 	movw	r1, #1042	; 0x412
 80127e4:	fb01 f303 	mul.w	r3, r1, r3
 80127e8:	4413      	add	r3, r2
 80127ea:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 80127ee:	2200      	movs	r2, #0
 80127f0:	701a      	strb	r2, [r3, #0]
 80127f2:	e1cc      	b.n	8012b8e <readCanToStructs+0x2ca6>
					canStatus[uc_index][CAN_FAULT_INJECTION].invalid = 1;
 80127f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80127f8:	4a33      	ldr	r2, [pc, #204]	; (80128c8 <readCanToStructs+0x29e0>)
 80127fa:	f240 4112 	movw	r1, #1042	; 0x412
 80127fe:	fb01 f303 	mul.w	r3, r1, r3
 8012802:	4413      	add	r3, r2
 8012804:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8012808:	2201      	movs	r2, #1
 801280a:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo++;
 801280c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012810:	492d      	ldr	r1, [pc, #180]	; (80128c8 <readCanToStructs+0x29e0>)
 8012812:	f240 4212 	movw	r2, #1042	; 0x412
 8012816:	fb03 f202 	mul.w	r2, r3, r2
 801281a:	440a      	add	r2, r1
 801281c:	f202 420b 	addw	r2, r2, #1035	; 0x40b
 8012820:	7812      	ldrb	r2, [r2, #0]
 8012822:	3201      	adds	r2, #1
 8012824:	b2d0      	uxtb	r0, r2
 8012826:	4a28      	ldr	r2, [pc, #160]	; (80128c8 <readCanToStructs+0x29e0>)
 8012828:	f240 4112 	movw	r1, #1042	; 0x412
 801282c:	fb01 f303 	mul.w	r3, r1, r3
 8012830:	4413      	add	r3, r2
 8012832:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8012836:	4602      	mov	r2, r0
 8012838:	701a      	strb	r2, [r3, #0]
				break;
 801283a:	e1a8      	b.n	8012b8e <readCanToStructs+0x2ca6>
				uc_pp_charPtr = (uint8_t *)&Medha_CAN_Relay_Status_st;
 801283c:	4b2a      	ldr	r3, [pc, #168]	; (80128e8 <readCanToStructs+0x2a00>)
 801283e:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8012840:	4b20      	ldr	r3, [pc, #128]	; (80128c4 <readCanToStructs+0x29dc>)
 8012842:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012846:	885b      	ldrh	r3, [r3, #2]
 8012848:	4a1e      	ldr	r2, [pc, #120]	; (80128c4 <readCanToStructs+0x29dc>)
 801284a:	011b      	lsls	r3, r3, #4
 801284c:	4413      	add	r3, r2
 801284e:	3304      	adds	r3, #4
 8012850:	781b      	ldrb	r3, [r3, #0]
 8012852:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 8012856:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801285a:	2b00      	cmp	r3, #0
 801285c:	d110      	bne.n	8012880 <readCanToStructs+0x2998>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_CUR_RELAY_STS_t));
 801285e:	2284      	movs	r2, #132	; 0x84
 8012860:	2100      	movs	r1, #0
 8012862:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012864:	f00f fdb6 	bl	80223d4 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8012868:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801286c:	4a16      	ldr	r2, [pc, #88]	; (80128c8 <readCanToStructs+0x29e0>)
 801286e:	f240 4112 	movw	r1, #1042	; 0x412
 8012872:	fb01 f303 	mul.w	r3, r1, r3
 8012876:	4413      	add	r3, r2
 8012878:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 801287c:	2200      	movs	r2, #0
 801287e:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo)
 8012880:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012884:	4a10      	ldr	r2, [pc, #64]	; (80128c8 <readCanToStructs+0x29e0>)
 8012886:	f240 4112 	movw	r1, #1042	; 0x412
 801288a:	fb01 f303 	mul.w	r3, r1, r3
 801288e:	4413      	add	r3, r2
 8012890:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8012894:	781b      	ldrb	r3, [r3, #0]
 8012896:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801289a:	429a      	cmp	r2, r3
 801289c:	d026      	beq.n	80128ec <readCanToStructs+0x2a04>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_CUR_RELAY_STS_t));
 801289e:	2284      	movs	r2, #132	; 0x84
 80128a0:	2100      	movs	r1, #0
 80128a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80128a4:	f00f fd96 	bl	80223d4 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 80128a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80128ac:	4a06      	ldr	r2, [pc, #24]	; (80128c8 <readCanToStructs+0x29e0>)
 80128ae:	f240 4112 	movw	r1, #1042	; 0x412
 80128b2:	fb01 f303 	mul.w	r3, r1, r3
 80128b6:	4413      	add	r3, r2
 80128b8:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80128bc:	2200      	movs	r2, #0
 80128be:	701a      	strb	r2, [r3, #0]
					break;
 80128c0:	e165      	b.n	8012b8e <readCanToStructs+0x2ca6>
 80128c2:	bf00      	nop
 80128c4:	20005a60 	.word	0x20005a60
 80128c8:	2000523c 	.word	0x2000523c
 80128cc:	08026ccc 	.word	0x08026ccc
 80128d0:	2000261c 	.word	0x2000261c
 80128d4:	20002624 	.word	0x20002624
 80128d8:	200020bc 	.word	0x200020bc
 80128dc:	200020c0 	.word	0x200020c0
 80128e0:	20002610 	.word	0x20002610
 80128e4:	08026cdc 	.word	0x08026cdc
 80128e8:	200026b0 	.word	0x200026b0
				uc_pp_charPtr += (7 * uc_seqNo);
 80128ec:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80128f0:	4613      	mov	r3, r2
 80128f2:	00db      	lsls	r3, r3, #3
 80128f4:	1a9b      	subs	r3, r3, r2
 80128f6:	461a      	mov	r2, r3
 80128f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128fa:	4413      	add	r3, r2
 80128fc:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80128fe:	2301      	movs	r3, #1
 8012900:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012904:	e016      	b.n	8012934 <readCanToStructs+0x2a4c>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8012906:	4ba8      	ldr	r3, [pc, #672]	; (8012ba8 <readCanToStructs+0x2cc0>)
 8012908:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801290c:	885b      	ldrh	r3, [r3, #2]
 801290e:	461a      	mov	r2, r3
 8012910:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012914:	49a4      	ldr	r1, [pc, #656]	; (8012ba8 <readCanToStructs+0x2cc0>)
 8012916:	0112      	lsls	r2, r2, #4
 8012918:	440a      	add	r2, r1
 801291a:	4413      	add	r3, r2
 801291c:	3304      	adds	r3, #4
 801291e:	781a      	ldrb	r2, [r3, #0]
 8012920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012922:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8012924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012926:	3301      	adds	r3, #1
 8012928:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801292a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801292e:	3301      	adds	r3, #1
 8012930:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012934:	4b9c      	ldr	r3, [pc, #624]	; (8012ba8 <readCanToStructs+0x2cc0>)
 8012936:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801293a:	885b      	ldrh	r3, [r3, #2]
 801293c:	4a9a      	ldr	r2, [pc, #616]	; (8012ba8 <readCanToStructs+0x2cc0>)
 801293e:	011b      	lsls	r3, r3, #4
 8012940:	4413      	add	r3, r2
 8012942:	330c      	adds	r3, #12
 8012944:	781b      	ldrb	r3, [r3, #0]
 8012946:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801294a:	429a      	cmp	r2, r3
 801294c:	d3db      	bcc.n	8012906 <readCanToStructs+0x2a1e>
				if ((((canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_CUR_RELAY_STS_t))
 801294e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012952:	4a96      	ldr	r2, [pc, #600]	; (8012bac <readCanToStructs+0x2cc4>)
 8012954:	f240 4112 	movw	r1, #1042	; 0x412
 8012958:	fb01 f303 	mul.w	r3, r1, r3
 801295c:	4413      	add	r3, r2
 801295e:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8012962:	781b      	ldrb	r3, [r3, #0]
 8012964:	461a      	mov	r2, r3
 8012966:	4613      	mov	r3, r2
 8012968:	00db      	lsls	r3, r3, #3
 801296a:	1a9a      	subs	r2, r3, r2
 801296c:	4b8e      	ldr	r3, [pc, #568]	; (8012ba8 <readCanToStructs+0x2cc0>)
 801296e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012972:	885b      	ldrh	r3, [r3, #2]
 8012974:	498c      	ldr	r1, [pc, #560]	; (8012ba8 <readCanToStructs+0x2cc0>)
 8012976:	011b      	lsls	r3, r3, #4
 8012978:	440b      	add	r3, r1
 801297a:	330c      	adds	r3, #12
 801297c:	781b      	ldrb	r3, [r3, #0]
 801297e:	3b01      	subs	r3, #1
 8012980:	4413      	add	r3, r2
 8012982:	2b83      	cmp	r3, #131	; 0x83
 8012984:	d915      	bls.n	80129b2 <readCanToStructs+0x2aca>
					printf("\nRCV EIPC1_RELAYS_2_OTHER\n");
 8012986:	488a      	ldr	r0, [pc, #552]	; (8012bb0 <readCanToStructs+0x2cc8>)
 8012988:	f00f fea8 	bl	80226dc <puts>
					Received_CAN_Relay_Status = YES;
 801298c:	4b89      	ldr	r3, [pc, #548]	; (8012bb4 <readCanToStructs+0x2ccc>)
 801298e:	2201      	movs	r2, #1
 8012990:	701a      	strb	r2, [r3, #0]
					Medha_CAN_Xchanging_Happening = YES;
 8012992:	4b89      	ldr	r3, [pc, #548]	; (8012bb8 <readCanToStructs+0x2cd0>)
 8012994:	2201      	movs	r2, #1
 8012996:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8012998:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801299c:	4a83      	ldr	r2, [pc, #524]	; (8012bac <readCanToStructs+0x2cc4>)
 801299e:	f240 4112 	movw	r1, #1042	; 0x412
 80129a2:	fb01 f303 	mul.w	r3, r1, r3
 80129a6:	4413      	add	r3, r2
 80129a8:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80129ac:	2200      	movs	r2, #0
 80129ae:	701a      	strb	r2, [r3, #0]
 80129b0:	e0ed      	b.n	8012b8e <readCanToStructs+0x2ca6>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].invalid = 1;
 80129b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80129b6:	4a7d      	ldr	r2, [pc, #500]	; (8012bac <readCanToStructs+0x2cc4>)
 80129b8:	f240 4112 	movw	r1, #1042	; 0x412
 80129bc:	fb01 f303 	mul.w	r3, r1, r3
 80129c0:	4413      	add	r3, r2
 80129c2:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 80129c6:	2201      	movs	r2, #1
 80129c8:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo++;
 80129ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80129ce:	4977      	ldr	r1, [pc, #476]	; (8012bac <readCanToStructs+0x2cc4>)
 80129d0:	f240 4212 	movw	r2, #1042	; 0x412
 80129d4:	fb03 f202 	mul.w	r2, r3, r2
 80129d8:	440a      	add	r2, r1
 80129da:	f202 420f 	addw	r2, r2, #1039	; 0x40f
 80129de:	7812      	ldrb	r2, [r2, #0]
 80129e0:	3201      	adds	r2, #1
 80129e2:	b2d0      	uxtb	r0, r2
 80129e4:	4a71      	ldr	r2, [pc, #452]	; (8012bac <readCanToStructs+0x2cc4>)
 80129e6:	f240 4112 	movw	r1, #1042	; 0x412
 80129ea:	fb01 f303 	mul.w	r3, r1, r3
 80129ee:	4413      	add	r3, r2
 80129f0:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80129f4:	4602      	mov	r2, r0
 80129f6:	701a      	strb	r2, [r3, #0]
				break;
 80129f8:	e0c9      	b.n	8012b8e <readCanToStructs+0x2ca6>
				uc_pp_charPtr = (uint8_t *)&Medha_CAN_Relay_Status_st;
 80129fa:	4b70      	ldr	r3, [pc, #448]	; (8012bbc <readCanToStructs+0x2cd4>)
 80129fc:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80129fe:	4b6a      	ldr	r3, [pc, #424]	; (8012ba8 <readCanToStructs+0x2cc0>)
 8012a00:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012a04:	885b      	ldrh	r3, [r3, #2]
 8012a06:	4a68      	ldr	r2, [pc, #416]	; (8012ba8 <readCanToStructs+0x2cc0>)
 8012a08:	011b      	lsls	r3, r3, #4
 8012a0a:	4413      	add	r3, r2
 8012a0c:	3304      	adds	r3, #4
 8012a0e:	781b      	ldrb	r3, [r3, #0]
 8012a10:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 8012a14:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d110      	bne.n	8012a3e <readCanToStructs+0x2b56>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_CUR_RELAY_STS_t));
 8012a1c:	2284      	movs	r2, #132	; 0x84
 8012a1e:	2100      	movs	r1, #0
 8012a20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012a22:	f00f fcd7 	bl	80223d4 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8012a26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012a2a:	4a60      	ldr	r2, [pc, #384]	; (8012bac <readCanToStructs+0x2cc4>)
 8012a2c:	f240 4112 	movw	r1, #1042	; 0x412
 8012a30:	fb01 f303 	mul.w	r3, r1, r3
 8012a34:	4413      	add	r3, r2
 8012a36:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8012a3a:	2200      	movs	r2, #0
 8012a3c:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo)
 8012a3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012a42:	4a5a      	ldr	r2, [pc, #360]	; (8012bac <readCanToStructs+0x2cc4>)
 8012a44:	f240 4112 	movw	r1, #1042	; 0x412
 8012a48:	fb01 f303 	mul.w	r3, r1, r3
 8012a4c:	4413      	add	r3, r2
 8012a4e:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8012a52:	781b      	ldrb	r3, [r3, #0]
 8012a54:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012a58:	429a      	cmp	r2, r3
 8012a5a:	d011      	beq.n	8012a80 <readCanToStructs+0x2b98>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_CUR_RELAY_STS_t));
 8012a5c:	2284      	movs	r2, #132	; 0x84
 8012a5e:	2100      	movs	r1, #0
 8012a60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012a62:	f00f fcb7 	bl	80223d4 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8012a66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012a6a:	4a50      	ldr	r2, [pc, #320]	; (8012bac <readCanToStructs+0x2cc4>)
 8012a6c:	f240 4112 	movw	r1, #1042	; 0x412
 8012a70:	fb01 f303 	mul.w	r3, r1, r3
 8012a74:	4413      	add	r3, r2
 8012a76:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8012a7a:	2200      	movs	r2, #0
 8012a7c:	701a      	strb	r2, [r3, #0]
					break;
 8012a7e:	e086      	b.n	8012b8e <readCanToStructs+0x2ca6>
				uc_pp_charPtr += (7 * uc_seqNo);
 8012a80:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012a84:	4613      	mov	r3, r2
 8012a86:	00db      	lsls	r3, r3, #3
 8012a88:	1a9b      	subs	r3, r3, r2
 8012a8a:	461a      	mov	r2, r3
 8012a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a8e:	4413      	add	r3, r2
 8012a90:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012a92:	2301      	movs	r3, #1
 8012a94:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012a98:	e016      	b.n	8012ac8 <readCanToStructs+0x2be0>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8012a9a:	4b43      	ldr	r3, [pc, #268]	; (8012ba8 <readCanToStructs+0x2cc0>)
 8012a9c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012aa0:	885b      	ldrh	r3, [r3, #2]
 8012aa2:	461a      	mov	r2, r3
 8012aa4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012aa8:	493f      	ldr	r1, [pc, #252]	; (8012ba8 <readCanToStructs+0x2cc0>)
 8012aaa:	0112      	lsls	r2, r2, #4
 8012aac:	440a      	add	r2, r1
 8012aae:	4413      	add	r3, r2
 8012ab0:	3304      	adds	r3, #4
 8012ab2:	781a      	ldrb	r2, [r3, #0]
 8012ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ab6:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8012ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012aba:	3301      	adds	r3, #1
 8012abc:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012abe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012ac2:	3301      	adds	r3, #1
 8012ac4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012ac8:	4b37      	ldr	r3, [pc, #220]	; (8012ba8 <readCanToStructs+0x2cc0>)
 8012aca:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012ace:	885b      	ldrh	r3, [r3, #2]
 8012ad0:	4a35      	ldr	r2, [pc, #212]	; (8012ba8 <readCanToStructs+0x2cc0>)
 8012ad2:	011b      	lsls	r3, r3, #4
 8012ad4:	4413      	add	r3, r2
 8012ad6:	330c      	adds	r3, #12
 8012ad8:	781b      	ldrb	r3, [r3, #0]
 8012ada:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012ade:	429a      	cmp	r2, r3
 8012ae0:	d3db      	bcc.n	8012a9a <readCanToStructs+0x2bb2>
				if ((((canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_CUR_RELAY_STS_t))
 8012ae2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012ae6:	4a31      	ldr	r2, [pc, #196]	; (8012bac <readCanToStructs+0x2cc4>)
 8012ae8:	f240 4112 	movw	r1, #1042	; 0x412
 8012aec:	fb01 f303 	mul.w	r3, r1, r3
 8012af0:	4413      	add	r3, r2
 8012af2:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8012af6:	781b      	ldrb	r3, [r3, #0]
 8012af8:	461a      	mov	r2, r3
 8012afa:	4613      	mov	r3, r2
 8012afc:	00db      	lsls	r3, r3, #3
 8012afe:	1a9a      	subs	r2, r3, r2
 8012b00:	4b29      	ldr	r3, [pc, #164]	; (8012ba8 <readCanToStructs+0x2cc0>)
 8012b02:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012b06:	885b      	ldrh	r3, [r3, #2]
 8012b08:	4927      	ldr	r1, [pc, #156]	; (8012ba8 <readCanToStructs+0x2cc0>)
 8012b0a:	011b      	lsls	r3, r3, #4
 8012b0c:	440b      	add	r3, r1
 8012b0e:	330c      	adds	r3, #12
 8012b10:	781b      	ldrb	r3, [r3, #0]
 8012b12:	3b01      	subs	r3, #1
 8012b14:	4413      	add	r3, r2
 8012b16:	2b83      	cmp	r3, #131	; 0x83
 8012b18:	d915      	bls.n	8012b46 <readCanToStructs+0x2c5e>
					printf("\nRCV RELAY_DATA_EI2\n");
 8012b1a:	4829      	ldr	r0, [pc, #164]	; (8012bc0 <readCanToStructs+0x2cd8>)
 8012b1c:	f00f fdde 	bl	80226dc <puts>
					Medha_CAN_Xchanging_Happening = YES;
 8012b20:	4b25      	ldr	r3, [pc, #148]	; (8012bb8 <readCanToStructs+0x2cd0>)
 8012b22:	2201      	movs	r2, #1
 8012b24:	701a      	strb	r2, [r3, #0]
					Received_CAN_Relay_Status = YES;
 8012b26:	4b23      	ldr	r3, [pc, #140]	; (8012bb4 <readCanToStructs+0x2ccc>)
 8012b28:	2201      	movs	r2, #1
 8012b2a:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8012b2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012b30:	4a1e      	ldr	r2, [pc, #120]	; (8012bac <readCanToStructs+0x2cc4>)
 8012b32:	f240 4112 	movw	r1, #1042	; 0x412
 8012b36:	fb01 f303 	mul.w	r3, r1, r3
 8012b3a:	4413      	add	r3, r2
 8012b3c:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8012b40:	2200      	movs	r2, #0
 8012b42:	701a      	strb	r2, [r3, #0]
 8012b44:	e022      	b.n	8012b8c <readCanToStructs+0x2ca4>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].invalid = 1;
 8012b46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012b4a:	4a18      	ldr	r2, [pc, #96]	; (8012bac <readCanToStructs+0x2cc4>)
 8012b4c:	f240 4112 	movw	r1, #1042	; 0x412
 8012b50:	fb01 f303 	mul.w	r3, r1, r3
 8012b54:	4413      	add	r3, r2
 8012b56:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8012b5a:	2201      	movs	r2, #1
 8012b5c:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo++;
 8012b5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012b62:	4912      	ldr	r1, [pc, #72]	; (8012bac <readCanToStructs+0x2cc4>)
 8012b64:	f240 4212 	movw	r2, #1042	; 0x412
 8012b68:	fb03 f202 	mul.w	r2, r3, r2
 8012b6c:	440a      	add	r2, r1
 8012b6e:	f202 4211 	addw	r2, r2, #1041	; 0x411
 8012b72:	7812      	ldrb	r2, [r2, #0]
 8012b74:	3201      	adds	r2, #1
 8012b76:	b2d0      	uxtb	r0, r2
 8012b78:	4a0c      	ldr	r2, [pc, #48]	; (8012bac <readCanToStructs+0x2cc4>)
 8012b7a:	f240 4112 	movw	r1, #1042	; 0x412
 8012b7e:	fb01 f303 	mul.w	r3, r1, r3
 8012b82:	4413      	add	r3, r2
 8012b84:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8012b88:	4602      	mov	r2, r0
 8012b8a:	701a      	strb	r2, [r3, #0]
				break;
 8012b8c:	bf00      	nop
		while(canDataReady())
 8012b8e:	f7fd f955 	bl	800fe3c <canDataReady>
 8012b92:	4603      	mov	r3, r0
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	f47f a9be 	bne.w	8011f16 <readCanToStructs+0x202e>
	break;
 8012b9a:	e002      	b.n	8012ba2 <readCanToStructs+0x2cba>
		break;
 8012b9c:	bf00      	nop
 8012b9e:	e000      	b.n	8012ba2 <readCanToStructs+0x2cba>
			return;
 8012ba0:	bf00      	nop
		/* Protocol Type */
	}
	UNUSED(uc_Loop_Index);
	UNUSED(uc_LocIndex);
}
 8012ba2:	3738      	adds	r7, #56	; 0x38
 8012ba4:	46bd      	mov	sp, r7
 8012ba6:	bd80      	pop	{r7, pc}
 8012ba8:	20005a60 	.word	0x20005a60
 8012bac:	2000523c 	.word	0x2000523c
 8012bb0:	08026cfc 	.word	0x08026cfc
 8012bb4:	200020bd 	.word	0x200020bd
 8012bb8:	200020bc 	.word	0x200020bc
 8012bbc:	200026b0 	.word	0x200026b0
 8012bc0:	08026d18 	.word	0x08026d18

08012bc4 <CheckCRC>:
}

/* USER CODE BEGIN 1 */

short int CheckCRC(unsigned char *pcMsg,short int iCount)
{
 8012bc4:	b580      	push	{r7, lr}
 8012bc6:	b084      	sub	sp, #16
 8012bc8:	af00      	add	r7, sp, #0
 8012bca:	6078      	str	r0, [r7, #4]
 8012bcc:	460b      	mov	r3, r1
 8012bce:	807b      	strh	r3, [r7, #2]
	static unsigned short int uiCrc,k = 0;
	short int retVal = 0;
 8012bd0:	2300      	movs	r3, #0
 8012bd2:	81fb      	strh	r3, [r7, #14]
	{
		printf("[%03u]:%02X ",i,pcMsg[i]);
	}
#endif

	uiCrc = GetCRC16( 0, pcMsg,iCount);
 8012bd4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012bd8:	461a      	mov	r2, r3
 8012bda:	6879      	ldr	r1, [r7, #4]
 8012bdc:	2000      	movs	r0, #0
 8012bde:	f000 f845 	bl	8012c6c <GetCRC16>
 8012be2:	4603      	mov	r3, r0
 8012be4:	461a      	mov	r2, r3
 8012be6:	4b1d      	ldr	r3, [pc, #116]	; (8012c5c <CheckCRC+0x98>)
 8012be8:	801a      	strh	r2, [r3, #0]
	k = (unsigned short int ) (pcMsg[iCount] & 0xff);
 8012bea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012bee:	687a      	ldr	r2, [r7, #4]
 8012bf0:	4413      	add	r3, r2
 8012bf2:	781b      	ldrb	r3, [r3, #0]
 8012bf4:	b29a      	uxth	r2, r3
 8012bf6:	4b1a      	ldr	r3, [pc, #104]	; (8012c60 <CheckCRC+0x9c>)
 8012bf8:	801a      	strh	r2, [r3, #0]
	k = (unsigned short int ) (k<<8);
 8012bfa:	4b19      	ldr	r3, [pc, #100]	; (8012c60 <CheckCRC+0x9c>)
 8012bfc:	881b      	ldrh	r3, [r3, #0]
 8012bfe:	021b      	lsls	r3, r3, #8
 8012c00:	b29a      	uxth	r2, r3
 8012c02:	4b17      	ldr	r3, [pc, #92]	; (8012c60 <CheckCRC+0x9c>)
 8012c04:	801a      	strh	r2, [r3, #0]
	k |= pcMsg[iCount+1] & 0xff;
 8012c06:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012c0a:	3301      	adds	r3, #1
 8012c0c:	687a      	ldr	r2, [r7, #4]
 8012c0e:	4413      	add	r3, r2
 8012c10:	781b      	ldrb	r3, [r3, #0]
 8012c12:	b29a      	uxth	r2, r3
 8012c14:	4b12      	ldr	r3, [pc, #72]	; (8012c60 <CheckCRC+0x9c>)
 8012c16:	881b      	ldrh	r3, [r3, #0]
 8012c18:	4313      	orrs	r3, r2
 8012c1a:	b29a      	uxth	r2, r3
 8012c1c:	4b10      	ldr	r3, [pc, #64]	; (8012c60 <CheckCRC+0x9c>)
 8012c1e:	801a      	strh	r2, [r3, #0]

	if(k == uiCrc)
 8012c20:	4b0f      	ldr	r3, [pc, #60]	; (8012c60 <CheckCRC+0x9c>)
 8012c22:	881a      	ldrh	r2, [r3, #0]
 8012c24:	4b0d      	ldr	r3, [pc, #52]	; (8012c5c <CheckCRC+0x98>)
 8012c26:	881b      	ldrh	r3, [r3, #0]
 8012c28:	429a      	cmp	r2, r3
 8012c2a:	d105      	bne.n	8012c38 <CheckCRC+0x74>
	{
		retVal = 1;
 8012c2c:	2301      	movs	r3, #1
 8012c2e:	81fb      	strh	r3, [r7, #14]
		return k;
 8012c30:	4b0b      	ldr	r3, [pc, #44]	; (8012c60 <CheckCRC+0x9c>)
 8012c32:	881b      	ldrh	r3, [r3, #0]
 8012c34:	b21b      	sxth	r3, r3
 8012c36:	e00d      	b.n	8012c54 <CheckCRC+0x90>
	}
	printf("\nCalculated CRC:%04x\n",uiCrc);
 8012c38:	4b08      	ldr	r3, [pc, #32]	; (8012c5c <CheckCRC+0x98>)
 8012c3a:	881b      	ldrh	r3, [r3, #0]
 8012c3c:	4619      	mov	r1, r3
 8012c3e:	4809      	ldr	r0, [pc, #36]	; (8012c64 <CheckCRC+0xa0>)
 8012c40:	f00f fcb0 	bl	80225a4 <iprintf>
	printf("\nExtracted CRC :%04x\n",k);
 8012c44:	4b06      	ldr	r3, [pc, #24]	; (8012c60 <CheckCRC+0x9c>)
 8012c46:	881b      	ldrh	r3, [r3, #0]
 8012c48:	4619      	mov	r1, r3
 8012c4a:	4807      	ldr	r0, [pc, #28]	; (8012c68 <CheckCRC+0xa4>)
 8012c4c:	f00f fcaa 	bl	80225a4 <iprintf>
	return retVal;
 8012c50:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8012c54:	4618      	mov	r0, r3
 8012c56:	3710      	adds	r7, #16
 8012c58:	46bd      	mov	sp, r7
 8012c5a:	bd80      	pop	{r7, pc}
 8012c5c:	20009bbc 	.word	0x20009bbc
 8012c60:	20009bbe 	.word	0x20009bbe
 8012c64:	08026d2c 	.word	0x08026d2c
 8012c68:	08026d44 	.word	0x08026d44

08012c6c <GetCRC16>:

unsigned short int GetCRC16 (short int iStart,unsigned char *pcPtr, short int iNum)
{
 8012c6c:	b480      	push	{r7}
 8012c6e:	b085      	sub	sp, #20
 8012c70:	af00      	add	r7, sp, #0
 8012c72:	4603      	mov	r3, r0
 8012c74:	6039      	str	r1, [r7, #0]
 8012c76:	80fb      	strh	r3, [r7, #6]
 8012c78:	4613      	mov	r3, r2
 8012c7a:	80bb      	strh	r3, [r7, #4]
	unsigned short int uiCrc = (unsigned short int ) iStart;
 8012c7c:	88fb      	ldrh	r3, [r7, #6]
 8012c7e:	81fb      	strh	r3, [r7, #14]
	short int r;

	/* while there is more data to process */
	while (iNum-- > 0)
 8012c80:	e038      	b.n	8012cf4 <GetCRC16+0x88>
	{
		/* compute checksum of lower four bits of *pcPtr */
		r = ulCrc16Table[uiCrc & 0xF];
 8012c82:	89fb      	ldrh	r3, [r7, #14]
 8012c84:	f003 030f 	and.w	r3, r3, #15
 8012c88:	4a22      	ldr	r2, [pc, #136]	; (8012d14 <GetCRC16+0xa8>)
 8012c8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012c8e:	81bb      	strh	r3, [r7, #12]
		uiCrc = (unsigned short int) ((uiCrc >> 4) & 0x0FFF);
 8012c90:	89fb      	ldrh	r3, [r7, #14]
 8012c92:	091b      	lsrs	r3, r3, #4
 8012c94:	81fb      	strh	r3, [r7, #14]
		uiCrc = (unsigned short int) (uiCrc ^ r ^ ulCrc16Table[*pcPtr & 0xF]);
 8012c96:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8012c9a:	89bb      	ldrh	r3, [r7, #12]
 8012c9c:	4053      	eors	r3, r2
 8012c9e:	b21a      	sxth	r2, r3
 8012ca0:	683b      	ldr	r3, [r7, #0]
 8012ca2:	781b      	ldrb	r3, [r3, #0]
 8012ca4:	f003 030f 	and.w	r3, r3, #15
 8012ca8:	491a      	ldr	r1, [pc, #104]	; (8012d14 <GetCRC16+0xa8>)
 8012caa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8012cae:	b21b      	sxth	r3, r3
 8012cb0:	4053      	eors	r3, r2
 8012cb2:	b21b      	sxth	r3, r3
 8012cb4:	81fb      	strh	r3, [r7, #14]

		/* now compute checksum of upper four bits of *pcPtr */
		r = ulCrc16Table[uiCrc & 0xF];
 8012cb6:	89fb      	ldrh	r3, [r7, #14]
 8012cb8:	f003 030f 	and.w	r3, r3, #15
 8012cbc:	4a15      	ldr	r2, [pc, #84]	; (8012d14 <GetCRC16+0xa8>)
 8012cbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012cc2:	81bb      	strh	r3, [r7, #12]
		uiCrc =(unsigned short int) ((uiCrc >> 4) & 0x0FFF);
 8012cc4:	89fb      	ldrh	r3, [r7, #14]
 8012cc6:	091b      	lsrs	r3, r3, #4
 8012cc8:	81fb      	strh	r3, [r7, #14]
		uiCrc =(unsigned short int) (uiCrc ^ r ^ ulCrc16Table[(*pcPtr >> 4) & 0xF]);
 8012cca:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8012cce:	89bb      	ldrh	r3, [r7, #12]
 8012cd0:	4053      	eors	r3, r2
 8012cd2:	b21a      	sxth	r2, r3
 8012cd4:	683b      	ldr	r3, [r7, #0]
 8012cd6:	781b      	ldrb	r3, [r3, #0]
 8012cd8:	091b      	lsrs	r3, r3, #4
 8012cda:	b2db      	uxtb	r3, r3
 8012cdc:	f003 030f 	and.w	r3, r3, #15
 8012ce0:	490c      	ldr	r1, [pc, #48]	; (8012d14 <GetCRC16+0xa8>)
 8012ce2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8012ce6:	b21b      	sxth	r3, r3
 8012ce8:	4053      	eors	r3, r2
 8012cea:	b21b      	sxth	r3, r3
 8012cec:	81fb      	strh	r3, [r7, #14]

		/* next... */
		pcPtr++;
 8012cee:	683b      	ldr	r3, [r7, #0]
 8012cf0:	3301      	adds	r3, #1
 8012cf2:	603b      	str	r3, [r7, #0]
	while (iNum-- > 0)
 8012cf4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012cf8:	b29a      	uxth	r2, r3
 8012cfa:	3a01      	subs	r2, #1
 8012cfc:	b292      	uxth	r2, r2
 8012cfe:	80ba      	strh	r2, [r7, #4]
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	dcbe      	bgt.n	8012c82 <GetCRC16+0x16>
	}
	return(uiCrc);
 8012d04:	89fb      	ldrh	r3, [r7, #14]
}
 8012d06:	4618      	mov	r0, r3
 8012d08:	3714      	adds	r7, #20
 8012d0a:	46bd      	mov	sp, r7
 8012d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d10:	4770      	bx	lr
 8012d12:	bf00      	nop
 8012d14:	08028ed8 	.word	0x08028ed8

08012d18 <ComputeCRC>:

unsigned short int ComputeCRC(unsigned char *uc_pp_pcMsg, const short int Ksi_iCount)
{
 8012d18:	b580      	push	{r7, lr}
 8012d1a:	b082      	sub	sp, #8
 8012d1c:	af00      	add	r7, sp, #0
 8012d1e:	6078      	str	r0, [r7, #4]
 8012d20:	460b      	mov	r3, r1
 8012d22:	807b      	strh	r3, [r7, #2]
	static unsigned short int Susi_uiCrc = 0,Susi_CalculateCRC = 0;
	Susi_uiCrc = GetCRC16( 0, uc_pp_pcMsg, Ksi_iCount);
 8012d24:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012d28:	461a      	mov	r2, r3
 8012d2a:	6879      	ldr	r1, [r7, #4]
 8012d2c:	2000      	movs	r0, #0
 8012d2e:	f7ff ff9d 	bl	8012c6c <GetCRC16>
 8012d32:	4603      	mov	r3, r0
 8012d34:	461a      	mov	r2, r3
 8012d36:	4b11      	ldr	r3, [pc, #68]	; (8012d7c <ComputeCRC+0x64>)
 8012d38:	801a      	strh	r2, [r3, #0]
	Susi_CalculateCRC=Susi_uiCrc;
 8012d3a:	4b10      	ldr	r3, [pc, #64]	; (8012d7c <ComputeCRC+0x64>)
 8012d3c:	881a      	ldrh	r2, [r3, #0]
 8012d3e:	4b10      	ldr	r3, [pc, #64]	; (8012d80 <ComputeCRC+0x68>)
 8012d40:	801a      	strh	r2, [r3, #0]

	uc_pp_pcMsg[Ksi_iCount+1] = (char) (Susi_uiCrc & 0x00ff);
 8012d42:	4b0e      	ldr	r3, [pc, #56]	; (8012d7c <ComputeCRC+0x64>)
 8012d44:	8819      	ldrh	r1, [r3, #0]
 8012d46:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012d4a:	3301      	adds	r3, #1
 8012d4c:	687a      	ldr	r2, [r7, #4]
 8012d4e:	4413      	add	r3, r2
 8012d50:	b2ca      	uxtb	r2, r1
 8012d52:	701a      	strb	r2, [r3, #0]
	Susi_uiCrc =(unsigned short int) (Susi_uiCrc >> 8);
 8012d54:	4b09      	ldr	r3, [pc, #36]	; (8012d7c <ComputeCRC+0x64>)
 8012d56:	881b      	ldrh	r3, [r3, #0]
 8012d58:	0a1b      	lsrs	r3, r3, #8
 8012d5a:	b29a      	uxth	r2, r3
 8012d5c:	4b07      	ldr	r3, [pc, #28]	; (8012d7c <ComputeCRC+0x64>)
 8012d5e:	801a      	strh	r2, [r3, #0]
	uc_pp_pcMsg[Ksi_iCount] = (char) (Susi_uiCrc & 0x00ff);
 8012d60:	4b06      	ldr	r3, [pc, #24]	; (8012d7c <ComputeCRC+0x64>)
 8012d62:	8819      	ldrh	r1, [r3, #0]
 8012d64:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012d68:	687a      	ldr	r2, [r7, #4]
 8012d6a:	4413      	add	r3, r2
 8012d6c:	b2ca      	uxtb	r2, r1
 8012d6e:	701a      	strb	r2, [r3, #0]


	return Susi_CalculateCRC;
 8012d70:	4b03      	ldr	r3, [pc, #12]	; (8012d80 <ComputeCRC+0x68>)
 8012d72:	881b      	ldrh	r3, [r3, #0]
}
 8012d74:	4618      	mov	r0, r3
 8012d76:	3708      	adds	r7, #8
 8012d78:	46bd      	mov	sp, r7
 8012d7a:	bd80      	pop	{r7, pc}
 8012d7c:	20009bc0 	.word	0x20009bc0
 8012d80:	20009bc2 	.word	0x20009bc2

08012d84 <ReverseCRCPolynomial>:


/*____________________________ANSALDO_CRC__________________________*/

unsigned int ReverseCRCPolynomial(unsigned int polynomial)
{
 8012d84:	b480      	push	{r7}
 8012d86:	b087      	sub	sp, #28
 8012d88:	af00      	add	r7, sp, #0
 8012d8a:	6078      	str	r0, [r7, #4]
	unsigned int RevPol = 0;
 8012d8c:	2300      	movs	r3, #0
 8012d8e:	617b      	str	r3, [r7, #20]
	unsigned int TempPol = 0;
 8012d90:	2300      	movs	r3, #0
 8012d92:	613b      	str	r3, [r7, #16]
	unsigned int Temp = 0;
 8012d94:	2300      	movs	r3, #0
 8012d96:	60bb      	str	r3, [r7, #8]
	int i;

	TempPol = polynomial << 1; // Remove MSB by shifting one position
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	005b      	lsls	r3, r3, #1
 8012d9c:	613b      	str	r3, [r7, #16]

	for (i = 0; i < 32; i++)
 8012d9e:	2300      	movs	r3, #0
 8012da0:	60fb      	str	r3, [r7, #12]
 8012da2:	e012      	b.n	8012dca <ReverseCRCPolynomial+0x46>
	{

		Temp = (TempPol & 1);
 8012da4:	693b      	ldr	r3, [r7, #16]
 8012da6:	f003 0301 	and.w	r3, r3, #1
 8012daa:	60bb      	str	r3, [r7, #8]
		RevPol = RevPol | (Temp << (31 - i));
 8012dac:	68fb      	ldr	r3, [r7, #12]
 8012dae:	f1c3 031f 	rsb	r3, r3, #31
 8012db2:	68ba      	ldr	r2, [r7, #8]
 8012db4:	fa02 f303 	lsl.w	r3, r2, r3
 8012db8:	697a      	ldr	r2, [r7, #20]
 8012dba:	4313      	orrs	r3, r2
 8012dbc:	617b      	str	r3, [r7, #20]
		TempPol = TempPol >> 1;
 8012dbe:	693b      	ldr	r3, [r7, #16]
 8012dc0:	085b      	lsrs	r3, r3, #1
 8012dc2:	613b      	str	r3, [r7, #16]
	for (i = 0; i < 32; i++)
 8012dc4:	68fb      	ldr	r3, [r7, #12]
 8012dc6:	3301      	adds	r3, #1
 8012dc8:	60fb      	str	r3, [r7, #12]
 8012dca:	68fb      	ldr	r3, [r7, #12]
 8012dcc:	2b1f      	cmp	r3, #31
 8012dce:	dde9      	ble.n	8012da4 <ReverseCRCPolynomial+0x20>
	}

	return (RevPol);
 8012dd0:	697b      	ldr	r3, [r7, #20]
}
 8012dd2:	4618      	mov	r0, r3
 8012dd4:	371c      	adds	r7, #28
 8012dd6:	46bd      	mov	sp, r7
 8012dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ddc:	4770      	bx	lr
	...

08012de0 <CalculateDirectReverseCrc>:

unsigned int CalculateDirectReverseCrc(unsigned char *Arr, unsigned short int Listsize)
{
 8012de0:	b580      	push	{r7, lr}
 8012de2:	b088      	sub	sp, #32
 8012de4:	af00      	add	r7, sp, #0
 8012de6:	6078      	str	r0, [r7, #4]
 8012de8:	460b      	mov	r3, r1
 8012dea:	807b      	strh	r3, [r7, #2]
	int Crc = 0;
 8012dec:	2300      	movs	r3, #0
 8012dee:	61fb      	str	r3, [r7, #28]
	unsigned int RPoly = 0;
 8012df0:	2300      	movs	r3, #0
 8012df2:	617b      	str	r3, [r7, #20]
	int converted = 0;
 8012df4:	2300      	movs	r3, #0
 8012df6:	613b      	str	r3, [r7, #16]
	int i=0;
 8012df8:	2300      	movs	r3, #0
 8012dfa:	61bb      	str	r3, [r7, #24]
	unsigned int polynomial = 0xD20D8A81;
 8012dfc:	4b26      	ldr	r3, [pc, #152]	; (8012e98 <CalculateDirectReverseCrc+0xb8>)
 8012dfe:	60fb      	str	r3, [r7, #12]

	//printf("Arr[0]=0x%x\n",Arr[0]);
	//printf("Arr[%d]=0x%x\n",Listsize,Arr[Listsize]);
	RPoly = ReverseCRCPolynomial(polynomial);
 8012e00:	68f8      	ldr	r0, [r7, #12]
 8012e02:	f7ff ffbf 	bl	8012d84 <ReverseCRCPolynomial>
 8012e06:	6178      	str	r0, [r7, #20]

	for (i = 0; i < Listsize; i++)
 8012e08:	2300      	movs	r3, #0
 8012e0a:	61bb      	str	r3, [r7, #24]
 8012e0c:	e00d      	b.n	8012e2a <CalculateDirectReverseCrc+0x4a>
	{
		//	printf("ARR[%d]=0x%x|",i,Arr[i]);
		Crc = AnsoldoCrc(Crc, Arr[i], RPoly);
 8012e0e:	69f8      	ldr	r0, [r7, #28]
 8012e10:	69bb      	ldr	r3, [r7, #24]
 8012e12:	687a      	ldr	r2, [r7, #4]
 8012e14:	4413      	add	r3, r2
 8012e16:	781b      	ldrb	r3, [r3, #0]
 8012e18:	697a      	ldr	r2, [r7, #20]
 8012e1a:	4619      	mov	r1, r3
 8012e1c:	f000 f844 	bl	8012ea8 <AnsoldoCrc>
 8012e20:	4603      	mov	r3, r0
 8012e22:	61fb      	str	r3, [r7, #28]
	for (i = 0; i < Listsize; i++)
 8012e24:	69bb      	ldr	r3, [r7, #24]
 8012e26:	3301      	adds	r3, #1
 8012e28:	61bb      	str	r3, [r7, #24]
 8012e2a:	887b      	ldrh	r3, [r7, #2]
 8012e2c:	69ba      	ldr	r2, [r7, #24]
 8012e2e:	429a      	cmp	r2, r3
 8012e30:	dbed      	blt.n	8012e0e <CalculateDirectReverseCrc+0x2e>
	}
	/*____________________REVERSE CRC____________________*/
	//printf("Before Calculated crc:0x%x\n", Crc);
	converted |= ((0xff & Crc) << 24);
 8012e32:	69fb      	ldr	r3, [r7, #28]
 8012e34:	061b      	lsls	r3, r3, #24
 8012e36:	693a      	ldr	r2, [r7, #16]
 8012e38:	4313      	orrs	r3, r2
 8012e3a:	613b      	str	r3, [r7, #16]
	converted |= (((0xff << 8) & Crc) << 8);
 8012e3c:	69fb      	ldr	r3, [r7, #28]
 8012e3e:	021b      	lsls	r3, r3, #8
 8012e40:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8012e44:	693a      	ldr	r2, [r7, #16]
 8012e46:	4313      	orrs	r3, r2
 8012e48:	613b      	str	r3, [r7, #16]
	converted |= (((0xff << 16) & Crc) >> 8);
 8012e4a:	69fb      	ldr	r3, [r7, #28]
 8012e4c:	121b      	asrs	r3, r3, #8
 8012e4e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8012e52:	693a      	ldr	r2, [r7, #16]
 8012e54:	4313      	orrs	r3, r2
 8012e56:	613b      	str	r3, [r7, #16]
	converted |= (((0xffu << 24) & Crc) >> 24); //Appended u to avoid warning out of range
 8012e58:	69fb      	ldr	r3, [r7, #28]
 8012e5a:	0e1a      	lsrs	r2, r3, #24
 8012e5c:	693b      	ldr	r3, [r7, #16]
 8012e5e:	4313      	orrs	r3, r2
 8012e60:	613b      	str	r3, [r7, #16]
	/*____________________REVERSE CRC____________________*/
	//printf("After Calculated crc:0x%x\n", converted);

	if(Rx_Seq_failure == 1)
 8012e62:	4b0e      	ldr	r3, [pc, #56]	; (8012e9c <CalculateDirectReverseCrc+0xbc>)
 8012e64:	781b      	ldrb	r3, [r3, #0]
 8012e66:	2b01      	cmp	r3, #1
 8012e68:	d110      	bne.n	8012e8c <CalculateDirectReverseCrc+0xac>
	{
		return (converted+(HAL_RNG_GetRandomNumber(&hrng) % 10) + 1);
 8012e6a:	480d      	ldr	r0, [pc, #52]	; (8012ea0 <CalculateDirectReverseCrc+0xc0>)
 8012e6c:	f007 f842 	bl	8019ef4 <HAL_RNG_GetRandomNumber>
 8012e70:	4601      	mov	r1, r0
 8012e72:	4b0c      	ldr	r3, [pc, #48]	; (8012ea4 <CalculateDirectReverseCrc+0xc4>)
 8012e74:	fba3 2301 	umull	r2, r3, r3, r1
 8012e78:	08da      	lsrs	r2, r3, #3
 8012e7a:	4613      	mov	r3, r2
 8012e7c:	009b      	lsls	r3, r3, #2
 8012e7e:	4413      	add	r3, r2
 8012e80:	005b      	lsls	r3, r3, #1
 8012e82:	1aca      	subs	r2, r1, r3
 8012e84:	693b      	ldr	r3, [r7, #16]
 8012e86:	4413      	add	r3, r2
 8012e88:	3301      	adds	r3, #1
 8012e8a:	e000      	b.n	8012e8e <CalculateDirectReverseCrc+0xae>
	}

	return converted;
 8012e8c:	693b      	ldr	r3, [r7, #16]
}
 8012e8e:	4618      	mov	r0, r3
 8012e90:	3720      	adds	r7, #32
 8012e92:	46bd      	mov	sp, r7
 8012e94:	bd80      	pop	{r7, pc}
 8012e96:	bf00      	nop
 8012e98:	d20d8a81 	.word	0xd20d8a81
 8012e9c:	20000e44 	.word	0x20000e44
 8012ea0:	20009c84 	.word	0x20009c84
 8012ea4:	cccccccd 	.word	0xcccccccd

08012ea8 <AnsoldoCrc>:

unsigned int AnsoldoCrc(unsigned int Crc, unsigned char InputData, unsigned int Rpoly)
{
 8012ea8:	b480      	push	{r7}
 8012eaa:	b08b      	sub	sp, #44	; 0x2c
 8012eac:	af00      	add	r7, sp, #0
 8012eae:	60f8      	str	r0, [r7, #12]
 8012eb0:	460b      	mov	r3, r1
 8012eb2:	607a      	str	r2, [r7, #4]
 8012eb4:	72fb      	strb	r3, [r7, #11]
	unsigned char i;
	unsigned int xorvalue; /* XOR of bit of data and EDC values */
	unsigned int CrcLsb;   /* Bit 0 of EDC value / uint DataLsb; / Bit 0 of data byte */
	unsigned int DataLsb;
	unsigned int databyte;				/* Current shifted value of data byte */
	databyte = (unsigned int)InputData; /* translated from char to int format */
 8012eb6:	7afb      	ldrb	r3, [r7, #11]
 8012eb8:	623b      	str	r3, [r7, #32]

	for (i = 1; i <= 8; i++)
 8012eba:	2301      	movs	r3, #1
 8012ebc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012ec0:	e01d      	b.n	8012efe <AnsoldoCrc+0x56>
	{
		CrcLsb = Crc & 1;		/* get LSB of CRC Value */
 8012ec2:	68fb      	ldr	r3, [r7, #12]
 8012ec4:	f003 0301 	and.w	r3, r3, #1
 8012ec8:	61fb      	str	r3, [r7, #28]
		DataLsb = databyte & 1; /*get LSB of Data */
 8012eca:	6a3b      	ldr	r3, [r7, #32]
 8012ecc:	f003 0301 	and.w	r3, r3, #1
 8012ed0:	61bb      	str	r3, [r7, #24]
		/*byte of current bits left in data */
		Crc >>= 1; /* shift CRC by one bit */
 8012ed2:	68fb      	ldr	r3, [r7, #12]
 8012ed4:	085b      	lsrs	r3, r3, #1
 8012ed6:	60fb      	str	r3, [r7, #12]
		xorvalue = CrcLsb ^ DataLsb;
 8012ed8:	69fa      	ldr	r2, [r7, #28]
 8012eda:	69bb      	ldr	r3, [r7, #24]
 8012edc:	4053      	eors	r3, r2
 8012ede:	617b      	str	r3, [r7, #20]

		if (xorvalue == 1)
 8012ee0:	697b      	ldr	r3, [r7, #20]
 8012ee2:	2b01      	cmp	r3, #1
 8012ee4:	d103      	bne.n	8012eee <AnsoldoCrc+0x46>
		{
			Crc ^= Rpoly; /* XOR not zero then xor in poly */
 8012ee6:	68fa      	ldr	r2, [r7, #12]
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	4053      	eors	r3, r2
 8012eec:	60fb      	str	r3, [r7, #12]
		}
		databyte >>= 1; /* Shift data byte*/
 8012eee:	6a3b      	ldr	r3, [r7, #32]
 8012ef0:	085b      	lsrs	r3, r3, #1
 8012ef2:	623b      	str	r3, [r7, #32]
	for (i = 1; i <= 8; i++)
 8012ef4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012ef8:	3301      	adds	r3, #1
 8012efa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012efe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012f02:	2b08      	cmp	r3, #8
 8012f04:	d9dd      	bls.n	8012ec2 <AnsoldoCrc+0x1a>
	}
	return (Crc);
 8012f06:	68fb      	ldr	r3, [r7, #12]
}
 8012f08:	4618      	mov	r0, r3
 8012f0a:	372c      	adds	r7, #44	; 0x2c
 8012f0c:	46bd      	mov	sp, r7
 8012f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f12:	4770      	bx	lr

08012f14 <MX_GPIO_Init>:
        * EXTI
     PD0   ------> CAN1_RX
     PD1   ------> CAN1_TX
*/
void MX_GPIO_Init(void)
{
 8012f14:	b580      	push	{r7, lr}
 8012f16:	b090      	sub	sp, #64	; 0x40
 8012f18:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012f1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012f1e:	2200      	movs	r2, #0
 8012f20:	601a      	str	r2, [r3, #0]
 8012f22:	605a      	str	r2, [r3, #4]
 8012f24:	609a      	str	r2, [r3, #8]
 8012f26:	60da      	str	r2, [r3, #12]
 8012f28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8012f2a:	4bb2      	ldr	r3, [pc, #712]	; (80131f4 <MX_GPIO_Init+0x2e0>)
 8012f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f2e:	4ab1      	ldr	r2, [pc, #708]	; (80131f4 <MX_GPIO_Init+0x2e0>)
 8012f30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012f34:	6313      	str	r3, [r2, #48]	; 0x30
 8012f36:	4baf      	ldr	r3, [pc, #700]	; (80131f4 <MX_GPIO_Init+0x2e0>)
 8012f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012f3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8012f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8012f42:	4bac      	ldr	r3, [pc, #688]	; (80131f4 <MX_GPIO_Init+0x2e0>)
 8012f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f46:	4aab      	ldr	r2, [pc, #684]	; (80131f4 <MX_GPIO_Init+0x2e0>)
 8012f48:	f043 0320 	orr.w	r3, r3, #32
 8012f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8012f4e:	4ba9      	ldr	r3, [pc, #676]	; (80131f4 <MX_GPIO_Init+0x2e0>)
 8012f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f52:	f003 0320 	and.w	r3, r3, #32
 8012f56:	627b      	str	r3, [r7, #36]	; 0x24
 8012f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8012f5a:	4ba6      	ldr	r3, [pc, #664]	; (80131f4 <MX_GPIO_Init+0x2e0>)
 8012f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f5e:	4aa5      	ldr	r2, [pc, #660]	; (80131f4 <MX_GPIO_Init+0x2e0>)
 8012f60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012f64:	6313      	str	r3, [r2, #48]	; 0x30
 8012f66:	4ba3      	ldr	r3, [pc, #652]	; (80131f4 <MX_GPIO_Init+0x2e0>)
 8012f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012f6e:	623b      	str	r3, [r7, #32]
 8012f70:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8012f72:	4ba0      	ldr	r3, [pc, #640]	; (80131f4 <MX_GPIO_Init+0x2e0>)
 8012f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f76:	4a9f      	ldr	r2, [pc, #636]	; (80131f4 <MX_GPIO_Init+0x2e0>)
 8012f78:	f043 0304 	orr.w	r3, r3, #4
 8012f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8012f7e:	4b9d      	ldr	r3, [pc, #628]	; (80131f4 <MX_GPIO_Init+0x2e0>)
 8012f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f82:	f003 0304 	and.w	r3, r3, #4
 8012f86:	61fb      	str	r3, [r7, #28]
 8012f88:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8012f8a:	4b9a      	ldr	r3, [pc, #616]	; (80131f4 <MX_GPIO_Init+0x2e0>)
 8012f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f8e:	4a99      	ldr	r2, [pc, #612]	; (80131f4 <MX_GPIO_Init+0x2e0>)
 8012f90:	f043 0301 	orr.w	r3, r3, #1
 8012f94:	6313      	str	r3, [r2, #48]	; 0x30
 8012f96:	4b97      	ldr	r3, [pc, #604]	; (80131f4 <MX_GPIO_Init+0x2e0>)
 8012f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f9a:	f003 0301 	and.w	r3, r3, #1
 8012f9e:	61bb      	str	r3, [r7, #24]
 8012fa0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8012fa2:	4b94      	ldr	r3, [pc, #592]	; (80131f4 <MX_GPIO_Init+0x2e0>)
 8012fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012fa6:	4a93      	ldr	r2, [pc, #588]	; (80131f4 <MX_GPIO_Init+0x2e0>)
 8012fa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012fac:	6313      	str	r3, [r2, #48]	; 0x30
 8012fae:	4b91      	ldr	r3, [pc, #580]	; (80131f4 <MX_GPIO_Init+0x2e0>)
 8012fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012fb6:	617b      	str	r3, [r7, #20]
 8012fb8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8012fba:	4b8e      	ldr	r3, [pc, #568]	; (80131f4 <MX_GPIO_Init+0x2e0>)
 8012fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012fbe:	4a8d      	ldr	r2, [pc, #564]	; (80131f4 <MX_GPIO_Init+0x2e0>)
 8012fc0:	f043 0310 	orr.w	r3, r3, #16
 8012fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8012fc6:	4b8b      	ldr	r3, [pc, #556]	; (80131f4 <MX_GPIO_Init+0x2e0>)
 8012fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012fca:	f003 0310 	and.w	r3, r3, #16
 8012fce:	613b      	str	r3, [r7, #16]
 8012fd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8012fd2:	4b88      	ldr	r3, [pc, #544]	; (80131f4 <MX_GPIO_Init+0x2e0>)
 8012fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012fd6:	4a87      	ldr	r2, [pc, #540]	; (80131f4 <MX_GPIO_Init+0x2e0>)
 8012fd8:	f043 0302 	orr.w	r3, r3, #2
 8012fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8012fde:	4b85      	ldr	r3, [pc, #532]	; (80131f4 <MX_GPIO_Init+0x2e0>)
 8012fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012fe2:	f003 0302 	and.w	r3, r3, #2
 8012fe6:	60fb      	str	r3, [r7, #12]
 8012fe8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8012fea:	4b82      	ldr	r3, [pc, #520]	; (80131f4 <MX_GPIO_Init+0x2e0>)
 8012fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012fee:	4a81      	ldr	r2, [pc, #516]	; (80131f4 <MX_GPIO_Init+0x2e0>)
 8012ff0:	f043 0308 	orr.w	r3, r3, #8
 8012ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8012ff6:	4b7f      	ldr	r3, [pc, #508]	; (80131f4 <MX_GPIO_Init+0x2e0>)
 8012ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ffa:	f003 0308 	and.w	r3, r3, #8
 8012ffe:	60bb      	str	r3, [r7, #8]
 8013000:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8013002:	4b7c      	ldr	r3, [pc, #496]	; (80131f4 <MX_GPIO_Init+0x2e0>)
 8013004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013006:	4a7b      	ldr	r2, [pc, #492]	; (80131f4 <MX_GPIO_Init+0x2e0>)
 8013008:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801300c:	6313      	str	r3, [r2, #48]	; 0x30
 801300e:	4b79      	ldr	r3, [pc, #484]	; (80131f4 <MX_GPIO_Init+0x2e0>)
 8013010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013012:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8013016:	607b      	str	r3, [r7, #4]
 8013018:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 801301a:	4b76      	ldr	r3, [pc, #472]	; (80131f4 <MX_GPIO_Init+0x2e0>)
 801301c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801301e:	4a75      	ldr	r2, [pc, #468]	; (80131f4 <MX_GPIO_Init+0x2e0>)
 8013020:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8013024:	6313      	str	r3, [r2, #48]	; 0x30
 8013026:	4b73      	ldr	r3, [pc, #460]	; (80131f4 <MX_GPIO_Init+0x2e0>)
 8013028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801302a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801302e:	603b      	str	r3, [r7, #0]
 8013030:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, OP5_Pin|OP8_Pin, GPIO_PIN_RESET);
 8013032:	2200      	movs	r2, #0
 8013034:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 8013038:	486f      	ldr	r0, [pc, #444]	; (80131f8 <MX_GPIO_Init+0x2e4>)
 801303a:	f004 ff79 	bl	8017f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, OP1_Pin|OP4_Pin, GPIO_PIN_RESET);
 801303e:	2200      	movs	r2, #0
 8013040:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8013044:	486d      	ldr	r0, [pc, #436]	; (80131fc <MX_GPIO_Init+0x2e8>)
 8013046:	f004 ff73 	bl	8017f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, OP7_Pin|S1_LED_Pin|S2_LED_Pin|OP9_Pin, GPIO_PIN_RESET);
 801304a:	2200      	movs	r2, #0
 801304c:	f240 7104 	movw	r1, #1796	; 0x704
 8013050:	486b      	ldr	r0, [pc, #428]	; (8013200 <MX_GPIO_Init+0x2ec>)
 8013052:	f004 ff6d 	bl	8017f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS4_GPIO_Port, CS4_Pin, GPIO_PIN_SET);
 8013056:	2201      	movs	r2, #1
 8013058:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801305c:	4869      	ldr	r0, [pc, #420]	; (8013204 <MX_GPIO_Init+0x2f0>)
 801305e:	f004 ff67 	bl	8017f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OP3_Pin|OP6_Pin, GPIO_PIN_RESET);
 8013062:	2200      	movs	r2, #0
 8013064:	f241 0104 	movw	r1, #4100	; 0x1004
 8013068:	4867      	ldr	r0, [pc, #412]	; (8013208 <MX_GPIO_Init+0x2f4>)
 801306a:	f004 ff61 	bl	8017f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_RESET_GPIO_Port, SPI_RESET_Pin, GPIO_PIN_SET);
 801306e:	2201      	movs	r2, #1
 8013070:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8013074:	4865      	ldr	r0, [pc, #404]	; (801320c <MX_GPIO_Init+0x2f8>)
 8013076:	f004 ff5b 	bl	8017f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OP2_GPIO_Port, OP2_Pin, GPIO_PIN_RESET);
 801307a:	2200      	movs	r2, #0
 801307c:	2108      	movs	r1, #8
 801307e:	4864      	ldr	r0, [pc, #400]	; (8013210 <MX_GPIO_Init+0x2fc>)
 8013080:	f004 ff56 	bl	8017f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CS2_Pin|CS3_Pin, GPIO_PIN_SET);
 8013084:	2201      	movs	r2, #1
 8013086:	2160      	movs	r1, #96	; 0x60
 8013088:	4861      	ldr	r0, [pc, #388]	; (8013210 <MX_GPIO_Init+0x2fc>)
 801308a:	f004 ff51 	bl	8017f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, RS_485_RE_Pin|WDT_FEED_Pin, GPIO_PIN_RESET);
 801308e:	2200      	movs	r2, #0
 8013090:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8013094:	485f      	ldr	r0, [pc, #380]	; (8013214 <MX_GPIO_Init+0x300>)
 8013096:	f004 ff4b 	bl	8017f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS_485_DE_GPIO_Port, RS_485_DE_Pin, GPIO_PIN_SET);
 801309a:	2201      	movs	r2, #1
 801309c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80130a0:	485c      	ldr	r0, [pc, #368]	; (8013214 <MX_GPIO_Init+0x300>)
 80130a2:	f004 ff45 	bl	8017f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 80130a6:	2201      	movs	r2, #1
 80130a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80130ac:	4856      	ldr	r0, [pc, #344]	; (8013208 <MX_GPIO_Init+0x2f4>)
 80130ae:	f004 ff3f 	bl	8017f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = OP5_Pin|OP8_Pin;
 80130b2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80130b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80130b8:	2301      	movs	r3, #1
 80130ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80130bc:	2300      	movs	r3, #0
 80130be:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80130c0:	2303      	movs	r3, #3
 80130c2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80130c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80130c8:	4619      	mov	r1, r3
 80130ca:	484b      	ldr	r0, [pc, #300]	; (80131f8 <MX_GPIO_Init+0x2e4>)
 80130cc:	f004 fd6c 	bl	8017ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = IP5_Pin|IP6_Pin;
 80130d0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80130d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80130d6:	2300      	movs	r3, #0
 80130d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80130da:	2300      	movs	r3, #0
 80130dc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80130de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80130e2:	4619      	mov	r1, r3
 80130e4:	4844      	ldr	r0, [pc, #272]	; (80131f8 <MX_GPIO_Init+0x2e4>)
 80130e6:	f004 fd5f 	bl	8017ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = OP1_Pin|OP4_Pin;
 80130ea:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80130ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80130f0:	2301      	movs	r3, #1
 80130f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80130f4:	2300      	movs	r3, #0
 80130f6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80130f8:	2303      	movs	r3, #3
 80130fa:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80130fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013100:	4619      	mov	r1, r3
 8013102:	483e      	ldr	r0, [pc, #248]	; (80131fc <MX_GPIO_Init+0x2e8>)
 8013104:	f004 fd50 	bl	8017ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IP7_Pin;
 8013108:	2304      	movs	r3, #4
 801310a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801310c:	2300      	movs	r3, #0
 801310e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013110:	2300      	movs	r3, #0
 8013112:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IP7_GPIO_Port, &GPIO_InitStruct);
 8013114:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013118:	4619      	mov	r1, r3
 801311a:	483c      	ldr	r0, [pc, #240]	; (801320c <MX_GPIO_Init+0x2f8>)
 801311c:	f004 fd44 	bl	8017ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = OP7_Pin|S1_LED_Pin|S2_LED_Pin|OP9_Pin;
 8013120:	f240 7304 	movw	r3, #1796	; 0x704
 8013124:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013126:	2301      	movs	r3, #1
 8013128:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801312a:	2300      	movs	r3, #0
 801312c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801312e:	2303      	movs	r3, #3
 8013130:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8013132:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013136:	4619      	mov	r1, r3
 8013138:	4831      	ldr	r0, [pc, #196]	; (8013200 <MX_GPIO_Init+0x2ec>)
 801313a:	f004 fd35 	bl	8017ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = EX_INT0_Pin|EX_INT1_Pin;
 801313e:	2303      	movs	r3, #3
 8013140:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8013142:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8013146:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013148:	2300      	movs	r3, #0
 801314a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801314c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013150:	4619      	mov	r1, r3
 8013152:	482d      	ldr	r0, [pc, #180]	; (8013208 <MX_GPIO_Init+0x2f4>)
 8013154:	f004 fd28 	bl	8017ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IP8_Pin;
 8013158:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801315c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801315e:	2300      	movs	r3, #0
 8013160:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013162:	2300      	movs	r3, #0
 8013164:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IP8_GPIO_Port, &GPIO_InitStruct);
 8013166:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801316a:	4619      	mov	r1, r3
 801316c:	4825      	ldr	r0, [pc, #148]	; (8013204 <MX_GPIO_Init+0x2f0>)
 801316e:	f004 fd1b 	bl	8017ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS4_Pin;
 8013172:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013176:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013178:	2301      	movs	r3, #1
 801317a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801317c:	2300      	movs	r3, #0
 801317e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013180:	2303      	movs	r3, #3
 8013182:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(CS4_GPIO_Port, &GPIO_InitStruct);
 8013184:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013188:	4619      	mov	r1, r3
 801318a:	481e      	ldr	r0, [pc, #120]	; (8013204 <MX_GPIO_Init+0x2f0>)
 801318c:	f004 fd0c 	bl	8017ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = IP1_Pin|IP2_Pin;
 8013190:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8013194:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8013196:	2300      	movs	r3, #0
 8013198:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801319a:	2300      	movs	r3, #0
 801319c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801319e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80131a2:	4619      	mov	r1, r3
 80131a4:	481a      	ldr	r0, [pc, #104]	; (8013210 <MX_GPIO_Init+0x2fc>)
 80131a6:	f004 fcff 	bl	8017ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = OP3_Pin|CS1_Pin|OP6_Pin;
 80131aa:	f241 4304 	movw	r3, #5124	; 0x1404
 80131ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80131b0:	2301      	movs	r3, #1
 80131b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80131b4:	2300      	movs	r3, #0
 80131b6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80131b8:	2303      	movs	r3, #3
 80131ba:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80131bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80131c0:	4619      	mov	r1, r3
 80131c2:	4811      	ldr	r0, [pc, #68]	; (8013208 <MX_GPIO_Init+0x2f4>)
 80131c4:	f004 fcf0 	bl	8017ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IP10_Pin;
 80131c8:	2308      	movs	r3, #8
 80131ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80131cc:	2300      	movs	r3, #0
 80131ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80131d0:	2300      	movs	r3, #0
 80131d2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IP10_GPIO_Port, &GPIO_InitStruct);
 80131d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80131d8:	4619      	mov	r1, r3
 80131da:	480b      	ldr	r0, [pc, #44]	; (8013208 <MX_GPIO_Init+0x2f4>)
 80131dc:	f004 fce4 	bl	8017ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_RESET_Pin;
 80131e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80131e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80131e6:	2301      	movs	r3, #1
 80131e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80131ea:	2300      	movs	r3, #0
 80131ec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80131ee:	2300      	movs	r3, #0
 80131f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80131f2:	e011      	b.n	8013218 <MX_GPIO_Init+0x304>
 80131f4:	40023800 	.word	0x40023800
 80131f8:	40022000 	.word	0x40022000
 80131fc:	40021400 	.word	0x40021400
 8013200:	40021c00 	.word	0x40021c00
 8013204:	40021000 	.word	0x40021000
 8013208:	40021800 	.word	0x40021800
 801320c:	40020800 	.word	0x40020800
 8013210:	40020c00 	.word	0x40020c00
 8013214:	40022400 	.word	0x40022400
  HAL_GPIO_Init(SPI_RESET_GPIO_Port, &GPIO_InitStruct);
 8013218:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801321c:	4619      	mov	r1, r3
 801321e:	4836      	ldr	r0, [pc, #216]	; (80132f8 <MX_GPIO_Init+0x3e4>)
 8013220:	f004 fcc2 	bl	8017ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = CAN1_RX_Pin|CAN1_TX_Pin;
 8013224:	2303      	movs	r3, #3
 8013226:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013228:	2302      	movs	r3, #2
 801322a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801322c:	2300      	movs	r3, #0
 801322e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013230:	2303      	movs	r3, #3
 8013232:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8013234:	2309      	movs	r3, #9
 8013236:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8013238:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801323c:	4619      	mov	r1, r3
 801323e:	482f      	ldr	r0, [pc, #188]	; (80132fc <MX_GPIO_Init+0x3e8>)
 8013240:	f004 fcb2 	bl	8017ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = OP2_Pin|CS2_Pin|CS3_Pin;
 8013244:	2368      	movs	r3, #104	; 0x68
 8013246:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013248:	2301      	movs	r3, #1
 801324a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801324c:	2300      	movs	r3, #0
 801324e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013250:	2303      	movs	r3, #3
 8013252:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8013254:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013258:	4619      	mov	r1, r3
 801325a:	4828      	ldr	r0, [pc, #160]	; (80132fc <MX_GPIO_Init+0x3e8>)
 801325c:	f004 fca4 	bl	8017ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IP9_Pin;
 8013260:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013264:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8013266:	2300      	movs	r3, #0
 8013268:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801326a:	2300      	movs	r3, #0
 801326c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IP9_GPIO_Port, &GPIO_InitStruct);
 801326e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013272:	4619      	mov	r1, r3
 8013274:	4822      	ldr	r0, [pc, #136]	; (8013300 <MX_GPIO_Init+0x3ec>)
 8013276:	f004 fc97 	bl	8017ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin */
  GPIO_InitStruct.Pin = RS_485_RE_Pin|RS_485_DE_Pin;
 801327a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 801327e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013280:	2301      	movs	r3, #1
 8013282:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013284:	2300      	movs	r3, #0
 8013286:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013288:	2300      	movs	r3, #0
 801328a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 801328c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013290:	4619      	mov	r1, r3
 8013292:	481b      	ldr	r0, [pc, #108]	; (8013300 <MX_GPIO_Init+0x3ec>)
 8013294:	f004 fc88 	bl	8017ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WDT_FEED_Pin;
 8013298:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801329c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801329e:	2301      	movs	r3, #1
 80132a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80132a2:	2300      	movs	r3, #0
 80132a4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80132a6:	2303      	movs	r3, #3
 80132a8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(WDT_FEED_GPIO_Port, &GPIO_InitStruct);
 80132aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80132ae:	4619      	mov	r1, r3
 80132b0:	4813      	ldr	r0, [pc, #76]	; (8013300 <MX_GPIO_Init+0x3ec>)
 80132b2:	f004 fc79 	bl	8017ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PKPin PKPin */
  GPIO_InitStruct.Pin = IP3_Pin|IP4_Pin;
 80132b6:	2318      	movs	r3, #24
 80132b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80132ba:	2300      	movs	r3, #0
 80132bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80132be:	2300      	movs	r3, #0
 80132c0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80132c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80132c6:	4619      	mov	r1, r3
 80132c8:	480e      	ldr	r0, [pc, #56]	; (8013304 <MX_GPIO_Init+0x3f0>)
 80132ca:	f004 fc6d 	bl	8017ba8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 80132ce:	2200      	movs	r2, #0
 80132d0:	2101      	movs	r1, #1
 80132d2:	2006      	movs	r0, #6
 80132d4:	f003 f93d 	bl	8016552 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80132d8:	2006      	movs	r0, #6
 80132da:	f003 f956 	bl	801658a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 1);
 80132de:	2201      	movs	r2, #1
 80132e0:	2101      	movs	r1, #1
 80132e2:	2007      	movs	r0, #7
 80132e4:	f003 f935 	bl	8016552 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80132e8:	2007      	movs	r0, #7
 80132ea:	f003 f94e 	bl	801658a <HAL_NVIC_EnableIRQ>

}
 80132ee:	bf00      	nop
 80132f0:	3740      	adds	r7, #64	; 0x40
 80132f2:	46bd      	mov	sp, r7
 80132f4:	bd80      	pop	{r7, pc}
 80132f6:	bf00      	nop
 80132f8:	40020800 	.word	0x40020800
 80132fc:	40020c00 	.word	0x40020c00
 8013300:	40022400 	.word	0x40022400
 8013304:	40022800 	.word	0x40022800

08013308 <Feed_wdt>:

/* USER CODE BEGIN 2 */

void Feed_wdt(void)
{
 8013308:	b580      	push	{r7, lr}
 801330a:	af00      	add	r7, sp, #0
	static uint32_t FEED_CLK = 0;

	if(HAL_Elaps_Ticks(FEED_CLK) >=300)
 801330c:	4b0a      	ldr	r3, [pc, #40]	; (8013338 <Feed_wdt+0x30>)
 801330e:	681b      	ldr	r3, [r3, #0]
 8013310:	4618      	mov	r0, r3
 8013312:	f7fb fb8b 	bl	800ea2c <HAL_Elaps_Ticks>
 8013316:	4603      	mov	r3, r0
 8013318:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801331c:	d309      	bcc.n	8013332 <Feed_wdt+0x2a>
	{
		HAL_GPIO_TogglePin(WDT_FEED_GPIO_Port, WDT_FEED_Pin);
 801331e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8013322:	4806      	ldr	r0, [pc, #24]	; (801333c <Feed_wdt+0x34>)
 8013324:	f004 fe1d 	bl	8017f62 <HAL_GPIO_TogglePin>
		FEED_CLK = HAL_GetTick();
 8013328:	f002 f932 	bl	8015590 <HAL_GetTick>
 801332c:	4603      	mov	r3, r0
 801332e:	4a02      	ldr	r2, [pc, #8]	; (8013338 <Feed_wdt+0x30>)
 8013330:	6013      	str	r3, [r2, #0]
	}

}
 8013332:	bf00      	nop
 8013334:	bd80      	pop	{r7, pc}
 8013336:	bf00      	nop
 8013338:	20009bc4 	.word	0x20009bc4
 801333c:	40022400 	.word	0x40022400

08013340 <Blink_S2>:
		S1_FEED = HAL_GetTick();
	}
}

void Blink_S2(void)
{
 8013340:	b580      	push	{r7, lr}
 8013342:	af00      	add	r7, sp, #0
	static uint32_t S2_FEED = 0;

	if(HAL_Elaps_Ticks(S2_FEED) > 100)
 8013344:	4b09      	ldr	r3, [pc, #36]	; (801336c <Blink_S2+0x2c>)
 8013346:	681b      	ldr	r3, [r3, #0]
 8013348:	4618      	mov	r0, r3
 801334a:	f7fb fb6f 	bl	800ea2c <HAL_Elaps_Ticks>
 801334e:	4603      	mov	r3, r0
 8013350:	2b64      	cmp	r3, #100	; 0x64
 8013352:	d909      	bls.n	8013368 <Blink_S2+0x28>
	{
		HAL_GPIO_TogglePin(S2_LED_GPIO_Port, S2_LED_Pin);
 8013354:	f44f 7100 	mov.w	r1, #512	; 0x200
 8013358:	4805      	ldr	r0, [pc, #20]	; (8013370 <Blink_S2+0x30>)
 801335a:	f004 fe02 	bl	8017f62 <HAL_GPIO_TogglePin>
		S2_FEED = HAL_GetTick();
 801335e:	f002 f917 	bl	8015590 <HAL_GetTick>
 8013362:	4603      	mov	r3, r0
 8013364:	4a01      	ldr	r2, [pc, #4]	; (801336c <Blink_S2+0x2c>)
 8013366:	6013      	str	r3, [r2, #0]
	}
}
 8013368:	bf00      	nop
 801336a:	bd80      	pop	{r7, pc}
 801336c:	20009bc8 	.word	0x20009bc8
 8013370:	40021c00 	.word	0x40021c00

08013374 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8013374:	b580      	push	{r7, lr}
 8013376:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8013378:	4b1b      	ldr	r3, [pc, #108]	; (80133e8 <MX_I2C1_Init+0x74>)
 801337a:	4a1c      	ldr	r2, [pc, #112]	; (80133ec <MX_I2C1_Init+0x78>)
 801337c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0xC0000E12;
 801337e:	4b1a      	ldr	r3, [pc, #104]	; (80133e8 <MX_I2C1_Init+0x74>)
 8013380:	4a1b      	ldr	r2, [pc, #108]	; (80133f0 <MX_I2C1_Init+0x7c>)
 8013382:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8013384:	4b18      	ldr	r3, [pc, #96]	; (80133e8 <MX_I2C1_Init+0x74>)
 8013386:	2200      	movs	r2, #0
 8013388:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801338a:	4b17      	ldr	r3, [pc, #92]	; (80133e8 <MX_I2C1_Init+0x74>)
 801338c:	2201      	movs	r2, #1
 801338e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8013390:	4b15      	ldr	r3, [pc, #84]	; (80133e8 <MX_I2C1_Init+0x74>)
 8013392:	2200      	movs	r2, #0
 8013394:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8013396:	4b14      	ldr	r3, [pc, #80]	; (80133e8 <MX_I2C1_Init+0x74>)
 8013398:	2200      	movs	r2, #0
 801339a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 801339c:	4b12      	ldr	r3, [pc, #72]	; (80133e8 <MX_I2C1_Init+0x74>)
 801339e:	2200      	movs	r2, #0
 80133a0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80133a2:	4b11      	ldr	r3, [pc, #68]	; (80133e8 <MX_I2C1_Init+0x74>)
 80133a4:	2200      	movs	r2, #0
 80133a6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80133a8:	4b0f      	ldr	r3, [pc, #60]	; (80133e8 <MX_I2C1_Init+0x74>)
 80133aa:	2200      	movs	r2, #0
 80133ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80133ae:	480e      	ldr	r0, [pc, #56]	; (80133e8 <MX_I2C1_Init+0x74>)
 80133b0:	f004 fe16 	bl	8017fe0 <HAL_I2C_Init>
 80133b4:	4603      	mov	r3, r0
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d001      	beq.n	80133be <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80133ba:	f000 fb5d 	bl	8013a78 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80133be:	2100      	movs	r1, #0
 80133c0:	4809      	ldr	r0, [pc, #36]	; (80133e8 <MX_I2C1_Init+0x74>)
 80133c2:	f005 fb65 	bl	8018a90 <HAL_I2CEx_ConfigAnalogFilter>
 80133c6:	4603      	mov	r3, r0
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d001      	beq.n	80133d0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80133cc:	f000 fb54 	bl	8013a78 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80133d0:	2100      	movs	r1, #0
 80133d2:	4805      	ldr	r0, [pc, #20]	; (80133e8 <MX_I2C1_Init+0x74>)
 80133d4:	f005 fba7 	bl	8018b26 <HAL_I2CEx_ConfigDigitalFilter>
 80133d8:	4603      	mov	r3, r0
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d001      	beq.n	80133e2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80133de:	f000 fb4b 	bl	8013a78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80133e2:	bf00      	nop
 80133e4:	bd80      	pop	{r7, pc}
 80133e6:	bf00      	nop
 80133e8:	20009bcc 	.word	0x20009bcc
 80133ec:	40005400 	.word	0x40005400
 80133f0:	c0000e12 	.word	0xc0000e12

080133f4 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80133f4:	b580      	push	{r7, lr}
 80133f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80133f8:	4b1b      	ldr	r3, [pc, #108]	; (8013468 <MX_I2C2_Init+0x74>)
 80133fa:	4a1c      	ldr	r2, [pc, #112]	; (801346c <MX_I2C2_Init+0x78>)
 80133fc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0xC0000E12;
 80133fe:	4b1a      	ldr	r3, [pc, #104]	; (8013468 <MX_I2C2_Init+0x74>)
 8013400:	4a1b      	ldr	r2, [pc, #108]	; (8013470 <MX_I2C2_Init+0x7c>)
 8013402:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8013404:	4b18      	ldr	r3, [pc, #96]	; (8013468 <MX_I2C2_Init+0x74>)
 8013406:	2200      	movs	r2, #0
 8013408:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801340a:	4b17      	ldr	r3, [pc, #92]	; (8013468 <MX_I2C2_Init+0x74>)
 801340c:	2201      	movs	r2, #1
 801340e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8013410:	4b15      	ldr	r3, [pc, #84]	; (8013468 <MX_I2C2_Init+0x74>)
 8013412:	2200      	movs	r2, #0
 8013414:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8013416:	4b14      	ldr	r3, [pc, #80]	; (8013468 <MX_I2C2_Init+0x74>)
 8013418:	2200      	movs	r2, #0
 801341a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 801341c:	4b12      	ldr	r3, [pc, #72]	; (8013468 <MX_I2C2_Init+0x74>)
 801341e:	2200      	movs	r2, #0
 8013420:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8013422:	4b11      	ldr	r3, [pc, #68]	; (8013468 <MX_I2C2_Init+0x74>)
 8013424:	2200      	movs	r2, #0
 8013426:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8013428:	4b0f      	ldr	r3, [pc, #60]	; (8013468 <MX_I2C2_Init+0x74>)
 801342a:	2200      	movs	r2, #0
 801342c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 801342e:	480e      	ldr	r0, [pc, #56]	; (8013468 <MX_I2C2_Init+0x74>)
 8013430:	f004 fdd6 	bl	8017fe0 <HAL_I2C_Init>
 8013434:	4603      	mov	r3, r0
 8013436:	2b00      	cmp	r3, #0
 8013438:	d001      	beq.n	801343e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 801343a:	f000 fb1d 	bl	8013a78 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 801343e:	2100      	movs	r1, #0
 8013440:	4809      	ldr	r0, [pc, #36]	; (8013468 <MX_I2C2_Init+0x74>)
 8013442:	f005 fb25 	bl	8018a90 <HAL_I2CEx_ConfigAnalogFilter>
 8013446:	4603      	mov	r3, r0
 8013448:	2b00      	cmp	r3, #0
 801344a:	d001      	beq.n	8013450 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 801344c:	f000 fb14 	bl	8013a78 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8013450:	2100      	movs	r1, #0
 8013452:	4805      	ldr	r0, [pc, #20]	; (8013468 <MX_I2C2_Init+0x74>)
 8013454:	f005 fb67 	bl	8018b26 <HAL_I2CEx_ConfigDigitalFilter>
 8013458:	4603      	mov	r3, r0
 801345a:	2b00      	cmp	r3, #0
 801345c:	d001      	beq.n	8013462 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 801345e:	f000 fb0b 	bl	8013a78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8013462:	bf00      	nop
 8013464:	bd80      	pop	{r7, pc}
 8013466:	bf00      	nop
 8013468:	20009c20 	.word	0x20009c20
 801346c:	40005800 	.word	0x40005800
 8013470:	c0000e12 	.word	0xc0000e12

08013474 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8013474:	b580      	push	{r7, lr}
 8013476:	b0b0      	sub	sp, #192	; 0xc0
 8013478:	af00      	add	r7, sp, #0
 801347a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801347c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8013480:	2200      	movs	r2, #0
 8013482:	601a      	str	r2, [r3, #0]
 8013484:	605a      	str	r2, [r3, #4]
 8013486:	609a      	str	r2, [r3, #8]
 8013488:	60da      	str	r2, [r3, #12]
 801348a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801348c:	f107 031c 	add.w	r3, r7, #28
 8013490:	2290      	movs	r2, #144	; 0x90
 8013492:	2100      	movs	r1, #0
 8013494:	4618      	mov	r0, r3
 8013496:	f00e ff9d 	bl	80223d4 <memset>
  if(i2cHandle->Instance==I2C1)
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	681b      	ldr	r3, [r3, #0]
 801349e:	4a44      	ldr	r2, [pc, #272]	; (80135b0 <HAL_I2C_MspInit+0x13c>)
 80134a0:	4293      	cmp	r3, r2
 80134a2:	d13e      	bne.n	8013522 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80134a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80134a8:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80134aa:	2300      	movs	r3, #0
 80134ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80134b0:	f107 031c 	add.w	r3, r7, #28
 80134b4:	4618      	mov	r0, r3
 80134b6:	f006 f875 	bl	80195a4 <HAL_RCCEx_PeriphCLKConfig>
 80134ba:	4603      	mov	r3, r0
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d001      	beq.n	80134c4 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 80134c0:	f000 fada 	bl	8013a78 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80134c4:	4b3b      	ldr	r3, [pc, #236]	; (80135b4 <HAL_I2C_MspInit+0x140>)
 80134c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80134c8:	4a3a      	ldr	r2, [pc, #232]	; (80135b4 <HAL_I2C_MspInit+0x140>)
 80134ca:	f043 0302 	orr.w	r3, r3, #2
 80134ce:	6313      	str	r3, [r2, #48]	; 0x30
 80134d0:	4b38      	ldr	r3, [pc, #224]	; (80135b4 <HAL_I2C_MspInit+0x140>)
 80134d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80134d4:	f003 0302 	and.w	r3, r3, #2
 80134d8:	61bb      	str	r3, [r7, #24]
 80134da:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = I2C1_SDA_Pin|I2C1_SCL_Pin;
 80134dc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80134e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80134e4:	2312      	movs	r3, #18
 80134e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80134ea:	2300      	movs	r3, #0
 80134ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80134f0:	2303      	movs	r3, #3
 80134f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80134f6:	2304      	movs	r3, #4
 80134f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80134fc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8013500:	4619      	mov	r1, r3
 8013502:	482d      	ldr	r0, [pc, #180]	; (80135b8 <HAL_I2C_MspInit+0x144>)
 8013504:	f004 fb50 	bl	8017ba8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8013508:	4b2a      	ldr	r3, [pc, #168]	; (80135b4 <HAL_I2C_MspInit+0x140>)
 801350a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801350c:	4a29      	ldr	r2, [pc, #164]	; (80135b4 <HAL_I2C_MspInit+0x140>)
 801350e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013512:	6413      	str	r3, [r2, #64]	; 0x40
 8013514:	4b27      	ldr	r3, [pc, #156]	; (80135b4 <HAL_I2C_MspInit+0x140>)
 8013516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013518:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801351c:	617b      	str	r3, [r7, #20]
 801351e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8013520:	e041      	b.n	80135a6 <HAL_I2C_MspInit+0x132>
  else if(i2cHandle->Instance==I2C2)
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	681b      	ldr	r3, [r3, #0]
 8013526:	4a25      	ldr	r2, [pc, #148]	; (80135bc <HAL_I2C_MspInit+0x148>)
 8013528:	4293      	cmp	r3, r2
 801352a:	d13c      	bne.n	80135a6 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 801352c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013530:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8013532:	2300      	movs	r3, #0
 8013534:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8013538:	f107 031c 	add.w	r3, r7, #28
 801353c:	4618      	mov	r0, r3
 801353e:	f006 f831 	bl	80195a4 <HAL_RCCEx_PeriphCLKConfig>
 8013542:	4603      	mov	r3, r0
 8013544:	2b00      	cmp	r3, #0
 8013546:	d001      	beq.n	801354c <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 8013548:	f000 fa96 	bl	8013a78 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 801354c:	4b19      	ldr	r3, [pc, #100]	; (80135b4 <HAL_I2C_MspInit+0x140>)
 801354e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013550:	4a18      	ldr	r2, [pc, #96]	; (80135b4 <HAL_I2C_MspInit+0x140>)
 8013552:	f043 0320 	orr.w	r3, r3, #32
 8013556:	6313      	str	r3, [r2, #48]	; 0x30
 8013558:	4b16      	ldr	r3, [pc, #88]	; (80135b4 <HAL_I2C_MspInit+0x140>)
 801355a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801355c:	f003 0320 	and.w	r3, r3, #32
 8013560:	613b      	str	r3, [r7, #16]
 8013562:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SDA_Pin|I2C2_SCL_Pin;
 8013564:	2303      	movs	r3, #3
 8013566:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801356a:	2312      	movs	r3, #18
 801356c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013570:	2300      	movs	r3, #0
 8013572:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013576:	2303      	movs	r3, #3
 8013578:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 801357c:	2304      	movs	r3, #4
 801357e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8013582:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8013586:	4619      	mov	r1, r3
 8013588:	480d      	ldr	r0, [pc, #52]	; (80135c0 <HAL_I2C_MspInit+0x14c>)
 801358a:	f004 fb0d 	bl	8017ba8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 801358e:	4b09      	ldr	r3, [pc, #36]	; (80135b4 <HAL_I2C_MspInit+0x140>)
 8013590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013592:	4a08      	ldr	r2, [pc, #32]	; (80135b4 <HAL_I2C_MspInit+0x140>)
 8013594:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8013598:	6413      	str	r3, [r2, #64]	; 0x40
 801359a:	4b06      	ldr	r3, [pc, #24]	; (80135b4 <HAL_I2C_MspInit+0x140>)
 801359c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801359e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80135a2:	60fb      	str	r3, [r7, #12]
 80135a4:	68fb      	ldr	r3, [r7, #12]
}
 80135a6:	bf00      	nop
 80135a8:	37c0      	adds	r7, #192	; 0xc0
 80135aa:	46bd      	mov	sp, r7
 80135ac:	bd80      	pop	{r7, pc}
 80135ae:	bf00      	nop
 80135b0:	40005400 	.word	0x40005400
 80135b4:	40023800 	.word	0x40023800
 80135b8:	40020400 	.word	0x40020400
 80135bc:	40005800 	.word	0x40005800
 80135c0:	40021400 	.word	0x40021400

080135c4 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80135c4:	b580      	push	{r7, lr}
 80135c6:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80135c8:	4b0b      	ldr	r3, [pc, #44]	; (80135f8 <MX_IWDG_Init+0x34>)
 80135ca:	4a0c      	ldr	r2, [pc, #48]	; (80135fc <MX_IWDG_Init+0x38>)
 80135cc:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 80135ce:	4b0a      	ldr	r3, [pc, #40]	; (80135f8 <MX_IWDG_Init+0x34>)
 80135d0:	2203      	movs	r2, #3
 80135d2:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80135d4:	4b08      	ldr	r3, [pc, #32]	; (80135f8 <MX_IWDG_Init+0x34>)
 80135d6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80135da:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 3000;
 80135dc:	4b06      	ldr	r3, [pc, #24]	; (80135f8 <MX_IWDG_Init+0x34>)
 80135de:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80135e2:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80135e4:	4804      	ldr	r0, [pc, #16]	; (80135f8 <MX_IWDG_Init+0x34>)
 80135e6:	f005 faea 	bl	8018bbe <HAL_IWDG_Init>
 80135ea:	4603      	mov	r3, r0
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d001      	beq.n	80135f4 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 80135f0:	f000 fa42 	bl	8013a78 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80135f4:	bf00      	nop
 80135f6:	bd80      	pop	{r7, pc}
 80135f8:	20009c74 	.word	0x20009c74
 80135fc:	40003000 	.word	0x40003000

08013600 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8013600:	b480      	push	{r7}
 8013602:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8013604:	f3bf 8f4f 	dsb	sy
}
 8013608:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801360a:	f3bf 8f6f 	isb	sy
}
 801360e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8013610:	4b0d      	ldr	r3, [pc, #52]	; (8013648 <SCB_EnableICache+0x48>)
 8013612:	2200      	movs	r2, #0
 8013614:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8013618:	f3bf 8f4f 	dsb	sy
}
 801361c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801361e:	f3bf 8f6f 	isb	sy
}
 8013622:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8013624:	4b08      	ldr	r3, [pc, #32]	; (8013648 <SCB_EnableICache+0x48>)
 8013626:	695b      	ldr	r3, [r3, #20]
 8013628:	4a07      	ldr	r2, [pc, #28]	; (8013648 <SCB_EnableICache+0x48>)
 801362a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801362e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8013630:	f3bf 8f4f 	dsb	sy
}
 8013634:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8013636:	f3bf 8f6f 	isb	sy
}
 801363a:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 801363c:	bf00      	nop
 801363e:	46bd      	mov	sp, r7
 8013640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013644:	4770      	bx	lr
 8013646:	bf00      	nop
 8013648:	e000ed00 	.word	0xe000ed00

0801364c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 801364c:	b480      	push	{r7}
 801364e:	b085      	sub	sp, #20
 8013650:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8013652:	4b1f      	ldr	r3, [pc, #124]	; (80136d0 <SCB_EnableDCache+0x84>)
 8013654:	2200      	movs	r2, #0
 8013656:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 801365a:	f3bf 8f4f 	dsb	sy
}
 801365e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8013660:	4b1b      	ldr	r3, [pc, #108]	; (80136d0 <SCB_EnableDCache+0x84>)
 8013662:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013666:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	0b5b      	lsrs	r3, r3, #13
 801366c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8013670:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	08db      	lsrs	r3, r3, #3
 8013676:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801367a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 801367c:	68fb      	ldr	r3, [r7, #12]
 801367e:	015a      	lsls	r2, r3, #5
 8013680:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8013684:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8013686:	68ba      	ldr	r2, [r7, #8]
 8013688:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 801368a:	4911      	ldr	r1, [pc, #68]	; (80136d0 <SCB_EnableDCache+0x84>)
 801368c:	4313      	orrs	r3, r2
 801368e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8013692:	68bb      	ldr	r3, [r7, #8]
 8013694:	1e5a      	subs	r2, r3, #1
 8013696:	60ba      	str	r2, [r7, #8]
 8013698:	2b00      	cmp	r3, #0
 801369a:	d1ef      	bne.n	801367c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 801369c:	68fb      	ldr	r3, [r7, #12]
 801369e:	1e5a      	subs	r2, r3, #1
 80136a0:	60fa      	str	r2, [r7, #12]
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d1e5      	bne.n	8013672 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80136a6:	f3bf 8f4f 	dsb	sy
}
 80136aa:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80136ac:	4b08      	ldr	r3, [pc, #32]	; (80136d0 <SCB_EnableDCache+0x84>)
 80136ae:	695b      	ldr	r3, [r3, #20]
 80136b0:	4a07      	ldr	r2, [pc, #28]	; (80136d0 <SCB_EnableDCache+0x84>)
 80136b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80136b6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80136b8:	f3bf 8f4f 	dsb	sy
}
 80136bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80136be:	f3bf 8f6f 	isb	sy
}
 80136c2:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80136c4:	bf00      	nop
 80136c6:	3714      	adds	r7, #20
 80136c8:	46bd      	mov	sp, r7
 80136ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136ce:	4770      	bx	lr
 80136d0:	e000ed00 	.word	0xe000ed00

080136d4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80136d4:	b580      	push	{r7, lr}
 80136d6:	b082      	sub	sp, #8
 80136d8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	char *ptr= NULL;
 80136da:	2300      	movs	r3, #0
 80136dc:	607b      	str	r3, [r7, #4]
	/* USER CODE END 1 */

	/* MPU Configuration--------------------------------------------------------*/
	MPU_Config();
 80136de:	f000 f99f 	bl	8013a20 <MPU_Config>

	/* Enable I-Cache---------------------------------------------------------*/
	SCB_EnableICache();
 80136e2:	f7ff ff8d 	bl	8013600 <SCB_EnableICache>

	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();
 80136e6:	f7ff ffb1 	bl	801364c <SCB_EnableDCache>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80136ea:	f001 fef1 	bl	80154d0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80136ee:	f000 f8d1 	bl	8013894 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	ptr = reset_cause_get_name(reset_cause_get());
 80136f2:	f7f5 fc07 	bl	8008f04 <reset_cause_get>
 80136f6:	4603      	mov	r3, r0
 80136f8:	4618      	mov	r0, r3
 80136fa:	f7f5 fc55 	bl	8008fa8 <reset_cause_get_name>
 80136fe:	6078      	str	r0, [r7, #4]
	MX_RNG_Init();
	MX_CAN3_Init();
	/* USER CODE BEGIN 2 */
#endif

	MX_GPIO_Init();
 8013700:	f7ff fc08 	bl	8012f14 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8013704:	f001 f90a 	bl	801491c <MX_USART1_UART_Init>
	Get_Slot();
 8013708:	f7ed f9e0 	bl	8000acc <Get_Slot>
	MX_CAN2_Init();
 801370c:	f7fb fd86 	bl	800f21c <MX_CAN2_Init>
	MX_CAN3_Init();
 8013710:	f7fb fdfc 	bl	800f30c <MX_CAN3_Init>
	MX_I2C1_Init();
 8013714:	f7ff fe2e 	bl	8013374 <MX_I2C1_Init>
	MX_I2C2_Init();
 8013718:	f7ff fe6c 	bl	80133f4 <MX_I2C2_Init>
	MX_SPI1_Init();
 801371c:	f000 fa10 	bl	8013b40 <MX_SPI1_Init>
	Get_Config();
 8013720:	f000 fd7a 	bl	8014218 <Get_Config>
	MX_RNG_Init();
 8013724:	f000 f9ae 	bl	8013a84 <MX_RNG_Init>
	memset(&Hitachi_fault_injection_st,0,sizeof(HITACHI_FAULT_INJECTION_t));
 8013728:	2208      	movs	r2, #8
 801372a:	2100      	movs	r1, #0
 801372c:	484c      	ldr	r0, [pc, #304]	; (8013860 <main+0x18c>)
 801372e:	f00e fe51 	bl	80223d4 <memset>
	HAL_Delay(250);
 8013732:	20fa      	movs	r0, #250	; 0xfa
 8013734:	f001 ff38 	bl	80155a8 <HAL_Delay>
	printf("\b\b\b\b\b\b\b\b\b\b");
 8013738:	484a      	ldr	r0, [pc, #296]	; (8013864 <main+0x190>)
 801373a:	f00e ff33 	bl	80225a4 <iprintf>
	printf("\n___________________________________ EiPC Start ____________________________\n");
 801373e:	484a      	ldr	r0, [pc, #296]	; (8013868 <main+0x194>)
 8013740:	f00e ffcc 	bl	80226dc <puts>
	printf("\r\r\r\nLast Reset Reason:%s\n",ptr);
 8013744:	6879      	ldr	r1, [r7, #4]
 8013746:	4849      	ldr	r0, [pc, #292]	; (801386c <main+0x198>)
 8013748:	f00e ff2c 	bl	80225a4 <iprintf>
	Get_Build_Details();
 801374c:	f000 f90c 	bl	8013968 <Get_Build_Details>
	switch(EI_data.ProtocolType)
 8013750:	4b47      	ldr	r3, [pc, #284]	; (8013870 <main+0x19c>)
 8013752:	781b      	ldrb	r3, [r3, #0]
 8013754:	3b01      	subs	r3, #1
 8013756:	2b03      	cmp	r3, #3
 8013758:	d85f      	bhi.n	801381a <main+0x146>
 801375a:	a201      	add	r2, pc, #4	; (adr r2, 8013760 <main+0x8c>)
 801375c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013760:	08013771 	.word	0x08013771
 8013764:	080137c3 	.word	0x080137c3
 8013768:	080137eb 	.word	0x080137eb
 801376c:	08013823 	.word	0x08013823
	{
	case HITACHI:
		printf("Protocol Selected is HITACHI\n");
 8013770:	4840      	ldr	r0, [pc, #256]	; (8013874 <main+0x1a0>)
 8013772:	f00e ffb3 	bl	80226dc <puts>
		printf("Initializing Ethernet Please Wait...!!\n");
 8013776:	4840      	ldr	r0, [pc, #256]	; (8013878 <main+0x1a4>)
 8013778:	f00e ffb0 	bl	80226dc <puts>
		MX_LWIP_Init();
 801377c:	f009 f832 	bl	801c7e4 <MX_LWIP_Init>
		udpServer_init();
 8013780:	f7fb f964 	bl	800ea4c <udpServer_init>
		printf("Initializing Ethernet Done\n");
 8013784:	483d      	ldr	r0, [pc, #244]	; (801387c <main+0x1a8>)
 8013786:	f00e ffa9 	bl	80226dc <puts>
		if((EI_data.Hitachi_st.EnableSerialPort == 1) && (EI_data.Hitachi_st.BaudRate > 0) )
 801378a:	4b39      	ldr	r3, [pc, #228]	; (8013870 <main+0x19c>)
 801378c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8013790:	2b01      	cmp	r3, #1
 8013792:	d111      	bne.n	80137b8 <main+0xe4>
 8013794:	4b36      	ldr	r3, [pc, #216]	; (8013870 <main+0x19c>)
 8013796:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801379a:	2b00      	cmp	r3, #0
 801379c:	d00c      	beq.n	80137b8 <main+0xe4>
		{
			printf("Initializing UART with Baudrate:%lu\n",EI_data.Hitachi_st.BaudRate);
 801379e:	4b34      	ldr	r3, [pc, #208]	; (8013870 <main+0x19c>)
 80137a0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80137a4:	4619      	mov	r1, r3
 80137a6:	4836      	ldr	r0, [pc, #216]	; (8013880 <main+0x1ac>)
 80137a8:	f00e fefc 	bl	80225a4 <iprintf>
			UART4_Init(EI_data.Hitachi_st.BaudRate);
 80137ac:	4b30      	ldr	r3, [pc, #192]	; (8013870 <main+0x19c>)
 80137ae:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80137b2:	4618      	mov	r0, r3
 80137b4:	f001 fa60 	bl	8014c78 <UART4_Init>
		}
		print_self_Details();
 80137b8:	f7f4 fe90 	bl	80084dc <print_self_Details>
		Update_HitachiCommands();
 80137bc:	f7ed f872 	bl	80008a4 <Update_HitachiCommands>
		break;
 80137c0:	e030      	b.n	8013824 <main+0x150>
	case SIEMENS:
		printf("Protocol Selected is SIEMENS\n");
 80137c2:	4830      	ldr	r0, [pc, #192]	; (8013884 <main+0x1b0>)
 80137c4:	f00e ff8a 	bl	80226dc <puts>
		printf("Initializing Ethernet Please Wait...!!\n");
 80137c8:	482b      	ldr	r0, [pc, #172]	; (8013878 <main+0x1a4>)
 80137ca:	f00e ff87 	bl	80226dc <puts>
		MX_LWIP_Init();
 80137ce:	f009 f809 	bl	801c7e4 <MX_LWIP_Init>
		udpServer_init();
 80137d2:	f7fb f93b 	bl	800ea4c <udpServer_init>
		printf("Initializing Ethernet Done\n");
 80137d6:	4829      	ldr	r0, [pc, #164]	; (801387c <main+0x1a8>)
 80137d8:	f00e ff80 	bl	80226dc <puts>
		print_self_DetailsSiemens();
 80137dc:	f7fb f81c 	bl	800e818 <print_self_DetailsSiemens>
		Update_SiemensCommands();
 80137e0:	f7f9 fd26 	bl	800d230 <Update_SiemensCommands>
		UpdateSIGNALSNames();
 80137e4:	f7fa fb3a 	bl	800de5c <UpdateSIGNALSNames>
		break;
 80137e8:	e01c      	b.n	8013824 <main+0x150>

	case MEDHA:
		printf("Protocol Selected is MEDHA\n");
 80137ea:	4827      	ldr	r0, [pc, #156]	; (8013888 <main+0x1b4>)
 80137ec:	f00e ff76 	bl	80226dc <puts>
		if(EI_data.Medha_Prms_st.BaudRate > 0)
 80137f0:	4b1f      	ldr	r3, [pc, #124]	; (8013870 <main+0x19c>)
 80137f2:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d006      	beq.n	8013808 <main+0x134>
		{
			UART4_Init(EI_data.Medha_Prms_st.BaudRate);
 80137fa:	4b1d      	ldr	r3, [pc, #116]	; (8013870 <main+0x19c>)
 80137fc:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 8013800:	4618      	mov	r0, r3
 8013802:	f001 fa39 	bl	8014c78 <UART4_Init>
 8013806:	e003      	b.n	8013810 <main+0x13c>
		}
		else
		{
			UART4_Init(115200);
 8013808:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 801380c:	f001 fa34 	bl	8014c78 <UART4_Init>
		}
		Update_MedhaCommands();
 8013810:	f7f7 f810 	bl	800a834 <Update_MedhaCommands>
		Print_Medha_Self_Details();
 8013814:	f7f6 fdce 	bl	800a3b4 <Print_Medha_Self_Details>
		break;
 8013818:	e004      	b.n	8013824 <main+0x150>

	case KYOSAN:
		break;

	default:
		printf("Please Select Protocol Type\n");
 801381a:	481c      	ldr	r0, [pc, #112]	; (801388c <main+0x1b8>)
 801381c:	f00e ff5e 	bl	80226dc <puts>
		while(1);
 8013820:	e7fe      	b.n	8013820 <main+0x14c>
		break;
 8013822:	bf00      	nop
	}


	printf("Initialization Success\n");
 8013824:	481a      	ldr	r0, [pc, #104]	; (8013890 <main+0x1bc>)
 8013826:	f00e ff59 	bl	80226dc <puts>
	//	printf("start Ticks:%lu",Ticks);
	MX_IWDG_Init();
 801382a:	f7ff fecb 	bl	80135c4 <MX_IWDG_Init>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1)
	{
		switch(EI_data.ProtocolType)
 801382e:	4b10      	ldr	r3, [pc, #64]	; (8013870 <main+0x19c>)
 8013830:	781b      	ldrb	r3, [r3, #0]
 8013832:	2b03      	cmp	r3, #3
 8013834:	d00c      	beq.n	8013850 <main+0x17c>
 8013836:	2b03      	cmp	r3, #3
 8013838:	dc0d      	bgt.n	8013856 <main+0x182>
 801383a:	2b01      	cmp	r3, #1
 801383c:	d002      	beq.n	8013844 <main+0x170>
 801383e:	2b02      	cmp	r3, #2
 8013840:	d003      	beq.n	801384a <main+0x176>
 8013842:	e008      	b.n	8013856 <main+0x182>
		{
		case HITACHI:
			Process_HitachiEI();
 8013844:	f7f5 fb1e 	bl	8008e84 <Process_HitachiEI>
			break;
 8013848:	e009      	b.n	801385e <main+0x18a>

		case SIEMENS:
			Process_SiemensEI();
 801384a:	f7f7 fd19 	bl	800b280 <Process_SiemensEI>
			break;
 801384e:	e006      	b.n	801385e <main+0x18a>

		case MEDHA:
			Process_Medha_EI();
 8013850:	f7f5 fbfa 	bl	8009048 <Process_Medha_EI>
			break;
 8013854:	e003      	b.n	801385e <main+0x18a>

		default:
			printf("Please Select Protocol Type\n");
 8013856:	480d      	ldr	r0, [pc, #52]	; (801388c <main+0x1b8>)
 8013858:	f00e ff40 	bl	80226dc <puts>
			while(1);
 801385c:	e7fe      	b.n	801385c <main+0x188>
		switch(EI_data.ProtocolType)
 801385e:	e7e6      	b.n	801382e <main+0x15a>
 8013860:	20001968 	.word	0x20001968
 8013864:	08026d5c 	.word	0x08026d5c
 8013868:	08026d68 	.word	0x08026d68
 801386c:	08026db8 	.word	0x08026db8
 8013870:	20000304 	.word	0x20000304
 8013874:	08026dd4 	.word	0x08026dd4
 8013878:	08026df4 	.word	0x08026df4
 801387c:	08026e1c 	.word	0x08026e1c
 8013880:	08026e38 	.word	0x08026e38
 8013884:	08026e60 	.word	0x08026e60
 8013888:	08026e80 	.word	0x08026e80
 801388c:	08026e9c 	.word	0x08026e9c
 8013890:	08026eb8 	.word	0x08026eb8

08013894 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8013894:	b580      	push	{r7, lr}
 8013896:	b094      	sub	sp, #80	; 0x50
 8013898:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801389a:	f107 031c 	add.w	r3, r7, #28
 801389e:	2234      	movs	r2, #52	; 0x34
 80138a0:	2100      	movs	r1, #0
 80138a2:	4618      	mov	r0, r3
 80138a4:	f00e fd96 	bl	80223d4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80138a8:	f107 0308 	add.w	r3, r7, #8
 80138ac:	2200      	movs	r2, #0
 80138ae:	601a      	str	r2, [r3, #0]
 80138b0:	605a      	str	r2, [r3, #4]
 80138b2:	609a      	str	r2, [r3, #8]
 80138b4:	60da      	str	r2, [r3, #12]
 80138b6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80138b8:	4b29      	ldr	r3, [pc, #164]	; (8013960 <SystemClock_Config+0xcc>)
 80138ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80138bc:	4a28      	ldr	r2, [pc, #160]	; (8013960 <SystemClock_Config+0xcc>)
 80138be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80138c2:	6413      	str	r3, [r2, #64]	; 0x40
 80138c4:	4b26      	ldr	r3, [pc, #152]	; (8013960 <SystemClock_Config+0xcc>)
 80138c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80138c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80138cc:	607b      	str	r3, [r7, #4]
 80138ce:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80138d0:	4b24      	ldr	r3, [pc, #144]	; (8013964 <SystemClock_Config+0xd0>)
 80138d2:	681b      	ldr	r3, [r3, #0]
 80138d4:	4a23      	ldr	r2, [pc, #140]	; (8013964 <SystemClock_Config+0xd0>)
 80138d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80138da:	6013      	str	r3, [r2, #0]
 80138dc:	4b21      	ldr	r3, [pc, #132]	; (8013964 <SystemClock_Config+0xd0>)
 80138de:	681b      	ldr	r3, [r3, #0]
 80138e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80138e4:	603b      	str	r3, [r7, #0]
 80138e6:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80138e8:	2309      	movs	r3, #9
 80138ea:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80138ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80138f0:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80138f2:	2301      	movs	r3, #1
 80138f4:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80138f6:	2302      	movs	r3, #2
 80138f8:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80138fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80138fe:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 6;
 8013900:	2306      	movs	r3, #6
 8013902:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 8013904:	23b4      	movs	r3, #180	; 0xb4
 8013906:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8013908:	2302      	movs	r3, #2
 801390a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 8;
 801390c:	2308      	movs	r3, #8
 801390e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8013910:	2302      	movs	r3, #2
 8013912:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8013914:	f107 031c 	add.w	r3, r7, #28
 8013918:	4618      	mov	r0, r3
 801391a:	f005 f9af 	bl	8018c7c <HAL_RCC_OscConfig>
 801391e:	4603      	mov	r3, r0
 8013920:	2b00      	cmp	r3, #0
 8013922:	d001      	beq.n	8013928 <SystemClock_Config+0x94>
	{
		Error_Handler();
 8013924:	f000 f8a8 	bl	8013a78 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8013928:	230f      	movs	r3, #15
 801392a:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 801392c:	2302      	movs	r3, #2
 801392e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8013930:	2300      	movs	r3, #0
 8013932:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8013934:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8013938:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 801393a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801393e:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8013940:	f107 0308 	add.w	r3, r7, #8
 8013944:	2105      	movs	r1, #5
 8013946:	4618      	mov	r0, r3
 8013948:	f005 fc46 	bl	80191d8 <HAL_RCC_ClockConfig>
 801394c:	4603      	mov	r3, r0
 801394e:	2b00      	cmp	r3, #0
 8013950:	d001      	beq.n	8013956 <SystemClock_Config+0xc2>
	{
		Error_Handler();
 8013952:	f000 f891 	bl	8013a78 <Error_Handler>
	}
}
 8013956:	bf00      	nop
 8013958:	3750      	adds	r7, #80	; 0x50
 801395a:	46bd      	mov	sp, r7
 801395c:	bd80      	pop	{r7, pc}
 801395e:	bf00      	nop
 8013960:	40023800 	.word	0x40023800
 8013964:	40007000 	.word	0x40007000

08013968 <Get_Build_Details>:

/* USER CODE BEGIN 4 */
void Get_Build_Details(void)
{
 8013968:	b580      	push	{r7, lr}
 801396a:	b08e      	sub	sp, #56	; 0x38
 801396c:	af00      	add	r7, sp, #0
	uint8_t CRC_Array[50] = {0,};
 801396e:	2300      	movs	r3, #0
 8013970:	607b      	str	r3, [r7, #4]
 8013972:	f107 0308 	add.w	r3, r7, #8
 8013976:	222e      	movs	r2, #46	; 0x2e
 8013978:	2100      	movs	r1, #0
 801397a:	4618      	mov	r0, r3
 801397c:	f00e fd2a 	bl	80223d4 <memset>
	printf("\n_____________________________________________\n");
 8013980:	481d      	ldr	r0, [pc, #116]	; (80139f8 <Get_Build_Details+0x90>)
 8013982:	f00e feab 	bl	80226dc <puts>
	printf("Build Date:%s\n",__DATE__);
 8013986:	491d      	ldr	r1, [pc, #116]	; (80139fc <Get_Build_Details+0x94>)
 8013988:	481d      	ldr	r0, [pc, #116]	; (8013a00 <Get_Build_Details+0x98>)
 801398a:	f00e fe0b 	bl	80225a4 <iprintf>
	printf("Build Time:%s\n",__TIME__);
 801398e:	491d      	ldr	r1, [pc, #116]	; (8013a04 <Get_Build_Details+0x9c>)
 8013990:	481d      	ldr	r0, [pc, #116]	; (8013a08 <Get_Build_Details+0xa0>)
 8013992:	f00e fe07 	bl	80225a4 <iprintf>
	strcpy((char *)CRC_Array,(const char *)__DATE__);
 8013996:	1d3b      	adds	r3, r7, #4
 8013998:	4a18      	ldr	r2, [pc, #96]	; (80139fc <Get_Build_Details+0x94>)
 801399a:	ca07      	ldmia	r2, {r0, r1, r2}
 801399c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	strcat((char *)CRC_Array,(const char *)__TIME__);
 80139a0:	1d3b      	adds	r3, r7, #4
 80139a2:	4618      	mov	r0, r3
 80139a4:	f7ec fc56 	bl	8000254 <strlen>
 80139a8:	4603      	mov	r3, r0
 80139aa:	461a      	mov	r2, r3
 80139ac:	1d3b      	adds	r3, r7, #4
 80139ae:	4413      	add	r3, r2
 80139b0:	4914      	ldr	r1, [pc, #80]	; (8013a04 <Get_Build_Details+0x9c>)
 80139b2:	461a      	mov	r2, r3
 80139b4:	460b      	mov	r3, r1
 80139b6:	cb03      	ldmia	r3!, {r0, r1}
 80139b8:	6010      	str	r0, [r2, #0]
 80139ba:	6051      	str	r1, [r2, #4]
 80139bc:	781b      	ldrb	r3, [r3, #0]
 80139be:	7213      	strb	r3, [r2, #8]
	Build_CRC = GetCRC16(0, CRC_Array, strlen((const char *)CRC_Array));
 80139c0:	1d3b      	adds	r3, r7, #4
 80139c2:	4618      	mov	r0, r3
 80139c4:	f7ec fc46 	bl	8000254 <strlen>
 80139c8:	4603      	mov	r3, r0
 80139ca:	b21a      	sxth	r2, r3
 80139cc:	1d3b      	adds	r3, r7, #4
 80139ce:	4619      	mov	r1, r3
 80139d0:	2000      	movs	r0, #0
 80139d2:	f7ff f94b 	bl	8012c6c <GetCRC16>
 80139d6:	4603      	mov	r3, r0
 80139d8:	461a      	mov	r2, r3
 80139da:	4b0c      	ldr	r3, [pc, #48]	; (8013a0c <Get_Build_Details+0xa4>)
 80139dc:	801a      	strh	r2, [r3, #0]
	printf("Build Name:%s_VERSION:%s\n",__BUILD_NAME__,__BUILD_VERSION__);
 80139de:	4a0c      	ldr	r2, [pc, #48]	; (8013a10 <Get_Build_Details+0xa8>)
 80139e0:	490c      	ldr	r1, [pc, #48]	; (8013a14 <Get_Build_Details+0xac>)
 80139e2:	480d      	ldr	r0, [pc, #52]	; (8013a18 <Get_Build_Details+0xb0>)
 80139e4:	f00e fdde 	bl	80225a4 <iprintf>
	printf("_____________________________________________\n");
 80139e8:	480c      	ldr	r0, [pc, #48]	; (8013a1c <Get_Build_Details+0xb4>)
 80139ea:	f00e fe77 	bl	80226dc <puts>

}
 80139ee:	bf00      	nop
 80139f0:	3738      	adds	r7, #56	; 0x38
 80139f2:	46bd      	mov	sp, r7
 80139f4:	bd80      	pop	{r7, pc}
 80139f6:	bf00      	nop
 80139f8:	08026ed0 	.word	0x08026ed0
 80139fc:	08026f00 	.word	0x08026f00
 8013a00:	08026f0c 	.word	0x08026f0c
 8013a04:	08026f1c 	.word	0x08026f1c
 8013a08:	08026f28 	.word	0x08026f28
 8013a0c:	20009ca8 	.word	0x20009ca8
 8013a10:	08026f38 	.word	0x08026f38
 8013a14:	08026f40 	.word	0x08026f40
 8013a18:	08026f58 	.word	0x08026f58
 8013a1c:	08026f74 	.word	0x08026f74

08013a20 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8013a20:	b580      	push	{r7, lr}
 8013a22:	b084      	sub	sp, #16
 8013a24:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8013a26:	463b      	mov	r3, r7
 8013a28:	2200      	movs	r2, #0
 8013a2a:	601a      	str	r2, [r3, #0]
 8013a2c:	605a      	str	r2, [r3, #4]
 8013a2e:	609a      	str	r2, [r3, #8]
 8013a30:	60da      	str	r2, [r3, #12]

	/* Disables the MPU */
	HAL_MPU_Disable();
 8013a32:	f002 fdc5 	bl	80165c0 <HAL_MPU_Disable>

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8013a36:	2301      	movs	r3, #1
 8013a38:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8013a3a:	2300      	movs	r3, #0
 8013a3c:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x0;
 8013a3e:	2300      	movs	r3, #0
 8013a40:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8013a42:	231f      	movs	r3, #31
 8013a44:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x87;
 8013a46:	2387      	movs	r3, #135	; 0x87
 8013a48:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8013a4a:	2300      	movs	r3, #0
 8013a4c:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8013a4e:	2300      	movs	r3, #0
 8013a50:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8013a52:	2301      	movs	r3, #1
 8013a54:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8013a56:	2301      	movs	r3, #1
 8013a58:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8013a5a:	2300      	movs	r3, #0
 8013a5c:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8013a5e:	2300      	movs	r3, #0
 8013a60:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8013a62:	463b      	mov	r3, r7
 8013a64:	4618      	mov	r0, r3
 8013a66:	f002 fde3 	bl	8016630 <HAL_MPU_ConfigRegion>
	/* Enables the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8013a6a:	2004      	movs	r0, #4
 8013a6c:	f002 fdc0 	bl	80165f0 <HAL_MPU_Enable>

}
 8013a70:	bf00      	nop
 8013a72:	3710      	adds	r7, #16
 8013a74:	46bd      	mov	sp, r7
 8013a76:	bd80      	pop	{r7, pc}

08013a78 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8013a78:	b480      	push	{r7}
 8013a7a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8013a7c:	b672      	cpsid	i
}
 8013a7e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8013a80:	e7fe      	b.n	8013a80 <Error_Handler+0x8>
	...

08013a84 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8013a84:	b580      	push	{r7, lr}
 8013a86:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8013a88:	4b06      	ldr	r3, [pc, #24]	; (8013aa4 <MX_RNG_Init+0x20>)
 8013a8a:	4a07      	ldr	r2, [pc, #28]	; (8013aa8 <MX_RNG_Init+0x24>)
 8013a8c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8013a8e:	4805      	ldr	r0, [pc, #20]	; (8013aa4 <MX_RNG_Init+0x20>)
 8013a90:	f006 f9b0 	bl	8019df4 <HAL_RNG_Init>
 8013a94:	4603      	mov	r3, r0
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	d001      	beq.n	8013a9e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8013a9a:	f7ff ffed 	bl	8013a78 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8013a9e:	bf00      	nop
 8013aa0:	bd80      	pop	{r7, pc}
 8013aa2:	bf00      	nop
 8013aa4:	20009c84 	.word	0x20009c84
 8013aa8:	50060800 	.word	0x50060800

08013aac <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8013aac:	b580      	push	{r7, lr}
 8013aae:	b0a8      	sub	sp, #160	; 0xa0
 8013ab0:	af00      	add	r7, sp, #0
 8013ab2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8013ab4:	f107 0310 	add.w	r3, r7, #16
 8013ab8:	2290      	movs	r2, #144	; 0x90
 8013aba:	2100      	movs	r1, #0
 8013abc:	4618      	mov	r0, r3
 8013abe:	f00e fc89 	bl	80223d4 <memset>
  if(rngHandle->Instance==RNG)
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	681b      	ldr	r3, [r3, #0]
 8013ac6:	4a11      	ldr	r2, [pc, #68]	; (8013b0c <HAL_RNG_MspInit+0x60>)
 8013ac8:	4293      	cmp	r3, r2
 8013aca:	d11b      	bne.n	8013b04 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8013acc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8013ad0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8013ad2:	2300      	movs	r3, #0
 8013ad4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8013ad8:	f107 0310 	add.w	r3, r7, #16
 8013adc:	4618      	mov	r0, r3
 8013ade:	f005 fd61 	bl	80195a4 <HAL_RCCEx_PeriphCLKConfig>
 8013ae2:	4603      	mov	r3, r0
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d001      	beq.n	8013aec <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8013ae8:	f7ff ffc6 	bl	8013a78 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8013aec:	4b08      	ldr	r3, [pc, #32]	; (8013b10 <HAL_RNG_MspInit+0x64>)
 8013aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013af0:	4a07      	ldr	r2, [pc, #28]	; (8013b10 <HAL_RNG_MspInit+0x64>)
 8013af2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013af6:	6353      	str	r3, [r2, #52]	; 0x34
 8013af8:	4b05      	ldr	r3, [pc, #20]	; (8013b10 <HAL_RNG_MspInit+0x64>)
 8013afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013b00:	60fb      	str	r3, [r7, #12]
 8013b02:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8013b04:	bf00      	nop
 8013b06:	37a0      	adds	r7, #160	; 0xa0
 8013b08:	46bd      	mov	sp, r7
 8013b0a:	bd80      	pop	{r7, pc}
 8013b0c:	50060800 	.word	0x50060800
 8013b10:	40023800 	.word	0x40023800

08013b14 <__NVIC_SystemReset>:
{
 8013b14:	b480      	push	{r7}
 8013b16:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8013b18:	f3bf 8f4f 	dsb	sy
}
 8013b1c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8013b1e:	4b06      	ldr	r3, [pc, #24]	; (8013b38 <__NVIC_SystemReset+0x24>)
 8013b20:	68db      	ldr	r3, [r3, #12]
 8013b22:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8013b26:	4904      	ldr	r1, [pc, #16]	; (8013b38 <__NVIC_SystemReset+0x24>)
 8013b28:	4b04      	ldr	r3, [pc, #16]	; (8013b3c <__NVIC_SystemReset+0x28>)
 8013b2a:	4313      	orrs	r3, r2
 8013b2c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8013b2e:	f3bf 8f4f 	dsb	sy
}
 8013b32:	bf00      	nop
    __NOP();
 8013b34:	bf00      	nop
 8013b36:	e7fd      	b.n	8013b34 <__NVIC_SystemReset+0x20>
 8013b38:	e000ed00 	.word	0xe000ed00
 8013b3c:	05fa0004 	.word	0x05fa0004

08013b40 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8013b40:	b580      	push	{r7, lr}
 8013b42:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8013b44:	4b1b      	ldr	r3, [pc, #108]	; (8013bb4 <MX_SPI1_Init+0x74>)
 8013b46:	4a1c      	ldr	r2, [pc, #112]	; (8013bb8 <MX_SPI1_Init+0x78>)
 8013b48:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8013b4a:	4b1a      	ldr	r3, [pc, #104]	; (8013bb4 <MX_SPI1_Init+0x74>)
 8013b4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8013b50:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8013b52:	4b18      	ldr	r3, [pc, #96]	; (8013bb4 <MX_SPI1_Init+0x74>)
 8013b54:	2200      	movs	r2, #0
 8013b56:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8013b58:	4b16      	ldr	r3, [pc, #88]	; (8013bb4 <MX_SPI1_Init+0x74>)
 8013b5a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8013b5e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8013b60:	4b14      	ldr	r3, [pc, #80]	; (8013bb4 <MX_SPI1_Init+0x74>)
 8013b62:	2200      	movs	r2, #0
 8013b64:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8013b66:	4b13      	ldr	r3, [pc, #76]	; (8013bb4 <MX_SPI1_Init+0x74>)
 8013b68:	2200      	movs	r2, #0
 8013b6a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8013b6c:	4b11      	ldr	r3, [pc, #68]	; (8013bb4 <MX_SPI1_Init+0x74>)
 8013b6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013b72:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8013b74:	4b0f      	ldr	r3, [pc, #60]	; (8013bb4 <MX_SPI1_Init+0x74>)
 8013b76:	2208      	movs	r2, #8
 8013b78:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8013b7a:	4b0e      	ldr	r3, [pc, #56]	; (8013bb4 <MX_SPI1_Init+0x74>)
 8013b7c:	2200      	movs	r2, #0
 8013b7e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8013b80:	4b0c      	ldr	r3, [pc, #48]	; (8013bb4 <MX_SPI1_Init+0x74>)
 8013b82:	2200      	movs	r2, #0
 8013b84:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8013b86:	4b0b      	ldr	r3, [pc, #44]	; (8013bb4 <MX_SPI1_Init+0x74>)
 8013b88:	2200      	movs	r2, #0
 8013b8a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8013b8c:	4b09      	ldr	r3, [pc, #36]	; (8013bb4 <MX_SPI1_Init+0x74>)
 8013b8e:	2207      	movs	r2, #7
 8013b90:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8013b92:	4b08      	ldr	r3, [pc, #32]	; (8013bb4 <MX_SPI1_Init+0x74>)
 8013b94:	2200      	movs	r2, #0
 8013b96:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8013b98:	4b06      	ldr	r3, [pc, #24]	; (8013bb4 <MX_SPI1_Init+0x74>)
 8013b9a:	2208      	movs	r2, #8
 8013b9c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8013b9e:	4805      	ldr	r0, [pc, #20]	; (8013bb4 <MX_SPI1_Init+0x74>)
 8013ba0:	f006 f9bd 	bl	8019f1e <HAL_SPI_Init>
 8013ba4:	4603      	mov	r3, r0
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	d001      	beq.n	8013bae <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8013baa:	f7ff ff65 	bl	8013a78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8013bae:	bf00      	nop
 8013bb0:	bd80      	pop	{r7, pc}
 8013bb2:	bf00      	nop
 8013bb4:	20009cac 	.word	0x20009cac
 8013bb8:	40013000 	.word	0x40013000

08013bbc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8013bbc:	b580      	push	{r7, lr}
 8013bbe:	b08c      	sub	sp, #48	; 0x30
 8013bc0:	af00      	add	r7, sp, #0
 8013bc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013bc4:	f107 031c 	add.w	r3, r7, #28
 8013bc8:	2200      	movs	r2, #0
 8013bca:	601a      	str	r2, [r3, #0]
 8013bcc:	605a      	str	r2, [r3, #4]
 8013bce:	609a      	str	r2, [r3, #8]
 8013bd0:	60da      	str	r2, [r3, #12]
 8013bd2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	681b      	ldr	r3, [r3, #0]
 8013bd8:	4a33      	ldr	r2, [pc, #204]	; (8013ca8 <HAL_SPI_MspInit+0xec>)
 8013bda:	4293      	cmp	r3, r2
 8013bdc:	d160      	bne.n	8013ca0 <HAL_SPI_MspInit+0xe4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8013bde:	4b33      	ldr	r3, [pc, #204]	; (8013cac <HAL_SPI_MspInit+0xf0>)
 8013be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013be2:	4a32      	ldr	r2, [pc, #200]	; (8013cac <HAL_SPI_MspInit+0xf0>)
 8013be4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8013be8:	6453      	str	r3, [r2, #68]	; 0x44
 8013bea:	4b30      	ldr	r3, [pc, #192]	; (8013cac <HAL_SPI_MspInit+0xf0>)
 8013bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013bee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8013bf2:	61bb      	str	r3, [r7, #24]
 8013bf4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013bf6:	4b2d      	ldr	r3, [pc, #180]	; (8013cac <HAL_SPI_MspInit+0xf0>)
 8013bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013bfa:	4a2c      	ldr	r2, [pc, #176]	; (8013cac <HAL_SPI_MspInit+0xf0>)
 8013bfc:	f043 0301 	orr.w	r3, r3, #1
 8013c00:	6313      	str	r3, [r2, #48]	; 0x30
 8013c02:	4b2a      	ldr	r3, [pc, #168]	; (8013cac <HAL_SPI_MspInit+0xf0>)
 8013c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c06:	f003 0301 	and.w	r3, r3, #1
 8013c0a:	617b      	str	r3, [r7, #20]
 8013c0c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8013c0e:	4b27      	ldr	r3, [pc, #156]	; (8013cac <HAL_SPI_MspInit+0xf0>)
 8013c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c12:	4a26      	ldr	r2, [pc, #152]	; (8013cac <HAL_SPI_MspInit+0xf0>)
 8013c14:	f043 0308 	orr.w	r3, r3, #8
 8013c18:	6313      	str	r3, [r2, #48]	; 0x30
 8013c1a:	4b24      	ldr	r3, [pc, #144]	; (8013cac <HAL_SPI_MspInit+0xf0>)
 8013c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c1e:	f003 0308 	and.w	r3, r3, #8
 8013c22:	613b      	str	r3, [r7, #16]
 8013c24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8013c26:	4b21      	ldr	r3, [pc, #132]	; (8013cac <HAL_SPI_MspInit+0xf0>)
 8013c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c2a:	4a20      	ldr	r2, [pc, #128]	; (8013cac <HAL_SPI_MspInit+0xf0>)
 8013c2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013c30:	6313      	str	r3, [r2, #48]	; 0x30
 8013c32:	4b1e      	ldr	r3, [pc, #120]	; (8013cac <HAL_SPI_MspInit+0xf0>)
 8013c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013c3a:	60fb      	str	r3, [r7, #12]
 8013c3c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin;
 8013c3e:	2320      	movs	r3, #32
 8013c40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013c42:	2302      	movs	r3, #2
 8013c44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013c46:	2300      	movs	r3, #0
 8013c48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013c4a:	2303      	movs	r3, #3
 8013c4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8013c4e:	2305      	movs	r3, #5
 8013c50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPI1_SCK_GPIO_Port, &GPIO_InitStruct);
 8013c52:	f107 031c 	add.w	r3, r7, #28
 8013c56:	4619      	mov	r1, r3
 8013c58:	4815      	ldr	r0, [pc, #84]	; (8013cb0 <HAL_SPI_MspInit+0xf4>)
 8013c5a:	f003 ffa5 	bl	8017ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MOSI_Pin;
 8013c5e:	2380      	movs	r3, #128	; 0x80
 8013c60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013c62:	2302      	movs	r3, #2
 8013c64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013c66:	2300      	movs	r3, #0
 8013c68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013c6a:	2303      	movs	r3, #3
 8013c6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8013c6e:	2305      	movs	r3, #5
 8013c70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPI1_MOSI_GPIO_Port, &GPIO_InitStruct);
 8013c72:	f107 031c 	add.w	r3, r7, #28
 8013c76:	4619      	mov	r1, r3
 8013c78:	480e      	ldr	r0, [pc, #56]	; (8013cb4 <HAL_SPI_MspInit+0xf8>)
 8013c7a:	f003 ff95 	bl	8017ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MISO_Pin;
 8013c7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013c82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013c84:	2302      	movs	r3, #2
 8013c86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013c88:	2300      	movs	r3, #0
 8013c8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013c8c:	2303      	movs	r3, #3
 8013c8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8013c90:	2305      	movs	r3, #5
 8013c92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPI1_MISO_GPIO_Port, &GPIO_InitStruct);
 8013c94:	f107 031c 	add.w	r3, r7, #28
 8013c98:	4619      	mov	r1, r3
 8013c9a:	4807      	ldr	r0, [pc, #28]	; (8013cb8 <HAL_SPI_MspInit+0xfc>)
 8013c9c:	f003 ff84 	bl	8017ba8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8013ca0:	bf00      	nop
 8013ca2:	3730      	adds	r7, #48	; 0x30
 8013ca4:	46bd      	mov	sp, r7
 8013ca6:	bd80      	pop	{r7, pc}
 8013ca8:	40013000 	.word	0x40013000
 8013cac:	40023800 	.word	0x40023800
 8013cb0:	40020000 	.word	0x40020000
 8013cb4:	40020c00 	.word	0x40020c00
 8013cb8:	40021800 	.word	0x40021800

08013cbc <SPI_WriteInFlash>:

	SPI_WriteInFlash(uc_ChipSel,Ul_MemAddr,us_Size,pp_DataPtr);
}

uint8_t  SPI_WriteInFlash(uint8_t Chip,uint32_t Ul_Address,uint16_t uc_Len,uint8_t *uc_pp_Buff)
{
 8013cbc:	b580      	push	{r7, lr}
 8013cbe:	b086      	sub	sp, #24
 8013cc0:	af00      	add	r7, sp, #0
 8013cc2:	60b9      	str	r1, [r7, #8]
 8013cc4:	607b      	str	r3, [r7, #4]
 8013cc6:	4603      	mov	r3, r0
 8013cc8:	73fb      	strb	r3, [r7, #15]
 8013cca:	4613      	mov	r3, r2
 8013ccc:	81bb      	strh	r3, [r7, #12]

	uint8_t Return_Value=0;
 8013cce:	2300      	movs	r3, #0
 8013cd0:	75fb      	strb	r3, [r7, #23]
	switch(Chip)
 8013cd2:	7bfb      	ldrb	r3, [r7, #15]
 8013cd4:	3b01      	subs	r3, #1
 8013cd6:	2b03      	cmp	r3, #3
 8013cd8:	d828      	bhi.n	8013d2c <SPI_WriteInFlash+0x70>
 8013cda:	a201      	add	r2, pc, #4	; (adr r2, 8013ce0 <SPI_WriteInFlash+0x24>)
 8013cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013ce0:	08013cf1 	.word	0x08013cf1
 8013ce4:	08013d01 	.word	0x08013d01
 8013ce8:	08013d0f 	.word	0x08013d0f
 8013cec:	08013d1d 	.word	0x08013d1d
	{
	case CHIP1://To select FLASH1
		CHIP_Port = CS1_GPIO_Port;
 8013cf0:	4b75      	ldr	r3, [pc, #468]	; (8013ec8 <SPI_WriteInFlash+0x20c>)
 8013cf2:	4a76      	ldr	r2, [pc, #472]	; (8013ecc <SPI_WriteInFlash+0x210>)
 8013cf4:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS1_Pin;
 8013cf6:	4b76      	ldr	r3, [pc, #472]	; (8013ed0 <SPI_WriteInFlash+0x214>)
 8013cf8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013cfc:	601a      	str	r2, [r3, #0]
		break;
 8013cfe:	e018      	b.n	8013d32 <SPI_WriteInFlash+0x76>
	case CHIP2://To select FLASH2
		CHIP_Port = CS2_GPIO_Port;
 8013d00:	4b71      	ldr	r3, [pc, #452]	; (8013ec8 <SPI_WriteInFlash+0x20c>)
 8013d02:	4a74      	ldr	r2, [pc, #464]	; (8013ed4 <SPI_WriteInFlash+0x218>)
 8013d04:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS2_Pin;
 8013d06:	4b72      	ldr	r3, [pc, #456]	; (8013ed0 <SPI_WriteInFlash+0x214>)
 8013d08:	2220      	movs	r2, #32
 8013d0a:	601a      	str	r2, [r3, #0]
		break;
 8013d0c:	e011      	b.n	8013d32 <SPI_WriteInFlash+0x76>
	case CHIP3://To select FLASH3
		CHIP_Port = CS3_GPIO_Port;
 8013d0e:	4b6e      	ldr	r3, [pc, #440]	; (8013ec8 <SPI_WriteInFlash+0x20c>)
 8013d10:	4a70      	ldr	r2, [pc, #448]	; (8013ed4 <SPI_WriteInFlash+0x218>)
 8013d12:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS3_Pin;
 8013d14:	4b6e      	ldr	r3, [pc, #440]	; (8013ed0 <SPI_WriteInFlash+0x214>)
 8013d16:	2240      	movs	r2, #64	; 0x40
 8013d18:	601a      	str	r2, [r3, #0]
		break;
 8013d1a:	e00a      	b.n	8013d32 <SPI_WriteInFlash+0x76>
	case CHIP4://To select FLASH4
		CHIP_Port = CS4_GPIO_Port;
 8013d1c:	4b6a      	ldr	r3, [pc, #424]	; (8013ec8 <SPI_WriteInFlash+0x20c>)
 8013d1e:	4a6e      	ldr	r2, [pc, #440]	; (8013ed8 <SPI_WriteInFlash+0x21c>)
 8013d20:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS4_Pin;
 8013d22:	4b6b      	ldr	r3, [pc, #428]	; (8013ed0 <SPI_WriteInFlash+0x214>)
 8013d24:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8013d28:	601a      	str	r2, [r3, #0]
		break;
 8013d2a:	e002      	b.n	8013d32 <SPI_WriteInFlash+0x76>
	default:printf("Wrong Chip selection\n");
 8013d2c:	486b      	ldr	r0, [pc, #428]	; (8013edc <SPI_WriteInFlash+0x220>)
 8013d2e:	f00e fcd5 	bl	80226dc <puts>
	}
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8013d32:	4b65      	ldr	r3, [pc, #404]	; (8013ec8 <SPI_WriteInFlash+0x20c>)
 8013d34:	681b      	ldr	r3, [r3, #0]
 8013d36:	4a66      	ldr	r2, [pc, #408]	; (8013ed0 <SPI_WriteInFlash+0x214>)
 8013d38:	6812      	ldr	r2, [r2, #0]
 8013d3a:	b291      	uxth	r1, r2
 8013d3c:	2201      	movs	r2, #1
 8013d3e:	4618      	mov	r0, r3
 8013d40:	f004 f8f6 	bl	8017f30 <HAL_GPIO_WritePin>





	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8013d44:	4b60      	ldr	r3, [pc, #384]	; (8013ec8 <SPI_WriteInFlash+0x20c>)
 8013d46:	681b      	ldr	r3, [r3, #0]
 8013d48:	4a61      	ldr	r2, [pc, #388]	; (8013ed0 <SPI_WriteInFlash+0x214>)
 8013d4a:	6812      	ldr	r2, [r2, #0]
 8013d4c:	b291      	uxth	r1, r2
 8013d4e:	2200      	movs	r2, #0
 8013d50:	4618      	mov	r0, r3
 8013d52:	f004 f8ed 	bl	8017f30 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_WREN, 1, 100);/* write enable=0x06 */
 8013d56:	2364      	movs	r3, #100	; 0x64
 8013d58:	2201      	movs	r2, #1
 8013d5a:	4961      	ldr	r1, [pc, #388]	; (8013ee0 <SPI_WriteInFlash+0x224>)
 8013d5c:	4861      	ldr	r0, [pc, #388]	; (8013ee4 <SPI_WriteInFlash+0x228>)
 8013d5e:	f006 f989 	bl	801a074 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8013d62:	4b59      	ldr	r3, [pc, #356]	; (8013ec8 <SPI_WriteInFlash+0x20c>)
 8013d64:	681b      	ldr	r3, [r3, #0]
 8013d66:	4a5a      	ldr	r2, [pc, #360]	; (8013ed0 <SPI_WriteInFlash+0x214>)
 8013d68:	6812      	ldr	r2, [r2, #0]
 8013d6a:	b291      	uxth	r1, r2
 8013d6c:	2201      	movs	r2, #1
 8013d6e:	4618      	mov	r0, r3
 8013d70:	f004 f8de 	bl	8017f30 <HAL_GPIO_WritePin>

	while (1)
	{
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8013d74:	4b54      	ldr	r3, [pc, #336]	; (8013ec8 <SPI_WriteInFlash+0x20c>)
 8013d76:	681b      	ldr	r3, [r3, #0]
 8013d78:	4a55      	ldr	r2, [pc, #340]	; (8013ed0 <SPI_WriteInFlash+0x214>)
 8013d7a:	6812      	ldr	r2, [r2, #0]
 8013d7c:	b291      	uxth	r1, r2
 8013d7e:	2200      	movs	r2, #0
 8013d80:	4618      	mov	r0, r3
 8013d82:	f004 f8d5 	bl	8017f30 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_RDSR, sizeof(EEPROM_RDSR), 100);/* check status to see if write enabled is latched=0x05 */
 8013d86:	2364      	movs	r3, #100	; 0x64
 8013d88:	2201      	movs	r2, #1
 8013d8a:	4957      	ldr	r1, [pc, #348]	; (8013ee8 <SPI_WriteInFlash+0x22c>)
 8013d8c:	4855      	ldr	r0, [pc, #340]	; (8013ee4 <SPI_WriteInFlash+0x228>)
 8013d8e:	f006 f971 	bl	801a074 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 8013d92:	2364      	movs	r3, #100	; 0x64
 8013d94:	2201      	movs	r2, #1
 8013d96:	4955      	ldr	r1, [pc, #340]	; (8013eec <SPI_WriteInFlash+0x230>)
 8013d98:	4852      	ldr	r0, [pc, #328]	; (8013ee4 <SPI_WriteInFlash+0x228>)
 8013d9a:	f006 fad9 	bl	801a350 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8013d9e:	4b4a      	ldr	r3, [pc, #296]	; (8013ec8 <SPI_WriteInFlash+0x20c>)
 8013da0:	681b      	ldr	r3, [r3, #0]
 8013da2:	4a4b      	ldr	r2, [pc, #300]	; (8013ed0 <SPI_WriteInFlash+0x214>)
 8013da4:	6812      	ldr	r2, [r2, #0]
 8013da6:	b291      	uxth	r1, r2
 8013da8:	2201      	movs	r2, #1
 8013daa:	4618      	mov	r0, r3
 8013dac:	f004 f8c0 	bl	8017f30 <HAL_GPIO_WritePin>
		if ( (SPI_RX_Data & 0x02) == 0x02 )	/* bit 0 is ready, bit 1 is write enable */
 8013db0:	4b4e      	ldr	r3, [pc, #312]	; (8013eec <SPI_WriteInFlash+0x230>)
 8013db2:	781b      	ldrb	r3, [r3, #0]
 8013db4:	f003 0302 	and.w	r3, r3, #2
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d103      	bne.n	8013dc4 <SPI_WriteInFlash+0x108>
			break;
		}
		else
		{

			printf("\n Write enable not latched.......");
 8013dbc:	484c      	ldr	r0, [pc, #304]	; (8013ef0 <SPI_WriteInFlash+0x234>)
 8013dbe:	f00e fbf1 	bl	80225a4 <iprintf>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8013dc2:	e7d7      	b.n	8013d74 <SPI_WriteInFlash+0xb8>
			break;
 8013dc4:	bf00      	nop
		}
	}

	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8013dc6:	4b40      	ldr	r3, [pc, #256]	; (8013ec8 <SPI_WriteInFlash+0x20c>)
 8013dc8:	681b      	ldr	r3, [r3, #0]
 8013dca:	4a41      	ldr	r2, [pc, #260]	; (8013ed0 <SPI_WriteInFlash+0x214>)
 8013dcc:	6812      	ldr	r2, [r2, #0]
 8013dce:	b291      	uxth	r1, r2
 8013dd0:	2200      	movs	r2, #0
 8013dd2:	4618      	mov	r0, r3
 8013dd4:	f004 f8ac 	bl	8017f30 <HAL_GPIO_WritePin>
	spi_cmd[0]=EEPROM_WRITE;/* Write command 0x02 */
 8013dd8:	2202      	movs	r2, #2
 8013dda:	4b46      	ldr	r3, [pc, #280]	; (8013ef4 <SPI_WriteInFlash+0x238>)
 8013ddc:	701a      	strb	r2, [r3, #0]
	spi_cmd[1]=Ul_Address>>16;/* Read address offset is 0x000000 */
 8013dde:	68bb      	ldr	r3, [r7, #8]
 8013de0:	0c1b      	lsrs	r3, r3, #16
 8013de2:	b2da      	uxtb	r2, r3
 8013de4:	4b43      	ldr	r3, [pc, #268]	; (8013ef4 <SPI_WriteInFlash+0x238>)
 8013de6:	705a      	strb	r2, [r3, #1]
	spi_cmd[2]=Ul_Address>>8;
 8013de8:	68bb      	ldr	r3, [r7, #8]
 8013dea:	0a1b      	lsrs	r3, r3, #8
 8013dec:	b2da      	uxtb	r2, r3
 8013dee:	4b41      	ldr	r3, [pc, #260]	; (8013ef4 <SPI_WriteInFlash+0x238>)
 8013df0:	709a      	strb	r2, [r3, #2]
	spi_cmd[3]=Ul_Address;
 8013df2:	68bb      	ldr	r3, [r7, #8]
 8013df4:	b2da      	uxtb	r2, r3
 8013df6:	4b3f      	ldr	r3, [pc, #252]	; (8013ef4 <SPI_WriteInFlash+0x238>)
 8013df8:	70da      	strb	r2, [r3, #3]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 4, 100);
 8013dfa:	2364      	movs	r3, #100	; 0x64
 8013dfc:	2204      	movs	r2, #4
 8013dfe:	493d      	ldr	r1, [pc, #244]	; (8013ef4 <SPI_WriteInFlash+0x238>)
 8013e00:	4838      	ldr	r0, [pc, #224]	; (8013ee4 <SPI_WriteInFlash+0x228>)
 8013e02:	f006 f937 	bl	801a074 <HAL_SPI_Transmit>

	HAL_SPI_Transmit(&hspi1, uc_pp_Buff,uc_Len , 1000);
 8013e06:	89ba      	ldrh	r2, [r7, #12]
 8013e08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013e0c:	6879      	ldr	r1, [r7, #4]
 8013e0e:	4835      	ldr	r0, [pc, #212]	; (8013ee4 <SPI_WriteInFlash+0x228>)
 8013e10:	f006 f930 	bl	801a074 <HAL_SPI_Transmit>
	//		}
	//		printf("[%03lu]:%c ",ulAddress,uc_pp_Buff[ulAddress]);
	//	}


	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8013e14:	4b2c      	ldr	r3, [pc, #176]	; (8013ec8 <SPI_WriteInFlash+0x20c>)
 8013e16:	681b      	ldr	r3, [r3, #0]
 8013e18:	4a2d      	ldr	r2, [pc, #180]	; (8013ed0 <SPI_WriteInFlash+0x214>)
 8013e1a:	6812      	ldr	r2, [r2, #0]
 8013e1c:	b291      	uxth	r1, r2
 8013e1e:	2201      	movs	r2, #1
 8013e20:	4618      	mov	r0, r3
 8013e22:	f004 f885 	bl	8017f30 <HAL_GPIO_WritePin>

	while (1)
	{
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8013e26:	4b28      	ldr	r3, [pc, #160]	; (8013ec8 <SPI_WriteInFlash+0x20c>)
 8013e28:	681b      	ldr	r3, [r3, #0]
 8013e2a:	4a29      	ldr	r2, [pc, #164]	; (8013ed0 <SPI_WriteInFlash+0x214>)
 8013e2c:	6812      	ldr	r2, [r2, #0]
 8013e2e:	b291      	uxth	r1, r2
 8013e30:	2200      	movs	r2, #0
 8013e32:	4618      	mov	r0, r3
 8013e34:	f004 f87c 	bl	8017f30 <HAL_GPIO_WritePin>
		spi_cmd[0]=EEPROM_RDSR;/* check status to see if write cycle is done or not */
 8013e38:	2205      	movs	r2, #5
 8013e3a:	4b2e      	ldr	r3, [pc, #184]	; (8013ef4 <SPI_WriteInFlash+0x238>)
 8013e3c:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 1, 100);
 8013e3e:	2364      	movs	r3, #100	; 0x64
 8013e40:	2201      	movs	r2, #1
 8013e42:	492c      	ldr	r1, [pc, #176]	; (8013ef4 <SPI_WriteInFlash+0x238>)
 8013e44:	4827      	ldr	r0, [pc, #156]	; (8013ee4 <SPI_WriteInFlash+0x228>)
 8013e46:	f006 f915 	bl	801a074 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 8013e4a:	2364      	movs	r3, #100	; 0x64
 8013e4c:	2201      	movs	r2, #1
 8013e4e:	4927      	ldr	r1, [pc, #156]	; (8013eec <SPI_WriteInFlash+0x230>)
 8013e50:	4824      	ldr	r0, [pc, #144]	; (8013ee4 <SPI_WriteInFlash+0x228>)
 8013e52:	f006 fa7d 	bl	801a350 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8013e56:	4b1c      	ldr	r3, [pc, #112]	; (8013ec8 <SPI_WriteInFlash+0x20c>)
 8013e58:	681b      	ldr	r3, [r3, #0]
 8013e5a:	4a1d      	ldr	r2, [pc, #116]	; (8013ed0 <SPI_WriteInFlash+0x214>)
 8013e5c:	6812      	ldr	r2, [r2, #0]
 8013e5e:	b291      	uxth	r1, r2
 8013e60:	2201      	movs	r2, #1
 8013e62:	4618      	mov	r0, r3
 8013e64:	f004 f864 	bl	8017f30 <HAL_GPIO_WritePin>
		if((SPI_RX_Data & 0x01) == 0x00 )	/* bit 0 to 0 is ready */
 8013e68:	4b20      	ldr	r3, [pc, #128]	; (8013eec <SPI_WriteInFlash+0x230>)
 8013e6a:	781b      	ldrb	r3, [r3, #0]
 8013e6c:	f003 0301 	and.w	r3, r3, #1
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d1d8      	bne.n	8013e26 <SPI_WriteInFlash+0x16a>
		{
			Return_Value=1;
 8013e74:	2301      	movs	r3, #1
 8013e76:	75fb      	strb	r3, [r7, #23]
			//int	ui_test = 1;
			//printf("ui_test in write flash=%d\n",ui_test);
			break;
 8013e78:	bf00      	nop
		{
			;//DisplayString("\nDevice is busy in Erasing.....",DisPort);
		}
	}
	/*Write Disable*/
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8013e7a:	4b13      	ldr	r3, [pc, #76]	; (8013ec8 <SPI_WriteInFlash+0x20c>)
 8013e7c:	681b      	ldr	r3, [r3, #0]
 8013e7e:	4a14      	ldr	r2, [pc, #80]	; (8013ed0 <SPI_WriteInFlash+0x214>)
 8013e80:	6812      	ldr	r2, [r2, #0]
 8013e82:	b291      	uxth	r1, r2
 8013e84:	2200      	movs	r2, #0
 8013e86:	4618      	mov	r0, r3
 8013e88:	f004 f852 	bl	8017f30 <HAL_GPIO_WritePin>
	spi_cmd[0]=EEPROM_WRDI;/* write disable */
 8013e8c:	2204      	movs	r2, #4
 8013e8e:	4b19      	ldr	r3, [pc, #100]	; (8013ef4 <SPI_WriteInFlash+0x238>)
 8013e90:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 1, 100);
 8013e92:	2364      	movs	r3, #100	; 0x64
 8013e94:	2201      	movs	r2, #1
 8013e96:	4917      	ldr	r1, [pc, #92]	; (8013ef4 <SPI_WriteInFlash+0x238>)
 8013e98:	4812      	ldr	r0, [pc, #72]	; (8013ee4 <SPI_WriteInFlash+0x228>)
 8013e9a:	f006 f8eb 	bl	801a074 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 8013e9e:	2364      	movs	r3, #100	; 0x64
 8013ea0:	2201      	movs	r2, #1
 8013ea2:	4912      	ldr	r1, [pc, #72]	; (8013eec <SPI_WriteInFlash+0x230>)
 8013ea4:	480f      	ldr	r0, [pc, #60]	; (8013ee4 <SPI_WriteInFlash+0x228>)
 8013ea6:	f006 fa53 	bl	801a350 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8013eaa:	4b07      	ldr	r3, [pc, #28]	; (8013ec8 <SPI_WriteInFlash+0x20c>)
 8013eac:	681b      	ldr	r3, [r3, #0]
 8013eae:	4a08      	ldr	r2, [pc, #32]	; (8013ed0 <SPI_WriteInFlash+0x214>)
 8013eb0:	6812      	ldr	r2, [r2, #0]
 8013eb2:	b291      	uxth	r1, r2
 8013eb4:	2201      	movs	r2, #1
 8013eb6:	4618      	mov	r0, r3
 8013eb8:	f004 f83a 	bl	8017f30 <HAL_GPIO_WritePin>

	return Return_Value;
 8013ebc:	7dfb      	ldrb	r3, [r7, #23]
}
 8013ebe:	4618      	mov	r0, r3
 8013ec0:	3718      	adds	r7, #24
 8013ec2:	46bd      	mov	sp, r7
 8013ec4:	bd80      	pop	{r7, pc}
 8013ec6:	bf00      	nop
 8013ec8:	20009ca0 	.word	0x20009ca0
 8013ecc:	40021800 	.word	0x40021800
 8013ed0:	20009ca4 	.word	0x20009ca4
 8013ed4:	40020c00 	.word	0x40020c00
 8013ed8:	40021000 	.word	0x40021000
 8013edc:	08026fa4 	.word	0x08026fa4
 8013ee0:	08028ef8 	.word	0x08028ef8
 8013ee4:	20009cac 	.word	0x20009cac
 8013ee8:	08028ef9 	.word	0x08028ef9
 8013eec:	20009c9c 	.word	0x20009c9c
 8013ef0:	08026fbc 	.word	0x08026fbc
 8013ef4:	20009c98 	.word	0x20009c98

08013ef8 <SPI_MemoryEraseBySector>:


int SPI_MemoryEraseBySector(uint8_t Chip,uint32_t Ul_Address){
 8013ef8:	b580      	push	{r7, lr}
 8013efa:	b084      	sub	sp, #16
 8013efc:	af00      	add	r7, sp, #0
 8013efe:	4603      	mov	r3, r0
 8013f00:	6039      	str	r1, [r7, #0]
 8013f02:	71fb      	strb	r3, [r7, #7]

	int	Flash_Erase=0;
 8013f04:	2300      	movs	r3, #0
 8013f06:	60fb      	str	r3, [r7, #12]

	switch(Chip)
 8013f08:	79fb      	ldrb	r3, [r7, #7]
 8013f0a:	3b01      	subs	r3, #1
 8013f0c:	2b03      	cmp	r3, #3
 8013f0e:	d829      	bhi.n	8013f64 <SPI_MemoryEraseBySector+0x6c>
 8013f10:	a201      	add	r2, pc, #4	; (adr r2, 8013f18 <SPI_MemoryEraseBySector+0x20>)
 8013f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f16:	bf00      	nop
 8013f18:	08013f29 	.word	0x08013f29
 8013f1c:	08013f39 	.word	0x08013f39
 8013f20:	08013f47 	.word	0x08013f47
 8013f24:	08013f55 	.word	0x08013f55
	{
	case CHIP1:
		CHIP_Port = CS1_GPIO_Port;
 8013f28:	4b6d      	ldr	r3, [pc, #436]	; (80140e0 <SPI_MemoryEraseBySector+0x1e8>)
 8013f2a:	4a6e      	ldr	r2, [pc, #440]	; (80140e4 <SPI_MemoryEraseBySector+0x1ec>)
 8013f2c:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS1_Pin;
 8013f2e:	4b6e      	ldr	r3, [pc, #440]	; (80140e8 <SPI_MemoryEraseBySector+0x1f0>)
 8013f30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013f34:	601a      	str	r2, [r3, #0]
		break;
 8013f36:	e018      	b.n	8013f6a <SPI_MemoryEraseBySector+0x72>
	case CHIP2:
		CHIP_Port = CS2_GPIO_Port;
 8013f38:	4b69      	ldr	r3, [pc, #420]	; (80140e0 <SPI_MemoryEraseBySector+0x1e8>)
 8013f3a:	4a6c      	ldr	r2, [pc, #432]	; (80140ec <SPI_MemoryEraseBySector+0x1f4>)
 8013f3c:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS2_Pin;
 8013f3e:	4b6a      	ldr	r3, [pc, #424]	; (80140e8 <SPI_MemoryEraseBySector+0x1f0>)
 8013f40:	2220      	movs	r2, #32
 8013f42:	601a      	str	r2, [r3, #0]
		break;
 8013f44:	e011      	b.n	8013f6a <SPI_MemoryEraseBySector+0x72>
	case CHIP3:
		CHIP_Port = CS3_GPIO_Port;
 8013f46:	4b66      	ldr	r3, [pc, #408]	; (80140e0 <SPI_MemoryEraseBySector+0x1e8>)
 8013f48:	4a68      	ldr	r2, [pc, #416]	; (80140ec <SPI_MemoryEraseBySector+0x1f4>)
 8013f4a:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS3_Pin;
 8013f4c:	4b66      	ldr	r3, [pc, #408]	; (80140e8 <SPI_MemoryEraseBySector+0x1f0>)
 8013f4e:	2240      	movs	r2, #64	; 0x40
 8013f50:	601a      	str	r2, [r3, #0]
		break;
 8013f52:	e00a      	b.n	8013f6a <SPI_MemoryEraseBySector+0x72>
	case CHIP4:
		CHIP_Port = CS4_GPIO_Port;
 8013f54:	4b62      	ldr	r3, [pc, #392]	; (80140e0 <SPI_MemoryEraseBySector+0x1e8>)
 8013f56:	4a66      	ldr	r2, [pc, #408]	; (80140f0 <SPI_MemoryEraseBySector+0x1f8>)
 8013f58:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS4_Pin;
 8013f5a:	4b63      	ldr	r3, [pc, #396]	; (80140e8 <SPI_MemoryEraseBySector+0x1f0>)
 8013f5c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8013f60:	601a      	str	r2, [r3, #0]
		break;
 8013f62:	e002      	b.n	8013f6a <SPI_MemoryEraseBySector+0x72>
	default:printf("Wrong Chip selection\n");
 8013f64:	4863      	ldr	r0, [pc, #396]	; (80140f4 <SPI_MemoryEraseBySector+0x1fc>)
 8013f66:	f00e fbb9 	bl	80226dc <puts>
	}


	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8013f6a:	4b5d      	ldr	r3, [pc, #372]	; (80140e0 <SPI_MemoryEraseBySector+0x1e8>)
 8013f6c:	681b      	ldr	r3, [r3, #0]
 8013f6e:	4a5e      	ldr	r2, [pc, #376]	; (80140e8 <SPI_MemoryEraseBySector+0x1f0>)
 8013f70:	6812      	ldr	r2, [r2, #0]
 8013f72:	b291      	uxth	r1, r2
 8013f74:	2200      	movs	r2, #0
 8013f76:	4618      	mov	r0, r3
 8013f78:	f003 ffda 	bl	8017f30 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_WREN, 1, 100);/* write enable */
 8013f7c:	2364      	movs	r3, #100	; 0x64
 8013f7e:	2201      	movs	r2, #1
 8013f80:	495d      	ldr	r1, [pc, #372]	; (80140f8 <SPI_MemoryEraseBySector+0x200>)
 8013f82:	485e      	ldr	r0, [pc, #376]	; (80140fc <SPI_MemoryEraseBySector+0x204>)
 8013f84:	f006 f876 	bl	801a074 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8013f88:	4b55      	ldr	r3, [pc, #340]	; (80140e0 <SPI_MemoryEraseBySector+0x1e8>)
 8013f8a:	681b      	ldr	r3, [r3, #0]
 8013f8c:	4a56      	ldr	r2, [pc, #344]	; (80140e8 <SPI_MemoryEraseBySector+0x1f0>)
 8013f8e:	6812      	ldr	r2, [r2, #0]
 8013f90:	b291      	uxth	r1, r2
 8013f92:	2201      	movs	r2, #1
 8013f94:	4618      	mov	r0, r3
 8013f96:	f003 ffcb 	bl	8017f30 <HAL_GPIO_WritePin>

	while (1)
	{

		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8013f9a:	4b51      	ldr	r3, [pc, #324]	; (80140e0 <SPI_MemoryEraseBySector+0x1e8>)
 8013f9c:	681b      	ldr	r3, [r3, #0]
 8013f9e:	4a52      	ldr	r2, [pc, #328]	; (80140e8 <SPI_MemoryEraseBySector+0x1f0>)
 8013fa0:	6812      	ldr	r2, [r2, #0]
 8013fa2:	b291      	uxth	r1, r2
 8013fa4:	2200      	movs	r2, #0
 8013fa6:	4618      	mov	r0, r3
 8013fa8:	f003 ffc2 	bl	8017f30 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_RDSR, sizeof(EEPROM_RDSR), 100);
 8013fac:	2364      	movs	r3, #100	; 0x64
 8013fae:	2201      	movs	r2, #1
 8013fb0:	4953      	ldr	r1, [pc, #332]	; (8014100 <SPI_MemoryEraseBySector+0x208>)
 8013fb2:	4852      	ldr	r0, [pc, #328]	; (80140fc <SPI_MemoryEraseBySector+0x204>)
 8013fb4:	f006 f85e 	bl	801a074 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 8013fb8:	2364      	movs	r3, #100	; 0x64
 8013fba:	2201      	movs	r2, #1
 8013fbc:	4951      	ldr	r1, [pc, #324]	; (8014104 <SPI_MemoryEraseBySector+0x20c>)
 8013fbe:	484f      	ldr	r0, [pc, #316]	; (80140fc <SPI_MemoryEraseBySector+0x204>)
 8013fc0:	f006 f9c6 	bl	801a350 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8013fc4:	4b46      	ldr	r3, [pc, #280]	; (80140e0 <SPI_MemoryEraseBySector+0x1e8>)
 8013fc6:	681b      	ldr	r3, [r3, #0]
 8013fc8:	4a47      	ldr	r2, [pc, #284]	; (80140e8 <SPI_MemoryEraseBySector+0x1f0>)
 8013fca:	6812      	ldr	r2, [r2, #0]
 8013fcc:	b291      	uxth	r1, r2
 8013fce:	2201      	movs	r2, #1
 8013fd0:	4618      	mov	r0, r3
 8013fd2:	f003 ffad 	bl	8017f30 <HAL_GPIO_WritePin>
		if ( (SPI_RX_Data & 0x02) == 0x02 )	/* bit 0 is ready, bit 1 is write enable */
 8013fd6:	4b4b      	ldr	r3, [pc, #300]	; (8014104 <SPI_MemoryEraseBySector+0x20c>)
 8013fd8:	781b      	ldrb	r3, [r3, #0]
 8013fda:	f003 0302 	and.w	r3, r3, #2
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d103      	bne.n	8013fea <SPI_MemoryEraseBySector+0xf2>
			break;
		}
		else
		{

			printf("\n Write enable not latched in erase mode.......");
 8013fe2:	4849      	ldr	r0, [pc, #292]	; (8014108 <SPI_MemoryEraseBySector+0x210>)
 8013fe4:	f00e fade 	bl	80225a4 <iprintf>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8013fe8:	e7d7      	b.n	8013f9a <SPI_MemoryEraseBySector+0xa2>
			break;
 8013fea:	bf00      	nop
		}
	}
	//printf("\nMemory Erase operation started");

	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8013fec:	4b3c      	ldr	r3, [pc, #240]	; (80140e0 <SPI_MemoryEraseBySector+0x1e8>)
 8013fee:	681b      	ldr	r3, [r3, #0]
 8013ff0:	4a3d      	ldr	r2, [pc, #244]	; (80140e8 <SPI_MemoryEraseBySector+0x1f0>)
 8013ff2:	6812      	ldr	r2, [r2, #0]
 8013ff4:	b291      	uxth	r1, r2
 8013ff6:	2200      	movs	r2, #0
 8013ff8:	4618      	mov	r0, r3
 8013ffa:	f003 ff99 	bl	8017f30 <HAL_GPIO_WritePin>
	spi_cmd[0]=0x20;/* Bluck Erase command is 0xC7, low 256 bytes only */
 8013ffe:	4b43      	ldr	r3, [pc, #268]	; (801410c <SPI_MemoryEraseBySector+0x214>)
 8014000:	2220      	movs	r2, #32
 8014002:	701a      	strb	r2, [r3, #0]
	spi_cmd[1]=Ul_Address>>16;
 8014004:	683b      	ldr	r3, [r7, #0]
 8014006:	0c1b      	lsrs	r3, r3, #16
 8014008:	b2da      	uxtb	r2, r3
 801400a:	4b40      	ldr	r3, [pc, #256]	; (801410c <SPI_MemoryEraseBySector+0x214>)
 801400c:	705a      	strb	r2, [r3, #1]
	spi_cmd[2]=Ul_Address>>8;
 801400e:	683b      	ldr	r3, [r7, #0]
 8014010:	0a1b      	lsrs	r3, r3, #8
 8014012:	b2da      	uxtb	r2, r3
 8014014:	4b3d      	ldr	r3, [pc, #244]	; (801410c <SPI_MemoryEraseBySector+0x214>)
 8014016:	709a      	strb	r2, [r3, #2]
	spi_cmd[3]=Ul_Address;
 8014018:	683b      	ldr	r3, [r7, #0]
 801401a:	b2da      	uxtb	r2, r3
 801401c:	4b3b      	ldr	r3, [pc, #236]	; (801410c <SPI_MemoryEraseBySector+0x214>)
 801401e:	70da      	strb	r2, [r3, #3]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 4, 100);
 8014020:	2364      	movs	r3, #100	; 0x64
 8014022:	2204      	movs	r2, #4
 8014024:	4939      	ldr	r1, [pc, #228]	; (801410c <SPI_MemoryEraseBySector+0x214>)
 8014026:	4835      	ldr	r0, [pc, #212]	; (80140fc <SPI_MemoryEraseBySector+0x204>)
 8014028:	f006 f824 	bl	801a074 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 801402c:	4b2c      	ldr	r3, [pc, #176]	; (80140e0 <SPI_MemoryEraseBySector+0x1e8>)
 801402e:	681b      	ldr	r3, [r3, #0]
 8014030:	4a2d      	ldr	r2, [pc, #180]	; (80140e8 <SPI_MemoryEraseBySector+0x1f0>)
 8014032:	6812      	ldr	r2, [r2, #0]
 8014034:	b291      	uxth	r1, r2
 8014036:	2201      	movs	r2, #1
 8014038:	4618      	mov	r0, r3
 801403a:	f003 ff79 	bl	8017f30 <HAL_GPIO_WritePin>

	while (1)
	{
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 801403e:	4b28      	ldr	r3, [pc, #160]	; (80140e0 <SPI_MemoryEraseBySector+0x1e8>)
 8014040:	681b      	ldr	r3, [r3, #0]
 8014042:	4a29      	ldr	r2, [pc, #164]	; (80140e8 <SPI_MemoryEraseBySector+0x1f0>)
 8014044:	6812      	ldr	r2, [r2, #0]
 8014046:	b291      	uxth	r1, r2
 8014048:	2200      	movs	r2, #0
 801404a:	4618      	mov	r0, r3
 801404c:	f003 ff70 	bl	8017f30 <HAL_GPIO_WritePin>
		spi_cmd[0]=EEPROM_RDSR;/* check status to see if write cycle is done or not */
 8014050:	2205      	movs	r2, #5
 8014052:	4b2e      	ldr	r3, [pc, #184]	; (801410c <SPI_MemoryEraseBySector+0x214>)
 8014054:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 1, 100);
 8014056:	2364      	movs	r3, #100	; 0x64
 8014058:	2201      	movs	r2, #1
 801405a:	492c      	ldr	r1, [pc, #176]	; (801410c <SPI_MemoryEraseBySector+0x214>)
 801405c:	4827      	ldr	r0, [pc, #156]	; (80140fc <SPI_MemoryEraseBySector+0x204>)
 801405e:	f006 f809 	bl	801a074 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 8014062:	2364      	movs	r3, #100	; 0x64
 8014064:	2201      	movs	r2, #1
 8014066:	4927      	ldr	r1, [pc, #156]	; (8014104 <SPI_MemoryEraseBySector+0x20c>)
 8014068:	4824      	ldr	r0, [pc, #144]	; (80140fc <SPI_MemoryEraseBySector+0x204>)
 801406a:	f006 f971 	bl	801a350 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 801406e:	4b1c      	ldr	r3, [pc, #112]	; (80140e0 <SPI_MemoryEraseBySector+0x1e8>)
 8014070:	681b      	ldr	r3, [r3, #0]
 8014072:	4a1d      	ldr	r2, [pc, #116]	; (80140e8 <SPI_MemoryEraseBySector+0x1f0>)
 8014074:	6812      	ldr	r2, [r2, #0]
 8014076:	b291      	uxth	r1, r2
 8014078:	2201      	movs	r2, #1
 801407a:	4618      	mov	r0, r3
 801407c:	f003 ff58 	bl	8017f30 <HAL_GPIO_WritePin>

		if((SPI_RX_Data & 0x01) == 0x00 )	/* bit 0 to 0 is ready */
 8014080:	4b20      	ldr	r3, [pc, #128]	; (8014104 <SPI_MemoryEraseBySector+0x20c>)
 8014082:	781b      	ldrb	r3, [r3, #0]
 8014084:	f003 0301 	and.w	r3, r3, #1
 8014088:	2b00      	cmp	r3, #0
 801408a:	d1d8      	bne.n	801403e <SPI_MemoryEraseBySector+0x146>
		{
			Flash_Erase = 1;
 801408c:	2301      	movs	r3, #1
 801408e:	60fb      	str	r3, [r7, #12]
			//printf("\nui_test in earse=%d",Flash_Erase);
			break;
 8014090:	bf00      	nop
		{
			;//DisplayString("\nDevice is busy in Erasing.....",DisPort);
		}
	}
	/*Write Disable*/
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8014092:	4b13      	ldr	r3, [pc, #76]	; (80140e0 <SPI_MemoryEraseBySector+0x1e8>)
 8014094:	681b      	ldr	r3, [r3, #0]
 8014096:	4a14      	ldr	r2, [pc, #80]	; (80140e8 <SPI_MemoryEraseBySector+0x1f0>)
 8014098:	6812      	ldr	r2, [r2, #0]
 801409a:	b291      	uxth	r1, r2
 801409c:	2200      	movs	r2, #0
 801409e:	4618      	mov	r0, r3
 80140a0:	f003 ff46 	bl	8017f30 <HAL_GPIO_WritePin>
	spi_cmd[0]=EEPROM_WRDI;/* write disable */
 80140a4:	2204      	movs	r2, #4
 80140a6:	4b19      	ldr	r3, [pc, #100]	; (801410c <SPI_MemoryEraseBySector+0x214>)
 80140a8:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 1, 100);
 80140aa:	2364      	movs	r3, #100	; 0x64
 80140ac:	2201      	movs	r2, #1
 80140ae:	4917      	ldr	r1, [pc, #92]	; (801410c <SPI_MemoryEraseBySector+0x214>)
 80140b0:	4812      	ldr	r0, [pc, #72]	; (80140fc <SPI_MemoryEraseBySector+0x204>)
 80140b2:	f005 ffdf 	bl	801a074 <HAL_SPI_Transmit>

	HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 80140b6:	2364      	movs	r3, #100	; 0x64
 80140b8:	2201      	movs	r2, #1
 80140ba:	4912      	ldr	r1, [pc, #72]	; (8014104 <SPI_MemoryEraseBySector+0x20c>)
 80140bc:	480f      	ldr	r0, [pc, #60]	; (80140fc <SPI_MemoryEraseBySector+0x204>)
 80140be:	f006 f947 	bl	801a350 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 80140c2:	4b07      	ldr	r3, [pc, #28]	; (80140e0 <SPI_MemoryEraseBySector+0x1e8>)
 80140c4:	681b      	ldr	r3, [r3, #0]
 80140c6:	4a08      	ldr	r2, [pc, #32]	; (80140e8 <SPI_MemoryEraseBySector+0x1f0>)
 80140c8:	6812      	ldr	r2, [r2, #0]
 80140ca:	b291      	uxth	r1, r2
 80140cc:	2201      	movs	r2, #1
 80140ce:	4618      	mov	r0, r3
 80140d0:	f003 ff2e 	bl	8017f30 <HAL_GPIO_WritePin>
	return Flash_Erase;
 80140d4:	68fb      	ldr	r3, [r7, #12]

}
 80140d6:	4618      	mov	r0, r3
 80140d8:	3710      	adds	r7, #16
 80140da:	46bd      	mov	sp, r7
 80140dc:	bd80      	pop	{r7, pc}
 80140de:	bf00      	nop
 80140e0:	20009ca0 	.word	0x20009ca0
 80140e4:	40021800 	.word	0x40021800
 80140e8:	20009ca4 	.word	0x20009ca4
 80140ec:	40020c00 	.word	0x40020c00
 80140f0:	40021000 	.word	0x40021000
 80140f4:	08026fa4 	.word	0x08026fa4
 80140f8:	08028ef8 	.word	0x08028ef8
 80140fc:	20009cac 	.word	0x20009cac
 8014100:	08028ef9 	.word	0x08028ef9
 8014104:	20009c9c 	.word	0x20009c9c
 8014108:	08026fe0 	.word	0x08026fe0
 801410c:	20009c98 	.word	0x20009c98

08014110 <SPI_ReadFromFlash>:
}



void SPI_ReadFromFlash(uint8_t Chip,uint32_t Ul_Address,uint16_t uc_Len,uint8_t *uc_pp_Buff)
{
 8014110:	b580      	push	{r7, lr}
 8014112:	b084      	sub	sp, #16
 8014114:	af00      	add	r7, sp, #0
 8014116:	60b9      	str	r1, [r7, #8]
 8014118:	607b      	str	r3, [r7, #4]
 801411a:	4603      	mov	r3, r0
 801411c:	73fb      	strb	r3, [r7, #15]
 801411e:	4613      	mov	r3, r2
 8014120:	81bb      	strh	r3, [r7, #12]
	switch(Chip)
 8014122:	7bfb      	ldrb	r3, [r7, #15]
 8014124:	3b01      	subs	r3, #1
 8014126:	2b03      	cmp	r3, #3
 8014128:	d828      	bhi.n	801417c <SPI_ReadFromFlash+0x6c>
 801412a:	a201      	add	r2, pc, #4	; (adr r2, 8014130 <SPI_ReadFromFlash+0x20>)
 801412c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014130:	08014141 	.word	0x08014141
 8014134:	08014151 	.word	0x08014151
 8014138:	0801415f 	.word	0x0801415f
 801413c:	0801416d 	.word	0x0801416d
	{
	case CHIP1:
		CHIP_Port = CS1_GPIO_Port;
 8014140:	4b2d      	ldr	r3, [pc, #180]	; (80141f8 <SPI_ReadFromFlash+0xe8>)
 8014142:	4a2e      	ldr	r2, [pc, #184]	; (80141fc <SPI_ReadFromFlash+0xec>)
 8014144:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS1_Pin;
 8014146:	4b2e      	ldr	r3, [pc, #184]	; (8014200 <SPI_ReadFromFlash+0xf0>)
 8014148:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801414c:	601a      	str	r2, [r3, #0]
		break;
 801414e:	e018      	b.n	8014182 <SPI_ReadFromFlash+0x72>
	case CHIP2:
		CHIP_Port = CS2_GPIO_Port;
 8014150:	4b29      	ldr	r3, [pc, #164]	; (80141f8 <SPI_ReadFromFlash+0xe8>)
 8014152:	4a2c      	ldr	r2, [pc, #176]	; (8014204 <SPI_ReadFromFlash+0xf4>)
 8014154:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS2_Pin;
 8014156:	4b2a      	ldr	r3, [pc, #168]	; (8014200 <SPI_ReadFromFlash+0xf0>)
 8014158:	2220      	movs	r2, #32
 801415a:	601a      	str	r2, [r3, #0]
		break;
 801415c:	e011      	b.n	8014182 <SPI_ReadFromFlash+0x72>
	case CHIP3:
		CHIP_Port = CS3_GPIO_Port;
 801415e:	4b26      	ldr	r3, [pc, #152]	; (80141f8 <SPI_ReadFromFlash+0xe8>)
 8014160:	4a28      	ldr	r2, [pc, #160]	; (8014204 <SPI_ReadFromFlash+0xf4>)
 8014162:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS3_Pin;
 8014164:	4b26      	ldr	r3, [pc, #152]	; (8014200 <SPI_ReadFromFlash+0xf0>)
 8014166:	2240      	movs	r2, #64	; 0x40
 8014168:	601a      	str	r2, [r3, #0]
		break;
 801416a:	e00a      	b.n	8014182 <SPI_ReadFromFlash+0x72>
	case CHIP4:
		CHIP_Port = CS4_GPIO_Port;
 801416c:	4b22      	ldr	r3, [pc, #136]	; (80141f8 <SPI_ReadFromFlash+0xe8>)
 801416e:	4a26      	ldr	r2, [pc, #152]	; (8014208 <SPI_ReadFromFlash+0xf8>)
 8014170:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS4_Pin;
 8014172:	4b23      	ldr	r3, [pc, #140]	; (8014200 <SPI_ReadFromFlash+0xf0>)
 8014174:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8014178:	601a      	str	r2, [r3, #0]
		break;
 801417a:	e002      	b.n	8014182 <SPI_ReadFromFlash+0x72>
	default:printf("Wrong Chip selection\n");
 801417c:	4823      	ldr	r0, [pc, #140]	; (801420c <SPI_ReadFromFlash+0xfc>)
 801417e:	f00e faad 	bl	80226dc <puts>
	}

	memset(uc_pp_Buff,0,uc_Len);
 8014182:	89bb      	ldrh	r3, [r7, #12]
 8014184:	461a      	mov	r2, r3
 8014186:	2100      	movs	r1, #0
 8014188:	6878      	ldr	r0, [r7, #4]
 801418a:	f00e f923 	bl	80223d4 <memset>



	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 801418e:	4b1a      	ldr	r3, [pc, #104]	; (80141f8 <SPI_ReadFromFlash+0xe8>)
 8014190:	681b      	ldr	r3, [r3, #0]
 8014192:	4a1b      	ldr	r2, [pc, #108]	; (8014200 <SPI_ReadFromFlash+0xf0>)
 8014194:	6812      	ldr	r2, [r2, #0]
 8014196:	b291      	uxth	r1, r2
 8014198:	2200      	movs	r2, #0
 801419a:	4618      	mov	r0, r3
 801419c:	f003 fec8 	bl	8017f30 <HAL_GPIO_WritePin>
	spi_cmd[0]=EEPROM_READ;/* Read command is 0x03, low 256 bytes only */
 80141a0:	2203      	movs	r2, #3
 80141a2:	4b1b      	ldr	r3, [pc, #108]	; (8014210 <SPI_ReadFromFlash+0x100>)
 80141a4:	701a      	strb	r2, [r3, #0]
	spi_cmd[1]=Ul_Address>>16;
 80141a6:	68bb      	ldr	r3, [r7, #8]
 80141a8:	0c1b      	lsrs	r3, r3, #16
 80141aa:	b2da      	uxtb	r2, r3
 80141ac:	4b18      	ldr	r3, [pc, #96]	; (8014210 <SPI_ReadFromFlash+0x100>)
 80141ae:	705a      	strb	r2, [r3, #1]
	spi_cmd[2]=Ul_Address>>8;
 80141b0:	68bb      	ldr	r3, [r7, #8]
 80141b2:	0a1b      	lsrs	r3, r3, #8
 80141b4:	b2da      	uxtb	r2, r3
 80141b6:	4b16      	ldr	r3, [pc, #88]	; (8014210 <SPI_ReadFromFlash+0x100>)
 80141b8:	709a      	strb	r2, [r3, #2]
	spi_cmd[3]=Ul_Address;
 80141ba:	68bb      	ldr	r3, [r7, #8]
 80141bc:	b2da      	uxtb	r2, r3
 80141be:	4b14      	ldr	r3, [pc, #80]	; (8014210 <SPI_ReadFromFlash+0x100>)
 80141c0:	70da      	strb	r2, [r3, #3]


	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 4, 100);
 80141c2:	2364      	movs	r3, #100	; 0x64
 80141c4:	2204      	movs	r2, #4
 80141c6:	4912      	ldr	r1, [pc, #72]	; (8014210 <SPI_ReadFromFlash+0x100>)
 80141c8:	4812      	ldr	r0, [pc, #72]	; (8014214 <SPI_ReadFromFlash+0x104>)
 80141ca:	f005 ff53 	bl	801a074 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, uc_pp_Buff, uc_Len, 1000);
 80141ce:	89ba      	ldrh	r2, [r7, #12]
 80141d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80141d4:	6879      	ldr	r1, [r7, #4]
 80141d6:	480f      	ldr	r0, [pc, #60]	; (8014214 <SPI_ReadFromFlash+0x104>)
 80141d8:	f006 f8ba 	bl	801a350 <HAL_SPI_Receive>
	//		}
	//		printf("[%03lu]:%c ",ulAddress,uc_pp_Buff[ulAddress]);
	//	}


	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 80141dc:	4b06      	ldr	r3, [pc, #24]	; (80141f8 <SPI_ReadFromFlash+0xe8>)
 80141de:	681b      	ldr	r3, [r3, #0]
 80141e0:	4a07      	ldr	r2, [pc, #28]	; (8014200 <SPI_ReadFromFlash+0xf0>)
 80141e2:	6812      	ldr	r2, [r2, #0]
 80141e4:	b291      	uxth	r1, r2
 80141e6:	2201      	movs	r2, #1
 80141e8:	4618      	mov	r0, r3
 80141ea:	f003 fea1 	bl	8017f30 <HAL_GPIO_WritePin>

}
 80141ee:	bf00      	nop
 80141f0:	3710      	adds	r7, #16
 80141f2:	46bd      	mov	sp, r7
 80141f4:	bd80      	pop	{r7, pc}
 80141f6:	bf00      	nop
 80141f8:	20009ca0 	.word	0x20009ca0
 80141fc:	40021800 	.word	0x40021800
 8014200:	20009ca4 	.word	0x20009ca4
 8014204:	40020c00 	.word	0x40020c00
 8014208:	40021000 	.word	0x40021000
 801420c:	08026fa4 	.word	0x08026fa4
 8014210:	20009c98 	.word	0x20009c98
 8014214:	20009cac 	.word	0x20009cac

08014218 <Get_Config>:




void Get_Config(void)
{
 8014218:	b580      	push	{r7, lr}
 801421a:	b084      	sub	sp, #16
 801421c:	af00      	add	r7, sp, #0
	uint32_t uc_times = 0;
 801421e:	2300      	movs	r3, #0
 8014220:	60fb      	str	r3, [r7, #12]
	//	unsigned char uc_SspIndex =0;//,uc_Block_Index = 0;


	size_t SIZE = (sizeof(EI_t))+6;
 8014222:	f240 3346 	movw	r3, #838	; 0x346
 8014226:	607b      	str	r3, [r7, #4]
	size_t SIZE_VAR  = SIZE;
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	60bb      	str	r3, [r7, #8]
	return;
#endif

#endif

	for(uc_times = 0; uc_times < SIZE; uc_times+=32)
 801422c:	2300      	movs	r3, #0
 801422e:	60fb      	str	r3, [r7, #12]
 8014230:	e01d      	b.n	801426e <Get_Config+0x56>
	{
		HAL_Delay(20);
 8014232:	2014      	movs	r0, #20
 8014234:	f001 f9b8 	bl	80155a8 <HAL_Delay>
		if(SIZE_VAR <32)
 8014238:	68bb      	ldr	r3, [r7, #8]
 801423a:	2b1f      	cmp	r3, #31
 801423c:	d809      	bhi.n	8014252 <Get_Config+0x3a>
		{
			SPI_ReadFromFlash(1, uc_times, SIZE_VAR, Config_Buff+uc_times);
 801423e:	68bb      	ldr	r3, [r7, #8]
 8014240:	b29a      	uxth	r2, r3
 8014242:	68fb      	ldr	r3, [r7, #12]
 8014244:	492c      	ldr	r1, [pc, #176]	; (80142f8 <Get_Config+0xe0>)
 8014246:	440b      	add	r3, r1
 8014248:	68f9      	ldr	r1, [r7, #12]
 801424a:	2001      	movs	r0, #1
 801424c:	f7ff ff60 	bl	8014110 <SPI_ReadFromFlash>
 8014250:	e00a      	b.n	8014268 <Get_Config+0x50>
		}
		else
		{
			SPI_ReadFromFlash(1, uc_times, 32, Config_Buff+uc_times);
 8014252:	68fb      	ldr	r3, [r7, #12]
 8014254:	4a28      	ldr	r2, [pc, #160]	; (80142f8 <Get_Config+0xe0>)
 8014256:	4413      	add	r3, r2
 8014258:	2220      	movs	r2, #32
 801425a:	68f9      	ldr	r1, [r7, #12]
 801425c:	2001      	movs	r0, #1
 801425e:	f7ff ff57 	bl	8014110 <SPI_ReadFromFlash>
			SIZE_VAR-=32;
 8014262:	68bb      	ldr	r3, [r7, #8]
 8014264:	3b20      	subs	r3, #32
 8014266:	60bb      	str	r3, [r7, #8]
	for(uc_times = 0; uc_times < SIZE; uc_times+=32)
 8014268:	68fb      	ldr	r3, [r7, #12]
 801426a:	3320      	adds	r3, #32
 801426c:	60fb      	str	r3, [r7, #12]
 801426e:	68fa      	ldr	r2, [r7, #12]
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	429a      	cmp	r2, r3
 8014274:	d3dd      	bcc.n	8014232 <Get_Config+0x1a>
		}
	}
	if(CheckCRC(Config_Buff, (sizeof(EI_t)+4)))
 8014276:	f44f 7151 	mov.w	r1, #836	; 0x344
 801427a:	481f      	ldr	r0, [pc, #124]	; (80142f8 <Get_Config+0xe0>)
 801427c:	f7fe fca2 	bl	8012bc4 <CheckCRC>
 8014280:	4603      	mov	r3, r0
 8014282:	2b00      	cmp	r3, #0
 8014284:	d013      	beq.n	80142ae <Get_Config+0x96>
	{
		/* CRC OK From the Flash */
		//EI_Config_ptr = &EI_data+4;
		//memcpy(EI_Config_ptr,&Config_Buff[4],sizeof(EI_t));
		memcpy(&EI_data,&Config_Buff[4],sizeof(EI_t));
 8014286:	f44f 7250 	mov.w	r2, #832	; 0x340
 801428a:	491c      	ldr	r1, [pc, #112]	; (80142fc <Get_Config+0xe4>)
 801428c:	481c      	ldr	r0, [pc, #112]	; (8014300 <Get_Config+0xe8>)
 801428e:	f00e f879 	bl	8022384 <memcpy>
		EI_Dat_CRC = ExtractBits(0, 16,&Config_Buff[(sizeof(EI_t)+4)]);
 8014292:	4a1c      	ldr	r2, [pc, #112]	; (8014304 <Get_Config+0xec>)
 8014294:	2110      	movs	r1, #16
 8014296:	2000      	movs	r0, #0
 8014298:	f7ec f9bc 	bl	8000614 <ExtractBits>
 801429c:	4603      	mov	r3, r0
 801429e:	b29a      	uxth	r2, r3
 80142a0:	4b19      	ldr	r3, [pc, #100]	; (8014308 <Get_Config+0xf0>)
 80142a2:	801a      	strh	r2, [r3, #0]
		while(1)
		{
			Data_Processing();
		}
	}
	if( 0 == UpdateFlag )
 80142a4:	4b19      	ldr	r3, [pc, #100]	; (801430c <Get_Config+0xf4>)
 80142a6:	781b      	ldrb	r3, [r3, #0]
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	d121      	bne.n	80142f0 <Get_Config+0xd8>
 80142ac:	e01e      	b.n	80142ec <Get_Config+0xd4>
		printf("\n EI Configuration CRC from Flash:%u\n",(sizeof(EI_t)+4));
 80142ae:	f44f 7151 	mov.w	r1, #836	; 0x344
 80142b2:	4817      	ldr	r0, [pc, #92]	; (8014310 <Get_Config+0xf8>)
 80142b4:	f00e f976 	bl	80225a4 <iprintf>
		EI_Config_ptr = (EI_t *)&Config_Buff[4];
 80142b8:	4b16      	ldr	r3, [pc, #88]	; (8014314 <Get_Config+0xfc>)
 80142ba:	4a10      	ldr	r2, [pc, #64]	; (80142fc <Get_Config+0xe4>)
 80142bc:	601a      	str	r2, [r3, #0]
		printf("\nCRC READ:[%x][%x]\n",Config_Buff[sizeof(EI_t)+3],Config_Buff[sizeof(EI_t)+4]);
 80142be:	4b0e      	ldr	r3, [pc, #56]	; (80142f8 <Get_Config+0xe0>)
 80142c0:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 80142c4:	4619      	mov	r1, r3
 80142c6:	4b0c      	ldr	r3, [pc, #48]	; (80142f8 <Get_Config+0xe0>)
 80142c8:	f893 3344 	ldrb.w	r3, [r3, #836]	; 0x344
 80142cc:	461a      	mov	r2, r3
 80142ce:	4812      	ldr	r0, [pc, #72]	; (8014318 <Get_Config+0x100>)
 80142d0:	f00e f968 	bl	80225a4 <iprintf>
		printf("\nCheck for CRC:");
 80142d4:	4811      	ldr	r0, [pc, #68]	; (801431c <Get_Config+0x104>)
 80142d6:	f00e f965 	bl	80225a4 <iprintf>
		gucFlagUpdate =3;
 80142da:	4b11      	ldr	r3, [pc, #68]	; (8014320 <Get_Config+0x108>)
 80142dc:	2203      	movs	r2, #3
 80142de:	701a      	strb	r2, [r3, #0]
		printf("\n*************PLEASE LOAD EI DATS USING APPLICATION************\n");
 80142e0:	4810      	ldr	r0, [pc, #64]	; (8014324 <Get_Config+0x10c>)
 80142e2:	f00e f9fb 	bl	80226dc <puts>
			Data_Processing();
 80142e6:	f000 f81f 	bl	8014328 <Data_Processing>
 80142ea:	e7fc      	b.n	80142e6 <Get_Config+0xce>
	{
		readCanToStructs();
 80142ec:	f7fb fdfc 	bl	800fee8 <readCanToStructs>
	}
}
 80142f0:	bf00      	nop
 80142f2:	3710      	adds	r7, #16
 80142f4:	46bd      	mov	sp, r7
 80142f6:	bd80      	pop	{r7, pc}
 80142f8:	20000648 	.word	0x20000648
 80142fc:	2000064c 	.word	0x2000064c
 8014300:	20000304 	.word	0x20000304
 8014304:	2000098c 	.word	0x2000098c
 8014308:	20009caa 	.word	0x20009caa
 801430c:	20000a4b 	.word	0x20000a4b
 8014310:	08027010 	.word	0x08027010
 8014314:	20000300 	.word	0x20000300
 8014318:	08027038 	.word	0x08027038
 801431c:	0802704c 	.word	0x0802704c
 8014320:	20000a49 	.word	0x20000a49
 8014324:	0802705c 	.word	0x0802705c

08014328 <Data_Processing>:


void Data_Processing(void)
{
 8014328:	b580      	push	{r7, lr}
 801432a:	af00      	add	r7, sp, #0
	switch(gucFlagUpdate)
 801432c:	4b0b      	ldr	r3, [pc, #44]	; (801435c <Data_Processing+0x34>)
 801432e:	781b      	ldrb	r3, [r3, #0]
 8014330:	2b03      	cmp	r3, #3
 8014332:	d10e      	bne.n	8014352 <Data_Processing+0x2a>
	{
	case 3:
		gucUpdateFlag = CheckForRqst(ISP_PORT);
 8014334:	2000      	movs	r0, #0
 8014336:	f7f6 fba1 	bl	800aa7c <CheckForRqst>
 801433a:	4603      	mov	r3, r0
 801433c:	461a      	mov	r2, r3
 801433e:	4b08      	ldr	r3, [pc, #32]	; (8014360 <Data_Processing+0x38>)
 8014340:	701a      	strb	r2, [r3, #0]
		if(1 == gucUpdateFlag)
 8014342:	4b07      	ldr	r3, [pc, #28]	; (8014360 <Data_Processing+0x38>)
 8014344:	781b      	ldrb	r3, [r3, #0]
 8014346:	2b01      	cmp	r3, #1
 8014348:	d105      	bne.n	8014356 <Data_Processing+0x2e>
		{
			AutoLoadDat(ISP_PORT); //
 801434a:	2000      	movs	r0, #0
 801434c:	f000 f80a 	bl	8014364 <AutoLoadDat>
		}
		break;
 8014350:	e001      	b.n	8014356 <Data_Processing+0x2e>
	default:
		break;
 8014352:	bf00      	nop
 8014354:	e000      	b.n	8014358 <Data_Processing+0x30>
		break;
 8014356:	bf00      	nop
	}
}
 8014358:	bf00      	nop
 801435a:	bd80      	pop	{r7, pc}
 801435c:	20000a49 	.word	0x20000a49
 8014360:	20000a4a 	.word	0x20000a4a

08014364 <AutoLoadDat>:

void AutoLoadDat(unsigned char uc_port)
{
 8014364:	b580      	push	{r7, lr}
 8014366:	b084      	sub	sp, #16
 8014368:	af00      	add	r7, sp, #0
 801436a:	4603      	mov	r3, r0
 801436c:	71fb      	strb	r3, [r7, #7]
	unsigned char AckCount=0, NoOfBytes;
 801436e:	2300      	movs	r3, #0
 8014370:	73fb      	strb	r3, [r7, #15]
	while(1)
	{
		NoOfBytes=ReadAndFormConfig(uc_port,Config_Buff,1024);
 8014372:	79fb      	ldrb	r3, [r7, #7]
 8014374:	b29b      	uxth	r3, r3
 8014376:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801437a:	4934      	ldr	r1, [pc, #208]	; (801444c <AutoLoadDat+0xe8>)
 801437c:	4618      	mov	r0, r3
 801437e:	f7f6 fd25 	bl	800adcc <ReadAndFormConfig>
 8014382:	4603      	mov	r3, r0
 8014384:	73bb      	strb	r3, [r7, #14]
		HAL_IWDG_Refresh(&hiwdg);
 8014386:	4832      	ldr	r0, [pc, #200]	; (8014450 <AutoLoadDat+0xec>)
 8014388:	f004 fc68 	bl	8018c5c <HAL_IWDG_Refresh>

		//SpoiWDTReload();
		//CommWatchDogStrobe();
		if ( NoOfBytes > 1)
 801438c:	7bbb      	ldrb	r3, [r7, #14]
 801438e:	2b01      	cmp	r3, #1
 8014390:	d921      	bls.n	80143d6 <AutoLoadDat+0x72>
		{
			gucUpdateFlag = 0;
 8014392:	4b30      	ldr	r3, [pc, #192]	; (8014454 <AutoLoadDat+0xf0>)
 8014394:	2200      	movs	r2, #0
 8014396:	701a      	strb	r2, [r3, #0]
			if(!((Config_Buff[1] == ((DATLOADING>>8)&0XFF)) && (Config_Buff[2] == (DATLOADING & 0XFF)) && (Config_Buff[3] == DATCONFRMTION)))
 8014398:	4b2c      	ldr	r3, [pc, #176]	; (801444c <AutoLoadDat+0xe8>)
 801439a:	785b      	ldrb	r3, [r3, #1]
 801439c:	2b00      	cmp	r3, #0
 801439e:	d107      	bne.n	80143b0 <AutoLoadDat+0x4c>
 80143a0:	4b2a      	ldr	r3, [pc, #168]	; (801444c <AutoLoadDat+0xe8>)
 80143a2:	789b      	ldrb	r3, [r3, #2]
 80143a4:	2b01      	cmp	r3, #1
 80143a6:	d103      	bne.n	80143b0 <AutoLoadDat+0x4c>
 80143a8:	4b28      	ldr	r3, [pc, #160]	; (801444c <AutoLoadDat+0xe8>)
 80143aa:	78db      	ldrb	r3, [r3, #3]
 80143ac:	2b04      	cmp	r3, #4
 80143ae:	d003      	beq.n	80143b8 <AutoLoadDat+0x54>
			{
				printf("\nReceived Request Again\n");
 80143b0:	4829      	ldr	r0, [pc, #164]	; (8014458 <AutoLoadDat+0xf4>)
 80143b2:	f00e f993 	bl	80226dc <puts>
				return;
 80143b6:	e046      	b.n	8014446 <AutoLoadDat+0xe2>
			}
			EI_Config_ptr = (EI_t *)&Config_Buff[4];
 80143b8:	4b28      	ldr	r3, [pc, #160]	; (801445c <AutoLoadDat+0xf8>)
 80143ba:	4a29      	ldr	r2, [pc, #164]	; (8014460 <AutoLoadDat+0xfc>)
 80143bc:	601a      	str	r2, [r3, #0]
			saveConfig();
 80143be:	f000 f85b 	bl	8014478 <saveConfig>
			gucFlagCheck =1;
 80143c2:	4b28      	ldr	r3, [pc, #160]	; (8014464 <AutoLoadDat+0x100>)
 80143c4:	2201      	movs	r2, #1
 80143c6:	701a      	strb	r2, [r3, #0]
			ConfigFlag = 1;
 80143c8:	4b27      	ldr	r3, [pc, #156]	; (8014468 <AutoLoadDat+0x104>)
 80143ca:	2201      	movs	r2, #1
 80143cc:	701a      	strb	r2, [r3, #0]
			printf("\nData Received\n");
 80143ce:	4827      	ldr	r0, [pc, #156]	; (801446c <AutoLoadDat+0x108>)
 80143d0:	f00e f984 	bl	80226dc <puts>
			break;
 80143d4:	e037      	b.n	8014446 <AutoLoadDat+0xe2>
		}
		else if(1 == NoOfBytes)
 80143d6:	7bbb      	ldrb	r3, [r7, #14]
 80143d8:	2b01      	cmp	r3, #1
 80143da:	d11b      	bne.n	8014414 <AutoLoadDat+0xb0>
		{
			if(3 == AckCount)
 80143dc:	7bfb      	ldrb	r3, [r7, #15]
 80143de:	2b03      	cmp	r3, #3
 80143e0:	d109      	bne.n	80143f6 <AutoLoadDat+0x92>
			{
				gucUpdateFlag = 0;
 80143e2:	4b1c      	ldr	r3, [pc, #112]	; (8014454 <AutoLoadDat+0xf0>)
 80143e4:	2200      	movs	r2, #0
 80143e6:	701a      	strb	r2, [r3, #0]
				SendAck(uc_port, DATLOADING, CRCNOK);
 80143e8:	79fb      	ldrb	r3, [r7, #7]
 80143ea:	2203      	movs	r2, #3
 80143ec:	2101      	movs	r1, #1
 80143ee:	4618      	mov	r0, r3
 80143f0:	f7f6 fca0 	bl	800ad34 <SendAck>
				break;
 80143f4:	e027      	b.n	8014446 <AutoLoadDat+0xe2>
			}
			SendAck(uc_port, DATLOADING, ACKOK);
 80143f6:	79fb      	ldrb	r3, [r7, #7]
 80143f8:	2202      	movs	r2, #2
 80143fa:	2101      	movs	r1, #1
 80143fc:	4618      	mov	r0, r3
 80143fe:	f7f6 fc99 	bl	800ad34 <SendAck>
			gucReqstCurTim = HAL_GetTick();
 8014402:	f001 f8c5 	bl	8015590 <HAL_GetTick>
 8014406:	4603      	mov	r3, r0
 8014408:	4a19      	ldr	r2, [pc, #100]	; (8014470 <AutoLoadDat+0x10c>)
 801440a:	6013      	str	r3, [r2, #0]
			AckCount++;
 801440c:	7bfb      	ldrb	r3, [r7, #15]
 801440e:	3301      	adds	r3, #1
 8014410:	73fb      	strb	r3, [r7, #15]
 8014412:	e7ae      	b.n	8014372 <AutoLoadDat+0xe>
		}
		else
		{
			if( (labs(HAL_GetTick() - gucReqstCurTim) > (WAITFORDAT * 1000)) )
 8014414:	f001 f8bc 	bl	8015590 <HAL_GetTick>
 8014418:	4602      	mov	r2, r0
 801441a:	4b15      	ldr	r3, [pc, #84]	; (8014470 <AutoLoadDat+0x10c>)
 801441c:	681b      	ldr	r3, [r3, #0]
 801441e:	1ad3      	subs	r3, r2, r3
 8014420:	2b00      	cmp	r3, #0
 8014422:	bfb8      	it	lt
 8014424:	425b      	neglt	r3, r3
 8014426:	f247 5230 	movw	r2, #30000	; 0x7530
 801442a:	4293      	cmp	r3, r2
 801442c:	dda1      	ble.n	8014372 <AutoLoadDat+0xe>
			{
				gucUpdateFlag = 0;
 801442e:	4b09      	ldr	r3, [pc, #36]	; (8014454 <AutoLoadDat+0xf0>)
 8014430:	2200      	movs	r2, #0
 8014432:	701a      	strb	r2, [r3, #0]
				printf("\nNo Data recieved to Update\n");
 8014434:	480f      	ldr	r0, [pc, #60]	; (8014474 <AutoLoadDat+0x110>)
 8014436:	f00e f951 	bl	80226dc <puts>
				SendAck(uc_port, DATLOADING, NODATA);
 801443a:	79fb      	ldrb	r3, [r7, #7]
 801443c:	2205      	movs	r2, #5
 801443e:	2101      	movs	r1, #1
 8014440:	4618      	mov	r0, r3
 8014442:	f7f6 fc77 	bl	800ad34 <SendAck>
				break;
			}
		}
	}
}
 8014446:	3710      	adds	r7, #16
 8014448:	46bd      	mov	sp, r7
 801444a:	bd80      	pop	{r7, pc}
 801444c:	20000648 	.word	0x20000648
 8014450:	20009c74 	.word	0x20009c74
 8014454:	20000a4a 	.word	0x20000a4a
 8014458:	0802709c 	.word	0x0802709c
 801445c:	20000300 	.word	0x20000300
 8014460:	2000064c 	.word	0x2000064c
 8014464:	20009c94 	.word	0x20009c94
 8014468:	20009c95 	.word	0x20009c95
 801446c:	080270b4 	.word	0x080270b4
 8014470:	20000a4c 	.word	0x20000a4c
 8014474:	080270c4 	.word	0x080270c4

08014478 <saveConfig>:

unsigned char saveConfig(void)
{
 8014478:	b580      	push	{r7, lr}
 801447a:	b084      	sub	sp, #16
 801447c:	af00      	add	r7, sp, #0
	uint32_t ulAddress = 0;
 801447e:	2300      	movs	r3, #0
 8014480:	60fb      	str	r3, [r7, #12]

	printf("\nSaveConfig\n");
 8014482:	4825      	ldr	r0, [pc, #148]	; (8014518 <saveConfig+0xa0>)
 8014484:	f00e f92a 	bl	80226dc <puts>
	for(ulAddress=0;ulAddress<6;ulAddress++)
 8014488:	2300      	movs	r3, #0
 801448a:	60fb      	str	r3, [r7, #12]
 801448c:	e011      	b.n	80144b2 <saveConfig+0x3a>
	{
		if(SPI_MemoryEraseBySector(1,(4096*ulAddress)))/*memory erase before writing*/
 801448e:	68fb      	ldr	r3, [r7, #12]
 8014490:	031b      	lsls	r3, r3, #12
 8014492:	4619      	mov	r1, r3
 8014494:	2001      	movs	r0, #1
 8014496:	f7ff fd2f 	bl	8013ef8 <SPI_MemoryEraseBySector>
 801449a:	4603      	mov	r3, r0
 801449c:	2b00      	cmp	r3, #0
 801449e:	d005      	beq.n	80144ac <saveConfig+0x34>
		{
			HAL_IWDG_Refresh(&hiwdg);
 80144a0:	481e      	ldr	r0, [pc, #120]	; (801451c <saveConfig+0xa4>)
 80144a2:	f004 fbdb 	bl	8018c5c <HAL_IWDG_Refresh>
			printf("FLASH ERASE SUCCESS\n");
 80144a6:	481e      	ldr	r0, [pc, #120]	; (8014520 <saveConfig+0xa8>)
 80144a8:	f00e f918 	bl	80226dc <puts>
	for(ulAddress=0;ulAddress<6;ulAddress++)
 80144ac:	68fb      	ldr	r3, [r7, #12]
 80144ae:	3301      	adds	r3, #1
 80144b0:	60fb      	str	r3, [r7, #12]
 80144b2:	68fb      	ldr	r3, [r7, #12]
 80144b4:	2b05      	cmp	r3, #5
 80144b6:	d9ea      	bls.n	801448e <saveConfig+0x16>
		}
	}
	size_t SIZE = (sizeof(EI_t)+7);
 80144b8:	f240 3347 	movw	r3, #839	; 0x347
 80144bc:	607b      	str	r3, [r7, #4]
	size_t SIZE_VAR  = SIZE;
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	60bb      	str	r3, [r7, #8]

	for(ulAddress = 0; ulAddress < SIZE; ulAddress+=32)
 80144c2:	2300      	movs	r3, #0
 80144c4:	60fb      	str	r3, [r7, #12]
 80144c6:	e01d      	b.n	8014504 <saveConfig+0x8c>
	{
		HAL_IWDG_Refresh(&hiwdg);
 80144c8:	4814      	ldr	r0, [pc, #80]	; (801451c <saveConfig+0xa4>)
 80144ca:	f004 fbc7 	bl	8018c5c <HAL_IWDG_Refresh>
		if(SIZE_VAR <32)
 80144ce:	68bb      	ldr	r3, [r7, #8]
 80144d0:	2b1f      	cmp	r3, #31
 80144d2:	d809      	bhi.n	80144e8 <saveConfig+0x70>
		{
			SPI_WriteInFlash(1, ulAddress, SIZE_VAR, Config_Buff+ulAddress);
 80144d4:	68bb      	ldr	r3, [r7, #8]
 80144d6:	b29a      	uxth	r2, r3
 80144d8:	68fb      	ldr	r3, [r7, #12]
 80144da:	4912      	ldr	r1, [pc, #72]	; (8014524 <saveConfig+0xac>)
 80144dc:	440b      	add	r3, r1
 80144de:	68f9      	ldr	r1, [r7, #12]
 80144e0:	2001      	movs	r0, #1
 80144e2:	f7ff fbeb 	bl	8013cbc <SPI_WriteInFlash>
 80144e6:	e00a      	b.n	80144fe <saveConfig+0x86>
		}
		else
		{
			SPI_WriteInFlash(1, ulAddress, 32, Config_Buff+ulAddress);
 80144e8:	68fb      	ldr	r3, [r7, #12]
 80144ea:	4a0e      	ldr	r2, [pc, #56]	; (8014524 <saveConfig+0xac>)
 80144ec:	4413      	add	r3, r2
 80144ee:	2220      	movs	r2, #32
 80144f0:	68f9      	ldr	r1, [r7, #12]
 80144f2:	2001      	movs	r0, #1
 80144f4:	f7ff fbe2 	bl	8013cbc <SPI_WriteInFlash>
			SIZE_VAR-=32;
 80144f8:	68bb      	ldr	r3, [r7, #8]
 80144fa:	3b20      	subs	r3, #32
 80144fc:	60bb      	str	r3, [r7, #8]
	for(ulAddress = 0; ulAddress < SIZE; ulAddress+=32)
 80144fe:	68fb      	ldr	r3, [r7, #12]
 8014500:	3320      	adds	r3, #32
 8014502:	60fb      	str	r3, [r7, #12]
 8014504:	68fa      	ldr	r2, [r7, #12]
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	429a      	cmp	r2, r3
 801450a:	d3dd      	bcc.n	80144c8 <saveConfig+0x50>
		}
	}

	printf("\nCFG written successfully");
 801450c:	4806      	ldr	r0, [pc, #24]	; (8014528 <saveConfig+0xb0>)
 801450e:	f00e f849 	bl	80225a4 <iprintf>
	//		if((i%8)==0)
	//		{
	//			printf("\n");
	//		}
	//	}
	NVIC_SystemReset();
 8014512:	f7ff faff 	bl	8013b14 <__NVIC_SystemReset>
 8014516:	bf00      	nop
 8014518:	080270e0 	.word	0x080270e0
 801451c:	20009c74 	.word	0x20009c74
 8014520:	080270ec 	.word	0x080270ec
 8014524:	20000648 	.word	0x20000648
 8014528:	08027100 	.word	0x08027100

0801452c <Print_BuildDat_Details>:
	return 1;
}


void Print_BuildDat_Details(void)
{
 801452c:	b580      	push	{r7, lr}
 801452e:	af00      	add	r7, sp, #0
	if(Debug_flag == 0)
 8014530:	4b14      	ldr	r3, [pc, #80]	; (8014584 <Print_BuildDat_Details+0x58>)
 8014532:	781b      	ldrb	r3, [r3, #0]
 8014534:	2b00      	cmp	r3, #0
 8014536:	d022      	beq.n	801457e <Print_BuildDat_Details+0x52>
	{
		return;
	}
	static uint32_t PrintClk = 0;
	if(HAL_Elaps_Ticks(PrintClk) >= TEN_SEC)
 8014538:	4b13      	ldr	r3, [pc, #76]	; (8014588 <Print_BuildDat_Details+0x5c>)
 801453a:	681b      	ldr	r3, [r3, #0]
 801453c:	4618      	mov	r0, r3
 801453e:	f7fa fa75 	bl	800ea2c <HAL_Elaps_Ticks>
 8014542:	4603      	mov	r3, r0
 8014544:	f242 720f 	movw	r2, #9999	; 0x270f
 8014548:	4293      	cmp	r3, r2
 801454a:	d919      	bls.n	8014580 <Print_BuildDat_Details+0x54>
	{
		//		strcpy((char *)EI_data.STN_NAME,"IRISET");
		printf("\n__________________BUILD DETAILS__________________\n");
 801454c:	480f      	ldr	r0, [pc, #60]	; (801458c <Print_BuildDat_Details+0x60>)
 801454e:	f00e f8c5 	bl	80226dc <puts>
		printf("STATION NAME:%s|",EI_data.STN_NAME);
 8014552:	490f      	ldr	r1, [pc, #60]	; (8014590 <Print_BuildDat_Details+0x64>)
 8014554:	480f      	ldr	r0, [pc, #60]	; (8014594 <Print_BuildDat_Details+0x68>)
 8014556:	f00e f825 	bl	80225a4 <iprintf>
		printf("APP CRC:0X%04X|",EI_Dat_CRC);
 801455a:	4b0f      	ldr	r3, [pc, #60]	; (8014598 <Print_BuildDat_Details+0x6c>)
 801455c:	881b      	ldrh	r3, [r3, #0]
 801455e:	4619      	mov	r1, r3
 8014560:	480e      	ldr	r0, [pc, #56]	; (801459c <Print_BuildDat_Details+0x70>)
 8014562:	f00e f81f 	bl	80225a4 <iprintf>
		printf("EXE CRC:0X%04X\n\n",Build_CRC);
 8014566:	4b0e      	ldr	r3, [pc, #56]	; (80145a0 <Print_BuildDat_Details+0x74>)
 8014568:	881b      	ldrh	r3, [r3, #0]
 801456a:	4619      	mov	r1, r3
 801456c:	480d      	ldr	r0, [pc, #52]	; (80145a4 <Print_BuildDat_Details+0x78>)
 801456e:	f00e f819 	bl	80225a4 <iprintf>
		//printf("*********************************************************\n");

		PrintClk = HAL_GetTick();
 8014572:	f001 f80d 	bl	8015590 <HAL_GetTick>
 8014576:	4603      	mov	r3, r0
 8014578:	4a03      	ldr	r2, [pc, #12]	; (8014588 <Print_BuildDat_Details+0x5c>)
 801457a:	6013      	str	r3, [r2, #0]
 801457c:	e000      	b.n	8014580 <Print_BuildDat_Details+0x54>
		return;
 801457e:	bf00      	nop
	}
}
 8014580:	bd80      	pop	{r7, pc}
 8014582:	bf00      	nop
 8014584:	20000645 	.word	0x20000645
 8014588:	20009d10 	.word	0x20009d10
 801458c:	0802711c 	.word	0x0802711c
 8014590:	20000305 	.word	0x20000305
 8014594:	08027150 	.word	0x08027150
 8014598:	20009caa 	.word	0x20009caa
 801459c:	08027164 	.word	0x08027164
 80145a0:	20009ca8 	.word	0x20009ca8
 80145a4:	08027174 	.word	0x08027174

080145a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80145a8:	b580      	push	{r7, lr}
 80145aa:	b082      	sub	sp, #8
 80145ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80145ae:	4b0f      	ldr	r3, [pc, #60]	; (80145ec <HAL_MspInit+0x44>)
 80145b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80145b2:	4a0e      	ldr	r2, [pc, #56]	; (80145ec <HAL_MspInit+0x44>)
 80145b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80145b8:	6413      	str	r3, [r2, #64]	; 0x40
 80145ba:	4b0c      	ldr	r3, [pc, #48]	; (80145ec <HAL_MspInit+0x44>)
 80145bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80145be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80145c2:	607b      	str	r3, [r7, #4]
 80145c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80145c6:	4b09      	ldr	r3, [pc, #36]	; (80145ec <HAL_MspInit+0x44>)
 80145c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80145ca:	4a08      	ldr	r2, [pc, #32]	; (80145ec <HAL_MspInit+0x44>)
 80145cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80145d0:	6453      	str	r3, [r2, #68]	; 0x44
 80145d2:	4b06      	ldr	r3, [pc, #24]	; (80145ec <HAL_MspInit+0x44>)
 80145d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80145d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80145da:	603b      	str	r3, [r7, #0]
 80145dc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80145de:	2004      	movs	r0, #4
 80145e0:	f001 ffac 	bl	801653c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80145e4:	bf00      	nop
 80145e6:	3708      	adds	r7, #8
 80145e8:	46bd      	mov	sp, r7
 80145ea:	bd80      	pop	{r7, pc}
 80145ec:	40023800 	.word	0x40023800

080145f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80145f0:	b480      	push	{r7}
 80145f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 80145f4:	e7fe      	b.n	80145f4 <NMI_Handler+0x4>

080145f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80145f6:	b480      	push	{r7}
 80145f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80145fa:	e7fe      	b.n	80145fa <HardFault_Handler+0x4>

080145fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80145fc:	b480      	push	{r7}
 80145fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8014600:	e7fe      	b.n	8014600 <MemManage_Handler+0x4>

08014602 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8014602:	b480      	push	{r7}
 8014604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8014606:	e7fe      	b.n	8014606 <BusFault_Handler+0x4>

08014608 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8014608:	b480      	push	{r7}
 801460a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 801460c:	e7fe      	b.n	801460c <UsageFault_Handler+0x4>

0801460e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 801460e:	b480      	push	{r7}
 8014610:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8014612:	bf00      	nop
 8014614:	46bd      	mov	sp, r7
 8014616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801461a:	4770      	bx	lr

0801461c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 801461c:	b480      	push	{r7}
 801461e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8014620:	bf00      	nop
 8014622:	46bd      	mov	sp, r7
 8014624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014628:	4770      	bx	lr

0801462a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 801462a:	b480      	push	{r7}
 801462c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 801462e:	bf00      	nop
 8014630:	46bd      	mov	sp, r7
 8014632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014636:	4770      	bx	lr

08014638 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8014638:	b580      	push	{r7, lr}
 801463a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 801463c:	f000 ff94 	bl	8015568 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8014640:	bf00      	nop
 8014642:	bd80      	pop	{r7, pc}

08014644 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8014644:	b580      	push	{r7, lr}
 8014646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EX_INT0_Pin);
 8014648:	2001      	movs	r0, #1
 801464a:	f003 fca5 	bl	8017f98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 801464e:	bf00      	nop
 8014650:	bd80      	pop	{r7, pc}

08014652 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8014652:	b580      	push	{r7, lr}
 8014654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EX_INT1_Pin);
 8014656:	2002      	movs	r0, #2
 8014658:	f003 fc9e 	bl	8017f98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 801465c:	bf00      	nop
 801465e:	bd80      	pop	{r7, pc}

08014660 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8014660:	b580      	push	{r7, lr}
 8014662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8014664:	4802      	ldr	r0, [pc, #8]	; (8014670 <TIM4_IRQHandler+0x10>)
 8014666:	f006 fbbb 	bl	801ade0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 801466a:	bf00      	nop
 801466c:	bd80      	pop	{r7, pc}
 801466e:	bf00      	nop
 8014670:	20009d18 	.word	0x20009d18

08014674 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8014674:	b580      	push	{r7, lr}
 8014676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8014678:	4802      	ldr	r0, [pc, #8]	; (8014684 <USART1_IRQHandler+0x10>)
 801467a:	f006 fdd5 	bl	801b228 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 801467e:	bf00      	nop
 8014680:	bd80      	pop	{r7, pc}
 8014682:	bf00      	nop
 8014684:	2000bc4c 	.word	0x2000bc4c

08014688 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8014688:	b580      	push	{r7, lr}
 801468a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 801468c:	4802      	ldr	r0, [pc, #8]	; (8014698 <TIM5_IRQHandler+0x10>)
 801468e:	f006 fba7 	bl	801ade0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8014692:	bf00      	nop
 8014694:	bd80      	pop	{r7, pc}
 8014696:	bf00      	nop
 8014698:	20009dd4 	.word	0x20009dd4

0801469c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 801469c:	b580      	push	{r7, lr}
 801469e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80146a0:	4802      	ldr	r0, [pc, #8]	; (80146ac <UART4_IRQHandler+0x10>)
 80146a2:	f006 fdc1 	bl	801b228 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80146a6:	bf00      	nop
 80146a8:	bd80      	pop	{r7, pc}
 80146aa:	bf00      	nop
 80146ac:	2000ba24 	.word	0x2000ba24

080146b0 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80146b0:	b580      	push	{r7, lr}
 80146b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80146b4:	4802      	ldr	r0, [pc, #8]	; (80146c0 <UART5_IRQHandler+0x10>)
 80146b6:	f006 fdb7 	bl	801b228 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80146ba:	bf00      	nop
 80146bc:	bd80      	pop	{r7, pc}
 80146be:	bf00      	nop
 80146c0:	2000badc 	.word	0x2000badc

080146c4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80146c4:	b580      	push	{r7, lr}
 80146c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80146c8:	4802      	ldr	r0, [pc, #8]	; (80146d4 <TIM6_DAC_IRQHandler+0x10>)
 80146ca:	f006 fb89 	bl	801ade0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80146ce:	bf00      	nop
 80146d0:	bd80      	pop	{r7, pc}
 80146d2:	bf00      	nop
 80146d4:	20009e90 	.word	0x20009e90

080146d8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80146d8:	b580      	push	{r7, lr}
 80146da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80146dc:	4802      	ldr	r0, [pc, #8]	; (80146e8 <TIM7_IRQHandler+0x10>)
 80146de:	f006 fb7f 	bl	801ade0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80146e2:	bf00      	nop
 80146e4:	bd80      	pop	{r7, pc}
 80146e6:	bf00      	nop
 80146e8:	20009f4c 	.word	0x20009f4c

080146ec <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80146ec:	b580      	push	{r7, lr}
 80146ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80146f0:	4802      	ldr	r0, [pc, #8]	; (80146fc <ETH_IRQHandler+0x10>)
 80146f2:	f002 fb73 	bl	8016ddc <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80146f6:	bf00      	nop
 80146f8:	bd80      	pop	{r7, pc}
 80146fa:	bf00      	nop
 80146fc:	20010660 	.word	0x20010660

08014700 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8014700:	b580      	push	{r7, lr}
 8014702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8014704:	4802      	ldr	r0, [pc, #8]	; (8014710 <CAN2_RX0_IRQHandler+0x10>)
 8014706:	f001 fc15 	bl	8015f34 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 801470a:	bf00      	nop
 801470c:	bd80      	pop	{r7, pc}
 801470e:	bf00      	nop
 8014710:	20009af0 	.word	0x20009af0

08014714 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8014714:	b580      	push	{r7, lr}
 8014716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8014718:	4802      	ldr	r0, [pc, #8]	; (8014724 <CAN2_RX1_IRQHandler+0x10>)
 801471a:	f001 fc0b 	bl	8015f34 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 801471e:	bf00      	nop
 8014720:	bd80      	pop	{r7, pc}
 8014722:	bf00      	nop
 8014724:	20009af0 	.word	0x20009af0

08014728 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8014728:	b580      	push	{r7, lr}
 801472a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 801472c:	4802      	ldr	r0, [pc, #8]	; (8014738 <UART7_IRQHandler+0x10>)
 801472e:	f006 fd7b 	bl	801b228 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8014732:	bf00      	nop
 8014734:	bd80      	pop	{r7, pc}
 8014736:	bf00      	nop
 8014738:	2000bb94 	.word	0x2000bb94

0801473c <CAN3_RX0_IRQHandler>:

/**
  * @brief This function handles CAN3 RX0 interrupt.
  */
void CAN3_RX0_IRQHandler(void)
{
 801473c:	b580      	push	{r7, lr}
 801473e:	af00      	add	r7, sp, #0
	}
#endif

#if 1
  /* USER CODE END CAN3_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 8014740:	4802      	ldr	r0, [pc, #8]	; (801474c <CAN3_RX0_IRQHandler+0x10>)
 8014742:	f001 fbf7 	bl	8015f34 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_RX0_IRQn 1 */
#endif
  /* USER CODE END CAN3_RX0_IRQn 1 */
}
 8014746:	bf00      	nop
 8014748:	bd80      	pop	{r7, pc}
 801474a:	bf00      	nop
 801474c:	20009b54 	.word	0x20009b54

08014750 <CAN3_RX1_IRQHandler>:

/**
  * @brief This function handles CAN3 RX1 interrupt.
  */
void CAN3_RX1_IRQHandler(void)
{
 8014750:	b580      	push	{r7, lr}
 8014752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN3_RX1_IRQn 0 */

  /* USER CODE END CAN3_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 8014754:	4802      	ldr	r0, [pc, #8]	; (8014760 <CAN3_RX1_IRQHandler+0x10>)
 8014756:	f001 fbed 	bl	8015f34 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_RX1_IRQn 1 */

  /* USER CODE END CAN3_RX1_IRQn 1 */
}
 801475a:	bf00      	nop
 801475c:	bd80      	pop	{r7, pc}
 801475e:	bf00      	nop
 8014760:	20009b54 	.word	0x20009b54

08014764 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8014764:	b480      	push	{r7}
 8014766:	af00      	add	r7, sp, #0
	return 1;
 8014768:	2301      	movs	r3, #1
}
 801476a:	4618      	mov	r0, r3
 801476c:	46bd      	mov	sp, r7
 801476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014772:	4770      	bx	lr

08014774 <_kill>:

int _kill(int pid, int sig)
{
 8014774:	b480      	push	{r7}
 8014776:	b083      	sub	sp, #12
 8014778:	af00      	add	r7, sp, #0
 801477a:	6078      	str	r0, [r7, #4]
 801477c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 801477e:	4b05      	ldr	r3, [pc, #20]	; (8014794 <_kill+0x20>)
 8014780:	2216      	movs	r2, #22
 8014782:	601a      	str	r2, [r3, #0]
	return -1;
 8014784:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014788:	4618      	mov	r0, r3
 801478a:	370c      	adds	r7, #12
 801478c:	46bd      	mov	sp, r7
 801478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014792:	4770      	bx	lr
 8014794:	200142a4 	.word	0x200142a4

08014798 <_exit>:

void _exit (int status)
{
 8014798:	b580      	push	{r7, lr}
 801479a:	b082      	sub	sp, #8
 801479c:	af00      	add	r7, sp, #0
 801479e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80147a0:	f04f 31ff 	mov.w	r1, #4294967295
 80147a4:	6878      	ldr	r0, [r7, #4]
 80147a6:	f7ff ffe5 	bl	8014774 <_kill>
	while (1) {}		/* Make sure we hang here */
 80147aa:	e7fe      	b.n	80147aa <_exit+0x12>

080147ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80147ac:	b580      	push	{r7, lr}
 80147ae:	b086      	sub	sp, #24
 80147b0:	af00      	add	r7, sp, #0
 80147b2:	60f8      	str	r0, [r7, #12]
 80147b4:	60b9      	str	r1, [r7, #8]
 80147b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80147b8:	2300      	movs	r3, #0
 80147ba:	617b      	str	r3, [r7, #20]
 80147bc:	e00a      	b.n	80147d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80147be:	f3af 8000 	nop.w
 80147c2:	4601      	mov	r1, r0
 80147c4:	68bb      	ldr	r3, [r7, #8]
 80147c6:	1c5a      	adds	r2, r3, #1
 80147c8:	60ba      	str	r2, [r7, #8]
 80147ca:	b2ca      	uxtb	r2, r1
 80147cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80147ce:	697b      	ldr	r3, [r7, #20]
 80147d0:	3301      	adds	r3, #1
 80147d2:	617b      	str	r3, [r7, #20]
 80147d4:	697a      	ldr	r2, [r7, #20]
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	429a      	cmp	r2, r3
 80147da:	dbf0      	blt.n	80147be <_read+0x12>
	}

return len;
 80147dc:	687b      	ldr	r3, [r7, #4]
}
 80147de:	4618      	mov	r0, r3
 80147e0:	3718      	adds	r7, #24
 80147e2:	46bd      	mov	sp, r7
 80147e4:	bd80      	pop	{r7, pc}

080147e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80147e6:	b580      	push	{r7, lr}
 80147e8:	b086      	sub	sp, #24
 80147ea:	af00      	add	r7, sp, #0
 80147ec:	60f8      	str	r0, [r7, #12]
 80147ee:	60b9      	str	r1, [r7, #8]
 80147f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80147f2:	2300      	movs	r3, #0
 80147f4:	617b      	str	r3, [r7, #20]
 80147f6:	e009      	b.n	801480c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80147f8:	68bb      	ldr	r3, [r7, #8]
 80147fa:	1c5a      	adds	r2, r3, #1
 80147fc:	60ba      	str	r2, [r7, #8]
 80147fe:	781b      	ldrb	r3, [r3, #0]
 8014800:	4618      	mov	r0, r3
 8014802:	f7ec f947 	bl	8000a94 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8014806:	697b      	ldr	r3, [r7, #20]
 8014808:	3301      	adds	r3, #1
 801480a:	617b      	str	r3, [r7, #20]
 801480c:	697a      	ldr	r2, [r7, #20]
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	429a      	cmp	r2, r3
 8014812:	dbf1      	blt.n	80147f8 <_write+0x12>
	}
	return len;
 8014814:	687b      	ldr	r3, [r7, #4]
}
 8014816:	4618      	mov	r0, r3
 8014818:	3718      	adds	r7, #24
 801481a:	46bd      	mov	sp, r7
 801481c:	bd80      	pop	{r7, pc}

0801481e <_close>:

int _close(int file)
{
 801481e:	b480      	push	{r7}
 8014820:	b083      	sub	sp, #12
 8014822:	af00      	add	r7, sp, #0
 8014824:	6078      	str	r0, [r7, #4]
	return -1;
 8014826:	f04f 33ff 	mov.w	r3, #4294967295
}
 801482a:	4618      	mov	r0, r3
 801482c:	370c      	adds	r7, #12
 801482e:	46bd      	mov	sp, r7
 8014830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014834:	4770      	bx	lr

08014836 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8014836:	b480      	push	{r7}
 8014838:	b083      	sub	sp, #12
 801483a:	af00      	add	r7, sp, #0
 801483c:	6078      	str	r0, [r7, #4]
 801483e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8014840:	683b      	ldr	r3, [r7, #0]
 8014842:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8014846:	605a      	str	r2, [r3, #4]
	return 0;
 8014848:	2300      	movs	r3, #0
}
 801484a:	4618      	mov	r0, r3
 801484c:	370c      	adds	r7, #12
 801484e:	46bd      	mov	sp, r7
 8014850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014854:	4770      	bx	lr

08014856 <_isatty>:

int _isatty(int file)
{
 8014856:	b480      	push	{r7}
 8014858:	b083      	sub	sp, #12
 801485a:	af00      	add	r7, sp, #0
 801485c:	6078      	str	r0, [r7, #4]
	return 1;
 801485e:	2301      	movs	r3, #1
}
 8014860:	4618      	mov	r0, r3
 8014862:	370c      	adds	r7, #12
 8014864:	46bd      	mov	sp, r7
 8014866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801486a:	4770      	bx	lr

0801486c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 801486c:	b480      	push	{r7}
 801486e:	b085      	sub	sp, #20
 8014870:	af00      	add	r7, sp, #0
 8014872:	60f8      	str	r0, [r7, #12]
 8014874:	60b9      	str	r1, [r7, #8]
 8014876:	607a      	str	r2, [r7, #4]
	return 0;
 8014878:	2300      	movs	r3, #0
}
 801487a:	4618      	mov	r0, r3
 801487c:	3714      	adds	r7, #20
 801487e:	46bd      	mov	sp, r7
 8014880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014884:	4770      	bx	lr
	...

08014888 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8014888:	b480      	push	{r7}
 801488a:	b087      	sub	sp, #28
 801488c:	af00      	add	r7, sp, #0
 801488e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8014890:	4a14      	ldr	r2, [pc, #80]	; (80148e4 <_sbrk+0x5c>)
 8014892:	4b15      	ldr	r3, [pc, #84]	; (80148e8 <_sbrk+0x60>)
 8014894:	1ad3      	subs	r3, r2, r3
 8014896:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8014898:	697b      	ldr	r3, [r7, #20]
 801489a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 801489c:	4b13      	ldr	r3, [pc, #76]	; (80148ec <_sbrk+0x64>)
 801489e:	681b      	ldr	r3, [r3, #0]
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d102      	bne.n	80148aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80148a4:	4b11      	ldr	r3, [pc, #68]	; (80148ec <_sbrk+0x64>)
 80148a6:	4a12      	ldr	r2, [pc, #72]	; (80148f0 <_sbrk+0x68>)
 80148a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80148aa:	4b10      	ldr	r3, [pc, #64]	; (80148ec <_sbrk+0x64>)
 80148ac:	681a      	ldr	r2, [r3, #0]
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	4413      	add	r3, r2
 80148b2:	693a      	ldr	r2, [r7, #16]
 80148b4:	429a      	cmp	r2, r3
 80148b6:	d205      	bcs.n	80148c4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80148b8:	4b0e      	ldr	r3, [pc, #56]	; (80148f4 <_sbrk+0x6c>)
 80148ba:	220c      	movs	r2, #12
 80148bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80148be:	f04f 33ff 	mov.w	r3, #4294967295
 80148c2:	e009      	b.n	80148d8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80148c4:	4b09      	ldr	r3, [pc, #36]	; (80148ec <_sbrk+0x64>)
 80148c6:	681b      	ldr	r3, [r3, #0]
 80148c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80148ca:	4b08      	ldr	r3, [pc, #32]	; (80148ec <_sbrk+0x64>)
 80148cc:	681a      	ldr	r2, [r3, #0]
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	4413      	add	r3, r2
 80148d2:	4a06      	ldr	r2, [pc, #24]	; (80148ec <_sbrk+0x64>)
 80148d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80148d6:	68fb      	ldr	r3, [r7, #12]
}
 80148d8:	4618      	mov	r0, r3
 80148da:	371c      	adds	r7, #28
 80148dc:	46bd      	mov	sp, r7
 80148de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148e2:	4770      	bx	lr
 80148e4:	20080000 	.word	0x20080000
 80148e8:	00000400 	.word	0x00000400
 80148ec:	20009d14 	.word	0x20009d14
 80148f0:	200142b0 	.word	0x200142b0
 80148f4:	200142a4 	.word	0x200142a4

080148f8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80148f8:	b480      	push	{r7}
 80148fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80148fc:	4b06      	ldr	r3, [pc, #24]	; (8014918 <SystemInit+0x20>)
 80148fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014902:	4a05      	ldr	r2, [pc, #20]	; (8014918 <SystemInit+0x20>)
 8014904:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014908:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 801490c:	bf00      	nop
 801490e:	46bd      	mov	sp, r7
 8014910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014914:	4770      	bx	lr
 8014916:	bf00      	nop
 8014918:	e000ed00 	.word	0xe000ed00

0801491c <MX_USART1_UART_Init>:

}
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 801491c:	b580      	push	{r7, lr}
 801491e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8014920:	4b16      	ldr	r3, [pc, #88]	; (801497c <MX_USART1_UART_Init+0x60>)
 8014922:	4a17      	ldr	r2, [pc, #92]	; (8014980 <MX_USART1_UART_Init+0x64>)
 8014924:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8014926:	4b15      	ldr	r3, [pc, #84]	; (801497c <MX_USART1_UART_Init+0x60>)
 8014928:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 801492c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 801492e:	4b13      	ldr	r3, [pc, #76]	; (801497c <MX_USART1_UART_Init+0x60>)
 8014930:	2200      	movs	r2, #0
 8014932:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8014934:	4b11      	ldr	r3, [pc, #68]	; (801497c <MX_USART1_UART_Init+0x60>)
 8014936:	2200      	movs	r2, #0
 8014938:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 801493a:	4b10      	ldr	r3, [pc, #64]	; (801497c <MX_USART1_UART_Init+0x60>)
 801493c:	2200      	movs	r2, #0
 801493e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8014940:	4b0e      	ldr	r3, [pc, #56]	; (801497c <MX_USART1_UART_Init+0x60>)
 8014942:	220c      	movs	r2, #12
 8014944:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8014946:	4b0d      	ldr	r3, [pc, #52]	; (801497c <MX_USART1_UART_Init+0x60>)
 8014948:	2200      	movs	r2, #0
 801494a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 801494c:	4b0b      	ldr	r3, [pc, #44]	; (801497c <MX_USART1_UART_Init+0x60>)
 801494e:	2200      	movs	r2, #0
 8014950:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8014952:	4b0a      	ldr	r3, [pc, #40]	; (801497c <MX_USART1_UART_Init+0x60>)
 8014954:	2200      	movs	r2, #0
 8014956:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8014958:	4b08      	ldr	r3, [pc, #32]	; (801497c <MX_USART1_UART_Init+0x60>)
 801495a:	2200      	movs	r2, #0
 801495c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 801495e:	4807      	ldr	r0, [pc, #28]	; (801497c <MX_USART1_UART_Init+0x60>)
 8014960:	f006 fb80 	bl	801b064 <HAL_UART_Init>
 8014964:	4603      	mov	r3, r0
 8014966:	2b00      	cmp	r3, #0
 8014968:	d001      	beq.n	801496e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 801496a:	f7ff f885 	bl	8013a78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, ISP_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 801496e:	2280      	movs	r2, #128	; 0x80
 8014970:	4904      	ldr	r1, [pc, #16]	; (8014984 <MX_USART1_UART_Init+0x68>)
 8014972:	4802      	ldr	r0, [pc, #8]	; (801497c <MX_USART1_UART_Init+0x60>)
 8014974:	f007 fee2 	bl	801c73c <HAL_UARTEx_ReceiveToIdle_IT>
  /* USER CODE END USART1_Init 2 */

}
 8014978:	bf00      	nop
 801497a:	bd80      	pop	{r7, pc}
 801497c:	2000bc4c 	.word	0x2000bc4c
 8014980:	40011000 	.word	0x40011000
 8014984:	2000b824 	.word	0x2000b824

08014988 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8014988:	b580      	push	{r7, lr}
 801498a:	b0b4      	sub	sp, #208	; 0xd0
 801498c:	af00      	add	r7, sp, #0
 801498e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014990:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8014994:	2200      	movs	r2, #0
 8014996:	601a      	str	r2, [r3, #0]
 8014998:	605a      	str	r2, [r3, #4]
 801499a:	609a      	str	r2, [r3, #8]
 801499c:	60da      	str	r2, [r3, #12]
 801499e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80149a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80149a4:	2290      	movs	r2, #144	; 0x90
 80149a6:	2100      	movs	r1, #0
 80149a8:	4618      	mov	r0, r3
 80149aa:	f00d fd13 	bl	80223d4 <memset>
  if(uartHandle->Instance==UART4)
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	681b      	ldr	r3, [r3, #0]
 80149b2:	4aa7      	ldr	r2, [pc, #668]	; (8014c50 <HAL_UART_MspInit+0x2c8>)
 80149b4:	4293      	cmp	r3, r2
 80149b6:	d145      	bne.n	8014a44 <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80149b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80149bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80149be:	2300      	movs	r3, #0
 80149c0:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80149c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80149c6:	4618      	mov	r0, r3
 80149c8:	f004 fdec 	bl	80195a4 <HAL_RCCEx_PeriphCLKConfig>
 80149cc:	4603      	mov	r3, r0
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	d001      	beq.n	80149d6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80149d2:	f7ff f851 	bl	8013a78 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80149d6:	4b9f      	ldr	r3, [pc, #636]	; (8014c54 <HAL_UART_MspInit+0x2cc>)
 80149d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80149da:	4a9e      	ldr	r2, [pc, #632]	; (8014c54 <HAL_UART_MspInit+0x2cc>)
 80149dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80149e0:	6413      	str	r3, [r2, #64]	; 0x40
 80149e2:	4b9c      	ldr	r3, [pc, #624]	; (8014c54 <HAL_UART_MspInit+0x2cc>)
 80149e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80149e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80149ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80149ec:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOH_CLK_ENABLE();
 80149ee:	4b99      	ldr	r3, [pc, #612]	; (8014c54 <HAL_UART_MspInit+0x2cc>)
 80149f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80149f2:	4a98      	ldr	r2, [pc, #608]	; (8014c54 <HAL_UART_MspInit+0x2cc>)
 80149f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80149f8:	6313      	str	r3, [r2, #48]	; 0x30
 80149fa:	4b96      	ldr	r3, [pc, #600]	; (8014c54 <HAL_UART_MspInit+0x2cc>)
 80149fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80149fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014a02:	627b      	str	r3, [r7, #36]	; 0x24
 8014a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PH13     ------> UART4_TX
    PH14     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_TX_Pin|UART4_RX_Pin;
 8014a06:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8014a0a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014a0e:	2302      	movs	r3, #2
 8014a10:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014a14:	2300      	movs	r3, #0
 8014a16:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014a1a:	2303      	movs	r3, #3
 8014a1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8014a20:	2308      	movs	r3, #8
 8014a22:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8014a26:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8014a2a:	4619      	mov	r1, r3
 8014a2c:	488a      	ldr	r0, [pc, #552]	; (8014c58 <HAL_UART_MspInit+0x2d0>)
 8014a2e:	f003 f8bb 	bl	8017ba8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8014a32:	2200      	movs	r2, #0
 8014a34:	2105      	movs	r1, #5
 8014a36:	2034      	movs	r0, #52	; 0x34
 8014a38:	f001 fd8b 	bl	8016552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8014a3c:	2034      	movs	r0, #52	; 0x34
 8014a3e:	f001 fda4 	bl	801658a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8014a42:	e100      	b.n	8014c46 <HAL_UART_MspInit+0x2be>
  else if(uartHandle->Instance==UART5)
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	681b      	ldr	r3, [r3, #0]
 8014a48:	4a84      	ldr	r2, [pc, #528]	; (8014c5c <HAL_UART_MspInit+0x2d4>)
 8014a4a:	4293      	cmp	r3, r2
 8014a4c:	d167      	bne.n	8014b1e <HAL_UART_MspInit+0x196>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8014a4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014a52:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8014a54:	2300      	movs	r3, #0
 8014a56:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8014a5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014a5e:	4618      	mov	r0, r3
 8014a60:	f004 fda0 	bl	80195a4 <HAL_RCCEx_PeriphCLKConfig>
 8014a64:	4603      	mov	r3, r0
 8014a66:	2b00      	cmp	r3, #0
 8014a68:	d001      	beq.n	8014a6e <HAL_UART_MspInit+0xe6>
      Error_Handler();
 8014a6a:	f7ff f805 	bl	8013a78 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8014a6e:	4b79      	ldr	r3, [pc, #484]	; (8014c54 <HAL_UART_MspInit+0x2cc>)
 8014a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014a72:	4a78      	ldr	r2, [pc, #480]	; (8014c54 <HAL_UART_MspInit+0x2cc>)
 8014a74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014a78:	6413      	str	r3, [r2, #64]	; 0x40
 8014a7a:	4b76      	ldr	r3, [pc, #472]	; (8014c54 <HAL_UART_MspInit+0x2cc>)
 8014a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014a7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8014a82:	623b      	str	r3, [r7, #32]
 8014a84:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8014a86:	4b73      	ldr	r3, [pc, #460]	; (8014c54 <HAL_UART_MspInit+0x2cc>)
 8014a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a8a:	4a72      	ldr	r2, [pc, #456]	; (8014c54 <HAL_UART_MspInit+0x2cc>)
 8014a8c:	f043 0308 	orr.w	r3, r3, #8
 8014a90:	6313      	str	r3, [r2, #48]	; 0x30
 8014a92:	4b70      	ldr	r3, [pc, #448]	; (8014c54 <HAL_UART_MspInit+0x2cc>)
 8014a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a96:	f003 0308 	and.w	r3, r3, #8
 8014a9a:	61fb      	str	r3, [r7, #28]
 8014a9c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8014a9e:	4b6d      	ldr	r3, [pc, #436]	; (8014c54 <HAL_UART_MspInit+0x2cc>)
 8014aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014aa2:	4a6c      	ldr	r2, [pc, #432]	; (8014c54 <HAL_UART_MspInit+0x2cc>)
 8014aa4:	f043 0302 	orr.w	r3, r3, #2
 8014aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8014aaa:	4b6a      	ldr	r3, [pc, #424]	; (8014c54 <HAL_UART_MspInit+0x2cc>)
 8014aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014aae:	f003 0302 	and.w	r3, r3, #2
 8014ab2:	61bb      	str	r3, [r7, #24]
 8014ab4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = UART5_RX_Pin;
 8014ab6:	2304      	movs	r3, #4
 8014ab8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014abc:	2302      	movs	r3, #2
 8014abe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014ac2:	2300      	movs	r3, #0
 8014ac4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014ac8:	2303      	movs	r3, #3
 8014aca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8014ace:	2308      	movs	r3, #8
 8014ad0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(UART5_RX_GPIO_Port, &GPIO_InitStruct);
 8014ad4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8014ad8:	4619      	mov	r1, r3
 8014ada:	4861      	ldr	r0, [pc, #388]	; (8014c60 <HAL_UART_MspInit+0x2d8>)
 8014adc:	f003 f864 	bl	8017ba8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART5_TX_Pin;
 8014ae0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014ae4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014ae8:	2302      	movs	r3, #2
 8014aea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014aee:	2300      	movs	r3, #0
 8014af0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014af4:	2303      	movs	r3, #3
 8014af6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART5;
 8014afa:	2307      	movs	r3, #7
 8014afc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(UART5_TX_GPIO_Port, &GPIO_InitStruct);
 8014b00:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8014b04:	4619      	mov	r1, r3
 8014b06:	4857      	ldr	r0, [pc, #348]	; (8014c64 <HAL_UART_MspInit+0x2dc>)
 8014b08:	f003 f84e 	bl	8017ba8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8014b0c:	2200      	movs	r2, #0
 8014b0e:	2105      	movs	r1, #5
 8014b10:	2035      	movs	r0, #53	; 0x35
 8014b12:	f001 fd1e 	bl	8016552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8014b16:	2035      	movs	r0, #53	; 0x35
 8014b18:	f001 fd37 	bl	801658a <HAL_NVIC_EnableIRQ>
}
 8014b1c:	e093      	b.n	8014c46 <HAL_UART_MspInit+0x2be>
  else if(uartHandle->Instance==UART7)
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	681b      	ldr	r3, [r3, #0]
 8014b22:	4a51      	ldr	r2, [pc, #324]	; (8014c68 <HAL_UART_MspInit+0x2e0>)
 8014b24:	4293      	cmp	r3, r2
 8014b26:	d145      	bne.n	8014bb4 <HAL_UART_MspInit+0x22c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8014b28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8014b2e:	2300      	movs	r3, #0
 8014b30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8014b34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014b38:	4618      	mov	r0, r3
 8014b3a:	f004 fd33 	bl	80195a4 <HAL_RCCEx_PeriphCLKConfig>
 8014b3e:	4603      	mov	r3, r0
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	d001      	beq.n	8014b48 <HAL_UART_MspInit+0x1c0>
      Error_Handler();
 8014b44:	f7fe ff98 	bl	8013a78 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8014b48:	4b42      	ldr	r3, [pc, #264]	; (8014c54 <HAL_UART_MspInit+0x2cc>)
 8014b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014b4c:	4a41      	ldr	r2, [pc, #260]	; (8014c54 <HAL_UART_MspInit+0x2cc>)
 8014b4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014b52:	6413      	str	r3, [r2, #64]	; 0x40
 8014b54:	4b3f      	ldr	r3, [pc, #252]	; (8014c54 <HAL_UART_MspInit+0x2cc>)
 8014b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014b58:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8014b5c:	617b      	str	r3, [r7, #20]
 8014b5e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8014b60:	4b3c      	ldr	r3, [pc, #240]	; (8014c54 <HAL_UART_MspInit+0x2cc>)
 8014b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014b64:	4a3b      	ldr	r2, [pc, #236]	; (8014c54 <HAL_UART_MspInit+0x2cc>)
 8014b66:	f043 0320 	orr.w	r3, r3, #32
 8014b6a:	6313      	str	r3, [r2, #48]	; 0x30
 8014b6c:	4b39      	ldr	r3, [pc, #228]	; (8014c54 <HAL_UART_MspInit+0x2cc>)
 8014b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014b70:	f003 0320 	and.w	r3, r3, #32
 8014b74:	613b      	str	r3, [r7, #16]
 8014b76:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = UART7_RX_Pin|UART7_TX_Pin;
 8014b78:	23c0      	movs	r3, #192	; 0xc0
 8014b7a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014b7e:	2302      	movs	r3, #2
 8014b80:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014b84:	2300      	movs	r3, #0
 8014b86:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014b8a:	2303      	movs	r3, #3
 8014b8c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8014b90:	2308      	movs	r3, #8
 8014b92:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8014b96:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8014b9a:	4619      	mov	r1, r3
 8014b9c:	4833      	ldr	r0, [pc, #204]	; (8014c6c <HAL_UART_MspInit+0x2e4>)
 8014b9e:	f003 f803 	bl	8017ba8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 8014ba2:	2200      	movs	r2, #0
 8014ba4:	2105      	movs	r1, #5
 8014ba6:	2052      	movs	r0, #82	; 0x52
 8014ba8:	f001 fcd3 	bl	8016552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8014bac:	2052      	movs	r0, #82	; 0x52
 8014bae:	f001 fcec 	bl	801658a <HAL_NVIC_EnableIRQ>
}
 8014bb2:	e048      	b.n	8014c46 <HAL_UART_MspInit+0x2be>
  else if(uartHandle->Instance==USART1)
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	681b      	ldr	r3, [r3, #0]
 8014bb8:	4a2d      	ldr	r2, [pc, #180]	; (8014c70 <HAL_UART_MspInit+0x2e8>)
 8014bba:	4293      	cmp	r3, r2
 8014bbc:	d143      	bne.n	8014c46 <HAL_UART_MspInit+0x2be>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8014bbe:	2340      	movs	r3, #64	; 0x40
 8014bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8014bc2:	2300      	movs	r3, #0
 8014bc4:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8014bc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014bca:	4618      	mov	r0, r3
 8014bcc:	f004 fcea 	bl	80195a4 <HAL_RCCEx_PeriphCLKConfig>
 8014bd0:	4603      	mov	r3, r0
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	d001      	beq.n	8014bda <HAL_UART_MspInit+0x252>
      Error_Handler();
 8014bd6:	f7fe ff4f 	bl	8013a78 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8014bda:	4b1e      	ldr	r3, [pc, #120]	; (8014c54 <HAL_UART_MspInit+0x2cc>)
 8014bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014bde:	4a1d      	ldr	r2, [pc, #116]	; (8014c54 <HAL_UART_MspInit+0x2cc>)
 8014be0:	f043 0310 	orr.w	r3, r3, #16
 8014be4:	6453      	str	r3, [r2, #68]	; 0x44
 8014be6:	4b1b      	ldr	r3, [pc, #108]	; (8014c54 <HAL_UART_MspInit+0x2cc>)
 8014be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014bea:	f003 0310 	and.w	r3, r3, #16
 8014bee:	60fb      	str	r3, [r7, #12]
 8014bf0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014bf2:	4b18      	ldr	r3, [pc, #96]	; (8014c54 <HAL_UART_MspInit+0x2cc>)
 8014bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014bf6:	4a17      	ldr	r2, [pc, #92]	; (8014c54 <HAL_UART_MspInit+0x2cc>)
 8014bf8:	f043 0301 	orr.w	r3, r3, #1
 8014bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8014bfe:	4b15      	ldr	r3, [pc, #84]	; (8014c54 <HAL_UART_MspInit+0x2cc>)
 8014c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014c02:	f003 0301 	and.w	r3, r3, #1
 8014c06:	60bb      	str	r3, [r7, #8]
 8014c08:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8014c0a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8014c0e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014c12:	2302      	movs	r3, #2
 8014c14:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014c18:	2300      	movs	r3, #0
 8014c1a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014c1e:	2303      	movs	r3, #3
 8014c20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8014c24:	2307      	movs	r3, #7
 8014c26:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014c2a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8014c2e:	4619      	mov	r1, r3
 8014c30:	4810      	ldr	r0, [pc, #64]	; (8014c74 <HAL_UART_MspInit+0x2ec>)
 8014c32:	f002 ffb9 	bl	8017ba8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 7, 0);
 8014c36:	2200      	movs	r2, #0
 8014c38:	2107      	movs	r1, #7
 8014c3a:	2025      	movs	r0, #37	; 0x25
 8014c3c:	f001 fc89 	bl	8016552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8014c40:	2025      	movs	r0, #37	; 0x25
 8014c42:	f001 fca2 	bl	801658a <HAL_NVIC_EnableIRQ>
}
 8014c46:	bf00      	nop
 8014c48:	37d0      	adds	r7, #208	; 0xd0
 8014c4a:	46bd      	mov	sp, r7
 8014c4c:	bd80      	pop	{r7, pc}
 8014c4e:	bf00      	nop
 8014c50:	40004c00 	.word	0x40004c00
 8014c54:	40023800 	.word	0x40023800
 8014c58:	40021c00 	.word	0x40021c00
 8014c5c:	40005000 	.word	0x40005000
 8014c60:	40020c00 	.word	0x40020c00
 8014c64:	40020400 	.word	0x40020400
 8014c68:	40007800 	.word	0x40007800
 8014c6c:	40021400 	.word	0x40021400
 8014c70:	40011000 	.word	0x40011000
 8014c74:	40020000 	.word	0x40020000

08014c78 <UART4_Init>:
}

/* USER CODE BEGIN 1 */

void UART4_Init(uint32_t BaudRate)
{
 8014c78:	b580      	push	{r7, lr}
 8014c7a:	b082      	sub	sp, #8
 8014c7c:	af00      	add	r7, sp, #0
 8014c7e:	6078      	str	r0, [r7, #4]
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8014c80:	4b17      	ldr	r3, [pc, #92]	; (8014ce0 <UART4_Init+0x68>)
 8014c82:	4a18      	ldr	r2, [pc, #96]	; (8014ce4 <UART4_Init+0x6c>)
 8014c84:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = BaudRate;
 8014c86:	4a16      	ldr	r2, [pc, #88]	; (8014ce0 <UART4_Init+0x68>)
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	6053      	str	r3, [r2, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8014c8c:	4b14      	ldr	r3, [pc, #80]	; (8014ce0 <UART4_Init+0x68>)
 8014c8e:	2200      	movs	r2, #0
 8014c90:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8014c92:	4b13      	ldr	r3, [pc, #76]	; (8014ce0 <UART4_Init+0x68>)
 8014c94:	2200      	movs	r2, #0
 8014c96:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8014c98:	4b11      	ldr	r3, [pc, #68]	; (8014ce0 <UART4_Init+0x68>)
 8014c9a:	2200      	movs	r2, #0
 8014c9c:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8014c9e:	4b10      	ldr	r3, [pc, #64]	; (8014ce0 <UART4_Init+0x68>)
 8014ca0:	220c      	movs	r2, #12
 8014ca2:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8014ca4:	4b0e      	ldr	r3, [pc, #56]	; (8014ce0 <UART4_Init+0x68>)
 8014ca6:	2200      	movs	r2, #0
 8014ca8:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8014caa:	4b0d      	ldr	r3, [pc, #52]	; (8014ce0 <UART4_Init+0x68>)
 8014cac:	2200      	movs	r2, #0
 8014cae:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8014cb0:	4b0b      	ldr	r3, [pc, #44]	; (8014ce0 <UART4_Init+0x68>)
 8014cb2:	2200      	movs	r2, #0
 8014cb4:	621a      	str	r2, [r3, #32]
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8014cb6:	4b0a      	ldr	r3, [pc, #40]	; (8014ce0 <UART4_Init+0x68>)
 8014cb8:	2200      	movs	r2, #0
 8014cba:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart4) != HAL_OK)
 8014cbc:	4808      	ldr	r0, [pc, #32]	; (8014ce0 <UART4_Init+0x68>)
 8014cbe:	f006 f9d1 	bl	801b064 <HAL_UART_Init>
 8014cc2:	4603      	mov	r3, r0
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	d001      	beq.n	8014ccc <UART4_Init+0x54>
	{
		Error_Handler();
 8014cc8:	f7fe fed6 	bl	8013a78 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */
	HAL_UARTEx_ReceiveToIdle_IT(&huart4, PORT3_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8014ccc:	2280      	movs	r2, #128	; 0x80
 8014cce:	4906      	ldr	r1, [pc, #24]	; (8014ce8 <UART4_Init+0x70>)
 8014cd0:	4803      	ldr	r0, [pc, #12]	; (8014ce0 <UART4_Init+0x68>)
 8014cd2:	f007 fd33 	bl	801c73c <HAL_UARTEx_ReceiveToIdle_IT>
	/* USER CODE END UART4_Init 2 */

}
 8014cd6:	bf00      	nop
 8014cd8:	3708      	adds	r7, #8
 8014cda:	46bd      	mov	sp, r7
 8014cdc:	bd80      	pop	{r7, pc}
 8014cde:	bf00      	nop
 8014ce0:	2000ba24 	.word	0x2000ba24
 8014ce4:	40004c00 	.word	0x40004c00
 8014ce8:	2000b9a4 	.word	0x2000b9a4

08014cec <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8014cec:	b580      	push	{r7, lr}
 8014cee:	b084      	sub	sp, #16
 8014cf0:	af00      	add	r7, sp, #0
 8014cf2:	6078      	str	r0, [r7, #4]
 8014cf4:	460b      	mov	r3, r1
 8014cf6:	807b      	strh	r3, [r7, #2]
	if(huart->Instance == USART1)
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	681b      	ldr	r3, [r3, #0]
 8014cfc:	4a60      	ldr	r2, [pc, #384]	; (8014e80 <HAL_UARTEx_RxEventCallback+0x194>)
 8014cfe:	4293      	cmp	r3, r2
 8014d00:	d129      	bne.n	8014d56 <HAL_UARTEx_RxEventCallback+0x6a>
	{
		HAL_UARTEx_ReceiveToIdle_IT(&huart1, ISP_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8014d02:	2280      	movs	r2, #128	; 0x80
 8014d04:	495f      	ldr	r1, [pc, #380]	; (8014e84 <HAL_UARTEx_RxEventCallback+0x198>)
 8014d06:	4860      	ldr	r0, [pc, #384]	; (8014e88 <HAL_UARTEx_RxEventCallback+0x19c>)
 8014d08:	f007 fd18 	bl	801c73c <HAL_UARTEx_ReceiveToIdle_IT>
		for(uint16_t i=0;i<Size;++i)
 8014d0c:	2300      	movs	r3, #0
 8014d0e:	81fb      	strh	r3, [r7, #14]
 8014d10:	e017      	b.n	8014d42 <HAL_UARTEx_RxEventCallback+0x56>
		{
			ISP_UART_BUFF[ISP_PORT].CIR_BUFF[ISP_UART_BUFF[ISP_PORT].Write_End++] = ISP_PORT_RX_BUF[i];
 8014d12:	89fa      	ldrh	r2, [r7, #14]
 8014d14:	4b5d      	ldr	r3, [pc, #372]	; (8014e8c <HAL_UARTEx_RxEventCallback+0x1a0>)
 8014d16:	881b      	ldrh	r3, [r3, #0]
 8014d18:	1c59      	adds	r1, r3, #1
 8014d1a:	b288      	uxth	r0, r1
 8014d1c:	495b      	ldr	r1, [pc, #364]	; (8014e8c <HAL_UARTEx_RxEventCallback+0x1a0>)
 8014d1e:	8008      	strh	r0, [r1, #0]
 8014d20:	4619      	mov	r1, r3
 8014d22:	4b58      	ldr	r3, [pc, #352]	; (8014e84 <HAL_UARTEx_RxEventCallback+0x198>)
 8014d24:	5c9a      	ldrb	r2, [r3, r2]
 8014d26:	4b59      	ldr	r3, [pc, #356]	; (8014e8c <HAL_UARTEx_RxEventCallback+0x1a0>)
 8014d28:	440b      	add	r3, r1
 8014d2a:	711a      	strb	r2, [r3, #4]
			if(ISP_UART_BUFF[ISP_PORT].Write_End >= ISP_UART_BUFF_SIZE)
 8014d2c:	4b57      	ldr	r3, [pc, #348]	; (8014e8c <HAL_UARTEx_RxEventCallback+0x1a0>)
 8014d2e:	881b      	ldrh	r3, [r3, #0]
 8014d30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014d34:	d302      	bcc.n	8014d3c <HAL_UARTEx_RxEventCallback+0x50>
			{
				ISP_UART_BUFF[ISP_PORT].Write_End = 0;
 8014d36:	4b55      	ldr	r3, [pc, #340]	; (8014e8c <HAL_UARTEx_RxEventCallback+0x1a0>)
 8014d38:	2200      	movs	r2, #0
 8014d3a:	801a      	strh	r2, [r3, #0]
		for(uint16_t i=0;i<Size;++i)
 8014d3c:	89fb      	ldrh	r3, [r7, #14]
 8014d3e:	3301      	adds	r3, #1
 8014d40:	81fb      	strh	r3, [r7, #14]
 8014d42:	89fa      	ldrh	r2, [r7, #14]
 8014d44:	887b      	ldrh	r3, [r7, #2]
 8014d46:	429a      	cmp	r2, r3
 8014d48:	d3e3      	bcc.n	8014d12 <HAL_UARTEx_RxEventCallback+0x26>
			}
		}
		Isp_Intr_Clk = HAL_GetTick();
 8014d4a:	f000 fc21 	bl	8015590 <HAL_GetTick>
 8014d4e:	4603      	mov	r3, r0
 8014d50:	4a4f      	ldr	r2, [pc, #316]	; (8014e90 <HAL_UARTEx_RxEventCallback+0x1a4>)
 8014d52:	6013      	str	r3, [r2, #0]
				UART_BUFFS[THREE_PORT].Write_End = 0;
			}
		}
		UART4_Intr_Clk = HAL_GetTick();
	}
}
 8014d54:	e090      	b.n	8014e78 <HAL_UARTEx_RxEventCallback+0x18c>
	else if(huart->Instance == UART5)
 8014d56:	687b      	ldr	r3, [r7, #4]
 8014d58:	681b      	ldr	r3, [r3, #0]
 8014d5a:	4a4e      	ldr	r2, [pc, #312]	; (8014e94 <HAL_UARTEx_RxEventCallback+0x1a8>)
 8014d5c:	4293      	cmp	r3, r2
 8014d5e:	d129      	bne.n	8014db4 <HAL_UARTEx_RxEventCallback+0xc8>
		HAL_UARTEx_ReceiveToIdle_IT(&huart5, PORT1_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8014d60:	2280      	movs	r2, #128	; 0x80
 8014d62:	494d      	ldr	r1, [pc, #308]	; (8014e98 <HAL_UARTEx_RxEventCallback+0x1ac>)
 8014d64:	484d      	ldr	r0, [pc, #308]	; (8014e9c <HAL_UARTEx_RxEventCallback+0x1b0>)
 8014d66:	f007 fce9 	bl	801c73c <HAL_UARTEx_ReceiveToIdle_IT>
		for(uint16_t i=0;i<Size;++i)
 8014d6a:	2300      	movs	r3, #0
 8014d6c:	81bb      	strh	r3, [r7, #12]
 8014d6e:	e01c      	b.n	8014daa <HAL_UARTEx_RxEventCallback+0xbe>
			UART_BUFFS[ONE_PORT].CIR_BUFF[UART_BUFFS[ONE_PORT].Write_End++] = PORT1_PORT_RX_BUF[i];
 8014d70:	89ba      	ldrh	r2, [r7, #12]
 8014d72:	4b4b      	ldr	r3, [pc, #300]	; (8014ea0 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8014d74:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8014d78:	1c59      	adds	r1, r3, #1
 8014d7a:	b288      	uxth	r0, r1
 8014d7c:	4948      	ldr	r1, [pc, #288]	; (8014ea0 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8014d7e:	f8a1 0404 	strh.w	r0, [r1, #1028]	; 0x404
 8014d82:	4619      	mov	r1, r3
 8014d84:	4b44      	ldr	r3, [pc, #272]	; (8014e98 <HAL_UARTEx_RxEventCallback+0x1ac>)
 8014d86:	5c9a      	ldrb	r2, [r3, r2]
 8014d88:	4b45      	ldr	r3, [pc, #276]	; (8014ea0 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8014d8a:	440b      	add	r3, r1
 8014d8c:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
			if(UART_BUFFS[ONE_PORT].Write_End >= UART_BUFF_SIZE)
 8014d90:	4b43      	ldr	r3, [pc, #268]	; (8014ea0 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8014d92:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8014d96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014d9a:	d303      	bcc.n	8014da4 <HAL_UARTEx_RxEventCallback+0xb8>
				UART_BUFFS[ONE_PORT].Write_End = 0;
 8014d9c:	4b40      	ldr	r3, [pc, #256]	; (8014ea0 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8014d9e:	2200      	movs	r2, #0
 8014da0:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
		for(uint16_t i=0;i<Size;++i)
 8014da4:	89bb      	ldrh	r3, [r7, #12]
 8014da6:	3301      	adds	r3, #1
 8014da8:	81bb      	strh	r3, [r7, #12]
 8014daa:	89ba      	ldrh	r2, [r7, #12]
 8014dac:	887b      	ldrh	r3, [r7, #2]
 8014dae:	429a      	cmp	r2, r3
 8014db0:	d3de      	bcc.n	8014d70 <HAL_UARTEx_RxEventCallback+0x84>
}
 8014db2:	e061      	b.n	8014e78 <HAL_UARTEx_RxEventCallback+0x18c>
	else if(huart->Instance == UART7)
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	681b      	ldr	r3, [r3, #0]
 8014db8:	4a3a      	ldr	r2, [pc, #232]	; (8014ea4 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8014dba:	4293      	cmp	r3, r2
 8014dbc:	d129      	bne.n	8014e12 <HAL_UARTEx_RxEventCallback+0x126>
		HAL_UARTEx_ReceiveToIdle_IT(&huart7, PORT2_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8014dbe:	2280      	movs	r2, #128	; 0x80
 8014dc0:	4939      	ldr	r1, [pc, #228]	; (8014ea8 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8014dc2:	483a      	ldr	r0, [pc, #232]	; (8014eac <HAL_UARTEx_RxEventCallback+0x1c0>)
 8014dc4:	f007 fcba 	bl	801c73c <HAL_UARTEx_ReceiveToIdle_IT>
		for(uint16_t i=0;i<Size;++i)
 8014dc8:	2300      	movs	r3, #0
 8014dca:	817b      	strh	r3, [r7, #10]
 8014dcc:	e01c      	b.n	8014e08 <HAL_UARTEx_RxEventCallback+0x11c>
			UART_BUFFS[TWO_PORT].CIR_BUFF[UART_BUFFS[TWO_PORT].Write_End++] = PORT2_PORT_RX_BUF[i];
 8014dce:	897a      	ldrh	r2, [r7, #10]
 8014dd0:	4b33      	ldr	r3, [pc, #204]	; (8014ea0 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8014dd2:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	; 0x808
 8014dd6:	1c59      	adds	r1, r3, #1
 8014dd8:	b288      	uxth	r0, r1
 8014dda:	4931      	ldr	r1, [pc, #196]	; (8014ea0 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8014ddc:	f8a1 0808 	strh.w	r0, [r1, #2056]	; 0x808
 8014de0:	4619      	mov	r1, r3
 8014de2:	4b31      	ldr	r3, [pc, #196]	; (8014ea8 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8014de4:	5c9a      	ldrb	r2, [r3, r2]
 8014de6:	4b2e      	ldr	r3, [pc, #184]	; (8014ea0 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8014de8:	440b      	add	r3, r1
 8014dea:	f883 280c 	strb.w	r2, [r3, #2060]	; 0x80c
			if(UART_BUFFS[TWO_PORT].Write_End >= UART_BUFF_SIZE)
 8014dee:	4b2c      	ldr	r3, [pc, #176]	; (8014ea0 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8014df0:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	; 0x808
 8014df4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014df8:	d303      	bcc.n	8014e02 <HAL_UARTEx_RxEventCallback+0x116>
				UART_BUFFS[TWO_PORT].Write_End = 0;
 8014dfa:	4b29      	ldr	r3, [pc, #164]	; (8014ea0 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8014dfc:	2200      	movs	r2, #0
 8014dfe:	f8a3 2808 	strh.w	r2, [r3, #2056]	; 0x808
		for(uint16_t i=0;i<Size;++i)
 8014e02:	897b      	ldrh	r3, [r7, #10]
 8014e04:	3301      	adds	r3, #1
 8014e06:	817b      	strh	r3, [r7, #10]
 8014e08:	897a      	ldrh	r2, [r7, #10]
 8014e0a:	887b      	ldrh	r3, [r7, #2]
 8014e0c:	429a      	cmp	r2, r3
 8014e0e:	d3de      	bcc.n	8014dce <HAL_UARTEx_RxEventCallback+0xe2>
}
 8014e10:	e032      	b.n	8014e78 <HAL_UARTEx_RxEventCallback+0x18c>
	else if(huart->Instance == UART4)
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	681b      	ldr	r3, [r3, #0]
 8014e16:	4a26      	ldr	r2, [pc, #152]	; (8014eb0 <HAL_UARTEx_RxEventCallback+0x1c4>)
 8014e18:	4293      	cmp	r3, r2
 8014e1a:	d12d      	bne.n	8014e78 <HAL_UARTEx_RxEventCallback+0x18c>
		HAL_UARTEx_ReceiveToIdle_IT(&huart4, PORT3_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8014e1c:	2280      	movs	r2, #128	; 0x80
 8014e1e:	4925      	ldr	r1, [pc, #148]	; (8014eb4 <HAL_UARTEx_RxEventCallback+0x1c8>)
 8014e20:	4825      	ldr	r0, [pc, #148]	; (8014eb8 <HAL_UARTEx_RxEventCallback+0x1cc>)
 8014e22:	f007 fc8b 	bl	801c73c <HAL_UARTEx_ReceiveToIdle_IT>
		for(uint16_t i=0;i<Size;++i)
 8014e26:	2300      	movs	r3, #0
 8014e28:	813b      	strh	r3, [r7, #8]
 8014e2a:	e01c      	b.n	8014e66 <HAL_UARTEx_RxEventCallback+0x17a>
			UART_BUFFS[THREE_PORT].CIR_BUFF[UART_BUFFS[THREE_PORT].Write_End++] = PORT3_PORT_RX_BUF[i];
 8014e2c:	893a      	ldrh	r2, [r7, #8]
 8014e2e:	4b1c      	ldr	r3, [pc, #112]	; (8014ea0 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8014e30:	f8b3 3c0c 	ldrh.w	r3, [r3, #3084]	; 0xc0c
 8014e34:	1c59      	adds	r1, r3, #1
 8014e36:	b288      	uxth	r0, r1
 8014e38:	4919      	ldr	r1, [pc, #100]	; (8014ea0 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8014e3a:	f8a1 0c0c 	strh.w	r0, [r1, #3084]	; 0xc0c
 8014e3e:	4619      	mov	r1, r3
 8014e40:	4b1c      	ldr	r3, [pc, #112]	; (8014eb4 <HAL_UARTEx_RxEventCallback+0x1c8>)
 8014e42:	5c9a      	ldrb	r2, [r3, r2]
 8014e44:	4b16      	ldr	r3, [pc, #88]	; (8014ea0 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8014e46:	440b      	add	r3, r1
 8014e48:	f883 2c10 	strb.w	r2, [r3, #3088]	; 0xc10
			if(UART_BUFFS[THREE_PORT].Write_End >= UART_BUFF_SIZE)
 8014e4c:	4b14      	ldr	r3, [pc, #80]	; (8014ea0 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8014e4e:	f8b3 3c0c 	ldrh.w	r3, [r3, #3084]	; 0xc0c
 8014e52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014e56:	d303      	bcc.n	8014e60 <HAL_UARTEx_RxEventCallback+0x174>
				UART_BUFFS[THREE_PORT].Write_End = 0;
 8014e58:	4b11      	ldr	r3, [pc, #68]	; (8014ea0 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8014e5a:	2200      	movs	r2, #0
 8014e5c:	f8a3 2c0c 	strh.w	r2, [r3, #3084]	; 0xc0c
		for(uint16_t i=0;i<Size;++i)
 8014e60:	893b      	ldrh	r3, [r7, #8]
 8014e62:	3301      	adds	r3, #1
 8014e64:	813b      	strh	r3, [r7, #8]
 8014e66:	893a      	ldrh	r2, [r7, #8]
 8014e68:	887b      	ldrh	r3, [r7, #2]
 8014e6a:	429a      	cmp	r2, r3
 8014e6c:	d3de      	bcc.n	8014e2c <HAL_UARTEx_RxEventCallback+0x140>
		UART4_Intr_Clk = HAL_GetTick();
 8014e6e:	f000 fb8f 	bl	8015590 <HAL_GetTick>
 8014e72:	4603      	mov	r3, r0
 8014e74:	4a11      	ldr	r2, [pc, #68]	; (8014ebc <HAL_UARTEx_RxEventCallback+0x1d0>)
 8014e76:	6013      	str	r3, [r2, #0]
}
 8014e78:	bf00      	nop
 8014e7a:	3710      	adds	r7, #16
 8014e7c:	46bd      	mov	sp, r7
 8014e7e:	bd80      	pop	{r7, pc}
 8014e80:	40011000 	.word	0x40011000
 8014e84:	2000b824 	.word	0x2000b824
 8014e88:	2000bc4c 	.word	0x2000bc4c
 8014e8c:	2000b020 	.word	0x2000b020
 8014e90:	2000a00c 	.word	0x2000a00c
 8014e94:	40005000 	.word	0x40005000
 8014e98:	2000b8a4 	.word	0x2000b8a4
 8014e9c:	2000badc 	.word	0x2000badc
 8014ea0:	2000a010 	.word	0x2000a010
 8014ea4:	40007800 	.word	0x40007800
 8014ea8:	2000b924 	.word	0x2000b924
 8014eac:	2000bb94 	.word	0x2000bb94
 8014eb0:	40004c00 	.word	0x40004c00
 8014eb4:	2000b9a4 	.word	0x2000b9a4
 8014eb8:	2000ba24 	.word	0x2000ba24
 8014ebc:	2000a008 	.word	0x2000a008

08014ec0 <Com_DataReady>:



uint8_t Com_DataReady(uint8_t com_num)
{
 8014ec0:	b480      	push	{r7}
 8014ec2:	b085      	sub	sp, #20
 8014ec4:	af00      	add	r7, sp, #0
 8014ec6:	4603      	mov	r3, r0
 8014ec8:	71fb      	strb	r3, [r7, #7]
	uint8_t IS_DATA_AVAILABLE = NO;
 8014eca:	2300      	movs	r3, #0
 8014ecc:	73fb      	strb	r3, [r7, #15]
	if(com_num == ISP_PORT)
 8014ece:	79fb      	ldrb	r3, [r7, #7]
 8014ed0:	2b00      	cmp	r3, #0
 8014ed2:	d115      	bne.n	8014f00 <Com_DataReady+0x40>
	{
		if(ISP_UART_BUFF[com_num].Write_End != ISP_UART_BUFF[com_num].Read_End)
 8014ed4:	79fa      	ldrb	r2, [r7, #7]
 8014ed6:	4918      	ldr	r1, [pc, #96]	; (8014f38 <Com_DataReady+0x78>)
 8014ed8:	4613      	mov	r3, r2
 8014eda:	025b      	lsls	r3, r3, #9
 8014edc:	4413      	add	r3, r2
 8014ede:	009b      	lsls	r3, r3, #2
 8014ee0:	440b      	add	r3, r1
 8014ee2:	8819      	ldrh	r1, [r3, #0]
 8014ee4:	79fa      	ldrb	r2, [r7, #7]
 8014ee6:	4814      	ldr	r0, [pc, #80]	; (8014f38 <Com_DataReady+0x78>)
 8014ee8:	4613      	mov	r3, r2
 8014eea:	025b      	lsls	r3, r3, #9
 8014eec:	4413      	add	r3, r2
 8014eee:	009b      	lsls	r3, r3, #2
 8014ef0:	4403      	add	r3, r0
 8014ef2:	3302      	adds	r3, #2
 8014ef4:	881b      	ldrh	r3, [r3, #0]
 8014ef6:	4299      	cmp	r1, r3
 8014ef8:	d017      	beq.n	8014f2a <Com_DataReady+0x6a>
		{
			IS_DATA_AVAILABLE = YES;
 8014efa:	2301      	movs	r3, #1
 8014efc:	73fb      	strb	r3, [r7, #15]
 8014efe:	e014      	b.n	8014f2a <Com_DataReady+0x6a>
		}
	}
	else
	{
		if (UART_BUFFS[com_num].Write_End != UART_BUFFS[com_num].Read_End)
 8014f00:	79fa      	ldrb	r2, [r7, #7]
 8014f02:	490e      	ldr	r1, [pc, #56]	; (8014f3c <Com_DataReady+0x7c>)
 8014f04:	4613      	mov	r3, r2
 8014f06:	021b      	lsls	r3, r3, #8
 8014f08:	4413      	add	r3, r2
 8014f0a:	009b      	lsls	r3, r3, #2
 8014f0c:	440b      	add	r3, r1
 8014f0e:	8819      	ldrh	r1, [r3, #0]
 8014f10:	79fa      	ldrb	r2, [r7, #7]
 8014f12:	480a      	ldr	r0, [pc, #40]	; (8014f3c <Com_DataReady+0x7c>)
 8014f14:	4613      	mov	r3, r2
 8014f16:	021b      	lsls	r3, r3, #8
 8014f18:	4413      	add	r3, r2
 8014f1a:	009b      	lsls	r3, r3, #2
 8014f1c:	4403      	add	r3, r0
 8014f1e:	3302      	adds	r3, #2
 8014f20:	881b      	ldrh	r3, [r3, #0]
 8014f22:	4299      	cmp	r1, r3
 8014f24:	d001      	beq.n	8014f2a <Com_DataReady+0x6a>
		{
			IS_DATA_AVAILABLE = YES;
 8014f26:	2301      	movs	r3, #1
 8014f28:	73fb      	strb	r3, [r7, #15]
		}
	}
	return IS_DATA_AVAILABLE;
 8014f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8014f2c:	4618      	mov	r0, r3
 8014f2e:	3714      	adds	r7, #20
 8014f30:	46bd      	mov	sp, r7
 8014f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f36:	4770      	bx	lr
 8014f38:	2000b020 	.word	0x2000b020
 8014f3c:	2000a010 	.word	0x2000a010

08014f40 <Com_Get_Byte>:


uint8_t Com_Get_Byte(uint8_t com_num)
{
 8014f40:	b4b0      	push	{r4, r5, r7}
 8014f42:	b085      	sub	sp, #20
 8014f44:	af00      	add	r7, sp, #0
 8014f46:	4603      	mov	r3, r0
 8014f48:	71fb      	strb	r3, [r7, #7]
	uint8_t Return_data = 0;
 8014f4a:	2300      	movs	r3, #0
 8014f4c:	73fb      	strb	r3, [r7, #15]


	if(com_num == 0)
 8014f4e:	79fb      	ldrb	r3, [r7, #7]
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	d135      	bne.n	8014fc0 <Com_Get_Byte+0x80>
	{
		Return_data = ISP_UART_BUFF[com_num].CIR_BUFF[ISP_UART_BUFF[com_num].Read_End++];
 8014f54:	79f9      	ldrb	r1, [r7, #7]
 8014f56:	79fa      	ldrb	r2, [r7, #7]
 8014f58:	4837      	ldr	r0, [pc, #220]	; (8015038 <Com_Get_Byte+0xf8>)
 8014f5a:	4613      	mov	r3, r2
 8014f5c:	025b      	lsls	r3, r3, #9
 8014f5e:	4413      	add	r3, r2
 8014f60:	009b      	lsls	r3, r3, #2
 8014f62:	4403      	add	r3, r0
 8014f64:	3302      	adds	r3, #2
 8014f66:	8818      	ldrh	r0, [r3, #0]
 8014f68:	1c43      	adds	r3, r0, #1
 8014f6a:	b29d      	uxth	r5, r3
 8014f6c:	4c32      	ldr	r4, [pc, #200]	; (8015038 <Com_Get_Byte+0xf8>)
 8014f6e:	4613      	mov	r3, r2
 8014f70:	025b      	lsls	r3, r3, #9
 8014f72:	4413      	add	r3, r2
 8014f74:	009b      	lsls	r3, r3, #2
 8014f76:	4423      	add	r3, r4
 8014f78:	3302      	adds	r3, #2
 8014f7a:	462a      	mov	r2, r5
 8014f7c:	801a      	strh	r2, [r3, #0]
 8014f7e:	4a2e      	ldr	r2, [pc, #184]	; (8015038 <Com_Get_Byte+0xf8>)
 8014f80:	460b      	mov	r3, r1
 8014f82:	025b      	lsls	r3, r3, #9
 8014f84:	440b      	add	r3, r1
 8014f86:	009b      	lsls	r3, r3, #2
 8014f88:	4413      	add	r3, r2
 8014f8a:	4403      	add	r3, r0
 8014f8c:	3304      	adds	r3, #4
 8014f8e:	781b      	ldrb	r3, [r3, #0]
 8014f90:	73fb      	strb	r3, [r7, #15]
		if ( ISP_UART_BUFF[com_num].Read_End >= ISP_UART_BUFF_SIZE)
 8014f92:	79fa      	ldrb	r2, [r7, #7]
 8014f94:	4928      	ldr	r1, [pc, #160]	; (8015038 <Com_Get_Byte+0xf8>)
 8014f96:	4613      	mov	r3, r2
 8014f98:	025b      	lsls	r3, r3, #9
 8014f9a:	4413      	add	r3, r2
 8014f9c:	009b      	lsls	r3, r3, #2
 8014f9e:	440b      	add	r3, r1
 8014fa0:	3302      	adds	r3, #2
 8014fa2:	881b      	ldrh	r3, [r3, #0]
 8014fa4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014fa8:	d33f      	bcc.n	801502a <Com_Get_Byte+0xea>
		{
			ISP_UART_BUFF[com_num].Read_End = 0;
 8014faa:	79fa      	ldrb	r2, [r7, #7]
 8014fac:	4922      	ldr	r1, [pc, #136]	; (8015038 <Com_Get_Byte+0xf8>)
 8014fae:	4613      	mov	r3, r2
 8014fb0:	025b      	lsls	r3, r3, #9
 8014fb2:	4413      	add	r3, r2
 8014fb4:	009b      	lsls	r3, r3, #2
 8014fb6:	440b      	add	r3, r1
 8014fb8:	3302      	adds	r3, #2
 8014fba:	2200      	movs	r2, #0
 8014fbc:	801a      	strh	r2, [r3, #0]
 8014fbe:	e034      	b.n	801502a <Com_Get_Byte+0xea>
		}
	}
	else
	{
		Return_data = UART_BUFFS[com_num].CIR_BUFF[UART_BUFFS[com_num].Read_End++];
 8014fc0:	79f9      	ldrb	r1, [r7, #7]
 8014fc2:	79fa      	ldrb	r2, [r7, #7]
 8014fc4:	481d      	ldr	r0, [pc, #116]	; (801503c <Com_Get_Byte+0xfc>)
 8014fc6:	4613      	mov	r3, r2
 8014fc8:	021b      	lsls	r3, r3, #8
 8014fca:	4413      	add	r3, r2
 8014fcc:	009b      	lsls	r3, r3, #2
 8014fce:	4403      	add	r3, r0
 8014fd0:	3302      	adds	r3, #2
 8014fd2:	8818      	ldrh	r0, [r3, #0]
 8014fd4:	1c43      	adds	r3, r0, #1
 8014fd6:	b29d      	uxth	r5, r3
 8014fd8:	4c18      	ldr	r4, [pc, #96]	; (801503c <Com_Get_Byte+0xfc>)
 8014fda:	4613      	mov	r3, r2
 8014fdc:	021b      	lsls	r3, r3, #8
 8014fde:	4413      	add	r3, r2
 8014fe0:	009b      	lsls	r3, r3, #2
 8014fe2:	4423      	add	r3, r4
 8014fe4:	3302      	adds	r3, #2
 8014fe6:	462a      	mov	r2, r5
 8014fe8:	801a      	strh	r2, [r3, #0]
 8014fea:	4a14      	ldr	r2, [pc, #80]	; (801503c <Com_Get_Byte+0xfc>)
 8014fec:	460b      	mov	r3, r1
 8014fee:	021b      	lsls	r3, r3, #8
 8014ff0:	440b      	add	r3, r1
 8014ff2:	009b      	lsls	r3, r3, #2
 8014ff4:	4413      	add	r3, r2
 8014ff6:	4403      	add	r3, r0
 8014ff8:	3304      	adds	r3, #4
 8014ffa:	781b      	ldrb	r3, [r3, #0]
 8014ffc:	73fb      	strb	r3, [r7, #15]
		if ( UART_BUFFS[com_num].Read_End >= UART_BUFF_SIZE)
 8014ffe:	79fa      	ldrb	r2, [r7, #7]
 8015000:	490e      	ldr	r1, [pc, #56]	; (801503c <Com_Get_Byte+0xfc>)
 8015002:	4613      	mov	r3, r2
 8015004:	021b      	lsls	r3, r3, #8
 8015006:	4413      	add	r3, r2
 8015008:	009b      	lsls	r3, r3, #2
 801500a:	440b      	add	r3, r1
 801500c:	3302      	adds	r3, #2
 801500e:	881b      	ldrh	r3, [r3, #0]
 8015010:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015014:	d309      	bcc.n	801502a <Com_Get_Byte+0xea>
		{
			UART_BUFFS[com_num].Read_End = 0;
 8015016:	79fa      	ldrb	r2, [r7, #7]
 8015018:	4908      	ldr	r1, [pc, #32]	; (801503c <Com_Get_Byte+0xfc>)
 801501a:	4613      	mov	r3, r2
 801501c:	021b      	lsls	r3, r3, #8
 801501e:	4413      	add	r3, r2
 8015020:	009b      	lsls	r3, r3, #2
 8015022:	440b      	add	r3, r1
 8015024:	3302      	adds	r3, #2
 8015026:	2200      	movs	r2, #0
 8015028:	801a      	strh	r2, [r3, #0]
		}
	}
	return Return_data;
 801502a:	7bfb      	ldrb	r3, [r7, #15]
}
 801502c:	4618      	mov	r0, r3
 801502e:	3714      	adds	r7, #20
 8015030:	46bd      	mov	sp, r7
 8015032:	bcb0      	pop	{r4, r5, r7}
 8015034:	4770      	bx	lr
 8015036:	bf00      	nop
 8015038:	2000b020 	.word	0x2000b020
 801503c:	2000a010 	.word	0x2000a010

08015040 <CommTransmitMessage>:


void CommTransmitMessage(uint8_t com_num,uint8_t *sc_pp_Message,unsigned short int us_MaxTansmitBytes)
{
 8015040:	b580      	push	{r7, lr}
 8015042:	b084      	sub	sp, #16
 8015044:	af00      	add	r7, sp, #0
 8015046:	4603      	mov	r3, r0
 8015048:	6039      	str	r1, [r7, #0]
 801504a:	71fb      	strb	r3, [r7, #7]
 801504c:	4613      	mov	r3, r2
 801504e:	80bb      	strh	r3, [r7, #4]
	unsigned short int us_LoopVar = ZERO;
 8015050:	2300      	movs	r3, #0
 8015052:	81fb      	strh	r3, [r7, #14]


	/* Transmit the packet based on the randomization number
	 */
	for(us_LoopVar = ZERO; us_LoopVar <= us_MaxTansmitBytes; us_LoopVar++)
 8015054:	2300      	movs	r3, #0
 8015056:	81fb      	strh	r3, [r7, #14]
 8015058:	e03a      	b.n	80150d0 <CommTransmitMessage+0x90>
	{
		if (  (ZERO != us_LoopVar)&&(START_OF_MESSAGE == sc_pp_Message[us_LoopVar]))
 801505a:	89fb      	ldrh	r3, [r7, #14]
 801505c:	2b00      	cmp	r3, #0
 801505e:	d00a      	beq.n	8015076 <CommTransmitMessage+0x36>
 8015060:	89fb      	ldrh	r3, [r7, #14]
 8015062:	683a      	ldr	r2, [r7, #0]
 8015064:	4413      	add	r3, r2
 8015066:	781b      	ldrb	r3, [r3, #0]
 8015068:	2b24      	cmp	r3, #36	; 0x24
 801506a:	d104      	bne.n	8015076 <CommTransmitMessage+0x36>
		{
			Com_SendByte(com_num,DLE);
 801506c:	79fb      	ldrb	r3, [r7, #7]
 801506e:	2105      	movs	r1, #5
 8015070:	4618      	mov	r0, r3
 8015072:	f000 f835 	bl	80150e0 <Com_SendByte>
		}
		if (  (us_LoopVar >= ONE)&& (us_LoopVar < us_MaxTansmitBytes)&& (DLE == sc_pp_Message[us_LoopVar] ))
 8015076:	89fb      	ldrh	r3, [r7, #14]
 8015078:	2b00      	cmp	r3, #0
 801507a:	d00e      	beq.n	801509a <CommTransmitMessage+0x5a>
 801507c:	89fa      	ldrh	r2, [r7, #14]
 801507e:	88bb      	ldrh	r3, [r7, #4]
 8015080:	429a      	cmp	r2, r3
 8015082:	d20a      	bcs.n	801509a <CommTransmitMessage+0x5a>
 8015084:	89fb      	ldrh	r3, [r7, #14]
 8015086:	683a      	ldr	r2, [r7, #0]
 8015088:	4413      	add	r3, r2
 801508a:	781b      	ldrb	r3, [r3, #0]
 801508c:	2b05      	cmp	r3, #5
 801508e:	d104      	bne.n	801509a <CommTransmitMessage+0x5a>
		{
			Com_SendByte(com_num,DLE);
 8015090:	79fb      	ldrb	r3, [r7, #7]
 8015092:	2105      	movs	r1, #5
 8015094:	4618      	mov	r0, r3
 8015096:	f000 f823 	bl	80150e0 <Com_SendByte>
		}
		if (  (END_OF_MESSAGE == sc_pp_Message[us_LoopVar])&& (us_LoopVar != us_MaxTansmitBytes))
 801509a:	89fb      	ldrh	r3, [r7, #14]
 801509c:	683a      	ldr	r2, [r7, #0]
 801509e:	4413      	add	r3, r2
 80150a0:	781b      	ldrb	r3, [r3, #0]
 80150a2:	2b26      	cmp	r3, #38	; 0x26
 80150a4:	d108      	bne.n	80150b8 <CommTransmitMessage+0x78>
 80150a6:	89fa      	ldrh	r2, [r7, #14]
 80150a8:	88bb      	ldrh	r3, [r7, #4]
 80150aa:	429a      	cmp	r2, r3
 80150ac:	d004      	beq.n	80150b8 <CommTransmitMessage+0x78>
		{
			//printf("\n Sent END_OF_MESSAGE");
			Com_SendByte(com_num,DLE);
 80150ae:	79fb      	ldrb	r3, [r7, #7]
 80150b0:	2105      	movs	r1, #5
 80150b2:	4618      	mov	r0, r3
 80150b4:	f000 f814 	bl	80150e0 <Com_SendByte>
		}
		Com_SendByte(com_num, sc_pp_Message[us_LoopVar]);
 80150b8:	89fb      	ldrh	r3, [r7, #14]
 80150ba:	683a      	ldr	r2, [r7, #0]
 80150bc:	4413      	add	r3, r2
 80150be:	781a      	ldrb	r2, [r3, #0]
 80150c0:	79fb      	ldrb	r3, [r7, #7]
 80150c2:	4611      	mov	r1, r2
 80150c4:	4618      	mov	r0, r3
 80150c6:	f000 f80b 	bl	80150e0 <Com_SendByte>
	for(us_LoopVar = ZERO; us_LoopVar <= us_MaxTansmitBytes; us_LoopVar++)
 80150ca:	89fb      	ldrh	r3, [r7, #14]
 80150cc:	3301      	adds	r3, #1
 80150ce:	81fb      	strh	r3, [r7, #14]
 80150d0:	89fa      	ldrh	r2, [r7, #14]
 80150d2:	88bb      	ldrh	r3, [r7, #4]
 80150d4:	429a      	cmp	r2, r3
 80150d6:	d9c0      	bls.n	801505a <CommTransmitMessage+0x1a>
	}

	return;
 80150d8:	bf00      	nop
}
 80150da:	3710      	adds	r7, #16
 80150dc:	46bd      	mov	sp, r7
 80150de:	bd80      	pop	{r7, pc}

080150e0 <Com_SendByte>:

void Com_SendByte(uint8_t com_num, uint8_t uc_Data)
{
 80150e0:	b580      	push	{r7, lr}
 80150e2:	b084      	sub	sp, #16
 80150e4:	af00      	add	r7, sp, #0
 80150e6:	4603      	mov	r3, r0
 80150e8:	460a      	mov	r2, r1
 80150ea:	71fb      	strb	r3, [r7, #7]
 80150ec:	4613      	mov	r3, r2
 80150ee:	71bb      	strb	r3, [r7, #6]
	uint8_t *ptr = &uc_Data;
 80150f0:	1dbb      	adds	r3, r7, #6
 80150f2:	60fb      	str	r3, [r7, #12]
	if(com_num == ISP_PORT)
 80150f4:	79fb      	ldrb	r3, [r7, #7]
 80150f6:	2b00      	cmp	r3, #0
 80150f8:	d107      	bne.n	801510a <Com_SendByte+0x2a>
	{
		HAL_UART_Transmit(&ISP_COM,(const uint8_t *) ptr, 1, 0xffff);
 80150fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80150fe:	2201      	movs	r2, #1
 8015100:	68f9      	ldr	r1, [r7, #12]
 8015102:	4816      	ldr	r0, [pc, #88]	; (801515c <Com_SendByte+0x7c>)
 8015104:	f006 f80c 	bl	801b120 <HAL_UART_Transmit>
 8015108:	e01f      	b.n	801514a <Com_SendByte+0x6a>
	}
	else if(com_num == ONE_PORT)
 801510a:	79fb      	ldrb	r3, [r7, #7]
 801510c:	2b01      	cmp	r3, #1
 801510e:	d107      	bne.n	8015120 <Com_SendByte+0x40>
	{
		HAL_UART_Transmit(&PORT1_COM,(const uint8_t *) ptr, 1, 0xffff);
 8015110:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015114:	2201      	movs	r2, #1
 8015116:	68f9      	ldr	r1, [r7, #12]
 8015118:	4811      	ldr	r0, [pc, #68]	; (8015160 <Com_SendByte+0x80>)
 801511a:	f006 f801 	bl	801b120 <HAL_UART_Transmit>
 801511e:	e014      	b.n	801514a <Com_SendByte+0x6a>
	}
	else if(com_num == TWO_PORT)
 8015120:	79fb      	ldrb	r3, [r7, #7]
 8015122:	2b02      	cmp	r3, #2
 8015124:	d107      	bne.n	8015136 <Com_SendByte+0x56>
	{
		HAL_UART_Transmit(&PORT2_COM,(const uint8_t *) ptr, 1, 0xffff);
 8015126:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801512a:	2201      	movs	r2, #1
 801512c:	68f9      	ldr	r1, [r7, #12]
 801512e:	480d      	ldr	r0, [pc, #52]	; (8015164 <Com_SendByte+0x84>)
 8015130:	f005 fff6 	bl	801b120 <HAL_UART_Transmit>
 8015134:	e009      	b.n	801514a <Com_SendByte+0x6a>
	}
	else if(com_num == THREE_PORT)
 8015136:	79fb      	ldrb	r3, [r7, #7]
 8015138:	2b03      	cmp	r3, #3
 801513a:	d106      	bne.n	801514a <Com_SendByte+0x6a>
	{
		HAL_UART_Transmit(&PORT3_COM,(const uint8_t *) ptr, 1, 0xffff);
 801513c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015140:	2201      	movs	r2, #1
 8015142:	68f9      	ldr	r1, [r7, #12]
 8015144:	4808      	ldr	r0, [pc, #32]	; (8015168 <Com_SendByte+0x88>)
 8015146:	f005 ffeb 	bl	801b120 <HAL_UART_Transmit>
	}

	ptr=NULL;
 801514a:	2300      	movs	r3, #0
 801514c:	60fb      	str	r3, [r7, #12]
	free(ptr);
 801514e:	68f8      	ldr	r0, [r7, #12]
 8015150:	f00d f900 	bl	8022354 <free>
}
 8015154:	bf00      	nop
 8015156:	3710      	adds	r7, #16
 8015158:	46bd      	mov	sp, r7
 801515a:	bd80      	pop	{r7, pc}
 801515c:	2000bc4c 	.word	0x2000bc4c
 8015160:	2000badc 	.word	0x2000badc
 8015164:	2000bb94 	.word	0x2000bb94
 8015168:	2000ba24 	.word	0x2000ba24

0801516c <Enable_UART_Interrupts>:

void Enable_UART_Interrupts(void)
{
 801516c:	b580      	push	{r7, lr}
 801516e:	af00      	add	r7, sp, #0
	 * following calls are made in Interrupt (HAL_UARTEx_RxEventCallback) and it is Only happening when inserted in LOCO,RIU bin's
	 * so that's why calling HAL_UARTEx_ReceiveToIdle_IT functions explicitly.
	 *
	 */

	HAL_UARTEx_ReceiveToIdle_IT(&huart1, ISP_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8015170:	2280      	movs	r2, #128	; 0x80
 8015172:	490a      	ldr	r1, [pc, #40]	; (801519c <Enable_UART_Interrupts+0x30>)
 8015174:	480a      	ldr	r0, [pc, #40]	; (80151a0 <Enable_UART_Interrupts+0x34>)
 8015176:	f007 fae1 	bl	801c73c <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_UARTEx_ReceiveToIdle_IT(&huart5, PORT1_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 801517a:	2280      	movs	r2, #128	; 0x80
 801517c:	4909      	ldr	r1, [pc, #36]	; (80151a4 <Enable_UART_Interrupts+0x38>)
 801517e:	480a      	ldr	r0, [pc, #40]	; (80151a8 <Enable_UART_Interrupts+0x3c>)
 8015180:	f007 fadc 	bl	801c73c <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_UARTEx_ReceiveToIdle_IT(&huart7, PORT2_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8015184:	2280      	movs	r2, #128	; 0x80
 8015186:	4909      	ldr	r1, [pc, #36]	; (80151ac <Enable_UART_Interrupts+0x40>)
 8015188:	4809      	ldr	r0, [pc, #36]	; (80151b0 <Enable_UART_Interrupts+0x44>)
 801518a:	f007 fad7 	bl	801c73c <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_UARTEx_ReceiveToIdle_IT(&huart4, PORT3_PORT_RX_BUF , UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 801518e:	2280      	movs	r2, #128	; 0x80
 8015190:	4908      	ldr	r1, [pc, #32]	; (80151b4 <Enable_UART_Interrupts+0x48>)
 8015192:	4809      	ldr	r0, [pc, #36]	; (80151b8 <Enable_UART_Interrupts+0x4c>)
 8015194:	f007 fad2 	bl	801c73c <HAL_UARTEx_ReceiveToIdle_IT>
}
 8015198:	bf00      	nop
 801519a:	bd80      	pop	{r7, pc}
 801519c:	2000b824 	.word	0x2000b824
 80151a0:	2000bc4c 	.word	0x2000bc4c
 80151a4:	2000b8a4 	.word	0x2000b8a4
 80151a8:	2000badc 	.word	0x2000badc
 80151ac:	2000b924 	.word	0x2000b924
 80151b0:	2000bb94 	.word	0x2000bb94
 80151b4:	2000b9a4 	.word	0x2000b9a4
 80151b8:	2000ba24 	.word	0x2000ba24

080151bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80151bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80151f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80151c0:	480d      	ldr	r0, [pc, #52]	; (80151f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80151c2:	490e      	ldr	r1, [pc, #56]	; (80151fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80151c4:	4a0e      	ldr	r2, [pc, #56]	; (8015200 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80151c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80151c8:	e002      	b.n	80151d0 <LoopCopyDataInit>

080151ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80151ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80151cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80151ce:	3304      	adds	r3, #4

080151d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80151d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80151d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80151d4:	d3f9      	bcc.n	80151ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80151d6:	4a0b      	ldr	r2, [pc, #44]	; (8015204 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80151d8:	4c0b      	ldr	r4, [pc, #44]	; (8015208 <LoopFillZerobss+0x26>)
  movs r3, #0
 80151da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80151dc:	e001      	b.n	80151e2 <LoopFillZerobss>

080151de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80151de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80151e0:	3204      	adds	r2, #4

080151e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80151e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80151e4:	d3fb      	bcc.n	80151de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80151e6:	f7ff fb87 	bl	80148f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80151ea:	f00d f887 	bl	80222fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80151ee:	f7fe fa71 	bl	80136d4 <main>
  bx  lr    
 80151f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80151f4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80151f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80151fc:	200001a4 	.word	0x200001a4
  ldr r2, =_sidata
 8015200:	080290fc 	.word	0x080290fc
  ldr r2, =_sbss
 8015204:	200002e4 	.word	0x200002e4
  ldr r4, =_ebss
 8015208:	200142ac 	.word	0x200142ac

0801520c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 801520c:	e7fe      	b.n	801520c <ADC_IRQHandler>

0801520e <DP83848_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ERROR if missing mandatory function
  */
int32_t  DP83848_RegisterBusIO(dp83848_Object_t *pObj, dp83848_IOCtx_t *ioctx)
{
 801520e:	b480      	push	{r7}
 8015210:	b083      	sub	sp, #12
 8015212:	af00      	add	r7, sp, #0
 8015214:	6078      	str	r0, [r7, #4]
 8015216:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	2b00      	cmp	r3, #0
 801521c:	d00b      	beq.n	8015236 <DP83848_RegisterBusIO+0x28>
 801521e:	683b      	ldr	r3, [r7, #0]
 8015220:	68db      	ldr	r3, [r3, #12]
 8015222:	2b00      	cmp	r3, #0
 8015224:	d007      	beq.n	8015236 <DP83848_RegisterBusIO+0x28>
 8015226:	683b      	ldr	r3, [r7, #0]
 8015228:	689b      	ldr	r3, [r3, #8]
 801522a:	2b00      	cmp	r3, #0
 801522c:	d003      	beq.n	8015236 <DP83848_RegisterBusIO+0x28>
 801522e:	683b      	ldr	r3, [r7, #0]
 8015230:	691b      	ldr	r3, [r3, #16]
 8015232:	2b00      	cmp	r3, #0
 8015234:	d102      	bne.n	801523c <DP83848_RegisterBusIO+0x2e>
  {
    return DP83848_STATUS_ERROR;
 8015236:	f04f 33ff 	mov.w	r3, #4294967295
 801523a:	e014      	b.n	8015266 <DP83848_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 801523c:	683b      	ldr	r3, [r7, #0]
 801523e:	681a      	ldr	r2, [r3, #0]
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8015244:	683b      	ldr	r3, [r7, #0]
 8015246:	685a      	ldr	r2, [r3, #4]
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 801524c:	683b      	ldr	r3, [r7, #0]
 801524e:	68da      	ldr	r2, [r3, #12]
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8015254:	683b      	ldr	r3, [r7, #0]
 8015256:	689a      	ldr	r2, [r3, #8]
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 801525c:	683b      	ldr	r3, [r7, #0]
 801525e:	691a      	ldr	r2, [r3, #16]
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	619a      	str	r2, [r3, #24]

  return DP83848_STATUS_OK;
 8015264:	2300      	movs	r3, #0
}
 8015266:	4618      	mov	r0, r3
 8015268:	370c      	adds	r7, #12
 801526a:	46bd      	mov	sp, r7
 801526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015270:	4770      	bx	lr

08015272 <DP83848_Init>:
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  *         DP83848_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t DP83848_Init(dp83848_Object_t *pObj)
 {
 8015272:	b580      	push	{r7, lr}
 8015274:	b086      	sub	sp, #24
 8015276:	af00      	add	r7, sp, #0
 8015278:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 801527a:	2300      	movs	r3, #0
 801527c:	60fb      	str	r3, [r7, #12]
 801527e:	2300      	movs	r3, #0
 8015280:	60bb      	str	r3, [r7, #8]
 8015282:	2300      	movs	r3, #0
 8015284:	617b      	str	r3, [r7, #20]
   int32_t status = DP83848_STATUS_OK;
 8015286:	2300      	movs	r3, #0
 8015288:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	685b      	ldr	r3, [r3, #4]
 801528e:	2b00      	cmp	r3, #0
 8015290:	d17c      	bne.n	801538c <DP83848_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	689b      	ldr	r3, [r3, #8]
 8015296:	2b00      	cmp	r3, #0
 8015298:	d002      	beq.n	80152a0 <DP83848_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	689b      	ldr	r3, [r3, #8]
 801529e:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = DP83848_MAX_DEV_ADDR + 1;
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	2220      	movs	r2, #32
 80152a4:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 80152a6:	2300      	movs	r3, #0
 80152a8:	617b      	str	r3, [r7, #20]
 80152aa:	e01c      	b.n	80152e6 <DP83848_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, DP83848_SMR, &regvalue) < 0)
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	695b      	ldr	r3, [r3, #20]
 80152b0:	f107 0208 	add.w	r2, r7, #8
 80152b4:	2119      	movs	r1, #25
 80152b6:	6978      	ldr	r0, [r7, #20]
 80152b8:	4798      	blx	r3
 80152ba:	4603      	mov	r3, r0
 80152bc:	2b00      	cmp	r3, #0
 80152be:	da03      	bge.n	80152c8 <DP83848_Init+0x56>
       {
         status = DP83848_STATUS_READ_ERROR;
 80152c0:	f06f 0304 	mvn.w	r3, #4
 80152c4:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 80152c6:	e00b      	b.n	80152e0 <DP83848_Init+0x6e>
       }

       if((regvalue & DP83848_SMR_PHY_ADDR) == addr)
 80152c8:	68bb      	ldr	r3, [r7, #8]
 80152ca:	f003 031f 	and.w	r3, r3, #31
 80152ce:	697a      	ldr	r2, [r7, #20]
 80152d0:	429a      	cmp	r2, r3
 80152d2:	d105      	bne.n	80152e0 <DP83848_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80152d4:	687b      	ldr	r3, [r7, #4]
 80152d6:	697a      	ldr	r2, [r7, #20]
 80152d8:	601a      	str	r2, [r3, #0]
         status = DP83848_STATUS_OK;
 80152da:	2300      	movs	r3, #0
 80152dc:	613b      	str	r3, [r7, #16]
         break;
 80152de:	e005      	b.n	80152ec <DP83848_Init+0x7a>
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 80152e0:	697b      	ldr	r3, [r7, #20]
 80152e2:	3301      	adds	r3, #1
 80152e4:	617b      	str	r3, [r7, #20]
 80152e6:	697b      	ldr	r3, [r7, #20]
 80152e8:	2b1f      	cmp	r3, #31
 80152ea:	d9df      	bls.n	80152ac <DP83848_Init+0x3a>
       }
     }

     if(pObj->DevAddr > DP83848_MAX_DEV_ADDR)
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	681b      	ldr	r3, [r3, #0]
 80152f0:	2b1f      	cmp	r3, #31
 80152f2:	d902      	bls.n	80152fa <DP83848_Init+0x88>
     {
       status = DP83848_STATUS_ADDRESS_ERROR;
 80152f4:	f06f 0302 	mvn.w	r3, #2
 80152f8:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == DP83848_STATUS_OK)
 80152fa:	693b      	ldr	r3, [r7, #16]
 80152fc:	2b00      	cmp	r3, #0
 80152fe:	d145      	bne.n	801538c <DP83848_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, DP83848_BCR, DP83848_BCR_SOFT_RESET) >= 0)
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	691b      	ldr	r3, [r3, #16]
 8015304:	687a      	ldr	r2, [r7, #4]
 8015306:	6810      	ldr	r0, [r2, #0]
 8015308:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801530c:	2100      	movs	r1, #0
 801530e:	4798      	blx	r3
 8015310:	4603      	mov	r3, r0
 8015312:	2b00      	cmp	r3, #0
 8015314:	db37      	blt.n	8015386 <DP83848_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) >= 0)
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	695b      	ldr	r3, [r3, #20]
 801531a:	687a      	ldr	r2, [r7, #4]
 801531c:	6810      	ldr	r0, [r2, #0]
 801531e:	f107 0208 	add.w	r2, r7, #8
 8015322:	2100      	movs	r1, #0
 8015324:	4798      	blx	r3
 8015326:	4603      	mov	r3, r0
 8015328:	2b00      	cmp	r3, #0
 801532a:	db28      	blt.n	801537e <DP83848_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	699b      	ldr	r3, [r3, #24]
 8015330:	4798      	blx	r3
 8015332:	4603      	mov	r3, r0
 8015334:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occured  */
           while(regvalue & DP83848_BCR_SOFT_RESET)
 8015336:	e01c      	b.n	8015372 <DP83848_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= DP83848_SW_RESET_TO)
 8015338:	687b      	ldr	r3, [r7, #4]
 801533a:	699b      	ldr	r3, [r3, #24]
 801533c:	4798      	blx	r3
 801533e:	4603      	mov	r3, r0
 8015340:	461a      	mov	r2, r3
 8015342:	68fb      	ldr	r3, [r7, #12]
 8015344:	1ad3      	subs	r3, r2, r3
 8015346:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 801534a:	d80e      	bhi.n	801536a <DP83848_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) < 0)
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	695b      	ldr	r3, [r3, #20]
 8015350:	687a      	ldr	r2, [r7, #4]
 8015352:	6810      	ldr	r0, [r2, #0]
 8015354:	f107 0208 	add.w	r2, r7, #8
 8015358:	2100      	movs	r1, #0
 801535a:	4798      	blx	r3
 801535c:	4603      	mov	r3, r0
 801535e:	2b00      	cmp	r3, #0
 8015360:	da07      	bge.n	8015372 <DP83848_Init+0x100>
               {
                 status = DP83848_STATUS_READ_ERROR;
 8015362:	f06f 0304 	mvn.w	r3, #4
 8015366:	613b      	str	r3, [r7, #16]
                 break;
 8015368:	e010      	b.n	801538c <DP83848_Init+0x11a>
               }
             }
             else
             {
               status = DP83848_STATUS_RESET_TIMEOUT;
 801536a:	f06f 0301 	mvn.w	r3, #1
 801536e:	613b      	str	r3, [r7, #16]
               break;
 8015370:	e00c      	b.n	801538c <DP83848_Init+0x11a>
           while(regvalue & DP83848_BCR_SOFT_RESET)
 8015372:	68bb      	ldr	r3, [r7, #8]
 8015374:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8015378:	2b00      	cmp	r3, #0
 801537a:	d1dd      	bne.n	8015338 <DP83848_Init+0xc6>
 801537c:	e006      	b.n	801538c <DP83848_Init+0x11a>
             }
           }
         }
         else
         {
           status = DP83848_STATUS_READ_ERROR;
 801537e:	f06f 0304 	mvn.w	r3, #4
 8015382:	613b      	str	r3, [r7, #16]
 8015384:	e002      	b.n	801538c <DP83848_Init+0x11a>
         }
       }
       else
       {
         status = DP83848_STATUS_WRITE_ERROR;
 8015386:	f06f 0303 	mvn.w	r3, #3
 801538a:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == DP83848_STATUS_OK)
 801538c:	693b      	ldr	r3, [r7, #16]
 801538e:	2b00      	cmp	r3, #0
 8015390:	d112      	bne.n	80153b8 <DP83848_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	699b      	ldr	r3, [r3, #24]
 8015396:	4798      	blx	r3
 8015398:	4603      	mov	r3, r0
 801539a:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= DP83848_INIT_TO)
 801539c:	bf00      	nop
 801539e:	687b      	ldr	r3, [r7, #4]
 80153a0:	699b      	ldr	r3, [r3, #24]
 80153a2:	4798      	blx	r3
 80153a4:	4603      	mov	r3, r0
 80153a6:	461a      	mov	r2, r3
 80153a8:	68fb      	ldr	r3, [r7, #12]
 80153aa:	1ad3      	subs	r3, r2, r3
 80153ac:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80153b0:	d9f5      	bls.n	801539e <DP83848_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	2201      	movs	r2, #1
 80153b6:	605a      	str	r2, [r3, #4]
   }

   return status;
 80153b8:	693b      	ldr	r3, [r7, #16]
 }
 80153ba:	4618      	mov	r0, r3
 80153bc:	3718      	adds	r7, #24
 80153be:	46bd      	mov	sp, r7
 80153c0:	bd80      	pop	{r7, pc}

080153c2 <DP83848_GetLinkState>:
  *         DP83848_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  */
int32_t DP83848_GetLinkState(dp83848_Object_t *pObj)
{
 80153c2:	b580      	push	{r7, lr}
 80153c4:	b084      	sub	sp, #16
 80153c6:	af00      	add	r7, sp, #0
 80153c8:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80153ca:	2300      	movs	r3, #0
 80153cc:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	695b      	ldr	r3, [r3, #20]
 80153d2:	687a      	ldr	r2, [r7, #4]
 80153d4:	6810      	ldr	r0, [r2, #0]
 80153d6:	f107 020c 	add.w	r2, r7, #12
 80153da:	2101      	movs	r1, #1
 80153dc:	4798      	blx	r3
 80153de:	4603      	mov	r3, r0
 80153e0:	2b00      	cmp	r3, #0
 80153e2:	da02      	bge.n	80153ea <DP83848_GetLinkState+0x28>
  {
    return DP83848_STATUS_READ_ERROR;
 80153e4:	f06f 0304 	mvn.w	r3, #4
 80153e8:	e06e      	b.n	80154c8 <DP83848_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	695b      	ldr	r3, [r3, #20]
 80153ee:	687a      	ldr	r2, [r7, #4]
 80153f0:	6810      	ldr	r0, [r2, #0]
 80153f2:	f107 020c 	add.w	r2, r7, #12
 80153f6:	2101      	movs	r1, #1
 80153f8:	4798      	blx	r3
 80153fa:	4603      	mov	r3, r0
 80153fc:	2b00      	cmp	r3, #0
 80153fe:	da02      	bge.n	8015406 <DP83848_GetLinkState+0x44>
  {
    return DP83848_STATUS_READ_ERROR;
 8015400:	f06f 0304 	mvn.w	r3, #4
 8015404:	e060      	b.n	80154c8 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BSR_LINK_STATUS) == 0)
 8015406:	68fb      	ldr	r3, [r7, #12]
 8015408:	f003 0304 	and.w	r3, r3, #4
 801540c:	2b00      	cmp	r3, #0
 801540e:	d101      	bne.n	8015414 <DP83848_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return DP83848_STATUS_LINK_DOWN;
 8015410:	2301      	movs	r3, #1
 8015412:	e059      	b.n	80154c8 <DP83848_GetLinkState+0x106>
  }

  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &readval) < 0)
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	695b      	ldr	r3, [r3, #20]
 8015418:	687a      	ldr	r2, [r7, #4]
 801541a:	6810      	ldr	r0, [r2, #0]
 801541c:	f107 020c 	add.w	r2, r7, #12
 8015420:	2100      	movs	r1, #0
 8015422:	4798      	blx	r3
 8015424:	4603      	mov	r3, r0
 8015426:	2b00      	cmp	r3, #0
 8015428:	da02      	bge.n	8015430 <DP83848_GetLinkState+0x6e>
  {
    return DP83848_STATUS_READ_ERROR;
 801542a:	f06f 0304 	mvn.w	r3, #4
 801542e:	e04b      	b.n	80154c8 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BCR_AUTONEGO_EN) != DP83848_BCR_AUTONEGO_EN)
 8015430:	68fb      	ldr	r3, [r7, #12]
 8015432:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8015436:	2b00      	cmp	r3, #0
 8015438:	d11b      	bne.n	8015472 <DP83848_GetLinkState+0xb0>
  {
    if(((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT) && ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE))
 801543a:	68fb      	ldr	r3, [r7, #12]
 801543c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015440:	2b00      	cmp	r3, #0
 8015442:	d006      	beq.n	8015452 <DP83848_GetLinkState+0x90>
 8015444:	68fb      	ldr	r3, [r7, #12]
 8015446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801544a:	2b00      	cmp	r3, #0
 801544c:	d001      	beq.n	8015452 <DP83848_GetLinkState+0x90>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 801544e:	2302      	movs	r3, #2
 8015450:	e03a      	b.n	80154c8 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT)
 8015452:	68fb      	ldr	r3, [r7, #12]
 8015454:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015458:	2b00      	cmp	r3, #0
 801545a:	d001      	beq.n	8015460 <DP83848_GetLinkState+0x9e>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 801545c:	2303      	movs	r3, #3
 801545e:	e033      	b.n	80154c8 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE)
 8015460:	68fb      	ldr	r3, [r7, #12]
 8015462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015466:	2b00      	cmp	r3, #0
 8015468:	d001      	beq.n	801546e <DP83848_GetLinkState+0xac>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 801546a:	2304      	movs	r3, #4
 801546c:	e02c      	b.n	80154c8 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 801546e:	2305      	movs	r3, #5
 8015470:	e02a      	b.n	80154c8 <DP83848_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_PHYSCSR, &readval) < 0)
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	695b      	ldr	r3, [r3, #20]
 8015476:	687a      	ldr	r2, [r7, #4]
 8015478:	6810      	ldr	r0, [r2, #0]
 801547a:	f107 020c 	add.w	r2, r7, #12
 801547e:	2110      	movs	r1, #16
 8015480:	4798      	blx	r3
 8015482:	4603      	mov	r3, r0
 8015484:	2b00      	cmp	r3, #0
 8015486:	da02      	bge.n	801548e <DP83848_GetLinkState+0xcc>
    {
      return DP83848_STATUS_READ_ERROR;
 8015488:	f06f 0304 	mvn.w	r3, #4
 801548c:	e01c      	b.n	80154c8 <DP83848_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & DP83848_PHYSCSR_AUTONEGO_DONE) == 0)
 801548e:	68fb      	ldr	r3, [r7, #12]
 8015490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015494:	2b00      	cmp	r3, #0
 8015496:	d101      	bne.n	801549c <DP83848_GetLinkState+0xda>
    {
      return DP83848_STATUS_AUTONEGO_NOTDONE;
 8015498:	2306      	movs	r3, #6
 801549a:	e015      	b.n	80154c8 <DP83848_GetLinkState+0x106>
    }

    if((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_FD)
 801549c:	68fb      	ldr	r3, [r7, #12]
 801549e:	f003 0306 	and.w	r3, r3, #6
 80154a2:	2b04      	cmp	r3, #4
 80154a4:	d101      	bne.n	80154aa <DP83848_GetLinkState+0xe8>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 80154a6:	2302      	movs	r3, #2
 80154a8:	e00e      	b.n	80154c8 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_HD)
 80154aa:	68fb      	ldr	r3, [r7, #12]
 80154ac:	f003 0306 	and.w	r3, r3, #6
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	d101      	bne.n	80154b8 <DP83848_GetLinkState+0xf6>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 80154b4:	2303      	movs	r3, #3
 80154b6:	e007      	b.n	80154c8 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_10BT_FD)
 80154b8:	68fb      	ldr	r3, [r7, #12]
 80154ba:	f003 0306 	and.w	r3, r3, #6
 80154be:	2b06      	cmp	r3, #6
 80154c0:	d101      	bne.n	80154c6 <DP83848_GetLinkState+0x104>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 80154c2:	2304      	movs	r3, #4
 80154c4:	e000      	b.n	80154c8 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 80154c6:	2305      	movs	r3, #5
    }
  }
}
 80154c8:	4618      	mov	r0, r3
 80154ca:	3710      	adds	r7, #16
 80154cc:	46bd      	mov	sp, r7
 80154ce:	bd80      	pop	{r7, pc}

080154d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80154d0:	b580      	push	{r7, lr}
 80154d2:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCELERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 80154d4:	4b0b      	ldr	r3, [pc, #44]	; (8015504 <HAL_Init+0x34>)
 80154d6:	681b      	ldr	r3, [r3, #0]
 80154d8:	4a0a      	ldr	r2, [pc, #40]	; (8015504 <HAL_Init+0x34>)
 80154da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80154de:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80154e0:	4b08      	ldr	r3, [pc, #32]	; (8015504 <HAL_Init+0x34>)
 80154e2:	681b      	ldr	r3, [r3, #0]
 80154e4:	4a07      	ldr	r2, [pc, #28]	; (8015504 <HAL_Init+0x34>)
 80154e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80154ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80154ec:	2003      	movs	r0, #3
 80154ee:	f001 f825 	bl	801653c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80154f2:	2007      	movs	r0, #7
 80154f4:	f000 f808 	bl	8015508 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80154f8:	f7ff f856 	bl	80145a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80154fc:	2300      	movs	r3, #0
}
 80154fe:	4618      	mov	r0, r3
 8015500:	bd80      	pop	{r7, pc}
 8015502:	bf00      	nop
 8015504:	40023c00 	.word	0x40023c00

08015508 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8015508:	b580      	push	{r7, lr}
 801550a:	b082      	sub	sp, #8
 801550c:	af00      	add	r7, sp, #0
 801550e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8015510:	4b12      	ldr	r3, [pc, #72]	; (801555c <HAL_InitTick+0x54>)
 8015512:	681a      	ldr	r2, [r3, #0]
 8015514:	4b12      	ldr	r3, [pc, #72]	; (8015560 <HAL_InitTick+0x58>)
 8015516:	781b      	ldrb	r3, [r3, #0]
 8015518:	4619      	mov	r1, r3
 801551a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801551e:	fbb3 f3f1 	udiv	r3, r3, r1
 8015522:	fbb2 f3f3 	udiv	r3, r2, r3
 8015526:	4618      	mov	r0, r3
 8015528:	f001 f83d 	bl	80165a6 <HAL_SYSTICK_Config>
 801552c:	4603      	mov	r3, r0
 801552e:	2b00      	cmp	r3, #0
 8015530:	d001      	beq.n	8015536 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8015532:	2301      	movs	r3, #1
 8015534:	e00e      	b.n	8015554 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	2b0f      	cmp	r3, #15
 801553a:	d80a      	bhi.n	8015552 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 801553c:	2200      	movs	r2, #0
 801553e:	6879      	ldr	r1, [r7, #4]
 8015540:	f04f 30ff 	mov.w	r0, #4294967295
 8015544:	f001 f805 	bl	8016552 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8015548:	4a06      	ldr	r2, [pc, #24]	; (8015564 <HAL_InitTick+0x5c>)
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 801554e:	2300      	movs	r3, #0
 8015550:	e000      	b.n	8015554 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8015552:	2301      	movs	r3, #1
}
 8015554:	4618      	mov	r0, r3
 8015556:	3708      	adds	r7, #8
 8015558:	46bd      	mov	sp, r7
 801555a:	bd80      	pop	{r7, pc}
 801555c:	2000011c 	.word	0x2000011c
 8015560:	20000124 	.word	0x20000124
 8015564:	20000120 	.word	0x20000120

08015568 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8015568:	b480      	push	{r7}
 801556a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 801556c:	4b06      	ldr	r3, [pc, #24]	; (8015588 <HAL_IncTick+0x20>)
 801556e:	781b      	ldrb	r3, [r3, #0]
 8015570:	461a      	mov	r2, r3
 8015572:	4b06      	ldr	r3, [pc, #24]	; (801558c <HAL_IncTick+0x24>)
 8015574:	681b      	ldr	r3, [r3, #0]
 8015576:	4413      	add	r3, r2
 8015578:	4a04      	ldr	r2, [pc, #16]	; (801558c <HAL_IncTick+0x24>)
 801557a:	6013      	str	r3, [r2, #0]
}
 801557c:	bf00      	nop
 801557e:	46bd      	mov	sp, r7
 8015580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015584:	4770      	bx	lr
 8015586:	bf00      	nop
 8015588:	20000124 	.word	0x20000124
 801558c:	2000bd04 	.word	0x2000bd04

08015590 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8015590:	b480      	push	{r7}
 8015592:	af00      	add	r7, sp, #0
  return uwTick;
 8015594:	4b03      	ldr	r3, [pc, #12]	; (80155a4 <HAL_GetTick+0x14>)
 8015596:	681b      	ldr	r3, [r3, #0]
}
 8015598:	4618      	mov	r0, r3
 801559a:	46bd      	mov	sp, r7
 801559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155a0:	4770      	bx	lr
 80155a2:	bf00      	nop
 80155a4:	2000bd04 	.word	0x2000bd04

080155a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80155a8:	b580      	push	{r7, lr}
 80155aa:	b084      	sub	sp, #16
 80155ac:	af00      	add	r7, sp, #0
 80155ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80155b0:	f7ff ffee 	bl	8015590 <HAL_GetTick>
 80155b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80155ba:	68fb      	ldr	r3, [r7, #12]
 80155bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80155c0:	d005      	beq.n	80155ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80155c2:	4b0a      	ldr	r3, [pc, #40]	; (80155ec <HAL_Delay+0x44>)
 80155c4:	781b      	ldrb	r3, [r3, #0]
 80155c6:	461a      	mov	r2, r3
 80155c8:	68fb      	ldr	r3, [r7, #12]
 80155ca:	4413      	add	r3, r2
 80155cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80155ce:	bf00      	nop
 80155d0:	f7ff ffde 	bl	8015590 <HAL_GetTick>
 80155d4:	4602      	mov	r2, r0
 80155d6:	68bb      	ldr	r3, [r7, #8]
 80155d8:	1ad3      	subs	r3, r2, r3
 80155da:	68fa      	ldr	r2, [r7, #12]
 80155dc:	429a      	cmp	r2, r3
 80155de:	d8f7      	bhi.n	80155d0 <HAL_Delay+0x28>
  {
  }
}
 80155e0:	bf00      	nop
 80155e2:	bf00      	nop
 80155e4:	3710      	adds	r7, #16
 80155e6:	46bd      	mov	sp, r7
 80155e8:	bd80      	pop	{r7, pc}
 80155ea:	bf00      	nop
 80155ec:	20000124 	.word	0x20000124

080155f0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80155f0:	b580      	push	{r7, lr}
 80155f2:	b084      	sub	sp, #16
 80155f4:	af00      	add	r7, sp, #0
 80155f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	d101      	bne.n	8015602 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80155fe:	2301      	movs	r3, #1
 8015600:	e11c      	b.n	801583c <HAL_CAN_Init+0x24c>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015608:	b2db      	uxtb	r3, r3
 801560a:	2b00      	cmp	r3, #0
 801560c:	d131      	bne.n	8015672 <HAL_CAN_Init+0x82>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 801560e:	687b      	ldr	r3, [r7, #4]
 8015610:	4a8c      	ldr	r2, [pc, #560]	; (8015844 <HAL_CAN_Init+0x254>)
 8015612:	641a      	str	r2, [r3, #64]	; 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	4a8c      	ldr	r2, [pc, #560]	; (8015848 <HAL_CAN_Init+0x258>)
 8015618:	645a      	str	r2, [r3, #68]	; 0x44
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	4a8b      	ldr	r2, [pc, #556]	; (801584c <HAL_CAN_Init+0x25c>)
 801561e:	649a      	str	r2, [r3, #72]	; 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	4a8b      	ldr	r2, [pc, #556]	; (8015850 <HAL_CAN_Init+0x260>)
 8015624:	64da      	str	r2, [r3, #76]	; 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	4a8a      	ldr	r2, [pc, #552]	; (8015854 <HAL_CAN_Init+0x264>)
 801562a:	629a      	str	r2, [r3, #40]	; 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	4a8a      	ldr	r2, [pc, #552]	; (8015858 <HAL_CAN_Init+0x268>)
 8015630:	62da      	str	r2, [r3, #44]	; 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 8015632:	687b      	ldr	r3, [r7, #4]
 8015634:	4a89      	ldr	r2, [pc, #548]	; (801585c <HAL_CAN_Init+0x26c>)
 8015636:	631a      	str	r2, [r3, #48]	; 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	4a89      	ldr	r2, [pc, #548]	; (8015860 <HAL_CAN_Init+0x270>)
 801563c:	635a      	str	r2, [r3, #52]	; 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	4a88      	ldr	r2, [pc, #544]	; (8015864 <HAL_CAN_Init+0x274>)
 8015642:	639a      	str	r2, [r3, #56]	; 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	4a88      	ldr	r2, [pc, #544]	; (8015868 <HAL_CAN_Init+0x278>)
 8015648:	63da      	str	r2, [r3, #60]	; 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	4a87      	ldr	r2, [pc, #540]	; (801586c <HAL_CAN_Init+0x27c>)
 801564e:	651a      	str	r2, [r3, #80]	; 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 8015650:	687b      	ldr	r3, [r7, #4]
 8015652:	4a87      	ldr	r2, [pc, #540]	; (8015870 <HAL_CAN_Init+0x280>)
 8015654:	655a      	str	r2, [r3, #84]	; 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	4a86      	ldr	r2, [pc, #536]	; (8015874 <HAL_CAN_Init+0x284>)
 801565a:	659a      	str	r2, [r3, #88]	; 0x58

    if (hcan->MspInitCallback == NULL)
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015660:	2b00      	cmp	r3, #0
 8015662:	d102      	bne.n	801566a <HAL_CAN_Init+0x7a>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	4a84      	ldr	r2, [pc, #528]	; (8015878 <HAL_CAN_Init+0x288>)
 8015668:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801566e:	6878      	ldr	r0, [r7, #4]
 8015670:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	681b      	ldr	r3, [r3, #0]
 8015676:	681a      	ldr	r2, [r3, #0]
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	681b      	ldr	r3, [r3, #0]
 801567c:	f042 0201 	orr.w	r2, r2, #1
 8015680:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8015682:	f7ff ff85 	bl	8015590 <HAL_GetTick>
 8015686:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8015688:	e012      	b.n	80156b0 <HAL_CAN_Init+0xc0>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 801568a:	f7ff ff81 	bl	8015590 <HAL_GetTick>
 801568e:	4602      	mov	r2, r0
 8015690:	68fb      	ldr	r3, [r7, #12]
 8015692:	1ad3      	subs	r3, r2, r3
 8015694:	2b0a      	cmp	r3, #10
 8015696:	d90b      	bls.n	80156b0 <HAL_CAN_Init+0xc0>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801569c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	2205      	movs	r2, #5
 80156a8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80156ac:	2301      	movs	r3, #1
 80156ae:	e0c5      	b.n	801583c <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	681b      	ldr	r3, [r3, #0]
 80156b4:	685b      	ldr	r3, [r3, #4]
 80156b6:	f003 0301 	and.w	r3, r3, #1
 80156ba:	2b00      	cmp	r3, #0
 80156bc:	d0e5      	beq.n	801568a <HAL_CAN_Init+0x9a>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	681b      	ldr	r3, [r3, #0]
 80156c2:	681a      	ldr	r2, [r3, #0]
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	681b      	ldr	r3, [r3, #0]
 80156c8:	f022 0202 	bic.w	r2, r2, #2
 80156cc:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80156ce:	f7ff ff5f 	bl	8015590 <HAL_GetTick>
 80156d2:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80156d4:	e012      	b.n	80156fc <HAL_CAN_Init+0x10c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80156d6:	f7ff ff5b 	bl	8015590 <HAL_GetTick>
 80156da:	4602      	mov	r2, r0
 80156dc:	68fb      	ldr	r3, [r7, #12]
 80156de:	1ad3      	subs	r3, r2, r3
 80156e0:	2b0a      	cmp	r3, #10
 80156e2:	d90b      	bls.n	80156fc <HAL_CAN_Init+0x10c>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80156e8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	2205      	movs	r2, #5
 80156f4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80156f8:	2301      	movs	r3, #1
 80156fa:	e09f      	b.n	801583c <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	681b      	ldr	r3, [r3, #0]
 8015700:	685b      	ldr	r3, [r3, #4]
 8015702:	f003 0302 	and.w	r3, r3, #2
 8015706:	2b00      	cmp	r3, #0
 8015708:	d1e5      	bne.n	80156d6 <HAL_CAN_Init+0xe6>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	7e1b      	ldrb	r3, [r3, #24]
 801570e:	2b01      	cmp	r3, #1
 8015710:	d108      	bne.n	8015724 <HAL_CAN_Init+0x134>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8015712:	687b      	ldr	r3, [r7, #4]
 8015714:	681b      	ldr	r3, [r3, #0]
 8015716:	681a      	ldr	r2, [r3, #0]
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	681b      	ldr	r3, [r3, #0]
 801571c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8015720:	601a      	str	r2, [r3, #0]
 8015722:	e007      	b.n	8015734 <HAL_CAN_Init+0x144>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	681b      	ldr	r3, [r3, #0]
 8015728:	681a      	ldr	r2, [r3, #0]
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	681b      	ldr	r3, [r3, #0]
 801572e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8015732:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	7e5b      	ldrb	r3, [r3, #25]
 8015738:	2b01      	cmp	r3, #1
 801573a:	d108      	bne.n	801574e <HAL_CAN_Init+0x15e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	681b      	ldr	r3, [r3, #0]
 8015740:	681a      	ldr	r2, [r3, #0]
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	681b      	ldr	r3, [r3, #0]
 8015746:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801574a:	601a      	str	r2, [r3, #0]
 801574c:	e007      	b.n	801575e <HAL_CAN_Init+0x16e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	681b      	ldr	r3, [r3, #0]
 8015752:	681a      	ldr	r2, [r3, #0]
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	681b      	ldr	r3, [r3, #0]
 8015758:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801575c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 801575e:	687b      	ldr	r3, [r7, #4]
 8015760:	7e9b      	ldrb	r3, [r3, #26]
 8015762:	2b01      	cmp	r3, #1
 8015764:	d108      	bne.n	8015778 <HAL_CAN_Init+0x188>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8015766:	687b      	ldr	r3, [r7, #4]
 8015768:	681b      	ldr	r3, [r3, #0]
 801576a:	681a      	ldr	r2, [r3, #0]
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	681b      	ldr	r3, [r3, #0]
 8015770:	f042 0220 	orr.w	r2, r2, #32
 8015774:	601a      	str	r2, [r3, #0]
 8015776:	e007      	b.n	8015788 <HAL_CAN_Init+0x198>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	681b      	ldr	r3, [r3, #0]
 801577c:	681a      	ldr	r2, [r3, #0]
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	681b      	ldr	r3, [r3, #0]
 8015782:	f022 0220 	bic.w	r2, r2, #32
 8015786:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8015788:	687b      	ldr	r3, [r7, #4]
 801578a:	7edb      	ldrb	r3, [r3, #27]
 801578c:	2b01      	cmp	r3, #1
 801578e:	d108      	bne.n	80157a2 <HAL_CAN_Init+0x1b2>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	681b      	ldr	r3, [r3, #0]
 8015794:	681a      	ldr	r2, [r3, #0]
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	681b      	ldr	r3, [r3, #0]
 801579a:	f022 0210 	bic.w	r2, r2, #16
 801579e:	601a      	str	r2, [r3, #0]
 80157a0:	e007      	b.n	80157b2 <HAL_CAN_Init+0x1c2>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80157a2:	687b      	ldr	r3, [r7, #4]
 80157a4:	681b      	ldr	r3, [r3, #0]
 80157a6:	681a      	ldr	r2, [r3, #0]
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	681b      	ldr	r3, [r3, #0]
 80157ac:	f042 0210 	orr.w	r2, r2, #16
 80157b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	7f1b      	ldrb	r3, [r3, #28]
 80157b6:	2b01      	cmp	r3, #1
 80157b8:	d108      	bne.n	80157cc <HAL_CAN_Init+0x1dc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	681b      	ldr	r3, [r3, #0]
 80157be:	681a      	ldr	r2, [r3, #0]
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	681b      	ldr	r3, [r3, #0]
 80157c4:	f042 0208 	orr.w	r2, r2, #8
 80157c8:	601a      	str	r2, [r3, #0]
 80157ca:	e007      	b.n	80157dc <HAL_CAN_Init+0x1ec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	681b      	ldr	r3, [r3, #0]
 80157d0:	681a      	ldr	r2, [r3, #0]
 80157d2:	687b      	ldr	r3, [r7, #4]
 80157d4:	681b      	ldr	r3, [r3, #0]
 80157d6:	f022 0208 	bic.w	r2, r2, #8
 80157da:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	7f5b      	ldrb	r3, [r3, #29]
 80157e0:	2b01      	cmp	r3, #1
 80157e2:	d108      	bne.n	80157f6 <HAL_CAN_Init+0x206>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	681b      	ldr	r3, [r3, #0]
 80157e8:	681a      	ldr	r2, [r3, #0]
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	681b      	ldr	r3, [r3, #0]
 80157ee:	f042 0204 	orr.w	r2, r2, #4
 80157f2:	601a      	str	r2, [r3, #0]
 80157f4:	e007      	b.n	8015806 <HAL_CAN_Init+0x216>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	681b      	ldr	r3, [r3, #0]
 80157fa:	681a      	ldr	r2, [r3, #0]
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	681b      	ldr	r3, [r3, #0]
 8015800:	f022 0204 	bic.w	r2, r2, #4
 8015804:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	689a      	ldr	r2, [r3, #8]
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	68db      	ldr	r3, [r3, #12]
 801580e:	431a      	orrs	r2, r3
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	691b      	ldr	r3, [r3, #16]
 8015814:	431a      	orrs	r2, r3
 8015816:	687b      	ldr	r3, [r7, #4]
 8015818:	695b      	ldr	r3, [r3, #20]
 801581a:	ea42 0103 	orr.w	r1, r2, r3
 801581e:	687b      	ldr	r3, [r7, #4]
 8015820:	685b      	ldr	r3, [r3, #4]
 8015822:	1e5a      	subs	r2, r3, #1
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	681b      	ldr	r3, [r3, #0]
 8015828:	430a      	orrs	r2, r1
 801582a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	2200      	movs	r2, #0
 8015830:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	2201      	movs	r2, #1
 8015836:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 801583a:	2300      	movs	r3, #0
}
 801583c:	4618      	mov	r0, r3
 801583e:	3710      	adds	r7, #16
 8015840:	46bd      	mov	sp, r7
 8015842:	bd80      	pop	{r7, pc}
 8015844:	0800fbf5 	.word	0x0800fbf5
 8015848:	08016337 	.word	0x08016337
 801584c:	0800fd11 	.word	0x0800fd11
 8015850:	0801634b 	.word	0x0801634b
 8015854:	080162bf 	.word	0x080162bf
 8015858:	080162d3 	.word	0x080162d3
 801585c:	080162e7 	.word	0x080162e7
 8015860:	080162fb 	.word	0x080162fb
 8015864:	0801630f 	.word	0x0801630f
 8015868:	08016323 	.word	0x08016323
 801586c:	0801635f 	.word	0x0801635f
 8015870:	08016373 	.word	0x08016373
 8015874:	08016387 	.word	0x08016387
 8015878:	0800f3ed 	.word	0x0800f3ed

0801587c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 801587c:	b480      	push	{r7}
 801587e:	b087      	sub	sp, #28
 8015880:	af00      	add	r7, sp, #0
 8015882:	6078      	str	r0, [r7, #4]
 8015884:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	681b      	ldr	r3, [r3, #0]
 801588a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015892:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8015894:	7cfb      	ldrb	r3, [r7, #19]
 8015896:	2b01      	cmp	r3, #1
 8015898:	d003      	beq.n	80158a2 <HAL_CAN_ConfigFilter+0x26>
 801589a:	7cfb      	ldrb	r3, [r7, #19]
 801589c:	2b02      	cmp	r3, #2
 801589e:	f040 80c7 	bne.w	8015a30 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 80158a2:	687b      	ldr	r3, [r7, #4]
 80158a4:	681b      	ldr	r3, [r3, #0]
 80158a6:	4a69      	ldr	r2, [pc, #420]	; (8015a4c <HAL_CAN_ConfigFilter+0x1d0>)
 80158a8:	4293      	cmp	r3, r2
 80158aa:	d001      	beq.n	80158b0 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 80158ac:	4b68      	ldr	r3, [pc, #416]	; (8015a50 <HAL_CAN_ConfigFilter+0x1d4>)
 80158ae:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80158b0:	697b      	ldr	r3, [r7, #20]
 80158b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80158b6:	f043 0201 	orr.w	r2, r3, #1
 80158ba:	697b      	ldr	r3, [r7, #20]
 80158bc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 80158c0:	697b      	ldr	r3, [r7, #20]
 80158c2:	4a63      	ldr	r2, [pc, #396]	; (8015a50 <HAL_CAN_ConfigFilter+0x1d4>)
 80158c4:	4293      	cmp	r3, r2
 80158c6:	d111      	bne.n	80158ec <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80158c8:	697b      	ldr	r3, [r7, #20]
 80158ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80158ce:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80158d2:	697b      	ldr	r3, [r7, #20]
 80158d4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80158d8:	697b      	ldr	r3, [r7, #20]
 80158da:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80158de:	683b      	ldr	r3, [r7, #0]
 80158e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158e2:	021b      	lsls	r3, r3, #8
 80158e4:	431a      	orrs	r2, r3
 80158e6:	697b      	ldr	r3, [r7, #20]
 80158e8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80158ec:	683b      	ldr	r3, [r7, #0]
 80158ee:	695b      	ldr	r3, [r3, #20]
 80158f0:	f003 031f 	and.w	r3, r3, #31
 80158f4:	2201      	movs	r2, #1
 80158f6:	fa02 f303 	lsl.w	r3, r2, r3
 80158fa:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80158fc:	697b      	ldr	r3, [r7, #20]
 80158fe:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8015902:	68fb      	ldr	r3, [r7, #12]
 8015904:	43db      	mvns	r3, r3
 8015906:	401a      	ands	r2, r3
 8015908:	697b      	ldr	r3, [r7, #20]
 801590a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 801590e:	683b      	ldr	r3, [r7, #0]
 8015910:	69db      	ldr	r3, [r3, #28]
 8015912:	2b00      	cmp	r3, #0
 8015914:	d123      	bne.n	801595e <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8015916:	697b      	ldr	r3, [r7, #20]
 8015918:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 801591c:	68fb      	ldr	r3, [r7, #12]
 801591e:	43db      	mvns	r3, r3
 8015920:	401a      	ands	r2, r3
 8015922:	697b      	ldr	r3, [r7, #20]
 8015924:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8015928:	683b      	ldr	r3, [r7, #0]
 801592a:	68db      	ldr	r3, [r3, #12]
 801592c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 801592e:	683b      	ldr	r3, [r7, #0]
 8015930:	685b      	ldr	r3, [r3, #4]
 8015932:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8015934:	683a      	ldr	r2, [r7, #0]
 8015936:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8015938:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 801593a:	697b      	ldr	r3, [r7, #20]
 801593c:	3248      	adds	r2, #72	; 0x48
 801593e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8015942:	683b      	ldr	r3, [r7, #0]
 8015944:	689b      	ldr	r3, [r3, #8]
 8015946:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8015948:	683b      	ldr	r3, [r7, #0]
 801594a:	681b      	ldr	r3, [r3, #0]
 801594c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 801594e:	683b      	ldr	r3, [r7, #0]
 8015950:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8015952:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8015954:	6979      	ldr	r1, [r7, #20]
 8015956:	3348      	adds	r3, #72	; 0x48
 8015958:	00db      	lsls	r3, r3, #3
 801595a:	440b      	add	r3, r1
 801595c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 801595e:	683b      	ldr	r3, [r7, #0]
 8015960:	69db      	ldr	r3, [r3, #28]
 8015962:	2b01      	cmp	r3, #1
 8015964:	d122      	bne.n	80159ac <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8015966:	697b      	ldr	r3, [r7, #20]
 8015968:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 801596c:	68fb      	ldr	r3, [r7, #12]
 801596e:	431a      	orrs	r2, r3
 8015970:	697b      	ldr	r3, [r7, #20]
 8015972:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8015976:	683b      	ldr	r3, [r7, #0]
 8015978:	681b      	ldr	r3, [r3, #0]
 801597a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 801597c:	683b      	ldr	r3, [r7, #0]
 801597e:	685b      	ldr	r3, [r3, #4]
 8015980:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8015982:	683a      	ldr	r2, [r7, #0]
 8015984:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8015986:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8015988:	697b      	ldr	r3, [r7, #20]
 801598a:	3248      	adds	r2, #72	; 0x48
 801598c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8015990:	683b      	ldr	r3, [r7, #0]
 8015992:	689b      	ldr	r3, [r3, #8]
 8015994:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8015996:	683b      	ldr	r3, [r7, #0]
 8015998:	68db      	ldr	r3, [r3, #12]
 801599a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 801599c:	683b      	ldr	r3, [r7, #0]
 801599e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80159a0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80159a2:	6979      	ldr	r1, [r7, #20]
 80159a4:	3348      	adds	r3, #72	; 0x48
 80159a6:	00db      	lsls	r3, r3, #3
 80159a8:	440b      	add	r3, r1
 80159aa:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80159ac:	683b      	ldr	r3, [r7, #0]
 80159ae:	699b      	ldr	r3, [r3, #24]
 80159b0:	2b00      	cmp	r3, #0
 80159b2:	d109      	bne.n	80159c8 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80159b4:	697b      	ldr	r3, [r7, #20]
 80159b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80159ba:	68fb      	ldr	r3, [r7, #12]
 80159bc:	43db      	mvns	r3, r3
 80159be:	401a      	ands	r2, r3
 80159c0:	697b      	ldr	r3, [r7, #20]
 80159c2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80159c6:	e007      	b.n	80159d8 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80159c8:	697b      	ldr	r3, [r7, #20]
 80159ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80159ce:	68fb      	ldr	r3, [r7, #12]
 80159d0:	431a      	orrs	r2, r3
 80159d2:	697b      	ldr	r3, [r7, #20]
 80159d4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80159d8:	683b      	ldr	r3, [r7, #0]
 80159da:	691b      	ldr	r3, [r3, #16]
 80159dc:	2b00      	cmp	r3, #0
 80159de:	d109      	bne.n	80159f4 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80159e0:	697b      	ldr	r3, [r7, #20]
 80159e2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80159e6:	68fb      	ldr	r3, [r7, #12]
 80159e8:	43db      	mvns	r3, r3
 80159ea:	401a      	ands	r2, r3
 80159ec:	697b      	ldr	r3, [r7, #20]
 80159ee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80159f2:	e007      	b.n	8015a04 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80159f4:	697b      	ldr	r3, [r7, #20]
 80159f6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80159fa:	68fb      	ldr	r3, [r7, #12]
 80159fc:	431a      	orrs	r2, r3
 80159fe:	697b      	ldr	r3, [r7, #20]
 8015a00:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8015a04:	683b      	ldr	r3, [r7, #0]
 8015a06:	6a1b      	ldr	r3, [r3, #32]
 8015a08:	2b01      	cmp	r3, #1
 8015a0a:	d107      	bne.n	8015a1c <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8015a0c:	697b      	ldr	r3, [r7, #20]
 8015a0e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8015a12:	68fb      	ldr	r3, [r7, #12]
 8015a14:	431a      	orrs	r2, r3
 8015a16:	697b      	ldr	r3, [r7, #20]
 8015a18:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8015a1c:	697b      	ldr	r3, [r7, #20]
 8015a1e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8015a22:	f023 0201 	bic.w	r2, r3, #1
 8015a26:	697b      	ldr	r3, [r7, #20]
 8015a28:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8015a2c:	2300      	movs	r3, #0
 8015a2e:	e006      	b.n	8015a3e <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a34:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8015a3c:	2301      	movs	r3, #1
  }
}
 8015a3e:	4618      	mov	r0, r3
 8015a40:	371c      	adds	r7, #28
 8015a42:	46bd      	mov	sp, r7
 8015a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a48:	4770      	bx	lr
 8015a4a:	bf00      	nop
 8015a4c:	40003400 	.word	0x40003400
 8015a50:	40006400 	.word	0x40006400

08015a54 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8015a54:	b580      	push	{r7, lr}
 8015a56:	b084      	sub	sp, #16
 8015a58:	af00      	add	r7, sp, #0
 8015a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015a62:	b2db      	uxtb	r3, r3
 8015a64:	2b01      	cmp	r3, #1
 8015a66:	d12e      	bne.n	8015ac6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	2202      	movs	r2, #2
 8015a6c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	681b      	ldr	r3, [r3, #0]
 8015a74:	681a      	ldr	r2, [r3, #0]
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	681b      	ldr	r3, [r3, #0]
 8015a7a:	f022 0201 	bic.w	r2, r2, #1
 8015a7e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8015a80:	f7ff fd86 	bl	8015590 <HAL_GetTick>
 8015a84:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8015a86:	e012      	b.n	8015aae <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8015a88:	f7ff fd82 	bl	8015590 <HAL_GetTick>
 8015a8c:	4602      	mov	r2, r0
 8015a8e:	68fb      	ldr	r3, [r7, #12]
 8015a90:	1ad3      	subs	r3, r2, r3
 8015a92:	2b0a      	cmp	r3, #10
 8015a94:	d90b      	bls.n	8015aae <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a9a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8015aa2:	687b      	ldr	r3, [r7, #4]
 8015aa4:	2205      	movs	r2, #5
 8015aa6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8015aaa:	2301      	movs	r3, #1
 8015aac:	e012      	b.n	8015ad4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8015aae:	687b      	ldr	r3, [r7, #4]
 8015ab0:	681b      	ldr	r3, [r3, #0]
 8015ab2:	685b      	ldr	r3, [r3, #4]
 8015ab4:	f003 0301 	and.w	r3, r3, #1
 8015ab8:	2b00      	cmp	r3, #0
 8015aba:	d1e5      	bne.n	8015a88 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	2200      	movs	r2, #0
 8015ac0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8015ac2:	2300      	movs	r3, #0
 8015ac4:	e006      	b.n	8015ad4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8015ac6:	687b      	ldr	r3, [r7, #4]
 8015ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015aca:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8015ace:	687b      	ldr	r3, [r7, #4]
 8015ad0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8015ad2:	2301      	movs	r3, #1
  }
}
 8015ad4:	4618      	mov	r0, r3
 8015ad6:	3710      	adds	r7, #16
 8015ad8:	46bd      	mov	sp, r7
 8015ada:	bd80      	pop	{r7, pc}

08015adc <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8015adc:	b480      	push	{r7}
 8015ade:	b089      	sub	sp, #36	; 0x24
 8015ae0:	af00      	add	r7, sp, #0
 8015ae2:	60f8      	str	r0, [r7, #12]
 8015ae4:	60b9      	str	r1, [r7, #8]
 8015ae6:	607a      	str	r2, [r7, #4]
 8015ae8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8015aea:	68fb      	ldr	r3, [r7, #12]
 8015aec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015af0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8015af2:	68fb      	ldr	r3, [r7, #12]
 8015af4:	681b      	ldr	r3, [r3, #0]
 8015af6:	689b      	ldr	r3, [r3, #8]
 8015af8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8015afa:	7ffb      	ldrb	r3, [r7, #31]
 8015afc:	2b01      	cmp	r3, #1
 8015afe:	d003      	beq.n	8015b08 <HAL_CAN_AddTxMessage+0x2c>
 8015b00:	7ffb      	ldrb	r3, [r7, #31]
 8015b02:	2b02      	cmp	r3, #2
 8015b04:	f040 80ad 	bne.w	8015c62 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8015b08:	69bb      	ldr	r3, [r7, #24]
 8015b0a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	d10a      	bne.n	8015b28 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8015b12:	69bb      	ldr	r3, [r7, #24]
 8015b14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8015b18:	2b00      	cmp	r3, #0
 8015b1a:	d105      	bne.n	8015b28 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8015b1c:	69bb      	ldr	r3, [r7, #24]
 8015b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8015b22:	2b00      	cmp	r3, #0
 8015b24:	f000 8095 	beq.w	8015c52 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8015b28:	69bb      	ldr	r3, [r7, #24]
 8015b2a:	0e1b      	lsrs	r3, r3, #24
 8015b2c:	f003 0303 	and.w	r3, r3, #3
 8015b30:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8015b32:	2201      	movs	r2, #1
 8015b34:	697b      	ldr	r3, [r7, #20]
 8015b36:	409a      	lsls	r2, r3
 8015b38:	683b      	ldr	r3, [r7, #0]
 8015b3a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8015b3c:	68bb      	ldr	r3, [r7, #8]
 8015b3e:	689b      	ldr	r3, [r3, #8]
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	d10d      	bne.n	8015b60 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8015b44:	68bb      	ldr	r3, [r7, #8]
 8015b46:	681b      	ldr	r3, [r3, #0]
 8015b48:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8015b4a:	68bb      	ldr	r3, [r7, #8]
 8015b4c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8015b4e:	68f9      	ldr	r1, [r7, #12]
 8015b50:	6809      	ldr	r1, [r1, #0]
 8015b52:	431a      	orrs	r2, r3
 8015b54:	697b      	ldr	r3, [r7, #20]
 8015b56:	3318      	adds	r3, #24
 8015b58:	011b      	lsls	r3, r3, #4
 8015b5a:	440b      	add	r3, r1
 8015b5c:	601a      	str	r2, [r3, #0]
 8015b5e:	e00f      	b.n	8015b80 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8015b60:	68bb      	ldr	r3, [r7, #8]
 8015b62:	685b      	ldr	r3, [r3, #4]
 8015b64:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8015b66:	68bb      	ldr	r3, [r7, #8]
 8015b68:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8015b6a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8015b6c:	68bb      	ldr	r3, [r7, #8]
 8015b6e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8015b70:	68f9      	ldr	r1, [r7, #12]
 8015b72:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8015b74:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8015b76:	697b      	ldr	r3, [r7, #20]
 8015b78:	3318      	adds	r3, #24
 8015b7a:	011b      	lsls	r3, r3, #4
 8015b7c:	440b      	add	r3, r1
 8015b7e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8015b80:	68fb      	ldr	r3, [r7, #12]
 8015b82:	6819      	ldr	r1, [r3, #0]
 8015b84:	68bb      	ldr	r3, [r7, #8]
 8015b86:	691a      	ldr	r2, [r3, #16]
 8015b88:	697b      	ldr	r3, [r7, #20]
 8015b8a:	3318      	adds	r3, #24
 8015b8c:	011b      	lsls	r3, r3, #4
 8015b8e:	440b      	add	r3, r1
 8015b90:	3304      	adds	r3, #4
 8015b92:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8015b94:	68bb      	ldr	r3, [r7, #8]
 8015b96:	7d1b      	ldrb	r3, [r3, #20]
 8015b98:	2b01      	cmp	r3, #1
 8015b9a:	d111      	bne.n	8015bc0 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8015b9c:	68fb      	ldr	r3, [r7, #12]
 8015b9e:	681a      	ldr	r2, [r3, #0]
 8015ba0:	697b      	ldr	r3, [r7, #20]
 8015ba2:	3318      	adds	r3, #24
 8015ba4:	011b      	lsls	r3, r3, #4
 8015ba6:	4413      	add	r3, r2
 8015ba8:	3304      	adds	r3, #4
 8015baa:	681b      	ldr	r3, [r3, #0]
 8015bac:	68fa      	ldr	r2, [r7, #12]
 8015bae:	6811      	ldr	r1, [r2, #0]
 8015bb0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8015bb4:	697b      	ldr	r3, [r7, #20]
 8015bb6:	3318      	adds	r3, #24
 8015bb8:	011b      	lsls	r3, r3, #4
 8015bba:	440b      	add	r3, r1
 8015bbc:	3304      	adds	r3, #4
 8015bbe:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8015bc0:	687b      	ldr	r3, [r7, #4]
 8015bc2:	3307      	adds	r3, #7
 8015bc4:	781b      	ldrb	r3, [r3, #0]
 8015bc6:	061a      	lsls	r2, r3, #24
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	3306      	adds	r3, #6
 8015bcc:	781b      	ldrb	r3, [r3, #0]
 8015bce:	041b      	lsls	r3, r3, #16
 8015bd0:	431a      	orrs	r2, r3
 8015bd2:	687b      	ldr	r3, [r7, #4]
 8015bd4:	3305      	adds	r3, #5
 8015bd6:	781b      	ldrb	r3, [r3, #0]
 8015bd8:	021b      	lsls	r3, r3, #8
 8015bda:	4313      	orrs	r3, r2
 8015bdc:	687a      	ldr	r2, [r7, #4]
 8015bde:	3204      	adds	r2, #4
 8015be0:	7812      	ldrb	r2, [r2, #0]
 8015be2:	4610      	mov	r0, r2
 8015be4:	68fa      	ldr	r2, [r7, #12]
 8015be6:	6811      	ldr	r1, [r2, #0]
 8015be8:	ea43 0200 	orr.w	r2, r3, r0
 8015bec:	697b      	ldr	r3, [r7, #20]
 8015bee:	011b      	lsls	r3, r3, #4
 8015bf0:	440b      	add	r3, r1
 8015bf2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8015bf6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	3303      	adds	r3, #3
 8015bfc:	781b      	ldrb	r3, [r3, #0]
 8015bfe:	061a      	lsls	r2, r3, #24
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	3302      	adds	r3, #2
 8015c04:	781b      	ldrb	r3, [r3, #0]
 8015c06:	041b      	lsls	r3, r3, #16
 8015c08:	431a      	orrs	r2, r3
 8015c0a:	687b      	ldr	r3, [r7, #4]
 8015c0c:	3301      	adds	r3, #1
 8015c0e:	781b      	ldrb	r3, [r3, #0]
 8015c10:	021b      	lsls	r3, r3, #8
 8015c12:	4313      	orrs	r3, r2
 8015c14:	687a      	ldr	r2, [r7, #4]
 8015c16:	7812      	ldrb	r2, [r2, #0]
 8015c18:	4610      	mov	r0, r2
 8015c1a:	68fa      	ldr	r2, [r7, #12]
 8015c1c:	6811      	ldr	r1, [r2, #0]
 8015c1e:	ea43 0200 	orr.w	r2, r3, r0
 8015c22:	697b      	ldr	r3, [r7, #20]
 8015c24:	011b      	lsls	r3, r3, #4
 8015c26:	440b      	add	r3, r1
 8015c28:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8015c2c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8015c2e:	68fb      	ldr	r3, [r7, #12]
 8015c30:	681a      	ldr	r2, [r3, #0]
 8015c32:	697b      	ldr	r3, [r7, #20]
 8015c34:	3318      	adds	r3, #24
 8015c36:	011b      	lsls	r3, r3, #4
 8015c38:	4413      	add	r3, r2
 8015c3a:	681b      	ldr	r3, [r3, #0]
 8015c3c:	68fa      	ldr	r2, [r7, #12]
 8015c3e:	6811      	ldr	r1, [r2, #0]
 8015c40:	f043 0201 	orr.w	r2, r3, #1
 8015c44:	697b      	ldr	r3, [r7, #20]
 8015c46:	3318      	adds	r3, #24
 8015c48:	011b      	lsls	r3, r3, #4
 8015c4a:	440b      	add	r3, r1
 8015c4c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8015c4e:	2300      	movs	r3, #0
 8015c50:	e00e      	b.n	8015c70 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8015c52:	68fb      	ldr	r3, [r7, #12]
 8015c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c56:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8015c5a:	68fb      	ldr	r3, [r7, #12]
 8015c5c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8015c5e:	2301      	movs	r3, #1
 8015c60:	e006      	b.n	8015c70 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8015c62:	68fb      	ldr	r3, [r7, #12]
 8015c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c66:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8015c6a:	68fb      	ldr	r3, [r7, #12]
 8015c6c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8015c6e:	2301      	movs	r3, #1
  }
}
 8015c70:	4618      	mov	r0, r3
 8015c72:	3724      	adds	r7, #36	; 0x24
 8015c74:	46bd      	mov	sp, r7
 8015c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c7a:	4770      	bx	lr

08015c7c <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8015c7c:	b480      	push	{r7}
 8015c7e:	b085      	sub	sp, #20
 8015c80:	af00      	add	r7, sp, #0
 8015c82:	6078      	str	r0, [r7, #4]
 8015c84:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8015c86:	2300      	movs	r3, #0
 8015c88:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015c90:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8015c92:	7afb      	ldrb	r3, [r7, #11]
 8015c94:	2b01      	cmp	r3, #1
 8015c96:	d002      	beq.n	8015c9e <HAL_CAN_IsTxMessagePending+0x22>
 8015c98:	7afb      	ldrb	r3, [r7, #11]
 8015c9a:	2b02      	cmp	r3, #2
 8015c9c:	d10b      	bne.n	8015cb6 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	681b      	ldr	r3, [r3, #0]
 8015ca2:	689a      	ldr	r2, [r3, #8]
 8015ca4:	683b      	ldr	r3, [r7, #0]
 8015ca6:	069b      	lsls	r3, r3, #26
 8015ca8:	401a      	ands	r2, r3
 8015caa:	683b      	ldr	r3, [r7, #0]
 8015cac:	069b      	lsls	r3, r3, #26
 8015cae:	429a      	cmp	r2, r3
 8015cb0:	d001      	beq.n	8015cb6 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8015cb2:	2301      	movs	r3, #1
 8015cb4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8015cb6:	68fb      	ldr	r3, [r7, #12]
}
 8015cb8:	4618      	mov	r0, r3
 8015cba:	3714      	adds	r7, #20
 8015cbc:	46bd      	mov	sp, r7
 8015cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cc2:	4770      	bx	lr

08015cc4 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8015cc4:	b480      	push	{r7}
 8015cc6:	b087      	sub	sp, #28
 8015cc8:	af00      	add	r7, sp, #0
 8015cca:	60f8      	str	r0, [r7, #12]
 8015ccc:	60b9      	str	r1, [r7, #8]
 8015cce:	607a      	str	r2, [r7, #4]
 8015cd0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8015cd2:	68fb      	ldr	r3, [r7, #12]
 8015cd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015cd8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8015cda:	7dfb      	ldrb	r3, [r7, #23]
 8015cdc:	2b01      	cmp	r3, #1
 8015cde:	d003      	beq.n	8015ce8 <HAL_CAN_GetRxMessage+0x24>
 8015ce0:	7dfb      	ldrb	r3, [r7, #23]
 8015ce2:	2b02      	cmp	r3, #2
 8015ce4:	f040 80f3 	bne.w	8015ece <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8015ce8:	68bb      	ldr	r3, [r7, #8]
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	d10e      	bne.n	8015d0c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8015cee:	68fb      	ldr	r3, [r7, #12]
 8015cf0:	681b      	ldr	r3, [r3, #0]
 8015cf2:	68db      	ldr	r3, [r3, #12]
 8015cf4:	f003 0303 	and.w	r3, r3, #3
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	d116      	bne.n	8015d2a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8015cfc:	68fb      	ldr	r3, [r7, #12]
 8015cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d00:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8015d04:	68fb      	ldr	r3, [r7, #12]
 8015d06:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8015d08:	2301      	movs	r3, #1
 8015d0a:	e0e7      	b.n	8015edc <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8015d0c:	68fb      	ldr	r3, [r7, #12]
 8015d0e:	681b      	ldr	r3, [r3, #0]
 8015d10:	691b      	ldr	r3, [r3, #16]
 8015d12:	f003 0303 	and.w	r3, r3, #3
 8015d16:	2b00      	cmp	r3, #0
 8015d18:	d107      	bne.n	8015d2a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8015d1a:	68fb      	ldr	r3, [r7, #12]
 8015d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d1e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8015d22:	68fb      	ldr	r3, [r7, #12]
 8015d24:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8015d26:	2301      	movs	r3, #1
 8015d28:	e0d8      	b.n	8015edc <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8015d2a:	68fb      	ldr	r3, [r7, #12]
 8015d2c:	681a      	ldr	r2, [r3, #0]
 8015d2e:	68bb      	ldr	r3, [r7, #8]
 8015d30:	331b      	adds	r3, #27
 8015d32:	011b      	lsls	r3, r3, #4
 8015d34:	4413      	add	r3, r2
 8015d36:	681b      	ldr	r3, [r3, #0]
 8015d38:	f003 0204 	and.w	r2, r3, #4
 8015d3c:	687b      	ldr	r3, [r7, #4]
 8015d3e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	689b      	ldr	r3, [r3, #8]
 8015d44:	2b00      	cmp	r3, #0
 8015d46:	d10c      	bne.n	8015d62 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8015d48:	68fb      	ldr	r3, [r7, #12]
 8015d4a:	681a      	ldr	r2, [r3, #0]
 8015d4c:	68bb      	ldr	r3, [r7, #8]
 8015d4e:	331b      	adds	r3, #27
 8015d50:	011b      	lsls	r3, r3, #4
 8015d52:	4413      	add	r3, r2
 8015d54:	681b      	ldr	r3, [r3, #0]
 8015d56:	0d5b      	lsrs	r3, r3, #21
 8015d58:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	601a      	str	r2, [r3, #0]
 8015d60:	e00b      	b.n	8015d7a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8015d62:	68fb      	ldr	r3, [r7, #12]
 8015d64:	681a      	ldr	r2, [r3, #0]
 8015d66:	68bb      	ldr	r3, [r7, #8]
 8015d68:	331b      	adds	r3, #27
 8015d6a:	011b      	lsls	r3, r3, #4
 8015d6c:	4413      	add	r3, r2
 8015d6e:	681b      	ldr	r3, [r3, #0]
 8015d70:	08db      	lsrs	r3, r3, #3
 8015d72:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8015d7a:	68fb      	ldr	r3, [r7, #12]
 8015d7c:	681a      	ldr	r2, [r3, #0]
 8015d7e:	68bb      	ldr	r3, [r7, #8]
 8015d80:	331b      	adds	r3, #27
 8015d82:	011b      	lsls	r3, r3, #4
 8015d84:	4413      	add	r3, r2
 8015d86:	681b      	ldr	r3, [r3, #0]
 8015d88:	f003 0202 	and.w	r2, r3, #2
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8015d90:	68fb      	ldr	r3, [r7, #12]
 8015d92:	681a      	ldr	r2, [r3, #0]
 8015d94:	68bb      	ldr	r3, [r7, #8]
 8015d96:	331b      	adds	r3, #27
 8015d98:	011b      	lsls	r3, r3, #4
 8015d9a:	4413      	add	r3, r2
 8015d9c:	3304      	adds	r3, #4
 8015d9e:	681b      	ldr	r3, [r3, #0]
 8015da0:	f003 020f 	and.w	r2, r3, #15
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8015da8:	68fb      	ldr	r3, [r7, #12]
 8015daa:	681a      	ldr	r2, [r3, #0]
 8015dac:	68bb      	ldr	r3, [r7, #8]
 8015dae:	331b      	adds	r3, #27
 8015db0:	011b      	lsls	r3, r3, #4
 8015db2:	4413      	add	r3, r2
 8015db4:	3304      	adds	r3, #4
 8015db6:	681b      	ldr	r3, [r3, #0]
 8015db8:	0a1b      	lsrs	r3, r3, #8
 8015dba:	b2da      	uxtb	r2, r3
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8015dc0:	68fb      	ldr	r3, [r7, #12]
 8015dc2:	681a      	ldr	r2, [r3, #0]
 8015dc4:	68bb      	ldr	r3, [r7, #8]
 8015dc6:	331b      	adds	r3, #27
 8015dc8:	011b      	lsls	r3, r3, #4
 8015dca:	4413      	add	r3, r2
 8015dcc:	3304      	adds	r3, #4
 8015dce:	681b      	ldr	r3, [r3, #0]
 8015dd0:	0c1b      	lsrs	r3, r3, #16
 8015dd2:	b29a      	uxth	r2, r3
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8015dd8:	68fb      	ldr	r3, [r7, #12]
 8015dda:	681a      	ldr	r2, [r3, #0]
 8015ddc:	68bb      	ldr	r3, [r7, #8]
 8015dde:	011b      	lsls	r3, r3, #4
 8015de0:	4413      	add	r3, r2
 8015de2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8015de6:	681b      	ldr	r3, [r3, #0]
 8015de8:	b2da      	uxtb	r2, r3
 8015dea:	683b      	ldr	r3, [r7, #0]
 8015dec:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8015dee:	68fb      	ldr	r3, [r7, #12]
 8015df0:	681a      	ldr	r2, [r3, #0]
 8015df2:	68bb      	ldr	r3, [r7, #8]
 8015df4:	011b      	lsls	r3, r3, #4
 8015df6:	4413      	add	r3, r2
 8015df8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8015dfc:	681b      	ldr	r3, [r3, #0]
 8015dfe:	0a1a      	lsrs	r2, r3, #8
 8015e00:	683b      	ldr	r3, [r7, #0]
 8015e02:	3301      	adds	r3, #1
 8015e04:	b2d2      	uxtb	r2, r2
 8015e06:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8015e08:	68fb      	ldr	r3, [r7, #12]
 8015e0a:	681a      	ldr	r2, [r3, #0]
 8015e0c:	68bb      	ldr	r3, [r7, #8]
 8015e0e:	011b      	lsls	r3, r3, #4
 8015e10:	4413      	add	r3, r2
 8015e12:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8015e16:	681b      	ldr	r3, [r3, #0]
 8015e18:	0c1a      	lsrs	r2, r3, #16
 8015e1a:	683b      	ldr	r3, [r7, #0]
 8015e1c:	3302      	adds	r3, #2
 8015e1e:	b2d2      	uxtb	r2, r2
 8015e20:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8015e22:	68fb      	ldr	r3, [r7, #12]
 8015e24:	681a      	ldr	r2, [r3, #0]
 8015e26:	68bb      	ldr	r3, [r7, #8]
 8015e28:	011b      	lsls	r3, r3, #4
 8015e2a:	4413      	add	r3, r2
 8015e2c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8015e30:	681b      	ldr	r3, [r3, #0]
 8015e32:	0e1a      	lsrs	r2, r3, #24
 8015e34:	683b      	ldr	r3, [r7, #0]
 8015e36:	3303      	adds	r3, #3
 8015e38:	b2d2      	uxtb	r2, r2
 8015e3a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8015e3c:	68fb      	ldr	r3, [r7, #12]
 8015e3e:	681a      	ldr	r2, [r3, #0]
 8015e40:	68bb      	ldr	r3, [r7, #8]
 8015e42:	011b      	lsls	r3, r3, #4
 8015e44:	4413      	add	r3, r2
 8015e46:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8015e4a:	681a      	ldr	r2, [r3, #0]
 8015e4c:	683b      	ldr	r3, [r7, #0]
 8015e4e:	3304      	adds	r3, #4
 8015e50:	b2d2      	uxtb	r2, r2
 8015e52:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8015e54:	68fb      	ldr	r3, [r7, #12]
 8015e56:	681a      	ldr	r2, [r3, #0]
 8015e58:	68bb      	ldr	r3, [r7, #8]
 8015e5a:	011b      	lsls	r3, r3, #4
 8015e5c:	4413      	add	r3, r2
 8015e5e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8015e62:	681b      	ldr	r3, [r3, #0]
 8015e64:	0a1a      	lsrs	r2, r3, #8
 8015e66:	683b      	ldr	r3, [r7, #0]
 8015e68:	3305      	adds	r3, #5
 8015e6a:	b2d2      	uxtb	r2, r2
 8015e6c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8015e6e:	68fb      	ldr	r3, [r7, #12]
 8015e70:	681a      	ldr	r2, [r3, #0]
 8015e72:	68bb      	ldr	r3, [r7, #8]
 8015e74:	011b      	lsls	r3, r3, #4
 8015e76:	4413      	add	r3, r2
 8015e78:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8015e7c:	681b      	ldr	r3, [r3, #0]
 8015e7e:	0c1a      	lsrs	r2, r3, #16
 8015e80:	683b      	ldr	r3, [r7, #0]
 8015e82:	3306      	adds	r3, #6
 8015e84:	b2d2      	uxtb	r2, r2
 8015e86:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8015e88:	68fb      	ldr	r3, [r7, #12]
 8015e8a:	681a      	ldr	r2, [r3, #0]
 8015e8c:	68bb      	ldr	r3, [r7, #8]
 8015e8e:	011b      	lsls	r3, r3, #4
 8015e90:	4413      	add	r3, r2
 8015e92:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8015e96:	681b      	ldr	r3, [r3, #0]
 8015e98:	0e1a      	lsrs	r2, r3, #24
 8015e9a:	683b      	ldr	r3, [r7, #0]
 8015e9c:	3307      	adds	r3, #7
 8015e9e:	b2d2      	uxtb	r2, r2
 8015ea0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8015ea2:	68bb      	ldr	r3, [r7, #8]
 8015ea4:	2b00      	cmp	r3, #0
 8015ea6:	d108      	bne.n	8015eba <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8015ea8:	68fb      	ldr	r3, [r7, #12]
 8015eaa:	681b      	ldr	r3, [r3, #0]
 8015eac:	68da      	ldr	r2, [r3, #12]
 8015eae:	68fb      	ldr	r3, [r7, #12]
 8015eb0:	681b      	ldr	r3, [r3, #0]
 8015eb2:	f042 0220 	orr.w	r2, r2, #32
 8015eb6:	60da      	str	r2, [r3, #12]
 8015eb8:	e007      	b.n	8015eca <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8015eba:	68fb      	ldr	r3, [r7, #12]
 8015ebc:	681b      	ldr	r3, [r3, #0]
 8015ebe:	691a      	ldr	r2, [r3, #16]
 8015ec0:	68fb      	ldr	r3, [r7, #12]
 8015ec2:	681b      	ldr	r3, [r3, #0]
 8015ec4:	f042 0220 	orr.w	r2, r2, #32
 8015ec8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8015eca:	2300      	movs	r3, #0
 8015ecc:	e006      	b.n	8015edc <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8015ece:	68fb      	ldr	r3, [r7, #12]
 8015ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ed2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8015ed6:	68fb      	ldr	r3, [r7, #12]
 8015ed8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8015eda:	2301      	movs	r3, #1
  }
}
 8015edc:	4618      	mov	r0, r3
 8015ede:	371c      	adds	r7, #28
 8015ee0:	46bd      	mov	sp, r7
 8015ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ee6:	4770      	bx	lr

08015ee8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8015ee8:	b480      	push	{r7}
 8015eea:	b085      	sub	sp, #20
 8015eec:	af00      	add	r7, sp, #0
 8015eee:	6078      	str	r0, [r7, #4]
 8015ef0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015ef8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8015efa:	7bfb      	ldrb	r3, [r7, #15]
 8015efc:	2b01      	cmp	r3, #1
 8015efe:	d002      	beq.n	8015f06 <HAL_CAN_ActivateNotification+0x1e>
 8015f00:	7bfb      	ldrb	r3, [r7, #15]
 8015f02:	2b02      	cmp	r3, #2
 8015f04:	d109      	bne.n	8015f1a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	681b      	ldr	r3, [r3, #0]
 8015f0a:	6959      	ldr	r1, [r3, #20]
 8015f0c:	687b      	ldr	r3, [r7, #4]
 8015f0e:	681b      	ldr	r3, [r3, #0]
 8015f10:	683a      	ldr	r2, [r7, #0]
 8015f12:	430a      	orrs	r2, r1
 8015f14:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8015f16:	2300      	movs	r3, #0
 8015f18:	e006      	b.n	8015f28 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8015f1a:	687b      	ldr	r3, [r7, #4]
 8015f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f1e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8015f22:	687b      	ldr	r3, [r7, #4]
 8015f24:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8015f26:	2301      	movs	r3, #1
  }
}
 8015f28:	4618      	mov	r0, r3
 8015f2a:	3714      	adds	r7, #20
 8015f2c:	46bd      	mov	sp, r7
 8015f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f32:	4770      	bx	lr

08015f34 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8015f34:	b580      	push	{r7, lr}
 8015f36:	b08a      	sub	sp, #40	; 0x28
 8015f38:	af00      	add	r7, sp, #0
 8015f3a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8015f3c:	2300      	movs	r3, #0
 8015f3e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	681b      	ldr	r3, [r3, #0]
 8015f44:	695b      	ldr	r3, [r3, #20]
 8015f46:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	681b      	ldr	r3, [r3, #0]
 8015f4c:	685b      	ldr	r3, [r3, #4]
 8015f4e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	681b      	ldr	r3, [r3, #0]
 8015f54:	689b      	ldr	r3, [r3, #8]
 8015f56:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	681b      	ldr	r3, [r3, #0]
 8015f5c:	68db      	ldr	r3, [r3, #12]
 8015f5e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	681b      	ldr	r3, [r3, #0]
 8015f64:	691b      	ldr	r3, [r3, #16]
 8015f66:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8015f68:	687b      	ldr	r3, [r7, #4]
 8015f6a:	681b      	ldr	r3, [r3, #0]
 8015f6c:	699b      	ldr	r3, [r3, #24]
 8015f6e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8015f70:	6a3b      	ldr	r3, [r7, #32]
 8015f72:	f003 0301 	and.w	r3, r3, #1
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	f000 8083 	beq.w	8016082 <HAL_CAN_IRQHandler+0x14e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8015f7c:	69bb      	ldr	r3, [r7, #24]
 8015f7e:	f003 0301 	and.w	r3, r3, #1
 8015f82:	2b00      	cmp	r3, #0
 8015f84:	d025      	beq.n	8015fd2 <HAL_CAN_IRQHandler+0x9e>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8015f86:	687b      	ldr	r3, [r7, #4]
 8015f88:	681b      	ldr	r3, [r3, #0]
 8015f8a:	2201      	movs	r2, #1
 8015f8c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8015f8e:	69bb      	ldr	r3, [r7, #24]
 8015f90:	f003 0302 	and.w	r3, r3, #2
 8015f94:	2b00      	cmp	r3, #0
 8015f96:	d004      	beq.n	8015fa2 <HAL_CAN_IRQHandler+0x6e>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015f9c:	6878      	ldr	r0, [r7, #4]
 8015f9e:	4798      	blx	r3
 8015fa0:	e017      	b.n	8015fd2 <HAL_CAN_IRQHandler+0x9e>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8015fa2:	69bb      	ldr	r3, [r7, #24]
 8015fa4:	f003 0304 	and.w	r3, r3, #4
 8015fa8:	2b00      	cmp	r3, #0
 8015faa:	d004      	beq.n	8015fb6 <HAL_CAN_IRQHandler+0x82>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8015fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8015fb2:	627b      	str	r3, [r7, #36]	; 0x24
 8015fb4:	e00d      	b.n	8015fd2 <HAL_CAN_IRQHandler+0x9e>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8015fb6:	69bb      	ldr	r3, [r7, #24]
 8015fb8:	f003 0308 	and.w	r3, r3, #8
 8015fbc:	2b00      	cmp	r3, #0
 8015fbe:	d004      	beq.n	8015fca <HAL_CAN_IRQHandler+0x96>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8015fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fc2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8015fc6:	627b      	str	r3, [r7, #36]	; 0x24
 8015fc8:	e003      	b.n	8015fd2 <HAL_CAN_IRQHandler+0x9e>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 8015fca:	687b      	ldr	r3, [r7, #4]
 8015fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015fce:	6878      	ldr	r0, [r7, #4]
 8015fd0:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8015fd2:	69bb      	ldr	r3, [r7, #24]
 8015fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015fd8:	2b00      	cmp	r3, #0
 8015fda:	d026      	beq.n	801602a <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8015fdc:	687b      	ldr	r3, [r7, #4]
 8015fde:	681b      	ldr	r3, [r3, #0]
 8015fe0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015fe4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8015fe6:	69bb      	ldr	r3, [r7, #24]
 8015fe8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8015fec:	2b00      	cmp	r3, #0
 8015fee:	d004      	beq.n	8015ffa <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015ff4:	6878      	ldr	r0, [r7, #4]
 8015ff6:	4798      	blx	r3
 8015ff8:	e017      	b.n	801602a <HAL_CAN_IRQHandler+0xf6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8015ffa:	69bb      	ldr	r3, [r7, #24]
 8015ffc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8016000:	2b00      	cmp	r3, #0
 8016002:	d004      	beq.n	801600e <HAL_CAN_IRQHandler+0xda>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8016004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016006:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801600a:	627b      	str	r3, [r7, #36]	; 0x24
 801600c:	e00d      	b.n	801602a <HAL_CAN_IRQHandler+0xf6>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 801600e:	69bb      	ldr	r3, [r7, #24]
 8016010:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016014:	2b00      	cmp	r3, #0
 8016016:	d004      	beq.n	8016022 <HAL_CAN_IRQHandler+0xee>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8016018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801601a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801601e:	627b      	str	r3, [r7, #36]	; 0x24
 8016020:	e003      	b.n	801602a <HAL_CAN_IRQHandler+0xf6>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016026:	6878      	ldr	r0, [r7, #4]
 8016028:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 801602a:	69bb      	ldr	r3, [r7, #24]
 801602c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8016030:	2b00      	cmp	r3, #0
 8016032:	d026      	beq.n	8016082 <HAL_CAN_IRQHandler+0x14e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	681b      	ldr	r3, [r3, #0]
 8016038:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 801603c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 801603e:	69bb      	ldr	r3, [r7, #24]
 8016040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016044:	2b00      	cmp	r3, #0
 8016046:	d004      	beq.n	8016052 <HAL_CAN_IRQHandler+0x11e>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 8016048:	687b      	ldr	r3, [r7, #4]
 801604a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801604c:	6878      	ldr	r0, [r7, #4]
 801604e:	4798      	blx	r3
 8016050:	e017      	b.n	8016082 <HAL_CAN_IRQHandler+0x14e>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8016052:	69bb      	ldr	r3, [r7, #24]
 8016054:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8016058:	2b00      	cmp	r3, #0
 801605a:	d004      	beq.n	8016066 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 801605c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801605e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8016062:	627b      	str	r3, [r7, #36]	; 0x24
 8016064:	e00d      	b.n	8016082 <HAL_CAN_IRQHandler+0x14e>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8016066:	69bb      	ldr	r3, [r7, #24]
 8016068:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801606c:	2b00      	cmp	r3, #0
 801606e:	d004      	beq.n	801607a <HAL_CAN_IRQHandler+0x146>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8016070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016072:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8016076:	627b      	str	r3, [r7, #36]	; 0x24
 8016078:	e003      	b.n	8016082 <HAL_CAN_IRQHandler+0x14e>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801607e:	6878      	ldr	r0, [r7, #4]
 8016080:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8016082:	6a3b      	ldr	r3, [r7, #32]
 8016084:	f003 0308 	and.w	r3, r3, #8
 8016088:	2b00      	cmp	r3, #0
 801608a:	d00c      	beq.n	80160a6 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 801608c:	697b      	ldr	r3, [r7, #20]
 801608e:	f003 0310 	and.w	r3, r3, #16
 8016092:	2b00      	cmp	r3, #0
 8016094:	d007      	beq.n	80160a6 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8016096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016098:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801609c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	681b      	ldr	r3, [r3, #0]
 80160a2:	2210      	movs	r2, #16
 80160a4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80160a6:	6a3b      	ldr	r3, [r7, #32]
 80160a8:	f003 0304 	and.w	r3, r3, #4
 80160ac:	2b00      	cmp	r3, #0
 80160ae:	d00c      	beq.n	80160ca <HAL_CAN_IRQHandler+0x196>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80160b0:	697b      	ldr	r3, [r7, #20]
 80160b2:	f003 0308 	and.w	r3, r3, #8
 80160b6:	2b00      	cmp	r3, #0
 80160b8:	d007      	beq.n	80160ca <HAL_CAN_IRQHandler+0x196>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	681b      	ldr	r3, [r3, #0]
 80160be:	2208      	movs	r2, #8
 80160c0:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80160c6:	6878      	ldr	r0, [r7, #4]
 80160c8:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80160ca:	6a3b      	ldr	r3, [r7, #32]
 80160cc:	f003 0302 	and.w	r3, r3, #2
 80160d0:	2b00      	cmp	r3, #0
 80160d2:	d00a      	beq.n	80160ea <HAL_CAN_IRQHandler+0x1b6>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80160d4:	687b      	ldr	r3, [r7, #4]
 80160d6:	681b      	ldr	r3, [r3, #0]
 80160d8:	68db      	ldr	r3, [r3, #12]
 80160da:	f003 0303 	and.w	r3, r3, #3
 80160de:	2b00      	cmp	r3, #0
 80160e0:	d003      	beq.n	80160ea <HAL_CAN_IRQHandler+0x1b6>
    {
      /* Receive FIFO 0 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80160e6:	6878      	ldr	r0, [r7, #4]
 80160e8:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80160ea:	6a3b      	ldr	r3, [r7, #32]
 80160ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80160f0:	2b00      	cmp	r3, #0
 80160f2:	d00c      	beq.n	801610e <HAL_CAN_IRQHandler+0x1da>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80160f4:	693b      	ldr	r3, [r7, #16]
 80160f6:	f003 0310 	and.w	r3, r3, #16
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	d007      	beq.n	801610e <HAL_CAN_IRQHandler+0x1da>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80160fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016100:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8016104:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8016106:	687b      	ldr	r3, [r7, #4]
 8016108:	681b      	ldr	r3, [r3, #0]
 801610a:	2210      	movs	r2, #16
 801610c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 801610e:	6a3b      	ldr	r3, [r7, #32]
 8016110:	f003 0320 	and.w	r3, r3, #32
 8016114:	2b00      	cmp	r3, #0
 8016116:	d00c      	beq.n	8016132 <HAL_CAN_IRQHandler+0x1fe>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8016118:	693b      	ldr	r3, [r7, #16]
 801611a:	f003 0308 	and.w	r3, r3, #8
 801611e:	2b00      	cmp	r3, #0
 8016120:	d007      	beq.n	8016132 <HAL_CAN_IRQHandler+0x1fe>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	681b      	ldr	r3, [r3, #0]
 8016126:	2208      	movs	r2, #8
 8016128:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 801612a:	687b      	ldr	r3, [r7, #4]
 801612c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801612e:	6878      	ldr	r0, [r7, #4]
 8016130:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8016132:	6a3b      	ldr	r3, [r7, #32]
 8016134:	f003 0310 	and.w	r3, r3, #16
 8016138:	2b00      	cmp	r3, #0
 801613a:	d00a      	beq.n	8016152 <HAL_CAN_IRQHandler+0x21e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	681b      	ldr	r3, [r3, #0]
 8016140:	691b      	ldr	r3, [r3, #16]
 8016142:	f003 0303 	and.w	r3, r3, #3
 8016146:	2b00      	cmp	r3, #0
 8016148:	d003      	beq.n	8016152 <HAL_CAN_IRQHandler+0x21e>
    {
      /* Receive FIFO 1 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801614e:	6878      	ldr	r0, [r7, #4]
 8016150:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8016152:	6a3b      	ldr	r3, [r7, #32]
 8016154:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016158:	2b00      	cmp	r3, #0
 801615a:	d00c      	beq.n	8016176 <HAL_CAN_IRQHandler+0x242>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 801615c:	69fb      	ldr	r3, [r7, #28]
 801615e:	f003 0310 	and.w	r3, r3, #16
 8016162:	2b00      	cmp	r3, #0
 8016164:	d007      	beq.n	8016176 <HAL_CAN_IRQHandler+0x242>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	681b      	ldr	r3, [r3, #0]
 801616a:	2210      	movs	r2, #16
 801616c:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016172:	6878      	ldr	r0, [r7, #4]
 8016174:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8016176:	6a3b      	ldr	r3, [r7, #32]
 8016178:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801617c:	2b00      	cmp	r3, #0
 801617e:	d00c      	beq.n	801619a <HAL_CAN_IRQHandler+0x266>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8016180:	69fb      	ldr	r3, [r7, #28]
 8016182:	f003 0308 	and.w	r3, r3, #8
 8016186:	2b00      	cmp	r3, #0
 8016188:	d007      	beq.n	801619a <HAL_CAN_IRQHandler+0x266>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	681b      	ldr	r3, [r3, #0]
 801618e:	2208      	movs	r2, #8
 8016190:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 8016192:	687b      	ldr	r3, [r7, #4]
 8016194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016196:	6878      	ldr	r0, [r7, #4]
 8016198:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 801619a:	6a3b      	ldr	r3, [r7, #32]
 801619c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80161a0:	2b00      	cmp	r3, #0
 80161a2:	d07b      	beq.n	801629c <HAL_CAN_IRQHandler+0x368>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80161a4:	69fb      	ldr	r3, [r7, #28]
 80161a6:	f003 0304 	and.w	r3, r3, #4
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	d072      	beq.n	8016294 <HAL_CAN_IRQHandler+0x360>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80161ae:	6a3b      	ldr	r3, [r7, #32]
 80161b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80161b4:	2b00      	cmp	r3, #0
 80161b6:	d008      	beq.n	80161ca <HAL_CAN_IRQHandler+0x296>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80161b8:	68fb      	ldr	r3, [r7, #12]
 80161ba:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80161be:	2b00      	cmp	r3, #0
 80161c0:	d003      	beq.n	80161ca <HAL_CAN_IRQHandler+0x296>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80161c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161c4:	f043 0301 	orr.w	r3, r3, #1
 80161c8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80161ca:	6a3b      	ldr	r3, [r7, #32]
 80161cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	d008      	beq.n	80161e6 <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80161d4:	68fb      	ldr	r3, [r7, #12]
 80161d6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80161da:	2b00      	cmp	r3, #0
 80161dc:	d003      	beq.n	80161e6 <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80161de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161e0:	f043 0302 	orr.w	r3, r3, #2
 80161e4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80161e6:	6a3b      	ldr	r3, [r7, #32]
 80161e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80161ec:	2b00      	cmp	r3, #0
 80161ee:	d008      	beq.n	8016202 <HAL_CAN_IRQHandler+0x2ce>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80161f0:	68fb      	ldr	r3, [r7, #12]
 80161f2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80161f6:	2b00      	cmp	r3, #0
 80161f8:	d003      	beq.n	8016202 <HAL_CAN_IRQHandler+0x2ce>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80161fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161fc:	f043 0304 	orr.w	r3, r3, #4
 8016200:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8016202:	6a3b      	ldr	r3, [r7, #32]
 8016204:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016208:	2b00      	cmp	r3, #0
 801620a:	d043      	beq.n	8016294 <HAL_CAN_IRQHandler+0x360>
          ((esrflags & CAN_ESR_LEC) != 0U))
 801620c:	68fb      	ldr	r3, [r7, #12]
 801620e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8016212:	2b00      	cmp	r3, #0
 8016214:	d03e      	beq.n	8016294 <HAL_CAN_IRQHandler+0x360>
      {
        switch (esrflags & CAN_ESR_LEC)
 8016216:	68fb      	ldr	r3, [r7, #12]
 8016218:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801621c:	2b60      	cmp	r3, #96	; 0x60
 801621e:	d02b      	beq.n	8016278 <HAL_CAN_IRQHandler+0x344>
 8016220:	2b60      	cmp	r3, #96	; 0x60
 8016222:	d82e      	bhi.n	8016282 <HAL_CAN_IRQHandler+0x34e>
 8016224:	2b50      	cmp	r3, #80	; 0x50
 8016226:	d022      	beq.n	801626e <HAL_CAN_IRQHandler+0x33a>
 8016228:	2b50      	cmp	r3, #80	; 0x50
 801622a:	d82a      	bhi.n	8016282 <HAL_CAN_IRQHandler+0x34e>
 801622c:	2b40      	cmp	r3, #64	; 0x40
 801622e:	d019      	beq.n	8016264 <HAL_CAN_IRQHandler+0x330>
 8016230:	2b40      	cmp	r3, #64	; 0x40
 8016232:	d826      	bhi.n	8016282 <HAL_CAN_IRQHandler+0x34e>
 8016234:	2b30      	cmp	r3, #48	; 0x30
 8016236:	d010      	beq.n	801625a <HAL_CAN_IRQHandler+0x326>
 8016238:	2b30      	cmp	r3, #48	; 0x30
 801623a:	d822      	bhi.n	8016282 <HAL_CAN_IRQHandler+0x34e>
 801623c:	2b10      	cmp	r3, #16
 801623e:	d002      	beq.n	8016246 <HAL_CAN_IRQHandler+0x312>
 8016240:	2b20      	cmp	r3, #32
 8016242:	d005      	beq.n	8016250 <HAL_CAN_IRQHandler+0x31c>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8016244:	e01d      	b.n	8016282 <HAL_CAN_IRQHandler+0x34e>
            errorcode |= HAL_CAN_ERROR_STF;
 8016246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016248:	f043 0308 	orr.w	r3, r3, #8
 801624c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 801624e:	e019      	b.n	8016284 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_FOR;
 8016250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016252:	f043 0310 	orr.w	r3, r3, #16
 8016256:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8016258:	e014      	b.n	8016284 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_ACK;
 801625a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801625c:	f043 0320 	orr.w	r3, r3, #32
 8016260:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8016262:	e00f      	b.n	8016284 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BR;
 8016264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016266:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801626a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 801626c:	e00a      	b.n	8016284 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BD;
 801626e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016274:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8016276:	e005      	b.n	8016284 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_CRC;
 8016278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801627a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801627e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8016280:	e000      	b.n	8016284 <HAL_CAN_IRQHandler+0x350>
            break;
 8016282:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	681b      	ldr	r3, [r3, #0]
 8016288:	699a      	ldr	r2, [r3, #24]
 801628a:	687b      	ldr	r3, [r7, #4]
 801628c:	681b      	ldr	r3, [r3, #0]
 801628e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8016292:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	681b      	ldr	r3, [r3, #0]
 8016298:	2204      	movs	r2, #4
 801629a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 801629c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801629e:	2b00      	cmp	r3, #0
 80162a0:	d009      	beq.n	80162b6 <HAL_CAN_IRQHandler+0x382>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80162a2:	687b      	ldr	r3, [r7, #4]
 80162a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80162a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162a8:	431a      	orrs	r2, r3
 80162aa:	687b      	ldr	r3, [r7, #4]
 80162ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 80162ae:	687b      	ldr	r3, [r7, #4]
 80162b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80162b2:	6878      	ldr	r0, [r7, #4]
 80162b4:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80162b6:	bf00      	nop
 80162b8:	3728      	adds	r7, #40	; 0x28
 80162ba:	46bd      	mov	sp, r7
 80162bc:	bd80      	pop	{r7, pc}

080162be <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80162be:	b480      	push	{r7}
 80162c0:	b083      	sub	sp, #12
 80162c2:	af00      	add	r7, sp, #0
 80162c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80162c6:	bf00      	nop
 80162c8:	370c      	adds	r7, #12
 80162ca:	46bd      	mov	sp, r7
 80162cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162d0:	4770      	bx	lr

080162d2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80162d2:	b480      	push	{r7}
 80162d4:	b083      	sub	sp, #12
 80162d6:	af00      	add	r7, sp, #0
 80162d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80162da:	bf00      	nop
 80162dc:	370c      	adds	r7, #12
 80162de:	46bd      	mov	sp, r7
 80162e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162e4:	4770      	bx	lr

080162e6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80162e6:	b480      	push	{r7}
 80162e8:	b083      	sub	sp, #12
 80162ea:	af00      	add	r7, sp, #0
 80162ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80162ee:	bf00      	nop
 80162f0:	370c      	adds	r7, #12
 80162f2:	46bd      	mov	sp, r7
 80162f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162f8:	4770      	bx	lr

080162fa <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80162fa:	b480      	push	{r7}
 80162fc:	b083      	sub	sp, #12
 80162fe:	af00      	add	r7, sp, #0
 8016300:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8016302:	bf00      	nop
 8016304:	370c      	adds	r7, #12
 8016306:	46bd      	mov	sp, r7
 8016308:	f85d 7b04 	ldr.w	r7, [sp], #4
 801630c:	4770      	bx	lr

0801630e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 801630e:	b480      	push	{r7}
 8016310:	b083      	sub	sp, #12
 8016312:	af00      	add	r7, sp, #0
 8016314:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8016316:	bf00      	nop
 8016318:	370c      	adds	r7, #12
 801631a:	46bd      	mov	sp, r7
 801631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016320:	4770      	bx	lr

08016322 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8016322:	b480      	push	{r7}
 8016324:	b083      	sub	sp, #12
 8016326:	af00      	add	r7, sp, #0
 8016328:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 801632a:	bf00      	nop
 801632c:	370c      	adds	r7, #12
 801632e:	46bd      	mov	sp, r7
 8016330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016334:	4770      	bx	lr

08016336 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8016336:	b480      	push	{r7}
 8016338:	b083      	sub	sp, #12
 801633a:	af00      	add	r7, sp, #0
 801633c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 801633e:	bf00      	nop
 8016340:	370c      	adds	r7, #12
 8016342:	46bd      	mov	sp, r7
 8016344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016348:	4770      	bx	lr

0801634a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 801634a:	b480      	push	{r7}
 801634c:	b083      	sub	sp, #12
 801634e:	af00      	add	r7, sp, #0
 8016350:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8016352:	bf00      	nop
 8016354:	370c      	adds	r7, #12
 8016356:	46bd      	mov	sp, r7
 8016358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801635c:	4770      	bx	lr

0801635e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 801635e:	b480      	push	{r7}
 8016360:	b083      	sub	sp, #12
 8016362:	af00      	add	r7, sp, #0
 8016364:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8016366:	bf00      	nop
 8016368:	370c      	adds	r7, #12
 801636a:	46bd      	mov	sp, r7
 801636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016370:	4770      	bx	lr

08016372 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8016372:	b480      	push	{r7}
 8016374:	b083      	sub	sp, #12
 8016376:	af00      	add	r7, sp, #0
 8016378:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 801637a:	bf00      	nop
 801637c:	370c      	adds	r7, #12
 801637e:	46bd      	mov	sp, r7
 8016380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016384:	4770      	bx	lr

08016386 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8016386:	b480      	push	{r7}
 8016388:	b083      	sub	sp, #12
 801638a:	af00      	add	r7, sp, #0
 801638c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 801638e:	bf00      	nop
 8016390:	370c      	adds	r7, #12
 8016392:	46bd      	mov	sp, r7
 8016394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016398:	4770      	bx	lr
	...

0801639c <__NVIC_SetPriorityGrouping>:
{
 801639c:	b480      	push	{r7}
 801639e:	b085      	sub	sp, #20
 80163a0:	af00      	add	r7, sp, #0
 80163a2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	f003 0307 	and.w	r3, r3, #7
 80163aa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80163ac:	4b0b      	ldr	r3, [pc, #44]	; (80163dc <__NVIC_SetPriorityGrouping+0x40>)
 80163ae:	68db      	ldr	r3, [r3, #12]
 80163b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80163b2:	68ba      	ldr	r2, [r7, #8]
 80163b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80163b8:	4013      	ands	r3, r2
 80163ba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80163bc:	68fb      	ldr	r3, [r7, #12]
 80163be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80163c0:	68bb      	ldr	r3, [r7, #8]
 80163c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80163c4:	4b06      	ldr	r3, [pc, #24]	; (80163e0 <__NVIC_SetPriorityGrouping+0x44>)
 80163c6:	4313      	orrs	r3, r2
 80163c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80163ca:	4a04      	ldr	r2, [pc, #16]	; (80163dc <__NVIC_SetPriorityGrouping+0x40>)
 80163cc:	68bb      	ldr	r3, [r7, #8]
 80163ce:	60d3      	str	r3, [r2, #12]
}
 80163d0:	bf00      	nop
 80163d2:	3714      	adds	r7, #20
 80163d4:	46bd      	mov	sp, r7
 80163d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163da:	4770      	bx	lr
 80163dc:	e000ed00 	.word	0xe000ed00
 80163e0:	05fa0000 	.word	0x05fa0000

080163e4 <__NVIC_GetPriorityGrouping>:
{
 80163e4:	b480      	push	{r7}
 80163e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80163e8:	4b04      	ldr	r3, [pc, #16]	; (80163fc <__NVIC_GetPriorityGrouping+0x18>)
 80163ea:	68db      	ldr	r3, [r3, #12]
 80163ec:	0a1b      	lsrs	r3, r3, #8
 80163ee:	f003 0307 	and.w	r3, r3, #7
}
 80163f2:	4618      	mov	r0, r3
 80163f4:	46bd      	mov	sp, r7
 80163f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163fa:	4770      	bx	lr
 80163fc:	e000ed00 	.word	0xe000ed00

08016400 <__NVIC_EnableIRQ>:
{
 8016400:	b480      	push	{r7}
 8016402:	b083      	sub	sp, #12
 8016404:	af00      	add	r7, sp, #0
 8016406:	4603      	mov	r3, r0
 8016408:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801640a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801640e:	2b00      	cmp	r3, #0
 8016410:	db0b      	blt.n	801642a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8016412:	79fb      	ldrb	r3, [r7, #7]
 8016414:	f003 021f 	and.w	r2, r3, #31
 8016418:	4907      	ldr	r1, [pc, #28]	; (8016438 <__NVIC_EnableIRQ+0x38>)
 801641a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801641e:	095b      	lsrs	r3, r3, #5
 8016420:	2001      	movs	r0, #1
 8016422:	fa00 f202 	lsl.w	r2, r0, r2
 8016426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801642a:	bf00      	nop
 801642c:	370c      	adds	r7, #12
 801642e:	46bd      	mov	sp, r7
 8016430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016434:	4770      	bx	lr
 8016436:	bf00      	nop
 8016438:	e000e100 	.word	0xe000e100

0801643c <__NVIC_SetPriority>:
{
 801643c:	b480      	push	{r7}
 801643e:	b083      	sub	sp, #12
 8016440:	af00      	add	r7, sp, #0
 8016442:	4603      	mov	r3, r0
 8016444:	6039      	str	r1, [r7, #0]
 8016446:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801644c:	2b00      	cmp	r3, #0
 801644e:	db0a      	blt.n	8016466 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016450:	683b      	ldr	r3, [r7, #0]
 8016452:	b2da      	uxtb	r2, r3
 8016454:	490c      	ldr	r1, [pc, #48]	; (8016488 <__NVIC_SetPriority+0x4c>)
 8016456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801645a:	0112      	lsls	r2, r2, #4
 801645c:	b2d2      	uxtb	r2, r2
 801645e:	440b      	add	r3, r1
 8016460:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8016464:	e00a      	b.n	801647c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016466:	683b      	ldr	r3, [r7, #0]
 8016468:	b2da      	uxtb	r2, r3
 801646a:	4908      	ldr	r1, [pc, #32]	; (801648c <__NVIC_SetPriority+0x50>)
 801646c:	79fb      	ldrb	r3, [r7, #7]
 801646e:	f003 030f 	and.w	r3, r3, #15
 8016472:	3b04      	subs	r3, #4
 8016474:	0112      	lsls	r2, r2, #4
 8016476:	b2d2      	uxtb	r2, r2
 8016478:	440b      	add	r3, r1
 801647a:	761a      	strb	r2, [r3, #24]
}
 801647c:	bf00      	nop
 801647e:	370c      	adds	r7, #12
 8016480:	46bd      	mov	sp, r7
 8016482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016486:	4770      	bx	lr
 8016488:	e000e100 	.word	0xe000e100
 801648c:	e000ed00 	.word	0xe000ed00

08016490 <NVIC_EncodePriority>:
{
 8016490:	b480      	push	{r7}
 8016492:	b089      	sub	sp, #36	; 0x24
 8016494:	af00      	add	r7, sp, #0
 8016496:	60f8      	str	r0, [r7, #12]
 8016498:	60b9      	str	r1, [r7, #8]
 801649a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801649c:	68fb      	ldr	r3, [r7, #12]
 801649e:	f003 0307 	and.w	r3, r3, #7
 80164a2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80164a4:	69fb      	ldr	r3, [r7, #28]
 80164a6:	f1c3 0307 	rsb	r3, r3, #7
 80164aa:	2b04      	cmp	r3, #4
 80164ac:	bf28      	it	cs
 80164ae:	2304      	movcs	r3, #4
 80164b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80164b2:	69fb      	ldr	r3, [r7, #28]
 80164b4:	3304      	adds	r3, #4
 80164b6:	2b06      	cmp	r3, #6
 80164b8:	d902      	bls.n	80164c0 <NVIC_EncodePriority+0x30>
 80164ba:	69fb      	ldr	r3, [r7, #28]
 80164bc:	3b03      	subs	r3, #3
 80164be:	e000      	b.n	80164c2 <NVIC_EncodePriority+0x32>
 80164c0:	2300      	movs	r3, #0
 80164c2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80164c4:	f04f 32ff 	mov.w	r2, #4294967295
 80164c8:	69bb      	ldr	r3, [r7, #24]
 80164ca:	fa02 f303 	lsl.w	r3, r2, r3
 80164ce:	43da      	mvns	r2, r3
 80164d0:	68bb      	ldr	r3, [r7, #8]
 80164d2:	401a      	ands	r2, r3
 80164d4:	697b      	ldr	r3, [r7, #20]
 80164d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80164d8:	f04f 31ff 	mov.w	r1, #4294967295
 80164dc:	697b      	ldr	r3, [r7, #20]
 80164de:	fa01 f303 	lsl.w	r3, r1, r3
 80164e2:	43d9      	mvns	r1, r3
 80164e4:	687b      	ldr	r3, [r7, #4]
 80164e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80164e8:	4313      	orrs	r3, r2
}
 80164ea:	4618      	mov	r0, r3
 80164ec:	3724      	adds	r7, #36	; 0x24
 80164ee:	46bd      	mov	sp, r7
 80164f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164f4:	4770      	bx	lr
	...

080164f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80164f8:	b580      	push	{r7, lr}
 80164fa:	b082      	sub	sp, #8
 80164fc:	af00      	add	r7, sp, #0
 80164fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	3b01      	subs	r3, #1
 8016504:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8016508:	d301      	bcc.n	801650e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801650a:	2301      	movs	r3, #1
 801650c:	e00f      	b.n	801652e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801650e:	4a0a      	ldr	r2, [pc, #40]	; (8016538 <SysTick_Config+0x40>)
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	3b01      	subs	r3, #1
 8016514:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8016516:	210f      	movs	r1, #15
 8016518:	f04f 30ff 	mov.w	r0, #4294967295
 801651c:	f7ff ff8e 	bl	801643c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8016520:	4b05      	ldr	r3, [pc, #20]	; (8016538 <SysTick_Config+0x40>)
 8016522:	2200      	movs	r2, #0
 8016524:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8016526:	4b04      	ldr	r3, [pc, #16]	; (8016538 <SysTick_Config+0x40>)
 8016528:	2207      	movs	r2, #7
 801652a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801652c:	2300      	movs	r3, #0
}
 801652e:	4618      	mov	r0, r3
 8016530:	3708      	adds	r7, #8
 8016532:	46bd      	mov	sp, r7
 8016534:	bd80      	pop	{r7, pc}
 8016536:	bf00      	nop
 8016538:	e000e010 	.word	0xe000e010

0801653c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801653c:	b580      	push	{r7, lr}
 801653e:	b082      	sub	sp, #8
 8016540:	af00      	add	r7, sp, #0
 8016542:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8016544:	6878      	ldr	r0, [r7, #4]
 8016546:	f7ff ff29 	bl	801639c <__NVIC_SetPriorityGrouping>
}
 801654a:	bf00      	nop
 801654c:	3708      	adds	r7, #8
 801654e:	46bd      	mov	sp, r7
 8016550:	bd80      	pop	{r7, pc}

08016552 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8016552:	b580      	push	{r7, lr}
 8016554:	b086      	sub	sp, #24
 8016556:	af00      	add	r7, sp, #0
 8016558:	4603      	mov	r3, r0
 801655a:	60b9      	str	r1, [r7, #8]
 801655c:	607a      	str	r2, [r7, #4]
 801655e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8016560:	2300      	movs	r3, #0
 8016562:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8016564:	f7ff ff3e 	bl	80163e4 <__NVIC_GetPriorityGrouping>
 8016568:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801656a:	687a      	ldr	r2, [r7, #4]
 801656c:	68b9      	ldr	r1, [r7, #8]
 801656e:	6978      	ldr	r0, [r7, #20]
 8016570:	f7ff ff8e 	bl	8016490 <NVIC_EncodePriority>
 8016574:	4602      	mov	r2, r0
 8016576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801657a:	4611      	mov	r1, r2
 801657c:	4618      	mov	r0, r3
 801657e:	f7ff ff5d 	bl	801643c <__NVIC_SetPriority>
}
 8016582:	bf00      	nop
 8016584:	3718      	adds	r7, #24
 8016586:	46bd      	mov	sp, r7
 8016588:	bd80      	pop	{r7, pc}

0801658a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801658a:	b580      	push	{r7, lr}
 801658c:	b082      	sub	sp, #8
 801658e:	af00      	add	r7, sp, #0
 8016590:	4603      	mov	r3, r0
 8016592:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8016594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016598:	4618      	mov	r0, r3
 801659a:	f7ff ff31 	bl	8016400 <__NVIC_EnableIRQ>
}
 801659e:	bf00      	nop
 80165a0:	3708      	adds	r7, #8
 80165a2:	46bd      	mov	sp, r7
 80165a4:	bd80      	pop	{r7, pc}

080165a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80165a6:	b580      	push	{r7, lr}
 80165a8:	b082      	sub	sp, #8
 80165aa:	af00      	add	r7, sp, #0
 80165ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80165ae:	6878      	ldr	r0, [r7, #4]
 80165b0:	f7ff ffa2 	bl	80164f8 <SysTick_Config>
 80165b4:	4603      	mov	r3, r0
}
 80165b6:	4618      	mov	r0, r3
 80165b8:	3708      	adds	r7, #8
 80165ba:	46bd      	mov	sp, r7
 80165bc:	bd80      	pop	{r7, pc}
	...

080165c0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80165c0:	b480      	push	{r7}
 80165c2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80165c4:	f3bf 8f5f 	dmb	sy
}
 80165c8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80165ca:	4b07      	ldr	r3, [pc, #28]	; (80165e8 <HAL_MPU_Disable+0x28>)
 80165cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80165ce:	4a06      	ldr	r2, [pc, #24]	; (80165e8 <HAL_MPU_Disable+0x28>)
 80165d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80165d4:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80165d6:	4b05      	ldr	r3, [pc, #20]	; (80165ec <HAL_MPU_Disable+0x2c>)
 80165d8:	2200      	movs	r2, #0
 80165da:	605a      	str	r2, [r3, #4]
}
 80165dc:	bf00      	nop
 80165de:	46bd      	mov	sp, r7
 80165e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165e4:	4770      	bx	lr
 80165e6:	bf00      	nop
 80165e8:	e000ed00 	.word	0xe000ed00
 80165ec:	e000ed90 	.word	0xe000ed90

080165f0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80165f0:	b480      	push	{r7}
 80165f2:	b083      	sub	sp, #12
 80165f4:	af00      	add	r7, sp, #0
 80165f6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80165f8:	4a0b      	ldr	r2, [pc, #44]	; (8016628 <HAL_MPU_Enable+0x38>)
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	f043 0301 	orr.w	r3, r3, #1
 8016600:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8016602:	4b0a      	ldr	r3, [pc, #40]	; (801662c <HAL_MPU_Enable+0x3c>)
 8016604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016606:	4a09      	ldr	r2, [pc, #36]	; (801662c <HAL_MPU_Enable+0x3c>)
 8016608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801660c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 801660e:	f3bf 8f4f 	dsb	sy
}
 8016612:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8016614:	f3bf 8f6f 	isb	sy
}
 8016618:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 801661a:	bf00      	nop
 801661c:	370c      	adds	r7, #12
 801661e:	46bd      	mov	sp, r7
 8016620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016624:	4770      	bx	lr
 8016626:	bf00      	nop
 8016628:	e000ed90 	.word	0xe000ed90
 801662c:	e000ed00 	.word	0xe000ed00

08016630 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8016630:	b480      	push	{r7}
 8016632:	b083      	sub	sp, #12
 8016634:	af00      	add	r7, sp, #0
 8016636:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8016638:	687b      	ldr	r3, [r7, #4]
 801663a:	785a      	ldrb	r2, [r3, #1]
 801663c:	4b1d      	ldr	r3, [pc, #116]	; (80166b4 <HAL_MPU_ConfigRegion+0x84>)
 801663e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8016640:	687b      	ldr	r3, [r7, #4]
 8016642:	781b      	ldrb	r3, [r3, #0]
 8016644:	2b00      	cmp	r3, #0
 8016646:	d029      	beq.n	801669c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8016648:	4a1a      	ldr	r2, [pc, #104]	; (80166b4 <HAL_MPU_ConfigRegion+0x84>)
 801664a:	687b      	ldr	r3, [r7, #4]
 801664c:	685b      	ldr	r3, [r3, #4]
 801664e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	7b1b      	ldrb	r3, [r3, #12]
 8016654:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8016656:	687b      	ldr	r3, [r7, #4]
 8016658:	7adb      	ldrb	r3, [r3, #11]
 801665a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801665c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 801665e:	687b      	ldr	r3, [r7, #4]
 8016660:	7a9b      	ldrb	r3, [r3, #10]
 8016662:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8016664:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	7b5b      	ldrb	r3, [r3, #13]
 801666a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 801666c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 801666e:	687b      	ldr	r3, [r7, #4]
 8016670:	7b9b      	ldrb	r3, [r3, #14]
 8016672:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8016674:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8016676:	687b      	ldr	r3, [r7, #4]
 8016678:	7bdb      	ldrb	r3, [r3, #15]
 801667a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 801667c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 801667e:	687b      	ldr	r3, [r7, #4]
 8016680:	7a5b      	ldrb	r3, [r3, #9]
 8016682:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8016684:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8016686:	687b      	ldr	r3, [r7, #4]
 8016688:	7a1b      	ldrb	r3, [r3, #8]
 801668a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 801668c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 801668e:	687a      	ldr	r2, [r7, #4]
 8016690:	7812      	ldrb	r2, [r2, #0]
 8016692:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8016694:	4a07      	ldr	r2, [pc, #28]	; (80166b4 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8016696:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8016698:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 801669a:	e005      	b.n	80166a8 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 801669c:	4b05      	ldr	r3, [pc, #20]	; (80166b4 <HAL_MPU_ConfigRegion+0x84>)
 801669e:	2200      	movs	r2, #0
 80166a0:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80166a2:	4b04      	ldr	r3, [pc, #16]	; (80166b4 <HAL_MPU_ConfigRegion+0x84>)
 80166a4:	2200      	movs	r2, #0
 80166a6:	611a      	str	r2, [r3, #16]
}
 80166a8:	bf00      	nop
 80166aa:	370c      	adds	r7, #12
 80166ac:	46bd      	mov	sp, r7
 80166ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166b2:	4770      	bx	lr
 80166b4:	e000ed90 	.word	0xe000ed90

080166b8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80166b8:	b580      	push	{r7, lr}
 80166ba:	b084      	sub	sp, #16
 80166bc:	af00      	add	r7, sp, #0
 80166be:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80166c4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80166c6:	f7fe ff63 	bl	8015590 <HAL_GetTick>
 80166ca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80166d2:	b2db      	uxtb	r3, r3
 80166d4:	2b02      	cmp	r3, #2
 80166d6:	d008      	beq.n	80166ea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80166d8:	687b      	ldr	r3, [r7, #4]
 80166da:	2280      	movs	r2, #128	; 0x80
 80166dc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	2200      	movs	r2, #0
 80166e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80166e6:	2301      	movs	r3, #1
 80166e8:	e052      	b.n	8016790 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	681b      	ldr	r3, [r3, #0]
 80166ee:	681a      	ldr	r2, [r3, #0]
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	681b      	ldr	r3, [r3, #0]
 80166f4:	f022 0216 	bic.w	r2, r2, #22
 80166f8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80166fa:	687b      	ldr	r3, [r7, #4]
 80166fc:	681b      	ldr	r3, [r3, #0]
 80166fe:	695a      	ldr	r2, [r3, #20]
 8016700:	687b      	ldr	r3, [r7, #4]
 8016702:	681b      	ldr	r3, [r3, #0]
 8016704:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016708:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801670a:	687b      	ldr	r3, [r7, #4]
 801670c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801670e:	2b00      	cmp	r3, #0
 8016710:	d103      	bne.n	801671a <HAL_DMA_Abort+0x62>
 8016712:	687b      	ldr	r3, [r7, #4]
 8016714:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016716:	2b00      	cmp	r3, #0
 8016718:	d007      	beq.n	801672a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	681b      	ldr	r3, [r3, #0]
 801671e:	681a      	ldr	r2, [r3, #0]
 8016720:	687b      	ldr	r3, [r7, #4]
 8016722:	681b      	ldr	r3, [r3, #0]
 8016724:	f022 0208 	bic.w	r2, r2, #8
 8016728:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	681b      	ldr	r3, [r3, #0]
 801672e:	681a      	ldr	r2, [r3, #0]
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	681b      	ldr	r3, [r3, #0]
 8016734:	f022 0201 	bic.w	r2, r2, #1
 8016738:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801673a:	e013      	b.n	8016764 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801673c:	f7fe ff28 	bl	8015590 <HAL_GetTick>
 8016740:	4602      	mov	r2, r0
 8016742:	68bb      	ldr	r3, [r7, #8]
 8016744:	1ad3      	subs	r3, r2, r3
 8016746:	2b05      	cmp	r3, #5
 8016748:	d90c      	bls.n	8016764 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801674a:	687b      	ldr	r3, [r7, #4]
 801674c:	2220      	movs	r2, #32
 801674e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8016750:	687b      	ldr	r3, [r7, #4]
 8016752:	2203      	movs	r2, #3
 8016754:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8016758:	687b      	ldr	r3, [r7, #4]
 801675a:	2200      	movs	r2, #0
 801675c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8016760:	2303      	movs	r3, #3
 8016762:	e015      	b.n	8016790 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	681b      	ldr	r3, [r3, #0]
 8016768:	681b      	ldr	r3, [r3, #0]
 801676a:	f003 0301 	and.w	r3, r3, #1
 801676e:	2b00      	cmp	r3, #0
 8016770:	d1e4      	bne.n	801673c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016776:	223f      	movs	r2, #63	; 0x3f
 8016778:	409a      	lsls	r2, r3
 801677a:	68fb      	ldr	r3, [r7, #12]
 801677c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 801677e:	687b      	ldr	r3, [r7, #4]
 8016780:	2201      	movs	r2, #1
 8016782:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8016786:	687b      	ldr	r3, [r7, #4]
 8016788:	2200      	movs	r2, #0
 801678a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 801678e:	2300      	movs	r3, #0
}
 8016790:	4618      	mov	r0, r3
 8016792:	3710      	adds	r7, #16
 8016794:	46bd      	mov	sp, r7
 8016796:	bd80      	pop	{r7, pc}

08016798 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8016798:	b480      	push	{r7}
 801679a:	b083      	sub	sp, #12
 801679c:	af00      	add	r7, sp, #0
 801679e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80167a6:	b2db      	uxtb	r3, r3
 80167a8:	2b02      	cmp	r3, #2
 80167aa:	d004      	beq.n	80167b6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	2280      	movs	r2, #128	; 0x80
 80167b0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80167b2:	2301      	movs	r3, #1
 80167b4:	e00c      	b.n	80167d0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80167b6:	687b      	ldr	r3, [r7, #4]
 80167b8:	2205      	movs	r2, #5
 80167ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80167be:	687b      	ldr	r3, [r7, #4]
 80167c0:	681b      	ldr	r3, [r3, #0]
 80167c2:	681a      	ldr	r2, [r3, #0]
 80167c4:	687b      	ldr	r3, [r7, #4]
 80167c6:	681b      	ldr	r3, [r3, #0]
 80167c8:	f022 0201 	bic.w	r2, r2, #1
 80167cc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80167ce:	2300      	movs	r3, #0
}
 80167d0:	4618      	mov	r0, r3
 80167d2:	370c      	adds	r7, #12
 80167d4:	46bd      	mov	sp, r7
 80167d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167da:	4770      	bx	lr

080167dc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80167dc:	b580      	push	{r7, lr}
 80167de:	b084      	sub	sp, #16
 80167e0:	af00      	add	r7, sp, #0
 80167e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80167e4:	687b      	ldr	r3, [r7, #4]
 80167e6:	2b00      	cmp	r3, #0
 80167e8:	d101      	bne.n	80167ee <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80167ea:	2301      	movs	r3, #1
 80167ec:	e06a      	b.n	80168c4 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80167ee:	687b      	ldr	r3, [r7, #4]
 80167f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80167f4:	2b00      	cmp	r3, #0
 80167f6:	d106      	bne.n	8016806 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80167f8:	687b      	ldr	r3, [r7, #4]
 80167fa:	2223      	movs	r2, #35	; 0x23
 80167fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8016800:	6878      	ldr	r0, [r7, #4]
 8016802:	f006 fbaf 	bl	801cf64 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8016806:	4b31      	ldr	r3, [pc, #196]	; (80168cc <HAL_ETH_Init+0xf0>)
 8016808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801680a:	4a30      	ldr	r2, [pc, #192]	; (80168cc <HAL_ETH_Init+0xf0>)
 801680c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8016810:	6453      	str	r3, [r2, #68]	; 0x44
 8016812:	4b2e      	ldr	r3, [pc, #184]	; (80168cc <HAL_ETH_Init+0xf0>)
 8016814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016816:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801681a:	60bb      	str	r3, [r7, #8]
 801681c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 801681e:	4b2c      	ldr	r3, [pc, #176]	; (80168d0 <HAL_ETH_Init+0xf4>)
 8016820:	685b      	ldr	r3, [r3, #4]
 8016822:	4a2b      	ldr	r2, [pc, #172]	; (80168d0 <HAL_ETH_Init+0xf4>)
 8016824:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8016828:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 801682a:	4b29      	ldr	r3, [pc, #164]	; (80168d0 <HAL_ETH_Init+0xf4>)
 801682c:	685a      	ldr	r2, [r3, #4]
 801682e:	687b      	ldr	r3, [r7, #4]
 8016830:	689b      	ldr	r3, [r3, #8]
 8016832:	4927      	ldr	r1, [pc, #156]	; (80168d0 <HAL_ETH_Init+0xf4>)
 8016834:	4313      	orrs	r3, r2
 8016836:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8016838:	4b25      	ldr	r3, [pc, #148]	; (80168d0 <HAL_ETH_Init+0xf4>)
 801683a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	681b      	ldr	r3, [r3, #0]
 8016840:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016844:	681b      	ldr	r3, [r3, #0]
 8016846:	687a      	ldr	r2, [r7, #4]
 8016848:	6812      	ldr	r2, [r2, #0]
 801684a:	f043 0301 	orr.w	r3, r3, #1
 801684e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8016852:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8016854:	f7fe fe9c 	bl	8015590 <HAL_GetTick>
 8016858:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 801685a:	e011      	b.n	8016880 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 801685c:	f7fe fe98 	bl	8015590 <HAL_GetTick>
 8016860:	4602      	mov	r2, r0
 8016862:	68fb      	ldr	r3, [r7, #12]
 8016864:	1ad3      	subs	r3, r2, r3
 8016866:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 801686a:	d909      	bls.n	8016880 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	2204      	movs	r2, #4
 8016870:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8016874:	687b      	ldr	r3, [r7, #4]
 8016876:	22e0      	movs	r2, #224	; 0xe0
 8016878:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 801687c:	2301      	movs	r3, #1
 801687e:	e021      	b.n	80168c4 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8016880:	687b      	ldr	r3, [r7, #4]
 8016882:	681b      	ldr	r3, [r3, #0]
 8016884:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016888:	681b      	ldr	r3, [r3, #0]
 801688a:	f003 0301 	and.w	r3, r3, #1
 801688e:	2b00      	cmp	r3, #0
 8016890:	d1e4      	bne.n	801685c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8016892:	6878      	ldr	r0, [r7, #4]
 8016894:	f000 fee4 	bl	8017660 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8016898:	6878      	ldr	r0, [r7, #4]
 801689a:	f000 ff8b 	bl	80177b4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 801689e:	6878      	ldr	r0, [r7, #4]
 80168a0:	f000 ffe1 	bl	8017866 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80168a4:	687b      	ldr	r3, [r7, #4]
 80168a6:	685b      	ldr	r3, [r3, #4]
 80168a8:	461a      	mov	r2, r3
 80168aa:	2100      	movs	r1, #0
 80168ac:	6878      	ldr	r0, [r7, #4]
 80168ae:	f000 ff49 	bl	8017744 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	2200      	movs	r2, #0
 80168b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80168ba:	687b      	ldr	r3, [r7, #4]
 80168bc:	2210      	movs	r2, #16
 80168be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80168c2:	2300      	movs	r3, #0
}
 80168c4:	4618      	mov	r0, r3
 80168c6:	3710      	adds	r7, #16
 80168c8:	46bd      	mov	sp, r7
 80168ca:	bd80      	pop	{r7, pc}
 80168cc:	40023800 	.word	0x40023800
 80168d0:	40013800 	.word	0x40013800

080168d4 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80168d4:	b580      	push	{r7, lr}
 80168d6:	b084      	sub	sp, #16
 80168d8:	af00      	add	r7, sp, #0
 80168da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80168e2:	2b10      	cmp	r3, #16
 80168e4:	d150      	bne.n	8016988 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80168e6:	687b      	ldr	r3, [r7, #4]
 80168e8:	2223      	movs	r2, #35	; 0x23
 80168ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80168ee:	687b      	ldr	r3, [r7, #4]
 80168f0:	2204      	movs	r2, #4
 80168f2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80168f4:	6878      	ldr	r0, [r7, #4]
 80168f6:	f000 f9fd 	bl	8016cf4 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	681b      	ldr	r3, [r3, #0]
 80168fe:	681a      	ldr	r2, [r3, #0]
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	681b      	ldr	r3, [r3, #0]
 8016904:	f042 0208 	orr.w	r2, r2, #8
 8016908:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 801690a:	687b      	ldr	r3, [r7, #4]
 801690c:	681b      	ldr	r3, [r3, #0]
 801690e:	681b      	ldr	r3, [r3, #0]
 8016910:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8016912:	2001      	movs	r0, #1
 8016914:	f7fe fe48 	bl	80155a8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	681b      	ldr	r3, [r3, #0]
 801691c:	68fa      	ldr	r2, [r7, #12]
 801691e:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	681b      	ldr	r3, [r3, #0]
 8016924:	681a      	ldr	r2, [r3, #0]
 8016926:	687b      	ldr	r3, [r7, #4]
 8016928:	681b      	ldr	r3, [r3, #0]
 801692a:	f042 0204 	orr.w	r2, r2, #4
 801692e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	681b      	ldr	r3, [r3, #0]
 8016934:	681b      	ldr	r3, [r3, #0]
 8016936:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8016938:	2001      	movs	r0, #1
 801693a:	f7fe fe35 	bl	80155a8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 801693e:	687b      	ldr	r3, [r7, #4]
 8016940:	681b      	ldr	r3, [r3, #0]
 8016942:	68fa      	ldr	r2, [r7, #12]
 8016944:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8016946:	6878      	ldr	r0, [r7, #4]
 8016948:	f000 fd2a 	bl	80173a0 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 801694c:	687b      	ldr	r3, [r7, #4]
 801694e:	681b      	ldr	r3, [r3, #0]
 8016950:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016954:	699b      	ldr	r3, [r3, #24]
 8016956:	687a      	ldr	r2, [r7, #4]
 8016958:	6812      	ldr	r2, [r2, #0]
 801695a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801695e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8016962:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8016964:	687b      	ldr	r3, [r7, #4]
 8016966:	681b      	ldr	r3, [r3, #0]
 8016968:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801696c:	699b      	ldr	r3, [r3, #24]
 801696e:	687a      	ldr	r2, [r7, #4]
 8016970:	6812      	ldr	r2, [r2, #0]
 8016972:	f043 0302 	orr.w	r3, r3, #2
 8016976:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801697a:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	2223      	movs	r2, #35	; 0x23
 8016980:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8016984:	2300      	movs	r3, #0
 8016986:	e000      	b.n	801698a <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8016988:	2301      	movs	r3, #1
  }
}
 801698a:	4618      	mov	r0, r3
 801698c:	3710      	adds	r7, #16
 801698e:	46bd      	mov	sp, r7
 8016990:	bd80      	pop	{r7, pc}

08016992 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8016992:	b580      	push	{r7, lr}
 8016994:	b084      	sub	sp, #16
 8016996:	af00      	add	r7, sp, #0
 8016998:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 801699a:	687b      	ldr	r3, [r7, #4]
 801699c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80169a0:	2b23      	cmp	r3, #35	; 0x23
 80169a2:	d14a      	bne.n	8016a3a <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80169a4:	687b      	ldr	r3, [r7, #4]
 80169a6:	2223      	movs	r2, #35	; 0x23
 80169a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80169ac:	687b      	ldr	r3, [r7, #4]
 80169ae:	681b      	ldr	r3, [r3, #0]
 80169b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80169b4:	699b      	ldr	r3, [r3, #24]
 80169b6:	687a      	ldr	r2, [r7, #4]
 80169b8:	6812      	ldr	r2, [r2, #0]
 80169ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80169be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80169c2:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80169c4:	687b      	ldr	r3, [r7, #4]
 80169c6:	681b      	ldr	r3, [r3, #0]
 80169c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80169cc:	699b      	ldr	r3, [r3, #24]
 80169ce:	687a      	ldr	r2, [r7, #4]
 80169d0:	6812      	ldr	r2, [r2, #0]
 80169d2:	f023 0302 	bic.w	r3, r3, #2
 80169d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80169da:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80169dc:	687b      	ldr	r3, [r7, #4]
 80169de:	681b      	ldr	r3, [r3, #0]
 80169e0:	681a      	ldr	r2, [r3, #0]
 80169e2:	687b      	ldr	r3, [r7, #4]
 80169e4:	681b      	ldr	r3, [r3, #0]
 80169e6:	f022 0204 	bic.w	r2, r2, #4
 80169ea:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80169ec:	687b      	ldr	r3, [r7, #4]
 80169ee:	681b      	ldr	r3, [r3, #0]
 80169f0:	681b      	ldr	r3, [r3, #0]
 80169f2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80169f4:	2001      	movs	r0, #1
 80169f6:	f7fe fdd7 	bl	80155a8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80169fa:	687b      	ldr	r3, [r7, #4]
 80169fc:	681b      	ldr	r3, [r3, #0]
 80169fe:	68fa      	ldr	r2, [r7, #12]
 8016a00:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8016a02:	6878      	ldr	r0, [r7, #4]
 8016a04:	f000 fccc 	bl	80173a0 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8016a08:	687b      	ldr	r3, [r7, #4]
 8016a0a:	681b      	ldr	r3, [r3, #0]
 8016a0c:	681a      	ldr	r2, [r3, #0]
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	681b      	ldr	r3, [r3, #0]
 8016a12:	f022 0208 	bic.w	r2, r2, #8
 8016a16:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	681b      	ldr	r3, [r3, #0]
 8016a1c:	681b      	ldr	r3, [r3, #0]
 8016a1e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8016a20:	2001      	movs	r0, #1
 8016a22:	f7fe fdc1 	bl	80155a8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8016a26:	687b      	ldr	r3, [r7, #4]
 8016a28:	681b      	ldr	r3, [r3, #0]
 8016a2a:	68fa      	ldr	r2, [r7, #12]
 8016a2c:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8016a2e:	687b      	ldr	r3, [r7, #4]
 8016a30:	2210      	movs	r2, #16
 8016a32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8016a36:	2300      	movs	r3, #0
 8016a38:	e000      	b.n	8016a3c <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8016a3a:	2301      	movs	r3, #1
  }
}
 8016a3c:	4618      	mov	r0, r3
 8016a3e:	3710      	adds	r7, #16
 8016a40:	46bd      	mov	sp, r7
 8016a42:	bd80      	pop	{r7, pc}

08016a44 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8016a44:	b580      	push	{r7, lr}
 8016a46:	b086      	sub	sp, #24
 8016a48:	af00      	add	r7, sp, #0
 8016a4a:	60f8      	str	r0, [r7, #12]
 8016a4c:	60b9      	str	r1, [r7, #8]
 8016a4e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8016a50:	68bb      	ldr	r3, [r7, #8]
 8016a52:	2b00      	cmp	r3, #0
 8016a54:	d109      	bne.n	8016a6a <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8016a56:	68fb      	ldr	r3, [r7, #12]
 8016a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016a5c:	f043 0201 	orr.w	r2, r3, #1
 8016a60:	68fb      	ldr	r3, [r7, #12]
 8016a62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8016a66:	2301      	movs	r3, #1
 8016a68:	e07c      	b.n	8016b64 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8016a6a:	68fb      	ldr	r3, [r7, #12]
 8016a6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016a70:	2b23      	cmp	r3, #35	; 0x23
 8016a72:	d176      	bne.n	8016b62 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8016a74:	2200      	movs	r2, #0
 8016a76:	68b9      	ldr	r1, [r7, #8]
 8016a78:	68f8      	ldr	r0, [r7, #12]
 8016a7a:	f000 ff61 	bl	8017940 <ETH_Prepare_Tx_Descriptors>
 8016a7e:	4603      	mov	r3, r0
 8016a80:	2b00      	cmp	r3, #0
 8016a82:	d009      	beq.n	8016a98 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8016a84:	68fb      	ldr	r3, [r7, #12]
 8016a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016a8a:	f043 0202 	orr.w	r2, r3, #2
 8016a8e:	68fb      	ldr	r3, [r7, #12]
 8016a90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8016a94:	2301      	movs	r3, #1
 8016a96:	e065      	b.n	8016b64 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 8016a98:	f3bf 8f4f 	dsb	sy
}
 8016a9c:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8016a9e:	68fb      	ldr	r3, [r7, #12]
 8016aa0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016aa2:	68fb      	ldr	r3, [r7, #12]
 8016aa4:	3206      	adds	r2, #6
 8016aa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016aaa:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8016aac:	68fb      	ldr	r3, [r7, #12]
 8016aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016ab0:	1c5a      	adds	r2, r3, #1
 8016ab2:	68fb      	ldr	r3, [r7, #12]
 8016ab4:	629a      	str	r2, [r3, #40]	; 0x28
 8016ab6:	68fb      	ldr	r3, [r7, #12]
 8016ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016aba:	2b03      	cmp	r3, #3
 8016abc:	d904      	bls.n	8016ac8 <HAL_ETH_Transmit+0x84>
 8016abe:	68fb      	ldr	r3, [r7, #12]
 8016ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016ac2:	1f1a      	subs	r2, r3, #4
 8016ac4:	68fb      	ldr	r3, [r7, #12]
 8016ac6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8016ac8:	68fb      	ldr	r3, [r7, #12]
 8016aca:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8016acc:	68fb      	ldr	r3, [r7, #12]
 8016ace:	681a      	ldr	r2, [r3, #0]
 8016ad0:	68fb      	ldr	r3, [r7, #12]
 8016ad2:	3106      	adds	r1, #6
 8016ad4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016ad8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8016adc:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8016ade:	f7fe fd57 	bl	8015590 <HAL_GetTick>
 8016ae2:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8016ae4:	e037      	b.n	8016b56 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8016ae6:	68fb      	ldr	r3, [r7, #12]
 8016ae8:	681b      	ldr	r3, [r3, #0]
 8016aea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016aee:	695b      	ldr	r3, [r3, #20]
 8016af0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016af4:	2b00      	cmp	r3, #0
 8016af6:	d011      	beq.n	8016b1c <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8016af8:	68fb      	ldr	r3, [r7, #12]
 8016afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016afe:	f043 0208 	orr.w	r2, r3, #8
 8016b02:	68fb      	ldr	r3, [r7, #12]
 8016b04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8016b08:	68fb      	ldr	r3, [r7, #12]
 8016b0a:	681b      	ldr	r3, [r3, #0]
 8016b0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016b10:	695a      	ldr	r2, [r3, #20]
 8016b12:	68fb      	ldr	r3, [r7, #12]
 8016b14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8016b18:	2301      	movs	r3, #1
 8016b1a:	e023      	b.n	8016b64 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8016b1c:	687b      	ldr	r3, [r7, #4]
 8016b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016b22:	d018      	beq.n	8016b56 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8016b24:	f7fe fd34 	bl	8015590 <HAL_GetTick>
 8016b28:	4602      	mov	r2, r0
 8016b2a:	693b      	ldr	r3, [r7, #16]
 8016b2c:	1ad3      	subs	r3, r2, r3
 8016b2e:	687a      	ldr	r2, [r7, #4]
 8016b30:	429a      	cmp	r2, r3
 8016b32:	d302      	bcc.n	8016b3a <HAL_ETH_Transmit+0xf6>
 8016b34:	687b      	ldr	r3, [r7, #4]
 8016b36:	2b00      	cmp	r3, #0
 8016b38:	d10d      	bne.n	8016b56 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8016b3a:	68fb      	ldr	r3, [r7, #12]
 8016b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016b40:	f043 0204 	orr.w	r2, r3, #4
 8016b44:	68fb      	ldr	r3, [r7, #12]
 8016b46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8016b4a:	697b      	ldr	r3, [r7, #20]
 8016b4c:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8016b50:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8016b52:	2301      	movs	r3, #1
 8016b54:	e006      	b.n	8016b64 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8016b56:	697b      	ldr	r3, [r7, #20]
 8016b58:	681b      	ldr	r3, [r3, #0]
 8016b5a:	2b00      	cmp	r3, #0
 8016b5c:	dbc3      	blt.n	8016ae6 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8016b5e:	2300      	movs	r3, #0
 8016b60:	e000      	b.n	8016b64 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8016b62:	2301      	movs	r3, #1
  }
}
 8016b64:	4618      	mov	r0, r3
 8016b66:	3718      	adds	r7, #24
 8016b68:	46bd      	mov	sp, r7
 8016b6a:	bd80      	pop	{r7, pc}

08016b6c <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8016b6c:	b580      	push	{r7, lr}
 8016b6e:	b088      	sub	sp, #32
 8016b70:	af00      	add	r7, sp, #0
 8016b72:	6078      	str	r0, [r7, #4]
 8016b74:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8016b76:	2300      	movs	r3, #0
 8016b78:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8016b7a:	2300      	movs	r3, #0
 8016b7c:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8016b7e:	683b      	ldr	r3, [r7, #0]
 8016b80:	2b00      	cmp	r3, #0
 8016b82:	d109      	bne.n	8016b98 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8016b84:	687b      	ldr	r3, [r7, #4]
 8016b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016b8a:	f043 0201 	orr.w	r2, r3, #1
 8016b8e:	687b      	ldr	r3, [r7, #4]
 8016b90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8016b94:	2301      	movs	r3, #1
 8016b96:	e0a8      	b.n	8016cea <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8016b98:	687b      	ldr	r3, [r7, #4]
 8016b9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016b9e:	2b23      	cmp	r3, #35	; 0x23
 8016ba0:	d001      	beq.n	8016ba6 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8016ba2:	2301      	movs	r3, #1
 8016ba4:	e0a1      	b.n	8016cea <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8016ba6:	687b      	ldr	r3, [r7, #4]
 8016ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016baa:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8016bac:	687b      	ldr	r3, [r7, #4]
 8016bae:	69fa      	ldr	r2, [r7, #28]
 8016bb0:	3212      	adds	r2, #18
 8016bb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016bb6:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8016bb8:	687b      	ldr	r3, [r7, #4]
 8016bba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016bbc:	f1c3 0304 	rsb	r3, r3, #4
 8016bc0:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8016bc2:	e06a      	b.n	8016c9a <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8016bc4:	69bb      	ldr	r3, [r7, #24]
 8016bc6:	681b      	ldr	r3, [r3, #0]
 8016bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016bcc:	2b00      	cmp	r3, #0
 8016bce:	d007      	beq.n	8016be0 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8016bd0:	69bb      	ldr	r3, [r7, #24]
 8016bd2:	699a      	ldr	r2, [r3, #24]
 8016bd4:	687b      	ldr	r3, [r7, #4]
 8016bd6:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8016bd8:	69bb      	ldr	r3, [r7, #24]
 8016bda:	69da      	ldr	r2, [r3, #28]
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8016be0:	69bb      	ldr	r3, [r7, #24]
 8016be2:	681b      	ldr	r3, [r3, #0]
 8016be4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8016be8:	2b00      	cmp	r3, #0
 8016bea:	d103      	bne.n	8016bf4 <HAL_ETH_ReadData+0x88>
 8016bec:	687b      	ldr	r3, [r7, #4]
 8016bee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016bf0:	2b00      	cmp	r3, #0
 8016bf2:	d040      	beq.n	8016c76 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8016bf4:	69bb      	ldr	r3, [r7, #24]
 8016bf6:	681b      	ldr	r3, [r3, #0]
 8016bf8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8016bfc:	2b00      	cmp	r3, #0
 8016bfe:	d005      	beq.n	8016c0c <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8016c00:	687b      	ldr	r3, [r7, #4]
 8016c02:	2200      	movs	r2, #0
 8016c04:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8016c06:	687b      	ldr	r3, [r7, #4]
 8016c08:	2200      	movs	r2, #0
 8016c0a:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8016c0c:	687b      	ldr	r3, [r7, #4]
 8016c0e:	695b      	ldr	r3, [r3, #20]
 8016c10:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8016c12:	69bb      	ldr	r3, [r7, #24]
 8016c14:	681b      	ldr	r3, [r3, #0]
 8016c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016c1a:	2b00      	cmp	r3, #0
 8016c1c:	d00c      	beq.n	8016c38 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8016c1e:	69bb      	ldr	r3, [r7, #24]
 8016c20:	681b      	ldr	r3, [r3, #0]
 8016c22:	0c1b      	lsrs	r3, r3, #16
 8016c24:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8016c28:	3b04      	subs	r3, #4
 8016c2a:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8016c2c:	69bb      	ldr	r3, [r7, #24]
 8016c2e:	681a      	ldr	r2, [r3, #0]
 8016c30:	687b      	ldr	r3, [r7, #4]
 8016c32:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8016c34:	2301      	movs	r3, #1
 8016c36:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8016c38:	69bb      	ldr	r3, [r7, #24]
 8016c3a:	689a      	ldr	r2, [r3, #8]
 8016c3c:	69bb      	ldr	r3, [r7, #24]
 8016c3e:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8016c40:	687b      	ldr	r3, [r7, #4]
 8016c42:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8016c46:	687b      	ldr	r3, [r7, #4]
 8016c48:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8016c4c:	69bb      	ldr	r3, [r7, #24]
 8016c4e:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8016c50:	461a      	mov	r2, r3
 8016c52:	693b      	ldr	r3, [r7, #16]
 8016c54:	b29b      	uxth	r3, r3
 8016c56:	f006 fb4f 	bl	801d2f8 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8016c5a:	687b      	ldr	r3, [r7, #4]
 8016c5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016c5e:	1c5a      	adds	r2, r3, #1
 8016c60:	687b      	ldr	r3, [r7, #4]
 8016c62:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8016c68:	693b      	ldr	r3, [r7, #16]
 8016c6a:	441a      	add	r2, r3
 8016c6c:	687b      	ldr	r3, [r7, #4]
 8016c6e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8016c70:	69bb      	ldr	r3, [r7, #24]
 8016c72:	2200      	movs	r2, #0
 8016c74:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8016c76:	69fb      	ldr	r3, [r7, #28]
 8016c78:	3301      	adds	r3, #1
 8016c7a:	61fb      	str	r3, [r7, #28]
 8016c7c:	69fb      	ldr	r3, [r7, #28]
 8016c7e:	2b03      	cmp	r3, #3
 8016c80:	d902      	bls.n	8016c88 <HAL_ETH_ReadData+0x11c>
 8016c82:	69fb      	ldr	r3, [r7, #28]
 8016c84:	3b04      	subs	r3, #4
 8016c86:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8016c88:	687b      	ldr	r3, [r7, #4]
 8016c8a:	69fa      	ldr	r2, [r7, #28]
 8016c8c:	3212      	adds	r2, #18
 8016c8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016c92:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8016c94:	697b      	ldr	r3, [r7, #20]
 8016c96:	3301      	adds	r3, #1
 8016c98:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8016c9a:	69bb      	ldr	r3, [r7, #24]
 8016c9c:	681b      	ldr	r3, [r3, #0]
 8016c9e:	2b00      	cmp	r3, #0
 8016ca0:	db06      	blt.n	8016cb0 <HAL_ETH_ReadData+0x144>
 8016ca2:	697a      	ldr	r2, [r7, #20]
 8016ca4:	68bb      	ldr	r3, [r7, #8]
 8016ca6:	429a      	cmp	r2, r3
 8016ca8:	d202      	bcs.n	8016cb0 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8016caa:	7bfb      	ldrb	r3, [r7, #15]
 8016cac:	2b00      	cmp	r3, #0
 8016cae:	d089      	beq.n	8016bc4 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8016cb4:	697b      	ldr	r3, [r7, #20]
 8016cb6:	441a      	add	r2, r3
 8016cb8:	687b      	ldr	r3, [r7, #4]
 8016cba:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8016cbc:	687b      	ldr	r3, [r7, #4]
 8016cbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016cc0:	2b00      	cmp	r3, #0
 8016cc2:	d002      	beq.n	8016cca <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8016cc4:	6878      	ldr	r0, [r7, #4]
 8016cc6:	f000 f815 	bl	8016cf4 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8016cca:	687b      	ldr	r3, [r7, #4]
 8016ccc:	69fa      	ldr	r2, [r7, #28]
 8016cce:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8016cd0:	7bfb      	ldrb	r3, [r7, #15]
 8016cd2:	2b01      	cmp	r3, #1
 8016cd4:	d108      	bne.n	8016ce8 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8016cd6:	687b      	ldr	r3, [r7, #4]
 8016cd8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8016cda:	683b      	ldr	r3, [r7, #0]
 8016cdc:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8016cde:	687b      	ldr	r3, [r7, #4]
 8016ce0:	2200      	movs	r2, #0
 8016ce2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8016ce4:	2300      	movs	r3, #0
 8016ce6:	e000      	b.n	8016cea <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8016ce8:	2301      	movs	r3, #1
}
 8016cea:	4618      	mov	r0, r3
 8016cec:	3720      	adds	r7, #32
 8016cee:	46bd      	mov	sp, r7
 8016cf0:	bd80      	pop	{r7, pc}
	...

08016cf4 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8016cf4:	b580      	push	{r7, lr}
 8016cf6:	b088      	sub	sp, #32
 8016cf8:	af00      	add	r7, sp, #0
 8016cfa:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8016cfc:	2300      	movs	r3, #0
 8016cfe:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8016d00:	2301      	movs	r3, #1
 8016d02:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016d08:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8016d0a:	687b      	ldr	r3, [r7, #4]
 8016d0c:	69fa      	ldr	r2, [r7, #28]
 8016d0e:	3212      	adds	r2, #18
 8016d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016d14:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8016d16:	687b      	ldr	r3, [r7, #4]
 8016d18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016d1a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8016d1c:	e040      	b.n	8016da0 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8016d1e:	697b      	ldr	r3, [r7, #20]
 8016d20:	6a1b      	ldr	r3, [r3, #32]
 8016d22:	2b00      	cmp	r3, #0
 8016d24:	d112      	bne.n	8016d4c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8016d26:	f107 030c 	add.w	r3, r7, #12
 8016d2a:	4618      	mov	r0, r3
 8016d2c:	f006 fab4 	bl	801d298 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8016d30:	68fb      	ldr	r3, [r7, #12]
 8016d32:	2b00      	cmp	r3, #0
 8016d34:	d102      	bne.n	8016d3c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8016d36:	2300      	movs	r3, #0
 8016d38:	74fb      	strb	r3, [r7, #19]
 8016d3a:	e007      	b.n	8016d4c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8016d3c:	68fb      	ldr	r3, [r7, #12]
 8016d3e:	461a      	mov	r2, r3
 8016d40:	697b      	ldr	r3, [r7, #20]
 8016d42:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8016d44:	68fb      	ldr	r3, [r7, #12]
 8016d46:	461a      	mov	r2, r3
 8016d48:	697b      	ldr	r3, [r7, #20]
 8016d4a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8016d4c:	7cfb      	ldrb	r3, [r7, #19]
 8016d4e:	2b00      	cmp	r3, #0
 8016d50:	d026      	beq.n	8016da0 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8016d52:	687b      	ldr	r3, [r7, #4]
 8016d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016d56:	2b00      	cmp	r3, #0
 8016d58:	d103      	bne.n	8016d62 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8016d5a:	697b      	ldr	r3, [r7, #20]
 8016d5c:	4a1e      	ldr	r2, [pc, #120]	; (8016dd8 <ETH_UpdateDescriptor+0xe4>)
 8016d5e:	605a      	str	r2, [r3, #4]
 8016d60:	e003      	b.n	8016d6a <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8016d62:	697b      	ldr	r3, [r7, #20]
 8016d64:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8016d68:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dmb 0xF":::"memory");
 8016d6a:	f3bf 8f5f 	dmb	sy
}
 8016d6e:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8016d70:	697b      	ldr	r3, [r7, #20]
 8016d72:	681b      	ldr	r3, [r3, #0]
 8016d74:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8016d78:	697b      	ldr	r3, [r7, #20]
 8016d7a:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8016d7c:	69fb      	ldr	r3, [r7, #28]
 8016d7e:	3301      	adds	r3, #1
 8016d80:	61fb      	str	r3, [r7, #28]
 8016d82:	69fb      	ldr	r3, [r7, #28]
 8016d84:	2b03      	cmp	r3, #3
 8016d86:	d902      	bls.n	8016d8e <ETH_UpdateDescriptor+0x9a>
 8016d88:	69fb      	ldr	r3, [r7, #28]
 8016d8a:	3b04      	subs	r3, #4
 8016d8c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8016d8e:	687b      	ldr	r3, [r7, #4]
 8016d90:	69fa      	ldr	r2, [r7, #28]
 8016d92:	3212      	adds	r2, #18
 8016d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016d98:	617b      	str	r3, [r7, #20]
      desccount--;
 8016d9a:	69bb      	ldr	r3, [r7, #24]
 8016d9c:	3b01      	subs	r3, #1
 8016d9e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8016da0:	69bb      	ldr	r3, [r7, #24]
 8016da2:	2b00      	cmp	r3, #0
 8016da4:	d002      	beq.n	8016dac <ETH_UpdateDescriptor+0xb8>
 8016da6:	7cfb      	ldrb	r3, [r7, #19]
 8016da8:	2b00      	cmp	r3, #0
 8016daa:	d1b8      	bne.n	8016d1e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8016dac:	687b      	ldr	r3, [r7, #4]
 8016dae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016db0:	69ba      	ldr	r2, [r7, #24]
 8016db2:	429a      	cmp	r2, r3
 8016db4:	d00c      	beq.n	8016dd0 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8016db6:	687b      	ldr	r3, [r7, #4]
 8016db8:	681b      	ldr	r3, [r3, #0]
 8016dba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016dbe:	461a      	mov	r2, r3
 8016dc0:	2300      	movs	r3, #0
 8016dc2:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8016dc4:	687b      	ldr	r3, [r7, #4]
 8016dc6:	69fa      	ldr	r2, [r7, #28]
 8016dc8:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8016dca:	687b      	ldr	r3, [r7, #4]
 8016dcc:	69ba      	ldr	r2, [r7, #24]
 8016dce:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8016dd0:	bf00      	nop
 8016dd2:	3720      	adds	r7, #32
 8016dd4:	46bd      	mov	sp, r7
 8016dd6:	bd80      	pop	{r7, pc}
 8016dd8:	800045f8 	.word	0x800045f8

08016ddc <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8016ddc:	b580      	push	{r7, lr}
 8016dde:	b082      	sub	sp, #8
 8016de0:	af00      	add	r7, sp, #0
 8016de2:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8016de4:	687b      	ldr	r3, [r7, #4]
 8016de6:	681b      	ldr	r3, [r3, #0]
 8016de8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016dec:	695b      	ldr	r3, [r3, #20]
 8016dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016df2:	2b40      	cmp	r3, #64	; 0x40
 8016df4:	d112      	bne.n	8016e1c <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8016df6:	687b      	ldr	r3, [r7, #4]
 8016df8:	681b      	ldr	r3, [r3, #0]
 8016dfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016dfe:	69db      	ldr	r3, [r3, #28]
 8016e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016e04:	2b40      	cmp	r3, #64	; 0x40
 8016e06:	d109      	bne.n	8016e1c <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8016e08:	687b      	ldr	r3, [r7, #4]
 8016e0a:	681b      	ldr	r3, [r3, #0]
 8016e0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016e10:	461a      	mov	r2, r3
 8016e12:	4b50      	ldr	r3, [pc, #320]	; (8016f54 <HAL_ETH_IRQHandler+0x178>)
 8016e14:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8016e16:	6878      	ldr	r0, [r7, #4]
 8016e18:	f000 f8ac 	bl	8016f74 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8016e1c:	687b      	ldr	r3, [r7, #4]
 8016e1e:	681b      	ldr	r3, [r3, #0]
 8016e20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016e24:	695b      	ldr	r3, [r3, #20]
 8016e26:	f003 0301 	and.w	r3, r3, #1
 8016e2a:	2b01      	cmp	r3, #1
 8016e2c:	d113      	bne.n	8016e56 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8016e2e:	687b      	ldr	r3, [r7, #4]
 8016e30:	681b      	ldr	r3, [r3, #0]
 8016e32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016e36:	69db      	ldr	r3, [r3, #28]
 8016e38:	f003 0301 	and.w	r3, r3, #1
 8016e3c:	2b01      	cmp	r3, #1
 8016e3e:	d10a      	bne.n	8016e56 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8016e40:	687b      	ldr	r3, [r7, #4]
 8016e42:	681b      	ldr	r3, [r3, #0]
 8016e44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016e48:	461a      	mov	r2, r3
 8016e4a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8016e4e:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8016e50:	6878      	ldr	r0, [r7, #4]
 8016e52:	f000 f885 	bl	8016f60 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8016e56:	687b      	ldr	r3, [r7, #4]
 8016e58:	681b      	ldr	r3, [r3, #0]
 8016e5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016e5e:	695b      	ldr	r3, [r3, #20]
 8016e60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8016e64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016e68:	d14c      	bne.n	8016f04 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8016e6a:	687b      	ldr	r3, [r7, #4]
 8016e6c:	681b      	ldr	r3, [r3, #0]
 8016e6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016e72:	69db      	ldr	r3, [r3, #28]
 8016e74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8016e78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016e7c:	d142      	bne.n	8016f04 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8016e7e:	687b      	ldr	r3, [r7, #4]
 8016e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016e84:	f043 0208 	orr.w	r2, r3, #8
 8016e88:	687b      	ldr	r3, [r7, #4]
 8016e8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8016e8e:	687b      	ldr	r3, [r7, #4]
 8016e90:	681b      	ldr	r3, [r3, #0]
 8016e92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016e96:	695b      	ldr	r3, [r3, #20]
 8016e98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016e9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8016ea0:	d11a      	bne.n	8016ed8 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8016ea2:	687b      	ldr	r3, [r7, #4]
 8016ea4:	681b      	ldr	r3, [r3, #0]
 8016ea6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016eaa:	695a      	ldr	r2, [r3, #20]
 8016eac:	4b2a      	ldr	r3, [pc, #168]	; (8016f58 <HAL_ETH_IRQHandler+0x17c>)
 8016eae:	4013      	ands	r3, r2
 8016eb0:	687a      	ldr	r2, [r7, #4]
 8016eb2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	681b      	ldr	r3, [r3, #0]
 8016eba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016ebe:	69db      	ldr	r3, [r3, #28]
 8016ec0:	687a      	ldr	r2, [r7, #4]
 8016ec2:	6812      	ldr	r2, [r2, #0]
 8016ec4:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8016ec8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8016ecc:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	22e0      	movs	r2, #224	; 0xe0
 8016ed2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8016ed6:	e012      	b.n	8016efe <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8016ed8:	687b      	ldr	r3, [r7, #4]
 8016eda:	681b      	ldr	r3, [r3, #0]
 8016edc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016ee0:	695a      	ldr	r2, [r3, #20]
 8016ee2:	f248 6380 	movw	r3, #34432	; 0x8680
 8016ee6:	4013      	ands	r3, r2
 8016ee8:	687a      	ldr	r2, [r7, #4]
 8016eea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8016eee:	687b      	ldr	r3, [r7, #4]
 8016ef0:	681b      	ldr	r3, [r3, #0]
 8016ef2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016ef6:	461a      	mov	r2, r3
 8016ef8:	f248 6380 	movw	r3, #34432	; 0x8680
 8016efc:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8016efe:	6878      	ldr	r0, [r7, #4]
 8016f00:	f000 f842 	bl	8016f88 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8016f04:	687b      	ldr	r3, [r7, #4]
 8016f06:	681b      	ldr	r3, [r3, #0]
 8016f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016f0a:	f003 0308 	and.w	r3, r3, #8
 8016f0e:	2b08      	cmp	r3, #8
 8016f10:	d10e      	bne.n	8016f30 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8016f12:	687b      	ldr	r3, [r7, #4]
 8016f14:	681b      	ldr	r3, [r3, #0]
 8016f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f18:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8016f1c:	687b      	ldr	r3, [r7, #4]
 8016f1e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8016f22:	6878      	ldr	r0, [r7, #4]
 8016f24:	f000 f83a 	bl	8016f9c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8016f28:	687b      	ldr	r3, [r7, #4]
 8016f2a:	2200      	movs	r2, #0
 8016f2c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8016f30:	4b0a      	ldr	r3, [pc, #40]	; (8016f5c <HAL_ETH_IRQHandler+0x180>)
 8016f32:	695b      	ldr	r3, [r3, #20]
 8016f34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8016f38:	2b00      	cmp	r3, #0
 8016f3a:	d006      	beq.n	8016f4a <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8016f3c:	4b07      	ldr	r3, [pc, #28]	; (8016f5c <HAL_ETH_IRQHandler+0x180>)
 8016f3e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8016f42:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8016f44:	6878      	ldr	r0, [r7, #4]
 8016f46:	f000 f833 	bl	8016fb0 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8016f4a:	bf00      	nop
 8016f4c:	3708      	adds	r7, #8
 8016f4e:	46bd      	mov	sp, r7
 8016f50:	bd80      	pop	{r7, pc}
 8016f52:	bf00      	nop
 8016f54:	00010040 	.word	0x00010040
 8016f58:	007e2000 	.word	0x007e2000
 8016f5c:	40013c00 	.word	0x40013c00

08016f60 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8016f60:	b480      	push	{r7}
 8016f62:	b083      	sub	sp, #12
 8016f64:	af00      	add	r7, sp, #0
 8016f66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8016f68:	bf00      	nop
 8016f6a:	370c      	adds	r7, #12
 8016f6c:	46bd      	mov	sp, r7
 8016f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f72:	4770      	bx	lr

08016f74 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8016f74:	b480      	push	{r7}
 8016f76:	b083      	sub	sp, #12
 8016f78:	af00      	add	r7, sp, #0
 8016f7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8016f7c:	bf00      	nop
 8016f7e:	370c      	adds	r7, #12
 8016f80:	46bd      	mov	sp, r7
 8016f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f86:	4770      	bx	lr

08016f88 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8016f88:	b480      	push	{r7}
 8016f8a:	b083      	sub	sp, #12
 8016f8c:	af00      	add	r7, sp, #0
 8016f8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8016f90:	bf00      	nop
 8016f92:	370c      	adds	r7, #12
 8016f94:	46bd      	mov	sp, r7
 8016f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f9a:	4770      	bx	lr

08016f9c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8016f9c:	b480      	push	{r7}
 8016f9e:	b083      	sub	sp, #12
 8016fa0:	af00      	add	r7, sp, #0
 8016fa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8016fa4:	bf00      	nop
 8016fa6:	370c      	adds	r7, #12
 8016fa8:	46bd      	mov	sp, r7
 8016faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fae:	4770      	bx	lr

08016fb0 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8016fb0:	b480      	push	{r7}
 8016fb2:	b083      	sub	sp, #12
 8016fb4:	af00      	add	r7, sp, #0
 8016fb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8016fb8:	bf00      	nop
 8016fba:	370c      	adds	r7, #12
 8016fbc:	46bd      	mov	sp, r7
 8016fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fc2:	4770      	bx	lr

08016fc4 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8016fc4:	b580      	push	{r7, lr}
 8016fc6:	b086      	sub	sp, #24
 8016fc8:	af00      	add	r7, sp, #0
 8016fca:	60f8      	str	r0, [r7, #12]
 8016fcc:	60b9      	str	r1, [r7, #8]
 8016fce:	607a      	str	r2, [r7, #4]
 8016fd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8016fd2:	68fb      	ldr	r3, [r7, #12]
 8016fd4:	681b      	ldr	r3, [r3, #0]
 8016fd6:	691b      	ldr	r3, [r3, #16]
 8016fd8:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8016fda:	697b      	ldr	r3, [r7, #20]
 8016fdc:	f003 031c 	and.w	r3, r3, #28
 8016fe0:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8016fe2:	68bb      	ldr	r3, [r7, #8]
 8016fe4:	02db      	lsls	r3, r3, #11
 8016fe6:	b29b      	uxth	r3, r3
 8016fe8:	697a      	ldr	r2, [r7, #20]
 8016fea:	4313      	orrs	r3, r2
 8016fec:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8016fee:	687b      	ldr	r3, [r7, #4]
 8016ff0:	019b      	lsls	r3, r3, #6
 8016ff2:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8016ff6:	697a      	ldr	r2, [r7, #20]
 8016ff8:	4313      	orrs	r3, r2
 8016ffa:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8016ffc:	697b      	ldr	r3, [r7, #20]
 8016ffe:	f023 0302 	bic.w	r3, r3, #2
 8017002:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8017004:	697b      	ldr	r3, [r7, #20]
 8017006:	f043 0301 	orr.w	r3, r3, #1
 801700a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 801700c:	68fb      	ldr	r3, [r7, #12]
 801700e:	681b      	ldr	r3, [r3, #0]
 8017010:	697a      	ldr	r2, [r7, #20]
 8017012:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8017014:	f7fe fabc 	bl	8015590 <HAL_GetTick>
 8017018:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 801701a:	e00d      	b.n	8017038 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 801701c:	f7fe fab8 	bl	8015590 <HAL_GetTick>
 8017020:	4602      	mov	r2, r0
 8017022:	693b      	ldr	r3, [r7, #16]
 8017024:	1ad3      	subs	r3, r2, r3
 8017026:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801702a:	d301      	bcc.n	8017030 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 801702c:	2301      	movs	r3, #1
 801702e:	e010      	b.n	8017052 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8017030:	68fb      	ldr	r3, [r7, #12]
 8017032:	681b      	ldr	r3, [r3, #0]
 8017034:	691b      	ldr	r3, [r3, #16]
 8017036:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8017038:	697b      	ldr	r3, [r7, #20]
 801703a:	f003 0301 	and.w	r3, r3, #1
 801703e:	2b00      	cmp	r3, #0
 8017040:	d1ec      	bne.n	801701c <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8017042:	68fb      	ldr	r3, [r7, #12]
 8017044:	681b      	ldr	r3, [r3, #0]
 8017046:	695b      	ldr	r3, [r3, #20]
 8017048:	b29b      	uxth	r3, r3
 801704a:	461a      	mov	r2, r3
 801704c:	683b      	ldr	r3, [r7, #0]
 801704e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8017050:	2300      	movs	r3, #0
}
 8017052:	4618      	mov	r0, r3
 8017054:	3718      	adds	r7, #24
 8017056:	46bd      	mov	sp, r7
 8017058:	bd80      	pop	{r7, pc}

0801705a <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 801705a:	b580      	push	{r7, lr}
 801705c:	b086      	sub	sp, #24
 801705e:	af00      	add	r7, sp, #0
 8017060:	60f8      	str	r0, [r7, #12]
 8017062:	60b9      	str	r1, [r7, #8]
 8017064:	607a      	str	r2, [r7, #4]
 8017066:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8017068:	68fb      	ldr	r3, [r7, #12]
 801706a:	681b      	ldr	r3, [r3, #0]
 801706c:	691b      	ldr	r3, [r3, #16]
 801706e:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8017070:	697b      	ldr	r3, [r7, #20]
 8017072:	f003 031c 	and.w	r3, r3, #28
 8017076:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8017078:	68bb      	ldr	r3, [r7, #8]
 801707a:	02db      	lsls	r3, r3, #11
 801707c:	b29b      	uxth	r3, r3
 801707e:	697a      	ldr	r2, [r7, #20]
 8017080:	4313      	orrs	r3, r2
 8017082:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8017084:	687b      	ldr	r3, [r7, #4]
 8017086:	019b      	lsls	r3, r3, #6
 8017088:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 801708c:	697a      	ldr	r2, [r7, #20]
 801708e:	4313      	orrs	r3, r2
 8017090:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8017092:	697b      	ldr	r3, [r7, #20]
 8017094:	f043 0302 	orr.w	r3, r3, #2
 8017098:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 801709a:	697b      	ldr	r3, [r7, #20]
 801709c:	f043 0301 	orr.w	r3, r3, #1
 80170a0:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80170a2:	683b      	ldr	r3, [r7, #0]
 80170a4:	b29a      	uxth	r2, r3
 80170a6:	68fb      	ldr	r3, [r7, #12]
 80170a8:	681b      	ldr	r3, [r3, #0]
 80170aa:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80170ac:	68fb      	ldr	r3, [r7, #12]
 80170ae:	681b      	ldr	r3, [r3, #0]
 80170b0:	697a      	ldr	r2, [r7, #20]
 80170b2:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80170b4:	f7fe fa6c 	bl	8015590 <HAL_GetTick>
 80170b8:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80170ba:	e00d      	b.n	80170d8 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80170bc:	f7fe fa68 	bl	8015590 <HAL_GetTick>
 80170c0:	4602      	mov	r2, r0
 80170c2:	693b      	ldr	r3, [r7, #16]
 80170c4:	1ad3      	subs	r3, r2, r3
 80170c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80170ca:	d301      	bcc.n	80170d0 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80170cc:	2301      	movs	r3, #1
 80170ce:	e009      	b.n	80170e4 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80170d0:	68fb      	ldr	r3, [r7, #12]
 80170d2:	681b      	ldr	r3, [r3, #0]
 80170d4:	691b      	ldr	r3, [r3, #16]
 80170d6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80170d8:	697b      	ldr	r3, [r7, #20]
 80170da:	f003 0301 	and.w	r3, r3, #1
 80170de:	2b00      	cmp	r3, #0
 80170e0:	d1ec      	bne.n	80170bc <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 80170e2:	2300      	movs	r3, #0
}
 80170e4:	4618      	mov	r0, r3
 80170e6:	3718      	adds	r7, #24
 80170e8:	46bd      	mov	sp, r7
 80170ea:	bd80      	pop	{r7, pc}

080170ec <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80170ec:	b480      	push	{r7}
 80170ee:	b083      	sub	sp, #12
 80170f0:	af00      	add	r7, sp, #0
 80170f2:	6078      	str	r0, [r7, #4]
 80170f4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80170f6:	683b      	ldr	r3, [r7, #0]
 80170f8:	2b00      	cmp	r3, #0
 80170fa:	d101      	bne.n	8017100 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80170fc:	2301      	movs	r3, #1
 80170fe:	e0d9      	b.n	80172b4 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8017100:	687b      	ldr	r3, [r7, #4]
 8017102:	681b      	ldr	r3, [r3, #0]
 8017104:	681b      	ldr	r3, [r3, #0]
 8017106:	f003 0310 	and.w	r3, r3, #16
 801710a:	2b00      	cmp	r3, #0
 801710c:	bf14      	ite	ne
 801710e:	2301      	movne	r3, #1
 8017110:	2300      	moveq	r3, #0
 8017112:	b2db      	uxtb	r3, r3
 8017114:	461a      	mov	r2, r3
 8017116:	683b      	ldr	r3, [r7, #0]
 8017118:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 801711c:	687b      	ldr	r3, [r7, #4]
 801711e:	681b      	ldr	r3, [r3, #0]
 8017120:	681b      	ldr	r3, [r3, #0]
 8017122:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8017126:	683b      	ldr	r3, [r7, #0]
 8017128:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 801712a:	687b      	ldr	r3, [r7, #4]
 801712c:	681b      	ldr	r3, [r3, #0]
 801712e:	681b      	ldr	r3, [r3, #0]
 8017130:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8017134:	2b00      	cmp	r3, #0
 8017136:	bf0c      	ite	eq
 8017138:	2301      	moveq	r3, #1
 801713a:	2300      	movne	r3, #0
 801713c:	b2db      	uxtb	r3, r3
 801713e:	461a      	mov	r2, r3
 8017140:	683b      	ldr	r3, [r7, #0]
 8017142:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8017146:	687b      	ldr	r3, [r7, #4]
 8017148:	681b      	ldr	r3, [r3, #0]
 801714a:	681b      	ldr	r3, [r3, #0]
 801714c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8017150:	2b00      	cmp	r3, #0
 8017152:	bf14      	ite	ne
 8017154:	2301      	movne	r3, #1
 8017156:	2300      	moveq	r3, #0
 8017158:	b2db      	uxtb	r3, r3
 801715a:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 801715c:	683b      	ldr	r3, [r7, #0]
 801715e:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8017160:	687b      	ldr	r3, [r7, #4]
 8017162:	681b      	ldr	r3, [r3, #0]
 8017164:	681b      	ldr	r3, [r3, #0]
 8017166:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801716a:	2b00      	cmp	r3, #0
 801716c:	bf0c      	ite	eq
 801716e:	2301      	moveq	r3, #1
 8017170:	2300      	movne	r3, #0
 8017172:	b2db      	uxtb	r3, r3
 8017174:	461a      	mov	r2, r3
 8017176:	683b      	ldr	r3, [r7, #0]
 8017178:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 801717a:	687b      	ldr	r3, [r7, #4]
 801717c:	681b      	ldr	r3, [r3, #0]
 801717e:	681b      	ldr	r3, [r3, #0]
 8017180:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8017184:	2b00      	cmp	r3, #0
 8017186:	bf14      	ite	ne
 8017188:	2301      	movne	r3, #1
 801718a:	2300      	moveq	r3, #0
 801718c:	b2db      	uxtb	r3, r3
 801718e:	461a      	mov	r2, r3
 8017190:	683b      	ldr	r3, [r7, #0]
 8017192:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8017194:	687b      	ldr	r3, [r7, #4]
 8017196:	681b      	ldr	r3, [r3, #0]
 8017198:	681b      	ldr	r3, [r3, #0]
 801719a:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 801719e:	683b      	ldr	r3, [r7, #0]
 80171a0:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80171a2:	687b      	ldr	r3, [r7, #4]
 80171a4:	681b      	ldr	r3, [r3, #0]
 80171a6:	681b      	ldr	r3, [r3, #0]
 80171a8:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80171ac:	683b      	ldr	r3, [r7, #0]
 80171ae:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80171b0:	687b      	ldr	r3, [r7, #4]
 80171b2:	681b      	ldr	r3, [r3, #0]
 80171b4:	681b      	ldr	r3, [r3, #0]
 80171b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80171ba:	2b00      	cmp	r3, #0
 80171bc:	bf0c      	ite	eq
 80171be:	2301      	moveq	r3, #1
 80171c0:	2300      	movne	r3, #0
 80171c2:	b2db      	uxtb	r3, r3
 80171c4:	461a      	mov	r2, r3
 80171c6:	683b      	ldr	r3, [r7, #0]
 80171c8:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 80171ca:	687b      	ldr	r3, [r7, #4]
 80171cc:	681b      	ldr	r3, [r3, #0]
 80171ce:	681b      	ldr	r3, [r3, #0]
 80171d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80171d4:	2b00      	cmp	r3, #0
 80171d6:	bf0c      	ite	eq
 80171d8:	2301      	moveq	r3, #1
 80171da:	2300      	movne	r3, #0
 80171dc:	b2db      	uxtb	r3, r3
 80171de:	461a      	mov	r2, r3
 80171e0:	683b      	ldr	r3, [r7, #0]
 80171e2:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 80171e4:	687b      	ldr	r3, [r7, #4]
 80171e6:	681b      	ldr	r3, [r3, #0]
 80171e8:	681b      	ldr	r3, [r3, #0]
 80171ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80171ee:	2b00      	cmp	r3, #0
 80171f0:	bf14      	ite	ne
 80171f2:	2301      	movne	r3, #1
 80171f4:	2300      	moveq	r3, #0
 80171f6:	b2db      	uxtb	r3, r3
 80171f8:	461a      	mov	r2, r3
 80171fa:	683b      	ldr	r3, [r7, #0]
 80171fc:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 80171fe:	687b      	ldr	r3, [r7, #4]
 8017200:	681b      	ldr	r3, [r3, #0]
 8017202:	681b      	ldr	r3, [r3, #0]
 8017204:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8017208:	683b      	ldr	r3, [r7, #0]
 801720a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 801720c:	687b      	ldr	r3, [r7, #4]
 801720e:	681b      	ldr	r3, [r3, #0]
 8017210:	681b      	ldr	r3, [r3, #0]
 8017212:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8017216:	2b00      	cmp	r3, #0
 8017218:	bf14      	ite	ne
 801721a:	2301      	movne	r3, #1
 801721c:	2300      	moveq	r3, #0
 801721e:	b2db      	uxtb	r3, r3
 8017220:	461a      	mov	r2, r3
 8017222:	683b      	ldr	r3, [r7, #0]
 8017224:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8017226:	687b      	ldr	r3, [r7, #4]
 8017228:	681b      	ldr	r3, [r3, #0]
 801722a:	699b      	ldr	r3, [r3, #24]
 801722c:	f003 0302 	and.w	r3, r3, #2
 8017230:	2b00      	cmp	r3, #0
 8017232:	bf14      	ite	ne
 8017234:	2301      	movne	r3, #1
 8017236:	2300      	moveq	r3, #0
 8017238:	b2db      	uxtb	r3, r3
 801723a:	461a      	mov	r2, r3
 801723c:	683b      	ldr	r3, [r7, #0]
 801723e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8017242:	687b      	ldr	r3, [r7, #4]
 8017244:	681b      	ldr	r3, [r3, #0]
 8017246:	699b      	ldr	r3, [r3, #24]
 8017248:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801724c:	2b00      	cmp	r3, #0
 801724e:	bf0c      	ite	eq
 8017250:	2301      	moveq	r3, #1
 8017252:	2300      	movne	r3, #0
 8017254:	b2db      	uxtb	r3, r3
 8017256:	461a      	mov	r2, r3
 8017258:	683b      	ldr	r3, [r7, #0]
 801725a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 801725e:	687b      	ldr	r3, [r7, #4]
 8017260:	681b      	ldr	r3, [r3, #0]
 8017262:	699b      	ldr	r3, [r3, #24]
 8017264:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8017268:	683b      	ldr	r3, [r7, #0]
 801726a:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 801726c:	687b      	ldr	r3, [r7, #4]
 801726e:	681b      	ldr	r3, [r3, #0]
 8017270:	699b      	ldr	r3, [r3, #24]
 8017272:	0c1b      	lsrs	r3, r3, #16
 8017274:	b29a      	uxth	r2, r3
 8017276:	683b      	ldr	r3, [r7, #0]
 8017278:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 801727a:	687b      	ldr	r3, [r7, #4]
 801727c:	681b      	ldr	r3, [r3, #0]
 801727e:	699b      	ldr	r3, [r3, #24]
 8017280:	f003 0304 	and.w	r3, r3, #4
 8017284:	2b00      	cmp	r3, #0
 8017286:	bf14      	ite	ne
 8017288:	2301      	movne	r3, #1
 801728a:	2300      	moveq	r3, #0
 801728c:	b2db      	uxtb	r3, r3
 801728e:	461a      	mov	r2, r3
 8017290:	683b      	ldr	r3, [r7, #0]
 8017292:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8017296:	687b      	ldr	r3, [r7, #4]
 8017298:	681b      	ldr	r3, [r3, #0]
 801729a:	699b      	ldr	r3, [r3, #24]
 801729c:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80172a0:	2b00      	cmp	r3, #0
 80172a2:	bf14      	ite	ne
 80172a4:	2301      	movne	r3, #1
 80172a6:	2300      	moveq	r3, #0
 80172a8:	b2db      	uxtb	r3, r3
 80172aa:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80172ac:	683b      	ldr	r3, [r7, #0]
 80172ae:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 80172b2:	2300      	movs	r3, #0
}
 80172b4:	4618      	mov	r0, r3
 80172b6:	370c      	adds	r7, #12
 80172b8:	46bd      	mov	sp, r7
 80172ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172be:	4770      	bx	lr

080172c0 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80172c0:	b580      	push	{r7, lr}
 80172c2:	b082      	sub	sp, #8
 80172c4:	af00      	add	r7, sp, #0
 80172c6:	6078      	str	r0, [r7, #4]
 80172c8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80172ca:	683b      	ldr	r3, [r7, #0]
 80172cc:	2b00      	cmp	r3, #0
 80172ce:	d101      	bne.n	80172d4 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80172d0:	2301      	movs	r3, #1
 80172d2:	e00b      	b.n	80172ec <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80172d4:	687b      	ldr	r3, [r7, #4]
 80172d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80172da:	2b10      	cmp	r3, #16
 80172dc:	d105      	bne.n	80172ea <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80172de:	6839      	ldr	r1, [r7, #0]
 80172e0:	6878      	ldr	r0, [r7, #4]
 80172e2:	f000 f883 	bl	80173ec <ETH_SetMACConfig>

    return HAL_OK;
 80172e6:	2300      	movs	r3, #0
 80172e8:	e000      	b.n	80172ec <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80172ea:	2301      	movs	r3, #1
  }
}
 80172ec:	4618      	mov	r0, r3
 80172ee:	3708      	adds	r7, #8
 80172f0:	46bd      	mov	sp, r7
 80172f2:	bd80      	pop	{r7, pc}

080172f4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80172f4:	b580      	push	{r7, lr}
 80172f6:	b084      	sub	sp, #16
 80172f8:	af00      	add	r7, sp, #0
 80172fa:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 80172fc:	687b      	ldr	r3, [r7, #4]
 80172fe:	681b      	ldr	r3, [r3, #0]
 8017300:	691b      	ldr	r3, [r3, #16]
 8017302:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8017304:	68fb      	ldr	r3, [r7, #12]
 8017306:	f023 031c 	bic.w	r3, r3, #28
 801730a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 801730c:	f002 f916 	bl	801953c <HAL_RCC_GetHCLKFreq>
 8017310:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8017312:	68bb      	ldr	r3, [r7, #8]
 8017314:	4a1d      	ldr	r2, [pc, #116]	; (801738c <HAL_ETH_SetMDIOClockRange+0x98>)
 8017316:	4293      	cmp	r3, r2
 8017318:	d908      	bls.n	801732c <HAL_ETH_SetMDIOClockRange+0x38>
 801731a:	68bb      	ldr	r3, [r7, #8]
 801731c:	4a1c      	ldr	r2, [pc, #112]	; (8017390 <HAL_ETH_SetMDIOClockRange+0x9c>)
 801731e:	4293      	cmp	r3, r2
 8017320:	d804      	bhi.n	801732c <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8017322:	68fb      	ldr	r3, [r7, #12]
 8017324:	f043 0308 	orr.w	r3, r3, #8
 8017328:	60fb      	str	r3, [r7, #12]
 801732a:	e027      	b.n	801737c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 801732c:	68bb      	ldr	r3, [r7, #8]
 801732e:	4a18      	ldr	r2, [pc, #96]	; (8017390 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8017330:	4293      	cmp	r3, r2
 8017332:	d908      	bls.n	8017346 <HAL_ETH_SetMDIOClockRange+0x52>
 8017334:	68bb      	ldr	r3, [r7, #8]
 8017336:	4a17      	ldr	r2, [pc, #92]	; (8017394 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8017338:	4293      	cmp	r3, r2
 801733a:	d204      	bcs.n	8017346 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 801733c:	68fb      	ldr	r3, [r7, #12]
 801733e:	f043 030c 	orr.w	r3, r3, #12
 8017342:	60fb      	str	r3, [r7, #12]
 8017344:	e01a      	b.n	801737c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8017346:	68bb      	ldr	r3, [r7, #8]
 8017348:	4a12      	ldr	r2, [pc, #72]	; (8017394 <HAL_ETH_SetMDIOClockRange+0xa0>)
 801734a:	4293      	cmp	r3, r2
 801734c:	d303      	bcc.n	8017356 <HAL_ETH_SetMDIOClockRange+0x62>
 801734e:	68bb      	ldr	r3, [r7, #8]
 8017350:	4a11      	ldr	r2, [pc, #68]	; (8017398 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8017352:	4293      	cmp	r3, r2
 8017354:	d911      	bls.n	801737a <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8017356:	68bb      	ldr	r3, [r7, #8]
 8017358:	4a0f      	ldr	r2, [pc, #60]	; (8017398 <HAL_ETH_SetMDIOClockRange+0xa4>)
 801735a:	4293      	cmp	r3, r2
 801735c:	d908      	bls.n	8017370 <HAL_ETH_SetMDIOClockRange+0x7c>
 801735e:	68bb      	ldr	r3, [r7, #8]
 8017360:	4a0e      	ldr	r2, [pc, #56]	; (801739c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8017362:	4293      	cmp	r3, r2
 8017364:	d804      	bhi.n	8017370 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8017366:	68fb      	ldr	r3, [r7, #12]
 8017368:	f043 0304 	orr.w	r3, r3, #4
 801736c:	60fb      	str	r3, [r7, #12]
 801736e:	e005      	b.n	801737c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8017370:	68fb      	ldr	r3, [r7, #12]
 8017372:	f043 0310 	orr.w	r3, r3, #16
 8017376:	60fb      	str	r3, [r7, #12]
 8017378:	e000      	b.n	801737c <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 801737a:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 801737c:	687b      	ldr	r3, [r7, #4]
 801737e:	681b      	ldr	r3, [r3, #0]
 8017380:	68fa      	ldr	r2, [r7, #12]
 8017382:	611a      	str	r2, [r3, #16]
}
 8017384:	bf00      	nop
 8017386:	3710      	adds	r7, #16
 8017388:	46bd      	mov	sp, r7
 801738a:	bd80      	pop	{r7, pc}
 801738c:	01312cff 	.word	0x01312cff
 8017390:	02160ebf 	.word	0x02160ebf
 8017394:	03938700 	.word	0x03938700
 8017398:	05f5e0ff 	.word	0x05f5e0ff
 801739c:	08f0d17f 	.word	0x08f0d17f

080173a0 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80173a0:	b580      	push	{r7, lr}
 80173a2:	b084      	sub	sp, #16
 80173a4:	af00      	add	r7, sp, #0
 80173a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80173a8:	2300      	movs	r3, #0
 80173aa:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80173ac:	687b      	ldr	r3, [r7, #4]
 80173ae:	681b      	ldr	r3, [r3, #0]
 80173b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80173b4:	699b      	ldr	r3, [r3, #24]
 80173b6:	687a      	ldr	r2, [r7, #4]
 80173b8:	6812      	ldr	r2, [r2, #0]
 80173ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80173be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80173c2:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80173c4:	687b      	ldr	r3, [r7, #4]
 80173c6:	681b      	ldr	r3, [r3, #0]
 80173c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80173cc:	699b      	ldr	r3, [r3, #24]
 80173ce:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80173d0:	2001      	movs	r0, #1
 80173d2:	f7fe f8e9 	bl	80155a8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80173d6:	687b      	ldr	r3, [r7, #4]
 80173d8:	681a      	ldr	r2, [r3, #0]
 80173da:	68fb      	ldr	r3, [r7, #12]
 80173dc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80173e0:	6193      	str	r3, [r2, #24]
}
 80173e2:	bf00      	nop
 80173e4:	3710      	adds	r7, #16
 80173e6:	46bd      	mov	sp, r7
 80173e8:	bd80      	pop	{r7, pc}
	...

080173ec <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80173ec:	b580      	push	{r7, lr}
 80173ee:	b084      	sub	sp, #16
 80173f0:	af00      	add	r7, sp, #0
 80173f2:	6078      	str	r0, [r7, #4]
 80173f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80173f6:	687b      	ldr	r3, [r7, #4]
 80173f8:	681b      	ldr	r3, [r3, #0]
 80173fa:	681b      	ldr	r3, [r3, #0]
 80173fc:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80173fe:	68fa      	ldr	r2, [r7, #12]
 8017400:	4b51      	ldr	r3, [pc, #324]	; (8017548 <ETH_SetMACConfig+0x15c>)
 8017402:	4013      	ands	r3, r2
 8017404:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8017406:	683b      	ldr	r3, [r7, #0]
 8017408:	7c1b      	ldrb	r3, [r3, #16]
 801740a:	2b00      	cmp	r3, #0
 801740c:	d102      	bne.n	8017414 <ETH_SetMACConfig+0x28>
 801740e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8017412:	e000      	b.n	8017416 <ETH_SetMACConfig+0x2a>
 8017414:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8017416:	683b      	ldr	r3, [r7, #0]
 8017418:	7c5b      	ldrb	r3, [r3, #17]
 801741a:	2b00      	cmp	r3, #0
 801741c:	d102      	bne.n	8017424 <ETH_SetMACConfig+0x38>
 801741e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8017422:	e000      	b.n	8017426 <ETH_SetMACConfig+0x3a>
 8017424:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8017426:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8017428:	683b      	ldr	r3, [r7, #0]
 801742a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 801742c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 801742e:	683b      	ldr	r3, [r7, #0]
 8017430:	7fdb      	ldrb	r3, [r3, #31]
 8017432:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8017434:	431a      	orrs	r2, r3
                        macconf->Speed |
 8017436:	683b      	ldr	r3, [r7, #0]
 8017438:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 801743a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 801743c:	683a      	ldr	r2, [r7, #0]
 801743e:	7f92      	ldrb	r2, [r2, #30]
 8017440:	2a00      	cmp	r2, #0
 8017442:	d102      	bne.n	801744a <ETH_SetMACConfig+0x5e>
 8017444:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8017448:	e000      	b.n	801744c <ETH_SetMACConfig+0x60>
 801744a:	2200      	movs	r2, #0
                        macconf->Speed |
 801744c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 801744e:	683b      	ldr	r3, [r7, #0]
 8017450:	7f1b      	ldrb	r3, [r3, #28]
 8017452:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8017454:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8017456:	683b      	ldr	r3, [r7, #0]
 8017458:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 801745a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 801745c:	683b      	ldr	r3, [r7, #0]
 801745e:	791b      	ldrb	r3, [r3, #4]
 8017460:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8017462:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8017464:	683a      	ldr	r2, [r7, #0]
 8017466:	f892 2020 	ldrb.w	r2, [r2, #32]
 801746a:	2a00      	cmp	r2, #0
 801746c:	d102      	bne.n	8017474 <ETH_SetMACConfig+0x88>
 801746e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017472:	e000      	b.n	8017476 <ETH_SetMACConfig+0x8a>
 8017474:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8017476:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8017478:	683b      	ldr	r3, [r7, #0]
 801747a:	7bdb      	ldrb	r3, [r3, #15]
 801747c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 801747e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8017480:	683b      	ldr	r3, [r7, #0]
 8017482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8017484:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8017486:	683b      	ldr	r3, [r7, #0]
 8017488:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801748c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 801748e:	4313      	orrs	r3, r2
 8017490:	68fa      	ldr	r2, [r7, #12]
 8017492:	4313      	orrs	r3, r2
 8017494:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8017496:	687b      	ldr	r3, [r7, #4]
 8017498:	681b      	ldr	r3, [r3, #0]
 801749a:	68fa      	ldr	r2, [r7, #12]
 801749c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 801749e:	687b      	ldr	r3, [r7, #4]
 80174a0:	681b      	ldr	r3, [r3, #0]
 80174a2:	681b      	ldr	r3, [r3, #0]
 80174a4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80174a6:	2001      	movs	r0, #1
 80174a8:	f7fe f87e 	bl	80155a8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80174ac:	687b      	ldr	r3, [r7, #4]
 80174ae:	681b      	ldr	r3, [r3, #0]
 80174b0:	68fa      	ldr	r2, [r7, #12]
 80174b2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80174b4:	687b      	ldr	r3, [r7, #4]
 80174b6:	681b      	ldr	r3, [r3, #0]
 80174b8:	699b      	ldr	r3, [r3, #24]
 80174ba:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80174bc:	68fa      	ldr	r2, [r7, #12]
 80174be:	f64f 7341 	movw	r3, #65345	; 0xff41
 80174c2:	4013      	ands	r3, r2
 80174c4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80174c6:	683b      	ldr	r3, [r7, #0]
 80174c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80174ca:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80174cc:	683a      	ldr	r2, [r7, #0]
 80174ce:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80174d2:	2a00      	cmp	r2, #0
 80174d4:	d101      	bne.n	80174da <ETH_SetMACConfig+0xee>
 80174d6:	2280      	movs	r2, #128	; 0x80
 80174d8:	e000      	b.n	80174dc <ETH_SetMACConfig+0xf0>
 80174da:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80174dc:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80174de:	683b      	ldr	r3, [r7, #0]
 80174e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80174e2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80174e4:	683a      	ldr	r2, [r7, #0]
 80174e6:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80174ea:	2a01      	cmp	r2, #1
 80174ec:	d101      	bne.n	80174f2 <ETH_SetMACConfig+0x106>
 80174ee:	2208      	movs	r2, #8
 80174f0:	e000      	b.n	80174f4 <ETH_SetMACConfig+0x108>
 80174f2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80174f4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80174f6:	683a      	ldr	r2, [r7, #0]
 80174f8:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80174fc:	2a01      	cmp	r2, #1
 80174fe:	d101      	bne.n	8017504 <ETH_SetMACConfig+0x118>
 8017500:	2204      	movs	r2, #4
 8017502:	e000      	b.n	8017506 <ETH_SetMACConfig+0x11a>
 8017504:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8017506:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8017508:	683a      	ldr	r2, [r7, #0]
 801750a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 801750e:	2a01      	cmp	r2, #1
 8017510:	d101      	bne.n	8017516 <ETH_SetMACConfig+0x12a>
 8017512:	2202      	movs	r2, #2
 8017514:	e000      	b.n	8017518 <ETH_SetMACConfig+0x12c>
 8017516:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8017518:	4313      	orrs	r3, r2
 801751a:	68fa      	ldr	r2, [r7, #12]
 801751c:	4313      	orrs	r3, r2
 801751e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8017520:	687b      	ldr	r3, [r7, #4]
 8017522:	681b      	ldr	r3, [r3, #0]
 8017524:	68fa      	ldr	r2, [r7, #12]
 8017526:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8017528:	687b      	ldr	r3, [r7, #4]
 801752a:	681b      	ldr	r3, [r3, #0]
 801752c:	699b      	ldr	r3, [r3, #24]
 801752e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8017530:	2001      	movs	r0, #1
 8017532:	f7fe f839 	bl	80155a8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8017536:	687b      	ldr	r3, [r7, #4]
 8017538:	681b      	ldr	r3, [r3, #0]
 801753a:	68fa      	ldr	r2, [r7, #12]
 801753c:	619a      	str	r2, [r3, #24]
}
 801753e:	bf00      	nop
 8017540:	3710      	adds	r7, #16
 8017542:	46bd      	mov	sp, r7
 8017544:	bd80      	pop	{r7, pc}
 8017546:	bf00      	nop
 8017548:	ff20810f 	.word	0xff20810f

0801754c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 801754c:	b580      	push	{r7, lr}
 801754e:	b084      	sub	sp, #16
 8017550:	af00      	add	r7, sp, #0
 8017552:	6078      	str	r0, [r7, #4]
 8017554:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8017556:	687b      	ldr	r3, [r7, #4]
 8017558:	681b      	ldr	r3, [r3, #0]
 801755a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801755e:	699b      	ldr	r3, [r3, #24]
 8017560:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8017562:	68fa      	ldr	r2, [r7, #12]
 8017564:	4b3d      	ldr	r3, [pc, #244]	; (801765c <ETH_SetDMAConfig+0x110>)
 8017566:	4013      	ands	r3, r2
 8017568:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 801756a:	683b      	ldr	r3, [r7, #0]
 801756c:	7b1b      	ldrb	r3, [r3, #12]
 801756e:	2b00      	cmp	r3, #0
 8017570:	d102      	bne.n	8017578 <ETH_SetDMAConfig+0x2c>
 8017572:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8017576:	e000      	b.n	801757a <ETH_SetDMAConfig+0x2e>
 8017578:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 801757a:	683b      	ldr	r3, [r7, #0]
 801757c:	7b5b      	ldrb	r3, [r3, #13]
 801757e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8017580:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8017582:	683a      	ldr	r2, [r7, #0]
 8017584:	7f52      	ldrb	r2, [r2, #29]
 8017586:	2a00      	cmp	r2, #0
 8017588:	d102      	bne.n	8017590 <ETH_SetDMAConfig+0x44>
 801758a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801758e:	e000      	b.n	8017592 <ETH_SetDMAConfig+0x46>
 8017590:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8017592:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8017594:	683b      	ldr	r3, [r7, #0]
 8017596:	7b9b      	ldrb	r3, [r3, #14]
 8017598:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 801759a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 801759c:	683b      	ldr	r3, [r7, #0]
 801759e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80175a0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80175a2:	683b      	ldr	r3, [r7, #0]
 80175a4:	7f1b      	ldrb	r3, [r3, #28]
 80175a6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80175a8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80175aa:	683b      	ldr	r3, [r7, #0]
 80175ac:	7f9b      	ldrb	r3, [r3, #30]
 80175ae:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80175b0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80175b2:	683b      	ldr	r3, [r7, #0]
 80175b4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80175b6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80175b8:	683b      	ldr	r3, [r7, #0]
 80175ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80175be:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80175c0:	4313      	orrs	r3, r2
 80175c2:	68fa      	ldr	r2, [r7, #12]
 80175c4:	4313      	orrs	r3, r2
 80175c6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80175c8:	687b      	ldr	r3, [r7, #4]
 80175ca:	681b      	ldr	r3, [r3, #0]
 80175cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80175d0:	461a      	mov	r2, r3
 80175d2:	68fb      	ldr	r3, [r7, #12]
 80175d4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80175d6:	687b      	ldr	r3, [r7, #4]
 80175d8:	681b      	ldr	r3, [r3, #0]
 80175da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80175de:	699b      	ldr	r3, [r3, #24]
 80175e0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80175e2:	2001      	movs	r0, #1
 80175e4:	f7fd ffe0 	bl	80155a8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80175e8:	687b      	ldr	r3, [r7, #4]
 80175ea:	681b      	ldr	r3, [r3, #0]
 80175ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80175f0:	461a      	mov	r2, r3
 80175f2:	68fb      	ldr	r3, [r7, #12]
 80175f4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80175f6:	683b      	ldr	r3, [r7, #0]
 80175f8:	791b      	ldrb	r3, [r3, #4]
 80175fa:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80175fc:	683b      	ldr	r3, [r7, #0]
 80175fe:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8017600:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8017602:	683b      	ldr	r3, [r7, #0]
 8017604:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8017606:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8017608:	683b      	ldr	r3, [r7, #0]
 801760a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 801760c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 801760e:	683b      	ldr	r3, [r7, #0]
 8017610:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8017614:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8017616:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8017618:	683b      	ldr	r3, [r7, #0]
 801761a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801761c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 801761e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8017620:	683b      	ldr	r3, [r7, #0]
 8017622:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8017624:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8017626:	687a      	ldr	r2, [r7, #4]
 8017628:	6812      	ldr	r2, [r2, #0]
 801762a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801762e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8017632:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8017634:	687b      	ldr	r3, [r7, #4]
 8017636:	681b      	ldr	r3, [r3, #0]
 8017638:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801763c:	681b      	ldr	r3, [r3, #0]
 801763e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8017640:	2001      	movs	r0, #1
 8017642:	f7fd ffb1 	bl	80155a8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8017646:	687b      	ldr	r3, [r7, #4]
 8017648:	681b      	ldr	r3, [r3, #0]
 801764a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801764e:	461a      	mov	r2, r3
 8017650:	68fb      	ldr	r3, [r7, #12]
 8017652:	6013      	str	r3, [r2, #0]
}
 8017654:	bf00      	nop
 8017656:	3710      	adds	r7, #16
 8017658:	46bd      	mov	sp, r7
 801765a:	bd80      	pop	{r7, pc}
 801765c:	f8de3f23 	.word	0xf8de3f23

08017660 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8017660:	b580      	push	{r7, lr}
 8017662:	b0a6      	sub	sp, #152	; 0x98
 8017664:	af00      	add	r7, sp, #0
 8017666:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8017668:	2301      	movs	r3, #1
 801766a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 801766e:	2301      	movs	r3, #1
 8017670:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8017674:	2300      	movs	r3, #0
 8017676:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8017678:	2300      	movs	r3, #0
 801767a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 801767e:	2301      	movs	r3, #1
 8017680:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8017684:	2300      	movs	r3, #0
 8017686:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 801768a:	2301      	movs	r3, #1
 801768c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8017690:	2300      	movs	r3, #0
 8017692:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8017696:	2300      	movs	r3, #0
 8017698:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 801769c:	2300      	movs	r3, #0
 801769e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80176a0:	2300      	movs	r3, #0
 80176a2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80176a6:	2300      	movs	r3, #0
 80176a8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80176aa:	2300      	movs	r3, #0
 80176ac:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80176b0:	2300      	movs	r3, #0
 80176b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80176b6:	2300      	movs	r3, #0
 80176b8:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80176bc:	2300      	movs	r3, #0
 80176be:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80176c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80176c6:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80176c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80176cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80176ce:	2300      	movs	r3, #0
 80176d0:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80176d4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80176d8:	4619      	mov	r1, r3
 80176da:	6878      	ldr	r0, [r7, #4]
 80176dc:	f7ff fe86 	bl	80173ec <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80176e0:	2301      	movs	r3, #1
 80176e2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80176e4:	2301      	movs	r3, #1
 80176e6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80176e8:	2301      	movs	r3, #1
 80176ea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80176ee:	2301      	movs	r3, #1
 80176f0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80176f2:	2300      	movs	r3, #0
 80176f4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80176f6:	2300      	movs	r3, #0
 80176f8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80176fc:	2300      	movs	r3, #0
 80176fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8017702:	2300      	movs	r3, #0
 8017704:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8017706:	2301      	movs	r3, #1
 8017708:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 801770c:	2301      	movs	r3, #1
 801770e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8017710:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8017714:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8017716:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801771a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 801771c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8017720:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8017722:	2301      	movs	r3, #1
 8017724:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8017728:	2300      	movs	r3, #0
 801772a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 801772c:	2300      	movs	r3, #0
 801772e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8017730:	f107 0308 	add.w	r3, r7, #8
 8017734:	4619      	mov	r1, r3
 8017736:	6878      	ldr	r0, [r7, #4]
 8017738:	f7ff ff08 	bl	801754c <ETH_SetDMAConfig>
}
 801773c:	bf00      	nop
 801773e:	3798      	adds	r7, #152	; 0x98
 8017740:	46bd      	mov	sp, r7
 8017742:	bd80      	pop	{r7, pc}

08017744 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8017744:	b480      	push	{r7}
 8017746:	b087      	sub	sp, #28
 8017748:	af00      	add	r7, sp, #0
 801774a:	60f8      	str	r0, [r7, #12]
 801774c:	60b9      	str	r1, [r7, #8]
 801774e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8017750:	687b      	ldr	r3, [r7, #4]
 8017752:	3305      	adds	r3, #5
 8017754:	781b      	ldrb	r3, [r3, #0]
 8017756:	021b      	lsls	r3, r3, #8
 8017758:	687a      	ldr	r2, [r7, #4]
 801775a:	3204      	adds	r2, #4
 801775c:	7812      	ldrb	r2, [r2, #0]
 801775e:	4313      	orrs	r3, r2
 8017760:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8017762:	68ba      	ldr	r2, [r7, #8]
 8017764:	4b11      	ldr	r3, [pc, #68]	; (80177ac <ETH_MACAddressConfig+0x68>)
 8017766:	4413      	add	r3, r2
 8017768:	461a      	mov	r2, r3
 801776a:	697b      	ldr	r3, [r7, #20]
 801776c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 801776e:	687b      	ldr	r3, [r7, #4]
 8017770:	3303      	adds	r3, #3
 8017772:	781b      	ldrb	r3, [r3, #0]
 8017774:	061a      	lsls	r2, r3, #24
 8017776:	687b      	ldr	r3, [r7, #4]
 8017778:	3302      	adds	r3, #2
 801777a:	781b      	ldrb	r3, [r3, #0]
 801777c:	041b      	lsls	r3, r3, #16
 801777e:	431a      	orrs	r2, r3
 8017780:	687b      	ldr	r3, [r7, #4]
 8017782:	3301      	adds	r3, #1
 8017784:	781b      	ldrb	r3, [r3, #0]
 8017786:	021b      	lsls	r3, r3, #8
 8017788:	4313      	orrs	r3, r2
 801778a:	687a      	ldr	r2, [r7, #4]
 801778c:	7812      	ldrb	r2, [r2, #0]
 801778e:	4313      	orrs	r3, r2
 8017790:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8017792:	68ba      	ldr	r2, [r7, #8]
 8017794:	4b06      	ldr	r3, [pc, #24]	; (80177b0 <ETH_MACAddressConfig+0x6c>)
 8017796:	4413      	add	r3, r2
 8017798:	461a      	mov	r2, r3
 801779a:	697b      	ldr	r3, [r7, #20]
 801779c:	6013      	str	r3, [r2, #0]
}
 801779e:	bf00      	nop
 80177a0:	371c      	adds	r7, #28
 80177a2:	46bd      	mov	sp, r7
 80177a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177a8:	4770      	bx	lr
 80177aa:	bf00      	nop
 80177ac:	40028040 	.word	0x40028040
 80177b0:	40028044 	.word	0x40028044

080177b4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80177b4:	b480      	push	{r7}
 80177b6:	b085      	sub	sp, #20
 80177b8:	af00      	add	r7, sp, #0
 80177ba:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80177bc:	2300      	movs	r3, #0
 80177be:	60fb      	str	r3, [r7, #12]
 80177c0:	e03e      	b.n	8017840 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80177c2:	687b      	ldr	r3, [r7, #4]
 80177c4:	68d9      	ldr	r1, [r3, #12]
 80177c6:	68fa      	ldr	r2, [r7, #12]
 80177c8:	4613      	mov	r3, r2
 80177ca:	009b      	lsls	r3, r3, #2
 80177cc:	4413      	add	r3, r2
 80177ce:	00db      	lsls	r3, r3, #3
 80177d0:	440b      	add	r3, r1
 80177d2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80177d4:	68bb      	ldr	r3, [r7, #8]
 80177d6:	2200      	movs	r2, #0
 80177d8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80177da:	68bb      	ldr	r3, [r7, #8]
 80177dc:	2200      	movs	r2, #0
 80177de:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80177e0:	68bb      	ldr	r3, [r7, #8]
 80177e2:	2200      	movs	r2, #0
 80177e4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80177e6:	68bb      	ldr	r3, [r7, #8]
 80177e8:	2200      	movs	r2, #0
 80177ea:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80177ec:	68b9      	ldr	r1, [r7, #8]
 80177ee:	687b      	ldr	r3, [r7, #4]
 80177f0:	68fa      	ldr	r2, [r7, #12]
 80177f2:	3206      	adds	r2, #6
 80177f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80177f8:	68bb      	ldr	r3, [r7, #8]
 80177fa:	681b      	ldr	r3, [r3, #0]
 80177fc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8017800:	68bb      	ldr	r3, [r7, #8]
 8017802:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8017804:	68fb      	ldr	r3, [r7, #12]
 8017806:	2b02      	cmp	r3, #2
 8017808:	d80c      	bhi.n	8017824 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 801780a:	687b      	ldr	r3, [r7, #4]
 801780c:	68d9      	ldr	r1, [r3, #12]
 801780e:	68fb      	ldr	r3, [r7, #12]
 8017810:	1c5a      	adds	r2, r3, #1
 8017812:	4613      	mov	r3, r2
 8017814:	009b      	lsls	r3, r3, #2
 8017816:	4413      	add	r3, r2
 8017818:	00db      	lsls	r3, r3, #3
 801781a:	440b      	add	r3, r1
 801781c:	461a      	mov	r2, r3
 801781e:	68bb      	ldr	r3, [r7, #8]
 8017820:	60da      	str	r2, [r3, #12]
 8017822:	e004      	b.n	801782e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8017824:	687b      	ldr	r3, [r7, #4]
 8017826:	68db      	ldr	r3, [r3, #12]
 8017828:	461a      	mov	r2, r3
 801782a:	68bb      	ldr	r3, [r7, #8]
 801782c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 801782e:	68bb      	ldr	r3, [r7, #8]
 8017830:	681b      	ldr	r3, [r3, #0]
 8017832:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8017836:	68bb      	ldr	r3, [r7, #8]
 8017838:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 801783a:	68fb      	ldr	r3, [r7, #12]
 801783c:	3301      	adds	r3, #1
 801783e:	60fb      	str	r3, [r7, #12]
 8017840:	68fb      	ldr	r3, [r7, #12]
 8017842:	2b03      	cmp	r3, #3
 8017844:	d9bd      	bls.n	80177c2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8017846:	687b      	ldr	r3, [r7, #4]
 8017848:	2200      	movs	r2, #0
 801784a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 801784c:	687b      	ldr	r3, [r7, #4]
 801784e:	68da      	ldr	r2, [r3, #12]
 8017850:	687b      	ldr	r3, [r7, #4]
 8017852:	681b      	ldr	r3, [r3, #0]
 8017854:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017858:	611a      	str	r2, [r3, #16]
}
 801785a:	bf00      	nop
 801785c:	3714      	adds	r7, #20
 801785e:	46bd      	mov	sp, r7
 8017860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017864:	4770      	bx	lr

08017866 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8017866:	b480      	push	{r7}
 8017868:	b085      	sub	sp, #20
 801786a:	af00      	add	r7, sp, #0
 801786c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 801786e:	2300      	movs	r3, #0
 8017870:	60fb      	str	r3, [r7, #12]
 8017872:	e046      	b.n	8017902 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8017874:	687b      	ldr	r3, [r7, #4]
 8017876:	6919      	ldr	r1, [r3, #16]
 8017878:	68fa      	ldr	r2, [r7, #12]
 801787a:	4613      	mov	r3, r2
 801787c:	009b      	lsls	r3, r3, #2
 801787e:	4413      	add	r3, r2
 8017880:	00db      	lsls	r3, r3, #3
 8017882:	440b      	add	r3, r1
 8017884:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8017886:	68bb      	ldr	r3, [r7, #8]
 8017888:	2200      	movs	r2, #0
 801788a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 801788c:	68bb      	ldr	r3, [r7, #8]
 801788e:	2200      	movs	r2, #0
 8017890:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8017892:	68bb      	ldr	r3, [r7, #8]
 8017894:	2200      	movs	r2, #0
 8017896:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8017898:	68bb      	ldr	r3, [r7, #8]
 801789a:	2200      	movs	r2, #0
 801789c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 801789e:	68bb      	ldr	r3, [r7, #8]
 80178a0:	2200      	movs	r2, #0
 80178a2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80178a4:	68bb      	ldr	r3, [r7, #8]
 80178a6:	2200      	movs	r2, #0
 80178a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80178aa:	68bb      	ldr	r3, [r7, #8]
 80178ac:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80178b0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80178b2:	68bb      	ldr	r3, [r7, #8]
 80178b4:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80178b8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80178ba:	68bb      	ldr	r3, [r7, #8]
 80178bc:	685b      	ldr	r3, [r3, #4]
 80178be:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80178c2:	68bb      	ldr	r3, [r7, #8]
 80178c4:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80178c6:	68b9      	ldr	r1, [r7, #8]
 80178c8:	687b      	ldr	r3, [r7, #4]
 80178ca:	68fa      	ldr	r2, [r7, #12]
 80178cc:	3212      	adds	r2, #18
 80178ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80178d2:	68fb      	ldr	r3, [r7, #12]
 80178d4:	2b02      	cmp	r3, #2
 80178d6:	d80c      	bhi.n	80178f2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80178d8:	687b      	ldr	r3, [r7, #4]
 80178da:	6919      	ldr	r1, [r3, #16]
 80178dc:	68fb      	ldr	r3, [r7, #12]
 80178de:	1c5a      	adds	r2, r3, #1
 80178e0:	4613      	mov	r3, r2
 80178e2:	009b      	lsls	r3, r3, #2
 80178e4:	4413      	add	r3, r2
 80178e6:	00db      	lsls	r3, r3, #3
 80178e8:	440b      	add	r3, r1
 80178ea:	461a      	mov	r2, r3
 80178ec:	68bb      	ldr	r3, [r7, #8]
 80178ee:	60da      	str	r2, [r3, #12]
 80178f0:	e004      	b.n	80178fc <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80178f2:	687b      	ldr	r3, [r7, #4]
 80178f4:	691b      	ldr	r3, [r3, #16]
 80178f6:	461a      	mov	r2, r3
 80178f8:	68bb      	ldr	r3, [r7, #8]
 80178fa:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80178fc:	68fb      	ldr	r3, [r7, #12]
 80178fe:	3301      	adds	r3, #1
 8017900:	60fb      	str	r3, [r7, #12]
 8017902:	68fb      	ldr	r3, [r7, #12]
 8017904:	2b03      	cmp	r3, #3
 8017906:	d9b5      	bls.n	8017874 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	2200      	movs	r2, #0
 801790c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 801790e:	687b      	ldr	r3, [r7, #4]
 8017910:	2200      	movs	r2, #0
 8017912:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8017914:	687b      	ldr	r3, [r7, #4]
 8017916:	2200      	movs	r2, #0
 8017918:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 801791a:	687b      	ldr	r3, [r7, #4]
 801791c:	2200      	movs	r2, #0
 801791e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8017920:	687b      	ldr	r3, [r7, #4]
 8017922:	2200      	movs	r2, #0
 8017924:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8017926:	687b      	ldr	r3, [r7, #4]
 8017928:	691a      	ldr	r2, [r3, #16]
 801792a:	687b      	ldr	r3, [r7, #4]
 801792c:	681b      	ldr	r3, [r3, #0]
 801792e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017932:	60da      	str	r2, [r3, #12]
}
 8017934:	bf00      	nop
 8017936:	3714      	adds	r7, #20
 8017938:	46bd      	mov	sp, r7
 801793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801793e:	4770      	bx	lr

08017940 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8017940:	b480      	push	{r7}
 8017942:	b08d      	sub	sp, #52	; 0x34
 8017944:	af00      	add	r7, sp, #0
 8017946:	60f8      	str	r0, [r7, #12]
 8017948:	60b9      	str	r1, [r7, #8]
 801794a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 801794c:	68fb      	ldr	r3, [r7, #12]
 801794e:	3318      	adds	r3, #24
 8017950:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8017952:	697b      	ldr	r3, [r7, #20]
 8017954:	691b      	ldr	r3, [r3, #16]
 8017956:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8017958:	697b      	ldr	r3, [r7, #20]
 801795a:	691b      	ldr	r3, [r3, #16]
 801795c:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 801795e:	2300      	movs	r3, #0
 8017960:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8017962:	697b      	ldr	r3, [r7, #20]
 8017964:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801796a:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 801796c:	68bb      	ldr	r3, [r7, #8]
 801796e:	689b      	ldr	r3, [r3, #8]
 8017970:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8017972:	2300      	movs	r3, #0
 8017974:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8017976:	6a3b      	ldr	r3, [r7, #32]
 8017978:	681b      	ldr	r3, [r3, #0]
 801797a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801797e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8017982:	d007      	beq.n	8017994 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8017984:	697a      	ldr	r2, [r7, #20]
 8017986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017988:	3304      	adds	r3, #4
 801798a:	009b      	lsls	r3, r3, #2
 801798c:	4413      	add	r3, r2
 801798e:	685b      	ldr	r3, [r3, #4]
 8017990:	2b00      	cmp	r3, #0
 8017992:	d001      	beq.n	8017998 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8017994:	2302      	movs	r3, #2
 8017996:	e0ff      	b.n	8017b98 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8017998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801799a:	3301      	adds	r3, #1
 801799c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 801799e:	69fb      	ldr	r3, [r7, #28]
 80179a0:	681b      	ldr	r3, [r3, #0]
 80179a2:	461a      	mov	r2, r3
 80179a4:	6a3b      	ldr	r3, [r7, #32]
 80179a6:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80179a8:	6a3b      	ldr	r3, [r7, #32]
 80179aa:	685a      	ldr	r2, [r3, #4]
 80179ac:	4b7d      	ldr	r3, [pc, #500]	; (8017ba4 <ETH_Prepare_Tx_Descriptors+0x264>)
 80179ae:	4013      	ands	r3, r2
 80179b0:	69fa      	ldr	r2, [r7, #28]
 80179b2:	6852      	ldr	r2, [r2, #4]
 80179b4:	431a      	orrs	r2, r3
 80179b6:	6a3b      	ldr	r3, [r7, #32]
 80179b8:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80179ba:	68bb      	ldr	r3, [r7, #8]
 80179bc:	681b      	ldr	r3, [r3, #0]
 80179be:	f003 0301 	and.w	r3, r3, #1
 80179c2:	2b00      	cmp	r3, #0
 80179c4:	d008      	beq.n	80179d8 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80179c6:	6a3b      	ldr	r3, [r7, #32]
 80179c8:	681b      	ldr	r3, [r3, #0]
 80179ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80179ce:	68bb      	ldr	r3, [r7, #8]
 80179d0:	695b      	ldr	r3, [r3, #20]
 80179d2:	431a      	orrs	r2, r3
 80179d4:	6a3b      	ldr	r3, [r7, #32]
 80179d6:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80179d8:	68bb      	ldr	r3, [r7, #8]
 80179da:	681b      	ldr	r3, [r3, #0]
 80179dc:	f003 0320 	and.w	r3, r3, #32
 80179e0:	2b00      	cmp	r3, #0
 80179e2:	d008      	beq.n	80179f6 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80179e4:	6a3b      	ldr	r3, [r7, #32]
 80179e6:	681b      	ldr	r3, [r3, #0]
 80179e8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80179ec:	68bb      	ldr	r3, [r7, #8]
 80179ee:	691b      	ldr	r3, [r3, #16]
 80179f0:	431a      	orrs	r2, r3
 80179f2:	6a3b      	ldr	r3, [r7, #32]
 80179f4:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80179f6:	68bb      	ldr	r3, [r7, #8]
 80179f8:	681b      	ldr	r3, [r3, #0]
 80179fa:	f003 0304 	and.w	r3, r3, #4
 80179fe:	2b00      	cmp	r3, #0
 8017a00:	d005      	beq.n	8017a0e <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8017a02:	6a3b      	ldr	r3, [r7, #32]
 8017a04:	681b      	ldr	r3, [r3, #0]
 8017a06:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8017a0a:	6a3b      	ldr	r3, [r7, #32]
 8017a0c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8017a0e:	6a3b      	ldr	r3, [r7, #32]
 8017a10:	681b      	ldr	r3, [r3, #0]
 8017a12:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8017a16:	6a3b      	ldr	r3, [r7, #32]
 8017a18:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8017a1a:	f3bf 8f5f 	dmb	sy
}
 8017a1e:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8017a20:	6a3b      	ldr	r3, [r7, #32]
 8017a22:	681b      	ldr	r3, [r3, #0]
 8017a24:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8017a28:	6a3b      	ldr	r3, [r7, #32]
 8017a2a:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8017a2c:	e082      	b.n	8017b34 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8017a2e:	6a3b      	ldr	r3, [r7, #32]
 8017a30:	681b      	ldr	r3, [r3, #0]
 8017a32:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8017a36:	6a3b      	ldr	r3, [r7, #32]
 8017a38:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8017a3a:	687b      	ldr	r3, [r7, #4]
 8017a3c:	2b00      	cmp	r3, #0
 8017a3e:	d006      	beq.n	8017a4e <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8017a40:	6a3b      	ldr	r3, [r7, #32]
 8017a42:	681b      	ldr	r3, [r3, #0]
 8017a44:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8017a48:	6a3b      	ldr	r3, [r7, #32]
 8017a4a:	601a      	str	r2, [r3, #0]
 8017a4c:	e005      	b.n	8017a5a <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8017a4e:	6a3b      	ldr	r3, [r7, #32]
 8017a50:	681b      	ldr	r3, [r3, #0]
 8017a52:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8017a56:	6a3b      	ldr	r3, [r7, #32]
 8017a58:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8017a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a5c:	3301      	adds	r3, #1
 8017a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a62:	2b03      	cmp	r3, #3
 8017a64:	d902      	bls.n	8017a6c <ETH_Prepare_Tx_Descriptors+0x12c>
 8017a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a68:	3b04      	subs	r3, #4
 8017a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8017a6c:	697b      	ldr	r3, [r7, #20]
 8017a6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017a70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017a74:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8017a76:	6a3b      	ldr	r3, [r7, #32]
 8017a78:	681b      	ldr	r3, [r3, #0]
 8017a7a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8017a7e:	6a3b      	ldr	r3, [r7, #32]
 8017a80:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8017a82:	6a3b      	ldr	r3, [r7, #32]
 8017a84:	681b      	ldr	r3, [r3, #0]
 8017a86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8017a8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8017a8e:	d007      	beq.n	8017aa0 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8017a90:	697a      	ldr	r2, [r7, #20]
 8017a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a94:	3304      	adds	r3, #4
 8017a96:	009b      	lsls	r3, r3, #2
 8017a98:	4413      	add	r3, r2
 8017a9a:	685b      	ldr	r3, [r3, #4]
 8017a9c:	2b00      	cmp	r3, #0
 8017a9e:	d029      	beq.n	8017af4 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8017aa0:	693b      	ldr	r3, [r7, #16]
 8017aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8017aa4:	697b      	ldr	r3, [r7, #20]
 8017aa6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017aac:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8017aae:	2300      	movs	r3, #0
 8017ab0:	62bb      	str	r3, [r7, #40]	; 0x28
 8017ab2:	e019      	b.n	8017ae8 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8017ab4:	f3bf 8f5f 	dmb	sy
}
 8017ab8:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8017aba:	6a3b      	ldr	r3, [r7, #32]
 8017abc:	681b      	ldr	r3, [r3, #0]
 8017abe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8017ac2:	6a3b      	ldr	r3, [r7, #32]
 8017ac4:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8017ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ac8:	3301      	adds	r3, #1
 8017aca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ace:	2b03      	cmp	r3, #3
 8017ad0:	d902      	bls.n	8017ad8 <ETH_Prepare_Tx_Descriptors+0x198>
 8017ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ad4:	3b04      	subs	r3, #4
 8017ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8017ad8:	697b      	ldr	r3, [r7, #20]
 8017ada:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017adc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017ae0:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8017ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ae4:	3301      	adds	r3, #1
 8017ae6:	62bb      	str	r3, [r7, #40]	; 0x28
 8017ae8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017aec:	429a      	cmp	r2, r3
 8017aee:	d3e1      	bcc.n	8017ab4 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8017af0:	2302      	movs	r3, #2
 8017af2:	e051      	b.n	8017b98 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8017af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017af6:	3301      	adds	r3, #1
 8017af8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8017afa:	69fb      	ldr	r3, [r7, #28]
 8017afc:	689b      	ldr	r3, [r3, #8]
 8017afe:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8017b00:	69fb      	ldr	r3, [r7, #28]
 8017b02:	681b      	ldr	r3, [r3, #0]
 8017b04:	461a      	mov	r2, r3
 8017b06:	6a3b      	ldr	r3, [r7, #32]
 8017b08:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8017b0a:	6a3b      	ldr	r3, [r7, #32]
 8017b0c:	685a      	ldr	r2, [r3, #4]
 8017b0e:	4b25      	ldr	r3, [pc, #148]	; (8017ba4 <ETH_Prepare_Tx_Descriptors+0x264>)
 8017b10:	4013      	ands	r3, r2
 8017b12:	69fa      	ldr	r2, [r7, #28]
 8017b14:	6852      	ldr	r2, [r2, #4]
 8017b16:	431a      	orrs	r2, r3
 8017b18:	6a3b      	ldr	r3, [r7, #32]
 8017b1a:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8017b1c:	69bb      	ldr	r3, [r7, #24]
 8017b1e:	3301      	adds	r3, #1
 8017b20:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8017b22:	f3bf 8f5f 	dmb	sy
}
 8017b26:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8017b28:	6a3b      	ldr	r3, [r7, #32]
 8017b2a:	681b      	ldr	r3, [r3, #0]
 8017b2c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8017b30:	6a3b      	ldr	r3, [r7, #32]
 8017b32:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8017b34:	69fb      	ldr	r3, [r7, #28]
 8017b36:	689b      	ldr	r3, [r3, #8]
 8017b38:	2b00      	cmp	r3, #0
 8017b3a:	f47f af78 	bne.w	8017a2e <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 8017b3e:	687b      	ldr	r3, [r7, #4]
 8017b40:	2b00      	cmp	r3, #0
 8017b42:	d006      	beq.n	8017b52 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8017b44:	6a3b      	ldr	r3, [r7, #32]
 8017b46:	681b      	ldr	r3, [r3, #0]
 8017b48:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8017b4c:	6a3b      	ldr	r3, [r7, #32]
 8017b4e:	601a      	str	r2, [r3, #0]
 8017b50:	e005      	b.n	8017b5e <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8017b52:	6a3b      	ldr	r3, [r7, #32]
 8017b54:	681b      	ldr	r3, [r3, #0]
 8017b56:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8017b5a:	6a3b      	ldr	r3, [r7, #32]
 8017b5c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8017b5e:	6a3b      	ldr	r3, [r7, #32]
 8017b60:	681b      	ldr	r3, [r3, #0]
 8017b62:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8017b66:	6a3b      	ldr	r3, [r7, #32]
 8017b68:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8017b6a:	697b      	ldr	r3, [r7, #20]
 8017b6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017b6e:	6979      	ldr	r1, [r7, #20]
 8017b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b72:	3304      	adds	r3, #4
 8017b74:	009b      	lsls	r3, r3, #2
 8017b76:	440b      	add	r3, r1
 8017b78:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8017b7a:	697b      	ldr	r3, [r7, #20]
 8017b7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017b7e:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8017b80:	b672      	cpsid	i
}
 8017b82:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8017b84:	697b      	ldr	r3, [r7, #20]
 8017b86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017b88:	69bb      	ldr	r3, [r7, #24]
 8017b8a:	4413      	add	r3, r2
 8017b8c:	1c5a      	adds	r2, r3, #1
 8017b8e:	697b      	ldr	r3, [r7, #20]
 8017b90:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8017b92:	b662      	cpsie	i
}
 8017b94:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8017b96:	2300      	movs	r3, #0
}
 8017b98:	4618      	mov	r0, r3
 8017b9a:	3734      	adds	r7, #52	; 0x34
 8017b9c:	46bd      	mov	sp, r7
 8017b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ba2:	4770      	bx	lr
 8017ba4:	ffffe000 	.word	0xffffe000

08017ba8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8017ba8:	b480      	push	{r7}
 8017baa:	b089      	sub	sp, #36	; 0x24
 8017bac:	af00      	add	r7, sp, #0
 8017bae:	6078      	str	r0, [r7, #4]
 8017bb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8017bb2:	2300      	movs	r3, #0
 8017bb4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8017bb6:	2300      	movs	r3, #0
 8017bb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8017bba:	2300      	movs	r3, #0
 8017bbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8017bbe:	2300      	movs	r3, #0
 8017bc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8017bc2:	2300      	movs	r3, #0
 8017bc4:	61fb      	str	r3, [r7, #28]
 8017bc6:	e175      	b.n	8017eb4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8017bc8:	2201      	movs	r2, #1
 8017bca:	69fb      	ldr	r3, [r7, #28]
 8017bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8017bd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8017bd2:	683b      	ldr	r3, [r7, #0]
 8017bd4:	681b      	ldr	r3, [r3, #0]
 8017bd6:	697a      	ldr	r2, [r7, #20]
 8017bd8:	4013      	ands	r3, r2
 8017bda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8017bdc:	693a      	ldr	r2, [r7, #16]
 8017bde:	697b      	ldr	r3, [r7, #20]
 8017be0:	429a      	cmp	r2, r3
 8017be2:	f040 8164 	bne.w	8017eae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8017be6:	683b      	ldr	r3, [r7, #0]
 8017be8:	685b      	ldr	r3, [r3, #4]
 8017bea:	f003 0303 	and.w	r3, r3, #3
 8017bee:	2b01      	cmp	r3, #1
 8017bf0:	d005      	beq.n	8017bfe <HAL_GPIO_Init+0x56>
 8017bf2:	683b      	ldr	r3, [r7, #0]
 8017bf4:	685b      	ldr	r3, [r3, #4]
 8017bf6:	f003 0303 	and.w	r3, r3, #3
 8017bfa:	2b02      	cmp	r3, #2
 8017bfc:	d130      	bne.n	8017c60 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8017bfe:	687b      	ldr	r3, [r7, #4]
 8017c00:	689b      	ldr	r3, [r3, #8]
 8017c02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8017c04:	69fb      	ldr	r3, [r7, #28]
 8017c06:	005b      	lsls	r3, r3, #1
 8017c08:	2203      	movs	r2, #3
 8017c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8017c0e:	43db      	mvns	r3, r3
 8017c10:	69ba      	ldr	r2, [r7, #24]
 8017c12:	4013      	ands	r3, r2
 8017c14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8017c16:	683b      	ldr	r3, [r7, #0]
 8017c18:	68da      	ldr	r2, [r3, #12]
 8017c1a:	69fb      	ldr	r3, [r7, #28]
 8017c1c:	005b      	lsls	r3, r3, #1
 8017c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8017c22:	69ba      	ldr	r2, [r7, #24]
 8017c24:	4313      	orrs	r3, r2
 8017c26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8017c28:	687b      	ldr	r3, [r7, #4]
 8017c2a:	69ba      	ldr	r2, [r7, #24]
 8017c2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8017c2e:	687b      	ldr	r3, [r7, #4]
 8017c30:	685b      	ldr	r3, [r3, #4]
 8017c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8017c34:	2201      	movs	r2, #1
 8017c36:	69fb      	ldr	r3, [r7, #28]
 8017c38:	fa02 f303 	lsl.w	r3, r2, r3
 8017c3c:	43db      	mvns	r3, r3
 8017c3e:	69ba      	ldr	r2, [r7, #24]
 8017c40:	4013      	ands	r3, r2
 8017c42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8017c44:	683b      	ldr	r3, [r7, #0]
 8017c46:	685b      	ldr	r3, [r3, #4]
 8017c48:	091b      	lsrs	r3, r3, #4
 8017c4a:	f003 0201 	and.w	r2, r3, #1
 8017c4e:	69fb      	ldr	r3, [r7, #28]
 8017c50:	fa02 f303 	lsl.w	r3, r2, r3
 8017c54:	69ba      	ldr	r2, [r7, #24]
 8017c56:	4313      	orrs	r3, r2
 8017c58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8017c5a:	687b      	ldr	r3, [r7, #4]
 8017c5c:	69ba      	ldr	r2, [r7, #24]
 8017c5e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8017c60:	683b      	ldr	r3, [r7, #0]
 8017c62:	685b      	ldr	r3, [r3, #4]
 8017c64:	f003 0303 	and.w	r3, r3, #3
 8017c68:	2b03      	cmp	r3, #3
 8017c6a:	d017      	beq.n	8017c9c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8017c6c:	687b      	ldr	r3, [r7, #4]
 8017c6e:	68db      	ldr	r3, [r3, #12]
 8017c70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8017c72:	69fb      	ldr	r3, [r7, #28]
 8017c74:	005b      	lsls	r3, r3, #1
 8017c76:	2203      	movs	r2, #3
 8017c78:	fa02 f303 	lsl.w	r3, r2, r3
 8017c7c:	43db      	mvns	r3, r3
 8017c7e:	69ba      	ldr	r2, [r7, #24]
 8017c80:	4013      	ands	r3, r2
 8017c82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8017c84:	683b      	ldr	r3, [r7, #0]
 8017c86:	689a      	ldr	r2, [r3, #8]
 8017c88:	69fb      	ldr	r3, [r7, #28]
 8017c8a:	005b      	lsls	r3, r3, #1
 8017c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8017c90:	69ba      	ldr	r2, [r7, #24]
 8017c92:	4313      	orrs	r3, r2
 8017c94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8017c96:	687b      	ldr	r3, [r7, #4]
 8017c98:	69ba      	ldr	r2, [r7, #24]
 8017c9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8017c9c:	683b      	ldr	r3, [r7, #0]
 8017c9e:	685b      	ldr	r3, [r3, #4]
 8017ca0:	f003 0303 	and.w	r3, r3, #3
 8017ca4:	2b02      	cmp	r3, #2
 8017ca6:	d123      	bne.n	8017cf0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8017ca8:	69fb      	ldr	r3, [r7, #28]
 8017caa:	08da      	lsrs	r2, r3, #3
 8017cac:	687b      	ldr	r3, [r7, #4]
 8017cae:	3208      	adds	r2, #8
 8017cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8017cb6:	69fb      	ldr	r3, [r7, #28]
 8017cb8:	f003 0307 	and.w	r3, r3, #7
 8017cbc:	009b      	lsls	r3, r3, #2
 8017cbe:	220f      	movs	r2, #15
 8017cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8017cc4:	43db      	mvns	r3, r3
 8017cc6:	69ba      	ldr	r2, [r7, #24]
 8017cc8:	4013      	ands	r3, r2
 8017cca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8017ccc:	683b      	ldr	r3, [r7, #0]
 8017cce:	691a      	ldr	r2, [r3, #16]
 8017cd0:	69fb      	ldr	r3, [r7, #28]
 8017cd2:	f003 0307 	and.w	r3, r3, #7
 8017cd6:	009b      	lsls	r3, r3, #2
 8017cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8017cdc:	69ba      	ldr	r2, [r7, #24]
 8017cde:	4313      	orrs	r3, r2
 8017ce0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8017ce2:	69fb      	ldr	r3, [r7, #28]
 8017ce4:	08da      	lsrs	r2, r3, #3
 8017ce6:	687b      	ldr	r3, [r7, #4]
 8017ce8:	3208      	adds	r2, #8
 8017cea:	69b9      	ldr	r1, [r7, #24]
 8017cec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8017cf0:	687b      	ldr	r3, [r7, #4]
 8017cf2:	681b      	ldr	r3, [r3, #0]
 8017cf4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8017cf6:	69fb      	ldr	r3, [r7, #28]
 8017cf8:	005b      	lsls	r3, r3, #1
 8017cfa:	2203      	movs	r2, #3
 8017cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8017d00:	43db      	mvns	r3, r3
 8017d02:	69ba      	ldr	r2, [r7, #24]
 8017d04:	4013      	ands	r3, r2
 8017d06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8017d08:	683b      	ldr	r3, [r7, #0]
 8017d0a:	685b      	ldr	r3, [r3, #4]
 8017d0c:	f003 0203 	and.w	r2, r3, #3
 8017d10:	69fb      	ldr	r3, [r7, #28]
 8017d12:	005b      	lsls	r3, r3, #1
 8017d14:	fa02 f303 	lsl.w	r3, r2, r3
 8017d18:	69ba      	ldr	r2, [r7, #24]
 8017d1a:	4313      	orrs	r3, r2
 8017d1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8017d1e:	687b      	ldr	r3, [r7, #4]
 8017d20:	69ba      	ldr	r2, [r7, #24]
 8017d22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8017d24:	683b      	ldr	r3, [r7, #0]
 8017d26:	685b      	ldr	r3, [r3, #4]
 8017d28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8017d2c:	2b00      	cmp	r3, #0
 8017d2e:	f000 80be 	beq.w	8017eae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8017d32:	4b66      	ldr	r3, [pc, #408]	; (8017ecc <HAL_GPIO_Init+0x324>)
 8017d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017d36:	4a65      	ldr	r2, [pc, #404]	; (8017ecc <HAL_GPIO_Init+0x324>)
 8017d38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8017d3c:	6453      	str	r3, [r2, #68]	; 0x44
 8017d3e:	4b63      	ldr	r3, [pc, #396]	; (8017ecc <HAL_GPIO_Init+0x324>)
 8017d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017d42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017d46:	60fb      	str	r3, [r7, #12]
 8017d48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8017d4a:	4a61      	ldr	r2, [pc, #388]	; (8017ed0 <HAL_GPIO_Init+0x328>)
 8017d4c:	69fb      	ldr	r3, [r7, #28]
 8017d4e:	089b      	lsrs	r3, r3, #2
 8017d50:	3302      	adds	r3, #2
 8017d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8017d58:	69fb      	ldr	r3, [r7, #28]
 8017d5a:	f003 0303 	and.w	r3, r3, #3
 8017d5e:	009b      	lsls	r3, r3, #2
 8017d60:	220f      	movs	r2, #15
 8017d62:	fa02 f303 	lsl.w	r3, r2, r3
 8017d66:	43db      	mvns	r3, r3
 8017d68:	69ba      	ldr	r2, [r7, #24]
 8017d6a:	4013      	ands	r3, r2
 8017d6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8017d6e:	687b      	ldr	r3, [r7, #4]
 8017d70:	4a58      	ldr	r2, [pc, #352]	; (8017ed4 <HAL_GPIO_Init+0x32c>)
 8017d72:	4293      	cmp	r3, r2
 8017d74:	d037      	beq.n	8017de6 <HAL_GPIO_Init+0x23e>
 8017d76:	687b      	ldr	r3, [r7, #4]
 8017d78:	4a57      	ldr	r2, [pc, #348]	; (8017ed8 <HAL_GPIO_Init+0x330>)
 8017d7a:	4293      	cmp	r3, r2
 8017d7c:	d031      	beq.n	8017de2 <HAL_GPIO_Init+0x23a>
 8017d7e:	687b      	ldr	r3, [r7, #4]
 8017d80:	4a56      	ldr	r2, [pc, #344]	; (8017edc <HAL_GPIO_Init+0x334>)
 8017d82:	4293      	cmp	r3, r2
 8017d84:	d02b      	beq.n	8017dde <HAL_GPIO_Init+0x236>
 8017d86:	687b      	ldr	r3, [r7, #4]
 8017d88:	4a55      	ldr	r2, [pc, #340]	; (8017ee0 <HAL_GPIO_Init+0x338>)
 8017d8a:	4293      	cmp	r3, r2
 8017d8c:	d025      	beq.n	8017dda <HAL_GPIO_Init+0x232>
 8017d8e:	687b      	ldr	r3, [r7, #4]
 8017d90:	4a54      	ldr	r2, [pc, #336]	; (8017ee4 <HAL_GPIO_Init+0x33c>)
 8017d92:	4293      	cmp	r3, r2
 8017d94:	d01f      	beq.n	8017dd6 <HAL_GPIO_Init+0x22e>
 8017d96:	687b      	ldr	r3, [r7, #4]
 8017d98:	4a53      	ldr	r2, [pc, #332]	; (8017ee8 <HAL_GPIO_Init+0x340>)
 8017d9a:	4293      	cmp	r3, r2
 8017d9c:	d019      	beq.n	8017dd2 <HAL_GPIO_Init+0x22a>
 8017d9e:	687b      	ldr	r3, [r7, #4]
 8017da0:	4a52      	ldr	r2, [pc, #328]	; (8017eec <HAL_GPIO_Init+0x344>)
 8017da2:	4293      	cmp	r3, r2
 8017da4:	d013      	beq.n	8017dce <HAL_GPIO_Init+0x226>
 8017da6:	687b      	ldr	r3, [r7, #4]
 8017da8:	4a51      	ldr	r2, [pc, #324]	; (8017ef0 <HAL_GPIO_Init+0x348>)
 8017daa:	4293      	cmp	r3, r2
 8017dac:	d00d      	beq.n	8017dca <HAL_GPIO_Init+0x222>
 8017dae:	687b      	ldr	r3, [r7, #4]
 8017db0:	4a50      	ldr	r2, [pc, #320]	; (8017ef4 <HAL_GPIO_Init+0x34c>)
 8017db2:	4293      	cmp	r3, r2
 8017db4:	d007      	beq.n	8017dc6 <HAL_GPIO_Init+0x21e>
 8017db6:	687b      	ldr	r3, [r7, #4]
 8017db8:	4a4f      	ldr	r2, [pc, #316]	; (8017ef8 <HAL_GPIO_Init+0x350>)
 8017dba:	4293      	cmp	r3, r2
 8017dbc:	d101      	bne.n	8017dc2 <HAL_GPIO_Init+0x21a>
 8017dbe:	2309      	movs	r3, #9
 8017dc0:	e012      	b.n	8017de8 <HAL_GPIO_Init+0x240>
 8017dc2:	230a      	movs	r3, #10
 8017dc4:	e010      	b.n	8017de8 <HAL_GPIO_Init+0x240>
 8017dc6:	2308      	movs	r3, #8
 8017dc8:	e00e      	b.n	8017de8 <HAL_GPIO_Init+0x240>
 8017dca:	2307      	movs	r3, #7
 8017dcc:	e00c      	b.n	8017de8 <HAL_GPIO_Init+0x240>
 8017dce:	2306      	movs	r3, #6
 8017dd0:	e00a      	b.n	8017de8 <HAL_GPIO_Init+0x240>
 8017dd2:	2305      	movs	r3, #5
 8017dd4:	e008      	b.n	8017de8 <HAL_GPIO_Init+0x240>
 8017dd6:	2304      	movs	r3, #4
 8017dd8:	e006      	b.n	8017de8 <HAL_GPIO_Init+0x240>
 8017dda:	2303      	movs	r3, #3
 8017ddc:	e004      	b.n	8017de8 <HAL_GPIO_Init+0x240>
 8017dde:	2302      	movs	r3, #2
 8017de0:	e002      	b.n	8017de8 <HAL_GPIO_Init+0x240>
 8017de2:	2301      	movs	r3, #1
 8017de4:	e000      	b.n	8017de8 <HAL_GPIO_Init+0x240>
 8017de6:	2300      	movs	r3, #0
 8017de8:	69fa      	ldr	r2, [r7, #28]
 8017dea:	f002 0203 	and.w	r2, r2, #3
 8017dee:	0092      	lsls	r2, r2, #2
 8017df0:	4093      	lsls	r3, r2
 8017df2:	69ba      	ldr	r2, [r7, #24]
 8017df4:	4313      	orrs	r3, r2
 8017df6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8017df8:	4935      	ldr	r1, [pc, #212]	; (8017ed0 <HAL_GPIO_Init+0x328>)
 8017dfa:	69fb      	ldr	r3, [r7, #28]
 8017dfc:	089b      	lsrs	r3, r3, #2
 8017dfe:	3302      	adds	r3, #2
 8017e00:	69ba      	ldr	r2, [r7, #24]
 8017e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8017e06:	4b3d      	ldr	r3, [pc, #244]	; (8017efc <HAL_GPIO_Init+0x354>)
 8017e08:	689b      	ldr	r3, [r3, #8]
 8017e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8017e0c:	693b      	ldr	r3, [r7, #16]
 8017e0e:	43db      	mvns	r3, r3
 8017e10:	69ba      	ldr	r2, [r7, #24]
 8017e12:	4013      	ands	r3, r2
 8017e14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8017e16:	683b      	ldr	r3, [r7, #0]
 8017e18:	685b      	ldr	r3, [r3, #4]
 8017e1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8017e1e:	2b00      	cmp	r3, #0
 8017e20:	d003      	beq.n	8017e2a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8017e22:	69ba      	ldr	r2, [r7, #24]
 8017e24:	693b      	ldr	r3, [r7, #16]
 8017e26:	4313      	orrs	r3, r2
 8017e28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8017e2a:	4a34      	ldr	r2, [pc, #208]	; (8017efc <HAL_GPIO_Init+0x354>)
 8017e2c:	69bb      	ldr	r3, [r7, #24]
 8017e2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8017e30:	4b32      	ldr	r3, [pc, #200]	; (8017efc <HAL_GPIO_Init+0x354>)
 8017e32:	68db      	ldr	r3, [r3, #12]
 8017e34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8017e36:	693b      	ldr	r3, [r7, #16]
 8017e38:	43db      	mvns	r3, r3
 8017e3a:	69ba      	ldr	r2, [r7, #24]
 8017e3c:	4013      	ands	r3, r2
 8017e3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8017e40:	683b      	ldr	r3, [r7, #0]
 8017e42:	685b      	ldr	r3, [r3, #4]
 8017e44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8017e48:	2b00      	cmp	r3, #0
 8017e4a:	d003      	beq.n	8017e54 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8017e4c:	69ba      	ldr	r2, [r7, #24]
 8017e4e:	693b      	ldr	r3, [r7, #16]
 8017e50:	4313      	orrs	r3, r2
 8017e52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8017e54:	4a29      	ldr	r2, [pc, #164]	; (8017efc <HAL_GPIO_Init+0x354>)
 8017e56:	69bb      	ldr	r3, [r7, #24]
 8017e58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8017e5a:	4b28      	ldr	r3, [pc, #160]	; (8017efc <HAL_GPIO_Init+0x354>)
 8017e5c:	685b      	ldr	r3, [r3, #4]
 8017e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8017e60:	693b      	ldr	r3, [r7, #16]
 8017e62:	43db      	mvns	r3, r3
 8017e64:	69ba      	ldr	r2, [r7, #24]
 8017e66:	4013      	ands	r3, r2
 8017e68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8017e6a:	683b      	ldr	r3, [r7, #0]
 8017e6c:	685b      	ldr	r3, [r3, #4]
 8017e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017e72:	2b00      	cmp	r3, #0
 8017e74:	d003      	beq.n	8017e7e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8017e76:	69ba      	ldr	r2, [r7, #24]
 8017e78:	693b      	ldr	r3, [r7, #16]
 8017e7a:	4313      	orrs	r3, r2
 8017e7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8017e7e:	4a1f      	ldr	r2, [pc, #124]	; (8017efc <HAL_GPIO_Init+0x354>)
 8017e80:	69bb      	ldr	r3, [r7, #24]
 8017e82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8017e84:	4b1d      	ldr	r3, [pc, #116]	; (8017efc <HAL_GPIO_Init+0x354>)
 8017e86:	681b      	ldr	r3, [r3, #0]
 8017e88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8017e8a:	693b      	ldr	r3, [r7, #16]
 8017e8c:	43db      	mvns	r3, r3
 8017e8e:	69ba      	ldr	r2, [r7, #24]
 8017e90:	4013      	ands	r3, r2
 8017e92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8017e94:	683b      	ldr	r3, [r7, #0]
 8017e96:	685b      	ldr	r3, [r3, #4]
 8017e98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8017e9c:	2b00      	cmp	r3, #0
 8017e9e:	d003      	beq.n	8017ea8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8017ea0:	69ba      	ldr	r2, [r7, #24]
 8017ea2:	693b      	ldr	r3, [r7, #16]
 8017ea4:	4313      	orrs	r3, r2
 8017ea6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8017ea8:	4a14      	ldr	r2, [pc, #80]	; (8017efc <HAL_GPIO_Init+0x354>)
 8017eaa:	69bb      	ldr	r3, [r7, #24]
 8017eac:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8017eae:	69fb      	ldr	r3, [r7, #28]
 8017eb0:	3301      	adds	r3, #1
 8017eb2:	61fb      	str	r3, [r7, #28]
 8017eb4:	69fb      	ldr	r3, [r7, #28]
 8017eb6:	2b0f      	cmp	r3, #15
 8017eb8:	f67f ae86 	bls.w	8017bc8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8017ebc:	bf00      	nop
 8017ebe:	bf00      	nop
 8017ec0:	3724      	adds	r7, #36	; 0x24
 8017ec2:	46bd      	mov	sp, r7
 8017ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ec8:	4770      	bx	lr
 8017eca:	bf00      	nop
 8017ecc:	40023800 	.word	0x40023800
 8017ed0:	40013800 	.word	0x40013800
 8017ed4:	40020000 	.word	0x40020000
 8017ed8:	40020400 	.word	0x40020400
 8017edc:	40020800 	.word	0x40020800
 8017ee0:	40020c00 	.word	0x40020c00
 8017ee4:	40021000 	.word	0x40021000
 8017ee8:	40021400 	.word	0x40021400
 8017eec:	40021800 	.word	0x40021800
 8017ef0:	40021c00 	.word	0x40021c00
 8017ef4:	40022000 	.word	0x40022000
 8017ef8:	40022400 	.word	0x40022400
 8017efc:	40013c00 	.word	0x40013c00

08017f00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8017f00:	b480      	push	{r7}
 8017f02:	b085      	sub	sp, #20
 8017f04:	af00      	add	r7, sp, #0
 8017f06:	6078      	str	r0, [r7, #4]
 8017f08:	460b      	mov	r3, r1
 8017f0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8017f0c:	687b      	ldr	r3, [r7, #4]
 8017f0e:	691a      	ldr	r2, [r3, #16]
 8017f10:	887b      	ldrh	r3, [r7, #2]
 8017f12:	4013      	ands	r3, r2
 8017f14:	2b00      	cmp	r3, #0
 8017f16:	d002      	beq.n	8017f1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8017f18:	2301      	movs	r3, #1
 8017f1a:	73fb      	strb	r3, [r7, #15]
 8017f1c:	e001      	b.n	8017f22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8017f1e:	2300      	movs	r3, #0
 8017f20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8017f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8017f24:	4618      	mov	r0, r3
 8017f26:	3714      	adds	r7, #20
 8017f28:	46bd      	mov	sp, r7
 8017f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f2e:	4770      	bx	lr

08017f30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8017f30:	b480      	push	{r7}
 8017f32:	b083      	sub	sp, #12
 8017f34:	af00      	add	r7, sp, #0
 8017f36:	6078      	str	r0, [r7, #4]
 8017f38:	460b      	mov	r3, r1
 8017f3a:	807b      	strh	r3, [r7, #2]
 8017f3c:	4613      	mov	r3, r2
 8017f3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8017f40:	787b      	ldrb	r3, [r7, #1]
 8017f42:	2b00      	cmp	r3, #0
 8017f44:	d003      	beq.n	8017f4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8017f46:	887a      	ldrh	r2, [r7, #2]
 8017f48:	687b      	ldr	r3, [r7, #4]
 8017f4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8017f4c:	e003      	b.n	8017f56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8017f4e:	887b      	ldrh	r3, [r7, #2]
 8017f50:	041a      	lsls	r2, r3, #16
 8017f52:	687b      	ldr	r3, [r7, #4]
 8017f54:	619a      	str	r2, [r3, #24]
}
 8017f56:	bf00      	nop
 8017f58:	370c      	adds	r7, #12
 8017f5a:	46bd      	mov	sp, r7
 8017f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f60:	4770      	bx	lr

08017f62 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8017f62:	b480      	push	{r7}
 8017f64:	b085      	sub	sp, #20
 8017f66:	af00      	add	r7, sp, #0
 8017f68:	6078      	str	r0, [r7, #4]
 8017f6a:	460b      	mov	r3, r1
 8017f6c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8017f6e:	687b      	ldr	r3, [r7, #4]
 8017f70:	695b      	ldr	r3, [r3, #20]
 8017f72:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8017f74:	887a      	ldrh	r2, [r7, #2]
 8017f76:	68fb      	ldr	r3, [r7, #12]
 8017f78:	4013      	ands	r3, r2
 8017f7a:	041a      	lsls	r2, r3, #16
 8017f7c:	68fb      	ldr	r3, [r7, #12]
 8017f7e:	43d9      	mvns	r1, r3
 8017f80:	887b      	ldrh	r3, [r7, #2]
 8017f82:	400b      	ands	r3, r1
 8017f84:	431a      	orrs	r2, r3
 8017f86:	687b      	ldr	r3, [r7, #4]
 8017f88:	619a      	str	r2, [r3, #24]
}
 8017f8a:	bf00      	nop
 8017f8c:	3714      	adds	r7, #20
 8017f8e:	46bd      	mov	sp, r7
 8017f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f94:	4770      	bx	lr
	...

08017f98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8017f98:	b580      	push	{r7, lr}
 8017f9a:	b082      	sub	sp, #8
 8017f9c:	af00      	add	r7, sp, #0
 8017f9e:	4603      	mov	r3, r0
 8017fa0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8017fa2:	4b08      	ldr	r3, [pc, #32]	; (8017fc4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8017fa4:	695a      	ldr	r2, [r3, #20]
 8017fa6:	88fb      	ldrh	r3, [r7, #6]
 8017fa8:	4013      	ands	r3, r2
 8017faa:	2b00      	cmp	r3, #0
 8017fac:	d006      	beq.n	8017fbc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8017fae:	4a05      	ldr	r2, [pc, #20]	; (8017fc4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8017fb0:	88fb      	ldrh	r3, [r7, #6]
 8017fb2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8017fb4:	88fb      	ldrh	r3, [r7, #6]
 8017fb6:	4618      	mov	r0, r3
 8017fb8:	f000 f806 	bl	8017fc8 <HAL_GPIO_EXTI_Callback>
  }
}
 8017fbc:	bf00      	nop
 8017fbe:	3708      	adds	r7, #8
 8017fc0:	46bd      	mov	sp, r7
 8017fc2:	bd80      	pop	{r7, pc}
 8017fc4:	40013c00 	.word	0x40013c00

08017fc8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8017fc8:	b480      	push	{r7}
 8017fca:	b083      	sub	sp, #12
 8017fcc:	af00      	add	r7, sp, #0
 8017fce:	4603      	mov	r3, r0
 8017fd0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8017fd2:	bf00      	nop
 8017fd4:	370c      	adds	r7, #12
 8017fd6:	46bd      	mov	sp, r7
 8017fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fdc:	4770      	bx	lr
	...

08017fe0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8017fe0:	b580      	push	{r7, lr}
 8017fe2:	b082      	sub	sp, #8
 8017fe4:	af00      	add	r7, sp, #0
 8017fe6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8017fe8:	687b      	ldr	r3, [r7, #4]
 8017fea:	2b00      	cmp	r3, #0
 8017fec:	d101      	bne.n	8017ff2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8017fee:	2301      	movs	r3, #1
 8017ff0:	e07f      	b.n	80180f2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8017ff2:	687b      	ldr	r3, [r7, #4]
 8017ff4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8017ff8:	b2db      	uxtb	r3, r3
 8017ffa:	2b00      	cmp	r3, #0
 8017ffc:	d106      	bne.n	801800c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8017ffe:	687b      	ldr	r3, [r7, #4]
 8018000:	2200      	movs	r2, #0
 8018002:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8018006:	6878      	ldr	r0, [r7, #4]
 8018008:	f7fb fa34 	bl	8013474 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 801800c:	687b      	ldr	r3, [r7, #4]
 801800e:	2224      	movs	r2, #36	; 0x24
 8018010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8018014:	687b      	ldr	r3, [r7, #4]
 8018016:	681b      	ldr	r3, [r3, #0]
 8018018:	681a      	ldr	r2, [r3, #0]
 801801a:	687b      	ldr	r3, [r7, #4]
 801801c:	681b      	ldr	r3, [r3, #0]
 801801e:	f022 0201 	bic.w	r2, r2, #1
 8018022:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8018024:	687b      	ldr	r3, [r7, #4]
 8018026:	685a      	ldr	r2, [r3, #4]
 8018028:	687b      	ldr	r3, [r7, #4]
 801802a:	681b      	ldr	r3, [r3, #0]
 801802c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8018030:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8018032:	687b      	ldr	r3, [r7, #4]
 8018034:	681b      	ldr	r3, [r3, #0]
 8018036:	689a      	ldr	r2, [r3, #8]
 8018038:	687b      	ldr	r3, [r7, #4]
 801803a:	681b      	ldr	r3, [r3, #0]
 801803c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8018040:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8018042:	687b      	ldr	r3, [r7, #4]
 8018044:	68db      	ldr	r3, [r3, #12]
 8018046:	2b01      	cmp	r3, #1
 8018048:	d107      	bne.n	801805a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 801804a:	687b      	ldr	r3, [r7, #4]
 801804c:	689a      	ldr	r2, [r3, #8]
 801804e:	687b      	ldr	r3, [r7, #4]
 8018050:	681b      	ldr	r3, [r3, #0]
 8018052:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8018056:	609a      	str	r2, [r3, #8]
 8018058:	e006      	b.n	8018068 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 801805a:	687b      	ldr	r3, [r7, #4]
 801805c:	689a      	ldr	r2, [r3, #8]
 801805e:	687b      	ldr	r3, [r7, #4]
 8018060:	681b      	ldr	r3, [r3, #0]
 8018062:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8018066:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8018068:	687b      	ldr	r3, [r7, #4]
 801806a:	68db      	ldr	r3, [r3, #12]
 801806c:	2b02      	cmp	r3, #2
 801806e:	d104      	bne.n	801807a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8018070:	687b      	ldr	r3, [r7, #4]
 8018072:	681b      	ldr	r3, [r3, #0]
 8018074:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018078:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 801807a:	687b      	ldr	r3, [r7, #4]
 801807c:	681b      	ldr	r3, [r3, #0]
 801807e:	6859      	ldr	r1, [r3, #4]
 8018080:	687b      	ldr	r3, [r7, #4]
 8018082:	681a      	ldr	r2, [r3, #0]
 8018084:	4b1d      	ldr	r3, [pc, #116]	; (80180fc <HAL_I2C_Init+0x11c>)
 8018086:	430b      	orrs	r3, r1
 8018088:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 801808a:	687b      	ldr	r3, [r7, #4]
 801808c:	681b      	ldr	r3, [r3, #0]
 801808e:	68da      	ldr	r2, [r3, #12]
 8018090:	687b      	ldr	r3, [r7, #4]
 8018092:	681b      	ldr	r3, [r3, #0]
 8018094:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8018098:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801809a:	687b      	ldr	r3, [r7, #4]
 801809c:	691a      	ldr	r2, [r3, #16]
 801809e:	687b      	ldr	r3, [r7, #4]
 80180a0:	695b      	ldr	r3, [r3, #20]
 80180a2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80180a6:	687b      	ldr	r3, [r7, #4]
 80180a8:	699b      	ldr	r3, [r3, #24]
 80180aa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80180ac:	687b      	ldr	r3, [r7, #4]
 80180ae:	681b      	ldr	r3, [r3, #0]
 80180b0:	430a      	orrs	r2, r1
 80180b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80180b4:	687b      	ldr	r3, [r7, #4]
 80180b6:	69d9      	ldr	r1, [r3, #28]
 80180b8:	687b      	ldr	r3, [r7, #4]
 80180ba:	6a1a      	ldr	r2, [r3, #32]
 80180bc:	687b      	ldr	r3, [r7, #4]
 80180be:	681b      	ldr	r3, [r3, #0]
 80180c0:	430a      	orrs	r2, r1
 80180c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80180c4:	687b      	ldr	r3, [r7, #4]
 80180c6:	681b      	ldr	r3, [r3, #0]
 80180c8:	681a      	ldr	r2, [r3, #0]
 80180ca:	687b      	ldr	r3, [r7, #4]
 80180cc:	681b      	ldr	r3, [r3, #0]
 80180ce:	f042 0201 	orr.w	r2, r2, #1
 80180d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80180d4:	687b      	ldr	r3, [r7, #4]
 80180d6:	2200      	movs	r2, #0
 80180d8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80180da:	687b      	ldr	r3, [r7, #4]
 80180dc:	2220      	movs	r2, #32
 80180de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80180e2:	687b      	ldr	r3, [r7, #4]
 80180e4:	2200      	movs	r2, #0
 80180e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80180e8:	687b      	ldr	r3, [r7, #4]
 80180ea:	2200      	movs	r2, #0
 80180ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80180f0:	2300      	movs	r3, #0
}
 80180f2:	4618      	mov	r0, r3
 80180f4:	3708      	adds	r7, #8
 80180f6:	46bd      	mov	sp, r7
 80180f8:	bd80      	pop	{r7, pc}
 80180fa:	bf00      	nop
 80180fc:	02008000 	.word	0x02008000

08018100 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8018100:	b580      	push	{r7, lr}
 8018102:	b088      	sub	sp, #32
 8018104:	af02      	add	r7, sp, #8
 8018106:	60f8      	str	r0, [r7, #12]
 8018108:	4608      	mov	r0, r1
 801810a:	4611      	mov	r1, r2
 801810c:	461a      	mov	r2, r3
 801810e:	4603      	mov	r3, r0
 8018110:	817b      	strh	r3, [r7, #10]
 8018112:	460b      	mov	r3, r1
 8018114:	813b      	strh	r3, [r7, #8]
 8018116:	4613      	mov	r3, r2
 8018118:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801811a:	68fb      	ldr	r3, [r7, #12]
 801811c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8018120:	b2db      	uxtb	r3, r3
 8018122:	2b20      	cmp	r3, #32
 8018124:	f040 80f9 	bne.w	801831a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8018128:	6a3b      	ldr	r3, [r7, #32]
 801812a:	2b00      	cmp	r3, #0
 801812c:	d002      	beq.n	8018134 <HAL_I2C_Mem_Write+0x34>
 801812e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018130:	2b00      	cmp	r3, #0
 8018132:	d105      	bne.n	8018140 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8018134:	68fb      	ldr	r3, [r7, #12]
 8018136:	f44f 7200 	mov.w	r2, #512	; 0x200
 801813a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 801813c:	2301      	movs	r3, #1
 801813e:	e0ed      	b.n	801831c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8018140:	68fb      	ldr	r3, [r7, #12]
 8018142:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8018146:	2b01      	cmp	r3, #1
 8018148:	d101      	bne.n	801814e <HAL_I2C_Mem_Write+0x4e>
 801814a:	2302      	movs	r3, #2
 801814c:	e0e6      	b.n	801831c <HAL_I2C_Mem_Write+0x21c>
 801814e:	68fb      	ldr	r3, [r7, #12]
 8018150:	2201      	movs	r2, #1
 8018152:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8018156:	f7fd fa1b 	bl	8015590 <HAL_GetTick>
 801815a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801815c:	697b      	ldr	r3, [r7, #20]
 801815e:	9300      	str	r3, [sp, #0]
 8018160:	2319      	movs	r3, #25
 8018162:	2201      	movs	r2, #1
 8018164:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8018168:	68f8      	ldr	r0, [r7, #12]
 801816a:	f000 fac3 	bl	80186f4 <I2C_WaitOnFlagUntilTimeout>
 801816e:	4603      	mov	r3, r0
 8018170:	2b00      	cmp	r3, #0
 8018172:	d001      	beq.n	8018178 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8018174:	2301      	movs	r3, #1
 8018176:	e0d1      	b.n	801831c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8018178:	68fb      	ldr	r3, [r7, #12]
 801817a:	2221      	movs	r2, #33	; 0x21
 801817c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8018180:	68fb      	ldr	r3, [r7, #12]
 8018182:	2240      	movs	r2, #64	; 0x40
 8018184:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8018188:	68fb      	ldr	r3, [r7, #12]
 801818a:	2200      	movs	r2, #0
 801818c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801818e:	68fb      	ldr	r3, [r7, #12]
 8018190:	6a3a      	ldr	r2, [r7, #32]
 8018192:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8018194:	68fb      	ldr	r3, [r7, #12]
 8018196:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018198:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 801819a:	68fb      	ldr	r3, [r7, #12]
 801819c:	2200      	movs	r2, #0
 801819e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80181a0:	88f8      	ldrh	r0, [r7, #6]
 80181a2:	893a      	ldrh	r2, [r7, #8]
 80181a4:	8979      	ldrh	r1, [r7, #10]
 80181a6:	697b      	ldr	r3, [r7, #20]
 80181a8:	9301      	str	r3, [sp, #4]
 80181aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181ac:	9300      	str	r3, [sp, #0]
 80181ae:	4603      	mov	r3, r0
 80181b0:	68f8      	ldr	r0, [r7, #12]
 80181b2:	f000 f9d3 	bl	801855c <I2C_RequestMemoryWrite>
 80181b6:	4603      	mov	r3, r0
 80181b8:	2b00      	cmp	r3, #0
 80181ba:	d005      	beq.n	80181c8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80181bc:	68fb      	ldr	r3, [r7, #12]
 80181be:	2200      	movs	r2, #0
 80181c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80181c4:	2301      	movs	r3, #1
 80181c6:	e0a9      	b.n	801831c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80181c8:	68fb      	ldr	r3, [r7, #12]
 80181ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80181cc:	b29b      	uxth	r3, r3
 80181ce:	2bff      	cmp	r3, #255	; 0xff
 80181d0:	d90e      	bls.n	80181f0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80181d2:	68fb      	ldr	r3, [r7, #12]
 80181d4:	22ff      	movs	r2, #255	; 0xff
 80181d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80181d8:	68fb      	ldr	r3, [r7, #12]
 80181da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80181dc:	b2da      	uxtb	r2, r3
 80181de:	8979      	ldrh	r1, [r7, #10]
 80181e0:	2300      	movs	r3, #0
 80181e2:	9300      	str	r3, [sp, #0]
 80181e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80181e8:	68f8      	ldr	r0, [r7, #12]
 80181ea:	f000 fc1f 	bl	8018a2c <I2C_TransferConfig>
 80181ee:	e00f      	b.n	8018210 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80181f0:	68fb      	ldr	r3, [r7, #12]
 80181f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80181f4:	b29a      	uxth	r2, r3
 80181f6:	68fb      	ldr	r3, [r7, #12]
 80181f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80181fa:	68fb      	ldr	r3, [r7, #12]
 80181fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80181fe:	b2da      	uxtb	r2, r3
 8018200:	8979      	ldrh	r1, [r7, #10]
 8018202:	2300      	movs	r3, #0
 8018204:	9300      	str	r3, [sp, #0]
 8018206:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801820a:	68f8      	ldr	r0, [r7, #12]
 801820c:	f000 fc0e 	bl	8018a2c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8018210:	697a      	ldr	r2, [r7, #20]
 8018212:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018214:	68f8      	ldr	r0, [r7, #12]
 8018216:	f000 faad 	bl	8018774 <I2C_WaitOnTXISFlagUntilTimeout>
 801821a:	4603      	mov	r3, r0
 801821c:	2b00      	cmp	r3, #0
 801821e:	d001      	beq.n	8018224 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8018220:	2301      	movs	r3, #1
 8018222:	e07b      	b.n	801831c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8018224:	68fb      	ldr	r3, [r7, #12]
 8018226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018228:	781a      	ldrb	r2, [r3, #0]
 801822a:	68fb      	ldr	r3, [r7, #12]
 801822c:	681b      	ldr	r3, [r3, #0]
 801822e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8018230:	68fb      	ldr	r3, [r7, #12]
 8018232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018234:	1c5a      	adds	r2, r3, #1
 8018236:	68fb      	ldr	r3, [r7, #12]
 8018238:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 801823a:	68fb      	ldr	r3, [r7, #12]
 801823c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801823e:	b29b      	uxth	r3, r3
 8018240:	3b01      	subs	r3, #1
 8018242:	b29a      	uxth	r2, r3
 8018244:	68fb      	ldr	r3, [r7, #12]
 8018246:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8018248:	68fb      	ldr	r3, [r7, #12]
 801824a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801824c:	3b01      	subs	r3, #1
 801824e:	b29a      	uxth	r2, r3
 8018250:	68fb      	ldr	r3, [r7, #12]
 8018252:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8018254:	68fb      	ldr	r3, [r7, #12]
 8018256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018258:	b29b      	uxth	r3, r3
 801825a:	2b00      	cmp	r3, #0
 801825c:	d034      	beq.n	80182c8 <HAL_I2C_Mem_Write+0x1c8>
 801825e:	68fb      	ldr	r3, [r7, #12]
 8018260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018262:	2b00      	cmp	r3, #0
 8018264:	d130      	bne.n	80182c8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8018266:	697b      	ldr	r3, [r7, #20]
 8018268:	9300      	str	r3, [sp, #0]
 801826a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801826c:	2200      	movs	r2, #0
 801826e:	2180      	movs	r1, #128	; 0x80
 8018270:	68f8      	ldr	r0, [r7, #12]
 8018272:	f000 fa3f 	bl	80186f4 <I2C_WaitOnFlagUntilTimeout>
 8018276:	4603      	mov	r3, r0
 8018278:	2b00      	cmp	r3, #0
 801827a:	d001      	beq.n	8018280 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 801827c:	2301      	movs	r3, #1
 801827e:	e04d      	b.n	801831c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8018280:	68fb      	ldr	r3, [r7, #12]
 8018282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018284:	b29b      	uxth	r3, r3
 8018286:	2bff      	cmp	r3, #255	; 0xff
 8018288:	d90e      	bls.n	80182a8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801828a:	68fb      	ldr	r3, [r7, #12]
 801828c:	22ff      	movs	r2, #255	; 0xff
 801828e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8018290:	68fb      	ldr	r3, [r7, #12]
 8018292:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018294:	b2da      	uxtb	r2, r3
 8018296:	8979      	ldrh	r1, [r7, #10]
 8018298:	2300      	movs	r3, #0
 801829a:	9300      	str	r3, [sp, #0]
 801829c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80182a0:	68f8      	ldr	r0, [r7, #12]
 80182a2:	f000 fbc3 	bl	8018a2c <I2C_TransferConfig>
 80182a6:	e00f      	b.n	80182c8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80182a8:	68fb      	ldr	r3, [r7, #12]
 80182aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80182ac:	b29a      	uxth	r2, r3
 80182ae:	68fb      	ldr	r3, [r7, #12]
 80182b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80182b2:	68fb      	ldr	r3, [r7, #12]
 80182b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80182b6:	b2da      	uxtb	r2, r3
 80182b8:	8979      	ldrh	r1, [r7, #10]
 80182ba:	2300      	movs	r3, #0
 80182bc:	9300      	str	r3, [sp, #0]
 80182be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80182c2:	68f8      	ldr	r0, [r7, #12]
 80182c4:	f000 fbb2 	bl	8018a2c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80182c8:	68fb      	ldr	r3, [r7, #12]
 80182ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80182cc:	b29b      	uxth	r3, r3
 80182ce:	2b00      	cmp	r3, #0
 80182d0:	d19e      	bne.n	8018210 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80182d2:	697a      	ldr	r2, [r7, #20]
 80182d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80182d6:	68f8      	ldr	r0, [r7, #12]
 80182d8:	f000 fa8c 	bl	80187f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80182dc:	4603      	mov	r3, r0
 80182de:	2b00      	cmp	r3, #0
 80182e0:	d001      	beq.n	80182e6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80182e2:	2301      	movs	r3, #1
 80182e4:	e01a      	b.n	801831c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80182e6:	68fb      	ldr	r3, [r7, #12]
 80182e8:	681b      	ldr	r3, [r3, #0]
 80182ea:	2220      	movs	r2, #32
 80182ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80182ee:	68fb      	ldr	r3, [r7, #12]
 80182f0:	681b      	ldr	r3, [r3, #0]
 80182f2:	6859      	ldr	r1, [r3, #4]
 80182f4:	68fb      	ldr	r3, [r7, #12]
 80182f6:	681a      	ldr	r2, [r3, #0]
 80182f8:	4b0a      	ldr	r3, [pc, #40]	; (8018324 <HAL_I2C_Mem_Write+0x224>)
 80182fa:	400b      	ands	r3, r1
 80182fc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80182fe:	68fb      	ldr	r3, [r7, #12]
 8018300:	2220      	movs	r2, #32
 8018302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8018306:	68fb      	ldr	r3, [r7, #12]
 8018308:	2200      	movs	r2, #0
 801830a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801830e:	68fb      	ldr	r3, [r7, #12]
 8018310:	2200      	movs	r2, #0
 8018312:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8018316:	2300      	movs	r3, #0
 8018318:	e000      	b.n	801831c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 801831a:	2302      	movs	r3, #2
  }
}
 801831c:	4618      	mov	r0, r3
 801831e:	3718      	adds	r7, #24
 8018320:	46bd      	mov	sp, r7
 8018322:	bd80      	pop	{r7, pc}
 8018324:	fe00e800 	.word	0xfe00e800

08018328 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8018328:	b580      	push	{r7, lr}
 801832a:	b088      	sub	sp, #32
 801832c:	af02      	add	r7, sp, #8
 801832e:	60f8      	str	r0, [r7, #12]
 8018330:	4608      	mov	r0, r1
 8018332:	4611      	mov	r1, r2
 8018334:	461a      	mov	r2, r3
 8018336:	4603      	mov	r3, r0
 8018338:	817b      	strh	r3, [r7, #10]
 801833a:	460b      	mov	r3, r1
 801833c:	813b      	strh	r3, [r7, #8]
 801833e:	4613      	mov	r3, r2
 8018340:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8018342:	68fb      	ldr	r3, [r7, #12]
 8018344:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8018348:	b2db      	uxtb	r3, r3
 801834a:	2b20      	cmp	r3, #32
 801834c:	f040 80fd 	bne.w	801854a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8018350:	6a3b      	ldr	r3, [r7, #32]
 8018352:	2b00      	cmp	r3, #0
 8018354:	d002      	beq.n	801835c <HAL_I2C_Mem_Read+0x34>
 8018356:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018358:	2b00      	cmp	r3, #0
 801835a:	d105      	bne.n	8018368 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 801835c:	68fb      	ldr	r3, [r7, #12]
 801835e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018362:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8018364:	2301      	movs	r3, #1
 8018366:	e0f1      	b.n	801854c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8018368:	68fb      	ldr	r3, [r7, #12]
 801836a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801836e:	2b01      	cmp	r3, #1
 8018370:	d101      	bne.n	8018376 <HAL_I2C_Mem_Read+0x4e>
 8018372:	2302      	movs	r3, #2
 8018374:	e0ea      	b.n	801854c <HAL_I2C_Mem_Read+0x224>
 8018376:	68fb      	ldr	r3, [r7, #12]
 8018378:	2201      	movs	r2, #1
 801837a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 801837e:	f7fd f907 	bl	8015590 <HAL_GetTick>
 8018382:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8018384:	697b      	ldr	r3, [r7, #20]
 8018386:	9300      	str	r3, [sp, #0]
 8018388:	2319      	movs	r3, #25
 801838a:	2201      	movs	r2, #1
 801838c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8018390:	68f8      	ldr	r0, [r7, #12]
 8018392:	f000 f9af 	bl	80186f4 <I2C_WaitOnFlagUntilTimeout>
 8018396:	4603      	mov	r3, r0
 8018398:	2b00      	cmp	r3, #0
 801839a:	d001      	beq.n	80183a0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 801839c:	2301      	movs	r3, #1
 801839e:	e0d5      	b.n	801854c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80183a0:	68fb      	ldr	r3, [r7, #12]
 80183a2:	2222      	movs	r2, #34	; 0x22
 80183a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80183a8:	68fb      	ldr	r3, [r7, #12]
 80183aa:	2240      	movs	r2, #64	; 0x40
 80183ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80183b0:	68fb      	ldr	r3, [r7, #12]
 80183b2:	2200      	movs	r2, #0
 80183b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80183b6:	68fb      	ldr	r3, [r7, #12]
 80183b8:	6a3a      	ldr	r2, [r7, #32]
 80183ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80183bc:	68fb      	ldr	r3, [r7, #12]
 80183be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80183c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80183c2:	68fb      	ldr	r3, [r7, #12]
 80183c4:	2200      	movs	r2, #0
 80183c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80183c8:	88f8      	ldrh	r0, [r7, #6]
 80183ca:	893a      	ldrh	r2, [r7, #8]
 80183cc:	8979      	ldrh	r1, [r7, #10]
 80183ce:	697b      	ldr	r3, [r7, #20]
 80183d0:	9301      	str	r3, [sp, #4]
 80183d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183d4:	9300      	str	r3, [sp, #0]
 80183d6:	4603      	mov	r3, r0
 80183d8:	68f8      	ldr	r0, [r7, #12]
 80183da:	f000 f913 	bl	8018604 <I2C_RequestMemoryRead>
 80183de:	4603      	mov	r3, r0
 80183e0:	2b00      	cmp	r3, #0
 80183e2:	d005      	beq.n	80183f0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80183e4:	68fb      	ldr	r3, [r7, #12]
 80183e6:	2200      	movs	r2, #0
 80183e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80183ec:	2301      	movs	r3, #1
 80183ee:	e0ad      	b.n	801854c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80183f0:	68fb      	ldr	r3, [r7, #12]
 80183f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80183f4:	b29b      	uxth	r3, r3
 80183f6:	2bff      	cmp	r3, #255	; 0xff
 80183f8:	d90e      	bls.n	8018418 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80183fa:	68fb      	ldr	r3, [r7, #12]
 80183fc:	22ff      	movs	r2, #255	; 0xff
 80183fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8018400:	68fb      	ldr	r3, [r7, #12]
 8018402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018404:	b2da      	uxtb	r2, r3
 8018406:	8979      	ldrh	r1, [r7, #10]
 8018408:	4b52      	ldr	r3, [pc, #328]	; (8018554 <HAL_I2C_Mem_Read+0x22c>)
 801840a:	9300      	str	r3, [sp, #0]
 801840c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8018410:	68f8      	ldr	r0, [r7, #12]
 8018412:	f000 fb0b 	bl	8018a2c <I2C_TransferConfig>
 8018416:	e00f      	b.n	8018438 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8018418:	68fb      	ldr	r3, [r7, #12]
 801841a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801841c:	b29a      	uxth	r2, r3
 801841e:	68fb      	ldr	r3, [r7, #12]
 8018420:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8018422:	68fb      	ldr	r3, [r7, #12]
 8018424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018426:	b2da      	uxtb	r2, r3
 8018428:	8979      	ldrh	r1, [r7, #10]
 801842a:	4b4a      	ldr	r3, [pc, #296]	; (8018554 <HAL_I2C_Mem_Read+0x22c>)
 801842c:	9300      	str	r3, [sp, #0]
 801842e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8018432:	68f8      	ldr	r0, [r7, #12]
 8018434:	f000 fafa 	bl	8018a2c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8018438:	697b      	ldr	r3, [r7, #20]
 801843a:	9300      	str	r3, [sp, #0]
 801843c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801843e:	2200      	movs	r2, #0
 8018440:	2104      	movs	r1, #4
 8018442:	68f8      	ldr	r0, [r7, #12]
 8018444:	f000 f956 	bl	80186f4 <I2C_WaitOnFlagUntilTimeout>
 8018448:	4603      	mov	r3, r0
 801844a:	2b00      	cmp	r3, #0
 801844c:	d001      	beq.n	8018452 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 801844e:	2301      	movs	r3, #1
 8018450:	e07c      	b.n	801854c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8018452:	68fb      	ldr	r3, [r7, #12]
 8018454:	681b      	ldr	r3, [r3, #0]
 8018456:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018458:	68fb      	ldr	r3, [r7, #12]
 801845a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801845c:	b2d2      	uxtb	r2, r2
 801845e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8018460:	68fb      	ldr	r3, [r7, #12]
 8018462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018464:	1c5a      	adds	r2, r3, #1
 8018466:	68fb      	ldr	r3, [r7, #12]
 8018468:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 801846a:	68fb      	ldr	r3, [r7, #12]
 801846c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801846e:	3b01      	subs	r3, #1
 8018470:	b29a      	uxth	r2, r3
 8018472:	68fb      	ldr	r3, [r7, #12]
 8018474:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8018476:	68fb      	ldr	r3, [r7, #12]
 8018478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801847a:	b29b      	uxth	r3, r3
 801847c:	3b01      	subs	r3, #1
 801847e:	b29a      	uxth	r2, r3
 8018480:	68fb      	ldr	r3, [r7, #12]
 8018482:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8018484:	68fb      	ldr	r3, [r7, #12]
 8018486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018488:	b29b      	uxth	r3, r3
 801848a:	2b00      	cmp	r3, #0
 801848c:	d034      	beq.n	80184f8 <HAL_I2C_Mem_Read+0x1d0>
 801848e:	68fb      	ldr	r3, [r7, #12]
 8018490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018492:	2b00      	cmp	r3, #0
 8018494:	d130      	bne.n	80184f8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8018496:	697b      	ldr	r3, [r7, #20]
 8018498:	9300      	str	r3, [sp, #0]
 801849a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801849c:	2200      	movs	r2, #0
 801849e:	2180      	movs	r1, #128	; 0x80
 80184a0:	68f8      	ldr	r0, [r7, #12]
 80184a2:	f000 f927 	bl	80186f4 <I2C_WaitOnFlagUntilTimeout>
 80184a6:	4603      	mov	r3, r0
 80184a8:	2b00      	cmp	r3, #0
 80184aa:	d001      	beq.n	80184b0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80184ac:	2301      	movs	r3, #1
 80184ae:	e04d      	b.n	801854c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80184b0:	68fb      	ldr	r3, [r7, #12]
 80184b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80184b4:	b29b      	uxth	r3, r3
 80184b6:	2bff      	cmp	r3, #255	; 0xff
 80184b8:	d90e      	bls.n	80184d8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80184ba:	68fb      	ldr	r3, [r7, #12]
 80184bc:	22ff      	movs	r2, #255	; 0xff
 80184be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80184c0:	68fb      	ldr	r3, [r7, #12]
 80184c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80184c4:	b2da      	uxtb	r2, r3
 80184c6:	8979      	ldrh	r1, [r7, #10]
 80184c8:	2300      	movs	r3, #0
 80184ca:	9300      	str	r3, [sp, #0]
 80184cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80184d0:	68f8      	ldr	r0, [r7, #12]
 80184d2:	f000 faab 	bl	8018a2c <I2C_TransferConfig>
 80184d6:	e00f      	b.n	80184f8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80184d8:	68fb      	ldr	r3, [r7, #12]
 80184da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80184dc:	b29a      	uxth	r2, r3
 80184de:	68fb      	ldr	r3, [r7, #12]
 80184e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80184e2:	68fb      	ldr	r3, [r7, #12]
 80184e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80184e6:	b2da      	uxtb	r2, r3
 80184e8:	8979      	ldrh	r1, [r7, #10]
 80184ea:	2300      	movs	r3, #0
 80184ec:	9300      	str	r3, [sp, #0]
 80184ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80184f2:	68f8      	ldr	r0, [r7, #12]
 80184f4:	f000 fa9a 	bl	8018a2c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80184f8:	68fb      	ldr	r3, [r7, #12]
 80184fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80184fc:	b29b      	uxth	r3, r3
 80184fe:	2b00      	cmp	r3, #0
 8018500:	d19a      	bne.n	8018438 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8018502:	697a      	ldr	r2, [r7, #20]
 8018504:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018506:	68f8      	ldr	r0, [r7, #12]
 8018508:	f000 f974 	bl	80187f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 801850c:	4603      	mov	r3, r0
 801850e:	2b00      	cmp	r3, #0
 8018510:	d001      	beq.n	8018516 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8018512:	2301      	movs	r3, #1
 8018514:	e01a      	b.n	801854c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8018516:	68fb      	ldr	r3, [r7, #12]
 8018518:	681b      	ldr	r3, [r3, #0]
 801851a:	2220      	movs	r2, #32
 801851c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801851e:	68fb      	ldr	r3, [r7, #12]
 8018520:	681b      	ldr	r3, [r3, #0]
 8018522:	6859      	ldr	r1, [r3, #4]
 8018524:	68fb      	ldr	r3, [r7, #12]
 8018526:	681a      	ldr	r2, [r3, #0]
 8018528:	4b0b      	ldr	r3, [pc, #44]	; (8018558 <HAL_I2C_Mem_Read+0x230>)
 801852a:	400b      	ands	r3, r1
 801852c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 801852e:	68fb      	ldr	r3, [r7, #12]
 8018530:	2220      	movs	r2, #32
 8018532:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8018536:	68fb      	ldr	r3, [r7, #12]
 8018538:	2200      	movs	r2, #0
 801853a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801853e:	68fb      	ldr	r3, [r7, #12]
 8018540:	2200      	movs	r2, #0
 8018542:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8018546:	2300      	movs	r3, #0
 8018548:	e000      	b.n	801854c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 801854a:	2302      	movs	r3, #2
  }
}
 801854c:	4618      	mov	r0, r3
 801854e:	3718      	adds	r7, #24
 8018550:	46bd      	mov	sp, r7
 8018552:	bd80      	pop	{r7, pc}
 8018554:	80002400 	.word	0x80002400
 8018558:	fe00e800 	.word	0xfe00e800

0801855c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 801855c:	b580      	push	{r7, lr}
 801855e:	b086      	sub	sp, #24
 8018560:	af02      	add	r7, sp, #8
 8018562:	60f8      	str	r0, [r7, #12]
 8018564:	4608      	mov	r0, r1
 8018566:	4611      	mov	r1, r2
 8018568:	461a      	mov	r2, r3
 801856a:	4603      	mov	r3, r0
 801856c:	817b      	strh	r3, [r7, #10]
 801856e:	460b      	mov	r3, r1
 8018570:	813b      	strh	r3, [r7, #8]
 8018572:	4613      	mov	r3, r2
 8018574:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8018576:	88fb      	ldrh	r3, [r7, #6]
 8018578:	b2da      	uxtb	r2, r3
 801857a:	8979      	ldrh	r1, [r7, #10]
 801857c:	4b20      	ldr	r3, [pc, #128]	; (8018600 <I2C_RequestMemoryWrite+0xa4>)
 801857e:	9300      	str	r3, [sp, #0]
 8018580:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8018584:	68f8      	ldr	r0, [r7, #12]
 8018586:	f000 fa51 	bl	8018a2c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801858a:	69fa      	ldr	r2, [r7, #28]
 801858c:	69b9      	ldr	r1, [r7, #24]
 801858e:	68f8      	ldr	r0, [r7, #12]
 8018590:	f000 f8f0 	bl	8018774 <I2C_WaitOnTXISFlagUntilTimeout>
 8018594:	4603      	mov	r3, r0
 8018596:	2b00      	cmp	r3, #0
 8018598:	d001      	beq.n	801859e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 801859a:	2301      	movs	r3, #1
 801859c:	e02c      	b.n	80185f8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801859e:	88fb      	ldrh	r3, [r7, #6]
 80185a0:	2b01      	cmp	r3, #1
 80185a2:	d105      	bne.n	80185b0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80185a4:	893b      	ldrh	r3, [r7, #8]
 80185a6:	b2da      	uxtb	r2, r3
 80185a8:	68fb      	ldr	r3, [r7, #12]
 80185aa:	681b      	ldr	r3, [r3, #0]
 80185ac:	629a      	str	r2, [r3, #40]	; 0x28
 80185ae:	e015      	b.n	80185dc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80185b0:	893b      	ldrh	r3, [r7, #8]
 80185b2:	0a1b      	lsrs	r3, r3, #8
 80185b4:	b29b      	uxth	r3, r3
 80185b6:	b2da      	uxtb	r2, r3
 80185b8:	68fb      	ldr	r3, [r7, #12]
 80185ba:	681b      	ldr	r3, [r3, #0]
 80185bc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80185be:	69fa      	ldr	r2, [r7, #28]
 80185c0:	69b9      	ldr	r1, [r7, #24]
 80185c2:	68f8      	ldr	r0, [r7, #12]
 80185c4:	f000 f8d6 	bl	8018774 <I2C_WaitOnTXISFlagUntilTimeout>
 80185c8:	4603      	mov	r3, r0
 80185ca:	2b00      	cmp	r3, #0
 80185cc:	d001      	beq.n	80185d2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80185ce:	2301      	movs	r3, #1
 80185d0:	e012      	b.n	80185f8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80185d2:	893b      	ldrh	r3, [r7, #8]
 80185d4:	b2da      	uxtb	r2, r3
 80185d6:	68fb      	ldr	r3, [r7, #12]
 80185d8:	681b      	ldr	r3, [r3, #0]
 80185da:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80185dc:	69fb      	ldr	r3, [r7, #28]
 80185de:	9300      	str	r3, [sp, #0]
 80185e0:	69bb      	ldr	r3, [r7, #24]
 80185e2:	2200      	movs	r2, #0
 80185e4:	2180      	movs	r1, #128	; 0x80
 80185e6:	68f8      	ldr	r0, [r7, #12]
 80185e8:	f000 f884 	bl	80186f4 <I2C_WaitOnFlagUntilTimeout>
 80185ec:	4603      	mov	r3, r0
 80185ee:	2b00      	cmp	r3, #0
 80185f0:	d001      	beq.n	80185f6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80185f2:	2301      	movs	r3, #1
 80185f4:	e000      	b.n	80185f8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80185f6:	2300      	movs	r3, #0
}
 80185f8:	4618      	mov	r0, r3
 80185fa:	3710      	adds	r7, #16
 80185fc:	46bd      	mov	sp, r7
 80185fe:	bd80      	pop	{r7, pc}
 8018600:	80002000 	.word	0x80002000

08018604 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8018604:	b580      	push	{r7, lr}
 8018606:	b086      	sub	sp, #24
 8018608:	af02      	add	r7, sp, #8
 801860a:	60f8      	str	r0, [r7, #12]
 801860c:	4608      	mov	r0, r1
 801860e:	4611      	mov	r1, r2
 8018610:	461a      	mov	r2, r3
 8018612:	4603      	mov	r3, r0
 8018614:	817b      	strh	r3, [r7, #10]
 8018616:	460b      	mov	r3, r1
 8018618:	813b      	strh	r3, [r7, #8]
 801861a:	4613      	mov	r3, r2
 801861c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 801861e:	88fb      	ldrh	r3, [r7, #6]
 8018620:	b2da      	uxtb	r2, r3
 8018622:	8979      	ldrh	r1, [r7, #10]
 8018624:	4b20      	ldr	r3, [pc, #128]	; (80186a8 <I2C_RequestMemoryRead+0xa4>)
 8018626:	9300      	str	r3, [sp, #0]
 8018628:	2300      	movs	r3, #0
 801862a:	68f8      	ldr	r0, [r7, #12]
 801862c:	f000 f9fe 	bl	8018a2c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8018630:	69fa      	ldr	r2, [r7, #28]
 8018632:	69b9      	ldr	r1, [r7, #24]
 8018634:	68f8      	ldr	r0, [r7, #12]
 8018636:	f000 f89d 	bl	8018774 <I2C_WaitOnTXISFlagUntilTimeout>
 801863a:	4603      	mov	r3, r0
 801863c:	2b00      	cmp	r3, #0
 801863e:	d001      	beq.n	8018644 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8018640:	2301      	movs	r3, #1
 8018642:	e02c      	b.n	801869e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8018644:	88fb      	ldrh	r3, [r7, #6]
 8018646:	2b01      	cmp	r3, #1
 8018648:	d105      	bne.n	8018656 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801864a:	893b      	ldrh	r3, [r7, #8]
 801864c:	b2da      	uxtb	r2, r3
 801864e:	68fb      	ldr	r3, [r7, #12]
 8018650:	681b      	ldr	r3, [r3, #0]
 8018652:	629a      	str	r2, [r3, #40]	; 0x28
 8018654:	e015      	b.n	8018682 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8018656:	893b      	ldrh	r3, [r7, #8]
 8018658:	0a1b      	lsrs	r3, r3, #8
 801865a:	b29b      	uxth	r3, r3
 801865c:	b2da      	uxtb	r2, r3
 801865e:	68fb      	ldr	r3, [r7, #12]
 8018660:	681b      	ldr	r3, [r3, #0]
 8018662:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8018664:	69fa      	ldr	r2, [r7, #28]
 8018666:	69b9      	ldr	r1, [r7, #24]
 8018668:	68f8      	ldr	r0, [r7, #12]
 801866a:	f000 f883 	bl	8018774 <I2C_WaitOnTXISFlagUntilTimeout>
 801866e:	4603      	mov	r3, r0
 8018670:	2b00      	cmp	r3, #0
 8018672:	d001      	beq.n	8018678 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8018674:	2301      	movs	r3, #1
 8018676:	e012      	b.n	801869e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8018678:	893b      	ldrh	r3, [r7, #8]
 801867a:	b2da      	uxtb	r2, r3
 801867c:	68fb      	ldr	r3, [r7, #12]
 801867e:	681b      	ldr	r3, [r3, #0]
 8018680:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8018682:	69fb      	ldr	r3, [r7, #28]
 8018684:	9300      	str	r3, [sp, #0]
 8018686:	69bb      	ldr	r3, [r7, #24]
 8018688:	2200      	movs	r2, #0
 801868a:	2140      	movs	r1, #64	; 0x40
 801868c:	68f8      	ldr	r0, [r7, #12]
 801868e:	f000 f831 	bl	80186f4 <I2C_WaitOnFlagUntilTimeout>
 8018692:	4603      	mov	r3, r0
 8018694:	2b00      	cmp	r3, #0
 8018696:	d001      	beq.n	801869c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8018698:	2301      	movs	r3, #1
 801869a:	e000      	b.n	801869e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 801869c:	2300      	movs	r3, #0
}
 801869e:	4618      	mov	r0, r3
 80186a0:	3710      	adds	r7, #16
 80186a2:	46bd      	mov	sp, r7
 80186a4:	bd80      	pop	{r7, pc}
 80186a6:	bf00      	nop
 80186a8:	80002000 	.word	0x80002000

080186ac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80186ac:	b480      	push	{r7}
 80186ae:	b083      	sub	sp, #12
 80186b0:	af00      	add	r7, sp, #0
 80186b2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80186b4:	687b      	ldr	r3, [r7, #4]
 80186b6:	681b      	ldr	r3, [r3, #0]
 80186b8:	699b      	ldr	r3, [r3, #24]
 80186ba:	f003 0302 	and.w	r3, r3, #2
 80186be:	2b02      	cmp	r3, #2
 80186c0:	d103      	bne.n	80186ca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80186c2:	687b      	ldr	r3, [r7, #4]
 80186c4:	681b      	ldr	r3, [r3, #0]
 80186c6:	2200      	movs	r2, #0
 80186c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80186ca:	687b      	ldr	r3, [r7, #4]
 80186cc:	681b      	ldr	r3, [r3, #0]
 80186ce:	699b      	ldr	r3, [r3, #24]
 80186d0:	f003 0301 	and.w	r3, r3, #1
 80186d4:	2b01      	cmp	r3, #1
 80186d6:	d007      	beq.n	80186e8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80186d8:	687b      	ldr	r3, [r7, #4]
 80186da:	681b      	ldr	r3, [r3, #0]
 80186dc:	699a      	ldr	r2, [r3, #24]
 80186de:	687b      	ldr	r3, [r7, #4]
 80186e0:	681b      	ldr	r3, [r3, #0]
 80186e2:	f042 0201 	orr.w	r2, r2, #1
 80186e6:	619a      	str	r2, [r3, #24]
  }
}
 80186e8:	bf00      	nop
 80186ea:	370c      	adds	r7, #12
 80186ec:	46bd      	mov	sp, r7
 80186ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186f2:	4770      	bx	lr

080186f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80186f4:	b580      	push	{r7, lr}
 80186f6:	b084      	sub	sp, #16
 80186f8:	af00      	add	r7, sp, #0
 80186fa:	60f8      	str	r0, [r7, #12]
 80186fc:	60b9      	str	r1, [r7, #8]
 80186fe:	603b      	str	r3, [r7, #0]
 8018700:	4613      	mov	r3, r2
 8018702:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8018704:	e022      	b.n	801874c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8018706:	683b      	ldr	r3, [r7, #0]
 8018708:	f1b3 3fff 	cmp.w	r3, #4294967295
 801870c:	d01e      	beq.n	801874c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801870e:	f7fc ff3f 	bl	8015590 <HAL_GetTick>
 8018712:	4602      	mov	r2, r0
 8018714:	69bb      	ldr	r3, [r7, #24]
 8018716:	1ad3      	subs	r3, r2, r3
 8018718:	683a      	ldr	r2, [r7, #0]
 801871a:	429a      	cmp	r2, r3
 801871c:	d302      	bcc.n	8018724 <I2C_WaitOnFlagUntilTimeout+0x30>
 801871e:	683b      	ldr	r3, [r7, #0]
 8018720:	2b00      	cmp	r3, #0
 8018722:	d113      	bne.n	801874c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8018724:	68fb      	ldr	r3, [r7, #12]
 8018726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018728:	f043 0220 	orr.w	r2, r3, #32
 801872c:	68fb      	ldr	r3, [r7, #12]
 801872e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8018730:	68fb      	ldr	r3, [r7, #12]
 8018732:	2220      	movs	r2, #32
 8018734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8018738:	68fb      	ldr	r3, [r7, #12]
 801873a:	2200      	movs	r2, #0
 801873c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8018740:	68fb      	ldr	r3, [r7, #12]
 8018742:	2200      	movs	r2, #0
 8018744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8018748:	2301      	movs	r3, #1
 801874a:	e00f      	b.n	801876c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801874c:	68fb      	ldr	r3, [r7, #12]
 801874e:	681b      	ldr	r3, [r3, #0]
 8018750:	699a      	ldr	r2, [r3, #24]
 8018752:	68bb      	ldr	r3, [r7, #8]
 8018754:	4013      	ands	r3, r2
 8018756:	68ba      	ldr	r2, [r7, #8]
 8018758:	429a      	cmp	r2, r3
 801875a:	bf0c      	ite	eq
 801875c:	2301      	moveq	r3, #1
 801875e:	2300      	movne	r3, #0
 8018760:	b2db      	uxtb	r3, r3
 8018762:	461a      	mov	r2, r3
 8018764:	79fb      	ldrb	r3, [r7, #7]
 8018766:	429a      	cmp	r2, r3
 8018768:	d0cd      	beq.n	8018706 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801876a:	2300      	movs	r3, #0
}
 801876c:	4618      	mov	r0, r3
 801876e:	3710      	adds	r7, #16
 8018770:	46bd      	mov	sp, r7
 8018772:	bd80      	pop	{r7, pc}

08018774 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8018774:	b580      	push	{r7, lr}
 8018776:	b084      	sub	sp, #16
 8018778:	af00      	add	r7, sp, #0
 801877a:	60f8      	str	r0, [r7, #12]
 801877c:	60b9      	str	r1, [r7, #8]
 801877e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8018780:	e02c      	b.n	80187dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8018782:	687a      	ldr	r2, [r7, #4]
 8018784:	68b9      	ldr	r1, [r7, #8]
 8018786:	68f8      	ldr	r0, [r7, #12]
 8018788:	f000 f870 	bl	801886c <I2C_IsErrorOccurred>
 801878c:	4603      	mov	r3, r0
 801878e:	2b00      	cmp	r3, #0
 8018790:	d001      	beq.n	8018796 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8018792:	2301      	movs	r3, #1
 8018794:	e02a      	b.n	80187ec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8018796:	68bb      	ldr	r3, [r7, #8]
 8018798:	f1b3 3fff 	cmp.w	r3, #4294967295
 801879c:	d01e      	beq.n	80187dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801879e:	f7fc fef7 	bl	8015590 <HAL_GetTick>
 80187a2:	4602      	mov	r2, r0
 80187a4:	687b      	ldr	r3, [r7, #4]
 80187a6:	1ad3      	subs	r3, r2, r3
 80187a8:	68ba      	ldr	r2, [r7, #8]
 80187aa:	429a      	cmp	r2, r3
 80187ac:	d302      	bcc.n	80187b4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80187ae:	68bb      	ldr	r3, [r7, #8]
 80187b0:	2b00      	cmp	r3, #0
 80187b2:	d113      	bne.n	80187dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80187b4:	68fb      	ldr	r3, [r7, #12]
 80187b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80187b8:	f043 0220 	orr.w	r2, r3, #32
 80187bc:	68fb      	ldr	r3, [r7, #12]
 80187be:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80187c0:	68fb      	ldr	r3, [r7, #12]
 80187c2:	2220      	movs	r2, #32
 80187c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80187c8:	68fb      	ldr	r3, [r7, #12]
 80187ca:	2200      	movs	r2, #0
 80187cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80187d0:	68fb      	ldr	r3, [r7, #12]
 80187d2:	2200      	movs	r2, #0
 80187d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80187d8:	2301      	movs	r3, #1
 80187da:	e007      	b.n	80187ec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80187dc:	68fb      	ldr	r3, [r7, #12]
 80187de:	681b      	ldr	r3, [r3, #0]
 80187e0:	699b      	ldr	r3, [r3, #24]
 80187e2:	f003 0302 	and.w	r3, r3, #2
 80187e6:	2b02      	cmp	r3, #2
 80187e8:	d1cb      	bne.n	8018782 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80187ea:	2300      	movs	r3, #0
}
 80187ec:	4618      	mov	r0, r3
 80187ee:	3710      	adds	r7, #16
 80187f0:	46bd      	mov	sp, r7
 80187f2:	bd80      	pop	{r7, pc}

080187f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80187f4:	b580      	push	{r7, lr}
 80187f6:	b084      	sub	sp, #16
 80187f8:	af00      	add	r7, sp, #0
 80187fa:	60f8      	str	r0, [r7, #12]
 80187fc:	60b9      	str	r1, [r7, #8]
 80187fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8018800:	e028      	b.n	8018854 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8018802:	687a      	ldr	r2, [r7, #4]
 8018804:	68b9      	ldr	r1, [r7, #8]
 8018806:	68f8      	ldr	r0, [r7, #12]
 8018808:	f000 f830 	bl	801886c <I2C_IsErrorOccurred>
 801880c:	4603      	mov	r3, r0
 801880e:	2b00      	cmp	r3, #0
 8018810:	d001      	beq.n	8018816 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8018812:	2301      	movs	r3, #1
 8018814:	e026      	b.n	8018864 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8018816:	f7fc febb 	bl	8015590 <HAL_GetTick>
 801881a:	4602      	mov	r2, r0
 801881c:	687b      	ldr	r3, [r7, #4]
 801881e:	1ad3      	subs	r3, r2, r3
 8018820:	68ba      	ldr	r2, [r7, #8]
 8018822:	429a      	cmp	r2, r3
 8018824:	d302      	bcc.n	801882c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8018826:	68bb      	ldr	r3, [r7, #8]
 8018828:	2b00      	cmp	r3, #0
 801882a:	d113      	bne.n	8018854 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801882c:	68fb      	ldr	r3, [r7, #12]
 801882e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018830:	f043 0220 	orr.w	r2, r3, #32
 8018834:	68fb      	ldr	r3, [r7, #12]
 8018836:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8018838:	68fb      	ldr	r3, [r7, #12]
 801883a:	2220      	movs	r2, #32
 801883c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8018840:	68fb      	ldr	r3, [r7, #12]
 8018842:	2200      	movs	r2, #0
 8018844:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8018848:	68fb      	ldr	r3, [r7, #12]
 801884a:	2200      	movs	r2, #0
 801884c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8018850:	2301      	movs	r3, #1
 8018852:	e007      	b.n	8018864 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8018854:	68fb      	ldr	r3, [r7, #12]
 8018856:	681b      	ldr	r3, [r3, #0]
 8018858:	699b      	ldr	r3, [r3, #24]
 801885a:	f003 0320 	and.w	r3, r3, #32
 801885e:	2b20      	cmp	r3, #32
 8018860:	d1cf      	bne.n	8018802 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8018862:	2300      	movs	r3, #0
}
 8018864:	4618      	mov	r0, r3
 8018866:	3710      	adds	r7, #16
 8018868:	46bd      	mov	sp, r7
 801886a:	bd80      	pop	{r7, pc}

0801886c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801886c:	b580      	push	{r7, lr}
 801886e:	b08a      	sub	sp, #40	; 0x28
 8018870:	af00      	add	r7, sp, #0
 8018872:	60f8      	str	r0, [r7, #12]
 8018874:	60b9      	str	r1, [r7, #8]
 8018876:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8018878:	2300      	movs	r3, #0
 801887a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 801887e:	68fb      	ldr	r3, [r7, #12]
 8018880:	681b      	ldr	r3, [r3, #0]
 8018882:	699b      	ldr	r3, [r3, #24]
 8018884:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8018886:	2300      	movs	r3, #0
 8018888:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 801888a:	687b      	ldr	r3, [r7, #4]
 801888c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 801888e:	69bb      	ldr	r3, [r7, #24]
 8018890:	f003 0310 	and.w	r3, r3, #16
 8018894:	2b00      	cmp	r3, #0
 8018896:	d068      	beq.n	801896a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8018898:	68fb      	ldr	r3, [r7, #12]
 801889a:	681b      	ldr	r3, [r3, #0]
 801889c:	2210      	movs	r2, #16
 801889e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80188a0:	e049      	b.n	8018936 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80188a2:	68bb      	ldr	r3, [r7, #8]
 80188a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80188a8:	d045      	beq.n	8018936 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80188aa:	f7fc fe71 	bl	8015590 <HAL_GetTick>
 80188ae:	4602      	mov	r2, r0
 80188b0:	69fb      	ldr	r3, [r7, #28]
 80188b2:	1ad3      	subs	r3, r2, r3
 80188b4:	68ba      	ldr	r2, [r7, #8]
 80188b6:	429a      	cmp	r2, r3
 80188b8:	d302      	bcc.n	80188c0 <I2C_IsErrorOccurred+0x54>
 80188ba:	68bb      	ldr	r3, [r7, #8]
 80188bc:	2b00      	cmp	r3, #0
 80188be:	d13a      	bne.n	8018936 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80188c0:	68fb      	ldr	r3, [r7, #12]
 80188c2:	681b      	ldr	r3, [r3, #0]
 80188c4:	685b      	ldr	r3, [r3, #4]
 80188c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80188ca:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80188cc:	68fb      	ldr	r3, [r7, #12]
 80188ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80188d2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80188d4:	68fb      	ldr	r3, [r7, #12]
 80188d6:	681b      	ldr	r3, [r3, #0]
 80188d8:	699b      	ldr	r3, [r3, #24]
 80188da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80188de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80188e2:	d121      	bne.n	8018928 <I2C_IsErrorOccurred+0xbc>
 80188e4:	697b      	ldr	r3, [r7, #20]
 80188e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80188ea:	d01d      	beq.n	8018928 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80188ec:	7cfb      	ldrb	r3, [r7, #19]
 80188ee:	2b20      	cmp	r3, #32
 80188f0:	d01a      	beq.n	8018928 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80188f2:	68fb      	ldr	r3, [r7, #12]
 80188f4:	681b      	ldr	r3, [r3, #0]
 80188f6:	685a      	ldr	r2, [r3, #4]
 80188f8:	68fb      	ldr	r3, [r7, #12]
 80188fa:	681b      	ldr	r3, [r3, #0]
 80188fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8018900:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8018902:	f7fc fe45 	bl	8015590 <HAL_GetTick>
 8018906:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8018908:	e00e      	b.n	8018928 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 801890a:	f7fc fe41 	bl	8015590 <HAL_GetTick>
 801890e:	4602      	mov	r2, r0
 8018910:	69fb      	ldr	r3, [r7, #28]
 8018912:	1ad3      	subs	r3, r2, r3
 8018914:	2b19      	cmp	r3, #25
 8018916:	d907      	bls.n	8018928 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8018918:	6a3b      	ldr	r3, [r7, #32]
 801891a:	f043 0320 	orr.w	r3, r3, #32
 801891e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8018920:	2301      	movs	r3, #1
 8018922:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8018926:	e006      	b.n	8018936 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8018928:	68fb      	ldr	r3, [r7, #12]
 801892a:	681b      	ldr	r3, [r3, #0]
 801892c:	699b      	ldr	r3, [r3, #24]
 801892e:	f003 0320 	and.w	r3, r3, #32
 8018932:	2b20      	cmp	r3, #32
 8018934:	d1e9      	bne.n	801890a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8018936:	68fb      	ldr	r3, [r7, #12]
 8018938:	681b      	ldr	r3, [r3, #0]
 801893a:	699b      	ldr	r3, [r3, #24]
 801893c:	f003 0320 	and.w	r3, r3, #32
 8018940:	2b20      	cmp	r3, #32
 8018942:	d003      	beq.n	801894c <I2C_IsErrorOccurred+0xe0>
 8018944:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018948:	2b00      	cmp	r3, #0
 801894a:	d0aa      	beq.n	80188a2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 801894c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018950:	2b00      	cmp	r3, #0
 8018952:	d103      	bne.n	801895c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8018954:	68fb      	ldr	r3, [r7, #12]
 8018956:	681b      	ldr	r3, [r3, #0]
 8018958:	2220      	movs	r2, #32
 801895a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 801895c:	6a3b      	ldr	r3, [r7, #32]
 801895e:	f043 0304 	orr.w	r3, r3, #4
 8018962:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8018964:	2301      	movs	r3, #1
 8018966:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 801896a:	68fb      	ldr	r3, [r7, #12]
 801896c:	681b      	ldr	r3, [r3, #0]
 801896e:	699b      	ldr	r3, [r3, #24]
 8018970:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8018972:	69bb      	ldr	r3, [r7, #24]
 8018974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018978:	2b00      	cmp	r3, #0
 801897a:	d00b      	beq.n	8018994 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 801897c:	6a3b      	ldr	r3, [r7, #32]
 801897e:	f043 0301 	orr.w	r3, r3, #1
 8018982:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8018984:	68fb      	ldr	r3, [r7, #12]
 8018986:	681b      	ldr	r3, [r3, #0]
 8018988:	f44f 7280 	mov.w	r2, #256	; 0x100
 801898c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801898e:	2301      	movs	r3, #1
 8018990:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8018994:	69bb      	ldr	r3, [r7, #24]
 8018996:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801899a:	2b00      	cmp	r3, #0
 801899c:	d00b      	beq.n	80189b6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 801899e:	6a3b      	ldr	r3, [r7, #32]
 80189a0:	f043 0308 	orr.w	r3, r3, #8
 80189a4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80189a6:	68fb      	ldr	r3, [r7, #12]
 80189a8:	681b      	ldr	r3, [r3, #0]
 80189aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80189ae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80189b0:	2301      	movs	r3, #1
 80189b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80189b6:	69bb      	ldr	r3, [r7, #24]
 80189b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80189bc:	2b00      	cmp	r3, #0
 80189be:	d00b      	beq.n	80189d8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80189c0:	6a3b      	ldr	r3, [r7, #32]
 80189c2:	f043 0302 	orr.w	r3, r3, #2
 80189c6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80189c8:	68fb      	ldr	r3, [r7, #12]
 80189ca:	681b      	ldr	r3, [r3, #0]
 80189cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80189d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80189d2:	2301      	movs	r3, #1
 80189d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80189d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80189dc:	2b00      	cmp	r3, #0
 80189de:	d01c      	beq.n	8018a1a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80189e0:	68f8      	ldr	r0, [r7, #12]
 80189e2:	f7ff fe63 	bl	80186ac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80189e6:	68fb      	ldr	r3, [r7, #12]
 80189e8:	681b      	ldr	r3, [r3, #0]
 80189ea:	6859      	ldr	r1, [r3, #4]
 80189ec:	68fb      	ldr	r3, [r7, #12]
 80189ee:	681a      	ldr	r2, [r3, #0]
 80189f0:	4b0d      	ldr	r3, [pc, #52]	; (8018a28 <I2C_IsErrorOccurred+0x1bc>)
 80189f2:	400b      	ands	r3, r1
 80189f4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80189f6:	68fb      	ldr	r3, [r7, #12]
 80189f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80189fa:	6a3b      	ldr	r3, [r7, #32]
 80189fc:	431a      	orrs	r2, r3
 80189fe:	68fb      	ldr	r3, [r7, #12]
 8018a00:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8018a02:	68fb      	ldr	r3, [r7, #12]
 8018a04:	2220      	movs	r2, #32
 8018a06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8018a0a:	68fb      	ldr	r3, [r7, #12]
 8018a0c:	2200      	movs	r2, #0
 8018a0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018a12:	68fb      	ldr	r3, [r7, #12]
 8018a14:	2200      	movs	r2, #0
 8018a16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8018a1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8018a1e:	4618      	mov	r0, r3
 8018a20:	3728      	adds	r7, #40	; 0x28
 8018a22:	46bd      	mov	sp, r7
 8018a24:	bd80      	pop	{r7, pc}
 8018a26:	bf00      	nop
 8018a28:	fe00e800 	.word	0xfe00e800

08018a2c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8018a2c:	b480      	push	{r7}
 8018a2e:	b087      	sub	sp, #28
 8018a30:	af00      	add	r7, sp, #0
 8018a32:	60f8      	str	r0, [r7, #12]
 8018a34:	607b      	str	r3, [r7, #4]
 8018a36:	460b      	mov	r3, r1
 8018a38:	817b      	strh	r3, [r7, #10]
 8018a3a:	4613      	mov	r3, r2
 8018a3c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8018a3e:	897b      	ldrh	r3, [r7, #10]
 8018a40:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8018a44:	7a7b      	ldrb	r3, [r7, #9]
 8018a46:	041b      	lsls	r3, r3, #16
 8018a48:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8018a4c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8018a4e:	687b      	ldr	r3, [r7, #4]
 8018a50:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8018a52:	6a3b      	ldr	r3, [r7, #32]
 8018a54:	4313      	orrs	r3, r2
 8018a56:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018a5a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8018a5c:	68fb      	ldr	r3, [r7, #12]
 8018a5e:	681b      	ldr	r3, [r3, #0]
 8018a60:	685a      	ldr	r2, [r3, #4]
 8018a62:	6a3b      	ldr	r3, [r7, #32]
 8018a64:	0d5b      	lsrs	r3, r3, #21
 8018a66:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8018a6a:	4b08      	ldr	r3, [pc, #32]	; (8018a8c <I2C_TransferConfig+0x60>)
 8018a6c:	430b      	orrs	r3, r1
 8018a6e:	43db      	mvns	r3, r3
 8018a70:	ea02 0103 	and.w	r1, r2, r3
 8018a74:	68fb      	ldr	r3, [r7, #12]
 8018a76:	681b      	ldr	r3, [r3, #0]
 8018a78:	697a      	ldr	r2, [r7, #20]
 8018a7a:	430a      	orrs	r2, r1
 8018a7c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8018a7e:	bf00      	nop
 8018a80:	371c      	adds	r7, #28
 8018a82:	46bd      	mov	sp, r7
 8018a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a88:	4770      	bx	lr
 8018a8a:	bf00      	nop
 8018a8c:	03ff63ff 	.word	0x03ff63ff

08018a90 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8018a90:	b480      	push	{r7}
 8018a92:	b083      	sub	sp, #12
 8018a94:	af00      	add	r7, sp, #0
 8018a96:	6078      	str	r0, [r7, #4]
 8018a98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8018a9a:	687b      	ldr	r3, [r7, #4]
 8018a9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8018aa0:	b2db      	uxtb	r3, r3
 8018aa2:	2b20      	cmp	r3, #32
 8018aa4:	d138      	bne.n	8018b18 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8018aa6:	687b      	ldr	r3, [r7, #4]
 8018aa8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8018aac:	2b01      	cmp	r3, #1
 8018aae:	d101      	bne.n	8018ab4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8018ab0:	2302      	movs	r3, #2
 8018ab2:	e032      	b.n	8018b1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8018ab4:	687b      	ldr	r3, [r7, #4]
 8018ab6:	2201      	movs	r2, #1
 8018ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8018abc:	687b      	ldr	r3, [r7, #4]
 8018abe:	2224      	movs	r2, #36	; 0x24
 8018ac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8018ac4:	687b      	ldr	r3, [r7, #4]
 8018ac6:	681b      	ldr	r3, [r3, #0]
 8018ac8:	681a      	ldr	r2, [r3, #0]
 8018aca:	687b      	ldr	r3, [r7, #4]
 8018acc:	681b      	ldr	r3, [r3, #0]
 8018ace:	f022 0201 	bic.w	r2, r2, #1
 8018ad2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8018ad4:	687b      	ldr	r3, [r7, #4]
 8018ad6:	681b      	ldr	r3, [r3, #0]
 8018ad8:	681a      	ldr	r2, [r3, #0]
 8018ada:	687b      	ldr	r3, [r7, #4]
 8018adc:	681b      	ldr	r3, [r3, #0]
 8018ade:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8018ae2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8018ae4:	687b      	ldr	r3, [r7, #4]
 8018ae6:	681b      	ldr	r3, [r3, #0]
 8018ae8:	6819      	ldr	r1, [r3, #0]
 8018aea:	687b      	ldr	r3, [r7, #4]
 8018aec:	681b      	ldr	r3, [r3, #0]
 8018aee:	683a      	ldr	r2, [r7, #0]
 8018af0:	430a      	orrs	r2, r1
 8018af2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8018af4:	687b      	ldr	r3, [r7, #4]
 8018af6:	681b      	ldr	r3, [r3, #0]
 8018af8:	681a      	ldr	r2, [r3, #0]
 8018afa:	687b      	ldr	r3, [r7, #4]
 8018afc:	681b      	ldr	r3, [r3, #0]
 8018afe:	f042 0201 	orr.w	r2, r2, #1
 8018b02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8018b04:	687b      	ldr	r3, [r7, #4]
 8018b06:	2220      	movs	r2, #32
 8018b08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018b0c:	687b      	ldr	r3, [r7, #4]
 8018b0e:	2200      	movs	r2, #0
 8018b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8018b14:	2300      	movs	r3, #0
 8018b16:	e000      	b.n	8018b1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8018b18:	2302      	movs	r3, #2
  }
}
 8018b1a:	4618      	mov	r0, r3
 8018b1c:	370c      	adds	r7, #12
 8018b1e:	46bd      	mov	sp, r7
 8018b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b24:	4770      	bx	lr

08018b26 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8018b26:	b480      	push	{r7}
 8018b28:	b085      	sub	sp, #20
 8018b2a:	af00      	add	r7, sp, #0
 8018b2c:	6078      	str	r0, [r7, #4]
 8018b2e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8018b30:	687b      	ldr	r3, [r7, #4]
 8018b32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8018b36:	b2db      	uxtb	r3, r3
 8018b38:	2b20      	cmp	r3, #32
 8018b3a:	d139      	bne.n	8018bb0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8018b3c:	687b      	ldr	r3, [r7, #4]
 8018b3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8018b42:	2b01      	cmp	r3, #1
 8018b44:	d101      	bne.n	8018b4a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8018b46:	2302      	movs	r3, #2
 8018b48:	e033      	b.n	8018bb2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8018b4a:	687b      	ldr	r3, [r7, #4]
 8018b4c:	2201      	movs	r2, #1
 8018b4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8018b52:	687b      	ldr	r3, [r7, #4]
 8018b54:	2224      	movs	r2, #36	; 0x24
 8018b56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8018b5a:	687b      	ldr	r3, [r7, #4]
 8018b5c:	681b      	ldr	r3, [r3, #0]
 8018b5e:	681a      	ldr	r2, [r3, #0]
 8018b60:	687b      	ldr	r3, [r7, #4]
 8018b62:	681b      	ldr	r3, [r3, #0]
 8018b64:	f022 0201 	bic.w	r2, r2, #1
 8018b68:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8018b6a:	687b      	ldr	r3, [r7, #4]
 8018b6c:	681b      	ldr	r3, [r3, #0]
 8018b6e:	681b      	ldr	r3, [r3, #0]
 8018b70:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8018b72:	68fb      	ldr	r3, [r7, #12]
 8018b74:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8018b78:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8018b7a:	683b      	ldr	r3, [r7, #0]
 8018b7c:	021b      	lsls	r3, r3, #8
 8018b7e:	68fa      	ldr	r2, [r7, #12]
 8018b80:	4313      	orrs	r3, r2
 8018b82:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8018b84:	687b      	ldr	r3, [r7, #4]
 8018b86:	681b      	ldr	r3, [r3, #0]
 8018b88:	68fa      	ldr	r2, [r7, #12]
 8018b8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8018b8c:	687b      	ldr	r3, [r7, #4]
 8018b8e:	681b      	ldr	r3, [r3, #0]
 8018b90:	681a      	ldr	r2, [r3, #0]
 8018b92:	687b      	ldr	r3, [r7, #4]
 8018b94:	681b      	ldr	r3, [r3, #0]
 8018b96:	f042 0201 	orr.w	r2, r2, #1
 8018b9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8018b9c:	687b      	ldr	r3, [r7, #4]
 8018b9e:	2220      	movs	r2, #32
 8018ba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018ba4:	687b      	ldr	r3, [r7, #4]
 8018ba6:	2200      	movs	r2, #0
 8018ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8018bac:	2300      	movs	r3, #0
 8018bae:	e000      	b.n	8018bb2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8018bb0:	2302      	movs	r3, #2
  }
}
 8018bb2:	4618      	mov	r0, r3
 8018bb4:	3714      	adds	r7, #20
 8018bb6:	46bd      	mov	sp, r7
 8018bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bbc:	4770      	bx	lr

08018bbe <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8018bbe:	b580      	push	{r7, lr}
 8018bc0:	b084      	sub	sp, #16
 8018bc2:	af00      	add	r7, sp, #0
 8018bc4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8018bc6:	687b      	ldr	r3, [r7, #4]
 8018bc8:	2b00      	cmp	r3, #0
 8018bca:	d101      	bne.n	8018bd0 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8018bcc:	2301      	movs	r3, #1
 8018bce:	e041      	b.n	8018c54 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8018bd0:	687b      	ldr	r3, [r7, #4]
 8018bd2:	681b      	ldr	r3, [r3, #0]
 8018bd4:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8018bd8:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8018bda:	687b      	ldr	r3, [r7, #4]
 8018bdc:	681b      	ldr	r3, [r3, #0]
 8018bde:	f245 5255 	movw	r2, #21845	; 0x5555
 8018be2:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8018be4:	687b      	ldr	r3, [r7, #4]
 8018be6:	681b      	ldr	r3, [r3, #0]
 8018be8:	687a      	ldr	r2, [r7, #4]
 8018bea:	6852      	ldr	r2, [r2, #4]
 8018bec:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8018bee:	687b      	ldr	r3, [r7, #4]
 8018bf0:	681b      	ldr	r3, [r3, #0]
 8018bf2:	687a      	ldr	r2, [r7, #4]
 8018bf4:	6892      	ldr	r2, [r2, #8]
 8018bf6:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8018bf8:	f7fc fcca 	bl	8015590 <HAL_GetTick>
 8018bfc:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8018bfe:	e00f      	b.n	8018c20 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8018c00:	f7fc fcc6 	bl	8015590 <HAL_GetTick>
 8018c04:	4602      	mov	r2, r0
 8018c06:	68fb      	ldr	r3, [r7, #12]
 8018c08:	1ad3      	subs	r3, r2, r3
 8018c0a:	2b31      	cmp	r3, #49	; 0x31
 8018c0c:	d908      	bls.n	8018c20 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8018c0e:	687b      	ldr	r3, [r7, #4]
 8018c10:	681b      	ldr	r3, [r3, #0]
 8018c12:	68db      	ldr	r3, [r3, #12]
 8018c14:	f003 0307 	and.w	r3, r3, #7
 8018c18:	2b00      	cmp	r3, #0
 8018c1a:	d001      	beq.n	8018c20 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8018c1c:	2303      	movs	r3, #3
 8018c1e:	e019      	b.n	8018c54 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8018c20:	687b      	ldr	r3, [r7, #4]
 8018c22:	681b      	ldr	r3, [r3, #0]
 8018c24:	68db      	ldr	r3, [r3, #12]
 8018c26:	f003 0307 	and.w	r3, r3, #7
 8018c2a:	2b00      	cmp	r3, #0
 8018c2c:	d1e8      	bne.n	8018c00 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8018c2e:	687b      	ldr	r3, [r7, #4]
 8018c30:	681b      	ldr	r3, [r3, #0]
 8018c32:	691a      	ldr	r2, [r3, #16]
 8018c34:	687b      	ldr	r3, [r7, #4]
 8018c36:	68db      	ldr	r3, [r3, #12]
 8018c38:	429a      	cmp	r2, r3
 8018c3a:	d005      	beq.n	8018c48 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8018c3c:	687b      	ldr	r3, [r7, #4]
 8018c3e:	681b      	ldr	r3, [r3, #0]
 8018c40:	687a      	ldr	r2, [r7, #4]
 8018c42:	68d2      	ldr	r2, [r2, #12]
 8018c44:	611a      	str	r2, [r3, #16]
 8018c46:	e004      	b.n	8018c52 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8018c48:	687b      	ldr	r3, [r7, #4]
 8018c4a:	681b      	ldr	r3, [r3, #0]
 8018c4c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8018c50:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8018c52:	2300      	movs	r3, #0
}
 8018c54:	4618      	mov	r0, r3
 8018c56:	3710      	adds	r7, #16
 8018c58:	46bd      	mov	sp, r7
 8018c5a:	bd80      	pop	{r7, pc}

08018c5c <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8018c5c:	b480      	push	{r7}
 8018c5e:	b083      	sub	sp, #12
 8018c60:	af00      	add	r7, sp, #0
 8018c62:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8018c64:	687b      	ldr	r3, [r7, #4]
 8018c66:	681b      	ldr	r3, [r3, #0]
 8018c68:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8018c6c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8018c6e:	2300      	movs	r3, #0
}
 8018c70:	4618      	mov	r0, r3
 8018c72:	370c      	adds	r7, #12
 8018c74:	46bd      	mov	sp, r7
 8018c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c7a:	4770      	bx	lr

08018c7c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8018c7c:	b580      	push	{r7, lr}
 8018c7e:	b086      	sub	sp, #24
 8018c80:	af00      	add	r7, sp, #0
 8018c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8018c84:	2300      	movs	r3, #0
 8018c86:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8018c88:	687b      	ldr	r3, [r7, #4]
 8018c8a:	2b00      	cmp	r3, #0
 8018c8c:	d101      	bne.n	8018c92 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8018c8e:	2301      	movs	r3, #1
 8018c90:	e29b      	b.n	80191ca <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8018c92:	687b      	ldr	r3, [r7, #4]
 8018c94:	681b      	ldr	r3, [r3, #0]
 8018c96:	f003 0301 	and.w	r3, r3, #1
 8018c9a:	2b00      	cmp	r3, #0
 8018c9c:	f000 8087 	beq.w	8018dae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8018ca0:	4b96      	ldr	r3, [pc, #600]	; (8018efc <HAL_RCC_OscConfig+0x280>)
 8018ca2:	689b      	ldr	r3, [r3, #8]
 8018ca4:	f003 030c 	and.w	r3, r3, #12
 8018ca8:	2b04      	cmp	r3, #4
 8018caa:	d00c      	beq.n	8018cc6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8018cac:	4b93      	ldr	r3, [pc, #588]	; (8018efc <HAL_RCC_OscConfig+0x280>)
 8018cae:	689b      	ldr	r3, [r3, #8]
 8018cb0:	f003 030c 	and.w	r3, r3, #12
 8018cb4:	2b08      	cmp	r3, #8
 8018cb6:	d112      	bne.n	8018cde <HAL_RCC_OscConfig+0x62>
 8018cb8:	4b90      	ldr	r3, [pc, #576]	; (8018efc <HAL_RCC_OscConfig+0x280>)
 8018cba:	685b      	ldr	r3, [r3, #4]
 8018cbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8018cc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8018cc4:	d10b      	bne.n	8018cde <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8018cc6:	4b8d      	ldr	r3, [pc, #564]	; (8018efc <HAL_RCC_OscConfig+0x280>)
 8018cc8:	681b      	ldr	r3, [r3, #0]
 8018cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8018cce:	2b00      	cmp	r3, #0
 8018cd0:	d06c      	beq.n	8018dac <HAL_RCC_OscConfig+0x130>
 8018cd2:	687b      	ldr	r3, [r7, #4]
 8018cd4:	685b      	ldr	r3, [r3, #4]
 8018cd6:	2b00      	cmp	r3, #0
 8018cd8:	d168      	bne.n	8018dac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8018cda:	2301      	movs	r3, #1
 8018cdc:	e275      	b.n	80191ca <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8018cde:	687b      	ldr	r3, [r7, #4]
 8018ce0:	685b      	ldr	r3, [r3, #4]
 8018ce2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018ce6:	d106      	bne.n	8018cf6 <HAL_RCC_OscConfig+0x7a>
 8018ce8:	4b84      	ldr	r3, [pc, #528]	; (8018efc <HAL_RCC_OscConfig+0x280>)
 8018cea:	681b      	ldr	r3, [r3, #0]
 8018cec:	4a83      	ldr	r2, [pc, #524]	; (8018efc <HAL_RCC_OscConfig+0x280>)
 8018cee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8018cf2:	6013      	str	r3, [r2, #0]
 8018cf4:	e02e      	b.n	8018d54 <HAL_RCC_OscConfig+0xd8>
 8018cf6:	687b      	ldr	r3, [r7, #4]
 8018cf8:	685b      	ldr	r3, [r3, #4]
 8018cfa:	2b00      	cmp	r3, #0
 8018cfc:	d10c      	bne.n	8018d18 <HAL_RCC_OscConfig+0x9c>
 8018cfe:	4b7f      	ldr	r3, [pc, #508]	; (8018efc <HAL_RCC_OscConfig+0x280>)
 8018d00:	681b      	ldr	r3, [r3, #0]
 8018d02:	4a7e      	ldr	r2, [pc, #504]	; (8018efc <HAL_RCC_OscConfig+0x280>)
 8018d04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8018d08:	6013      	str	r3, [r2, #0]
 8018d0a:	4b7c      	ldr	r3, [pc, #496]	; (8018efc <HAL_RCC_OscConfig+0x280>)
 8018d0c:	681b      	ldr	r3, [r3, #0]
 8018d0e:	4a7b      	ldr	r2, [pc, #492]	; (8018efc <HAL_RCC_OscConfig+0x280>)
 8018d10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8018d14:	6013      	str	r3, [r2, #0]
 8018d16:	e01d      	b.n	8018d54 <HAL_RCC_OscConfig+0xd8>
 8018d18:	687b      	ldr	r3, [r7, #4]
 8018d1a:	685b      	ldr	r3, [r3, #4]
 8018d1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8018d20:	d10c      	bne.n	8018d3c <HAL_RCC_OscConfig+0xc0>
 8018d22:	4b76      	ldr	r3, [pc, #472]	; (8018efc <HAL_RCC_OscConfig+0x280>)
 8018d24:	681b      	ldr	r3, [r3, #0]
 8018d26:	4a75      	ldr	r2, [pc, #468]	; (8018efc <HAL_RCC_OscConfig+0x280>)
 8018d28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8018d2c:	6013      	str	r3, [r2, #0]
 8018d2e:	4b73      	ldr	r3, [pc, #460]	; (8018efc <HAL_RCC_OscConfig+0x280>)
 8018d30:	681b      	ldr	r3, [r3, #0]
 8018d32:	4a72      	ldr	r2, [pc, #456]	; (8018efc <HAL_RCC_OscConfig+0x280>)
 8018d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8018d38:	6013      	str	r3, [r2, #0]
 8018d3a:	e00b      	b.n	8018d54 <HAL_RCC_OscConfig+0xd8>
 8018d3c:	4b6f      	ldr	r3, [pc, #444]	; (8018efc <HAL_RCC_OscConfig+0x280>)
 8018d3e:	681b      	ldr	r3, [r3, #0]
 8018d40:	4a6e      	ldr	r2, [pc, #440]	; (8018efc <HAL_RCC_OscConfig+0x280>)
 8018d42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8018d46:	6013      	str	r3, [r2, #0]
 8018d48:	4b6c      	ldr	r3, [pc, #432]	; (8018efc <HAL_RCC_OscConfig+0x280>)
 8018d4a:	681b      	ldr	r3, [r3, #0]
 8018d4c:	4a6b      	ldr	r2, [pc, #428]	; (8018efc <HAL_RCC_OscConfig+0x280>)
 8018d4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8018d52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8018d54:	687b      	ldr	r3, [r7, #4]
 8018d56:	685b      	ldr	r3, [r3, #4]
 8018d58:	2b00      	cmp	r3, #0
 8018d5a:	d013      	beq.n	8018d84 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8018d5c:	f7fc fc18 	bl	8015590 <HAL_GetTick>
 8018d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8018d62:	e008      	b.n	8018d76 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8018d64:	f7fc fc14 	bl	8015590 <HAL_GetTick>
 8018d68:	4602      	mov	r2, r0
 8018d6a:	693b      	ldr	r3, [r7, #16]
 8018d6c:	1ad3      	subs	r3, r2, r3
 8018d6e:	2b64      	cmp	r3, #100	; 0x64
 8018d70:	d901      	bls.n	8018d76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8018d72:	2303      	movs	r3, #3
 8018d74:	e229      	b.n	80191ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8018d76:	4b61      	ldr	r3, [pc, #388]	; (8018efc <HAL_RCC_OscConfig+0x280>)
 8018d78:	681b      	ldr	r3, [r3, #0]
 8018d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8018d7e:	2b00      	cmp	r3, #0
 8018d80:	d0f0      	beq.n	8018d64 <HAL_RCC_OscConfig+0xe8>
 8018d82:	e014      	b.n	8018dae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8018d84:	f7fc fc04 	bl	8015590 <HAL_GetTick>
 8018d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8018d8a:	e008      	b.n	8018d9e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8018d8c:	f7fc fc00 	bl	8015590 <HAL_GetTick>
 8018d90:	4602      	mov	r2, r0
 8018d92:	693b      	ldr	r3, [r7, #16]
 8018d94:	1ad3      	subs	r3, r2, r3
 8018d96:	2b64      	cmp	r3, #100	; 0x64
 8018d98:	d901      	bls.n	8018d9e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8018d9a:	2303      	movs	r3, #3
 8018d9c:	e215      	b.n	80191ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8018d9e:	4b57      	ldr	r3, [pc, #348]	; (8018efc <HAL_RCC_OscConfig+0x280>)
 8018da0:	681b      	ldr	r3, [r3, #0]
 8018da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8018da6:	2b00      	cmp	r3, #0
 8018da8:	d1f0      	bne.n	8018d8c <HAL_RCC_OscConfig+0x110>
 8018daa:	e000      	b.n	8018dae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8018dac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8018dae:	687b      	ldr	r3, [r7, #4]
 8018db0:	681b      	ldr	r3, [r3, #0]
 8018db2:	f003 0302 	and.w	r3, r3, #2
 8018db6:	2b00      	cmp	r3, #0
 8018db8:	d069      	beq.n	8018e8e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8018dba:	4b50      	ldr	r3, [pc, #320]	; (8018efc <HAL_RCC_OscConfig+0x280>)
 8018dbc:	689b      	ldr	r3, [r3, #8]
 8018dbe:	f003 030c 	and.w	r3, r3, #12
 8018dc2:	2b00      	cmp	r3, #0
 8018dc4:	d00b      	beq.n	8018dde <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8018dc6:	4b4d      	ldr	r3, [pc, #308]	; (8018efc <HAL_RCC_OscConfig+0x280>)
 8018dc8:	689b      	ldr	r3, [r3, #8]
 8018dca:	f003 030c 	and.w	r3, r3, #12
 8018dce:	2b08      	cmp	r3, #8
 8018dd0:	d11c      	bne.n	8018e0c <HAL_RCC_OscConfig+0x190>
 8018dd2:	4b4a      	ldr	r3, [pc, #296]	; (8018efc <HAL_RCC_OscConfig+0x280>)
 8018dd4:	685b      	ldr	r3, [r3, #4]
 8018dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8018dda:	2b00      	cmp	r3, #0
 8018ddc:	d116      	bne.n	8018e0c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8018dde:	4b47      	ldr	r3, [pc, #284]	; (8018efc <HAL_RCC_OscConfig+0x280>)
 8018de0:	681b      	ldr	r3, [r3, #0]
 8018de2:	f003 0302 	and.w	r3, r3, #2
 8018de6:	2b00      	cmp	r3, #0
 8018de8:	d005      	beq.n	8018df6 <HAL_RCC_OscConfig+0x17a>
 8018dea:	687b      	ldr	r3, [r7, #4]
 8018dec:	68db      	ldr	r3, [r3, #12]
 8018dee:	2b01      	cmp	r3, #1
 8018df0:	d001      	beq.n	8018df6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8018df2:	2301      	movs	r3, #1
 8018df4:	e1e9      	b.n	80191ca <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8018df6:	4b41      	ldr	r3, [pc, #260]	; (8018efc <HAL_RCC_OscConfig+0x280>)
 8018df8:	681b      	ldr	r3, [r3, #0]
 8018dfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8018dfe:	687b      	ldr	r3, [r7, #4]
 8018e00:	691b      	ldr	r3, [r3, #16]
 8018e02:	00db      	lsls	r3, r3, #3
 8018e04:	493d      	ldr	r1, [pc, #244]	; (8018efc <HAL_RCC_OscConfig+0x280>)
 8018e06:	4313      	orrs	r3, r2
 8018e08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8018e0a:	e040      	b.n	8018e8e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8018e0c:	687b      	ldr	r3, [r7, #4]
 8018e0e:	68db      	ldr	r3, [r3, #12]
 8018e10:	2b00      	cmp	r3, #0
 8018e12:	d023      	beq.n	8018e5c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8018e14:	4b39      	ldr	r3, [pc, #228]	; (8018efc <HAL_RCC_OscConfig+0x280>)
 8018e16:	681b      	ldr	r3, [r3, #0]
 8018e18:	4a38      	ldr	r2, [pc, #224]	; (8018efc <HAL_RCC_OscConfig+0x280>)
 8018e1a:	f043 0301 	orr.w	r3, r3, #1
 8018e1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8018e20:	f7fc fbb6 	bl	8015590 <HAL_GetTick>
 8018e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8018e26:	e008      	b.n	8018e3a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8018e28:	f7fc fbb2 	bl	8015590 <HAL_GetTick>
 8018e2c:	4602      	mov	r2, r0
 8018e2e:	693b      	ldr	r3, [r7, #16]
 8018e30:	1ad3      	subs	r3, r2, r3
 8018e32:	2b02      	cmp	r3, #2
 8018e34:	d901      	bls.n	8018e3a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8018e36:	2303      	movs	r3, #3
 8018e38:	e1c7      	b.n	80191ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8018e3a:	4b30      	ldr	r3, [pc, #192]	; (8018efc <HAL_RCC_OscConfig+0x280>)
 8018e3c:	681b      	ldr	r3, [r3, #0]
 8018e3e:	f003 0302 	and.w	r3, r3, #2
 8018e42:	2b00      	cmp	r3, #0
 8018e44:	d0f0      	beq.n	8018e28 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8018e46:	4b2d      	ldr	r3, [pc, #180]	; (8018efc <HAL_RCC_OscConfig+0x280>)
 8018e48:	681b      	ldr	r3, [r3, #0]
 8018e4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8018e4e:	687b      	ldr	r3, [r7, #4]
 8018e50:	691b      	ldr	r3, [r3, #16]
 8018e52:	00db      	lsls	r3, r3, #3
 8018e54:	4929      	ldr	r1, [pc, #164]	; (8018efc <HAL_RCC_OscConfig+0x280>)
 8018e56:	4313      	orrs	r3, r2
 8018e58:	600b      	str	r3, [r1, #0]
 8018e5a:	e018      	b.n	8018e8e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8018e5c:	4b27      	ldr	r3, [pc, #156]	; (8018efc <HAL_RCC_OscConfig+0x280>)
 8018e5e:	681b      	ldr	r3, [r3, #0]
 8018e60:	4a26      	ldr	r2, [pc, #152]	; (8018efc <HAL_RCC_OscConfig+0x280>)
 8018e62:	f023 0301 	bic.w	r3, r3, #1
 8018e66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8018e68:	f7fc fb92 	bl	8015590 <HAL_GetTick>
 8018e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8018e6e:	e008      	b.n	8018e82 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8018e70:	f7fc fb8e 	bl	8015590 <HAL_GetTick>
 8018e74:	4602      	mov	r2, r0
 8018e76:	693b      	ldr	r3, [r7, #16]
 8018e78:	1ad3      	subs	r3, r2, r3
 8018e7a:	2b02      	cmp	r3, #2
 8018e7c:	d901      	bls.n	8018e82 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8018e7e:	2303      	movs	r3, #3
 8018e80:	e1a3      	b.n	80191ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8018e82:	4b1e      	ldr	r3, [pc, #120]	; (8018efc <HAL_RCC_OscConfig+0x280>)
 8018e84:	681b      	ldr	r3, [r3, #0]
 8018e86:	f003 0302 	and.w	r3, r3, #2
 8018e8a:	2b00      	cmp	r3, #0
 8018e8c:	d1f0      	bne.n	8018e70 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8018e8e:	687b      	ldr	r3, [r7, #4]
 8018e90:	681b      	ldr	r3, [r3, #0]
 8018e92:	f003 0308 	and.w	r3, r3, #8
 8018e96:	2b00      	cmp	r3, #0
 8018e98:	d038      	beq.n	8018f0c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8018e9a:	687b      	ldr	r3, [r7, #4]
 8018e9c:	695b      	ldr	r3, [r3, #20]
 8018e9e:	2b00      	cmp	r3, #0
 8018ea0:	d019      	beq.n	8018ed6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8018ea2:	4b16      	ldr	r3, [pc, #88]	; (8018efc <HAL_RCC_OscConfig+0x280>)
 8018ea4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018ea6:	4a15      	ldr	r2, [pc, #84]	; (8018efc <HAL_RCC_OscConfig+0x280>)
 8018ea8:	f043 0301 	orr.w	r3, r3, #1
 8018eac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8018eae:	f7fc fb6f 	bl	8015590 <HAL_GetTick>
 8018eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8018eb4:	e008      	b.n	8018ec8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8018eb6:	f7fc fb6b 	bl	8015590 <HAL_GetTick>
 8018eba:	4602      	mov	r2, r0
 8018ebc:	693b      	ldr	r3, [r7, #16]
 8018ebe:	1ad3      	subs	r3, r2, r3
 8018ec0:	2b02      	cmp	r3, #2
 8018ec2:	d901      	bls.n	8018ec8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8018ec4:	2303      	movs	r3, #3
 8018ec6:	e180      	b.n	80191ca <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8018ec8:	4b0c      	ldr	r3, [pc, #48]	; (8018efc <HAL_RCC_OscConfig+0x280>)
 8018eca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018ecc:	f003 0302 	and.w	r3, r3, #2
 8018ed0:	2b00      	cmp	r3, #0
 8018ed2:	d0f0      	beq.n	8018eb6 <HAL_RCC_OscConfig+0x23a>
 8018ed4:	e01a      	b.n	8018f0c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8018ed6:	4b09      	ldr	r3, [pc, #36]	; (8018efc <HAL_RCC_OscConfig+0x280>)
 8018ed8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018eda:	4a08      	ldr	r2, [pc, #32]	; (8018efc <HAL_RCC_OscConfig+0x280>)
 8018edc:	f023 0301 	bic.w	r3, r3, #1
 8018ee0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8018ee2:	f7fc fb55 	bl	8015590 <HAL_GetTick>
 8018ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8018ee8:	e00a      	b.n	8018f00 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8018eea:	f7fc fb51 	bl	8015590 <HAL_GetTick>
 8018eee:	4602      	mov	r2, r0
 8018ef0:	693b      	ldr	r3, [r7, #16]
 8018ef2:	1ad3      	subs	r3, r2, r3
 8018ef4:	2b02      	cmp	r3, #2
 8018ef6:	d903      	bls.n	8018f00 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8018ef8:	2303      	movs	r3, #3
 8018efa:	e166      	b.n	80191ca <HAL_RCC_OscConfig+0x54e>
 8018efc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8018f00:	4b92      	ldr	r3, [pc, #584]	; (801914c <HAL_RCC_OscConfig+0x4d0>)
 8018f02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018f04:	f003 0302 	and.w	r3, r3, #2
 8018f08:	2b00      	cmp	r3, #0
 8018f0a:	d1ee      	bne.n	8018eea <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8018f0c:	687b      	ldr	r3, [r7, #4]
 8018f0e:	681b      	ldr	r3, [r3, #0]
 8018f10:	f003 0304 	and.w	r3, r3, #4
 8018f14:	2b00      	cmp	r3, #0
 8018f16:	f000 80a4 	beq.w	8019062 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8018f1a:	4b8c      	ldr	r3, [pc, #560]	; (801914c <HAL_RCC_OscConfig+0x4d0>)
 8018f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8018f22:	2b00      	cmp	r3, #0
 8018f24:	d10d      	bne.n	8018f42 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8018f26:	4b89      	ldr	r3, [pc, #548]	; (801914c <HAL_RCC_OscConfig+0x4d0>)
 8018f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018f2a:	4a88      	ldr	r2, [pc, #544]	; (801914c <HAL_RCC_OscConfig+0x4d0>)
 8018f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8018f30:	6413      	str	r3, [r2, #64]	; 0x40
 8018f32:	4b86      	ldr	r3, [pc, #536]	; (801914c <HAL_RCC_OscConfig+0x4d0>)
 8018f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8018f3a:	60bb      	str	r3, [r7, #8]
 8018f3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8018f3e:	2301      	movs	r3, #1
 8018f40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8018f42:	4b83      	ldr	r3, [pc, #524]	; (8019150 <HAL_RCC_OscConfig+0x4d4>)
 8018f44:	681b      	ldr	r3, [r3, #0]
 8018f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018f4a:	2b00      	cmp	r3, #0
 8018f4c:	d118      	bne.n	8018f80 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8018f4e:	4b80      	ldr	r3, [pc, #512]	; (8019150 <HAL_RCC_OscConfig+0x4d4>)
 8018f50:	681b      	ldr	r3, [r3, #0]
 8018f52:	4a7f      	ldr	r2, [pc, #508]	; (8019150 <HAL_RCC_OscConfig+0x4d4>)
 8018f54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8018f58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8018f5a:	f7fc fb19 	bl	8015590 <HAL_GetTick>
 8018f5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8018f60:	e008      	b.n	8018f74 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8018f62:	f7fc fb15 	bl	8015590 <HAL_GetTick>
 8018f66:	4602      	mov	r2, r0
 8018f68:	693b      	ldr	r3, [r7, #16]
 8018f6a:	1ad3      	subs	r3, r2, r3
 8018f6c:	2b64      	cmp	r3, #100	; 0x64
 8018f6e:	d901      	bls.n	8018f74 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8018f70:	2303      	movs	r3, #3
 8018f72:	e12a      	b.n	80191ca <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8018f74:	4b76      	ldr	r3, [pc, #472]	; (8019150 <HAL_RCC_OscConfig+0x4d4>)
 8018f76:	681b      	ldr	r3, [r3, #0]
 8018f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018f7c:	2b00      	cmp	r3, #0
 8018f7e:	d0f0      	beq.n	8018f62 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8018f80:	687b      	ldr	r3, [r7, #4]
 8018f82:	689b      	ldr	r3, [r3, #8]
 8018f84:	2b01      	cmp	r3, #1
 8018f86:	d106      	bne.n	8018f96 <HAL_RCC_OscConfig+0x31a>
 8018f88:	4b70      	ldr	r3, [pc, #448]	; (801914c <HAL_RCC_OscConfig+0x4d0>)
 8018f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018f8c:	4a6f      	ldr	r2, [pc, #444]	; (801914c <HAL_RCC_OscConfig+0x4d0>)
 8018f8e:	f043 0301 	orr.w	r3, r3, #1
 8018f92:	6713      	str	r3, [r2, #112]	; 0x70
 8018f94:	e02d      	b.n	8018ff2 <HAL_RCC_OscConfig+0x376>
 8018f96:	687b      	ldr	r3, [r7, #4]
 8018f98:	689b      	ldr	r3, [r3, #8]
 8018f9a:	2b00      	cmp	r3, #0
 8018f9c:	d10c      	bne.n	8018fb8 <HAL_RCC_OscConfig+0x33c>
 8018f9e:	4b6b      	ldr	r3, [pc, #428]	; (801914c <HAL_RCC_OscConfig+0x4d0>)
 8018fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018fa2:	4a6a      	ldr	r2, [pc, #424]	; (801914c <HAL_RCC_OscConfig+0x4d0>)
 8018fa4:	f023 0301 	bic.w	r3, r3, #1
 8018fa8:	6713      	str	r3, [r2, #112]	; 0x70
 8018faa:	4b68      	ldr	r3, [pc, #416]	; (801914c <HAL_RCC_OscConfig+0x4d0>)
 8018fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018fae:	4a67      	ldr	r2, [pc, #412]	; (801914c <HAL_RCC_OscConfig+0x4d0>)
 8018fb0:	f023 0304 	bic.w	r3, r3, #4
 8018fb4:	6713      	str	r3, [r2, #112]	; 0x70
 8018fb6:	e01c      	b.n	8018ff2 <HAL_RCC_OscConfig+0x376>
 8018fb8:	687b      	ldr	r3, [r7, #4]
 8018fba:	689b      	ldr	r3, [r3, #8]
 8018fbc:	2b05      	cmp	r3, #5
 8018fbe:	d10c      	bne.n	8018fda <HAL_RCC_OscConfig+0x35e>
 8018fc0:	4b62      	ldr	r3, [pc, #392]	; (801914c <HAL_RCC_OscConfig+0x4d0>)
 8018fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018fc4:	4a61      	ldr	r2, [pc, #388]	; (801914c <HAL_RCC_OscConfig+0x4d0>)
 8018fc6:	f043 0304 	orr.w	r3, r3, #4
 8018fca:	6713      	str	r3, [r2, #112]	; 0x70
 8018fcc:	4b5f      	ldr	r3, [pc, #380]	; (801914c <HAL_RCC_OscConfig+0x4d0>)
 8018fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018fd0:	4a5e      	ldr	r2, [pc, #376]	; (801914c <HAL_RCC_OscConfig+0x4d0>)
 8018fd2:	f043 0301 	orr.w	r3, r3, #1
 8018fd6:	6713      	str	r3, [r2, #112]	; 0x70
 8018fd8:	e00b      	b.n	8018ff2 <HAL_RCC_OscConfig+0x376>
 8018fda:	4b5c      	ldr	r3, [pc, #368]	; (801914c <HAL_RCC_OscConfig+0x4d0>)
 8018fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018fde:	4a5b      	ldr	r2, [pc, #364]	; (801914c <HAL_RCC_OscConfig+0x4d0>)
 8018fe0:	f023 0301 	bic.w	r3, r3, #1
 8018fe4:	6713      	str	r3, [r2, #112]	; 0x70
 8018fe6:	4b59      	ldr	r3, [pc, #356]	; (801914c <HAL_RCC_OscConfig+0x4d0>)
 8018fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018fea:	4a58      	ldr	r2, [pc, #352]	; (801914c <HAL_RCC_OscConfig+0x4d0>)
 8018fec:	f023 0304 	bic.w	r3, r3, #4
 8018ff0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8018ff2:	687b      	ldr	r3, [r7, #4]
 8018ff4:	689b      	ldr	r3, [r3, #8]
 8018ff6:	2b00      	cmp	r3, #0
 8018ff8:	d015      	beq.n	8019026 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8018ffa:	f7fc fac9 	bl	8015590 <HAL_GetTick>
 8018ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8019000:	e00a      	b.n	8019018 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8019002:	f7fc fac5 	bl	8015590 <HAL_GetTick>
 8019006:	4602      	mov	r2, r0
 8019008:	693b      	ldr	r3, [r7, #16]
 801900a:	1ad3      	subs	r3, r2, r3
 801900c:	f241 3288 	movw	r2, #5000	; 0x1388
 8019010:	4293      	cmp	r3, r2
 8019012:	d901      	bls.n	8019018 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8019014:	2303      	movs	r3, #3
 8019016:	e0d8      	b.n	80191ca <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8019018:	4b4c      	ldr	r3, [pc, #304]	; (801914c <HAL_RCC_OscConfig+0x4d0>)
 801901a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801901c:	f003 0302 	and.w	r3, r3, #2
 8019020:	2b00      	cmp	r3, #0
 8019022:	d0ee      	beq.n	8019002 <HAL_RCC_OscConfig+0x386>
 8019024:	e014      	b.n	8019050 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8019026:	f7fc fab3 	bl	8015590 <HAL_GetTick>
 801902a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801902c:	e00a      	b.n	8019044 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801902e:	f7fc faaf 	bl	8015590 <HAL_GetTick>
 8019032:	4602      	mov	r2, r0
 8019034:	693b      	ldr	r3, [r7, #16]
 8019036:	1ad3      	subs	r3, r2, r3
 8019038:	f241 3288 	movw	r2, #5000	; 0x1388
 801903c:	4293      	cmp	r3, r2
 801903e:	d901      	bls.n	8019044 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8019040:	2303      	movs	r3, #3
 8019042:	e0c2      	b.n	80191ca <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8019044:	4b41      	ldr	r3, [pc, #260]	; (801914c <HAL_RCC_OscConfig+0x4d0>)
 8019046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019048:	f003 0302 	and.w	r3, r3, #2
 801904c:	2b00      	cmp	r3, #0
 801904e:	d1ee      	bne.n	801902e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8019050:	7dfb      	ldrb	r3, [r7, #23]
 8019052:	2b01      	cmp	r3, #1
 8019054:	d105      	bne.n	8019062 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8019056:	4b3d      	ldr	r3, [pc, #244]	; (801914c <HAL_RCC_OscConfig+0x4d0>)
 8019058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801905a:	4a3c      	ldr	r2, [pc, #240]	; (801914c <HAL_RCC_OscConfig+0x4d0>)
 801905c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8019060:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8019062:	687b      	ldr	r3, [r7, #4]
 8019064:	699b      	ldr	r3, [r3, #24]
 8019066:	2b00      	cmp	r3, #0
 8019068:	f000 80ae 	beq.w	80191c8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801906c:	4b37      	ldr	r3, [pc, #220]	; (801914c <HAL_RCC_OscConfig+0x4d0>)
 801906e:	689b      	ldr	r3, [r3, #8]
 8019070:	f003 030c 	and.w	r3, r3, #12
 8019074:	2b08      	cmp	r3, #8
 8019076:	d06d      	beq.n	8019154 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8019078:	687b      	ldr	r3, [r7, #4]
 801907a:	699b      	ldr	r3, [r3, #24]
 801907c:	2b02      	cmp	r3, #2
 801907e:	d14b      	bne.n	8019118 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8019080:	4b32      	ldr	r3, [pc, #200]	; (801914c <HAL_RCC_OscConfig+0x4d0>)
 8019082:	681b      	ldr	r3, [r3, #0]
 8019084:	4a31      	ldr	r2, [pc, #196]	; (801914c <HAL_RCC_OscConfig+0x4d0>)
 8019086:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801908a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801908c:	f7fc fa80 	bl	8015590 <HAL_GetTick>
 8019090:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8019092:	e008      	b.n	80190a6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8019094:	f7fc fa7c 	bl	8015590 <HAL_GetTick>
 8019098:	4602      	mov	r2, r0
 801909a:	693b      	ldr	r3, [r7, #16]
 801909c:	1ad3      	subs	r3, r2, r3
 801909e:	2b02      	cmp	r3, #2
 80190a0:	d901      	bls.n	80190a6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80190a2:	2303      	movs	r3, #3
 80190a4:	e091      	b.n	80191ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80190a6:	4b29      	ldr	r3, [pc, #164]	; (801914c <HAL_RCC_OscConfig+0x4d0>)
 80190a8:	681b      	ldr	r3, [r3, #0]
 80190aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80190ae:	2b00      	cmp	r3, #0
 80190b0:	d1f0      	bne.n	8019094 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80190b2:	687b      	ldr	r3, [r7, #4]
 80190b4:	69da      	ldr	r2, [r3, #28]
 80190b6:	687b      	ldr	r3, [r7, #4]
 80190b8:	6a1b      	ldr	r3, [r3, #32]
 80190ba:	431a      	orrs	r2, r3
 80190bc:	687b      	ldr	r3, [r7, #4]
 80190be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80190c0:	019b      	lsls	r3, r3, #6
 80190c2:	431a      	orrs	r2, r3
 80190c4:	687b      	ldr	r3, [r7, #4]
 80190c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80190c8:	085b      	lsrs	r3, r3, #1
 80190ca:	3b01      	subs	r3, #1
 80190cc:	041b      	lsls	r3, r3, #16
 80190ce:	431a      	orrs	r2, r3
 80190d0:	687b      	ldr	r3, [r7, #4]
 80190d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80190d4:	061b      	lsls	r3, r3, #24
 80190d6:	431a      	orrs	r2, r3
 80190d8:	687b      	ldr	r3, [r7, #4]
 80190da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80190dc:	071b      	lsls	r3, r3, #28
 80190de:	491b      	ldr	r1, [pc, #108]	; (801914c <HAL_RCC_OscConfig+0x4d0>)
 80190e0:	4313      	orrs	r3, r2
 80190e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80190e4:	4b19      	ldr	r3, [pc, #100]	; (801914c <HAL_RCC_OscConfig+0x4d0>)
 80190e6:	681b      	ldr	r3, [r3, #0]
 80190e8:	4a18      	ldr	r2, [pc, #96]	; (801914c <HAL_RCC_OscConfig+0x4d0>)
 80190ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80190ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80190f0:	f7fc fa4e 	bl	8015590 <HAL_GetTick>
 80190f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80190f6:	e008      	b.n	801910a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80190f8:	f7fc fa4a 	bl	8015590 <HAL_GetTick>
 80190fc:	4602      	mov	r2, r0
 80190fe:	693b      	ldr	r3, [r7, #16]
 8019100:	1ad3      	subs	r3, r2, r3
 8019102:	2b02      	cmp	r3, #2
 8019104:	d901      	bls.n	801910a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8019106:	2303      	movs	r3, #3
 8019108:	e05f      	b.n	80191ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801910a:	4b10      	ldr	r3, [pc, #64]	; (801914c <HAL_RCC_OscConfig+0x4d0>)
 801910c:	681b      	ldr	r3, [r3, #0]
 801910e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019112:	2b00      	cmp	r3, #0
 8019114:	d0f0      	beq.n	80190f8 <HAL_RCC_OscConfig+0x47c>
 8019116:	e057      	b.n	80191c8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8019118:	4b0c      	ldr	r3, [pc, #48]	; (801914c <HAL_RCC_OscConfig+0x4d0>)
 801911a:	681b      	ldr	r3, [r3, #0]
 801911c:	4a0b      	ldr	r2, [pc, #44]	; (801914c <HAL_RCC_OscConfig+0x4d0>)
 801911e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8019122:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8019124:	f7fc fa34 	bl	8015590 <HAL_GetTick>
 8019128:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801912a:	e008      	b.n	801913e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801912c:	f7fc fa30 	bl	8015590 <HAL_GetTick>
 8019130:	4602      	mov	r2, r0
 8019132:	693b      	ldr	r3, [r7, #16]
 8019134:	1ad3      	subs	r3, r2, r3
 8019136:	2b02      	cmp	r3, #2
 8019138:	d901      	bls.n	801913e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 801913a:	2303      	movs	r3, #3
 801913c:	e045      	b.n	80191ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801913e:	4b03      	ldr	r3, [pc, #12]	; (801914c <HAL_RCC_OscConfig+0x4d0>)
 8019140:	681b      	ldr	r3, [r3, #0]
 8019142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019146:	2b00      	cmp	r3, #0
 8019148:	d1f0      	bne.n	801912c <HAL_RCC_OscConfig+0x4b0>
 801914a:	e03d      	b.n	80191c8 <HAL_RCC_OscConfig+0x54c>
 801914c:	40023800 	.word	0x40023800
 8019150:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8019154:	4b1f      	ldr	r3, [pc, #124]	; (80191d4 <HAL_RCC_OscConfig+0x558>)
 8019156:	685b      	ldr	r3, [r3, #4]
 8019158:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801915a:	687b      	ldr	r3, [r7, #4]
 801915c:	699b      	ldr	r3, [r3, #24]
 801915e:	2b01      	cmp	r3, #1
 8019160:	d030      	beq.n	80191c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8019162:	68fb      	ldr	r3, [r7, #12]
 8019164:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8019168:	687b      	ldr	r3, [r7, #4]
 801916a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801916c:	429a      	cmp	r2, r3
 801916e:	d129      	bne.n	80191c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8019170:	68fb      	ldr	r3, [r7, #12]
 8019172:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8019176:	687b      	ldr	r3, [r7, #4]
 8019178:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801917a:	429a      	cmp	r2, r3
 801917c:	d122      	bne.n	80191c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 801917e:	68fa      	ldr	r2, [r7, #12]
 8019180:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8019184:	4013      	ands	r3, r2
 8019186:	687a      	ldr	r2, [r7, #4]
 8019188:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801918a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801918c:	4293      	cmp	r3, r2
 801918e:	d119      	bne.n	80191c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8019190:	68fb      	ldr	r3, [r7, #12]
 8019192:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8019196:	687b      	ldr	r3, [r7, #4]
 8019198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801919a:	085b      	lsrs	r3, r3, #1
 801919c:	3b01      	subs	r3, #1
 801919e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80191a0:	429a      	cmp	r2, r3
 80191a2:	d10f      	bne.n	80191c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80191a4:	68fb      	ldr	r3, [r7, #12]
 80191a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80191aa:	687b      	ldr	r3, [r7, #4]
 80191ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80191ae:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80191b0:	429a      	cmp	r2, r3
 80191b2:	d107      	bne.n	80191c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80191b4:	68fb      	ldr	r3, [r7, #12]
 80191b6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80191ba:	687b      	ldr	r3, [r7, #4]
 80191bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80191be:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80191c0:	429a      	cmp	r2, r3
 80191c2:	d001      	beq.n	80191c8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80191c4:	2301      	movs	r3, #1
 80191c6:	e000      	b.n	80191ca <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80191c8:	2300      	movs	r3, #0
}
 80191ca:	4618      	mov	r0, r3
 80191cc:	3718      	adds	r7, #24
 80191ce:	46bd      	mov	sp, r7
 80191d0:	bd80      	pop	{r7, pc}
 80191d2:	bf00      	nop
 80191d4:	40023800 	.word	0x40023800

080191d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80191d8:	b580      	push	{r7, lr}
 80191da:	b084      	sub	sp, #16
 80191dc:	af00      	add	r7, sp, #0
 80191de:	6078      	str	r0, [r7, #4]
 80191e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80191e2:	2300      	movs	r3, #0
 80191e4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80191e6:	687b      	ldr	r3, [r7, #4]
 80191e8:	2b00      	cmp	r3, #0
 80191ea:	d101      	bne.n	80191f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80191ec:	2301      	movs	r3, #1
 80191ee:	e0d0      	b.n	8019392 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80191f0:	4b6a      	ldr	r3, [pc, #424]	; (801939c <HAL_RCC_ClockConfig+0x1c4>)
 80191f2:	681b      	ldr	r3, [r3, #0]
 80191f4:	f003 030f 	and.w	r3, r3, #15
 80191f8:	683a      	ldr	r2, [r7, #0]
 80191fa:	429a      	cmp	r2, r3
 80191fc:	d910      	bls.n	8019220 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80191fe:	4b67      	ldr	r3, [pc, #412]	; (801939c <HAL_RCC_ClockConfig+0x1c4>)
 8019200:	681b      	ldr	r3, [r3, #0]
 8019202:	f023 020f 	bic.w	r2, r3, #15
 8019206:	4965      	ldr	r1, [pc, #404]	; (801939c <HAL_RCC_ClockConfig+0x1c4>)
 8019208:	683b      	ldr	r3, [r7, #0]
 801920a:	4313      	orrs	r3, r2
 801920c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801920e:	4b63      	ldr	r3, [pc, #396]	; (801939c <HAL_RCC_ClockConfig+0x1c4>)
 8019210:	681b      	ldr	r3, [r3, #0]
 8019212:	f003 030f 	and.w	r3, r3, #15
 8019216:	683a      	ldr	r2, [r7, #0]
 8019218:	429a      	cmp	r2, r3
 801921a:	d001      	beq.n	8019220 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 801921c:	2301      	movs	r3, #1
 801921e:	e0b8      	b.n	8019392 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8019220:	687b      	ldr	r3, [r7, #4]
 8019222:	681b      	ldr	r3, [r3, #0]
 8019224:	f003 0302 	and.w	r3, r3, #2
 8019228:	2b00      	cmp	r3, #0
 801922a:	d020      	beq.n	801926e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801922c:	687b      	ldr	r3, [r7, #4]
 801922e:	681b      	ldr	r3, [r3, #0]
 8019230:	f003 0304 	and.w	r3, r3, #4
 8019234:	2b00      	cmp	r3, #0
 8019236:	d005      	beq.n	8019244 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8019238:	4b59      	ldr	r3, [pc, #356]	; (80193a0 <HAL_RCC_ClockConfig+0x1c8>)
 801923a:	689b      	ldr	r3, [r3, #8]
 801923c:	4a58      	ldr	r2, [pc, #352]	; (80193a0 <HAL_RCC_ClockConfig+0x1c8>)
 801923e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8019242:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8019244:	687b      	ldr	r3, [r7, #4]
 8019246:	681b      	ldr	r3, [r3, #0]
 8019248:	f003 0308 	and.w	r3, r3, #8
 801924c:	2b00      	cmp	r3, #0
 801924e:	d005      	beq.n	801925c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8019250:	4b53      	ldr	r3, [pc, #332]	; (80193a0 <HAL_RCC_ClockConfig+0x1c8>)
 8019252:	689b      	ldr	r3, [r3, #8]
 8019254:	4a52      	ldr	r2, [pc, #328]	; (80193a0 <HAL_RCC_ClockConfig+0x1c8>)
 8019256:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801925a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801925c:	4b50      	ldr	r3, [pc, #320]	; (80193a0 <HAL_RCC_ClockConfig+0x1c8>)
 801925e:	689b      	ldr	r3, [r3, #8]
 8019260:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8019264:	687b      	ldr	r3, [r7, #4]
 8019266:	689b      	ldr	r3, [r3, #8]
 8019268:	494d      	ldr	r1, [pc, #308]	; (80193a0 <HAL_RCC_ClockConfig+0x1c8>)
 801926a:	4313      	orrs	r3, r2
 801926c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801926e:	687b      	ldr	r3, [r7, #4]
 8019270:	681b      	ldr	r3, [r3, #0]
 8019272:	f003 0301 	and.w	r3, r3, #1
 8019276:	2b00      	cmp	r3, #0
 8019278:	d040      	beq.n	80192fc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801927a:	687b      	ldr	r3, [r7, #4]
 801927c:	685b      	ldr	r3, [r3, #4]
 801927e:	2b01      	cmp	r3, #1
 8019280:	d107      	bne.n	8019292 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8019282:	4b47      	ldr	r3, [pc, #284]	; (80193a0 <HAL_RCC_ClockConfig+0x1c8>)
 8019284:	681b      	ldr	r3, [r3, #0]
 8019286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801928a:	2b00      	cmp	r3, #0
 801928c:	d115      	bne.n	80192ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 801928e:	2301      	movs	r3, #1
 8019290:	e07f      	b.n	8019392 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8019292:	687b      	ldr	r3, [r7, #4]
 8019294:	685b      	ldr	r3, [r3, #4]
 8019296:	2b02      	cmp	r3, #2
 8019298:	d107      	bne.n	80192aa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801929a:	4b41      	ldr	r3, [pc, #260]	; (80193a0 <HAL_RCC_ClockConfig+0x1c8>)
 801929c:	681b      	ldr	r3, [r3, #0]
 801929e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80192a2:	2b00      	cmp	r3, #0
 80192a4:	d109      	bne.n	80192ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80192a6:	2301      	movs	r3, #1
 80192a8:	e073      	b.n	8019392 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80192aa:	4b3d      	ldr	r3, [pc, #244]	; (80193a0 <HAL_RCC_ClockConfig+0x1c8>)
 80192ac:	681b      	ldr	r3, [r3, #0]
 80192ae:	f003 0302 	and.w	r3, r3, #2
 80192b2:	2b00      	cmp	r3, #0
 80192b4:	d101      	bne.n	80192ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80192b6:	2301      	movs	r3, #1
 80192b8:	e06b      	b.n	8019392 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80192ba:	4b39      	ldr	r3, [pc, #228]	; (80193a0 <HAL_RCC_ClockConfig+0x1c8>)
 80192bc:	689b      	ldr	r3, [r3, #8]
 80192be:	f023 0203 	bic.w	r2, r3, #3
 80192c2:	687b      	ldr	r3, [r7, #4]
 80192c4:	685b      	ldr	r3, [r3, #4]
 80192c6:	4936      	ldr	r1, [pc, #216]	; (80193a0 <HAL_RCC_ClockConfig+0x1c8>)
 80192c8:	4313      	orrs	r3, r2
 80192ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80192cc:	f7fc f960 	bl	8015590 <HAL_GetTick>
 80192d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80192d2:	e00a      	b.n	80192ea <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80192d4:	f7fc f95c 	bl	8015590 <HAL_GetTick>
 80192d8:	4602      	mov	r2, r0
 80192da:	68fb      	ldr	r3, [r7, #12]
 80192dc:	1ad3      	subs	r3, r2, r3
 80192de:	f241 3288 	movw	r2, #5000	; 0x1388
 80192e2:	4293      	cmp	r3, r2
 80192e4:	d901      	bls.n	80192ea <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80192e6:	2303      	movs	r3, #3
 80192e8:	e053      	b.n	8019392 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80192ea:	4b2d      	ldr	r3, [pc, #180]	; (80193a0 <HAL_RCC_ClockConfig+0x1c8>)
 80192ec:	689b      	ldr	r3, [r3, #8]
 80192ee:	f003 020c 	and.w	r2, r3, #12
 80192f2:	687b      	ldr	r3, [r7, #4]
 80192f4:	685b      	ldr	r3, [r3, #4]
 80192f6:	009b      	lsls	r3, r3, #2
 80192f8:	429a      	cmp	r2, r3
 80192fa:	d1eb      	bne.n	80192d4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80192fc:	4b27      	ldr	r3, [pc, #156]	; (801939c <HAL_RCC_ClockConfig+0x1c4>)
 80192fe:	681b      	ldr	r3, [r3, #0]
 8019300:	f003 030f 	and.w	r3, r3, #15
 8019304:	683a      	ldr	r2, [r7, #0]
 8019306:	429a      	cmp	r2, r3
 8019308:	d210      	bcs.n	801932c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801930a:	4b24      	ldr	r3, [pc, #144]	; (801939c <HAL_RCC_ClockConfig+0x1c4>)
 801930c:	681b      	ldr	r3, [r3, #0]
 801930e:	f023 020f 	bic.w	r2, r3, #15
 8019312:	4922      	ldr	r1, [pc, #136]	; (801939c <HAL_RCC_ClockConfig+0x1c4>)
 8019314:	683b      	ldr	r3, [r7, #0]
 8019316:	4313      	orrs	r3, r2
 8019318:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801931a:	4b20      	ldr	r3, [pc, #128]	; (801939c <HAL_RCC_ClockConfig+0x1c4>)
 801931c:	681b      	ldr	r3, [r3, #0]
 801931e:	f003 030f 	and.w	r3, r3, #15
 8019322:	683a      	ldr	r2, [r7, #0]
 8019324:	429a      	cmp	r2, r3
 8019326:	d001      	beq.n	801932c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8019328:	2301      	movs	r3, #1
 801932a:	e032      	b.n	8019392 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801932c:	687b      	ldr	r3, [r7, #4]
 801932e:	681b      	ldr	r3, [r3, #0]
 8019330:	f003 0304 	and.w	r3, r3, #4
 8019334:	2b00      	cmp	r3, #0
 8019336:	d008      	beq.n	801934a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8019338:	4b19      	ldr	r3, [pc, #100]	; (80193a0 <HAL_RCC_ClockConfig+0x1c8>)
 801933a:	689b      	ldr	r3, [r3, #8]
 801933c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8019340:	687b      	ldr	r3, [r7, #4]
 8019342:	68db      	ldr	r3, [r3, #12]
 8019344:	4916      	ldr	r1, [pc, #88]	; (80193a0 <HAL_RCC_ClockConfig+0x1c8>)
 8019346:	4313      	orrs	r3, r2
 8019348:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801934a:	687b      	ldr	r3, [r7, #4]
 801934c:	681b      	ldr	r3, [r3, #0]
 801934e:	f003 0308 	and.w	r3, r3, #8
 8019352:	2b00      	cmp	r3, #0
 8019354:	d009      	beq.n	801936a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8019356:	4b12      	ldr	r3, [pc, #72]	; (80193a0 <HAL_RCC_ClockConfig+0x1c8>)
 8019358:	689b      	ldr	r3, [r3, #8]
 801935a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801935e:	687b      	ldr	r3, [r7, #4]
 8019360:	691b      	ldr	r3, [r3, #16]
 8019362:	00db      	lsls	r3, r3, #3
 8019364:	490e      	ldr	r1, [pc, #56]	; (80193a0 <HAL_RCC_ClockConfig+0x1c8>)
 8019366:	4313      	orrs	r3, r2
 8019368:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 801936a:	f000 f821 	bl	80193b0 <HAL_RCC_GetSysClockFreq>
 801936e:	4602      	mov	r2, r0
 8019370:	4b0b      	ldr	r3, [pc, #44]	; (80193a0 <HAL_RCC_ClockConfig+0x1c8>)
 8019372:	689b      	ldr	r3, [r3, #8]
 8019374:	091b      	lsrs	r3, r3, #4
 8019376:	f003 030f 	and.w	r3, r3, #15
 801937a:	490a      	ldr	r1, [pc, #40]	; (80193a4 <HAL_RCC_ClockConfig+0x1cc>)
 801937c:	5ccb      	ldrb	r3, [r1, r3]
 801937e:	fa22 f303 	lsr.w	r3, r2, r3
 8019382:	4a09      	ldr	r2, [pc, #36]	; (80193a8 <HAL_RCC_ClockConfig+0x1d0>)
 8019384:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8019386:	4b09      	ldr	r3, [pc, #36]	; (80193ac <HAL_RCC_ClockConfig+0x1d4>)
 8019388:	681b      	ldr	r3, [r3, #0]
 801938a:	4618      	mov	r0, r3
 801938c:	f7fc f8bc 	bl	8015508 <HAL_InitTick>

  return HAL_OK;
 8019390:	2300      	movs	r3, #0
}
 8019392:	4618      	mov	r0, r3
 8019394:	3710      	adds	r7, #16
 8019396:	46bd      	mov	sp, r7
 8019398:	bd80      	pop	{r7, pc}
 801939a:	bf00      	nop
 801939c:	40023c00 	.word	0x40023c00
 80193a0:	40023800 	.word	0x40023800
 80193a4:	08028efc 	.word	0x08028efc
 80193a8:	2000011c 	.word	0x2000011c
 80193ac:	20000120 	.word	0x20000120

080193b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80193b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80193b4:	b090      	sub	sp, #64	; 0x40
 80193b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80193b8:	2300      	movs	r3, #0
 80193ba:	637b      	str	r3, [r7, #52]	; 0x34
 80193bc:	2300      	movs	r3, #0
 80193be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80193c0:	2300      	movs	r3, #0
 80193c2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80193c4:	2300      	movs	r3, #0
 80193c6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80193c8:	4b59      	ldr	r3, [pc, #356]	; (8019530 <HAL_RCC_GetSysClockFreq+0x180>)
 80193ca:	689b      	ldr	r3, [r3, #8]
 80193cc:	f003 030c 	and.w	r3, r3, #12
 80193d0:	2b08      	cmp	r3, #8
 80193d2:	d00d      	beq.n	80193f0 <HAL_RCC_GetSysClockFreq+0x40>
 80193d4:	2b08      	cmp	r3, #8
 80193d6:	f200 80a1 	bhi.w	801951c <HAL_RCC_GetSysClockFreq+0x16c>
 80193da:	2b00      	cmp	r3, #0
 80193dc:	d002      	beq.n	80193e4 <HAL_RCC_GetSysClockFreq+0x34>
 80193de:	2b04      	cmp	r3, #4
 80193e0:	d003      	beq.n	80193ea <HAL_RCC_GetSysClockFreq+0x3a>
 80193e2:	e09b      	b.n	801951c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80193e4:	4b53      	ldr	r3, [pc, #332]	; (8019534 <HAL_RCC_GetSysClockFreq+0x184>)
 80193e6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80193e8:	e09b      	b.n	8019522 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80193ea:	4b53      	ldr	r3, [pc, #332]	; (8019538 <HAL_RCC_GetSysClockFreq+0x188>)
 80193ec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80193ee:	e098      	b.n	8019522 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80193f0:	4b4f      	ldr	r3, [pc, #316]	; (8019530 <HAL_RCC_GetSysClockFreq+0x180>)
 80193f2:	685b      	ldr	r3, [r3, #4]
 80193f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80193f8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80193fa:	4b4d      	ldr	r3, [pc, #308]	; (8019530 <HAL_RCC_GetSysClockFreq+0x180>)
 80193fc:	685b      	ldr	r3, [r3, #4]
 80193fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8019402:	2b00      	cmp	r3, #0
 8019404:	d028      	beq.n	8019458 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8019406:	4b4a      	ldr	r3, [pc, #296]	; (8019530 <HAL_RCC_GetSysClockFreq+0x180>)
 8019408:	685b      	ldr	r3, [r3, #4]
 801940a:	099b      	lsrs	r3, r3, #6
 801940c:	2200      	movs	r2, #0
 801940e:	623b      	str	r3, [r7, #32]
 8019410:	627a      	str	r2, [r7, #36]	; 0x24
 8019412:	6a3b      	ldr	r3, [r7, #32]
 8019414:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8019418:	2100      	movs	r1, #0
 801941a:	4b47      	ldr	r3, [pc, #284]	; (8019538 <HAL_RCC_GetSysClockFreq+0x188>)
 801941c:	fb03 f201 	mul.w	r2, r3, r1
 8019420:	2300      	movs	r3, #0
 8019422:	fb00 f303 	mul.w	r3, r0, r3
 8019426:	4413      	add	r3, r2
 8019428:	4a43      	ldr	r2, [pc, #268]	; (8019538 <HAL_RCC_GetSysClockFreq+0x188>)
 801942a:	fba0 1202 	umull	r1, r2, r0, r2
 801942e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8019430:	460a      	mov	r2, r1
 8019432:	62ba      	str	r2, [r7, #40]	; 0x28
 8019434:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019436:	4413      	add	r3, r2
 8019438:	62fb      	str	r3, [r7, #44]	; 0x2c
 801943a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801943c:	2200      	movs	r2, #0
 801943e:	61bb      	str	r3, [r7, #24]
 8019440:	61fa      	str	r2, [r7, #28]
 8019442:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8019446:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801944a:	f7e6 ff61 	bl	8000310 <__aeabi_uldivmod>
 801944e:	4602      	mov	r2, r0
 8019450:	460b      	mov	r3, r1
 8019452:	4613      	mov	r3, r2
 8019454:	63fb      	str	r3, [r7, #60]	; 0x3c
 8019456:	e053      	b.n	8019500 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8019458:	4b35      	ldr	r3, [pc, #212]	; (8019530 <HAL_RCC_GetSysClockFreq+0x180>)
 801945a:	685b      	ldr	r3, [r3, #4]
 801945c:	099b      	lsrs	r3, r3, #6
 801945e:	2200      	movs	r2, #0
 8019460:	613b      	str	r3, [r7, #16]
 8019462:	617a      	str	r2, [r7, #20]
 8019464:	693b      	ldr	r3, [r7, #16]
 8019466:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 801946a:	f04f 0b00 	mov.w	fp, #0
 801946e:	4652      	mov	r2, sl
 8019470:	465b      	mov	r3, fp
 8019472:	f04f 0000 	mov.w	r0, #0
 8019476:	f04f 0100 	mov.w	r1, #0
 801947a:	0159      	lsls	r1, r3, #5
 801947c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8019480:	0150      	lsls	r0, r2, #5
 8019482:	4602      	mov	r2, r0
 8019484:	460b      	mov	r3, r1
 8019486:	ebb2 080a 	subs.w	r8, r2, sl
 801948a:	eb63 090b 	sbc.w	r9, r3, fp
 801948e:	f04f 0200 	mov.w	r2, #0
 8019492:	f04f 0300 	mov.w	r3, #0
 8019496:	ea4f 1389 	mov.w	r3, r9, lsl #6
 801949a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 801949e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80194a2:	ebb2 0408 	subs.w	r4, r2, r8
 80194a6:	eb63 0509 	sbc.w	r5, r3, r9
 80194aa:	f04f 0200 	mov.w	r2, #0
 80194ae:	f04f 0300 	mov.w	r3, #0
 80194b2:	00eb      	lsls	r3, r5, #3
 80194b4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80194b8:	00e2      	lsls	r2, r4, #3
 80194ba:	4614      	mov	r4, r2
 80194bc:	461d      	mov	r5, r3
 80194be:	eb14 030a 	adds.w	r3, r4, sl
 80194c2:	603b      	str	r3, [r7, #0]
 80194c4:	eb45 030b 	adc.w	r3, r5, fp
 80194c8:	607b      	str	r3, [r7, #4]
 80194ca:	f04f 0200 	mov.w	r2, #0
 80194ce:	f04f 0300 	mov.w	r3, #0
 80194d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80194d6:	4629      	mov	r1, r5
 80194d8:	028b      	lsls	r3, r1, #10
 80194da:	4621      	mov	r1, r4
 80194dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80194e0:	4621      	mov	r1, r4
 80194e2:	028a      	lsls	r2, r1, #10
 80194e4:	4610      	mov	r0, r2
 80194e6:	4619      	mov	r1, r3
 80194e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80194ea:	2200      	movs	r2, #0
 80194ec:	60bb      	str	r3, [r7, #8]
 80194ee:	60fa      	str	r2, [r7, #12]
 80194f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80194f4:	f7e6 ff0c 	bl	8000310 <__aeabi_uldivmod>
 80194f8:	4602      	mov	r2, r0
 80194fa:	460b      	mov	r3, r1
 80194fc:	4613      	mov	r3, r2
 80194fe:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8019500:	4b0b      	ldr	r3, [pc, #44]	; (8019530 <HAL_RCC_GetSysClockFreq+0x180>)
 8019502:	685b      	ldr	r3, [r3, #4]
 8019504:	0c1b      	lsrs	r3, r3, #16
 8019506:	f003 0303 	and.w	r3, r3, #3
 801950a:	3301      	adds	r3, #1
 801950c:	005b      	lsls	r3, r3, #1
 801950e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8019510:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8019512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019514:	fbb2 f3f3 	udiv	r3, r2, r3
 8019518:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 801951a:	e002      	b.n	8019522 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 801951c:	4b05      	ldr	r3, [pc, #20]	; (8019534 <HAL_RCC_GetSysClockFreq+0x184>)
 801951e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8019520:	bf00      	nop
    }
  }
  return sysclockfreq;
 8019522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8019524:	4618      	mov	r0, r3
 8019526:	3740      	adds	r7, #64	; 0x40
 8019528:	46bd      	mov	sp, r7
 801952a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801952e:	bf00      	nop
 8019530:	40023800 	.word	0x40023800
 8019534:	00f42400 	.word	0x00f42400
 8019538:	00b71b00 	.word	0x00b71b00

0801953c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801953c:	b480      	push	{r7}
 801953e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8019540:	4b03      	ldr	r3, [pc, #12]	; (8019550 <HAL_RCC_GetHCLKFreq+0x14>)
 8019542:	681b      	ldr	r3, [r3, #0]
}
 8019544:	4618      	mov	r0, r3
 8019546:	46bd      	mov	sp, r7
 8019548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801954c:	4770      	bx	lr
 801954e:	bf00      	nop
 8019550:	2000011c 	.word	0x2000011c

08019554 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8019554:	b580      	push	{r7, lr}
 8019556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8019558:	f7ff fff0 	bl	801953c <HAL_RCC_GetHCLKFreq>
 801955c:	4602      	mov	r2, r0
 801955e:	4b05      	ldr	r3, [pc, #20]	; (8019574 <HAL_RCC_GetPCLK1Freq+0x20>)
 8019560:	689b      	ldr	r3, [r3, #8]
 8019562:	0a9b      	lsrs	r3, r3, #10
 8019564:	f003 0307 	and.w	r3, r3, #7
 8019568:	4903      	ldr	r1, [pc, #12]	; (8019578 <HAL_RCC_GetPCLK1Freq+0x24>)
 801956a:	5ccb      	ldrb	r3, [r1, r3]
 801956c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8019570:	4618      	mov	r0, r3
 8019572:	bd80      	pop	{r7, pc}
 8019574:	40023800 	.word	0x40023800
 8019578:	08028f0c 	.word	0x08028f0c

0801957c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801957c:	b580      	push	{r7, lr}
 801957e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8019580:	f7ff ffdc 	bl	801953c <HAL_RCC_GetHCLKFreq>
 8019584:	4602      	mov	r2, r0
 8019586:	4b05      	ldr	r3, [pc, #20]	; (801959c <HAL_RCC_GetPCLK2Freq+0x20>)
 8019588:	689b      	ldr	r3, [r3, #8]
 801958a:	0b5b      	lsrs	r3, r3, #13
 801958c:	f003 0307 	and.w	r3, r3, #7
 8019590:	4903      	ldr	r1, [pc, #12]	; (80195a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8019592:	5ccb      	ldrb	r3, [r1, r3]
 8019594:	fa22 f303 	lsr.w	r3, r2, r3
}
 8019598:	4618      	mov	r0, r3
 801959a:	bd80      	pop	{r7, pc}
 801959c:	40023800 	.word	0x40023800
 80195a0:	08028f0c 	.word	0x08028f0c

080195a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80195a4:	b580      	push	{r7, lr}
 80195a6:	b088      	sub	sp, #32
 80195a8:	af00      	add	r7, sp, #0
 80195aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80195ac:	2300      	movs	r3, #0
 80195ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80195b0:	2300      	movs	r3, #0
 80195b2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80195b4:	2300      	movs	r3, #0
 80195b6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80195b8:	2300      	movs	r3, #0
 80195ba:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80195bc:	2300      	movs	r3, #0
 80195be:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80195c0:	687b      	ldr	r3, [r7, #4]
 80195c2:	681b      	ldr	r3, [r3, #0]
 80195c4:	f003 0301 	and.w	r3, r3, #1
 80195c8:	2b00      	cmp	r3, #0
 80195ca:	d012      	beq.n	80195f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80195cc:	4b69      	ldr	r3, [pc, #420]	; (8019774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80195ce:	689b      	ldr	r3, [r3, #8]
 80195d0:	4a68      	ldr	r2, [pc, #416]	; (8019774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80195d2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80195d6:	6093      	str	r3, [r2, #8]
 80195d8:	4b66      	ldr	r3, [pc, #408]	; (8019774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80195da:	689a      	ldr	r2, [r3, #8]
 80195dc:	687b      	ldr	r3, [r7, #4]
 80195de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80195e0:	4964      	ldr	r1, [pc, #400]	; (8019774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80195e2:	4313      	orrs	r3, r2
 80195e4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80195e6:	687b      	ldr	r3, [r7, #4]
 80195e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80195ea:	2b00      	cmp	r3, #0
 80195ec:	d101      	bne.n	80195f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80195ee:	2301      	movs	r3, #1
 80195f0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80195f2:	687b      	ldr	r3, [r7, #4]
 80195f4:	681b      	ldr	r3, [r3, #0]
 80195f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80195fa:	2b00      	cmp	r3, #0
 80195fc:	d017      	beq.n	801962e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80195fe:	4b5d      	ldr	r3, [pc, #372]	; (8019774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019600:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019604:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8019608:	687b      	ldr	r3, [r7, #4]
 801960a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801960c:	4959      	ldr	r1, [pc, #356]	; (8019774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801960e:	4313      	orrs	r3, r2
 8019610:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8019614:	687b      	ldr	r3, [r7, #4]
 8019616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019618:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801961c:	d101      	bne.n	8019622 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 801961e:	2301      	movs	r3, #1
 8019620:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8019622:	687b      	ldr	r3, [r7, #4]
 8019624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019626:	2b00      	cmp	r3, #0
 8019628:	d101      	bne.n	801962e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 801962a:	2301      	movs	r3, #1
 801962c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 801962e:	687b      	ldr	r3, [r7, #4]
 8019630:	681b      	ldr	r3, [r3, #0]
 8019632:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8019636:	2b00      	cmp	r3, #0
 8019638:	d017      	beq.n	801966a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 801963a:	4b4e      	ldr	r3, [pc, #312]	; (8019774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801963c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019640:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8019644:	687b      	ldr	r3, [r7, #4]
 8019646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019648:	494a      	ldr	r1, [pc, #296]	; (8019774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801964a:	4313      	orrs	r3, r2
 801964c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8019650:	687b      	ldr	r3, [r7, #4]
 8019652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019654:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8019658:	d101      	bne.n	801965e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 801965a:	2301      	movs	r3, #1
 801965c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 801965e:	687b      	ldr	r3, [r7, #4]
 8019660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019662:	2b00      	cmp	r3, #0
 8019664:	d101      	bne.n	801966a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8019666:	2301      	movs	r3, #1
 8019668:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801966a:	687b      	ldr	r3, [r7, #4]
 801966c:	681b      	ldr	r3, [r3, #0]
 801966e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8019672:	2b00      	cmp	r3, #0
 8019674:	d001      	beq.n	801967a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8019676:	2301      	movs	r3, #1
 8019678:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 801967a:	687b      	ldr	r3, [r7, #4]
 801967c:	681b      	ldr	r3, [r3, #0]
 801967e:	f003 0320 	and.w	r3, r3, #32
 8019682:	2b00      	cmp	r3, #0
 8019684:	f000 808b 	beq.w	801979e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8019688:	4b3a      	ldr	r3, [pc, #232]	; (8019774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801968a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801968c:	4a39      	ldr	r2, [pc, #228]	; (8019774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801968e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8019692:	6413      	str	r3, [r2, #64]	; 0x40
 8019694:	4b37      	ldr	r3, [pc, #220]	; (8019774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801969c:	60bb      	str	r3, [r7, #8]
 801969e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80196a0:	4b35      	ldr	r3, [pc, #212]	; (8019778 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80196a2:	681b      	ldr	r3, [r3, #0]
 80196a4:	4a34      	ldr	r2, [pc, #208]	; (8019778 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80196a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80196aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80196ac:	f7fb ff70 	bl	8015590 <HAL_GetTick>
 80196b0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80196b2:	e008      	b.n	80196c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80196b4:	f7fb ff6c 	bl	8015590 <HAL_GetTick>
 80196b8:	4602      	mov	r2, r0
 80196ba:	697b      	ldr	r3, [r7, #20]
 80196bc:	1ad3      	subs	r3, r2, r3
 80196be:	2b64      	cmp	r3, #100	; 0x64
 80196c0:	d901      	bls.n	80196c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80196c2:	2303      	movs	r3, #3
 80196c4:	e38f      	b.n	8019de6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80196c6:	4b2c      	ldr	r3, [pc, #176]	; (8019778 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80196c8:	681b      	ldr	r3, [r3, #0]
 80196ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80196ce:	2b00      	cmp	r3, #0
 80196d0:	d0f0      	beq.n	80196b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80196d2:	4b28      	ldr	r3, [pc, #160]	; (8019774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80196d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80196d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80196da:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80196dc:	693b      	ldr	r3, [r7, #16]
 80196de:	2b00      	cmp	r3, #0
 80196e0:	d035      	beq.n	801974e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80196e2:	687b      	ldr	r3, [r7, #4]
 80196e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80196e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80196ea:	693a      	ldr	r2, [r7, #16]
 80196ec:	429a      	cmp	r2, r3
 80196ee:	d02e      	beq.n	801974e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80196f0:	4b20      	ldr	r3, [pc, #128]	; (8019774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80196f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80196f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80196f8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80196fa:	4b1e      	ldr	r3, [pc, #120]	; (8019774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80196fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80196fe:	4a1d      	ldr	r2, [pc, #116]	; (8019774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8019704:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8019706:	4b1b      	ldr	r3, [pc, #108]	; (8019774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801970a:	4a1a      	ldr	r2, [pc, #104]	; (8019774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801970c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8019710:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8019712:	4a18      	ldr	r2, [pc, #96]	; (8019774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019714:	693b      	ldr	r3, [r7, #16]
 8019716:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8019718:	4b16      	ldr	r3, [pc, #88]	; (8019774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801971a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801971c:	f003 0301 	and.w	r3, r3, #1
 8019720:	2b01      	cmp	r3, #1
 8019722:	d114      	bne.n	801974e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8019724:	f7fb ff34 	bl	8015590 <HAL_GetTick>
 8019728:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801972a:	e00a      	b.n	8019742 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801972c:	f7fb ff30 	bl	8015590 <HAL_GetTick>
 8019730:	4602      	mov	r2, r0
 8019732:	697b      	ldr	r3, [r7, #20]
 8019734:	1ad3      	subs	r3, r2, r3
 8019736:	f241 3288 	movw	r2, #5000	; 0x1388
 801973a:	4293      	cmp	r3, r2
 801973c:	d901      	bls.n	8019742 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 801973e:	2303      	movs	r3, #3
 8019740:	e351      	b.n	8019de6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8019742:	4b0c      	ldr	r3, [pc, #48]	; (8019774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019746:	f003 0302 	and.w	r3, r3, #2
 801974a:	2b00      	cmp	r3, #0
 801974c:	d0ee      	beq.n	801972c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801974e:	687b      	ldr	r3, [r7, #4]
 8019750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019752:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8019756:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801975a:	d111      	bne.n	8019780 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 801975c:	4b05      	ldr	r3, [pc, #20]	; (8019774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801975e:	689b      	ldr	r3, [r3, #8]
 8019760:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8019764:	687b      	ldr	r3, [r7, #4]
 8019766:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8019768:	4b04      	ldr	r3, [pc, #16]	; (801977c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 801976a:	400b      	ands	r3, r1
 801976c:	4901      	ldr	r1, [pc, #4]	; (8019774 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801976e:	4313      	orrs	r3, r2
 8019770:	608b      	str	r3, [r1, #8]
 8019772:	e00b      	b.n	801978c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8019774:	40023800 	.word	0x40023800
 8019778:	40007000 	.word	0x40007000
 801977c:	0ffffcff 	.word	0x0ffffcff
 8019780:	4bac      	ldr	r3, [pc, #688]	; (8019a34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019782:	689b      	ldr	r3, [r3, #8]
 8019784:	4aab      	ldr	r2, [pc, #684]	; (8019a34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019786:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 801978a:	6093      	str	r3, [r2, #8]
 801978c:	4ba9      	ldr	r3, [pc, #676]	; (8019a34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801978e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8019790:	687b      	ldr	r3, [r7, #4]
 8019792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019794:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8019798:	49a6      	ldr	r1, [pc, #664]	; (8019a34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801979a:	4313      	orrs	r3, r2
 801979c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 801979e:	687b      	ldr	r3, [r7, #4]
 80197a0:	681b      	ldr	r3, [r3, #0]
 80197a2:	f003 0310 	and.w	r3, r3, #16
 80197a6:	2b00      	cmp	r3, #0
 80197a8:	d010      	beq.n	80197cc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80197aa:	4ba2      	ldr	r3, [pc, #648]	; (8019a34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80197ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80197b0:	4aa0      	ldr	r2, [pc, #640]	; (8019a34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80197b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80197b6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80197ba:	4b9e      	ldr	r3, [pc, #632]	; (8019a34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80197bc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80197c0:	687b      	ldr	r3, [r7, #4]
 80197c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80197c4:	499b      	ldr	r1, [pc, #620]	; (8019a34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80197c6:	4313      	orrs	r3, r2
 80197c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80197cc:	687b      	ldr	r3, [r7, #4]
 80197ce:	681b      	ldr	r3, [r3, #0]
 80197d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80197d4:	2b00      	cmp	r3, #0
 80197d6:	d00a      	beq.n	80197ee <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80197d8:	4b96      	ldr	r3, [pc, #600]	; (8019a34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80197da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80197de:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80197e2:	687b      	ldr	r3, [r7, #4]
 80197e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80197e6:	4993      	ldr	r1, [pc, #588]	; (8019a34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80197e8:	4313      	orrs	r3, r2
 80197ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80197ee:	687b      	ldr	r3, [r7, #4]
 80197f0:	681b      	ldr	r3, [r3, #0]
 80197f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80197f6:	2b00      	cmp	r3, #0
 80197f8:	d00a      	beq.n	8019810 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80197fa:	4b8e      	ldr	r3, [pc, #568]	; (8019a34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80197fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019800:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8019804:	687b      	ldr	r3, [r7, #4]
 8019806:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8019808:	498a      	ldr	r1, [pc, #552]	; (8019a34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801980a:	4313      	orrs	r3, r2
 801980c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8019810:	687b      	ldr	r3, [r7, #4]
 8019812:	681b      	ldr	r3, [r3, #0]
 8019814:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8019818:	2b00      	cmp	r3, #0
 801981a:	d00a      	beq.n	8019832 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801981c:	4b85      	ldr	r3, [pc, #532]	; (8019a34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801981e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019822:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8019826:	687b      	ldr	r3, [r7, #4]
 8019828:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801982a:	4982      	ldr	r1, [pc, #520]	; (8019a34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801982c:	4313      	orrs	r3, r2
 801982e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8019832:	687b      	ldr	r3, [r7, #4]
 8019834:	681b      	ldr	r3, [r3, #0]
 8019836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801983a:	2b00      	cmp	r3, #0
 801983c:	d00a      	beq.n	8019854 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801983e:	4b7d      	ldr	r3, [pc, #500]	; (8019a34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019844:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8019848:	687b      	ldr	r3, [r7, #4]
 801984a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801984c:	4979      	ldr	r1, [pc, #484]	; (8019a34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801984e:	4313      	orrs	r3, r2
 8019850:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8019854:	687b      	ldr	r3, [r7, #4]
 8019856:	681b      	ldr	r3, [r3, #0]
 8019858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801985c:	2b00      	cmp	r3, #0
 801985e:	d00a      	beq.n	8019876 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8019860:	4b74      	ldr	r3, [pc, #464]	; (8019a34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019866:	f023 0203 	bic.w	r2, r3, #3
 801986a:	687b      	ldr	r3, [r7, #4]
 801986c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801986e:	4971      	ldr	r1, [pc, #452]	; (8019a34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019870:	4313      	orrs	r3, r2
 8019872:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8019876:	687b      	ldr	r3, [r7, #4]
 8019878:	681b      	ldr	r3, [r3, #0]
 801987a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801987e:	2b00      	cmp	r3, #0
 8019880:	d00a      	beq.n	8019898 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8019882:	4b6c      	ldr	r3, [pc, #432]	; (8019a34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019888:	f023 020c 	bic.w	r2, r3, #12
 801988c:	687b      	ldr	r3, [r7, #4]
 801988e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019890:	4968      	ldr	r1, [pc, #416]	; (8019a34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019892:	4313      	orrs	r3, r2
 8019894:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8019898:	687b      	ldr	r3, [r7, #4]
 801989a:	681b      	ldr	r3, [r3, #0]
 801989c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80198a0:	2b00      	cmp	r3, #0
 80198a2:	d00a      	beq.n	80198ba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80198a4:	4b63      	ldr	r3, [pc, #396]	; (8019a34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80198a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80198aa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80198ae:	687b      	ldr	r3, [r7, #4]
 80198b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80198b2:	4960      	ldr	r1, [pc, #384]	; (8019a34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80198b4:	4313      	orrs	r3, r2
 80198b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80198ba:	687b      	ldr	r3, [r7, #4]
 80198bc:	681b      	ldr	r3, [r3, #0]
 80198be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80198c2:	2b00      	cmp	r3, #0
 80198c4:	d00a      	beq.n	80198dc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80198c6:	4b5b      	ldr	r3, [pc, #364]	; (8019a34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80198c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80198cc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80198d0:	687b      	ldr	r3, [r7, #4]
 80198d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80198d4:	4957      	ldr	r1, [pc, #348]	; (8019a34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80198d6:	4313      	orrs	r3, r2
 80198d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80198dc:	687b      	ldr	r3, [r7, #4]
 80198de:	681b      	ldr	r3, [r3, #0]
 80198e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80198e4:	2b00      	cmp	r3, #0
 80198e6:	d00a      	beq.n	80198fe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80198e8:	4b52      	ldr	r3, [pc, #328]	; (8019a34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80198ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80198ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80198f2:	687b      	ldr	r3, [r7, #4]
 80198f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80198f6:	494f      	ldr	r1, [pc, #316]	; (8019a34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80198f8:	4313      	orrs	r3, r2
 80198fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80198fe:	687b      	ldr	r3, [r7, #4]
 8019900:	681b      	ldr	r3, [r3, #0]
 8019902:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019906:	2b00      	cmp	r3, #0
 8019908:	d00a      	beq.n	8019920 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 801990a:	4b4a      	ldr	r3, [pc, #296]	; (8019a34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801990c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019910:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8019914:	687b      	ldr	r3, [r7, #4]
 8019916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019918:	4946      	ldr	r1, [pc, #280]	; (8019a34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801991a:	4313      	orrs	r3, r2
 801991c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8019920:	687b      	ldr	r3, [r7, #4]
 8019922:	681b      	ldr	r3, [r3, #0]
 8019924:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8019928:	2b00      	cmp	r3, #0
 801992a:	d00a      	beq.n	8019942 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 801992c:	4b41      	ldr	r3, [pc, #260]	; (8019a34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801992e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019932:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8019936:	687b      	ldr	r3, [r7, #4]
 8019938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801993a:	493e      	ldr	r1, [pc, #248]	; (8019a34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801993c:	4313      	orrs	r3, r2
 801993e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8019942:	687b      	ldr	r3, [r7, #4]
 8019944:	681b      	ldr	r3, [r3, #0]
 8019946:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801994a:	2b00      	cmp	r3, #0
 801994c:	d00a      	beq.n	8019964 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 801994e:	4b39      	ldr	r3, [pc, #228]	; (8019a34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019950:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019954:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8019958:	687b      	ldr	r3, [r7, #4]
 801995a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801995c:	4935      	ldr	r1, [pc, #212]	; (8019a34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801995e:	4313      	orrs	r3, r2
 8019960:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8019964:	687b      	ldr	r3, [r7, #4]
 8019966:	681b      	ldr	r3, [r3, #0]
 8019968:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801996c:	2b00      	cmp	r3, #0
 801996e:	d00a      	beq.n	8019986 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8019970:	4b30      	ldr	r3, [pc, #192]	; (8019a34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019976:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 801997a:	687b      	ldr	r3, [r7, #4]
 801997c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801997e:	492d      	ldr	r1, [pc, #180]	; (8019a34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019980:	4313      	orrs	r3, r2
 8019982:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8019986:	687b      	ldr	r3, [r7, #4]
 8019988:	681b      	ldr	r3, [r3, #0]
 801998a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801998e:	2b00      	cmp	r3, #0
 8019990:	d011      	beq.n	80199b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8019992:	4b28      	ldr	r3, [pc, #160]	; (8019a34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019998:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 801999c:	687b      	ldr	r3, [r7, #4]
 801999e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80199a0:	4924      	ldr	r1, [pc, #144]	; (8019a34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80199a2:	4313      	orrs	r3, r2
 80199a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80199a8:	687b      	ldr	r3, [r7, #4]
 80199aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80199ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80199b0:	d101      	bne.n	80199b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80199b2:	2301      	movs	r3, #1
 80199b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80199b6:	687b      	ldr	r3, [r7, #4]
 80199b8:	681b      	ldr	r3, [r3, #0]
 80199ba:	f003 0308 	and.w	r3, r3, #8
 80199be:	2b00      	cmp	r3, #0
 80199c0:	d001      	beq.n	80199c6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80199c2:	2301      	movs	r3, #1
 80199c4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80199c6:	687b      	ldr	r3, [r7, #4]
 80199c8:	681b      	ldr	r3, [r3, #0]
 80199ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80199ce:	2b00      	cmp	r3, #0
 80199d0:	d00a      	beq.n	80199e8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80199d2:	4b18      	ldr	r3, [pc, #96]	; (8019a34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80199d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80199d8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80199dc:	687b      	ldr	r3, [r7, #4]
 80199de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80199e0:	4914      	ldr	r1, [pc, #80]	; (8019a34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80199e2:	4313      	orrs	r3, r2
 80199e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80199e8:	687b      	ldr	r3, [r7, #4]
 80199ea:	681b      	ldr	r3, [r3, #0]
 80199ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80199f0:	2b00      	cmp	r3, #0
 80199f2:	d00b      	beq.n	8019a0c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80199f4:	4b0f      	ldr	r3, [pc, #60]	; (8019a34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80199f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80199fa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80199fe:	687b      	ldr	r3, [r7, #4]
 8019a00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8019a04:	490b      	ldr	r1, [pc, #44]	; (8019a34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019a06:	4313      	orrs	r3, r2
 8019a08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8019a0c:	687b      	ldr	r3, [r7, #4]
 8019a0e:	681b      	ldr	r3, [r3, #0]
 8019a10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8019a14:	2b00      	cmp	r3, #0
 8019a16:	d00f      	beq.n	8019a38 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8019a18:	4b06      	ldr	r3, [pc, #24]	; (8019a34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019a1e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8019a22:	687b      	ldr	r3, [r7, #4]
 8019a24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019a28:	4902      	ldr	r1, [pc, #8]	; (8019a34 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019a2a:	4313      	orrs	r3, r2
 8019a2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8019a30:	e002      	b.n	8019a38 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8019a32:	bf00      	nop
 8019a34:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8019a38:	687b      	ldr	r3, [r7, #4]
 8019a3a:	681b      	ldr	r3, [r3, #0]
 8019a3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8019a40:	2b00      	cmp	r3, #0
 8019a42:	d00b      	beq.n	8019a5c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8019a44:	4b8a      	ldr	r3, [pc, #552]	; (8019c70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019a46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019a4a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8019a4e:	687b      	ldr	r3, [r7, #4]
 8019a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019a54:	4986      	ldr	r1, [pc, #536]	; (8019c70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019a56:	4313      	orrs	r3, r2
 8019a58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8019a5c:	687b      	ldr	r3, [r7, #4]
 8019a5e:	681b      	ldr	r3, [r3, #0]
 8019a60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8019a64:	2b00      	cmp	r3, #0
 8019a66:	d00b      	beq.n	8019a80 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8019a68:	4b81      	ldr	r3, [pc, #516]	; (8019c70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019a6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019a6e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8019a72:	687b      	ldr	r3, [r7, #4]
 8019a74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019a78:	497d      	ldr	r1, [pc, #500]	; (8019c70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019a7a:	4313      	orrs	r3, r2
 8019a7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8019a80:	69fb      	ldr	r3, [r7, #28]
 8019a82:	2b01      	cmp	r3, #1
 8019a84:	d006      	beq.n	8019a94 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8019a86:	687b      	ldr	r3, [r7, #4]
 8019a88:	681b      	ldr	r3, [r3, #0]
 8019a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019a8e:	2b00      	cmp	r3, #0
 8019a90:	f000 80d6 	beq.w	8019c40 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8019a94:	4b76      	ldr	r3, [pc, #472]	; (8019c70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019a96:	681b      	ldr	r3, [r3, #0]
 8019a98:	4a75      	ldr	r2, [pc, #468]	; (8019c70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019a9a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8019a9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8019aa0:	f7fb fd76 	bl	8015590 <HAL_GetTick>
 8019aa4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8019aa6:	e008      	b.n	8019aba <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8019aa8:	f7fb fd72 	bl	8015590 <HAL_GetTick>
 8019aac:	4602      	mov	r2, r0
 8019aae:	697b      	ldr	r3, [r7, #20]
 8019ab0:	1ad3      	subs	r3, r2, r3
 8019ab2:	2b64      	cmp	r3, #100	; 0x64
 8019ab4:	d901      	bls.n	8019aba <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8019ab6:	2303      	movs	r3, #3
 8019ab8:	e195      	b.n	8019de6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8019aba:	4b6d      	ldr	r3, [pc, #436]	; (8019c70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019abc:	681b      	ldr	r3, [r3, #0]
 8019abe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8019ac2:	2b00      	cmp	r3, #0
 8019ac4:	d1f0      	bne.n	8019aa8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8019ac6:	687b      	ldr	r3, [r7, #4]
 8019ac8:	681b      	ldr	r3, [r3, #0]
 8019aca:	f003 0301 	and.w	r3, r3, #1
 8019ace:	2b00      	cmp	r3, #0
 8019ad0:	d021      	beq.n	8019b16 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8019ad2:	687b      	ldr	r3, [r7, #4]
 8019ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019ad6:	2b00      	cmp	r3, #0
 8019ad8:	d11d      	bne.n	8019b16 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8019ada:	4b65      	ldr	r3, [pc, #404]	; (8019c70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019adc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019ae0:	0c1b      	lsrs	r3, r3, #16
 8019ae2:	f003 0303 	and.w	r3, r3, #3
 8019ae6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8019ae8:	4b61      	ldr	r3, [pc, #388]	; (8019c70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019aea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019aee:	0e1b      	lsrs	r3, r3, #24
 8019af0:	f003 030f 	and.w	r3, r3, #15
 8019af4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8019af6:	687b      	ldr	r3, [r7, #4]
 8019af8:	685b      	ldr	r3, [r3, #4]
 8019afa:	019a      	lsls	r2, r3, #6
 8019afc:	693b      	ldr	r3, [r7, #16]
 8019afe:	041b      	lsls	r3, r3, #16
 8019b00:	431a      	orrs	r2, r3
 8019b02:	68fb      	ldr	r3, [r7, #12]
 8019b04:	061b      	lsls	r3, r3, #24
 8019b06:	431a      	orrs	r2, r3
 8019b08:	687b      	ldr	r3, [r7, #4]
 8019b0a:	689b      	ldr	r3, [r3, #8]
 8019b0c:	071b      	lsls	r3, r3, #28
 8019b0e:	4958      	ldr	r1, [pc, #352]	; (8019c70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019b10:	4313      	orrs	r3, r2
 8019b12:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8019b16:	687b      	ldr	r3, [r7, #4]
 8019b18:	681b      	ldr	r3, [r3, #0]
 8019b1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8019b1e:	2b00      	cmp	r3, #0
 8019b20:	d004      	beq.n	8019b2c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8019b22:	687b      	ldr	r3, [r7, #4]
 8019b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019b26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8019b2a:	d00a      	beq.n	8019b42 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8019b2c:	687b      	ldr	r3, [r7, #4]
 8019b2e:	681b      	ldr	r3, [r3, #0]
 8019b30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8019b34:	2b00      	cmp	r3, #0
 8019b36:	d02e      	beq.n	8019b96 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8019b38:	687b      	ldr	r3, [r7, #4]
 8019b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019b3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8019b40:	d129      	bne.n	8019b96 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8019b42:	4b4b      	ldr	r3, [pc, #300]	; (8019c70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019b44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019b48:	0c1b      	lsrs	r3, r3, #16
 8019b4a:	f003 0303 	and.w	r3, r3, #3
 8019b4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8019b50:	4b47      	ldr	r3, [pc, #284]	; (8019c70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019b52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019b56:	0f1b      	lsrs	r3, r3, #28
 8019b58:	f003 0307 	and.w	r3, r3, #7
 8019b5c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8019b5e:	687b      	ldr	r3, [r7, #4]
 8019b60:	685b      	ldr	r3, [r3, #4]
 8019b62:	019a      	lsls	r2, r3, #6
 8019b64:	693b      	ldr	r3, [r7, #16]
 8019b66:	041b      	lsls	r3, r3, #16
 8019b68:	431a      	orrs	r2, r3
 8019b6a:	687b      	ldr	r3, [r7, #4]
 8019b6c:	68db      	ldr	r3, [r3, #12]
 8019b6e:	061b      	lsls	r3, r3, #24
 8019b70:	431a      	orrs	r2, r3
 8019b72:	68fb      	ldr	r3, [r7, #12]
 8019b74:	071b      	lsls	r3, r3, #28
 8019b76:	493e      	ldr	r1, [pc, #248]	; (8019c70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019b78:	4313      	orrs	r3, r2
 8019b7a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8019b7e:	4b3c      	ldr	r3, [pc, #240]	; (8019c70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019b80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019b84:	f023 021f 	bic.w	r2, r3, #31
 8019b88:	687b      	ldr	r3, [r7, #4]
 8019b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b8c:	3b01      	subs	r3, #1
 8019b8e:	4938      	ldr	r1, [pc, #224]	; (8019c70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019b90:	4313      	orrs	r3, r2
 8019b92:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8019b96:	687b      	ldr	r3, [r7, #4]
 8019b98:	681b      	ldr	r3, [r3, #0]
 8019b9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8019b9e:	2b00      	cmp	r3, #0
 8019ba0:	d01d      	beq.n	8019bde <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8019ba2:	4b33      	ldr	r3, [pc, #204]	; (8019c70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019ba4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019ba8:	0e1b      	lsrs	r3, r3, #24
 8019baa:	f003 030f 	and.w	r3, r3, #15
 8019bae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8019bb0:	4b2f      	ldr	r3, [pc, #188]	; (8019c70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019bb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019bb6:	0f1b      	lsrs	r3, r3, #28
 8019bb8:	f003 0307 	and.w	r3, r3, #7
 8019bbc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8019bbe:	687b      	ldr	r3, [r7, #4]
 8019bc0:	685b      	ldr	r3, [r3, #4]
 8019bc2:	019a      	lsls	r2, r3, #6
 8019bc4:	687b      	ldr	r3, [r7, #4]
 8019bc6:	691b      	ldr	r3, [r3, #16]
 8019bc8:	041b      	lsls	r3, r3, #16
 8019bca:	431a      	orrs	r2, r3
 8019bcc:	693b      	ldr	r3, [r7, #16]
 8019bce:	061b      	lsls	r3, r3, #24
 8019bd0:	431a      	orrs	r2, r3
 8019bd2:	68fb      	ldr	r3, [r7, #12]
 8019bd4:	071b      	lsls	r3, r3, #28
 8019bd6:	4926      	ldr	r1, [pc, #152]	; (8019c70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019bd8:	4313      	orrs	r3, r2
 8019bda:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8019bde:	687b      	ldr	r3, [r7, #4]
 8019be0:	681b      	ldr	r3, [r3, #0]
 8019be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019be6:	2b00      	cmp	r3, #0
 8019be8:	d011      	beq.n	8019c0e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8019bea:	687b      	ldr	r3, [r7, #4]
 8019bec:	685b      	ldr	r3, [r3, #4]
 8019bee:	019a      	lsls	r2, r3, #6
 8019bf0:	687b      	ldr	r3, [r7, #4]
 8019bf2:	691b      	ldr	r3, [r3, #16]
 8019bf4:	041b      	lsls	r3, r3, #16
 8019bf6:	431a      	orrs	r2, r3
 8019bf8:	687b      	ldr	r3, [r7, #4]
 8019bfa:	68db      	ldr	r3, [r3, #12]
 8019bfc:	061b      	lsls	r3, r3, #24
 8019bfe:	431a      	orrs	r2, r3
 8019c00:	687b      	ldr	r3, [r7, #4]
 8019c02:	689b      	ldr	r3, [r3, #8]
 8019c04:	071b      	lsls	r3, r3, #28
 8019c06:	491a      	ldr	r1, [pc, #104]	; (8019c70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019c08:	4313      	orrs	r3, r2
 8019c0a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8019c0e:	4b18      	ldr	r3, [pc, #96]	; (8019c70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019c10:	681b      	ldr	r3, [r3, #0]
 8019c12:	4a17      	ldr	r2, [pc, #92]	; (8019c70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019c14:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8019c18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8019c1a:	f7fb fcb9 	bl	8015590 <HAL_GetTick>
 8019c1e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8019c20:	e008      	b.n	8019c34 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8019c22:	f7fb fcb5 	bl	8015590 <HAL_GetTick>
 8019c26:	4602      	mov	r2, r0
 8019c28:	697b      	ldr	r3, [r7, #20]
 8019c2a:	1ad3      	subs	r3, r2, r3
 8019c2c:	2b64      	cmp	r3, #100	; 0x64
 8019c2e:	d901      	bls.n	8019c34 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8019c30:	2303      	movs	r3, #3
 8019c32:	e0d8      	b.n	8019de6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8019c34:	4b0e      	ldr	r3, [pc, #56]	; (8019c70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019c36:	681b      	ldr	r3, [r3, #0]
 8019c38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8019c3c:	2b00      	cmp	r3, #0
 8019c3e:	d0f0      	beq.n	8019c22 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8019c40:	69bb      	ldr	r3, [r7, #24]
 8019c42:	2b01      	cmp	r3, #1
 8019c44:	f040 80ce 	bne.w	8019de4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8019c48:	4b09      	ldr	r3, [pc, #36]	; (8019c70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019c4a:	681b      	ldr	r3, [r3, #0]
 8019c4c:	4a08      	ldr	r2, [pc, #32]	; (8019c70 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019c4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8019c52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8019c54:	f7fb fc9c 	bl	8015590 <HAL_GetTick>
 8019c58:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8019c5a:	e00b      	b.n	8019c74 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8019c5c:	f7fb fc98 	bl	8015590 <HAL_GetTick>
 8019c60:	4602      	mov	r2, r0
 8019c62:	697b      	ldr	r3, [r7, #20]
 8019c64:	1ad3      	subs	r3, r2, r3
 8019c66:	2b64      	cmp	r3, #100	; 0x64
 8019c68:	d904      	bls.n	8019c74 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8019c6a:	2303      	movs	r3, #3
 8019c6c:	e0bb      	b.n	8019de6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8019c6e:	bf00      	nop
 8019c70:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8019c74:	4b5e      	ldr	r3, [pc, #376]	; (8019df0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019c76:	681b      	ldr	r3, [r3, #0]
 8019c78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8019c7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8019c80:	d0ec      	beq.n	8019c5c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8019c82:	687b      	ldr	r3, [r7, #4]
 8019c84:	681b      	ldr	r3, [r3, #0]
 8019c86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8019c8a:	2b00      	cmp	r3, #0
 8019c8c:	d003      	beq.n	8019c96 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8019c8e:	687b      	ldr	r3, [r7, #4]
 8019c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019c92:	2b00      	cmp	r3, #0
 8019c94:	d009      	beq.n	8019caa <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8019c96:	687b      	ldr	r3, [r7, #4]
 8019c98:	681b      	ldr	r3, [r3, #0]
 8019c9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8019c9e:	2b00      	cmp	r3, #0
 8019ca0:	d02e      	beq.n	8019d00 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8019ca2:	687b      	ldr	r3, [r7, #4]
 8019ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019ca6:	2b00      	cmp	r3, #0
 8019ca8:	d12a      	bne.n	8019d00 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8019caa:	4b51      	ldr	r3, [pc, #324]	; (8019df0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019cb0:	0c1b      	lsrs	r3, r3, #16
 8019cb2:	f003 0303 	and.w	r3, r3, #3
 8019cb6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8019cb8:	4b4d      	ldr	r3, [pc, #308]	; (8019df0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019cbe:	0f1b      	lsrs	r3, r3, #28
 8019cc0:	f003 0307 	and.w	r3, r3, #7
 8019cc4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8019cc6:	687b      	ldr	r3, [r7, #4]
 8019cc8:	695b      	ldr	r3, [r3, #20]
 8019cca:	019a      	lsls	r2, r3, #6
 8019ccc:	693b      	ldr	r3, [r7, #16]
 8019cce:	041b      	lsls	r3, r3, #16
 8019cd0:	431a      	orrs	r2, r3
 8019cd2:	687b      	ldr	r3, [r7, #4]
 8019cd4:	699b      	ldr	r3, [r3, #24]
 8019cd6:	061b      	lsls	r3, r3, #24
 8019cd8:	431a      	orrs	r2, r3
 8019cda:	68fb      	ldr	r3, [r7, #12]
 8019cdc:	071b      	lsls	r3, r3, #28
 8019cde:	4944      	ldr	r1, [pc, #272]	; (8019df0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019ce0:	4313      	orrs	r3, r2
 8019ce2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8019ce6:	4b42      	ldr	r3, [pc, #264]	; (8019df0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019ce8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019cec:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8019cf0:	687b      	ldr	r3, [r7, #4]
 8019cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019cf4:	3b01      	subs	r3, #1
 8019cf6:	021b      	lsls	r3, r3, #8
 8019cf8:	493d      	ldr	r1, [pc, #244]	; (8019df0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019cfa:	4313      	orrs	r3, r2
 8019cfc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8019d00:	687b      	ldr	r3, [r7, #4]
 8019d02:	681b      	ldr	r3, [r3, #0]
 8019d04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8019d08:	2b00      	cmp	r3, #0
 8019d0a:	d022      	beq.n	8019d52 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8019d0c:	687b      	ldr	r3, [r7, #4]
 8019d0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019d10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8019d14:	d11d      	bne.n	8019d52 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8019d16:	4b36      	ldr	r3, [pc, #216]	; (8019df0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019d1c:	0e1b      	lsrs	r3, r3, #24
 8019d1e:	f003 030f 	and.w	r3, r3, #15
 8019d22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8019d24:	4b32      	ldr	r3, [pc, #200]	; (8019df0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019d2a:	0f1b      	lsrs	r3, r3, #28
 8019d2c:	f003 0307 	and.w	r3, r3, #7
 8019d30:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8019d32:	687b      	ldr	r3, [r7, #4]
 8019d34:	695b      	ldr	r3, [r3, #20]
 8019d36:	019a      	lsls	r2, r3, #6
 8019d38:	687b      	ldr	r3, [r7, #4]
 8019d3a:	6a1b      	ldr	r3, [r3, #32]
 8019d3c:	041b      	lsls	r3, r3, #16
 8019d3e:	431a      	orrs	r2, r3
 8019d40:	693b      	ldr	r3, [r7, #16]
 8019d42:	061b      	lsls	r3, r3, #24
 8019d44:	431a      	orrs	r2, r3
 8019d46:	68fb      	ldr	r3, [r7, #12]
 8019d48:	071b      	lsls	r3, r3, #28
 8019d4a:	4929      	ldr	r1, [pc, #164]	; (8019df0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019d4c:	4313      	orrs	r3, r2
 8019d4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8019d52:	687b      	ldr	r3, [r7, #4]
 8019d54:	681b      	ldr	r3, [r3, #0]
 8019d56:	f003 0308 	and.w	r3, r3, #8
 8019d5a:	2b00      	cmp	r3, #0
 8019d5c:	d028      	beq.n	8019db0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8019d5e:	4b24      	ldr	r3, [pc, #144]	; (8019df0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019d64:	0e1b      	lsrs	r3, r3, #24
 8019d66:	f003 030f 	and.w	r3, r3, #15
 8019d6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8019d6c:	4b20      	ldr	r3, [pc, #128]	; (8019df0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019d72:	0c1b      	lsrs	r3, r3, #16
 8019d74:	f003 0303 	and.w	r3, r3, #3
 8019d78:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8019d7a:	687b      	ldr	r3, [r7, #4]
 8019d7c:	695b      	ldr	r3, [r3, #20]
 8019d7e:	019a      	lsls	r2, r3, #6
 8019d80:	68fb      	ldr	r3, [r7, #12]
 8019d82:	041b      	lsls	r3, r3, #16
 8019d84:	431a      	orrs	r2, r3
 8019d86:	693b      	ldr	r3, [r7, #16]
 8019d88:	061b      	lsls	r3, r3, #24
 8019d8a:	431a      	orrs	r2, r3
 8019d8c:	687b      	ldr	r3, [r7, #4]
 8019d8e:	69db      	ldr	r3, [r3, #28]
 8019d90:	071b      	lsls	r3, r3, #28
 8019d92:	4917      	ldr	r1, [pc, #92]	; (8019df0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019d94:	4313      	orrs	r3, r2
 8019d96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8019d9a:	4b15      	ldr	r3, [pc, #84]	; (8019df0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019d9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019da0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8019da4:	687b      	ldr	r3, [r7, #4]
 8019da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019da8:	4911      	ldr	r1, [pc, #68]	; (8019df0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019daa:	4313      	orrs	r3, r2
 8019dac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8019db0:	4b0f      	ldr	r3, [pc, #60]	; (8019df0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019db2:	681b      	ldr	r3, [r3, #0]
 8019db4:	4a0e      	ldr	r2, [pc, #56]	; (8019df0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019db6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8019dba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8019dbc:	f7fb fbe8 	bl	8015590 <HAL_GetTick>
 8019dc0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8019dc2:	e008      	b.n	8019dd6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8019dc4:	f7fb fbe4 	bl	8015590 <HAL_GetTick>
 8019dc8:	4602      	mov	r2, r0
 8019dca:	697b      	ldr	r3, [r7, #20]
 8019dcc:	1ad3      	subs	r3, r2, r3
 8019dce:	2b64      	cmp	r3, #100	; 0x64
 8019dd0:	d901      	bls.n	8019dd6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8019dd2:	2303      	movs	r3, #3
 8019dd4:	e007      	b.n	8019de6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8019dd6:	4b06      	ldr	r3, [pc, #24]	; (8019df0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019dd8:	681b      	ldr	r3, [r3, #0]
 8019dda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8019dde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8019de2:	d1ef      	bne.n	8019dc4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8019de4:	2300      	movs	r3, #0
}
 8019de6:	4618      	mov	r0, r3
 8019de8:	3720      	adds	r7, #32
 8019dea:	46bd      	mov	sp, r7
 8019dec:	bd80      	pop	{r7, pc}
 8019dee:	bf00      	nop
 8019df0:	40023800 	.word	0x40023800

08019df4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8019df4:	b580      	push	{r7, lr}
 8019df6:	b082      	sub	sp, #8
 8019df8:	af00      	add	r7, sp, #0
 8019dfa:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8019dfc:	687b      	ldr	r3, [r7, #4]
 8019dfe:	2b00      	cmp	r3, #0
 8019e00:	d101      	bne.n	8019e06 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8019e02:	2301      	movs	r3, #1
 8019e04:	e01c      	b.n	8019e40 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8019e06:	687b      	ldr	r3, [r7, #4]
 8019e08:	795b      	ldrb	r3, [r3, #5]
 8019e0a:	b2db      	uxtb	r3, r3
 8019e0c:	2b00      	cmp	r3, #0
 8019e0e:	d105      	bne.n	8019e1c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8019e10:	687b      	ldr	r3, [r7, #4]
 8019e12:	2200      	movs	r2, #0
 8019e14:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8019e16:	6878      	ldr	r0, [r7, #4]
 8019e18:	f7f9 fe48 	bl	8013aac <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8019e1c:	687b      	ldr	r3, [r7, #4]
 8019e1e:	2202      	movs	r2, #2
 8019e20:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8019e22:	687b      	ldr	r3, [r7, #4]
 8019e24:	681b      	ldr	r3, [r3, #0]
 8019e26:	681a      	ldr	r2, [r3, #0]
 8019e28:	687b      	ldr	r3, [r7, #4]
 8019e2a:	681b      	ldr	r3, [r3, #0]
 8019e2c:	f042 0204 	orr.w	r2, r2, #4
 8019e30:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8019e32:	687b      	ldr	r3, [r7, #4]
 8019e34:	2201      	movs	r2, #1
 8019e36:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8019e38:	687b      	ldr	r3, [r7, #4]
 8019e3a:	2200      	movs	r2, #0
 8019e3c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8019e3e:	2300      	movs	r3, #0
}
 8019e40:	4618      	mov	r0, r3
 8019e42:	3708      	adds	r7, #8
 8019e44:	46bd      	mov	sp, r7
 8019e46:	bd80      	pop	{r7, pc}

08019e48 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8019e48:	b580      	push	{r7, lr}
 8019e4a:	b084      	sub	sp, #16
 8019e4c:	af00      	add	r7, sp, #0
 8019e4e:	6078      	str	r0, [r7, #4]
 8019e50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8019e52:	2300      	movs	r3, #0
 8019e54:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8019e56:	687b      	ldr	r3, [r7, #4]
 8019e58:	791b      	ldrb	r3, [r3, #4]
 8019e5a:	2b01      	cmp	r3, #1
 8019e5c:	d101      	bne.n	8019e62 <HAL_RNG_GenerateRandomNumber+0x1a>
 8019e5e:	2302      	movs	r3, #2
 8019e60:	e044      	b.n	8019eec <HAL_RNG_GenerateRandomNumber+0xa4>
 8019e62:	687b      	ldr	r3, [r7, #4]
 8019e64:	2201      	movs	r2, #1
 8019e66:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8019e68:	687b      	ldr	r3, [r7, #4]
 8019e6a:	795b      	ldrb	r3, [r3, #5]
 8019e6c:	b2db      	uxtb	r3, r3
 8019e6e:	2b01      	cmp	r3, #1
 8019e70:	d133      	bne.n	8019eda <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8019e72:	687b      	ldr	r3, [r7, #4]
 8019e74:	2202      	movs	r2, #2
 8019e76:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8019e78:	f7fb fb8a 	bl	8015590 <HAL_GetTick>
 8019e7c:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8019e7e:	e018      	b.n	8019eb2 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8019e80:	f7fb fb86 	bl	8015590 <HAL_GetTick>
 8019e84:	4602      	mov	r2, r0
 8019e86:	68bb      	ldr	r3, [r7, #8]
 8019e88:	1ad3      	subs	r3, r2, r3
 8019e8a:	2b02      	cmp	r3, #2
 8019e8c:	d911      	bls.n	8019eb2 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8019e8e:	687b      	ldr	r3, [r7, #4]
 8019e90:	681b      	ldr	r3, [r3, #0]
 8019e92:	685b      	ldr	r3, [r3, #4]
 8019e94:	f003 0301 	and.w	r3, r3, #1
 8019e98:	2b01      	cmp	r3, #1
 8019e9a:	d00a      	beq.n	8019eb2 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8019e9c:	687b      	ldr	r3, [r7, #4]
 8019e9e:	2201      	movs	r2, #1
 8019ea0:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8019ea2:	687b      	ldr	r3, [r7, #4]
 8019ea4:	2202      	movs	r2, #2
 8019ea6:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8019ea8:	687b      	ldr	r3, [r7, #4]
 8019eaa:	2200      	movs	r2, #0
 8019eac:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8019eae:	2301      	movs	r3, #1
 8019eb0:	e01c      	b.n	8019eec <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8019eb2:	687b      	ldr	r3, [r7, #4]
 8019eb4:	681b      	ldr	r3, [r3, #0]
 8019eb6:	685b      	ldr	r3, [r3, #4]
 8019eb8:	f003 0301 	and.w	r3, r3, #1
 8019ebc:	2b01      	cmp	r3, #1
 8019ebe:	d1df      	bne.n	8019e80 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8019ec0:	687b      	ldr	r3, [r7, #4]
 8019ec2:	681b      	ldr	r3, [r3, #0]
 8019ec4:	689a      	ldr	r2, [r3, #8]
 8019ec6:	687b      	ldr	r3, [r7, #4]
 8019ec8:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8019eca:	687b      	ldr	r3, [r7, #4]
 8019ecc:	68da      	ldr	r2, [r3, #12]
 8019ece:	683b      	ldr	r3, [r7, #0]
 8019ed0:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8019ed2:	687b      	ldr	r3, [r7, #4]
 8019ed4:	2201      	movs	r2, #1
 8019ed6:	715a      	strb	r2, [r3, #5]
 8019ed8:	e004      	b.n	8019ee4 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8019eda:	687b      	ldr	r3, [r7, #4]
 8019edc:	2204      	movs	r2, #4
 8019ede:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8019ee0:	2301      	movs	r3, #1
 8019ee2:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8019ee4:	687b      	ldr	r3, [r7, #4]
 8019ee6:	2200      	movs	r2, #0
 8019ee8:	711a      	strb	r2, [r3, #4]

  return status;
 8019eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8019eec:	4618      	mov	r0, r3
 8019eee:	3710      	adds	r7, #16
 8019ef0:	46bd      	mov	sp, r7
 8019ef2:	bd80      	pop	{r7, pc}

08019ef4 <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 8019ef4:	b580      	push	{r7, lr}
 8019ef6:	b082      	sub	sp, #8
 8019ef8:	af00      	add	r7, sp, #0
 8019efa:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 8019efc:	687b      	ldr	r3, [r7, #4]
 8019efe:	330c      	adds	r3, #12
 8019f00:	4619      	mov	r1, r3
 8019f02:	6878      	ldr	r0, [r7, #4]
 8019f04:	f7ff ffa0 	bl	8019e48 <HAL_RNG_GenerateRandomNumber>
 8019f08:	4603      	mov	r3, r0
 8019f0a:	2b00      	cmp	r3, #0
 8019f0c:	d102      	bne.n	8019f14 <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 8019f0e:	687b      	ldr	r3, [r7, #4]
 8019f10:	68db      	ldr	r3, [r3, #12]
 8019f12:	e000      	b.n	8019f16 <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 8019f14:	2300      	movs	r3, #0
  }
}
 8019f16:	4618      	mov	r0, r3
 8019f18:	3708      	adds	r7, #8
 8019f1a:	46bd      	mov	sp, r7
 8019f1c:	bd80      	pop	{r7, pc}

08019f1e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8019f1e:	b580      	push	{r7, lr}
 8019f20:	b084      	sub	sp, #16
 8019f22:	af00      	add	r7, sp, #0
 8019f24:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8019f26:	687b      	ldr	r3, [r7, #4]
 8019f28:	2b00      	cmp	r3, #0
 8019f2a:	d101      	bne.n	8019f30 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8019f2c:	2301      	movs	r3, #1
 8019f2e:	e09d      	b.n	801a06c <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8019f30:	687b      	ldr	r3, [r7, #4]
 8019f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f34:	2b00      	cmp	r3, #0
 8019f36:	d108      	bne.n	8019f4a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8019f38:	687b      	ldr	r3, [r7, #4]
 8019f3a:	685b      	ldr	r3, [r3, #4]
 8019f3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8019f40:	d009      	beq.n	8019f56 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8019f42:	687b      	ldr	r3, [r7, #4]
 8019f44:	2200      	movs	r2, #0
 8019f46:	61da      	str	r2, [r3, #28]
 8019f48:	e005      	b.n	8019f56 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8019f4a:	687b      	ldr	r3, [r7, #4]
 8019f4c:	2200      	movs	r2, #0
 8019f4e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8019f50:	687b      	ldr	r3, [r7, #4]
 8019f52:	2200      	movs	r2, #0
 8019f54:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8019f56:	687b      	ldr	r3, [r7, #4]
 8019f58:	2200      	movs	r2, #0
 8019f5a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8019f5c:	687b      	ldr	r3, [r7, #4]
 8019f5e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8019f62:	b2db      	uxtb	r3, r3
 8019f64:	2b00      	cmp	r3, #0
 8019f66:	d106      	bne.n	8019f76 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8019f68:	687b      	ldr	r3, [r7, #4]
 8019f6a:	2200      	movs	r2, #0
 8019f6c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8019f70:	6878      	ldr	r0, [r7, #4]
 8019f72:	f7f9 fe23 	bl	8013bbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8019f76:	687b      	ldr	r3, [r7, #4]
 8019f78:	2202      	movs	r2, #2
 8019f7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8019f7e:	687b      	ldr	r3, [r7, #4]
 8019f80:	681b      	ldr	r3, [r3, #0]
 8019f82:	681a      	ldr	r2, [r3, #0]
 8019f84:	687b      	ldr	r3, [r7, #4]
 8019f86:	681b      	ldr	r3, [r3, #0]
 8019f88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8019f8c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8019f8e:	687b      	ldr	r3, [r7, #4]
 8019f90:	68db      	ldr	r3, [r3, #12]
 8019f92:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8019f96:	d902      	bls.n	8019f9e <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8019f98:	2300      	movs	r3, #0
 8019f9a:	60fb      	str	r3, [r7, #12]
 8019f9c:	e002      	b.n	8019fa4 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8019f9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8019fa2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8019fa4:	687b      	ldr	r3, [r7, #4]
 8019fa6:	68db      	ldr	r3, [r3, #12]
 8019fa8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8019fac:	d007      	beq.n	8019fbe <HAL_SPI_Init+0xa0>
 8019fae:	687b      	ldr	r3, [r7, #4]
 8019fb0:	68db      	ldr	r3, [r3, #12]
 8019fb2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8019fb6:	d002      	beq.n	8019fbe <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8019fb8:	687b      	ldr	r3, [r7, #4]
 8019fba:	2200      	movs	r2, #0
 8019fbc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8019fbe:	687b      	ldr	r3, [r7, #4]
 8019fc0:	685b      	ldr	r3, [r3, #4]
 8019fc2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8019fc6:	687b      	ldr	r3, [r7, #4]
 8019fc8:	689b      	ldr	r3, [r3, #8]
 8019fca:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8019fce:	431a      	orrs	r2, r3
 8019fd0:	687b      	ldr	r3, [r7, #4]
 8019fd2:	691b      	ldr	r3, [r3, #16]
 8019fd4:	f003 0302 	and.w	r3, r3, #2
 8019fd8:	431a      	orrs	r2, r3
 8019fda:	687b      	ldr	r3, [r7, #4]
 8019fdc:	695b      	ldr	r3, [r3, #20]
 8019fde:	f003 0301 	and.w	r3, r3, #1
 8019fe2:	431a      	orrs	r2, r3
 8019fe4:	687b      	ldr	r3, [r7, #4]
 8019fe6:	699b      	ldr	r3, [r3, #24]
 8019fe8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8019fec:	431a      	orrs	r2, r3
 8019fee:	687b      	ldr	r3, [r7, #4]
 8019ff0:	69db      	ldr	r3, [r3, #28]
 8019ff2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8019ff6:	431a      	orrs	r2, r3
 8019ff8:	687b      	ldr	r3, [r7, #4]
 8019ffa:	6a1b      	ldr	r3, [r3, #32]
 8019ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a000:	ea42 0103 	orr.w	r1, r2, r3
 801a004:	687b      	ldr	r3, [r7, #4]
 801a006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a008:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 801a00c:	687b      	ldr	r3, [r7, #4]
 801a00e:	681b      	ldr	r3, [r3, #0]
 801a010:	430a      	orrs	r2, r1
 801a012:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 801a014:	687b      	ldr	r3, [r7, #4]
 801a016:	699b      	ldr	r3, [r3, #24]
 801a018:	0c1b      	lsrs	r3, r3, #16
 801a01a:	f003 0204 	and.w	r2, r3, #4
 801a01e:	687b      	ldr	r3, [r7, #4]
 801a020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a022:	f003 0310 	and.w	r3, r3, #16
 801a026:	431a      	orrs	r2, r3
 801a028:	687b      	ldr	r3, [r7, #4]
 801a02a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a02c:	f003 0308 	and.w	r3, r3, #8
 801a030:	431a      	orrs	r2, r3
 801a032:	687b      	ldr	r3, [r7, #4]
 801a034:	68db      	ldr	r3, [r3, #12]
 801a036:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801a03a:	ea42 0103 	orr.w	r1, r2, r3
 801a03e:	68fb      	ldr	r3, [r7, #12]
 801a040:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 801a044:	687b      	ldr	r3, [r7, #4]
 801a046:	681b      	ldr	r3, [r3, #0]
 801a048:	430a      	orrs	r2, r1
 801a04a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801a04c:	687b      	ldr	r3, [r7, #4]
 801a04e:	681b      	ldr	r3, [r3, #0]
 801a050:	69da      	ldr	r2, [r3, #28]
 801a052:	687b      	ldr	r3, [r7, #4]
 801a054:	681b      	ldr	r3, [r3, #0]
 801a056:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801a05a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801a05c:	687b      	ldr	r3, [r7, #4]
 801a05e:	2200      	movs	r2, #0
 801a060:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 801a062:	687b      	ldr	r3, [r7, #4]
 801a064:	2201      	movs	r2, #1
 801a066:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 801a06a:	2300      	movs	r3, #0
}
 801a06c:	4618      	mov	r0, r3
 801a06e:	3710      	adds	r7, #16
 801a070:	46bd      	mov	sp, r7
 801a072:	bd80      	pop	{r7, pc}

0801a074 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801a074:	b580      	push	{r7, lr}
 801a076:	b088      	sub	sp, #32
 801a078:	af00      	add	r7, sp, #0
 801a07a:	60f8      	str	r0, [r7, #12]
 801a07c:	60b9      	str	r1, [r7, #8]
 801a07e:	603b      	str	r3, [r7, #0]
 801a080:	4613      	mov	r3, r2
 801a082:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801a084:	2300      	movs	r3, #0
 801a086:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801a088:	68fb      	ldr	r3, [r7, #12]
 801a08a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801a08e:	2b01      	cmp	r3, #1
 801a090:	d101      	bne.n	801a096 <HAL_SPI_Transmit+0x22>
 801a092:	2302      	movs	r3, #2
 801a094:	e158      	b.n	801a348 <HAL_SPI_Transmit+0x2d4>
 801a096:	68fb      	ldr	r3, [r7, #12]
 801a098:	2201      	movs	r2, #1
 801a09a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801a09e:	f7fb fa77 	bl	8015590 <HAL_GetTick>
 801a0a2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 801a0a4:	88fb      	ldrh	r3, [r7, #6]
 801a0a6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 801a0a8:	68fb      	ldr	r3, [r7, #12]
 801a0aa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801a0ae:	b2db      	uxtb	r3, r3
 801a0b0:	2b01      	cmp	r3, #1
 801a0b2:	d002      	beq.n	801a0ba <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 801a0b4:	2302      	movs	r3, #2
 801a0b6:	77fb      	strb	r3, [r7, #31]
    goto error;
 801a0b8:	e13d      	b.n	801a336 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 801a0ba:	68bb      	ldr	r3, [r7, #8]
 801a0bc:	2b00      	cmp	r3, #0
 801a0be:	d002      	beq.n	801a0c6 <HAL_SPI_Transmit+0x52>
 801a0c0:	88fb      	ldrh	r3, [r7, #6]
 801a0c2:	2b00      	cmp	r3, #0
 801a0c4:	d102      	bne.n	801a0cc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 801a0c6:	2301      	movs	r3, #1
 801a0c8:	77fb      	strb	r3, [r7, #31]
    goto error;
 801a0ca:	e134      	b.n	801a336 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801a0cc:	68fb      	ldr	r3, [r7, #12]
 801a0ce:	2203      	movs	r2, #3
 801a0d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801a0d4:	68fb      	ldr	r3, [r7, #12]
 801a0d6:	2200      	movs	r2, #0
 801a0d8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801a0da:	68fb      	ldr	r3, [r7, #12]
 801a0dc:	68ba      	ldr	r2, [r7, #8]
 801a0de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 801a0e0:	68fb      	ldr	r3, [r7, #12]
 801a0e2:	88fa      	ldrh	r2, [r7, #6]
 801a0e4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 801a0e6:	68fb      	ldr	r3, [r7, #12]
 801a0e8:	88fa      	ldrh	r2, [r7, #6]
 801a0ea:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801a0ec:	68fb      	ldr	r3, [r7, #12]
 801a0ee:	2200      	movs	r2, #0
 801a0f0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 801a0f2:	68fb      	ldr	r3, [r7, #12]
 801a0f4:	2200      	movs	r2, #0
 801a0f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 801a0fa:	68fb      	ldr	r3, [r7, #12]
 801a0fc:	2200      	movs	r2, #0
 801a0fe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 801a102:	68fb      	ldr	r3, [r7, #12]
 801a104:	2200      	movs	r2, #0
 801a106:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 801a108:	68fb      	ldr	r3, [r7, #12]
 801a10a:	2200      	movs	r2, #0
 801a10c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801a10e:	68fb      	ldr	r3, [r7, #12]
 801a110:	689b      	ldr	r3, [r3, #8]
 801a112:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801a116:	d10f      	bne.n	801a138 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801a118:	68fb      	ldr	r3, [r7, #12]
 801a11a:	681b      	ldr	r3, [r3, #0]
 801a11c:	681a      	ldr	r2, [r3, #0]
 801a11e:	68fb      	ldr	r3, [r7, #12]
 801a120:	681b      	ldr	r3, [r3, #0]
 801a122:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801a126:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801a128:	68fb      	ldr	r3, [r7, #12]
 801a12a:	681b      	ldr	r3, [r3, #0]
 801a12c:	681a      	ldr	r2, [r3, #0]
 801a12e:	68fb      	ldr	r3, [r7, #12]
 801a130:	681b      	ldr	r3, [r3, #0]
 801a132:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801a136:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801a138:	68fb      	ldr	r3, [r7, #12]
 801a13a:	681b      	ldr	r3, [r3, #0]
 801a13c:	681b      	ldr	r3, [r3, #0]
 801a13e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a142:	2b40      	cmp	r3, #64	; 0x40
 801a144:	d007      	beq.n	801a156 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801a146:	68fb      	ldr	r3, [r7, #12]
 801a148:	681b      	ldr	r3, [r3, #0]
 801a14a:	681a      	ldr	r2, [r3, #0]
 801a14c:	68fb      	ldr	r3, [r7, #12]
 801a14e:	681b      	ldr	r3, [r3, #0]
 801a150:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801a154:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801a156:	68fb      	ldr	r3, [r7, #12]
 801a158:	68db      	ldr	r3, [r3, #12]
 801a15a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801a15e:	d94b      	bls.n	801a1f8 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801a160:	68fb      	ldr	r3, [r7, #12]
 801a162:	685b      	ldr	r3, [r3, #4]
 801a164:	2b00      	cmp	r3, #0
 801a166:	d002      	beq.n	801a16e <HAL_SPI_Transmit+0xfa>
 801a168:	8afb      	ldrh	r3, [r7, #22]
 801a16a:	2b01      	cmp	r3, #1
 801a16c:	d13e      	bne.n	801a1ec <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801a16e:	68fb      	ldr	r3, [r7, #12]
 801a170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a172:	881a      	ldrh	r2, [r3, #0]
 801a174:	68fb      	ldr	r3, [r7, #12]
 801a176:	681b      	ldr	r3, [r3, #0]
 801a178:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801a17a:	68fb      	ldr	r3, [r7, #12]
 801a17c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a17e:	1c9a      	adds	r2, r3, #2
 801a180:	68fb      	ldr	r3, [r7, #12]
 801a182:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801a184:	68fb      	ldr	r3, [r7, #12]
 801a186:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a188:	b29b      	uxth	r3, r3
 801a18a:	3b01      	subs	r3, #1
 801a18c:	b29a      	uxth	r2, r3
 801a18e:	68fb      	ldr	r3, [r7, #12]
 801a190:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 801a192:	e02b      	b.n	801a1ec <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801a194:	68fb      	ldr	r3, [r7, #12]
 801a196:	681b      	ldr	r3, [r3, #0]
 801a198:	689b      	ldr	r3, [r3, #8]
 801a19a:	f003 0302 	and.w	r3, r3, #2
 801a19e:	2b02      	cmp	r3, #2
 801a1a0:	d112      	bne.n	801a1c8 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801a1a2:	68fb      	ldr	r3, [r7, #12]
 801a1a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a1a6:	881a      	ldrh	r2, [r3, #0]
 801a1a8:	68fb      	ldr	r3, [r7, #12]
 801a1aa:	681b      	ldr	r3, [r3, #0]
 801a1ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801a1ae:	68fb      	ldr	r3, [r7, #12]
 801a1b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a1b2:	1c9a      	adds	r2, r3, #2
 801a1b4:	68fb      	ldr	r3, [r7, #12]
 801a1b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801a1b8:	68fb      	ldr	r3, [r7, #12]
 801a1ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a1bc:	b29b      	uxth	r3, r3
 801a1be:	3b01      	subs	r3, #1
 801a1c0:	b29a      	uxth	r2, r3
 801a1c2:	68fb      	ldr	r3, [r7, #12]
 801a1c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 801a1c6:	e011      	b.n	801a1ec <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801a1c8:	f7fb f9e2 	bl	8015590 <HAL_GetTick>
 801a1cc:	4602      	mov	r2, r0
 801a1ce:	69bb      	ldr	r3, [r7, #24]
 801a1d0:	1ad3      	subs	r3, r2, r3
 801a1d2:	683a      	ldr	r2, [r7, #0]
 801a1d4:	429a      	cmp	r2, r3
 801a1d6:	d803      	bhi.n	801a1e0 <HAL_SPI_Transmit+0x16c>
 801a1d8:	683b      	ldr	r3, [r7, #0]
 801a1da:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a1de:	d102      	bne.n	801a1e6 <HAL_SPI_Transmit+0x172>
 801a1e0:	683b      	ldr	r3, [r7, #0]
 801a1e2:	2b00      	cmp	r3, #0
 801a1e4:	d102      	bne.n	801a1ec <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 801a1e6:	2303      	movs	r3, #3
 801a1e8:	77fb      	strb	r3, [r7, #31]
          goto error;
 801a1ea:	e0a4      	b.n	801a336 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801a1ec:	68fb      	ldr	r3, [r7, #12]
 801a1ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a1f0:	b29b      	uxth	r3, r3
 801a1f2:	2b00      	cmp	r3, #0
 801a1f4:	d1ce      	bne.n	801a194 <HAL_SPI_Transmit+0x120>
 801a1f6:	e07c      	b.n	801a2f2 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801a1f8:	68fb      	ldr	r3, [r7, #12]
 801a1fa:	685b      	ldr	r3, [r3, #4]
 801a1fc:	2b00      	cmp	r3, #0
 801a1fe:	d002      	beq.n	801a206 <HAL_SPI_Transmit+0x192>
 801a200:	8afb      	ldrh	r3, [r7, #22]
 801a202:	2b01      	cmp	r3, #1
 801a204:	d170      	bne.n	801a2e8 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 801a206:	68fb      	ldr	r3, [r7, #12]
 801a208:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a20a:	b29b      	uxth	r3, r3
 801a20c:	2b01      	cmp	r3, #1
 801a20e:	d912      	bls.n	801a236 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801a210:	68fb      	ldr	r3, [r7, #12]
 801a212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a214:	881a      	ldrh	r2, [r3, #0]
 801a216:	68fb      	ldr	r3, [r7, #12]
 801a218:	681b      	ldr	r3, [r3, #0]
 801a21a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801a21c:	68fb      	ldr	r3, [r7, #12]
 801a21e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a220:	1c9a      	adds	r2, r3, #2
 801a222:	68fb      	ldr	r3, [r7, #12]
 801a224:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801a226:	68fb      	ldr	r3, [r7, #12]
 801a228:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a22a:	b29b      	uxth	r3, r3
 801a22c:	3b02      	subs	r3, #2
 801a22e:	b29a      	uxth	r2, r3
 801a230:	68fb      	ldr	r3, [r7, #12]
 801a232:	87da      	strh	r2, [r3, #62]	; 0x3e
 801a234:	e058      	b.n	801a2e8 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801a236:	68fb      	ldr	r3, [r7, #12]
 801a238:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a23a:	68fb      	ldr	r3, [r7, #12]
 801a23c:	681b      	ldr	r3, [r3, #0]
 801a23e:	330c      	adds	r3, #12
 801a240:	7812      	ldrb	r2, [r2, #0]
 801a242:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 801a244:	68fb      	ldr	r3, [r7, #12]
 801a246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a248:	1c5a      	adds	r2, r3, #1
 801a24a:	68fb      	ldr	r3, [r7, #12]
 801a24c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801a24e:	68fb      	ldr	r3, [r7, #12]
 801a250:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a252:	b29b      	uxth	r3, r3
 801a254:	3b01      	subs	r3, #1
 801a256:	b29a      	uxth	r2, r3
 801a258:	68fb      	ldr	r3, [r7, #12]
 801a25a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 801a25c:	e044      	b.n	801a2e8 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801a25e:	68fb      	ldr	r3, [r7, #12]
 801a260:	681b      	ldr	r3, [r3, #0]
 801a262:	689b      	ldr	r3, [r3, #8]
 801a264:	f003 0302 	and.w	r3, r3, #2
 801a268:	2b02      	cmp	r3, #2
 801a26a:	d12b      	bne.n	801a2c4 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 801a26c:	68fb      	ldr	r3, [r7, #12]
 801a26e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a270:	b29b      	uxth	r3, r3
 801a272:	2b01      	cmp	r3, #1
 801a274:	d912      	bls.n	801a29c <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801a276:	68fb      	ldr	r3, [r7, #12]
 801a278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a27a:	881a      	ldrh	r2, [r3, #0]
 801a27c:	68fb      	ldr	r3, [r7, #12]
 801a27e:	681b      	ldr	r3, [r3, #0]
 801a280:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801a282:	68fb      	ldr	r3, [r7, #12]
 801a284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a286:	1c9a      	adds	r2, r3, #2
 801a288:	68fb      	ldr	r3, [r7, #12]
 801a28a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801a28c:	68fb      	ldr	r3, [r7, #12]
 801a28e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a290:	b29b      	uxth	r3, r3
 801a292:	3b02      	subs	r3, #2
 801a294:	b29a      	uxth	r2, r3
 801a296:	68fb      	ldr	r3, [r7, #12]
 801a298:	87da      	strh	r2, [r3, #62]	; 0x3e
 801a29a:	e025      	b.n	801a2e8 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801a29c:	68fb      	ldr	r3, [r7, #12]
 801a29e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a2a0:	68fb      	ldr	r3, [r7, #12]
 801a2a2:	681b      	ldr	r3, [r3, #0]
 801a2a4:	330c      	adds	r3, #12
 801a2a6:	7812      	ldrb	r2, [r2, #0]
 801a2a8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801a2aa:	68fb      	ldr	r3, [r7, #12]
 801a2ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a2ae:	1c5a      	adds	r2, r3, #1
 801a2b0:	68fb      	ldr	r3, [r7, #12]
 801a2b2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801a2b4:	68fb      	ldr	r3, [r7, #12]
 801a2b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a2b8:	b29b      	uxth	r3, r3
 801a2ba:	3b01      	subs	r3, #1
 801a2bc:	b29a      	uxth	r2, r3
 801a2be:	68fb      	ldr	r3, [r7, #12]
 801a2c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 801a2c2:	e011      	b.n	801a2e8 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801a2c4:	f7fb f964 	bl	8015590 <HAL_GetTick>
 801a2c8:	4602      	mov	r2, r0
 801a2ca:	69bb      	ldr	r3, [r7, #24]
 801a2cc:	1ad3      	subs	r3, r2, r3
 801a2ce:	683a      	ldr	r2, [r7, #0]
 801a2d0:	429a      	cmp	r2, r3
 801a2d2:	d803      	bhi.n	801a2dc <HAL_SPI_Transmit+0x268>
 801a2d4:	683b      	ldr	r3, [r7, #0]
 801a2d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a2da:	d102      	bne.n	801a2e2 <HAL_SPI_Transmit+0x26e>
 801a2dc:	683b      	ldr	r3, [r7, #0]
 801a2de:	2b00      	cmp	r3, #0
 801a2e0:	d102      	bne.n	801a2e8 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 801a2e2:	2303      	movs	r3, #3
 801a2e4:	77fb      	strb	r3, [r7, #31]
          goto error;
 801a2e6:	e026      	b.n	801a336 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801a2e8:	68fb      	ldr	r3, [r7, #12]
 801a2ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a2ec:	b29b      	uxth	r3, r3
 801a2ee:	2b00      	cmp	r3, #0
 801a2f0:	d1b5      	bne.n	801a25e <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801a2f2:	69ba      	ldr	r2, [r7, #24]
 801a2f4:	6839      	ldr	r1, [r7, #0]
 801a2f6:	68f8      	ldr	r0, [r7, #12]
 801a2f8:	f000 fd08 	bl	801ad0c <SPI_EndRxTxTransaction>
 801a2fc:	4603      	mov	r3, r0
 801a2fe:	2b00      	cmp	r3, #0
 801a300:	d002      	beq.n	801a308 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801a302:	68fb      	ldr	r3, [r7, #12]
 801a304:	2220      	movs	r2, #32
 801a306:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801a308:	68fb      	ldr	r3, [r7, #12]
 801a30a:	689b      	ldr	r3, [r3, #8]
 801a30c:	2b00      	cmp	r3, #0
 801a30e:	d10a      	bne.n	801a326 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801a310:	2300      	movs	r3, #0
 801a312:	613b      	str	r3, [r7, #16]
 801a314:	68fb      	ldr	r3, [r7, #12]
 801a316:	681b      	ldr	r3, [r3, #0]
 801a318:	68db      	ldr	r3, [r3, #12]
 801a31a:	613b      	str	r3, [r7, #16]
 801a31c:	68fb      	ldr	r3, [r7, #12]
 801a31e:	681b      	ldr	r3, [r3, #0]
 801a320:	689b      	ldr	r3, [r3, #8]
 801a322:	613b      	str	r3, [r7, #16]
 801a324:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801a326:	68fb      	ldr	r3, [r7, #12]
 801a328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a32a:	2b00      	cmp	r3, #0
 801a32c:	d002      	beq.n	801a334 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 801a32e:	2301      	movs	r3, #1
 801a330:	77fb      	strb	r3, [r7, #31]
 801a332:	e000      	b.n	801a336 <HAL_SPI_Transmit+0x2c2>
  }

error:
 801a334:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801a336:	68fb      	ldr	r3, [r7, #12]
 801a338:	2201      	movs	r2, #1
 801a33a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801a33e:	68fb      	ldr	r3, [r7, #12]
 801a340:	2200      	movs	r2, #0
 801a342:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801a346:	7ffb      	ldrb	r3, [r7, #31]
}
 801a348:	4618      	mov	r0, r3
 801a34a:	3720      	adds	r7, #32
 801a34c:	46bd      	mov	sp, r7
 801a34e:	bd80      	pop	{r7, pc}

0801a350 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801a350:	b580      	push	{r7, lr}
 801a352:	b088      	sub	sp, #32
 801a354:	af02      	add	r7, sp, #8
 801a356:	60f8      	str	r0, [r7, #12]
 801a358:	60b9      	str	r1, [r7, #8]
 801a35a:	603b      	str	r3, [r7, #0]
 801a35c:	4613      	mov	r3, r2
 801a35e:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801a360:	2300      	movs	r3, #0
 801a362:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801a364:	68fb      	ldr	r3, [r7, #12]
 801a366:	685b      	ldr	r3, [r3, #4]
 801a368:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801a36c:	d112      	bne.n	801a394 <HAL_SPI_Receive+0x44>
 801a36e:	68fb      	ldr	r3, [r7, #12]
 801a370:	689b      	ldr	r3, [r3, #8]
 801a372:	2b00      	cmp	r3, #0
 801a374:	d10e      	bne.n	801a394 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801a376:	68fb      	ldr	r3, [r7, #12]
 801a378:	2204      	movs	r2, #4
 801a37a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 801a37e:	88fa      	ldrh	r2, [r7, #6]
 801a380:	683b      	ldr	r3, [r7, #0]
 801a382:	9300      	str	r3, [sp, #0]
 801a384:	4613      	mov	r3, r2
 801a386:	68ba      	ldr	r2, [r7, #8]
 801a388:	68b9      	ldr	r1, [r7, #8]
 801a38a:	68f8      	ldr	r0, [r7, #12]
 801a38c:	f000 f910 	bl	801a5b0 <HAL_SPI_TransmitReceive>
 801a390:	4603      	mov	r3, r0
 801a392:	e109      	b.n	801a5a8 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801a394:	68fb      	ldr	r3, [r7, #12]
 801a396:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801a39a:	2b01      	cmp	r3, #1
 801a39c:	d101      	bne.n	801a3a2 <HAL_SPI_Receive+0x52>
 801a39e:	2302      	movs	r3, #2
 801a3a0:	e102      	b.n	801a5a8 <HAL_SPI_Receive+0x258>
 801a3a2:	68fb      	ldr	r3, [r7, #12]
 801a3a4:	2201      	movs	r2, #1
 801a3a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801a3aa:	f7fb f8f1 	bl	8015590 <HAL_GetTick>
 801a3ae:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 801a3b0:	68fb      	ldr	r3, [r7, #12]
 801a3b2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801a3b6:	b2db      	uxtb	r3, r3
 801a3b8:	2b01      	cmp	r3, #1
 801a3ba:	d002      	beq.n	801a3c2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 801a3bc:	2302      	movs	r3, #2
 801a3be:	75fb      	strb	r3, [r7, #23]
    goto error;
 801a3c0:	e0e9      	b.n	801a596 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 801a3c2:	68bb      	ldr	r3, [r7, #8]
 801a3c4:	2b00      	cmp	r3, #0
 801a3c6:	d002      	beq.n	801a3ce <HAL_SPI_Receive+0x7e>
 801a3c8:	88fb      	ldrh	r3, [r7, #6]
 801a3ca:	2b00      	cmp	r3, #0
 801a3cc:	d102      	bne.n	801a3d4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 801a3ce:	2301      	movs	r3, #1
 801a3d0:	75fb      	strb	r3, [r7, #23]
    goto error;
 801a3d2:	e0e0      	b.n	801a596 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801a3d4:	68fb      	ldr	r3, [r7, #12]
 801a3d6:	2204      	movs	r2, #4
 801a3d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801a3dc:	68fb      	ldr	r3, [r7, #12]
 801a3de:	2200      	movs	r2, #0
 801a3e0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801a3e2:	68fb      	ldr	r3, [r7, #12]
 801a3e4:	68ba      	ldr	r2, [r7, #8]
 801a3e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 801a3e8:	68fb      	ldr	r3, [r7, #12]
 801a3ea:	88fa      	ldrh	r2, [r7, #6]
 801a3ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 801a3f0:	68fb      	ldr	r3, [r7, #12]
 801a3f2:	88fa      	ldrh	r2, [r7, #6]
 801a3f4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801a3f8:	68fb      	ldr	r3, [r7, #12]
 801a3fa:	2200      	movs	r2, #0
 801a3fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 801a3fe:	68fb      	ldr	r3, [r7, #12]
 801a400:	2200      	movs	r2, #0
 801a402:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 801a404:	68fb      	ldr	r3, [r7, #12]
 801a406:	2200      	movs	r2, #0
 801a408:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 801a40a:	68fb      	ldr	r3, [r7, #12]
 801a40c:	2200      	movs	r2, #0
 801a40e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801a410:	68fb      	ldr	r3, [r7, #12]
 801a412:	2200      	movs	r2, #0
 801a414:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801a416:	68fb      	ldr	r3, [r7, #12]
 801a418:	68db      	ldr	r3, [r3, #12]
 801a41a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801a41e:	d908      	bls.n	801a432 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801a420:	68fb      	ldr	r3, [r7, #12]
 801a422:	681b      	ldr	r3, [r3, #0]
 801a424:	685a      	ldr	r2, [r3, #4]
 801a426:	68fb      	ldr	r3, [r7, #12]
 801a428:	681b      	ldr	r3, [r3, #0]
 801a42a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801a42e:	605a      	str	r2, [r3, #4]
 801a430:	e007      	b.n	801a442 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801a432:	68fb      	ldr	r3, [r7, #12]
 801a434:	681b      	ldr	r3, [r3, #0]
 801a436:	685a      	ldr	r2, [r3, #4]
 801a438:	68fb      	ldr	r3, [r7, #12]
 801a43a:	681b      	ldr	r3, [r3, #0]
 801a43c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801a440:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801a442:	68fb      	ldr	r3, [r7, #12]
 801a444:	689b      	ldr	r3, [r3, #8]
 801a446:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801a44a:	d10f      	bne.n	801a46c <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801a44c:	68fb      	ldr	r3, [r7, #12]
 801a44e:	681b      	ldr	r3, [r3, #0]
 801a450:	681a      	ldr	r2, [r3, #0]
 801a452:	68fb      	ldr	r3, [r7, #12]
 801a454:	681b      	ldr	r3, [r3, #0]
 801a456:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801a45a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 801a45c:	68fb      	ldr	r3, [r7, #12]
 801a45e:	681b      	ldr	r3, [r3, #0]
 801a460:	681a      	ldr	r2, [r3, #0]
 801a462:	68fb      	ldr	r3, [r7, #12]
 801a464:	681b      	ldr	r3, [r3, #0]
 801a466:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801a46a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801a46c:	68fb      	ldr	r3, [r7, #12]
 801a46e:	681b      	ldr	r3, [r3, #0]
 801a470:	681b      	ldr	r3, [r3, #0]
 801a472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a476:	2b40      	cmp	r3, #64	; 0x40
 801a478:	d007      	beq.n	801a48a <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801a47a:	68fb      	ldr	r3, [r7, #12]
 801a47c:	681b      	ldr	r3, [r3, #0]
 801a47e:	681a      	ldr	r2, [r3, #0]
 801a480:	68fb      	ldr	r3, [r7, #12]
 801a482:	681b      	ldr	r3, [r3, #0]
 801a484:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801a488:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 801a48a:	68fb      	ldr	r3, [r7, #12]
 801a48c:	68db      	ldr	r3, [r3, #12]
 801a48e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801a492:	d867      	bhi.n	801a564 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 801a494:	e030      	b.n	801a4f8 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801a496:	68fb      	ldr	r3, [r7, #12]
 801a498:	681b      	ldr	r3, [r3, #0]
 801a49a:	689b      	ldr	r3, [r3, #8]
 801a49c:	f003 0301 	and.w	r3, r3, #1
 801a4a0:	2b01      	cmp	r3, #1
 801a4a2:	d117      	bne.n	801a4d4 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801a4a4:	68fb      	ldr	r3, [r7, #12]
 801a4a6:	681b      	ldr	r3, [r3, #0]
 801a4a8:	f103 020c 	add.w	r2, r3, #12
 801a4ac:	68fb      	ldr	r3, [r7, #12]
 801a4ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a4b0:	7812      	ldrb	r2, [r2, #0]
 801a4b2:	b2d2      	uxtb	r2, r2
 801a4b4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801a4b6:	68fb      	ldr	r3, [r7, #12]
 801a4b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a4ba:	1c5a      	adds	r2, r3, #1
 801a4bc:	68fb      	ldr	r3, [r7, #12]
 801a4be:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801a4c0:	68fb      	ldr	r3, [r7, #12]
 801a4c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801a4c6:	b29b      	uxth	r3, r3
 801a4c8:	3b01      	subs	r3, #1
 801a4ca:	b29a      	uxth	r2, r3
 801a4cc:	68fb      	ldr	r3, [r7, #12]
 801a4ce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801a4d2:	e011      	b.n	801a4f8 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801a4d4:	f7fb f85c 	bl	8015590 <HAL_GetTick>
 801a4d8:	4602      	mov	r2, r0
 801a4da:	693b      	ldr	r3, [r7, #16]
 801a4dc:	1ad3      	subs	r3, r2, r3
 801a4de:	683a      	ldr	r2, [r7, #0]
 801a4e0:	429a      	cmp	r2, r3
 801a4e2:	d803      	bhi.n	801a4ec <HAL_SPI_Receive+0x19c>
 801a4e4:	683b      	ldr	r3, [r7, #0]
 801a4e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a4ea:	d102      	bne.n	801a4f2 <HAL_SPI_Receive+0x1a2>
 801a4ec:	683b      	ldr	r3, [r7, #0]
 801a4ee:	2b00      	cmp	r3, #0
 801a4f0:	d102      	bne.n	801a4f8 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 801a4f2:	2303      	movs	r3, #3
 801a4f4:	75fb      	strb	r3, [r7, #23]
          goto error;
 801a4f6:	e04e      	b.n	801a596 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 801a4f8:	68fb      	ldr	r3, [r7, #12]
 801a4fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801a4fe:	b29b      	uxth	r3, r3
 801a500:	2b00      	cmp	r3, #0
 801a502:	d1c8      	bne.n	801a496 <HAL_SPI_Receive+0x146>
 801a504:	e034      	b.n	801a570 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801a506:	68fb      	ldr	r3, [r7, #12]
 801a508:	681b      	ldr	r3, [r3, #0]
 801a50a:	689b      	ldr	r3, [r3, #8]
 801a50c:	f003 0301 	and.w	r3, r3, #1
 801a510:	2b01      	cmp	r3, #1
 801a512:	d115      	bne.n	801a540 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801a514:	68fb      	ldr	r3, [r7, #12]
 801a516:	681b      	ldr	r3, [r3, #0]
 801a518:	68da      	ldr	r2, [r3, #12]
 801a51a:	68fb      	ldr	r3, [r7, #12]
 801a51c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a51e:	b292      	uxth	r2, r2
 801a520:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801a522:	68fb      	ldr	r3, [r7, #12]
 801a524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a526:	1c9a      	adds	r2, r3, #2
 801a528:	68fb      	ldr	r3, [r7, #12]
 801a52a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801a52c:	68fb      	ldr	r3, [r7, #12]
 801a52e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801a532:	b29b      	uxth	r3, r3
 801a534:	3b01      	subs	r3, #1
 801a536:	b29a      	uxth	r2, r3
 801a538:	68fb      	ldr	r3, [r7, #12]
 801a53a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801a53e:	e011      	b.n	801a564 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801a540:	f7fb f826 	bl	8015590 <HAL_GetTick>
 801a544:	4602      	mov	r2, r0
 801a546:	693b      	ldr	r3, [r7, #16]
 801a548:	1ad3      	subs	r3, r2, r3
 801a54a:	683a      	ldr	r2, [r7, #0]
 801a54c:	429a      	cmp	r2, r3
 801a54e:	d803      	bhi.n	801a558 <HAL_SPI_Receive+0x208>
 801a550:	683b      	ldr	r3, [r7, #0]
 801a552:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a556:	d102      	bne.n	801a55e <HAL_SPI_Receive+0x20e>
 801a558:	683b      	ldr	r3, [r7, #0]
 801a55a:	2b00      	cmp	r3, #0
 801a55c:	d102      	bne.n	801a564 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 801a55e:	2303      	movs	r3, #3
 801a560:	75fb      	strb	r3, [r7, #23]
          goto error;
 801a562:	e018      	b.n	801a596 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 801a564:	68fb      	ldr	r3, [r7, #12]
 801a566:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801a56a:	b29b      	uxth	r3, r3
 801a56c:	2b00      	cmp	r3, #0
 801a56e:	d1ca      	bne.n	801a506 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801a570:	693a      	ldr	r2, [r7, #16]
 801a572:	6839      	ldr	r1, [r7, #0]
 801a574:	68f8      	ldr	r0, [r7, #12]
 801a576:	f000 fb4d 	bl	801ac14 <SPI_EndRxTransaction>
 801a57a:	4603      	mov	r3, r0
 801a57c:	2b00      	cmp	r3, #0
 801a57e:	d002      	beq.n	801a586 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801a580:	68fb      	ldr	r3, [r7, #12]
 801a582:	2220      	movs	r2, #32
 801a584:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801a586:	68fb      	ldr	r3, [r7, #12]
 801a588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a58a:	2b00      	cmp	r3, #0
 801a58c:	d002      	beq.n	801a594 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 801a58e:	2301      	movs	r3, #1
 801a590:	75fb      	strb	r3, [r7, #23]
 801a592:	e000      	b.n	801a596 <HAL_SPI_Receive+0x246>
  }

error :
 801a594:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801a596:	68fb      	ldr	r3, [r7, #12]
 801a598:	2201      	movs	r2, #1
 801a59a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801a59e:	68fb      	ldr	r3, [r7, #12]
 801a5a0:	2200      	movs	r2, #0
 801a5a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801a5a6:	7dfb      	ldrb	r3, [r7, #23]
}
 801a5a8:	4618      	mov	r0, r3
 801a5aa:	3718      	adds	r7, #24
 801a5ac:	46bd      	mov	sp, r7
 801a5ae:	bd80      	pop	{r7, pc}

0801a5b0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 801a5b0:	b580      	push	{r7, lr}
 801a5b2:	b08a      	sub	sp, #40	; 0x28
 801a5b4:	af00      	add	r7, sp, #0
 801a5b6:	60f8      	str	r0, [r7, #12]
 801a5b8:	60b9      	str	r1, [r7, #8]
 801a5ba:	607a      	str	r2, [r7, #4]
 801a5bc:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801a5be:	2301      	movs	r3, #1
 801a5c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 801a5c2:	2300      	movs	r3, #0
 801a5c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801a5c8:	68fb      	ldr	r3, [r7, #12]
 801a5ca:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801a5ce:	2b01      	cmp	r3, #1
 801a5d0:	d101      	bne.n	801a5d6 <HAL_SPI_TransmitReceive+0x26>
 801a5d2:	2302      	movs	r3, #2
 801a5d4:	e1fb      	b.n	801a9ce <HAL_SPI_TransmitReceive+0x41e>
 801a5d6:	68fb      	ldr	r3, [r7, #12]
 801a5d8:	2201      	movs	r2, #1
 801a5da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801a5de:	f7fa ffd7 	bl	8015590 <HAL_GetTick>
 801a5e2:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801a5e4:	68fb      	ldr	r3, [r7, #12]
 801a5e6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801a5ea:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 801a5ec:	68fb      	ldr	r3, [r7, #12]
 801a5ee:	685b      	ldr	r3, [r3, #4]
 801a5f0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 801a5f2:	887b      	ldrh	r3, [r7, #2]
 801a5f4:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 801a5f6:	887b      	ldrh	r3, [r7, #2]
 801a5f8:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801a5fa:	7efb      	ldrb	r3, [r7, #27]
 801a5fc:	2b01      	cmp	r3, #1
 801a5fe:	d00e      	beq.n	801a61e <HAL_SPI_TransmitReceive+0x6e>
 801a600:	697b      	ldr	r3, [r7, #20]
 801a602:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801a606:	d106      	bne.n	801a616 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801a608:	68fb      	ldr	r3, [r7, #12]
 801a60a:	689b      	ldr	r3, [r3, #8]
 801a60c:	2b00      	cmp	r3, #0
 801a60e:	d102      	bne.n	801a616 <HAL_SPI_TransmitReceive+0x66>
 801a610:	7efb      	ldrb	r3, [r7, #27]
 801a612:	2b04      	cmp	r3, #4
 801a614:	d003      	beq.n	801a61e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 801a616:	2302      	movs	r3, #2
 801a618:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801a61c:	e1cd      	b.n	801a9ba <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801a61e:	68bb      	ldr	r3, [r7, #8]
 801a620:	2b00      	cmp	r3, #0
 801a622:	d005      	beq.n	801a630 <HAL_SPI_TransmitReceive+0x80>
 801a624:	687b      	ldr	r3, [r7, #4]
 801a626:	2b00      	cmp	r3, #0
 801a628:	d002      	beq.n	801a630 <HAL_SPI_TransmitReceive+0x80>
 801a62a:	887b      	ldrh	r3, [r7, #2]
 801a62c:	2b00      	cmp	r3, #0
 801a62e:	d103      	bne.n	801a638 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 801a630:	2301      	movs	r3, #1
 801a632:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801a636:	e1c0      	b.n	801a9ba <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801a638:	68fb      	ldr	r3, [r7, #12]
 801a63a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801a63e:	b2db      	uxtb	r3, r3
 801a640:	2b04      	cmp	r3, #4
 801a642:	d003      	beq.n	801a64c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801a644:	68fb      	ldr	r3, [r7, #12]
 801a646:	2205      	movs	r2, #5
 801a648:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801a64c:	68fb      	ldr	r3, [r7, #12]
 801a64e:	2200      	movs	r2, #0
 801a650:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801a652:	68fb      	ldr	r3, [r7, #12]
 801a654:	687a      	ldr	r2, [r7, #4]
 801a656:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 801a658:	68fb      	ldr	r3, [r7, #12]
 801a65a:	887a      	ldrh	r2, [r7, #2]
 801a65c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 801a660:	68fb      	ldr	r3, [r7, #12]
 801a662:	887a      	ldrh	r2, [r7, #2]
 801a664:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801a668:	68fb      	ldr	r3, [r7, #12]
 801a66a:	68ba      	ldr	r2, [r7, #8]
 801a66c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 801a66e:	68fb      	ldr	r3, [r7, #12]
 801a670:	887a      	ldrh	r2, [r7, #2]
 801a672:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 801a674:	68fb      	ldr	r3, [r7, #12]
 801a676:	887a      	ldrh	r2, [r7, #2]
 801a678:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801a67a:	68fb      	ldr	r3, [r7, #12]
 801a67c:	2200      	movs	r2, #0
 801a67e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801a680:	68fb      	ldr	r3, [r7, #12]
 801a682:	2200      	movs	r2, #0
 801a684:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 801a686:	68fb      	ldr	r3, [r7, #12]
 801a688:	68db      	ldr	r3, [r3, #12]
 801a68a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801a68e:	d802      	bhi.n	801a696 <HAL_SPI_TransmitReceive+0xe6>
 801a690:	8a3b      	ldrh	r3, [r7, #16]
 801a692:	2b01      	cmp	r3, #1
 801a694:	d908      	bls.n	801a6a8 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801a696:	68fb      	ldr	r3, [r7, #12]
 801a698:	681b      	ldr	r3, [r3, #0]
 801a69a:	685a      	ldr	r2, [r3, #4]
 801a69c:	68fb      	ldr	r3, [r7, #12]
 801a69e:	681b      	ldr	r3, [r3, #0]
 801a6a0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801a6a4:	605a      	str	r2, [r3, #4]
 801a6a6:	e007      	b.n	801a6b8 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801a6a8:	68fb      	ldr	r3, [r7, #12]
 801a6aa:	681b      	ldr	r3, [r3, #0]
 801a6ac:	685a      	ldr	r2, [r3, #4]
 801a6ae:	68fb      	ldr	r3, [r7, #12]
 801a6b0:	681b      	ldr	r3, [r3, #0]
 801a6b2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801a6b6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801a6b8:	68fb      	ldr	r3, [r7, #12]
 801a6ba:	681b      	ldr	r3, [r3, #0]
 801a6bc:	681b      	ldr	r3, [r3, #0]
 801a6be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a6c2:	2b40      	cmp	r3, #64	; 0x40
 801a6c4:	d007      	beq.n	801a6d6 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801a6c6:	68fb      	ldr	r3, [r7, #12]
 801a6c8:	681b      	ldr	r3, [r3, #0]
 801a6ca:	681a      	ldr	r2, [r3, #0]
 801a6cc:	68fb      	ldr	r3, [r7, #12]
 801a6ce:	681b      	ldr	r3, [r3, #0]
 801a6d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801a6d4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801a6d6:	68fb      	ldr	r3, [r7, #12]
 801a6d8:	68db      	ldr	r3, [r3, #12]
 801a6da:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801a6de:	d97c      	bls.n	801a7da <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801a6e0:	68fb      	ldr	r3, [r7, #12]
 801a6e2:	685b      	ldr	r3, [r3, #4]
 801a6e4:	2b00      	cmp	r3, #0
 801a6e6:	d002      	beq.n	801a6ee <HAL_SPI_TransmitReceive+0x13e>
 801a6e8:	8a7b      	ldrh	r3, [r7, #18]
 801a6ea:	2b01      	cmp	r3, #1
 801a6ec:	d169      	bne.n	801a7c2 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801a6ee:	68fb      	ldr	r3, [r7, #12]
 801a6f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a6f2:	881a      	ldrh	r2, [r3, #0]
 801a6f4:	68fb      	ldr	r3, [r7, #12]
 801a6f6:	681b      	ldr	r3, [r3, #0]
 801a6f8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801a6fa:	68fb      	ldr	r3, [r7, #12]
 801a6fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a6fe:	1c9a      	adds	r2, r3, #2
 801a700:	68fb      	ldr	r3, [r7, #12]
 801a702:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801a704:	68fb      	ldr	r3, [r7, #12]
 801a706:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a708:	b29b      	uxth	r3, r3
 801a70a:	3b01      	subs	r3, #1
 801a70c:	b29a      	uxth	r2, r3
 801a70e:	68fb      	ldr	r3, [r7, #12]
 801a710:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801a712:	e056      	b.n	801a7c2 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801a714:	68fb      	ldr	r3, [r7, #12]
 801a716:	681b      	ldr	r3, [r3, #0]
 801a718:	689b      	ldr	r3, [r3, #8]
 801a71a:	f003 0302 	and.w	r3, r3, #2
 801a71e:	2b02      	cmp	r3, #2
 801a720:	d11b      	bne.n	801a75a <HAL_SPI_TransmitReceive+0x1aa>
 801a722:	68fb      	ldr	r3, [r7, #12]
 801a724:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a726:	b29b      	uxth	r3, r3
 801a728:	2b00      	cmp	r3, #0
 801a72a:	d016      	beq.n	801a75a <HAL_SPI_TransmitReceive+0x1aa>
 801a72c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a72e:	2b01      	cmp	r3, #1
 801a730:	d113      	bne.n	801a75a <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801a732:	68fb      	ldr	r3, [r7, #12]
 801a734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a736:	881a      	ldrh	r2, [r3, #0]
 801a738:	68fb      	ldr	r3, [r7, #12]
 801a73a:	681b      	ldr	r3, [r3, #0]
 801a73c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801a73e:	68fb      	ldr	r3, [r7, #12]
 801a740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a742:	1c9a      	adds	r2, r3, #2
 801a744:	68fb      	ldr	r3, [r7, #12]
 801a746:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801a748:	68fb      	ldr	r3, [r7, #12]
 801a74a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a74c:	b29b      	uxth	r3, r3
 801a74e:	3b01      	subs	r3, #1
 801a750:	b29a      	uxth	r2, r3
 801a752:	68fb      	ldr	r3, [r7, #12]
 801a754:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801a756:	2300      	movs	r3, #0
 801a758:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801a75a:	68fb      	ldr	r3, [r7, #12]
 801a75c:	681b      	ldr	r3, [r3, #0]
 801a75e:	689b      	ldr	r3, [r3, #8]
 801a760:	f003 0301 	and.w	r3, r3, #1
 801a764:	2b01      	cmp	r3, #1
 801a766:	d11c      	bne.n	801a7a2 <HAL_SPI_TransmitReceive+0x1f2>
 801a768:	68fb      	ldr	r3, [r7, #12]
 801a76a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801a76e:	b29b      	uxth	r3, r3
 801a770:	2b00      	cmp	r3, #0
 801a772:	d016      	beq.n	801a7a2 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801a774:	68fb      	ldr	r3, [r7, #12]
 801a776:	681b      	ldr	r3, [r3, #0]
 801a778:	68da      	ldr	r2, [r3, #12]
 801a77a:	68fb      	ldr	r3, [r7, #12]
 801a77c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a77e:	b292      	uxth	r2, r2
 801a780:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801a782:	68fb      	ldr	r3, [r7, #12]
 801a784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a786:	1c9a      	adds	r2, r3, #2
 801a788:	68fb      	ldr	r3, [r7, #12]
 801a78a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801a78c:	68fb      	ldr	r3, [r7, #12]
 801a78e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801a792:	b29b      	uxth	r3, r3
 801a794:	3b01      	subs	r3, #1
 801a796:	b29a      	uxth	r2, r3
 801a798:	68fb      	ldr	r3, [r7, #12]
 801a79a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801a79e:	2301      	movs	r3, #1
 801a7a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801a7a2:	f7fa fef5 	bl	8015590 <HAL_GetTick>
 801a7a6:	4602      	mov	r2, r0
 801a7a8:	69fb      	ldr	r3, [r7, #28]
 801a7aa:	1ad3      	subs	r3, r2, r3
 801a7ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a7ae:	429a      	cmp	r2, r3
 801a7b0:	d807      	bhi.n	801a7c2 <HAL_SPI_TransmitReceive+0x212>
 801a7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a7b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a7b8:	d003      	beq.n	801a7c2 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 801a7ba:	2303      	movs	r3, #3
 801a7bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 801a7c0:	e0fb      	b.n	801a9ba <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801a7c2:	68fb      	ldr	r3, [r7, #12]
 801a7c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a7c6:	b29b      	uxth	r3, r3
 801a7c8:	2b00      	cmp	r3, #0
 801a7ca:	d1a3      	bne.n	801a714 <HAL_SPI_TransmitReceive+0x164>
 801a7cc:	68fb      	ldr	r3, [r7, #12]
 801a7ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801a7d2:	b29b      	uxth	r3, r3
 801a7d4:	2b00      	cmp	r3, #0
 801a7d6:	d19d      	bne.n	801a714 <HAL_SPI_TransmitReceive+0x164>
 801a7d8:	e0df      	b.n	801a99a <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801a7da:	68fb      	ldr	r3, [r7, #12]
 801a7dc:	685b      	ldr	r3, [r3, #4]
 801a7de:	2b00      	cmp	r3, #0
 801a7e0:	d003      	beq.n	801a7ea <HAL_SPI_TransmitReceive+0x23a>
 801a7e2:	8a7b      	ldrh	r3, [r7, #18]
 801a7e4:	2b01      	cmp	r3, #1
 801a7e6:	f040 80cb 	bne.w	801a980 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 801a7ea:	68fb      	ldr	r3, [r7, #12]
 801a7ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a7ee:	b29b      	uxth	r3, r3
 801a7f0:	2b01      	cmp	r3, #1
 801a7f2:	d912      	bls.n	801a81a <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801a7f4:	68fb      	ldr	r3, [r7, #12]
 801a7f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a7f8:	881a      	ldrh	r2, [r3, #0]
 801a7fa:	68fb      	ldr	r3, [r7, #12]
 801a7fc:	681b      	ldr	r3, [r3, #0]
 801a7fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801a800:	68fb      	ldr	r3, [r7, #12]
 801a802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a804:	1c9a      	adds	r2, r3, #2
 801a806:	68fb      	ldr	r3, [r7, #12]
 801a808:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801a80a:	68fb      	ldr	r3, [r7, #12]
 801a80c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a80e:	b29b      	uxth	r3, r3
 801a810:	3b02      	subs	r3, #2
 801a812:	b29a      	uxth	r2, r3
 801a814:	68fb      	ldr	r3, [r7, #12]
 801a816:	87da      	strh	r2, [r3, #62]	; 0x3e
 801a818:	e0b2      	b.n	801a980 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801a81a:	68fb      	ldr	r3, [r7, #12]
 801a81c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a81e:	68fb      	ldr	r3, [r7, #12]
 801a820:	681b      	ldr	r3, [r3, #0]
 801a822:	330c      	adds	r3, #12
 801a824:	7812      	ldrb	r2, [r2, #0]
 801a826:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801a828:	68fb      	ldr	r3, [r7, #12]
 801a82a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a82c:	1c5a      	adds	r2, r3, #1
 801a82e:	68fb      	ldr	r3, [r7, #12]
 801a830:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801a832:	68fb      	ldr	r3, [r7, #12]
 801a834:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a836:	b29b      	uxth	r3, r3
 801a838:	3b01      	subs	r3, #1
 801a83a:	b29a      	uxth	r2, r3
 801a83c:	68fb      	ldr	r3, [r7, #12]
 801a83e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801a840:	e09e      	b.n	801a980 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801a842:	68fb      	ldr	r3, [r7, #12]
 801a844:	681b      	ldr	r3, [r3, #0]
 801a846:	689b      	ldr	r3, [r3, #8]
 801a848:	f003 0302 	and.w	r3, r3, #2
 801a84c:	2b02      	cmp	r3, #2
 801a84e:	d134      	bne.n	801a8ba <HAL_SPI_TransmitReceive+0x30a>
 801a850:	68fb      	ldr	r3, [r7, #12]
 801a852:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a854:	b29b      	uxth	r3, r3
 801a856:	2b00      	cmp	r3, #0
 801a858:	d02f      	beq.n	801a8ba <HAL_SPI_TransmitReceive+0x30a>
 801a85a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a85c:	2b01      	cmp	r3, #1
 801a85e:	d12c      	bne.n	801a8ba <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 801a860:	68fb      	ldr	r3, [r7, #12]
 801a862:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a864:	b29b      	uxth	r3, r3
 801a866:	2b01      	cmp	r3, #1
 801a868:	d912      	bls.n	801a890 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801a86a:	68fb      	ldr	r3, [r7, #12]
 801a86c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a86e:	881a      	ldrh	r2, [r3, #0]
 801a870:	68fb      	ldr	r3, [r7, #12]
 801a872:	681b      	ldr	r3, [r3, #0]
 801a874:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801a876:	68fb      	ldr	r3, [r7, #12]
 801a878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a87a:	1c9a      	adds	r2, r3, #2
 801a87c:	68fb      	ldr	r3, [r7, #12]
 801a87e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801a880:	68fb      	ldr	r3, [r7, #12]
 801a882:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a884:	b29b      	uxth	r3, r3
 801a886:	3b02      	subs	r3, #2
 801a888:	b29a      	uxth	r2, r3
 801a88a:	68fb      	ldr	r3, [r7, #12]
 801a88c:	87da      	strh	r2, [r3, #62]	; 0x3e
 801a88e:	e012      	b.n	801a8b6 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801a890:	68fb      	ldr	r3, [r7, #12]
 801a892:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a894:	68fb      	ldr	r3, [r7, #12]
 801a896:	681b      	ldr	r3, [r3, #0]
 801a898:	330c      	adds	r3, #12
 801a89a:	7812      	ldrb	r2, [r2, #0]
 801a89c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801a89e:	68fb      	ldr	r3, [r7, #12]
 801a8a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a8a2:	1c5a      	adds	r2, r3, #1
 801a8a4:	68fb      	ldr	r3, [r7, #12]
 801a8a6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801a8a8:	68fb      	ldr	r3, [r7, #12]
 801a8aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a8ac:	b29b      	uxth	r3, r3
 801a8ae:	3b01      	subs	r3, #1
 801a8b0:	b29a      	uxth	r2, r3
 801a8b2:	68fb      	ldr	r3, [r7, #12]
 801a8b4:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801a8b6:	2300      	movs	r3, #0
 801a8b8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801a8ba:	68fb      	ldr	r3, [r7, #12]
 801a8bc:	681b      	ldr	r3, [r3, #0]
 801a8be:	689b      	ldr	r3, [r3, #8]
 801a8c0:	f003 0301 	and.w	r3, r3, #1
 801a8c4:	2b01      	cmp	r3, #1
 801a8c6:	d148      	bne.n	801a95a <HAL_SPI_TransmitReceive+0x3aa>
 801a8c8:	68fb      	ldr	r3, [r7, #12]
 801a8ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801a8ce:	b29b      	uxth	r3, r3
 801a8d0:	2b00      	cmp	r3, #0
 801a8d2:	d042      	beq.n	801a95a <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 801a8d4:	68fb      	ldr	r3, [r7, #12]
 801a8d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801a8da:	b29b      	uxth	r3, r3
 801a8dc:	2b01      	cmp	r3, #1
 801a8de:	d923      	bls.n	801a928 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801a8e0:	68fb      	ldr	r3, [r7, #12]
 801a8e2:	681b      	ldr	r3, [r3, #0]
 801a8e4:	68da      	ldr	r2, [r3, #12]
 801a8e6:	68fb      	ldr	r3, [r7, #12]
 801a8e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a8ea:	b292      	uxth	r2, r2
 801a8ec:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801a8ee:	68fb      	ldr	r3, [r7, #12]
 801a8f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a8f2:	1c9a      	adds	r2, r3, #2
 801a8f4:	68fb      	ldr	r3, [r7, #12]
 801a8f6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 801a8f8:	68fb      	ldr	r3, [r7, #12]
 801a8fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801a8fe:	b29b      	uxth	r3, r3
 801a900:	3b02      	subs	r3, #2
 801a902:	b29a      	uxth	r2, r3
 801a904:	68fb      	ldr	r3, [r7, #12]
 801a906:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 801a90a:	68fb      	ldr	r3, [r7, #12]
 801a90c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801a910:	b29b      	uxth	r3, r3
 801a912:	2b01      	cmp	r3, #1
 801a914:	d81f      	bhi.n	801a956 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801a916:	68fb      	ldr	r3, [r7, #12]
 801a918:	681b      	ldr	r3, [r3, #0]
 801a91a:	685a      	ldr	r2, [r3, #4]
 801a91c:	68fb      	ldr	r3, [r7, #12]
 801a91e:	681b      	ldr	r3, [r3, #0]
 801a920:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801a924:	605a      	str	r2, [r3, #4]
 801a926:	e016      	b.n	801a956 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801a928:	68fb      	ldr	r3, [r7, #12]
 801a92a:	681b      	ldr	r3, [r3, #0]
 801a92c:	f103 020c 	add.w	r2, r3, #12
 801a930:	68fb      	ldr	r3, [r7, #12]
 801a932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a934:	7812      	ldrb	r2, [r2, #0]
 801a936:	b2d2      	uxtb	r2, r2
 801a938:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 801a93a:	68fb      	ldr	r3, [r7, #12]
 801a93c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a93e:	1c5a      	adds	r2, r3, #1
 801a940:	68fb      	ldr	r3, [r7, #12]
 801a942:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 801a944:	68fb      	ldr	r3, [r7, #12]
 801a946:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801a94a:	b29b      	uxth	r3, r3
 801a94c:	3b01      	subs	r3, #1
 801a94e:	b29a      	uxth	r2, r3
 801a950:	68fb      	ldr	r3, [r7, #12]
 801a952:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801a956:	2301      	movs	r3, #1
 801a958:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801a95a:	f7fa fe19 	bl	8015590 <HAL_GetTick>
 801a95e:	4602      	mov	r2, r0
 801a960:	69fb      	ldr	r3, [r7, #28]
 801a962:	1ad3      	subs	r3, r2, r3
 801a964:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a966:	429a      	cmp	r2, r3
 801a968:	d803      	bhi.n	801a972 <HAL_SPI_TransmitReceive+0x3c2>
 801a96a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a96c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a970:	d102      	bne.n	801a978 <HAL_SPI_TransmitReceive+0x3c8>
 801a972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a974:	2b00      	cmp	r3, #0
 801a976:	d103      	bne.n	801a980 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 801a978:	2303      	movs	r3, #3
 801a97a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 801a97e:	e01c      	b.n	801a9ba <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801a980:	68fb      	ldr	r3, [r7, #12]
 801a982:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a984:	b29b      	uxth	r3, r3
 801a986:	2b00      	cmp	r3, #0
 801a988:	f47f af5b 	bne.w	801a842 <HAL_SPI_TransmitReceive+0x292>
 801a98c:	68fb      	ldr	r3, [r7, #12]
 801a98e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801a992:	b29b      	uxth	r3, r3
 801a994:	2b00      	cmp	r3, #0
 801a996:	f47f af54 	bne.w	801a842 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801a99a:	69fa      	ldr	r2, [r7, #28]
 801a99c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801a99e:	68f8      	ldr	r0, [r7, #12]
 801a9a0:	f000 f9b4 	bl	801ad0c <SPI_EndRxTxTransaction>
 801a9a4:	4603      	mov	r3, r0
 801a9a6:	2b00      	cmp	r3, #0
 801a9a8:	d006      	beq.n	801a9b8 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 801a9aa:	2301      	movs	r3, #1
 801a9ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801a9b0:	68fb      	ldr	r3, [r7, #12]
 801a9b2:	2220      	movs	r2, #32
 801a9b4:	661a      	str	r2, [r3, #96]	; 0x60
 801a9b6:	e000      	b.n	801a9ba <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 801a9b8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801a9ba:	68fb      	ldr	r3, [r7, #12]
 801a9bc:	2201      	movs	r2, #1
 801a9be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801a9c2:	68fb      	ldr	r3, [r7, #12]
 801a9c4:	2200      	movs	r2, #0
 801a9c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801a9ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 801a9ce:	4618      	mov	r0, r3
 801a9d0:	3728      	adds	r7, #40	; 0x28
 801a9d2:	46bd      	mov	sp, r7
 801a9d4:	bd80      	pop	{r7, pc}
	...

0801a9d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801a9d8:	b580      	push	{r7, lr}
 801a9da:	b088      	sub	sp, #32
 801a9dc:	af00      	add	r7, sp, #0
 801a9de:	60f8      	str	r0, [r7, #12]
 801a9e0:	60b9      	str	r1, [r7, #8]
 801a9e2:	603b      	str	r3, [r7, #0]
 801a9e4:	4613      	mov	r3, r2
 801a9e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801a9e8:	f7fa fdd2 	bl	8015590 <HAL_GetTick>
 801a9ec:	4602      	mov	r2, r0
 801a9ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a9f0:	1a9b      	subs	r3, r3, r2
 801a9f2:	683a      	ldr	r2, [r7, #0]
 801a9f4:	4413      	add	r3, r2
 801a9f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 801a9f8:	f7fa fdca 	bl	8015590 <HAL_GetTick>
 801a9fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801a9fe:	4b39      	ldr	r3, [pc, #228]	; (801aae4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 801aa00:	681b      	ldr	r3, [r3, #0]
 801aa02:	015b      	lsls	r3, r3, #5
 801aa04:	0d1b      	lsrs	r3, r3, #20
 801aa06:	69fa      	ldr	r2, [r7, #28]
 801aa08:	fb02 f303 	mul.w	r3, r2, r3
 801aa0c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801aa0e:	e054      	b.n	801aaba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 801aa10:	683b      	ldr	r3, [r7, #0]
 801aa12:	f1b3 3fff 	cmp.w	r3, #4294967295
 801aa16:	d050      	beq.n	801aaba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801aa18:	f7fa fdba 	bl	8015590 <HAL_GetTick>
 801aa1c:	4602      	mov	r2, r0
 801aa1e:	69bb      	ldr	r3, [r7, #24]
 801aa20:	1ad3      	subs	r3, r2, r3
 801aa22:	69fa      	ldr	r2, [r7, #28]
 801aa24:	429a      	cmp	r2, r3
 801aa26:	d902      	bls.n	801aa2e <SPI_WaitFlagStateUntilTimeout+0x56>
 801aa28:	69fb      	ldr	r3, [r7, #28]
 801aa2a:	2b00      	cmp	r3, #0
 801aa2c:	d13d      	bne.n	801aaaa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801aa2e:	68fb      	ldr	r3, [r7, #12]
 801aa30:	681b      	ldr	r3, [r3, #0]
 801aa32:	685a      	ldr	r2, [r3, #4]
 801aa34:	68fb      	ldr	r3, [r7, #12]
 801aa36:	681b      	ldr	r3, [r3, #0]
 801aa38:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801aa3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801aa3e:	68fb      	ldr	r3, [r7, #12]
 801aa40:	685b      	ldr	r3, [r3, #4]
 801aa42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801aa46:	d111      	bne.n	801aa6c <SPI_WaitFlagStateUntilTimeout+0x94>
 801aa48:	68fb      	ldr	r3, [r7, #12]
 801aa4a:	689b      	ldr	r3, [r3, #8]
 801aa4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801aa50:	d004      	beq.n	801aa5c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801aa52:	68fb      	ldr	r3, [r7, #12]
 801aa54:	689b      	ldr	r3, [r3, #8]
 801aa56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801aa5a:	d107      	bne.n	801aa6c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801aa5c:	68fb      	ldr	r3, [r7, #12]
 801aa5e:	681b      	ldr	r3, [r3, #0]
 801aa60:	681a      	ldr	r2, [r3, #0]
 801aa62:	68fb      	ldr	r3, [r7, #12]
 801aa64:	681b      	ldr	r3, [r3, #0]
 801aa66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801aa6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801aa6c:	68fb      	ldr	r3, [r7, #12]
 801aa6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801aa70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801aa74:	d10f      	bne.n	801aa96 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801aa76:	68fb      	ldr	r3, [r7, #12]
 801aa78:	681b      	ldr	r3, [r3, #0]
 801aa7a:	681a      	ldr	r2, [r3, #0]
 801aa7c:	68fb      	ldr	r3, [r7, #12]
 801aa7e:	681b      	ldr	r3, [r3, #0]
 801aa80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801aa84:	601a      	str	r2, [r3, #0]
 801aa86:	68fb      	ldr	r3, [r7, #12]
 801aa88:	681b      	ldr	r3, [r3, #0]
 801aa8a:	681a      	ldr	r2, [r3, #0]
 801aa8c:	68fb      	ldr	r3, [r7, #12]
 801aa8e:	681b      	ldr	r3, [r3, #0]
 801aa90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801aa94:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801aa96:	68fb      	ldr	r3, [r7, #12]
 801aa98:	2201      	movs	r2, #1
 801aa9a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801aa9e:	68fb      	ldr	r3, [r7, #12]
 801aaa0:	2200      	movs	r2, #0
 801aaa2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801aaa6:	2303      	movs	r3, #3
 801aaa8:	e017      	b.n	801aada <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801aaaa:	697b      	ldr	r3, [r7, #20]
 801aaac:	2b00      	cmp	r3, #0
 801aaae:	d101      	bne.n	801aab4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 801aab0:	2300      	movs	r3, #0
 801aab2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 801aab4:	697b      	ldr	r3, [r7, #20]
 801aab6:	3b01      	subs	r3, #1
 801aab8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801aaba:	68fb      	ldr	r3, [r7, #12]
 801aabc:	681b      	ldr	r3, [r3, #0]
 801aabe:	689a      	ldr	r2, [r3, #8]
 801aac0:	68bb      	ldr	r3, [r7, #8]
 801aac2:	4013      	ands	r3, r2
 801aac4:	68ba      	ldr	r2, [r7, #8]
 801aac6:	429a      	cmp	r2, r3
 801aac8:	bf0c      	ite	eq
 801aaca:	2301      	moveq	r3, #1
 801aacc:	2300      	movne	r3, #0
 801aace:	b2db      	uxtb	r3, r3
 801aad0:	461a      	mov	r2, r3
 801aad2:	79fb      	ldrb	r3, [r7, #7]
 801aad4:	429a      	cmp	r2, r3
 801aad6:	d19b      	bne.n	801aa10 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 801aad8:	2300      	movs	r3, #0
}
 801aada:	4618      	mov	r0, r3
 801aadc:	3720      	adds	r7, #32
 801aade:	46bd      	mov	sp, r7
 801aae0:	bd80      	pop	{r7, pc}
 801aae2:	bf00      	nop
 801aae4:	2000011c 	.word	0x2000011c

0801aae8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801aae8:	b580      	push	{r7, lr}
 801aaea:	b08a      	sub	sp, #40	; 0x28
 801aaec:	af00      	add	r7, sp, #0
 801aaee:	60f8      	str	r0, [r7, #12]
 801aaf0:	60b9      	str	r1, [r7, #8]
 801aaf2:	607a      	str	r2, [r7, #4]
 801aaf4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 801aaf6:	2300      	movs	r3, #0
 801aaf8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 801aafa:	f7fa fd49 	bl	8015590 <HAL_GetTick>
 801aafe:	4602      	mov	r2, r0
 801ab00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ab02:	1a9b      	subs	r3, r3, r2
 801ab04:	683a      	ldr	r2, [r7, #0]
 801ab06:	4413      	add	r3, r2
 801ab08:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 801ab0a:	f7fa fd41 	bl	8015590 <HAL_GetTick>
 801ab0e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 801ab10:	68fb      	ldr	r3, [r7, #12]
 801ab12:	681b      	ldr	r3, [r3, #0]
 801ab14:	330c      	adds	r3, #12
 801ab16:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 801ab18:	4b3d      	ldr	r3, [pc, #244]	; (801ac10 <SPI_WaitFifoStateUntilTimeout+0x128>)
 801ab1a:	681a      	ldr	r2, [r3, #0]
 801ab1c:	4613      	mov	r3, r2
 801ab1e:	009b      	lsls	r3, r3, #2
 801ab20:	4413      	add	r3, r2
 801ab22:	00da      	lsls	r2, r3, #3
 801ab24:	1ad3      	subs	r3, r2, r3
 801ab26:	0d1b      	lsrs	r3, r3, #20
 801ab28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ab2a:	fb02 f303 	mul.w	r3, r2, r3
 801ab2e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 801ab30:	e060      	b.n	801abf4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 801ab32:	68bb      	ldr	r3, [r7, #8]
 801ab34:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 801ab38:	d107      	bne.n	801ab4a <SPI_WaitFifoStateUntilTimeout+0x62>
 801ab3a:	687b      	ldr	r3, [r7, #4]
 801ab3c:	2b00      	cmp	r3, #0
 801ab3e:	d104      	bne.n	801ab4a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 801ab40:	69fb      	ldr	r3, [r7, #28]
 801ab42:	781b      	ldrb	r3, [r3, #0]
 801ab44:	b2db      	uxtb	r3, r3
 801ab46:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 801ab48:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 801ab4a:	683b      	ldr	r3, [r7, #0]
 801ab4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ab50:	d050      	beq.n	801abf4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801ab52:	f7fa fd1d 	bl	8015590 <HAL_GetTick>
 801ab56:	4602      	mov	r2, r0
 801ab58:	6a3b      	ldr	r3, [r7, #32]
 801ab5a:	1ad3      	subs	r3, r2, r3
 801ab5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ab5e:	429a      	cmp	r2, r3
 801ab60:	d902      	bls.n	801ab68 <SPI_WaitFifoStateUntilTimeout+0x80>
 801ab62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ab64:	2b00      	cmp	r3, #0
 801ab66:	d13d      	bne.n	801abe4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801ab68:	68fb      	ldr	r3, [r7, #12]
 801ab6a:	681b      	ldr	r3, [r3, #0]
 801ab6c:	685a      	ldr	r2, [r3, #4]
 801ab6e:	68fb      	ldr	r3, [r7, #12]
 801ab70:	681b      	ldr	r3, [r3, #0]
 801ab72:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801ab76:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801ab78:	68fb      	ldr	r3, [r7, #12]
 801ab7a:	685b      	ldr	r3, [r3, #4]
 801ab7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801ab80:	d111      	bne.n	801aba6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 801ab82:	68fb      	ldr	r3, [r7, #12]
 801ab84:	689b      	ldr	r3, [r3, #8]
 801ab86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801ab8a:	d004      	beq.n	801ab96 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801ab8c:	68fb      	ldr	r3, [r7, #12]
 801ab8e:	689b      	ldr	r3, [r3, #8]
 801ab90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ab94:	d107      	bne.n	801aba6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801ab96:	68fb      	ldr	r3, [r7, #12]
 801ab98:	681b      	ldr	r3, [r3, #0]
 801ab9a:	681a      	ldr	r2, [r3, #0]
 801ab9c:	68fb      	ldr	r3, [r7, #12]
 801ab9e:	681b      	ldr	r3, [r3, #0]
 801aba0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801aba4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801aba6:	68fb      	ldr	r3, [r7, #12]
 801aba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801abaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801abae:	d10f      	bne.n	801abd0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 801abb0:	68fb      	ldr	r3, [r7, #12]
 801abb2:	681b      	ldr	r3, [r3, #0]
 801abb4:	681a      	ldr	r2, [r3, #0]
 801abb6:	68fb      	ldr	r3, [r7, #12]
 801abb8:	681b      	ldr	r3, [r3, #0]
 801abba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801abbe:	601a      	str	r2, [r3, #0]
 801abc0:	68fb      	ldr	r3, [r7, #12]
 801abc2:	681b      	ldr	r3, [r3, #0]
 801abc4:	681a      	ldr	r2, [r3, #0]
 801abc6:	68fb      	ldr	r3, [r7, #12]
 801abc8:	681b      	ldr	r3, [r3, #0]
 801abca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801abce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801abd0:	68fb      	ldr	r3, [r7, #12]
 801abd2:	2201      	movs	r2, #1
 801abd4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801abd8:	68fb      	ldr	r3, [r7, #12]
 801abda:	2200      	movs	r2, #0
 801abdc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801abe0:	2303      	movs	r3, #3
 801abe2:	e010      	b.n	801ac06 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801abe4:	69bb      	ldr	r3, [r7, #24]
 801abe6:	2b00      	cmp	r3, #0
 801abe8:	d101      	bne.n	801abee <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 801abea:	2300      	movs	r3, #0
 801abec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 801abee:	69bb      	ldr	r3, [r7, #24]
 801abf0:	3b01      	subs	r3, #1
 801abf2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 801abf4:	68fb      	ldr	r3, [r7, #12]
 801abf6:	681b      	ldr	r3, [r3, #0]
 801abf8:	689a      	ldr	r2, [r3, #8]
 801abfa:	68bb      	ldr	r3, [r7, #8]
 801abfc:	4013      	ands	r3, r2
 801abfe:	687a      	ldr	r2, [r7, #4]
 801ac00:	429a      	cmp	r2, r3
 801ac02:	d196      	bne.n	801ab32 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 801ac04:	2300      	movs	r3, #0
}
 801ac06:	4618      	mov	r0, r3
 801ac08:	3728      	adds	r7, #40	; 0x28
 801ac0a:	46bd      	mov	sp, r7
 801ac0c:	bd80      	pop	{r7, pc}
 801ac0e:	bf00      	nop
 801ac10:	2000011c 	.word	0x2000011c

0801ac14 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 801ac14:	b580      	push	{r7, lr}
 801ac16:	b088      	sub	sp, #32
 801ac18:	af02      	add	r7, sp, #8
 801ac1a:	60f8      	str	r0, [r7, #12]
 801ac1c:	60b9      	str	r1, [r7, #8]
 801ac1e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801ac20:	68fb      	ldr	r3, [r7, #12]
 801ac22:	685b      	ldr	r3, [r3, #4]
 801ac24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801ac28:	d111      	bne.n	801ac4e <SPI_EndRxTransaction+0x3a>
 801ac2a:	68fb      	ldr	r3, [r7, #12]
 801ac2c:	689b      	ldr	r3, [r3, #8]
 801ac2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801ac32:	d004      	beq.n	801ac3e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801ac34:	68fb      	ldr	r3, [r7, #12]
 801ac36:	689b      	ldr	r3, [r3, #8]
 801ac38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ac3c:	d107      	bne.n	801ac4e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801ac3e:	68fb      	ldr	r3, [r7, #12]
 801ac40:	681b      	ldr	r3, [r3, #0]
 801ac42:	681a      	ldr	r2, [r3, #0]
 801ac44:	68fb      	ldr	r3, [r7, #12]
 801ac46:	681b      	ldr	r3, [r3, #0]
 801ac48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801ac4c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801ac4e:	68fb      	ldr	r3, [r7, #12]
 801ac50:	685b      	ldr	r3, [r3, #4]
 801ac52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801ac56:	d112      	bne.n	801ac7e <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801ac58:	687b      	ldr	r3, [r7, #4]
 801ac5a:	9300      	str	r3, [sp, #0]
 801ac5c:	68bb      	ldr	r3, [r7, #8]
 801ac5e:	2200      	movs	r2, #0
 801ac60:	2180      	movs	r1, #128	; 0x80
 801ac62:	68f8      	ldr	r0, [r7, #12]
 801ac64:	f7ff feb8 	bl	801a9d8 <SPI_WaitFlagStateUntilTimeout>
 801ac68:	4603      	mov	r3, r0
 801ac6a:	2b00      	cmp	r3, #0
 801ac6c:	d021      	beq.n	801acb2 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801ac6e:	68fb      	ldr	r3, [r7, #12]
 801ac70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ac72:	f043 0220 	orr.w	r2, r3, #32
 801ac76:	68fb      	ldr	r3, [r7, #12]
 801ac78:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 801ac7a:	2303      	movs	r3, #3
 801ac7c:	e03d      	b.n	801acfa <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801ac7e:	4b21      	ldr	r3, [pc, #132]	; (801ad04 <SPI_EndRxTransaction+0xf0>)
 801ac80:	681b      	ldr	r3, [r3, #0]
 801ac82:	4a21      	ldr	r2, [pc, #132]	; (801ad08 <SPI_EndRxTransaction+0xf4>)
 801ac84:	fba2 2303 	umull	r2, r3, r2, r3
 801ac88:	0d5b      	lsrs	r3, r3, #21
 801ac8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801ac8e:	fb02 f303 	mul.w	r3, r2, r3
 801ac92:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 801ac94:	697b      	ldr	r3, [r7, #20]
 801ac96:	2b00      	cmp	r3, #0
 801ac98:	d00a      	beq.n	801acb0 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 801ac9a:	697b      	ldr	r3, [r7, #20]
 801ac9c:	3b01      	subs	r3, #1
 801ac9e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801aca0:	68fb      	ldr	r3, [r7, #12]
 801aca2:	681b      	ldr	r3, [r3, #0]
 801aca4:	689b      	ldr	r3, [r3, #8]
 801aca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801acaa:	2b80      	cmp	r3, #128	; 0x80
 801acac:	d0f2      	beq.n	801ac94 <SPI_EndRxTransaction+0x80>
 801acae:	e000      	b.n	801acb2 <SPI_EndRxTransaction+0x9e>
        break;
 801acb0:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801acb2:	68fb      	ldr	r3, [r7, #12]
 801acb4:	685b      	ldr	r3, [r3, #4]
 801acb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801acba:	d11d      	bne.n	801acf8 <SPI_EndRxTransaction+0xe4>
 801acbc:	68fb      	ldr	r3, [r7, #12]
 801acbe:	689b      	ldr	r3, [r3, #8]
 801acc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801acc4:	d004      	beq.n	801acd0 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801acc6:	68fb      	ldr	r3, [r7, #12]
 801acc8:	689b      	ldr	r3, [r3, #8]
 801acca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801acce:	d113      	bne.n	801acf8 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801acd0:	687b      	ldr	r3, [r7, #4]
 801acd2:	9300      	str	r3, [sp, #0]
 801acd4:	68bb      	ldr	r3, [r7, #8]
 801acd6:	2200      	movs	r2, #0
 801acd8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801acdc:	68f8      	ldr	r0, [r7, #12]
 801acde:	f7ff ff03 	bl	801aae8 <SPI_WaitFifoStateUntilTimeout>
 801ace2:	4603      	mov	r3, r0
 801ace4:	2b00      	cmp	r3, #0
 801ace6:	d007      	beq.n	801acf8 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801ace8:	68fb      	ldr	r3, [r7, #12]
 801acea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801acec:	f043 0220 	orr.w	r2, r3, #32
 801acf0:	68fb      	ldr	r3, [r7, #12]
 801acf2:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 801acf4:	2303      	movs	r3, #3
 801acf6:	e000      	b.n	801acfa <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 801acf8:	2300      	movs	r3, #0
}
 801acfa:	4618      	mov	r0, r3
 801acfc:	3718      	adds	r7, #24
 801acfe:	46bd      	mov	sp, r7
 801ad00:	bd80      	pop	{r7, pc}
 801ad02:	bf00      	nop
 801ad04:	2000011c 	.word	0x2000011c
 801ad08:	165e9f81 	.word	0x165e9f81

0801ad0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801ad0c:	b580      	push	{r7, lr}
 801ad0e:	b088      	sub	sp, #32
 801ad10:	af02      	add	r7, sp, #8
 801ad12:	60f8      	str	r0, [r7, #12]
 801ad14:	60b9      	str	r1, [r7, #8]
 801ad16:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801ad18:	687b      	ldr	r3, [r7, #4]
 801ad1a:	9300      	str	r3, [sp, #0]
 801ad1c:	68bb      	ldr	r3, [r7, #8]
 801ad1e:	2200      	movs	r2, #0
 801ad20:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 801ad24:	68f8      	ldr	r0, [r7, #12]
 801ad26:	f7ff fedf 	bl	801aae8 <SPI_WaitFifoStateUntilTimeout>
 801ad2a:	4603      	mov	r3, r0
 801ad2c:	2b00      	cmp	r3, #0
 801ad2e:	d007      	beq.n	801ad40 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801ad30:	68fb      	ldr	r3, [r7, #12]
 801ad32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ad34:	f043 0220 	orr.w	r2, r3, #32
 801ad38:	68fb      	ldr	r3, [r7, #12]
 801ad3a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801ad3c:	2303      	movs	r3, #3
 801ad3e:	e046      	b.n	801adce <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801ad40:	4b25      	ldr	r3, [pc, #148]	; (801add8 <SPI_EndRxTxTransaction+0xcc>)
 801ad42:	681b      	ldr	r3, [r3, #0]
 801ad44:	4a25      	ldr	r2, [pc, #148]	; (801addc <SPI_EndRxTxTransaction+0xd0>)
 801ad46:	fba2 2303 	umull	r2, r3, r2, r3
 801ad4a:	0d5b      	lsrs	r3, r3, #21
 801ad4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801ad50:	fb02 f303 	mul.w	r3, r2, r3
 801ad54:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801ad56:	68fb      	ldr	r3, [r7, #12]
 801ad58:	685b      	ldr	r3, [r3, #4]
 801ad5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801ad5e:	d112      	bne.n	801ad86 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801ad60:	687b      	ldr	r3, [r7, #4]
 801ad62:	9300      	str	r3, [sp, #0]
 801ad64:	68bb      	ldr	r3, [r7, #8]
 801ad66:	2200      	movs	r2, #0
 801ad68:	2180      	movs	r1, #128	; 0x80
 801ad6a:	68f8      	ldr	r0, [r7, #12]
 801ad6c:	f7ff fe34 	bl	801a9d8 <SPI_WaitFlagStateUntilTimeout>
 801ad70:	4603      	mov	r3, r0
 801ad72:	2b00      	cmp	r3, #0
 801ad74:	d016      	beq.n	801ada4 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801ad76:	68fb      	ldr	r3, [r7, #12]
 801ad78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ad7a:	f043 0220 	orr.w	r2, r3, #32
 801ad7e:	68fb      	ldr	r3, [r7, #12]
 801ad80:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 801ad82:	2303      	movs	r3, #3
 801ad84:	e023      	b.n	801adce <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 801ad86:	697b      	ldr	r3, [r7, #20]
 801ad88:	2b00      	cmp	r3, #0
 801ad8a:	d00a      	beq.n	801ada2 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 801ad8c:	697b      	ldr	r3, [r7, #20]
 801ad8e:	3b01      	subs	r3, #1
 801ad90:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801ad92:	68fb      	ldr	r3, [r7, #12]
 801ad94:	681b      	ldr	r3, [r3, #0]
 801ad96:	689b      	ldr	r3, [r3, #8]
 801ad98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801ad9c:	2b80      	cmp	r3, #128	; 0x80
 801ad9e:	d0f2      	beq.n	801ad86 <SPI_EndRxTxTransaction+0x7a>
 801ada0:	e000      	b.n	801ada4 <SPI_EndRxTxTransaction+0x98>
        break;
 801ada2:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801ada4:	687b      	ldr	r3, [r7, #4]
 801ada6:	9300      	str	r3, [sp, #0]
 801ada8:	68bb      	ldr	r3, [r7, #8]
 801adaa:	2200      	movs	r2, #0
 801adac:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801adb0:	68f8      	ldr	r0, [r7, #12]
 801adb2:	f7ff fe99 	bl	801aae8 <SPI_WaitFifoStateUntilTimeout>
 801adb6:	4603      	mov	r3, r0
 801adb8:	2b00      	cmp	r3, #0
 801adba:	d007      	beq.n	801adcc <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801adbc:	68fb      	ldr	r3, [r7, #12]
 801adbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801adc0:	f043 0220 	orr.w	r2, r3, #32
 801adc4:	68fb      	ldr	r3, [r7, #12]
 801adc6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801adc8:	2303      	movs	r3, #3
 801adca:	e000      	b.n	801adce <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 801adcc:	2300      	movs	r3, #0
}
 801adce:	4618      	mov	r0, r3
 801add0:	3718      	adds	r7, #24
 801add2:	46bd      	mov	sp, r7
 801add4:	bd80      	pop	{r7, pc}
 801add6:	bf00      	nop
 801add8:	2000011c 	.word	0x2000011c
 801addc:	165e9f81 	.word	0x165e9f81

0801ade0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801ade0:	b580      	push	{r7, lr}
 801ade2:	b082      	sub	sp, #8
 801ade4:	af00      	add	r7, sp, #0
 801ade6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801ade8:	687b      	ldr	r3, [r7, #4]
 801adea:	681b      	ldr	r3, [r3, #0]
 801adec:	691b      	ldr	r3, [r3, #16]
 801adee:	f003 0302 	and.w	r3, r3, #2
 801adf2:	2b02      	cmp	r3, #2
 801adf4:	d128      	bne.n	801ae48 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801adf6:	687b      	ldr	r3, [r7, #4]
 801adf8:	681b      	ldr	r3, [r3, #0]
 801adfa:	68db      	ldr	r3, [r3, #12]
 801adfc:	f003 0302 	and.w	r3, r3, #2
 801ae00:	2b02      	cmp	r3, #2
 801ae02:	d121      	bne.n	801ae48 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801ae04:	687b      	ldr	r3, [r7, #4]
 801ae06:	681b      	ldr	r3, [r3, #0]
 801ae08:	f06f 0202 	mvn.w	r2, #2
 801ae0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801ae0e:	687b      	ldr	r3, [r7, #4]
 801ae10:	2201      	movs	r2, #1
 801ae12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801ae14:	687b      	ldr	r3, [r7, #4]
 801ae16:	681b      	ldr	r3, [r3, #0]
 801ae18:	699b      	ldr	r3, [r3, #24]
 801ae1a:	f003 0303 	and.w	r3, r3, #3
 801ae1e:	2b00      	cmp	r3, #0
 801ae20:	d005      	beq.n	801ae2e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 801ae22:	687b      	ldr	r3, [r7, #4]
 801ae24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801ae28:	6878      	ldr	r0, [r7, #4]
 801ae2a:	4798      	blx	r3
 801ae2c:	e009      	b.n	801ae42 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 801ae2e:	687b      	ldr	r3, [r7, #4]
 801ae30:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801ae34:	6878      	ldr	r0, [r7, #4]
 801ae36:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 801ae38:	687b      	ldr	r3, [r7, #4]
 801ae3a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801ae3e:	6878      	ldr	r0, [r7, #4]
 801ae40:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801ae42:	687b      	ldr	r3, [r7, #4]
 801ae44:	2200      	movs	r2, #0
 801ae46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801ae48:	687b      	ldr	r3, [r7, #4]
 801ae4a:	681b      	ldr	r3, [r3, #0]
 801ae4c:	691b      	ldr	r3, [r3, #16]
 801ae4e:	f003 0304 	and.w	r3, r3, #4
 801ae52:	2b04      	cmp	r3, #4
 801ae54:	d128      	bne.n	801aea8 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801ae56:	687b      	ldr	r3, [r7, #4]
 801ae58:	681b      	ldr	r3, [r3, #0]
 801ae5a:	68db      	ldr	r3, [r3, #12]
 801ae5c:	f003 0304 	and.w	r3, r3, #4
 801ae60:	2b04      	cmp	r3, #4
 801ae62:	d121      	bne.n	801aea8 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801ae64:	687b      	ldr	r3, [r7, #4]
 801ae66:	681b      	ldr	r3, [r3, #0]
 801ae68:	f06f 0204 	mvn.w	r2, #4
 801ae6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801ae6e:	687b      	ldr	r3, [r7, #4]
 801ae70:	2202      	movs	r2, #2
 801ae72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801ae74:	687b      	ldr	r3, [r7, #4]
 801ae76:	681b      	ldr	r3, [r3, #0]
 801ae78:	699b      	ldr	r3, [r3, #24]
 801ae7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801ae7e:	2b00      	cmp	r3, #0
 801ae80:	d005      	beq.n	801ae8e <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 801ae82:	687b      	ldr	r3, [r7, #4]
 801ae84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801ae88:	6878      	ldr	r0, [r7, #4]
 801ae8a:	4798      	blx	r3
 801ae8c:	e009      	b.n	801aea2 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 801ae8e:	687b      	ldr	r3, [r7, #4]
 801ae90:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801ae94:	6878      	ldr	r0, [r7, #4]
 801ae96:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 801ae98:	687b      	ldr	r3, [r7, #4]
 801ae9a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801ae9e:	6878      	ldr	r0, [r7, #4]
 801aea0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801aea2:	687b      	ldr	r3, [r7, #4]
 801aea4:	2200      	movs	r2, #0
 801aea6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801aea8:	687b      	ldr	r3, [r7, #4]
 801aeaa:	681b      	ldr	r3, [r3, #0]
 801aeac:	691b      	ldr	r3, [r3, #16]
 801aeae:	f003 0308 	and.w	r3, r3, #8
 801aeb2:	2b08      	cmp	r3, #8
 801aeb4:	d128      	bne.n	801af08 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801aeb6:	687b      	ldr	r3, [r7, #4]
 801aeb8:	681b      	ldr	r3, [r3, #0]
 801aeba:	68db      	ldr	r3, [r3, #12]
 801aebc:	f003 0308 	and.w	r3, r3, #8
 801aec0:	2b08      	cmp	r3, #8
 801aec2:	d121      	bne.n	801af08 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801aec4:	687b      	ldr	r3, [r7, #4]
 801aec6:	681b      	ldr	r3, [r3, #0]
 801aec8:	f06f 0208 	mvn.w	r2, #8
 801aecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801aece:	687b      	ldr	r3, [r7, #4]
 801aed0:	2204      	movs	r2, #4
 801aed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801aed4:	687b      	ldr	r3, [r7, #4]
 801aed6:	681b      	ldr	r3, [r3, #0]
 801aed8:	69db      	ldr	r3, [r3, #28]
 801aeda:	f003 0303 	and.w	r3, r3, #3
 801aede:	2b00      	cmp	r3, #0
 801aee0:	d005      	beq.n	801aeee <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 801aee2:	687b      	ldr	r3, [r7, #4]
 801aee4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801aee8:	6878      	ldr	r0, [r7, #4]
 801aeea:	4798      	blx	r3
 801aeec:	e009      	b.n	801af02 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 801aeee:	687b      	ldr	r3, [r7, #4]
 801aef0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801aef4:	6878      	ldr	r0, [r7, #4]
 801aef6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 801aef8:	687b      	ldr	r3, [r7, #4]
 801aefa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801aefe:	6878      	ldr	r0, [r7, #4]
 801af00:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801af02:	687b      	ldr	r3, [r7, #4]
 801af04:	2200      	movs	r2, #0
 801af06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801af08:	687b      	ldr	r3, [r7, #4]
 801af0a:	681b      	ldr	r3, [r3, #0]
 801af0c:	691b      	ldr	r3, [r3, #16]
 801af0e:	f003 0310 	and.w	r3, r3, #16
 801af12:	2b10      	cmp	r3, #16
 801af14:	d128      	bne.n	801af68 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801af16:	687b      	ldr	r3, [r7, #4]
 801af18:	681b      	ldr	r3, [r3, #0]
 801af1a:	68db      	ldr	r3, [r3, #12]
 801af1c:	f003 0310 	and.w	r3, r3, #16
 801af20:	2b10      	cmp	r3, #16
 801af22:	d121      	bne.n	801af68 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801af24:	687b      	ldr	r3, [r7, #4]
 801af26:	681b      	ldr	r3, [r3, #0]
 801af28:	f06f 0210 	mvn.w	r2, #16
 801af2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801af2e:	687b      	ldr	r3, [r7, #4]
 801af30:	2208      	movs	r2, #8
 801af32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801af34:	687b      	ldr	r3, [r7, #4]
 801af36:	681b      	ldr	r3, [r3, #0]
 801af38:	69db      	ldr	r3, [r3, #28]
 801af3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801af3e:	2b00      	cmp	r3, #0
 801af40:	d005      	beq.n	801af4e <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 801af42:	687b      	ldr	r3, [r7, #4]
 801af44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801af48:	6878      	ldr	r0, [r7, #4]
 801af4a:	4798      	blx	r3
 801af4c:	e009      	b.n	801af62 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 801af4e:	687b      	ldr	r3, [r7, #4]
 801af50:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801af54:	6878      	ldr	r0, [r7, #4]
 801af56:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 801af58:	687b      	ldr	r3, [r7, #4]
 801af5a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801af5e:	6878      	ldr	r0, [r7, #4]
 801af60:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801af62:	687b      	ldr	r3, [r7, #4]
 801af64:	2200      	movs	r2, #0
 801af66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801af68:	687b      	ldr	r3, [r7, #4]
 801af6a:	681b      	ldr	r3, [r3, #0]
 801af6c:	691b      	ldr	r3, [r3, #16]
 801af6e:	f003 0301 	and.w	r3, r3, #1
 801af72:	2b01      	cmp	r3, #1
 801af74:	d110      	bne.n	801af98 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801af76:	687b      	ldr	r3, [r7, #4]
 801af78:	681b      	ldr	r3, [r3, #0]
 801af7a:	68db      	ldr	r3, [r3, #12]
 801af7c:	f003 0301 	and.w	r3, r3, #1
 801af80:	2b01      	cmp	r3, #1
 801af82:	d109      	bne.n	801af98 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801af84:	687b      	ldr	r3, [r7, #4]
 801af86:	681b      	ldr	r3, [r3, #0]
 801af88:	f06f 0201 	mvn.w	r2, #1
 801af8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 801af8e:	687b      	ldr	r3, [r7, #4]
 801af90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801af94:	6878      	ldr	r0, [r7, #4]
 801af96:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801af98:	687b      	ldr	r3, [r7, #4]
 801af9a:	681b      	ldr	r3, [r3, #0]
 801af9c:	691b      	ldr	r3, [r3, #16]
 801af9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801afa2:	2b80      	cmp	r3, #128	; 0x80
 801afa4:	d110      	bne.n	801afc8 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801afa6:	687b      	ldr	r3, [r7, #4]
 801afa8:	681b      	ldr	r3, [r3, #0]
 801afaa:	68db      	ldr	r3, [r3, #12]
 801afac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801afb0:	2b80      	cmp	r3, #128	; 0x80
 801afb2:	d109      	bne.n	801afc8 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801afb4:	687b      	ldr	r3, [r7, #4]
 801afb6:	681b      	ldr	r3, [r3, #0]
 801afb8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801afbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 801afbe:	687b      	ldr	r3, [r7, #4]
 801afc0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801afc4:	6878      	ldr	r0, [r7, #4]
 801afc6:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801afc8:	687b      	ldr	r3, [r7, #4]
 801afca:	681b      	ldr	r3, [r3, #0]
 801afcc:	691b      	ldr	r3, [r3, #16]
 801afce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801afd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801afd6:	d110      	bne.n	801affa <HAL_TIM_IRQHandler+0x21a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801afd8:	687b      	ldr	r3, [r7, #4]
 801afda:	681b      	ldr	r3, [r3, #0]
 801afdc:	68db      	ldr	r3, [r3, #12]
 801afde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801afe2:	2b80      	cmp	r3, #128	; 0x80
 801afe4:	d109      	bne.n	801affa <HAL_TIM_IRQHandler+0x21a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801afe6:	687b      	ldr	r3, [r7, #4]
 801afe8:	681b      	ldr	r3, [r3, #0]
 801afea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801afee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 801aff0:	687b      	ldr	r3, [r7, #4]
 801aff2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801aff6:	6878      	ldr	r0, [r7, #4]
 801aff8:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801affa:	687b      	ldr	r3, [r7, #4]
 801affc:	681b      	ldr	r3, [r3, #0]
 801affe:	691b      	ldr	r3, [r3, #16]
 801b000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b004:	2b40      	cmp	r3, #64	; 0x40
 801b006:	d110      	bne.n	801b02a <HAL_TIM_IRQHandler+0x24a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801b008:	687b      	ldr	r3, [r7, #4]
 801b00a:	681b      	ldr	r3, [r3, #0]
 801b00c:	68db      	ldr	r3, [r3, #12]
 801b00e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b012:	2b40      	cmp	r3, #64	; 0x40
 801b014:	d109      	bne.n	801b02a <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801b016:	687b      	ldr	r3, [r7, #4]
 801b018:	681b      	ldr	r3, [r3, #0]
 801b01a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801b01e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 801b020:	687b      	ldr	r3, [r7, #4]
 801b022:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b026:	6878      	ldr	r0, [r7, #4]
 801b028:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801b02a:	687b      	ldr	r3, [r7, #4]
 801b02c:	681b      	ldr	r3, [r3, #0]
 801b02e:	691b      	ldr	r3, [r3, #16]
 801b030:	f003 0320 	and.w	r3, r3, #32
 801b034:	2b20      	cmp	r3, #32
 801b036:	d110      	bne.n	801b05a <HAL_TIM_IRQHandler+0x27a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801b038:	687b      	ldr	r3, [r7, #4]
 801b03a:	681b      	ldr	r3, [r3, #0]
 801b03c:	68db      	ldr	r3, [r3, #12]
 801b03e:	f003 0320 	and.w	r3, r3, #32
 801b042:	2b20      	cmp	r3, #32
 801b044:	d109      	bne.n	801b05a <HAL_TIM_IRQHandler+0x27a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801b046:	687b      	ldr	r3, [r7, #4]
 801b048:	681b      	ldr	r3, [r3, #0]
 801b04a:	f06f 0220 	mvn.w	r2, #32
 801b04e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 801b050:	687b      	ldr	r3, [r7, #4]
 801b052:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801b056:	6878      	ldr	r0, [r7, #4]
 801b058:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801b05a:	bf00      	nop
 801b05c:	3708      	adds	r7, #8
 801b05e:	46bd      	mov	sp, r7
 801b060:	bd80      	pop	{r7, pc}
	...

0801b064 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801b064:	b580      	push	{r7, lr}
 801b066:	b082      	sub	sp, #8
 801b068:	af00      	add	r7, sp, #0
 801b06a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801b06c:	687b      	ldr	r3, [r7, #4]
 801b06e:	2b00      	cmp	r3, #0
 801b070:	d101      	bne.n	801b076 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801b072:	2301      	movs	r3, #1
 801b074:	e04e      	b.n	801b114 <HAL_UART_Init+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801b076:	687b      	ldr	r3, [r7, #4]
 801b078:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b07a:	2b00      	cmp	r3, #0
 801b07c:	d114      	bne.n	801b0a8 <HAL_UART_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801b07e:	687b      	ldr	r3, [r7, #4]
 801b080:	2200      	movs	r2, #0
 801b082:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 801b086:	6878      	ldr	r0, [r7, #4]
 801b088:	f000 fc1c 	bl	801b8c4 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 801b08c:	687b      	ldr	r3, [r7, #4]
 801b08e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801b092:	2b00      	cmp	r3, #0
 801b094:	d103      	bne.n	801b09e <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 801b096:	687b      	ldr	r3, [r7, #4]
 801b098:	4a20      	ldr	r2, [pc, #128]	; (801b11c <HAL_UART_Init+0xb8>)
 801b09a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 801b09e:	687b      	ldr	r3, [r7, #4]
 801b0a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801b0a4:	6878      	ldr	r0, [r7, #4]
 801b0a6:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801b0a8:	687b      	ldr	r3, [r7, #4]
 801b0aa:	2224      	movs	r2, #36	; 0x24
 801b0ac:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 801b0ae:	687b      	ldr	r3, [r7, #4]
 801b0b0:	681b      	ldr	r3, [r3, #0]
 801b0b2:	681a      	ldr	r2, [r3, #0]
 801b0b4:	687b      	ldr	r3, [r7, #4]
 801b0b6:	681b      	ldr	r3, [r3, #0]
 801b0b8:	f022 0201 	bic.w	r2, r2, #1
 801b0bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801b0be:	6878      	ldr	r0, [r7, #4]
 801b0c0:	f000 fc46 	bl	801b950 <UART_SetConfig>
 801b0c4:	4603      	mov	r3, r0
 801b0c6:	2b01      	cmp	r3, #1
 801b0c8:	d101      	bne.n	801b0ce <HAL_UART_Init+0x6a>
  {
    return HAL_ERROR;
 801b0ca:	2301      	movs	r3, #1
 801b0cc:	e022      	b.n	801b114 <HAL_UART_Init+0xb0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801b0ce:	687b      	ldr	r3, [r7, #4]
 801b0d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b0d2:	2b00      	cmp	r3, #0
 801b0d4:	d002      	beq.n	801b0dc <HAL_UART_Init+0x78>
  {
    UART_AdvFeatureConfig(huart);
 801b0d6:	6878      	ldr	r0, [r7, #4]
 801b0d8:	f000 fe9e 	bl	801be18 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801b0dc:	687b      	ldr	r3, [r7, #4]
 801b0de:	681b      	ldr	r3, [r3, #0]
 801b0e0:	685a      	ldr	r2, [r3, #4]
 801b0e2:	687b      	ldr	r3, [r7, #4]
 801b0e4:	681b      	ldr	r3, [r3, #0]
 801b0e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801b0ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801b0ec:	687b      	ldr	r3, [r7, #4]
 801b0ee:	681b      	ldr	r3, [r3, #0]
 801b0f0:	689a      	ldr	r2, [r3, #8]
 801b0f2:	687b      	ldr	r3, [r7, #4]
 801b0f4:	681b      	ldr	r3, [r3, #0]
 801b0f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801b0fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801b0fc:	687b      	ldr	r3, [r7, #4]
 801b0fe:	681b      	ldr	r3, [r3, #0]
 801b100:	681a      	ldr	r2, [r3, #0]
 801b102:	687b      	ldr	r3, [r7, #4]
 801b104:	681b      	ldr	r3, [r3, #0]
 801b106:	f042 0201 	orr.w	r2, r2, #1
 801b10a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801b10c:	6878      	ldr	r0, [r7, #4]
 801b10e:	f000 ff25 	bl	801bf5c <UART_CheckIdleState>
 801b112:	4603      	mov	r3, r0
}
 801b114:	4618      	mov	r0, r3
 801b116:	3708      	adds	r7, #8
 801b118:	46bd      	mov	sp, r7
 801b11a:	bd80      	pop	{r7, pc}
 801b11c:	08014989 	.word	0x08014989

0801b120 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801b120:	b580      	push	{r7, lr}
 801b122:	b08a      	sub	sp, #40	; 0x28
 801b124:	af02      	add	r7, sp, #8
 801b126:	60f8      	str	r0, [r7, #12]
 801b128:	60b9      	str	r1, [r7, #8]
 801b12a:	603b      	str	r3, [r7, #0]
 801b12c:	4613      	mov	r3, r2
 801b12e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801b130:	68fb      	ldr	r3, [r7, #12]
 801b132:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b134:	2b20      	cmp	r3, #32
 801b136:	d171      	bne.n	801b21c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 801b138:	68bb      	ldr	r3, [r7, #8]
 801b13a:	2b00      	cmp	r3, #0
 801b13c:	d002      	beq.n	801b144 <HAL_UART_Transmit+0x24>
 801b13e:	88fb      	ldrh	r3, [r7, #6]
 801b140:	2b00      	cmp	r3, #0
 801b142:	d101      	bne.n	801b148 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 801b144:	2301      	movs	r3, #1
 801b146:	e06a      	b.n	801b21e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801b148:	68fb      	ldr	r3, [r7, #12]
 801b14a:	2200      	movs	r2, #0
 801b14c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801b150:	68fb      	ldr	r3, [r7, #12]
 801b152:	2221      	movs	r2, #33	; 0x21
 801b154:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801b156:	f7fa fa1b 	bl	8015590 <HAL_GetTick>
 801b15a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801b15c:	68fb      	ldr	r3, [r7, #12]
 801b15e:	88fa      	ldrh	r2, [r7, #6]
 801b160:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 801b164:	68fb      	ldr	r3, [r7, #12]
 801b166:	88fa      	ldrh	r2, [r7, #6]
 801b168:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801b16c:	68fb      	ldr	r3, [r7, #12]
 801b16e:	689b      	ldr	r3, [r3, #8]
 801b170:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801b174:	d108      	bne.n	801b188 <HAL_UART_Transmit+0x68>
 801b176:	68fb      	ldr	r3, [r7, #12]
 801b178:	691b      	ldr	r3, [r3, #16]
 801b17a:	2b00      	cmp	r3, #0
 801b17c:	d104      	bne.n	801b188 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 801b17e:	2300      	movs	r3, #0
 801b180:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801b182:	68bb      	ldr	r3, [r7, #8]
 801b184:	61bb      	str	r3, [r7, #24]
 801b186:	e003      	b.n	801b190 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 801b188:	68bb      	ldr	r3, [r7, #8]
 801b18a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801b18c:	2300      	movs	r3, #0
 801b18e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801b190:	e02c      	b.n	801b1ec <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801b192:	683b      	ldr	r3, [r7, #0]
 801b194:	9300      	str	r3, [sp, #0]
 801b196:	697b      	ldr	r3, [r7, #20]
 801b198:	2200      	movs	r2, #0
 801b19a:	2180      	movs	r1, #128	; 0x80
 801b19c:	68f8      	ldr	r0, [r7, #12]
 801b19e:	f000 ff2a 	bl	801bff6 <UART_WaitOnFlagUntilTimeout>
 801b1a2:	4603      	mov	r3, r0
 801b1a4:	2b00      	cmp	r3, #0
 801b1a6:	d001      	beq.n	801b1ac <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 801b1a8:	2303      	movs	r3, #3
 801b1aa:	e038      	b.n	801b21e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 801b1ac:	69fb      	ldr	r3, [r7, #28]
 801b1ae:	2b00      	cmp	r3, #0
 801b1b0:	d10b      	bne.n	801b1ca <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801b1b2:	69bb      	ldr	r3, [r7, #24]
 801b1b4:	881b      	ldrh	r3, [r3, #0]
 801b1b6:	461a      	mov	r2, r3
 801b1b8:	68fb      	ldr	r3, [r7, #12]
 801b1ba:	681b      	ldr	r3, [r3, #0]
 801b1bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801b1c0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801b1c2:	69bb      	ldr	r3, [r7, #24]
 801b1c4:	3302      	adds	r3, #2
 801b1c6:	61bb      	str	r3, [r7, #24]
 801b1c8:	e007      	b.n	801b1da <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801b1ca:	69fb      	ldr	r3, [r7, #28]
 801b1cc:	781a      	ldrb	r2, [r3, #0]
 801b1ce:	68fb      	ldr	r3, [r7, #12]
 801b1d0:	681b      	ldr	r3, [r3, #0]
 801b1d2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801b1d4:	69fb      	ldr	r3, [r7, #28]
 801b1d6:	3301      	adds	r3, #1
 801b1d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801b1da:	68fb      	ldr	r3, [r7, #12]
 801b1dc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 801b1e0:	b29b      	uxth	r3, r3
 801b1e2:	3b01      	subs	r3, #1
 801b1e4:	b29a      	uxth	r2, r3
 801b1e6:	68fb      	ldr	r3, [r7, #12]
 801b1e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 801b1ec:	68fb      	ldr	r3, [r7, #12]
 801b1ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 801b1f2:	b29b      	uxth	r3, r3
 801b1f4:	2b00      	cmp	r3, #0
 801b1f6:	d1cc      	bne.n	801b192 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801b1f8:	683b      	ldr	r3, [r7, #0]
 801b1fa:	9300      	str	r3, [sp, #0]
 801b1fc:	697b      	ldr	r3, [r7, #20]
 801b1fe:	2200      	movs	r2, #0
 801b200:	2140      	movs	r1, #64	; 0x40
 801b202:	68f8      	ldr	r0, [r7, #12]
 801b204:	f000 fef7 	bl	801bff6 <UART_WaitOnFlagUntilTimeout>
 801b208:	4603      	mov	r3, r0
 801b20a:	2b00      	cmp	r3, #0
 801b20c:	d001      	beq.n	801b212 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 801b20e:	2303      	movs	r3, #3
 801b210:	e005      	b.n	801b21e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801b212:	68fb      	ldr	r3, [r7, #12]
 801b214:	2220      	movs	r2, #32
 801b216:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 801b218:	2300      	movs	r3, #0
 801b21a:	e000      	b.n	801b21e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 801b21c:	2302      	movs	r3, #2
  }
}
 801b21e:	4618      	mov	r0, r3
 801b220:	3720      	adds	r7, #32
 801b222:	46bd      	mov	sp, r7
 801b224:	bd80      	pop	{r7, pc}
	...

0801b228 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801b228:	b580      	push	{r7, lr}
 801b22a:	b0ba      	sub	sp, #232	; 0xe8
 801b22c:	af00      	add	r7, sp, #0
 801b22e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801b230:	687b      	ldr	r3, [r7, #4]
 801b232:	681b      	ldr	r3, [r3, #0]
 801b234:	69db      	ldr	r3, [r3, #28]
 801b236:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801b23a:	687b      	ldr	r3, [r7, #4]
 801b23c:	681b      	ldr	r3, [r3, #0]
 801b23e:	681b      	ldr	r3, [r3, #0]
 801b240:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801b244:	687b      	ldr	r3, [r7, #4]
 801b246:	681b      	ldr	r3, [r3, #0]
 801b248:	689b      	ldr	r3, [r3, #8]
 801b24a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801b24e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801b252:	f640 030f 	movw	r3, #2063	; 0x80f
 801b256:	4013      	ands	r3, r2
 801b258:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 801b25c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801b260:	2b00      	cmp	r3, #0
 801b262:	d115      	bne.n	801b290 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 801b264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b268:	f003 0320 	and.w	r3, r3, #32
 801b26c:	2b00      	cmp	r3, #0
 801b26e:	d00f      	beq.n	801b290 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801b270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b274:	f003 0320 	and.w	r3, r3, #32
 801b278:	2b00      	cmp	r3, #0
 801b27a:	d009      	beq.n	801b290 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 801b27c:	687b      	ldr	r3, [r7, #4]
 801b27e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801b280:	2b00      	cmp	r3, #0
 801b282:	f000 82b8 	beq.w	801b7f6 <HAL_UART_IRQHandler+0x5ce>
      {
        huart->RxISR(huart);
 801b286:	687b      	ldr	r3, [r7, #4]
 801b288:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801b28a:	6878      	ldr	r0, [r7, #4]
 801b28c:	4798      	blx	r3
      }
      return;
 801b28e:	e2b2      	b.n	801b7f6 <HAL_UART_IRQHandler+0x5ce>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801b290:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801b294:	2b00      	cmp	r3, #0
 801b296:	f000 811d 	beq.w	801b4d4 <HAL_UART_IRQHandler+0x2ac>
      && (((cr3its & USART_CR3_EIE) != 0U)
 801b29a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801b29e:	f003 0301 	and.w	r3, r3, #1
 801b2a2:	2b00      	cmp	r3, #0
 801b2a4:	d106      	bne.n	801b2b4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801b2a6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801b2aa:	4b88      	ldr	r3, [pc, #544]	; (801b4cc <HAL_UART_IRQHandler+0x2a4>)
 801b2ac:	4013      	ands	r3, r2
 801b2ae:	2b00      	cmp	r3, #0
 801b2b0:	f000 8110 	beq.w	801b4d4 <HAL_UART_IRQHandler+0x2ac>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801b2b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b2b8:	f003 0301 	and.w	r3, r3, #1
 801b2bc:	2b00      	cmp	r3, #0
 801b2be:	d011      	beq.n	801b2e4 <HAL_UART_IRQHandler+0xbc>
 801b2c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b2c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b2c8:	2b00      	cmp	r3, #0
 801b2ca:	d00b      	beq.n	801b2e4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801b2cc:	687b      	ldr	r3, [r7, #4]
 801b2ce:	681b      	ldr	r3, [r3, #0]
 801b2d0:	2201      	movs	r2, #1
 801b2d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801b2d4:	687b      	ldr	r3, [r7, #4]
 801b2d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b2da:	f043 0201 	orr.w	r2, r3, #1
 801b2de:	687b      	ldr	r3, [r7, #4]
 801b2e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801b2e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b2e8:	f003 0302 	and.w	r3, r3, #2
 801b2ec:	2b00      	cmp	r3, #0
 801b2ee:	d011      	beq.n	801b314 <HAL_UART_IRQHandler+0xec>
 801b2f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801b2f4:	f003 0301 	and.w	r3, r3, #1
 801b2f8:	2b00      	cmp	r3, #0
 801b2fa:	d00b      	beq.n	801b314 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801b2fc:	687b      	ldr	r3, [r7, #4]
 801b2fe:	681b      	ldr	r3, [r3, #0]
 801b300:	2202      	movs	r2, #2
 801b302:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801b304:	687b      	ldr	r3, [r7, #4]
 801b306:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b30a:	f043 0204 	orr.w	r2, r3, #4
 801b30e:	687b      	ldr	r3, [r7, #4]
 801b310:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801b314:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b318:	f003 0304 	and.w	r3, r3, #4
 801b31c:	2b00      	cmp	r3, #0
 801b31e:	d011      	beq.n	801b344 <HAL_UART_IRQHandler+0x11c>
 801b320:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801b324:	f003 0301 	and.w	r3, r3, #1
 801b328:	2b00      	cmp	r3, #0
 801b32a:	d00b      	beq.n	801b344 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801b32c:	687b      	ldr	r3, [r7, #4]
 801b32e:	681b      	ldr	r3, [r3, #0]
 801b330:	2204      	movs	r2, #4
 801b332:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801b334:	687b      	ldr	r3, [r7, #4]
 801b336:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b33a:	f043 0202 	orr.w	r2, r3, #2
 801b33e:	687b      	ldr	r3, [r7, #4]
 801b340:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801b344:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b348:	f003 0308 	and.w	r3, r3, #8
 801b34c:	2b00      	cmp	r3, #0
 801b34e:	d017      	beq.n	801b380 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801b350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b354:	f003 0320 	and.w	r3, r3, #32
 801b358:	2b00      	cmp	r3, #0
 801b35a:	d105      	bne.n	801b368 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 801b35c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801b360:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801b364:	2b00      	cmp	r3, #0
 801b366:	d00b      	beq.n	801b380 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801b368:	687b      	ldr	r3, [r7, #4]
 801b36a:	681b      	ldr	r3, [r3, #0]
 801b36c:	2208      	movs	r2, #8
 801b36e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801b370:	687b      	ldr	r3, [r7, #4]
 801b372:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b376:	f043 0208 	orr.w	r2, r3, #8
 801b37a:	687b      	ldr	r3, [r7, #4]
 801b37c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801b380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b384:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801b388:	2b00      	cmp	r3, #0
 801b38a:	d012      	beq.n	801b3b2 <HAL_UART_IRQHandler+0x18a>
 801b38c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b390:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801b394:	2b00      	cmp	r3, #0
 801b396:	d00c      	beq.n	801b3b2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801b398:	687b      	ldr	r3, [r7, #4]
 801b39a:	681b      	ldr	r3, [r3, #0]
 801b39c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801b3a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801b3a2:	687b      	ldr	r3, [r7, #4]
 801b3a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b3a8:	f043 0220 	orr.w	r2, r3, #32
 801b3ac:	687b      	ldr	r3, [r7, #4]
 801b3ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801b3b2:	687b      	ldr	r3, [r7, #4]
 801b3b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b3b8:	2b00      	cmp	r3, #0
 801b3ba:	f000 821e 	beq.w	801b7fa <HAL_UART_IRQHandler+0x5d2>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 801b3be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b3c2:	f003 0320 	and.w	r3, r3, #32
 801b3c6:	2b00      	cmp	r3, #0
 801b3c8:	d00d      	beq.n	801b3e6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801b3ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b3ce:	f003 0320 	and.w	r3, r3, #32
 801b3d2:	2b00      	cmp	r3, #0
 801b3d4:	d007      	beq.n	801b3e6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 801b3d6:	687b      	ldr	r3, [r7, #4]
 801b3d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801b3da:	2b00      	cmp	r3, #0
 801b3dc:	d003      	beq.n	801b3e6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 801b3de:	687b      	ldr	r3, [r7, #4]
 801b3e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801b3e2:	6878      	ldr	r0, [r7, #4]
 801b3e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801b3e6:	687b      	ldr	r3, [r7, #4]
 801b3e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b3ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801b3f0:	687b      	ldr	r3, [r7, #4]
 801b3f2:	681b      	ldr	r3, [r3, #0]
 801b3f4:	689b      	ldr	r3, [r3, #8]
 801b3f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b3fa:	2b40      	cmp	r3, #64	; 0x40
 801b3fc:	d005      	beq.n	801b40a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801b3fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801b402:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801b406:	2b00      	cmp	r3, #0
 801b408:	d053      	beq.n	801b4b2 <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801b40a:	6878      	ldr	r0, [r7, #4]
 801b40c:	f000 ff80 	bl	801c310 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b410:	687b      	ldr	r3, [r7, #4]
 801b412:	681b      	ldr	r3, [r3, #0]
 801b414:	689b      	ldr	r3, [r3, #8]
 801b416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b41a:	2b40      	cmp	r3, #64	; 0x40
 801b41c:	d143      	bne.n	801b4a6 <HAL_UART_IRQHandler+0x27e>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801b41e:	687b      	ldr	r3, [r7, #4]
 801b420:	681b      	ldr	r3, [r3, #0]
 801b422:	3308      	adds	r3, #8
 801b424:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b428:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b42c:	e853 3f00 	ldrex	r3, [r3]
 801b430:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 801b434:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801b438:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801b43c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801b440:	687b      	ldr	r3, [r7, #4]
 801b442:	681b      	ldr	r3, [r3, #0]
 801b444:	3308      	adds	r3, #8
 801b446:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801b44a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801b44e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b452:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801b456:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801b45a:	e841 2300 	strex	r3, r2, [r1]
 801b45e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801b462:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801b466:	2b00      	cmp	r3, #0
 801b468:	d1d9      	bne.n	801b41e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801b46a:	687b      	ldr	r3, [r7, #4]
 801b46c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b46e:	2b00      	cmp	r3, #0
 801b470:	d013      	beq.n	801b49a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801b472:	687b      	ldr	r3, [r7, #4]
 801b474:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b476:	4a16      	ldr	r2, [pc, #88]	; (801b4d0 <HAL_UART_IRQHandler+0x2a8>)
 801b478:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801b47a:	687b      	ldr	r3, [r7, #4]
 801b47c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b47e:	4618      	mov	r0, r3
 801b480:	f7fb f98a 	bl	8016798 <HAL_DMA_Abort_IT>
 801b484:	4603      	mov	r3, r0
 801b486:	2b00      	cmp	r3, #0
 801b488:	d01d      	beq.n	801b4c6 <HAL_UART_IRQHandler+0x29e>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801b48a:	687b      	ldr	r3, [r7, #4]
 801b48c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b48e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b490:	687a      	ldr	r2, [r7, #4]
 801b492:	6f52      	ldr	r2, [r2, #116]	; 0x74
 801b494:	4610      	mov	r0, r2
 801b496:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b498:	e015      	b.n	801b4c6 <HAL_UART_IRQHandler+0x29e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 801b49a:	687b      	ldr	r3, [r7, #4]
 801b49c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801b4a0:	6878      	ldr	r0, [r7, #4]
 801b4a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b4a4:	e00f      	b.n	801b4c6 <HAL_UART_IRQHandler+0x29e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 801b4a6:	687b      	ldr	r3, [r7, #4]
 801b4a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801b4ac:	6878      	ldr	r0, [r7, #4]
 801b4ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b4b0:	e009      	b.n	801b4c6 <HAL_UART_IRQHandler+0x29e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 801b4b2:	687b      	ldr	r3, [r7, #4]
 801b4b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801b4b8:	6878      	ldr	r0, [r7, #4]
 801b4ba:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801b4bc:	687b      	ldr	r3, [r7, #4]
 801b4be:	2200      	movs	r2, #0
 801b4c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 801b4c4:	e199      	b.n	801b7fa <HAL_UART_IRQHandler+0x5d2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b4c6:	bf00      	nop
    return;
 801b4c8:	e197      	b.n	801b7fa <HAL_UART_IRQHandler+0x5d2>
 801b4ca:	bf00      	nop
 801b4cc:	04000120 	.word	0x04000120
 801b4d0:	0801c3d9 	.word	0x0801c3d9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b4d4:	687b      	ldr	r3, [r7, #4]
 801b4d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b4d8:	2b01      	cmp	r3, #1
 801b4da:	f040 8150 	bne.w	801b77e <HAL_UART_IRQHandler+0x556>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801b4de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b4e2:	f003 0310 	and.w	r3, r3, #16
 801b4e6:	2b00      	cmp	r3, #0
 801b4e8:	f000 8149 	beq.w	801b77e <HAL_UART_IRQHandler+0x556>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801b4ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b4f0:	f003 0310 	and.w	r3, r3, #16
 801b4f4:	2b00      	cmp	r3, #0
 801b4f6:	f000 8142 	beq.w	801b77e <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801b4fa:	687b      	ldr	r3, [r7, #4]
 801b4fc:	681b      	ldr	r3, [r3, #0]
 801b4fe:	2210      	movs	r2, #16
 801b500:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b502:	687b      	ldr	r3, [r7, #4]
 801b504:	681b      	ldr	r3, [r3, #0]
 801b506:	689b      	ldr	r3, [r3, #8]
 801b508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b50c:	2b40      	cmp	r3, #64	; 0x40
 801b50e:	f040 80b8 	bne.w	801b682 <HAL_UART_IRQHandler+0x45a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801b512:	687b      	ldr	r3, [r7, #4]
 801b514:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b516:	681b      	ldr	r3, [r3, #0]
 801b518:	685b      	ldr	r3, [r3, #4]
 801b51a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 801b51e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 801b522:	2b00      	cmp	r3, #0
 801b524:	f000 816b 	beq.w	801b7fe <HAL_UART_IRQHandler+0x5d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801b528:	687b      	ldr	r3, [r7, #4]
 801b52a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801b52e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801b532:	429a      	cmp	r2, r3
 801b534:	f080 8163 	bcs.w	801b7fe <HAL_UART_IRQHandler+0x5d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801b538:	687b      	ldr	r3, [r7, #4]
 801b53a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801b53e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 801b542:	687b      	ldr	r3, [r7, #4]
 801b544:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b546:	69db      	ldr	r3, [r3, #28]
 801b548:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b54c:	f000 8086 	beq.w	801b65c <HAL_UART_IRQHandler+0x434>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801b550:	687b      	ldr	r3, [r7, #4]
 801b552:	681b      	ldr	r3, [r3, #0]
 801b554:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b558:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801b55c:	e853 3f00 	ldrex	r3, [r3]
 801b560:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 801b564:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801b568:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801b56c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801b570:	687b      	ldr	r3, [r7, #4]
 801b572:	681b      	ldr	r3, [r3, #0]
 801b574:	461a      	mov	r2, r3
 801b576:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801b57a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801b57e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b582:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801b586:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801b58a:	e841 2300 	strex	r3, r2, [r1]
 801b58e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801b592:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801b596:	2b00      	cmp	r3, #0
 801b598:	d1da      	bne.n	801b550 <HAL_UART_IRQHandler+0x328>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b59a:	687b      	ldr	r3, [r7, #4]
 801b59c:	681b      	ldr	r3, [r3, #0]
 801b59e:	3308      	adds	r3, #8
 801b5a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b5a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b5a4:	e853 3f00 	ldrex	r3, [r3]
 801b5a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801b5aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801b5ac:	f023 0301 	bic.w	r3, r3, #1
 801b5b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801b5b4:	687b      	ldr	r3, [r7, #4]
 801b5b6:	681b      	ldr	r3, [r3, #0]
 801b5b8:	3308      	adds	r3, #8
 801b5ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801b5be:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801b5c2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b5c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801b5c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801b5ca:	e841 2300 	strex	r3, r2, [r1]
 801b5ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801b5d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801b5d2:	2b00      	cmp	r3, #0
 801b5d4:	d1e1      	bne.n	801b59a <HAL_UART_IRQHandler+0x372>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801b5d6:	687b      	ldr	r3, [r7, #4]
 801b5d8:	681b      	ldr	r3, [r3, #0]
 801b5da:	3308      	adds	r3, #8
 801b5dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b5de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801b5e0:	e853 3f00 	ldrex	r3, [r3]
 801b5e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801b5e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801b5e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801b5ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801b5f0:	687b      	ldr	r3, [r7, #4]
 801b5f2:	681b      	ldr	r3, [r3, #0]
 801b5f4:	3308      	adds	r3, #8
 801b5f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801b5fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 801b5fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b5fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801b600:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801b602:	e841 2300 	strex	r3, r2, [r1]
 801b606:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801b608:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801b60a:	2b00      	cmp	r3, #0
 801b60c:	d1e3      	bne.n	801b5d6 <HAL_UART_IRQHandler+0x3ae>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801b60e:	687b      	ldr	r3, [r7, #4]
 801b610:	2220      	movs	r2, #32
 801b612:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801b616:	687b      	ldr	r3, [r7, #4]
 801b618:	2200      	movs	r2, #0
 801b61a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801b61c:	687b      	ldr	r3, [r7, #4]
 801b61e:	681b      	ldr	r3, [r3, #0]
 801b620:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b622:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b624:	e853 3f00 	ldrex	r3, [r3]
 801b628:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801b62a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b62c:	f023 0310 	bic.w	r3, r3, #16
 801b630:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801b634:	687b      	ldr	r3, [r7, #4]
 801b636:	681b      	ldr	r3, [r3, #0]
 801b638:	461a      	mov	r2, r3
 801b63a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801b63e:	65bb      	str	r3, [r7, #88]	; 0x58
 801b640:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b642:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801b644:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801b646:	e841 2300 	strex	r3, r2, [r1]
 801b64a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801b64c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b64e:	2b00      	cmp	r3, #0
 801b650:	d1e4      	bne.n	801b61c <HAL_UART_IRQHandler+0x3f4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801b652:	687b      	ldr	r3, [r7, #4]
 801b654:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b656:	4618      	mov	r0, r3
 801b658:	f7fb f82e 	bl	80166b8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801b65c:	687b      	ldr	r3, [r7, #4]
 801b65e:	2202      	movs	r2, #2
 801b660:	665a      	str	r2, [r3, #100]	; 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801b662:	687b      	ldr	r3, [r7, #4]
 801b664:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801b668:	687a      	ldr	r2, [r7, #4]
 801b66a:	f8b2 1058 	ldrh.w	r1, [r2, #88]	; 0x58
 801b66e:	687a      	ldr	r2, [r7, #4]
 801b670:	f8b2 205a 	ldrh.w	r2, [r2, #90]	; 0x5a
 801b674:	b292      	uxth	r2, r2
 801b676:	1a8a      	subs	r2, r1, r2
 801b678:	b292      	uxth	r2, r2
 801b67a:	4611      	mov	r1, r2
 801b67c:	6878      	ldr	r0, [r7, #4]
 801b67e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801b680:	e0bd      	b.n	801b7fe <HAL_UART_IRQHandler+0x5d6>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801b682:	687b      	ldr	r3, [r7, #4]
 801b684:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 801b688:	687b      	ldr	r3, [r7, #4]
 801b68a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801b68e:	b29b      	uxth	r3, r3
 801b690:	1ad3      	subs	r3, r2, r3
 801b692:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 801b696:	687b      	ldr	r3, [r7, #4]
 801b698:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801b69c:	b29b      	uxth	r3, r3
 801b69e:	2b00      	cmp	r3, #0
 801b6a0:	f000 80af 	beq.w	801b802 <HAL_UART_IRQHandler+0x5da>
          && (nb_rx_data > 0U))
 801b6a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801b6a8:	2b00      	cmp	r3, #0
 801b6aa:	f000 80aa 	beq.w	801b802 <HAL_UART_IRQHandler+0x5da>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801b6ae:	687b      	ldr	r3, [r7, #4]
 801b6b0:	681b      	ldr	r3, [r3, #0]
 801b6b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b6b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b6b6:	e853 3f00 	ldrex	r3, [r3]
 801b6ba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801b6bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b6be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801b6c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801b6c6:	687b      	ldr	r3, [r7, #4]
 801b6c8:	681b      	ldr	r3, [r3, #0]
 801b6ca:	461a      	mov	r2, r3
 801b6cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801b6d0:	647b      	str	r3, [r7, #68]	; 0x44
 801b6d2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b6d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801b6d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801b6d8:	e841 2300 	strex	r3, r2, [r1]
 801b6dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801b6de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b6e0:	2b00      	cmp	r3, #0
 801b6e2:	d1e4      	bne.n	801b6ae <HAL_UART_IRQHandler+0x486>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b6e4:	687b      	ldr	r3, [r7, #4]
 801b6e6:	681b      	ldr	r3, [r3, #0]
 801b6e8:	3308      	adds	r3, #8
 801b6ea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b6ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b6ee:	e853 3f00 	ldrex	r3, [r3]
 801b6f2:	623b      	str	r3, [r7, #32]
   return(result);
 801b6f4:	6a3b      	ldr	r3, [r7, #32]
 801b6f6:	f023 0301 	bic.w	r3, r3, #1
 801b6fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801b6fe:	687b      	ldr	r3, [r7, #4]
 801b700:	681b      	ldr	r3, [r3, #0]
 801b702:	3308      	adds	r3, #8
 801b704:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801b708:	633a      	str	r2, [r7, #48]	; 0x30
 801b70a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b70c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801b70e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b710:	e841 2300 	strex	r3, r2, [r1]
 801b714:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801b716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b718:	2b00      	cmp	r3, #0
 801b71a:	d1e3      	bne.n	801b6e4 <HAL_UART_IRQHandler+0x4bc>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801b71c:	687b      	ldr	r3, [r7, #4]
 801b71e:	2220      	movs	r2, #32
 801b720:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801b724:	687b      	ldr	r3, [r7, #4]
 801b726:	2200      	movs	r2, #0
 801b728:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801b72a:	687b      	ldr	r3, [r7, #4]
 801b72c:	2200      	movs	r2, #0
 801b72e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801b730:	687b      	ldr	r3, [r7, #4]
 801b732:	681b      	ldr	r3, [r3, #0]
 801b734:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b736:	693b      	ldr	r3, [r7, #16]
 801b738:	e853 3f00 	ldrex	r3, [r3]
 801b73c:	60fb      	str	r3, [r7, #12]
   return(result);
 801b73e:	68fb      	ldr	r3, [r7, #12]
 801b740:	f023 0310 	bic.w	r3, r3, #16
 801b744:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801b748:	687b      	ldr	r3, [r7, #4]
 801b74a:	681b      	ldr	r3, [r3, #0]
 801b74c:	461a      	mov	r2, r3
 801b74e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801b752:	61fb      	str	r3, [r7, #28]
 801b754:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b756:	69b9      	ldr	r1, [r7, #24]
 801b758:	69fa      	ldr	r2, [r7, #28]
 801b75a:	e841 2300 	strex	r3, r2, [r1]
 801b75e:	617b      	str	r3, [r7, #20]
   return(result);
 801b760:	697b      	ldr	r3, [r7, #20]
 801b762:	2b00      	cmp	r3, #0
 801b764:	d1e4      	bne.n	801b730 <HAL_UART_IRQHandler+0x508>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801b766:	687b      	ldr	r3, [r7, #4]
 801b768:	2202      	movs	r2, #2
 801b76a:	665a      	str	r2, [r3, #100]	; 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 801b76c:	687b      	ldr	r3, [r7, #4]
 801b76e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801b772:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 801b776:	4611      	mov	r1, r2
 801b778:	6878      	ldr	r0, [r7, #4]
 801b77a:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801b77c:	e041      	b.n	801b802 <HAL_UART_IRQHandler+0x5da>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801b77e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b782:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801b786:	2b00      	cmp	r3, #0
 801b788:	d010      	beq.n	801b7ac <HAL_UART_IRQHandler+0x584>
 801b78a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801b78e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801b792:	2b00      	cmp	r3, #0
 801b794:	d00a      	beq.n	801b7ac <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801b796:	687b      	ldr	r3, [r7, #4]
 801b798:	681b      	ldr	r3, [r3, #0]
 801b79a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801b79e:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 801b7a0:	687b      	ldr	r3, [r7, #4]
 801b7a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801b7a6:	6878      	ldr	r0, [r7, #4]
 801b7a8:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801b7aa:	e02d      	b.n	801b808 <HAL_UART_IRQHandler+0x5e0>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 801b7ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b7b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b7b4:	2b00      	cmp	r3, #0
 801b7b6:	d00e      	beq.n	801b7d6 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 801b7b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b7bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b7c0:	2b00      	cmp	r3, #0
 801b7c2:	d008      	beq.n	801b7d6 <HAL_UART_IRQHandler+0x5ae>
  {
    if (huart->TxISR != NULL)
 801b7c4:	687b      	ldr	r3, [r7, #4]
 801b7c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b7c8:	2b00      	cmp	r3, #0
 801b7ca:	d01c      	beq.n	801b806 <HAL_UART_IRQHandler+0x5de>
    {
      huart->TxISR(huart);
 801b7cc:	687b      	ldr	r3, [r7, #4]
 801b7ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b7d0:	6878      	ldr	r0, [r7, #4]
 801b7d2:	4798      	blx	r3
    }
    return;
 801b7d4:	e017      	b.n	801b806 <HAL_UART_IRQHandler+0x5de>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801b7d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b7da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b7de:	2b00      	cmp	r3, #0
 801b7e0:	d012      	beq.n	801b808 <HAL_UART_IRQHandler+0x5e0>
 801b7e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b7e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b7ea:	2b00      	cmp	r3, #0
 801b7ec:	d00c      	beq.n	801b808 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 801b7ee:	6878      	ldr	r0, [r7, #4]
 801b7f0:	f000 fe0a 	bl	801c408 <UART_EndTransmit_IT>
    return;
 801b7f4:	e008      	b.n	801b808 <HAL_UART_IRQHandler+0x5e0>
      return;
 801b7f6:	bf00      	nop
 801b7f8:	e006      	b.n	801b808 <HAL_UART_IRQHandler+0x5e0>
    return;
 801b7fa:	bf00      	nop
 801b7fc:	e004      	b.n	801b808 <HAL_UART_IRQHandler+0x5e0>
      return;
 801b7fe:	bf00      	nop
 801b800:	e002      	b.n	801b808 <HAL_UART_IRQHandler+0x5e0>
      return;
 801b802:	bf00      	nop
 801b804:	e000      	b.n	801b808 <HAL_UART_IRQHandler+0x5e0>
    return;
 801b806:	bf00      	nop
  }

}
 801b808:	37e8      	adds	r7, #232	; 0xe8
 801b80a:	46bd      	mov	sp, r7
 801b80c:	bd80      	pop	{r7, pc}
 801b80e:	bf00      	nop

0801b810 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801b810:	b480      	push	{r7}
 801b812:	b083      	sub	sp, #12
 801b814:	af00      	add	r7, sp, #0
 801b816:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801b818:	bf00      	nop
 801b81a:	370c      	adds	r7, #12
 801b81c:	46bd      	mov	sp, r7
 801b81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b822:	4770      	bx	lr

0801b824 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801b824:	b480      	push	{r7}
 801b826:	b083      	sub	sp, #12
 801b828:	af00      	add	r7, sp, #0
 801b82a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 801b82c:	bf00      	nop
 801b82e:	370c      	adds	r7, #12
 801b830:	46bd      	mov	sp, r7
 801b832:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b836:	4770      	bx	lr

0801b838 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 801b838:	b480      	push	{r7}
 801b83a:	b083      	sub	sp, #12
 801b83c:	af00      	add	r7, sp, #0
 801b83e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 801b840:	bf00      	nop
 801b842:	370c      	adds	r7, #12
 801b844:	46bd      	mov	sp, r7
 801b846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b84a:	4770      	bx	lr

0801b84c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801b84c:	b480      	push	{r7}
 801b84e:	b083      	sub	sp, #12
 801b850:	af00      	add	r7, sp, #0
 801b852:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801b854:	bf00      	nop
 801b856:	370c      	adds	r7, #12
 801b858:	46bd      	mov	sp, r7
 801b85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b85e:	4770      	bx	lr

0801b860 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801b860:	b480      	push	{r7}
 801b862:	b083      	sub	sp, #12
 801b864:	af00      	add	r7, sp, #0
 801b866:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801b868:	bf00      	nop
 801b86a:	370c      	adds	r7, #12
 801b86c:	46bd      	mov	sp, r7
 801b86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b872:	4770      	bx	lr

0801b874 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 801b874:	b480      	push	{r7}
 801b876:	b083      	sub	sp, #12
 801b878:	af00      	add	r7, sp, #0
 801b87a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 801b87c:	bf00      	nop
 801b87e:	370c      	adds	r7, #12
 801b880:	46bd      	mov	sp, r7
 801b882:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b886:	4770      	bx	lr

0801b888 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 801b888:	b480      	push	{r7}
 801b88a:	b083      	sub	sp, #12
 801b88c:	af00      	add	r7, sp, #0
 801b88e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 801b890:	bf00      	nop
 801b892:	370c      	adds	r7, #12
 801b894:	46bd      	mov	sp, r7
 801b896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b89a:	4770      	bx	lr

0801b89c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 801b89c:	b480      	push	{r7}
 801b89e:	b083      	sub	sp, #12
 801b8a0:	af00      	add	r7, sp, #0
 801b8a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 801b8a4:	bf00      	nop
 801b8a6:	370c      	adds	r7, #12
 801b8a8:	46bd      	mov	sp, r7
 801b8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8ae:	4770      	bx	lr

0801b8b0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801b8b0:	b480      	push	{r7}
 801b8b2:	b083      	sub	sp, #12
 801b8b4:	af00      	add	r7, sp, #0
 801b8b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801b8b8:	bf00      	nop
 801b8ba:	370c      	adds	r7, #12
 801b8bc:	46bd      	mov	sp, r7
 801b8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8c2:	4770      	bx	lr

0801b8c4 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 801b8c4:	b480      	push	{r7}
 801b8c6:	b083      	sub	sp, #12
 801b8c8:	af00      	add	r7, sp, #0
 801b8ca:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 801b8cc:	687b      	ldr	r3, [r7, #4]
 801b8ce:	4a16      	ldr	r2, [pc, #88]	; (801b928 <UART_InitCallbacksToDefault+0x64>)
 801b8d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 801b8d4:	687b      	ldr	r3, [r7, #4]
 801b8d6:	4a15      	ldr	r2, [pc, #84]	; (801b92c <UART_InitCallbacksToDefault+0x68>)
 801b8d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 801b8dc:	687b      	ldr	r3, [r7, #4]
 801b8de:	4a14      	ldr	r2, [pc, #80]	; (801b930 <UART_InitCallbacksToDefault+0x6c>)
 801b8e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 801b8e4:	687b      	ldr	r3, [r7, #4]
 801b8e6:	4a13      	ldr	r2, [pc, #76]	; (801b934 <UART_InitCallbacksToDefault+0x70>)
 801b8e8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 801b8ec:	687b      	ldr	r3, [r7, #4]
 801b8ee:	4a12      	ldr	r2, [pc, #72]	; (801b938 <UART_InitCallbacksToDefault+0x74>)
 801b8f0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 801b8f4:	687b      	ldr	r3, [r7, #4]
 801b8f6:	4a11      	ldr	r2, [pc, #68]	; (801b93c <UART_InitCallbacksToDefault+0x78>)
 801b8f8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 801b8fc:	687b      	ldr	r3, [r7, #4]
 801b8fe:	4a10      	ldr	r2, [pc, #64]	; (801b940 <UART_InitCallbacksToDefault+0x7c>)
 801b900:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 801b904:	687b      	ldr	r3, [r7, #4]
 801b906:	4a0f      	ldr	r2, [pc, #60]	; (801b944 <UART_InitCallbacksToDefault+0x80>)
 801b908:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 801b90c:	687b      	ldr	r3, [r7, #4]
 801b90e:	4a0e      	ldr	r2, [pc, #56]	; (801b948 <UART_InitCallbacksToDefault+0x84>)
 801b910:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 801b914:	687b      	ldr	r3, [r7, #4]
 801b916:	4a0d      	ldr	r2, [pc, #52]	; (801b94c <UART_InitCallbacksToDefault+0x88>)
 801b918:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

}
 801b91c:	bf00      	nop
 801b91e:	370c      	adds	r7, #12
 801b920:	46bd      	mov	sp, r7
 801b922:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b926:	4770      	bx	lr
 801b928:	0801b825 	.word	0x0801b825
 801b92c:	0801b811 	.word	0x0801b811
 801b930:	0801b84d 	.word	0x0801b84d
 801b934:	0801b839 	.word	0x0801b839
 801b938:	0801b861 	.word	0x0801b861
 801b93c:	0801b875 	.word	0x0801b875
 801b940:	0801b889 	.word	0x0801b889
 801b944:	0801b89d 	.word	0x0801b89d
 801b948:	0801b8b1 	.word	0x0801b8b1
 801b94c:	08014ced 	.word	0x08014ced

0801b950 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801b950:	b580      	push	{r7, lr}
 801b952:	b088      	sub	sp, #32
 801b954:	af00      	add	r7, sp, #0
 801b956:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801b958:	2300      	movs	r3, #0
 801b95a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801b95c:	687b      	ldr	r3, [r7, #4]
 801b95e:	689a      	ldr	r2, [r3, #8]
 801b960:	687b      	ldr	r3, [r7, #4]
 801b962:	691b      	ldr	r3, [r3, #16]
 801b964:	431a      	orrs	r2, r3
 801b966:	687b      	ldr	r3, [r7, #4]
 801b968:	695b      	ldr	r3, [r3, #20]
 801b96a:	431a      	orrs	r2, r3
 801b96c:	687b      	ldr	r3, [r7, #4]
 801b96e:	69db      	ldr	r3, [r3, #28]
 801b970:	4313      	orrs	r3, r2
 801b972:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801b974:	687b      	ldr	r3, [r7, #4]
 801b976:	681b      	ldr	r3, [r3, #0]
 801b978:	681a      	ldr	r2, [r3, #0]
 801b97a:	4ba6      	ldr	r3, [pc, #664]	; (801bc14 <UART_SetConfig+0x2c4>)
 801b97c:	4013      	ands	r3, r2
 801b97e:	687a      	ldr	r2, [r7, #4]
 801b980:	6812      	ldr	r2, [r2, #0]
 801b982:	6979      	ldr	r1, [r7, #20]
 801b984:	430b      	orrs	r3, r1
 801b986:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801b988:	687b      	ldr	r3, [r7, #4]
 801b98a:	681b      	ldr	r3, [r3, #0]
 801b98c:	685b      	ldr	r3, [r3, #4]
 801b98e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801b992:	687b      	ldr	r3, [r7, #4]
 801b994:	68da      	ldr	r2, [r3, #12]
 801b996:	687b      	ldr	r3, [r7, #4]
 801b998:	681b      	ldr	r3, [r3, #0]
 801b99a:	430a      	orrs	r2, r1
 801b99c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801b99e:	687b      	ldr	r3, [r7, #4]
 801b9a0:	699b      	ldr	r3, [r3, #24]
 801b9a2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 801b9a4:	687b      	ldr	r3, [r7, #4]
 801b9a6:	6a1b      	ldr	r3, [r3, #32]
 801b9a8:	697a      	ldr	r2, [r7, #20]
 801b9aa:	4313      	orrs	r3, r2
 801b9ac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801b9ae:	687b      	ldr	r3, [r7, #4]
 801b9b0:	681b      	ldr	r3, [r3, #0]
 801b9b2:	689b      	ldr	r3, [r3, #8]
 801b9b4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 801b9b8:	687b      	ldr	r3, [r7, #4]
 801b9ba:	681b      	ldr	r3, [r3, #0]
 801b9bc:	697a      	ldr	r2, [r7, #20]
 801b9be:	430a      	orrs	r2, r1
 801b9c0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801b9c2:	687b      	ldr	r3, [r7, #4]
 801b9c4:	681b      	ldr	r3, [r3, #0]
 801b9c6:	4a94      	ldr	r2, [pc, #592]	; (801bc18 <UART_SetConfig+0x2c8>)
 801b9c8:	4293      	cmp	r3, r2
 801b9ca:	d120      	bne.n	801ba0e <UART_SetConfig+0xbe>
 801b9cc:	4b93      	ldr	r3, [pc, #588]	; (801bc1c <UART_SetConfig+0x2cc>)
 801b9ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b9d2:	f003 0303 	and.w	r3, r3, #3
 801b9d6:	2b03      	cmp	r3, #3
 801b9d8:	d816      	bhi.n	801ba08 <UART_SetConfig+0xb8>
 801b9da:	a201      	add	r2, pc, #4	; (adr r2, 801b9e0 <UART_SetConfig+0x90>)
 801b9dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b9e0:	0801b9f1 	.word	0x0801b9f1
 801b9e4:	0801b9fd 	.word	0x0801b9fd
 801b9e8:	0801b9f7 	.word	0x0801b9f7
 801b9ec:	0801ba03 	.word	0x0801ba03
 801b9f0:	2301      	movs	r3, #1
 801b9f2:	77fb      	strb	r3, [r7, #31]
 801b9f4:	e150      	b.n	801bc98 <UART_SetConfig+0x348>
 801b9f6:	2302      	movs	r3, #2
 801b9f8:	77fb      	strb	r3, [r7, #31]
 801b9fa:	e14d      	b.n	801bc98 <UART_SetConfig+0x348>
 801b9fc:	2304      	movs	r3, #4
 801b9fe:	77fb      	strb	r3, [r7, #31]
 801ba00:	e14a      	b.n	801bc98 <UART_SetConfig+0x348>
 801ba02:	2308      	movs	r3, #8
 801ba04:	77fb      	strb	r3, [r7, #31]
 801ba06:	e147      	b.n	801bc98 <UART_SetConfig+0x348>
 801ba08:	2310      	movs	r3, #16
 801ba0a:	77fb      	strb	r3, [r7, #31]
 801ba0c:	e144      	b.n	801bc98 <UART_SetConfig+0x348>
 801ba0e:	687b      	ldr	r3, [r7, #4]
 801ba10:	681b      	ldr	r3, [r3, #0]
 801ba12:	4a83      	ldr	r2, [pc, #524]	; (801bc20 <UART_SetConfig+0x2d0>)
 801ba14:	4293      	cmp	r3, r2
 801ba16:	d132      	bne.n	801ba7e <UART_SetConfig+0x12e>
 801ba18:	4b80      	ldr	r3, [pc, #512]	; (801bc1c <UART_SetConfig+0x2cc>)
 801ba1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ba1e:	f003 030c 	and.w	r3, r3, #12
 801ba22:	2b0c      	cmp	r3, #12
 801ba24:	d828      	bhi.n	801ba78 <UART_SetConfig+0x128>
 801ba26:	a201      	add	r2, pc, #4	; (adr r2, 801ba2c <UART_SetConfig+0xdc>)
 801ba28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ba2c:	0801ba61 	.word	0x0801ba61
 801ba30:	0801ba79 	.word	0x0801ba79
 801ba34:	0801ba79 	.word	0x0801ba79
 801ba38:	0801ba79 	.word	0x0801ba79
 801ba3c:	0801ba6d 	.word	0x0801ba6d
 801ba40:	0801ba79 	.word	0x0801ba79
 801ba44:	0801ba79 	.word	0x0801ba79
 801ba48:	0801ba79 	.word	0x0801ba79
 801ba4c:	0801ba67 	.word	0x0801ba67
 801ba50:	0801ba79 	.word	0x0801ba79
 801ba54:	0801ba79 	.word	0x0801ba79
 801ba58:	0801ba79 	.word	0x0801ba79
 801ba5c:	0801ba73 	.word	0x0801ba73
 801ba60:	2300      	movs	r3, #0
 801ba62:	77fb      	strb	r3, [r7, #31]
 801ba64:	e118      	b.n	801bc98 <UART_SetConfig+0x348>
 801ba66:	2302      	movs	r3, #2
 801ba68:	77fb      	strb	r3, [r7, #31]
 801ba6a:	e115      	b.n	801bc98 <UART_SetConfig+0x348>
 801ba6c:	2304      	movs	r3, #4
 801ba6e:	77fb      	strb	r3, [r7, #31]
 801ba70:	e112      	b.n	801bc98 <UART_SetConfig+0x348>
 801ba72:	2308      	movs	r3, #8
 801ba74:	77fb      	strb	r3, [r7, #31]
 801ba76:	e10f      	b.n	801bc98 <UART_SetConfig+0x348>
 801ba78:	2310      	movs	r3, #16
 801ba7a:	77fb      	strb	r3, [r7, #31]
 801ba7c:	e10c      	b.n	801bc98 <UART_SetConfig+0x348>
 801ba7e:	687b      	ldr	r3, [r7, #4]
 801ba80:	681b      	ldr	r3, [r3, #0]
 801ba82:	4a68      	ldr	r2, [pc, #416]	; (801bc24 <UART_SetConfig+0x2d4>)
 801ba84:	4293      	cmp	r3, r2
 801ba86:	d120      	bne.n	801baca <UART_SetConfig+0x17a>
 801ba88:	4b64      	ldr	r3, [pc, #400]	; (801bc1c <UART_SetConfig+0x2cc>)
 801ba8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ba8e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801ba92:	2b30      	cmp	r3, #48	; 0x30
 801ba94:	d013      	beq.n	801babe <UART_SetConfig+0x16e>
 801ba96:	2b30      	cmp	r3, #48	; 0x30
 801ba98:	d814      	bhi.n	801bac4 <UART_SetConfig+0x174>
 801ba9a:	2b20      	cmp	r3, #32
 801ba9c:	d009      	beq.n	801bab2 <UART_SetConfig+0x162>
 801ba9e:	2b20      	cmp	r3, #32
 801baa0:	d810      	bhi.n	801bac4 <UART_SetConfig+0x174>
 801baa2:	2b00      	cmp	r3, #0
 801baa4:	d002      	beq.n	801baac <UART_SetConfig+0x15c>
 801baa6:	2b10      	cmp	r3, #16
 801baa8:	d006      	beq.n	801bab8 <UART_SetConfig+0x168>
 801baaa:	e00b      	b.n	801bac4 <UART_SetConfig+0x174>
 801baac:	2300      	movs	r3, #0
 801baae:	77fb      	strb	r3, [r7, #31]
 801bab0:	e0f2      	b.n	801bc98 <UART_SetConfig+0x348>
 801bab2:	2302      	movs	r3, #2
 801bab4:	77fb      	strb	r3, [r7, #31]
 801bab6:	e0ef      	b.n	801bc98 <UART_SetConfig+0x348>
 801bab8:	2304      	movs	r3, #4
 801baba:	77fb      	strb	r3, [r7, #31]
 801babc:	e0ec      	b.n	801bc98 <UART_SetConfig+0x348>
 801babe:	2308      	movs	r3, #8
 801bac0:	77fb      	strb	r3, [r7, #31]
 801bac2:	e0e9      	b.n	801bc98 <UART_SetConfig+0x348>
 801bac4:	2310      	movs	r3, #16
 801bac6:	77fb      	strb	r3, [r7, #31]
 801bac8:	e0e6      	b.n	801bc98 <UART_SetConfig+0x348>
 801baca:	687b      	ldr	r3, [r7, #4]
 801bacc:	681b      	ldr	r3, [r3, #0]
 801bace:	4a56      	ldr	r2, [pc, #344]	; (801bc28 <UART_SetConfig+0x2d8>)
 801bad0:	4293      	cmp	r3, r2
 801bad2:	d120      	bne.n	801bb16 <UART_SetConfig+0x1c6>
 801bad4:	4b51      	ldr	r3, [pc, #324]	; (801bc1c <UART_SetConfig+0x2cc>)
 801bad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bada:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801bade:	2bc0      	cmp	r3, #192	; 0xc0
 801bae0:	d013      	beq.n	801bb0a <UART_SetConfig+0x1ba>
 801bae2:	2bc0      	cmp	r3, #192	; 0xc0
 801bae4:	d814      	bhi.n	801bb10 <UART_SetConfig+0x1c0>
 801bae6:	2b80      	cmp	r3, #128	; 0x80
 801bae8:	d009      	beq.n	801bafe <UART_SetConfig+0x1ae>
 801baea:	2b80      	cmp	r3, #128	; 0x80
 801baec:	d810      	bhi.n	801bb10 <UART_SetConfig+0x1c0>
 801baee:	2b00      	cmp	r3, #0
 801baf0:	d002      	beq.n	801baf8 <UART_SetConfig+0x1a8>
 801baf2:	2b40      	cmp	r3, #64	; 0x40
 801baf4:	d006      	beq.n	801bb04 <UART_SetConfig+0x1b4>
 801baf6:	e00b      	b.n	801bb10 <UART_SetConfig+0x1c0>
 801baf8:	2300      	movs	r3, #0
 801bafa:	77fb      	strb	r3, [r7, #31]
 801bafc:	e0cc      	b.n	801bc98 <UART_SetConfig+0x348>
 801bafe:	2302      	movs	r3, #2
 801bb00:	77fb      	strb	r3, [r7, #31]
 801bb02:	e0c9      	b.n	801bc98 <UART_SetConfig+0x348>
 801bb04:	2304      	movs	r3, #4
 801bb06:	77fb      	strb	r3, [r7, #31]
 801bb08:	e0c6      	b.n	801bc98 <UART_SetConfig+0x348>
 801bb0a:	2308      	movs	r3, #8
 801bb0c:	77fb      	strb	r3, [r7, #31]
 801bb0e:	e0c3      	b.n	801bc98 <UART_SetConfig+0x348>
 801bb10:	2310      	movs	r3, #16
 801bb12:	77fb      	strb	r3, [r7, #31]
 801bb14:	e0c0      	b.n	801bc98 <UART_SetConfig+0x348>
 801bb16:	687b      	ldr	r3, [r7, #4]
 801bb18:	681b      	ldr	r3, [r3, #0]
 801bb1a:	4a44      	ldr	r2, [pc, #272]	; (801bc2c <UART_SetConfig+0x2dc>)
 801bb1c:	4293      	cmp	r3, r2
 801bb1e:	d125      	bne.n	801bb6c <UART_SetConfig+0x21c>
 801bb20:	4b3e      	ldr	r3, [pc, #248]	; (801bc1c <UART_SetConfig+0x2cc>)
 801bb22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bb26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801bb2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801bb2e:	d017      	beq.n	801bb60 <UART_SetConfig+0x210>
 801bb30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801bb34:	d817      	bhi.n	801bb66 <UART_SetConfig+0x216>
 801bb36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801bb3a:	d00b      	beq.n	801bb54 <UART_SetConfig+0x204>
 801bb3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801bb40:	d811      	bhi.n	801bb66 <UART_SetConfig+0x216>
 801bb42:	2b00      	cmp	r3, #0
 801bb44:	d003      	beq.n	801bb4e <UART_SetConfig+0x1fe>
 801bb46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801bb4a:	d006      	beq.n	801bb5a <UART_SetConfig+0x20a>
 801bb4c:	e00b      	b.n	801bb66 <UART_SetConfig+0x216>
 801bb4e:	2300      	movs	r3, #0
 801bb50:	77fb      	strb	r3, [r7, #31]
 801bb52:	e0a1      	b.n	801bc98 <UART_SetConfig+0x348>
 801bb54:	2302      	movs	r3, #2
 801bb56:	77fb      	strb	r3, [r7, #31]
 801bb58:	e09e      	b.n	801bc98 <UART_SetConfig+0x348>
 801bb5a:	2304      	movs	r3, #4
 801bb5c:	77fb      	strb	r3, [r7, #31]
 801bb5e:	e09b      	b.n	801bc98 <UART_SetConfig+0x348>
 801bb60:	2308      	movs	r3, #8
 801bb62:	77fb      	strb	r3, [r7, #31]
 801bb64:	e098      	b.n	801bc98 <UART_SetConfig+0x348>
 801bb66:	2310      	movs	r3, #16
 801bb68:	77fb      	strb	r3, [r7, #31]
 801bb6a:	e095      	b.n	801bc98 <UART_SetConfig+0x348>
 801bb6c:	687b      	ldr	r3, [r7, #4]
 801bb6e:	681b      	ldr	r3, [r3, #0]
 801bb70:	4a2f      	ldr	r2, [pc, #188]	; (801bc30 <UART_SetConfig+0x2e0>)
 801bb72:	4293      	cmp	r3, r2
 801bb74:	d125      	bne.n	801bbc2 <UART_SetConfig+0x272>
 801bb76:	4b29      	ldr	r3, [pc, #164]	; (801bc1c <UART_SetConfig+0x2cc>)
 801bb78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bb7c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 801bb80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801bb84:	d017      	beq.n	801bbb6 <UART_SetConfig+0x266>
 801bb86:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801bb8a:	d817      	bhi.n	801bbbc <UART_SetConfig+0x26c>
 801bb8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801bb90:	d00b      	beq.n	801bbaa <UART_SetConfig+0x25a>
 801bb92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801bb96:	d811      	bhi.n	801bbbc <UART_SetConfig+0x26c>
 801bb98:	2b00      	cmp	r3, #0
 801bb9a:	d003      	beq.n	801bba4 <UART_SetConfig+0x254>
 801bb9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801bba0:	d006      	beq.n	801bbb0 <UART_SetConfig+0x260>
 801bba2:	e00b      	b.n	801bbbc <UART_SetConfig+0x26c>
 801bba4:	2301      	movs	r3, #1
 801bba6:	77fb      	strb	r3, [r7, #31]
 801bba8:	e076      	b.n	801bc98 <UART_SetConfig+0x348>
 801bbaa:	2302      	movs	r3, #2
 801bbac:	77fb      	strb	r3, [r7, #31]
 801bbae:	e073      	b.n	801bc98 <UART_SetConfig+0x348>
 801bbb0:	2304      	movs	r3, #4
 801bbb2:	77fb      	strb	r3, [r7, #31]
 801bbb4:	e070      	b.n	801bc98 <UART_SetConfig+0x348>
 801bbb6:	2308      	movs	r3, #8
 801bbb8:	77fb      	strb	r3, [r7, #31]
 801bbba:	e06d      	b.n	801bc98 <UART_SetConfig+0x348>
 801bbbc:	2310      	movs	r3, #16
 801bbbe:	77fb      	strb	r3, [r7, #31]
 801bbc0:	e06a      	b.n	801bc98 <UART_SetConfig+0x348>
 801bbc2:	687b      	ldr	r3, [r7, #4]
 801bbc4:	681b      	ldr	r3, [r3, #0]
 801bbc6:	4a1b      	ldr	r2, [pc, #108]	; (801bc34 <UART_SetConfig+0x2e4>)
 801bbc8:	4293      	cmp	r3, r2
 801bbca:	d138      	bne.n	801bc3e <UART_SetConfig+0x2ee>
 801bbcc:	4b13      	ldr	r3, [pc, #76]	; (801bc1c <UART_SetConfig+0x2cc>)
 801bbce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bbd2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 801bbd6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801bbda:	d017      	beq.n	801bc0c <UART_SetConfig+0x2bc>
 801bbdc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801bbe0:	d82a      	bhi.n	801bc38 <UART_SetConfig+0x2e8>
 801bbe2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801bbe6:	d00b      	beq.n	801bc00 <UART_SetConfig+0x2b0>
 801bbe8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801bbec:	d824      	bhi.n	801bc38 <UART_SetConfig+0x2e8>
 801bbee:	2b00      	cmp	r3, #0
 801bbf0:	d003      	beq.n	801bbfa <UART_SetConfig+0x2aa>
 801bbf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801bbf6:	d006      	beq.n	801bc06 <UART_SetConfig+0x2b6>
 801bbf8:	e01e      	b.n	801bc38 <UART_SetConfig+0x2e8>
 801bbfa:	2300      	movs	r3, #0
 801bbfc:	77fb      	strb	r3, [r7, #31]
 801bbfe:	e04b      	b.n	801bc98 <UART_SetConfig+0x348>
 801bc00:	2302      	movs	r3, #2
 801bc02:	77fb      	strb	r3, [r7, #31]
 801bc04:	e048      	b.n	801bc98 <UART_SetConfig+0x348>
 801bc06:	2304      	movs	r3, #4
 801bc08:	77fb      	strb	r3, [r7, #31]
 801bc0a:	e045      	b.n	801bc98 <UART_SetConfig+0x348>
 801bc0c:	2308      	movs	r3, #8
 801bc0e:	77fb      	strb	r3, [r7, #31]
 801bc10:	e042      	b.n	801bc98 <UART_SetConfig+0x348>
 801bc12:	bf00      	nop
 801bc14:	efff69f3 	.word	0xefff69f3
 801bc18:	40011000 	.word	0x40011000
 801bc1c:	40023800 	.word	0x40023800
 801bc20:	40004400 	.word	0x40004400
 801bc24:	40004800 	.word	0x40004800
 801bc28:	40004c00 	.word	0x40004c00
 801bc2c:	40005000 	.word	0x40005000
 801bc30:	40011400 	.word	0x40011400
 801bc34:	40007800 	.word	0x40007800
 801bc38:	2310      	movs	r3, #16
 801bc3a:	77fb      	strb	r3, [r7, #31]
 801bc3c:	e02c      	b.n	801bc98 <UART_SetConfig+0x348>
 801bc3e:	687b      	ldr	r3, [r7, #4]
 801bc40:	681b      	ldr	r3, [r3, #0]
 801bc42:	4a72      	ldr	r2, [pc, #456]	; (801be0c <UART_SetConfig+0x4bc>)
 801bc44:	4293      	cmp	r3, r2
 801bc46:	d125      	bne.n	801bc94 <UART_SetConfig+0x344>
 801bc48:	4b71      	ldr	r3, [pc, #452]	; (801be10 <UART_SetConfig+0x4c0>)
 801bc4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bc4e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801bc52:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 801bc56:	d017      	beq.n	801bc88 <UART_SetConfig+0x338>
 801bc58:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 801bc5c:	d817      	bhi.n	801bc8e <UART_SetConfig+0x33e>
 801bc5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801bc62:	d00b      	beq.n	801bc7c <UART_SetConfig+0x32c>
 801bc64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801bc68:	d811      	bhi.n	801bc8e <UART_SetConfig+0x33e>
 801bc6a:	2b00      	cmp	r3, #0
 801bc6c:	d003      	beq.n	801bc76 <UART_SetConfig+0x326>
 801bc6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801bc72:	d006      	beq.n	801bc82 <UART_SetConfig+0x332>
 801bc74:	e00b      	b.n	801bc8e <UART_SetConfig+0x33e>
 801bc76:	2300      	movs	r3, #0
 801bc78:	77fb      	strb	r3, [r7, #31]
 801bc7a:	e00d      	b.n	801bc98 <UART_SetConfig+0x348>
 801bc7c:	2302      	movs	r3, #2
 801bc7e:	77fb      	strb	r3, [r7, #31]
 801bc80:	e00a      	b.n	801bc98 <UART_SetConfig+0x348>
 801bc82:	2304      	movs	r3, #4
 801bc84:	77fb      	strb	r3, [r7, #31]
 801bc86:	e007      	b.n	801bc98 <UART_SetConfig+0x348>
 801bc88:	2308      	movs	r3, #8
 801bc8a:	77fb      	strb	r3, [r7, #31]
 801bc8c:	e004      	b.n	801bc98 <UART_SetConfig+0x348>
 801bc8e:	2310      	movs	r3, #16
 801bc90:	77fb      	strb	r3, [r7, #31]
 801bc92:	e001      	b.n	801bc98 <UART_SetConfig+0x348>
 801bc94:	2310      	movs	r3, #16
 801bc96:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801bc98:	687b      	ldr	r3, [r7, #4]
 801bc9a:	69db      	ldr	r3, [r3, #28]
 801bc9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801bca0:	d15b      	bne.n	801bd5a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 801bca2:	7ffb      	ldrb	r3, [r7, #31]
 801bca4:	2b08      	cmp	r3, #8
 801bca6:	d828      	bhi.n	801bcfa <UART_SetConfig+0x3aa>
 801bca8:	a201      	add	r2, pc, #4	; (adr r2, 801bcb0 <UART_SetConfig+0x360>)
 801bcaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bcae:	bf00      	nop
 801bcb0:	0801bcd5 	.word	0x0801bcd5
 801bcb4:	0801bcdd 	.word	0x0801bcdd
 801bcb8:	0801bce5 	.word	0x0801bce5
 801bcbc:	0801bcfb 	.word	0x0801bcfb
 801bcc0:	0801bceb 	.word	0x0801bceb
 801bcc4:	0801bcfb 	.word	0x0801bcfb
 801bcc8:	0801bcfb 	.word	0x0801bcfb
 801bccc:	0801bcfb 	.word	0x0801bcfb
 801bcd0:	0801bcf3 	.word	0x0801bcf3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801bcd4:	f7fd fc3e 	bl	8019554 <HAL_RCC_GetPCLK1Freq>
 801bcd8:	61b8      	str	r0, [r7, #24]
        break;
 801bcda:	e013      	b.n	801bd04 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801bcdc:	f7fd fc4e 	bl	801957c <HAL_RCC_GetPCLK2Freq>
 801bce0:	61b8      	str	r0, [r7, #24]
        break;
 801bce2:	e00f      	b.n	801bd04 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801bce4:	4b4b      	ldr	r3, [pc, #300]	; (801be14 <UART_SetConfig+0x4c4>)
 801bce6:	61bb      	str	r3, [r7, #24]
        break;
 801bce8:	e00c      	b.n	801bd04 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801bcea:	f7fd fb61 	bl	80193b0 <HAL_RCC_GetSysClockFreq>
 801bcee:	61b8      	str	r0, [r7, #24]
        break;
 801bcf0:	e008      	b.n	801bd04 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801bcf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801bcf6:	61bb      	str	r3, [r7, #24]
        break;
 801bcf8:	e004      	b.n	801bd04 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 801bcfa:	2300      	movs	r3, #0
 801bcfc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 801bcfe:	2301      	movs	r3, #1
 801bd00:	77bb      	strb	r3, [r7, #30]
        break;
 801bd02:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801bd04:	69bb      	ldr	r3, [r7, #24]
 801bd06:	2b00      	cmp	r3, #0
 801bd08:	d074      	beq.n	801bdf4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801bd0a:	69bb      	ldr	r3, [r7, #24]
 801bd0c:	005a      	lsls	r2, r3, #1
 801bd0e:	687b      	ldr	r3, [r7, #4]
 801bd10:	685b      	ldr	r3, [r3, #4]
 801bd12:	085b      	lsrs	r3, r3, #1
 801bd14:	441a      	add	r2, r3
 801bd16:	687b      	ldr	r3, [r7, #4]
 801bd18:	685b      	ldr	r3, [r3, #4]
 801bd1a:	fbb2 f3f3 	udiv	r3, r2, r3
 801bd1e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801bd20:	693b      	ldr	r3, [r7, #16]
 801bd22:	2b0f      	cmp	r3, #15
 801bd24:	d916      	bls.n	801bd54 <UART_SetConfig+0x404>
 801bd26:	693b      	ldr	r3, [r7, #16]
 801bd28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801bd2c:	d212      	bcs.n	801bd54 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801bd2e:	693b      	ldr	r3, [r7, #16]
 801bd30:	b29b      	uxth	r3, r3
 801bd32:	f023 030f 	bic.w	r3, r3, #15
 801bd36:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801bd38:	693b      	ldr	r3, [r7, #16]
 801bd3a:	085b      	lsrs	r3, r3, #1
 801bd3c:	b29b      	uxth	r3, r3
 801bd3e:	f003 0307 	and.w	r3, r3, #7
 801bd42:	b29a      	uxth	r2, r3
 801bd44:	89fb      	ldrh	r3, [r7, #14]
 801bd46:	4313      	orrs	r3, r2
 801bd48:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 801bd4a:	687b      	ldr	r3, [r7, #4]
 801bd4c:	681b      	ldr	r3, [r3, #0]
 801bd4e:	89fa      	ldrh	r2, [r7, #14]
 801bd50:	60da      	str	r2, [r3, #12]
 801bd52:	e04f      	b.n	801bdf4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 801bd54:	2301      	movs	r3, #1
 801bd56:	77bb      	strb	r3, [r7, #30]
 801bd58:	e04c      	b.n	801bdf4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 801bd5a:	7ffb      	ldrb	r3, [r7, #31]
 801bd5c:	2b08      	cmp	r3, #8
 801bd5e:	d828      	bhi.n	801bdb2 <UART_SetConfig+0x462>
 801bd60:	a201      	add	r2, pc, #4	; (adr r2, 801bd68 <UART_SetConfig+0x418>)
 801bd62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bd66:	bf00      	nop
 801bd68:	0801bd8d 	.word	0x0801bd8d
 801bd6c:	0801bd95 	.word	0x0801bd95
 801bd70:	0801bd9d 	.word	0x0801bd9d
 801bd74:	0801bdb3 	.word	0x0801bdb3
 801bd78:	0801bda3 	.word	0x0801bda3
 801bd7c:	0801bdb3 	.word	0x0801bdb3
 801bd80:	0801bdb3 	.word	0x0801bdb3
 801bd84:	0801bdb3 	.word	0x0801bdb3
 801bd88:	0801bdab 	.word	0x0801bdab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801bd8c:	f7fd fbe2 	bl	8019554 <HAL_RCC_GetPCLK1Freq>
 801bd90:	61b8      	str	r0, [r7, #24]
        break;
 801bd92:	e013      	b.n	801bdbc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801bd94:	f7fd fbf2 	bl	801957c <HAL_RCC_GetPCLK2Freq>
 801bd98:	61b8      	str	r0, [r7, #24]
        break;
 801bd9a:	e00f      	b.n	801bdbc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801bd9c:	4b1d      	ldr	r3, [pc, #116]	; (801be14 <UART_SetConfig+0x4c4>)
 801bd9e:	61bb      	str	r3, [r7, #24]
        break;
 801bda0:	e00c      	b.n	801bdbc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801bda2:	f7fd fb05 	bl	80193b0 <HAL_RCC_GetSysClockFreq>
 801bda6:	61b8      	str	r0, [r7, #24]
        break;
 801bda8:	e008      	b.n	801bdbc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801bdaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801bdae:	61bb      	str	r3, [r7, #24]
        break;
 801bdb0:	e004      	b.n	801bdbc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 801bdb2:	2300      	movs	r3, #0
 801bdb4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 801bdb6:	2301      	movs	r3, #1
 801bdb8:	77bb      	strb	r3, [r7, #30]
        break;
 801bdba:	bf00      	nop
    }

    if (pclk != 0U)
 801bdbc:	69bb      	ldr	r3, [r7, #24]
 801bdbe:	2b00      	cmp	r3, #0
 801bdc0:	d018      	beq.n	801bdf4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801bdc2:	687b      	ldr	r3, [r7, #4]
 801bdc4:	685b      	ldr	r3, [r3, #4]
 801bdc6:	085a      	lsrs	r2, r3, #1
 801bdc8:	69bb      	ldr	r3, [r7, #24]
 801bdca:	441a      	add	r2, r3
 801bdcc:	687b      	ldr	r3, [r7, #4]
 801bdce:	685b      	ldr	r3, [r3, #4]
 801bdd0:	fbb2 f3f3 	udiv	r3, r2, r3
 801bdd4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801bdd6:	693b      	ldr	r3, [r7, #16]
 801bdd8:	2b0f      	cmp	r3, #15
 801bdda:	d909      	bls.n	801bdf0 <UART_SetConfig+0x4a0>
 801bddc:	693b      	ldr	r3, [r7, #16]
 801bdde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801bde2:	d205      	bcs.n	801bdf0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801bde4:	693b      	ldr	r3, [r7, #16]
 801bde6:	b29a      	uxth	r2, r3
 801bde8:	687b      	ldr	r3, [r7, #4]
 801bdea:	681b      	ldr	r3, [r3, #0]
 801bdec:	60da      	str	r2, [r3, #12]
 801bdee:	e001      	b.n	801bdf4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 801bdf0:	2301      	movs	r3, #1
 801bdf2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801bdf4:	687b      	ldr	r3, [r7, #4]
 801bdf6:	2200      	movs	r2, #0
 801bdf8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 801bdfa:	687b      	ldr	r3, [r7, #4]
 801bdfc:	2200      	movs	r2, #0
 801bdfe:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 801be00:	7fbb      	ldrb	r3, [r7, #30]
}
 801be02:	4618      	mov	r0, r3
 801be04:	3720      	adds	r7, #32
 801be06:	46bd      	mov	sp, r7
 801be08:	bd80      	pop	{r7, pc}
 801be0a:	bf00      	nop
 801be0c:	40007c00 	.word	0x40007c00
 801be10:	40023800 	.word	0x40023800
 801be14:	00f42400 	.word	0x00f42400

0801be18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801be18:	b480      	push	{r7}
 801be1a:	b083      	sub	sp, #12
 801be1c:	af00      	add	r7, sp, #0
 801be1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801be20:	687b      	ldr	r3, [r7, #4]
 801be22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801be24:	f003 0301 	and.w	r3, r3, #1
 801be28:	2b00      	cmp	r3, #0
 801be2a:	d00a      	beq.n	801be42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801be2c:	687b      	ldr	r3, [r7, #4]
 801be2e:	681b      	ldr	r3, [r3, #0]
 801be30:	685b      	ldr	r3, [r3, #4]
 801be32:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801be36:	687b      	ldr	r3, [r7, #4]
 801be38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801be3a:	687b      	ldr	r3, [r7, #4]
 801be3c:	681b      	ldr	r3, [r3, #0]
 801be3e:	430a      	orrs	r2, r1
 801be40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801be42:	687b      	ldr	r3, [r7, #4]
 801be44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801be46:	f003 0302 	and.w	r3, r3, #2
 801be4a:	2b00      	cmp	r3, #0
 801be4c:	d00a      	beq.n	801be64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801be4e:	687b      	ldr	r3, [r7, #4]
 801be50:	681b      	ldr	r3, [r3, #0]
 801be52:	685b      	ldr	r3, [r3, #4]
 801be54:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801be58:	687b      	ldr	r3, [r7, #4]
 801be5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801be5c:	687b      	ldr	r3, [r7, #4]
 801be5e:	681b      	ldr	r3, [r3, #0]
 801be60:	430a      	orrs	r2, r1
 801be62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801be64:	687b      	ldr	r3, [r7, #4]
 801be66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801be68:	f003 0304 	and.w	r3, r3, #4
 801be6c:	2b00      	cmp	r3, #0
 801be6e:	d00a      	beq.n	801be86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801be70:	687b      	ldr	r3, [r7, #4]
 801be72:	681b      	ldr	r3, [r3, #0]
 801be74:	685b      	ldr	r3, [r3, #4]
 801be76:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801be7a:	687b      	ldr	r3, [r7, #4]
 801be7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801be7e:	687b      	ldr	r3, [r7, #4]
 801be80:	681b      	ldr	r3, [r3, #0]
 801be82:	430a      	orrs	r2, r1
 801be84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801be86:	687b      	ldr	r3, [r7, #4]
 801be88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801be8a:	f003 0308 	and.w	r3, r3, #8
 801be8e:	2b00      	cmp	r3, #0
 801be90:	d00a      	beq.n	801bea8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801be92:	687b      	ldr	r3, [r7, #4]
 801be94:	681b      	ldr	r3, [r3, #0]
 801be96:	685b      	ldr	r3, [r3, #4]
 801be98:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801be9c:	687b      	ldr	r3, [r7, #4]
 801be9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801bea0:	687b      	ldr	r3, [r7, #4]
 801bea2:	681b      	ldr	r3, [r3, #0]
 801bea4:	430a      	orrs	r2, r1
 801bea6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801bea8:	687b      	ldr	r3, [r7, #4]
 801beaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801beac:	f003 0310 	and.w	r3, r3, #16
 801beb0:	2b00      	cmp	r3, #0
 801beb2:	d00a      	beq.n	801beca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801beb4:	687b      	ldr	r3, [r7, #4]
 801beb6:	681b      	ldr	r3, [r3, #0]
 801beb8:	689b      	ldr	r3, [r3, #8]
 801beba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801bebe:	687b      	ldr	r3, [r7, #4]
 801bec0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801bec2:	687b      	ldr	r3, [r7, #4]
 801bec4:	681b      	ldr	r3, [r3, #0]
 801bec6:	430a      	orrs	r2, r1
 801bec8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801beca:	687b      	ldr	r3, [r7, #4]
 801becc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bece:	f003 0320 	and.w	r3, r3, #32
 801bed2:	2b00      	cmp	r3, #0
 801bed4:	d00a      	beq.n	801beec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801bed6:	687b      	ldr	r3, [r7, #4]
 801bed8:	681b      	ldr	r3, [r3, #0]
 801beda:	689b      	ldr	r3, [r3, #8]
 801bedc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801bee0:	687b      	ldr	r3, [r7, #4]
 801bee2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801bee4:	687b      	ldr	r3, [r7, #4]
 801bee6:	681b      	ldr	r3, [r3, #0]
 801bee8:	430a      	orrs	r2, r1
 801beea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801beec:	687b      	ldr	r3, [r7, #4]
 801beee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bef4:	2b00      	cmp	r3, #0
 801bef6:	d01a      	beq.n	801bf2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801bef8:	687b      	ldr	r3, [r7, #4]
 801befa:	681b      	ldr	r3, [r3, #0]
 801befc:	685b      	ldr	r3, [r3, #4]
 801befe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801bf02:	687b      	ldr	r3, [r7, #4]
 801bf04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801bf06:	687b      	ldr	r3, [r7, #4]
 801bf08:	681b      	ldr	r3, [r3, #0]
 801bf0a:	430a      	orrs	r2, r1
 801bf0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801bf0e:	687b      	ldr	r3, [r7, #4]
 801bf10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bf12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801bf16:	d10a      	bne.n	801bf2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801bf18:	687b      	ldr	r3, [r7, #4]
 801bf1a:	681b      	ldr	r3, [r3, #0]
 801bf1c:	685b      	ldr	r3, [r3, #4]
 801bf1e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801bf22:	687b      	ldr	r3, [r7, #4]
 801bf24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801bf26:	687b      	ldr	r3, [r7, #4]
 801bf28:	681b      	ldr	r3, [r3, #0]
 801bf2a:	430a      	orrs	r2, r1
 801bf2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801bf2e:	687b      	ldr	r3, [r7, #4]
 801bf30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bf32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801bf36:	2b00      	cmp	r3, #0
 801bf38:	d00a      	beq.n	801bf50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801bf3a:	687b      	ldr	r3, [r7, #4]
 801bf3c:	681b      	ldr	r3, [r3, #0]
 801bf3e:	685b      	ldr	r3, [r3, #4]
 801bf40:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801bf44:	687b      	ldr	r3, [r7, #4]
 801bf46:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801bf48:	687b      	ldr	r3, [r7, #4]
 801bf4a:	681b      	ldr	r3, [r3, #0]
 801bf4c:	430a      	orrs	r2, r1
 801bf4e:	605a      	str	r2, [r3, #4]
  }
}
 801bf50:	bf00      	nop
 801bf52:	370c      	adds	r7, #12
 801bf54:	46bd      	mov	sp, r7
 801bf56:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf5a:	4770      	bx	lr

0801bf5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801bf5c:	b580      	push	{r7, lr}
 801bf5e:	b086      	sub	sp, #24
 801bf60:	af02      	add	r7, sp, #8
 801bf62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801bf64:	687b      	ldr	r3, [r7, #4]
 801bf66:	2200      	movs	r2, #0
 801bf68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801bf6c:	f7f9 fb10 	bl	8015590 <HAL_GetTick>
 801bf70:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801bf72:	687b      	ldr	r3, [r7, #4]
 801bf74:	681b      	ldr	r3, [r3, #0]
 801bf76:	681b      	ldr	r3, [r3, #0]
 801bf78:	f003 0308 	and.w	r3, r3, #8
 801bf7c:	2b08      	cmp	r3, #8
 801bf7e:	d10e      	bne.n	801bf9e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801bf80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801bf84:	9300      	str	r3, [sp, #0]
 801bf86:	68fb      	ldr	r3, [r7, #12]
 801bf88:	2200      	movs	r2, #0
 801bf8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801bf8e:	6878      	ldr	r0, [r7, #4]
 801bf90:	f000 f831 	bl	801bff6 <UART_WaitOnFlagUntilTimeout>
 801bf94:	4603      	mov	r3, r0
 801bf96:	2b00      	cmp	r3, #0
 801bf98:	d001      	beq.n	801bf9e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801bf9a:	2303      	movs	r3, #3
 801bf9c:	e027      	b.n	801bfee <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801bf9e:	687b      	ldr	r3, [r7, #4]
 801bfa0:	681b      	ldr	r3, [r3, #0]
 801bfa2:	681b      	ldr	r3, [r3, #0]
 801bfa4:	f003 0304 	and.w	r3, r3, #4
 801bfa8:	2b04      	cmp	r3, #4
 801bfaa:	d10e      	bne.n	801bfca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801bfac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801bfb0:	9300      	str	r3, [sp, #0]
 801bfb2:	68fb      	ldr	r3, [r7, #12]
 801bfb4:	2200      	movs	r2, #0
 801bfb6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801bfba:	6878      	ldr	r0, [r7, #4]
 801bfbc:	f000 f81b 	bl	801bff6 <UART_WaitOnFlagUntilTimeout>
 801bfc0:	4603      	mov	r3, r0
 801bfc2:	2b00      	cmp	r3, #0
 801bfc4:	d001      	beq.n	801bfca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801bfc6:	2303      	movs	r3, #3
 801bfc8:	e011      	b.n	801bfee <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801bfca:	687b      	ldr	r3, [r7, #4]
 801bfcc:	2220      	movs	r2, #32
 801bfce:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 801bfd0:	687b      	ldr	r3, [r7, #4]
 801bfd2:	2220      	movs	r2, #32
 801bfd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801bfd8:	687b      	ldr	r3, [r7, #4]
 801bfda:	2200      	movs	r2, #0
 801bfdc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801bfde:	687b      	ldr	r3, [r7, #4]
 801bfe0:	2200      	movs	r2, #0
 801bfe2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 801bfe4:	687b      	ldr	r3, [r7, #4]
 801bfe6:	2200      	movs	r2, #0
 801bfe8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 801bfec:	2300      	movs	r3, #0
}
 801bfee:	4618      	mov	r0, r3
 801bff0:	3710      	adds	r7, #16
 801bff2:	46bd      	mov	sp, r7
 801bff4:	bd80      	pop	{r7, pc}

0801bff6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801bff6:	b580      	push	{r7, lr}
 801bff8:	b09c      	sub	sp, #112	; 0x70
 801bffa:	af00      	add	r7, sp, #0
 801bffc:	60f8      	str	r0, [r7, #12]
 801bffe:	60b9      	str	r1, [r7, #8]
 801c000:	603b      	str	r3, [r7, #0]
 801c002:	4613      	mov	r3, r2
 801c004:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801c006:	e0a7      	b.n	801c158 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801c008:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801c00a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c00e:	f000 80a3 	beq.w	801c158 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801c012:	f7f9 fabd 	bl	8015590 <HAL_GetTick>
 801c016:	4602      	mov	r2, r0
 801c018:	683b      	ldr	r3, [r7, #0]
 801c01a:	1ad3      	subs	r3, r2, r3
 801c01c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801c01e:	429a      	cmp	r2, r3
 801c020:	d302      	bcc.n	801c028 <UART_WaitOnFlagUntilTimeout+0x32>
 801c022:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801c024:	2b00      	cmp	r3, #0
 801c026:	d13f      	bne.n	801c0a8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801c028:	68fb      	ldr	r3, [r7, #12]
 801c02a:	681b      	ldr	r3, [r3, #0]
 801c02c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c02e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c030:	e853 3f00 	ldrex	r3, [r3]
 801c034:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801c036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c038:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801c03c:	667b      	str	r3, [r7, #100]	; 0x64
 801c03e:	68fb      	ldr	r3, [r7, #12]
 801c040:	681b      	ldr	r3, [r3, #0]
 801c042:	461a      	mov	r2, r3
 801c044:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c046:	65fb      	str	r3, [r7, #92]	; 0x5c
 801c048:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c04a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801c04c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801c04e:	e841 2300 	strex	r3, r2, [r1]
 801c052:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801c054:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c056:	2b00      	cmp	r3, #0
 801c058:	d1e6      	bne.n	801c028 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c05a:	68fb      	ldr	r3, [r7, #12]
 801c05c:	681b      	ldr	r3, [r3, #0]
 801c05e:	3308      	adds	r3, #8
 801c060:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c064:	e853 3f00 	ldrex	r3, [r3]
 801c068:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801c06a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c06c:	f023 0301 	bic.w	r3, r3, #1
 801c070:	663b      	str	r3, [r7, #96]	; 0x60
 801c072:	68fb      	ldr	r3, [r7, #12]
 801c074:	681b      	ldr	r3, [r3, #0]
 801c076:	3308      	adds	r3, #8
 801c078:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801c07a:	64ba      	str	r2, [r7, #72]	; 0x48
 801c07c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c07e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801c080:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c082:	e841 2300 	strex	r3, r2, [r1]
 801c086:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801c088:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c08a:	2b00      	cmp	r3, #0
 801c08c:	d1e5      	bne.n	801c05a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 801c08e:	68fb      	ldr	r3, [r7, #12]
 801c090:	2220      	movs	r2, #32
 801c092:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 801c094:	68fb      	ldr	r3, [r7, #12]
 801c096:	2220      	movs	r2, #32
 801c098:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 801c09c:	68fb      	ldr	r3, [r7, #12]
 801c09e:	2200      	movs	r2, #0
 801c0a0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 801c0a4:	2303      	movs	r3, #3
 801c0a6:	e068      	b.n	801c17a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801c0a8:	68fb      	ldr	r3, [r7, #12]
 801c0aa:	681b      	ldr	r3, [r3, #0]
 801c0ac:	681b      	ldr	r3, [r3, #0]
 801c0ae:	f003 0304 	and.w	r3, r3, #4
 801c0b2:	2b00      	cmp	r3, #0
 801c0b4:	d050      	beq.n	801c158 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801c0b6:	68fb      	ldr	r3, [r7, #12]
 801c0b8:	681b      	ldr	r3, [r3, #0]
 801c0ba:	69db      	ldr	r3, [r3, #28]
 801c0bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801c0c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801c0c4:	d148      	bne.n	801c158 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801c0c6:	68fb      	ldr	r3, [r7, #12]
 801c0c8:	681b      	ldr	r3, [r3, #0]
 801c0ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801c0ce:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801c0d0:	68fb      	ldr	r3, [r7, #12]
 801c0d2:	681b      	ldr	r3, [r3, #0]
 801c0d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c0d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c0d8:	e853 3f00 	ldrex	r3, [r3]
 801c0dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801c0de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c0e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801c0e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 801c0e6:	68fb      	ldr	r3, [r7, #12]
 801c0e8:	681b      	ldr	r3, [r3, #0]
 801c0ea:	461a      	mov	r2, r3
 801c0ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c0ee:	637b      	str	r3, [r7, #52]	; 0x34
 801c0f0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c0f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801c0f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c0f6:	e841 2300 	strex	r3, r2, [r1]
 801c0fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801c0fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c0fe:	2b00      	cmp	r3, #0
 801c100:	d1e6      	bne.n	801c0d0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c102:	68fb      	ldr	r3, [r7, #12]
 801c104:	681b      	ldr	r3, [r3, #0]
 801c106:	3308      	adds	r3, #8
 801c108:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c10a:	697b      	ldr	r3, [r7, #20]
 801c10c:	e853 3f00 	ldrex	r3, [r3]
 801c110:	613b      	str	r3, [r7, #16]
   return(result);
 801c112:	693b      	ldr	r3, [r7, #16]
 801c114:	f023 0301 	bic.w	r3, r3, #1
 801c118:	66bb      	str	r3, [r7, #104]	; 0x68
 801c11a:	68fb      	ldr	r3, [r7, #12]
 801c11c:	681b      	ldr	r3, [r3, #0]
 801c11e:	3308      	adds	r3, #8
 801c120:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801c122:	623a      	str	r2, [r7, #32]
 801c124:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c126:	69f9      	ldr	r1, [r7, #28]
 801c128:	6a3a      	ldr	r2, [r7, #32]
 801c12a:	e841 2300 	strex	r3, r2, [r1]
 801c12e:	61bb      	str	r3, [r7, #24]
   return(result);
 801c130:	69bb      	ldr	r3, [r7, #24]
 801c132:	2b00      	cmp	r3, #0
 801c134:	d1e5      	bne.n	801c102 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 801c136:	68fb      	ldr	r3, [r7, #12]
 801c138:	2220      	movs	r2, #32
 801c13a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 801c13c:	68fb      	ldr	r3, [r7, #12]
 801c13e:	2220      	movs	r2, #32
 801c140:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801c144:	68fb      	ldr	r3, [r7, #12]
 801c146:	2220      	movs	r2, #32
 801c148:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801c14c:	68fb      	ldr	r3, [r7, #12]
 801c14e:	2200      	movs	r2, #0
 801c150:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 801c154:	2303      	movs	r3, #3
 801c156:	e010      	b.n	801c17a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801c158:	68fb      	ldr	r3, [r7, #12]
 801c15a:	681b      	ldr	r3, [r3, #0]
 801c15c:	69da      	ldr	r2, [r3, #28]
 801c15e:	68bb      	ldr	r3, [r7, #8]
 801c160:	4013      	ands	r3, r2
 801c162:	68ba      	ldr	r2, [r7, #8]
 801c164:	429a      	cmp	r2, r3
 801c166:	bf0c      	ite	eq
 801c168:	2301      	moveq	r3, #1
 801c16a:	2300      	movne	r3, #0
 801c16c:	b2db      	uxtb	r3, r3
 801c16e:	461a      	mov	r2, r3
 801c170:	79fb      	ldrb	r3, [r7, #7]
 801c172:	429a      	cmp	r2, r3
 801c174:	f43f af48 	beq.w	801c008 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801c178:	2300      	movs	r3, #0
}
 801c17a:	4618      	mov	r0, r3
 801c17c:	3770      	adds	r7, #112	; 0x70
 801c17e:	46bd      	mov	sp, r7
 801c180:	bd80      	pop	{r7, pc}
	...

0801c184 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801c184:	b480      	push	{r7}
 801c186:	b097      	sub	sp, #92	; 0x5c
 801c188:	af00      	add	r7, sp, #0
 801c18a:	60f8      	str	r0, [r7, #12]
 801c18c:	60b9      	str	r1, [r7, #8]
 801c18e:	4613      	mov	r3, r2
 801c190:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801c192:	68fb      	ldr	r3, [r7, #12]
 801c194:	68ba      	ldr	r2, [r7, #8]
 801c196:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 801c198:	68fb      	ldr	r3, [r7, #12]
 801c19a:	88fa      	ldrh	r2, [r7, #6]
 801c19c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 801c1a0:	68fb      	ldr	r3, [r7, #12]
 801c1a2:	88fa      	ldrh	r2, [r7, #6]
 801c1a4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 801c1a8:	68fb      	ldr	r3, [r7, #12]
 801c1aa:	2200      	movs	r2, #0
 801c1ac:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801c1ae:	68fb      	ldr	r3, [r7, #12]
 801c1b0:	689b      	ldr	r3, [r3, #8]
 801c1b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c1b6:	d10e      	bne.n	801c1d6 <UART_Start_Receive_IT+0x52>
 801c1b8:	68fb      	ldr	r3, [r7, #12]
 801c1ba:	691b      	ldr	r3, [r3, #16]
 801c1bc:	2b00      	cmp	r3, #0
 801c1be:	d105      	bne.n	801c1cc <UART_Start_Receive_IT+0x48>
 801c1c0:	68fb      	ldr	r3, [r7, #12]
 801c1c2:	f240 12ff 	movw	r2, #511	; 0x1ff
 801c1c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801c1ca:	e02d      	b.n	801c228 <UART_Start_Receive_IT+0xa4>
 801c1cc:	68fb      	ldr	r3, [r7, #12]
 801c1ce:	22ff      	movs	r2, #255	; 0xff
 801c1d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801c1d4:	e028      	b.n	801c228 <UART_Start_Receive_IT+0xa4>
 801c1d6:	68fb      	ldr	r3, [r7, #12]
 801c1d8:	689b      	ldr	r3, [r3, #8]
 801c1da:	2b00      	cmp	r3, #0
 801c1dc:	d10d      	bne.n	801c1fa <UART_Start_Receive_IT+0x76>
 801c1de:	68fb      	ldr	r3, [r7, #12]
 801c1e0:	691b      	ldr	r3, [r3, #16]
 801c1e2:	2b00      	cmp	r3, #0
 801c1e4:	d104      	bne.n	801c1f0 <UART_Start_Receive_IT+0x6c>
 801c1e6:	68fb      	ldr	r3, [r7, #12]
 801c1e8:	22ff      	movs	r2, #255	; 0xff
 801c1ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801c1ee:	e01b      	b.n	801c228 <UART_Start_Receive_IT+0xa4>
 801c1f0:	68fb      	ldr	r3, [r7, #12]
 801c1f2:	227f      	movs	r2, #127	; 0x7f
 801c1f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801c1f8:	e016      	b.n	801c228 <UART_Start_Receive_IT+0xa4>
 801c1fa:	68fb      	ldr	r3, [r7, #12]
 801c1fc:	689b      	ldr	r3, [r3, #8]
 801c1fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801c202:	d10d      	bne.n	801c220 <UART_Start_Receive_IT+0x9c>
 801c204:	68fb      	ldr	r3, [r7, #12]
 801c206:	691b      	ldr	r3, [r3, #16]
 801c208:	2b00      	cmp	r3, #0
 801c20a:	d104      	bne.n	801c216 <UART_Start_Receive_IT+0x92>
 801c20c:	68fb      	ldr	r3, [r7, #12]
 801c20e:	227f      	movs	r2, #127	; 0x7f
 801c210:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801c214:	e008      	b.n	801c228 <UART_Start_Receive_IT+0xa4>
 801c216:	68fb      	ldr	r3, [r7, #12]
 801c218:	223f      	movs	r2, #63	; 0x3f
 801c21a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801c21e:	e003      	b.n	801c228 <UART_Start_Receive_IT+0xa4>
 801c220:	68fb      	ldr	r3, [r7, #12]
 801c222:	2200      	movs	r2, #0
 801c224:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801c228:	68fb      	ldr	r3, [r7, #12]
 801c22a:	2200      	movs	r2, #0
 801c22c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801c230:	68fb      	ldr	r3, [r7, #12]
 801c232:	2222      	movs	r2, #34	; 0x22
 801c234:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c238:	68fb      	ldr	r3, [r7, #12]
 801c23a:	681b      	ldr	r3, [r3, #0]
 801c23c:	3308      	adds	r3, #8
 801c23e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c242:	e853 3f00 	ldrex	r3, [r3]
 801c246:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801c248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c24a:	f043 0301 	orr.w	r3, r3, #1
 801c24e:	657b      	str	r3, [r7, #84]	; 0x54
 801c250:	68fb      	ldr	r3, [r7, #12]
 801c252:	681b      	ldr	r3, [r3, #0]
 801c254:	3308      	adds	r3, #8
 801c256:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801c258:	64ba      	str	r2, [r7, #72]	; 0x48
 801c25a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c25c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801c25e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c260:	e841 2300 	strex	r3, r2, [r1]
 801c264:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801c266:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c268:	2b00      	cmp	r3, #0
 801c26a:	d1e5      	bne.n	801c238 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801c26c:	68fb      	ldr	r3, [r7, #12]
 801c26e:	689b      	ldr	r3, [r3, #8]
 801c270:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c274:	d107      	bne.n	801c286 <UART_Start_Receive_IT+0x102>
 801c276:	68fb      	ldr	r3, [r7, #12]
 801c278:	691b      	ldr	r3, [r3, #16]
 801c27a:	2b00      	cmp	r3, #0
 801c27c:	d103      	bne.n	801c286 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 801c27e:	68fb      	ldr	r3, [r7, #12]
 801c280:	4a21      	ldr	r2, [pc, #132]	; (801c308 <UART_Start_Receive_IT+0x184>)
 801c282:	669a      	str	r2, [r3, #104]	; 0x68
 801c284:	e002      	b.n	801c28c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 801c286:	68fb      	ldr	r3, [r7, #12]
 801c288:	4a20      	ldr	r2, [pc, #128]	; (801c30c <UART_Start_Receive_IT+0x188>)
 801c28a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801c28c:	68fb      	ldr	r3, [r7, #12]
 801c28e:	691b      	ldr	r3, [r3, #16]
 801c290:	2b00      	cmp	r3, #0
 801c292:	d019      	beq.n	801c2c8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 801c294:	68fb      	ldr	r3, [r7, #12]
 801c296:	681b      	ldr	r3, [r3, #0]
 801c298:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c29a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c29c:	e853 3f00 	ldrex	r3, [r3]
 801c2a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801c2a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c2a4:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 801c2a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 801c2aa:	68fb      	ldr	r3, [r7, #12]
 801c2ac:	681b      	ldr	r3, [r3, #0]
 801c2ae:	461a      	mov	r2, r3
 801c2b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c2b2:	637b      	str	r3, [r7, #52]	; 0x34
 801c2b4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c2b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801c2b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c2ba:	e841 2300 	strex	r3, r2, [r1]
 801c2be:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801c2c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c2c2:	2b00      	cmp	r3, #0
 801c2c4:	d1e6      	bne.n	801c294 <UART_Start_Receive_IT+0x110>
 801c2c6:	e018      	b.n	801c2fa <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 801c2c8:	68fb      	ldr	r3, [r7, #12]
 801c2ca:	681b      	ldr	r3, [r3, #0]
 801c2cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c2ce:	697b      	ldr	r3, [r7, #20]
 801c2d0:	e853 3f00 	ldrex	r3, [r3]
 801c2d4:	613b      	str	r3, [r7, #16]
   return(result);
 801c2d6:	693b      	ldr	r3, [r7, #16]
 801c2d8:	f043 0320 	orr.w	r3, r3, #32
 801c2dc:	653b      	str	r3, [r7, #80]	; 0x50
 801c2de:	68fb      	ldr	r3, [r7, #12]
 801c2e0:	681b      	ldr	r3, [r3, #0]
 801c2e2:	461a      	mov	r2, r3
 801c2e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c2e6:	623b      	str	r3, [r7, #32]
 801c2e8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c2ea:	69f9      	ldr	r1, [r7, #28]
 801c2ec:	6a3a      	ldr	r2, [r7, #32]
 801c2ee:	e841 2300 	strex	r3, r2, [r1]
 801c2f2:	61bb      	str	r3, [r7, #24]
   return(result);
 801c2f4:	69bb      	ldr	r3, [r7, #24]
 801c2f6:	2b00      	cmp	r3, #0
 801c2f8:	d1e6      	bne.n	801c2c8 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 801c2fa:	2300      	movs	r3, #0
}
 801c2fc:	4618      	mov	r0, r3
 801c2fe:	375c      	adds	r7, #92	; 0x5c
 801c300:	46bd      	mov	sp, r7
 801c302:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c306:	4770      	bx	lr
 801c308:	0801c5cf 	.word	0x0801c5cf
 801c30c:	0801c461 	.word	0x0801c461

0801c310 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801c310:	b480      	push	{r7}
 801c312:	b095      	sub	sp, #84	; 0x54
 801c314:	af00      	add	r7, sp, #0
 801c316:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801c318:	687b      	ldr	r3, [r7, #4]
 801c31a:	681b      	ldr	r3, [r3, #0]
 801c31c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c31e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c320:	e853 3f00 	ldrex	r3, [r3]
 801c324:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801c326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c328:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801c32c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801c32e:	687b      	ldr	r3, [r7, #4]
 801c330:	681b      	ldr	r3, [r3, #0]
 801c332:	461a      	mov	r2, r3
 801c334:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c336:	643b      	str	r3, [r7, #64]	; 0x40
 801c338:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c33a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801c33c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801c33e:	e841 2300 	strex	r3, r2, [r1]
 801c342:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801c344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c346:	2b00      	cmp	r3, #0
 801c348:	d1e6      	bne.n	801c318 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c34a:	687b      	ldr	r3, [r7, #4]
 801c34c:	681b      	ldr	r3, [r3, #0]
 801c34e:	3308      	adds	r3, #8
 801c350:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c352:	6a3b      	ldr	r3, [r7, #32]
 801c354:	e853 3f00 	ldrex	r3, [r3]
 801c358:	61fb      	str	r3, [r7, #28]
   return(result);
 801c35a:	69fb      	ldr	r3, [r7, #28]
 801c35c:	f023 0301 	bic.w	r3, r3, #1
 801c360:	64bb      	str	r3, [r7, #72]	; 0x48
 801c362:	687b      	ldr	r3, [r7, #4]
 801c364:	681b      	ldr	r3, [r3, #0]
 801c366:	3308      	adds	r3, #8
 801c368:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c36a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801c36c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c36e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801c370:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c372:	e841 2300 	strex	r3, r2, [r1]
 801c376:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801c378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c37a:	2b00      	cmp	r3, #0
 801c37c:	d1e5      	bne.n	801c34a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c37e:	687b      	ldr	r3, [r7, #4]
 801c380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c382:	2b01      	cmp	r3, #1
 801c384:	d118      	bne.n	801c3b8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c386:	687b      	ldr	r3, [r7, #4]
 801c388:	681b      	ldr	r3, [r3, #0]
 801c38a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c38c:	68fb      	ldr	r3, [r7, #12]
 801c38e:	e853 3f00 	ldrex	r3, [r3]
 801c392:	60bb      	str	r3, [r7, #8]
   return(result);
 801c394:	68bb      	ldr	r3, [r7, #8]
 801c396:	f023 0310 	bic.w	r3, r3, #16
 801c39a:	647b      	str	r3, [r7, #68]	; 0x44
 801c39c:	687b      	ldr	r3, [r7, #4]
 801c39e:	681b      	ldr	r3, [r3, #0]
 801c3a0:	461a      	mov	r2, r3
 801c3a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c3a4:	61bb      	str	r3, [r7, #24]
 801c3a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c3a8:	6979      	ldr	r1, [r7, #20]
 801c3aa:	69ba      	ldr	r2, [r7, #24]
 801c3ac:	e841 2300 	strex	r3, r2, [r1]
 801c3b0:	613b      	str	r3, [r7, #16]
   return(result);
 801c3b2:	693b      	ldr	r3, [r7, #16]
 801c3b4:	2b00      	cmp	r3, #0
 801c3b6:	d1e6      	bne.n	801c386 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801c3b8:	687b      	ldr	r3, [r7, #4]
 801c3ba:	2220      	movs	r2, #32
 801c3bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c3c0:	687b      	ldr	r3, [r7, #4]
 801c3c2:	2200      	movs	r2, #0
 801c3c4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801c3c6:	687b      	ldr	r3, [r7, #4]
 801c3c8:	2200      	movs	r2, #0
 801c3ca:	669a      	str	r2, [r3, #104]	; 0x68
}
 801c3cc:	bf00      	nop
 801c3ce:	3754      	adds	r7, #84	; 0x54
 801c3d0:	46bd      	mov	sp, r7
 801c3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3d6:	4770      	bx	lr

0801c3d8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801c3d8:	b580      	push	{r7, lr}
 801c3da:	b084      	sub	sp, #16
 801c3dc:	af00      	add	r7, sp, #0
 801c3de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801c3e0:	687b      	ldr	r3, [r7, #4]
 801c3e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c3e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801c3e6:	68fb      	ldr	r3, [r7, #12]
 801c3e8:	2200      	movs	r2, #0
 801c3ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 801c3ee:	68fb      	ldr	r3, [r7, #12]
 801c3f0:	2200      	movs	r2, #0
 801c3f2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801c3f6:	68fb      	ldr	r3, [r7, #12]
 801c3f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801c3fc:	68f8      	ldr	r0, [r7, #12]
 801c3fe:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801c400:	bf00      	nop
 801c402:	3710      	adds	r7, #16
 801c404:	46bd      	mov	sp, r7
 801c406:	bd80      	pop	{r7, pc}

0801c408 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801c408:	b580      	push	{r7, lr}
 801c40a:	b088      	sub	sp, #32
 801c40c:	af00      	add	r7, sp, #0
 801c40e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801c410:	687b      	ldr	r3, [r7, #4]
 801c412:	681b      	ldr	r3, [r3, #0]
 801c414:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c416:	68fb      	ldr	r3, [r7, #12]
 801c418:	e853 3f00 	ldrex	r3, [r3]
 801c41c:	60bb      	str	r3, [r7, #8]
   return(result);
 801c41e:	68bb      	ldr	r3, [r7, #8]
 801c420:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801c424:	61fb      	str	r3, [r7, #28]
 801c426:	687b      	ldr	r3, [r7, #4]
 801c428:	681b      	ldr	r3, [r3, #0]
 801c42a:	461a      	mov	r2, r3
 801c42c:	69fb      	ldr	r3, [r7, #28]
 801c42e:	61bb      	str	r3, [r7, #24]
 801c430:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c432:	6979      	ldr	r1, [r7, #20]
 801c434:	69ba      	ldr	r2, [r7, #24]
 801c436:	e841 2300 	strex	r3, r2, [r1]
 801c43a:	613b      	str	r3, [r7, #16]
   return(result);
 801c43c:	693b      	ldr	r3, [r7, #16]
 801c43e:	2b00      	cmp	r3, #0
 801c440:	d1e6      	bne.n	801c410 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801c442:	687b      	ldr	r3, [r7, #4]
 801c444:	2220      	movs	r2, #32
 801c446:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801c448:	687b      	ldr	r3, [r7, #4]
 801c44a:	2200      	movs	r2, #0
 801c44c:	66da      	str	r2, [r3, #108]	; 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 801c44e:	687b      	ldr	r3, [r7, #4]
 801c450:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801c454:	6878      	ldr	r0, [r7, #4]
 801c456:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801c458:	bf00      	nop
 801c45a:	3720      	adds	r7, #32
 801c45c:	46bd      	mov	sp, r7
 801c45e:	bd80      	pop	{r7, pc}

0801c460 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801c460:	b580      	push	{r7, lr}
 801c462:	b096      	sub	sp, #88	; 0x58
 801c464:	af00      	add	r7, sp, #0
 801c466:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801c468:	687b      	ldr	r3, [r7, #4]
 801c46a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801c46e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801c472:	687b      	ldr	r3, [r7, #4]
 801c474:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c478:	2b22      	cmp	r3, #34	; 0x22
 801c47a:	f040 809c 	bne.w	801c5b6 <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801c47e:	687b      	ldr	r3, [r7, #4]
 801c480:	681b      	ldr	r3, [r3, #0]
 801c482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c484:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801c488:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 801c48c:	b2d9      	uxtb	r1, r3
 801c48e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801c492:	b2da      	uxtb	r2, r3
 801c494:	687b      	ldr	r3, [r7, #4]
 801c496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c498:	400a      	ands	r2, r1
 801c49a:	b2d2      	uxtb	r2, r2
 801c49c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801c49e:	687b      	ldr	r3, [r7, #4]
 801c4a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c4a2:	1c5a      	adds	r2, r3, #1
 801c4a4:	687b      	ldr	r3, [r7, #4]
 801c4a6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 801c4a8:	687b      	ldr	r3, [r7, #4]
 801c4aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801c4ae:	b29b      	uxth	r3, r3
 801c4b0:	3b01      	subs	r3, #1
 801c4b2:	b29a      	uxth	r2, r3
 801c4b4:	687b      	ldr	r3, [r7, #4]
 801c4b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 801c4ba:	687b      	ldr	r3, [r7, #4]
 801c4bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801c4c0:	b29b      	uxth	r3, r3
 801c4c2:	2b00      	cmp	r3, #0
 801c4c4:	d17f      	bne.n	801c5c6 <UART_RxISR_8BIT+0x166>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801c4c6:	687b      	ldr	r3, [r7, #4]
 801c4c8:	681b      	ldr	r3, [r3, #0]
 801c4ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c4cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c4ce:	e853 3f00 	ldrex	r3, [r3]
 801c4d2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801c4d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c4d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801c4da:	653b      	str	r3, [r7, #80]	; 0x50
 801c4dc:	687b      	ldr	r3, [r7, #4]
 801c4de:	681b      	ldr	r3, [r3, #0]
 801c4e0:	461a      	mov	r2, r3
 801c4e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c4e4:	647b      	str	r3, [r7, #68]	; 0x44
 801c4e6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c4e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801c4ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801c4ec:	e841 2300 	strex	r3, r2, [r1]
 801c4f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801c4f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c4f4:	2b00      	cmp	r3, #0
 801c4f6:	d1e6      	bne.n	801c4c6 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c4f8:	687b      	ldr	r3, [r7, #4]
 801c4fa:	681b      	ldr	r3, [r3, #0]
 801c4fc:	3308      	adds	r3, #8
 801c4fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c502:	e853 3f00 	ldrex	r3, [r3]
 801c506:	623b      	str	r3, [r7, #32]
   return(result);
 801c508:	6a3b      	ldr	r3, [r7, #32]
 801c50a:	f023 0301 	bic.w	r3, r3, #1
 801c50e:	64fb      	str	r3, [r7, #76]	; 0x4c
 801c510:	687b      	ldr	r3, [r7, #4]
 801c512:	681b      	ldr	r3, [r3, #0]
 801c514:	3308      	adds	r3, #8
 801c516:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801c518:	633a      	str	r2, [r7, #48]	; 0x30
 801c51a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c51c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c51e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c520:	e841 2300 	strex	r3, r2, [r1]
 801c524:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801c526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c528:	2b00      	cmp	r3, #0
 801c52a:	d1e5      	bne.n	801c4f8 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801c52c:	687b      	ldr	r3, [r7, #4]
 801c52e:	2220      	movs	r2, #32
 801c530:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801c534:	687b      	ldr	r3, [r7, #4]
 801c536:	2200      	movs	r2, #0
 801c538:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801c53a:	687b      	ldr	r3, [r7, #4]
 801c53c:	2200      	movs	r2, #0
 801c53e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c540:	687b      	ldr	r3, [r7, #4]
 801c542:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c544:	2b01      	cmp	r3, #1
 801c546:	d130      	bne.n	801c5aa <UART_RxISR_8BIT+0x14a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c548:	687b      	ldr	r3, [r7, #4]
 801c54a:	2200      	movs	r2, #0
 801c54c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c54e:	687b      	ldr	r3, [r7, #4]
 801c550:	681b      	ldr	r3, [r3, #0]
 801c552:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c554:	693b      	ldr	r3, [r7, #16]
 801c556:	e853 3f00 	ldrex	r3, [r3]
 801c55a:	60fb      	str	r3, [r7, #12]
   return(result);
 801c55c:	68fb      	ldr	r3, [r7, #12]
 801c55e:	f023 0310 	bic.w	r3, r3, #16
 801c562:	64bb      	str	r3, [r7, #72]	; 0x48
 801c564:	687b      	ldr	r3, [r7, #4]
 801c566:	681b      	ldr	r3, [r3, #0]
 801c568:	461a      	mov	r2, r3
 801c56a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c56c:	61fb      	str	r3, [r7, #28]
 801c56e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c570:	69b9      	ldr	r1, [r7, #24]
 801c572:	69fa      	ldr	r2, [r7, #28]
 801c574:	e841 2300 	strex	r3, r2, [r1]
 801c578:	617b      	str	r3, [r7, #20]
   return(result);
 801c57a:	697b      	ldr	r3, [r7, #20]
 801c57c:	2b00      	cmp	r3, #0
 801c57e:	d1e6      	bne.n	801c54e <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801c580:	687b      	ldr	r3, [r7, #4]
 801c582:	681b      	ldr	r3, [r3, #0]
 801c584:	69db      	ldr	r3, [r3, #28]
 801c586:	f003 0310 	and.w	r3, r3, #16
 801c58a:	2b10      	cmp	r3, #16
 801c58c:	d103      	bne.n	801c596 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801c58e:	687b      	ldr	r3, [r7, #4]
 801c590:	681b      	ldr	r3, [r3, #0]
 801c592:	2210      	movs	r2, #16
 801c594:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801c596:	687b      	ldr	r3, [r7, #4]
 801c598:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801c59c:	687a      	ldr	r2, [r7, #4]
 801c59e:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 801c5a2:	4611      	mov	r1, r2
 801c5a4:	6878      	ldr	r0, [r7, #4]
 801c5a6:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801c5a8:	e00d      	b.n	801c5c6 <UART_RxISR_8BIT+0x166>
        huart->RxCpltCallback(huart);
 801c5aa:	687b      	ldr	r3, [r7, #4]
 801c5ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801c5b0:	6878      	ldr	r0, [r7, #4]
 801c5b2:	4798      	blx	r3
}
 801c5b4:	e007      	b.n	801c5c6 <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801c5b6:	687b      	ldr	r3, [r7, #4]
 801c5b8:	681b      	ldr	r3, [r3, #0]
 801c5ba:	699a      	ldr	r2, [r3, #24]
 801c5bc:	687b      	ldr	r3, [r7, #4]
 801c5be:	681b      	ldr	r3, [r3, #0]
 801c5c0:	f042 0208 	orr.w	r2, r2, #8
 801c5c4:	619a      	str	r2, [r3, #24]
}
 801c5c6:	bf00      	nop
 801c5c8:	3758      	adds	r7, #88	; 0x58
 801c5ca:	46bd      	mov	sp, r7
 801c5cc:	bd80      	pop	{r7, pc}

0801c5ce <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801c5ce:	b580      	push	{r7, lr}
 801c5d0:	b096      	sub	sp, #88	; 0x58
 801c5d2:	af00      	add	r7, sp, #0
 801c5d4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801c5d6:	687b      	ldr	r3, [r7, #4]
 801c5d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801c5dc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801c5e0:	687b      	ldr	r3, [r7, #4]
 801c5e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c5e6:	2b22      	cmp	r3, #34	; 0x22
 801c5e8:	f040 809c 	bne.w	801c724 <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801c5ec:	687b      	ldr	r3, [r7, #4]
 801c5ee:	681b      	ldr	r3, [r3, #0]
 801c5f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c5f2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801c5f6:	687b      	ldr	r3, [r7, #4]
 801c5f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c5fa:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 801c5fc:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 801c600:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801c604:	4013      	ands	r3, r2
 801c606:	b29a      	uxth	r2, r3
 801c608:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c60a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801c60c:	687b      	ldr	r3, [r7, #4]
 801c60e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c610:	1c9a      	adds	r2, r3, #2
 801c612:	687b      	ldr	r3, [r7, #4]
 801c614:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 801c616:	687b      	ldr	r3, [r7, #4]
 801c618:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801c61c:	b29b      	uxth	r3, r3
 801c61e:	3b01      	subs	r3, #1
 801c620:	b29a      	uxth	r2, r3
 801c622:	687b      	ldr	r3, [r7, #4]
 801c624:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 801c628:	687b      	ldr	r3, [r7, #4]
 801c62a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801c62e:	b29b      	uxth	r3, r3
 801c630:	2b00      	cmp	r3, #0
 801c632:	d17f      	bne.n	801c734 <UART_RxISR_16BIT+0x166>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801c634:	687b      	ldr	r3, [r7, #4]
 801c636:	681b      	ldr	r3, [r3, #0]
 801c638:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c63a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c63c:	e853 3f00 	ldrex	r3, [r3]
 801c640:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801c642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c644:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801c648:	64fb      	str	r3, [r7, #76]	; 0x4c
 801c64a:	687b      	ldr	r3, [r7, #4]
 801c64c:	681b      	ldr	r3, [r3, #0]
 801c64e:	461a      	mov	r2, r3
 801c650:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c652:	643b      	str	r3, [r7, #64]	; 0x40
 801c654:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c656:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801c658:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801c65a:	e841 2300 	strex	r3, r2, [r1]
 801c65e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801c660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c662:	2b00      	cmp	r3, #0
 801c664:	d1e6      	bne.n	801c634 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c666:	687b      	ldr	r3, [r7, #4]
 801c668:	681b      	ldr	r3, [r3, #0]
 801c66a:	3308      	adds	r3, #8
 801c66c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c66e:	6a3b      	ldr	r3, [r7, #32]
 801c670:	e853 3f00 	ldrex	r3, [r3]
 801c674:	61fb      	str	r3, [r7, #28]
   return(result);
 801c676:	69fb      	ldr	r3, [r7, #28]
 801c678:	f023 0301 	bic.w	r3, r3, #1
 801c67c:	64bb      	str	r3, [r7, #72]	; 0x48
 801c67e:	687b      	ldr	r3, [r7, #4]
 801c680:	681b      	ldr	r3, [r3, #0]
 801c682:	3308      	adds	r3, #8
 801c684:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c686:	62fa      	str	r2, [r7, #44]	; 0x2c
 801c688:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c68a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801c68c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c68e:	e841 2300 	strex	r3, r2, [r1]
 801c692:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801c694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c696:	2b00      	cmp	r3, #0
 801c698:	d1e5      	bne.n	801c666 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801c69a:	687b      	ldr	r3, [r7, #4]
 801c69c:	2220      	movs	r2, #32
 801c69e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801c6a2:	687b      	ldr	r3, [r7, #4]
 801c6a4:	2200      	movs	r2, #0
 801c6a6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801c6a8:	687b      	ldr	r3, [r7, #4]
 801c6aa:	2200      	movs	r2, #0
 801c6ac:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c6ae:	687b      	ldr	r3, [r7, #4]
 801c6b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c6b2:	2b01      	cmp	r3, #1
 801c6b4:	d130      	bne.n	801c718 <UART_RxISR_16BIT+0x14a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c6b6:	687b      	ldr	r3, [r7, #4]
 801c6b8:	2200      	movs	r2, #0
 801c6ba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c6bc:	687b      	ldr	r3, [r7, #4]
 801c6be:	681b      	ldr	r3, [r3, #0]
 801c6c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c6c2:	68fb      	ldr	r3, [r7, #12]
 801c6c4:	e853 3f00 	ldrex	r3, [r3]
 801c6c8:	60bb      	str	r3, [r7, #8]
   return(result);
 801c6ca:	68bb      	ldr	r3, [r7, #8]
 801c6cc:	f023 0310 	bic.w	r3, r3, #16
 801c6d0:	647b      	str	r3, [r7, #68]	; 0x44
 801c6d2:	687b      	ldr	r3, [r7, #4]
 801c6d4:	681b      	ldr	r3, [r3, #0]
 801c6d6:	461a      	mov	r2, r3
 801c6d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c6da:	61bb      	str	r3, [r7, #24]
 801c6dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c6de:	6979      	ldr	r1, [r7, #20]
 801c6e0:	69ba      	ldr	r2, [r7, #24]
 801c6e2:	e841 2300 	strex	r3, r2, [r1]
 801c6e6:	613b      	str	r3, [r7, #16]
   return(result);
 801c6e8:	693b      	ldr	r3, [r7, #16]
 801c6ea:	2b00      	cmp	r3, #0
 801c6ec:	d1e6      	bne.n	801c6bc <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801c6ee:	687b      	ldr	r3, [r7, #4]
 801c6f0:	681b      	ldr	r3, [r3, #0]
 801c6f2:	69db      	ldr	r3, [r3, #28]
 801c6f4:	f003 0310 	and.w	r3, r3, #16
 801c6f8:	2b10      	cmp	r3, #16
 801c6fa:	d103      	bne.n	801c704 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801c6fc:	687b      	ldr	r3, [r7, #4]
 801c6fe:	681b      	ldr	r3, [r3, #0]
 801c700:	2210      	movs	r2, #16
 801c702:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801c704:	687b      	ldr	r3, [r7, #4]
 801c706:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801c70a:	687a      	ldr	r2, [r7, #4]
 801c70c:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 801c710:	4611      	mov	r1, r2
 801c712:	6878      	ldr	r0, [r7, #4]
 801c714:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801c716:	e00d      	b.n	801c734 <UART_RxISR_16BIT+0x166>
        huart->RxCpltCallback(huart);
 801c718:	687b      	ldr	r3, [r7, #4]
 801c71a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801c71e:	6878      	ldr	r0, [r7, #4]
 801c720:	4798      	blx	r3
}
 801c722:	e007      	b.n	801c734 <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801c724:	687b      	ldr	r3, [r7, #4]
 801c726:	681b      	ldr	r3, [r3, #0]
 801c728:	699a      	ldr	r2, [r3, #24]
 801c72a:	687b      	ldr	r3, [r7, #4]
 801c72c:	681b      	ldr	r3, [r3, #0]
 801c72e:	f042 0208 	orr.w	r2, r2, #8
 801c732:	619a      	str	r2, [r3, #24]
}
 801c734:	bf00      	nop
 801c736:	3758      	adds	r7, #88	; 0x58
 801c738:	46bd      	mov	sp, r7
 801c73a:	bd80      	pop	{r7, pc}

0801c73c <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801c73c:	b580      	push	{r7, lr}
 801c73e:	b08c      	sub	sp, #48	; 0x30
 801c740:	af00      	add	r7, sp, #0
 801c742:	60f8      	str	r0, [r7, #12]
 801c744:	60b9      	str	r1, [r7, #8]
 801c746:	4613      	mov	r3, r2
 801c748:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801c74a:	68fb      	ldr	r3, [r7, #12]
 801c74c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c750:	2b20      	cmp	r3, #32
 801c752:	d142      	bne.n	801c7da <HAL_UARTEx_ReceiveToIdle_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 801c754:	68bb      	ldr	r3, [r7, #8]
 801c756:	2b00      	cmp	r3, #0
 801c758:	d002      	beq.n	801c760 <HAL_UARTEx_ReceiveToIdle_IT+0x24>
 801c75a:	88fb      	ldrh	r3, [r7, #6]
 801c75c:	2b00      	cmp	r3, #0
 801c75e:	d101      	bne.n	801c764 <HAL_UARTEx_ReceiveToIdle_IT+0x28>
    {
      return HAL_ERROR;
 801c760:	2301      	movs	r3, #1
 801c762:	e03b      	b.n	801c7dc <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 801c764:	68fb      	ldr	r3, [r7, #12]
 801c766:	2201      	movs	r2, #1
 801c768:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 801c76a:	68fb      	ldr	r3, [r7, #12]
 801c76c:	2200      	movs	r2, #0
 801c76e:	665a      	str	r2, [r3, #100]	; 0x64

    status =  UART_Start_Receive_IT(huart, pData, Size);
 801c770:	88fb      	ldrh	r3, [r7, #6]
 801c772:	461a      	mov	r2, r3
 801c774:	68b9      	ldr	r1, [r7, #8]
 801c776:	68f8      	ldr	r0, [r7, #12]
 801c778:	f7ff fd04 	bl	801c184 <UART_Start_Receive_IT>
 801c77c:	4603      	mov	r3, r0
 801c77e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 801c782:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801c786:	2b00      	cmp	r3, #0
 801c788:	d124      	bne.n	801c7d4 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c78a:	68fb      	ldr	r3, [r7, #12]
 801c78c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c78e:	2b01      	cmp	r3, #1
 801c790:	d11d      	bne.n	801c7ce <HAL_UARTEx_ReceiveToIdle_IT+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801c792:	68fb      	ldr	r3, [r7, #12]
 801c794:	681b      	ldr	r3, [r3, #0]
 801c796:	2210      	movs	r2, #16
 801c798:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c79a:	68fb      	ldr	r3, [r7, #12]
 801c79c:	681b      	ldr	r3, [r3, #0]
 801c79e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c7a0:	69bb      	ldr	r3, [r7, #24]
 801c7a2:	e853 3f00 	ldrex	r3, [r3]
 801c7a6:	617b      	str	r3, [r7, #20]
   return(result);
 801c7a8:	697b      	ldr	r3, [r7, #20]
 801c7aa:	f043 0310 	orr.w	r3, r3, #16
 801c7ae:	62bb      	str	r3, [r7, #40]	; 0x28
 801c7b0:	68fb      	ldr	r3, [r7, #12]
 801c7b2:	681b      	ldr	r3, [r3, #0]
 801c7b4:	461a      	mov	r2, r3
 801c7b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c7b8:	627b      	str	r3, [r7, #36]	; 0x24
 801c7ba:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c7bc:	6a39      	ldr	r1, [r7, #32]
 801c7be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c7c0:	e841 2300 	strex	r3, r2, [r1]
 801c7c4:	61fb      	str	r3, [r7, #28]
   return(result);
 801c7c6:	69fb      	ldr	r3, [r7, #28]
 801c7c8:	2b00      	cmp	r3, #0
 801c7ca:	d1e6      	bne.n	801c79a <HAL_UARTEx_ReceiveToIdle_IT+0x5e>
 801c7cc:	e002      	b.n	801c7d4 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 801c7ce:	2301      	movs	r3, #1
 801c7d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 801c7d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801c7d8:	e000      	b.n	801c7dc <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 801c7da:	2302      	movs	r3, #2
  }
}
 801c7dc:	4618      	mov	r0, r3
 801c7de:	3730      	adds	r7, #48	; 0x30
 801c7e0:	46bd      	mov	sp, r7
 801c7e2:	bd80      	pop	{r7, pc}

0801c7e4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 801c7e4:	b580      	push	{r7, lr}
 801c7e6:	b084      	sub	sp, #16
 801c7e8:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 801c7ea:	4b2f      	ldr	r3, [pc, #188]	; (801c8a8 <MX_LWIP_Init+0xc4>)
 801c7ec:	22c0      	movs	r2, #192	; 0xc0
 801c7ee:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 801c7f0:	4b2d      	ldr	r3, [pc, #180]	; (801c8a8 <MX_LWIP_Init+0xc4>)
 801c7f2:	22a8      	movs	r2, #168	; 0xa8
 801c7f4:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 12;
 801c7f6:	4b2c      	ldr	r3, [pc, #176]	; (801c8a8 <MX_LWIP_Init+0xc4>)
 801c7f8:	220c      	movs	r2, #12
 801c7fa:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 100;
 801c7fc:	4b2a      	ldr	r3, [pc, #168]	; (801c8a8 <MX_LWIP_Init+0xc4>)
 801c7fe:	2264      	movs	r2, #100	; 0x64
 801c800:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 801c802:	4b2a      	ldr	r3, [pc, #168]	; (801c8ac <MX_LWIP_Init+0xc8>)
 801c804:	22ff      	movs	r2, #255	; 0xff
 801c806:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 801c808:	4b28      	ldr	r3, [pc, #160]	; (801c8ac <MX_LWIP_Init+0xc8>)
 801c80a:	22ff      	movs	r2, #255	; 0xff
 801c80c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 801c80e:	4b27      	ldr	r3, [pc, #156]	; (801c8ac <MX_LWIP_Init+0xc8>)
 801c810:	22ff      	movs	r2, #255	; 0xff
 801c812:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 801c814:	4b25      	ldr	r3, [pc, #148]	; (801c8ac <MX_LWIP_Init+0xc8>)
 801c816:	2200      	movs	r2, #0
 801c818:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 801c81a:	4b25      	ldr	r3, [pc, #148]	; (801c8b0 <MX_LWIP_Init+0xcc>)
 801c81c:	22c0      	movs	r2, #192	; 0xc0
 801c81e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 801c820:	4b23      	ldr	r3, [pc, #140]	; (801c8b0 <MX_LWIP_Init+0xcc>)
 801c822:	22a8      	movs	r2, #168	; 0xa8
 801c824:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 12;
 801c826:	4b22      	ldr	r3, [pc, #136]	; (801c8b0 <MX_LWIP_Init+0xcc>)
 801c828:	220c      	movs	r2, #12
 801c82a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 801c82c:	4b20      	ldr	r3, [pc, #128]	; (801c8b0 <MX_LWIP_Init+0xcc>)
 801c82e:	2201      	movs	r2, #1
 801c830:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
	switch(EI_data.ProtocolType)
 801c832:	4b20      	ldr	r3, [pc, #128]	; (801c8b4 <MX_LWIP_Init+0xd0>)
 801c834:	781b      	ldrb	r3, [r3, #0]
 801c836:	2b01      	cmp	r3, #1
 801c838:	d002      	beq.n	801c840 <MX_LWIP_Init+0x5c>
 801c83a:	2b02      	cmp	r3, #2
 801c83c:	d03c      	beq.n	801c8b8 <MX_LWIP_Init+0xd4>
		GATEWAY_ADDRESS[2] = EI_data.Siemens_st.Self_IP[CARD_INDEX][2];
		GATEWAY_ADDRESS[3] = 1;
		break;

	default :
		return;
 801c83e:	e162      	b.n	801cb06 <MX_LWIP_Init+0x322>
		IP_ADDRESS[0] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][0];
 801c840:	4b1c      	ldr	r3, [pc, #112]	; (801c8b4 <MX_LWIP_Init+0xd0>)
 801c842:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
 801c846:	4b18      	ldr	r3, [pc, #96]	; (801c8a8 <MX_LWIP_Init+0xc4>)
 801c848:	701a      	strb	r2, [r3, #0]
		IP_ADDRESS[1] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][1];
 801c84a:	4b1a      	ldr	r3, [pc, #104]	; (801c8b4 <MX_LWIP_Init+0xd0>)
 801c84c:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 801c850:	4b15      	ldr	r3, [pc, #84]	; (801c8a8 <MX_LWIP_Init+0xc4>)
 801c852:	705a      	strb	r2, [r3, #1]
		IP_ADDRESS[2] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][2];
 801c854:	4b17      	ldr	r3, [pc, #92]	; (801c8b4 <MX_LWIP_Init+0xd0>)
 801c856:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 801c85a:	4b13      	ldr	r3, [pc, #76]	; (801c8a8 <MX_LWIP_Init+0xc4>)
 801c85c:	709a      	strb	r2, [r3, #2]
		IP_ADDRESS[3] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][3];
 801c85e:	4b15      	ldr	r3, [pc, #84]	; (801c8b4 <MX_LWIP_Init+0xd0>)
 801c860:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 801c864:	4b10      	ldr	r3, [pc, #64]	; (801c8a8 <MX_LWIP_Init+0xc4>)
 801c866:	70da      	strb	r2, [r3, #3]
		NETMASK_ADDRESS[0] = 255;
 801c868:	4b10      	ldr	r3, [pc, #64]	; (801c8ac <MX_LWIP_Init+0xc8>)
 801c86a:	22ff      	movs	r2, #255	; 0xff
 801c86c:	701a      	strb	r2, [r3, #0]
		NETMASK_ADDRESS[1] = 255;
 801c86e:	4b0f      	ldr	r3, [pc, #60]	; (801c8ac <MX_LWIP_Init+0xc8>)
 801c870:	22ff      	movs	r2, #255	; 0xff
 801c872:	705a      	strb	r2, [r3, #1]
		NETMASK_ADDRESS[2] = 255;
 801c874:	4b0d      	ldr	r3, [pc, #52]	; (801c8ac <MX_LWIP_Init+0xc8>)
 801c876:	22ff      	movs	r2, #255	; 0xff
 801c878:	709a      	strb	r2, [r3, #2]
		NETMASK_ADDRESS[3] = 0;
 801c87a:	4b0c      	ldr	r3, [pc, #48]	; (801c8ac <MX_LWIP_Init+0xc8>)
 801c87c:	2200      	movs	r2, #0
 801c87e:	70da      	strb	r2, [r3, #3]
		GATEWAY_ADDRESS[0] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][0];;
 801c880:	4b0c      	ldr	r3, [pc, #48]	; (801c8b4 <MX_LWIP_Init+0xd0>)
 801c882:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
 801c886:	4b0a      	ldr	r3, [pc, #40]	; (801c8b0 <MX_LWIP_Init+0xcc>)
 801c888:	701a      	strb	r2, [r3, #0]
		GATEWAY_ADDRESS[1] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][1];
 801c88a:	4b0a      	ldr	r3, [pc, #40]	; (801c8b4 <MX_LWIP_Init+0xd0>)
 801c88c:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 801c890:	4b07      	ldr	r3, [pc, #28]	; (801c8b0 <MX_LWIP_Init+0xcc>)
 801c892:	705a      	strb	r2, [r3, #1]
		GATEWAY_ADDRESS[2] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][2];
 801c894:	4b07      	ldr	r3, [pc, #28]	; (801c8b4 <MX_LWIP_Init+0xd0>)
 801c896:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 801c89a:	4b05      	ldr	r3, [pc, #20]	; (801c8b0 <MX_LWIP_Init+0xcc>)
 801c89c:	709a      	strb	r2, [r3, #2]
		GATEWAY_ADDRESS[3] = 1;
 801c89e:	4b04      	ldr	r3, [pc, #16]	; (801c8b0 <MX_LWIP_Init+0xcc>)
 801c8a0:	2201      	movs	r2, #1
 801c8a2:	70da      	strb	r2, [r3, #3]
		break;
 801c8a4:	e03b      	b.n	801c91e <MX_LWIP_Init+0x13a>
 801c8a6:	bf00      	nop
 801c8a8:	2000bd58 	.word	0x2000bd58
 801c8ac:	2000bd5c 	.word	0x2000bd5c
 801c8b0:	2000bd60 	.word	0x2000bd60
 801c8b4:	20000304 	.word	0x20000304
		IP_ADDRESS[0] = EI_data.Siemens_st.Self_IP[CARD_INDEX][0];
 801c8b8:	4b94      	ldr	r3, [pc, #592]	; (801cb0c <MX_LWIP_Init+0x328>)
 801c8ba:	f893 22a9 	ldrb.w	r2, [r3, #681]	; 0x2a9
 801c8be:	4b94      	ldr	r3, [pc, #592]	; (801cb10 <MX_LWIP_Init+0x32c>)
 801c8c0:	701a      	strb	r2, [r3, #0]
		IP_ADDRESS[1] = EI_data.Siemens_st.Self_IP[CARD_INDEX][1];
 801c8c2:	4b92      	ldr	r3, [pc, #584]	; (801cb0c <MX_LWIP_Init+0x328>)
 801c8c4:	f893 22aa 	ldrb.w	r2, [r3, #682]	; 0x2aa
 801c8c8:	4b91      	ldr	r3, [pc, #580]	; (801cb10 <MX_LWIP_Init+0x32c>)
 801c8ca:	705a      	strb	r2, [r3, #1]
		IP_ADDRESS[2] = EI_data.Siemens_st.Self_IP[CARD_INDEX][2];
 801c8cc:	4b8f      	ldr	r3, [pc, #572]	; (801cb0c <MX_LWIP_Init+0x328>)
 801c8ce:	f893 22ab 	ldrb.w	r2, [r3, #683]	; 0x2ab
 801c8d2:	4b8f      	ldr	r3, [pc, #572]	; (801cb10 <MX_LWIP_Init+0x32c>)
 801c8d4:	709a      	strb	r2, [r3, #2]
		IP_ADDRESS[3] = EI_data.Siemens_st.Self_IP[CARD_INDEX][3];
 801c8d6:	4b8d      	ldr	r3, [pc, #564]	; (801cb0c <MX_LWIP_Init+0x328>)
 801c8d8:	f893 22ac 	ldrb.w	r2, [r3, #684]	; 0x2ac
 801c8dc:	4b8c      	ldr	r3, [pc, #560]	; (801cb10 <MX_LWIP_Init+0x32c>)
 801c8de:	70da      	strb	r2, [r3, #3]
		NETMASK_ADDRESS[0] = 255;
 801c8e0:	4b8c      	ldr	r3, [pc, #560]	; (801cb14 <MX_LWIP_Init+0x330>)
 801c8e2:	22ff      	movs	r2, #255	; 0xff
 801c8e4:	701a      	strb	r2, [r3, #0]
		NETMASK_ADDRESS[1] = 255;
 801c8e6:	4b8b      	ldr	r3, [pc, #556]	; (801cb14 <MX_LWIP_Init+0x330>)
 801c8e8:	22ff      	movs	r2, #255	; 0xff
 801c8ea:	705a      	strb	r2, [r3, #1]
		NETMASK_ADDRESS[2] = 255;
 801c8ec:	4b89      	ldr	r3, [pc, #548]	; (801cb14 <MX_LWIP_Init+0x330>)
 801c8ee:	22ff      	movs	r2, #255	; 0xff
 801c8f0:	709a      	strb	r2, [r3, #2]
		NETMASK_ADDRESS[3] = 0;
 801c8f2:	4b88      	ldr	r3, [pc, #544]	; (801cb14 <MX_LWIP_Init+0x330>)
 801c8f4:	2200      	movs	r2, #0
 801c8f6:	70da      	strb	r2, [r3, #3]
		GATEWAY_ADDRESS[0] = EI_data.Siemens_st.Self_IP[CARD_INDEX][0];;
 801c8f8:	4b84      	ldr	r3, [pc, #528]	; (801cb0c <MX_LWIP_Init+0x328>)
 801c8fa:	f893 22a9 	ldrb.w	r2, [r3, #681]	; 0x2a9
 801c8fe:	4b86      	ldr	r3, [pc, #536]	; (801cb18 <MX_LWIP_Init+0x334>)
 801c900:	701a      	strb	r2, [r3, #0]
		GATEWAY_ADDRESS[1] = EI_data.Siemens_st.Self_IP[CARD_INDEX][1];
 801c902:	4b82      	ldr	r3, [pc, #520]	; (801cb0c <MX_LWIP_Init+0x328>)
 801c904:	f893 22aa 	ldrb.w	r2, [r3, #682]	; 0x2aa
 801c908:	4b83      	ldr	r3, [pc, #524]	; (801cb18 <MX_LWIP_Init+0x334>)
 801c90a:	705a      	strb	r2, [r3, #1]
		GATEWAY_ADDRESS[2] = EI_data.Siemens_st.Self_IP[CARD_INDEX][2];
 801c90c:	4b7f      	ldr	r3, [pc, #508]	; (801cb0c <MX_LWIP_Init+0x328>)
 801c90e:	f893 22ab 	ldrb.w	r2, [r3, #683]	; 0x2ab
 801c912:	4b81      	ldr	r3, [pc, #516]	; (801cb18 <MX_LWIP_Init+0x334>)
 801c914:	709a      	strb	r2, [r3, #2]
		GATEWAY_ADDRESS[3] = 1;
 801c916:	4b80      	ldr	r3, [pc, #512]	; (801cb18 <MX_LWIP_Init+0x334>)
 801c918:	2201      	movs	r2, #1
 801c91a:	70da      	strb	r2, [r3, #3]
		break;
 801c91c:	bf00      	nop
	}

/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 801c91e:	f000 fd42 	bl	801d3a6 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 801c922:	4b7b      	ldr	r3, [pc, #492]	; (801cb10 <MX_LWIP_Init+0x32c>)
 801c924:	781b      	ldrb	r3, [r3, #0]
 801c926:	061a      	lsls	r2, r3, #24
 801c928:	4b79      	ldr	r3, [pc, #484]	; (801cb10 <MX_LWIP_Init+0x32c>)
 801c92a:	785b      	ldrb	r3, [r3, #1]
 801c92c:	041b      	lsls	r3, r3, #16
 801c92e:	431a      	orrs	r2, r3
 801c930:	4b77      	ldr	r3, [pc, #476]	; (801cb10 <MX_LWIP_Init+0x32c>)
 801c932:	789b      	ldrb	r3, [r3, #2]
 801c934:	021b      	lsls	r3, r3, #8
 801c936:	4313      	orrs	r3, r2
 801c938:	4a75      	ldr	r2, [pc, #468]	; (801cb10 <MX_LWIP_Init+0x32c>)
 801c93a:	78d2      	ldrb	r2, [r2, #3]
 801c93c:	4313      	orrs	r3, r2
 801c93e:	061a      	lsls	r2, r3, #24
 801c940:	4b73      	ldr	r3, [pc, #460]	; (801cb10 <MX_LWIP_Init+0x32c>)
 801c942:	781b      	ldrb	r3, [r3, #0]
 801c944:	0619      	lsls	r1, r3, #24
 801c946:	4b72      	ldr	r3, [pc, #456]	; (801cb10 <MX_LWIP_Init+0x32c>)
 801c948:	785b      	ldrb	r3, [r3, #1]
 801c94a:	041b      	lsls	r3, r3, #16
 801c94c:	4319      	orrs	r1, r3
 801c94e:	4b70      	ldr	r3, [pc, #448]	; (801cb10 <MX_LWIP_Init+0x32c>)
 801c950:	789b      	ldrb	r3, [r3, #2]
 801c952:	021b      	lsls	r3, r3, #8
 801c954:	430b      	orrs	r3, r1
 801c956:	496e      	ldr	r1, [pc, #440]	; (801cb10 <MX_LWIP_Init+0x32c>)
 801c958:	78c9      	ldrb	r1, [r1, #3]
 801c95a:	430b      	orrs	r3, r1
 801c95c:	021b      	lsls	r3, r3, #8
 801c95e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801c962:	431a      	orrs	r2, r3
 801c964:	4b6a      	ldr	r3, [pc, #424]	; (801cb10 <MX_LWIP_Init+0x32c>)
 801c966:	781b      	ldrb	r3, [r3, #0]
 801c968:	0619      	lsls	r1, r3, #24
 801c96a:	4b69      	ldr	r3, [pc, #420]	; (801cb10 <MX_LWIP_Init+0x32c>)
 801c96c:	785b      	ldrb	r3, [r3, #1]
 801c96e:	041b      	lsls	r3, r3, #16
 801c970:	4319      	orrs	r1, r3
 801c972:	4b67      	ldr	r3, [pc, #412]	; (801cb10 <MX_LWIP_Init+0x32c>)
 801c974:	789b      	ldrb	r3, [r3, #2]
 801c976:	021b      	lsls	r3, r3, #8
 801c978:	430b      	orrs	r3, r1
 801c97a:	4965      	ldr	r1, [pc, #404]	; (801cb10 <MX_LWIP_Init+0x32c>)
 801c97c:	78c9      	ldrb	r1, [r1, #3]
 801c97e:	430b      	orrs	r3, r1
 801c980:	0a1b      	lsrs	r3, r3, #8
 801c982:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c986:	431a      	orrs	r2, r3
 801c988:	4b61      	ldr	r3, [pc, #388]	; (801cb10 <MX_LWIP_Init+0x32c>)
 801c98a:	781b      	ldrb	r3, [r3, #0]
 801c98c:	0619      	lsls	r1, r3, #24
 801c98e:	4b60      	ldr	r3, [pc, #384]	; (801cb10 <MX_LWIP_Init+0x32c>)
 801c990:	785b      	ldrb	r3, [r3, #1]
 801c992:	041b      	lsls	r3, r3, #16
 801c994:	4319      	orrs	r1, r3
 801c996:	4b5e      	ldr	r3, [pc, #376]	; (801cb10 <MX_LWIP_Init+0x32c>)
 801c998:	789b      	ldrb	r3, [r3, #2]
 801c99a:	021b      	lsls	r3, r3, #8
 801c99c:	430b      	orrs	r3, r1
 801c99e:	495c      	ldr	r1, [pc, #368]	; (801cb10 <MX_LWIP_Init+0x32c>)
 801c9a0:	78c9      	ldrb	r1, [r1, #3]
 801c9a2:	430b      	orrs	r3, r1
 801c9a4:	0e1b      	lsrs	r3, r3, #24
 801c9a6:	4313      	orrs	r3, r2
 801c9a8:	4a5c      	ldr	r2, [pc, #368]	; (801cb1c <MX_LWIP_Init+0x338>)
 801c9aa:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 801c9ac:	4b59      	ldr	r3, [pc, #356]	; (801cb14 <MX_LWIP_Init+0x330>)
 801c9ae:	781b      	ldrb	r3, [r3, #0]
 801c9b0:	061a      	lsls	r2, r3, #24
 801c9b2:	4b58      	ldr	r3, [pc, #352]	; (801cb14 <MX_LWIP_Init+0x330>)
 801c9b4:	785b      	ldrb	r3, [r3, #1]
 801c9b6:	041b      	lsls	r3, r3, #16
 801c9b8:	431a      	orrs	r2, r3
 801c9ba:	4b56      	ldr	r3, [pc, #344]	; (801cb14 <MX_LWIP_Init+0x330>)
 801c9bc:	789b      	ldrb	r3, [r3, #2]
 801c9be:	021b      	lsls	r3, r3, #8
 801c9c0:	4313      	orrs	r3, r2
 801c9c2:	4a54      	ldr	r2, [pc, #336]	; (801cb14 <MX_LWIP_Init+0x330>)
 801c9c4:	78d2      	ldrb	r2, [r2, #3]
 801c9c6:	4313      	orrs	r3, r2
 801c9c8:	061a      	lsls	r2, r3, #24
 801c9ca:	4b52      	ldr	r3, [pc, #328]	; (801cb14 <MX_LWIP_Init+0x330>)
 801c9cc:	781b      	ldrb	r3, [r3, #0]
 801c9ce:	0619      	lsls	r1, r3, #24
 801c9d0:	4b50      	ldr	r3, [pc, #320]	; (801cb14 <MX_LWIP_Init+0x330>)
 801c9d2:	785b      	ldrb	r3, [r3, #1]
 801c9d4:	041b      	lsls	r3, r3, #16
 801c9d6:	4319      	orrs	r1, r3
 801c9d8:	4b4e      	ldr	r3, [pc, #312]	; (801cb14 <MX_LWIP_Init+0x330>)
 801c9da:	789b      	ldrb	r3, [r3, #2]
 801c9dc:	021b      	lsls	r3, r3, #8
 801c9de:	430b      	orrs	r3, r1
 801c9e0:	494c      	ldr	r1, [pc, #304]	; (801cb14 <MX_LWIP_Init+0x330>)
 801c9e2:	78c9      	ldrb	r1, [r1, #3]
 801c9e4:	430b      	orrs	r3, r1
 801c9e6:	021b      	lsls	r3, r3, #8
 801c9e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801c9ec:	431a      	orrs	r2, r3
 801c9ee:	4b49      	ldr	r3, [pc, #292]	; (801cb14 <MX_LWIP_Init+0x330>)
 801c9f0:	781b      	ldrb	r3, [r3, #0]
 801c9f2:	0619      	lsls	r1, r3, #24
 801c9f4:	4b47      	ldr	r3, [pc, #284]	; (801cb14 <MX_LWIP_Init+0x330>)
 801c9f6:	785b      	ldrb	r3, [r3, #1]
 801c9f8:	041b      	lsls	r3, r3, #16
 801c9fa:	4319      	orrs	r1, r3
 801c9fc:	4b45      	ldr	r3, [pc, #276]	; (801cb14 <MX_LWIP_Init+0x330>)
 801c9fe:	789b      	ldrb	r3, [r3, #2]
 801ca00:	021b      	lsls	r3, r3, #8
 801ca02:	430b      	orrs	r3, r1
 801ca04:	4943      	ldr	r1, [pc, #268]	; (801cb14 <MX_LWIP_Init+0x330>)
 801ca06:	78c9      	ldrb	r1, [r1, #3]
 801ca08:	430b      	orrs	r3, r1
 801ca0a:	0a1b      	lsrs	r3, r3, #8
 801ca0c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ca10:	431a      	orrs	r2, r3
 801ca12:	4b40      	ldr	r3, [pc, #256]	; (801cb14 <MX_LWIP_Init+0x330>)
 801ca14:	781b      	ldrb	r3, [r3, #0]
 801ca16:	0619      	lsls	r1, r3, #24
 801ca18:	4b3e      	ldr	r3, [pc, #248]	; (801cb14 <MX_LWIP_Init+0x330>)
 801ca1a:	785b      	ldrb	r3, [r3, #1]
 801ca1c:	041b      	lsls	r3, r3, #16
 801ca1e:	4319      	orrs	r1, r3
 801ca20:	4b3c      	ldr	r3, [pc, #240]	; (801cb14 <MX_LWIP_Init+0x330>)
 801ca22:	789b      	ldrb	r3, [r3, #2]
 801ca24:	021b      	lsls	r3, r3, #8
 801ca26:	430b      	orrs	r3, r1
 801ca28:	493a      	ldr	r1, [pc, #232]	; (801cb14 <MX_LWIP_Init+0x330>)
 801ca2a:	78c9      	ldrb	r1, [r1, #3]
 801ca2c:	430b      	orrs	r3, r1
 801ca2e:	0e1b      	lsrs	r3, r3, #24
 801ca30:	4313      	orrs	r3, r2
 801ca32:	4a3b      	ldr	r2, [pc, #236]	; (801cb20 <MX_LWIP_Init+0x33c>)
 801ca34:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 801ca36:	4b38      	ldr	r3, [pc, #224]	; (801cb18 <MX_LWIP_Init+0x334>)
 801ca38:	781b      	ldrb	r3, [r3, #0]
 801ca3a:	061a      	lsls	r2, r3, #24
 801ca3c:	4b36      	ldr	r3, [pc, #216]	; (801cb18 <MX_LWIP_Init+0x334>)
 801ca3e:	785b      	ldrb	r3, [r3, #1]
 801ca40:	041b      	lsls	r3, r3, #16
 801ca42:	431a      	orrs	r2, r3
 801ca44:	4b34      	ldr	r3, [pc, #208]	; (801cb18 <MX_LWIP_Init+0x334>)
 801ca46:	789b      	ldrb	r3, [r3, #2]
 801ca48:	021b      	lsls	r3, r3, #8
 801ca4a:	4313      	orrs	r3, r2
 801ca4c:	4a32      	ldr	r2, [pc, #200]	; (801cb18 <MX_LWIP_Init+0x334>)
 801ca4e:	78d2      	ldrb	r2, [r2, #3]
 801ca50:	4313      	orrs	r3, r2
 801ca52:	061a      	lsls	r2, r3, #24
 801ca54:	4b30      	ldr	r3, [pc, #192]	; (801cb18 <MX_LWIP_Init+0x334>)
 801ca56:	781b      	ldrb	r3, [r3, #0]
 801ca58:	0619      	lsls	r1, r3, #24
 801ca5a:	4b2f      	ldr	r3, [pc, #188]	; (801cb18 <MX_LWIP_Init+0x334>)
 801ca5c:	785b      	ldrb	r3, [r3, #1]
 801ca5e:	041b      	lsls	r3, r3, #16
 801ca60:	4319      	orrs	r1, r3
 801ca62:	4b2d      	ldr	r3, [pc, #180]	; (801cb18 <MX_LWIP_Init+0x334>)
 801ca64:	789b      	ldrb	r3, [r3, #2]
 801ca66:	021b      	lsls	r3, r3, #8
 801ca68:	430b      	orrs	r3, r1
 801ca6a:	492b      	ldr	r1, [pc, #172]	; (801cb18 <MX_LWIP_Init+0x334>)
 801ca6c:	78c9      	ldrb	r1, [r1, #3]
 801ca6e:	430b      	orrs	r3, r1
 801ca70:	021b      	lsls	r3, r3, #8
 801ca72:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801ca76:	431a      	orrs	r2, r3
 801ca78:	4b27      	ldr	r3, [pc, #156]	; (801cb18 <MX_LWIP_Init+0x334>)
 801ca7a:	781b      	ldrb	r3, [r3, #0]
 801ca7c:	0619      	lsls	r1, r3, #24
 801ca7e:	4b26      	ldr	r3, [pc, #152]	; (801cb18 <MX_LWIP_Init+0x334>)
 801ca80:	785b      	ldrb	r3, [r3, #1]
 801ca82:	041b      	lsls	r3, r3, #16
 801ca84:	4319      	orrs	r1, r3
 801ca86:	4b24      	ldr	r3, [pc, #144]	; (801cb18 <MX_LWIP_Init+0x334>)
 801ca88:	789b      	ldrb	r3, [r3, #2]
 801ca8a:	021b      	lsls	r3, r3, #8
 801ca8c:	430b      	orrs	r3, r1
 801ca8e:	4922      	ldr	r1, [pc, #136]	; (801cb18 <MX_LWIP_Init+0x334>)
 801ca90:	78c9      	ldrb	r1, [r1, #3]
 801ca92:	430b      	orrs	r3, r1
 801ca94:	0a1b      	lsrs	r3, r3, #8
 801ca96:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ca9a:	431a      	orrs	r2, r3
 801ca9c:	4b1e      	ldr	r3, [pc, #120]	; (801cb18 <MX_LWIP_Init+0x334>)
 801ca9e:	781b      	ldrb	r3, [r3, #0]
 801caa0:	0619      	lsls	r1, r3, #24
 801caa2:	4b1d      	ldr	r3, [pc, #116]	; (801cb18 <MX_LWIP_Init+0x334>)
 801caa4:	785b      	ldrb	r3, [r3, #1]
 801caa6:	041b      	lsls	r3, r3, #16
 801caa8:	4319      	orrs	r1, r3
 801caaa:	4b1b      	ldr	r3, [pc, #108]	; (801cb18 <MX_LWIP_Init+0x334>)
 801caac:	789b      	ldrb	r3, [r3, #2]
 801caae:	021b      	lsls	r3, r3, #8
 801cab0:	430b      	orrs	r3, r1
 801cab2:	4919      	ldr	r1, [pc, #100]	; (801cb18 <MX_LWIP_Init+0x334>)
 801cab4:	78c9      	ldrb	r1, [r1, #3]
 801cab6:	430b      	orrs	r3, r1
 801cab8:	0e1b      	lsrs	r3, r3, #24
 801caba:	4313      	orrs	r3, r2
 801cabc:	4a19      	ldr	r2, [pc, #100]	; (801cb24 <MX_LWIP_Init+0x340>)
 801cabe:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 801cac0:	4b19      	ldr	r3, [pc, #100]	; (801cb28 <MX_LWIP_Init+0x344>)
 801cac2:	9302      	str	r3, [sp, #8]
 801cac4:	4b19      	ldr	r3, [pc, #100]	; (801cb2c <MX_LWIP_Init+0x348>)
 801cac6:	9301      	str	r3, [sp, #4]
 801cac8:	2300      	movs	r3, #0
 801caca:	9300      	str	r3, [sp, #0]
 801cacc:	4b15      	ldr	r3, [pc, #84]	; (801cb24 <MX_LWIP_Init+0x340>)
 801cace:	4a14      	ldr	r2, [pc, #80]	; (801cb20 <MX_LWIP_Init+0x33c>)
 801cad0:	4912      	ldr	r1, [pc, #72]	; (801cb1c <MX_LWIP_Init+0x338>)
 801cad2:	4817      	ldr	r0, [pc, #92]	; (801cb30 <MX_LWIP_Init+0x34c>)
 801cad4:	f001 f998 	bl	801de08 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 801cad8:	4815      	ldr	r0, [pc, #84]	; (801cb30 <MX_LWIP_Init+0x34c>)
 801cada:	f001 fb49 	bl	801e170 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 801cade:	4b14      	ldr	r3, [pc, #80]	; (801cb30 <MX_LWIP_Init+0x34c>)
 801cae0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801cae4:	089b      	lsrs	r3, r3, #2
 801cae6:	f003 0301 	and.w	r3, r3, #1
 801caea:	b2db      	uxtb	r3, r3
 801caec:	2b00      	cmp	r3, #0
 801caee:	d003      	beq.n	801caf8 <MX_LWIP_Init+0x314>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 801caf0:	480f      	ldr	r0, [pc, #60]	; (801cb30 <MX_LWIP_Init+0x34c>)
 801caf2:	f001 fb4d 	bl	801e190 <netif_set_up>
 801caf6:	e002      	b.n	801cafe <MX_LWIP_Init+0x31a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 801caf8:	480d      	ldr	r0, [pc, #52]	; (801cb30 <MX_LWIP_Init+0x34c>)
 801cafa:	f001 fbb5 	bl	801e268 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 801cafe:	490d      	ldr	r1, [pc, #52]	; (801cb34 <MX_LWIP_Init+0x350>)
 801cb00:	480b      	ldr	r0, [pc, #44]	; (801cb30 <MX_LWIP_Init+0x34c>)
 801cb02:	f001 fc47 	bl	801e394 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 801cb06:	46bd      	mov	sp, r7
 801cb08:	bd80      	pop	{r7, pc}
 801cb0a:	bf00      	nop
 801cb0c:	20000304 	.word	0x20000304
 801cb10:	2000bd58 	.word	0x2000bd58
 801cb14:	2000bd5c 	.word	0x2000bd5c
 801cb18:	2000bd60 	.word	0x2000bd60
 801cb1c:	2000bd4c 	.word	0x2000bd4c
 801cb20:	2000bd50 	.word	0x2000bd50
 801cb24:	2000bd54 	.word	0x2000bd54
 801cb28:	08022151 	.word	0x08022151
 801cb2c:	0801cec5 	.word	0x0801cec5
 801cb30:	2000bd0c 	.word	0x2000bd0c
 801cb34:	0801cb89 	.word	0x0801cb89

0801cb38 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 801cb38:	b580      	push	{r7, lr}
 801cb3a:	b082      	sub	sp, #8
 801cb3c:	af00      	add	r7, sp, #0
 801cb3e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 801cb40:	f7f8 fd26 	bl	8015590 <HAL_GetTick>
 801cb44:	4602      	mov	r2, r0
 801cb46:	4b08      	ldr	r3, [pc, #32]	; (801cb68 <Ethernet_Link_Periodic_Handle+0x30>)
 801cb48:	681b      	ldr	r3, [r3, #0]
 801cb4a:	1ad3      	subs	r3, r2, r3
 801cb4c:	2b63      	cmp	r3, #99	; 0x63
 801cb4e:	d907      	bls.n	801cb60 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 801cb50:	f7f8 fd1e 	bl	8015590 <HAL_GetTick>
 801cb54:	4603      	mov	r3, r0
 801cb56:	4a04      	ldr	r2, [pc, #16]	; (801cb68 <Ethernet_Link_Periodic_Handle+0x30>)
 801cb58:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 801cb5a:	6878      	ldr	r0, [r7, #4]
 801cb5c:	f000 fb10 	bl	801d180 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 801cb60:	bf00      	nop
 801cb62:	3708      	adds	r7, #8
 801cb64:	46bd      	mov	sp, r7
 801cb66:	bd80      	pop	{r7, pc}
 801cb68:	2000bd08 	.word	0x2000bd08

0801cb6c <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 801cb6c:	b580      	push	{r7, lr}
 801cb6e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 801cb70:	4804      	ldr	r0, [pc, #16]	; (801cb84 <MX_LWIP_Process+0x18>)
 801cb72:	f000 f987 	bl	801ce84 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 801cb76:	f002 fb83 	bl	801f280 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 801cb7a:	4802      	ldr	r0, [pc, #8]	; (801cb84 <MX_LWIP_Process+0x18>)
 801cb7c:	f7ff ffdc 	bl	801cb38 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 801cb80:	bf00      	nop
 801cb82:	bd80      	pop	{r7, pc}
 801cb84:	2000bd0c 	.word	0x2000bd0c

0801cb88 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 801cb88:	b480      	push	{r7}
 801cb8a:	b083      	sub	sp, #12
 801cb8c:	af00      	add	r7, sp, #0
 801cb8e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 801cb90:	bf00      	nop
 801cb92:	370c      	adds	r7, #12
 801cb94:	46bd      	mov	sp, r7
 801cb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb9a:	4770      	bx	lr

0801cb9c <SCB_InvalidateDCache_by_Addr>:
{
 801cb9c:	b480      	push	{r7}
 801cb9e:	b087      	sub	sp, #28
 801cba0:	af00      	add	r7, sp, #0
 801cba2:	6078      	str	r0, [r7, #4]
 801cba4:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 801cba6:	683b      	ldr	r3, [r7, #0]
 801cba8:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 801cbaa:	687b      	ldr	r3, [r7, #4]
 801cbac:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 801cbae:	2320      	movs	r3, #32
 801cbb0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 801cbb2:	f3bf 8f4f 	dsb	sy
}
 801cbb6:	bf00      	nop
    while (op_size > 0) {
 801cbb8:	e00b      	b.n	801cbd2 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 801cbba:	4a0d      	ldr	r2, [pc, #52]	; (801cbf0 <SCB_InvalidateDCache_by_Addr+0x54>)
 801cbbc:	693b      	ldr	r3, [r7, #16]
 801cbbe:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 801cbc2:	68fb      	ldr	r3, [r7, #12]
 801cbc4:	693a      	ldr	r2, [r7, #16]
 801cbc6:	4413      	add	r3, r2
 801cbc8:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 801cbca:	697a      	ldr	r2, [r7, #20]
 801cbcc:	68fb      	ldr	r3, [r7, #12]
 801cbce:	1ad3      	subs	r3, r2, r3
 801cbd0:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 801cbd2:	697b      	ldr	r3, [r7, #20]
 801cbd4:	2b00      	cmp	r3, #0
 801cbd6:	dcf0      	bgt.n	801cbba <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 801cbd8:	f3bf 8f4f 	dsb	sy
}
 801cbdc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801cbde:	f3bf 8f6f 	isb	sy
}
 801cbe2:	bf00      	nop
}
 801cbe4:	bf00      	nop
 801cbe6:	371c      	adds	r7, #28
 801cbe8:	46bd      	mov	sp, r7
 801cbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cbee:	4770      	bx	lr
 801cbf0:	e000ed00 	.word	0xe000ed00

0801cbf4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 801cbf4:	b580      	push	{r7, lr}
 801cbf6:	b084      	sub	sp, #16
 801cbf8:	af00      	add	r7, sp, #0
 801cbfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 801cbfc:	2300      	movs	r3, #0
 801cbfe:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 801cc00:	4b47      	ldr	r3, [pc, #284]	; (801cd20 <low_level_init+0x12c>)
 801cc02:	4a48      	ldr	r2, [pc, #288]	; (801cd24 <low_level_init+0x130>)
 801cc04:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 801cc06:	2300      	movs	r3, #0
 801cc08:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 801cc0a:	2380      	movs	r3, #128	; 0x80
 801cc0c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 801cc0e:	23e1      	movs	r3, #225	; 0xe1
 801cc10:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 801cc12:	2300      	movs	r3, #0
 801cc14:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 801cc16:	2300      	movs	r3, #0
 801cc18:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 801cc1a:	2300      	movs	r3, #0
 801cc1c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 801cc1e:	4a40      	ldr	r2, [pc, #256]	; (801cd20 <low_level_init+0x12c>)
 801cc20:	f107 0308 	add.w	r3, r7, #8
 801cc24:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 801cc26:	4b3e      	ldr	r3, [pc, #248]	; (801cd20 <low_level_init+0x12c>)
 801cc28:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 801cc2c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 801cc2e:	4b3c      	ldr	r3, [pc, #240]	; (801cd20 <low_level_init+0x12c>)
 801cc30:	4a3d      	ldr	r2, [pc, #244]	; (801cd28 <low_level_init+0x134>)
 801cc32:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 801cc34:	4b3a      	ldr	r3, [pc, #232]	; (801cd20 <low_level_init+0x12c>)
 801cc36:	4a3d      	ldr	r2, [pc, #244]	; (801cd2c <low_level_init+0x138>)
 801cc38:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 801cc3a:	4b39      	ldr	r3, [pc, #228]	; (801cd20 <low_level_init+0x12c>)
 801cc3c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 801cc40:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
	switch(EI_data.ProtocolType)
 801cc42:	4b3b      	ldr	r3, [pc, #236]	; (801cd30 <low_level_init+0x13c>)
 801cc44:	781b      	ldrb	r3, [r3, #0]
 801cc46:	2b01      	cmp	r3, #1
 801cc48:	d002      	beq.n	801cc50 <low_level_init+0x5c>
 801cc4a:	2b02      	cmp	r3, #2
 801cc4c:	d004      	beq.n	801cc58 <low_level_init+0x64>
		break;
	case SIEMENS:
		heth.Init.MACAddr = &EI_data.Siemens_st.Self_MAC[CARD_INDEX][0];
		break;
	default:
		return;
 801cc4e:	e063      	b.n	801cd18 <low_level_init+0x124>
		heth.Init.MACAddr = &EI_data.Hitachi_st.Self_MAC[CARD_INDEX][0];
 801cc50:	4b33      	ldr	r3, [pc, #204]	; (801cd20 <low_level_init+0x12c>)
 801cc52:	4a38      	ldr	r2, [pc, #224]	; (801cd34 <low_level_init+0x140>)
 801cc54:	605a      	str	r2, [r3, #4]
		break;
 801cc56:	e003      	b.n	801cc60 <low_level_init+0x6c>
		heth.Init.MACAddr = &EI_data.Siemens_st.Self_MAC[CARD_INDEX][0];
 801cc58:	4b31      	ldr	r3, [pc, #196]	; (801cd20 <low_level_init+0x12c>)
 801cc5a:	4a37      	ldr	r2, [pc, #220]	; (801cd38 <low_level_init+0x144>)
 801cc5c:	605a      	str	r2, [r3, #4]
		break;
 801cc5e:	bf00      	nop
	}
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 801cc60:	482f      	ldr	r0, [pc, #188]	; (801cd20 <low_level_init+0x12c>)
 801cc62:	f7f9 fdbb 	bl	80167dc <HAL_ETH_Init>
 801cc66:	4603      	mov	r3, r0
 801cc68:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 801cc6a:	2238      	movs	r2, #56	; 0x38
 801cc6c:	2100      	movs	r1, #0
 801cc6e:	4833      	ldr	r0, [pc, #204]	; (801cd3c <low_level_init+0x148>)
 801cc70:	f005 fbb0 	bl	80223d4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 801cc74:	4b31      	ldr	r3, [pc, #196]	; (801cd3c <low_level_init+0x148>)
 801cc76:	2221      	movs	r2, #33	; 0x21
 801cc78:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 801cc7a:	4b30      	ldr	r3, [pc, #192]	; (801cd3c <low_level_init+0x148>)
 801cc7c:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 801cc80:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 801cc82:	4b2e      	ldr	r3, [pc, #184]	; (801cd3c <low_level_init+0x148>)
 801cc84:	2200      	movs	r2, #0
 801cc86:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 801cc88:	482d      	ldr	r0, [pc, #180]	; (801cd40 <low_level_init+0x14c>)
 801cc8a:	f000 ff3d 	bl	801db08 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 801cc8e:	687b      	ldr	r3, [r7, #4]
 801cc90:	2206      	movs	r2, #6
 801cc92:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 801cc96:	4b22      	ldr	r3, [pc, #136]	; (801cd20 <low_level_init+0x12c>)
 801cc98:	685b      	ldr	r3, [r3, #4]
 801cc9a:	781a      	ldrb	r2, [r3, #0]
 801cc9c:	687b      	ldr	r3, [r7, #4]
 801cc9e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 801cca2:	4b1f      	ldr	r3, [pc, #124]	; (801cd20 <low_level_init+0x12c>)
 801cca4:	685b      	ldr	r3, [r3, #4]
 801cca6:	785a      	ldrb	r2, [r3, #1]
 801cca8:	687b      	ldr	r3, [r7, #4]
 801ccaa:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 801ccae:	4b1c      	ldr	r3, [pc, #112]	; (801cd20 <low_level_init+0x12c>)
 801ccb0:	685b      	ldr	r3, [r3, #4]
 801ccb2:	789a      	ldrb	r2, [r3, #2]
 801ccb4:	687b      	ldr	r3, [r7, #4]
 801ccb6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 801ccba:	4b19      	ldr	r3, [pc, #100]	; (801cd20 <low_level_init+0x12c>)
 801ccbc:	685b      	ldr	r3, [r3, #4]
 801ccbe:	78da      	ldrb	r2, [r3, #3]
 801ccc0:	687b      	ldr	r3, [r7, #4]
 801ccc2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 801ccc6:	4b16      	ldr	r3, [pc, #88]	; (801cd20 <low_level_init+0x12c>)
 801ccc8:	685b      	ldr	r3, [r3, #4]
 801ccca:	791a      	ldrb	r2, [r3, #4]
 801cccc:	687b      	ldr	r3, [r7, #4]
 801ccce:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 801ccd2:	4b13      	ldr	r3, [pc, #76]	; (801cd20 <low_level_init+0x12c>)
 801ccd4:	685b      	ldr	r3, [r3, #4]
 801ccd6:	795a      	ldrb	r2, [r3, #5]
 801ccd8:	687b      	ldr	r3, [r7, #4]
 801ccda:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 801ccde:	687b      	ldr	r3, [r7, #4]
 801cce0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 801cce4:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 801cce6:	687b      	ldr	r3, [r7, #4]
 801cce8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801ccec:	f043 030a 	orr.w	r3, r3, #10
 801ccf0:	b2da      	uxtb	r2, r3
 801ccf2:	687b      	ldr	r3, [r7, #4]
 801ccf4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  DP83848_RegisterBusIO(&DP83848, &DP83848_IOCtx);
 801ccf8:	4912      	ldr	r1, [pc, #72]	; (801cd44 <low_level_init+0x150>)
 801ccfa:	4813      	ldr	r0, [pc, #76]	; (801cd48 <low_level_init+0x154>)
 801ccfc:	f7f8 fa87 	bl	801520e <DP83848_RegisterBusIO>

  /* Initialize the DP83848 ETH PHY */
  DP83848_Init(&DP83848);
 801cd00:	4811      	ldr	r0, [pc, #68]	; (801cd48 <low_level_init+0x154>)
 801cd02:	f7f8 fab6 	bl	8015272 <DP83848_Init>

  if (hal_eth_init_status == HAL_OK)
 801cd06:	7bfb      	ldrb	r3, [r7, #15]
 801cd08:	2b00      	cmp	r3, #0
 801cd0a:	d103      	bne.n	801cd14 <low_level_init+0x120>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 801cd0c:	6878      	ldr	r0, [r7, #4]
 801cd0e:	f000 fa37 	bl	801d180 <ethernet_link_check_state>
 801cd12:	e001      	b.n	801cd18 <low_level_init+0x124>
  }
  else
  {
    Error_Handler();
 801cd14:	f7f6 feb0 	bl	8013a78 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 801cd18:	3710      	adds	r7, #16
 801cd1a:	46bd      	mov	sp, r7
 801cd1c:	bd80      	pop	{r7, pc}
 801cd1e:	bf00      	nop
 801cd20:	20010660 	.word	0x20010660
 801cd24:	40028000 	.word	0x40028000
 801cd28:	20000244 	.word	0x20000244
 801cd2c:	200001a4 	.word	0x200001a4
 801cd30:	20000304 	.word	0x20000304
 801cd34:	20000349 	.word	0x20000349
 801cd38:	200005b7 	.word	0x200005b7
 801cd3c:	20010710 	.word	0x20010710
 801cd40:	08028f14 	.word	0x08028f14
 801cd44:	20000128 	.word	0x20000128
 801cd48:	20010748 	.word	0x20010748

0801cd4c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 801cd4c:	b580      	push	{r7, lr}
 801cd4e:	b092      	sub	sp, #72	; 0x48
 801cd50:	af00      	add	r7, sp, #0
 801cd52:	6078      	str	r0, [r7, #4]
 801cd54:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 801cd56:	2300      	movs	r3, #0
 801cd58:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 801cd5a:	2300      	movs	r3, #0
 801cd5c:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 801cd5e:	2300      	movs	r3, #0
 801cd60:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 801cd64:	f107 030c 	add.w	r3, r7, #12
 801cd68:	2230      	movs	r2, #48	; 0x30
 801cd6a:	2100      	movs	r1, #0
 801cd6c:	4618      	mov	r0, r3
 801cd6e:	f005 fb31 	bl	80223d4 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 801cd72:	f107 030c 	add.w	r3, r7, #12
 801cd76:	2230      	movs	r2, #48	; 0x30
 801cd78:	2100      	movs	r1, #0
 801cd7a:	4618      	mov	r0, r3
 801cd7c:	f005 fb2a 	bl	80223d4 <memset>

  for(q = p; q != NULL; q = q->next)
 801cd80:	683b      	ldr	r3, [r7, #0]
 801cd82:	643b      	str	r3, [r7, #64]	; 0x40
 801cd84:	e045      	b.n	801ce12 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 801cd86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cd88:	2b03      	cmp	r3, #3
 801cd8a:	d902      	bls.n	801cd92 <low_level_output+0x46>
      return ERR_IF;
 801cd8c:	f06f 030b 	mvn.w	r3, #11
 801cd90:	e055      	b.n	801ce3e <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 801cd92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801cd94:	6859      	ldr	r1, [r3, #4]
 801cd96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801cd98:	4613      	mov	r3, r2
 801cd9a:	005b      	lsls	r3, r3, #1
 801cd9c:	4413      	add	r3, r2
 801cd9e:	009b      	lsls	r3, r3, #2
 801cda0:	3348      	adds	r3, #72	; 0x48
 801cda2:	443b      	add	r3, r7
 801cda4:	3b3c      	subs	r3, #60	; 0x3c
 801cda6:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 801cda8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801cdaa:	895b      	ldrh	r3, [r3, #10]
 801cdac:	4619      	mov	r1, r3
 801cdae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801cdb0:	4613      	mov	r3, r2
 801cdb2:	005b      	lsls	r3, r3, #1
 801cdb4:	4413      	add	r3, r2
 801cdb6:	009b      	lsls	r3, r3, #2
 801cdb8:	3348      	adds	r3, #72	; 0x48
 801cdba:	443b      	add	r3, r7
 801cdbc:	3b38      	subs	r3, #56	; 0x38
 801cdbe:	6019      	str	r1, [r3, #0]

    if(i>0)
 801cdc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cdc2:	2b00      	cmp	r3, #0
 801cdc4:	d011      	beq.n	801cdea <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 801cdc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cdc8:	1e5a      	subs	r2, r3, #1
 801cdca:	f107 000c 	add.w	r0, r7, #12
 801cdce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801cdd0:	460b      	mov	r3, r1
 801cdd2:	005b      	lsls	r3, r3, #1
 801cdd4:	440b      	add	r3, r1
 801cdd6:	009b      	lsls	r3, r3, #2
 801cdd8:	18c1      	adds	r1, r0, r3
 801cdda:	4613      	mov	r3, r2
 801cddc:	005b      	lsls	r3, r3, #1
 801cdde:	4413      	add	r3, r2
 801cde0:	009b      	lsls	r3, r3, #2
 801cde2:	3348      	adds	r3, #72	; 0x48
 801cde4:	443b      	add	r3, r7
 801cde6:	3b34      	subs	r3, #52	; 0x34
 801cde8:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 801cdea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801cdec:	681b      	ldr	r3, [r3, #0]
 801cdee:	2b00      	cmp	r3, #0
 801cdf0:	d109      	bne.n	801ce06 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 801cdf2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801cdf4:	4613      	mov	r3, r2
 801cdf6:	005b      	lsls	r3, r3, #1
 801cdf8:	4413      	add	r3, r2
 801cdfa:	009b      	lsls	r3, r3, #2
 801cdfc:	3348      	adds	r3, #72	; 0x48
 801cdfe:	443b      	add	r3, r7
 801ce00:	3b34      	subs	r3, #52	; 0x34
 801ce02:	2200      	movs	r2, #0
 801ce04:	601a      	str	r2, [r3, #0]
    }

    i++;
 801ce06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ce08:	3301      	adds	r3, #1
 801ce0a:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 801ce0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ce0e:	681b      	ldr	r3, [r3, #0]
 801ce10:	643b      	str	r3, [r7, #64]	; 0x40
 801ce12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ce14:	2b00      	cmp	r3, #0
 801ce16:	d1b6      	bne.n	801cd86 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 801ce18:	683b      	ldr	r3, [r7, #0]
 801ce1a:	891b      	ldrh	r3, [r3, #8]
 801ce1c:	461a      	mov	r2, r3
 801ce1e:	4b0a      	ldr	r3, [pc, #40]	; (801ce48 <low_level_output+0xfc>)
 801ce20:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 801ce22:	4a09      	ldr	r2, [pc, #36]	; (801ce48 <low_level_output+0xfc>)
 801ce24:	f107 030c 	add.w	r3, r7, #12
 801ce28:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 801ce2a:	4a07      	ldr	r2, [pc, #28]	; (801ce48 <low_level_output+0xfc>)
 801ce2c:	683b      	ldr	r3, [r7, #0]
 801ce2e:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 801ce30:	2214      	movs	r2, #20
 801ce32:	4905      	ldr	r1, [pc, #20]	; (801ce48 <low_level_output+0xfc>)
 801ce34:	4805      	ldr	r0, [pc, #20]	; (801ce4c <low_level_output+0x100>)
 801ce36:	f7f9 fe05 	bl	8016a44 <HAL_ETH_Transmit>

  return errval;
 801ce3a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 801ce3e:	4618      	mov	r0, r3
 801ce40:	3748      	adds	r7, #72	; 0x48
 801ce42:	46bd      	mov	sp, r7
 801ce44:	bd80      	pop	{r7, pc}
 801ce46:	bf00      	nop
 801ce48:	20010710 	.word	0x20010710
 801ce4c:	20010660 	.word	0x20010660

0801ce50 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 801ce50:	b580      	push	{r7, lr}
 801ce52:	b084      	sub	sp, #16
 801ce54:	af00      	add	r7, sp, #0
 801ce56:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 801ce58:	2300      	movs	r3, #0
 801ce5a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 801ce5c:	4b07      	ldr	r3, [pc, #28]	; (801ce7c <low_level_input+0x2c>)
 801ce5e:	781b      	ldrb	r3, [r3, #0]
 801ce60:	2b00      	cmp	r3, #0
 801ce62:	d105      	bne.n	801ce70 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 801ce64:	f107 030c 	add.w	r3, r7, #12
 801ce68:	4619      	mov	r1, r3
 801ce6a:	4805      	ldr	r0, [pc, #20]	; (801ce80 <low_level_input+0x30>)
 801ce6c:	f7f9 fe7e 	bl	8016b6c <HAL_ETH_ReadData>
  }

  return p;
 801ce70:	68fb      	ldr	r3, [r7, #12]
}
 801ce72:	4618      	mov	r0, r3
 801ce74:	3710      	adds	r7, #16
 801ce76:	46bd      	mov	sp, r7
 801ce78:	bd80      	pop	{r7, pc}
 801ce7a:	bf00      	nop
 801ce7c:	2001065c 	.word	0x2001065c
 801ce80:	20010660 	.word	0x20010660

0801ce84 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 801ce84:	b580      	push	{r7, lr}
 801ce86:	b084      	sub	sp, #16
 801ce88:	af00      	add	r7, sp, #0
 801ce8a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 801ce8c:	2300      	movs	r3, #0
 801ce8e:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 801ce90:	6878      	ldr	r0, [r7, #4]
 801ce92:	f7ff ffdd 	bl	801ce50 <low_level_input>
 801ce96:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 801ce98:	68fb      	ldr	r3, [r7, #12]
 801ce9a:	2b00      	cmp	r3, #0
 801ce9c:	d00a      	beq.n	801ceb4 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 801ce9e:	687b      	ldr	r3, [r7, #4]
 801cea0:	691b      	ldr	r3, [r3, #16]
 801cea2:	6879      	ldr	r1, [r7, #4]
 801cea4:	68f8      	ldr	r0, [r7, #12]
 801cea6:	4798      	blx	r3
 801cea8:	4603      	mov	r3, r0
 801ceaa:	2b00      	cmp	r3, #0
 801ceac:	d002      	beq.n	801ceb4 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 801ceae:	68f8      	ldr	r0, [r7, #12]
 801ceb0:	f001 fe40 	bl	801eb34 <pbuf_free>
      }
    }
  } while(p!=NULL);
 801ceb4:	68fb      	ldr	r3, [r7, #12]
 801ceb6:	2b00      	cmp	r3, #0
 801ceb8:	d1ea      	bne.n	801ce90 <ethernetif_input+0xc>
}
 801ceba:	bf00      	nop
 801cebc:	bf00      	nop
 801cebe:	3710      	adds	r7, #16
 801cec0:	46bd      	mov	sp, r7
 801cec2:	bd80      	pop	{r7, pc}

0801cec4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 801cec4:	b580      	push	{r7, lr}
 801cec6:	b082      	sub	sp, #8
 801cec8:	af00      	add	r7, sp, #0
 801ceca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 801cecc:	687b      	ldr	r3, [r7, #4]
 801cece:	2b00      	cmp	r3, #0
 801ced0:	d106      	bne.n	801cee0 <ethernetif_init+0x1c>
 801ced2:	4b0e      	ldr	r3, [pc, #56]	; (801cf0c <ethernetif_init+0x48>)
 801ced4:	f240 1287 	movw	r2, #391	; 0x187
 801ced8:	490d      	ldr	r1, [pc, #52]	; (801cf10 <ethernetif_init+0x4c>)
 801ceda:	480e      	ldr	r0, [pc, #56]	; (801cf14 <ethernetif_init+0x50>)
 801cedc:	f005 fb62 	bl	80225a4 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 801cee0:	687b      	ldr	r3, [r7, #4]
 801cee2:	2273      	movs	r2, #115	; 0x73
 801cee4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 801cee8:	687b      	ldr	r3, [r7, #4]
 801ceea:	2274      	movs	r2, #116	; 0x74
 801ceec:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 801cef0:	687b      	ldr	r3, [r7, #4]
 801cef2:	4a09      	ldr	r2, [pc, #36]	; (801cf18 <ethernetif_init+0x54>)
 801cef4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 801cef6:	687b      	ldr	r3, [r7, #4]
 801cef8:	4a08      	ldr	r2, [pc, #32]	; (801cf1c <ethernetif_init+0x58>)
 801cefa:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 801cefc:	6878      	ldr	r0, [r7, #4]
 801cefe:	f7ff fe79 	bl	801cbf4 <low_level_init>

  return ERR_OK;
 801cf02:	2300      	movs	r3, #0
}
 801cf04:	4618      	mov	r0, r3
 801cf06:	3708      	adds	r7, #8
 801cf08:	46bd      	mov	sp, r7
 801cf0a:	bd80      	pop	{r7, pc}
 801cf0c:	08027188 	.word	0x08027188
 801cf10:	080271e4 	.word	0x080271e4
 801cf14:	080271f4 	.word	0x080271f4
 801cf18:	080204e1 	.word	0x080204e1
 801cf1c:	0801cd4d 	.word	0x0801cd4d

0801cf20 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 801cf20:	b580      	push	{r7, lr}
 801cf22:	b084      	sub	sp, #16
 801cf24:	af00      	add	r7, sp, #0
 801cf26:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 801cf28:	687b      	ldr	r3, [r7, #4]
 801cf2a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 801cf2c:	68f9      	ldr	r1, [r7, #12]
 801cf2e:	4807      	ldr	r0, [pc, #28]	; (801cf4c <pbuf_free_custom+0x2c>)
 801cf30:	f000 fecc 	bl	801dccc <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 801cf34:	4b06      	ldr	r3, [pc, #24]	; (801cf50 <pbuf_free_custom+0x30>)
 801cf36:	781b      	ldrb	r3, [r3, #0]
 801cf38:	2b01      	cmp	r3, #1
 801cf3a:	d102      	bne.n	801cf42 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 801cf3c:	4b04      	ldr	r3, [pc, #16]	; (801cf50 <pbuf_free_custom+0x30>)
 801cf3e:	2200      	movs	r2, #0
 801cf40:	701a      	strb	r2, [r3, #0]
  }
}
 801cf42:	bf00      	nop
 801cf44:	3710      	adds	r7, #16
 801cf46:	46bd      	mov	sp, r7
 801cf48:	bd80      	pop	{r7, pc}
 801cf4a:	bf00      	nop
 801cf4c:	08028f14 	.word	0x08028f14
 801cf50:	2001065c 	.word	0x2001065c

0801cf54 <sys_now>:
 *         when LWIP_TIMERS == 1 and NO_SYS == 1
 * @param  None
 * @retval Current Time value
 */
u32_t sys_now(void)
{
 801cf54:	b580      	push	{r7, lr}
 801cf56:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 801cf58:	f7f8 fb1a 	bl	8015590 <HAL_GetTick>
 801cf5c:	4603      	mov	r3, r0
}
 801cf5e:	4618      	mov	r0, r3
 801cf60:	bd80      	pop	{r7, pc}
	...

0801cf64 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 801cf64:	b580      	push	{r7, lr}
 801cf66:	b08e      	sub	sp, #56	; 0x38
 801cf68:	af00      	add	r7, sp, #0
 801cf6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801cf6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801cf70:	2200      	movs	r2, #0
 801cf72:	601a      	str	r2, [r3, #0]
 801cf74:	605a      	str	r2, [r3, #4]
 801cf76:	609a      	str	r2, [r3, #8]
 801cf78:	60da      	str	r2, [r3, #12]
 801cf7a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 801cf7c:	687b      	ldr	r3, [r7, #4]
 801cf7e:	681b      	ldr	r3, [r3, #0]
 801cf80:	4a52      	ldr	r2, [pc, #328]	; (801d0cc <HAL_ETH_MspInit+0x168>)
 801cf82:	4293      	cmp	r3, r2
 801cf84:	f040 809e 	bne.w	801d0c4 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 801cf88:	4b51      	ldr	r3, [pc, #324]	; (801d0d0 <HAL_ETH_MspInit+0x16c>)
 801cf8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cf8c:	4a50      	ldr	r2, [pc, #320]	; (801d0d0 <HAL_ETH_MspInit+0x16c>)
 801cf8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801cf92:	6313      	str	r3, [r2, #48]	; 0x30
 801cf94:	4b4e      	ldr	r3, [pc, #312]	; (801d0d0 <HAL_ETH_MspInit+0x16c>)
 801cf96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cf98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801cf9c:	623b      	str	r3, [r7, #32]
 801cf9e:	6a3b      	ldr	r3, [r7, #32]
 801cfa0:	4b4b      	ldr	r3, [pc, #300]	; (801d0d0 <HAL_ETH_MspInit+0x16c>)
 801cfa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cfa4:	4a4a      	ldr	r2, [pc, #296]	; (801d0d0 <HAL_ETH_MspInit+0x16c>)
 801cfa6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801cfaa:	6313      	str	r3, [r2, #48]	; 0x30
 801cfac:	4b48      	ldr	r3, [pc, #288]	; (801d0d0 <HAL_ETH_MspInit+0x16c>)
 801cfae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cfb0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801cfb4:	61fb      	str	r3, [r7, #28]
 801cfb6:	69fb      	ldr	r3, [r7, #28]
 801cfb8:	4b45      	ldr	r3, [pc, #276]	; (801d0d0 <HAL_ETH_MspInit+0x16c>)
 801cfba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cfbc:	4a44      	ldr	r2, [pc, #272]	; (801d0d0 <HAL_ETH_MspInit+0x16c>)
 801cfbe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801cfc2:	6313      	str	r3, [r2, #48]	; 0x30
 801cfc4:	4b42      	ldr	r3, [pc, #264]	; (801d0d0 <HAL_ETH_MspInit+0x16c>)
 801cfc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cfc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801cfcc:	61bb      	str	r3, [r7, #24]
 801cfce:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 801cfd0:	4b3f      	ldr	r3, [pc, #252]	; (801d0d0 <HAL_ETH_MspInit+0x16c>)
 801cfd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cfd4:	4a3e      	ldr	r2, [pc, #248]	; (801d0d0 <HAL_ETH_MspInit+0x16c>)
 801cfd6:	f043 0304 	orr.w	r3, r3, #4
 801cfda:	6313      	str	r3, [r2, #48]	; 0x30
 801cfdc:	4b3c      	ldr	r3, [pc, #240]	; (801d0d0 <HAL_ETH_MspInit+0x16c>)
 801cfde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cfe0:	f003 0304 	and.w	r3, r3, #4
 801cfe4:	617b      	str	r3, [r7, #20]
 801cfe6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801cfe8:	4b39      	ldr	r3, [pc, #228]	; (801d0d0 <HAL_ETH_MspInit+0x16c>)
 801cfea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cfec:	4a38      	ldr	r2, [pc, #224]	; (801d0d0 <HAL_ETH_MspInit+0x16c>)
 801cfee:	f043 0301 	orr.w	r3, r3, #1
 801cff2:	6313      	str	r3, [r2, #48]	; 0x30
 801cff4:	4b36      	ldr	r3, [pc, #216]	; (801d0d0 <HAL_ETH_MspInit+0x16c>)
 801cff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cff8:	f003 0301 	and.w	r3, r3, #1
 801cffc:	613b      	str	r3, [r7, #16]
 801cffe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801d000:	4b33      	ldr	r3, [pc, #204]	; (801d0d0 <HAL_ETH_MspInit+0x16c>)
 801d002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d004:	4a32      	ldr	r2, [pc, #200]	; (801d0d0 <HAL_ETH_MspInit+0x16c>)
 801d006:	f043 0302 	orr.w	r3, r3, #2
 801d00a:	6313      	str	r3, [r2, #48]	; 0x30
 801d00c:	4b30      	ldr	r3, [pc, #192]	; (801d0d0 <HAL_ETH_MspInit+0x16c>)
 801d00e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d010:	f003 0302 	and.w	r3, r3, #2
 801d014:	60fb      	str	r3, [r7, #12]
 801d016:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 801d018:	4b2d      	ldr	r3, [pc, #180]	; (801d0d0 <HAL_ETH_MspInit+0x16c>)
 801d01a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d01c:	4a2c      	ldr	r2, [pc, #176]	; (801d0d0 <HAL_ETH_MspInit+0x16c>)
 801d01e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d022:	6313      	str	r3, [r2, #48]	; 0x30
 801d024:	4b2a      	ldr	r3, [pc, #168]	; (801d0d0 <HAL_ETH_MspInit+0x16c>)
 801d026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d02c:	60bb      	str	r3, [r7, #8]
 801d02e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    PG14     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = ETH_MDC_Pin|ETH_RXD0_Pin|ETH_RXD1_Pin;
 801d030:	2332      	movs	r3, #50	; 0x32
 801d032:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d034:	2302      	movs	r3, #2
 801d036:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d038:	2300      	movs	r3, #0
 801d03a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801d03c:	2303      	movs	r3, #3
 801d03e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801d040:	230b      	movs	r3, #11
 801d042:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801d044:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d048:	4619      	mov	r1, r3
 801d04a:	4822      	ldr	r0, [pc, #136]	; (801d0d4 <HAL_ETH_MspInit+0x170>)
 801d04c:	f7fa fdac 	bl	8017ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_REF_CLK_Pin|ETH_MDIO_Pin|ETH_CRS_DV_Pin;
 801d050:	2386      	movs	r3, #134	; 0x86
 801d052:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d054:	2302      	movs	r3, #2
 801d056:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d058:	2300      	movs	r3, #0
 801d05a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801d05c:	2303      	movs	r3, #3
 801d05e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801d060:	230b      	movs	r3, #11
 801d062:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801d064:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d068:	4619      	mov	r1, r3
 801d06a:	481b      	ldr	r0, [pc, #108]	; (801d0d8 <HAL_ETH_MspInit+0x174>)
 801d06c:	f7fa fd9c 	bl	8017ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_TX_EN_Pin;
 801d070:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801d074:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d076:	2302      	movs	r3, #2
 801d078:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d07a:	2300      	movs	r3, #0
 801d07c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801d07e:	2303      	movs	r3, #3
 801d080:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801d082:	230b      	movs	r3, #11
 801d084:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ETH_TX_EN_GPIO_Port, &GPIO_InitStruct);
 801d086:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d08a:	4619      	mov	r1, r3
 801d08c:	4813      	ldr	r0, [pc, #76]	; (801d0dc <HAL_ETH_MspInit+0x178>)
 801d08e:	f7fa fd8b 	bl	8017ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_TXD0_Pin|ETH_TXD1_Pin;
 801d092:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 801d096:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d098:	2302      	movs	r3, #2
 801d09a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d09c:	2300      	movs	r3, #0
 801d09e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801d0a0:	2303      	movs	r3, #3
 801d0a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801d0a4:	230b      	movs	r3, #11
 801d0a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801d0a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d0ac:	4619      	mov	r1, r3
 801d0ae:	480c      	ldr	r0, [pc, #48]	; (801d0e0 <HAL_ETH_MspInit+0x17c>)
 801d0b0:	f7fa fd7a 	bl	8017ba8 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 1, 0);
 801d0b4:	2200      	movs	r2, #0
 801d0b6:	2101      	movs	r1, #1
 801d0b8:	203d      	movs	r0, #61	; 0x3d
 801d0ba:	f7f9 fa4a 	bl	8016552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 801d0be:	203d      	movs	r0, #61	; 0x3d
 801d0c0:	f7f9 fa63 	bl	801658a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 801d0c4:	bf00      	nop
 801d0c6:	3738      	adds	r7, #56	; 0x38
 801d0c8:	46bd      	mov	sp, r7
 801d0ca:	bd80      	pop	{r7, pc}
 801d0cc:	40028000 	.word	0x40028000
 801d0d0:	40023800 	.word	0x40023800
 801d0d4:	40020800 	.word	0x40020800
 801d0d8:	40020000 	.word	0x40020000
 801d0dc:	40020400 	.word	0x40020400
 801d0e0:	40021800 	.word	0x40021800

0801d0e4 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 801d0e4:	b580      	push	{r7, lr}
 801d0e6:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 801d0e8:	4802      	ldr	r0, [pc, #8]	; (801d0f4 <ETH_PHY_IO_Init+0x10>)
 801d0ea:	f7fa f903 	bl	80172f4 <HAL_ETH_SetMDIOClockRange>

  return 0;
 801d0ee:	2300      	movs	r3, #0
}
 801d0f0:	4618      	mov	r0, r3
 801d0f2:	bd80      	pop	{r7, pc}
 801d0f4:	20010660 	.word	0x20010660

0801d0f8 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 801d0f8:	b480      	push	{r7}
 801d0fa:	af00      	add	r7, sp, #0
  return 0;
 801d0fc:	2300      	movs	r3, #0
}
 801d0fe:	4618      	mov	r0, r3
 801d100:	46bd      	mov	sp, r7
 801d102:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d106:	4770      	bx	lr

0801d108 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 801d108:	b580      	push	{r7, lr}
 801d10a:	b084      	sub	sp, #16
 801d10c:	af00      	add	r7, sp, #0
 801d10e:	60f8      	str	r0, [r7, #12]
 801d110:	60b9      	str	r1, [r7, #8]
 801d112:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 801d114:	687b      	ldr	r3, [r7, #4]
 801d116:	68ba      	ldr	r2, [r7, #8]
 801d118:	68f9      	ldr	r1, [r7, #12]
 801d11a:	4807      	ldr	r0, [pc, #28]	; (801d138 <ETH_PHY_IO_ReadReg+0x30>)
 801d11c:	f7f9 ff52 	bl	8016fc4 <HAL_ETH_ReadPHYRegister>
 801d120:	4603      	mov	r3, r0
 801d122:	2b00      	cmp	r3, #0
 801d124:	d002      	beq.n	801d12c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 801d126:	f04f 33ff 	mov.w	r3, #4294967295
 801d12a:	e000      	b.n	801d12e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 801d12c:	2300      	movs	r3, #0
}
 801d12e:	4618      	mov	r0, r3
 801d130:	3710      	adds	r7, #16
 801d132:	46bd      	mov	sp, r7
 801d134:	bd80      	pop	{r7, pc}
 801d136:	bf00      	nop
 801d138:	20010660 	.word	0x20010660

0801d13c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 801d13c:	b580      	push	{r7, lr}
 801d13e:	b084      	sub	sp, #16
 801d140:	af00      	add	r7, sp, #0
 801d142:	60f8      	str	r0, [r7, #12]
 801d144:	60b9      	str	r1, [r7, #8]
 801d146:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 801d148:	687b      	ldr	r3, [r7, #4]
 801d14a:	68ba      	ldr	r2, [r7, #8]
 801d14c:	68f9      	ldr	r1, [r7, #12]
 801d14e:	4807      	ldr	r0, [pc, #28]	; (801d16c <ETH_PHY_IO_WriteReg+0x30>)
 801d150:	f7f9 ff83 	bl	801705a <HAL_ETH_WritePHYRegister>
 801d154:	4603      	mov	r3, r0
 801d156:	2b00      	cmp	r3, #0
 801d158:	d002      	beq.n	801d160 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 801d15a:	f04f 33ff 	mov.w	r3, #4294967295
 801d15e:	e000      	b.n	801d162 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 801d160:	2300      	movs	r3, #0
}
 801d162:	4618      	mov	r0, r3
 801d164:	3710      	adds	r7, #16
 801d166:	46bd      	mov	sp, r7
 801d168:	bd80      	pop	{r7, pc}
 801d16a:	bf00      	nop
 801d16c:	20010660 	.word	0x20010660

0801d170 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 801d170:	b580      	push	{r7, lr}
 801d172:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 801d174:	f7f8 fa0c 	bl	8015590 <HAL_GetTick>
 801d178:	4603      	mov	r3, r0
}
 801d17a:	4618      	mov	r0, r3
 801d17c:	bd80      	pop	{r7, pc}
	...

0801d180 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 801d180:	b580      	push	{r7, lr}
 801d182:	b0a0      	sub	sp, #128	; 0x80
 801d184:	af00      	add	r7, sp, #0
 801d186:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 801d188:	f107 030c 	add.w	r3, r7, #12
 801d18c:	2264      	movs	r2, #100	; 0x64
 801d18e:	2100      	movs	r1, #0
 801d190:	4618      	mov	r0, r3
 801d192:	f005 f91f 	bl	80223d4 <memset>
  int32_t PHYLinkState = 0;
 801d196:	2300      	movs	r3, #0
 801d198:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 801d19a:	2300      	movs	r3, #0
 801d19c:	67fb      	str	r3, [r7, #124]	; 0x7c
 801d19e:	2300      	movs	r3, #0
 801d1a0:	67bb      	str	r3, [r7, #120]	; 0x78
 801d1a2:	2300      	movs	r3, #0
 801d1a4:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = DP83848_GetLinkState(&DP83848);
 801d1a6:	483a      	ldr	r0, [pc, #232]	; (801d290 <ethernet_link_check_state+0x110>)
 801d1a8:	f7f8 f90b 	bl	80153c2 <DP83848_GetLinkState>
 801d1ac:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= DP83848_STATUS_LINK_DOWN))
 801d1ae:	687b      	ldr	r3, [r7, #4]
 801d1b0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801d1b4:	089b      	lsrs	r3, r3, #2
 801d1b6:	f003 0301 	and.w	r3, r3, #1
 801d1ba:	b2db      	uxtb	r3, r3
 801d1bc:	2b00      	cmp	r3, #0
 801d1be:	d00c      	beq.n	801d1da <ethernet_link_check_state+0x5a>
 801d1c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d1c2:	2b01      	cmp	r3, #1
 801d1c4:	dc09      	bgt.n	801d1da <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 801d1c6:	4833      	ldr	r0, [pc, #204]	; (801d294 <ethernet_link_check_state+0x114>)
 801d1c8:	f7f9 fbe3 	bl	8016992 <HAL_ETH_Stop>
    netif_set_down(netif);
 801d1cc:	6878      	ldr	r0, [r7, #4]
 801d1ce:	f001 f84b 	bl	801e268 <netif_set_down>
    netif_set_link_down(netif);
 801d1d2:	6878      	ldr	r0, [r7, #4]
 801d1d4:	f001 f8ae 	bl	801e334 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 801d1d8:	e055      	b.n	801d286 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > DP83848_STATUS_LINK_DOWN))
 801d1da:	687b      	ldr	r3, [r7, #4]
 801d1dc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801d1e0:	f003 0304 	and.w	r3, r3, #4
 801d1e4:	2b00      	cmp	r3, #0
 801d1e6:	d14e      	bne.n	801d286 <ethernet_link_check_state+0x106>
 801d1e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d1ea:	2b01      	cmp	r3, #1
 801d1ec:	dd4b      	ble.n	801d286 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 801d1ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d1f0:	3b02      	subs	r3, #2
 801d1f2:	2b03      	cmp	r3, #3
 801d1f4:	d82a      	bhi.n	801d24c <ethernet_link_check_state+0xcc>
 801d1f6:	a201      	add	r2, pc, #4	; (adr r2, 801d1fc <ethernet_link_check_state+0x7c>)
 801d1f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d1fc:	0801d20d 	.word	0x0801d20d
 801d200:	0801d21f 	.word	0x0801d21f
 801d204:	0801d22f 	.word	0x0801d22f
 801d208:	0801d23f 	.word	0x0801d23f
      duplex = ETH_FULLDUPLEX_MODE;
 801d20c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801d210:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 801d212:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801d216:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 801d218:	2301      	movs	r3, #1
 801d21a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 801d21c:	e017      	b.n	801d24e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 801d21e:	2300      	movs	r3, #0
 801d220:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 801d222:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801d226:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 801d228:	2301      	movs	r3, #1
 801d22a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 801d22c:	e00f      	b.n	801d24e <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 801d22e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801d232:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 801d234:	2300      	movs	r3, #0
 801d236:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 801d238:	2301      	movs	r3, #1
 801d23a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 801d23c:	e007      	b.n	801d24e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 801d23e:	2300      	movs	r3, #0
 801d240:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 801d242:	2300      	movs	r3, #0
 801d244:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 801d246:	2301      	movs	r3, #1
 801d248:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 801d24a:	e000      	b.n	801d24e <ethernet_link_check_state+0xce>
      break;
 801d24c:	bf00      	nop
    if(linkchanged)
 801d24e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801d250:	2b00      	cmp	r3, #0
 801d252:	d018      	beq.n	801d286 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 801d254:	f107 030c 	add.w	r3, r7, #12
 801d258:	4619      	mov	r1, r3
 801d25a:	480e      	ldr	r0, [pc, #56]	; (801d294 <ethernet_link_check_state+0x114>)
 801d25c:	f7f9 ff46 	bl	80170ec <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 801d260:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d262:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 801d264:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801d266:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 801d268:	f107 030c 	add.w	r3, r7, #12
 801d26c:	4619      	mov	r1, r3
 801d26e:	4809      	ldr	r0, [pc, #36]	; (801d294 <ethernet_link_check_state+0x114>)
 801d270:	f7fa f826 	bl	80172c0 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 801d274:	4807      	ldr	r0, [pc, #28]	; (801d294 <ethernet_link_check_state+0x114>)
 801d276:	f7f9 fb2d 	bl	80168d4 <HAL_ETH_Start>
      netif_set_up(netif);
 801d27a:	6878      	ldr	r0, [r7, #4]
 801d27c:	f000 ff88 	bl	801e190 <netif_set_up>
      netif_set_link_up(netif);
 801d280:	6878      	ldr	r0, [r7, #4]
 801d282:	f001 f823 	bl	801e2cc <netif_set_link_up>
}
 801d286:	bf00      	nop
 801d288:	3780      	adds	r7, #128	; 0x80
 801d28a:	46bd      	mov	sp, r7
 801d28c:	bd80      	pop	{r7, pc}
 801d28e:	bf00      	nop
 801d290:	20010748 	.word	0x20010748
 801d294:	20010660 	.word	0x20010660

0801d298 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 801d298:	b580      	push	{r7, lr}
 801d29a:	b086      	sub	sp, #24
 801d29c:	af02      	add	r7, sp, #8
 801d29e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
	struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 801d2a0:	4812      	ldr	r0, [pc, #72]	; (801d2ec <HAL_ETH_RxAllocateCallback+0x54>)
 801d2a2:	f000 fca5 	bl	801dbf0 <memp_malloc_pool>
 801d2a6:	60f8      	str	r0, [r7, #12]
	if (p)
 801d2a8:	68fb      	ldr	r3, [r7, #12]
 801d2aa:	2b00      	cmp	r3, #0
 801d2ac:	d014      	beq.n	801d2d8 <HAL_ETH_RxAllocateCallback+0x40>
	{
		/* Get the buff from the struct pbuf address. */
		*buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 801d2ae:	68fb      	ldr	r3, [r7, #12]
 801d2b0:	f103 0214 	add.w	r2, r3, #20
 801d2b4:	687b      	ldr	r3, [r7, #4]
 801d2b6:	601a      	str	r2, [r3, #0]
		p->custom_free_function = pbuf_free_custom;
 801d2b8:	68fb      	ldr	r3, [r7, #12]
 801d2ba:	4a0d      	ldr	r2, [pc, #52]	; (801d2f0 <HAL_ETH_RxAllocateCallback+0x58>)
 801d2bc:	611a      	str	r2, [r3, #16]
		/* Initialize the struct pbuf.
		 * This must be performed whenever a buffer's allocated because it may be
		 * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
		pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 801d2be:	687b      	ldr	r3, [r7, #4]
 801d2c0:	681b      	ldr	r3, [r3, #0]
 801d2c2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 801d2c6:	9201      	str	r2, [sp, #4]
 801d2c8:	9300      	str	r3, [sp, #0]
 801d2ca:	68fb      	ldr	r3, [r7, #12]
 801d2cc:	2241      	movs	r2, #65	; 0x41
 801d2ce:	2100      	movs	r1, #0
 801d2d0:	2000      	movs	r0, #0
 801d2d2:	f001 fa75 	bl	801e7c0 <pbuf_alloced_custom>
	{
		RxAllocStatus = RX_ALLOC_ERROR;
		*buff = NULL;
	}
/* USER CODE END HAL ETH RxAllocateCallback */
}
 801d2d6:	e005      	b.n	801d2e4 <HAL_ETH_RxAllocateCallback+0x4c>
		RxAllocStatus = RX_ALLOC_ERROR;
 801d2d8:	4b06      	ldr	r3, [pc, #24]	; (801d2f4 <HAL_ETH_RxAllocateCallback+0x5c>)
 801d2da:	2201      	movs	r2, #1
 801d2dc:	701a      	strb	r2, [r3, #0]
		*buff = NULL;
 801d2de:	687b      	ldr	r3, [r7, #4]
 801d2e0:	2200      	movs	r2, #0
 801d2e2:	601a      	str	r2, [r3, #0]
}
 801d2e4:	bf00      	nop
 801d2e6:	3710      	adds	r7, #16
 801d2e8:	46bd      	mov	sp, r7
 801d2ea:	bd80      	pop	{r7, pc}
 801d2ec:	08028f14 	.word	0x08028f14
 801d2f0:	0801cf21 	.word	0x0801cf21
 801d2f4:	2001065c 	.word	0x2001065c

0801d2f8 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 801d2f8:	b580      	push	{r7, lr}
 801d2fa:	b088      	sub	sp, #32
 801d2fc:	af00      	add	r7, sp, #0
 801d2fe:	60f8      	str	r0, [r7, #12]
 801d300:	60b9      	str	r1, [r7, #8]
 801d302:	607a      	str	r2, [r7, #4]
 801d304:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

	struct pbuf **ppStart = (struct pbuf **)pStart;
 801d306:	68fb      	ldr	r3, [r7, #12]
 801d308:	61bb      	str	r3, [r7, #24]
	struct pbuf **ppEnd = (struct pbuf **)pEnd;
 801d30a:	68bb      	ldr	r3, [r7, #8]
 801d30c:	617b      	str	r3, [r7, #20]
	struct pbuf *p = NULL;
 801d30e:	2300      	movs	r3, #0
 801d310:	61fb      	str	r3, [r7, #28]

	/* Get the struct pbuf from the buff address. */
	p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 801d312:	687b      	ldr	r3, [r7, #4]
 801d314:	3b14      	subs	r3, #20
 801d316:	61fb      	str	r3, [r7, #28]
	p->next = NULL;
 801d318:	69fb      	ldr	r3, [r7, #28]
 801d31a:	2200      	movs	r2, #0
 801d31c:	601a      	str	r2, [r3, #0]
	p->tot_len = 0;
 801d31e:	69fb      	ldr	r3, [r7, #28]
 801d320:	2200      	movs	r2, #0
 801d322:	811a      	strh	r2, [r3, #8]
	p->len = Length;
 801d324:	69fb      	ldr	r3, [r7, #28]
 801d326:	887a      	ldrh	r2, [r7, #2]
 801d328:	815a      	strh	r2, [r3, #10]

	/* Chain the buffer. */
	if (!*ppStart)
 801d32a:	69bb      	ldr	r3, [r7, #24]
 801d32c:	681b      	ldr	r3, [r3, #0]
 801d32e:	2b00      	cmp	r3, #0
 801d330:	d103      	bne.n	801d33a <HAL_ETH_RxLinkCallback+0x42>
	{
		/* The first buffer of the packet. */
		*ppStart = p;
 801d332:	69bb      	ldr	r3, [r7, #24]
 801d334:	69fa      	ldr	r2, [r7, #28]
 801d336:	601a      	str	r2, [r3, #0]
 801d338:	e003      	b.n	801d342 <HAL_ETH_RxLinkCallback+0x4a>
	}
	else
	{
		/* Chain the buffer to the end of the packet. */
		(*ppEnd)->next = p;
 801d33a:	697b      	ldr	r3, [r7, #20]
 801d33c:	681b      	ldr	r3, [r3, #0]
 801d33e:	69fa      	ldr	r2, [r7, #28]
 801d340:	601a      	str	r2, [r3, #0]
	}
	*ppEnd  = p;
 801d342:	697b      	ldr	r3, [r7, #20]
 801d344:	69fa      	ldr	r2, [r7, #28]
 801d346:	601a      	str	r2, [r3, #0]

	/* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
	 * set to its own length, plus the length of all the following pbufs in the chain. */
	for (p = *ppStart; p != NULL; p = p->next)
 801d348:	69bb      	ldr	r3, [r7, #24]
 801d34a:	681b      	ldr	r3, [r3, #0]
 801d34c:	61fb      	str	r3, [r7, #28]
 801d34e:	e009      	b.n	801d364 <HAL_ETH_RxLinkCallback+0x6c>
	{
		p->tot_len += Length;
 801d350:	69fb      	ldr	r3, [r7, #28]
 801d352:	891a      	ldrh	r2, [r3, #8]
 801d354:	887b      	ldrh	r3, [r7, #2]
 801d356:	4413      	add	r3, r2
 801d358:	b29a      	uxth	r2, r3
 801d35a:	69fb      	ldr	r3, [r7, #28]
 801d35c:	811a      	strh	r2, [r3, #8]
	for (p = *ppStart; p != NULL; p = p->next)
 801d35e:	69fb      	ldr	r3, [r7, #28]
 801d360:	681b      	ldr	r3, [r3, #0]
 801d362:	61fb      	str	r3, [r7, #28]
 801d364:	69fb      	ldr	r3, [r7, #28]
 801d366:	2b00      	cmp	r3, #0
 801d368:	d1f2      	bne.n	801d350 <HAL_ETH_RxLinkCallback+0x58>
	}

	/* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
	SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 801d36a:	887b      	ldrh	r3, [r7, #2]
 801d36c:	4619      	mov	r1, r3
 801d36e:	6878      	ldr	r0, [r7, #4]
 801d370:	f7ff fc14 	bl	801cb9c <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 801d374:	bf00      	nop
 801d376:	3720      	adds	r7, #32
 801d378:	46bd      	mov	sp, r7
 801d37a:	bd80      	pop	{r7, pc}

0801d37c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 801d37c:	b480      	push	{r7}
 801d37e:	b083      	sub	sp, #12
 801d380:	af00      	add	r7, sp, #0
 801d382:	4603      	mov	r3, r0
 801d384:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 801d386:	88fb      	ldrh	r3, [r7, #6]
 801d388:	021b      	lsls	r3, r3, #8
 801d38a:	b21a      	sxth	r2, r3
 801d38c:	88fb      	ldrh	r3, [r7, #6]
 801d38e:	0a1b      	lsrs	r3, r3, #8
 801d390:	b29b      	uxth	r3, r3
 801d392:	b21b      	sxth	r3, r3
 801d394:	4313      	orrs	r3, r2
 801d396:	b21b      	sxth	r3, r3
 801d398:	b29b      	uxth	r3, r3
}
 801d39a:	4618      	mov	r0, r3
 801d39c:	370c      	adds	r7, #12
 801d39e:	46bd      	mov	sp, r7
 801d3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3a4:	4770      	bx	lr

0801d3a6 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 801d3a6:	b580      	push	{r7, lr}
 801d3a8:	b082      	sub	sp, #8
 801d3aa:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 801d3ac:	2300      	movs	r3, #0
 801d3ae:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 801d3b0:	f000 f8d2 	bl	801d558 <mem_init>
  memp_init();
 801d3b4:	f000 fbd8 	bl	801db68 <memp_init>
  pbuf_init();
  netif_init();
 801d3b8:	f000 fcfc 	bl	801ddb4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 801d3bc:	f001 ff9a 	bl	801f2f4 <udp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 801d3c0:	f001 ff16 	bl	801f1f0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 801d3c4:	bf00      	nop
 801d3c6:	3708      	adds	r7, #8
 801d3c8:	46bd      	mov	sp, r7
 801d3ca:	bd80      	pop	{r7, pc}

0801d3cc <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 801d3cc:	b480      	push	{r7}
 801d3ce:	b083      	sub	sp, #12
 801d3d0:	af00      	add	r7, sp, #0
 801d3d2:	4603      	mov	r3, r0
 801d3d4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 801d3d6:	4b05      	ldr	r3, [pc, #20]	; (801d3ec <ptr_to_mem+0x20>)
 801d3d8:	681a      	ldr	r2, [r3, #0]
 801d3da:	88fb      	ldrh	r3, [r7, #6]
 801d3dc:	4413      	add	r3, r2
}
 801d3de:	4618      	mov	r0, r3
 801d3e0:	370c      	adds	r7, #12
 801d3e2:	46bd      	mov	sp, r7
 801d3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3e8:	4770      	bx	lr
 801d3ea:	bf00      	nop
 801d3ec:	20010dd4 	.word	0x20010dd4

0801d3f0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 801d3f0:	b480      	push	{r7}
 801d3f2:	b083      	sub	sp, #12
 801d3f4:	af00      	add	r7, sp, #0
 801d3f6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 801d3f8:	4b05      	ldr	r3, [pc, #20]	; (801d410 <mem_to_ptr+0x20>)
 801d3fa:	681b      	ldr	r3, [r3, #0]
 801d3fc:	687a      	ldr	r2, [r7, #4]
 801d3fe:	1ad3      	subs	r3, r2, r3
 801d400:	b29b      	uxth	r3, r3
}
 801d402:	4618      	mov	r0, r3
 801d404:	370c      	adds	r7, #12
 801d406:	46bd      	mov	sp, r7
 801d408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d40c:	4770      	bx	lr
 801d40e:	bf00      	nop
 801d410:	20010dd4 	.word	0x20010dd4

0801d414 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 801d414:	b590      	push	{r4, r7, lr}
 801d416:	b085      	sub	sp, #20
 801d418:	af00      	add	r7, sp, #0
 801d41a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 801d41c:	4b45      	ldr	r3, [pc, #276]	; (801d534 <plug_holes+0x120>)
 801d41e:	681b      	ldr	r3, [r3, #0]
 801d420:	687a      	ldr	r2, [r7, #4]
 801d422:	429a      	cmp	r2, r3
 801d424:	d206      	bcs.n	801d434 <plug_holes+0x20>
 801d426:	4b44      	ldr	r3, [pc, #272]	; (801d538 <plug_holes+0x124>)
 801d428:	f240 12df 	movw	r2, #479	; 0x1df
 801d42c:	4943      	ldr	r1, [pc, #268]	; (801d53c <plug_holes+0x128>)
 801d42e:	4844      	ldr	r0, [pc, #272]	; (801d540 <plug_holes+0x12c>)
 801d430:	f005 f8b8 	bl	80225a4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 801d434:	4b43      	ldr	r3, [pc, #268]	; (801d544 <plug_holes+0x130>)
 801d436:	681b      	ldr	r3, [r3, #0]
 801d438:	687a      	ldr	r2, [r7, #4]
 801d43a:	429a      	cmp	r2, r3
 801d43c:	d306      	bcc.n	801d44c <plug_holes+0x38>
 801d43e:	4b3e      	ldr	r3, [pc, #248]	; (801d538 <plug_holes+0x124>)
 801d440:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801d444:	4940      	ldr	r1, [pc, #256]	; (801d548 <plug_holes+0x134>)
 801d446:	483e      	ldr	r0, [pc, #248]	; (801d540 <plug_holes+0x12c>)
 801d448:	f005 f8ac 	bl	80225a4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 801d44c:	687b      	ldr	r3, [r7, #4]
 801d44e:	791b      	ldrb	r3, [r3, #4]
 801d450:	2b00      	cmp	r3, #0
 801d452:	d006      	beq.n	801d462 <plug_holes+0x4e>
 801d454:	4b38      	ldr	r3, [pc, #224]	; (801d538 <plug_holes+0x124>)
 801d456:	f240 12e1 	movw	r2, #481	; 0x1e1
 801d45a:	493c      	ldr	r1, [pc, #240]	; (801d54c <plug_holes+0x138>)
 801d45c:	4838      	ldr	r0, [pc, #224]	; (801d540 <plug_holes+0x12c>)
 801d45e:	f005 f8a1 	bl	80225a4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801d462:	687b      	ldr	r3, [r7, #4]
 801d464:	881b      	ldrh	r3, [r3, #0]
 801d466:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801d46a:	d906      	bls.n	801d47a <plug_holes+0x66>
 801d46c:	4b32      	ldr	r3, [pc, #200]	; (801d538 <plug_holes+0x124>)
 801d46e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 801d472:	4937      	ldr	r1, [pc, #220]	; (801d550 <plug_holes+0x13c>)
 801d474:	4832      	ldr	r0, [pc, #200]	; (801d540 <plug_holes+0x12c>)
 801d476:	f005 f895 	bl	80225a4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 801d47a:	687b      	ldr	r3, [r7, #4]
 801d47c:	881b      	ldrh	r3, [r3, #0]
 801d47e:	4618      	mov	r0, r3
 801d480:	f7ff ffa4 	bl	801d3cc <ptr_to_mem>
 801d484:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 801d486:	687a      	ldr	r2, [r7, #4]
 801d488:	68fb      	ldr	r3, [r7, #12]
 801d48a:	429a      	cmp	r2, r3
 801d48c:	d024      	beq.n	801d4d8 <plug_holes+0xc4>
 801d48e:	68fb      	ldr	r3, [r7, #12]
 801d490:	791b      	ldrb	r3, [r3, #4]
 801d492:	2b00      	cmp	r3, #0
 801d494:	d120      	bne.n	801d4d8 <plug_holes+0xc4>
 801d496:	4b2b      	ldr	r3, [pc, #172]	; (801d544 <plug_holes+0x130>)
 801d498:	681b      	ldr	r3, [r3, #0]
 801d49a:	68fa      	ldr	r2, [r7, #12]
 801d49c:	429a      	cmp	r2, r3
 801d49e:	d01b      	beq.n	801d4d8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 801d4a0:	4b2c      	ldr	r3, [pc, #176]	; (801d554 <plug_holes+0x140>)
 801d4a2:	681b      	ldr	r3, [r3, #0]
 801d4a4:	68fa      	ldr	r2, [r7, #12]
 801d4a6:	429a      	cmp	r2, r3
 801d4a8:	d102      	bne.n	801d4b0 <plug_holes+0x9c>
      lfree = mem;
 801d4aa:	4a2a      	ldr	r2, [pc, #168]	; (801d554 <plug_holes+0x140>)
 801d4ac:	687b      	ldr	r3, [r7, #4]
 801d4ae:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 801d4b0:	68fb      	ldr	r3, [r7, #12]
 801d4b2:	881a      	ldrh	r2, [r3, #0]
 801d4b4:	687b      	ldr	r3, [r7, #4]
 801d4b6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 801d4b8:	68fb      	ldr	r3, [r7, #12]
 801d4ba:	881b      	ldrh	r3, [r3, #0]
 801d4bc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801d4c0:	d00a      	beq.n	801d4d8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 801d4c2:	68fb      	ldr	r3, [r7, #12]
 801d4c4:	881b      	ldrh	r3, [r3, #0]
 801d4c6:	4618      	mov	r0, r3
 801d4c8:	f7ff ff80 	bl	801d3cc <ptr_to_mem>
 801d4cc:	4604      	mov	r4, r0
 801d4ce:	6878      	ldr	r0, [r7, #4]
 801d4d0:	f7ff ff8e 	bl	801d3f0 <mem_to_ptr>
 801d4d4:	4603      	mov	r3, r0
 801d4d6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 801d4d8:	687b      	ldr	r3, [r7, #4]
 801d4da:	885b      	ldrh	r3, [r3, #2]
 801d4dc:	4618      	mov	r0, r3
 801d4de:	f7ff ff75 	bl	801d3cc <ptr_to_mem>
 801d4e2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 801d4e4:	68ba      	ldr	r2, [r7, #8]
 801d4e6:	687b      	ldr	r3, [r7, #4]
 801d4e8:	429a      	cmp	r2, r3
 801d4ea:	d01f      	beq.n	801d52c <plug_holes+0x118>
 801d4ec:	68bb      	ldr	r3, [r7, #8]
 801d4ee:	791b      	ldrb	r3, [r3, #4]
 801d4f0:	2b00      	cmp	r3, #0
 801d4f2:	d11b      	bne.n	801d52c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 801d4f4:	4b17      	ldr	r3, [pc, #92]	; (801d554 <plug_holes+0x140>)
 801d4f6:	681b      	ldr	r3, [r3, #0]
 801d4f8:	687a      	ldr	r2, [r7, #4]
 801d4fa:	429a      	cmp	r2, r3
 801d4fc:	d102      	bne.n	801d504 <plug_holes+0xf0>
      lfree = pmem;
 801d4fe:	4a15      	ldr	r2, [pc, #84]	; (801d554 <plug_holes+0x140>)
 801d500:	68bb      	ldr	r3, [r7, #8]
 801d502:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 801d504:	687b      	ldr	r3, [r7, #4]
 801d506:	881a      	ldrh	r2, [r3, #0]
 801d508:	68bb      	ldr	r3, [r7, #8]
 801d50a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 801d50c:	687b      	ldr	r3, [r7, #4]
 801d50e:	881b      	ldrh	r3, [r3, #0]
 801d510:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801d514:	d00a      	beq.n	801d52c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 801d516:	687b      	ldr	r3, [r7, #4]
 801d518:	881b      	ldrh	r3, [r3, #0]
 801d51a:	4618      	mov	r0, r3
 801d51c:	f7ff ff56 	bl	801d3cc <ptr_to_mem>
 801d520:	4604      	mov	r4, r0
 801d522:	68b8      	ldr	r0, [r7, #8]
 801d524:	f7ff ff64 	bl	801d3f0 <mem_to_ptr>
 801d528:	4603      	mov	r3, r0
 801d52a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 801d52c:	bf00      	nop
 801d52e:	3714      	adds	r7, #20
 801d530:	46bd      	mov	sp, r7
 801d532:	bd90      	pop	{r4, r7, pc}
 801d534:	20010dd4 	.word	0x20010dd4
 801d538:	0802721c 	.word	0x0802721c
 801d53c:	08027288 	.word	0x08027288
 801d540:	080272a0 	.word	0x080272a0
 801d544:	20010dd8 	.word	0x20010dd8
 801d548:	080272c8 	.word	0x080272c8
 801d54c:	080272e4 	.word	0x080272e4
 801d550:	08027300 	.word	0x08027300
 801d554:	20010ddc 	.word	0x20010ddc

0801d558 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 801d558:	b580      	push	{r7, lr}
 801d55a:	b082      	sub	sp, #8
 801d55c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801d55e:	4b18      	ldr	r3, [pc, #96]	; (801d5c0 <mem_init+0x68>)
 801d560:	3303      	adds	r3, #3
 801d562:	f023 0303 	bic.w	r3, r3, #3
 801d566:	461a      	mov	r2, r3
 801d568:	4b16      	ldr	r3, [pc, #88]	; (801d5c4 <mem_init+0x6c>)
 801d56a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 801d56c:	4b15      	ldr	r3, [pc, #84]	; (801d5c4 <mem_init+0x6c>)
 801d56e:	681b      	ldr	r3, [r3, #0]
 801d570:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 801d572:	687b      	ldr	r3, [r7, #4]
 801d574:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801d578:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 801d57a:	687b      	ldr	r3, [r7, #4]
 801d57c:	2200      	movs	r2, #0
 801d57e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 801d580:	687b      	ldr	r3, [r7, #4]
 801d582:	2200      	movs	r2, #0
 801d584:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 801d586:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 801d58a:	f7ff ff1f 	bl	801d3cc <ptr_to_mem>
 801d58e:	4603      	mov	r3, r0
 801d590:	4a0d      	ldr	r2, [pc, #52]	; (801d5c8 <mem_init+0x70>)
 801d592:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 801d594:	4b0c      	ldr	r3, [pc, #48]	; (801d5c8 <mem_init+0x70>)
 801d596:	681b      	ldr	r3, [r3, #0]
 801d598:	2201      	movs	r2, #1
 801d59a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 801d59c:	4b0a      	ldr	r3, [pc, #40]	; (801d5c8 <mem_init+0x70>)
 801d59e:	681b      	ldr	r3, [r3, #0]
 801d5a0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801d5a4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 801d5a6:	4b08      	ldr	r3, [pc, #32]	; (801d5c8 <mem_init+0x70>)
 801d5a8:	681b      	ldr	r3, [r3, #0]
 801d5aa:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801d5ae:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 801d5b0:	4b04      	ldr	r3, [pc, #16]	; (801d5c4 <mem_init+0x6c>)
 801d5b2:	681b      	ldr	r3, [r3, #0]
 801d5b4:	4a05      	ldr	r2, [pc, #20]	; (801d5cc <mem_init+0x74>)
 801d5b6:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 801d5b8:	bf00      	nop
 801d5ba:	3708      	adds	r7, #8
 801d5bc:	46bd      	mov	sp, r7
 801d5be:	bd80      	pop	{r7, pc}
 801d5c0:	20010780 	.word	0x20010780
 801d5c4:	20010dd4 	.word	0x20010dd4
 801d5c8:	20010dd8 	.word	0x20010dd8
 801d5cc:	20010ddc 	.word	0x20010ddc

0801d5d0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 801d5d0:	b580      	push	{r7, lr}
 801d5d2:	b086      	sub	sp, #24
 801d5d4:	af00      	add	r7, sp, #0
 801d5d6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 801d5d8:	6878      	ldr	r0, [r7, #4]
 801d5da:	f7ff ff09 	bl	801d3f0 <mem_to_ptr>
 801d5de:	4603      	mov	r3, r0
 801d5e0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 801d5e2:	687b      	ldr	r3, [r7, #4]
 801d5e4:	881b      	ldrh	r3, [r3, #0]
 801d5e6:	4618      	mov	r0, r3
 801d5e8:	f7ff fef0 	bl	801d3cc <ptr_to_mem>
 801d5ec:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 801d5ee:	687b      	ldr	r3, [r7, #4]
 801d5f0:	885b      	ldrh	r3, [r3, #2]
 801d5f2:	4618      	mov	r0, r3
 801d5f4:	f7ff feea 	bl	801d3cc <ptr_to_mem>
 801d5f8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801d5fa:	687b      	ldr	r3, [r7, #4]
 801d5fc:	881b      	ldrh	r3, [r3, #0]
 801d5fe:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801d602:	d818      	bhi.n	801d636 <mem_link_valid+0x66>
 801d604:	687b      	ldr	r3, [r7, #4]
 801d606:	885b      	ldrh	r3, [r3, #2]
 801d608:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801d60c:	d813      	bhi.n	801d636 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801d60e:	687b      	ldr	r3, [r7, #4]
 801d610:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801d612:	8afa      	ldrh	r2, [r7, #22]
 801d614:	429a      	cmp	r2, r3
 801d616:	d004      	beq.n	801d622 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801d618:	68fb      	ldr	r3, [r7, #12]
 801d61a:	881b      	ldrh	r3, [r3, #0]
 801d61c:	8afa      	ldrh	r2, [r7, #22]
 801d61e:	429a      	cmp	r2, r3
 801d620:	d109      	bne.n	801d636 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801d622:	4b08      	ldr	r3, [pc, #32]	; (801d644 <mem_link_valid+0x74>)
 801d624:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801d626:	693a      	ldr	r2, [r7, #16]
 801d628:	429a      	cmp	r2, r3
 801d62a:	d006      	beq.n	801d63a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801d62c:	693b      	ldr	r3, [r7, #16]
 801d62e:	885b      	ldrh	r3, [r3, #2]
 801d630:	8afa      	ldrh	r2, [r7, #22]
 801d632:	429a      	cmp	r2, r3
 801d634:	d001      	beq.n	801d63a <mem_link_valid+0x6a>
    return 0;
 801d636:	2300      	movs	r3, #0
 801d638:	e000      	b.n	801d63c <mem_link_valid+0x6c>
  }
  return 1;
 801d63a:	2301      	movs	r3, #1
}
 801d63c:	4618      	mov	r0, r3
 801d63e:	3718      	adds	r7, #24
 801d640:	46bd      	mov	sp, r7
 801d642:	bd80      	pop	{r7, pc}
 801d644:	20010dd8 	.word	0x20010dd8

0801d648 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 801d648:	b580      	push	{r7, lr}
 801d64a:	b084      	sub	sp, #16
 801d64c:	af00      	add	r7, sp, #0
 801d64e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 801d650:	687b      	ldr	r3, [r7, #4]
 801d652:	2b00      	cmp	r3, #0
 801d654:	d04c      	beq.n	801d6f0 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801d656:	687b      	ldr	r3, [r7, #4]
 801d658:	f003 0303 	and.w	r3, r3, #3
 801d65c:	2b00      	cmp	r3, #0
 801d65e:	d007      	beq.n	801d670 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 801d660:	4b25      	ldr	r3, [pc, #148]	; (801d6f8 <mem_free+0xb0>)
 801d662:	f240 2273 	movw	r2, #627	; 0x273
 801d666:	4925      	ldr	r1, [pc, #148]	; (801d6fc <mem_free+0xb4>)
 801d668:	4825      	ldr	r0, [pc, #148]	; (801d700 <mem_free+0xb8>)
 801d66a:	f004 ff9b 	bl	80225a4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 801d66e:	e040      	b.n	801d6f2 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801d670:	687b      	ldr	r3, [r7, #4]
 801d672:	3b08      	subs	r3, #8
 801d674:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801d676:	4b23      	ldr	r3, [pc, #140]	; (801d704 <mem_free+0xbc>)
 801d678:	681b      	ldr	r3, [r3, #0]
 801d67a:	68fa      	ldr	r2, [r7, #12]
 801d67c:	429a      	cmp	r2, r3
 801d67e:	d306      	bcc.n	801d68e <mem_free+0x46>
 801d680:	687b      	ldr	r3, [r7, #4]
 801d682:	f103 020c 	add.w	r2, r3, #12
 801d686:	4b20      	ldr	r3, [pc, #128]	; (801d708 <mem_free+0xc0>)
 801d688:	681b      	ldr	r3, [r3, #0]
 801d68a:	429a      	cmp	r2, r3
 801d68c:	d907      	bls.n	801d69e <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801d68e:	4b1a      	ldr	r3, [pc, #104]	; (801d6f8 <mem_free+0xb0>)
 801d690:	f240 227f 	movw	r2, #639	; 0x27f
 801d694:	491d      	ldr	r1, [pc, #116]	; (801d70c <mem_free+0xc4>)
 801d696:	481a      	ldr	r0, [pc, #104]	; (801d700 <mem_free+0xb8>)
 801d698:	f004 ff84 	bl	80225a4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 801d69c:	e029      	b.n	801d6f2 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 801d69e:	68fb      	ldr	r3, [r7, #12]
 801d6a0:	791b      	ldrb	r3, [r3, #4]
 801d6a2:	2b00      	cmp	r3, #0
 801d6a4:	d107      	bne.n	801d6b6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 801d6a6:	4b14      	ldr	r3, [pc, #80]	; (801d6f8 <mem_free+0xb0>)
 801d6a8:	f44f 7223 	mov.w	r2, #652	; 0x28c
 801d6ac:	4918      	ldr	r1, [pc, #96]	; (801d710 <mem_free+0xc8>)
 801d6ae:	4814      	ldr	r0, [pc, #80]	; (801d700 <mem_free+0xb8>)
 801d6b0:	f004 ff78 	bl	80225a4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 801d6b4:	e01d      	b.n	801d6f2 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 801d6b6:	68f8      	ldr	r0, [r7, #12]
 801d6b8:	f7ff ff8a 	bl	801d5d0 <mem_link_valid>
 801d6bc:	4603      	mov	r3, r0
 801d6be:	2b00      	cmp	r3, #0
 801d6c0:	d107      	bne.n	801d6d2 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 801d6c2:	4b0d      	ldr	r3, [pc, #52]	; (801d6f8 <mem_free+0xb0>)
 801d6c4:	f240 2295 	movw	r2, #661	; 0x295
 801d6c8:	4912      	ldr	r1, [pc, #72]	; (801d714 <mem_free+0xcc>)
 801d6ca:	480d      	ldr	r0, [pc, #52]	; (801d700 <mem_free+0xb8>)
 801d6cc:	f004 ff6a 	bl	80225a4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 801d6d0:	e00f      	b.n	801d6f2 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 801d6d2:	68fb      	ldr	r3, [r7, #12]
 801d6d4:	2200      	movs	r2, #0
 801d6d6:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 801d6d8:	4b0f      	ldr	r3, [pc, #60]	; (801d718 <mem_free+0xd0>)
 801d6da:	681b      	ldr	r3, [r3, #0]
 801d6dc:	68fa      	ldr	r2, [r7, #12]
 801d6de:	429a      	cmp	r2, r3
 801d6e0:	d202      	bcs.n	801d6e8 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 801d6e2:	4a0d      	ldr	r2, [pc, #52]	; (801d718 <mem_free+0xd0>)
 801d6e4:	68fb      	ldr	r3, [r7, #12]
 801d6e6:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 801d6e8:	68f8      	ldr	r0, [r7, #12]
 801d6ea:	f7ff fe93 	bl	801d414 <plug_holes>
 801d6ee:	e000      	b.n	801d6f2 <mem_free+0xaa>
    return;
 801d6f0:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 801d6f2:	3710      	adds	r7, #16
 801d6f4:	46bd      	mov	sp, r7
 801d6f6:	bd80      	pop	{r7, pc}
 801d6f8:	0802721c 	.word	0x0802721c
 801d6fc:	0802732c 	.word	0x0802732c
 801d700:	080272a0 	.word	0x080272a0
 801d704:	20010dd4 	.word	0x20010dd4
 801d708:	20010dd8 	.word	0x20010dd8
 801d70c:	08027350 	.word	0x08027350
 801d710:	0802736c 	.word	0x0802736c
 801d714:	08027394 	.word	0x08027394
 801d718:	20010ddc 	.word	0x20010ddc

0801d71c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 801d71c:	b580      	push	{r7, lr}
 801d71e:	b088      	sub	sp, #32
 801d720:	af00      	add	r7, sp, #0
 801d722:	6078      	str	r0, [r7, #4]
 801d724:	460b      	mov	r3, r1
 801d726:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 801d728:	887b      	ldrh	r3, [r7, #2]
 801d72a:	3303      	adds	r3, #3
 801d72c:	b29b      	uxth	r3, r3
 801d72e:	f023 0303 	bic.w	r3, r3, #3
 801d732:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 801d734:	8bfb      	ldrh	r3, [r7, #30]
 801d736:	2b0b      	cmp	r3, #11
 801d738:	d801      	bhi.n	801d73e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 801d73a:	230c      	movs	r3, #12
 801d73c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 801d73e:	8bfb      	ldrh	r3, [r7, #30]
 801d740:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801d744:	d803      	bhi.n	801d74e <mem_trim+0x32>
 801d746:	8bfa      	ldrh	r2, [r7, #30]
 801d748:	887b      	ldrh	r3, [r7, #2]
 801d74a:	429a      	cmp	r2, r3
 801d74c:	d201      	bcs.n	801d752 <mem_trim+0x36>
    return NULL;
 801d74e:	2300      	movs	r3, #0
 801d750:	e0cc      	b.n	801d8ec <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 801d752:	4b68      	ldr	r3, [pc, #416]	; (801d8f4 <mem_trim+0x1d8>)
 801d754:	681b      	ldr	r3, [r3, #0]
 801d756:	687a      	ldr	r2, [r7, #4]
 801d758:	429a      	cmp	r2, r3
 801d75a:	d304      	bcc.n	801d766 <mem_trim+0x4a>
 801d75c:	4b66      	ldr	r3, [pc, #408]	; (801d8f8 <mem_trim+0x1dc>)
 801d75e:	681b      	ldr	r3, [r3, #0]
 801d760:	687a      	ldr	r2, [r7, #4]
 801d762:	429a      	cmp	r2, r3
 801d764:	d306      	bcc.n	801d774 <mem_trim+0x58>
 801d766:	4b65      	ldr	r3, [pc, #404]	; (801d8fc <mem_trim+0x1e0>)
 801d768:	f240 22d1 	movw	r2, #721	; 0x2d1
 801d76c:	4964      	ldr	r1, [pc, #400]	; (801d900 <mem_trim+0x1e4>)
 801d76e:	4865      	ldr	r0, [pc, #404]	; (801d904 <mem_trim+0x1e8>)
 801d770:	f004 ff18 	bl	80225a4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 801d774:	4b5f      	ldr	r3, [pc, #380]	; (801d8f4 <mem_trim+0x1d8>)
 801d776:	681b      	ldr	r3, [r3, #0]
 801d778:	687a      	ldr	r2, [r7, #4]
 801d77a:	429a      	cmp	r2, r3
 801d77c:	d304      	bcc.n	801d788 <mem_trim+0x6c>
 801d77e:	4b5e      	ldr	r3, [pc, #376]	; (801d8f8 <mem_trim+0x1dc>)
 801d780:	681b      	ldr	r3, [r3, #0]
 801d782:	687a      	ldr	r2, [r7, #4]
 801d784:	429a      	cmp	r2, r3
 801d786:	d301      	bcc.n	801d78c <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 801d788:	687b      	ldr	r3, [r7, #4]
 801d78a:	e0af      	b.n	801d8ec <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801d78c:	687b      	ldr	r3, [r7, #4]
 801d78e:	3b08      	subs	r3, #8
 801d790:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 801d792:	69b8      	ldr	r0, [r7, #24]
 801d794:	f7ff fe2c 	bl	801d3f0 <mem_to_ptr>
 801d798:	4603      	mov	r3, r0
 801d79a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 801d79c:	69bb      	ldr	r3, [r7, #24]
 801d79e:	881a      	ldrh	r2, [r3, #0]
 801d7a0:	8afb      	ldrh	r3, [r7, #22]
 801d7a2:	1ad3      	subs	r3, r2, r3
 801d7a4:	b29b      	uxth	r3, r3
 801d7a6:	3b08      	subs	r3, #8
 801d7a8:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801d7aa:	8bfa      	ldrh	r2, [r7, #30]
 801d7ac:	8abb      	ldrh	r3, [r7, #20]
 801d7ae:	429a      	cmp	r2, r3
 801d7b0:	d906      	bls.n	801d7c0 <mem_trim+0xa4>
 801d7b2:	4b52      	ldr	r3, [pc, #328]	; (801d8fc <mem_trim+0x1e0>)
 801d7b4:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 801d7b8:	4953      	ldr	r1, [pc, #332]	; (801d908 <mem_trim+0x1ec>)
 801d7ba:	4852      	ldr	r0, [pc, #328]	; (801d904 <mem_trim+0x1e8>)
 801d7bc:	f004 fef2 	bl	80225a4 <iprintf>
  if (newsize > size) {
 801d7c0:	8bfa      	ldrh	r2, [r7, #30]
 801d7c2:	8abb      	ldrh	r3, [r7, #20]
 801d7c4:	429a      	cmp	r2, r3
 801d7c6:	d901      	bls.n	801d7cc <mem_trim+0xb0>
    /* not supported */
    return NULL;
 801d7c8:	2300      	movs	r3, #0
 801d7ca:	e08f      	b.n	801d8ec <mem_trim+0x1d0>
  }
  if (newsize == size) {
 801d7cc:	8bfa      	ldrh	r2, [r7, #30]
 801d7ce:	8abb      	ldrh	r3, [r7, #20]
 801d7d0:	429a      	cmp	r2, r3
 801d7d2:	d101      	bne.n	801d7d8 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 801d7d4:	687b      	ldr	r3, [r7, #4]
 801d7d6:	e089      	b.n	801d8ec <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 801d7d8:	69bb      	ldr	r3, [r7, #24]
 801d7da:	881b      	ldrh	r3, [r3, #0]
 801d7dc:	4618      	mov	r0, r3
 801d7de:	f7ff fdf5 	bl	801d3cc <ptr_to_mem>
 801d7e2:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 801d7e4:	693b      	ldr	r3, [r7, #16]
 801d7e6:	791b      	ldrb	r3, [r3, #4]
 801d7e8:	2b00      	cmp	r3, #0
 801d7ea:	d13f      	bne.n	801d86c <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801d7ec:	69bb      	ldr	r3, [r7, #24]
 801d7ee:	881b      	ldrh	r3, [r3, #0]
 801d7f0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801d7f4:	d106      	bne.n	801d804 <mem_trim+0xe8>
 801d7f6:	4b41      	ldr	r3, [pc, #260]	; (801d8fc <mem_trim+0x1e0>)
 801d7f8:	f240 22f5 	movw	r2, #757	; 0x2f5
 801d7fc:	4943      	ldr	r1, [pc, #268]	; (801d90c <mem_trim+0x1f0>)
 801d7fe:	4841      	ldr	r0, [pc, #260]	; (801d904 <mem_trim+0x1e8>)
 801d800:	f004 fed0 	bl	80225a4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 801d804:	693b      	ldr	r3, [r7, #16]
 801d806:	881b      	ldrh	r3, [r3, #0]
 801d808:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801d80a:	8afa      	ldrh	r2, [r7, #22]
 801d80c:	8bfb      	ldrh	r3, [r7, #30]
 801d80e:	4413      	add	r3, r2
 801d810:	b29b      	uxth	r3, r3
 801d812:	3308      	adds	r3, #8
 801d814:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 801d816:	4b3e      	ldr	r3, [pc, #248]	; (801d910 <mem_trim+0x1f4>)
 801d818:	681b      	ldr	r3, [r3, #0]
 801d81a:	693a      	ldr	r2, [r7, #16]
 801d81c:	429a      	cmp	r2, r3
 801d81e:	d106      	bne.n	801d82e <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 801d820:	89fb      	ldrh	r3, [r7, #14]
 801d822:	4618      	mov	r0, r3
 801d824:	f7ff fdd2 	bl	801d3cc <ptr_to_mem>
 801d828:	4603      	mov	r3, r0
 801d82a:	4a39      	ldr	r2, [pc, #228]	; (801d910 <mem_trim+0x1f4>)
 801d82c:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 801d82e:	89fb      	ldrh	r3, [r7, #14]
 801d830:	4618      	mov	r0, r3
 801d832:	f7ff fdcb 	bl	801d3cc <ptr_to_mem>
 801d836:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 801d838:	693b      	ldr	r3, [r7, #16]
 801d83a:	2200      	movs	r2, #0
 801d83c:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 801d83e:	693b      	ldr	r3, [r7, #16]
 801d840:	89ba      	ldrh	r2, [r7, #12]
 801d842:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 801d844:	693b      	ldr	r3, [r7, #16]
 801d846:	8afa      	ldrh	r2, [r7, #22]
 801d848:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 801d84a:	69bb      	ldr	r3, [r7, #24]
 801d84c:	89fa      	ldrh	r2, [r7, #14]
 801d84e:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801d850:	693b      	ldr	r3, [r7, #16]
 801d852:	881b      	ldrh	r3, [r3, #0]
 801d854:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801d858:	d047      	beq.n	801d8ea <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801d85a:	693b      	ldr	r3, [r7, #16]
 801d85c:	881b      	ldrh	r3, [r3, #0]
 801d85e:	4618      	mov	r0, r3
 801d860:	f7ff fdb4 	bl	801d3cc <ptr_to_mem>
 801d864:	4602      	mov	r2, r0
 801d866:	89fb      	ldrh	r3, [r7, #14]
 801d868:	8053      	strh	r3, [r2, #2]
 801d86a:	e03e      	b.n	801d8ea <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 801d86c:	8bfb      	ldrh	r3, [r7, #30]
 801d86e:	f103 0214 	add.w	r2, r3, #20
 801d872:	8abb      	ldrh	r3, [r7, #20]
 801d874:	429a      	cmp	r2, r3
 801d876:	d838      	bhi.n	801d8ea <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801d878:	8afa      	ldrh	r2, [r7, #22]
 801d87a:	8bfb      	ldrh	r3, [r7, #30]
 801d87c:	4413      	add	r3, r2
 801d87e:	b29b      	uxth	r3, r3
 801d880:	3308      	adds	r3, #8
 801d882:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801d884:	69bb      	ldr	r3, [r7, #24]
 801d886:	881b      	ldrh	r3, [r3, #0]
 801d888:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801d88c:	d106      	bne.n	801d89c <mem_trim+0x180>
 801d88e:	4b1b      	ldr	r3, [pc, #108]	; (801d8fc <mem_trim+0x1e0>)
 801d890:	f240 3216 	movw	r2, #790	; 0x316
 801d894:	491d      	ldr	r1, [pc, #116]	; (801d90c <mem_trim+0x1f0>)
 801d896:	481b      	ldr	r0, [pc, #108]	; (801d904 <mem_trim+0x1e8>)
 801d898:	f004 fe84 	bl	80225a4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 801d89c:	89fb      	ldrh	r3, [r7, #14]
 801d89e:	4618      	mov	r0, r3
 801d8a0:	f7ff fd94 	bl	801d3cc <ptr_to_mem>
 801d8a4:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 801d8a6:	4b1a      	ldr	r3, [pc, #104]	; (801d910 <mem_trim+0x1f4>)
 801d8a8:	681b      	ldr	r3, [r3, #0]
 801d8aa:	693a      	ldr	r2, [r7, #16]
 801d8ac:	429a      	cmp	r2, r3
 801d8ae:	d202      	bcs.n	801d8b6 <mem_trim+0x19a>
      lfree = mem2;
 801d8b0:	4a17      	ldr	r2, [pc, #92]	; (801d910 <mem_trim+0x1f4>)
 801d8b2:	693b      	ldr	r3, [r7, #16]
 801d8b4:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 801d8b6:	693b      	ldr	r3, [r7, #16]
 801d8b8:	2200      	movs	r2, #0
 801d8ba:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 801d8bc:	69bb      	ldr	r3, [r7, #24]
 801d8be:	881a      	ldrh	r2, [r3, #0]
 801d8c0:	693b      	ldr	r3, [r7, #16]
 801d8c2:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 801d8c4:	693b      	ldr	r3, [r7, #16]
 801d8c6:	8afa      	ldrh	r2, [r7, #22]
 801d8c8:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 801d8ca:	69bb      	ldr	r3, [r7, #24]
 801d8cc:	89fa      	ldrh	r2, [r7, #14]
 801d8ce:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801d8d0:	693b      	ldr	r3, [r7, #16]
 801d8d2:	881b      	ldrh	r3, [r3, #0]
 801d8d4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801d8d8:	d007      	beq.n	801d8ea <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801d8da:	693b      	ldr	r3, [r7, #16]
 801d8dc:	881b      	ldrh	r3, [r3, #0]
 801d8de:	4618      	mov	r0, r3
 801d8e0:	f7ff fd74 	bl	801d3cc <ptr_to_mem>
 801d8e4:	4602      	mov	r2, r0
 801d8e6:	89fb      	ldrh	r3, [r7, #14]
 801d8e8:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 801d8ea:	687b      	ldr	r3, [r7, #4]
}
 801d8ec:	4618      	mov	r0, r3
 801d8ee:	3720      	adds	r7, #32
 801d8f0:	46bd      	mov	sp, r7
 801d8f2:	bd80      	pop	{r7, pc}
 801d8f4:	20010dd4 	.word	0x20010dd4
 801d8f8:	20010dd8 	.word	0x20010dd8
 801d8fc:	0802721c 	.word	0x0802721c
 801d900:	080273c8 	.word	0x080273c8
 801d904:	080272a0 	.word	0x080272a0
 801d908:	080273e0 	.word	0x080273e0
 801d90c:	08027400 	.word	0x08027400
 801d910:	20010ddc 	.word	0x20010ddc

0801d914 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 801d914:	b580      	push	{r7, lr}
 801d916:	b088      	sub	sp, #32
 801d918:	af00      	add	r7, sp, #0
 801d91a:	4603      	mov	r3, r0
 801d91c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 801d91e:	88fb      	ldrh	r3, [r7, #6]
 801d920:	2b00      	cmp	r3, #0
 801d922:	d101      	bne.n	801d928 <mem_malloc+0x14>
    return NULL;
 801d924:	2300      	movs	r3, #0
 801d926:	e0d9      	b.n	801dadc <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 801d928:	88fb      	ldrh	r3, [r7, #6]
 801d92a:	3303      	adds	r3, #3
 801d92c:	b29b      	uxth	r3, r3
 801d92e:	f023 0303 	bic.w	r3, r3, #3
 801d932:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 801d934:	8bbb      	ldrh	r3, [r7, #28]
 801d936:	2b0b      	cmp	r3, #11
 801d938:	d801      	bhi.n	801d93e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 801d93a:	230c      	movs	r3, #12
 801d93c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801d93e:	8bbb      	ldrh	r3, [r7, #28]
 801d940:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801d944:	d803      	bhi.n	801d94e <mem_malloc+0x3a>
 801d946:	8bba      	ldrh	r2, [r7, #28]
 801d948:	88fb      	ldrh	r3, [r7, #6]
 801d94a:	429a      	cmp	r2, r3
 801d94c:	d201      	bcs.n	801d952 <mem_malloc+0x3e>
    return NULL;
 801d94e:	2300      	movs	r3, #0
 801d950:	e0c4      	b.n	801dadc <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801d952:	4b64      	ldr	r3, [pc, #400]	; (801dae4 <mem_malloc+0x1d0>)
 801d954:	681b      	ldr	r3, [r3, #0]
 801d956:	4618      	mov	r0, r3
 801d958:	f7ff fd4a 	bl	801d3f0 <mem_to_ptr>
 801d95c:	4603      	mov	r3, r0
 801d95e:	83fb      	strh	r3, [r7, #30]
 801d960:	e0b4      	b.n	801dacc <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 801d962:	8bfb      	ldrh	r3, [r7, #30]
 801d964:	4618      	mov	r0, r3
 801d966:	f7ff fd31 	bl	801d3cc <ptr_to_mem>
 801d96a:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 801d96c:	697b      	ldr	r3, [r7, #20]
 801d96e:	791b      	ldrb	r3, [r3, #4]
 801d970:	2b00      	cmp	r3, #0
 801d972:	f040 80a4 	bne.w	801dabe <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801d976:	697b      	ldr	r3, [r7, #20]
 801d978:	881b      	ldrh	r3, [r3, #0]
 801d97a:	461a      	mov	r2, r3
 801d97c:	8bfb      	ldrh	r3, [r7, #30]
 801d97e:	1ad3      	subs	r3, r2, r3
 801d980:	f1a3 0208 	sub.w	r2, r3, #8
 801d984:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 801d986:	429a      	cmp	r2, r3
 801d988:	f0c0 8099 	bcc.w	801dabe <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 801d98c:	697b      	ldr	r3, [r7, #20]
 801d98e:	881b      	ldrh	r3, [r3, #0]
 801d990:	461a      	mov	r2, r3
 801d992:	8bfb      	ldrh	r3, [r7, #30]
 801d994:	1ad3      	subs	r3, r2, r3
 801d996:	f1a3 0208 	sub.w	r2, r3, #8
 801d99a:	8bbb      	ldrh	r3, [r7, #28]
 801d99c:	3314      	adds	r3, #20
 801d99e:	429a      	cmp	r2, r3
 801d9a0:	d333      	bcc.n	801da0a <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 801d9a2:	8bfa      	ldrh	r2, [r7, #30]
 801d9a4:	8bbb      	ldrh	r3, [r7, #28]
 801d9a6:	4413      	add	r3, r2
 801d9a8:	b29b      	uxth	r3, r3
 801d9aa:	3308      	adds	r3, #8
 801d9ac:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 801d9ae:	8a7b      	ldrh	r3, [r7, #18]
 801d9b0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801d9b4:	d106      	bne.n	801d9c4 <mem_malloc+0xb0>
 801d9b6:	4b4c      	ldr	r3, [pc, #304]	; (801dae8 <mem_malloc+0x1d4>)
 801d9b8:	f240 3287 	movw	r2, #903	; 0x387
 801d9bc:	494b      	ldr	r1, [pc, #300]	; (801daec <mem_malloc+0x1d8>)
 801d9be:	484c      	ldr	r0, [pc, #304]	; (801daf0 <mem_malloc+0x1dc>)
 801d9c0:	f004 fdf0 	bl	80225a4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 801d9c4:	8a7b      	ldrh	r3, [r7, #18]
 801d9c6:	4618      	mov	r0, r3
 801d9c8:	f7ff fd00 	bl	801d3cc <ptr_to_mem>
 801d9cc:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 801d9ce:	68fb      	ldr	r3, [r7, #12]
 801d9d0:	2200      	movs	r2, #0
 801d9d2:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 801d9d4:	697b      	ldr	r3, [r7, #20]
 801d9d6:	881a      	ldrh	r2, [r3, #0]
 801d9d8:	68fb      	ldr	r3, [r7, #12]
 801d9da:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 801d9dc:	68fb      	ldr	r3, [r7, #12]
 801d9de:	8bfa      	ldrh	r2, [r7, #30]
 801d9e0:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 801d9e2:	697b      	ldr	r3, [r7, #20]
 801d9e4:	8a7a      	ldrh	r2, [r7, #18]
 801d9e6:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 801d9e8:	697b      	ldr	r3, [r7, #20]
 801d9ea:	2201      	movs	r2, #1
 801d9ec:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 801d9ee:	68fb      	ldr	r3, [r7, #12]
 801d9f0:	881b      	ldrh	r3, [r3, #0]
 801d9f2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801d9f6:	d00b      	beq.n	801da10 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 801d9f8:	68fb      	ldr	r3, [r7, #12]
 801d9fa:	881b      	ldrh	r3, [r3, #0]
 801d9fc:	4618      	mov	r0, r3
 801d9fe:	f7ff fce5 	bl	801d3cc <ptr_to_mem>
 801da02:	4602      	mov	r2, r0
 801da04:	8a7b      	ldrh	r3, [r7, #18]
 801da06:	8053      	strh	r3, [r2, #2]
 801da08:	e002      	b.n	801da10 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 801da0a:	697b      	ldr	r3, [r7, #20]
 801da0c:	2201      	movs	r2, #1
 801da0e:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 801da10:	4b34      	ldr	r3, [pc, #208]	; (801dae4 <mem_malloc+0x1d0>)
 801da12:	681b      	ldr	r3, [r3, #0]
 801da14:	697a      	ldr	r2, [r7, #20]
 801da16:	429a      	cmp	r2, r3
 801da18:	d127      	bne.n	801da6a <mem_malloc+0x156>
          struct mem *cur = lfree;
 801da1a:	4b32      	ldr	r3, [pc, #200]	; (801dae4 <mem_malloc+0x1d0>)
 801da1c:	681b      	ldr	r3, [r3, #0]
 801da1e:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 801da20:	e005      	b.n	801da2e <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 801da22:	69bb      	ldr	r3, [r7, #24]
 801da24:	881b      	ldrh	r3, [r3, #0]
 801da26:	4618      	mov	r0, r3
 801da28:	f7ff fcd0 	bl	801d3cc <ptr_to_mem>
 801da2c:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 801da2e:	69bb      	ldr	r3, [r7, #24]
 801da30:	791b      	ldrb	r3, [r3, #4]
 801da32:	2b00      	cmp	r3, #0
 801da34:	d004      	beq.n	801da40 <mem_malloc+0x12c>
 801da36:	4b2f      	ldr	r3, [pc, #188]	; (801daf4 <mem_malloc+0x1e0>)
 801da38:	681b      	ldr	r3, [r3, #0]
 801da3a:	69ba      	ldr	r2, [r7, #24]
 801da3c:	429a      	cmp	r2, r3
 801da3e:	d1f0      	bne.n	801da22 <mem_malloc+0x10e>
          }
          lfree = cur;
 801da40:	4a28      	ldr	r2, [pc, #160]	; (801dae4 <mem_malloc+0x1d0>)
 801da42:	69bb      	ldr	r3, [r7, #24]
 801da44:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 801da46:	4b27      	ldr	r3, [pc, #156]	; (801dae4 <mem_malloc+0x1d0>)
 801da48:	681a      	ldr	r2, [r3, #0]
 801da4a:	4b2a      	ldr	r3, [pc, #168]	; (801daf4 <mem_malloc+0x1e0>)
 801da4c:	681b      	ldr	r3, [r3, #0]
 801da4e:	429a      	cmp	r2, r3
 801da50:	d00b      	beq.n	801da6a <mem_malloc+0x156>
 801da52:	4b24      	ldr	r3, [pc, #144]	; (801dae4 <mem_malloc+0x1d0>)
 801da54:	681b      	ldr	r3, [r3, #0]
 801da56:	791b      	ldrb	r3, [r3, #4]
 801da58:	2b00      	cmp	r3, #0
 801da5a:	d006      	beq.n	801da6a <mem_malloc+0x156>
 801da5c:	4b22      	ldr	r3, [pc, #136]	; (801dae8 <mem_malloc+0x1d4>)
 801da5e:	f240 32b5 	movw	r2, #949	; 0x3b5
 801da62:	4925      	ldr	r1, [pc, #148]	; (801daf8 <mem_malloc+0x1e4>)
 801da64:	4822      	ldr	r0, [pc, #136]	; (801daf0 <mem_malloc+0x1dc>)
 801da66:	f004 fd9d 	bl	80225a4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801da6a:	8bba      	ldrh	r2, [r7, #28]
 801da6c:	697b      	ldr	r3, [r7, #20]
 801da6e:	4413      	add	r3, r2
 801da70:	3308      	adds	r3, #8
 801da72:	4a20      	ldr	r2, [pc, #128]	; (801daf4 <mem_malloc+0x1e0>)
 801da74:	6812      	ldr	r2, [r2, #0]
 801da76:	4293      	cmp	r3, r2
 801da78:	d906      	bls.n	801da88 <mem_malloc+0x174>
 801da7a:	4b1b      	ldr	r3, [pc, #108]	; (801dae8 <mem_malloc+0x1d4>)
 801da7c:	f240 32b9 	movw	r2, #953	; 0x3b9
 801da80:	491e      	ldr	r1, [pc, #120]	; (801dafc <mem_malloc+0x1e8>)
 801da82:	481b      	ldr	r0, [pc, #108]	; (801daf0 <mem_malloc+0x1dc>)
 801da84:	f004 fd8e 	bl	80225a4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 801da88:	697b      	ldr	r3, [r7, #20]
 801da8a:	f003 0303 	and.w	r3, r3, #3
 801da8e:	2b00      	cmp	r3, #0
 801da90:	d006      	beq.n	801daa0 <mem_malloc+0x18c>
 801da92:	4b15      	ldr	r3, [pc, #84]	; (801dae8 <mem_malloc+0x1d4>)
 801da94:	f240 32bb 	movw	r2, #955	; 0x3bb
 801da98:	4919      	ldr	r1, [pc, #100]	; (801db00 <mem_malloc+0x1ec>)
 801da9a:	4815      	ldr	r0, [pc, #84]	; (801daf0 <mem_malloc+0x1dc>)
 801da9c:	f004 fd82 	bl	80225a4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 801daa0:	697b      	ldr	r3, [r7, #20]
 801daa2:	f003 0303 	and.w	r3, r3, #3
 801daa6:	2b00      	cmp	r3, #0
 801daa8:	d006      	beq.n	801dab8 <mem_malloc+0x1a4>
 801daaa:	4b0f      	ldr	r3, [pc, #60]	; (801dae8 <mem_malloc+0x1d4>)
 801daac:	f240 32bd 	movw	r2, #957	; 0x3bd
 801dab0:	4914      	ldr	r1, [pc, #80]	; (801db04 <mem_malloc+0x1f0>)
 801dab2:	480f      	ldr	r0, [pc, #60]	; (801daf0 <mem_malloc+0x1dc>)
 801dab4:	f004 fd76 	bl	80225a4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 801dab8:	697b      	ldr	r3, [r7, #20]
 801daba:	3308      	adds	r3, #8
 801dabc:	e00e      	b.n	801dadc <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 801dabe:	8bfb      	ldrh	r3, [r7, #30]
 801dac0:	4618      	mov	r0, r3
 801dac2:	f7ff fc83 	bl	801d3cc <ptr_to_mem>
 801dac6:	4603      	mov	r3, r0
 801dac8:	881b      	ldrh	r3, [r3, #0]
 801daca:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801dacc:	8bfa      	ldrh	r2, [r7, #30]
 801dace:	8bbb      	ldrh	r3, [r7, #28]
 801dad0:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 801dad4:	429a      	cmp	r2, r3
 801dad6:	f4ff af44 	bcc.w	801d962 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 801dada:	2300      	movs	r3, #0
}
 801dadc:	4618      	mov	r0, r3
 801dade:	3720      	adds	r7, #32
 801dae0:	46bd      	mov	sp, r7
 801dae2:	bd80      	pop	{r7, pc}
 801dae4:	20010ddc 	.word	0x20010ddc
 801dae8:	0802721c 	.word	0x0802721c
 801daec:	08027400 	.word	0x08027400
 801daf0:	080272a0 	.word	0x080272a0
 801daf4:	20010dd8 	.word	0x20010dd8
 801daf8:	08027414 	.word	0x08027414
 801dafc:	08027430 	.word	0x08027430
 801db00:	08027460 	.word	0x08027460
 801db04:	08027490 	.word	0x08027490

0801db08 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 801db08:	b480      	push	{r7}
 801db0a:	b085      	sub	sp, #20
 801db0c:	af00      	add	r7, sp, #0
 801db0e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 801db10:	687b      	ldr	r3, [r7, #4]
 801db12:	689b      	ldr	r3, [r3, #8]
 801db14:	2200      	movs	r2, #0
 801db16:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 801db18:	687b      	ldr	r3, [r7, #4]
 801db1a:	685b      	ldr	r3, [r3, #4]
 801db1c:	3303      	adds	r3, #3
 801db1e:	f023 0303 	bic.w	r3, r3, #3
 801db22:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 801db24:	2300      	movs	r3, #0
 801db26:	60fb      	str	r3, [r7, #12]
 801db28:	e011      	b.n	801db4e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801db2a:	687b      	ldr	r3, [r7, #4]
 801db2c:	689b      	ldr	r3, [r3, #8]
 801db2e:	681a      	ldr	r2, [r3, #0]
 801db30:	68bb      	ldr	r3, [r7, #8]
 801db32:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 801db34:	687b      	ldr	r3, [r7, #4]
 801db36:	689b      	ldr	r3, [r3, #8]
 801db38:	68ba      	ldr	r2, [r7, #8]
 801db3a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801db3c:	687b      	ldr	r3, [r7, #4]
 801db3e:	881b      	ldrh	r3, [r3, #0]
 801db40:	461a      	mov	r2, r3
 801db42:	68bb      	ldr	r3, [r7, #8]
 801db44:	4413      	add	r3, r2
 801db46:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 801db48:	68fb      	ldr	r3, [r7, #12]
 801db4a:	3301      	adds	r3, #1
 801db4c:	60fb      	str	r3, [r7, #12]
 801db4e:	687b      	ldr	r3, [r7, #4]
 801db50:	885b      	ldrh	r3, [r3, #2]
 801db52:	461a      	mov	r2, r3
 801db54:	68fb      	ldr	r3, [r7, #12]
 801db56:	4293      	cmp	r3, r2
 801db58:	dbe7      	blt.n	801db2a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 801db5a:	bf00      	nop
 801db5c:	bf00      	nop
 801db5e:	3714      	adds	r7, #20
 801db60:	46bd      	mov	sp, r7
 801db62:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db66:	4770      	bx	lr

0801db68 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 801db68:	b580      	push	{r7, lr}
 801db6a:	b082      	sub	sp, #8
 801db6c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801db6e:	2300      	movs	r3, #0
 801db70:	80fb      	strh	r3, [r7, #6]
 801db72:	e009      	b.n	801db88 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 801db74:	88fb      	ldrh	r3, [r7, #6]
 801db76:	4a08      	ldr	r2, [pc, #32]	; (801db98 <memp_init+0x30>)
 801db78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801db7c:	4618      	mov	r0, r3
 801db7e:	f7ff ffc3 	bl	801db08 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801db82:	88fb      	ldrh	r3, [r7, #6]
 801db84:	3301      	adds	r3, #1
 801db86:	80fb      	strh	r3, [r7, #6]
 801db88:	88fb      	ldrh	r3, [r7, #6]
 801db8a:	2b05      	cmp	r3, #5
 801db8c:	d9f2      	bls.n	801db74 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801db8e:	bf00      	nop
 801db90:	bf00      	nop
 801db92:	3708      	adds	r7, #8
 801db94:	46bd      	mov	sp, r7
 801db96:	bd80      	pop	{r7, pc}
 801db98:	08028f68 	.word	0x08028f68

0801db9c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 801db9c:	b580      	push	{r7, lr}
 801db9e:	b084      	sub	sp, #16
 801dba0:	af00      	add	r7, sp, #0
 801dba2:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 801dba4:	687b      	ldr	r3, [r7, #4]
 801dba6:	689b      	ldr	r3, [r3, #8]
 801dba8:	681b      	ldr	r3, [r3, #0]
 801dbaa:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 801dbac:	68fb      	ldr	r3, [r7, #12]
 801dbae:	2b00      	cmp	r3, #0
 801dbb0:	d012      	beq.n	801dbd8 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 801dbb2:	687b      	ldr	r3, [r7, #4]
 801dbb4:	689b      	ldr	r3, [r3, #8]
 801dbb6:	68fa      	ldr	r2, [r7, #12]
 801dbb8:	6812      	ldr	r2, [r2, #0]
 801dbba:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801dbbc:	68fb      	ldr	r3, [r7, #12]
 801dbbe:	f003 0303 	and.w	r3, r3, #3
 801dbc2:	2b00      	cmp	r3, #0
 801dbc4:	d006      	beq.n	801dbd4 <do_memp_malloc_pool+0x38>
 801dbc6:	4b07      	ldr	r3, [pc, #28]	; (801dbe4 <do_memp_malloc_pool+0x48>)
 801dbc8:	f44f 728c 	mov.w	r2, #280	; 0x118
 801dbcc:	4906      	ldr	r1, [pc, #24]	; (801dbe8 <do_memp_malloc_pool+0x4c>)
 801dbce:	4807      	ldr	r0, [pc, #28]	; (801dbec <do_memp_malloc_pool+0x50>)
 801dbd0:	f004 fce8 	bl	80225a4 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 801dbd4:	68fb      	ldr	r3, [r7, #12]
 801dbd6:	e000      	b.n	801dbda <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 801dbd8:	2300      	movs	r3, #0
}
 801dbda:	4618      	mov	r0, r3
 801dbdc:	3710      	adds	r7, #16
 801dbde:	46bd      	mov	sp, r7
 801dbe0:	bd80      	pop	{r7, pc}
 801dbe2:	bf00      	nop
 801dbe4:	080274b4 	.word	0x080274b4
 801dbe8:	08027524 	.word	0x08027524
 801dbec:	08027548 	.word	0x08027548

0801dbf0 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 801dbf0:	b580      	push	{r7, lr}
 801dbf2:	b082      	sub	sp, #8
 801dbf4:	af00      	add	r7, sp, #0
 801dbf6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 801dbf8:	687b      	ldr	r3, [r7, #4]
 801dbfa:	2b00      	cmp	r3, #0
 801dbfc:	d106      	bne.n	801dc0c <memp_malloc_pool+0x1c>
 801dbfe:	4b0a      	ldr	r3, [pc, #40]	; (801dc28 <memp_malloc_pool+0x38>)
 801dc00:	f44f 729e 	mov.w	r2, #316	; 0x13c
 801dc04:	4909      	ldr	r1, [pc, #36]	; (801dc2c <memp_malloc_pool+0x3c>)
 801dc06:	480a      	ldr	r0, [pc, #40]	; (801dc30 <memp_malloc_pool+0x40>)
 801dc08:	f004 fccc 	bl	80225a4 <iprintf>
  if (desc == NULL) {
 801dc0c:	687b      	ldr	r3, [r7, #4]
 801dc0e:	2b00      	cmp	r3, #0
 801dc10:	d101      	bne.n	801dc16 <memp_malloc_pool+0x26>
    return NULL;
 801dc12:	2300      	movs	r3, #0
 801dc14:	e003      	b.n	801dc1e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 801dc16:	6878      	ldr	r0, [r7, #4]
 801dc18:	f7ff ffc0 	bl	801db9c <do_memp_malloc_pool>
 801dc1c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 801dc1e:	4618      	mov	r0, r3
 801dc20:	3708      	adds	r7, #8
 801dc22:	46bd      	mov	sp, r7
 801dc24:	bd80      	pop	{r7, pc}
 801dc26:	bf00      	nop
 801dc28:	080274b4 	.word	0x080274b4
 801dc2c:	08027570 	.word	0x08027570
 801dc30:	08027548 	.word	0x08027548

0801dc34 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 801dc34:	b580      	push	{r7, lr}
 801dc36:	b084      	sub	sp, #16
 801dc38:	af00      	add	r7, sp, #0
 801dc3a:	4603      	mov	r3, r0
 801dc3c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801dc3e:	79fb      	ldrb	r3, [r7, #7]
 801dc40:	2b05      	cmp	r3, #5
 801dc42:	d908      	bls.n	801dc56 <memp_malloc+0x22>
 801dc44:	4b0a      	ldr	r3, [pc, #40]	; (801dc70 <memp_malloc+0x3c>)
 801dc46:	f240 1257 	movw	r2, #343	; 0x157
 801dc4a:	490a      	ldr	r1, [pc, #40]	; (801dc74 <memp_malloc+0x40>)
 801dc4c:	480a      	ldr	r0, [pc, #40]	; (801dc78 <memp_malloc+0x44>)
 801dc4e:	f004 fca9 	bl	80225a4 <iprintf>
 801dc52:	2300      	movs	r3, #0
 801dc54:	e008      	b.n	801dc68 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 801dc56:	79fb      	ldrb	r3, [r7, #7]
 801dc58:	4a08      	ldr	r2, [pc, #32]	; (801dc7c <memp_malloc+0x48>)
 801dc5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801dc5e:	4618      	mov	r0, r3
 801dc60:	f7ff ff9c 	bl	801db9c <do_memp_malloc_pool>
 801dc64:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 801dc66:	68fb      	ldr	r3, [r7, #12]
}
 801dc68:	4618      	mov	r0, r3
 801dc6a:	3710      	adds	r7, #16
 801dc6c:	46bd      	mov	sp, r7
 801dc6e:	bd80      	pop	{r7, pc}
 801dc70:	080274b4 	.word	0x080274b4
 801dc74:	08027584 	.word	0x08027584
 801dc78:	08027548 	.word	0x08027548
 801dc7c:	08028f68 	.word	0x08028f68

0801dc80 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801dc80:	b580      	push	{r7, lr}
 801dc82:	b084      	sub	sp, #16
 801dc84:	af00      	add	r7, sp, #0
 801dc86:	6078      	str	r0, [r7, #4]
 801dc88:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 801dc8a:	683b      	ldr	r3, [r7, #0]
 801dc8c:	f003 0303 	and.w	r3, r3, #3
 801dc90:	2b00      	cmp	r3, #0
 801dc92:	d006      	beq.n	801dca2 <do_memp_free_pool+0x22>
 801dc94:	4b0a      	ldr	r3, [pc, #40]	; (801dcc0 <do_memp_free_pool+0x40>)
 801dc96:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 801dc9a:	490a      	ldr	r1, [pc, #40]	; (801dcc4 <do_memp_free_pool+0x44>)
 801dc9c:	480a      	ldr	r0, [pc, #40]	; (801dcc8 <do_memp_free_pool+0x48>)
 801dc9e:	f004 fc81 	bl	80225a4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801dca2:	683b      	ldr	r3, [r7, #0]
 801dca4:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 801dca6:	687b      	ldr	r3, [r7, #4]
 801dca8:	689b      	ldr	r3, [r3, #8]
 801dcaa:	681a      	ldr	r2, [r3, #0]
 801dcac:	68fb      	ldr	r3, [r7, #12]
 801dcae:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 801dcb0:	687b      	ldr	r3, [r7, #4]
 801dcb2:	689b      	ldr	r3, [r3, #8]
 801dcb4:	68fa      	ldr	r2, [r7, #12]
 801dcb6:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 801dcb8:	bf00      	nop
 801dcba:	3710      	adds	r7, #16
 801dcbc:	46bd      	mov	sp, r7
 801dcbe:	bd80      	pop	{r7, pc}
 801dcc0:	080274b4 	.word	0x080274b4
 801dcc4:	080275a4 	.word	0x080275a4
 801dcc8:	08027548 	.word	0x08027548

0801dccc <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801dccc:	b580      	push	{r7, lr}
 801dcce:	b082      	sub	sp, #8
 801dcd0:	af00      	add	r7, sp, #0
 801dcd2:	6078      	str	r0, [r7, #4]
 801dcd4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 801dcd6:	687b      	ldr	r3, [r7, #4]
 801dcd8:	2b00      	cmp	r3, #0
 801dcda:	d106      	bne.n	801dcea <memp_free_pool+0x1e>
 801dcdc:	4b0a      	ldr	r3, [pc, #40]	; (801dd08 <memp_free_pool+0x3c>)
 801dcde:	f240 1295 	movw	r2, #405	; 0x195
 801dce2:	490a      	ldr	r1, [pc, #40]	; (801dd0c <memp_free_pool+0x40>)
 801dce4:	480a      	ldr	r0, [pc, #40]	; (801dd10 <memp_free_pool+0x44>)
 801dce6:	f004 fc5d 	bl	80225a4 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 801dcea:	687b      	ldr	r3, [r7, #4]
 801dcec:	2b00      	cmp	r3, #0
 801dcee:	d007      	beq.n	801dd00 <memp_free_pool+0x34>
 801dcf0:	683b      	ldr	r3, [r7, #0]
 801dcf2:	2b00      	cmp	r3, #0
 801dcf4:	d004      	beq.n	801dd00 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 801dcf6:	6839      	ldr	r1, [r7, #0]
 801dcf8:	6878      	ldr	r0, [r7, #4]
 801dcfa:	f7ff ffc1 	bl	801dc80 <do_memp_free_pool>
 801dcfe:	e000      	b.n	801dd02 <memp_free_pool+0x36>
    return;
 801dd00:	bf00      	nop
}
 801dd02:	3708      	adds	r7, #8
 801dd04:	46bd      	mov	sp, r7
 801dd06:	bd80      	pop	{r7, pc}
 801dd08:	080274b4 	.word	0x080274b4
 801dd0c:	08027570 	.word	0x08027570
 801dd10:	08027548 	.word	0x08027548

0801dd14 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 801dd14:	b580      	push	{r7, lr}
 801dd16:	b082      	sub	sp, #8
 801dd18:	af00      	add	r7, sp, #0
 801dd1a:	4603      	mov	r3, r0
 801dd1c:	6039      	str	r1, [r7, #0]
 801dd1e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 801dd20:	79fb      	ldrb	r3, [r7, #7]
 801dd22:	2b05      	cmp	r3, #5
 801dd24:	d907      	bls.n	801dd36 <memp_free+0x22>
 801dd26:	4b0c      	ldr	r3, [pc, #48]	; (801dd58 <memp_free+0x44>)
 801dd28:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 801dd2c:	490b      	ldr	r1, [pc, #44]	; (801dd5c <memp_free+0x48>)
 801dd2e:	480c      	ldr	r0, [pc, #48]	; (801dd60 <memp_free+0x4c>)
 801dd30:	f004 fc38 	bl	80225a4 <iprintf>
 801dd34:	e00c      	b.n	801dd50 <memp_free+0x3c>

  if (mem == NULL) {
 801dd36:	683b      	ldr	r3, [r7, #0]
 801dd38:	2b00      	cmp	r3, #0
 801dd3a:	d008      	beq.n	801dd4e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 801dd3c:	79fb      	ldrb	r3, [r7, #7]
 801dd3e:	4a09      	ldr	r2, [pc, #36]	; (801dd64 <memp_free+0x50>)
 801dd40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801dd44:	6839      	ldr	r1, [r7, #0]
 801dd46:	4618      	mov	r0, r3
 801dd48:	f7ff ff9a 	bl	801dc80 <do_memp_free_pool>
 801dd4c:	e000      	b.n	801dd50 <memp_free+0x3c>
    return;
 801dd4e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 801dd50:	3708      	adds	r7, #8
 801dd52:	46bd      	mov	sp, r7
 801dd54:	bd80      	pop	{r7, pc}
 801dd56:	bf00      	nop
 801dd58:	080274b4 	.word	0x080274b4
 801dd5c:	080275c4 	.word	0x080275c4
 801dd60:	08027548 	.word	0x08027548
 801dd64:	08028f68 	.word	0x08028f68

0801dd68 <netif_loopif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 */
static err_t
netif_loopif_init(struct netif *netif)
{
 801dd68:	b580      	push	{r7, lr}
 801dd6a:	b082      	sub	sp, #8
 801dd6c:	af00      	add	r7, sp, #0
 801dd6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif_loopif_init: invalid netif", netif != NULL);
 801dd70:	687b      	ldr	r3, [r7, #4]
 801dd72:	2b00      	cmp	r3, #0
 801dd74:	d105      	bne.n	801dd82 <netif_loopif_init+0x1a>
 801dd76:	4b0b      	ldr	r3, [pc, #44]	; (801dda4 <netif_loopif_init+0x3c>)
 801dd78:	2299      	movs	r2, #153	; 0x99
 801dd7a:	490b      	ldr	r1, [pc, #44]	; (801dda8 <netif_loopif_init+0x40>)
 801dd7c:	480b      	ldr	r0, [pc, #44]	; (801ddac <netif_loopif_init+0x44>)
 801dd7e:	f004 fc11 	bl	80225a4 <iprintf>
  /* initialize the snmp variables and counters inside the struct netif
   * ifSpeed: no assumption can be made!
   */
  MIB2_INIT_NETIF(netif, snmp_ifType_softwareLoopback, 0);

  netif->name[0] = 'l';
 801dd82:	687b      	ldr	r3, [r7, #4]
 801dd84:	226c      	movs	r2, #108	; 0x6c
 801dd86:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = 'o';
 801dd8a:	687b      	ldr	r3, [r7, #4]
 801dd8c:	226f      	movs	r2, #111	; 0x6f
 801dd8e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
#if LWIP_IPV4
  netif->output = netif_loop_output_ipv4;
 801dd92:	687b      	ldr	r3, [r7, #4]
 801dd94:	4a06      	ldr	r2, [pc, #24]	; (801ddb0 <netif_loopif_init+0x48>)
 801dd96:	615a      	str	r2, [r3, #20]
#endif
#if LWIP_LOOPIF_MULTICAST
  netif_set_flags(netif, NETIF_FLAG_IGMP);
#endif
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_DISABLE_ALL);
  return ERR_OK;
 801dd98:	2300      	movs	r3, #0
}
 801dd9a:	4618      	mov	r0, r3
 801dd9c:	3708      	adds	r7, #8
 801dd9e:	46bd      	mov	sp, r7
 801dda0:	bd80      	pop	{r7, pc}
 801dda2:	bf00      	nop
 801dda4:	080275e0 	.word	0x080275e0
 801dda8:	08027650 	.word	0x08027650
 801ddac:	08027674 	.word	0x08027674
 801ddb0:	0801e495 	.word	0x0801e495

0801ddb4 <netif_init>:
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 801ddb4:	b580      	push	{r7, lr}
 801ddb6:	b088      	sub	sp, #32
 801ddb8:	af04      	add	r7, sp, #16
#if LWIP_HAVE_LOOPIF
#if LWIP_IPV4
#define LOOPIF_ADDRINIT &loop_ipaddr, &loop_netmask, &loop_gw,
  ip4_addr_t loop_ipaddr, loop_netmask, loop_gw;
  IP4_ADDR(&loop_gw, 127, 0, 0, 1);
 801ddba:	4b0f      	ldr	r3, [pc, #60]	; (801ddf8 <netif_init+0x44>)
 801ddbc:	607b      	str	r3, [r7, #4]
  IP4_ADDR(&loop_ipaddr, 127, 0, 0, 1);
 801ddbe:	4b0e      	ldr	r3, [pc, #56]	; (801ddf8 <netif_init+0x44>)
 801ddc0:	60fb      	str	r3, [r7, #12]
  IP4_ADDR(&loop_netmask, 255, 0, 0, 0);
 801ddc2:	23ff      	movs	r3, #255	; 0xff
 801ddc4:	60bb      	str	r3, [r7, #8]
#else /* LWIP_IPV4 */
#define LOOPIF_ADDRINIT
#endif /* LWIP_IPV4 */

#if NO_SYS
  netif_add(&loop_netif, LOOPIF_ADDRINIT NULL, netif_loopif_init, ip_input);
 801ddc6:	1d3b      	adds	r3, r7, #4
 801ddc8:	f107 0208 	add.w	r2, r7, #8
 801ddcc:	f107 010c 	add.w	r1, r7, #12
 801ddd0:	480a      	ldr	r0, [pc, #40]	; (801ddfc <netif_init+0x48>)
 801ddd2:	9002      	str	r0, [sp, #8]
 801ddd4:	480a      	ldr	r0, [pc, #40]	; (801de00 <netif_init+0x4c>)
 801ddd6:	9001      	str	r0, [sp, #4]
 801ddd8:	2000      	movs	r0, #0
 801ddda:	9000      	str	r0, [sp, #0]
 801dddc:	4809      	ldr	r0, [pc, #36]	; (801de04 <netif_init+0x50>)
 801ddde:	f000 f813 	bl	801de08 <netif_add>
#if LWIP_IPV6
  IP_ADDR6_HOST(loop_netif.ip6_addr, 0, 0, 0, 0x00000001UL);
  loop_netif.ip6_addr_state[0] = IP6_ADDR_VALID;
#endif /* LWIP_IPV6 */

  netif_set_link_up(&loop_netif);
 801dde2:	4808      	ldr	r0, [pc, #32]	; (801de04 <netif_init+0x50>)
 801dde4:	f000 fa72 	bl	801e2cc <netif_set_link_up>
  netif_set_up(&loop_netif);
 801dde8:	4806      	ldr	r0, [pc, #24]	; (801de04 <netif_init+0x50>)
 801ddea:	f000 f9d1 	bl	801e190 <netif_set_up>

#endif /* LWIP_HAVE_LOOPIF */
}
 801ddee:	bf00      	nop
 801ddf0:	3710      	adds	r7, #16
 801ddf2:	46bd      	mov	sp, r7
 801ddf4:	bd80      	pop	{r7, pc}
 801ddf6:	bf00      	nop
 801ddf8:	0100007f 	.word	0x0100007f
 801ddfc:	08020f31 	.word	0x08020f31
 801de00:	0801dd69 	.word	0x0801dd69
 801de04:	20013d84 	.word	0x20013d84

0801de08 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 801de08:	b580      	push	{r7, lr}
 801de0a:	b086      	sub	sp, #24
 801de0c:	af00      	add	r7, sp, #0
 801de0e:	60f8      	str	r0, [r7, #12]
 801de10:	60b9      	str	r1, [r7, #8]
 801de12:	607a      	str	r2, [r7, #4]
 801de14:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801de16:	68fb      	ldr	r3, [r7, #12]
 801de18:	2b00      	cmp	r3, #0
 801de1a:	d108      	bne.n	801de2e <netif_add+0x26>
 801de1c:	4b5a      	ldr	r3, [pc, #360]	; (801df88 <netif_add+0x180>)
 801de1e:	f240 1227 	movw	r2, #295	; 0x127
 801de22:	495a      	ldr	r1, [pc, #360]	; (801df8c <netif_add+0x184>)
 801de24:	485a      	ldr	r0, [pc, #360]	; (801df90 <netif_add+0x188>)
 801de26:	f004 fbbd 	bl	80225a4 <iprintf>
 801de2a:	2300      	movs	r3, #0
 801de2c:	e0a8      	b.n	801df80 <netif_add+0x178>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801de2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de30:	2b00      	cmp	r3, #0
 801de32:	d108      	bne.n	801de46 <netif_add+0x3e>
 801de34:	4b54      	ldr	r3, [pc, #336]	; (801df88 <netif_add+0x180>)
 801de36:	f44f 7294 	mov.w	r2, #296	; 0x128
 801de3a:	4956      	ldr	r1, [pc, #344]	; (801df94 <netif_add+0x18c>)
 801de3c:	4854      	ldr	r0, [pc, #336]	; (801df90 <netif_add+0x188>)
 801de3e:	f004 fbb1 	bl	80225a4 <iprintf>
 801de42:	2300      	movs	r3, #0
 801de44:	e09c      	b.n	801df80 <netif_add+0x178>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 801de46:	68bb      	ldr	r3, [r7, #8]
 801de48:	2b00      	cmp	r3, #0
 801de4a:	d101      	bne.n	801de50 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 801de4c:	4b52      	ldr	r3, [pc, #328]	; (801df98 <netif_add+0x190>)
 801de4e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801de50:	687b      	ldr	r3, [r7, #4]
 801de52:	2b00      	cmp	r3, #0
 801de54:	d101      	bne.n	801de5a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 801de56:	4b50      	ldr	r3, [pc, #320]	; (801df98 <netif_add+0x190>)
 801de58:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801de5a:	683b      	ldr	r3, [r7, #0]
 801de5c:	2b00      	cmp	r3, #0
 801de5e:	d101      	bne.n	801de64 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 801de60:	4b4d      	ldr	r3, [pc, #308]	; (801df98 <netif_add+0x190>)
 801de62:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 801de64:	68fb      	ldr	r3, [r7, #12]
 801de66:	2200      	movs	r2, #0
 801de68:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 801de6a:	68fb      	ldr	r3, [r7, #12]
 801de6c:	2200      	movs	r2, #0
 801de6e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 801de70:	68fb      	ldr	r3, [r7, #12]
 801de72:	2200      	movs	r2, #0
 801de74:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 801de76:	68fb      	ldr	r3, [r7, #12]
 801de78:	4a48      	ldr	r2, [pc, #288]	; (801df9c <netif_add+0x194>)
 801de7a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 801de7c:	68fb      	ldr	r3, [r7, #12]
 801de7e:	2200      	movs	r2, #0
 801de80:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 801de82:	68fb      	ldr	r3, [r7, #12]
 801de84:	2200      	movs	r2, #0
 801de86:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 801de8a:	68fb      	ldr	r3, [r7, #12]
 801de8c:	2200      	movs	r2, #0
 801de8e:	61da      	str	r2, [r3, #28]
#endif /* LWIP_IGMP */
#if LWIP_IPV6 && LWIP_IPV6_MLD
  netif->mld_mac_filter = NULL;
#endif /* LWIP_IPV6 && LWIP_IPV6_MLD */
#if ENABLE_LOOPBACK
  netif->loop_first = NULL;
 801de90:	68fb      	ldr	r3, [r7, #12]
 801de92:	2200      	movs	r2, #0
 801de94:	639a      	str	r2, [r3, #56]	; 0x38
  netif->loop_last = NULL;
 801de96:	68fb      	ldr	r3, [r7, #12]
 801de98:	2200      	movs	r2, #0
 801de9a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 801de9c:	68fb      	ldr	r3, [r7, #12]
 801de9e:	6a3a      	ldr	r2, [r7, #32]
 801dea0:	625a      	str	r2, [r3, #36]	; 0x24
  netif->num = netif_num;
 801dea2:	4b3f      	ldr	r3, [pc, #252]	; (801dfa0 <netif_add+0x198>)
 801dea4:	781a      	ldrb	r2, [r3, #0]
 801dea6:	68fb      	ldr	r3, [r7, #12]
 801dea8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 801deac:	68fb      	ldr	r3, [r7, #12]
 801deae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801deb0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 801deb2:	683b      	ldr	r3, [r7, #0]
 801deb4:	687a      	ldr	r2, [r7, #4]
 801deb6:	68b9      	ldr	r1, [r7, #8]
 801deb8:	68f8      	ldr	r0, [r7, #12]
 801deba:	f000 f90f 	bl	801e0dc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 801debe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dec0:	68f8      	ldr	r0, [r7, #12]
 801dec2:	4798      	blx	r3
 801dec4:	4603      	mov	r3, r0
 801dec6:	2b00      	cmp	r3, #0
 801dec8:	d001      	beq.n	801dece <netif_add+0xc6>
    return NULL;
 801deca:	2300      	movs	r3, #0
 801decc:	e058      	b.n	801df80 <netif_add+0x178>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 801dece:	68fb      	ldr	r3, [r7, #12]
 801ded0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801ded4:	2bff      	cmp	r3, #255	; 0xff
 801ded6:	d103      	bne.n	801dee0 <netif_add+0xd8>
        netif->num = 0;
 801ded8:	68fb      	ldr	r3, [r7, #12]
 801deda:	2200      	movs	r2, #0
 801dedc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 801dee0:	2300      	movs	r3, #0
 801dee2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801dee4:	4b2f      	ldr	r3, [pc, #188]	; (801dfa4 <netif_add+0x19c>)
 801dee6:	681b      	ldr	r3, [r3, #0]
 801dee8:	617b      	str	r3, [r7, #20]
 801deea:	e02b      	b.n	801df44 <netif_add+0x13c>
        LWIP_ASSERT("netif already added", netif2 != netif);
 801deec:	697a      	ldr	r2, [r7, #20]
 801deee:	68fb      	ldr	r3, [r7, #12]
 801def0:	429a      	cmp	r2, r3
 801def2:	d106      	bne.n	801df02 <netif_add+0xfa>
 801def4:	4b24      	ldr	r3, [pc, #144]	; (801df88 <netif_add+0x180>)
 801def6:	f240 128b 	movw	r2, #395	; 0x18b
 801defa:	492b      	ldr	r1, [pc, #172]	; (801dfa8 <netif_add+0x1a0>)
 801defc:	4824      	ldr	r0, [pc, #144]	; (801df90 <netif_add+0x188>)
 801defe:	f004 fb51 	bl	80225a4 <iprintf>
        num_netifs++;
 801df02:	693b      	ldr	r3, [r7, #16]
 801df04:	3301      	adds	r3, #1
 801df06:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 801df08:	693b      	ldr	r3, [r7, #16]
 801df0a:	2bff      	cmp	r3, #255	; 0xff
 801df0c:	dd06      	ble.n	801df1c <netif_add+0x114>
 801df0e:	4b1e      	ldr	r3, [pc, #120]	; (801df88 <netif_add+0x180>)
 801df10:	f240 128d 	movw	r2, #397	; 0x18d
 801df14:	4925      	ldr	r1, [pc, #148]	; (801dfac <netif_add+0x1a4>)
 801df16:	481e      	ldr	r0, [pc, #120]	; (801df90 <netif_add+0x188>)
 801df18:	f004 fb44 	bl	80225a4 <iprintf>
        if (netif2->num == netif->num) {
 801df1c:	697b      	ldr	r3, [r7, #20]
 801df1e:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 801df22:	68fb      	ldr	r3, [r7, #12]
 801df24:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801df28:	429a      	cmp	r2, r3
 801df2a:	d108      	bne.n	801df3e <netif_add+0x136>
          netif->num++;
 801df2c:	68fb      	ldr	r3, [r7, #12]
 801df2e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801df32:	3301      	adds	r3, #1
 801df34:	b2da      	uxtb	r2, r3
 801df36:	68fb      	ldr	r3, [r7, #12]
 801df38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 801df3c:	e005      	b.n	801df4a <netif_add+0x142>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801df3e:	697b      	ldr	r3, [r7, #20]
 801df40:	681b      	ldr	r3, [r3, #0]
 801df42:	617b      	str	r3, [r7, #20]
 801df44:	697b      	ldr	r3, [r7, #20]
 801df46:	2b00      	cmp	r3, #0
 801df48:	d1d0      	bne.n	801deec <netif_add+0xe4>
        }
      }
    } while (netif2 != NULL);
 801df4a:	697b      	ldr	r3, [r7, #20]
 801df4c:	2b00      	cmp	r3, #0
 801df4e:	d1be      	bne.n	801dece <netif_add+0xc6>
  }
  if (netif->num == 254) {
 801df50:	68fb      	ldr	r3, [r7, #12]
 801df52:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801df56:	2bfe      	cmp	r3, #254	; 0xfe
 801df58:	d103      	bne.n	801df62 <netif_add+0x15a>
    netif_num = 0;
 801df5a:	4b11      	ldr	r3, [pc, #68]	; (801dfa0 <netif_add+0x198>)
 801df5c:	2200      	movs	r2, #0
 801df5e:	701a      	strb	r2, [r3, #0]
 801df60:	e006      	b.n	801df70 <netif_add+0x168>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 801df62:	68fb      	ldr	r3, [r7, #12]
 801df64:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801df68:	3301      	adds	r3, #1
 801df6a:	b2da      	uxtb	r2, r3
 801df6c:	4b0c      	ldr	r3, [pc, #48]	; (801dfa0 <netif_add+0x198>)
 801df6e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 801df70:	4b0c      	ldr	r3, [pc, #48]	; (801dfa4 <netif_add+0x19c>)
 801df72:	681a      	ldr	r2, [r3, #0]
 801df74:	68fb      	ldr	r3, [r7, #12]
 801df76:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 801df78:	4a0a      	ldr	r2, [pc, #40]	; (801dfa4 <netif_add+0x19c>)
 801df7a:	68fb      	ldr	r3, [r7, #12]
 801df7c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 801df7e:	68fb      	ldr	r3, [r7, #12]
}
 801df80:	4618      	mov	r0, r3
 801df82:	3718      	adds	r7, #24
 801df84:	46bd      	mov	sp, r7
 801df86:	bd80      	pop	{r7, pc}
 801df88:	080275e0 	.word	0x080275e0
 801df8c:	080276d4 	.word	0x080276d4
 801df90:	08027674 	.word	0x08027674
 801df94:	080276f0 	.word	0x080276f0
 801df98:	08028f90 	.word	0x08028f90
 801df9c:	0801e4b3 	.word	0x0801e4b3
 801dfa0:	20013d80 	.word	0x20013d80
 801dfa4:	20013d78 	.word	0x20013d78
 801dfa8:	08027714 	.word	0x08027714
 801dfac:	08027728 	.word	0x08027728

0801dfb0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801dfb0:	b580      	push	{r7, lr}
 801dfb2:	b082      	sub	sp, #8
 801dfb4:	af00      	add	r7, sp, #0
 801dfb6:	6078      	str	r0, [r7, #4]
 801dfb8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801dfba:	6839      	ldr	r1, [r7, #0]
 801dfbc:	6878      	ldr	r0, [r7, #4]
 801dfbe:	f001 fe13 	bl	801fbe8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 801dfc2:	bf00      	nop
 801dfc4:	3708      	adds	r7, #8
 801dfc6:	46bd      	mov	sp, r7
 801dfc8:	bd80      	pop	{r7, pc}
	...

0801dfcc <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 801dfcc:	b580      	push	{r7, lr}
 801dfce:	b086      	sub	sp, #24
 801dfd0:	af00      	add	r7, sp, #0
 801dfd2:	60f8      	str	r0, [r7, #12]
 801dfd4:	60b9      	str	r1, [r7, #8]
 801dfd6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 801dfd8:	68bb      	ldr	r3, [r7, #8]
 801dfda:	2b00      	cmp	r3, #0
 801dfdc:	d106      	bne.n	801dfec <netif_do_set_ipaddr+0x20>
 801dfde:	4b1d      	ldr	r3, [pc, #116]	; (801e054 <netif_do_set_ipaddr+0x88>)
 801dfe0:	f240 12cb 	movw	r2, #459	; 0x1cb
 801dfe4:	491c      	ldr	r1, [pc, #112]	; (801e058 <netif_do_set_ipaddr+0x8c>)
 801dfe6:	481d      	ldr	r0, [pc, #116]	; (801e05c <netif_do_set_ipaddr+0x90>)
 801dfe8:	f004 fadc 	bl	80225a4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 801dfec:	687b      	ldr	r3, [r7, #4]
 801dfee:	2b00      	cmp	r3, #0
 801dff0:	d106      	bne.n	801e000 <netif_do_set_ipaddr+0x34>
 801dff2:	4b18      	ldr	r3, [pc, #96]	; (801e054 <netif_do_set_ipaddr+0x88>)
 801dff4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 801dff8:	4917      	ldr	r1, [pc, #92]	; (801e058 <netif_do_set_ipaddr+0x8c>)
 801dffa:	4818      	ldr	r0, [pc, #96]	; (801e05c <netif_do_set_ipaddr+0x90>)
 801dffc:	f004 fad2 	bl	80225a4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 801e000:	68bb      	ldr	r3, [r7, #8]
 801e002:	681a      	ldr	r2, [r3, #0]
 801e004:	68fb      	ldr	r3, [r7, #12]
 801e006:	3304      	adds	r3, #4
 801e008:	681b      	ldr	r3, [r3, #0]
 801e00a:	429a      	cmp	r2, r3
 801e00c:	d01c      	beq.n	801e048 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 801e00e:	68bb      	ldr	r3, [r7, #8]
 801e010:	681b      	ldr	r3, [r3, #0]
 801e012:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 801e014:	68fb      	ldr	r3, [r7, #12]
 801e016:	3304      	adds	r3, #4
 801e018:	681a      	ldr	r2, [r3, #0]
 801e01a:	687b      	ldr	r3, [r7, #4]
 801e01c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 801e01e:	f107 0314 	add.w	r3, r7, #20
 801e022:	4619      	mov	r1, r3
 801e024:	6878      	ldr	r0, [r7, #4]
 801e026:	f7ff ffc3 	bl	801dfb0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801e02a:	68bb      	ldr	r3, [r7, #8]
 801e02c:	2b00      	cmp	r3, #0
 801e02e:	d002      	beq.n	801e036 <netif_do_set_ipaddr+0x6a>
 801e030:	68bb      	ldr	r3, [r7, #8]
 801e032:	681b      	ldr	r3, [r3, #0]
 801e034:	e000      	b.n	801e038 <netif_do_set_ipaddr+0x6c>
 801e036:	2300      	movs	r3, #0
 801e038:	68fa      	ldr	r2, [r7, #12]
 801e03a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801e03c:	2101      	movs	r1, #1
 801e03e:	68f8      	ldr	r0, [r7, #12]
 801e040:	f000 f8d2 	bl	801e1e8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 801e044:	2301      	movs	r3, #1
 801e046:	e000      	b.n	801e04a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 801e048:	2300      	movs	r3, #0
}
 801e04a:	4618      	mov	r0, r3
 801e04c:	3718      	adds	r7, #24
 801e04e:	46bd      	mov	sp, r7
 801e050:	bd80      	pop	{r7, pc}
 801e052:	bf00      	nop
 801e054:	080275e0 	.word	0x080275e0
 801e058:	08027758 	.word	0x08027758
 801e05c:	08027674 	.word	0x08027674

0801e060 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 801e060:	b480      	push	{r7}
 801e062:	b085      	sub	sp, #20
 801e064:	af00      	add	r7, sp, #0
 801e066:	60f8      	str	r0, [r7, #12]
 801e068:	60b9      	str	r1, [r7, #8]
 801e06a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 801e06c:	68bb      	ldr	r3, [r7, #8]
 801e06e:	681a      	ldr	r2, [r3, #0]
 801e070:	68fb      	ldr	r3, [r7, #12]
 801e072:	3308      	adds	r3, #8
 801e074:	681b      	ldr	r3, [r3, #0]
 801e076:	429a      	cmp	r2, r3
 801e078:	d00a      	beq.n	801e090 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801e07a:	68bb      	ldr	r3, [r7, #8]
 801e07c:	2b00      	cmp	r3, #0
 801e07e:	d002      	beq.n	801e086 <netif_do_set_netmask+0x26>
 801e080:	68bb      	ldr	r3, [r7, #8]
 801e082:	681b      	ldr	r3, [r3, #0]
 801e084:	e000      	b.n	801e088 <netif_do_set_netmask+0x28>
 801e086:	2300      	movs	r3, #0
 801e088:	68fa      	ldr	r2, [r7, #12]
 801e08a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 801e08c:	2301      	movs	r3, #1
 801e08e:	e000      	b.n	801e092 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 801e090:	2300      	movs	r3, #0
}
 801e092:	4618      	mov	r0, r3
 801e094:	3714      	adds	r7, #20
 801e096:	46bd      	mov	sp, r7
 801e098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e09c:	4770      	bx	lr

0801e09e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 801e09e:	b480      	push	{r7}
 801e0a0:	b085      	sub	sp, #20
 801e0a2:	af00      	add	r7, sp, #0
 801e0a4:	60f8      	str	r0, [r7, #12]
 801e0a6:	60b9      	str	r1, [r7, #8]
 801e0a8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801e0aa:	68bb      	ldr	r3, [r7, #8]
 801e0ac:	681a      	ldr	r2, [r3, #0]
 801e0ae:	68fb      	ldr	r3, [r7, #12]
 801e0b0:	330c      	adds	r3, #12
 801e0b2:	681b      	ldr	r3, [r3, #0]
 801e0b4:	429a      	cmp	r2, r3
 801e0b6:	d00a      	beq.n	801e0ce <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 801e0b8:	68bb      	ldr	r3, [r7, #8]
 801e0ba:	2b00      	cmp	r3, #0
 801e0bc:	d002      	beq.n	801e0c4 <netif_do_set_gw+0x26>
 801e0be:	68bb      	ldr	r3, [r7, #8]
 801e0c0:	681b      	ldr	r3, [r3, #0]
 801e0c2:	e000      	b.n	801e0c6 <netif_do_set_gw+0x28>
 801e0c4:	2300      	movs	r3, #0
 801e0c6:	68fa      	ldr	r2, [r7, #12]
 801e0c8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 801e0ca:	2301      	movs	r3, #1
 801e0cc:	e000      	b.n	801e0d0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 801e0ce:	2300      	movs	r3, #0
}
 801e0d0:	4618      	mov	r0, r3
 801e0d2:	3714      	adds	r7, #20
 801e0d4:	46bd      	mov	sp, r7
 801e0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e0da:	4770      	bx	lr

0801e0dc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 801e0dc:	b580      	push	{r7, lr}
 801e0de:	b088      	sub	sp, #32
 801e0e0:	af00      	add	r7, sp, #0
 801e0e2:	60f8      	str	r0, [r7, #12]
 801e0e4:	60b9      	str	r1, [r7, #8]
 801e0e6:	607a      	str	r2, [r7, #4]
 801e0e8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 801e0ea:	2300      	movs	r3, #0
 801e0ec:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 801e0ee:	2300      	movs	r3, #0
 801e0f0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801e0f2:	68bb      	ldr	r3, [r7, #8]
 801e0f4:	2b00      	cmp	r3, #0
 801e0f6:	d101      	bne.n	801e0fc <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 801e0f8:	4b1c      	ldr	r3, [pc, #112]	; (801e16c <netif_set_addr+0x90>)
 801e0fa:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801e0fc:	687b      	ldr	r3, [r7, #4]
 801e0fe:	2b00      	cmp	r3, #0
 801e100:	d101      	bne.n	801e106 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 801e102:	4b1a      	ldr	r3, [pc, #104]	; (801e16c <netif_set_addr+0x90>)
 801e104:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801e106:	683b      	ldr	r3, [r7, #0]
 801e108:	2b00      	cmp	r3, #0
 801e10a:	d101      	bne.n	801e110 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 801e10c:	4b17      	ldr	r3, [pc, #92]	; (801e16c <netif_set_addr+0x90>)
 801e10e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 801e110:	68bb      	ldr	r3, [r7, #8]
 801e112:	2b00      	cmp	r3, #0
 801e114:	d003      	beq.n	801e11e <netif_set_addr+0x42>
 801e116:	68bb      	ldr	r3, [r7, #8]
 801e118:	681b      	ldr	r3, [r3, #0]
 801e11a:	2b00      	cmp	r3, #0
 801e11c:	d101      	bne.n	801e122 <netif_set_addr+0x46>
 801e11e:	2301      	movs	r3, #1
 801e120:	e000      	b.n	801e124 <netif_set_addr+0x48>
 801e122:	2300      	movs	r3, #0
 801e124:	617b      	str	r3, [r7, #20]
  if (remove) {
 801e126:	697b      	ldr	r3, [r7, #20]
 801e128:	2b00      	cmp	r3, #0
 801e12a:	d006      	beq.n	801e13a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801e12c:	f107 0310 	add.w	r3, r7, #16
 801e130:	461a      	mov	r2, r3
 801e132:	68b9      	ldr	r1, [r7, #8]
 801e134:	68f8      	ldr	r0, [r7, #12]
 801e136:	f7ff ff49 	bl	801dfcc <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 801e13a:	69fa      	ldr	r2, [r7, #28]
 801e13c:	6879      	ldr	r1, [r7, #4]
 801e13e:	68f8      	ldr	r0, [r7, #12]
 801e140:	f7ff ff8e 	bl	801e060 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 801e144:	69ba      	ldr	r2, [r7, #24]
 801e146:	6839      	ldr	r1, [r7, #0]
 801e148:	68f8      	ldr	r0, [r7, #12]
 801e14a:	f7ff ffa8 	bl	801e09e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 801e14e:	697b      	ldr	r3, [r7, #20]
 801e150:	2b00      	cmp	r3, #0
 801e152:	d106      	bne.n	801e162 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801e154:	f107 0310 	add.w	r3, r7, #16
 801e158:	461a      	mov	r2, r3
 801e15a:	68b9      	ldr	r1, [r7, #8]
 801e15c:	68f8      	ldr	r0, [r7, #12]
 801e15e:	f7ff ff35 	bl	801dfcc <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 801e162:	bf00      	nop
 801e164:	3720      	adds	r7, #32
 801e166:	46bd      	mov	sp, r7
 801e168:	bd80      	pop	{r7, pc}
 801e16a:	bf00      	nop
 801e16c:	08028f90 	.word	0x08028f90

0801e170 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 801e170:	b480      	push	{r7}
 801e172:	b083      	sub	sp, #12
 801e174:	af00      	add	r7, sp, #0
 801e176:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 801e178:	4a04      	ldr	r2, [pc, #16]	; (801e18c <netif_set_default+0x1c>)
 801e17a:	687b      	ldr	r3, [r7, #4]
 801e17c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801e17e:	bf00      	nop
 801e180:	370c      	adds	r7, #12
 801e182:	46bd      	mov	sp, r7
 801e184:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e188:	4770      	bx	lr
 801e18a:	bf00      	nop
 801e18c:	20013d7c 	.word	0x20013d7c

0801e190 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 801e190:	b580      	push	{r7, lr}
 801e192:	b082      	sub	sp, #8
 801e194:	af00      	add	r7, sp, #0
 801e196:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 801e198:	687b      	ldr	r3, [r7, #4]
 801e19a:	2b00      	cmp	r3, #0
 801e19c:	d107      	bne.n	801e1ae <netif_set_up+0x1e>
 801e19e:	4b0f      	ldr	r3, [pc, #60]	; (801e1dc <netif_set_up+0x4c>)
 801e1a0:	f44f 7254 	mov.w	r2, #848	; 0x350
 801e1a4:	490e      	ldr	r1, [pc, #56]	; (801e1e0 <netif_set_up+0x50>)
 801e1a6:	480f      	ldr	r0, [pc, #60]	; (801e1e4 <netif_set_up+0x54>)
 801e1a8:	f004 f9fc 	bl	80225a4 <iprintf>
 801e1ac:	e013      	b.n	801e1d6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 801e1ae:	687b      	ldr	r3, [r7, #4]
 801e1b0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e1b4:	f003 0301 	and.w	r3, r3, #1
 801e1b8:	2b00      	cmp	r3, #0
 801e1ba:	d10c      	bne.n	801e1d6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 801e1bc:	687b      	ldr	r3, [r7, #4]
 801e1be:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e1c2:	f043 0301 	orr.w	r3, r3, #1
 801e1c6:	b2da      	uxtb	r2, r3
 801e1c8:	687b      	ldr	r3, [r7, #4]
 801e1ca:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801e1ce:	2103      	movs	r1, #3
 801e1d0:	6878      	ldr	r0, [r7, #4]
 801e1d2:	f000 f809 	bl	801e1e8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 801e1d6:	3708      	adds	r7, #8
 801e1d8:	46bd      	mov	sp, r7
 801e1da:	bd80      	pop	{r7, pc}
 801e1dc:	080275e0 	.word	0x080275e0
 801e1e0:	080277c8 	.word	0x080277c8
 801e1e4:	08027674 	.word	0x08027674

0801e1e8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 801e1e8:	b580      	push	{r7, lr}
 801e1ea:	b082      	sub	sp, #8
 801e1ec:	af00      	add	r7, sp, #0
 801e1ee:	6078      	str	r0, [r7, #4]
 801e1f0:	460b      	mov	r3, r1
 801e1f2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 801e1f4:	687b      	ldr	r3, [r7, #4]
 801e1f6:	2b00      	cmp	r3, #0
 801e1f8:	d106      	bne.n	801e208 <netif_issue_reports+0x20>
 801e1fa:	4b18      	ldr	r3, [pc, #96]	; (801e25c <netif_issue_reports+0x74>)
 801e1fc:	f240 326d 	movw	r2, #877	; 0x36d
 801e200:	4917      	ldr	r1, [pc, #92]	; (801e260 <netif_issue_reports+0x78>)
 801e202:	4818      	ldr	r0, [pc, #96]	; (801e264 <netif_issue_reports+0x7c>)
 801e204:	f004 f9ce 	bl	80225a4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801e208:	687b      	ldr	r3, [r7, #4]
 801e20a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e20e:	f003 0304 	and.w	r3, r3, #4
 801e212:	2b00      	cmp	r3, #0
 801e214:	d01e      	beq.n	801e254 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 801e216:	687b      	ldr	r3, [r7, #4]
 801e218:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e21c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801e220:	2b00      	cmp	r3, #0
 801e222:	d017      	beq.n	801e254 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801e224:	78fb      	ldrb	r3, [r7, #3]
 801e226:	f003 0301 	and.w	r3, r3, #1
 801e22a:	2b00      	cmp	r3, #0
 801e22c:	d013      	beq.n	801e256 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801e22e:	687b      	ldr	r3, [r7, #4]
 801e230:	3304      	adds	r3, #4
 801e232:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801e234:	2b00      	cmp	r3, #0
 801e236:	d00e      	beq.n	801e256 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 801e238:	687b      	ldr	r3, [r7, #4]
 801e23a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e23e:	f003 0308 	and.w	r3, r3, #8
 801e242:	2b00      	cmp	r3, #0
 801e244:	d007      	beq.n	801e256 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 801e246:	687b      	ldr	r3, [r7, #4]
 801e248:	3304      	adds	r3, #4
 801e24a:	4619      	mov	r1, r3
 801e24c:	6878      	ldr	r0, [r7, #4]
 801e24e:	f002 fc35 	bl	8020abc <etharp_request>
 801e252:	e000      	b.n	801e256 <netif_issue_reports+0x6e>
    return;
 801e254:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 801e256:	3708      	adds	r7, #8
 801e258:	46bd      	mov	sp, r7
 801e25a:	bd80      	pop	{r7, pc}
 801e25c:	080275e0 	.word	0x080275e0
 801e260:	080277e4 	.word	0x080277e4
 801e264:	08027674 	.word	0x08027674

0801e268 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 801e268:	b580      	push	{r7, lr}
 801e26a:	b082      	sub	sp, #8
 801e26c:	af00      	add	r7, sp, #0
 801e26e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 801e270:	687b      	ldr	r3, [r7, #4]
 801e272:	2b00      	cmp	r3, #0
 801e274:	d107      	bne.n	801e286 <netif_set_down+0x1e>
 801e276:	4b12      	ldr	r3, [pc, #72]	; (801e2c0 <netif_set_down+0x58>)
 801e278:	f240 329b 	movw	r2, #923	; 0x39b
 801e27c:	4911      	ldr	r1, [pc, #68]	; (801e2c4 <netif_set_down+0x5c>)
 801e27e:	4812      	ldr	r0, [pc, #72]	; (801e2c8 <netif_set_down+0x60>)
 801e280:	f004 f990 	bl	80225a4 <iprintf>
 801e284:	e019      	b.n	801e2ba <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 801e286:	687b      	ldr	r3, [r7, #4]
 801e288:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e28c:	f003 0301 	and.w	r3, r3, #1
 801e290:	2b00      	cmp	r3, #0
 801e292:	d012      	beq.n	801e2ba <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 801e294:	687b      	ldr	r3, [r7, #4]
 801e296:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e29a:	f023 0301 	bic.w	r3, r3, #1
 801e29e:	b2da      	uxtb	r2, r3
 801e2a0:	687b      	ldr	r3, [r7, #4]
 801e2a2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801e2a6:	687b      	ldr	r3, [r7, #4]
 801e2a8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e2ac:	f003 0308 	and.w	r3, r3, #8
 801e2b0:	2b00      	cmp	r3, #0
 801e2b2:	d002      	beq.n	801e2ba <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 801e2b4:	6878      	ldr	r0, [r7, #4]
 801e2b6:	f001 ffbf 	bl	8020238 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801e2ba:	3708      	adds	r7, #8
 801e2bc:	46bd      	mov	sp, r7
 801e2be:	bd80      	pop	{r7, pc}
 801e2c0:	080275e0 	.word	0x080275e0
 801e2c4:	08027808 	.word	0x08027808
 801e2c8:	08027674 	.word	0x08027674

0801e2cc <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 801e2cc:	b580      	push	{r7, lr}
 801e2ce:	b082      	sub	sp, #8
 801e2d0:	af00      	add	r7, sp, #0
 801e2d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 801e2d4:	687b      	ldr	r3, [r7, #4]
 801e2d6:	2b00      	cmp	r3, #0
 801e2d8:	d107      	bne.n	801e2ea <netif_set_link_up+0x1e>
 801e2da:	4b13      	ldr	r3, [pc, #76]	; (801e328 <netif_set_link_up+0x5c>)
 801e2dc:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 801e2e0:	4912      	ldr	r1, [pc, #72]	; (801e32c <netif_set_link_up+0x60>)
 801e2e2:	4813      	ldr	r0, [pc, #76]	; (801e330 <netif_set_link_up+0x64>)
 801e2e4:	f004 f95e 	bl	80225a4 <iprintf>
 801e2e8:	e01b      	b.n	801e322 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 801e2ea:	687b      	ldr	r3, [r7, #4]
 801e2ec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e2f0:	f003 0304 	and.w	r3, r3, #4
 801e2f4:	2b00      	cmp	r3, #0
 801e2f6:	d114      	bne.n	801e322 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 801e2f8:	687b      	ldr	r3, [r7, #4]
 801e2fa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e2fe:	f043 0304 	orr.w	r3, r3, #4
 801e302:	b2da      	uxtb	r2, r3
 801e304:	687b      	ldr	r3, [r7, #4]
 801e306:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801e30a:	2103      	movs	r1, #3
 801e30c:	6878      	ldr	r0, [r7, #4]
 801e30e:	f7ff ff6b 	bl	801e1e8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 801e312:	687b      	ldr	r3, [r7, #4]
 801e314:	69db      	ldr	r3, [r3, #28]
 801e316:	2b00      	cmp	r3, #0
 801e318:	d003      	beq.n	801e322 <netif_set_link_up+0x56>
 801e31a:	687b      	ldr	r3, [r7, #4]
 801e31c:	69db      	ldr	r3, [r3, #28]
 801e31e:	6878      	ldr	r0, [r7, #4]
 801e320:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801e322:	3708      	adds	r7, #8
 801e324:	46bd      	mov	sp, r7
 801e326:	bd80      	pop	{r7, pc}
 801e328:	080275e0 	.word	0x080275e0
 801e32c:	08027828 	.word	0x08027828
 801e330:	08027674 	.word	0x08027674

0801e334 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 801e334:	b580      	push	{r7, lr}
 801e336:	b082      	sub	sp, #8
 801e338:	af00      	add	r7, sp, #0
 801e33a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 801e33c:	687b      	ldr	r3, [r7, #4]
 801e33e:	2b00      	cmp	r3, #0
 801e340:	d107      	bne.n	801e352 <netif_set_link_down+0x1e>
 801e342:	4b11      	ldr	r3, [pc, #68]	; (801e388 <netif_set_link_down+0x54>)
 801e344:	f240 4206 	movw	r2, #1030	; 0x406
 801e348:	4910      	ldr	r1, [pc, #64]	; (801e38c <netif_set_link_down+0x58>)
 801e34a:	4811      	ldr	r0, [pc, #68]	; (801e390 <netif_set_link_down+0x5c>)
 801e34c:	f004 f92a 	bl	80225a4 <iprintf>
 801e350:	e017      	b.n	801e382 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801e352:	687b      	ldr	r3, [r7, #4]
 801e354:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e358:	f003 0304 	and.w	r3, r3, #4
 801e35c:	2b00      	cmp	r3, #0
 801e35e:	d010      	beq.n	801e382 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 801e360:	687b      	ldr	r3, [r7, #4]
 801e362:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e366:	f023 0304 	bic.w	r3, r3, #4
 801e36a:	b2da      	uxtb	r2, r3
 801e36c:	687b      	ldr	r3, [r7, #4]
 801e36e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 801e372:	687b      	ldr	r3, [r7, #4]
 801e374:	69db      	ldr	r3, [r3, #28]
 801e376:	2b00      	cmp	r3, #0
 801e378:	d003      	beq.n	801e382 <netif_set_link_down+0x4e>
 801e37a:	687b      	ldr	r3, [r7, #4]
 801e37c:	69db      	ldr	r3, [r3, #28]
 801e37e:	6878      	ldr	r0, [r7, #4]
 801e380:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801e382:	3708      	adds	r7, #8
 801e384:	46bd      	mov	sp, r7
 801e386:	bd80      	pop	{r7, pc}
 801e388:	080275e0 	.word	0x080275e0
 801e38c:	0802784c 	.word	0x0802784c
 801e390:	08027674 	.word	0x08027674

0801e394 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 801e394:	b480      	push	{r7}
 801e396:	b083      	sub	sp, #12
 801e398:	af00      	add	r7, sp, #0
 801e39a:	6078      	str	r0, [r7, #4]
 801e39c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 801e39e:	687b      	ldr	r3, [r7, #4]
 801e3a0:	2b00      	cmp	r3, #0
 801e3a2:	d002      	beq.n	801e3aa <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 801e3a4:	687b      	ldr	r3, [r7, #4]
 801e3a6:	683a      	ldr	r2, [r7, #0]
 801e3a8:	61da      	str	r2, [r3, #28]
  }
}
 801e3aa:	bf00      	nop
 801e3ac:	370c      	adds	r7, #12
 801e3ae:	46bd      	mov	sp, r7
 801e3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e3b4:	4770      	bx	lr
	...

0801e3b8 <netif_loop_output>:
 * @return ERR_OK if the packet has been sent
 *         ERR_MEM if the pbuf used to copy the packet couldn't be allocated
 */
err_t
netif_loop_output(struct netif *netif, struct pbuf *p)
{
 801e3b8:	b580      	push	{r7, lr}
 801e3ba:	b086      	sub	sp, #24
 801e3bc:	af00      	add	r7, sp, #0
 801e3be:	6078      	str	r0, [r7, #4]
 801e3c0:	6039      	str	r1, [r7, #0]
#if LWIP_NETIF_LOOPBACK_MULTITHREADING
  u8_t schedule_poll = 0;
#endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_ASSERT("netif_loop_output: invalid netif", netif != NULL);
 801e3c2:	687b      	ldr	r3, [r7, #4]
 801e3c4:	2b00      	cmp	r3, #0
 801e3c6:	d106      	bne.n	801e3d6 <netif_loop_output+0x1e>
 801e3c8:	4b2d      	ldr	r3, [pc, #180]	; (801e480 <netif_loop_output+0xc8>)
 801e3ca:	f240 424b 	movw	r2, #1099	; 0x44b
 801e3ce:	492d      	ldr	r1, [pc, #180]	; (801e484 <netif_loop_output+0xcc>)
 801e3d0:	482d      	ldr	r0, [pc, #180]	; (801e488 <netif_loop_output+0xd0>)
 801e3d2:	f004 f8e7 	bl	80225a4 <iprintf>
  LWIP_ASSERT("netif_loop_output: invalid pbuf", p != NULL);
 801e3d6:	683b      	ldr	r3, [r7, #0]
 801e3d8:	2b00      	cmp	r3, #0
 801e3da:	d106      	bne.n	801e3ea <netif_loop_output+0x32>
 801e3dc:	4b28      	ldr	r3, [pc, #160]	; (801e480 <netif_loop_output+0xc8>)
 801e3de:	f240 424c 	movw	r2, #1100	; 0x44c
 801e3e2:	492a      	ldr	r1, [pc, #168]	; (801e48c <netif_loop_output+0xd4>)
 801e3e4:	4828      	ldr	r0, [pc, #160]	; (801e488 <netif_loop_output+0xd0>)
 801e3e6:	f004 f8dd 	bl	80225a4 <iprintf>

  /* Allocate a new pbuf */
  r = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 801e3ea:	683b      	ldr	r3, [r7, #0]
 801e3ec:	891b      	ldrh	r3, [r3, #8]
 801e3ee:	f44f 7220 	mov.w	r2, #640	; 0x280
 801e3f2:	4619      	mov	r1, r3
 801e3f4:	200e      	movs	r0, #14
 801e3f6:	f000 f8bb 	bl	801e570 <pbuf_alloc>
 801e3fa:	6138      	str	r0, [r7, #16]
  if (r == NULL) {
 801e3fc:	693b      	ldr	r3, [r7, #16]
 801e3fe:	2b00      	cmp	r3, #0
 801e400:	d102      	bne.n	801e408 <netif_loop_output+0x50>
    LINK_STATS_INC(link.memerr);
    LINK_STATS_INC(link.drop);
    MIB2_STATS_NETIF_INC(stats_if, ifoutdiscards);
    return ERR_MEM;
 801e402:	f04f 33ff 	mov.w	r3, #4294967295
 801e406:	e037      	b.n	801e478 <netif_loop_output+0xc0>
  }
  netif->loop_cnt_current = (u16_t)(netif->loop_cnt_current + clen);
#endif /* LWIP_LOOPBACK_MAX_PBUFS */

  /* Copy the whole pbuf queue p into the single pbuf r */
  if ((err = pbuf_copy(r, p)) != ERR_OK) {
 801e408:	6839      	ldr	r1, [r7, #0]
 801e40a:	6938      	ldr	r0, [r7, #16]
 801e40c:	f000 fcba 	bl	801ed84 <pbuf_copy>
 801e410:	4603      	mov	r3, r0
 801e412:	73fb      	strb	r3, [r7, #15]
 801e414:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e418:	2b00      	cmp	r3, #0
 801e41a:	d005      	beq.n	801e428 <netif_loop_output+0x70>
    pbuf_free(r);
 801e41c:	6938      	ldr	r0, [r7, #16]
 801e41e:	f000 fb89 	bl	801eb34 <pbuf_free>
    LINK_STATS_INC(link.memerr);
    LINK_STATS_INC(link.drop);
    MIB2_STATS_NETIF_INC(stats_if, ifoutdiscards);
    return err;
 801e422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e426:	e027      	b.n	801e478 <netif_loop_output+0xc0>

  /* Put the packet on a linked list which gets emptied through calling
     netif_poll(). */

  /* let last point to the last pbuf in chain r */
  for (last = r; last->next != NULL; last = last->next) {
 801e428:	693b      	ldr	r3, [r7, #16]
 801e42a:	617b      	str	r3, [r7, #20]
 801e42c:	e002      	b.n	801e434 <netif_loop_output+0x7c>
 801e42e:	697b      	ldr	r3, [r7, #20]
 801e430:	681b      	ldr	r3, [r3, #0]
 801e432:	617b      	str	r3, [r7, #20]
 801e434:	697b      	ldr	r3, [r7, #20]
 801e436:	681b      	ldr	r3, [r3, #0]
 801e438:	2b00      	cmp	r3, #0
 801e43a:	d1f8      	bne.n	801e42e <netif_loop_output+0x76>
    /* nothing to do here, just get to the last pbuf */
  }

  SYS_ARCH_PROTECT(lev);
  if (netif->loop_first != NULL) {
 801e43c:	687b      	ldr	r3, [r7, #4]
 801e43e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e440:	2b00      	cmp	r3, #0
 801e442:	d012      	beq.n	801e46a <netif_loop_output+0xb2>
    LWIP_ASSERT("if first != NULL, last must also be != NULL", netif->loop_last != NULL);
 801e444:	687b      	ldr	r3, [r7, #4]
 801e446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e448:	2b00      	cmp	r3, #0
 801e44a:	d106      	bne.n	801e45a <netif_loop_output+0xa2>
 801e44c:	4b0c      	ldr	r3, [pc, #48]	; (801e480 <netif_loop_output+0xc8>)
 801e44e:	f240 4277 	movw	r2, #1143	; 0x477
 801e452:	490f      	ldr	r1, [pc, #60]	; (801e490 <netif_loop_output+0xd8>)
 801e454:	480c      	ldr	r0, [pc, #48]	; (801e488 <netif_loop_output+0xd0>)
 801e456:	f004 f8a5 	bl	80225a4 <iprintf>
    netif->loop_last->next = r;
 801e45a:	687b      	ldr	r3, [r7, #4]
 801e45c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e45e:	693a      	ldr	r2, [r7, #16]
 801e460:	601a      	str	r2, [r3, #0]
    netif->loop_last = last;
 801e462:	687b      	ldr	r3, [r7, #4]
 801e464:	697a      	ldr	r2, [r7, #20]
 801e466:	63da      	str	r2, [r3, #60]	; 0x3c
 801e468:	e005      	b.n	801e476 <netif_loop_output+0xbe>
  } else {
    netif->loop_first = r;
 801e46a:	687b      	ldr	r3, [r7, #4]
 801e46c:	693a      	ldr	r2, [r7, #16]
 801e46e:	639a      	str	r2, [r3, #56]	; 0x38
    netif->loop_last = last;
 801e470:	687b      	ldr	r3, [r7, #4]
 801e472:	697a      	ldr	r2, [r7, #20]
 801e474:	63da      	str	r2, [r3, #60]	; 0x3c
  if (schedule_poll) {
    tcpip_try_callback((tcpip_callback_fn)netif_poll, netif);
  }
#endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */

  return ERR_OK;
 801e476:	2300      	movs	r3, #0
}
 801e478:	4618      	mov	r0, r3
 801e47a:	3718      	adds	r7, #24
 801e47c:	46bd      	mov	sp, r7
 801e47e:	bd80      	pop	{r7, pc}
 801e480:	080275e0 	.word	0x080275e0
 801e484:	08027870 	.word	0x08027870
 801e488:	08027674 	.word	0x08027674
 801e48c:	08027894 	.word	0x08027894
 801e490:	080278b4 	.word	0x080278b4

0801e494 <netif_loop_output_ipv4>:

#if LWIP_HAVE_LOOPIF
#if LWIP_IPV4
static err_t
netif_loop_output_ipv4(struct netif *netif, struct pbuf *p, const ip4_addr_t *addr)
{
 801e494:	b580      	push	{r7, lr}
 801e496:	b084      	sub	sp, #16
 801e498:	af00      	add	r7, sp, #0
 801e49a:	60f8      	str	r0, [r7, #12]
 801e49c:	60b9      	str	r1, [r7, #8]
 801e49e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(addr);
  return netif_loop_output(netif, p);
 801e4a0:	68b9      	ldr	r1, [r7, #8]
 801e4a2:	68f8      	ldr	r0, [r7, #12]
 801e4a4:	f7ff ff88 	bl	801e3b8 <netif_loop_output>
 801e4a8:	4603      	mov	r3, r0
}
 801e4aa:	4618      	mov	r0, r3
 801e4ac:	3710      	adds	r7, #16
 801e4ae:	46bd      	mov	sp, r7
 801e4b0:	bd80      	pop	{r7, pc}

0801e4b2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 801e4b2:	b480      	push	{r7}
 801e4b4:	b085      	sub	sp, #20
 801e4b6:	af00      	add	r7, sp, #0
 801e4b8:	60f8      	str	r0, [r7, #12]
 801e4ba:	60b9      	str	r1, [r7, #8]
 801e4bc:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801e4be:	f06f 030b 	mvn.w	r3, #11
}
 801e4c2:	4618      	mov	r0, r3
 801e4c4:	3714      	adds	r7, #20
 801e4c6:	46bd      	mov	sp, r7
 801e4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e4cc:	4770      	bx	lr
	...

0801e4d0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 801e4d0:	b480      	push	{r7}
 801e4d2:	b085      	sub	sp, #20
 801e4d4:	af00      	add	r7, sp, #0
 801e4d6:	4603      	mov	r3, r0
 801e4d8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801e4da:	79fb      	ldrb	r3, [r7, #7]
 801e4dc:	2b00      	cmp	r3, #0
 801e4de:	d013      	beq.n	801e508 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 801e4e0:	4b0d      	ldr	r3, [pc, #52]	; (801e518 <netif_get_by_index+0x48>)
 801e4e2:	681b      	ldr	r3, [r3, #0]
 801e4e4:	60fb      	str	r3, [r7, #12]
 801e4e6:	e00c      	b.n	801e502 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 801e4e8:	68fb      	ldr	r3, [r7, #12]
 801e4ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801e4ee:	3301      	adds	r3, #1
 801e4f0:	b2db      	uxtb	r3, r3
 801e4f2:	79fa      	ldrb	r2, [r7, #7]
 801e4f4:	429a      	cmp	r2, r3
 801e4f6:	d101      	bne.n	801e4fc <netif_get_by_index+0x2c>
        return netif; /* found! */
 801e4f8:	68fb      	ldr	r3, [r7, #12]
 801e4fa:	e006      	b.n	801e50a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 801e4fc:	68fb      	ldr	r3, [r7, #12]
 801e4fe:	681b      	ldr	r3, [r3, #0]
 801e500:	60fb      	str	r3, [r7, #12]
 801e502:	68fb      	ldr	r3, [r7, #12]
 801e504:	2b00      	cmp	r3, #0
 801e506:	d1ef      	bne.n	801e4e8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 801e508:	2300      	movs	r3, #0
}
 801e50a:	4618      	mov	r0, r3
 801e50c:	3714      	adds	r7, #20
 801e50e:	46bd      	mov	sp, r7
 801e510:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e514:	4770      	bx	lr
 801e516:	bf00      	nop
 801e518:	20013d78 	.word	0x20013d78

0801e51c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 801e51c:	b480      	push	{r7}
 801e51e:	b085      	sub	sp, #20
 801e520:	af00      	add	r7, sp, #0
 801e522:	60f8      	str	r0, [r7, #12]
 801e524:	60b9      	str	r1, [r7, #8]
 801e526:	4611      	mov	r1, r2
 801e528:	461a      	mov	r2, r3
 801e52a:	460b      	mov	r3, r1
 801e52c:	80fb      	strh	r3, [r7, #6]
 801e52e:	4613      	mov	r3, r2
 801e530:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 801e532:	68fb      	ldr	r3, [r7, #12]
 801e534:	2200      	movs	r2, #0
 801e536:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 801e538:	68fb      	ldr	r3, [r7, #12]
 801e53a:	68ba      	ldr	r2, [r7, #8]
 801e53c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 801e53e:	68fb      	ldr	r3, [r7, #12]
 801e540:	88fa      	ldrh	r2, [r7, #6]
 801e542:	811a      	strh	r2, [r3, #8]
  p->len = len;
 801e544:	68fb      	ldr	r3, [r7, #12]
 801e546:	88ba      	ldrh	r2, [r7, #4]
 801e548:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 801e54a:	8b3b      	ldrh	r3, [r7, #24]
 801e54c:	b2da      	uxtb	r2, r3
 801e54e:	68fb      	ldr	r3, [r7, #12]
 801e550:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 801e552:	68fb      	ldr	r3, [r7, #12]
 801e554:	7f3a      	ldrb	r2, [r7, #28]
 801e556:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 801e558:	68fb      	ldr	r3, [r7, #12]
 801e55a:	2201      	movs	r2, #1
 801e55c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 801e55e:	68fb      	ldr	r3, [r7, #12]
 801e560:	2200      	movs	r2, #0
 801e562:	73da      	strb	r2, [r3, #15]
}
 801e564:	bf00      	nop
 801e566:	3714      	adds	r7, #20
 801e568:	46bd      	mov	sp, r7
 801e56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e56e:	4770      	bx	lr

0801e570 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 801e570:	b580      	push	{r7, lr}
 801e572:	b08c      	sub	sp, #48	; 0x30
 801e574:	af02      	add	r7, sp, #8
 801e576:	4603      	mov	r3, r0
 801e578:	71fb      	strb	r3, [r7, #7]
 801e57a:	460b      	mov	r3, r1
 801e57c:	80bb      	strh	r3, [r7, #4]
 801e57e:	4613      	mov	r3, r2
 801e580:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 801e582:	79fb      	ldrb	r3, [r7, #7]
 801e584:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 801e586:	887b      	ldrh	r3, [r7, #2]
 801e588:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 801e58c:	d07d      	beq.n	801e68a <pbuf_alloc+0x11a>
 801e58e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 801e592:	f300 80c6 	bgt.w	801e722 <pbuf_alloc+0x1b2>
 801e596:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 801e59a:	d010      	beq.n	801e5be <pbuf_alloc+0x4e>
 801e59c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 801e5a0:	f300 80bf 	bgt.w	801e722 <pbuf_alloc+0x1b2>
 801e5a4:	2b01      	cmp	r3, #1
 801e5a6:	d002      	beq.n	801e5ae <pbuf_alloc+0x3e>
 801e5a8:	2b41      	cmp	r3, #65	; 0x41
 801e5aa:	f040 80ba 	bne.w	801e722 <pbuf_alloc+0x1b2>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 801e5ae:	887a      	ldrh	r2, [r7, #2]
 801e5b0:	88bb      	ldrh	r3, [r7, #4]
 801e5b2:	4619      	mov	r1, r3
 801e5b4:	2000      	movs	r0, #0
 801e5b6:	f000 f8cf 	bl	801e758 <pbuf_alloc_reference>
 801e5ba:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 801e5bc:	e0bb      	b.n	801e736 <pbuf_alloc+0x1c6>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 801e5be:	2300      	movs	r3, #0
 801e5c0:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 801e5c2:	2300      	movs	r3, #0
 801e5c4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 801e5c6:	88bb      	ldrh	r3, [r7, #4]
 801e5c8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801e5ca:	2005      	movs	r0, #5
 801e5cc:	f7ff fb32 	bl	801dc34 <memp_malloc>
 801e5d0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 801e5d2:	693b      	ldr	r3, [r7, #16]
 801e5d4:	2b00      	cmp	r3, #0
 801e5d6:	d107      	bne.n	801e5e8 <pbuf_alloc+0x78>
          PBUF_POOL_IS_EMPTY();
          /* free chain so far allocated */
          if (p) {
 801e5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e5da:	2b00      	cmp	r3, #0
 801e5dc:	d002      	beq.n	801e5e4 <pbuf_alloc+0x74>
            pbuf_free(p);
 801e5de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e5e0:	f000 faa8 	bl	801eb34 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 801e5e4:	2300      	movs	r3, #0
 801e5e6:	e0a7      	b.n	801e738 <pbuf_alloc+0x1c8>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801e5e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e5ea:	3303      	adds	r3, #3
 801e5ec:	b29b      	uxth	r3, r3
 801e5ee:	f023 0303 	bic.w	r3, r3, #3
 801e5f2:	b29b      	uxth	r3, r3
 801e5f4:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 801e5f8:	b29b      	uxth	r3, r3
 801e5fa:	8b7a      	ldrh	r2, [r7, #26]
 801e5fc:	4293      	cmp	r3, r2
 801e5fe:	bf28      	it	cs
 801e600:	4613      	movcs	r3, r2
 801e602:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801e604:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e606:	3310      	adds	r3, #16
 801e608:	693a      	ldr	r2, [r7, #16]
 801e60a:	4413      	add	r3, r2
 801e60c:	3303      	adds	r3, #3
 801e60e:	f023 0303 	bic.w	r3, r3, #3
 801e612:	4618      	mov	r0, r3
 801e614:	89f9      	ldrh	r1, [r7, #14]
 801e616:	8b7a      	ldrh	r2, [r7, #26]
 801e618:	2300      	movs	r3, #0
 801e61a:	9301      	str	r3, [sp, #4]
 801e61c:	887b      	ldrh	r3, [r7, #2]
 801e61e:	9300      	str	r3, [sp, #0]
 801e620:	460b      	mov	r3, r1
 801e622:	4601      	mov	r1, r0
 801e624:	6938      	ldr	r0, [r7, #16]
 801e626:	f7ff ff79 	bl	801e51c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801e62a:	693b      	ldr	r3, [r7, #16]
 801e62c:	685b      	ldr	r3, [r3, #4]
 801e62e:	f003 0303 	and.w	r3, r3, #3
 801e632:	2b00      	cmp	r3, #0
 801e634:	d006      	beq.n	801e644 <pbuf_alloc+0xd4>
 801e636:	4b42      	ldr	r3, [pc, #264]	; (801e740 <pbuf_alloc+0x1d0>)
 801e638:	f44f 7280 	mov.w	r2, #256	; 0x100
 801e63c:	4941      	ldr	r1, [pc, #260]	; (801e744 <pbuf_alloc+0x1d4>)
 801e63e:	4842      	ldr	r0, [pc, #264]	; (801e748 <pbuf_alloc+0x1d8>)
 801e640:	f003 ffb0 	bl	80225a4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 801e644:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e646:	3303      	adds	r3, #3
 801e648:	f023 0303 	bic.w	r3, r3, #3
 801e64c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 801e650:	d106      	bne.n	801e660 <pbuf_alloc+0xf0>
 801e652:	4b3b      	ldr	r3, [pc, #236]	; (801e740 <pbuf_alloc+0x1d0>)
 801e654:	f44f 7281 	mov.w	r2, #258	; 0x102
 801e658:	493c      	ldr	r1, [pc, #240]	; (801e74c <pbuf_alloc+0x1dc>)
 801e65a:	483b      	ldr	r0, [pc, #236]	; (801e748 <pbuf_alloc+0x1d8>)
 801e65c:	f003 ffa2 	bl	80225a4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 801e660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e662:	2b00      	cmp	r3, #0
 801e664:	d102      	bne.n	801e66c <pbuf_alloc+0xfc>
          /* allocated head of pbuf chain (into p) */
          p = q;
 801e666:	693b      	ldr	r3, [r7, #16]
 801e668:	627b      	str	r3, [r7, #36]	; 0x24
 801e66a:	e002      	b.n	801e672 <pbuf_alloc+0x102>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 801e66c:	69fb      	ldr	r3, [r7, #28]
 801e66e:	693a      	ldr	r2, [r7, #16]
 801e670:	601a      	str	r2, [r3, #0]
        }
        last = q;
 801e672:	693b      	ldr	r3, [r7, #16]
 801e674:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 801e676:	8b7a      	ldrh	r2, [r7, #26]
 801e678:	89fb      	ldrh	r3, [r7, #14]
 801e67a:	1ad3      	subs	r3, r2, r3
 801e67c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 801e67e:	2300      	movs	r3, #0
 801e680:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 801e682:	8b7b      	ldrh	r3, [r7, #26]
 801e684:	2b00      	cmp	r3, #0
 801e686:	d1a0      	bne.n	801e5ca <pbuf_alloc+0x5a>
      break;
 801e688:	e055      	b.n	801e736 <pbuf_alloc+0x1c6>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801e68a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e68c:	3303      	adds	r3, #3
 801e68e:	b29b      	uxth	r3, r3
 801e690:	f023 0303 	bic.w	r3, r3, #3
 801e694:	b29a      	uxth	r2, r3
 801e696:	88bb      	ldrh	r3, [r7, #4]
 801e698:	3303      	adds	r3, #3
 801e69a:	b29b      	uxth	r3, r3
 801e69c:	f023 0303 	bic.w	r3, r3, #3
 801e6a0:	b29b      	uxth	r3, r3
 801e6a2:	4413      	add	r3, r2
 801e6a4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801e6a6:	8b3b      	ldrh	r3, [r7, #24]
 801e6a8:	3310      	adds	r3, #16
 801e6aa:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801e6ac:	8b3a      	ldrh	r2, [r7, #24]
 801e6ae:	88bb      	ldrh	r3, [r7, #4]
 801e6b0:	3303      	adds	r3, #3
 801e6b2:	f023 0303 	bic.w	r3, r3, #3
 801e6b6:	429a      	cmp	r2, r3
 801e6b8:	d306      	bcc.n	801e6c8 <pbuf_alloc+0x158>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 801e6ba:	8afa      	ldrh	r2, [r7, #22]
 801e6bc:	88bb      	ldrh	r3, [r7, #4]
 801e6be:	3303      	adds	r3, #3
 801e6c0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801e6c4:	429a      	cmp	r2, r3
 801e6c6:	d201      	bcs.n	801e6cc <pbuf_alloc+0x15c>
        return NULL;
 801e6c8:	2300      	movs	r3, #0
 801e6ca:	e035      	b.n	801e738 <pbuf_alloc+0x1c8>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 801e6cc:	8afb      	ldrh	r3, [r7, #22]
 801e6ce:	4618      	mov	r0, r3
 801e6d0:	f7ff f920 	bl	801d914 <mem_malloc>
 801e6d4:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 801e6d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e6d8:	2b00      	cmp	r3, #0
 801e6da:	d101      	bne.n	801e6e0 <pbuf_alloc+0x170>
        return NULL;
 801e6dc:	2300      	movs	r3, #0
 801e6de:	e02b      	b.n	801e738 <pbuf_alloc+0x1c8>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801e6e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e6e2:	3310      	adds	r3, #16
 801e6e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e6e6:	4413      	add	r3, r2
 801e6e8:	3303      	adds	r3, #3
 801e6ea:	f023 0303 	bic.w	r3, r3, #3
 801e6ee:	4618      	mov	r0, r3
 801e6f0:	88b9      	ldrh	r1, [r7, #4]
 801e6f2:	88ba      	ldrh	r2, [r7, #4]
 801e6f4:	2300      	movs	r3, #0
 801e6f6:	9301      	str	r3, [sp, #4]
 801e6f8:	887b      	ldrh	r3, [r7, #2]
 801e6fa:	9300      	str	r3, [sp, #0]
 801e6fc:	460b      	mov	r3, r1
 801e6fe:	4601      	mov	r1, r0
 801e700:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e702:	f7ff ff0b 	bl	801e51c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801e706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e708:	685b      	ldr	r3, [r3, #4]
 801e70a:	f003 0303 	and.w	r3, r3, #3
 801e70e:	2b00      	cmp	r3, #0
 801e710:	d010      	beq.n	801e734 <pbuf_alloc+0x1c4>
 801e712:	4b0b      	ldr	r3, [pc, #44]	; (801e740 <pbuf_alloc+0x1d0>)
 801e714:	f44f 7291 	mov.w	r2, #290	; 0x122
 801e718:	490d      	ldr	r1, [pc, #52]	; (801e750 <pbuf_alloc+0x1e0>)
 801e71a:	480b      	ldr	r0, [pc, #44]	; (801e748 <pbuf_alloc+0x1d8>)
 801e71c:	f003 ff42 	bl	80225a4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 801e720:	e008      	b.n	801e734 <pbuf_alloc+0x1c4>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801e722:	4b07      	ldr	r3, [pc, #28]	; (801e740 <pbuf_alloc+0x1d0>)
 801e724:	f240 1227 	movw	r2, #295	; 0x127
 801e728:	490a      	ldr	r1, [pc, #40]	; (801e754 <pbuf_alloc+0x1e4>)
 801e72a:	4807      	ldr	r0, [pc, #28]	; (801e748 <pbuf_alloc+0x1d8>)
 801e72c:	f003 ff3a 	bl	80225a4 <iprintf>
      return NULL;
 801e730:	2300      	movs	r3, #0
 801e732:	e001      	b.n	801e738 <pbuf_alloc+0x1c8>
      break;
 801e734:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 801e736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801e738:	4618      	mov	r0, r3
 801e73a:	3728      	adds	r7, #40	; 0x28
 801e73c:	46bd      	mov	sp, r7
 801e73e:	bd80      	pop	{r7, pc}
 801e740:	08027954 	.word	0x08027954
 801e744:	080279c4 	.word	0x080279c4
 801e748:	080279f4 	.word	0x080279f4
 801e74c:	08027a1c 	.word	0x08027a1c
 801e750:	08027a50 	.word	0x08027a50
 801e754:	08027a7c 	.word	0x08027a7c

0801e758 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 801e758:	b580      	push	{r7, lr}
 801e75a:	b086      	sub	sp, #24
 801e75c:	af02      	add	r7, sp, #8
 801e75e:	6078      	str	r0, [r7, #4]
 801e760:	460b      	mov	r3, r1
 801e762:	807b      	strh	r3, [r7, #2]
 801e764:	4613      	mov	r3, r2
 801e766:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801e768:	883b      	ldrh	r3, [r7, #0]
 801e76a:	2b41      	cmp	r3, #65	; 0x41
 801e76c:	d009      	beq.n	801e782 <pbuf_alloc_reference+0x2a>
 801e76e:	883b      	ldrh	r3, [r7, #0]
 801e770:	2b01      	cmp	r3, #1
 801e772:	d006      	beq.n	801e782 <pbuf_alloc_reference+0x2a>
 801e774:	4b0f      	ldr	r3, [pc, #60]	; (801e7b4 <pbuf_alloc_reference+0x5c>)
 801e776:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 801e77a:	490f      	ldr	r1, [pc, #60]	; (801e7b8 <pbuf_alloc_reference+0x60>)
 801e77c:	480f      	ldr	r0, [pc, #60]	; (801e7bc <pbuf_alloc_reference+0x64>)
 801e77e:	f003 ff11 	bl	80225a4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801e782:	2004      	movs	r0, #4
 801e784:	f7ff fa56 	bl	801dc34 <memp_malloc>
 801e788:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801e78a:	68fb      	ldr	r3, [r7, #12]
 801e78c:	2b00      	cmp	r3, #0
 801e78e:	d101      	bne.n	801e794 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 801e790:	2300      	movs	r3, #0
 801e792:	e00b      	b.n	801e7ac <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 801e794:	8879      	ldrh	r1, [r7, #2]
 801e796:	887a      	ldrh	r2, [r7, #2]
 801e798:	2300      	movs	r3, #0
 801e79a:	9301      	str	r3, [sp, #4]
 801e79c:	883b      	ldrh	r3, [r7, #0]
 801e79e:	9300      	str	r3, [sp, #0]
 801e7a0:	460b      	mov	r3, r1
 801e7a2:	6879      	ldr	r1, [r7, #4]
 801e7a4:	68f8      	ldr	r0, [r7, #12]
 801e7a6:	f7ff feb9 	bl	801e51c <pbuf_init_alloced_pbuf>
  return p;
 801e7aa:	68fb      	ldr	r3, [r7, #12]
}
 801e7ac:	4618      	mov	r0, r3
 801e7ae:	3710      	adds	r7, #16
 801e7b0:	46bd      	mov	sp, r7
 801e7b2:	bd80      	pop	{r7, pc}
 801e7b4:	08027954 	.word	0x08027954
 801e7b8:	08027a98 	.word	0x08027a98
 801e7bc:	080279f4 	.word	0x080279f4

0801e7c0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 801e7c0:	b580      	push	{r7, lr}
 801e7c2:	b088      	sub	sp, #32
 801e7c4:	af02      	add	r7, sp, #8
 801e7c6:	607b      	str	r3, [r7, #4]
 801e7c8:	4603      	mov	r3, r0
 801e7ca:	73fb      	strb	r3, [r7, #15]
 801e7cc:	460b      	mov	r3, r1
 801e7ce:	81bb      	strh	r3, [r7, #12]
 801e7d0:	4613      	mov	r3, r2
 801e7d2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 801e7d4:	7bfb      	ldrb	r3, [r7, #15]
 801e7d6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801e7d8:	8a7b      	ldrh	r3, [r7, #18]
 801e7da:	3303      	adds	r3, #3
 801e7dc:	f023 0203 	bic.w	r2, r3, #3
 801e7e0:	89bb      	ldrh	r3, [r7, #12]
 801e7e2:	441a      	add	r2, r3
 801e7e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801e7e6:	429a      	cmp	r2, r3
 801e7e8:	d901      	bls.n	801e7ee <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801e7ea:	2300      	movs	r3, #0
 801e7ec:	e018      	b.n	801e820 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 801e7ee:	6a3b      	ldr	r3, [r7, #32]
 801e7f0:	2b00      	cmp	r3, #0
 801e7f2:	d007      	beq.n	801e804 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 801e7f4:	8a7b      	ldrh	r3, [r7, #18]
 801e7f6:	3303      	adds	r3, #3
 801e7f8:	f023 0303 	bic.w	r3, r3, #3
 801e7fc:	6a3a      	ldr	r2, [r7, #32]
 801e7fe:	4413      	add	r3, r2
 801e800:	617b      	str	r3, [r7, #20]
 801e802:	e001      	b.n	801e808 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 801e804:	2300      	movs	r3, #0
 801e806:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 801e808:	6878      	ldr	r0, [r7, #4]
 801e80a:	89b9      	ldrh	r1, [r7, #12]
 801e80c:	89ba      	ldrh	r2, [r7, #12]
 801e80e:	2302      	movs	r3, #2
 801e810:	9301      	str	r3, [sp, #4]
 801e812:	897b      	ldrh	r3, [r7, #10]
 801e814:	9300      	str	r3, [sp, #0]
 801e816:	460b      	mov	r3, r1
 801e818:	6979      	ldr	r1, [r7, #20]
 801e81a:	f7ff fe7f 	bl	801e51c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 801e81e:	687b      	ldr	r3, [r7, #4]
}
 801e820:	4618      	mov	r0, r3
 801e822:	3718      	adds	r7, #24
 801e824:	46bd      	mov	sp, r7
 801e826:	bd80      	pop	{r7, pc}

0801e828 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 801e828:	b580      	push	{r7, lr}
 801e82a:	b084      	sub	sp, #16
 801e82c:	af00      	add	r7, sp, #0
 801e82e:	6078      	str	r0, [r7, #4]
 801e830:	460b      	mov	r3, r1
 801e832:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801e834:	687b      	ldr	r3, [r7, #4]
 801e836:	2b00      	cmp	r3, #0
 801e838:	d106      	bne.n	801e848 <pbuf_realloc+0x20>
 801e83a:	4b3a      	ldr	r3, [pc, #232]	; (801e924 <pbuf_realloc+0xfc>)
 801e83c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 801e840:	4939      	ldr	r1, [pc, #228]	; (801e928 <pbuf_realloc+0x100>)
 801e842:	483a      	ldr	r0, [pc, #232]	; (801e92c <pbuf_realloc+0x104>)
 801e844:	f003 feae 	bl	80225a4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 801e848:	687b      	ldr	r3, [r7, #4]
 801e84a:	891b      	ldrh	r3, [r3, #8]
 801e84c:	887a      	ldrh	r2, [r7, #2]
 801e84e:	429a      	cmp	r2, r3
 801e850:	d263      	bcs.n	801e91a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 801e852:	687b      	ldr	r3, [r7, #4]
 801e854:	891a      	ldrh	r2, [r3, #8]
 801e856:	887b      	ldrh	r3, [r7, #2]
 801e858:	1ad3      	subs	r3, r2, r3
 801e85a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 801e85c:	887b      	ldrh	r3, [r7, #2]
 801e85e:	817b      	strh	r3, [r7, #10]
  q = p;
 801e860:	687b      	ldr	r3, [r7, #4]
 801e862:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 801e864:	e018      	b.n	801e898 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 801e866:	68fb      	ldr	r3, [r7, #12]
 801e868:	895b      	ldrh	r3, [r3, #10]
 801e86a:	897a      	ldrh	r2, [r7, #10]
 801e86c:	1ad3      	subs	r3, r2, r3
 801e86e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801e870:	68fb      	ldr	r3, [r7, #12]
 801e872:	891a      	ldrh	r2, [r3, #8]
 801e874:	893b      	ldrh	r3, [r7, #8]
 801e876:	1ad3      	subs	r3, r2, r3
 801e878:	b29a      	uxth	r2, r3
 801e87a:	68fb      	ldr	r3, [r7, #12]
 801e87c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 801e87e:	68fb      	ldr	r3, [r7, #12]
 801e880:	681b      	ldr	r3, [r3, #0]
 801e882:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801e884:	68fb      	ldr	r3, [r7, #12]
 801e886:	2b00      	cmp	r3, #0
 801e888:	d106      	bne.n	801e898 <pbuf_realloc+0x70>
 801e88a:	4b26      	ldr	r3, [pc, #152]	; (801e924 <pbuf_realloc+0xfc>)
 801e88c:	f240 12af 	movw	r2, #431	; 0x1af
 801e890:	4927      	ldr	r1, [pc, #156]	; (801e930 <pbuf_realloc+0x108>)
 801e892:	4826      	ldr	r0, [pc, #152]	; (801e92c <pbuf_realloc+0x104>)
 801e894:	f003 fe86 	bl	80225a4 <iprintf>
  while (rem_len > q->len) {
 801e898:	68fb      	ldr	r3, [r7, #12]
 801e89a:	895b      	ldrh	r3, [r3, #10]
 801e89c:	897a      	ldrh	r2, [r7, #10]
 801e89e:	429a      	cmp	r2, r3
 801e8a0:	d8e1      	bhi.n	801e866 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801e8a2:	68fb      	ldr	r3, [r7, #12]
 801e8a4:	7b1b      	ldrb	r3, [r3, #12]
 801e8a6:	f003 030f 	and.w	r3, r3, #15
 801e8aa:	2b00      	cmp	r3, #0
 801e8ac:	d121      	bne.n	801e8f2 <pbuf_realloc+0xca>
 801e8ae:	68fb      	ldr	r3, [r7, #12]
 801e8b0:	895b      	ldrh	r3, [r3, #10]
 801e8b2:	897a      	ldrh	r2, [r7, #10]
 801e8b4:	429a      	cmp	r2, r3
 801e8b6:	d01c      	beq.n	801e8f2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 801e8b8:	68fb      	ldr	r3, [r7, #12]
 801e8ba:	7b5b      	ldrb	r3, [r3, #13]
 801e8bc:	f003 0302 	and.w	r3, r3, #2
 801e8c0:	2b00      	cmp	r3, #0
 801e8c2:	d116      	bne.n	801e8f2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 801e8c4:	68fb      	ldr	r3, [r7, #12]
 801e8c6:	685a      	ldr	r2, [r3, #4]
 801e8c8:	68fb      	ldr	r3, [r7, #12]
 801e8ca:	1ad3      	subs	r3, r2, r3
 801e8cc:	b29a      	uxth	r2, r3
 801e8ce:	897b      	ldrh	r3, [r7, #10]
 801e8d0:	4413      	add	r3, r2
 801e8d2:	b29b      	uxth	r3, r3
 801e8d4:	4619      	mov	r1, r3
 801e8d6:	68f8      	ldr	r0, [r7, #12]
 801e8d8:	f7fe ff20 	bl	801d71c <mem_trim>
 801e8dc:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801e8de:	68fb      	ldr	r3, [r7, #12]
 801e8e0:	2b00      	cmp	r3, #0
 801e8e2:	d106      	bne.n	801e8f2 <pbuf_realloc+0xca>
 801e8e4:	4b0f      	ldr	r3, [pc, #60]	; (801e924 <pbuf_realloc+0xfc>)
 801e8e6:	f240 12bd 	movw	r2, #445	; 0x1bd
 801e8ea:	4912      	ldr	r1, [pc, #72]	; (801e934 <pbuf_realloc+0x10c>)
 801e8ec:	480f      	ldr	r0, [pc, #60]	; (801e92c <pbuf_realloc+0x104>)
 801e8ee:	f003 fe59 	bl	80225a4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801e8f2:	68fb      	ldr	r3, [r7, #12]
 801e8f4:	897a      	ldrh	r2, [r7, #10]
 801e8f6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 801e8f8:	68fb      	ldr	r3, [r7, #12]
 801e8fa:	895a      	ldrh	r2, [r3, #10]
 801e8fc:	68fb      	ldr	r3, [r7, #12]
 801e8fe:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 801e900:	68fb      	ldr	r3, [r7, #12]
 801e902:	681b      	ldr	r3, [r3, #0]
 801e904:	2b00      	cmp	r3, #0
 801e906:	d004      	beq.n	801e912 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 801e908:	68fb      	ldr	r3, [r7, #12]
 801e90a:	681b      	ldr	r3, [r3, #0]
 801e90c:	4618      	mov	r0, r3
 801e90e:	f000 f911 	bl	801eb34 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 801e912:	68fb      	ldr	r3, [r7, #12]
 801e914:	2200      	movs	r2, #0
 801e916:	601a      	str	r2, [r3, #0]
 801e918:	e000      	b.n	801e91c <pbuf_realloc+0xf4>
    return;
 801e91a:	bf00      	nop

}
 801e91c:	3710      	adds	r7, #16
 801e91e:	46bd      	mov	sp, r7
 801e920:	bd80      	pop	{r7, pc}
 801e922:	bf00      	nop
 801e924:	08027954 	.word	0x08027954
 801e928:	08027aac 	.word	0x08027aac
 801e92c:	080279f4 	.word	0x080279f4
 801e930:	08027ac4 	.word	0x08027ac4
 801e934:	08027adc 	.word	0x08027adc

0801e938 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 801e938:	b580      	push	{r7, lr}
 801e93a:	b086      	sub	sp, #24
 801e93c:	af00      	add	r7, sp, #0
 801e93e:	60f8      	str	r0, [r7, #12]
 801e940:	60b9      	str	r1, [r7, #8]
 801e942:	4613      	mov	r3, r2
 801e944:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801e946:	68fb      	ldr	r3, [r7, #12]
 801e948:	2b00      	cmp	r3, #0
 801e94a:	d106      	bne.n	801e95a <pbuf_add_header_impl+0x22>
 801e94c:	4b2b      	ldr	r3, [pc, #172]	; (801e9fc <pbuf_add_header_impl+0xc4>)
 801e94e:	f240 12df 	movw	r2, #479	; 0x1df
 801e952:	492b      	ldr	r1, [pc, #172]	; (801ea00 <pbuf_add_header_impl+0xc8>)
 801e954:	482b      	ldr	r0, [pc, #172]	; (801ea04 <pbuf_add_header_impl+0xcc>)
 801e956:	f003 fe25 	bl	80225a4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801e95a:	68fb      	ldr	r3, [r7, #12]
 801e95c:	2b00      	cmp	r3, #0
 801e95e:	d003      	beq.n	801e968 <pbuf_add_header_impl+0x30>
 801e960:	68bb      	ldr	r3, [r7, #8]
 801e962:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801e966:	d301      	bcc.n	801e96c <pbuf_add_header_impl+0x34>
    return 1;
 801e968:	2301      	movs	r3, #1
 801e96a:	e043      	b.n	801e9f4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 801e96c:	68bb      	ldr	r3, [r7, #8]
 801e96e:	2b00      	cmp	r3, #0
 801e970:	d101      	bne.n	801e976 <pbuf_add_header_impl+0x3e>
    return 0;
 801e972:	2300      	movs	r3, #0
 801e974:	e03e      	b.n	801e9f4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 801e976:	68bb      	ldr	r3, [r7, #8]
 801e978:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801e97a:	68fb      	ldr	r3, [r7, #12]
 801e97c:	891a      	ldrh	r2, [r3, #8]
 801e97e:	8a7b      	ldrh	r3, [r7, #18]
 801e980:	4413      	add	r3, r2
 801e982:	b29b      	uxth	r3, r3
 801e984:	8a7a      	ldrh	r2, [r7, #18]
 801e986:	429a      	cmp	r2, r3
 801e988:	d901      	bls.n	801e98e <pbuf_add_header_impl+0x56>
    return 1;
 801e98a:	2301      	movs	r3, #1
 801e98c:	e032      	b.n	801e9f4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 801e98e:	68fb      	ldr	r3, [r7, #12]
 801e990:	7b1b      	ldrb	r3, [r3, #12]
 801e992:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801e994:	8a3b      	ldrh	r3, [r7, #16]
 801e996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e99a:	2b00      	cmp	r3, #0
 801e99c:	d00c      	beq.n	801e9b8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801e99e:	68fb      	ldr	r3, [r7, #12]
 801e9a0:	685a      	ldr	r2, [r3, #4]
 801e9a2:	68bb      	ldr	r3, [r7, #8]
 801e9a4:	425b      	negs	r3, r3
 801e9a6:	4413      	add	r3, r2
 801e9a8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801e9aa:	68fb      	ldr	r3, [r7, #12]
 801e9ac:	3310      	adds	r3, #16
 801e9ae:	697a      	ldr	r2, [r7, #20]
 801e9b0:	429a      	cmp	r2, r3
 801e9b2:	d20d      	bcs.n	801e9d0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 801e9b4:	2301      	movs	r3, #1
 801e9b6:	e01d      	b.n	801e9f4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 801e9b8:	79fb      	ldrb	r3, [r7, #7]
 801e9ba:	2b00      	cmp	r3, #0
 801e9bc:	d006      	beq.n	801e9cc <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 801e9be:	68fb      	ldr	r3, [r7, #12]
 801e9c0:	685a      	ldr	r2, [r3, #4]
 801e9c2:	68bb      	ldr	r3, [r7, #8]
 801e9c4:	425b      	negs	r3, r3
 801e9c6:	4413      	add	r3, r2
 801e9c8:	617b      	str	r3, [r7, #20]
 801e9ca:	e001      	b.n	801e9d0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 801e9cc:	2301      	movs	r3, #1
 801e9ce:	e011      	b.n	801e9f4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 801e9d0:	68fb      	ldr	r3, [r7, #12]
 801e9d2:	697a      	ldr	r2, [r7, #20]
 801e9d4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801e9d6:	68fb      	ldr	r3, [r7, #12]
 801e9d8:	895a      	ldrh	r2, [r3, #10]
 801e9da:	8a7b      	ldrh	r3, [r7, #18]
 801e9dc:	4413      	add	r3, r2
 801e9de:	b29a      	uxth	r2, r3
 801e9e0:	68fb      	ldr	r3, [r7, #12]
 801e9e2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 801e9e4:	68fb      	ldr	r3, [r7, #12]
 801e9e6:	891a      	ldrh	r2, [r3, #8]
 801e9e8:	8a7b      	ldrh	r3, [r7, #18]
 801e9ea:	4413      	add	r3, r2
 801e9ec:	b29a      	uxth	r2, r3
 801e9ee:	68fb      	ldr	r3, [r7, #12]
 801e9f0:	811a      	strh	r2, [r3, #8]


  return 0;
 801e9f2:	2300      	movs	r3, #0
}
 801e9f4:	4618      	mov	r0, r3
 801e9f6:	3718      	adds	r7, #24
 801e9f8:	46bd      	mov	sp, r7
 801e9fa:	bd80      	pop	{r7, pc}
 801e9fc:	08027954 	.word	0x08027954
 801ea00:	08027af8 	.word	0x08027af8
 801ea04:	080279f4 	.word	0x080279f4

0801ea08 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 801ea08:	b580      	push	{r7, lr}
 801ea0a:	b082      	sub	sp, #8
 801ea0c:	af00      	add	r7, sp, #0
 801ea0e:	6078      	str	r0, [r7, #4]
 801ea10:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 801ea12:	2200      	movs	r2, #0
 801ea14:	6839      	ldr	r1, [r7, #0]
 801ea16:	6878      	ldr	r0, [r7, #4]
 801ea18:	f7ff ff8e 	bl	801e938 <pbuf_add_header_impl>
 801ea1c:	4603      	mov	r3, r0
}
 801ea1e:	4618      	mov	r0, r3
 801ea20:	3708      	adds	r7, #8
 801ea22:	46bd      	mov	sp, r7
 801ea24:	bd80      	pop	{r7, pc}
	...

0801ea28 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 801ea28:	b580      	push	{r7, lr}
 801ea2a:	b084      	sub	sp, #16
 801ea2c:	af00      	add	r7, sp, #0
 801ea2e:	6078      	str	r0, [r7, #4]
 801ea30:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801ea32:	687b      	ldr	r3, [r7, #4]
 801ea34:	2b00      	cmp	r3, #0
 801ea36:	d106      	bne.n	801ea46 <pbuf_remove_header+0x1e>
 801ea38:	4b20      	ldr	r3, [pc, #128]	; (801eabc <pbuf_remove_header+0x94>)
 801ea3a:	f240 224b 	movw	r2, #587	; 0x24b
 801ea3e:	4920      	ldr	r1, [pc, #128]	; (801eac0 <pbuf_remove_header+0x98>)
 801ea40:	4820      	ldr	r0, [pc, #128]	; (801eac4 <pbuf_remove_header+0x9c>)
 801ea42:	f003 fdaf 	bl	80225a4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801ea46:	687b      	ldr	r3, [r7, #4]
 801ea48:	2b00      	cmp	r3, #0
 801ea4a:	d003      	beq.n	801ea54 <pbuf_remove_header+0x2c>
 801ea4c:	683b      	ldr	r3, [r7, #0]
 801ea4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ea52:	d301      	bcc.n	801ea58 <pbuf_remove_header+0x30>
    return 1;
 801ea54:	2301      	movs	r3, #1
 801ea56:	e02c      	b.n	801eab2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 801ea58:	683b      	ldr	r3, [r7, #0]
 801ea5a:	2b00      	cmp	r3, #0
 801ea5c:	d101      	bne.n	801ea62 <pbuf_remove_header+0x3a>
    return 0;
 801ea5e:	2300      	movs	r3, #0
 801ea60:	e027      	b.n	801eab2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 801ea62:	683b      	ldr	r3, [r7, #0]
 801ea64:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801ea66:	687b      	ldr	r3, [r7, #4]
 801ea68:	895b      	ldrh	r3, [r3, #10]
 801ea6a:	89fa      	ldrh	r2, [r7, #14]
 801ea6c:	429a      	cmp	r2, r3
 801ea6e:	d908      	bls.n	801ea82 <pbuf_remove_header+0x5a>
 801ea70:	4b12      	ldr	r3, [pc, #72]	; (801eabc <pbuf_remove_header+0x94>)
 801ea72:	f240 2255 	movw	r2, #597	; 0x255
 801ea76:	4914      	ldr	r1, [pc, #80]	; (801eac8 <pbuf_remove_header+0xa0>)
 801ea78:	4812      	ldr	r0, [pc, #72]	; (801eac4 <pbuf_remove_header+0x9c>)
 801ea7a:	f003 fd93 	bl	80225a4 <iprintf>
 801ea7e:	2301      	movs	r3, #1
 801ea80:	e017      	b.n	801eab2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801ea82:	687b      	ldr	r3, [r7, #4]
 801ea84:	685b      	ldr	r3, [r3, #4]
 801ea86:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801ea88:	687b      	ldr	r3, [r7, #4]
 801ea8a:	685a      	ldr	r2, [r3, #4]
 801ea8c:	683b      	ldr	r3, [r7, #0]
 801ea8e:	441a      	add	r2, r3
 801ea90:	687b      	ldr	r3, [r7, #4]
 801ea92:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 801ea94:	687b      	ldr	r3, [r7, #4]
 801ea96:	895a      	ldrh	r2, [r3, #10]
 801ea98:	89fb      	ldrh	r3, [r7, #14]
 801ea9a:	1ad3      	subs	r3, r2, r3
 801ea9c:	b29a      	uxth	r2, r3
 801ea9e:	687b      	ldr	r3, [r7, #4]
 801eaa0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801eaa2:	687b      	ldr	r3, [r7, #4]
 801eaa4:	891a      	ldrh	r2, [r3, #8]
 801eaa6:	89fb      	ldrh	r3, [r7, #14]
 801eaa8:	1ad3      	subs	r3, r2, r3
 801eaaa:	b29a      	uxth	r2, r3
 801eaac:	687b      	ldr	r3, [r7, #4]
 801eaae:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 801eab0:	2300      	movs	r3, #0
}
 801eab2:	4618      	mov	r0, r3
 801eab4:	3710      	adds	r7, #16
 801eab6:	46bd      	mov	sp, r7
 801eab8:	bd80      	pop	{r7, pc}
 801eaba:	bf00      	nop
 801eabc:	08027954 	.word	0x08027954
 801eac0:	08027af8 	.word	0x08027af8
 801eac4:	080279f4 	.word	0x080279f4
 801eac8:	08027b04 	.word	0x08027b04

0801eacc <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 801eacc:	b580      	push	{r7, lr}
 801eace:	b082      	sub	sp, #8
 801ead0:	af00      	add	r7, sp, #0
 801ead2:	6078      	str	r0, [r7, #4]
 801ead4:	460b      	mov	r3, r1
 801ead6:	807b      	strh	r3, [r7, #2]
 801ead8:	4613      	mov	r3, r2
 801eada:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 801eadc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801eae0:	2b00      	cmp	r3, #0
 801eae2:	da08      	bge.n	801eaf6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 801eae4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801eae8:	425b      	negs	r3, r3
 801eaea:	4619      	mov	r1, r3
 801eaec:	6878      	ldr	r0, [r7, #4]
 801eaee:	f7ff ff9b 	bl	801ea28 <pbuf_remove_header>
 801eaf2:	4603      	mov	r3, r0
 801eaf4:	e007      	b.n	801eb06 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801eaf6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801eafa:	787a      	ldrb	r2, [r7, #1]
 801eafc:	4619      	mov	r1, r3
 801eafe:	6878      	ldr	r0, [r7, #4]
 801eb00:	f7ff ff1a 	bl	801e938 <pbuf_add_header_impl>
 801eb04:	4603      	mov	r3, r0
  }
}
 801eb06:	4618      	mov	r0, r3
 801eb08:	3708      	adds	r7, #8
 801eb0a:	46bd      	mov	sp, r7
 801eb0c:	bd80      	pop	{r7, pc}

0801eb0e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 801eb0e:	b580      	push	{r7, lr}
 801eb10:	b082      	sub	sp, #8
 801eb12:	af00      	add	r7, sp, #0
 801eb14:	6078      	str	r0, [r7, #4]
 801eb16:	460b      	mov	r3, r1
 801eb18:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801eb1a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801eb1e:	2201      	movs	r2, #1
 801eb20:	4619      	mov	r1, r3
 801eb22:	6878      	ldr	r0, [r7, #4]
 801eb24:	f7ff ffd2 	bl	801eacc <pbuf_header_impl>
 801eb28:	4603      	mov	r3, r0
}
 801eb2a:	4618      	mov	r0, r3
 801eb2c:	3708      	adds	r7, #8
 801eb2e:	46bd      	mov	sp, r7
 801eb30:	bd80      	pop	{r7, pc}
	...

0801eb34 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 801eb34:	b580      	push	{r7, lr}
 801eb36:	b086      	sub	sp, #24
 801eb38:	af00      	add	r7, sp, #0
 801eb3a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 801eb3c:	687b      	ldr	r3, [r7, #4]
 801eb3e:	2b00      	cmp	r3, #0
 801eb40:	d10b      	bne.n	801eb5a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801eb42:	687b      	ldr	r3, [r7, #4]
 801eb44:	2b00      	cmp	r3, #0
 801eb46:	d106      	bne.n	801eb56 <pbuf_free+0x22>
 801eb48:	4b38      	ldr	r3, [pc, #224]	; (801ec2c <pbuf_free+0xf8>)
 801eb4a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801eb4e:	4938      	ldr	r1, [pc, #224]	; (801ec30 <pbuf_free+0xfc>)
 801eb50:	4838      	ldr	r0, [pc, #224]	; (801ec34 <pbuf_free+0x100>)
 801eb52:	f003 fd27 	bl	80225a4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801eb56:	2300      	movs	r3, #0
 801eb58:	e063      	b.n	801ec22 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 801eb5a:	2300      	movs	r3, #0
 801eb5c:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801eb5e:	e05c      	b.n	801ec1a <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801eb60:	687b      	ldr	r3, [r7, #4]
 801eb62:	7b9b      	ldrb	r3, [r3, #14]
 801eb64:	2b00      	cmp	r3, #0
 801eb66:	d106      	bne.n	801eb76 <pbuf_free+0x42>
 801eb68:	4b30      	ldr	r3, [pc, #192]	; (801ec2c <pbuf_free+0xf8>)
 801eb6a:	f240 22f1 	movw	r2, #753	; 0x2f1
 801eb6e:	4932      	ldr	r1, [pc, #200]	; (801ec38 <pbuf_free+0x104>)
 801eb70:	4830      	ldr	r0, [pc, #192]	; (801ec34 <pbuf_free+0x100>)
 801eb72:	f003 fd17 	bl	80225a4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 801eb76:	687b      	ldr	r3, [r7, #4]
 801eb78:	7b9b      	ldrb	r3, [r3, #14]
 801eb7a:	3b01      	subs	r3, #1
 801eb7c:	b2da      	uxtb	r2, r3
 801eb7e:	687b      	ldr	r3, [r7, #4]
 801eb80:	739a      	strb	r2, [r3, #14]
 801eb82:	687b      	ldr	r3, [r7, #4]
 801eb84:	7b9b      	ldrb	r3, [r3, #14]
 801eb86:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 801eb88:	7dbb      	ldrb	r3, [r7, #22]
 801eb8a:	2b00      	cmp	r3, #0
 801eb8c:	d143      	bne.n	801ec16 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801eb8e:	687b      	ldr	r3, [r7, #4]
 801eb90:	681b      	ldr	r3, [r3, #0]
 801eb92:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 801eb94:	687b      	ldr	r3, [r7, #4]
 801eb96:	7b1b      	ldrb	r3, [r3, #12]
 801eb98:	f003 030f 	and.w	r3, r3, #15
 801eb9c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801eb9e:	687b      	ldr	r3, [r7, #4]
 801eba0:	7b5b      	ldrb	r3, [r3, #13]
 801eba2:	f003 0302 	and.w	r3, r3, #2
 801eba6:	2b00      	cmp	r3, #0
 801eba8:	d011      	beq.n	801ebce <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801ebaa:	687b      	ldr	r3, [r7, #4]
 801ebac:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801ebae:	68bb      	ldr	r3, [r7, #8]
 801ebb0:	691b      	ldr	r3, [r3, #16]
 801ebb2:	2b00      	cmp	r3, #0
 801ebb4:	d106      	bne.n	801ebc4 <pbuf_free+0x90>
 801ebb6:	4b1d      	ldr	r3, [pc, #116]	; (801ec2c <pbuf_free+0xf8>)
 801ebb8:	f240 22ff 	movw	r2, #767	; 0x2ff
 801ebbc:	491f      	ldr	r1, [pc, #124]	; (801ec3c <pbuf_free+0x108>)
 801ebbe:	481d      	ldr	r0, [pc, #116]	; (801ec34 <pbuf_free+0x100>)
 801ebc0:	f003 fcf0 	bl	80225a4 <iprintf>
        pc->custom_free_function(p);
 801ebc4:	68bb      	ldr	r3, [r7, #8]
 801ebc6:	691b      	ldr	r3, [r3, #16]
 801ebc8:	6878      	ldr	r0, [r7, #4]
 801ebca:	4798      	blx	r3
 801ebcc:	e01d      	b.n	801ec0a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801ebce:	7bfb      	ldrb	r3, [r7, #15]
 801ebd0:	2b02      	cmp	r3, #2
 801ebd2:	d104      	bne.n	801ebde <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 801ebd4:	6879      	ldr	r1, [r7, #4]
 801ebd6:	2005      	movs	r0, #5
 801ebd8:	f7ff f89c 	bl	801dd14 <memp_free>
 801ebdc:	e015      	b.n	801ec0a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801ebde:	7bfb      	ldrb	r3, [r7, #15]
 801ebe0:	2b01      	cmp	r3, #1
 801ebe2:	d104      	bne.n	801ebee <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 801ebe4:	6879      	ldr	r1, [r7, #4]
 801ebe6:	2004      	movs	r0, #4
 801ebe8:	f7ff f894 	bl	801dd14 <memp_free>
 801ebec:	e00d      	b.n	801ec0a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801ebee:	7bfb      	ldrb	r3, [r7, #15]
 801ebf0:	2b00      	cmp	r3, #0
 801ebf2:	d103      	bne.n	801ebfc <pbuf_free+0xc8>
          mem_free(p);
 801ebf4:	6878      	ldr	r0, [r7, #4]
 801ebf6:	f7fe fd27 	bl	801d648 <mem_free>
 801ebfa:	e006      	b.n	801ec0a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 801ebfc:	4b0b      	ldr	r3, [pc, #44]	; (801ec2c <pbuf_free+0xf8>)
 801ebfe:	f240 320f 	movw	r2, #783	; 0x30f
 801ec02:	490f      	ldr	r1, [pc, #60]	; (801ec40 <pbuf_free+0x10c>)
 801ec04:	480b      	ldr	r0, [pc, #44]	; (801ec34 <pbuf_free+0x100>)
 801ec06:	f003 fccd 	bl	80225a4 <iprintf>
        }
      }
      count++;
 801ec0a:	7dfb      	ldrb	r3, [r7, #23]
 801ec0c:	3301      	adds	r3, #1
 801ec0e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 801ec10:	693b      	ldr	r3, [r7, #16]
 801ec12:	607b      	str	r3, [r7, #4]
 801ec14:	e001      	b.n	801ec1a <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801ec16:	2300      	movs	r3, #0
 801ec18:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801ec1a:	687b      	ldr	r3, [r7, #4]
 801ec1c:	2b00      	cmp	r3, #0
 801ec1e:	d19f      	bne.n	801eb60 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 801ec20:	7dfb      	ldrb	r3, [r7, #23]
}
 801ec22:	4618      	mov	r0, r3
 801ec24:	3718      	adds	r7, #24
 801ec26:	46bd      	mov	sp, r7
 801ec28:	bd80      	pop	{r7, pc}
 801ec2a:	bf00      	nop
 801ec2c:	08027954 	.word	0x08027954
 801ec30:	08027af8 	.word	0x08027af8
 801ec34:	080279f4 	.word	0x080279f4
 801ec38:	08027b24 	.word	0x08027b24
 801ec3c:	08027b3c 	.word	0x08027b3c
 801ec40:	08027b60 	.word	0x08027b60

0801ec44 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 801ec44:	b480      	push	{r7}
 801ec46:	b085      	sub	sp, #20
 801ec48:	af00      	add	r7, sp, #0
 801ec4a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 801ec4c:	2300      	movs	r3, #0
 801ec4e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 801ec50:	e005      	b.n	801ec5e <pbuf_clen+0x1a>
    ++len;
 801ec52:	89fb      	ldrh	r3, [r7, #14]
 801ec54:	3301      	adds	r3, #1
 801ec56:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 801ec58:	687b      	ldr	r3, [r7, #4]
 801ec5a:	681b      	ldr	r3, [r3, #0]
 801ec5c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801ec5e:	687b      	ldr	r3, [r7, #4]
 801ec60:	2b00      	cmp	r3, #0
 801ec62:	d1f6      	bne.n	801ec52 <pbuf_clen+0xe>
  }
  return len;
 801ec64:	89fb      	ldrh	r3, [r7, #14]
}
 801ec66:	4618      	mov	r0, r3
 801ec68:	3714      	adds	r7, #20
 801ec6a:	46bd      	mov	sp, r7
 801ec6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ec70:	4770      	bx	lr
	...

0801ec74 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 801ec74:	b580      	push	{r7, lr}
 801ec76:	b082      	sub	sp, #8
 801ec78:	af00      	add	r7, sp, #0
 801ec7a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 801ec7c:	687b      	ldr	r3, [r7, #4]
 801ec7e:	2b00      	cmp	r3, #0
 801ec80:	d010      	beq.n	801eca4 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801ec82:	687b      	ldr	r3, [r7, #4]
 801ec84:	7b9b      	ldrb	r3, [r3, #14]
 801ec86:	3301      	adds	r3, #1
 801ec88:	b2da      	uxtb	r2, r3
 801ec8a:	687b      	ldr	r3, [r7, #4]
 801ec8c:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801ec8e:	687b      	ldr	r3, [r7, #4]
 801ec90:	7b9b      	ldrb	r3, [r3, #14]
 801ec92:	2b00      	cmp	r3, #0
 801ec94:	d106      	bne.n	801eca4 <pbuf_ref+0x30>
 801ec96:	4b05      	ldr	r3, [pc, #20]	; (801ecac <pbuf_ref+0x38>)
 801ec98:	f240 3242 	movw	r2, #834	; 0x342
 801ec9c:	4904      	ldr	r1, [pc, #16]	; (801ecb0 <pbuf_ref+0x3c>)
 801ec9e:	4805      	ldr	r0, [pc, #20]	; (801ecb4 <pbuf_ref+0x40>)
 801eca0:	f003 fc80 	bl	80225a4 <iprintf>
  }
}
 801eca4:	bf00      	nop
 801eca6:	3708      	adds	r7, #8
 801eca8:	46bd      	mov	sp, r7
 801ecaa:	bd80      	pop	{r7, pc}
 801ecac:	08027954 	.word	0x08027954
 801ecb0:	08027b74 	.word	0x08027b74
 801ecb4:	080279f4 	.word	0x080279f4

0801ecb8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 801ecb8:	b580      	push	{r7, lr}
 801ecba:	b084      	sub	sp, #16
 801ecbc:	af00      	add	r7, sp, #0
 801ecbe:	6078      	str	r0, [r7, #4]
 801ecc0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801ecc2:	687b      	ldr	r3, [r7, #4]
 801ecc4:	2b00      	cmp	r3, #0
 801ecc6:	d002      	beq.n	801ecce <pbuf_cat+0x16>
 801ecc8:	683b      	ldr	r3, [r7, #0]
 801ecca:	2b00      	cmp	r3, #0
 801eccc:	d107      	bne.n	801ecde <pbuf_cat+0x26>
 801ecce:	4b20      	ldr	r3, [pc, #128]	; (801ed50 <pbuf_cat+0x98>)
 801ecd0:	f240 3259 	movw	r2, #857	; 0x359
 801ecd4:	491f      	ldr	r1, [pc, #124]	; (801ed54 <pbuf_cat+0x9c>)
 801ecd6:	4820      	ldr	r0, [pc, #128]	; (801ed58 <pbuf_cat+0xa0>)
 801ecd8:	f003 fc64 	bl	80225a4 <iprintf>
 801ecdc:	e034      	b.n	801ed48 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801ecde:	687b      	ldr	r3, [r7, #4]
 801ece0:	60fb      	str	r3, [r7, #12]
 801ece2:	e00a      	b.n	801ecfa <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801ece4:	68fb      	ldr	r3, [r7, #12]
 801ece6:	891a      	ldrh	r2, [r3, #8]
 801ece8:	683b      	ldr	r3, [r7, #0]
 801ecea:	891b      	ldrh	r3, [r3, #8]
 801ecec:	4413      	add	r3, r2
 801ecee:	b29a      	uxth	r2, r3
 801ecf0:	68fb      	ldr	r3, [r7, #12]
 801ecf2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 801ecf4:	68fb      	ldr	r3, [r7, #12]
 801ecf6:	681b      	ldr	r3, [r3, #0]
 801ecf8:	60fb      	str	r3, [r7, #12]
 801ecfa:	68fb      	ldr	r3, [r7, #12]
 801ecfc:	681b      	ldr	r3, [r3, #0]
 801ecfe:	2b00      	cmp	r3, #0
 801ed00:	d1f0      	bne.n	801ece4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801ed02:	68fb      	ldr	r3, [r7, #12]
 801ed04:	891a      	ldrh	r2, [r3, #8]
 801ed06:	68fb      	ldr	r3, [r7, #12]
 801ed08:	895b      	ldrh	r3, [r3, #10]
 801ed0a:	429a      	cmp	r2, r3
 801ed0c:	d006      	beq.n	801ed1c <pbuf_cat+0x64>
 801ed0e:	4b10      	ldr	r3, [pc, #64]	; (801ed50 <pbuf_cat+0x98>)
 801ed10:	f240 3262 	movw	r2, #866	; 0x362
 801ed14:	4911      	ldr	r1, [pc, #68]	; (801ed5c <pbuf_cat+0xa4>)
 801ed16:	4810      	ldr	r0, [pc, #64]	; (801ed58 <pbuf_cat+0xa0>)
 801ed18:	f003 fc44 	bl	80225a4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801ed1c:	68fb      	ldr	r3, [r7, #12]
 801ed1e:	681b      	ldr	r3, [r3, #0]
 801ed20:	2b00      	cmp	r3, #0
 801ed22:	d006      	beq.n	801ed32 <pbuf_cat+0x7a>
 801ed24:	4b0a      	ldr	r3, [pc, #40]	; (801ed50 <pbuf_cat+0x98>)
 801ed26:	f240 3263 	movw	r2, #867	; 0x363
 801ed2a:	490d      	ldr	r1, [pc, #52]	; (801ed60 <pbuf_cat+0xa8>)
 801ed2c:	480a      	ldr	r0, [pc, #40]	; (801ed58 <pbuf_cat+0xa0>)
 801ed2e:	f003 fc39 	bl	80225a4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801ed32:	68fb      	ldr	r3, [r7, #12]
 801ed34:	891a      	ldrh	r2, [r3, #8]
 801ed36:	683b      	ldr	r3, [r7, #0]
 801ed38:	891b      	ldrh	r3, [r3, #8]
 801ed3a:	4413      	add	r3, r2
 801ed3c:	b29a      	uxth	r2, r3
 801ed3e:	68fb      	ldr	r3, [r7, #12]
 801ed40:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801ed42:	68fb      	ldr	r3, [r7, #12]
 801ed44:	683a      	ldr	r2, [r7, #0]
 801ed46:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 801ed48:	3710      	adds	r7, #16
 801ed4a:	46bd      	mov	sp, r7
 801ed4c:	bd80      	pop	{r7, pc}
 801ed4e:	bf00      	nop
 801ed50:	08027954 	.word	0x08027954
 801ed54:	08027b88 	.word	0x08027b88
 801ed58:	080279f4 	.word	0x080279f4
 801ed5c:	08027bc0 	.word	0x08027bc0
 801ed60:	08027bf0 	.word	0x08027bf0

0801ed64 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 801ed64:	b580      	push	{r7, lr}
 801ed66:	b082      	sub	sp, #8
 801ed68:	af00      	add	r7, sp, #0
 801ed6a:	6078      	str	r0, [r7, #4]
 801ed6c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 801ed6e:	6839      	ldr	r1, [r7, #0]
 801ed70:	6878      	ldr	r0, [r7, #4]
 801ed72:	f7ff ffa1 	bl	801ecb8 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 801ed76:	6838      	ldr	r0, [r7, #0]
 801ed78:	f7ff ff7c 	bl	801ec74 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 801ed7c:	bf00      	nop
 801ed7e:	3708      	adds	r7, #8
 801ed80:	46bd      	mov	sp, r7
 801ed82:	bd80      	pop	{r7, pc}

0801ed84 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 801ed84:	b580      	push	{r7, lr}
 801ed86:	b086      	sub	sp, #24
 801ed88:	af00      	add	r7, sp, #0
 801ed8a:	6078      	str	r0, [r7, #4]
 801ed8c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801ed8e:	2300      	movs	r3, #0
 801ed90:	617b      	str	r3, [r7, #20]
 801ed92:	2300      	movs	r3, #0
 801ed94:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801ed96:	687b      	ldr	r3, [r7, #4]
 801ed98:	2b00      	cmp	r3, #0
 801ed9a:	d008      	beq.n	801edae <pbuf_copy+0x2a>
 801ed9c:	683b      	ldr	r3, [r7, #0]
 801ed9e:	2b00      	cmp	r3, #0
 801eda0:	d005      	beq.n	801edae <pbuf_copy+0x2a>
 801eda2:	687b      	ldr	r3, [r7, #4]
 801eda4:	891a      	ldrh	r2, [r3, #8]
 801eda6:	683b      	ldr	r3, [r7, #0]
 801eda8:	891b      	ldrh	r3, [r3, #8]
 801edaa:	429a      	cmp	r2, r3
 801edac:	d209      	bcs.n	801edc2 <pbuf_copy+0x3e>
 801edae:	4b57      	ldr	r3, [pc, #348]	; (801ef0c <pbuf_copy+0x188>)
 801edb0:	f240 32c9 	movw	r2, #969	; 0x3c9
 801edb4:	4956      	ldr	r1, [pc, #344]	; (801ef10 <pbuf_copy+0x18c>)
 801edb6:	4857      	ldr	r0, [pc, #348]	; (801ef14 <pbuf_copy+0x190>)
 801edb8:	f003 fbf4 	bl	80225a4 <iprintf>
 801edbc:	f06f 030f 	mvn.w	r3, #15
 801edc0:	e09f      	b.n	801ef02 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801edc2:	687b      	ldr	r3, [r7, #4]
 801edc4:	895b      	ldrh	r3, [r3, #10]
 801edc6:	461a      	mov	r2, r3
 801edc8:	697b      	ldr	r3, [r7, #20]
 801edca:	1ad2      	subs	r2, r2, r3
 801edcc:	683b      	ldr	r3, [r7, #0]
 801edce:	895b      	ldrh	r3, [r3, #10]
 801edd0:	4619      	mov	r1, r3
 801edd2:	693b      	ldr	r3, [r7, #16]
 801edd4:	1acb      	subs	r3, r1, r3
 801edd6:	429a      	cmp	r2, r3
 801edd8:	d306      	bcc.n	801ede8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801edda:	683b      	ldr	r3, [r7, #0]
 801eddc:	895b      	ldrh	r3, [r3, #10]
 801edde:	461a      	mov	r2, r3
 801ede0:	693b      	ldr	r3, [r7, #16]
 801ede2:	1ad3      	subs	r3, r2, r3
 801ede4:	60fb      	str	r3, [r7, #12]
 801ede6:	e005      	b.n	801edf4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 801ede8:	687b      	ldr	r3, [r7, #4]
 801edea:	895b      	ldrh	r3, [r3, #10]
 801edec:	461a      	mov	r2, r3
 801edee:	697b      	ldr	r3, [r7, #20]
 801edf0:	1ad3      	subs	r3, r2, r3
 801edf2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 801edf4:	687b      	ldr	r3, [r7, #4]
 801edf6:	685a      	ldr	r2, [r3, #4]
 801edf8:	697b      	ldr	r3, [r7, #20]
 801edfa:	18d0      	adds	r0, r2, r3
 801edfc:	683b      	ldr	r3, [r7, #0]
 801edfe:	685a      	ldr	r2, [r3, #4]
 801ee00:	693b      	ldr	r3, [r7, #16]
 801ee02:	4413      	add	r3, r2
 801ee04:	68fa      	ldr	r2, [r7, #12]
 801ee06:	4619      	mov	r1, r3
 801ee08:	f003 fabc 	bl	8022384 <memcpy>
    offset_to += len;
 801ee0c:	697a      	ldr	r2, [r7, #20]
 801ee0e:	68fb      	ldr	r3, [r7, #12]
 801ee10:	4413      	add	r3, r2
 801ee12:	617b      	str	r3, [r7, #20]
    offset_from += len;
 801ee14:	693a      	ldr	r2, [r7, #16]
 801ee16:	68fb      	ldr	r3, [r7, #12]
 801ee18:	4413      	add	r3, r2
 801ee1a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801ee1c:	687b      	ldr	r3, [r7, #4]
 801ee1e:	895b      	ldrh	r3, [r3, #10]
 801ee20:	461a      	mov	r2, r3
 801ee22:	697b      	ldr	r3, [r7, #20]
 801ee24:	4293      	cmp	r3, r2
 801ee26:	d906      	bls.n	801ee36 <pbuf_copy+0xb2>
 801ee28:	4b38      	ldr	r3, [pc, #224]	; (801ef0c <pbuf_copy+0x188>)
 801ee2a:	f240 32d9 	movw	r2, #985	; 0x3d9
 801ee2e:	493a      	ldr	r1, [pc, #232]	; (801ef18 <pbuf_copy+0x194>)
 801ee30:	4838      	ldr	r0, [pc, #224]	; (801ef14 <pbuf_copy+0x190>)
 801ee32:	f003 fbb7 	bl	80225a4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801ee36:	683b      	ldr	r3, [r7, #0]
 801ee38:	895b      	ldrh	r3, [r3, #10]
 801ee3a:	461a      	mov	r2, r3
 801ee3c:	693b      	ldr	r3, [r7, #16]
 801ee3e:	4293      	cmp	r3, r2
 801ee40:	d906      	bls.n	801ee50 <pbuf_copy+0xcc>
 801ee42:	4b32      	ldr	r3, [pc, #200]	; (801ef0c <pbuf_copy+0x188>)
 801ee44:	f240 32da 	movw	r2, #986	; 0x3da
 801ee48:	4934      	ldr	r1, [pc, #208]	; (801ef1c <pbuf_copy+0x198>)
 801ee4a:	4832      	ldr	r0, [pc, #200]	; (801ef14 <pbuf_copy+0x190>)
 801ee4c:	f003 fbaa 	bl	80225a4 <iprintf>
    if (offset_from >= p_from->len) {
 801ee50:	683b      	ldr	r3, [r7, #0]
 801ee52:	895b      	ldrh	r3, [r3, #10]
 801ee54:	461a      	mov	r2, r3
 801ee56:	693b      	ldr	r3, [r7, #16]
 801ee58:	4293      	cmp	r3, r2
 801ee5a:	d304      	bcc.n	801ee66 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 801ee5c:	2300      	movs	r3, #0
 801ee5e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 801ee60:	683b      	ldr	r3, [r7, #0]
 801ee62:	681b      	ldr	r3, [r3, #0]
 801ee64:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801ee66:	687b      	ldr	r3, [r7, #4]
 801ee68:	895b      	ldrh	r3, [r3, #10]
 801ee6a:	461a      	mov	r2, r3
 801ee6c:	697b      	ldr	r3, [r7, #20]
 801ee6e:	4293      	cmp	r3, r2
 801ee70:	d114      	bne.n	801ee9c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801ee72:	2300      	movs	r3, #0
 801ee74:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801ee76:	687b      	ldr	r3, [r7, #4]
 801ee78:	681b      	ldr	r3, [r3, #0]
 801ee7a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801ee7c:	687b      	ldr	r3, [r7, #4]
 801ee7e:	2b00      	cmp	r3, #0
 801ee80:	d10c      	bne.n	801ee9c <pbuf_copy+0x118>
 801ee82:	683b      	ldr	r3, [r7, #0]
 801ee84:	2b00      	cmp	r3, #0
 801ee86:	d009      	beq.n	801ee9c <pbuf_copy+0x118>
 801ee88:	4b20      	ldr	r3, [pc, #128]	; (801ef0c <pbuf_copy+0x188>)
 801ee8a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 801ee8e:	4924      	ldr	r1, [pc, #144]	; (801ef20 <pbuf_copy+0x19c>)
 801ee90:	4820      	ldr	r0, [pc, #128]	; (801ef14 <pbuf_copy+0x190>)
 801ee92:	f003 fb87 	bl	80225a4 <iprintf>
 801ee96:	f06f 030f 	mvn.w	r3, #15
 801ee9a:	e032      	b.n	801ef02 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801ee9c:	683b      	ldr	r3, [r7, #0]
 801ee9e:	2b00      	cmp	r3, #0
 801eea0:	d013      	beq.n	801eeca <pbuf_copy+0x146>
 801eea2:	683b      	ldr	r3, [r7, #0]
 801eea4:	895a      	ldrh	r2, [r3, #10]
 801eea6:	683b      	ldr	r3, [r7, #0]
 801eea8:	891b      	ldrh	r3, [r3, #8]
 801eeaa:	429a      	cmp	r2, r3
 801eeac:	d10d      	bne.n	801eeca <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801eeae:	683b      	ldr	r3, [r7, #0]
 801eeb0:	681b      	ldr	r3, [r3, #0]
 801eeb2:	2b00      	cmp	r3, #0
 801eeb4:	d009      	beq.n	801eeca <pbuf_copy+0x146>
 801eeb6:	4b15      	ldr	r3, [pc, #84]	; (801ef0c <pbuf_copy+0x188>)
 801eeb8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 801eebc:	4919      	ldr	r1, [pc, #100]	; (801ef24 <pbuf_copy+0x1a0>)
 801eebe:	4815      	ldr	r0, [pc, #84]	; (801ef14 <pbuf_copy+0x190>)
 801eec0:	f003 fb70 	bl	80225a4 <iprintf>
 801eec4:	f06f 0305 	mvn.w	r3, #5
 801eec8:	e01b      	b.n	801ef02 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801eeca:	687b      	ldr	r3, [r7, #4]
 801eecc:	2b00      	cmp	r3, #0
 801eece:	d013      	beq.n	801eef8 <pbuf_copy+0x174>
 801eed0:	687b      	ldr	r3, [r7, #4]
 801eed2:	895a      	ldrh	r2, [r3, #10]
 801eed4:	687b      	ldr	r3, [r7, #4]
 801eed6:	891b      	ldrh	r3, [r3, #8]
 801eed8:	429a      	cmp	r2, r3
 801eeda:	d10d      	bne.n	801eef8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801eedc:	687b      	ldr	r3, [r7, #4]
 801eede:	681b      	ldr	r3, [r3, #0]
 801eee0:	2b00      	cmp	r3, #0
 801eee2:	d009      	beq.n	801eef8 <pbuf_copy+0x174>
 801eee4:	4b09      	ldr	r3, [pc, #36]	; (801ef0c <pbuf_copy+0x188>)
 801eee6:	f240 32ee 	movw	r2, #1006	; 0x3ee
 801eeea:	490e      	ldr	r1, [pc, #56]	; (801ef24 <pbuf_copy+0x1a0>)
 801eeec:	4809      	ldr	r0, [pc, #36]	; (801ef14 <pbuf_copy+0x190>)
 801eeee:	f003 fb59 	bl	80225a4 <iprintf>
 801eef2:	f06f 0305 	mvn.w	r3, #5
 801eef6:	e004      	b.n	801ef02 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 801eef8:	683b      	ldr	r3, [r7, #0]
 801eefa:	2b00      	cmp	r3, #0
 801eefc:	f47f af61 	bne.w	801edc2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 801ef00:	2300      	movs	r3, #0
}
 801ef02:	4618      	mov	r0, r3
 801ef04:	3718      	adds	r7, #24
 801ef06:	46bd      	mov	sp, r7
 801ef08:	bd80      	pop	{r7, pc}
 801ef0a:	bf00      	nop
 801ef0c:	08027954 	.word	0x08027954
 801ef10:	08027c3c 	.word	0x08027c3c
 801ef14:	080279f4 	.word	0x080279f4
 801ef18:	08027c6c 	.word	0x08027c6c
 801ef1c:	08027c84 	.word	0x08027c84
 801ef20:	08027ca0 	.word	0x08027ca0
 801ef24:	08027cb0 	.word	0x08027cb0

0801ef28 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 801ef28:	b580      	push	{r7, lr}
 801ef2a:	b088      	sub	sp, #32
 801ef2c:	af00      	add	r7, sp, #0
 801ef2e:	60f8      	str	r0, [r7, #12]
 801ef30:	60b9      	str	r1, [r7, #8]
 801ef32:	4613      	mov	r3, r2
 801ef34:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 801ef36:	88fb      	ldrh	r3, [r7, #6]
 801ef38:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 801ef3a:	2300      	movs	r3, #0
 801ef3c:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 801ef3e:	68fb      	ldr	r3, [r7, #12]
 801ef40:	2b00      	cmp	r3, #0
 801ef42:	d109      	bne.n	801ef58 <pbuf_take+0x30>
 801ef44:	4b3a      	ldr	r3, [pc, #232]	; (801f030 <pbuf_take+0x108>)
 801ef46:	f240 42b3 	movw	r2, #1203	; 0x4b3
 801ef4a:	493a      	ldr	r1, [pc, #232]	; (801f034 <pbuf_take+0x10c>)
 801ef4c:	483a      	ldr	r0, [pc, #232]	; (801f038 <pbuf_take+0x110>)
 801ef4e:	f003 fb29 	bl	80225a4 <iprintf>
 801ef52:	f06f 030f 	mvn.w	r3, #15
 801ef56:	e067      	b.n	801f028 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 801ef58:	68bb      	ldr	r3, [r7, #8]
 801ef5a:	2b00      	cmp	r3, #0
 801ef5c:	d109      	bne.n	801ef72 <pbuf_take+0x4a>
 801ef5e:	4b34      	ldr	r3, [pc, #208]	; (801f030 <pbuf_take+0x108>)
 801ef60:	f240 42b4 	movw	r2, #1204	; 0x4b4
 801ef64:	4935      	ldr	r1, [pc, #212]	; (801f03c <pbuf_take+0x114>)
 801ef66:	4834      	ldr	r0, [pc, #208]	; (801f038 <pbuf_take+0x110>)
 801ef68:	f003 fb1c 	bl	80225a4 <iprintf>
 801ef6c:	f06f 030f 	mvn.w	r3, #15
 801ef70:	e05a      	b.n	801f028 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 801ef72:	68fb      	ldr	r3, [r7, #12]
 801ef74:	891b      	ldrh	r3, [r3, #8]
 801ef76:	88fa      	ldrh	r2, [r7, #6]
 801ef78:	429a      	cmp	r2, r3
 801ef7a:	d909      	bls.n	801ef90 <pbuf_take+0x68>
 801ef7c:	4b2c      	ldr	r3, [pc, #176]	; (801f030 <pbuf_take+0x108>)
 801ef7e:	f240 42b5 	movw	r2, #1205	; 0x4b5
 801ef82:	492f      	ldr	r1, [pc, #188]	; (801f040 <pbuf_take+0x118>)
 801ef84:	482c      	ldr	r0, [pc, #176]	; (801f038 <pbuf_take+0x110>)
 801ef86:	f003 fb0d 	bl	80225a4 <iprintf>
 801ef8a:	f04f 33ff 	mov.w	r3, #4294967295
 801ef8e:	e04b      	b.n	801f028 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 801ef90:	68fb      	ldr	r3, [r7, #12]
 801ef92:	2b00      	cmp	r3, #0
 801ef94:	d007      	beq.n	801efa6 <pbuf_take+0x7e>
 801ef96:	68bb      	ldr	r3, [r7, #8]
 801ef98:	2b00      	cmp	r3, #0
 801ef9a:	d004      	beq.n	801efa6 <pbuf_take+0x7e>
 801ef9c:	68fb      	ldr	r3, [r7, #12]
 801ef9e:	891b      	ldrh	r3, [r3, #8]
 801efa0:	88fa      	ldrh	r2, [r7, #6]
 801efa2:	429a      	cmp	r2, r3
 801efa4:	d902      	bls.n	801efac <pbuf_take+0x84>
    return ERR_ARG;
 801efa6:	f06f 030f 	mvn.w	r3, #15
 801efaa:	e03d      	b.n	801f028 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 801efac:	68fb      	ldr	r3, [r7, #12]
 801efae:	61fb      	str	r3, [r7, #28]
 801efb0:	e028      	b.n	801f004 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 801efb2:	69fb      	ldr	r3, [r7, #28]
 801efb4:	2b00      	cmp	r3, #0
 801efb6:	d106      	bne.n	801efc6 <pbuf_take+0x9e>
 801efb8:	4b1d      	ldr	r3, [pc, #116]	; (801f030 <pbuf_take+0x108>)
 801efba:	f240 42bd 	movw	r2, #1213	; 0x4bd
 801efbe:	4921      	ldr	r1, [pc, #132]	; (801f044 <pbuf_take+0x11c>)
 801efc0:	481d      	ldr	r0, [pc, #116]	; (801f038 <pbuf_take+0x110>)
 801efc2:	f003 faef 	bl	80225a4 <iprintf>
    buf_copy_len = total_copy_len;
 801efc6:	697b      	ldr	r3, [r7, #20]
 801efc8:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 801efca:	69fb      	ldr	r3, [r7, #28]
 801efcc:	895b      	ldrh	r3, [r3, #10]
 801efce:	461a      	mov	r2, r3
 801efd0:	69bb      	ldr	r3, [r7, #24]
 801efd2:	4293      	cmp	r3, r2
 801efd4:	d902      	bls.n	801efdc <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 801efd6:	69fb      	ldr	r3, [r7, #28]
 801efd8:	895b      	ldrh	r3, [r3, #10]
 801efda:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 801efdc:	69fb      	ldr	r3, [r7, #28]
 801efde:	6858      	ldr	r0, [r3, #4]
 801efe0:	68ba      	ldr	r2, [r7, #8]
 801efe2:	693b      	ldr	r3, [r7, #16]
 801efe4:	4413      	add	r3, r2
 801efe6:	69ba      	ldr	r2, [r7, #24]
 801efe8:	4619      	mov	r1, r3
 801efea:	f003 f9cb 	bl	8022384 <memcpy>
    total_copy_len -= buf_copy_len;
 801efee:	697a      	ldr	r2, [r7, #20]
 801eff0:	69bb      	ldr	r3, [r7, #24]
 801eff2:	1ad3      	subs	r3, r2, r3
 801eff4:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 801eff6:	693a      	ldr	r2, [r7, #16]
 801eff8:	69bb      	ldr	r3, [r7, #24]
 801effa:	4413      	add	r3, r2
 801effc:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 801effe:	69fb      	ldr	r3, [r7, #28]
 801f000:	681b      	ldr	r3, [r3, #0]
 801f002:	61fb      	str	r3, [r7, #28]
 801f004:	697b      	ldr	r3, [r7, #20]
 801f006:	2b00      	cmp	r3, #0
 801f008:	d1d3      	bne.n	801efb2 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 801f00a:	697b      	ldr	r3, [r7, #20]
 801f00c:	2b00      	cmp	r3, #0
 801f00e:	d103      	bne.n	801f018 <pbuf_take+0xf0>
 801f010:	88fb      	ldrh	r3, [r7, #6]
 801f012:	693a      	ldr	r2, [r7, #16]
 801f014:	429a      	cmp	r2, r3
 801f016:	d006      	beq.n	801f026 <pbuf_take+0xfe>
 801f018:	4b05      	ldr	r3, [pc, #20]	; (801f030 <pbuf_take+0x108>)
 801f01a:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 801f01e:	490a      	ldr	r1, [pc, #40]	; (801f048 <pbuf_take+0x120>)
 801f020:	4805      	ldr	r0, [pc, #20]	; (801f038 <pbuf_take+0x110>)
 801f022:	f003 fabf 	bl	80225a4 <iprintf>
  return ERR_OK;
 801f026:	2300      	movs	r3, #0
}
 801f028:	4618      	mov	r0, r3
 801f02a:	3720      	adds	r7, #32
 801f02c:	46bd      	mov	sp, r7
 801f02e:	bd80      	pop	{r7, pc}
 801f030:	08027954 	.word	0x08027954
 801f034:	08027d6c 	.word	0x08027d6c
 801f038:	080279f4 	.word	0x080279f4
 801f03c:	08027d84 	.word	0x08027d84
 801f040:	08027da0 	.word	0x08027da0
 801f044:	08027dc0 	.word	0x08027dc0
 801f048:	08027dd8 	.word	0x08027dd8

0801f04c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 801f04c:	b580      	push	{r7, lr}
 801f04e:	b084      	sub	sp, #16
 801f050:	af00      	add	r7, sp, #0
 801f052:	4603      	mov	r3, r0
 801f054:	603a      	str	r2, [r7, #0]
 801f056:	71fb      	strb	r3, [r7, #7]
 801f058:	460b      	mov	r3, r1
 801f05a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 801f05c:	683b      	ldr	r3, [r7, #0]
 801f05e:	8919      	ldrh	r1, [r3, #8]
 801f060:	88ba      	ldrh	r2, [r7, #4]
 801f062:	79fb      	ldrb	r3, [r7, #7]
 801f064:	4618      	mov	r0, r3
 801f066:	f7ff fa83 	bl	801e570 <pbuf_alloc>
 801f06a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 801f06c:	68fb      	ldr	r3, [r7, #12]
 801f06e:	2b00      	cmp	r3, #0
 801f070:	d101      	bne.n	801f076 <pbuf_clone+0x2a>
    return NULL;
 801f072:	2300      	movs	r3, #0
 801f074:	e011      	b.n	801f09a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801f076:	6839      	ldr	r1, [r7, #0]
 801f078:	68f8      	ldr	r0, [r7, #12]
 801f07a:	f7ff fe83 	bl	801ed84 <pbuf_copy>
 801f07e:	4603      	mov	r3, r0
 801f080:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801f082:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801f086:	2b00      	cmp	r3, #0
 801f088:	d006      	beq.n	801f098 <pbuf_clone+0x4c>
 801f08a:	4b06      	ldr	r3, [pc, #24]	; (801f0a4 <pbuf_clone+0x58>)
 801f08c:	f240 5224 	movw	r2, #1316	; 0x524
 801f090:	4905      	ldr	r1, [pc, #20]	; (801f0a8 <pbuf_clone+0x5c>)
 801f092:	4806      	ldr	r0, [pc, #24]	; (801f0ac <pbuf_clone+0x60>)
 801f094:	f003 fa86 	bl	80225a4 <iprintf>
  return q;
 801f098:	68fb      	ldr	r3, [r7, #12]
}
 801f09a:	4618      	mov	r0, r3
 801f09c:	3710      	adds	r7, #16
 801f09e:	46bd      	mov	sp, r7
 801f0a0:	bd80      	pop	{r7, pc}
 801f0a2:	bf00      	nop
 801f0a4:	08027954 	.word	0x08027954
 801f0a8:	08027e08 	.word	0x08027e08
 801f0ac:	080279f4 	.word	0x080279f4

0801f0b0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801f0b0:	b580      	push	{r7, lr}
 801f0b2:	b086      	sub	sp, #24
 801f0b4:	af00      	add	r7, sp, #0
 801f0b6:	60f8      	str	r0, [r7, #12]
 801f0b8:	60b9      	str	r1, [r7, #8]
 801f0ba:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801f0bc:	2003      	movs	r0, #3
 801f0be:	f7fe fdb9 	bl	801dc34 <memp_malloc>
 801f0c2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801f0c4:	693b      	ldr	r3, [r7, #16]
 801f0c6:	2b00      	cmp	r3, #0
 801f0c8:	d109      	bne.n	801f0de <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801f0ca:	693b      	ldr	r3, [r7, #16]
 801f0cc:	2b00      	cmp	r3, #0
 801f0ce:	d151      	bne.n	801f174 <sys_timeout_abs+0xc4>
 801f0d0:	4b2a      	ldr	r3, [pc, #168]	; (801f17c <sys_timeout_abs+0xcc>)
 801f0d2:	22be      	movs	r2, #190	; 0xbe
 801f0d4:	492a      	ldr	r1, [pc, #168]	; (801f180 <sys_timeout_abs+0xd0>)
 801f0d6:	482b      	ldr	r0, [pc, #172]	; (801f184 <sys_timeout_abs+0xd4>)
 801f0d8:	f003 fa64 	bl	80225a4 <iprintf>
    return;
 801f0dc:	e04a      	b.n	801f174 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801f0de:	693b      	ldr	r3, [r7, #16]
 801f0e0:	2200      	movs	r2, #0
 801f0e2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801f0e4:	693b      	ldr	r3, [r7, #16]
 801f0e6:	68ba      	ldr	r2, [r7, #8]
 801f0e8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801f0ea:	693b      	ldr	r3, [r7, #16]
 801f0ec:	687a      	ldr	r2, [r7, #4]
 801f0ee:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801f0f0:	693b      	ldr	r3, [r7, #16]
 801f0f2:	68fa      	ldr	r2, [r7, #12]
 801f0f4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801f0f6:	4b24      	ldr	r3, [pc, #144]	; (801f188 <sys_timeout_abs+0xd8>)
 801f0f8:	681b      	ldr	r3, [r3, #0]
 801f0fa:	2b00      	cmp	r3, #0
 801f0fc:	d103      	bne.n	801f106 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801f0fe:	4a22      	ldr	r2, [pc, #136]	; (801f188 <sys_timeout_abs+0xd8>)
 801f100:	693b      	ldr	r3, [r7, #16]
 801f102:	6013      	str	r3, [r2, #0]
    return;
 801f104:	e037      	b.n	801f176 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801f106:	693b      	ldr	r3, [r7, #16]
 801f108:	685a      	ldr	r2, [r3, #4]
 801f10a:	4b1f      	ldr	r3, [pc, #124]	; (801f188 <sys_timeout_abs+0xd8>)
 801f10c:	681b      	ldr	r3, [r3, #0]
 801f10e:	685b      	ldr	r3, [r3, #4]
 801f110:	1ad3      	subs	r3, r2, r3
 801f112:	0fdb      	lsrs	r3, r3, #31
 801f114:	f003 0301 	and.w	r3, r3, #1
 801f118:	b2db      	uxtb	r3, r3
 801f11a:	2b00      	cmp	r3, #0
 801f11c:	d007      	beq.n	801f12e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801f11e:	4b1a      	ldr	r3, [pc, #104]	; (801f188 <sys_timeout_abs+0xd8>)
 801f120:	681a      	ldr	r2, [r3, #0]
 801f122:	693b      	ldr	r3, [r7, #16]
 801f124:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801f126:	4a18      	ldr	r2, [pc, #96]	; (801f188 <sys_timeout_abs+0xd8>)
 801f128:	693b      	ldr	r3, [r7, #16]
 801f12a:	6013      	str	r3, [r2, #0]
 801f12c:	e023      	b.n	801f176 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801f12e:	4b16      	ldr	r3, [pc, #88]	; (801f188 <sys_timeout_abs+0xd8>)
 801f130:	681b      	ldr	r3, [r3, #0]
 801f132:	617b      	str	r3, [r7, #20]
 801f134:	e01a      	b.n	801f16c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801f136:	697b      	ldr	r3, [r7, #20]
 801f138:	681b      	ldr	r3, [r3, #0]
 801f13a:	2b00      	cmp	r3, #0
 801f13c:	d00b      	beq.n	801f156 <sys_timeout_abs+0xa6>
 801f13e:	693b      	ldr	r3, [r7, #16]
 801f140:	685a      	ldr	r2, [r3, #4]
 801f142:	697b      	ldr	r3, [r7, #20]
 801f144:	681b      	ldr	r3, [r3, #0]
 801f146:	685b      	ldr	r3, [r3, #4]
 801f148:	1ad3      	subs	r3, r2, r3
 801f14a:	0fdb      	lsrs	r3, r3, #31
 801f14c:	f003 0301 	and.w	r3, r3, #1
 801f150:	b2db      	uxtb	r3, r3
 801f152:	2b00      	cmp	r3, #0
 801f154:	d007      	beq.n	801f166 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801f156:	697b      	ldr	r3, [r7, #20]
 801f158:	681a      	ldr	r2, [r3, #0]
 801f15a:	693b      	ldr	r3, [r7, #16]
 801f15c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801f15e:	697b      	ldr	r3, [r7, #20]
 801f160:	693a      	ldr	r2, [r7, #16]
 801f162:	601a      	str	r2, [r3, #0]
        break;
 801f164:	e007      	b.n	801f176 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801f166:	697b      	ldr	r3, [r7, #20]
 801f168:	681b      	ldr	r3, [r3, #0]
 801f16a:	617b      	str	r3, [r7, #20]
 801f16c:	697b      	ldr	r3, [r7, #20]
 801f16e:	2b00      	cmp	r3, #0
 801f170:	d1e1      	bne.n	801f136 <sys_timeout_abs+0x86>
 801f172:	e000      	b.n	801f176 <sys_timeout_abs+0xc6>
    return;
 801f174:	bf00      	nop
      }
    }
  }
}
 801f176:	3718      	adds	r7, #24
 801f178:	46bd      	mov	sp, r7
 801f17a:	bd80      	pop	{r7, pc}
 801f17c:	08027e1c 	.word	0x08027e1c
 801f180:	08027e90 	.word	0x08027e90
 801f184:	08027ed0 	.word	0x08027ed0
 801f188:	20013dc4 	.word	0x20013dc4

0801f18c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801f18c:	b580      	push	{r7, lr}
 801f18e:	b086      	sub	sp, #24
 801f190:	af00      	add	r7, sp, #0
 801f192:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801f194:	687b      	ldr	r3, [r7, #4]
 801f196:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801f198:	697b      	ldr	r3, [r7, #20]
 801f19a:	685b      	ldr	r3, [r3, #4]
 801f19c:	4798      	blx	r3

  now = sys_now();
 801f19e:	f7fd fed9 	bl	801cf54 <sys_now>
 801f1a2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801f1a4:	697b      	ldr	r3, [r7, #20]
 801f1a6:	681a      	ldr	r2, [r3, #0]
 801f1a8:	4b0f      	ldr	r3, [pc, #60]	; (801f1e8 <lwip_cyclic_timer+0x5c>)
 801f1aa:	681b      	ldr	r3, [r3, #0]
 801f1ac:	4413      	add	r3, r2
 801f1ae:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801f1b0:	68fa      	ldr	r2, [r7, #12]
 801f1b2:	693b      	ldr	r3, [r7, #16]
 801f1b4:	1ad3      	subs	r3, r2, r3
 801f1b6:	0fdb      	lsrs	r3, r3, #31
 801f1b8:	f003 0301 	and.w	r3, r3, #1
 801f1bc:	b2db      	uxtb	r3, r3
 801f1be:	2b00      	cmp	r3, #0
 801f1c0:	d009      	beq.n	801f1d6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801f1c2:	697b      	ldr	r3, [r7, #20]
 801f1c4:	681a      	ldr	r2, [r3, #0]
 801f1c6:	693b      	ldr	r3, [r7, #16]
 801f1c8:	4413      	add	r3, r2
 801f1ca:	687a      	ldr	r2, [r7, #4]
 801f1cc:	4907      	ldr	r1, [pc, #28]	; (801f1ec <lwip_cyclic_timer+0x60>)
 801f1ce:	4618      	mov	r0, r3
 801f1d0:	f7ff ff6e 	bl	801f0b0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801f1d4:	e004      	b.n	801f1e0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801f1d6:	687a      	ldr	r2, [r7, #4]
 801f1d8:	4904      	ldr	r1, [pc, #16]	; (801f1ec <lwip_cyclic_timer+0x60>)
 801f1da:	68f8      	ldr	r0, [r7, #12]
 801f1dc:	f7ff ff68 	bl	801f0b0 <sys_timeout_abs>
}
 801f1e0:	bf00      	nop
 801f1e2:	3718      	adds	r7, #24
 801f1e4:	46bd      	mov	sp, r7
 801f1e6:	bd80      	pop	{r7, pc}
 801f1e8:	20013dc8 	.word	0x20013dc8
 801f1ec:	0801f18d 	.word	0x0801f18d

0801f1f0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801f1f0:	b580      	push	{r7, lr}
 801f1f2:	b082      	sub	sp, #8
 801f1f4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801f1f6:	2300      	movs	r3, #0
 801f1f8:	607b      	str	r3, [r7, #4]
 801f1fa:	e00e      	b.n	801f21a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801f1fc:	4a0b      	ldr	r2, [pc, #44]	; (801f22c <sys_timeouts_init+0x3c>)
 801f1fe:	687b      	ldr	r3, [r7, #4]
 801f200:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801f204:	687b      	ldr	r3, [r7, #4]
 801f206:	00db      	lsls	r3, r3, #3
 801f208:	4a08      	ldr	r2, [pc, #32]	; (801f22c <sys_timeouts_init+0x3c>)
 801f20a:	4413      	add	r3, r2
 801f20c:	461a      	mov	r2, r3
 801f20e:	4908      	ldr	r1, [pc, #32]	; (801f230 <sys_timeouts_init+0x40>)
 801f210:	f000 f810 	bl	801f234 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801f214:	687b      	ldr	r3, [r7, #4]
 801f216:	3301      	adds	r3, #1
 801f218:	607b      	str	r3, [r7, #4]
 801f21a:	687b      	ldr	r3, [r7, #4]
 801f21c:	2b01      	cmp	r3, #1
 801f21e:	d9ed      	bls.n	801f1fc <sys_timeouts_init+0xc>
  }
}
 801f220:	bf00      	nop
 801f222:	bf00      	nop
 801f224:	3708      	adds	r7, #8
 801f226:	46bd      	mov	sp, r7
 801f228:	bd80      	pop	{r7, pc}
 801f22a:	bf00      	nop
 801f22c:	08028f80 	.word	0x08028f80
 801f230:	0801f18d 	.word	0x0801f18d

0801f234 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801f234:	b580      	push	{r7, lr}
 801f236:	b086      	sub	sp, #24
 801f238:	af00      	add	r7, sp, #0
 801f23a:	60f8      	str	r0, [r7, #12]
 801f23c:	60b9      	str	r1, [r7, #8]
 801f23e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801f240:	68fb      	ldr	r3, [r7, #12]
 801f242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801f246:	d306      	bcc.n	801f256 <sys_timeout+0x22>
 801f248:	4b0a      	ldr	r3, [pc, #40]	; (801f274 <sys_timeout+0x40>)
 801f24a:	f240 1229 	movw	r2, #297	; 0x129
 801f24e:	490a      	ldr	r1, [pc, #40]	; (801f278 <sys_timeout+0x44>)
 801f250:	480a      	ldr	r0, [pc, #40]	; (801f27c <sys_timeout+0x48>)
 801f252:	f003 f9a7 	bl	80225a4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801f256:	f7fd fe7d 	bl	801cf54 <sys_now>
 801f25a:	4602      	mov	r2, r0
 801f25c:	68fb      	ldr	r3, [r7, #12]
 801f25e:	4413      	add	r3, r2
 801f260:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801f262:	687a      	ldr	r2, [r7, #4]
 801f264:	68b9      	ldr	r1, [r7, #8]
 801f266:	6978      	ldr	r0, [r7, #20]
 801f268:	f7ff ff22 	bl	801f0b0 <sys_timeout_abs>
#endif
}
 801f26c:	bf00      	nop
 801f26e:	3718      	adds	r7, #24
 801f270:	46bd      	mov	sp, r7
 801f272:	bd80      	pop	{r7, pc}
 801f274:	08027e1c 	.word	0x08027e1c
 801f278:	08027ef8 	.word	0x08027ef8
 801f27c:	08027ed0 	.word	0x08027ed0

0801f280 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801f280:	b580      	push	{r7, lr}
 801f282:	b084      	sub	sp, #16
 801f284:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801f286:	f7fd fe65 	bl	801cf54 <sys_now>
 801f28a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801f28c:	4b17      	ldr	r3, [pc, #92]	; (801f2ec <sys_check_timeouts+0x6c>)
 801f28e:	681b      	ldr	r3, [r3, #0]
 801f290:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801f292:	68bb      	ldr	r3, [r7, #8]
 801f294:	2b00      	cmp	r3, #0
 801f296:	d022      	beq.n	801f2de <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801f298:	68bb      	ldr	r3, [r7, #8]
 801f29a:	685b      	ldr	r3, [r3, #4]
 801f29c:	68fa      	ldr	r2, [r7, #12]
 801f29e:	1ad3      	subs	r3, r2, r3
 801f2a0:	0fdb      	lsrs	r3, r3, #31
 801f2a2:	f003 0301 	and.w	r3, r3, #1
 801f2a6:	b2db      	uxtb	r3, r3
 801f2a8:	2b00      	cmp	r3, #0
 801f2aa:	d11a      	bne.n	801f2e2 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801f2ac:	68bb      	ldr	r3, [r7, #8]
 801f2ae:	681b      	ldr	r3, [r3, #0]
 801f2b0:	4a0e      	ldr	r2, [pc, #56]	; (801f2ec <sys_check_timeouts+0x6c>)
 801f2b2:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801f2b4:	68bb      	ldr	r3, [r7, #8]
 801f2b6:	689b      	ldr	r3, [r3, #8]
 801f2b8:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801f2ba:	68bb      	ldr	r3, [r7, #8]
 801f2bc:	68db      	ldr	r3, [r3, #12]
 801f2be:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801f2c0:	68bb      	ldr	r3, [r7, #8]
 801f2c2:	685b      	ldr	r3, [r3, #4]
 801f2c4:	4a0a      	ldr	r2, [pc, #40]	; (801f2f0 <sys_check_timeouts+0x70>)
 801f2c6:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801f2c8:	68b9      	ldr	r1, [r7, #8]
 801f2ca:	2003      	movs	r0, #3
 801f2cc:	f7fe fd22 	bl	801dd14 <memp_free>
    if (handler != NULL) {
 801f2d0:	687b      	ldr	r3, [r7, #4]
 801f2d2:	2b00      	cmp	r3, #0
 801f2d4:	d0da      	beq.n	801f28c <sys_check_timeouts+0xc>
      handler(arg);
 801f2d6:	687b      	ldr	r3, [r7, #4]
 801f2d8:	6838      	ldr	r0, [r7, #0]
 801f2da:	4798      	blx	r3
  do {
 801f2dc:	e7d6      	b.n	801f28c <sys_check_timeouts+0xc>
      return;
 801f2de:	bf00      	nop
 801f2e0:	e000      	b.n	801f2e4 <sys_check_timeouts+0x64>
      return;
 801f2e2:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801f2e4:	3710      	adds	r7, #16
 801f2e6:	46bd      	mov	sp, r7
 801f2e8:	bd80      	pop	{r7, pc}
 801f2ea:	bf00      	nop
 801f2ec:	20013dc4 	.word	0x20013dc4
 801f2f0:	20013dc8 	.word	0x20013dc8

0801f2f4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801f2f4:	b580      	push	{r7, lr}
 801f2f6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801f2f8:	f003 f9f8 	bl	80226ec <rand>
 801f2fc:	4603      	mov	r3, r0
 801f2fe:	b29b      	uxth	r3, r3
 801f300:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801f304:	b29b      	uxth	r3, r3
 801f306:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801f30a:	b29a      	uxth	r2, r3
 801f30c:	4b01      	ldr	r3, [pc, #4]	; (801f314 <udp_init+0x20>)
 801f30e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801f310:	bf00      	nop
 801f312:	bd80      	pop	{r7, pc}
 801f314:	2000013c 	.word	0x2000013c

0801f318 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801f318:	b480      	push	{r7}
 801f31a:	b083      	sub	sp, #12
 801f31c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801f31e:	2300      	movs	r3, #0
 801f320:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801f322:	4b17      	ldr	r3, [pc, #92]	; (801f380 <udp_new_port+0x68>)
 801f324:	881b      	ldrh	r3, [r3, #0]
 801f326:	1c5a      	adds	r2, r3, #1
 801f328:	b291      	uxth	r1, r2
 801f32a:	4a15      	ldr	r2, [pc, #84]	; (801f380 <udp_new_port+0x68>)
 801f32c:	8011      	strh	r1, [r2, #0]
 801f32e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801f332:	4293      	cmp	r3, r2
 801f334:	d103      	bne.n	801f33e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801f336:	4b12      	ldr	r3, [pc, #72]	; (801f380 <udp_new_port+0x68>)
 801f338:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801f33c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f33e:	4b11      	ldr	r3, [pc, #68]	; (801f384 <udp_new_port+0x6c>)
 801f340:	681b      	ldr	r3, [r3, #0]
 801f342:	603b      	str	r3, [r7, #0]
 801f344:	e011      	b.n	801f36a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801f346:	683b      	ldr	r3, [r7, #0]
 801f348:	8a5a      	ldrh	r2, [r3, #18]
 801f34a:	4b0d      	ldr	r3, [pc, #52]	; (801f380 <udp_new_port+0x68>)
 801f34c:	881b      	ldrh	r3, [r3, #0]
 801f34e:	429a      	cmp	r2, r3
 801f350:	d108      	bne.n	801f364 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801f352:	88fb      	ldrh	r3, [r7, #6]
 801f354:	3301      	adds	r3, #1
 801f356:	80fb      	strh	r3, [r7, #6]
 801f358:	88fb      	ldrh	r3, [r7, #6]
 801f35a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801f35e:	d3e0      	bcc.n	801f322 <udp_new_port+0xa>
        return 0;
 801f360:	2300      	movs	r3, #0
 801f362:	e007      	b.n	801f374 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f364:	683b      	ldr	r3, [r7, #0]
 801f366:	68db      	ldr	r3, [r3, #12]
 801f368:	603b      	str	r3, [r7, #0]
 801f36a:	683b      	ldr	r3, [r7, #0]
 801f36c:	2b00      	cmp	r3, #0
 801f36e:	d1ea      	bne.n	801f346 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801f370:	4b03      	ldr	r3, [pc, #12]	; (801f380 <udp_new_port+0x68>)
 801f372:	881b      	ldrh	r3, [r3, #0]
}
 801f374:	4618      	mov	r0, r3
 801f376:	370c      	adds	r7, #12
 801f378:	46bd      	mov	sp, r7
 801f37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f37e:	4770      	bx	lr
 801f380:	2000013c 	.word	0x2000013c
 801f384:	20013dcc 	.word	0x20013dcc

0801f388 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801f388:	b580      	push	{r7, lr}
 801f38a:	b084      	sub	sp, #16
 801f38c:	af00      	add	r7, sp, #0
 801f38e:	60f8      	str	r0, [r7, #12]
 801f390:	60b9      	str	r1, [r7, #8]
 801f392:	4613      	mov	r3, r2
 801f394:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801f396:	68fb      	ldr	r3, [r7, #12]
 801f398:	2b00      	cmp	r3, #0
 801f39a:	d105      	bne.n	801f3a8 <udp_input_local_match+0x20>
 801f39c:	4b27      	ldr	r3, [pc, #156]	; (801f43c <udp_input_local_match+0xb4>)
 801f39e:	2287      	movs	r2, #135	; 0x87
 801f3a0:	4927      	ldr	r1, [pc, #156]	; (801f440 <udp_input_local_match+0xb8>)
 801f3a2:	4828      	ldr	r0, [pc, #160]	; (801f444 <udp_input_local_match+0xbc>)
 801f3a4:	f003 f8fe 	bl	80225a4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801f3a8:	68bb      	ldr	r3, [r7, #8]
 801f3aa:	2b00      	cmp	r3, #0
 801f3ac:	d105      	bne.n	801f3ba <udp_input_local_match+0x32>
 801f3ae:	4b23      	ldr	r3, [pc, #140]	; (801f43c <udp_input_local_match+0xb4>)
 801f3b0:	2288      	movs	r2, #136	; 0x88
 801f3b2:	4925      	ldr	r1, [pc, #148]	; (801f448 <udp_input_local_match+0xc0>)
 801f3b4:	4823      	ldr	r0, [pc, #140]	; (801f444 <udp_input_local_match+0xbc>)
 801f3b6:	f003 f8f5 	bl	80225a4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801f3ba:	68fb      	ldr	r3, [r7, #12]
 801f3bc:	7a1b      	ldrb	r3, [r3, #8]
 801f3be:	2b00      	cmp	r3, #0
 801f3c0:	d00b      	beq.n	801f3da <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801f3c2:	68fb      	ldr	r3, [r7, #12]
 801f3c4:	7a1a      	ldrb	r2, [r3, #8]
 801f3c6:	4b21      	ldr	r3, [pc, #132]	; (801f44c <udp_input_local_match+0xc4>)
 801f3c8:	685b      	ldr	r3, [r3, #4]
 801f3ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801f3ce:	3301      	adds	r3, #1
 801f3d0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801f3d2:	429a      	cmp	r2, r3
 801f3d4:	d001      	beq.n	801f3da <udp_input_local_match+0x52>
    return 0;
 801f3d6:	2300      	movs	r3, #0
 801f3d8:	e02b      	b.n	801f432 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801f3da:	79fb      	ldrb	r3, [r7, #7]
 801f3dc:	2b00      	cmp	r3, #0
 801f3de:	d018      	beq.n	801f412 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801f3e0:	68fb      	ldr	r3, [r7, #12]
 801f3e2:	2b00      	cmp	r3, #0
 801f3e4:	d013      	beq.n	801f40e <udp_input_local_match+0x86>
 801f3e6:	68fb      	ldr	r3, [r7, #12]
 801f3e8:	681b      	ldr	r3, [r3, #0]
 801f3ea:	2b00      	cmp	r3, #0
 801f3ec:	d00f      	beq.n	801f40e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801f3ee:	4b17      	ldr	r3, [pc, #92]	; (801f44c <udp_input_local_match+0xc4>)
 801f3f0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801f3f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f3f6:	d00a      	beq.n	801f40e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801f3f8:	68fb      	ldr	r3, [r7, #12]
 801f3fa:	681a      	ldr	r2, [r3, #0]
 801f3fc:	4b13      	ldr	r3, [pc, #76]	; (801f44c <udp_input_local_match+0xc4>)
 801f3fe:	695b      	ldr	r3, [r3, #20]
 801f400:	405a      	eors	r2, r3
 801f402:	68bb      	ldr	r3, [r7, #8]
 801f404:	3308      	adds	r3, #8
 801f406:	681b      	ldr	r3, [r3, #0]
 801f408:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801f40a:	2b00      	cmp	r3, #0
 801f40c:	d110      	bne.n	801f430 <udp_input_local_match+0xa8>
          return 1;
 801f40e:	2301      	movs	r3, #1
 801f410:	e00f      	b.n	801f432 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801f412:	68fb      	ldr	r3, [r7, #12]
 801f414:	2b00      	cmp	r3, #0
 801f416:	d009      	beq.n	801f42c <udp_input_local_match+0xa4>
 801f418:	68fb      	ldr	r3, [r7, #12]
 801f41a:	681b      	ldr	r3, [r3, #0]
 801f41c:	2b00      	cmp	r3, #0
 801f41e:	d005      	beq.n	801f42c <udp_input_local_match+0xa4>
 801f420:	68fb      	ldr	r3, [r7, #12]
 801f422:	681a      	ldr	r2, [r3, #0]
 801f424:	4b09      	ldr	r3, [pc, #36]	; (801f44c <udp_input_local_match+0xc4>)
 801f426:	695b      	ldr	r3, [r3, #20]
 801f428:	429a      	cmp	r2, r3
 801f42a:	d101      	bne.n	801f430 <udp_input_local_match+0xa8>
        return 1;
 801f42c:	2301      	movs	r3, #1
 801f42e:	e000      	b.n	801f432 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801f430:	2300      	movs	r3, #0
}
 801f432:	4618      	mov	r0, r3
 801f434:	3710      	adds	r7, #16
 801f436:	46bd      	mov	sp, r7
 801f438:	bd80      	pop	{r7, pc}
 801f43a:	bf00      	nop
 801f43c:	08027f44 	.word	0x08027f44
 801f440:	08027fb0 	.word	0x08027fb0
 801f444:	08027fd4 	.word	0x08027fd4
 801f448:	08027ffc 	.word	0x08027ffc
 801f44c:	20010768 	.word	0x20010768

0801f450 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801f450:	b590      	push	{r4, r7, lr}
 801f452:	b08d      	sub	sp, #52	; 0x34
 801f454:	af02      	add	r7, sp, #8
 801f456:	6078      	str	r0, [r7, #4]
 801f458:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801f45a:	2300      	movs	r3, #0
 801f45c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801f45e:	687b      	ldr	r3, [r7, #4]
 801f460:	2b00      	cmp	r3, #0
 801f462:	d105      	bne.n	801f470 <udp_input+0x20>
 801f464:	4b7c      	ldr	r3, [pc, #496]	; (801f658 <udp_input+0x208>)
 801f466:	22cf      	movs	r2, #207	; 0xcf
 801f468:	497c      	ldr	r1, [pc, #496]	; (801f65c <udp_input+0x20c>)
 801f46a:	487d      	ldr	r0, [pc, #500]	; (801f660 <udp_input+0x210>)
 801f46c:	f003 f89a 	bl	80225a4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801f470:	683b      	ldr	r3, [r7, #0]
 801f472:	2b00      	cmp	r3, #0
 801f474:	d105      	bne.n	801f482 <udp_input+0x32>
 801f476:	4b78      	ldr	r3, [pc, #480]	; (801f658 <udp_input+0x208>)
 801f478:	22d0      	movs	r2, #208	; 0xd0
 801f47a:	497a      	ldr	r1, [pc, #488]	; (801f664 <udp_input+0x214>)
 801f47c:	4878      	ldr	r0, [pc, #480]	; (801f660 <udp_input+0x210>)
 801f47e:	f003 f891 	bl	80225a4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801f482:	687b      	ldr	r3, [r7, #4]
 801f484:	895b      	ldrh	r3, [r3, #10]
 801f486:	2b07      	cmp	r3, #7
 801f488:	d803      	bhi.n	801f492 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801f48a:	6878      	ldr	r0, [r7, #4]
 801f48c:	f7ff fb52 	bl	801eb34 <pbuf_free>
    goto end;
 801f490:	e0de      	b.n	801f650 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801f492:	687b      	ldr	r3, [r7, #4]
 801f494:	685b      	ldr	r3, [r3, #4]
 801f496:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801f498:	4b73      	ldr	r3, [pc, #460]	; (801f668 <udp_input+0x218>)
 801f49a:	695b      	ldr	r3, [r3, #20]
 801f49c:	4a72      	ldr	r2, [pc, #456]	; (801f668 <udp_input+0x218>)
 801f49e:	6812      	ldr	r2, [r2, #0]
 801f4a0:	4611      	mov	r1, r2
 801f4a2:	4618      	mov	r0, r3
 801f4a4:	f001 ff44 	bl	8021330 <ip4_addr_isbroadcast_u32>
 801f4a8:	4603      	mov	r3, r0
 801f4aa:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801f4ac:	697b      	ldr	r3, [r7, #20]
 801f4ae:	881b      	ldrh	r3, [r3, #0]
 801f4b0:	b29b      	uxth	r3, r3
 801f4b2:	4618      	mov	r0, r3
 801f4b4:	f7fd ff62 	bl	801d37c <lwip_htons>
 801f4b8:	4603      	mov	r3, r0
 801f4ba:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801f4bc:	697b      	ldr	r3, [r7, #20]
 801f4be:	885b      	ldrh	r3, [r3, #2]
 801f4c0:	b29b      	uxth	r3, r3
 801f4c2:	4618      	mov	r0, r3
 801f4c4:	f7fd ff5a 	bl	801d37c <lwip_htons>
 801f4c8:	4603      	mov	r3, r0
 801f4ca:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801f4cc:	2300      	movs	r3, #0
 801f4ce:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801f4d0:	2300      	movs	r3, #0
 801f4d2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801f4d4:	2300      	movs	r3, #0
 801f4d6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f4d8:	4b64      	ldr	r3, [pc, #400]	; (801f66c <udp_input+0x21c>)
 801f4da:	681b      	ldr	r3, [r3, #0]
 801f4dc:	627b      	str	r3, [r7, #36]	; 0x24
 801f4de:	e054      	b.n	801f58a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801f4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f4e2:	8a5b      	ldrh	r3, [r3, #18]
 801f4e4:	89fa      	ldrh	r2, [r7, #14]
 801f4e6:	429a      	cmp	r2, r3
 801f4e8:	d14a      	bne.n	801f580 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801f4ea:	7cfb      	ldrb	r3, [r7, #19]
 801f4ec:	461a      	mov	r2, r3
 801f4ee:	6839      	ldr	r1, [r7, #0]
 801f4f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801f4f2:	f7ff ff49 	bl	801f388 <udp_input_local_match>
 801f4f6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801f4f8:	2b00      	cmp	r3, #0
 801f4fa:	d041      	beq.n	801f580 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801f4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f4fe:	7c1b      	ldrb	r3, [r3, #16]
 801f500:	f003 0304 	and.w	r3, r3, #4
 801f504:	2b00      	cmp	r3, #0
 801f506:	d11d      	bne.n	801f544 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801f508:	69fb      	ldr	r3, [r7, #28]
 801f50a:	2b00      	cmp	r3, #0
 801f50c:	d102      	bne.n	801f514 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801f50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f510:	61fb      	str	r3, [r7, #28]
 801f512:	e017      	b.n	801f544 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801f514:	7cfb      	ldrb	r3, [r7, #19]
 801f516:	2b00      	cmp	r3, #0
 801f518:	d014      	beq.n	801f544 <udp_input+0xf4>
 801f51a:	4b53      	ldr	r3, [pc, #332]	; (801f668 <udp_input+0x218>)
 801f51c:	695b      	ldr	r3, [r3, #20]
 801f51e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f522:	d10f      	bne.n	801f544 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801f524:	69fb      	ldr	r3, [r7, #28]
 801f526:	681a      	ldr	r2, [r3, #0]
 801f528:	683b      	ldr	r3, [r7, #0]
 801f52a:	3304      	adds	r3, #4
 801f52c:	681b      	ldr	r3, [r3, #0]
 801f52e:	429a      	cmp	r2, r3
 801f530:	d008      	beq.n	801f544 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801f532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f534:	681a      	ldr	r2, [r3, #0]
 801f536:	683b      	ldr	r3, [r7, #0]
 801f538:	3304      	adds	r3, #4
 801f53a:	681b      	ldr	r3, [r3, #0]
 801f53c:	429a      	cmp	r2, r3
 801f53e:	d101      	bne.n	801f544 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801f540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f542:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801f544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f546:	8a9b      	ldrh	r3, [r3, #20]
 801f548:	8a3a      	ldrh	r2, [r7, #16]
 801f54a:	429a      	cmp	r2, r3
 801f54c:	d118      	bne.n	801f580 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801f54e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f550:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801f552:	2b00      	cmp	r3, #0
 801f554:	d005      	beq.n	801f562 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801f556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f558:	685a      	ldr	r2, [r3, #4]
 801f55a:	4b43      	ldr	r3, [pc, #268]	; (801f668 <udp_input+0x218>)
 801f55c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801f55e:	429a      	cmp	r2, r3
 801f560:	d10e      	bne.n	801f580 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801f562:	6a3b      	ldr	r3, [r7, #32]
 801f564:	2b00      	cmp	r3, #0
 801f566:	d014      	beq.n	801f592 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801f568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f56a:	68da      	ldr	r2, [r3, #12]
 801f56c:	6a3b      	ldr	r3, [r7, #32]
 801f56e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801f570:	4b3e      	ldr	r3, [pc, #248]	; (801f66c <udp_input+0x21c>)
 801f572:	681a      	ldr	r2, [r3, #0]
 801f574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f576:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801f578:	4a3c      	ldr	r2, [pc, #240]	; (801f66c <udp_input+0x21c>)
 801f57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f57c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801f57e:	e008      	b.n	801f592 <udp_input+0x142>
      }
    }

    prev = pcb;
 801f580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f582:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f586:	68db      	ldr	r3, [r3, #12]
 801f588:	627b      	str	r3, [r7, #36]	; 0x24
 801f58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f58c:	2b00      	cmp	r3, #0
 801f58e:	d1a7      	bne.n	801f4e0 <udp_input+0x90>
 801f590:	e000      	b.n	801f594 <udp_input+0x144>
        break;
 801f592:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801f594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f596:	2b00      	cmp	r3, #0
 801f598:	d101      	bne.n	801f59e <udp_input+0x14e>
    pcb = uncon_pcb;
 801f59a:	69fb      	ldr	r3, [r7, #28]
 801f59c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801f59e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f5a0:	2b00      	cmp	r3, #0
 801f5a2:	d002      	beq.n	801f5aa <udp_input+0x15a>
    for_us = 1;
 801f5a4:	2301      	movs	r3, #1
 801f5a6:	76fb      	strb	r3, [r7, #27]
 801f5a8:	e00a      	b.n	801f5c0 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801f5aa:	683b      	ldr	r3, [r7, #0]
 801f5ac:	3304      	adds	r3, #4
 801f5ae:	681a      	ldr	r2, [r3, #0]
 801f5b0:	4b2d      	ldr	r3, [pc, #180]	; (801f668 <udp_input+0x218>)
 801f5b2:	695b      	ldr	r3, [r3, #20]
 801f5b4:	429a      	cmp	r2, r3
 801f5b6:	bf0c      	ite	eq
 801f5b8:	2301      	moveq	r3, #1
 801f5ba:	2300      	movne	r3, #0
 801f5bc:	b2db      	uxtb	r3, r3
 801f5be:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801f5c0:	7efb      	ldrb	r3, [r7, #27]
 801f5c2:	2b00      	cmp	r3, #0
 801f5c4:	d041      	beq.n	801f64a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801f5c6:	2108      	movs	r1, #8
 801f5c8:	6878      	ldr	r0, [r7, #4]
 801f5ca:	f7ff fa2d 	bl	801ea28 <pbuf_remove_header>
 801f5ce:	4603      	mov	r3, r0
 801f5d0:	2b00      	cmp	r3, #0
 801f5d2:	d00a      	beq.n	801f5ea <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801f5d4:	4b20      	ldr	r3, [pc, #128]	; (801f658 <udp_input+0x208>)
 801f5d6:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801f5da:	4925      	ldr	r1, [pc, #148]	; (801f670 <udp_input+0x220>)
 801f5dc:	4820      	ldr	r0, [pc, #128]	; (801f660 <udp_input+0x210>)
 801f5de:	f002 ffe1 	bl	80225a4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801f5e2:	6878      	ldr	r0, [r7, #4]
 801f5e4:	f7ff faa6 	bl	801eb34 <pbuf_free>
      goto end;
 801f5e8:	e032      	b.n	801f650 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801f5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f5ec:	2b00      	cmp	r3, #0
 801f5ee:	d012      	beq.n	801f616 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801f5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f5f2:	699b      	ldr	r3, [r3, #24]
 801f5f4:	2b00      	cmp	r3, #0
 801f5f6:	d00a      	beq.n	801f60e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801f5f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f5fa:	699c      	ldr	r4, [r3, #24]
 801f5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f5fe:	69d8      	ldr	r0, [r3, #28]
 801f600:	8a3b      	ldrh	r3, [r7, #16]
 801f602:	9300      	str	r3, [sp, #0]
 801f604:	4b1b      	ldr	r3, [pc, #108]	; (801f674 <udp_input+0x224>)
 801f606:	687a      	ldr	r2, [r7, #4]
 801f608:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801f60a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801f60c:	e021      	b.n	801f652 <udp_input+0x202>
        pbuf_free(p);
 801f60e:	6878      	ldr	r0, [r7, #4]
 801f610:	f7ff fa90 	bl	801eb34 <pbuf_free>
        goto end;
 801f614:	e01c      	b.n	801f650 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801f616:	7cfb      	ldrb	r3, [r7, #19]
 801f618:	2b00      	cmp	r3, #0
 801f61a:	d112      	bne.n	801f642 <udp_input+0x1f2>
 801f61c:	4b12      	ldr	r3, [pc, #72]	; (801f668 <udp_input+0x218>)
 801f61e:	695b      	ldr	r3, [r3, #20]
 801f620:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801f624:	2be0      	cmp	r3, #224	; 0xe0
 801f626:	d00c      	beq.n	801f642 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801f628:	4b0f      	ldr	r3, [pc, #60]	; (801f668 <udp_input+0x218>)
 801f62a:	899b      	ldrh	r3, [r3, #12]
 801f62c:	3308      	adds	r3, #8
 801f62e:	b29b      	uxth	r3, r3
 801f630:	b21b      	sxth	r3, r3
 801f632:	4619      	mov	r1, r3
 801f634:	6878      	ldr	r0, [r7, #4]
 801f636:	f7ff fa6a 	bl	801eb0e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801f63a:	2103      	movs	r1, #3
 801f63c:	6878      	ldr	r0, [r7, #4]
 801f63e:	f001 fb53 	bl	8020ce8 <icmp_dest_unreach>
      pbuf_free(p);
 801f642:	6878      	ldr	r0, [r7, #4]
 801f644:	f7ff fa76 	bl	801eb34 <pbuf_free>
  return;
 801f648:	e003      	b.n	801f652 <udp_input+0x202>
    pbuf_free(p);
 801f64a:	6878      	ldr	r0, [r7, #4]
 801f64c:	f7ff fa72 	bl	801eb34 <pbuf_free>
  return;
 801f650:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801f652:	372c      	adds	r7, #44	; 0x2c
 801f654:	46bd      	mov	sp, r7
 801f656:	bd90      	pop	{r4, r7, pc}
 801f658:	08027f44 	.word	0x08027f44
 801f65c:	08028024 	.word	0x08028024
 801f660:	08027fd4 	.word	0x08027fd4
 801f664:	0802803c 	.word	0x0802803c
 801f668:	20010768 	.word	0x20010768
 801f66c:	20013dcc 	.word	0x20013dcc
 801f670:	08028058 	.word	0x08028058
 801f674:	20010778 	.word	0x20010778

0801f678 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 801f678:	b580      	push	{r7, lr}
 801f67a:	b088      	sub	sp, #32
 801f67c:	af02      	add	r7, sp, #8
 801f67e:	60f8      	str	r0, [r7, #12]
 801f680:	60b9      	str	r1, [r7, #8]
 801f682:	607a      	str	r2, [r7, #4]
 801f684:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801f686:	68fb      	ldr	r3, [r7, #12]
 801f688:	2b00      	cmp	r3, #0
 801f68a:	d109      	bne.n	801f6a0 <udp_sendto+0x28>
 801f68c:	4b23      	ldr	r3, [pc, #140]	; (801f71c <udp_sendto+0xa4>)
 801f68e:	f44f 7206 	mov.w	r2, #536	; 0x218
 801f692:	4923      	ldr	r1, [pc, #140]	; (801f720 <udp_sendto+0xa8>)
 801f694:	4823      	ldr	r0, [pc, #140]	; (801f724 <udp_sendto+0xac>)
 801f696:	f002 ff85 	bl	80225a4 <iprintf>
 801f69a:	f06f 030f 	mvn.w	r3, #15
 801f69e:	e038      	b.n	801f712 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801f6a0:	68bb      	ldr	r3, [r7, #8]
 801f6a2:	2b00      	cmp	r3, #0
 801f6a4:	d109      	bne.n	801f6ba <udp_sendto+0x42>
 801f6a6:	4b1d      	ldr	r3, [pc, #116]	; (801f71c <udp_sendto+0xa4>)
 801f6a8:	f240 2219 	movw	r2, #537	; 0x219
 801f6ac:	491e      	ldr	r1, [pc, #120]	; (801f728 <udp_sendto+0xb0>)
 801f6ae:	481d      	ldr	r0, [pc, #116]	; (801f724 <udp_sendto+0xac>)
 801f6b0:	f002 ff78 	bl	80225a4 <iprintf>
 801f6b4:	f06f 030f 	mvn.w	r3, #15
 801f6b8:	e02b      	b.n	801f712 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801f6ba:	687b      	ldr	r3, [r7, #4]
 801f6bc:	2b00      	cmp	r3, #0
 801f6be:	d109      	bne.n	801f6d4 <udp_sendto+0x5c>
 801f6c0:	4b16      	ldr	r3, [pc, #88]	; (801f71c <udp_sendto+0xa4>)
 801f6c2:	f240 221a 	movw	r2, #538	; 0x21a
 801f6c6:	4919      	ldr	r1, [pc, #100]	; (801f72c <udp_sendto+0xb4>)
 801f6c8:	4816      	ldr	r0, [pc, #88]	; (801f724 <udp_sendto+0xac>)
 801f6ca:	f002 ff6b 	bl	80225a4 <iprintf>
 801f6ce:	f06f 030f 	mvn.w	r3, #15
 801f6d2:	e01e      	b.n	801f712 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801f6d4:	68fb      	ldr	r3, [r7, #12]
 801f6d6:	7a1b      	ldrb	r3, [r3, #8]
 801f6d8:	2b00      	cmp	r3, #0
 801f6da:	d006      	beq.n	801f6ea <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801f6dc:	68fb      	ldr	r3, [r7, #12]
 801f6de:	7a1b      	ldrb	r3, [r3, #8]
 801f6e0:	4618      	mov	r0, r3
 801f6e2:	f7fe fef5 	bl	801e4d0 <netif_get_by_index>
 801f6e6:	6178      	str	r0, [r7, #20]
 801f6e8:	e003      	b.n	801f6f2 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801f6ea:	6878      	ldr	r0, [r7, #4]
 801f6ec:	f001 fb86 	bl	8020dfc <ip4_route>
 801f6f0:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801f6f2:	697b      	ldr	r3, [r7, #20]
 801f6f4:	2b00      	cmp	r3, #0
 801f6f6:	d102      	bne.n	801f6fe <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 801f6f8:	f06f 0303 	mvn.w	r3, #3
 801f6fc:	e009      	b.n	801f712 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801f6fe:	887a      	ldrh	r2, [r7, #2]
 801f700:	697b      	ldr	r3, [r7, #20]
 801f702:	9300      	str	r3, [sp, #0]
 801f704:	4613      	mov	r3, r2
 801f706:	687a      	ldr	r2, [r7, #4]
 801f708:	68b9      	ldr	r1, [r7, #8]
 801f70a:	68f8      	ldr	r0, [r7, #12]
 801f70c:	f000 f810 	bl	801f730 <udp_sendto_if>
 801f710:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801f712:	4618      	mov	r0, r3
 801f714:	3718      	adds	r7, #24
 801f716:	46bd      	mov	sp, r7
 801f718:	bd80      	pop	{r7, pc}
 801f71a:	bf00      	nop
 801f71c:	08027f44 	.word	0x08027f44
 801f720:	080280a4 	.word	0x080280a4
 801f724:	08027fd4 	.word	0x08027fd4
 801f728:	080280bc 	.word	0x080280bc
 801f72c:	080280d8 	.word	0x080280d8

0801f730 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801f730:	b580      	push	{r7, lr}
 801f732:	b088      	sub	sp, #32
 801f734:	af02      	add	r7, sp, #8
 801f736:	60f8      	str	r0, [r7, #12]
 801f738:	60b9      	str	r1, [r7, #8]
 801f73a:	607a      	str	r2, [r7, #4]
 801f73c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801f73e:	68fb      	ldr	r3, [r7, #12]
 801f740:	2b00      	cmp	r3, #0
 801f742:	d109      	bne.n	801f758 <udp_sendto_if+0x28>
 801f744:	4b2e      	ldr	r3, [pc, #184]	; (801f800 <udp_sendto_if+0xd0>)
 801f746:	f44f 7220 	mov.w	r2, #640	; 0x280
 801f74a:	492e      	ldr	r1, [pc, #184]	; (801f804 <udp_sendto_if+0xd4>)
 801f74c:	482e      	ldr	r0, [pc, #184]	; (801f808 <udp_sendto_if+0xd8>)
 801f74e:	f002 ff29 	bl	80225a4 <iprintf>
 801f752:	f06f 030f 	mvn.w	r3, #15
 801f756:	e04f      	b.n	801f7f8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801f758:	68bb      	ldr	r3, [r7, #8]
 801f75a:	2b00      	cmp	r3, #0
 801f75c:	d109      	bne.n	801f772 <udp_sendto_if+0x42>
 801f75e:	4b28      	ldr	r3, [pc, #160]	; (801f800 <udp_sendto_if+0xd0>)
 801f760:	f240 2281 	movw	r2, #641	; 0x281
 801f764:	4929      	ldr	r1, [pc, #164]	; (801f80c <udp_sendto_if+0xdc>)
 801f766:	4828      	ldr	r0, [pc, #160]	; (801f808 <udp_sendto_if+0xd8>)
 801f768:	f002 ff1c 	bl	80225a4 <iprintf>
 801f76c:	f06f 030f 	mvn.w	r3, #15
 801f770:	e042      	b.n	801f7f8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801f772:	687b      	ldr	r3, [r7, #4]
 801f774:	2b00      	cmp	r3, #0
 801f776:	d109      	bne.n	801f78c <udp_sendto_if+0x5c>
 801f778:	4b21      	ldr	r3, [pc, #132]	; (801f800 <udp_sendto_if+0xd0>)
 801f77a:	f240 2282 	movw	r2, #642	; 0x282
 801f77e:	4924      	ldr	r1, [pc, #144]	; (801f810 <udp_sendto_if+0xe0>)
 801f780:	4821      	ldr	r0, [pc, #132]	; (801f808 <udp_sendto_if+0xd8>)
 801f782:	f002 ff0f 	bl	80225a4 <iprintf>
 801f786:	f06f 030f 	mvn.w	r3, #15
 801f78a:	e035      	b.n	801f7f8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801f78c:	6a3b      	ldr	r3, [r7, #32]
 801f78e:	2b00      	cmp	r3, #0
 801f790:	d109      	bne.n	801f7a6 <udp_sendto_if+0x76>
 801f792:	4b1b      	ldr	r3, [pc, #108]	; (801f800 <udp_sendto_if+0xd0>)
 801f794:	f240 2283 	movw	r2, #643	; 0x283
 801f798:	491e      	ldr	r1, [pc, #120]	; (801f814 <udp_sendto_if+0xe4>)
 801f79a:	481b      	ldr	r0, [pc, #108]	; (801f808 <udp_sendto_if+0xd8>)
 801f79c:	f002 ff02 	bl	80225a4 <iprintf>
 801f7a0:	f06f 030f 	mvn.w	r3, #15
 801f7a4:	e028      	b.n	801f7f8 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801f7a6:	68fb      	ldr	r3, [r7, #12]
 801f7a8:	2b00      	cmp	r3, #0
 801f7aa:	d009      	beq.n	801f7c0 <udp_sendto_if+0x90>
 801f7ac:	68fb      	ldr	r3, [r7, #12]
 801f7ae:	681b      	ldr	r3, [r3, #0]
 801f7b0:	2b00      	cmp	r3, #0
 801f7b2:	d005      	beq.n	801f7c0 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801f7b4:	68fb      	ldr	r3, [r7, #12]
 801f7b6:	681b      	ldr	r3, [r3, #0]
 801f7b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801f7bc:	2be0      	cmp	r3, #224	; 0xe0
 801f7be:	d103      	bne.n	801f7c8 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801f7c0:	6a3b      	ldr	r3, [r7, #32]
 801f7c2:	3304      	adds	r3, #4
 801f7c4:	617b      	str	r3, [r7, #20]
 801f7c6:	e00b      	b.n	801f7e0 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801f7c8:	68fb      	ldr	r3, [r7, #12]
 801f7ca:	681a      	ldr	r2, [r3, #0]
 801f7cc:	6a3b      	ldr	r3, [r7, #32]
 801f7ce:	3304      	adds	r3, #4
 801f7d0:	681b      	ldr	r3, [r3, #0]
 801f7d2:	429a      	cmp	r2, r3
 801f7d4:	d002      	beq.n	801f7dc <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801f7d6:	f06f 0303 	mvn.w	r3, #3
 801f7da:	e00d      	b.n	801f7f8 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801f7dc:	68fb      	ldr	r3, [r7, #12]
 801f7de:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801f7e0:	887a      	ldrh	r2, [r7, #2]
 801f7e2:	697b      	ldr	r3, [r7, #20]
 801f7e4:	9301      	str	r3, [sp, #4]
 801f7e6:	6a3b      	ldr	r3, [r7, #32]
 801f7e8:	9300      	str	r3, [sp, #0]
 801f7ea:	4613      	mov	r3, r2
 801f7ec:	687a      	ldr	r2, [r7, #4]
 801f7ee:	68b9      	ldr	r1, [r7, #8]
 801f7f0:	68f8      	ldr	r0, [r7, #12]
 801f7f2:	f000 f811 	bl	801f818 <udp_sendto_if_src>
 801f7f6:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801f7f8:	4618      	mov	r0, r3
 801f7fa:	3718      	adds	r7, #24
 801f7fc:	46bd      	mov	sp, r7
 801f7fe:	bd80      	pop	{r7, pc}
 801f800:	08027f44 	.word	0x08027f44
 801f804:	080280f4 	.word	0x080280f4
 801f808:	08027fd4 	.word	0x08027fd4
 801f80c:	08028110 	.word	0x08028110
 801f810:	0802812c 	.word	0x0802812c
 801f814:	0802814c 	.word	0x0802814c

0801f818 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801f818:	b580      	push	{r7, lr}
 801f81a:	b08c      	sub	sp, #48	; 0x30
 801f81c:	af04      	add	r7, sp, #16
 801f81e:	60f8      	str	r0, [r7, #12]
 801f820:	60b9      	str	r1, [r7, #8]
 801f822:	607a      	str	r2, [r7, #4]
 801f824:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801f826:	68fb      	ldr	r3, [r7, #12]
 801f828:	2b00      	cmp	r3, #0
 801f82a:	d109      	bne.n	801f840 <udp_sendto_if_src+0x28>
 801f82c:	4b65      	ldr	r3, [pc, #404]	; (801f9c4 <udp_sendto_if_src+0x1ac>)
 801f82e:	f240 22d1 	movw	r2, #721	; 0x2d1
 801f832:	4965      	ldr	r1, [pc, #404]	; (801f9c8 <udp_sendto_if_src+0x1b0>)
 801f834:	4865      	ldr	r0, [pc, #404]	; (801f9cc <udp_sendto_if_src+0x1b4>)
 801f836:	f002 feb5 	bl	80225a4 <iprintf>
 801f83a:	f06f 030f 	mvn.w	r3, #15
 801f83e:	e0bc      	b.n	801f9ba <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801f840:	68bb      	ldr	r3, [r7, #8]
 801f842:	2b00      	cmp	r3, #0
 801f844:	d109      	bne.n	801f85a <udp_sendto_if_src+0x42>
 801f846:	4b5f      	ldr	r3, [pc, #380]	; (801f9c4 <udp_sendto_if_src+0x1ac>)
 801f848:	f240 22d2 	movw	r2, #722	; 0x2d2
 801f84c:	4960      	ldr	r1, [pc, #384]	; (801f9d0 <udp_sendto_if_src+0x1b8>)
 801f84e:	485f      	ldr	r0, [pc, #380]	; (801f9cc <udp_sendto_if_src+0x1b4>)
 801f850:	f002 fea8 	bl	80225a4 <iprintf>
 801f854:	f06f 030f 	mvn.w	r3, #15
 801f858:	e0af      	b.n	801f9ba <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801f85a:	687b      	ldr	r3, [r7, #4]
 801f85c:	2b00      	cmp	r3, #0
 801f85e:	d109      	bne.n	801f874 <udp_sendto_if_src+0x5c>
 801f860:	4b58      	ldr	r3, [pc, #352]	; (801f9c4 <udp_sendto_if_src+0x1ac>)
 801f862:	f240 22d3 	movw	r2, #723	; 0x2d3
 801f866:	495b      	ldr	r1, [pc, #364]	; (801f9d4 <udp_sendto_if_src+0x1bc>)
 801f868:	4858      	ldr	r0, [pc, #352]	; (801f9cc <udp_sendto_if_src+0x1b4>)
 801f86a:	f002 fe9b 	bl	80225a4 <iprintf>
 801f86e:	f06f 030f 	mvn.w	r3, #15
 801f872:	e0a2      	b.n	801f9ba <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801f874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f876:	2b00      	cmp	r3, #0
 801f878:	d109      	bne.n	801f88e <udp_sendto_if_src+0x76>
 801f87a:	4b52      	ldr	r3, [pc, #328]	; (801f9c4 <udp_sendto_if_src+0x1ac>)
 801f87c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801f880:	4955      	ldr	r1, [pc, #340]	; (801f9d8 <udp_sendto_if_src+0x1c0>)
 801f882:	4852      	ldr	r0, [pc, #328]	; (801f9cc <udp_sendto_if_src+0x1b4>)
 801f884:	f002 fe8e 	bl	80225a4 <iprintf>
 801f888:	f06f 030f 	mvn.w	r3, #15
 801f88c:	e095      	b.n	801f9ba <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801f88e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f890:	2b00      	cmp	r3, #0
 801f892:	d109      	bne.n	801f8a8 <udp_sendto_if_src+0x90>
 801f894:	4b4b      	ldr	r3, [pc, #300]	; (801f9c4 <udp_sendto_if_src+0x1ac>)
 801f896:	f240 22d5 	movw	r2, #725	; 0x2d5
 801f89a:	4950      	ldr	r1, [pc, #320]	; (801f9dc <udp_sendto_if_src+0x1c4>)
 801f89c:	484b      	ldr	r0, [pc, #300]	; (801f9cc <udp_sendto_if_src+0x1b4>)
 801f89e:	f002 fe81 	bl	80225a4 <iprintf>
 801f8a2:	f06f 030f 	mvn.w	r3, #15
 801f8a6:	e088      	b.n	801f9ba <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801f8a8:	68fb      	ldr	r3, [r7, #12]
 801f8aa:	8a5b      	ldrh	r3, [r3, #18]
 801f8ac:	2b00      	cmp	r3, #0
 801f8ae:	d10f      	bne.n	801f8d0 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801f8b0:	68f9      	ldr	r1, [r7, #12]
 801f8b2:	68fb      	ldr	r3, [r7, #12]
 801f8b4:	8a5b      	ldrh	r3, [r3, #18]
 801f8b6:	461a      	mov	r2, r3
 801f8b8:	68f8      	ldr	r0, [r7, #12]
 801f8ba:	f000 f893 	bl	801f9e4 <udp_bind>
 801f8be:	4603      	mov	r3, r0
 801f8c0:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801f8c2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801f8c6:	2b00      	cmp	r3, #0
 801f8c8:	d002      	beq.n	801f8d0 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801f8ca:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801f8ce:	e074      	b.n	801f9ba <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801f8d0:	68bb      	ldr	r3, [r7, #8]
 801f8d2:	891b      	ldrh	r3, [r3, #8]
 801f8d4:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801f8d8:	4293      	cmp	r3, r2
 801f8da:	d902      	bls.n	801f8e2 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801f8dc:	f04f 33ff 	mov.w	r3, #4294967295
 801f8e0:	e06b      	b.n	801f9ba <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801f8e2:	2108      	movs	r1, #8
 801f8e4:	68b8      	ldr	r0, [r7, #8]
 801f8e6:	f7ff f88f 	bl	801ea08 <pbuf_add_header>
 801f8ea:	4603      	mov	r3, r0
 801f8ec:	2b00      	cmp	r3, #0
 801f8ee:	d015      	beq.n	801f91c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801f8f0:	f44f 7220 	mov.w	r2, #640	; 0x280
 801f8f4:	2108      	movs	r1, #8
 801f8f6:	2022      	movs	r0, #34	; 0x22
 801f8f8:	f7fe fe3a 	bl	801e570 <pbuf_alloc>
 801f8fc:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801f8fe:	69fb      	ldr	r3, [r7, #28]
 801f900:	2b00      	cmp	r3, #0
 801f902:	d102      	bne.n	801f90a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801f904:	f04f 33ff 	mov.w	r3, #4294967295
 801f908:	e057      	b.n	801f9ba <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801f90a:	68bb      	ldr	r3, [r7, #8]
 801f90c:	891b      	ldrh	r3, [r3, #8]
 801f90e:	2b00      	cmp	r3, #0
 801f910:	d006      	beq.n	801f920 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801f912:	68b9      	ldr	r1, [r7, #8]
 801f914:	69f8      	ldr	r0, [r7, #28]
 801f916:	f7ff fa25 	bl	801ed64 <pbuf_chain>
 801f91a:	e001      	b.n	801f920 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801f91c:	68bb      	ldr	r3, [r7, #8]
 801f91e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801f920:	69fb      	ldr	r3, [r7, #28]
 801f922:	895b      	ldrh	r3, [r3, #10]
 801f924:	2b07      	cmp	r3, #7
 801f926:	d806      	bhi.n	801f936 <udp_sendto_if_src+0x11e>
 801f928:	4b26      	ldr	r3, [pc, #152]	; (801f9c4 <udp_sendto_if_src+0x1ac>)
 801f92a:	f240 320d 	movw	r2, #781	; 0x30d
 801f92e:	492c      	ldr	r1, [pc, #176]	; (801f9e0 <udp_sendto_if_src+0x1c8>)
 801f930:	4826      	ldr	r0, [pc, #152]	; (801f9cc <udp_sendto_if_src+0x1b4>)
 801f932:	f002 fe37 	bl	80225a4 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801f936:	69fb      	ldr	r3, [r7, #28]
 801f938:	685b      	ldr	r3, [r3, #4]
 801f93a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801f93c:	68fb      	ldr	r3, [r7, #12]
 801f93e:	8a5b      	ldrh	r3, [r3, #18]
 801f940:	4618      	mov	r0, r3
 801f942:	f7fd fd1b 	bl	801d37c <lwip_htons>
 801f946:	4603      	mov	r3, r0
 801f948:	461a      	mov	r2, r3
 801f94a:	697b      	ldr	r3, [r7, #20]
 801f94c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801f94e:	887b      	ldrh	r3, [r7, #2]
 801f950:	4618      	mov	r0, r3
 801f952:	f7fd fd13 	bl	801d37c <lwip_htons>
 801f956:	4603      	mov	r3, r0
 801f958:	461a      	mov	r2, r3
 801f95a:	697b      	ldr	r3, [r7, #20]
 801f95c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801f95e:	697b      	ldr	r3, [r7, #20]
 801f960:	2200      	movs	r2, #0
 801f962:	719a      	strb	r2, [r3, #6]
 801f964:	2200      	movs	r2, #0
 801f966:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801f968:	69fb      	ldr	r3, [r7, #28]
 801f96a:	891b      	ldrh	r3, [r3, #8]
 801f96c:	4618      	mov	r0, r3
 801f96e:	f7fd fd05 	bl	801d37c <lwip_htons>
 801f972:	4603      	mov	r3, r0
 801f974:	461a      	mov	r2, r3
 801f976:	697b      	ldr	r3, [r7, #20]
 801f978:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801f97a:	2311      	movs	r3, #17
 801f97c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801f97e:	68fb      	ldr	r3, [r7, #12]
 801f980:	7adb      	ldrb	r3, [r3, #11]
 801f982:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801f984:	68fb      	ldr	r3, [r7, #12]
 801f986:	7a9b      	ldrb	r3, [r3, #10]
 801f988:	7cb9      	ldrb	r1, [r7, #18]
 801f98a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801f98c:	9202      	str	r2, [sp, #8]
 801f98e:	7cfa      	ldrb	r2, [r7, #19]
 801f990:	9201      	str	r2, [sp, #4]
 801f992:	9300      	str	r3, [sp, #0]
 801f994:	460b      	mov	r3, r1
 801f996:	687a      	ldr	r2, [r7, #4]
 801f998:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801f99a:	69f8      	ldr	r0, [r7, #28]
 801f99c:	f001 fc0c 	bl	80211b8 <ip4_output_if_src>
 801f9a0:	4603      	mov	r3, r0
 801f9a2:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801f9a4:	69fa      	ldr	r2, [r7, #28]
 801f9a6:	68bb      	ldr	r3, [r7, #8]
 801f9a8:	429a      	cmp	r2, r3
 801f9aa:	d004      	beq.n	801f9b6 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801f9ac:	69f8      	ldr	r0, [r7, #28]
 801f9ae:	f7ff f8c1 	bl	801eb34 <pbuf_free>
    q = NULL;
 801f9b2:	2300      	movs	r3, #0
 801f9b4:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801f9b6:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801f9ba:	4618      	mov	r0, r3
 801f9bc:	3720      	adds	r7, #32
 801f9be:	46bd      	mov	sp, r7
 801f9c0:	bd80      	pop	{r7, pc}
 801f9c2:	bf00      	nop
 801f9c4:	08027f44 	.word	0x08027f44
 801f9c8:	0802816c 	.word	0x0802816c
 801f9cc:	08027fd4 	.word	0x08027fd4
 801f9d0:	0802818c 	.word	0x0802818c
 801f9d4:	080281ac 	.word	0x080281ac
 801f9d8:	080281d0 	.word	0x080281d0
 801f9dc:	080281f4 	.word	0x080281f4
 801f9e0:	08028218 	.word	0x08028218

0801f9e4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801f9e4:	b580      	push	{r7, lr}
 801f9e6:	b086      	sub	sp, #24
 801f9e8:	af00      	add	r7, sp, #0
 801f9ea:	60f8      	str	r0, [r7, #12]
 801f9ec:	60b9      	str	r1, [r7, #8]
 801f9ee:	4613      	mov	r3, r2
 801f9f0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801f9f2:	68bb      	ldr	r3, [r7, #8]
 801f9f4:	2b00      	cmp	r3, #0
 801f9f6:	d101      	bne.n	801f9fc <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801f9f8:	4b39      	ldr	r3, [pc, #228]	; (801fae0 <udp_bind+0xfc>)
 801f9fa:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801f9fc:	68fb      	ldr	r3, [r7, #12]
 801f9fe:	2b00      	cmp	r3, #0
 801fa00:	d109      	bne.n	801fa16 <udp_bind+0x32>
 801fa02:	4b38      	ldr	r3, [pc, #224]	; (801fae4 <udp_bind+0x100>)
 801fa04:	f240 32b7 	movw	r2, #951	; 0x3b7
 801fa08:	4937      	ldr	r1, [pc, #220]	; (801fae8 <udp_bind+0x104>)
 801fa0a:	4838      	ldr	r0, [pc, #224]	; (801faec <udp_bind+0x108>)
 801fa0c:	f002 fdca 	bl	80225a4 <iprintf>
 801fa10:	f06f 030f 	mvn.w	r3, #15
 801fa14:	e060      	b.n	801fad8 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801fa16:	2300      	movs	r3, #0
 801fa18:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fa1a:	4b35      	ldr	r3, [pc, #212]	; (801faf0 <udp_bind+0x10c>)
 801fa1c:	681b      	ldr	r3, [r3, #0]
 801fa1e:	617b      	str	r3, [r7, #20]
 801fa20:	e009      	b.n	801fa36 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801fa22:	68fa      	ldr	r2, [r7, #12]
 801fa24:	697b      	ldr	r3, [r7, #20]
 801fa26:	429a      	cmp	r2, r3
 801fa28:	d102      	bne.n	801fa30 <udp_bind+0x4c>
      rebind = 1;
 801fa2a:	2301      	movs	r3, #1
 801fa2c:	74fb      	strb	r3, [r7, #19]
      break;
 801fa2e:	e005      	b.n	801fa3c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fa30:	697b      	ldr	r3, [r7, #20]
 801fa32:	68db      	ldr	r3, [r3, #12]
 801fa34:	617b      	str	r3, [r7, #20]
 801fa36:	697b      	ldr	r3, [r7, #20]
 801fa38:	2b00      	cmp	r3, #0
 801fa3a:	d1f2      	bne.n	801fa22 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801fa3c:	88fb      	ldrh	r3, [r7, #6]
 801fa3e:	2b00      	cmp	r3, #0
 801fa40:	d109      	bne.n	801fa56 <udp_bind+0x72>
    port = udp_new_port();
 801fa42:	f7ff fc69 	bl	801f318 <udp_new_port>
 801fa46:	4603      	mov	r3, r0
 801fa48:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801fa4a:	88fb      	ldrh	r3, [r7, #6]
 801fa4c:	2b00      	cmp	r3, #0
 801fa4e:	d12c      	bne.n	801faaa <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801fa50:	f06f 0307 	mvn.w	r3, #7
 801fa54:	e040      	b.n	801fad8 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fa56:	4b26      	ldr	r3, [pc, #152]	; (801faf0 <udp_bind+0x10c>)
 801fa58:	681b      	ldr	r3, [r3, #0]
 801fa5a:	617b      	str	r3, [r7, #20]
 801fa5c:	e022      	b.n	801faa4 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801fa5e:	68fa      	ldr	r2, [r7, #12]
 801fa60:	697b      	ldr	r3, [r7, #20]
 801fa62:	429a      	cmp	r2, r3
 801fa64:	d01b      	beq.n	801fa9e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801fa66:	697b      	ldr	r3, [r7, #20]
 801fa68:	8a5b      	ldrh	r3, [r3, #18]
 801fa6a:	88fa      	ldrh	r2, [r7, #6]
 801fa6c:	429a      	cmp	r2, r3
 801fa6e:	d116      	bne.n	801fa9e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801fa70:	697b      	ldr	r3, [r7, #20]
 801fa72:	681a      	ldr	r2, [r3, #0]
 801fa74:	68bb      	ldr	r3, [r7, #8]
 801fa76:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801fa78:	429a      	cmp	r2, r3
 801fa7a:	d00d      	beq.n	801fa98 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801fa7c:	68bb      	ldr	r3, [r7, #8]
 801fa7e:	2b00      	cmp	r3, #0
 801fa80:	d00a      	beq.n	801fa98 <udp_bind+0xb4>
 801fa82:	68bb      	ldr	r3, [r7, #8]
 801fa84:	681b      	ldr	r3, [r3, #0]
 801fa86:	2b00      	cmp	r3, #0
 801fa88:	d006      	beq.n	801fa98 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801fa8a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801fa8c:	2b00      	cmp	r3, #0
 801fa8e:	d003      	beq.n	801fa98 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801fa90:	697b      	ldr	r3, [r7, #20]
 801fa92:	681b      	ldr	r3, [r3, #0]
 801fa94:	2b00      	cmp	r3, #0
 801fa96:	d102      	bne.n	801fa9e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801fa98:	f06f 0307 	mvn.w	r3, #7
 801fa9c:	e01c      	b.n	801fad8 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fa9e:	697b      	ldr	r3, [r7, #20]
 801faa0:	68db      	ldr	r3, [r3, #12]
 801faa2:	617b      	str	r3, [r7, #20]
 801faa4:	697b      	ldr	r3, [r7, #20]
 801faa6:	2b00      	cmp	r3, #0
 801faa8:	d1d9      	bne.n	801fa5e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801faaa:	68bb      	ldr	r3, [r7, #8]
 801faac:	2b00      	cmp	r3, #0
 801faae:	d002      	beq.n	801fab6 <udp_bind+0xd2>
 801fab0:	68bb      	ldr	r3, [r7, #8]
 801fab2:	681b      	ldr	r3, [r3, #0]
 801fab4:	e000      	b.n	801fab8 <udp_bind+0xd4>
 801fab6:	2300      	movs	r3, #0
 801fab8:	68fa      	ldr	r2, [r7, #12]
 801faba:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801fabc:	68fb      	ldr	r3, [r7, #12]
 801fabe:	88fa      	ldrh	r2, [r7, #6]
 801fac0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801fac2:	7cfb      	ldrb	r3, [r7, #19]
 801fac4:	2b00      	cmp	r3, #0
 801fac6:	d106      	bne.n	801fad6 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801fac8:	4b09      	ldr	r3, [pc, #36]	; (801faf0 <udp_bind+0x10c>)
 801faca:	681a      	ldr	r2, [r3, #0]
 801facc:	68fb      	ldr	r3, [r7, #12]
 801face:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801fad0:	4a07      	ldr	r2, [pc, #28]	; (801faf0 <udp_bind+0x10c>)
 801fad2:	68fb      	ldr	r3, [r7, #12]
 801fad4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801fad6:	2300      	movs	r3, #0
}
 801fad8:	4618      	mov	r0, r3
 801fada:	3718      	adds	r7, #24
 801fadc:	46bd      	mov	sp, r7
 801fade:	bd80      	pop	{r7, pc}
 801fae0:	08028f90 	.word	0x08028f90
 801fae4:	08027f44 	.word	0x08027f44
 801fae8:	08028248 	.word	0x08028248
 801faec:	08027fd4 	.word	0x08027fd4
 801faf0:	20013dcc 	.word	0x20013dcc

0801faf4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801faf4:	b580      	push	{r7, lr}
 801faf6:	b084      	sub	sp, #16
 801faf8:	af00      	add	r7, sp, #0
 801fafa:	60f8      	str	r0, [r7, #12]
 801fafc:	60b9      	str	r1, [r7, #8]
 801fafe:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801fb00:	68fb      	ldr	r3, [r7, #12]
 801fb02:	2b00      	cmp	r3, #0
 801fb04:	d107      	bne.n	801fb16 <udp_recv+0x22>
 801fb06:	4b08      	ldr	r3, [pc, #32]	; (801fb28 <udp_recv+0x34>)
 801fb08:	f240 428a 	movw	r2, #1162	; 0x48a
 801fb0c:	4907      	ldr	r1, [pc, #28]	; (801fb2c <udp_recv+0x38>)
 801fb0e:	4808      	ldr	r0, [pc, #32]	; (801fb30 <udp_recv+0x3c>)
 801fb10:	f002 fd48 	bl	80225a4 <iprintf>
 801fb14:	e005      	b.n	801fb22 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801fb16:	68fb      	ldr	r3, [r7, #12]
 801fb18:	68ba      	ldr	r2, [r7, #8]
 801fb1a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801fb1c:	68fb      	ldr	r3, [r7, #12]
 801fb1e:	687a      	ldr	r2, [r7, #4]
 801fb20:	61da      	str	r2, [r3, #28]
}
 801fb22:	3710      	adds	r7, #16
 801fb24:	46bd      	mov	sp, r7
 801fb26:	bd80      	pop	{r7, pc}
 801fb28:	08027f44 	.word	0x08027f44
 801fb2c:	080282b4 	.word	0x080282b4
 801fb30:	08027fd4 	.word	0x08027fd4

0801fb34 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801fb34:	b580      	push	{r7, lr}
 801fb36:	b084      	sub	sp, #16
 801fb38:	af00      	add	r7, sp, #0
 801fb3a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801fb3c:	687b      	ldr	r3, [r7, #4]
 801fb3e:	2b00      	cmp	r3, #0
 801fb40:	d107      	bne.n	801fb52 <udp_remove+0x1e>
 801fb42:	4b19      	ldr	r3, [pc, #100]	; (801fba8 <udp_remove+0x74>)
 801fb44:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801fb48:	4918      	ldr	r1, [pc, #96]	; (801fbac <udp_remove+0x78>)
 801fb4a:	4819      	ldr	r0, [pc, #100]	; (801fbb0 <udp_remove+0x7c>)
 801fb4c:	f002 fd2a 	bl	80225a4 <iprintf>
 801fb50:	e026      	b.n	801fba0 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801fb52:	4b18      	ldr	r3, [pc, #96]	; (801fbb4 <udp_remove+0x80>)
 801fb54:	681b      	ldr	r3, [r3, #0]
 801fb56:	687a      	ldr	r2, [r7, #4]
 801fb58:	429a      	cmp	r2, r3
 801fb5a:	d105      	bne.n	801fb68 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801fb5c:	4b15      	ldr	r3, [pc, #84]	; (801fbb4 <udp_remove+0x80>)
 801fb5e:	681b      	ldr	r3, [r3, #0]
 801fb60:	68db      	ldr	r3, [r3, #12]
 801fb62:	4a14      	ldr	r2, [pc, #80]	; (801fbb4 <udp_remove+0x80>)
 801fb64:	6013      	str	r3, [r2, #0]
 801fb66:	e017      	b.n	801fb98 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801fb68:	4b12      	ldr	r3, [pc, #72]	; (801fbb4 <udp_remove+0x80>)
 801fb6a:	681b      	ldr	r3, [r3, #0]
 801fb6c:	60fb      	str	r3, [r7, #12]
 801fb6e:	e010      	b.n	801fb92 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801fb70:	68fb      	ldr	r3, [r7, #12]
 801fb72:	68db      	ldr	r3, [r3, #12]
 801fb74:	2b00      	cmp	r3, #0
 801fb76:	d009      	beq.n	801fb8c <udp_remove+0x58>
 801fb78:	68fb      	ldr	r3, [r7, #12]
 801fb7a:	68db      	ldr	r3, [r3, #12]
 801fb7c:	687a      	ldr	r2, [r7, #4]
 801fb7e:	429a      	cmp	r2, r3
 801fb80:	d104      	bne.n	801fb8c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801fb82:	687b      	ldr	r3, [r7, #4]
 801fb84:	68da      	ldr	r2, [r3, #12]
 801fb86:	68fb      	ldr	r3, [r7, #12]
 801fb88:	60da      	str	r2, [r3, #12]
        break;
 801fb8a:	e005      	b.n	801fb98 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801fb8c:	68fb      	ldr	r3, [r7, #12]
 801fb8e:	68db      	ldr	r3, [r3, #12]
 801fb90:	60fb      	str	r3, [r7, #12]
 801fb92:	68fb      	ldr	r3, [r7, #12]
 801fb94:	2b00      	cmp	r3, #0
 801fb96:	d1eb      	bne.n	801fb70 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801fb98:	6879      	ldr	r1, [r7, #4]
 801fb9a:	2000      	movs	r0, #0
 801fb9c:	f7fe f8ba 	bl	801dd14 <memp_free>
}
 801fba0:	3710      	adds	r7, #16
 801fba2:	46bd      	mov	sp, r7
 801fba4:	bd80      	pop	{r7, pc}
 801fba6:	bf00      	nop
 801fba8:	08027f44 	.word	0x08027f44
 801fbac:	080282cc 	.word	0x080282cc
 801fbb0:	08027fd4 	.word	0x08027fd4
 801fbb4:	20013dcc 	.word	0x20013dcc

0801fbb8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801fbb8:	b580      	push	{r7, lr}
 801fbba:	b082      	sub	sp, #8
 801fbbc:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801fbbe:	2000      	movs	r0, #0
 801fbc0:	f7fe f838 	bl	801dc34 <memp_malloc>
 801fbc4:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801fbc6:	687b      	ldr	r3, [r7, #4]
 801fbc8:	2b00      	cmp	r3, #0
 801fbca:	d007      	beq.n	801fbdc <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801fbcc:	2220      	movs	r2, #32
 801fbce:	2100      	movs	r1, #0
 801fbd0:	6878      	ldr	r0, [r7, #4]
 801fbd2:	f002 fbff 	bl	80223d4 <memset>
    pcb->ttl = UDP_TTL;
 801fbd6:	687b      	ldr	r3, [r7, #4]
 801fbd8:	22ff      	movs	r2, #255	; 0xff
 801fbda:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801fbdc:	687b      	ldr	r3, [r7, #4]
}
 801fbde:	4618      	mov	r0, r3
 801fbe0:	3708      	adds	r7, #8
 801fbe2:	46bd      	mov	sp, r7
 801fbe4:	bd80      	pop	{r7, pc}
	...

0801fbe8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801fbe8:	b480      	push	{r7}
 801fbea:	b085      	sub	sp, #20
 801fbec:	af00      	add	r7, sp, #0
 801fbee:	6078      	str	r0, [r7, #4]
 801fbf0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801fbf2:	687b      	ldr	r3, [r7, #4]
 801fbf4:	2b00      	cmp	r3, #0
 801fbf6:	d01e      	beq.n	801fc36 <udp_netif_ip_addr_changed+0x4e>
 801fbf8:	687b      	ldr	r3, [r7, #4]
 801fbfa:	681b      	ldr	r3, [r3, #0]
 801fbfc:	2b00      	cmp	r3, #0
 801fbfe:	d01a      	beq.n	801fc36 <udp_netif_ip_addr_changed+0x4e>
 801fc00:	683b      	ldr	r3, [r7, #0]
 801fc02:	2b00      	cmp	r3, #0
 801fc04:	d017      	beq.n	801fc36 <udp_netif_ip_addr_changed+0x4e>
 801fc06:	683b      	ldr	r3, [r7, #0]
 801fc08:	681b      	ldr	r3, [r3, #0]
 801fc0a:	2b00      	cmp	r3, #0
 801fc0c:	d013      	beq.n	801fc36 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801fc0e:	4b0d      	ldr	r3, [pc, #52]	; (801fc44 <udp_netif_ip_addr_changed+0x5c>)
 801fc10:	681b      	ldr	r3, [r3, #0]
 801fc12:	60fb      	str	r3, [r7, #12]
 801fc14:	e00c      	b.n	801fc30 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801fc16:	68fb      	ldr	r3, [r7, #12]
 801fc18:	681a      	ldr	r2, [r3, #0]
 801fc1a:	687b      	ldr	r3, [r7, #4]
 801fc1c:	681b      	ldr	r3, [r3, #0]
 801fc1e:	429a      	cmp	r2, r3
 801fc20:	d103      	bne.n	801fc2a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801fc22:	683b      	ldr	r3, [r7, #0]
 801fc24:	681a      	ldr	r2, [r3, #0]
 801fc26:	68fb      	ldr	r3, [r7, #12]
 801fc28:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801fc2a:	68fb      	ldr	r3, [r7, #12]
 801fc2c:	68db      	ldr	r3, [r3, #12]
 801fc2e:	60fb      	str	r3, [r7, #12]
 801fc30:	68fb      	ldr	r3, [r7, #12]
 801fc32:	2b00      	cmp	r3, #0
 801fc34:	d1ef      	bne.n	801fc16 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801fc36:	bf00      	nop
 801fc38:	3714      	adds	r7, #20
 801fc3a:	46bd      	mov	sp, r7
 801fc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fc40:	4770      	bx	lr
 801fc42:	bf00      	nop
 801fc44:	20013dcc 	.word	0x20013dcc

0801fc48 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801fc48:	b580      	push	{r7, lr}
 801fc4a:	b082      	sub	sp, #8
 801fc4c:	af00      	add	r7, sp, #0
 801fc4e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801fc50:	4915      	ldr	r1, [pc, #84]	; (801fca8 <etharp_free_entry+0x60>)
 801fc52:	687a      	ldr	r2, [r7, #4]
 801fc54:	4613      	mov	r3, r2
 801fc56:	005b      	lsls	r3, r3, #1
 801fc58:	4413      	add	r3, r2
 801fc5a:	00db      	lsls	r3, r3, #3
 801fc5c:	440b      	add	r3, r1
 801fc5e:	681b      	ldr	r3, [r3, #0]
 801fc60:	2b00      	cmp	r3, #0
 801fc62:	d013      	beq.n	801fc8c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801fc64:	4910      	ldr	r1, [pc, #64]	; (801fca8 <etharp_free_entry+0x60>)
 801fc66:	687a      	ldr	r2, [r7, #4]
 801fc68:	4613      	mov	r3, r2
 801fc6a:	005b      	lsls	r3, r3, #1
 801fc6c:	4413      	add	r3, r2
 801fc6e:	00db      	lsls	r3, r3, #3
 801fc70:	440b      	add	r3, r1
 801fc72:	681b      	ldr	r3, [r3, #0]
 801fc74:	4618      	mov	r0, r3
 801fc76:	f7fe ff5d 	bl	801eb34 <pbuf_free>
    arp_table[i].q = NULL;
 801fc7a:	490b      	ldr	r1, [pc, #44]	; (801fca8 <etharp_free_entry+0x60>)
 801fc7c:	687a      	ldr	r2, [r7, #4]
 801fc7e:	4613      	mov	r3, r2
 801fc80:	005b      	lsls	r3, r3, #1
 801fc82:	4413      	add	r3, r2
 801fc84:	00db      	lsls	r3, r3, #3
 801fc86:	440b      	add	r3, r1
 801fc88:	2200      	movs	r2, #0
 801fc8a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801fc8c:	4906      	ldr	r1, [pc, #24]	; (801fca8 <etharp_free_entry+0x60>)
 801fc8e:	687a      	ldr	r2, [r7, #4]
 801fc90:	4613      	mov	r3, r2
 801fc92:	005b      	lsls	r3, r3, #1
 801fc94:	4413      	add	r3, r2
 801fc96:	00db      	lsls	r3, r3, #3
 801fc98:	440b      	add	r3, r1
 801fc9a:	3314      	adds	r3, #20
 801fc9c:	2200      	movs	r2, #0
 801fc9e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801fca0:	bf00      	nop
 801fca2:	3708      	adds	r7, #8
 801fca4:	46bd      	mov	sp, r7
 801fca6:	bd80      	pop	{r7, pc}
 801fca8:	20013dd0 	.word	0x20013dd0

0801fcac <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801fcac:	b580      	push	{r7, lr}
 801fcae:	b082      	sub	sp, #8
 801fcb0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801fcb2:	2300      	movs	r3, #0
 801fcb4:	607b      	str	r3, [r7, #4]
 801fcb6:	e096      	b.n	801fde6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801fcb8:	494f      	ldr	r1, [pc, #316]	; (801fdf8 <etharp_tmr+0x14c>)
 801fcba:	687a      	ldr	r2, [r7, #4]
 801fcbc:	4613      	mov	r3, r2
 801fcbe:	005b      	lsls	r3, r3, #1
 801fcc0:	4413      	add	r3, r2
 801fcc2:	00db      	lsls	r3, r3, #3
 801fcc4:	440b      	add	r3, r1
 801fcc6:	3314      	adds	r3, #20
 801fcc8:	781b      	ldrb	r3, [r3, #0]
 801fcca:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801fccc:	78fb      	ldrb	r3, [r7, #3]
 801fcce:	2b00      	cmp	r3, #0
 801fcd0:	f000 8086 	beq.w	801fde0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801fcd4:	4948      	ldr	r1, [pc, #288]	; (801fdf8 <etharp_tmr+0x14c>)
 801fcd6:	687a      	ldr	r2, [r7, #4]
 801fcd8:	4613      	mov	r3, r2
 801fcda:	005b      	lsls	r3, r3, #1
 801fcdc:	4413      	add	r3, r2
 801fcde:	00db      	lsls	r3, r3, #3
 801fce0:	440b      	add	r3, r1
 801fce2:	3312      	adds	r3, #18
 801fce4:	881b      	ldrh	r3, [r3, #0]
 801fce6:	3301      	adds	r3, #1
 801fce8:	b298      	uxth	r0, r3
 801fcea:	4943      	ldr	r1, [pc, #268]	; (801fdf8 <etharp_tmr+0x14c>)
 801fcec:	687a      	ldr	r2, [r7, #4]
 801fcee:	4613      	mov	r3, r2
 801fcf0:	005b      	lsls	r3, r3, #1
 801fcf2:	4413      	add	r3, r2
 801fcf4:	00db      	lsls	r3, r3, #3
 801fcf6:	440b      	add	r3, r1
 801fcf8:	3312      	adds	r3, #18
 801fcfa:	4602      	mov	r2, r0
 801fcfc:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801fcfe:	493e      	ldr	r1, [pc, #248]	; (801fdf8 <etharp_tmr+0x14c>)
 801fd00:	687a      	ldr	r2, [r7, #4]
 801fd02:	4613      	mov	r3, r2
 801fd04:	005b      	lsls	r3, r3, #1
 801fd06:	4413      	add	r3, r2
 801fd08:	00db      	lsls	r3, r3, #3
 801fd0a:	440b      	add	r3, r1
 801fd0c:	3312      	adds	r3, #18
 801fd0e:	881b      	ldrh	r3, [r3, #0]
 801fd10:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801fd14:	d215      	bcs.n	801fd42 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801fd16:	4938      	ldr	r1, [pc, #224]	; (801fdf8 <etharp_tmr+0x14c>)
 801fd18:	687a      	ldr	r2, [r7, #4]
 801fd1a:	4613      	mov	r3, r2
 801fd1c:	005b      	lsls	r3, r3, #1
 801fd1e:	4413      	add	r3, r2
 801fd20:	00db      	lsls	r3, r3, #3
 801fd22:	440b      	add	r3, r1
 801fd24:	3314      	adds	r3, #20
 801fd26:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801fd28:	2b01      	cmp	r3, #1
 801fd2a:	d10e      	bne.n	801fd4a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801fd2c:	4932      	ldr	r1, [pc, #200]	; (801fdf8 <etharp_tmr+0x14c>)
 801fd2e:	687a      	ldr	r2, [r7, #4]
 801fd30:	4613      	mov	r3, r2
 801fd32:	005b      	lsls	r3, r3, #1
 801fd34:	4413      	add	r3, r2
 801fd36:	00db      	lsls	r3, r3, #3
 801fd38:	440b      	add	r3, r1
 801fd3a:	3312      	adds	r3, #18
 801fd3c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801fd3e:	2b04      	cmp	r3, #4
 801fd40:	d903      	bls.n	801fd4a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801fd42:	6878      	ldr	r0, [r7, #4]
 801fd44:	f7ff ff80 	bl	801fc48 <etharp_free_entry>
 801fd48:	e04a      	b.n	801fde0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801fd4a:	492b      	ldr	r1, [pc, #172]	; (801fdf8 <etharp_tmr+0x14c>)
 801fd4c:	687a      	ldr	r2, [r7, #4]
 801fd4e:	4613      	mov	r3, r2
 801fd50:	005b      	lsls	r3, r3, #1
 801fd52:	4413      	add	r3, r2
 801fd54:	00db      	lsls	r3, r3, #3
 801fd56:	440b      	add	r3, r1
 801fd58:	3314      	adds	r3, #20
 801fd5a:	781b      	ldrb	r3, [r3, #0]
 801fd5c:	2b03      	cmp	r3, #3
 801fd5e:	d10a      	bne.n	801fd76 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801fd60:	4925      	ldr	r1, [pc, #148]	; (801fdf8 <etharp_tmr+0x14c>)
 801fd62:	687a      	ldr	r2, [r7, #4]
 801fd64:	4613      	mov	r3, r2
 801fd66:	005b      	lsls	r3, r3, #1
 801fd68:	4413      	add	r3, r2
 801fd6a:	00db      	lsls	r3, r3, #3
 801fd6c:	440b      	add	r3, r1
 801fd6e:	3314      	adds	r3, #20
 801fd70:	2204      	movs	r2, #4
 801fd72:	701a      	strb	r2, [r3, #0]
 801fd74:	e034      	b.n	801fde0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801fd76:	4920      	ldr	r1, [pc, #128]	; (801fdf8 <etharp_tmr+0x14c>)
 801fd78:	687a      	ldr	r2, [r7, #4]
 801fd7a:	4613      	mov	r3, r2
 801fd7c:	005b      	lsls	r3, r3, #1
 801fd7e:	4413      	add	r3, r2
 801fd80:	00db      	lsls	r3, r3, #3
 801fd82:	440b      	add	r3, r1
 801fd84:	3314      	adds	r3, #20
 801fd86:	781b      	ldrb	r3, [r3, #0]
 801fd88:	2b04      	cmp	r3, #4
 801fd8a:	d10a      	bne.n	801fda2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801fd8c:	491a      	ldr	r1, [pc, #104]	; (801fdf8 <etharp_tmr+0x14c>)
 801fd8e:	687a      	ldr	r2, [r7, #4]
 801fd90:	4613      	mov	r3, r2
 801fd92:	005b      	lsls	r3, r3, #1
 801fd94:	4413      	add	r3, r2
 801fd96:	00db      	lsls	r3, r3, #3
 801fd98:	440b      	add	r3, r1
 801fd9a:	3314      	adds	r3, #20
 801fd9c:	2202      	movs	r2, #2
 801fd9e:	701a      	strb	r2, [r3, #0]
 801fda0:	e01e      	b.n	801fde0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801fda2:	4915      	ldr	r1, [pc, #84]	; (801fdf8 <etharp_tmr+0x14c>)
 801fda4:	687a      	ldr	r2, [r7, #4]
 801fda6:	4613      	mov	r3, r2
 801fda8:	005b      	lsls	r3, r3, #1
 801fdaa:	4413      	add	r3, r2
 801fdac:	00db      	lsls	r3, r3, #3
 801fdae:	440b      	add	r3, r1
 801fdb0:	3314      	adds	r3, #20
 801fdb2:	781b      	ldrb	r3, [r3, #0]
 801fdb4:	2b01      	cmp	r3, #1
 801fdb6:	d113      	bne.n	801fde0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801fdb8:	490f      	ldr	r1, [pc, #60]	; (801fdf8 <etharp_tmr+0x14c>)
 801fdba:	687a      	ldr	r2, [r7, #4]
 801fdbc:	4613      	mov	r3, r2
 801fdbe:	005b      	lsls	r3, r3, #1
 801fdc0:	4413      	add	r3, r2
 801fdc2:	00db      	lsls	r3, r3, #3
 801fdc4:	440b      	add	r3, r1
 801fdc6:	3308      	adds	r3, #8
 801fdc8:	6818      	ldr	r0, [r3, #0]
 801fdca:	687a      	ldr	r2, [r7, #4]
 801fdcc:	4613      	mov	r3, r2
 801fdce:	005b      	lsls	r3, r3, #1
 801fdd0:	4413      	add	r3, r2
 801fdd2:	00db      	lsls	r3, r3, #3
 801fdd4:	4a08      	ldr	r2, [pc, #32]	; (801fdf8 <etharp_tmr+0x14c>)
 801fdd6:	4413      	add	r3, r2
 801fdd8:	3304      	adds	r3, #4
 801fdda:	4619      	mov	r1, r3
 801fddc:	f000 fe6e 	bl	8020abc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801fde0:	687b      	ldr	r3, [r7, #4]
 801fde2:	3301      	adds	r3, #1
 801fde4:	607b      	str	r3, [r7, #4]
 801fde6:	687b      	ldr	r3, [r7, #4]
 801fde8:	2b31      	cmp	r3, #49	; 0x31
 801fdea:	f77f af65 	ble.w	801fcb8 <etharp_tmr+0xc>
      }
    }
  }
}
 801fdee:	bf00      	nop
 801fdf0:	bf00      	nop
 801fdf2:	3708      	adds	r7, #8
 801fdf4:	46bd      	mov	sp, r7
 801fdf6:	bd80      	pop	{r7, pc}
 801fdf8:	20013dd0 	.word	0x20013dd0

0801fdfc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801fdfc:	b580      	push	{r7, lr}
 801fdfe:	b08a      	sub	sp, #40	; 0x28
 801fe00:	af00      	add	r7, sp, #0
 801fe02:	60f8      	str	r0, [r7, #12]
 801fe04:	460b      	mov	r3, r1
 801fe06:	607a      	str	r2, [r7, #4]
 801fe08:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801fe0a:	2332      	movs	r3, #50	; 0x32
 801fe0c:	84fb      	strh	r3, [r7, #38]	; 0x26
 801fe0e:	2332      	movs	r3, #50	; 0x32
 801fe10:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801fe12:	2332      	movs	r3, #50	; 0x32
 801fe14:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801fe16:	2300      	movs	r3, #0
 801fe18:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801fe1a:	2332      	movs	r3, #50	; 0x32
 801fe1c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801fe1e:	2300      	movs	r3, #0
 801fe20:	83bb      	strh	r3, [r7, #28]
 801fe22:	2300      	movs	r3, #0
 801fe24:	837b      	strh	r3, [r7, #26]
 801fe26:	2300      	movs	r3, #0
 801fe28:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801fe2a:	2300      	movs	r3, #0
 801fe2c:	843b      	strh	r3, [r7, #32]
 801fe2e:	e0ae      	b.n	801ff8e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801fe30:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801fe34:	49a6      	ldr	r1, [pc, #664]	; (80200d0 <etharp_find_entry+0x2d4>)
 801fe36:	4613      	mov	r3, r2
 801fe38:	005b      	lsls	r3, r3, #1
 801fe3a:	4413      	add	r3, r2
 801fe3c:	00db      	lsls	r3, r3, #3
 801fe3e:	440b      	add	r3, r1
 801fe40:	3314      	adds	r3, #20
 801fe42:	781b      	ldrb	r3, [r3, #0]
 801fe44:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801fe46:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801fe4a:	2b32      	cmp	r3, #50	; 0x32
 801fe4c:	d105      	bne.n	801fe5a <etharp_find_entry+0x5e>
 801fe4e:	7dfb      	ldrb	r3, [r7, #23]
 801fe50:	2b00      	cmp	r3, #0
 801fe52:	d102      	bne.n	801fe5a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801fe54:	8c3b      	ldrh	r3, [r7, #32]
 801fe56:	847b      	strh	r3, [r7, #34]	; 0x22
 801fe58:	e095      	b.n	801ff86 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801fe5a:	7dfb      	ldrb	r3, [r7, #23]
 801fe5c:	2b00      	cmp	r3, #0
 801fe5e:	f000 8092 	beq.w	801ff86 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801fe62:	7dfb      	ldrb	r3, [r7, #23]
 801fe64:	2b01      	cmp	r3, #1
 801fe66:	d009      	beq.n	801fe7c <etharp_find_entry+0x80>
 801fe68:	7dfb      	ldrb	r3, [r7, #23]
 801fe6a:	2b01      	cmp	r3, #1
 801fe6c:	d806      	bhi.n	801fe7c <etharp_find_entry+0x80>
 801fe6e:	4b99      	ldr	r3, [pc, #612]	; (80200d4 <etharp_find_entry+0x2d8>)
 801fe70:	f240 1223 	movw	r2, #291	; 0x123
 801fe74:	4998      	ldr	r1, [pc, #608]	; (80200d8 <etharp_find_entry+0x2dc>)
 801fe76:	4899      	ldr	r0, [pc, #612]	; (80200dc <etharp_find_entry+0x2e0>)
 801fe78:	f002 fb94 	bl	80225a4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801fe7c:	68fb      	ldr	r3, [r7, #12]
 801fe7e:	2b00      	cmp	r3, #0
 801fe80:	d020      	beq.n	801fec4 <etharp_find_entry+0xc8>
 801fe82:	68fb      	ldr	r3, [r7, #12]
 801fe84:	6819      	ldr	r1, [r3, #0]
 801fe86:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801fe8a:	4891      	ldr	r0, [pc, #580]	; (80200d0 <etharp_find_entry+0x2d4>)
 801fe8c:	4613      	mov	r3, r2
 801fe8e:	005b      	lsls	r3, r3, #1
 801fe90:	4413      	add	r3, r2
 801fe92:	00db      	lsls	r3, r3, #3
 801fe94:	4403      	add	r3, r0
 801fe96:	3304      	adds	r3, #4
 801fe98:	681b      	ldr	r3, [r3, #0]
 801fe9a:	4299      	cmp	r1, r3
 801fe9c:	d112      	bne.n	801fec4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801fe9e:	687b      	ldr	r3, [r7, #4]
 801fea0:	2b00      	cmp	r3, #0
 801fea2:	d00c      	beq.n	801febe <etharp_find_entry+0xc2>
 801fea4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801fea8:	4989      	ldr	r1, [pc, #548]	; (80200d0 <etharp_find_entry+0x2d4>)
 801feaa:	4613      	mov	r3, r2
 801feac:	005b      	lsls	r3, r3, #1
 801feae:	4413      	add	r3, r2
 801feb0:	00db      	lsls	r3, r3, #3
 801feb2:	440b      	add	r3, r1
 801feb4:	3308      	adds	r3, #8
 801feb6:	681b      	ldr	r3, [r3, #0]
 801feb8:	687a      	ldr	r2, [r7, #4]
 801feba:	429a      	cmp	r2, r3
 801febc:	d102      	bne.n	801fec4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801febe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801fec2:	e100      	b.n	80200c6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801fec4:	7dfb      	ldrb	r3, [r7, #23]
 801fec6:	2b01      	cmp	r3, #1
 801fec8:	d140      	bne.n	801ff4c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801feca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801fece:	4980      	ldr	r1, [pc, #512]	; (80200d0 <etharp_find_entry+0x2d4>)
 801fed0:	4613      	mov	r3, r2
 801fed2:	005b      	lsls	r3, r3, #1
 801fed4:	4413      	add	r3, r2
 801fed6:	00db      	lsls	r3, r3, #3
 801fed8:	440b      	add	r3, r1
 801feda:	681b      	ldr	r3, [r3, #0]
 801fedc:	2b00      	cmp	r3, #0
 801fede:	d01a      	beq.n	801ff16 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801fee0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801fee4:	497a      	ldr	r1, [pc, #488]	; (80200d0 <etharp_find_entry+0x2d4>)
 801fee6:	4613      	mov	r3, r2
 801fee8:	005b      	lsls	r3, r3, #1
 801feea:	4413      	add	r3, r2
 801feec:	00db      	lsls	r3, r3, #3
 801feee:	440b      	add	r3, r1
 801fef0:	3312      	adds	r3, #18
 801fef2:	881b      	ldrh	r3, [r3, #0]
 801fef4:	8bba      	ldrh	r2, [r7, #28]
 801fef6:	429a      	cmp	r2, r3
 801fef8:	d845      	bhi.n	801ff86 <etharp_find_entry+0x18a>
            old_queue = i;
 801fefa:	8c3b      	ldrh	r3, [r7, #32]
 801fefc:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801fefe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ff02:	4973      	ldr	r1, [pc, #460]	; (80200d0 <etharp_find_entry+0x2d4>)
 801ff04:	4613      	mov	r3, r2
 801ff06:	005b      	lsls	r3, r3, #1
 801ff08:	4413      	add	r3, r2
 801ff0a:	00db      	lsls	r3, r3, #3
 801ff0c:	440b      	add	r3, r1
 801ff0e:	3312      	adds	r3, #18
 801ff10:	881b      	ldrh	r3, [r3, #0]
 801ff12:	83bb      	strh	r3, [r7, #28]
 801ff14:	e037      	b.n	801ff86 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801ff16:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ff1a:	496d      	ldr	r1, [pc, #436]	; (80200d0 <etharp_find_entry+0x2d4>)
 801ff1c:	4613      	mov	r3, r2
 801ff1e:	005b      	lsls	r3, r3, #1
 801ff20:	4413      	add	r3, r2
 801ff22:	00db      	lsls	r3, r3, #3
 801ff24:	440b      	add	r3, r1
 801ff26:	3312      	adds	r3, #18
 801ff28:	881b      	ldrh	r3, [r3, #0]
 801ff2a:	8b7a      	ldrh	r2, [r7, #26]
 801ff2c:	429a      	cmp	r2, r3
 801ff2e:	d82a      	bhi.n	801ff86 <etharp_find_entry+0x18a>
            old_pending = i;
 801ff30:	8c3b      	ldrh	r3, [r7, #32]
 801ff32:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801ff34:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ff38:	4965      	ldr	r1, [pc, #404]	; (80200d0 <etharp_find_entry+0x2d4>)
 801ff3a:	4613      	mov	r3, r2
 801ff3c:	005b      	lsls	r3, r3, #1
 801ff3e:	4413      	add	r3, r2
 801ff40:	00db      	lsls	r3, r3, #3
 801ff42:	440b      	add	r3, r1
 801ff44:	3312      	adds	r3, #18
 801ff46:	881b      	ldrh	r3, [r3, #0]
 801ff48:	837b      	strh	r3, [r7, #26]
 801ff4a:	e01c      	b.n	801ff86 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801ff4c:	7dfb      	ldrb	r3, [r7, #23]
 801ff4e:	2b01      	cmp	r3, #1
 801ff50:	d919      	bls.n	801ff86 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801ff52:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ff56:	495e      	ldr	r1, [pc, #376]	; (80200d0 <etharp_find_entry+0x2d4>)
 801ff58:	4613      	mov	r3, r2
 801ff5a:	005b      	lsls	r3, r3, #1
 801ff5c:	4413      	add	r3, r2
 801ff5e:	00db      	lsls	r3, r3, #3
 801ff60:	440b      	add	r3, r1
 801ff62:	3312      	adds	r3, #18
 801ff64:	881b      	ldrh	r3, [r3, #0]
 801ff66:	8b3a      	ldrh	r2, [r7, #24]
 801ff68:	429a      	cmp	r2, r3
 801ff6a:	d80c      	bhi.n	801ff86 <etharp_find_entry+0x18a>
            old_stable = i;
 801ff6c:	8c3b      	ldrh	r3, [r7, #32]
 801ff6e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801ff70:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ff74:	4956      	ldr	r1, [pc, #344]	; (80200d0 <etharp_find_entry+0x2d4>)
 801ff76:	4613      	mov	r3, r2
 801ff78:	005b      	lsls	r3, r3, #1
 801ff7a:	4413      	add	r3, r2
 801ff7c:	00db      	lsls	r3, r3, #3
 801ff7e:	440b      	add	r3, r1
 801ff80:	3312      	adds	r3, #18
 801ff82:	881b      	ldrh	r3, [r3, #0]
 801ff84:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801ff86:	8c3b      	ldrh	r3, [r7, #32]
 801ff88:	3301      	adds	r3, #1
 801ff8a:	b29b      	uxth	r3, r3
 801ff8c:	843b      	strh	r3, [r7, #32]
 801ff8e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801ff92:	2b31      	cmp	r3, #49	; 0x31
 801ff94:	f77f af4c 	ble.w	801fe30 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801ff98:	7afb      	ldrb	r3, [r7, #11]
 801ff9a:	f003 0302 	and.w	r3, r3, #2
 801ff9e:	2b00      	cmp	r3, #0
 801ffa0:	d108      	bne.n	801ffb4 <etharp_find_entry+0x1b8>
 801ffa2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801ffa6:	2b32      	cmp	r3, #50	; 0x32
 801ffa8:	d107      	bne.n	801ffba <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801ffaa:	7afb      	ldrb	r3, [r7, #11]
 801ffac:	f003 0301 	and.w	r3, r3, #1
 801ffb0:	2b00      	cmp	r3, #0
 801ffb2:	d102      	bne.n	801ffba <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801ffb4:	f04f 33ff 	mov.w	r3, #4294967295
 801ffb8:	e085      	b.n	80200c6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801ffba:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801ffbe:	2b31      	cmp	r3, #49	; 0x31
 801ffc0:	dc02      	bgt.n	801ffc8 <etharp_find_entry+0x1cc>
    i = empty;
 801ffc2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801ffc4:	843b      	strh	r3, [r7, #32]
 801ffc6:	e039      	b.n	802003c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801ffc8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801ffcc:	2b31      	cmp	r3, #49	; 0x31
 801ffce:	dc14      	bgt.n	801fffa <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801ffd0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801ffd2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801ffd4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ffd8:	493d      	ldr	r1, [pc, #244]	; (80200d0 <etharp_find_entry+0x2d4>)
 801ffda:	4613      	mov	r3, r2
 801ffdc:	005b      	lsls	r3, r3, #1
 801ffde:	4413      	add	r3, r2
 801ffe0:	00db      	lsls	r3, r3, #3
 801ffe2:	440b      	add	r3, r1
 801ffe4:	681b      	ldr	r3, [r3, #0]
 801ffe6:	2b00      	cmp	r3, #0
 801ffe8:	d018      	beq.n	802001c <etharp_find_entry+0x220>
 801ffea:	4b3a      	ldr	r3, [pc, #232]	; (80200d4 <etharp_find_entry+0x2d8>)
 801ffec:	f240 126d 	movw	r2, #365	; 0x16d
 801fff0:	493b      	ldr	r1, [pc, #236]	; (80200e0 <etharp_find_entry+0x2e4>)
 801fff2:	483a      	ldr	r0, [pc, #232]	; (80200dc <etharp_find_entry+0x2e0>)
 801fff4:	f002 fad6 	bl	80225a4 <iprintf>
 801fff8:	e010      	b.n	802001c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801fffa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801fffe:	2b31      	cmp	r3, #49	; 0x31
 8020000:	dc02      	bgt.n	8020008 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8020002:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8020004:	843b      	strh	r3, [r7, #32]
 8020006:	e009      	b.n	802001c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8020008:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 802000c:	2b31      	cmp	r3, #49	; 0x31
 802000e:	dc02      	bgt.n	8020016 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8020010:	8bfb      	ldrh	r3, [r7, #30]
 8020012:	843b      	strh	r3, [r7, #32]
 8020014:	e002      	b.n	802001c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8020016:	f04f 33ff 	mov.w	r3, #4294967295
 802001a:	e054      	b.n	80200c6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 802001c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8020020:	2b31      	cmp	r3, #49	; 0x31
 8020022:	dd06      	ble.n	8020032 <etharp_find_entry+0x236>
 8020024:	4b2b      	ldr	r3, [pc, #172]	; (80200d4 <etharp_find_entry+0x2d8>)
 8020026:	f240 127f 	movw	r2, #383	; 0x17f
 802002a:	492e      	ldr	r1, [pc, #184]	; (80200e4 <etharp_find_entry+0x2e8>)
 802002c:	482b      	ldr	r0, [pc, #172]	; (80200dc <etharp_find_entry+0x2e0>)
 802002e:	f002 fab9 	bl	80225a4 <iprintf>
    etharp_free_entry(i);
 8020032:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8020036:	4618      	mov	r0, r3
 8020038:	f7ff fe06 	bl	801fc48 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 802003c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8020040:	2b31      	cmp	r3, #49	; 0x31
 8020042:	dd06      	ble.n	8020052 <etharp_find_entry+0x256>
 8020044:	4b23      	ldr	r3, [pc, #140]	; (80200d4 <etharp_find_entry+0x2d8>)
 8020046:	f240 1283 	movw	r2, #387	; 0x183
 802004a:	4926      	ldr	r1, [pc, #152]	; (80200e4 <etharp_find_entry+0x2e8>)
 802004c:	4823      	ldr	r0, [pc, #140]	; (80200dc <etharp_find_entry+0x2e0>)
 802004e:	f002 faa9 	bl	80225a4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8020052:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8020056:	491e      	ldr	r1, [pc, #120]	; (80200d0 <etharp_find_entry+0x2d4>)
 8020058:	4613      	mov	r3, r2
 802005a:	005b      	lsls	r3, r3, #1
 802005c:	4413      	add	r3, r2
 802005e:	00db      	lsls	r3, r3, #3
 8020060:	440b      	add	r3, r1
 8020062:	3314      	adds	r3, #20
 8020064:	781b      	ldrb	r3, [r3, #0]
 8020066:	2b00      	cmp	r3, #0
 8020068:	d006      	beq.n	8020078 <etharp_find_entry+0x27c>
 802006a:	4b1a      	ldr	r3, [pc, #104]	; (80200d4 <etharp_find_entry+0x2d8>)
 802006c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8020070:	491d      	ldr	r1, [pc, #116]	; (80200e8 <etharp_find_entry+0x2ec>)
 8020072:	481a      	ldr	r0, [pc, #104]	; (80200dc <etharp_find_entry+0x2e0>)
 8020074:	f002 fa96 	bl	80225a4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8020078:	68fb      	ldr	r3, [r7, #12]
 802007a:	2b00      	cmp	r3, #0
 802007c:	d00b      	beq.n	8020096 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 802007e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8020082:	68fb      	ldr	r3, [r7, #12]
 8020084:	6819      	ldr	r1, [r3, #0]
 8020086:	4812      	ldr	r0, [pc, #72]	; (80200d0 <etharp_find_entry+0x2d4>)
 8020088:	4613      	mov	r3, r2
 802008a:	005b      	lsls	r3, r3, #1
 802008c:	4413      	add	r3, r2
 802008e:	00db      	lsls	r3, r3, #3
 8020090:	4403      	add	r3, r0
 8020092:	3304      	adds	r3, #4
 8020094:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8020096:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802009a:	490d      	ldr	r1, [pc, #52]	; (80200d0 <etharp_find_entry+0x2d4>)
 802009c:	4613      	mov	r3, r2
 802009e:	005b      	lsls	r3, r3, #1
 80200a0:	4413      	add	r3, r2
 80200a2:	00db      	lsls	r3, r3, #3
 80200a4:	440b      	add	r3, r1
 80200a6:	3312      	adds	r3, #18
 80200a8:	2200      	movs	r2, #0
 80200aa:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80200ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80200b0:	4907      	ldr	r1, [pc, #28]	; (80200d0 <etharp_find_entry+0x2d4>)
 80200b2:	4613      	mov	r3, r2
 80200b4:	005b      	lsls	r3, r3, #1
 80200b6:	4413      	add	r3, r2
 80200b8:	00db      	lsls	r3, r3, #3
 80200ba:	440b      	add	r3, r1
 80200bc:	3308      	adds	r3, #8
 80200be:	687a      	ldr	r2, [r7, #4]
 80200c0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80200c2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80200c6:	4618      	mov	r0, r3
 80200c8:	3728      	adds	r7, #40	; 0x28
 80200ca:	46bd      	mov	sp, r7
 80200cc:	bd80      	pop	{r7, pc}
 80200ce:	bf00      	nop
 80200d0:	20013dd0 	.word	0x20013dd0
 80200d4:	080282e4 	.word	0x080282e4
 80200d8:	08028358 	.word	0x08028358
 80200dc:	08028398 	.word	0x08028398
 80200e0:	080283c0 	.word	0x080283c0
 80200e4:	080283d8 	.word	0x080283d8
 80200e8:	080283ec 	.word	0x080283ec

080200ec <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80200ec:	b580      	push	{r7, lr}
 80200ee:	b088      	sub	sp, #32
 80200f0:	af02      	add	r7, sp, #8
 80200f2:	60f8      	str	r0, [r7, #12]
 80200f4:	60b9      	str	r1, [r7, #8]
 80200f6:	607a      	str	r2, [r7, #4]
 80200f8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80200fa:	68fb      	ldr	r3, [r7, #12]
 80200fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8020100:	2b06      	cmp	r3, #6
 8020102:	d006      	beq.n	8020112 <etharp_update_arp_entry+0x26>
 8020104:	4b48      	ldr	r3, [pc, #288]	; (8020228 <etharp_update_arp_entry+0x13c>)
 8020106:	f240 12a9 	movw	r2, #425	; 0x1a9
 802010a:	4948      	ldr	r1, [pc, #288]	; (802022c <etharp_update_arp_entry+0x140>)
 802010c:	4848      	ldr	r0, [pc, #288]	; (8020230 <etharp_update_arp_entry+0x144>)
 802010e:	f002 fa49 	bl	80225a4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8020112:	68bb      	ldr	r3, [r7, #8]
 8020114:	2b00      	cmp	r3, #0
 8020116:	d012      	beq.n	802013e <etharp_update_arp_entry+0x52>
 8020118:	68bb      	ldr	r3, [r7, #8]
 802011a:	681b      	ldr	r3, [r3, #0]
 802011c:	2b00      	cmp	r3, #0
 802011e:	d00e      	beq.n	802013e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8020120:	68bb      	ldr	r3, [r7, #8]
 8020122:	681b      	ldr	r3, [r3, #0]
 8020124:	68f9      	ldr	r1, [r7, #12]
 8020126:	4618      	mov	r0, r3
 8020128:	f001 f902 	bl	8021330 <ip4_addr_isbroadcast_u32>
 802012c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 802012e:	2b00      	cmp	r3, #0
 8020130:	d105      	bne.n	802013e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8020132:	68bb      	ldr	r3, [r7, #8]
 8020134:	681b      	ldr	r3, [r3, #0]
 8020136:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 802013a:	2be0      	cmp	r3, #224	; 0xe0
 802013c:	d102      	bne.n	8020144 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 802013e:	f06f 030f 	mvn.w	r3, #15
 8020142:	e06c      	b.n	802021e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8020144:	78fb      	ldrb	r3, [r7, #3]
 8020146:	68fa      	ldr	r2, [r7, #12]
 8020148:	4619      	mov	r1, r3
 802014a:	68b8      	ldr	r0, [r7, #8]
 802014c:	f7ff fe56 	bl	801fdfc <etharp_find_entry>
 8020150:	4603      	mov	r3, r0
 8020152:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8020154:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8020158:	2b00      	cmp	r3, #0
 802015a:	da02      	bge.n	8020162 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 802015c:	8afb      	ldrh	r3, [r7, #22]
 802015e:	b25b      	sxtb	r3, r3
 8020160:	e05d      	b.n	802021e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8020162:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8020166:	4933      	ldr	r1, [pc, #204]	; (8020234 <etharp_update_arp_entry+0x148>)
 8020168:	4613      	mov	r3, r2
 802016a:	005b      	lsls	r3, r3, #1
 802016c:	4413      	add	r3, r2
 802016e:	00db      	lsls	r3, r3, #3
 8020170:	440b      	add	r3, r1
 8020172:	3314      	adds	r3, #20
 8020174:	2202      	movs	r2, #2
 8020176:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8020178:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 802017c:	492d      	ldr	r1, [pc, #180]	; (8020234 <etharp_update_arp_entry+0x148>)
 802017e:	4613      	mov	r3, r2
 8020180:	005b      	lsls	r3, r3, #1
 8020182:	4413      	add	r3, r2
 8020184:	00db      	lsls	r3, r3, #3
 8020186:	440b      	add	r3, r1
 8020188:	3308      	adds	r3, #8
 802018a:	68fa      	ldr	r2, [r7, #12]
 802018c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 802018e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8020192:	4613      	mov	r3, r2
 8020194:	005b      	lsls	r3, r3, #1
 8020196:	4413      	add	r3, r2
 8020198:	00db      	lsls	r3, r3, #3
 802019a:	3308      	adds	r3, #8
 802019c:	4a25      	ldr	r2, [pc, #148]	; (8020234 <etharp_update_arp_entry+0x148>)
 802019e:	4413      	add	r3, r2
 80201a0:	3304      	adds	r3, #4
 80201a2:	2206      	movs	r2, #6
 80201a4:	6879      	ldr	r1, [r7, #4]
 80201a6:	4618      	mov	r0, r3
 80201a8:	f002 f8ec 	bl	8022384 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80201ac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80201b0:	4920      	ldr	r1, [pc, #128]	; (8020234 <etharp_update_arp_entry+0x148>)
 80201b2:	4613      	mov	r3, r2
 80201b4:	005b      	lsls	r3, r3, #1
 80201b6:	4413      	add	r3, r2
 80201b8:	00db      	lsls	r3, r3, #3
 80201ba:	440b      	add	r3, r1
 80201bc:	3312      	adds	r3, #18
 80201be:	2200      	movs	r2, #0
 80201c0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80201c2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80201c6:	491b      	ldr	r1, [pc, #108]	; (8020234 <etharp_update_arp_entry+0x148>)
 80201c8:	4613      	mov	r3, r2
 80201ca:	005b      	lsls	r3, r3, #1
 80201cc:	4413      	add	r3, r2
 80201ce:	00db      	lsls	r3, r3, #3
 80201d0:	440b      	add	r3, r1
 80201d2:	681b      	ldr	r3, [r3, #0]
 80201d4:	2b00      	cmp	r3, #0
 80201d6:	d021      	beq.n	802021c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80201d8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80201dc:	4915      	ldr	r1, [pc, #84]	; (8020234 <etharp_update_arp_entry+0x148>)
 80201de:	4613      	mov	r3, r2
 80201e0:	005b      	lsls	r3, r3, #1
 80201e2:	4413      	add	r3, r2
 80201e4:	00db      	lsls	r3, r3, #3
 80201e6:	440b      	add	r3, r1
 80201e8:	681b      	ldr	r3, [r3, #0]
 80201ea:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80201ec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80201f0:	4910      	ldr	r1, [pc, #64]	; (8020234 <etharp_update_arp_entry+0x148>)
 80201f2:	4613      	mov	r3, r2
 80201f4:	005b      	lsls	r3, r3, #1
 80201f6:	4413      	add	r3, r2
 80201f8:	00db      	lsls	r3, r3, #3
 80201fa:	440b      	add	r3, r1
 80201fc:	2200      	movs	r2, #0
 80201fe:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8020200:	68fb      	ldr	r3, [r7, #12]
 8020202:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8020206:	f44f 6300 	mov.w	r3, #2048	; 0x800
 802020a:	9300      	str	r3, [sp, #0]
 802020c:	687b      	ldr	r3, [r7, #4]
 802020e:	6939      	ldr	r1, [r7, #16]
 8020210:	68f8      	ldr	r0, [r7, #12]
 8020212:	f002 f82b 	bl	802226c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8020216:	6938      	ldr	r0, [r7, #16]
 8020218:	f7fe fc8c 	bl	801eb34 <pbuf_free>
  }
  return ERR_OK;
 802021c:	2300      	movs	r3, #0
}
 802021e:	4618      	mov	r0, r3
 8020220:	3718      	adds	r7, #24
 8020222:	46bd      	mov	sp, r7
 8020224:	bd80      	pop	{r7, pc}
 8020226:	bf00      	nop
 8020228:	080282e4 	.word	0x080282e4
 802022c:	08028418 	.word	0x08028418
 8020230:	08028398 	.word	0x08028398
 8020234:	20013dd0 	.word	0x20013dd0

08020238 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8020238:	b580      	push	{r7, lr}
 802023a:	b084      	sub	sp, #16
 802023c:	af00      	add	r7, sp, #0
 802023e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8020240:	2300      	movs	r3, #0
 8020242:	60fb      	str	r3, [r7, #12]
 8020244:	e01e      	b.n	8020284 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8020246:	4913      	ldr	r1, [pc, #76]	; (8020294 <etharp_cleanup_netif+0x5c>)
 8020248:	68fa      	ldr	r2, [r7, #12]
 802024a:	4613      	mov	r3, r2
 802024c:	005b      	lsls	r3, r3, #1
 802024e:	4413      	add	r3, r2
 8020250:	00db      	lsls	r3, r3, #3
 8020252:	440b      	add	r3, r1
 8020254:	3314      	adds	r3, #20
 8020256:	781b      	ldrb	r3, [r3, #0]
 8020258:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 802025a:	7afb      	ldrb	r3, [r7, #11]
 802025c:	2b00      	cmp	r3, #0
 802025e:	d00e      	beq.n	802027e <etharp_cleanup_netif+0x46>
 8020260:	490c      	ldr	r1, [pc, #48]	; (8020294 <etharp_cleanup_netif+0x5c>)
 8020262:	68fa      	ldr	r2, [r7, #12]
 8020264:	4613      	mov	r3, r2
 8020266:	005b      	lsls	r3, r3, #1
 8020268:	4413      	add	r3, r2
 802026a:	00db      	lsls	r3, r3, #3
 802026c:	440b      	add	r3, r1
 802026e:	3308      	adds	r3, #8
 8020270:	681b      	ldr	r3, [r3, #0]
 8020272:	687a      	ldr	r2, [r7, #4]
 8020274:	429a      	cmp	r2, r3
 8020276:	d102      	bne.n	802027e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8020278:	68f8      	ldr	r0, [r7, #12]
 802027a:	f7ff fce5 	bl	801fc48 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 802027e:	68fb      	ldr	r3, [r7, #12]
 8020280:	3301      	adds	r3, #1
 8020282:	60fb      	str	r3, [r7, #12]
 8020284:	68fb      	ldr	r3, [r7, #12]
 8020286:	2b31      	cmp	r3, #49	; 0x31
 8020288:	dddd      	ble.n	8020246 <etharp_cleanup_netif+0xe>
    }
  }
}
 802028a:	bf00      	nop
 802028c:	bf00      	nop
 802028e:	3710      	adds	r7, #16
 8020290:	46bd      	mov	sp, r7
 8020292:	bd80      	pop	{r7, pc}
 8020294:	20013dd0 	.word	0x20013dd0

08020298 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8020298:	b5b0      	push	{r4, r5, r7, lr}
 802029a:	b08a      	sub	sp, #40	; 0x28
 802029c:	af04      	add	r7, sp, #16
 802029e:	6078      	str	r0, [r7, #4]
 80202a0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80202a2:	683b      	ldr	r3, [r7, #0]
 80202a4:	2b00      	cmp	r3, #0
 80202a6:	d107      	bne.n	80202b8 <etharp_input+0x20>
 80202a8:	4b3d      	ldr	r3, [pc, #244]	; (80203a0 <etharp_input+0x108>)
 80202aa:	f240 228a 	movw	r2, #650	; 0x28a
 80202ae:	493d      	ldr	r1, [pc, #244]	; (80203a4 <etharp_input+0x10c>)
 80202b0:	483d      	ldr	r0, [pc, #244]	; (80203a8 <etharp_input+0x110>)
 80202b2:	f002 f977 	bl	80225a4 <iprintf>
 80202b6:	e06f      	b.n	8020398 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80202b8:	687b      	ldr	r3, [r7, #4]
 80202ba:	685b      	ldr	r3, [r3, #4]
 80202bc:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80202be:	693b      	ldr	r3, [r7, #16]
 80202c0:	881b      	ldrh	r3, [r3, #0]
 80202c2:	b29b      	uxth	r3, r3
 80202c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80202c8:	d10c      	bne.n	80202e4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80202ca:	693b      	ldr	r3, [r7, #16]
 80202cc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80202ce:	2b06      	cmp	r3, #6
 80202d0:	d108      	bne.n	80202e4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80202d2:	693b      	ldr	r3, [r7, #16]
 80202d4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80202d6:	2b04      	cmp	r3, #4
 80202d8:	d104      	bne.n	80202e4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80202da:	693b      	ldr	r3, [r7, #16]
 80202dc:	885b      	ldrh	r3, [r3, #2]
 80202de:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80202e0:	2b08      	cmp	r3, #8
 80202e2:	d003      	beq.n	80202ec <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80202e4:	6878      	ldr	r0, [r7, #4]
 80202e6:	f7fe fc25 	bl	801eb34 <pbuf_free>
    return;
 80202ea:	e055      	b.n	8020398 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80202ec:	693b      	ldr	r3, [r7, #16]
 80202ee:	330e      	adds	r3, #14
 80202f0:	681b      	ldr	r3, [r3, #0]
 80202f2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80202f4:	693b      	ldr	r3, [r7, #16]
 80202f6:	3318      	adds	r3, #24
 80202f8:	681b      	ldr	r3, [r3, #0]
 80202fa:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80202fc:	683b      	ldr	r3, [r7, #0]
 80202fe:	3304      	adds	r3, #4
 8020300:	681b      	ldr	r3, [r3, #0]
 8020302:	2b00      	cmp	r3, #0
 8020304:	d102      	bne.n	802030c <etharp_input+0x74>
    for_us = 0;
 8020306:	2300      	movs	r3, #0
 8020308:	75fb      	strb	r3, [r7, #23]
 802030a:	e009      	b.n	8020320 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 802030c:	68ba      	ldr	r2, [r7, #8]
 802030e:	683b      	ldr	r3, [r7, #0]
 8020310:	3304      	adds	r3, #4
 8020312:	681b      	ldr	r3, [r3, #0]
 8020314:	429a      	cmp	r2, r3
 8020316:	bf0c      	ite	eq
 8020318:	2301      	moveq	r3, #1
 802031a:	2300      	movne	r3, #0
 802031c:	b2db      	uxtb	r3, r3
 802031e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8020320:	693b      	ldr	r3, [r7, #16]
 8020322:	f103 0208 	add.w	r2, r3, #8
 8020326:	7dfb      	ldrb	r3, [r7, #23]
 8020328:	2b00      	cmp	r3, #0
 802032a:	d001      	beq.n	8020330 <etharp_input+0x98>
 802032c:	2301      	movs	r3, #1
 802032e:	e000      	b.n	8020332 <etharp_input+0x9a>
 8020330:	2302      	movs	r3, #2
 8020332:	f107 010c 	add.w	r1, r7, #12
 8020336:	6838      	ldr	r0, [r7, #0]
 8020338:	f7ff fed8 	bl	80200ec <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 802033c:	693b      	ldr	r3, [r7, #16]
 802033e:	88db      	ldrh	r3, [r3, #6]
 8020340:	b29b      	uxth	r3, r3
 8020342:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8020346:	d003      	beq.n	8020350 <etharp_input+0xb8>
 8020348:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802034c:	d01e      	beq.n	802038c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 802034e:	e020      	b.n	8020392 <etharp_input+0xfa>
      if (for_us) {
 8020350:	7dfb      	ldrb	r3, [r7, #23]
 8020352:	2b00      	cmp	r3, #0
 8020354:	d01c      	beq.n	8020390 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8020356:	683b      	ldr	r3, [r7, #0]
 8020358:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 802035c:	693b      	ldr	r3, [r7, #16]
 802035e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8020362:	683b      	ldr	r3, [r7, #0]
 8020364:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8020368:	683b      	ldr	r3, [r7, #0]
 802036a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 802036c:	693a      	ldr	r2, [r7, #16]
 802036e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8020370:	2102      	movs	r1, #2
 8020372:	9103      	str	r1, [sp, #12]
 8020374:	f107 010c 	add.w	r1, r7, #12
 8020378:	9102      	str	r1, [sp, #8]
 802037a:	9201      	str	r2, [sp, #4]
 802037c:	9300      	str	r3, [sp, #0]
 802037e:	462b      	mov	r3, r5
 8020380:	4622      	mov	r2, r4
 8020382:	4601      	mov	r1, r0
 8020384:	6838      	ldr	r0, [r7, #0]
 8020386:	f000 faeb 	bl	8020960 <etharp_raw>
      break;
 802038a:	e001      	b.n	8020390 <etharp_input+0xf8>
      break;
 802038c:	bf00      	nop
 802038e:	e000      	b.n	8020392 <etharp_input+0xfa>
      break;
 8020390:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8020392:	6878      	ldr	r0, [r7, #4]
 8020394:	f7fe fbce 	bl	801eb34 <pbuf_free>
}
 8020398:	3718      	adds	r7, #24
 802039a:	46bd      	mov	sp, r7
 802039c:	bdb0      	pop	{r4, r5, r7, pc}
 802039e:	bf00      	nop
 80203a0:	080282e4 	.word	0x080282e4
 80203a4:	08028470 	.word	0x08028470
 80203a8:	08028398 	.word	0x08028398

080203ac <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80203ac:	b580      	push	{r7, lr}
 80203ae:	b086      	sub	sp, #24
 80203b0:	af02      	add	r7, sp, #8
 80203b2:	60f8      	str	r0, [r7, #12]
 80203b4:	60b9      	str	r1, [r7, #8]
 80203b6:	4613      	mov	r3, r2
 80203b8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80203ba:	79fa      	ldrb	r2, [r7, #7]
 80203bc:	4944      	ldr	r1, [pc, #272]	; (80204d0 <etharp_output_to_arp_index+0x124>)
 80203be:	4613      	mov	r3, r2
 80203c0:	005b      	lsls	r3, r3, #1
 80203c2:	4413      	add	r3, r2
 80203c4:	00db      	lsls	r3, r3, #3
 80203c6:	440b      	add	r3, r1
 80203c8:	3314      	adds	r3, #20
 80203ca:	781b      	ldrb	r3, [r3, #0]
 80203cc:	2b01      	cmp	r3, #1
 80203ce:	d806      	bhi.n	80203de <etharp_output_to_arp_index+0x32>
 80203d0:	4b40      	ldr	r3, [pc, #256]	; (80204d4 <etharp_output_to_arp_index+0x128>)
 80203d2:	f240 22ee 	movw	r2, #750	; 0x2ee
 80203d6:	4940      	ldr	r1, [pc, #256]	; (80204d8 <etharp_output_to_arp_index+0x12c>)
 80203d8:	4840      	ldr	r0, [pc, #256]	; (80204dc <etharp_output_to_arp_index+0x130>)
 80203da:	f002 f8e3 	bl	80225a4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80203de:	79fa      	ldrb	r2, [r7, #7]
 80203e0:	493b      	ldr	r1, [pc, #236]	; (80204d0 <etharp_output_to_arp_index+0x124>)
 80203e2:	4613      	mov	r3, r2
 80203e4:	005b      	lsls	r3, r3, #1
 80203e6:	4413      	add	r3, r2
 80203e8:	00db      	lsls	r3, r3, #3
 80203ea:	440b      	add	r3, r1
 80203ec:	3314      	adds	r3, #20
 80203ee:	781b      	ldrb	r3, [r3, #0]
 80203f0:	2b02      	cmp	r3, #2
 80203f2:	d153      	bne.n	802049c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80203f4:	79fa      	ldrb	r2, [r7, #7]
 80203f6:	4936      	ldr	r1, [pc, #216]	; (80204d0 <etharp_output_to_arp_index+0x124>)
 80203f8:	4613      	mov	r3, r2
 80203fa:	005b      	lsls	r3, r3, #1
 80203fc:	4413      	add	r3, r2
 80203fe:	00db      	lsls	r3, r3, #3
 8020400:	440b      	add	r3, r1
 8020402:	3312      	adds	r3, #18
 8020404:	881b      	ldrh	r3, [r3, #0]
 8020406:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 802040a:	d919      	bls.n	8020440 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 802040c:	79fa      	ldrb	r2, [r7, #7]
 802040e:	4613      	mov	r3, r2
 8020410:	005b      	lsls	r3, r3, #1
 8020412:	4413      	add	r3, r2
 8020414:	00db      	lsls	r3, r3, #3
 8020416:	4a2e      	ldr	r2, [pc, #184]	; (80204d0 <etharp_output_to_arp_index+0x124>)
 8020418:	4413      	add	r3, r2
 802041a:	3304      	adds	r3, #4
 802041c:	4619      	mov	r1, r3
 802041e:	68f8      	ldr	r0, [r7, #12]
 8020420:	f000 fb4c 	bl	8020abc <etharp_request>
 8020424:	4603      	mov	r3, r0
 8020426:	2b00      	cmp	r3, #0
 8020428:	d138      	bne.n	802049c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 802042a:	79fa      	ldrb	r2, [r7, #7]
 802042c:	4928      	ldr	r1, [pc, #160]	; (80204d0 <etharp_output_to_arp_index+0x124>)
 802042e:	4613      	mov	r3, r2
 8020430:	005b      	lsls	r3, r3, #1
 8020432:	4413      	add	r3, r2
 8020434:	00db      	lsls	r3, r3, #3
 8020436:	440b      	add	r3, r1
 8020438:	3314      	adds	r3, #20
 802043a:	2203      	movs	r2, #3
 802043c:	701a      	strb	r2, [r3, #0]
 802043e:	e02d      	b.n	802049c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8020440:	79fa      	ldrb	r2, [r7, #7]
 8020442:	4923      	ldr	r1, [pc, #140]	; (80204d0 <etharp_output_to_arp_index+0x124>)
 8020444:	4613      	mov	r3, r2
 8020446:	005b      	lsls	r3, r3, #1
 8020448:	4413      	add	r3, r2
 802044a:	00db      	lsls	r3, r3, #3
 802044c:	440b      	add	r3, r1
 802044e:	3312      	adds	r3, #18
 8020450:	881b      	ldrh	r3, [r3, #0]
 8020452:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8020456:	d321      	bcc.n	802049c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8020458:	79fa      	ldrb	r2, [r7, #7]
 802045a:	4613      	mov	r3, r2
 802045c:	005b      	lsls	r3, r3, #1
 802045e:	4413      	add	r3, r2
 8020460:	00db      	lsls	r3, r3, #3
 8020462:	4a1b      	ldr	r2, [pc, #108]	; (80204d0 <etharp_output_to_arp_index+0x124>)
 8020464:	4413      	add	r3, r2
 8020466:	1d19      	adds	r1, r3, #4
 8020468:	79fa      	ldrb	r2, [r7, #7]
 802046a:	4613      	mov	r3, r2
 802046c:	005b      	lsls	r3, r3, #1
 802046e:	4413      	add	r3, r2
 8020470:	00db      	lsls	r3, r3, #3
 8020472:	3308      	adds	r3, #8
 8020474:	4a16      	ldr	r2, [pc, #88]	; (80204d0 <etharp_output_to_arp_index+0x124>)
 8020476:	4413      	add	r3, r2
 8020478:	3304      	adds	r3, #4
 802047a:	461a      	mov	r2, r3
 802047c:	68f8      	ldr	r0, [r7, #12]
 802047e:	f000 fafb 	bl	8020a78 <etharp_request_dst>
 8020482:	4603      	mov	r3, r0
 8020484:	2b00      	cmp	r3, #0
 8020486:	d109      	bne.n	802049c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8020488:	79fa      	ldrb	r2, [r7, #7]
 802048a:	4911      	ldr	r1, [pc, #68]	; (80204d0 <etharp_output_to_arp_index+0x124>)
 802048c:	4613      	mov	r3, r2
 802048e:	005b      	lsls	r3, r3, #1
 8020490:	4413      	add	r3, r2
 8020492:	00db      	lsls	r3, r3, #3
 8020494:	440b      	add	r3, r1
 8020496:	3314      	adds	r3, #20
 8020498:	2203      	movs	r2, #3
 802049a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 802049c:	68fb      	ldr	r3, [r7, #12]
 802049e:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 80204a2:	79fa      	ldrb	r2, [r7, #7]
 80204a4:	4613      	mov	r3, r2
 80204a6:	005b      	lsls	r3, r3, #1
 80204a8:	4413      	add	r3, r2
 80204aa:	00db      	lsls	r3, r3, #3
 80204ac:	3308      	adds	r3, #8
 80204ae:	4a08      	ldr	r2, [pc, #32]	; (80204d0 <etharp_output_to_arp_index+0x124>)
 80204b0:	4413      	add	r3, r2
 80204b2:	3304      	adds	r3, #4
 80204b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80204b8:	9200      	str	r2, [sp, #0]
 80204ba:	460a      	mov	r2, r1
 80204bc:	68b9      	ldr	r1, [r7, #8]
 80204be:	68f8      	ldr	r0, [r7, #12]
 80204c0:	f001 fed4 	bl	802226c <ethernet_output>
 80204c4:	4603      	mov	r3, r0
}
 80204c6:	4618      	mov	r0, r3
 80204c8:	3710      	adds	r7, #16
 80204ca:	46bd      	mov	sp, r7
 80204cc:	bd80      	pop	{r7, pc}
 80204ce:	bf00      	nop
 80204d0:	20013dd0 	.word	0x20013dd0
 80204d4:	080282e4 	.word	0x080282e4
 80204d8:	08028490 	.word	0x08028490
 80204dc:	08028398 	.word	0x08028398

080204e0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80204e0:	b580      	push	{r7, lr}
 80204e2:	b08a      	sub	sp, #40	; 0x28
 80204e4:	af02      	add	r7, sp, #8
 80204e6:	60f8      	str	r0, [r7, #12]
 80204e8:	60b9      	str	r1, [r7, #8]
 80204ea:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80204ec:	687b      	ldr	r3, [r7, #4]
 80204ee:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80204f0:	68fb      	ldr	r3, [r7, #12]
 80204f2:	2b00      	cmp	r3, #0
 80204f4:	d106      	bne.n	8020504 <etharp_output+0x24>
 80204f6:	4b73      	ldr	r3, [pc, #460]	; (80206c4 <etharp_output+0x1e4>)
 80204f8:	f240 321e 	movw	r2, #798	; 0x31e
 80204fc:	4972      	ldr	r1, [pc, #456]	; (80206c8 <etharp_output+0x1e8>)
 80204fe:	4873      	ldr	r0, [pc, #460]	; (80206cc <etharp_output+0x1ec>)
 8020500:	f002 f850 	bl	80225a4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8020504:	68bb      	ldr	r3, [r7, #8]
 8020506:	2b00      	cmp	r3, #0
 8020508:	d106      	bne.n	8020518 <etharp_output+0x38>
 802050a:	4b6e      	ldr	r3, [pc, #440]	; (80206c4 <etharp_output+0x1e4>)
 802050c:	f240 321f 	movw	r2, #799	; 0x31f
 8020510:	496f      	ldr	r1, [pc, #444]	; (80206d0 <etharp_output+0x1f0>)
 8020512:	486e      	ldr	r0, [pc, #440]	; (80206cc <etharp_output+0x1ec>)
 8020514:	f002 f846 	bl	80225a4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8020518:	687b      	ldr	r3, [r7, #4]
 802051a:	2b00      	cmp	r3, #0
 802051c:	d106      	bne.n	802052c <etharp_output+0x4c>
 802051e:	4b69      	ldr	r3, [pc, #420]	; (80206c4 <etharp_output+0x1e4>)
 8020520:	f44f 7248 	mov.w	r2, #800	; 0x320
 8020524:	496b      	ldr	r1, [pc, #428]	; (80206d4 <etharp_output+0x1f4>)
 8020526:	4869      	ldr	r0, [pc, #420]	; (80206cc <etharp_output+0x1ec>)
 8020528:	f002 f83c 	bl	80225a4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 802052c:	687b      	ldr	r3, [r7, #4]
 802052e:	681b      	ldr	r3, [r3, #0]
 8020530:	68f9      	ldr	r1, [r7, #12]
 8020532:	4618      	mov	r0, r3
 8020534:	f000 fefc 	bl	8021330 <ip4_addr_isbroadcast_u32>
 8020538:	4603      	mov	r3, r0
 802053a:	2b00      	cmp	r3, #0
 802053c:	d002      	beq.n	8020544 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 802053e:	4b66      	ldr	r3, [pc, #408]	; (80206d8 <etharp_output+0x1f8>)
 8020540:	61fb      	str	r3, [r7, #28]
 8020542:	e0af      	b.n	80206a4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8020544:	687b      	ldr	r3, [r7, #4]
 8020546:	681b      	ldr	r3, [r3, #0]
 8020548:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 802054c:	2be0      	cmp	r3, #224	; 0xe0
 802054e:	d118      	bne.n	8020582 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8020550:	2301      	movs	r3, #1
 8020552:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8020554:	2300      	movs	r3, #0
 8020556:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8020558:	235e      	movs	r3, #94	; 0x5e
 802055a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 802055c:	687b      	ldr	r3, [r7, #4]
 802055e:	3301      	adds	r3, #1
 8020560:	781b      	ldrb	r3, [r3, #0]
 8020562:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8020566:	b2db      	uxtb	r3, r3
 8020568:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 802056a:	687b      	ldr	r3, [r7, #4]
 802056c:	3302      	adds	r3, #2
 802056e:	781b      	ldrb	r3, [r3, #0]
 8020570:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8020572:	687b      	ldr	r3, [r7, #4]
 8020574:	3303      	adds	r3, #3
 8020576:	781b      	ldrb	r3, [r3, #0]
 8020578:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 802057a:	f107 0310 	add.w	r3, r7, #16
 802057e:	61fb      	str	r3, [r7, #28]
 8020580:	e090      	b.n	80206a4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8020582:	687b      	ldr	r3, [r7, #4]
 8020584:	681a      	ldr	r2, [r3, #0]
 8020586:	68fb      	ldr	r3, [r7, #12]
 8020588:	3304      	adds	r3, #4
 802058a:	681b      	ldr	r3, [r3, #0]
 802058c:	405a      	eors	r2, r3
 802058e:	68fb      	ldr	r3, [r7, #12]
 8020590:	3308      	adds	r3, #8
 8020592:	681b      	ldr	r3, [r3, #0]
 8020594:	4013      	ands	r3, r2
 8020596:	2b00      	cmp	r3, #0
 8020598:	d012      	beq.n	80205c0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 802059a:	687b      	ldr	r3, [r7, #4]
 802059c:	681b      	ldr	r3, [r3, #0]
 802059e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80205a0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80205a4:	4293      	cmp	r3, r2
 80205a6:	d00b      	beq.n	80205c0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80205a8:	68fb      	ldr	r3, [r7, #12]
 80205aa:	330c      	adds	r3, #12
 80205ac:	681b      	ldr	r3, [r3, #0]
 80205ae:	2b00      	cmp	r3, #0
 80205b0:	d003      	beq.n	80205ba <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80205b2:	68fb      	ldr	r3, [r7, #12]
 80205b4:	330c      	adds	r3, #12
 80205b6:	61bb      	str	r3, [r7, #24]
 80205b8:	e002      	b.n	80205c0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80205ba:	f06f 0303 	mvn.w	r3, #3
 80205be:	e07d      	b.n	80206bc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80205c0:	4b46      	ldr	r3, [pc, #280]	; (80206dc <etharp_output+0x1fc>)
 80205c2:	781b      	ldrb	r3, [r3, #0]
 80205c4:	4619      	mov	r1, r3
 80205c6:	4a46      	ldr	r2, [pc, #280]	; (80206e0 <etharp_output+0x200>)
 80205c8:	460b      	mov	r3, r1
 80205ca:	005b      	lsls	r3, r3, #1
 80205cc:	440b      	add	r3, r1
 80205ce:	00db      	lsls	r3, r3, #3
 80205d0:	4413      	add	r3, r2
 80205d2:	3314      	adds	r3, #20
 80205d4:	781b      	ldrb	r3, [r3, #0]
 80205d6:	2b01      	cmp	r3, #1
 80205d8:	d925      	bls.n	8020626 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80205da:	4b40      	ldr	r3, [pc, #256]	; (80206dc <etharp_output+0x1fc>)
 80205dc:	781b      	ldrb	r3, [r3, #0]
 80205de:	4619      	mov	r1, r3
 80205e0:	4a3f      	ldr	r2, [pc, #252]	; (80206e0 <etharp_output+0x200>)
 80205e2:	460b      	mov	r3, r1
 80205e4:	005b      	lsls	r3, r3, #1
 80205e6:	440b      	add	r3, r1
 80205e8:	00db      	lsls	r3, r3, #3
 80205ea:	4413      	add	r3, r2
 80205ec:	3308      	adds	r3, #8
 80205ee:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80205f0:	68fa      	ldr	r2, [r7, #12]
 80205f2:	429a      	cmp	r2, r3
 80205f4:	d117      	bne.n	8020626 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80205f6:	69bb      	ldr	r3, [r7, #24]
 80205f8:	681a      	ldr	r2, [r3, #0]
 80205fa:	4b38      	ldr	r3, [pc, #224]	; (80206dc <etharp_output+0x1fc>)
 80205fc:	781b      	ldrb	r3, [r3, #0]
 80205fe:	4618      	mov	r0, r3
 8020600:	4937      	ldr	r1, [pc, #220]	; (80206e0 <etharp_output+0x200>)
 8020602:	4603      	mov	r3, r0
 8020604:	005b      	lsls	r3, r3, #1
 8020606:	4403      	add	r3, r0
 8020608:	00db      	lsls	r3, r3, #3
 802060a:	440b      	add	r3, r1
 802060c:	3304      	adds	r3, #4
 802060e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8020610:	429a      	cmp	r2, r3
 8020612:	d108      	bne.n	8020626 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8020614:	4b31      	ldr	r3, [pc, #196]	; (80206dc <etharp_output+0x1fc>)
 8020616:	781b      	ldrb	r3, [r3, #0]
 8020618:	461a      	mov	r2, r3
 802061a:	68b9      	ldr	r1, [r7, #8]
 802061c:	68f8      	ldr	r0, [r7, #12]
 802061e:	f7ff fec5 	bl	80203ac <etharp_output_to_arp_index>
 8020622:	4603      	mov	r3, r0
 8020624:	e04a      	b.n	80206bc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8020626:	2300      	movs	r3, #0
 8020628:	75fb      	strb	r3, [r7, #23]
 802062a:	e031      	b.n	8020690 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 802062c:	7dfa      	ldrb	r2, [r7, #23]
 802062e:	492c      	ldr	r1, [pc, #176]	; (80206e0 <etharp_output+0x200>)
 8020630:	4613      	mov	r3, r2
 8020632:	005b      	lsls	r3, r3, #1
 8020634:	4413      	add	r3, r2
 8020636:	00db      	lsls	r3, r3, #3
 8020638:	440b      	add	r3, r1
 802063a:	3314      	adds	r3, #20
 802063c:	781b      	ldrb	r3, [r3, #0]
 802063e:	2b01      	cmp	r3, #1
 8020640:	d923      	bls.n	802068a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8020642:	7dfa      	ldrb	r2, [r7, #23]
 8020644:	4926      	ldr	r1, [pc, #152]	; (80206e0 <etharp_output+0x200>)
 8020646:	4613      	mov	r3, r2
 8020648:	005b      	lsls	r3, r3, #1
 802064a:	4413      	add	r3, r2
 802064c:	00db      	lsls	r3, r3, #3
 802064e:	440b      	add	r3, r1
 8020650:	3308      	adds	r3, #8
 8020652:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8020654:	68fa      	ldr	r2, [r7, #12]
 8020656:	429a      	cmp	r2, r3
 8020658:	d117      	bne.n	802068a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 802065a:	69bb      	ldr	r3, [r7, #24]
 802065c:	6819      	ldr	r1, [r3, #0]
 802065e:	7dfa      	ldrb	r2, [r7, #23]
 8020660:	481f      	ldr	r0, [pc, #124]	; (80206e0 <etharp_output+0x200>)
 8020662:	4613      	mov	r3, r2
 8020664:	005b      	lsls	r3, r3, #1
 8020666:	4413      	add	r3, r2
 8020668:	00db      	lsls	r3, r3, #3
 802066a:	4403      	add	r3, r0
 802066c:	3304      	adds	r3, #4
 802066e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8020670:	4299      	cmp	r1, r3
 8020672:	d10a      	bne.n	802068a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8020674:	4a19      	ldr	r2, [pc, #100]	; (80206dc <etharp_output+0x1fc>)
 8020676:	7dfb      	ldrb	r3, [r7, #23]
 8020678:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 802067a:	7dfb      	ldrb	r3, [r7, #23]
 802067c:	461a      	mov	r2, r3
 802067e:	68b9      	ldr	r1, [r7, #8]
 8020680:	68f8      	ldr	r0, [r7, #12]
 8020682:	f7ff fe93 	bl	80203ac <etharp_output_to_arp_index>
 8020686:	4603      	mov	r3, r0
 8020688:	e018      	b.n	80206bc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 802068a:	7dfb      	ldrb	r3, [r7, #23]
 802068c:	3301      	adds	r3, #1
 802068e:	75fb      	strb	r3, [r7, #23]
 8020690:	7dfb      	ldrb	r3, [r7, #23]
 8020692:	2b31      	cmp	r3, #49	; 0x31
 8020694:	d9ca      	bls.n	802062c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8020696:	68ba      	ldr	r2, [r7, #8]
 8020698:	69b9      	ldr	r1, [r7, #24]
 802069a:	68f8      	ldr	r0, [r7, #12]
 802069c:	f000 f822 	bl	80206e4 <etharp_query>
 80206a0:	4603      	mov	r3, r0
 80206a2:	e00b      	b.n	80206bc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80206a4:	68fb      	ldr	r3, [r7, #12]
 80206a6:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80206aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80206ae:	9300      	str	r3, [sp, #0]
 80206b0:	69fb      	ldr	r3, [r7, #28]
 80206b2:	68b9      	ldr	r1, [r7, #8]
 80206b4:	68f8      	ldr	r0, [r7, #12]
 80206b6:	f001 fdd9 	bl	802226c <ethernet_output>
 80206ba:	4603      	mov	r3, r0
}
 80206bc:	4618      	mov	r0, r3
 80206be:	3720      	adds	r7, #32
 80206c0:	46bd      	mov	sp, r7
 80206c2:	bd80      	pop	{r7, pc}
 80206c4:	080282e4 	.word	0x080282e4
 80206c8:	08028470 	.word	0x08028470
 80206cc:	08028398 	.word	0x08028398
 80206d0:	080284c0 	.word	0x080284c0
 80206d4:	08028460 	.word	0x08028460
 80206d8:	08028f94 	.word	0x08028f94
 80206dc:	20014280 	.word	0x20014280
 80206e0:	20013dd0 	.word	0x20013dd0

080206e4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80206e4:	b580      	push	{r7, lr}
 80206e6:	b08c      	sub	sp, #48	; 0x30
 80206e8:	af02      	add	r7, sp, #8
 80206ea:	60f8      	str	r0, [r7, #12]
 80206ec:	60b9      	str	r1, [r7, #8]
 80206ee:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80206f0:	68fb      	ldr	r3, [r7, #12]
 80206f2:	332a      	adds	r3, #42	; 0x2a
 80206f4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80206f6:	23ff      	movs	r3, #255	; 0xff
 80206f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80206fc:	2300      	movs	r3, #0
 80206fe:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8020700:	68bb      	ldr	r3, [r7, #8]
 8020702:	681b      	ldr	r3, [r3, #0]
 8020704:	68f9      	ldr	r1, [r7, #12]
 8020706:	4618      	mov	r0, r3
 8020708:	f000 fe12 	bl	8021330 <ip4_addr_isbroadcast_u32>
 802070c:	4603      	mov	r3, r0
 802070e:	2b00      	cmp	r3, #0
 8020710:	d10c      	bne.n	802072c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8020712:	68bb      	ldr	r3, [r7, #8]
 8020714:	681b      	ldr	r3, [r3, #0]
 8020716:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 802071a:	2be0      	cmp	r3, #224	; 0xe0
 802071c:	d006      	beq.n	802072c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 802071e:	68bb      	ldr	r3, [r7, #8]
 8020720:	2b00      	cmp	r3, #0
 8020722:	d003      	beq.n	802072c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8020724:	68bb      	ldr	r3, [r7, #8]
 8020726:	681b      	ldr	r3, [r3, #0]
 8020728:	2b00      	cmp	r3, #0
 802072a:	d102      	bne.n	8020732 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 802072c:	f06f 030f 	mvn.w	r3, #15
 8020730:	e101      	b.n	8020936 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8020732:	68fa      	ldr	r2, [r7, #12]
 8020734:	2101      	movs	r1, #1
 8020736:	68b8      	ldr	r0, [r7, #8]
 8020738:	f7ff fb60 	bl	801fdfc <etharp_find_entry>
 802073c:	4603      	mov	r3, r0
 802073e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8020740:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8020744:	2b00      	cmp	r3, #0
 8020746:	da02      	bge.n	802074e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8020748:	8a7b      	ldrh	r3, [r7, #18]
 802074a:	b25b      	sxtb	r3, r3
 802074c:	e0f3      	b.n	8020936 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 802074e:	8a7b      	ldrh	r3, [r7, #18]
 8020750:	2b7e      	cmp	r3, #126	; 0x7e
 8020752:	d906      	bls.n	8020762 <etharp_query+0x7e>
 8020754:	4b7a      	ldr	r3, [pc, #488]	; (8020940 <etharp_query+0x25c>)
 8020756:	f240 32c1 	movw	r2, #961	; 0x3c1
 802075a:	497a      	ldr	r1, [pc, #488]	; (8020944 <etharp_query+0x260>)
 802075c:	487a      	ldr	r0, [pc, #488]	; (8020948 <etharp_query+0x264>)
 802075e:	f001 ff21 	bl	80225a4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8020762:	8a7b      	ldrh	r3, [r7, #18]
 8020764:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8020766:	7c7a      	ldrb	r2, [r7, #17]
 8020768:	4978      	ldr	r1, [pc, #480]	; (802094c <etharp_query+0x268>)
 802076a:	4613      	mov	r3, r2
 802076c:	005b      	lsls	r3, r3, #1
 802076e:	4413      	add	r3, r2
 8020770:	00db      	lsls	r3, r3, #3
 8020772:	440b      	add	r3, r1
 8020774:	3314      	adds	r3, #20
 8020776:	781b      	ldrb	r3, [r3, #0]
 8020778:	2b00      	cmp	r3, #0
 802077a:	d115      	bne.n	80207a8 <etharp_query+0xc4>
    is_new_entry = 1;
 802077c:	2301      	movs	r3, #1
 802077e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8020780:	7c7a      	ldrb	r2, [r7, #17]
 8020782:	4972      	ldr	r1, [pc, #456]	; (802094c <etharp_query+0x268>)
 8020784:	4613      	mov	r3, r2
 8020786:	005b      	lsls	r3, r3, #1
 8020788:	4413      	add	r3, r2
 802078a:	00db      	lsls	r3, r3, #3
 802078c:	440b      	add	r3, r1
 802078e:	3314      	adds	r3, #20
 8020790:	2201      	movs	r2, #1
 8020792:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8020794:	7c7a      	ldrb	r2, [r7, #17]
 8020796:	496d      	ldr	r1, [pc, #436]	; (802094c <etharp_query+0x268>)
 8020798:	4613      	mov	r3, r2
 802079a:	005b      	lsls	r3, r3, #1
 802079c:	4413      	add	r3, r2
 802079e:	00db      	lsls	r3, r3, #3
 80207a0:	440b      	add	r3, r1
 80207a2:	3308      	adds	r3, #8
 80207a4:	68fa      	ldr	r2, [r7, #12]
 80207a6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80207a8:	7c7a      	ldrb	r2, [r7, #17]
 80207aa:	4968      	ldr	r1, [pc, #416]	; (802094c <etharp_query+0x268>)
 80207ac:	4613      	mov	r3, r2
 80207ae:	005b      	lsls	r3, r3, #1
 80207b0:	4413      	add	r3, r2
 80207b2:	00db      	lsls	r3, r3, #3
 80207b4:	440b      	add	r3, r1
 80207b6:	3314      	adds	r3, #20
 80207b8:	781b      	ldrb	r3, [r3, #0]
 80207ba:	2b01      	cmp	r3, #1
 80207bc:	d011      	beq.n	80207e2 <etharp_query+0xfe>
 80207be:	7c7a      	ldrb	r2, [r7, #17]
 80207c0:	4962      	ldr	r1, [pc, #392]	; (802094c <etharp_query+0x268>)
 80207c2:	4613      	mov	r3, r2
 80207c4:	005b      	lsls	r3, r3, #1
 80207c6:	4413      	add	r3, r2
 80207c8:	00db      	lsls	r3, r3, #3
 80207ca:	440b      	add	r3, r1
 80207cc:	3314      	adds	r3, #20
 80207ce:	781b      	ldrb	r3, [r3, #0]
 80207d0:	2b01      	cmp	r3, #1
 80207d2:	d806      	bhi.n	80207e2 <etharp_query+0xfe>
 80207d4:	4b5a      	ldr	r3, [pc, #360]	; (8020940 <etharp_query+0x25c>)
 80207d6:	f240 32cd 	movw	r2, #973	; 0x3cd
 80207da:	495d      	ldr	r1, [pc, #372]	; (8020950 <etharp_query+0x26c>)
 80207dc:	485a      	ldr	r0, [pc, #360]	; (8020948 <etharp_query+0x264>)
 80207de:	f001 fee1 	bl	80225a4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80207e2:	6a3b      	ldr	r3, [r7, #32]
 80207e4:	2b00      	cmp	r3, #0
 80207e6:	d102      	bne.n	80207ee <etharp_query+0x10a>
 80207e8:	687b      	ldr	r3, [r7, #4]
 80207ea:	2b00      	cmp	r3, #0
 80207ec:	d10c      	bne.n	8020808 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80207ee:	68b9      	ldr	r1, [r7, #8]
 80207f0:	68f8      	ldr	r0, [r7, #12]
 80207f2:	f000 f963 	bl	8020abc <etharp_request>
 80207f6:	4603      	mov	r3, r0
 80207f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80207fc:	687b      	ldr	r3, [r7, #4]
 80207fe:	2b00      	cmp	r3, #0
 8020800:	d102      	bne.n	8020808 <etharp_query+0x124>
      return result;
 8020802:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8020806:	e096      	b.n	8020936 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8020808:	687b      	ldr	r3, [r7, #4]
 802080a:	2b00      	cmp	r3, #0
 802080c:	d106      	bne.n	802081c <etharp_query+0x138>
 802080e:	4b4c      	ldr	r3, [pc, #304]	; (8020940 <etharp_query+0x25c>)
 8020810:	f240 32e1 	movw	r2, #993	; 0x3e1
 8020814:	494f      	ldr	r1, [pc, #316]	; (8020954 <etharp_query+0x270>)
 8020816:	484c      	ldr	r0, [pc, #304]	; (8020948 <etharp_query+0x264>)
 8020818:	f001 fec4 	bl	80225a4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 802081c:	7c7a      	ldrb	r2, [r7, #17]
 802081e:	494b      	ldr	r1, [pc, #300]	; (802094c <etharp_query+0x268>)
 8020820:	4613      	mov	r3, r2
 8020822:	005b      	lsls	r3, r3, #1
 8020824:	4413      	add	r3, r2
 8020826:	00db      	lsls	r3, r3, #3
 8020828:	440b      	add	r3, r1
 802082a:	3314      	adds	r3, #20
 802082c:	781b      	ldrb	r3, [r3, #0]
 802082e:	2b01      	cmp	r3, #1
 8020830:	d917      	bls.n	8020862 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8020832:	4a49      	ldr	r2, [pc, #292]	; (8020958 <etharp_query+0x274>)
 8020834:	7c7b      	ldrb	r3, [r7, #17]
 8020836:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8020838:	7c7a      	ldrb	r2, [r7, #17]
 802083a:	4613      	mov	r3, r2
 802083c:	005b      	lsls	r3, r3, #1
 802083e:	4413      	add	r3, r2
 8020840:	00db      	lsls	r3, r3, #3
 8020842:	3308      	adds	r3, #8
 8020844:	4a41      	ldr	r2, [pc, #260]	; (802094c <etharp_query+0x268>)
 8020846:	4413      	add	r3, r2
 8020848:	3304      	adds	r3, #4
 802084a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 802084e:	9200      	str	r2, [sp, #0]
 8020850:	697a      	ldr	r2, [r7, #20]
 8020852:	6879      	ldr	r1, [r7, #4]
 8020854:	68f8      	ldr	r0, [r7, #12]
 8020856:	f001 fd09 	bl	802226c <ethernet_output>
 802085a:	4603      	mov	r3, r0
 802085c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8020860:	e067      	b.n	8020932 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8020862:	7c7a      	ldrb	r2, [r7, #17]
 8020864:	4939      	ldr	r1, [pc, #228]	; (802094c <etharp_query+0x268>)
 8020866:	4613      	mov	r3, r2
 8020868:	005b      	lsls	r3, r3, #1
 802086a:	4413      	add	r3, r2
 802086c:	00db      	lsls	r3, r3, #3
 802086e:	440b      	add	r3, r1
 8020870:	3314      	adds	r3, #20
 8020872:	781b      	ldrb	r3, [r3, #0]
 8020874:	2b01      	cmp	r3, #1
 8020876:	d15c      	bne.n	8020932 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8020878:	2300      	movs	r3, #0
 802087a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 802087c:	687b      	ldr	r3, [r7, #4]
 802087e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8020880:	e01c      	b.n	80208bc <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8020882:	69fb      	ldr	r3, [r7, #28]
 8020884:	895a      	ldrh	r2, [r3, #10]
 8020886:	69fb      	ldr	r3, [r7, #28]
 8020888:	891b      	ldrh	r3, [r3, #8]
 802088a:	429a      	cmp	r2, r3
 802088c:	d10a      	bne.n	80208a4 <etharp_query+0x1c0>
 802088e:	69fb      	ldr	r3, [r7, #28]
 8020890:	681b      	ldr	r3, [r3, #0]
 8020892:	2b00      	cmp	r3, #0
 8020894:	d006      	beq.n	80208a4 <etharp_query+0x1c0>
 8020896:	4b2a      	ldr	r3, [pc, #168]	; (8020940 <etharp_query+0x25c>)
 8020898:	f240 32f1 	movw	r2, #1009	; 0x3f1
 802089c:	492f      	ldr	r1, [pc, #188]	; (802095c <etharp_query+0x278>)
 802089e:	482a      	ldr	r0, [pc, #168]	; (8020948 <etharp_query+0x264>)
 80208a0:	f001 fe80 	bl	80225a4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80208a4:	69fb      	ldr	r3, [r7, #28]
 80208a6:	7b1b      	ldrb	r3, [r3, #12]
 80208a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80208ac:	2b00      	cmp	r3, #0
 80208ae:	d002      	beq.n	80208b6 <etharp_query+0x1d2>
        copy_needed = 1;
 80208b0:	2301      	movs	r3, #1
 80208b2:	61bb      	str	r3, [r7, #24]
        break;
 80208b4:	e005      	b.n	80208c2 <etharp_query+0x1de>
      }
      p = p->next;
 80208b6:	69fb      	ldr	r3, [r7, #28]
 80208b8:	681b      	ldr	r3, [r3, #0]
 80208ba:	61fb      	str	r3, [r7, #28]
    while (p) {
 80208bc:	69fb      	ldr	r3, [r7, #28]
 80208be:	2b00      	cmp	r3, #0
 80208c0:	d1df      	bne.n	8020882 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80208c2:	69bb      	ldr	r3, [r7, #24]
 80208c4:	2b00      	cmp	r3, #0
 80208c6:	d007      	beq.n	80208d8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80208c8:	687a      	ldr	r2, [r7, #4]
 80208ca:	f44f 7120 	mov.w	r1, #640	; 0x280
 80208ce:	200e      	movs	r0, #14
 80208d0:	f7fe fbbc 	bl	801f04c <pbuf_clone>
 80208d4:	61f8      	str	r0, [r7, #28]
 80208d6:	e004      	b.n	80208e2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80208d8:	687b      	ldr	r3, [r7, #4]
 80208da:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80208dc:	69f8      	ldr	r0, [r7, #28]
 80208de:	f7fe f9c9 	bl	801ec74 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80208e2:	69fb      	ldr	r3, [r7, #28]
 80208e4:	2b00      	cmp	r3, #0
 80208e6:	d021      	beq.n	802092c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80208e8:	7c7a      	ldrb	r2, [r7, #17]
 80208ea:	4918      	ldr	r1, [pc, #96]	; (802094c <etharp_query+0x268>)
 80208ec:	4613      	mov	r3, r2
 80208ee:	005b      	lsls	r3, r3, #1
 80208f0:	4413      	add	r3, r2
 80208f2:	00db      	lsls	r3, r3, #3
 80208f4:	440b      	add	r3, r1
 80208f6:	681b      	ldr	r3, [r3, #0]
 80208f8:	2b00      	cmp	r3, #0
 80208fa:	d00a      	beq.n	8020912 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80208fc:	7c7a      	ldrb	r2, [r7, #17]
 80208fe:	4913      	ldr	r1, [pc, #76]	; (802094c <etharp_query+0x268>)
 8020900:	4613      	mov	r3, r2
 8020902:	005b      	lsls	r3, r3, #1
 8020904:	4413      	add	r3, r2
 8020906:	00db      	lsls	r3, r3, #3
 8020908:	440b      	add	r3, r1
 802090a:	681b      	ldr	r3, [r3, #0]
 802090c:	4618      	mov	r0, r3
 802090e:	f7fe f911 	bl	801eb34 <pbuf_free>
      }
      arp_table[i].q = p;
 8020912:	7c7a      	ldrb	r2, [r7, #17]
 8020914:	490d      	ldr	r1, [pc, #52]	; (802094c <etharp_query+0x268>)
 8020916:	4613      	mov	r3, r2
 8020918:	005b      	lsls	r3, r3, #1
 802091a:	4413      	add	r3, r2
 802091c:	00db      	lsls	r3, r3, #3
 802091e:	440b      	add	r3, r1
 8020920:	69fa      	ldr	r2, [r7, #28]
 8020922:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8020924:	2300      	movs	r3, #0
 8020926:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 802092a:	e002      	b.n	8020932 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 802092c:	23ff      	movs	r3, #255	; 0xff
 802092e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8020932:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8020936:	4618      	mov	r0, r3
 8020938:	3728      	adds	r7, #40	; 0x28
 802093a:	46bd      	mov	sp, r7
 802093c:	bd80      	pop	{r7, pc}
 802093e:	bf00      	nop
 8020940:	080282e4 	.word	0x080282e4
 8020944:	080284cc 	.word	0x080284cc
 8020948:	08028398 	.word	0x08028398
 802094c:	20013dd0 	.word	0x20013dd0
 8020950:	080284dc 	.word	0x080284dc
 8020954:	080284c0 	.word	0x080284c0
 8020958:	20014280 	.word	0x20014280
 802095c:	08028504 	.word	0x08028504

08020960 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8020960:	b580      	push	{r7, lr}
 8020962:	b08a      	sub	sp, #40	; 0x28
 8020964:	af02      	add	r7, sp, #8
 8020966:	60f8      	str	r0, [r7, #12]
 8020968:	60b9      	str	r1, [r7, #8]
 802096a:	607a      	str	r2, [r7, #4]
 802096c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 802096e:	2300      	movs	r3, #0
 8020970:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8020972:	68fb      	ldr	r3, [r7, #12]
 8020974:	2b00      	cmp	r3, #0
 8020976:	d106      	bne.n	8020986 <etharp_raw+0x26>
 8020978:	4b3a      	ldr	r3, [pc, #232]	; (8020a64 <etharp_raw+0x104>)
 802097a:	f240 4257 	movw	r2, #1111	; 0x457
 802097e:	493a      	ldr	r1, [pc, #232]	; (8020a68 <etharp_raw+0x108>)
 8020980:	483a      	ldr	r0, [pc, #232]	; (8020a6c <etharp_raw+0x10c>)
 8020982:	f001 fe0f 	bl	80225a4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8020986:	f44f 7220 	mov.w	r2, #640	; 0x280
 802098a:	211c      	movs	r1, #28
 802098c:	200e      	movs	r0, #14
 802098e:	f7fd fdef 	bl	801e570 <pbuf_alloc>
 8020992:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8020994:	69bb      	ldr	r3, [r7, #24]
 8020996:	2b00      	cmp	r3, #0
 8020998:	d102      	bne.n	80209a0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 802099a:	f04f 33ff 	mov.w	r3, #4294967295
 802099e:	e05d      	b.n	8020a5c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80209a0:	69bb      	ldr	r3, [r7, #24]
 80209a2:	895b      	ldrh	r3, [r3, #10]
 80209a4:	2b1b      	cmp	r3, #27
 80209a6:	d806      	bhi.n	80209b6 <etharp_raw+0x56>
 80209a8:	4b2e      	ldr	r3, [pc, #184]	; (8020a64 <etharp_raw+0x104>)
 80209aa:	f240 4262 	movw	r2, #1122	; 0x462
 80209ae:	4930      	ldr	r1, [pc, #192]	; (8020a70 <etharp_raw+0x110>)
 80209b0:	482e      	ldr	r0, [pc, #184]	; (8020a6c <etharp_raw+0x10c>)
 80209b2:	f001 fdf7 	bl	80225a4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80209b6:	69bb      	ldr	r3, [r7, #24]
 80209b8:	685b      	ldr	r3, [r3, #4]
 80209ba:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80209bc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80209be:	4618      	mov	r0, r3
 80209c0:	f7fc fcdc 	bl	801d37c <lwip_htons>
 80209c4:	4603      	mov	r3, r0
 80209c6:	461a      	mov	r2, r3
 80209c8:	697b      	ldr	r3, [r7, #20]
 80209ca:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80209cc:	68fb      	ldr	r3, [r7, #12]
 80209ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80209d2:	2b06      	cmp	r3, #6
 80209d4:	d006      	beq.n	80209e4 <etharp_raw+0x84>
 80209d6:	4b23      	ldr	r3, [pc, #140]	; (8020a64 <etharp_raw+0x104>)
 80209d8:	f240 4269 	movw	r2, #1129	; 0x469
 80209dc:	4925      	ldr	r1, [pc, #148]	; (8020a74 <etharp_raw+0x114>)
 80209de:	4823      	ldr	r0, [pc, #140]	; (8020a6c <etharp_raw+0x10c>)
 80209e0:	f001 fde0 	bl	80225a4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80209e4:	697b      	ldr	r3, [r7, #20]
 80209e6:	3308      	adds	r3, #8
 80209e8:	2206      	movs	r2, #6
 80209ea:	6839      	ldr	r1, [r7, #0]
 80209ec:	4618      	mov	r0, r3
 80209ee:	f001 fcc9 	bl	8022384 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80209f2:	697b      	ldr	r3, [r7, #20]
 80209f4:	3312      	adds	r3, #18
 80209f6:	2206      	movs	r2, #6
 80209f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80209fa:	4618      	mov	r0, r3
 80209fc:	f001 fcc2 	bl	8022384 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8020a00:	697b      	ldr	r3, [r7, #20]
 8020a02:	330e      	adds	r3, #14
 8020a04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8020a06:	6812      	ldr	r2, [r2, #0]
 8020a08:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8020a0a:	697b      	ldr	r3, [r7, #20]
 8020a0c:	3318      	adds	r3, #24
 8020a0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8020a10:	6812      	ldr	r2, [r2, #0]
 8020a12:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8020a14:	697b      	ldr	r3, [r7, #20]
 8020a16:	2200      	movs	r2, #0
 8020a18:	701a      	strb	r2, [r3, #0]
 8020a1a:	2200      	movs	r2, #0
 8020a1c:	f042 0201 	orr.w	r2, r2, #1
 8020a20:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8020a22:	697b      	ldr	r3, [r7, #20]
 8020a24:	2200      	movs	r2, #0
 8020a26:	f042 0208 	orr.w	r2, r2, #8
 8020a2a:	709a      	strb	r2, [r3, #2]
 8020a2c:	2200      	movs	r2, #0
 8020a2e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8020a30:	697b      	ldr	r3, [r7, #20]
 8020a32:	2206      	movs	r2, #6
 8020a34:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8020a36:	697b      	ldr	r3, [r7, #20]
 8020a38:	2204      	movs	r2, #4
 8020a3a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8020a3c:	f640 0306 	movw	r3, #2054	; 0x806
 8020a40:	9300      	str	r3, [sp, #0]
 8020a42:	687b      	ldr	r3, [r7, #4]
 8020a44:	68ba      	ldr	r2, [r7, #8]
 8020a46:	69b9      	ldr	r1, [r7, #24]
 8020a48:	68f8      	ldr	r0, [r7, #12]
 8020a4a:	f001 fc0f 	bl	802226c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8020a4e:	69b8      	ldr	r0, [r7, #24]
 8020a50:	f7fe f870 	bl	801eb34 <pbuf_free>
  p = NULL;
 8020a54:	2300      	movs	r3, #0
 8020a56:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8020a58:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8020a5c:	4618      	mov	r0, r3
 8020a5e:	3720      	adds	r7, #32
 8020a60:	46bd      	mov	sp, r7
 8020a62:	bd80      	pop	{r7, pc}
 8020a64:	080282e4 	.word	0x080282e4
 8020a68:	08028470 	.word	0x08028470
 8020a6c:	08028398 	.word	0x08028398
 8020a70:	08028520 	.word	0x08028520
 8020a74:	08028554 	.word	0x08028554

08020a78 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8020a78:	b580      	push	{r7, lr}
 8020a7a:	b088      	sub	sp, #32
 8020a7c:	af04      	add	r7, sp, #16
 8020a7e:	60f8      	str	r0, [r7, #12]
 8020a80:	60b9      	str	r1, [r7, #8]
 8020a82:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8020a84:	68fb      	ldr	r3, [r7, #12]
 8020a86:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8020a8a:	68fb      	ldr	r3, [r7, #12]
 8020a8c:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8020a90:	68fb      	ldr	r3, [r7, #12]
 8020a92:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8020a94:	2201      	movs	r2, #1
 8020a96:	9203      	str	r2, [sp, #12]
 8020a98:	68ba      	ldr	r2, [r7, #8]
 8020a9a:	9202      	str	r2, [sp, #8]
 8020a9c:	4a06      	ldr	r2, [pc, #24]	; (8020ab8 <etharp_request_dst+0x40>)
 8020a9e:	9201      	str	r2, [sp, #4]
 8020aa0:	9300      	str	r3, [sp, #0]
 8020aa2:	4603      	mov	r3, r0
 8020aa4:	687a      	ldr	r2, [r7, #4]
 8020aa6:	68f8      	ldr	r0, [r7, #12]
 8020aa8:	f7ff ff5a 	bl	8020960 <etharp_raw>
 8020aac:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8020aae:	4618      	mov	r0, r3
 8020ab0:	3710      	adds	r7, #16
 8020ab2:	46bd      	mov	sp, r7
 8020ab4:	bd80      	pop	{r7, pc}
 8020ab6:	bf00      	nop
 8020ab8:	08028f9c 	.word	0x08028f9c

08020abc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8020abc:	b580      	push	{r7, lr}
 8020abe:	b082      	sub	sp, #8
 8020ac0:	af00      	add	r7, sp, #0
 8020ac2:	6078      	str	r0, [r7, #4]
 8020ac4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8020ac6:	4a05      	ldr	r2, [pc, #20]	; (8020adc <etharp_request+0x20>)
 8020ac8:	6839      	ldr	r1, [r7, #0]
 8020aca:	6878      	ldr	r0, [r7, #4]
 8020acc:	f7ff ffd4 	bl	8020a78 <etharp_request_dst>
 8020ad0:	4603      	mov	r3, r0
}
 8020ad2:	4618      	mov	r0, r3
 8020ad4:	3708      	adds	r7, #8
 8020ad6:	46bd      	mov	sp, r7
 8020ad8:	bd80      	pop	{r7, pc}
 8020ada:	bf00      	nop
 8020adc:	08028f94 	.word	0x08028f94

08020ae0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8020ae0:	b580      	push	{r7, lr}
 8020ae2:	b08e      	sub	sp, #56	; 0x38
 8020ae4:	af04      	add	r7, sp, #16
 8020ae6:	6078      	str	r0, [r7, #4]
 8020ae8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8020aea:	4b79      	ldr	r3, [pc, #484]	; (8020cd0 <icmp_input+0x1f0>)
 8020aec:	689b      	ldr	r3, [r3, #8]
 8020aee:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8020af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020af2:	781b      	ldrb	r3, [r3, #0]
 8020af4:	f003 030f 	and.w	r3, r3, #15
 8020af8:	b2db      	uxtb	r3, r3
 8020afa:	009b      	lsls	r3, r3, #2
 8020afc:	b2db      	uxtb	r3, r3
 8020afe:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8020b00:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020b02:	2b13      	cmp	r3, #19
 8020b04:	f240 80cd 	bls.w	8020ca2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8020b08:	687b      	ldr	r3, [r7, #4]
 8020b0a:	895b      	ldrh	r3, [r3, #10]
 8020b0c:	2b03      	cmp	r3, #3
 8020b0e:	f240 80ca 	bls.w	8020ca6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8020b12:	687b      	ldr	r3, [r7, #4]
 8020b14:	685b      	ldr	r3, [r3, #4]
 8020b16:	781b      	ldrb	r3, [r3, #0]
 8020b18:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8020b1c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8020b20:	2b00      	cmp	r3, #0
 8020b22:	f000 80b7 	beq.w	8020c94 <icmp_input+0x1b4>
 8020b26:	2b08      	cmp	r3, #8
 8020b28:	f040 80b7 	bne.w	8020c9a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8020b2c:	4b69      	ldr	r3, [pc, #420]	; (8020cd4 <icmp_input+0x1f4>)
 8020b2e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8020b30:	4b67      	ldr	r3, [pc, #412]	; (8020cd0 <icmp_input+0x1f0>)
 8020b32:	695b      	ldr	r3, [r3, #20]
 8020b34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8020b38:	2be0      	cmp	r3, #224	; 0xe0
 8020b3a:	f000 80bb 	beq.w	8020cb4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8020b3e:	4b64      	ldr	r3, [pc, #400]	; (8020cd0 <icmp_input+0x1f0>)
 8020b40:	695b      	ldr	r3, [r3, #20]
 8020b42:	4a63      	ldr	r2, [pc, #396]	; (8020cd0 <icmp_input+0x1f0>)
 8020b44:	6812      	ldr	r2, [r2, #0]
 8020b46:	4611      	mov	r1, r2
 8020b48:	4618      	mov	r0, r3
 8020b4a:	f000 fbf1 	bl	8021330 <ip4_addr_isbroadcast_u32>
 8020b4e:	4603      	mov	r3, r0
 8020b50:	2b00      	cmp	r3, #0
 8020b52:	f040 80b1 	bne.w	8020cb8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8020b56:	687b      	ldr	r3, [r7, #4]
 8020b58:	891b      	ldrh	r3, [r3, #8]
 8020b5a:	2b07      	cmp	r3, #7
 8020b5c:	f240 80a5 	bls.w	8020caa <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8020b60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020b62:	330e      	adds	r3, #14
 8020b64:	4619      	mov	r1, r3
 8020b66:	6878      	ldr	r0, [r7, #4]
 8020b68:	f7fd ff4e 	bl	801ea08 <pbuf_add_header>
 8020b6c:	4603      	mov	r3, r0
 8020b6e:	2b00      	cmp	r3, #0
 8020b70:	d04b      	beq.n	8020c0a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8020b72:	687b      	ldr	r3, [r7, #4]
 8020b74:	891a      	ldrh	r2, [r3, #8]
 8020b76:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020b78:	4413      	add	r3, r2
 8020b7a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8020b7c:	687b      	ldr	r3, [r7, #4]
 8020b7e:	891b      	ldrh	r3, [r3, #8]
 8020b80:	8b7a      	ldrh	r2, [r7, #26]
 8020b82:	429a      	cmp	r2, r3
 8020b84:	f0c0 809a 	bcc.w	8020cbc <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8020b88:	8b7b      	ldrh	r3, [r7, #26]
 8020b8a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8020b8e:	4619      	mov	r1, r3
 8020b90:	200e      	movs	r0, #14
 8020b92:	f7fd fced 	bl	801e570 <pbuf_alloc>
 8020b96:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8020b98:	697b      	ldr	r3, [r7, #20]
 8020b9a:	2b00      	cmp	r3, #0
 8020b9c:	f000 8090 	beq.w	8020cc0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8020ba0:	697b      	ldr	r3, [r7, #20]
 8020ba2:	895b      	ldrh	r3, [r3, #10]
 8020ba4:	461a      	mov	r2, r3
 8020ba6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020ba8:	3308      	adds	r3, #8
 8020baa:	429a      	cmp	r2, r3
 8020bac:	d203      	bcs.n	8020bb6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8020bae:	6978      	ldr	r0, [r7, #20]
 8020bb0:	f7fd ffc0 	bl	801eb34 <pbuf_free>
          goto icmperr;
 8020bb4:	e085      	b.n	8020cc2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8020bb6:	697b      	ldr	r3, [r7, #20]
 8020bb8:	685b      	ldr	r3, [r3, #4]
 8020bba:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8020bbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8020bbe:	4618      	mov	r0, r3
 8020bc0:	f001 fbe0 	bl	8022384 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8020bc4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020bc6:	4619      	mov	r1, r3
 8020bc8:	6978      	ldr	r0, [r7, #20]
 8020bca:	f7fd ff2d 	bl	801ea28 <pbuf_remove_header>
 8020bce:	4603      	mov	r3, r0
 8020bd0:	2b00      	cmp	r3, #0
 8020bd2:	d009      	beq.n	8020be8 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8020bd4:	4b40      	ldr	r3, [pc, #256]	; (8020cd8 <icmp_input+0x1f8>)
 8020bd6:	22b6      	movs	r2, #182	; 0xb6
 8020bd8:	4940      	ldr	r1, [pc, #256]	; (8020cdc <icmp_input+0x1fc>)
 8020bda:	4841      	ldr	r0, [pc, #260]	; (8020ce0 <icmp_input+0x200>)
 8020bdc:	f001 fce2 	bl	80225a4 <iprintf>
          pbuf_free(r);
 8020be0:	6978      	ldr	r0, [r7, #20]
 8020be2:	f7fd ffa7 	bl	801eb34 <pbuf_free>
          goto icmperr;
 8020be6:	e06c      	b.n	8020cc2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8020be8:	6879      	ldr	r1, [r7, #4]
 8020bea:	6978      	ldr	r0, [r7, #20]
 8020bec:	f7fe f8ca 	bl	801ed84 <pbuf_copy>
 8020bf0:	4603      	mov	r3, r0
 8020bf2:	2b00      	cmp	r3, #0
 8020bf4:	d003      	beq.n	8020bfe <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8020bf6:	6978      	ldr	r0, [r7, #20]
 8020bf8:	f7fd ff9c 	bl	801eb34 <pbuf_free>
          goto icmperr;
 8020bfc:	e061      	b.n	8020cc2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8020bfe:	6878      	ldr	r0, [r7, #4]
 8020c00:	f7fd ff98 	bl	801eb34 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8020c04:	697b      	ldr	r3, [r7, #20]
 8020c06:	607b      	str	r3, [r7, #4]
 8020c08:	e00f      	b.n	8020c2a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8020c0a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020c0c:	330e      	adds	r3, #14
 8020c0e:	4619      	mov	r1, r3
 8020c10:	6878      	ldr	r0, [r7, #4]
 8020c12:	f7fd ff09 	bl	801ea28 <pbuf_remove_header>
 8020c16:	4603      	mov	r3, r0
 8020c18:	2b00      	cmp	r3, #0
 8020c1a:	d006      	beq.n	8020c2a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8020c1c:	4b2e      	ldr	r3, [pc, #184]	; (8020cd8 <icmp_input+0x1f8>)
 8020c1e:	22c7      	movs	r2, #199	; 0xc7
 8020c20:	4930      	ldr	r1, [pc, #192]	; (8020ce4 <icmp_input+0x204>)
 8020c22:	482f      	ldr	r0, [pc, #188]	; (8020ce0 <icmp_input+0x200>)
 8020c24:	f001 fcbe 	bl	80225a4 <iprintf>
          goto icmperr;
 8020c28:	e04b      	b.n	8020cc2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8020c2a:	687b      	ldr	r3, [r7, #4]
 8020c2c:	685b      	ldr	r3, [r3, #4]
 8020c2e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8020c30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020c32:	4619      	mov	r1, r3
 8020c34:	6878      	ldr	r0, [r7, #4]
 8020c36:	f7fd fee7 	bl	801ea08 <pbuf_add_header>
 8020c3a:	4603      	mov	r3, r0
 8020c3c:	2b00      	cmp	r3, #0
 8020c3e:	d12b      	bne.n	8020c98 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8020c40:	687b      	ldr	r3, [r7, #4]
 8020c42:	685b      	ldr	r3, [r3, #4]
 8020c44:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8020c46:	69fb      	ldr	r3, [r7, #28]
 8020c48:	681a      	ldr	r2, [r3, #0]
 8020c4a:	68fb      	ldr	r3, [r7, #12]
 8020c4c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8020c4e:	4b20      	ldr	r3, [pc, #128]	; (8020cd0 <icmp_input+0x1f0>)
 8020c50:	691a      	ldr	r2, [r3, #16]
 8020c52:	68fb      	ldr	r3, [r7, #12]
 8020c54:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8020c56:	693b      	ldr	r3, [r7, #16]
 8020c58:	2200      	movs	r2, #0
 8020c5a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8020c5c:	693b      	ldr	r3, [r7, #16]
 8020c5e:	2200      	movs	r2, #0
 8020c60:	709a      	strb	r2, [r3, #2]
 8020c62:	2200      	movs	r2, #0
 8020c64:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8020c66:	68fb      	ldr	r3, [r7, #12]
 8020c68:	22ff      	movs	r2, #255	; 0xff
 8020c6a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8020c6c:	68fb      	ldr	r3, [r7, #12]
 8020c6e:	2200      	movs	r2, #0
 8020c70:	729a      	strb	r2, [r3, #10]
 8020c72:	2200      	movs	r2, #0
 8020c74:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8020c76:	683b      	ldr	r3, [r7, #0]
 8020c78:	9302      	str	r3, [sp, #8]
 8020c7a:	2301      	movs	r3, #1
 8020c7c:	9301      	str	r3, [sp, #4]
 8020c7e:	2300      	movs	r3, #0
 8020c80:	9300      	str	r3, [sp, #0]
 8020c82:	23ff      	movs	r3, #255	; 0xff
 8020c84:	2200      	movs	r2, #0
 8020c86:	69f9      	ldr	r1, [r7, #28]
 8020c88:	6878      	ldr	r0, [r7, #4]
 8020c8a:	f000 fa6b 	bl	8021164 <ip4_output_if>
 8020c8e:	4603      	mov	r3, r0
 8020c90:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8020c92:	e001      	b.n	8020c98 <icmp_input+0x1b8>
      break;
 8020c94:	bf00      	nop
 8020c96:	e000      	b.n	8020c9a <icmp_input+0x1ba>
      break;
 8020c98:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8020c9a:	6878      	ldr	r0, [r7, #4]
 8020c9c:	f7fd ff4a 	bl	801eb34 <pbuf_free>
  return;
 8020ca0:	e013      	b.n	8020cca <icmp_input+0x1ea>
    goto lenerr;
 8020ca2:	bf00      	nop
 8020ca4:	e002      	b.n	8020cac <icmp_input+0x1cc>
    goto lenerr;
 8020ca6:	bf00      	nop
 8020ca8:	e000      	b.n	8020cac <icmp_input+0x1cc>
        goto lenerr;
 8020caa:	bf00      	nop
lenerr:
  pbuf_free(p);
 8020cac:	6878      	ldr	r0, [r7, #4]
 8020cae:	f7fd ff41 	bl	801eb34 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8020cb2:	e00a      	b.n	8020cca <icmp_input+0x1ea>
        goto icmperr;
 8020cb4:	bf00      	nop
 8020cb6:	e004      	b.n	8020cc2 <icmp_input+0x1e2>
        goto icmperr;
 8020cb8:	bf00      	nop
 8020cba:	e002      	b.n	8020cc2 <icmp_input+0x1e2>
          goto icmperr;
 8020cbc:	bf00      	nop
 8020cbe:	e000      	b.n	8020cc2 <icmp_input+0x1e2>
          goto icmperr;
 8020cc0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8020cc2:	6878      	ldr	r0, [r7, #4]
 8020cc4:	f7fd ff36 	bl	801eb34 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8020cc8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8020cca:	3728      	adds	r7, #40	; 0x28
 8020ccc:	46bd      	mov	sp, r7
 8020cce:	bd80      	pop	{r7, pc}
 8020cd0:	20010768 	.word	0x20010768
 8020cd4:	2001077c 	.word	0x2001077c
 8020cd8:	08028598 	.word	0x08028598
 8020cdc:	0802860c 	.word	0x0802860c
 8020ce0:	08028644 	.word	0x08028644
 8020ce4:	0802866c 	.word	0x0802866c

08020ce8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8020ce8:	b580      	push	{r7, lr}
 8020cea:	b082      	sub	sp, #8
 8020cec:	af00      	add	r7, sp, #0
 8020cee:	6078      	str	r0, [r7, #4]
 8020cf0:	460b      	mov	r3, r1
 8020cf2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8020cf4:	78fb      	ldrb	r3, [r7, #3]
 8020cf6:	461a      	mov	r2, r3
 8020cf8:	2103      	movs	r1, #3
 8020cfa:	6878      	ldr	r0, [r7, #4]
 8020cfc:	f000 f814 	bl	8020d28 <icmp_send_response>
}
 8020d00:	bf00      	nop
 8020d02:	3708      	adds	r7, #8
 8020d04:	46bd      	mov	sp, r7
 8020d06:	bd80      	pop	{r7, pc}

08020d08 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8020d08:	b580      	push	{r7, lr}
 8020d0a:	b082      	sub	sp, #8
 8020d0c:	af00      	add	r7, sp, #0
 8020d0e:	6078      	str	r0, [r7, #4]
 8020d10:	460b      	mov	r3, r1
 8020d12:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8020d14:	78fb      	ldrb	r3, [r7, #3]
 8020d16:	461a      	mov	r2, r3
 8020d18:	210b      	movs	r1, #11
 8020d1a:	6878      	ldr	r0, [r7, #4]
 8020d1c:	f000 f804 	bl	8020d28 <icmp_send_response>
}
 8020d20:	bf00      	nop
 8020d22:	3708      	adds	r7, #8
 8020d24:	46bd      	mov	sp, r7
 8020d26:	bd80      	pop	{r7, pc}

08020d28 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8020d28:	b580      	push	{r7, lr}
 8020d2a:	b08c      	sub	sp, #48	; 0x30
 8020d2c:	af04      	add	r7, sp, #16
 8020d2e:	6078      	str	r0, [r7, #4]
 8020d30:	460b      	mov	r3, r1
 8020d32:	70fb      	strb	r3, [r7, #3]
 8020d34:	4613      	mov	r3, r2
 8020d36:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8020d38:	f44f 7220 	mov.w	r2, #640	; 0x280
 8020d3c:	2124      	movs	r1, #36	; 0x24
 8020d3e:	2022      	movs	r0, #34	; 0x22
 8020d40:	f7fd fc16 	bl	801e570 <pbuf_alloc>
 8020d44:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8020d46:	69fb      	ldr	r3, [r7, #28]
 8020d48:	2b00      	cmp	r3, #0
 8020d4a:	d04c      	beq.n	8020de6 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8020d4c:	69fb      	ldr	r3, [r7, #28]
 8020d4e:	895b      	ldrh	r3, [r3, #10]
 8020d50:	2b23      	cmp	r3, #35	; 0x23
 8020d52:	d806      	bhi.n	8020d62 <icmp_send_response+0x3a>
 8020d54:	4b26      	ldr	r3, [pc, #152]	; (8020df0 <icmp_send_response+0xc8>)
 8020d56:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8020d5a:	4926      	ldr	r1, [pc, #152]	; (8020df4 <icmp_send_response+0xcc>)
 8020d5c:	4826      	ldr	r0, [pc, #152]	; (8020df8 <icmp_send_response+0xd0>)
 8020d5e:	f001 fc21 	bl	80225a4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8020d62:	687b      	ldr	r3, [r7, #4]
 8020d64:	685b      	ldr	r3, [r3, #4]
 8020d66:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8020d68:	69fb      	ldr	r3, [r7, #28]
 8020d6a:	685b      	ldr	r3, [r3, #4]
 8020d6c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8020d6e:	697b      	ldr	r3, [r7, #20]
 8020d70:	78fa      	ldrb	r2, [r7, #3]
 8020d72:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8020d74:	697b      	ldr	r3, [r7, #20]
 8020d76:	78ba      	ldrb	r2, [r7, #2]
 8020d78:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8020d7a:	697b      	ldr	r3, [r7, #20]
 8020d7c:	2200      	movs	r2, #0
 8020d7e:	711a      	strb	r2, [r3, #4]
 8020d80:	2200      	movs	r2, #0
 8020d82:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8020d84:	697b      	ldr	r3, [r7, #20]
 8020d86:	2200      	movs	r2, #0
 8020d88:	719a      	strb	r2, [r3, #6]
 8020d8a:	2200      	movs	r2, #0
 8020d8c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8020d8e:	69fb      	ldr	r3, [r7, #28]
 8020d90:	685b      	ldr	r3, [r3, #4]
 8020d92:	f103 0008 	add.w	r0, r3, #8
 8020d96:	687b      	ldr	r3, [r7, #4]
 8020d98:	685b      	ldr	r3, [r3, #4]
 8020d9a:	221c      	movs	r2, #28
 8020d9c:	4619      	mov	r1, r3
 8020d9e:	f001 faf1 	bl	8022384 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8020da2:	69bb      	ldr	r3, [r7, #24]
 8020da4:	68db      	ldr	r3, [r3, #12]
 8020da6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8020da8:	f107 030c 	add.w	r3, r7, #12
 8020dac:	4618      	mov	r0, r3
 8020dae:	f000 f825 	bl	8020dfc <ip4_route>
 8020db2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8020db4:	693b      	ldr	r3, [r7, #16]
 8020db6:	2b00      	cmp	r3, #0
 8020db8:	d011      	beq.n	8020dde <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8020dba:	697b      	ldr	r3, [r7, #20]
 8020dbc:	2200      	movs	r2, #0
 8020dbe:	709a      	strb	r2, [r3, #2]
 8020dc0:	2200      	movs	r2, #0
 8020dc2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8020dc4:	f107 020c 	add.w	r2, r7, #12
 8020dc8:	693b      	ldr	r3, [r7, #16]
 8020dca:	9302      	str	r3, [sp, #8]
 8020dcc:	2301      	movs	r3, #1
 8020dce:	9301      	str	r3, [sp, #4]
 8020dd0:	2300      	movs	r3, #0
 8020dd2:	9300      	str	r3, [sp, #0]
 8020dd4:	23ff      	movs	r3, #255	; 0xff
 8020dd6:	2100      	movs	r1, #0
 8020dd8:	69f8      	ldr	r0, [r7, #28]
 8020dda:	f000 f9c3 	bl	8021164 <ip4_output_if>
  }
  pbuf_free(q);
 8020dde:	69f8      	ldr	r0, [r7, #28]
 8020de0:	f7fd fea8 	bl	801eb34 <pbuf_free>
 8020de4:	e000      	b.n	8020de8 <icmp_send_response+0xc0>
    return;
 8020de6:	bf00      	nop
}
 8020de8:	3720      	adds	r7, #32
 8020dea:	46bd      	mov	sp, r7
 8020dec:	bd80      	pop	{r7, pc}
 8020dee:	bf00      	nop
 8020df0:	08028598 	.word	0x08028598
 8020df4:	080286a0 	.word	0x080286a0
 8020df8:	08028644 	.word	0x08028644

08020dfc <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8020dfc:	b480      	push	{r7}
 8020dfe:	b085      	sub	sp, #20
 8020e00:	af00      	add	r7, sp, #0
 8020e02:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8020e04:	4b33      	ldr	r3, [pc, #204]	; (8020ed4 <ip4_route+0xd8>)
 8020e06:	681b      	ldr	r3, [r3, #0]
 8020e08:	60fb      	str	r3, [r7, #12]
 8020e0a:	e036      	b.n	8020e7a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8020e0c:	68fb      	ldr	r3, [r7, #12]
 8020e0e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8020e12:	f003 0301 	and.w	r3, r3, #1
 8020e16:	b2db      	uxtb	r3, r3
 8020e18:	2b00      	cmp	r3, #0
 8020e1a:	d02b      	beq.n	8020e74 <ip4_route+0x78>
 8020e1c:	68fb      	ldr	r3, [r7, #12]
 8020e1e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8020e22:	089b      	lsrs	r3, r3, #2
 8020e24:	f003 0301 	and.w	r3, r3, #1
 8020e28:	b2db      	uxtb	r3, r3
 8020e2a:	2b00      	cmp	r3, #0
 8020e2c:	d022      	beq.n	8020e74 <ip4_route+0x78>
 8020e2e:	68fb      	ldr	r3, [r7, #12]
 8020e30:	3304      	adds	r3, #4
 8020e32:	681b      	ldr	r3, [r3, #0]
 8020e34:	2b00      	cmp	r3, #0
 8020e36:	d01d      	beq.n	8020e74 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8020e38:	687b      	ldr	r3, [r7, #4]
 8020e3a:	681a      	ldr	r2, [r3, #0]
 8020e3c:	68fb      	ldr	r3, [r7, #12]
 8020e3e:	3304      	adds	r3, #4
 8020e40:	681b      	ldr	r3, [r3, #0]
 8020e42:	405a      	eors	r2, r3
 8020e44:	68fb      	ldr	r3, [r7, #12]
 8020e46:	3308      	adds	r3, #8
 8020e48:	681b      	ldr	r3, [r3, #0]
 8020e4a:	4013      	ands	r3, r2
 8020e4c:	2b00      	cmp	r3, #0
 8020e4e:	d101      	bne.n	8020e54 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8020e50:	68fb      	ldr	r3, [r7, #12]
 8020e52:	e038      	b.n	8020ec6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8020e54:	68fb      	ldr	r3, [r7, #12]
 8020e56:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8020e5a:	f003 0302 	and.w	r3, r3, #2
 8020e5e:	2b00      	cmp	r3, #0
 8020e60:	d108      	bne.n	8020e74 <ip4_route+0x78>
 8020e62:	687b      	ldr	r3, [r7, #4]
 8020e64:	681a      	ldr	r2, [r3, #0]
 8020e66:	68fb      	ldr	r3, [r7, #12]
 8020e68:	330c      	adds	r3, #12
 8020e6a:	681b      	ldr	r3, [r3, #0]
 8020e6c:	429a      	cmp	r2, r3
 8020e6e:	d101      	bne.n	8020e74 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8020e70:	68fb      	ldr	r3, [r7, #12]
 8020e72:	e028      	b.n	8020ec6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8020e74:	68fb      	ldr	r3, [r7, #12]
 8020e76:	681b      	ldr	r3, [r3, #0]
 8020e78:	60fb      	str	r3, [r7, #12]
 8020e7a:	68fb      	ldr	r3, [r7, #12]
 8020e7c:	2b00      	cmp	r3, #0
 8020e7e:	d1c5      	bne.n	8020e0c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8020e80:	4b15      	ldr	r3, [pc, #84]	; (8020ed8 <ip4_route+0xdc>)
 8020e82:	681b      	ldr	r3, [r3, #0]
 8020e84:	2b00      	cmp	r3, #0
 8020e86:	d01a      	beq.n	8020ebe <ip4_route+0xc2>
 8020e88:	4b13      	ldr	r3, [pc, #76]	; (8020ed8 <ip4_route+0xdc>)
 8020e8a:	681b      	ldr	r3, [r3, #0]
 8020e8c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8020e90:	f003 0301 	and.w	r3, r3, #1
 8020e94:	2b00      	cmp	r3, #0
 8020e96:	d012      	beq.n	8020ebe <ip4_route+0xc2>
 8020e98:	4b0f      	ldr	r3, [pc, #60]	; (8020ed8 <ip4_route+0xdc>)
 8020e9a:	681b      	ldr	r3, [r3, #0]
 8020e9c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8020ea0:	f003 0304 	and.w	r3, r3, #4
 8020ea4:	2b00      	cmp	r3, #0
 8020ea6:	d00a      	beq.n	8020ebe <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8020ea8:	4b0b      	ldr	r3, [pc, #44]	; (8020ed8 <ip4_route+0xdc>)
 8020eaa:	681b      	ldr	r3, [r3, #0]
 8020eac:	3304      	adds	r3, #4
 8020eae:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8020eb0:	2b00      	cmp	r3, #0
 8020eb2:	d004      	beq.n	8020ebe <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8020eb4:	687b      	ldr	r3, [r7, #4]
 8020eb6:	681b      	ldr	r3, [r3, #0]
 8020eb8:	b2db      	uxtb	r3, r3
 8020eba:	2b7f      	cmp	r3, #127	; 0x7f
 8020ebc:	d101      	bne.n	8020ec2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8020ebe:	2300      	movs	r3, #0
 8020ec0:	e001      	b.n	8020ec6 <ip4_route+0xca>
  }

  return netif_default;
 8020ec2:	4b05      	ldr	r3, [pc, #20]	; (8020ed8 <ip4_route+0xdc>)
 8020ec4:	681b      	ldr	r3, [r3, #0]
}
 8020ec6:	4618      	mov	r0, r3
 8020ec8:	3714      	adds	r7, #20
 8020eca:	46bd      	mov	sp, r7
 8020ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ed0:	4770      	bx	lr
 8020ed2:	bf00      	nop
 8020ed4:	20013d78 	.word	0x20013d78
 8020ed8:	20013d7c 	.word	0x20013d7c

08020edc <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8020edc:	b580      	push	{r7, lr}
 8020ede:	b082      	sub	sp, #8
 8020ee0:	af00      	add	r7, sp, #0
 8020ee2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8020ee4:	687b      	ldr	r3, [r7, #4]
 8020ee6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8020eea:	f003 0301 	and.w	r3, r3, #1
 8020eee:	b2db      	uxtb	r3, r3
 8020ef0:	2b00      	cmp	r3, #0
 8020ef2:	d016      	beq.n	8020f22 <ip4_input_accept+0x46>
 8020ef4:	687b      	ldr	r3, [r7, #4]
 8020ef6:	3304      	adds	r3, #4
 8020ef8:	681b      	ldr	r3, [r3, #0]
 8020efa:	2b00      	cmp	r3, #0
 8020efc:	d011      	beq.n	8020f22 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8020efe:	4b0b      	ldr	r3, [pc, #44]	; (8020f2c <ip4_input_accept+0x50>)
 8020f00:	695a      	ldr	r2, [r3, #20]
 8020f02:	687b      	ldr	r3, [r7, #4]
 8020f04:	3304      	adds	r3, #4
 8020f06:	681b      	ldr	r3, [r3, #0]
 8020f08:	429a      	cmp	r2, r3
 8020f0a:	d008      	beq.n	8020f1e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8020f0c:	4b07      	ldr	r3, [pc, #28]	; (8020f2c <ip4_input_accept+0x50>)
 8020f0e:	695b      	ldr	r3, [r3, #20]
 8020f10:	6879      	ldr	r1, [r7, #4]
 8020f12:	4618      	mov	r0, r3
 8020f14:	f000 fa0c 	bl	8021330 <ip4_addr_isbroadcast_u32>
 8020f18:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8020f1a:	2b00      	cmp	r3, #0
 8020f1c:	d001      	beq.n	8020f22 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8020f1e:	2301      	movs	r3, #1
 8020f20:	e000      	b.n	8020f24 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8020f22:	2300      	movs	r3, #0
}
 8020f24:	4618      	mov	r0, r3
 8020f26:	3708      	adds	r7, #8
 8020f28:	46bd      	mov	sp, r7
 8020f2a:	bd80      	pop	{r7, pc}
 8020f2c:	20010768 	.word	0x20010768

08020f30 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8020f30:	b580      	push	{r7, lr}
 8020f32:	b086      	sub	sp, #24
 8020f34:	af00      	add	r7, sp, #0
 8020f36:	6078      	str	r0, [r7, #4]
 8020f38:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8020f3a:	687b      	ldr	r3, [r7, #4]
 8020f3c:	685b      	ldr	r3, [r3, #4]
 8020f3e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8020f40:	697b      	ldr	r3, [r7, #20]
 8020f42:	781b      	ldrb	r3, [r3, #0]
 8020f44:	091b      	lsrs	r3, r3, #4
 8020f46:	b2db      	uxtb	r3, r3
 8020f48:	2b04      	cmp	r3, #4
 8020f4a:	d004      	beq.n	8020f56 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8020f4c:	6878      	ldr	r0, [r7, #4]
 8020f4e:	f7fd fdf1 	bl	801eb34 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8020f52:	2300      	movs	r3, #0
 8020f54:	e0fd      	b.n	8021152 <ip4_input+0x222>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8020f56:	697b      	ldr	r3, [r7, #20]
 8020f58:	781b      	ldrb	r3, [r3, #0]
 8020f5a:	f003 030f 	and.w	r3, r3, #15
 8020f5e:	b2db      	uxtb	r3, r3
 8020f60:	009b      	lsls	r3, r3, #2
 8020f62:	b2db      	uxtb	r3, r3
 8020f64:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8020f66:	697b      	ldr	r3, [r7, #20]
 8020f68:	885b      	ldrh	r3, [r3, #2]
 8020f6a:	b29b      	uxth	r3, r3
 8020f6c:	4618      	mov	r0, r3
 8020f6e:	f7fc fa05 	bl	801d37c <lwip_htons>
 8020f72:	4603      	mov	r3, r0
 8020f74:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8020f76:	687b      	ldr	r3, [r7, #4]
 8020f78:	891b      	ldrh	r3, [r3, #8]
 8020f7a:	89ba      	ldrh	r2, [r7, #12]
 8020f7c:	429a      	cmp	r2, r3
 8020f7e:	d204      	bcs.n	8020f8a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8020f80:	89bb      	ldrh	r3, [r7, #12]
 8020f82:	4619      	mov	r1, r3
 8020f84:	6878      	ldr	r0, [r7, #4]
 8020f86:	f7fd fc4f 	bl	801e828 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8020f8a:	687b      	ldr	r3, [r7, #4]
 8020f8c:	895b      	ldrh	r3, [r3, #10]
 8020f8e:	89fa      	ldrh	r2, [r7, #14]
 8020f90:	429a      	cmp	r2, r3
 8020f92:	d807      	bhi.n	8020fa4 <ip4_input+0x74>
 8020f94:	687b      	ldr	r3, [r7, #4]
 8020f96:	891b      	ldrh	r3, [r3, #8]
 8020f98:	89ba      	ldrh	r2, [r7, #12]
 8020f9a:	429a      	cmp	r2, r3
 8020f9c:	d802      	bhi.n	8020fa4 <ip4_input+0x74>
 8020f9e:	89fb      	ldrh	r3, [r7, #14]
 8020fa0:	2b13      	cmp	r3, #19
 8020fa2:	d804      	bhi.n	8020fae <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8020fa4:	6878      	ldr	r0, [r7, #4]
 8020fa6:	f7fd fdc5 	bl	801eb34 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8020faa:	2300      	movs	r3, #0
 8020fac:	e0d1      	b.n	8021152 <ip4_input+0x222>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8020fae:	697b      	ldr	r3, [r7, #20]
 8020fb0:	691b      	ldr	r3, [r3, #16]
 8020fb2:	4a6a      	ldr	r2, [pc, #424]	; (802115c <ip4_input+0x22c>)
 8020fb4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8020fb6:	697b      	ldr	r3, [r7, #20]
 8020fb8:	68db      	ldr	r3, [r3, #12]
 8020fba:	4a68      	ldr	r2, [pc, #416]	; (802115c <ip4_input+0x22c>)
 8020fbc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8020fbe:	4b67      	ldr	r3, [pc, #412]	; (802115c <ip4_input+0x22c>)
 8020fc0:	695b      	ldr	r3, [r3, #20]
 8020fc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8020fc6:	2be0      	cmp	r3, #224	; 0xe0
 8020fc8:	d112      	bne.n	8020ff0 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8020fca:	683b      	ldr	r3, [r7, #0]
 8020fcc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8020fd0:	f003 0301 	and.w	r3, r3, #1
 8020fd4:	b2db      	uxtb	r3, r3
 8020fd6:	2b00      	cmp	r3, #0
 8020fd8:	d007      	beq.n	8020fea <ip4_input+0xba>
 8020fda:	683b      	ldr	r3, [r7, #0]
 8020fdc:	3304      	adds	r3, #4
 8020fde:	681b      	ldr	r3, [r3, #0]
 8020fe0:	2b00      	cmp	r3, #0
 8020fe2:	d002      	beq.n	8020fea <ip4_input+0xba>
      netif = inp;
 8020fe4:	683b      	ldr	r3, [r7, #0]
 8020fe6:	613b      	str	r3, [r7, #16]
 8020fe8:	e02a      	b.n	8021040 <ip4_input+0x110>
    } else {
      netif = NULL;
 8020fea:	2300      	movs	r3, #0
 8020fec:	613b      	str	r3, [r7, #16]
 8020fee:	e027      	b.n	8021040 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8020ff0:	6838      	ldr	r0, [r7, #0]
 8020ff2:	f7ff ff73 	bl	8020edc <ip4_input_accept>
 8020ff6:	4603      	mov	r3, r0
 8020ff8:	2b00      	cmp	r3, #0
 8020ffa:	d002      	beq.n	8021002 <ip4_input+0xd2>
      netif = inp;
 8020ffc:	683b      	ldr	r3, [r7, #0]
 8020ffe:	613b      	str	r3, [r7, #16]
 8021000:	e01e      	b.n	8021040 <ip4_input+0x110>
    } else {
      netif = NULL;
 8021002:	2300      	movs	r3, #0
 8021004:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8021006:	4b55      	ldr	r3, [pc, #340]	; (802115c <ip4_input+0x22c>)
 8021008:	695b      	ldr	r3, [r3, #20]
 802100a:	b2db      	uxtb	r3, r3
 802100c:	2b7f      	cmp	r3, #127	; 0x7f
 802100e:	d017      	beq.n	8021040 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8021010:	4b53      	ldr	r3, [pc, #332]	; (8021160 <ip4_input+0x230>)
 8021012:	681b      	ldr	r3, [r3, #0]
 8021014:	613b      	str	r3, [r7, #16]
 8021016:	e00e      	b.n	8021036 <ip4_input+0x106>
          if (netif == inp) {
 8021018:	693a      	ldr	r2, [r7, #16]
 802101a:	683b      	ldr	r3, [r7, #0]
 802101c:	429a      	cmp	r2, r3
 802101e:	d006      	beq.n	802102e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8021020:	6938      	ldr	r0, [r7, #16]
 8021022:	f7ff ff5b 	bl	8020edc <ip4_input_accept>
 8021026:	4603      	mov	r3, r0
 8021028:	2b00      	cmp	r3, #0
 802102a:	d108      	bne.n	802103e <ip4_input+0x10e>
 802102c:	e000      	b.n	8021030 <ip4_input+0x100>
            continue;
 802102e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8021030:	693b      	ldr	r3, [r7, #16]
 8021032:	681b      	ldr	r3, [r3, #0]
 8021034:	613b      	str	r3, [r7, #16]
 8021036:	693b      	ldr	r3, [r7, #16]
 8021038:	2b00      	cmp	r3, #0
 802103a:	d1ed      	bne.n	8021018 <ip4_input+0xe8>
 802103c:	e000      	b.n	8021040 <ip4_input+0x110>
            break;
 802103e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8021040:	4b46      	ldr	r3, [pc, #280]	; (802115c <ip4_input+0x22c>)
 8021042:	691b      	ldr	r3, [r3, #16]
 8021044:	6839      	ldr	r1, [r7, #0]
 8021046:	4618      	mov	r0, r3
 8021048:	f000 f972 	bl	8021330 <ip4_addr_isbroadcast_u32>
 802104c:	4603      	mov	r3, r0
 802104e:	2b00      	cmp	r3, #0
 8021050:	d105      	bne.n	802105e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8021052:	4b42      	ldr	r3, [pc, #264]	; (802115c <ip4_input+0x22c>)
 8021054:	691b      	ldr	r3, [r3, #16]
 8021056:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 802105a:	2be0      	cmp	r3, #224	; 0xe0
 802105c:	d104      	bne.n	8021068 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 802105e:	6878      	ldr	r0, [r7, #4]
 8021060:	f7fd fd68 	bl	801eb34 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8021064:	2300      	movs	r3, #0
 8021066:	e074      	b.n	8021152 <ip4_input+0x222>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8021068:	693b      	ldr	r3, [r7, #16]
 802106a:	2b00      	cmp	r3, #0
 802106c:	d104      	bne.n	8021078 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 802106e:	6878      	ldr	r0, [r7, #4]
 8021070:	f7fd fd60 	bl	801eb34 <pbuf_free>
    return ERR_OK;
 8021074:	2300      	movs	r3, #0
 8021076:	e06c      	b.n	8021152 <ip4_input+0x222>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8021078:	697b      	ldr	r3, [r7, #20]
 802107a:	88db      	ldrh	r3, [r3, #6]
 802107c:	b29b      	uxth	r3, r3
 802107e:	461a      	mov	r2, r3
 8021080:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8021084:	4013      	ands	r3, r2
 8021086:	2b00      	cmp	r3, #0
 8021088:	d00b      	beq.n	80210a2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 802108a:	6878      	ldr	r0, [r7, #4]
 802108c:	f000 fd26 	bl	8021adc <ip4_reass>
 8021090:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8021092:	687b      	ldr	r3, [r7, #4]
 8021094:	2b00      	cmp	r3, #0
 8021096:	d101      	bne.n	802109c <ip4_input+0x16c>
      return ERR_OK;
 8021098:	2300      	movs	r3, #0
 802109a:	e05a      	b.n	8021152 <ip4_input+0x222>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 802109c:	687b      	ldr	r3, [r7, #4]
 802109e:	685b      	ldr	r3, [r3, #4]
 80210a0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80210a2:	4a2e      	ldr	r2, [pc, #184]	; (802115c <ip4_input+0x22c>)
 80210a4:	693b      	ldr	r3, [r7, #16]
 80210a6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80210a8:	4a2c      	ldr	r2, [pc, #176]	; (802115c <ip4_input+0x22c>)
 80210aa:	683b      	ldr	r3, [r7, #0]
 80210ac:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80210ae:	4a2b      	ldr	r2, [pc, #172]	; (802115c <ip4_input+0x22c>)
 80210b0:	697b      	ldr	r3, [r7, #20]
 80210b2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80210b4:	697b      	ldr	r3, [r7, #20]
 80210b6:	781b      	ldrb	r3, [r3, #0]
 80210b8:	f003 030f 	and.w	r3, r3, #15
 80210bc:	b2db      	uxtb	r3, r3
 80210be:	009b      	lsls	r3, r3, #2
 80210c0:	b2db      	uxtb	r3, r3
 80210c2:	b29a      	uxth	r2, r3
 80210c4:	4b25      	ldr	r3, [pc, #148]	; (802115c <ip4_input+0x22c>)
 80210c6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80210c8:	89fb      	ldrh	r3, [r7, #14]
 80210ca:	4619      	mov	r1, r3
 80210cc:	6878      	ldr	r0, [r7, #4]
 80210ce:	f7fd fcab 	bl	801ea28 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80210d2:	697b      	ldr	r3, [r7, #20]
 80210d4:	7a5b      	ldrb	r3, [r3, #9]
 80210d6:	2b01      	cmp	r3, #1
 80210d8:	d006      	beq.n	80210e8 <ip4_input+0x1b8>
 80210da:	2b11      	cmp	r3, #17
 80210dc:	d109      	bne.n	80210f2 <ip4_input+0x1c2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80210de:	6839      	ldr	r1, [r7, #0]
 80210e0:	6878      	ldr	r0, [r7, #4]
 80210e2:	f7fe f9b5 	bl	801f450 <udp_input>
        break;
 80210e6:	e021      	b.n	802112c <ip4_input+0x1fc>
        break;
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80210e8:	6839      	ldr	r1, [r7, #0]
 80210ea:	6878      	ldr	r0, [r7, #4]
 80210ec:	f7ff fcf8 	bl	8020ae0 <icmp_input>
        break;
 80210f0:	e01c      	b.n	802112c <ip4_input+0x1fc>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80210f2:	4b1a      	ldr	r3, [pc, #104]	; (802115c <ip4_input+0x22c>)
 80210f4:	695b      	ldr	r3, [r3, #20]
 80210f6:	6939      	ldr	r1, [r7, #16]
 80210f8:	4618      	mov	r0, r3
 80210fa:	f000 f919 	bl	8021330 <ip4_addr_isbroadcast_u32>
 80210fe:	4603      	mov	r3, r0
 8021100:	2b00      	cmp	r3, #0
 8021102:	d10f      	bne.n	8021124 <ip4_input+0x1f4>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8021104:	4b15      	ldr	r3, [pc, #84]	; (802115c <ip4_input+0x22c>)
 8021106:	695b      	ldr	r3, [r3, #20]
 8021108:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 802110c:	2be0      	cmp	r3, #224	; 0xe0
 802110e:	d009      	beq.n	8021124 <ip4_input+0x1f4>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8021110:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8021114:	4619      	mov	r1, r3
 8021116:	6878      	ldr	r0, [r7, #4]
 8021118:	f7fd fcf9 	bl	801eb0e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 802111c:	2102      	movs	r1, #2
 802111e:	6878      	ldr	r0, [r7, #4]
 8021120:	f7ff fde2 	bl	8020ce8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8021124:	6878      	ldr	r0, [r7, #4]
 8021126:	f7fd fd05 	bl	801eb34 <pbuf_free>
        break;
 802112a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 802112c:	4b0b      	ldr	r3, [pc, #44]	; (802115c <ip4_input+0x22c>)
 802112e:	2200      	movs	r2, #0
 8021130:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8021132:	4b0a      	ldr	r3, [pc, #40]	; (802115c <ip4_input+0x22c>)
 8021134:	2200      	movs	r2, #0
 8021136:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8021138:	4b08      	ldr	r3, [pc, #32]	; (802115c <ip4_input+0x22c>)
 802113a:	2200      	movs	r2, #0
 802113c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 802113e:	4b07      	ldr	r3, [pc, #28]	; (802115c <ip4_input+0x22c>)
 8021140:	2200      	movs	r2, #0
 8021142:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8021144:	4b05      	ldr	r3, [pc, #20]	; (802115c <ip4_input+0x22c>)
 8021146:	2200      	movs	r2, #0
 8021148:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 802114a:	4b04      	ldr	r3, [pc, #16]	; (802115c <ip4_input+0x22c>)
 802114c:	2200      	movs	r2, #0
 802114e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8021150:	2300      	movs	r3, #0
}
 8021152:	4618      	mov	r0, r3
 8021154:	3718      	adds	r7, #24
 8021156:	46bd      	mov	sp, r7
 8021158:	bd80      	pop	{r7, pc}
 802115a:	bf00      	nop
 802115c:	20010768 	.word	0x20010768
 8021160:	20013d78 	.word	0x20013d78

08021164 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8021164:	b580      	push	{r7, lr}
 8021166:	b08a      	sub	sp, #40	; 0x28
 8021168:	af04      	add	r7, sp, #16
 802116a:	60f8      	str	r0, [r7, #12]
 802116c:	60b9      	str	r1, [r7, #8]
 802116e:	607a      	str	r2, [r7, #4]
 8021170:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8021172:	68bb      	ldr	r3, [r7, #8]
 8021174:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8021176:	687b      	ldr	r3, [r7, #4]
 8021178:	2b00      	cmp	r3, #0
 802117a:	d009      	beq.n	8021190 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 802117c:	68bb      	ldr	r3, [r7, #8]
 802117e:	2b00      	cmp	r3, #0
 8021180:	d003      	beq.n	802118a <ip4_output_if+0x26>
 8021182:	68bb      	ldr	r3, [r7, #8]
 8021184:	681b      	ldr	r3, [r3, #0]
 8021186:	2b00      	cmp	r3, #0
 8021188:	d102      	bne.n	8021190 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 802118a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802118c:	3304      	adds	r3, #4
 802118e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8021190:	78fa      	ldrb	r2, [r7, #3]
 8021192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021194:	9302      	str	r3, [sp, #8]
 8021196:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 802119a:	9301      	str	r3, [sp, #4]
 802119c:	f897 3020 	ldrb.w	r3, [r7, #32]
 80211a0:	9300      	str	r3, [sp, #0]
 80211a2:	4613      	mov	r3, r2
 80211a4:	687a      	ldr	r2, [r7, #4]
 80211a6:	6979      	ldr	r1, [r7, #20]
 80211a8:	68f8      	ldr	r0, [r7, #12]
 80211aa:	f000 f805 	bl	80211b8 <ip4_output_if_src>
 80211ae:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80211b0:	4618      	mov	r0, r3
 80211b2:	3718      	adds	r7, #24
 80211b4:	46bd      	mov	sp, r7
 80211b6:	bd80      	pop	{r7, pc}

080211b8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80211b8:	b580      	push	{r7, lr}
 80211ba:	b088      	sub	sp, #32
 80211bc:	af00      	add	r7, sp, #0
 80211be:	60f8      	str	r0, [r7, #12]
 80211c0:	60b9      	str	r1, [r7, #8]
 80211c2:	607a      	str	r2, [r7, #4]
 80211c4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80211c6:	68fb      	ldr	r3, [r7, #12]
 80211c8:	7b9b      	ldrb	r3, [r3, #14]
 80211ca:	2b01      	cmp	r3, #1
 80211cc:	d006      	beq.n	80211dc <ip4_output_if_src+0x24>
 80211ce:	4b52      	ldr	r3, [pc, #328]	; (8021318 <ip4_output_if_src+0x160>)
 80211d0:	f44f 7255 	mov.w	r2, #852	; 0x354
 80211d4:	4951      	ldr	r1, [pc, #324]	; (802131c <ip4_output_if_src+0x164>)
 80211d6:	4852      	ldr	r0, [pc, #328]	; (8021320 <ip4_output_if_src+0x168>)
 80211d8:	f001 f9e4 	bl	80225a4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80211dc:	687b      	ldr	r3, [r7, #4]
 80211de:	2b00      	cmp	r3, #0
 80211e0:	d060      	beq.n	80212a4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80211e2:	2314      	movs	r3, #20
 80211e4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80211e6:	2114      	movs	r1, #20
 80211e8:	68f8      	ldr	r0, [r7, #12]
 80211ea:	f7fd fc0d 	bl	801ea08 <pbuf_add_header>
 80211ee:	4603      	mov	r3, r0
 80211f0:	2b00      	cmp	r3, #0
 80211f2:	d002      	beq.n	80211fa <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80211f4:	f06f 0301 	mvn.w	r3, #1
 80211f8:	e089      	b.n	802130e <ip4_output_if_src+0x156>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80211fa:	68fb      	ldr	r3, [r7, #12]
 80211fc:	685b      	ldr	r3, [r3, #4]
 80211fe:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8021200:	68fb      	ldr	r3, [r7, #12]
 8021202:	895b      	ldrh	r3, [r3, #10]
 8021204:	2b13      	cmp	r3, #19
 8021206:	d806      	bhi.n	8021216 <ip4_output_if_src+0x5e>
 8021208:	4b43      	ldr	r3, [pc, #268]	; (8021318 <ip4_output_if_src+0x160>)
 802120a:	f44f 7262 	mov.w	r2, #904	; 0x388
 802120e:	4945      	ldr	r1, [pc, #276]	; (8021324 <ip4_output_if_src+0x16c>)
 8021210:	4843      	ldr	r0, [pc, #268]	; (8021320 <ip4_output_if_src+0x168>)
 8021212:	f001 f9c7 	bl	80225a4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8021216:	69fb      	ldr	r3, [r7, #28]
 8021218:	78fa      	ldrb	r2, [r7, #3]
 802121a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 802121c:	69fb      	ldr	r3, [r7, #28]
 802121e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8021222:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8021224:	687b      	ldr	r3, [r7, #4]
 8021226:	681a      	ldr	r2, [r3, #0]
 8021228:	69fb      	ldr	r3, [r7, #28]
 802122a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 802122c:	8b7b      	ldrh	r3, [r7, #26]
 802122e:	089b      	lsrs	r3, r3, #2
 8021230:	b29b      	uxth	r3, r3
 8021232:	b2db      	uxtb	r3, r3
 8021234:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021238:	b2da      	uxtb	r2, r3
 802123a:	69fb      	ldr	r3, [r7, #28]
 802123c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 802123e:	69fb      	ldr	r3, [r7, #28]
 8021240:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8021244:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8021246:	68fb      	ldr	r3, [r7, #12]
 8021248:	891b      	ldrh	r3, [r3, #8]
 802124a:	4618      	mov	r0, r3
 802124c:	f7fc f896 	bl	801d37c <lwip_htons>
 8021250:	4603      	mov	r3, r0
 8021252:	461a      	mov	r2, r3
 8021254:	69fb      	ldr	r3, [r7, #28]
 8021256:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8021258:	69fb      	ldr	r3, [r7, #28]
 802125a:	2200      	movs	r2, #0
 802125c:	719a      	strb	r2, [r3, #6]
 802125e:	2200      	movs	r2, #0
 8021260:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8021262:	4b31      	ldr	r3, [pc, #196]	; (8021328 <ip4_output_if_src+0x170>)
 8021264:	881b      	ldrh	r3, [r3, #0]
 8021266:	4618      	mov	r0, r3
 8021268:	f7fc f888 	bl	801d37c <lwip_htons>
 802126c:	4603      	mov	r3, r0
 802126e:	461a      	mov	r2, r3
 8021270:	69fb      	ldr	r3, [r7, #28]
 8021272:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8021274:	4b2c      	ldr	r3, [pc, #176]	; (8021328 <ip4_output_if_src+0x170>)
 8021276:	881b      	ldrh	r3, [r3, #0]
 8021278:	3301      	adds	r3, #1
 802127a:	b29a      	uxth	r2, r3
 802127c:	4b2a      	ldr	r3, [pc, #168]	; (8021328 <ip4_output_if_src+0x170>)
 802127e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8021280:	68bb      	ldr	r3, [r7, #8]
 8021282:	2b00      	cmp	r3, #0
 8021284:	d104      	bne.n	8021290 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8021286:	4b29      	ldr	r3, [pc, #164]	; (802132c <ip4_output_if_src+0x174>)
 8021288:	681a      	ldr	r2, [r3, #0]
 802128a:	69fb      	ldr	r3, [r7, #28]
 802128c:	60da      	str	r2, [r3, #12]
 802128e:	e003      	b.n	8021298 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8021290:	68bb      	ldr	r3, [r7, #8]
 8021292:	681a      	ldr	r2, [r3, #0]
 8021294:	69fb      	ldr	r3, [r7, #28]
 8021296:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8021298:	69fb      	ldr	r3, [r7, #28]
 802129a:	2200      	movs	r2, #0
 802129c:	729a      	strb	r2, [r3, #10]
 802129e:	2200      	movs	r2, #0
 80212a0:	72da      	strb	r2, [r3, #11]
 80212a2:	e00f      	b.n	80212c4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80212a4:	68fb      	ldr	r3, [r7, #12]
 80212a6:	895b      	ldrh	r3, [r3, #10]
 80212a8:	2b13      	cmp	r3, #19
 80212aa:	d802      	bhi.n	80212b2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80212ac:	f06f 0301 	mvn.w	r3, #1
 80212b0:	e02d      	b.n	802130e <ip4_output_if_src+0x156>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80212b2:	68fb      	ldr	r3, [r7, #12]
 80212b4:	685b      	ldr	r3, [r3, #4]
 80212b6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80212b8:	69fb      	ldr	r3, [r7, #28]
 80212ba:	691b      	ldr	r3, [r3, #16]
 80212bc:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80212be:	f107 0314 	add.w	r3, r7, #20
 80212c2:	607b      	str	r3, [r7, #4]

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: %c%c%"U16_F"\n", netif->name[0], netif->name[1], (u16_t)netif->num));
  ip4_debug_print(p);

#if ENABLE_LOOPBACK
  if (ip4_addr_cmp(dest, netif_ip4_addr(netif))
 80212c4:	687b      	ldr	r3, [r7, #4]
 80212c6:	681a      	ldr	r2, [r3, #0]
 80212c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80212ca:	3304      	adds	r3, #4
 80212cc:	681b      	ldr	r3, [r3, #0]
 80212ce:	429a      	cmp	r2, r3
 80212d0:	d105      	bne.n	80212de <ip4_output_if_src+0x126>
      || ip4_addr_isloopback(dest)
#endif /* !LWIP_HAVE_LOOPIF */
     ) {
    /* Packet to self, enqueue it for loopback */
    LWIP_DEBUGF(IP_DEBUG, ("netif_loop_output()"));
    return netif_loop_output(netif, p);
 80212d2:	68f9      	ldr	r1, [r7, #12]
 80212d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80212d6:	f7fd f86f 	bl	801e3b8 <netif_loop_output>
 80212da:	4603      	mov	r3, r0
 80212dc:	e017      	b.n	802130e <ip4_output_if_src+0x156>
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80212de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80212e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80212e2:	2b00      	cmp	r3, #0
 80212e4:	d00c      	beq.n	8021300 <ip4_output_if_src+0x148>
 80212e6:	68fb      	ldr	r3, [r7, #12]
 80212e8:	891a      	ldrh	r2, [r3, #8]
 80212ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80212ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80212ee:	429a      	cmp	r2, r3
 80212f0:	d906      	bls.n	8021300 <ip4_output_if_src+0x148>
    return ip4_frag(p, netif, dest);
 80212f2:	687a      	ldr	r2, [r7, #4]
 80212f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80212f6:	68f8      	ldr	r0, [r7, #12]
 80212f8:	f000 fde4 	bl	8021ec4 <ip4_frag>
 80212fc:	4603      	mov	r3, r0
 80212fe:	e006      	b.n	802130e <ip4_output_if_src+0x156>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8021300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021302:	695b      	ldr	r3, [r3, #20]
 8021304:	687a      	ldr	r2, [r7, #4]
 8021306:	68f9      	ldr	r1, [r7, #12]
 8021308:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802130a:	4798      	blx	r3
 802130c:	4603      	mov	r3, r0
}
 802130e:	4618      	mov	r0, r3
 8021310:	3720      	adds	r7, #32
 8021312:	46bd      	mov	sp, r7
 8021314:	bd80      	pop	{r7, pc}
 8021316:	bf00      	nop
 8021318:	080286cc 	.word	0x080286cc
 802131c:	08028740 	.word	0x08028740
 8021320:	0802874c 	.word	0x0802874c
 8021324:	08028774 	.word	0x08028774
 8021328:	20014282 	.word	0x20014282
 802132c:	08028f90 	.word	0x08028f90

08021330 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8021330:	b480      	push	{r7}
 8021332:	b085      	sub	sp, #20
 8021334:	af00      	add	r7, sp, #0
 8021336:	6078      	str	r0, [r7, #4]
 8021338:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 802133a:	687b      	ldr	r3, [r7, #4]
 802133c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 802133e:	687b      	ldr	r3, [r7, #4]
 8021340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021344:	d002      	beq.n	802134c <ip4_addr_isbroadcast_u32+0x1c>
 8021346:	687b      	ldr	r3, [r7, #4]
 8021348:	2b00      	cmp	r3, #0
 802134a:	d101      	bne.n	8021350 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 802134c:	2301      	movs	r3, #1
 802134e:	e02a      	b.n	80213a6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8021350:	683b      	ldr	r3, [r7, #0]
 8021352:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8021356:	f003 0302 	and.w	r3, r3, #2
 802135a:	2b00      	cmp	r3, #0
 802135c:	d101      	bne.n	8021362 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 802135e:	2300      	movs	r3, #0
 8021360:	e021      	b.n	80213a6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8021362:	683b      	ldr	r3, [r7, #0]
 8021364:	3304      	adds	r3, #4
 8021366:	681b      	ldr	r3, [r3, #0]
 8021368:	687a      	ldr	r2, [r7, #4]
 802136a:	429a      	cmp	r2, r3
 802136c:	d101      	bne.n	8021372 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 802136e:	2300      	movs	r3, #0
 8021370:	e019      	b.n	80213a6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8021372:	68fa      	ldr	r2, [r7, #12]
 8021374:	683b      	ldr	r3, [r7, #0]
 8021376:	3304      	adds	r3, #4
 8021378:	681b      	ldr	r3, [r3, #0]
 802137a:	405a      	eors	r2, r3
 802137c:	683b      	ldr	r3, [r7, #0]
 802137e:	3308      	adds	r3, #8
 8021380:	681b      	ldr	r3, [r3, #0]
 8021382:	4013      	ands	r3, r2
 8021384:	2b00      	cmp	r3, #0
 8021386:	d10d      	bne.n	80213a4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8021388:	683b      	ldr	r3, [r7, #0]
 802138a:	3308      	adds	r3, #8
 802138c:	681b      	ldr	r3, [r3, #0]
 802138e:	43da      	mvns	r2, r3
 8021390:	687b      	ldr	r3, [r7, #4]
 8021392:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8021394:	683b      	ldr	r3, [r7, #0]
 8021396:	3308      	adds	r3, #8
 8021398:	681b      	ldr	r3, [r3, #0]
 802139a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 802139c:	429a      	cmp	r2, r3
 802139e:	d101      	bne.n	80213a4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80213a0:	2301      	movs	r3, #1
 80213a2:	e000      	b.n	80213a6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80213a4:	2300      	movs	r3, #0
  }
}
 80213a6:	4618      	mov	r0, r3
 80213a8:	3714      	adds	r7, #20
 80213aa:	46bd      	mov	sp, r7
 80213ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80213b0:	4770      	bx	lr
	...

080213b4 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 80213b4:	b580      	push	{r7, lr}
 80213b6:	b082      	sub	sp, #8
 80213b8:	af00      	add	r7, sp, #0
 80213ba:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 80213bc:	2210      	movs	r2, #16
 80213be:	4904      	ldr	r1, [pc, #16]	; (80213d0 <ip4addr_ntoa+0x1c>)
 80213c0:	6878      	ldr	r0, [r7, #4]
 80213c2:	f000 f807 	bl	80213d4 <ip4addr_ntoa_r>
 80213c6:	4603      	mov	r3, r0
}
 80213c8:	4618      	mov	r0, r3
 80213ca:	3708      	adds	r7, #8
 80213cc:	46bd      	mov	sp, r7
 80213ce:	bd80      	pop	{r7, pc}
 80213d0:	20014284 	.word	0x20014284

080213d4 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 80213d4:	b480      	push	{r7}
 80213d6:	b08d      	sub	sp, #52	; 0x34
 80213d8:	af00      	add	r7, sp, #0
 80213da:	60f8      	str	r0, [r7, #12]
 80213dc:	60b9      	str	r1, [r7, #8]
 80213de:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 80213e0:	2300      	movs	r3, #0
 80213e2:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 80213e4:	68fb      	ldr	r3, [r7, #12]
 80213e6:	681b      	ldr	r3, [r3, #0]
 80213e8:	61bb      	str	r3, [r7, #24]

  rp = buf;
 80213ea:	68bb      	ldr	r3, [r7, #8]
 80213ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 80213ee:	f107 0318 	add.w	r3, r7, #24
 80213f2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 80213f4:	2300      	movs	r3, #0
 80213f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80213fa:	e058      	b.n	80214ae <ip4addr_ntoa_r+0xda>
    i = 0;
 80213fc:	2300      	movs	r3, #0
 80213fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 8021402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021404:	781a      	ldrb	r2, [r3, #0]
 8021406:	4b32      	ldr	r3, [pc, #200]	; (80214d0 <ip4addr_ntoa_r+0xfc>)
 8021408:	fba3 1302 	umull	r1, r3, r3, r2
 802140c:	08d9      	lsrs	r1, r3, #3
 802140e:	460b      	mov	r3, r1
 8021410:	009b      	lsls	r3, r3, #2
 8021412:	440b      	add	r3, r1
 8021414:	005b      	lsls	r3, r3, #1
 8021416:	1ad3      	subs	r3, r2, r3
 8021418:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 802141a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802141c:	781b      	ldrb	r3, [r3, #0]
 802141e:	4a2c      	ldr	r2, [pc, #176]	; (80214d0 <ip4addr_ntoa_r+0xfc>)
 8021420:	fba2 2303 	umull	r2, r3, r2, r3
 8021424:	08db      	lsrs	r3, r3, #3
 8021426:	b2da      	uxtb	r2, r3
 8021428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802142a:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 802142c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021430:	1c5a      	adds	r2, r3, #1
 8021432:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8021436:	4619      	mov	r1, r3
 8021438:	7ffb      	ldrb	r3, [r7, #31]
 802143a:	3330      	adds	r3, #48	; 0x30
 802143c:	b2da      	uxtb	r2, r3
 802143e:	f101 0330 	add.w	r3, r1, #48	; 0x30
 8021442:	443b      	add	r3, r7
 8021444:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8021448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802144a:	781b      	ldrb	r3, [r3, #0]
 802144c:	2b00      	cmp	r3, #0
 802144e:	d1d8      	bne.n	8021402 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8021450:	e011      	b.n	8021476 <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 8021452:	6a3b      	ldr	r3, [r7, #32]
 8021454:	1c5a      	adds	r2, r3, #1
 8021456:	623a      	str	r2, [r7, #32]
 8021458:	687a      	ldr	r2, [r7, #4]
 802145a:	429a      	cmp	r2, r3
 802145c:	dc01      	bgt.n	8021462 <ip4addr_ntoa_r+0x8e>
        return NULL;
 802145e:	2300      	movs	r3, #0
 8021460:	e030      	b.n	80214c4 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 8021462:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8021466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021468:	1c59      	adds	r1, r3, #1
 802146a:	62f9      	str	r1, [r7, #44]	; 0x2c
 802146c:	3230      	adds	r2, #48	; 0x30
 802146e:	443a      	add	r2, r7
 8021470:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8021474:	701a      	strb	r2, [r3, #0]
    while (i--) {
 8021476:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 802147a:	1e5a      	subs	r2, r3, #1
 802147c:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8021480:	2b00      	cmp	r3, #0
 8021482:	d1e6      	bne.n	8021452 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 8021484:	6a3b      	ldr	r3, [r7, #32]
 8021486:	1c5a      	adds	r2, r3, #1
 8021488:	623a      	str	r2, [r7, #32]
 802148a:	687a      	ldr	r2, [r7, #4]
 802148c:	429a      	cmp	r2, r3
 802148e:	dc01      	bgt.n	8021494 <ip4addr_ntoa_r+0xc0>
      return NULL;
 8021490:	2300      	movs	r3, #0
 8021492:	e017      	b.n	80214c4 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 8021494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021496:	1c5a      	adds	r2, r3, #1
 8021498:	62fa      	str	r2, [r7, #44]	; 0x2c
 802149a:	222e      	movs	r2, #46	; 0x2e
 802149c:	701a      	strb	r2, [r3, #0]
    ap++;
 802149e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80214a0:	3301      	adds	r3, #1
 80214a2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 80214a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80214a8:	3301      	adds	r3, #1
 80214aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80214ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80214b2:	2b03      	cmp	r3, #3
 80214b4:	d9a2      	bls.n	80213fc <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 80214b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80214b8:	3b01      	subs	r3, #1
 80214ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80214bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80214be:	2200      	movs	r2, #0
 80214c0:	701a      	strb	r2, [r3, #0]
  return buf;
 80214c2:	68bb      	ldr	r3, [r7, #8]
}
 80214c4:	4618      	mov	r0, r3
 80214c6:	3734      	adds	r7, #52	; 0x34
 80214c8:	46bd      	mov	sp, r7
 80214ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80214ce:	4770      	bx	lr
 80214d0:	cccccccd 	.word	0xcccccccd

080214d4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80214d4:	b580      	push	{r7, lr}
 80214d6:	b084      	sub	sp, #16
 80214d8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80214da:	2300      	movs	r3, #0
 80214dc:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80214de:	4b12      	ldr	r3, [pc, #72]	; (8021528 <ip_reass_tmr+0x54>)
 80214e0:	681b      	ldr	r3, [r3, #0]
 80214e2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80214e4:	e018      	b.n	8021518 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80214e6:	68fb      	ldr	r3, [r7, #12]
 80214e8:	7fdb      	ldrb	r3, [r3, #31]
 80214ea:	2b00      	cmp	r3, #0
 80214ec:	d00b      	beq.n	8021506 <ip_reass_tmr+0x32>
      r->timer--;
 80214ee:	68fb      	ldr	r3, [r7, #12]
 80214f0:	7fdb      	ldrb	r3, [r3, #31]
 80214f2:	3b01      	subs	r3, #1
 80214f4:	b2da      	uxtb	r2, r3
 80214f6:	68fb      	ldr	r3, [r7, #12]
 80214f8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80214fa:	68fb      	ldr	r3, [r7, #12]
 80214fc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80214fe:	68fb      	ldr	r3, [r7, #12]
 8021500:	681b      	ldr	r3, [r3, #0]
 8021502:	60fb      	str	r3, [r7, #12]
 8021504:	e008      	b.n	8021518 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8021506:	68fb      	ldr	r3, [r7, #12]
 8021508:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 802150a:	68fb      	ldr	r3, [r7, #12]
 802150c:	681b      	ldr	r3, [r3, #0]
 802150e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8021510:	68b9      	ldr	r1, [r7, #8]
 8021512:	6878      	ldr	r0, [r7, #4]
 8021514:	f000 f80a 	bl	802152c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8021518:	68fb      	ldr	r3, [r7, #12]
 802151a:	2b00      	cmp	r3, #0
 802151c:	d1e3      	bne.n	80214e6 <ip_reass_tmr+0x12>
    }
  }
}
 802151e:	bf00      	nop
 8021520:	bf00      	nop
 8021522:	3710      	adds	r7, #16
 8021524:	46bd      	mov	sp, r7
 8021526:	bd80      	pop	{r7, pc}
 8021528:	20014294 	.word	0x20014294

0802152c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 802152c:	b580      	push	{r7, lr}
 802152e:	b088      	sub	sp, #32
 8021530:	af00      	add	r7, sp, #0
 8021532:	6078      	str	r0, [r7, #4]
 8021534:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8021536:	2300      	movs	r3, #0
 8021538:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 802153a:	683a      	ldr	r2, [r7, #0]
 802153c:	687b      	ldr	r3, [r7, #4]
 802153e:	429a      	cmp	r2, r3
 8021540:	d105      	bne.n	802154e <ip_reass_free_complete_datagram+0x22>
 8021542:	4b45      	ldr	r3, [pc, #276]	; (8021658 <ip_reass_free_complete_datagram+0x12c>)
 8021544:	22ab      	movs	r2, #171	; 0xab
 8021546:	4945      	ldr	r1, [pc, #276]	; (802165c <ip_reass_free_complete_datagram+0x130>)
 8021548:	4845      	ldr	r0, [pc, #276]	; (8021660 <ip_reass_free_complete_datagram+0x134>)
 802154a:	f001 f82b 	bl	80225a4 <iprintf>
  if (prev != NULL) {
 802154e:	683b      	ldr	r3, [r7, #0]
 8021550:	2b00      	cmp	r3, #0
 8021552:	d00a      	beq.n	802156a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8021554:	683b      	ldr	r3, [r7, #0]
 8021556:	681b      	ldr	r3, [r3, #0]
 8021558:	687a      	ldr	r2, [r7, #4]
 802155a:	429a      	cmp	r2, r3
 802155c:	d005      	beq.n	802156a <ip_reass_free_complete_datagram+0x3e>
 802155e:	4b3e      	ldr	r3, [pc, #248]	; (8021658 <ip_reass_free_complete_datagram+0x12c>)
 8021560:	22ad      	movs	r2, #173	; 0xad
 8021562:	4940      	ldr	r1, [pc, #256]	; (8021664 <ip_reass_free_complete_datagram+0x138>)
 8021564:	483e      	ldr	r0, [pc, #248]	; (8021660 <ip_reass_free_complete_datagram+0x134>)
 8021566:	f001 f81d 	bl	80225a4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 802156a:	687b      	ldr	r3, [r7, #4]
 802156c:	685b      	ldr	r3, [r3, #4]
 802156e:	685b      	ldr	r3, [r3, #4]
 8021570:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8021572:	697b      	ldr	r3, [r7, #20]
 8021574:	889b      	ldrh	r3, [r3, #4]
 8021576:	b29b      	uxth	r3, r3
 8021578:	2b00      	cmp	r3, #0
 802157a:	d12a      	bne.n	80215d2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 802157c:	687b      	ldr	r3, [r7, #4]
 802157e:	685b      	ldr	r3, [r3, #4]
 8021580:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8021582:	697b      	ldr	r3, [r7, #20]
 8021584:	681a      	ldr	r2, [r3, #0]
 8021586:	687b      	ldr	r3, [r7, #4]
 8021588:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 802158a:	69bb      	ldr	r3, [r7, #24]
 802158c:	6858      	ldr	r0, [r3, #4]
 802158e:	687b      	ldr	r3, [r7, #4]
 8021590:	3308      	adds	r3, #8
 8021592:	2214      	movs	r2, #20
 8021594:	4619      	mov	r1, r3
 8021596:	f000 fef5 	bl	8022384 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 802159a:	2101      	movs	r1, #1
 802159c:	69b8      	ldr	r0, [r7, #24]
 802159e:	f7ff fbb3 	bl	8020d08 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80215a2:	69b8      	ldr	r0, [r7, #24]
 80215a4:	f7fd fb4e 	bl	801ec44 <pbuf_clen>
 80215a8:	4603      	mov	r3, r0
 80215aa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80215ac:	8bfa      	ldrh	r2, [r7, #30]
 80215ae:	8a7b      	ldrh	r3, [r7, #18]
 80215b0:	4413      	add	r3, r2
 80215b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80215b6:	db05      	blt.n	80215c4 <ip_reass_free_complete_datagram+0x98>
 80215b8:	4b27      	ldr	r3, [pc, #156]	; (8021658 <ip_reass_free_complete_datagram+0x12c>)
 80215ba:	22bc      	movs	r2, #188	; 0xbc
 80215bc:	492a      	ldr	r1, [pc, #168]	; (8021668 <ip_reass_free_complete_datagram+0x13c>)
 80215be:	4828      	ldr	r0, [pc, #160]	; (8021660 <ip_reass_free_complete_datagram+0x134>)
 80215c0:	f000 fff0 	bl	80225a4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80215c4:	8bfa      	ldrh	r2, [r7, #30]
 80215c6:	8a7b      	ldrh	r3, [r7, #18]
 80215c8:	4413      	add	r3, r2
 80215ca:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80215cc:	69b8      	ldr	r0, [r7, #24]
 80215ce:	f7fd fab1 	bl	801eb34 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80215d2:	687b      	ldr	r3, [r7, #4]
 80215d4:	685b      	ldr	r3, [r3, #4]
 80215d6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80215d8:	e01f      	b.n	802161a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80215da:	69bb      	ldr	r3, [r7, #24]
 80215dc:	685b      	ldr	r3, [r3, #4]
 80215de:	617b      	str	r3, [r7, #20]
    pcur = p;
 80215e0:	69bb      	ldr	r3, [r7, #24]
 80215e2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80215e4:	697b      	ldr	r3, [r7, #20]
 80215e6:	681b      	ldr	r3, [r3, #0]
 80215e8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80215ea:	68f8      	ldr	r0, [r7, #12]
 80215ec:	f7fd fb2a 	bl	801ec44 <pbuf_clen>
 80215f0:	4603      	mov	r3, r0
 80215f2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80215f4:	8bfa      	ldrh	r2, [r7, #30]
 80215f6:	8a7b      	ldrh	r3, [r7, #18]
 80215f8:	4413      	add	r3, r2
 80215fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80215fe:	db05      	blt.n	802160c <ip_reass_free_complete_datagram+0xe0>
 8021600:	4b15      	ldr	r3, [pc, #84]	; (8021658 <ip_reass_free_complete_datagram+0x12c>)
 8021602:	22cc      	movs	r2, #204	; 0xcc
 8021604:	4918      	ldr	r1, [pc, #96]	; (8021668 <ip_reass_free_complete_datagram+0x13c>)
 8021606:	4816      	ldr	r0, [pc, #88]	; (8021660 <ip_reass_free_complete_datagram+0x134>)
 8021608:	f000 ffcc 	bl	80225a4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 802160c:	8bfa      	ldrh	r2, [r7, #30]
 802160e:	8a7b      	ldrh	r3, [r7, #18]
 8021610:	4413      	add	r3, r2
 8021612:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8021614:	68f8      	ldr	r0, [r7, #12]
 8021616:	f7fd fa8d 	bl	801eb34 <pbuf_free>
  while (p != NULL) {
 802161a:	69bb      	ldr	r3, [r7, #24]
 802161c:	2b00      	cmp	r3, #0
 802161e:	d1dc      	bne.n	80215da <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8021620:	6839      	ldr	r1, [r7, #0]
 8021622:	6878      	ldr	r0, [r7, #4]
 8021624:	f000 f8c2 	bl	80217ac <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8021628:	4b10      	ldr	r3, [pc, #64]	; (802166c <ip_reass_free_complete_datagram+0x140>)
 802162a:	881b      	ldrh	r3, [r3, #0]
 802162c:	8bfa      	ldrh	r2, [r7, #30]
 802162e:	429a      	cmp	r2, r3
 8021630:	d905      	bls.n	802163e <ip_reass_free_complete_datagram+0x112>
 8021632:	4b09      	ldr	r3, [pc, #36]	; (8021658 <ip_reass_free_complete_datagram+0x12c>)
 8021634:	22d2      	movs	r2, #210	; 0xd2
 8021636:	490e      	ldr	r1, [pc, #56]	; (8021670 <ip_reass_free_complete_datagram+0x144>)
 8021638:	4809      	ldr	r0, [pc, #36]	; (8021660 <ip_reass_free_complete_datagram+0x134>)
 802163a:	f000 ffb3 	bl	80225a4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 802163e:	4b0b      	ldr	r3, [pc, #44]	; (802166c <ip_reass_free_complete_datagram+0x140>)
 8021640:	881a      	ldrh	r2, [r3, #0]
 8021642:	8bfb      	ldrh	r3, [r7, #30]
 8021644:	1ad3      	subs	r3, r2, r3
 8021646:	b29a      	uxth	r2, r3
 8021648:	4b08      	ldr	r3, [pc, #32]	; (802166c <ip_reass_free_complete_datagram+0x140>)
 802164a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 802164c:	8bfb      	ldrh	r3, [r7, #30]
}
 802164e:	4618      	mov	r0, r3
 8021650:	3720      	adds	r7, #32
 8021652:	46bd      	mov	sp, r7
 8021654:	bd80      	pop	{r7, pc}
 8021656:	bf00      	nop
 8021658:	080287a4 	.word	0x080287a4
 802165c:	0802881c 	.word	0x0802881c
 8021660:	08028828 	.word	0x08028828
 8021664:	08028850 	.word	0x08028850
 8021668:	08028864 	.word	0x08028864
 802166c:	20014298 	.word	0x20014298
 8021670:	08028884 	.word	0x08028884

08021674 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8021674:	b580      	push	{r7, lr}
 8021676:	b08a      	sub	sp, #40	; 0x28
 8021678:	af00      	add	r7, sp, #0
 802167a:	6078      	str	r0, [r7, #4]
 802167c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 802167e:	2300      	movs	r3, #0
 8021680:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8021682:	2300      	movs	r3, #0
 8021684:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8021686:	2300      	movs	r3, #0
 8021688:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 802168a:	2300      	movs	r3, #0
 802168c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 802168e:	2300      	movs	r3, #0
 8021690:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8021692:	4b28      	ldr	r3, [pc, #160]	; (8021734 <ip_reass_remove_oldest_datagram+0xc0>)
 8021694:	681b      	ldr	r3, [r3, #0]
 8021696:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8021698:	e030      	b.n	80216fc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 802169a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802169c:	695a      	ldr	r2, [r3, #20]
 802169e:	687b      	ldr	r3, [r7, #4]
 80216a0:	68db      	ldr	r3, [r3, #12]
 80216a2:	429a      	cmp	r2, r3
 80216a4:	d10c      	bne.n	80216c0 <ip_reass_remove_oldest_datagram+0x4c>
 80216a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80216a8:	699a      	ldr	r2, [r3, #24]
 80216aa:	687b      	ldr	r3, [r7, #4]
 80216ac:	691b      	ldr	r3, [r3, #16]
 80216ae:	429a      	cmp	r2, r3
 80216b0:	d106      	bne.n	80216c0 <ip_reass_remove_oldest_datagram+0x4c>
 80216b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80216b4:	899a      	ldrh	r2, [r3, #12]
 80216b6:	687b      	ldr	r3, [r7, #4]
 80216b8:	889b      	ldrh	r3, [r3, #4]
 80216ba:	b29b      	uxth	r3, r3
 80216bc:	429a      	cmp	r2, r3
 80216be:	d014      	beq.n	80216ea <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80216c0:	693b      	ldr	r3, [r7, #16]
 80216c2:	3301      	adds	r3, #1
 80216c4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80216c6:	6a3b      	ldr	r3, [r7, #32]
 80216c8:	2b00      	cmp	r3, #0
 80216ca:	d104      	bne.n	80216d6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80216cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80216ce:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80216d0:	69fb      	ldr	r3, [r7, #28]
 80216d2:	61bb      	str	r3, [r7, #24]
 80216d4:	e009      	b.n	80216ea <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80216d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80216d8:	7fda      	ldrb	r2, [r3, #31]
 80216da:	6a3b      	ldr	r3, [r7, #32]
 80216dc:	7fdb      	ldrb	r3, [r3, #31]
 80216de:	429a      	cmp	r2, r3
 80216e0:	d803      	bhi.n	80216ea <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80216e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80216e4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80216e6:	69fb      	ldr	r3, [r7, #28]
 80216e8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80216ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80216ec:	681b      	ldr	r3, [r3, #0]
 80216ee:	2b00      	cmp	r3, #0
 80216f0:	d001      	beq.n	80216f6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80216f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80216f4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80216f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80216f8:	681b      	ldr	r3, [r3, #0]
 80216fa:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80216fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80216fe:	2b00      	cmp	r3, #0
 8021700:	d1cb      	bne.n	802169a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8021702:	6a3b      	ldr	r3, [r7, #32]
 8021704:	2b00      	cmp	r3, #0
 8021706:	d008      	beq.n	802171a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8021708:	69b9      	ldr	r1, [r7, #24]
 802170a:	6a38      	ldr	r0, [r7, #32]
 802170c:	f7ff ff0e 	bl	802152c <ip_reass_free_complete_datagram>
 8021710:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8021712:	697a      	ldr	r2, [r7, #20]
 8021714:	68fb      	ldr	r3, [r7, #12]
 8021716:	4413      	add	r3, r2
 8021718:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 802171a:	697a      	ldr	r2, [r7, #20]
 802171c:	683b      	ldr	r3, [r7, #0]
 802171e:	429a      	cmp	r2, r3
 8021720:	da02      	bge.n	8021728 <ip_reass_remove_oldest_datagram+0xb4>
 8021722:	693b      	ldr	r3, [r7, #16]
 8021724:	2b01      	cmp	r3, #1
 8021726:	dcac      	bgt.n	8021682 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8021728:	697b      	ldr	r3, [r7, #20]
}
 802172a:	4618      	mov	r0, r3
 802172c:	3728      	adds	r7, #40	; 0x28
 802172e:	46bd      	mov	sp, r7
 8021730:	bd80      	pop	{r7, pc}
 8021732:	bf00      	nop
 8021734:	20014294 	.word	0x20014294

08021738 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8021738:	b580      	push	{r7, lr}
 802173a:	b084      	sub	sp, #16
 802173c:	af00      	add	r7, sp, #0
 802173e:	6078      	str	r0, [r7, #4]
 8021740:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8021742:	2001      	movs	r0, #1
 8021744:	f7fc fa76 	bl	801dc34 <memp_malloc>
 8021748:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 802174a:	68fb      	ldr	r3, [r7, #12]
 802174c:	2b00      	cmp	r3, #0
 802174e:	d110      	bne.n	8021772 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8021750:	6839      	ldr	r1, [r7, #0]
 8021752:	6878      	ldr	r0, [r7, #4]
 8021754:	f7ff ff8e 	bl	8021674 <ip_reass_remove_oldest_datagram>
 8021758:	4602      	mov	r2, r0
 802175a:	683b      	ldr	r3, [r7, #0]
 802175c:	4293      	cmp	r3, r2
 802175e:	dc03      	bgt.n	8021768 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8021760:	2001      	movs	r0, #1
 8021762:	f7fc fa67 	bl	801dc34 <memp_malloc>
 8021766:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8021768:	68fb      	ldr	r3, [r7, #12]
 802176a:	2b00      	cmp	r3, #0
 802176c:	d101      	bne.n	8021772 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 802176e:	2300      	movs	r3, #0
 8021770:	e016      	b.n	80217a0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8021772:	2220      	movs	r2, #32
 8021774:	2100      	movs	r1, #0
 8021776:	68f8      	ldr	r0, [r7, #12]
 8021778:	f000 fe2c 	bl	80223d4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 802177c:	68fb      	ldr	r3, [r7, #12]
 802177e:	220f      	movs	r2, #15
 8021780:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8021782:	4b09      	ldr	r3, [pc, #36]	; (80217a8 <ip_reass_enqueue_new_datagram+0x70>)
 8021784:	681a      	ldr	r2, [r3, #0]
 8021786:	68fb      	ldr	r3, [r7, #12]
 8021788:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 802178a:	4a07      	ldr	r2, [pc, #28]	; (80217a8 <ip_reass_enqueue_new_datagram+0x70>)
 802178c:	68fb      	ldr	r3, [r7, #12]
 802178e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8021790:	68fb      	ldr	r3, [r7, #12]
 8021792:	3308      	adds	r3, #8
 8021794:	2214      	movs	r2, #20
 8021796:	6879      	ldr	r1, [r7, #4]
 8021798:	4618      	mov	r0, r3
 802179a:	f000 fdf3 	bl	8022384 <memcpy>
  return ipr;
 802179e:	68fb      	ldr	r3, [r7, #12]
}
 80217a0:	4618      	mov	r0, r3
 80217a2:	3710      	adds	r7, #16
 80217a4:	46bd      	mov	sp, r7
 80217a6:	bd80      	pop	{r7, pc}
 80217a8:	20014294 	.word	0x20014294

080217ac <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80217ac:	b580      	push	{r7, lr}
 80217ae:	b082      	sub	sp, #8
 80217b0:	af00      	add	r7, sp, #0
 80217b2:	6078      	str	r0, [r7, #4]
 80217b4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80217b6:	4b10      	ldr	r3, [pc, #64]	; (80217f8 <ip_reass_dequeue_datagram+0x4c>)
 80217b8:	681b      	ldr	r3, [r3, #0]
 80217ba:	687a      	ldr	r2, [r7, #4]
 80217bc:	429a      	cmp	r2, r3
 80217be:	d104      	bne.n	80217ca <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80217c0:	687b      	ldr	r3, [r7, #4]
 80217c2:	681b      	ldr	r3, [r3, #0]
 80217c4:	4a0c      	ldr	r2, [pc, #48]	; (80217f8 <ip_reass_dequeue_datagram+0x4c>)
 80217c6:	6013      	str	r3, [r2, #0]
 80217c8:	e00d      	b.n	80217e6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80217ca:	683b      	ldr	r3, [r7, #0]
 80217cc:	2b00      	cmp	r3, #0
 80217ce:	d106      	bne.n	80217de <ip_reass_dequeue_datagram+0x32>
 80217d0:	4b0a      	ldr	r3, [pc, #40]	; (80217fc <ip_reass_dequeue_datagram+0x50>)
 80217d2:	f240 1245 	movw	r2, #325	; 0x145
 80217d6:	490a      	ldr	r1, [pc, #40]	; (8021800 <ip_reass_dequeue_datagram+0x54>)
 80217d8:	480a      	ldr	r0, [pc, #40]	; (8021804 <ip_reass_dequeue_datagram+0x58>)
 80217da:	f000 fee3 	bl	80225a4 <iprintf>
    prev->next = ipr->next;
 80217de:	687b      	ldr	r3, [r7, #4]
 80217e0:	681a      	ldr	r2, [r3, #0]
 80217e2:	683b      	ldr	r3, [r7, #0]
 80217e4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80217e6:	6879      	ldr	r1, [r7, #4]
 80217e8:	2001      	movs	r0, #1
 80217ea:	f7fc fa93 	bl	801dd14 <memp_free>
}
 80217ee:	bf00      	nop
 80217f0:	3708      	adds	r7, #8
 80217f2:	46bd      	mov	sp, r7
 80217f4:	bd80      	pop	{r7, pc}
 80217f6:	bf00      	nop
 80217f8:	20014294 	.word	0x20014294
 80217fc:	080287a4 	.word	0x080287a4
 8021800:	080288a8 	.word	0x080288a8
 8021804:	08028828 	.word	0x08028828

08021808 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8021808:	b580      	push	{r7, lr}
 802180a:	b08c      	sub	sp, #48	; 0x30
 802180c:	af00      	add	r7, sp, #0
 802180e:	60f8      	str	r0, [r7, #12]
 8021810:	60b9      	str	r1, [r7, #8]
 8021812:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8021814:	2300      	movs	r3, #0
 8021816:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8021818:	2301      	movs	r3, #1
 802181a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 802181c:	68bb      	ldr	r3, [r7, #8]
 802181e:	685b      	ldr	r3, [r3, #4]
 8021820:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8021822:	69fb      	ldr	r3, [r7, #28]
 8021824:	885b      	ldrh	r3, [r3, #2]
 8021826:	b29b      	uxth	r3, r3
 8021828:	4618      	mov	r0, r3
 802182a:	f7fb fda7 	bl	801d37c <lwip_htons>
 802182e:	4603      	mov	r3, r0
 8021830:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8021832:	69fb      	ldr	r3, [r7, #28]
 8021834:	781b      	ldrb	r3, [r3, #0]
 8021836:	f003 030f 	and.w	r3, r3, #15
 802183a:	b2db      	uxtb	r3, r3
 802183c:	009b      	lsls	r3, r3, #2
 802183e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8021840:	7e7b      	ldrb	r3, [r7, #25]
 8021842:	b29b      	uxth	r3, r3
 8021844:	8b7a      	ldrh	r2, [r7, #26]
 8021846:	429a      	cmp	r2, r3
 8021848:	d202      	bcs.n	8021850 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 802184a:	f04f 33ff 	mov.w	r3, #4294967295
 802184e:	e135      	b.n	8021abc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8021850:	7e7b      	ldrb	r3, [r7, #25]
 8021852:	b29b      	uxth	r3, r3
 8021854:	8b7a      	ldrh	r2, [r7, #26]
 8021856:	1ad3      	subs	r3, r2, r3
 8021858:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 802185a:	69fb      	ldr	r3, [r7, #28]
 802185c:	88db      	ldrh	r3, [r3, #6]
 802185e:	b29b      	uxth	r3, r3
 8021860:	4618      	mov	r0, r3
 8021862:	f7fb fd8b 	bl	801d37c <lwip_htons>
 8021866:	4603      	mov	r3, r0
 8021868:	f3c3 030c 	ubfx	r3, r3, #0, #13
 802186c:	b29b      	uxth	r3, r3
 802186e:	00db      	lsls	r3, r3, #3
 8021870:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8021872:	68bb      	ldr	r3, [r7, #8]
 8021874:	685b      	ldr	r3, [r3, #4]
 8021876:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8021878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802187a:	2200      	movs	r2, #0
 802187c:	701a      	strb	r2, [r3, #0]
 802187e:	2200      	movs	r2, #0
 8021880:	705a      	strb	r2, [r3, #1]
 8021882:	2200      	movs	r2, #0
 8021884:	709a      	strb	r2, [r3, #2]
 8021886:	2200      	movs	r2, #0
 8021888:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 802188a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802188c:	8afa      	ldrh	r2, [r7, #22]
 802188e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8021890:	8afa      	ldrh	r2, [r7, #22]
 8021892:	8b7b      	ldrh	r3, [r7, #26]
 8021894:	4413      	add	r3, r2
 8021896:	b29a      	uxth	r2, r3
 8021898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802189a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 802189c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802189e:	88db      	ldrh	r3, [r3, #6]
 80218a0:	b29b      	uxth	r3, r3
 80218a2:	8afa      	ldrh	r2, [r7, #22]
 80218a4:	429a      	cmp	r2, r3
 80218a6:	d902      	bls.n	80218ae <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80218a8:	f04f 33ff 	mov.w	r3, #4294967295
 80218ac:	e106      	b.n	8021abc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80218ae:	68fb      	ldr	r3, [r7, #12]
 80218b0:	685b      	ldr	r3, [r3, #4]
 80218b2:	627b      	str	r3, [r7, #36]	; 0x24
 80218b4:	e068      	b.n	8021988 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80218b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80218b8:	685b      	ldr	r3, [r3, #4]
 80218ba:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80218bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80218be:	889b      	ldrh	r3, [r3, #4]
 80218c0:	b29a      	uxth	r2, r3
 80218c2:	693b      	ldr	r3, [r7, #16]
 80218c4:	889b      	ldrh	r3, [r3, #4]
 80218c6:	b29b      	uxth	r3, r3
 80218c8:	429a      	cmp	r2, r3
 80218ca:	d235      	bcs.n	8021938 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80218cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80218ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80218d0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80218d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80218d4:	2b00      	cmp	r3, #0
 80218d6:	d020      	beq.n	802191a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80218d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80218da:	889b      	ldrh	r3, [r3, #4]
 80218dc:	b29a      	uxth	r2, r3
 80218de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80218e0:	88db      	ldrh	r3, [r3, #6]
 80218e2:	b29b      	uxth	r3, r3
 80218e4:	429a      	cmp	r2, r3
 80218e6:	d307      	bcc.n	80218f8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80218e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80218ea:	88db      	ldrh	r3, [r3, #6]
 80218ec:	b29a      	uxth	r2, r3
 80218ee:	693b      	ldr	r3, [r7, #16]
 80218f0:	889b      	ldrh	r3, [r3, #4]
 80218f2:	b29b      	uxth	r3, r3
 80218f4:	429a      	cmp	r2, r3
 80218f6:	d902      	bls.n	80218fe <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80218f8:	f04f 33ff 	mov.w	r3, #4294967295
 80218fc:	e0de      	b.n	8021abc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80218fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021900:	68ba      	ldr	r2, [r7, #8]
 8021902:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8021904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021906:	88db      	ldrh	r3, [r3, #6]
 8021908:	b29a      	uxth	r2, r3
 802190a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802190c:	889b      	ldrh	r3, [r3, #4]
 802190e:	b29b      	uxth	r3, r3
 8021910:	429a      	cmp	r2, r3
 8021912:	d03d      	beq.n	8021990 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8021914:	2300      	movs	r3, #0
 8021916:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8021918:	e03a      	b.n	8021990 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 802191a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802191c:	88db      	ldrh	r3, [r3, #6]
 802191e:	b29a      	uxth	r2, r3
 8021920:	693b      	ldr	r3, [r7, #16]
 8021922:	889b      	ldrh	r3, [r3, #4]
 8021924:	b29b      	uxth	r3, r3
 8021926:	429a      	cmp	r2, r3
 8021928:	d902      	bls.n	8021930 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 802192a:	f04f 33ff 	mov.w	r3, #4294967295
 802192e:	e0c5      	b.n	8021abc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8021930:	68fb      	ldr	r3, [r7, #12]
 8021932:	68ba      	ldr	r2, [r7, #8]
 8021934:	605a      	str	r2, [r3, #4]
      break;
 8021936:	e02b      	b.n	8021990 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8021938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802193a:	889b      	ldrh	r3, [r3, #4]
 802193c:	b29a      	uxth	r2, r3
 802193e:	693b      	ldr	r3, [r7, #16]
 8021940:	889b      	ldrh	r3, [r3, #4]
 8021942:	b29b      	uxth	r3, r3
 8021944:	429a      	cmp	r2, r3
 8021946:	d102      	bne.n	802194e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8021948:	f04f 33ff 	mov.w	r3, #4294967295
 802194c:	e0b6      	b.n	8021abc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 802194e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021950:	889b      	ldrh	r3, [r3, #4]
 8021952:	b29a      	uxth	r2, r3
 8021954:	693b      	ldr	r3, [r7, #16]
 8021956:	88db      	ldrh	r3, [r3, #6]
 8021958:	b29b      	uxth	r3, r3
 802195a:	429a      	cmp	r2, r3
 802195c:	d202      	bcs.n	8021964 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 802195e:	f04f 33ff 	mov.w	r3, #4294967295
 8021962:	e0ab      	b.n	8021abc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8021964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021966:	2b00      	cmp	r3, #0
 8021968:	d009      	beq.n	802197e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 802196a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802196c:	88db      	ldrh	r3, [r3, #6]
 802196e:	b29a      	uxth	r2, r3
 8021970:	693b      	ldr	r3, [r7, #16]
 8021972:	889b      	ldrh	r3, [r3, #4]
 8021974:	b29b      	uxth	r3, r3
 8021976:	429a      	cmp	r2, r3
 8021978:	d001      	beq.n	802197e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 802197a:	2300      	movs	r3, #0
 802197c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 802197e:	693b      	ldr	r3, [r7, #16]
 8021980:	681b      	ldr	r3, [r3, #0]
 8021982:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8021984:	693b      	ldr	r3, [r7, #16]
 8021986:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8021988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802198a:	2b00      	cmp	r3, #0
 802198c:	d193      	bne.n	80218b6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 802198e:	e000      	b.n	8021992 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8021990:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8021992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021994:	2b00      	cmp	r3, #0
 8021996:	d12d      	bne.n	80219f4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8021998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802199a:	2b00      	cmp	r3, #0
 802199c:	d01c      	beq.n	80219d8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 802199e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80219a0:	88db      	ldrh	r3, [r3, #6]
 80219a2:	b29a      	uxth	r2, r3
 80219a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80219a6:	889b      	ldrh	r3, [r3, #4]
 80219a8:	b29b      	uxth	r3, r3
 80219aa:	429a      	cmp	r2, r3
 80219ac:	d906      	bls.n	80219bc <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80219ae:	4b45      	ldr	r3, [pc, #276]	; (8021ac4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80219b0:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80219b4:	4944      	ldr	r1, [pc, #272]	; (8021ac8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80219b6:	4845      	ldr	r0, [pc, #276]	; (8021acc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80219b8:	f000 fdf4 	bl	80225a4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80219bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80219be:	68ba      	ldr	r2, [r7, #8]
 80219c0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80219c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80219c4:	88db      	ldrh	r3, [r3, #6]
 80219c6:	b29a      	uxth	r2, r3
 80219c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80219ca:	889b      	ldrh	r3, [r3, #4]
 80219cc:	b29b      	uxth	r3, r3
 80219ce:	429a      	cmp	r2, r3
 80219d0:	d010      	beq.n	80219f4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80219d2:	2300      	movs	r3, #0
 80219d4:	623b      	str	r3, [r7, #32]
 80219d6:	e00d      	b.n	80219f4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80219d8:	68fb      	ldr	r3, [r7, #12]
 80219da:	685b      	ldr	r3, [r3, #4]
 80219dc:	2b00      	cmp	r3, #0
 80219de:	d006      	beq.n	80219ee <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80219e0:	4b38      	ldr	r3, [pc, #224]	; (8021ac4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80219e2:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80219e6:	493a      	ldr	r1, [pc, #232]	; (8021ad0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80219e8:	4838      	ldr	r0, [pc, #224]	; (8021acc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80219ea:	f000 fddb 	bl	80225a4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80219ee:	68fb      	ldr	r3, [r7, #12]
 80219f0:	68ba      	ldr	r2, [r7, #8]
 80219f2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80219f4:	687b      	ldr	r3, [r7, #4]
 80219f6:	2b00      	cmp	r3, #0
 80219f8:	d105      	bne.n	8021a06 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80219fa:	68fb      	ldr	r3, [r7, #12]
 80219fc:	7f9b      	ldrb	r3, [r3, #30]
 80219fe:	f003 0301 	and.w	r3, r3, #1
 8021a02:	2b00      	cmp	r3, #0
 8021a04:	d059      	beq.n	8021aba <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8021a06:	6a3b      	ldr	r3, [r7, #32]
 8021a08:	2b00      	cmp	r3, #0
 8021a0a:	d04f      	beq.n	8021aac <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8021a0c:	68fb      	ldr	r3, [r7, #12]
 8021a0e:	685b      	ldr	r3, [r3, #4]
 8021a10:	2b00      	cmp	r3, #0
 8021a12:	d006      	beq.n	8021a22 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8021a14:	68fb      	ldr	r3, [r7, #12]
 8021a16:	685b      	ldr	r3, [r3, #4]
 8021a18:	685b      	ldr	r3, [r3, #4]
 8021a1a:	889b      	ldrh	r3, [r3, #4]
 8021a1c:	b29b      	uxth	r3, r3
 8021a1e:	2b00      	cmp	r3, #0
 8021a20:	d002      	beq.n	8021a28 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8021a22:	2300      	movs	r3, #0
 8021a24:	623b      	str	r3, [r7, #32]
 8021a26:	e041      	b.n	8021aac <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8021a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021a2a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8021a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021a2e:	681b      	ldr	r3, [r3, #0]
 8021a30:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8021a32:	e012      	b.n	8021a5a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8021a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021a36:	685b      	ldr	r3, [r3, #4]
 8021a38:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8021a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021a3c:	88db      	ldrh	r3, [r3, #6]
 8021a3e:	b29a      	uxth	r2, r3
 8021a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021a42:	889b      	ldrh	r3, [r3, #4]
 8021a44:	b29b      	uxth	r3, r3
 8021a46:	429a      	cmp	r2, r3
 8021a48:	d002      	beq.n	8021a50 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8021a4a:	2300      	movs	r3, #0
 8021a4c:	623b      	str	r3, [r7, #32]
            break;
 8021a4e:	e007      	b.n	8021a60 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8021a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021a52:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8021a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021a56:	681b      	ldr	r3, [r3, #0]
 8021a58:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8021a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021a5c:	2b00      	cmp	r3, #0
 8021a5e:	d1e9      	bne.n	8021a34 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8021a60:	6a3b      	ldr	r3, [r7, #32]
 8021a62:	2b00      	cmp	r3, #0
 8021a64:	d022      	beq.n	8021aac <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8021a66:	68fb      	ldr	r3, [r7, #12]
 8021a68:	685b      	ldr	r3, [r3, #4]
 8021a6a:	2b00      	cmp	r3, #0
 8021a6c:	d106      	bne.n	8021a7c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8021a6e:	4b15      	ldr	r3, [pc, #84]	; (8021ac4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8021a70:	f240 12df 	movw	r2, #479	; 0x1df
 8021a74:	4917      	ldr	r1, [pc, #92]	; (8021ad4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8021a76:	4815      	ldr	r0, [pc, #84]	; (8021acc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8021a78:	f000 fd94 	bl	80225a4 <iprintf>
          LWIP_ASSERT("sanity check",
 8021a7c:	68fb      	ldr	r3, [r7, #12]
 8021a7e:	685b      	ldr	r3, [r3, #4]
 8021a80:	685b      	ldr	r3, [r3, #4]
 8021a82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8021a84:	429a      	cmp	r2, r3
 8021a86:	d106      	bne.n	8021a96 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8021a88:	4b0e      	ldr	r3, [pc, #56]	; (8021ac4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8021a8a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8021a8e:	4911      	ldr	r1, [pc, #68]	; (8021ad4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8021a90:	480e      	ldr	r0, [pc, #56]	; (8021acc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8021a92:	f000 fd87 	bl	80225a4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8021a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021a98:	681b      	ldr	r3, [r3, #0]
 8021a9a:	2b00      	cmp	r3, #0
 8021a9c:	d006      	beq.n	8021aac <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8021a9e:	4b09      	ldr	r3, [pc, #36]	; (8021ac4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8021aa0:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8021aa4:	490c      	ldr	r1, [pc, #48]	; (8021ad8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8021aa6:	4809      	ldr	r0, [pc, #36]	; (8021acc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8021aa8:	f000 fd7c 	bl	80225a4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8021aac:	6a3b      	ldr	r3, [r7, #32]
 8021aae:	2b00      	cmp	r3, #0
 8021ab0:	bf14      	ite	ne
 8021ab2:	2301      	movne	r3, #1
 8021ab4:	2300      	moveq	r3, #0
 8021ab6:	b2db      	uxtb	r3, r3
 8021ab8:	e000      	b.n	8021abc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8021aba:	2300      	movs	r3, #0
}
 8021abc:	4618      	mov	r0, r3
 8021abe:	3730      	adds	r7, #48	; 0x30
 8021ac0:	46bd      	mov	sp, r7
 8021ac2:	bd80      	pop	{r7, pc}
 8021ac4:	080287a4 	.word	0x080287a4
 8021ac8:	080288c4 	.word	0x080288c4
 8021acc:	08028828 	.word	0x08028828
 8021ad0:	080288e4 	.word	0x080288e4
 8021ad4:	0802891c 	.word	0x0802891c
 8021ad8:	0802892c 	.word	0x0802892c

08021adc <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8021adc:	b580      	push	{r7, lr}
 8021ade:	b08e      	sub	sp, #56	; 0x38
 8021ae0:	af00      	add	r7, sp, #0
 8021ae2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8021ae4:	687b      	ldr	r3, [r7, #4]
 8021ae6:	685b      	ldr	r3, [r3, #4]
 8021ae8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8021aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021aec:	781b      	ldrb	r3, [r3, #0]
 8021aee:	f003 030f 	and.w	r3, r3, #15
 8021af2:	b2db      	uxtb	r3, r3
 8021af4:	009b      	lsls	r3, r3, #2
 8021af6:	b2db      	uxtb	r3, r3
 8021af8:	2b14      	cmp	r3, #20
 8021afa:	f040 8171 	bne.w	8021de0 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8021afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021b00:	88db      	ldrh	r3, [r3, #6]
 8021b02:	b29b      	uxth	r3, r3
 8021b04:	4618      	mov	r0, r3
 8021b06:	f7fb fc39 	bl	801d37c <lwip_htons>
 8021b0a:	4603      	mov	r3, r0
 8021b0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8021b10:	b29b      	uxth	r3, r3
 8021b12:	00db      	lsls	r3, r3, #3
 8021b14:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8021b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021b18:	885b      	ldrh	r3, [r3, #2]
 8021b1a:	b29b      	uxth	r3, r3
 8021b1c:	4618      	mov	r0, r3
 8021b1e:	f7fb fc2d 	bl	801d37c <lwip_htons>
 8021b22:	4603      	mov	r3, r0
 8021b24:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8021b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021b28:	781b      	ldrb	r3, [r3, #0]
 8021b2a:	f003 030f 	and.w	r3, r3, #15
 8021b2e:	b2db      	uxtb	r3, r3
 8021b30:	009b      	lsls	r3, r3, #2
 8021b32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8021b36:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8021b3a:	b29b      	uxth	r3, r3
 8021b3c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8021b3e:	429a      	cmp	r2, r3
 8021b40:	f0c0 8150 	bcc.w	8021de4 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8021b44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8021b48:	b29b      	uxth	r3, r3
 8021b4a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8021b4c:	1ad3      	subs	r3, r2, r3
 8021b4e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8021b50:	6878      	ldr	r0, [r7, #4]
 8021b52:	f7fd f877 	bl	801ec44 <pbuf_clen>
 8021b56:	4603      	mov	r3, r0
 8021b58:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8021b5a:	4b8c      	ldr	r3, [pc, #560]	; (8021d8c <ip4_reass+0x2b0>)
 8021b5c:	881b      	ldrh	r3, [r3, #0]
 8021b5e:	461a      	mov	r2, r3
 8021b60:	8c3b      	ldrh	r3, [r7, #32]
 8021b62:	4413      	add	r3, r2
 8021b64:	2b0a      	cmp	r3, #10
 8021b66:	dd10      	ble.n	8021b8a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8021b68:	8c3b      	ldrh	r3, [r7, #32]
 8021b6a:	4619      	mov	r1, r3
 8021b6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8021b6e:	f7ff fd81 	bl	8021674 <ip_reass_remove_oldest_datagram>
 8021b72:	4603      	mov	r3, r0
 8021b74:	2b00      	cmp	r3, #0
 8021b76:	f000 8137 	beq.w	8021de8 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8021b7a:	4b84      	ldr	r3, [pc, #528]	; (8021d8c <ip4_reass+0x2b0>)
 8021b7c:	881b      	ldrh	r3, [r3, #0]
 8021b7e:	461a      	mov	r2, r3
 8021b80:	8c3b      	ldrh	r3, [r7, #32]
 8021b82:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8021b84:	2b0a      	cmp	r3, #10
 8021b86:	f300 812f 	bgt.w	8021de8 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8021b8a:	4b81      	ldr	r3, [pc, #516]	; (8021d90 <ip4_reass+0x2b4>)
 8021b8c:	681b      	ldr	r3, [r3, #0]
 8021b8e:	633b      	str	r3, [r7, #48]	; 0x30
 8021b90:	e015      	b.n	8021bbe <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8021b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021b94:	695a      	ldr	r2, [r3, #20]
 8021b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021b98:	68db      	ldr	r3, [r3, #12]
 8021b9a:	429a      	cmp	r2, r3
 8021b9c:	d10c      	bne.n	8021bb8 <ip4_reass+0xdc>
 8021b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021ba0:	699a      	ldr	r2, [r3, #24]
 8021ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021ba4:	691b      	ldr	r3, [r3, #16]
 8021ba6:	429a      	cmp	r2, r3
 8021ba8:	d106      	bne.n	8021bb8 <ip4_reass+0xdc>
 8021baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021bac:	899a      	ldrh	r2, [r3, #12]
 8021bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021bb0:	889b      	ldrh	r3, [r3, #4]
 8021bb2:	b29b      	uxth	r3, r3
 8021bb4:	429a      	cmp	r2, r3
 8021bb6:	d006      	beq.n	8021bc6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8021bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021bba:	681b      	ldr	r3, [r3, #0]
 8021bbc:	633b      	str	r3, [r7, #48]	; 0x30
 8021bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021bc0:	2b00      	cmp	r3, #0
 8021bc2:	d1e6      	bne.n	8021b92 <ip4_reass+0xb6>
 8021bc4:	e000      	b.n	8021bc8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8021bc6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8021bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021bca:	2b00      	cmp	r3, #0
 8021bcc:	d109      	bne.n	8021be2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8021bce:	8c3b      	ldrh	r3, [r7, #32]
 8021bd0:	4619      	mov	r1, r3
 8021bd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8021bd4:	f7ff fdb0 	bl	8021738 <ip_reass_enqueue_new_datagram>
 8021bd8:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8021bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021bdc:	2b00      	cmp	r3, #0
 8021bde:	d11c      	bne.n	8021c1a <ip4_reass+0x13e>
      goto nullreturn;
 8021be0:	e105      	b.n	8021dee <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8021be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021be4:	88db      	ldrh	r3, [r3, #6]
 8021be6:	b29b      	uxth	r3, r3
 8021be8:	4618      	mov	r0, r3
 8021bea:	f7fb fbc7 	bl	801d37c <lwip_htons>
 8021bee:	4603      	mov	r3, r0
 8021bf0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8021bf4:	2b00      	cmp	r3, #0
 8021bf6:	d110      	bne.n	8021c1a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8021bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021bfa:	89db      	ldrh	r3, [r3, #14]
 8021bfc:	4618      	mov	r0, r3
 8021bfe:	f7fb fbbd 	bl	801d37c <lwip_htons>
 8021c02:	4603      	mov	r3, r0
 8021c04:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8021c08:	2b00      	cmp	r3, #0
 8021c0a:	d006      	beq.n	8021c1a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8021c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021c0e:	3308      	adds	r3, #8
 8021c10:	2214      	movs	r2, #20
 8021c12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8021c14:	4618      	mov	r0, r3
 8021c16:	f000 fbb5 	bl	8022384 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8021c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021c1c:	88db      	ldrh	r3, [r3, #6]
 8021c1e:	b29b      	uxth	r3, r3
 8021c20:	f003 0320 	and.w	r3, r3, #32
 8021c24:	2b00      	cmp	r3, #0
 8021c26:	bf0c      	ite	eq
 8021c28:	2301      	moveq	r3, #1
 8021c2a:	2300      	movne	r3, #0
 8021c2c:	b2db      	uxtb	r3, r3
 8021c2e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8021c30:	69fb      	ldr	r3, [r7, #28]
 8021c32:	2b00      	cmp	r3, #0
 8021c34:	d00e      	beq.n	8021c54 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8021c36:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8021c38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8021c3a:	4413      	add	r3, r2
 8021c3c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8021c3e:	8b7a      	ldrh	r2, [r7, #26]
 8021c40:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8021c42:	429a      	cmp	r2, r3
 8021c44:	f0c0 80a0 	bcc.w	8021d88 <ip4_reass+0x2ac>
 8021c48:	8b7b      	ldrh	r3, [r7, #26]
 8021c4a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8021c4e:	4293      	cmp	r3, r2
 8021c50:	f200 809a 	bhi.w	8021d88 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8021c54:	69fa      	ldr	r2, [r7, #28]
 8021c56:	6879      	ldr	r1, [r7, #4]
 8021c58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8021c5a:	f7ff fdd5 	bl	8021808 <ip_reass_chain_frag_into_datagram_and_validate>
 8021c5e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8021c60:	697b      	ldr	r3, [r7, #20]
 8021c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021c66:	f000 809b 	beq.w	8021da0 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8021c6a:	4b48      	ldr	r3, [pc, #288]	; (8021d8c <ip4_reass+0x2b0>)
 8021c6c:	881a      	ldrh	r2, [r3, #0]
 8021c6e:	8c3b      	ldrh	r3, [r7, #32]
 8021c70:	4413      	add	r3, r2
 8021c72:	b29a      	uxth	r2, r3
 8021c74:	4b45      	ldr	r3, [pc, #276]	; (8021d8c <ip4_reass+0x2b0>)
 8021c76:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8021c78:	69fb      	ldr	r3, [r7, #28]
 8021c7a:	2b00      	cmp	r3, #0
 8021c7c:	d00d      	beq.n	8021c9a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8021c7e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8021c80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8021c82:	4413      	add	r3, r2
 8021c84:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8021c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021c88:	8a7a      	ldrh	r2, [r7, #18]
 8021c8a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8021c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021c8e:	7f9b      	ldrb	r3, [r3, #30]
 8021c90:	f043 0301 	orr.w	r3, r3, #1
 8021c94:	b2da      	uxtb	r2, r3
 8021c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021c98:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8021c9a:	697b      	ldr	r3, [r7, #20]
 8021c9c:	2b01      	cmp	r3, #1
 8021c9e:	d171      	bne.n	8021d84 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8021ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021ca2:	8b9b      	ldrh	r3, [r3, #28]
 8021ca4:	3314      	adds	r3, #20
 8021ca6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8021ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021caa:	685b      	ldr	r3, [r3, #4]
 8021cac:	685b      	ldr	r3, [r3, #4]
 8021cae:	681b      	ldr	r3, [r3, #0]
 8021cb0:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8021cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021cb4:	685b      	ldr	r3, [r3, #4]
 8021cb6:	685b      	ldr	r3, [r3, #4]
 8021cb8:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8021cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021cbc:	3308      	adds	r3, #8
 8021cbe:	2214      	movs	r2, #20
 8021cc0:	4619      	mov	r1, r3
 8021cc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8021cc4:	f000 fb5e 	bl	8022384 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8021cc8:	8a3b      	ldrh	r3, [r7, #16]
 8021cca:	4618      	mov	r0, r3
 8021ccc:	f7fb fb56 	bl	801d37c <lwip_htons>
 8021cd0:	4603      	mov	r3, r0
 8021cd2:	461a      	mov	r2, r3
 8021cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021cd6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8021cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021cda:	2200      	movs	r2, #0
 8021cdc:	719a      	strb	r2, [r3, #6]
 8021cde:	2200      	movs	r2, #0
 8021ce0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8021ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021ce4:	2200      	movs	r2, #0
 8021ce6:	729a      	strb	r2, [r3, #10]
 8021ce8:	2200      	movs	r2, #0
 8021cea:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8021cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021cee:	685b      	ldr	r3, [r3, #4]
 8021cf0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8021cf2:	e00d      	b.n	8021d10 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8021cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021cf6:	685b      	ldr	r3, [r3, #4]
 8021cf8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8021cfa:	2114      	movs	r1, #20
 8021cfc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8021cfe:	f7fc fe93 	bl	801ea28 <pbuf_remove_header>
      pbuf_cat(p, r);
 8021d02:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8021d04:	6878      	ldr	r0, [r7, #4]
 8021d06:	f7fc ffd7 	bl	801ecb8 <pbuf_cat>
      r = iprh->next_pbuf;
 8021d0a:	68fb      	ldr	r3, [r7, #12]
 8021d0c:	681b      	ldr	r3, [r3, #0]
 8021d0e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8021d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021d12:	2b00      	cmp	r3, #0
 8021d14:	d1ee      	bne.n	8021cf4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8021d16:	4b1e      	ldr	r3, [pc, #120]	; (8021d90 <ip4_reass+0x2b4>)
 8021d18:	681b      	ldr	r3, [r3, #0]
 8021d1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021d1c:	429a      	cmp	r2, r3
 8021d1e:	d102      	bne.n	8021d26 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8021d20:	2300      	movs	r3, #0
 8021d22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021d24:	e010      	b.n	8021d48 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8021d26:	4b1a      	ldr	r3, [pc, #104]	; (8021d90 <ip4_reass+0x2b4>)
 8021d28:	681b      	ldr	r3, [r3, #0]
 8021d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021d2c:	e007      	b.n	8021d3e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8021d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021d30:	681b      	ldr	r3, [r3, #0]
 8021d32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021d34:	429a      	cmp	r2, r3
 8021d36:	d006      	beq.n	8021d46 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8021d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021d3a:	681b      	ldr	r3, [r3, #0]
 8021d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021d40:	2b00      	cmp	r3, #0
 8021d42:	d1f4      	bne.n	8021d2e <ip4_reass+0x252>
 8021d44:	e000      	b.n	8021d48 <ip4_reass+0x26c>
          break;
 8021d46:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8021d48:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8021d4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8021d4c:	f7ff fd2e 	bl	80217ac <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8021d50:	6878      	ldr	r0, [r7, #4]
 8021d52:	f7fc ff77 	bl	801ec44 <pbuf_clen>
 8021d56:	4603      	mov	r3, r0
 8021d58:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8021d5a:	4b0c      	ldr	r3, [pc, #48]	; (8021d8c <ip4_reass+0x2b0>)
 8021d5c:	881b      	ldrh	r3, [r3, #0]
 8021d5e:	8c3a      	ldrh	r2, [r7, #32]
 8021d60:	429a      	cmp	r2, r3
 8021d62:	d906      	bls.n	8021d72 <ip4_reass+0x296>
 8021d64:	4b0b      	ldr	r3, [pc, #44]	; (8021d94 <ip4_reass+0x2b8>)
 8021d66:	f240 229b 	movw	r2, #667	; 0x29b
 8021d6a:	490b      	ldr	r1, [pc, #44]	; (8021d98 <ip4_reass+0x2bc>)
 8021d6c:	480b      	ldr	r0, [pc, #44]	; (8021d9c <ip4_reass+0x2c0>)
 8021d6e:	f000 fc19 	bl	80225a4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8021d72:	4b06      	ldr	r3, [pc, #24]	; (8021d8c <ip4_reass+0x2b0>)
 8021d74:	881a      	ldrh	r2, [r3, #0]
 8021d76:	8c3b      	ldrh	r3, [r7, #32]
 8021d78:	1ad3      	subs	r3, r2, r3
 8021d7a:	b29a      	uxth	r2, r3
 8021d7c:	4b03      	ldr	r3, [pc, #12]	; (8021d8c <ip4_reass+0x2b0>)
 8021d7e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8021d80:	687b      	ldr	r3, [r7, #4]
 8021d82:	e038      	b.n	8021df6 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8021d84:	2300      	movs	r3, #0
 8021d86:	e036      	b.n	8021df6 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8021d88:	bf00      	nop
 8021d8a:	e00a      	b.n	8021da2 <ip4_reass+0x2c6>
 8021d8c:	20014298 	.word	0x20014298
 8021d90:	20014294 	.word	0x20014294
 8021d94:	080287a4 	.word	0x080287a4
 8021d98:	08028950 	.word	0x08028950
 8021d9c:	08028828 	.word	0x08028828
    goto nullreturn_ipr;
 8021da0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8021da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021da4:	2b00      	cmp	r3, #0
 8021da6:	d106      	bne.n	8021db6 <ip4_reass+0x2da>
 8021da8:	4b15      	ldr	r3, [pc, #84]	; (8021e00 <ip4_reass+0x324>)
 8021daa:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8021dae:	4915      	ldr	r1, [pc, #84]	; (8021e04 <ip4_reass+0x328>)
 8021db0:	4815      	ldr	r0, [pc, #84]	; (8021e08 <ip4_reass+0x32c>)
 8021db2:	f000 fbf7 	bl	80225a4 <iprintf>
  if (ipr->p == NULL) {
 8021db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021db8:	685b      	ldr	r3, [r3, #4]
 8021dba:	2b00      	cmp	r3, #0
 8021dbc:	d116      	bne.n	8021dec <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8021dbe:	4b13      	ldr	r3, [pc, #76]	; (8021e0c <ip4_reass+0x330>)
 8021dc0:	681b      	ldr	r3, [r3, #0]
 8021dc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021dc4:	429a      	cmp	r2, r3
 8021dc6:	d006      	beq.n	8021dd6 <ip4_reass+0x2fa>
 8021dc8:	4b0d      	ldr	r3, [pc, #52]	; (8021e00 <ip4_reass+0x324>)
 8021dca:	f240 22ab 	movw	r2, #683	; 0x2ab
 8021dce:	4910      	ldr	r1, [pc, #64]	; (8021e10 <ip4_reass+0x334>)
 8021dd0:	480d      	ldr	r0, [pc, #52]	; (8021e08 <ip4_reass+0x32c>)
 8021dd2:	f000 fbe7 	bl	80225a4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8021dd6:	2100      	movs	r1, #0
 8021dd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8021dda:	f7ff fce7 	bl	80217ac <ip_reass_dequeue_datagram>
 8021dde:	e006      	b.n	8021dee <ip4_reass+0x312>
    goto nullreturn;
 8021de0:	bf00      	nop
 8021de2:	e004      	b.n	8021dee <ip4_reass+0x312>
    goto nullreturn;
 8021de4:	bf00      	nop
 8021de6:	e002      	b.n	8021dee <ip4_reass+0x312>
      goto nullreturn;
 8021de8:	bf00      	nop
 8021dea:	e000      	b.n	8021dee <ip4_reass+0x312>
  }

nullreturn:
 8021dec:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8021dee:	6878      	ldr	r0, [r7, #4]
 8021df0:	f7fc fea0 	bl	801eb34 <pbuf_free>
  return NULL;
 8021df4:	2300      	movs	r3, #0
}
 8021df6:	4618      	mov	r0, r3
 8021df8:	3738      	adds	r7, #56	; 0x38
 8021dfa:	46bd      	mov	sp, r7
 8021dfc:	bd80      	pop	{r7, pc}
 8021dfe:	bf00      	nop
 8021e00:	080287a4 	.word	0x080287a4
 8021e04:	0802896c 	.word	0x0802896c
 8021e08:	08028828 	.word	0x08028828
 8021e0c:	20014294 	.word	0x20014294
 8021e10:	08028978 	.word	0x08028978

08021e14 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8021e14:	b580      	push	{r7, lr}
 8021e16:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8021e18:	2002      	movs	r0, #2
 8021e1a:	f7fb ff0b 	bl	801dc34 <memp_malloc>
 8021e1e:	4603      	mov	r3, r0
}
 8021e20:	4618      	mov	r0, r3
 8021e22:	bd80      	pop	{r7, pc}

08021e24 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8021e24:	b580      	push	{r7, lr}
 8021e26:	b082      	sub	sp, #8
 8021e28:	af00      	add	r7, sp, #0
 8021e2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8021e2c:	687b      	ldr	r3, [r7, #4]
 8021e2e:	2b00      	cmp	r3, #0
 8021e30:	d106      	bne.n	8021e40 <ip_frag_free_pbuf_custom_ref+0x1c>
 8021e32:	4b07      	ldr	r3, [pc, #28]	; (8021e50 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8021e34:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8021e38:	4906      	ldr	r1, [pc, #24]	; (8021e54 <ip_frag_free_pbuf_custom_ref+0x30>)
 8021e3a:	4807      	ldr	r0, [pc, #28]	; (8021e58 <ip_frag_free_pbuf_custom_ref+0x34>)
 8021e3c:	f000 fbb2 	bl	80225a4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8021e40:	6879      	ldr	r1, [r7, #4]
 8021e42:	2002      	movs	r0, #2
 8021e44:	f7fb ff66 	bl	801dd14 <memp_free>
}
 8021e48:	bf00      	nop
 8021e4a:	3708      	adds	r7, #8
 8021e4c:	46bd      	mov	sp, r7
 8021e4e:	bd80      	pop	{r7, pc}
 8021e50:	080287a4 	.word	0x080287a4
 8021e54:	08028998 	.word	0x08028998
 8021e58:	08028828 	.word	0x08028828

08021e5c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8021e5c:	b580      	push	{r7, lr}
 8021e5e:	b084      	sub	sp, #16
 8021e60:	af00      	add	r7, sp, #0
 8021e62:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8021e64:	687b      	ldr	r3, [r7, #4]
 8021e66:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8021e68:	68fb      	ldr	r3, [r7, #12]
 8021e6a:	2b00      	cmp	r3, #0
 8021e6c:	d106      	bne.n	8021e7c <ipfrag_free_pbuf_custom+0x20>
 8021e6e:	4b11      	ldr	r3, [pc, #68]	; (8021eb4 <ipfrag_free_pbuf_custom+0x58>)
 8021e70:	f240 22ce 	movw	r2, #718	; 0x2ce
 8021e74:	4910      	ldr	r1, [pc, #64]	; (8021eb8 <ipfrag_free_pbuf_custom+0x5c>)
 8021e76:	4811      	ldr	r0, [pc, #68]	; (8021ebc <ipfrag_free_pbuf_custom+0x60>)
 8021e78:	f000 fb94 	bl	80225a4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8021e7c:	68fa      	ldr	r2, [r7, #12]
 8021e7e:	687b      	ldr	r3, [r7, #4]
 8021e80:	429a      	cmp	r2, r3
 8021e82:	d006      	beq.n	8021e92 <ipfrag_free_pbuf_custom+0x36>
 8021e84:	4b0b      	ldr	r3, [pc, #44]	; (8021eb4 <ipfrag_free_pbuf_custom+0x58>)
 8021e86:	f240 22cf 	movw	r2, #719	; 0x2cf
 8021e8a:	490d      	ldr	r1, [pc, #52]	; (8021ec0 <ipfrag_free_pbuf_custom+0x64>)
 8021e8c:	480b      	ldr	r0, [pc, #44]	; (8021ebc <ipfrag_free_pbuf_custom+0x60>)
 8021e8e:	f000 fb89 	bl	80225a4 <iprintf>
  if (pcr->original != NULL) {
 8021e92:	68fb      	ldr	r3, [r7, #12]
 8021e94:	695b      	ldr	r3, [r3, #20]
 8021e96:	2b00      	cmp	r3, #0
 8021e98:	d004      	beq.n	8021ea4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8021e9a:	68fb      	ldr	r3, [r7, #12]
 8021e9c:	695b      	ldr	r3, [r3, #20]
 8021e9e:	4618      	mov	r0, r3
 8021ea0:	f7fc fe48 	bl	801eb34 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8021ea4:	68f8      	ldr	r0, [r7, #12]
 8021ea6:	f7ff ffbd 	bl	8021e24 <ip_frag_free_pbuf_custom_ref>
}
 8021eaa:	bf00      	nop
 8021eac:	3710      	adds	r7, #16
 8021eae:	46bd      	mov	sp, r7
 8021eb0:	bd80      	pop	{r7, pc}
 8021eb2:	bf00      	nop
 8021eb4:	080287a4 	.word	0x080287a4
 8021eb8:	080289a4 	.word	0x080289a4
 8021ebc:	08028828 	.word	0x08028828
 8021ec0:	080289b0 	.word	0x080289b0

08021ec4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8021ec4:	b580      	push	{r7, lr}
 8021ec6:	b094      	sub	sp, #80	; 0x50
 8021ec8:	af02      	add	r7, sp, #8
 8021eca:	60f8      	str	r0, [r7, #12]
 8021ecc:	60b9      	str	r1, [r7, #8]
 8021ece:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8021ed0:	2300      	movs	r3, #0
 8021ed2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8021ed6:	68bb      	ldr	r3, [r7, #8]
 8021ed8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8021eda:	3b14      	subs	r3, #20
 8021edc:	2b00      	cmp	r3, #0
 8021ede:	da00      	bge.n	8021ee2 <ip4_frag+0x1e>
 8021ee0:	3307      	adds	r3, #7
 8021ee2:	10db      	asrs	r3, r3, #3
 8021ee4:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8021ee6:	2314      	movs	r3, #20
 8021ee8:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8021eea:	68fb      	ldr	r3, [r7, #12]
 8021eec:	685b      	ldr	r3, [r3, #4]
 8021eee:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8021ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021ef2:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8021ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021ef6:	781b      	ldrb	r3, [r3, #0]
 8021ef8:	f003 030f 	and.w	r3, r3, #15
 8021efc:	b2db      	uxtb	r3, r3
 8021efe:	009b      	lsls	r3, r3, #2
 8021f00:	b2db      	uxtb	r3, r3
 8021f02:	2b14      	cmp	r3, #20
 8021f04:	d002      	beq.n	8021f0c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8021f06:	f06f 0305 	mvn.w	r3, #5
 8021f0a:	e110      	b.n	802212e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8021f0c:	68fb      	ldr	r3, [r7, #12]
 8021f0e:	895b      	ldrh	r3, [r3, #10]
 8021f10:	2b13      	cmp	r3, #19
 8021f12:	d809      	bhi.n	8021f28 <ip4_frag+0x64>
 8021f14:	4b88      	ldr	r3, [pc, #544]	; (8022138 <ip4_frag+0x274>)
 8021f16:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8021f1a:	4988      	ldr	r1, [pc, #544]	; (802213c <ip4_frag+0x278>)
 8021f1c:	4888      	ldr	r0, [pc, #544]	; (8022140 <ip4_frag+0x27c>)
 8021f1e:	f000 fb41 	bl	80225a4 <iprintf>
 8021f22:	f06f 0305 	mvn.w	r3, #5
 8021f26:	e102      	b.n	802212e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8021f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021f2a:	88db      	ldrh	r3, [r3, #6]
 8021f2c:	b29b      	uxth	r3, r3
 8021f2e:	4618      	mov	r0, r3
 8021f30:	f7fb fa24 	bl	801d37c <lwip_htons>
 8021f34:	4603      	mov	r3, r0
 8021f36:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8021f38:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8021f3a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8021f3e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8021f42:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8021f44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8021f48:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8021f4a:	68fb      	ldr	r3, [r7, #12]
 8021f4c:	891b      	ldrh	r3, [r3, #8]
 8021f4e:	3b14      	subs	r3, #20
 8021f50:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8021f54:	e0e1      	b.n	802211a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8021f56:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8021f58:	00db      	lsls	r3, r3, #3
 8021f5a:	b29b      	uxth	r3, r3
 8021f5c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8021f60:	4293      	cmp	r3, r2
 8021f62:	bf28      	it	cs
 8021f64:	4613      	movcs	r3, r2
 8021f66:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8021f68:	f44f 7220 	mov.w	r2, #640	; 0x280
 8021f6c:	2114      	movs	r1, #20
 8021f6e:	200e      	movs	r0, #14
 8021f70:	f7fc fafe 	bl	801e570 <pbuf_alloc>
 8021f74:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8021f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021f78:	2b00      	cmp	r3, #0
 8021f7a:	f000 80d5 	beq.w	8022128 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8021f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021f80:	895b      	ldrh	r3, [r3, #10]
 8021f82:	2b13      	cmp	r3, #19
 8021f84:	d806      	bhi.n	8021f94 <ip4_frag+0xd0>
 8021f86:	4b6c      	ldr	r3, [pc, #432]	; (8022138 <ip4_frag+0x274>)
 8021f88:	f44f 7249 	mov.w	r2, #804	; 0x324
 8021f8c:	496d      	ldr	r1, [pc, #436]	; (8022144 <ip4_frag+0x280>)
 8021f8e:	486c      	ldr	r0, [pc, #432]	; (8022140 <ip4_frag+0x27c>)
 8021f90:	f000 fb08 	bl	80225a4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8021f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021f96:	685b      	ldr	r3, [r3, #4]
 8021f98:	2214      	movs	r2, #20
 8021f9a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8021f9c:	4618      	mov	r0, r3
 8021f9e:	f000 f9f1 	bl	8022384 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8021fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021fa4:	685b      	ldr	r3, [r3, #4]
 8021fa6:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8021fa8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8021faa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8021fae:	e064      	b.n	802207a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8021fb0:	68fb      	ldr	r3, [r7, #12]
 8021fb2:	895a      	ldrh	r2, [r3, #10]
 8021fb4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8021fb6:	1ad3      	subs	r3, r2, r3
 8021fb8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8021fba:	68fb      	ldr	r3, [r7, #12]
 8021fbc:	895b      	ldrh	r3, [r3, #10]
 8021fbe:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8021fc0:	429a      	cmp	r2, r3
 8021fc2:	d906      	bls.n	8021fd2 <ip4_frag+0x10e>
 8021fc4:	4b5c      	ldr	r3, [pc, #368]	; (8022138 <ip4_frag+0x274>)
 8021fc6:	f240 322d 	movw	r2, #813	; 0x32d
 8021fca:	495f      	ldr	r1, [pc, #380]	; (8022148 <ip4_frag+0x284>)
 8021fcc:	485c      	ldr	r0, [pc, #368]	; (8022140 <ip4_frag+0x27c>)
 8021fce:	f000 fae9 	bl	80225a4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8021fd2:	8bfa      	ldrh	r2, [r7, #30]
 8021fd4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8021fd8:	4293      	cmp	r3, r2
 8021fda:	bf28      	it	cs
 8021fdc:	4613      	movcs	r3, r2
 8021fde:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8021fe2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8021fe6:	2b00      	cmp	r3, #0
 8021fe8:	d105      	bne.n	8021ff6 <ip4_frag+0x132>
        poff = 0;
 8021fea:	2300      	movs	r3, #0
 8021fec:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8021fee:	68fb      	ldr	r3, [r7, #12]
 8021ff0:	681b      	ldr	r3, [r3, #0]
 8021ff2:	60fb      	str	r3, [r7, #12]
        continue;
 8021ff4:	e041      	b.n	802207a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8021ff6:	f7ff ff0d 	bl	8021e14 <ip_frag_alloc_pbuf_custom_ref>
 8021ffa:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8021ffc:	69bb      	ldr	r3, [r7, #24]
 8021ffe:	2b00      	cmp	r3, #0
 8022000:	d103      	bne.n	802200a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8022002:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8022004:	f7fc fd96 	bl	801eb34 <pbuf_free>
        goto memerr;
 8022008:	e08f      	b.n	802212a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 802200a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 802200c:	68fb      	ldr	r3, [r7, #12]
 802200e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8022010:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8022012:	4413      	add	r3, r2
 8022014:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8022018:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 802201c:	9201      	str	r2, [sp, #4]
 802201e:	9300      	str	r3, [sp, #0]
 8022020:	4603      	mov	r3, r0
 8022022:	2241      	movs	r2, #65	; 0x41
 8022024:	2000      	movs	r0, #0
 8022026:	f7fc fbcb 	bl	801e7c0 <pbuf_alloced_custom>
 802202a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 802202c:	697b      	ldr	r3, [r7, #20]
 802202e:	2b00      	cmp	r3, #0
 8022030:	d106      	bne.n	8022040 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8022032:	69b8      	ldr	r0, [r7, #24]
 8022034:	f7ff fef6 	bl	8021e24 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8022038:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802203a:	f7fc fd7b 	bl	801eb34 <pbuf_free>
        goto memerr;
 802203e:	e074      	b.n	802212a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8022040:	68f8      	ldr	r0, [r7, #12]
 8022042:	f7fc fe17 	bl	801ec74 <pbuf_ref>
      pcr->original = p;
 8022046:	69bb      	ldr	r3, [r7, #24]
 8022048:	68fa      	ldr	r2, [r7, #12]
 802204a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 802204c:	69bb      	ldr	r3, [r7, #24]
 802204e:	4a3f      	ldr	r2, [pc, #252]	; (802214c <ip4_frag+0x288>)
 8022050:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8022052:	6979      	ldr	r1, [r7, #20]
 8022054:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8022056:	f7fc fe2f 	bl	801ecb8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 802205a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 802205e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8022062:	1ad3      	subs	r3, r2, r3
 8022064:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8022068:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 802206c:	2b00      	cmp	r3, #0
 802206e:	d004      	beq.n	802207a <ip4_frag+0x1b6>
        poff = 0;
 8022070:	2300      	movs	r3, #0
 8022072:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8022074:	68fb      	ldr	r3, [r7, #12]
 8022076:	681b      	ldr	r3, [r3, #0]
 8022078:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 802207a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 802207e:	2b00      	cmp	r3, #0
 8022080:	d196      	bne.n	8021fb0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8022082:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8022084:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8022088:	4413      	add	r3, r2
 802208a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 802208c:	68bb      	ldr	r3, [r7, #8]
 802208e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8022090:	f1a3 0213 	sub.w	r2, r3, #19
 8022094:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8022098:	429a      	cmp	r2, r3
 802209a:	bfcc      	ite	gt
 802209c:	2301      	movgt	r3, #1
 802209e:	2300      	movle	r3, #0
 80220a0:	b2db      	uxtb	r3, r3
 80220a2:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80220a4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80220a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80220ac:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80220ae:	6a3b      	ldr	r3, [r7, #32]
 80220b0:	2b00      	cmp	r3, #0
 80220b2:	d002      	beq.n	80220ba <ip4_frag+0x1f6>
 80220b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80220b6:	2b00      	cmp	r3, #0
 80220b8:	d003      	beq.n	80220c2 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80220ba:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80220bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80220c0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80220c2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80220c4:	4618      	mov	r0, r3
 80220c6:	f7fb f959 	bl	801d37c <lwip_htons>
 80220ca:	4603      	mov	r3, r0
 80220cc:	461a      	mov	r2, r3
 80220ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80220d0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80220d2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80220d4:	3314      	adds	r3, #20
 80220d6:	b29b      	uxth	r3, r3
 80220d8:	4618      	mov	r0, r3
 80220da:	f7fb f94f 	bl	801d37c <lwip_htons>
 80220de:	4603      	mov	r3, r0
 80220e0:	461a      	mov	r2, r3
 80220e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80220e4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80220e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80220e8:	2200      	movs	r2, #0
 80220ea:	729a      	strb	r2, [r3, #10]
 80220ec:	2200      	movs	r2, #0
 80220ee:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80220f0:	68bb      	ldr	r3, [r7, #8]
 80220f2:	695b      	ldr	r3, [r3, #20]
 80220f4:	687a      	ldr	r2, [r7, #4]
 80220f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80220f8:	68b8      	ldr	r0, [r7, #8]
 80220fa:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80220fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80220fe:	f7fc fd19 	bl	801eb34 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8022102:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8022106:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8022108:	1ad3      	subs	r3, r2, r3
 802210a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 802210e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8022112:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8022114:	4413      	add	r3, r2
 8022116:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 802211a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 802211e:	2b00      	cmp	r3, #0
 8022120:	f47f af19 	bne.w	8021f56 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8022124:	2300      	movs	r3, #0
 8022126:	e002      	b.n	802212e <ip4_frag+0x26a>
      goto memerr;
 8022128:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 802212a:	f04f 33ff 	mov.w	r3, #4294967295
}
 802212e:	4618      	mov	r0, r3
 8022130:	3748      	adds	r7, #72	; 0x48
 8022132:	46bd      	mov	sp, r7
 8022134:	bd80      	pop	{r7, pc}
 8022136:	bf00      	nop
 8022138:	080287a4 	.word	0x080287a4
 802213c:	080289bc 	.word	0x080289bc
 8022140:	08028828 	.word	0x08028828
 8022144:	080289d8 	.word	0x080289d8
 8022148:	080289f8 	.word	0x080289f8
 802214c:	08021e5d 	.word	0x08021e5d

08022150 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8022150:	b580      	push	{r7, lr}
 8022152:	b086      	sub	sp, #24
 8022154:	af00      	add	r7, sp, #0
 8022156:	6078      	str	r0, [r7, #4]
 8022158:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 802215a:	230e      	movs	r3, #14
 802215c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 802215e:	687b      	ldr	r3, [r7, #4]
 8022160:	895b      	ldrh	r3, [r3, #10]
 8022162:	2b0e      	cmp	r3, #14
 8022164:	d96e      	bls.n	8022244 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8022166:	687b      	ldr	r3, [r7, #4]
 8022168:	7bdb      	ldrb	r3, [r3, #15]
 802216a:	2b00      	cmp	r3, #0
 802216c:	d106      	bne.n	802217c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 802216e:	683b      	ldr	r3, [r7, #0]
 8022170:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8022174:	3301      	adds	r3, #1
 8022176:	b2da      	uxtb	r2, r3
 8022178:	687b      	ldr	r3, [r7, #4]
 802217a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 802217c:	687b      	ldr	r3, [r7, #4]
 802217e:	685b      	ldr	r3, [r3, #4]
 8022180:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8022182:	693b      	ldr	r3, [r7, #16]
 8022184:	7b1a      	ldrb	r2, [r3, #12]
 8022186:	7b5b      	ldrb	r3, [r3, #13]
 8022188:	021b      	lsls	r3, r3, #8
 802218a:	4313      	orrs	r3, r2
 802218c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 802218e:	693b      	ldr	r3, [r7, #16]
 8022190:	781b      	ldrb	r3, [r3, #0]
 8022192:	f003 0301 	and.w	r3, r3, #1
 8022196:	2b00      	cmp	r3, #0
 8022198:	d023      	beq.n	80221e2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 802219a:	693b      	ldr	r3, [r7, #16]
 802219c:	781b      	ldrb	r3, [r3, #0]
 802219e:	2b01      	cmp	r3, #1
 80221a0:	d10f      	bne.n	80221c2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80221a2:	693b      	ldr	r3, [r7, #16]
 80221a4:	785b      	ldrb	r3, [r3, #1]
 80221a6:	2b00      	cmp	r3, #0
 80221a8:	d11b      	bne.n	80221e2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80221aa:	693b      	ldr	r3, [r7, #16]
 80221ac:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80221ae:	2b5e      	cmp	r3, #94	; 0x5e
 80221b0:	d117      	bne.n	80221e2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80221b2:	687b      	ldr	r3, [r7, #4]
 80221b4:	7b5b      	ldrb	r3, [r3, #13]
 80221b6:	f043 0310 	orr.w	r3, r3, #16
 80221ba:	b2da      	uxtb	r2, r3
 80221bc:	687b      	ldr	r3, [r7, #4]
 80221be:	735a      	strb	r2, [r3, #13]
 80221c0:	e00f      	b.n	80221e2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80221c2:	693b      	ldr	r3, [r7, #16]
 80221c4:	2206      	movs	r2, #6
 80221c6:	4928      	ldr	r1, [pc, #160]	; (8022268 <ethernet_input+0x118>)
 80221c8:	4618      	mov	r0, r3
 80221ca:	f000 f8cb 	bl	8022364 <memcmp>
 80221ce:	4603      	mov	r3, r0
 80221d0:	2b00      	cmp	r3, #0
 80221d2:	d106      	bne.n	80221e2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80221d4:	687b      	ldr	r3, [r7, #4]
 80221d6:	7b5b      	ldrb	r3, [r3, #13]
 80221d8:	f043 0308 	orr.w	r3, r3, #8
 80221dc:	b2da      	uxtb	r2, r3
 80221de:	687b      	ldr	r3, [r7, #4]
 80221e0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80221e2:	89fb      	ldrh	r3, [r7, #14]
 80221e4:	2b08      	cmp	r3, #8
 80221e6:	d003      	beq.n	80221f0 <ethernet_input+0xa0>
 80221e8:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80221ec:	d014      	beq.n	8022218 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80221ee:	e032      	b.n	8022256 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80221f0:	683b      	ldr	r3, [r7, #0]
 80221f2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80221f6:	f003 0308 	and.w	r3, r3, #8
 80221fa:	2b00      	cmp	r3, #0
 80221fc:	d024      	beq.n	8022248 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80221fe:	8afb      	ldrh	r3, [r7, #22]
 8022200:	4619      	mov	r1, r3
 8022202:	6878      	ldr	r0, [r7, #4]
 8022204:	f7fc fc10 	bl	801ea28 <pbuf_remove_header>
 8022208:	4603      	mov	r3, r0
 802220a:	2b00      	cmp	r3, #0
 802220c:	d11e      	bne.n	802224c <ethernet_input+0xfc>
        ip4_input(p, netif);
 802220e:	6839      	ldr	r1, [r7, #0]
 8022210:	6878      	ldr	r0, [r7, #4]
 8022212:	f7fe fe8d 	bl	8020f30 <ip4_input>
      break;
 8022216:	e013      	b.n	8022240 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8022218:	683b      	ldr	r3, [r7, #0]
 802221a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 802221e:	f003 0308 	and.w	r3, r3, #8
 8022222:	2b00      	cmp	r3, #0
 8022224:	d014      	beq.n	8022250 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8022226:	8afb      	ldrh	r3, [r7, #22]
 8022228:	4619      	mov	r1, r3
 802222a:	6878      	ldr	r0, [r7, #4]
 802222c:	f7fc fbfc 	bl	801ea28 <pbuf_remove_header>
 8022230:	4603      	mov	r3, r0
 8022232:	2b00      	cmp	r3, #0
 8022234:	d10e      	bne.n	8022254 <ethernet_input+0x104>
        etharp_input(p, netif);
 8022236:	6839      	ldr	r1, [r7, #0]
 8022238:	6878      	ldr	r0, [r7, #4]
 802223a:	f7fe f82d 	bl	8020298 <etharp_input>
      break;
 802223e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8022240:	2300      	movs	r3, #0
 8022242:	e00c      	b.n	802225e <ethernet_input+0x10e>
    goto free_and_return;
 8022244:	bf00      	nop
 8022246:	e006      	b.n	8022256 <ethernet_input+0x106>
        goto free_and_return;
 8022248:	bf00      	nop
 802224a:	e004      	b.n	8022256 <ethernet_input+0x106>
        goto free_and_return;
 802224c:	bf00      	nop
 802224e:	e002      	b.n	8022256 <ethernet_input+0x106>
        goto free_and_return;
 8022250:	bf00      	nop
 8022252:	e000      	b.n	8022256 <ethernet_input+0x106>
        goto free_and_return;
 8022254:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8022256:	6878      	ldr	r0, [r7, #4]
 8022258:	f7fc fc6c 	bl	801eb34 <pbuf_free>
  return ERR_OK;
 802225c:	2300      	movs	r3, #0
}
 802225e:	4618      	mov	r0, r3
 8022260:	3718      	adds	r7, #24
 8022262:	46bd      	mov	sp, r7
 8022264:	bd80      	pop	{r7, pc}
 8022266:	bf00      	nop
 8022268:	08028f94 	.word	0x08028f94

0802226c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 802226c:	b580      	push	{r7, lr}
 802226e:	b086      	sub	sp, #24
 8022270:	af00      	add	r7, sp, #0
 8022272:	60f8      	str	r0, [r7, #12]
 8022274:	60b9      	str	r1, [r7, #8]
 8022276:	607a      	str	r2, [r7, #4]
 8022278:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 802227a:	8c3b      	ldrh	r3, [r7, #32]
 802227c:	4618      	mov	r0, r3
 802227e:	f7fb f87d 	bl	801d37c <lwip_htons>
 8022282:	4603      	mov	r3, r0
 8022284:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8022286:	210e      	movs	r1, #14
 8022288:	68b8      	ldr	r0, [r7, #8]
 802228a:	f7fc fbbd 	bl	801ea08 <pbuf_add_header>
 802228e:	4603      	mov	r3, r0
 8022290:	2b00      	cmp	r3, #0
 8022292:	d125      	bne.n	80222e0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8022294:	68bb      	ldr	r3, [r7, #8]
 8022296:	685b      	ldr	r3, [r3, #4]
 8022298:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 802229a:	693b      	ldr	r3, [r7, #16]
 802229c:	8afa      	ldrh	r2, [r7, #22]
 802229e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80222a0:	693b      	ldr	r3, [r7, #16]
 80222a2:	2206      	movs	r2, #6
 80222a4:	6839      	ldr	r1, [r7, #0]
 80222a6:	4618      	mov	r0, r3
 80222a8:	f000 f86c 	bl	8022384 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80222ac:	693b      	ldr	r3, [r7, #16]
 80222ae:	3306      	adds	r3, #6
 80222b0:	2206      	movs	r2, #6
 80222b2:	6879      	ldr	r1, [r7, #4]
 80222b4:	4618      	mov	r0, r3
 80222b6:	f000 f865 	bl	8022384 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80222ba:	68fb      	ldr	r3, [r7, #12]
 80222bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80222c0:	2b06      	cmp	r3, #6
 80222c2:	d006      	beq.n	80222d2 <ethernet_output+0x66>
 80222c4:	4b0a      	ldr	r3, [pc, #40]	; (80222f0 <ethernet_output+0x84>)
 80222c6:	f44f 7299 	mov.w	r2, #306	; 0x132
 80222ca:	490a      	ldr	r1, [pc, #40]	; (80222f4 <ethernet_output+0x88>)
 80222cc:	480a      	ldr	r0, [pc, #40]	; (80222f8 <ethernet_output+0x8c>)
 80222ce:	f000 f969 	bl	80225a4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80222d2:	68fb      	ldr	r3, [r7, #12]
 80222d4:	699b      	ldr	r3, [r3, #24]
 80222d6:	68b9      	ldr	r1, [r7, #8]
 80222d8:	68f8      	ldr	r0, [r7, #12]
 80222da:	4798      	blx	r3
 80222dc:	4603      	mov	r3, r0
 80222de:	e002      	b.n	80222e6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80222e0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80222e2:	f06f 0301 	mvn.w	r3, #1
}
 80222e6:	4618      	mov	r0, r3
 80222e8:	3718      	adds	r7, #24
 80222ea:	46bd      	mov	sp, r7
 80222ec:	bd80      	pop	{r7, pc}
 80222ee:	bf00      	nop
 80222f0:	08028a08 	.word	0x08028a08
 80222f4:	08028a7c 	.word	0x08028a7c
 80222f8:	08028ab0 	.word	0x08028ab0

080222fc <__libc_init_array>:
 80222fc:	b570      	push	{r4, r5, r6, lr}
 80222fe:	4d0d      	ldr	r5, [pc, #52]	; (8022334 <__libc_init_array+0x38>)
 8022300:	4c0d      	ldr	r4, [pc, #52]	; (8022338 <__libc_init_array+0x3c>)
 8022302:	1b64      	subs	r4, r4, r5
 8022304:	10a4      	asrs	r4, r4, #2
 8022306:	2600      	movs	r6, #0
 8022308:	42a6      	cmp	r6, r4
 802230a:	d109      	bne.n	8022320 <__libc_init_array+0x24>
 802230c:	4d0b      	ldr	r5, [pc, #44]	; (802233c <__libc_init_array+0x40>)
 802230e:	4c0c      	ldr	r4, [pc, #48]	; (8022340 <__libc_init_array+0x44>)
 8022310:	f001 fbfe 	bl	8023b10 <_init>
 8022314:	1b64      	subs	r4, r4, r5
 8022316:	10a4      	asrs	r4, r4, #2
 8022318:	2600      	movs	r6, #0
 802231a:	42a6      	cmp	r6, r4
 802231c:	d105      	bne.n	802232a <__libc_init_array+0x2e>
 802231e:	bd70      	pop	{r4, r5, r6, pc}
 8022320:	f855 3b04 	ldr.w	r3, [r5], #4
 8022324:	4798      	blx	r3
 8022326:	3601      	adds	r6, #1
 8022328:	e7ee      	b.n	8022308 <__libc_init_array+0xc>
 802232a:	f855 3b04 	ldr.w	r3, [r5], #4
 802232e:	4798      	blx	r3
 8022330:	3601      	adds	r6, #1
 8022332:	e7f2      	b.n	802231a <__libc_init_array+0x1e>
 8022334:	080290f4 	.word	0x080290f4
 8022338:	080290f4 	.word	0x080290f4
 802233c:	080290f4 	.word	0x080290f4
 8022340:	080290f8 	.word	0x080290f8

08022344 <malloc>:
 8022344:	4b02      	ldr	r3, [pc, #8]	; (8022350 <malloc+0xc>)
 8022346:	4601      	mov	r1, r0
 8022348:	6818      	ldr	r0, [r3, #0]
 802234a:	f000 b8b7 	b.w	80224bc <_malloc_r>
 802234e:	bf00      	nop
 8022350:	20000140 	.word	0x20000140

08022354 <free>:
 8022354:	4b02      	ldr	r3, [pc, #8]	; (8022360 <free+0xc>)
 8022356:	4601      	mov	r1, r0
 8022358:	6818      	ldr	r0, [r3, #0]
 802235a:	f000 b843 	b.w	80223e4 <_free_r>
 802235e:	bf00      	nop
 8022360:	20000140 	.word	0x20000140

08022364 <memcmp>:
 8022364:	b510      	push	{r4, lr}
 8022366:	3901      	subs	r1, #1
 8022368:	4402      	add	r2, r0
 802236a:	4290      	cmp	r0, r2
 802236c:	d101      	bne.n	8022372 <memcmp+0xe>
 802236e:	2000      	movs	r0, #0
 8022370:	e005      	b.n	802237e <memcmp+0x1a>
 8022372:	7803      	ldrb	r3, [r0, #0]
 8022374:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8022378:	42a3      	cmp	r3, r4
 802237a:	d001      	beq.n	8022380 <memcmp+0x1c>
 802237c:	1b18      	subs	r0, r3, r4
 802237e:	bd10      	pop	{r4, pc}
 8022380:	3001      	adds	r0, #1
 8022382:	e7f2      	b.n	802236a <memcmp+0x6>

08022384 <memcpy>:
 8022384:	440a      	add	r2, r1
 8022386:	4291      	cmp	r1, r2
 8022388:	f100 33ff 	add.w	r3, r0, #4294967295
 802238c:	d100      	bne.n	8022390 <memcpy+0xc>
 802238e:	4770      	bx	lr
 8022390:	b510      	push	{r4, lr}
 8022392:	f811 4b01 	ldrb.w	r4, [r1], #1
 8022396:	f803 4f01 	strb.w	r4, [r3, #1]!
 802239a:	4291      	cmp	r1, r2
 802239c:	d1f9      	bne.n	8022392 <memcpy+0xe>
 802239e:	bd10      	pop	{r4, pc}

080223a0 <memmove>:
 80223a0:	4288      	cmp	r0, r1
 80223a2:	b510      	push	{r4, lr}
 80223a4:	eb01 0402 	add.w	r4, r1, r2
 80223a8:	d902      	bls.n	80223b0 <memmove+0x10>
 80223aa:	4284      	cmp	r4, r0
 80223ac:	4623      	mov	r3, r4
 80223ae:	d807      	bhi.n	80223c0 <memmove+0x20>
 80223b0:	1e43      	subs	r3, r0, #1
 80223b2:	42a1      	cmp	r1, r4
 80223b4:	d008      	beq.n	80223c8 <memmove+0x28>
 80223b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80223ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80223be:	e7f8      	b.n	80223b2 <memmove+0x12>
 80223c0:	4402      	add	r2, r0
 80223c2:	4601      	mov	r1, r0
 80223c4:	428a      	cmp	r2, r1
 80223c6:	d100      	bne.n	80223ca <memmove+0x2a>
 80223c8:	bd10      	pop	{r4, pc}
 80223ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80223ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80223d2:	e7f7      	b.n	80223c4 <memmove+0x24>

080223d4 <memset>:
 80223d4:	4402      	add	r2, r0
 80223d6:	4603      	mov	r3, r0
 80223d8:	4293      	cmp	r3, r2
 80223da:	d100      	bne.n	80223de <memset+0xa>
 80223dc:	4770      	bx	lr
 80223de:	f803 1b01 	strb.w	r1, [r3], #1
 80223e2:	e7f9      	b.n	80223d8 <memset+0x4>

080223e4 <_free_r>:
 80223e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80223e6:	2900      	cmp	r1, #0
 80223e8:	d044      	beq.n	8022474 <_free_r+0x90>
 80223ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80223ee:	9001      	str	r0, [sp, #4]
 80223f0:	2b00      	cmp	r3, #0
 80223f2:	f1a1 0404 	sub.w	r4, r1, #4
 80223f6:	bfb8      	it	lt
 80223f8:	18e4      	addlt	r4, r4, r3
 80223fa:	f000 fdbb 	bl	8022f74 <__malloc_lock>
 80223fe:	4a1e      	ldr	r2, [pc, #120]	; (8022478 <_free_r+0x94>)
 8022400:	9801      	ldr	r0, [sp, #4]
 8022402:	6813      	ldr	r3, [r2, #0]
 8022404:	b933      	cbnz	r3, 8022414 <_free_r+0x30>
 8022406:	6063      	str	r3, [r4, #4]
 8022408:	6014      	str	r4, [r2, #0]
 802240a:	b003      	add	sp, #12
 802240c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022410:	f000 bdb6 	b.w	8022f80 <__malloc_unlock>
 8022414:	42a3      	cmp	r3, r4
 8022416:	d908      	bls.n	802242a <_free_r+0x46>
 8022418:	6825      	ldr	r5, [r4, #0]
 802241a:	1961      	adds	r1, r4, r5
 802241c:	428b      	cmp	r3, r1
 802241e:	bf01      	itttt	eq
 8022420:	6819      	ldreq	r1, [r3, #0]
 8022422:	685b      	ldreq	r3, [r3, #4]
 8022424:	1949      	addeq	r1, r1, r5
 8022426:	6021      	streq	r1, [r4, #0]
 8022428:	e7ed      	b.n	8022406 <_free_r+0x22>
 802242a:	461a      	mov	r2, r3
 802242c:	685b      	ldr	r3, [r3, #4]
 802242e:	b10b      	cbz	r3, 8022434 <_free_r+0x50>
 8022430:	42a3      	cmp	r3, r4
 8022432:	d9fa      	bls.n	802242a <_free_r+0x46>
 8022434:	6811      	ldr	r1, [r2, #0]
 8022436:	1855      	adds	r5, r2, r1
 8022438:	42a5      	cmp	r5, r4
 802243a:	d10b      	bne.n	8022454 <_free_r+0x70>
 802243c:	6824      	ldr	r4, [r4, #0]
 802243e:	4421      	add	r1, r4
 8022440:	1854      	adds	r4, r2, r1
 8022442:	42a3      	cmp	r3, r4
 8022444:	6011      	str	r1, [r2, #0]
 8022446:	d1e0      	bne.n	802240a <_free_r+0x26>
 8022448:	681c      	ldr	r4, [r3, #0]
 802244a:	685b      	ldr	r3, [r3, #4]
 802244c:	6053      	str	r3, [r2, #4]
 802244e:	4421      	add	r1, r4
 8022450:	6011      	str	r1, [r2, #0]
 8022452:	e7da      	b.n	802240a <_free_r+0x26>
 8022454:	d902      	bls.n	802245c <_free_r+0x78>
 8022456:	230c      	movs	r3, #12
 8022458:	6003      	str	r3, [r0, #0]
 802245a:	e7d6      	b.n	802240a <_free_r+0x26>
 802245c:	6825      	ldr	r5, [r4, #0]
 802245e:	1961      	adds	r1, r4, r5
 8022460:	428b      	cmp	r3, r1
 8022462:	bf04      	itt	eq
 8022464:	6819      	ldreq	r1, [r3, #0]
 8022466:	685b      	ldreq	r3, [r3, #4]
 8022468:	6063      	str	r3, [r4, #4]
 802246a:	bf04      	itt	eq
 802246c:	1949      	addeq	r1, r1, r5
 802246e:	6021      	streq	r1, [r4, #0]
 8022470:	6054      	str	r4, [r2, #4]
 8022472:	e7ca      	b.n	802240a <_free_r+0x26>
 8022474:	b003      	add	sp, #12
 8022476:	bd30      	pop	{r4, r5, pc}
 8022478:	2001429c 	.word	0x2001429c

0802247c <sbrk_aligned>:
 802247c:	b570      	push	{r4, r5, r6, lr}
 802247e:	4e0e      	ldr	r6, [pc, #56]	; (80224b8 <sbrk_aligned+0x3c>)
 8022480:	460c      	mov	r4, r1
 8022482:	6831      	ldr	r1, [r6, #0]
 8022484:	4605      	mov	r5, r0
 8022486:	b911      	cbnz	r1, 802248e <sbrk_aligned+0x12>
 8022488:	f000 f96e 	bl	8022768 <_sbrk_r>
 802248c:	6030      	str	r0, [r6, #0]
 802248e:	4621      	mov	r1, r4
 8022490:	4628      	mov	r0, r5
 8022492:	f000 f969 	bl	8022768 <_sbrk_r>
 8022496:	1c43      	adds	r3, r0, #1
 8022498:	d00a      	beq.n	80224b0 <sbrk_aligned+0x34>
 802249a:	1cc4      	adds	r4, r0, #3
 802249c:	f024 0403 	bic.w	r4, r4, #3
 80224a0:	42a0      	cmp	r0, r4
 80224a2:	d007      	beq.n	80224b4 <sbrk_aligned+0x38>
 80224a4:	1a21      	subs	r1, r4, r0
 80224a6:	4628      	mov	r0, r5
 80224a8:	f000 f95e 	bl	8022768 <_sbrk_r>
 80224ac:	3001      	adds	r0, #1
 80224ae:	d101      	bne.n	80224b4 <sbrk_aligned+0x38>
 80224b0:	f04f 34ff 	mov.w	r4, #4294967295
 80224b4:	4620      	mov	r0, r4
 80224b6:	bd70      	pop	{r4, r5, r6, pc}
 80224b8:	200142a0 	.word	0x200142a0

080224bc <_malloc_r>:
 80224bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80224c0:	1ccd      	adds	r5, r1, #3
 80224c2:	f025 0503 	bic.w	r5, r5, #3
 80224c6:	3508      	adds	r5, #8
 80224c8:	2d0c      	cmp	r5, #12
 80224ca:	bf38      	it	cc
 80224cc:	250c      	movcc	r5, #12
 80224ce:	2d00      	cmp	r5, #0
 80224d0:	4607      	mov	r7, r0
 80224d2:	db01      	blt.n	80224d8 <_malloc_r+0x1c>
 80224d4:	42a9      	cmp	r1, r5
 80224d6:	d905      	bls.n	80224e4 <_malloc_r+0x28>
 80224d8:	230c      	movs	r3, #12
 80224da:	603b      	str	r3, [r7, #0]
 80224dc:	2600      	movs	r6, #0
 80224de:	4630      	mov	r0, r6
 80224e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80224e4:	4e2e      	ldr	r6, [pc, #184]	; (80225a0 <_malloc_r+0xe4>)
 80224e6:	f000 fd45 	bl	8022f74 <__malloc_lock>
 80224ea:	6833      	ldr	r3, [r6, #0]
 80224ec:	461c      	mov	r4, r3
 80224ee:	bb34      	cbnz	r4, 802253e <_malloc_r+0x82>
 80224f0:	4629      	mov	r1, r5
 80224f2:	4638      	mov	r0, r7
 80224f4:	f7ff ffc2 	bl	802247c <sbrk_aligned>
 80224f8:	1c43      	adds	r3, r0, #1
 80224fa:	4604      	mov	r4, r0
 80224fc:	d14d      	bne.n	802259a <_malloc_r+0xde>
 80224fe:	6834      	ldr	r4, [r6, #0]
 8022500:	4626      	mov	r6, r4
 8022502:	2e00      	cmp	r6, #0
 8022504:	d140      	bne.n	8022588 <_malloc_r+0xcc>
 8022506:	6823      	ldr	r3, [r4, #0]
 8022508:	4631      	mov	r1, r6
 802250a:	4638      	mov	r0, r7
 802250c:	eb04 0803 	add.w	r8, r4, r3
 8022510:	f000 f92a 	bl	8022768 <_sbrk_r>
 8022514:	4580      	cmp	r8, r0
 8022516:	d13a      	bne.n	802258e <_malloc_r+0xd2>
 8022518:	6821      	ldr	r1, [r4, #0]
 802251a:	3503      	adds	r5, #3
 802251c:	1a6d      	subs	r5, r5, r1
 802251e:	f025 0503 	bic.w	r5, r5, #3
 8022522:	3508      	adds	r5, #8
 8022524:	2d0c      	cmp	r5, #12
 8022526:	bf38      	it	cc
 8022528:	250c      	movcc	r5, #12
 802252a:	4629      	mov	r1, r5
 802252c:	4638      	mov	r0, r7
 802252e:	f7ff ffa5 	bl	802247c <sbrk_aligned>
 8022532:	3001      	adds	r0, #1
 8022534:	d02b      	beq.n	802258e <_malloc_r+0xd2>
 8022536:	6823      	ldr	r3, [r4, #0]
 8022538:	442b      	add	r3, r5
 802253a:	6023      	str	r3, [r4, #0]
 802253c:	e00e      	b.n	802255c <_malloc_r+0xa0>
 802253e:	6822      	ldr	r2, [r4, #0]
 8022540:	1b52      	subs	r2, r2, r5
 8022542:	d41e      	bmi.n	8022582 <_malloc_r+0xc6>
 8022544:	2a0b      	cmp	r2, #11
 8022546:	d916      	bls.n	8022576 <_malloc_r+0xba>
 8022548:	1961      	adds	r1, r4, r5
 802254a:	42a3      	cmp	r3, r4
 802254c:	6025      	str	r5, [r4, #0]
 802254e:	bf18      	it	ne
 8022550:	6059      	strne	r1, [r3, #4]
 8022552:	6863      	ldr	r3, [r4, #4]
 8022554:	bf08      	it	eq
 8022556:	6031      	streq	r1, [r6, #0]
 8022558:	5162      	str	r2, [r4, r5]
 802255a:	604b      	str	r3, [r1, #4]
 802255c:	4638      	mov	r0, r7
 802255e:	f104 060b 	add.w	r6, r4, #11
 8022562:	f000 fd0d 	bl	8022f80 <__malloc_unlock>
 8022566:	f026 0607 	bic.w	r6, r6, #7
 802256a:	1d23      	adds	r3, r4, #4
 802256c:	1af2      	subs	r2, r6, r3
 802256e:	d0b6      	beq.n	80224de <_malloc_r+0x22>
 8022570:	1b9b      	subs	r3, r3, r6
 8022572:	50a3      	str	r3, [r4, r2]
 8022574:	e7b3      	b.n	80224de <_malloc_r+0x22>
 8022576:	6862      	ldr	r2, [r4, #4]
 8022578:	42a3      	cmp	r3, r4
 802257a:	bf0c      	ite	eq
 802257c:	6032      	streq	r2, [r6, #0]
 802257e:	605a      	strne	r2, [r3, #4]
 8022580:	e7ec      	b.n	802255c <_malloc_r+0xa0>
 8022582:	4623      	mov	r3, r4
 8022584:	6864      	ldr	r4, [r4, #4]
 8022586:	e7b2      	b.n	80224ee <_malloc_r+0x32>
 8022588:	4634      	mov	r4, r6
 802258a:	6876      	ldr	r6, [r6, #4]
 802258c:	e7b9      	b.n	8022502 <_malloc_r+0x46>
 802258e:	230c      	movs	r3, #12
 8022590:	603b      	str	r3, [r7, #0]
 8022592:	4638      	mov	r0, r7
 8022594:	f000 fcf4 	bl	8022f80 <__malloc_unlock>
 8022598:	e7a1      	b.n	80224de <_malloc_r+0x22>
 802259a:	6025      	str	r5, [r4, #0]
 802259c:	e7de      	b.n	802255c <_malloc_r+0xa0>
 802259e:	bf00      	nop
 80225a0:	2001429c 	.word	0x2001429c

080225a4 <iprintf>:
 80225a4:	b40f      	push	{r0, r1, r2, r3}
 80225a6:	4b0a      	ldr	r3, [pc, #40]	; (80225d0 <iprintf+0x2c>)
 80225a8:	b513      	push	{r0, r1, r4, lr}
 80225aa:	681c      	ldr	r4, [r3, #0]
 80225ac:	b124      	cbz	r4, 80225b8 <iprintf+0x14>
 80225ae:	69a3      	ldr	r3, [r4, #24]
 80225b0:	b913      	cbnz	r3, 80225b8 <iprintf+0x14>
 80225b2:	4620      	mov	r0, r4
 80225b4:	f000 fbc6 	bl	8022d44 <__sinit>
 80225b8:	ab05      	add	r3, sp, #20
 80225ba:	9a04      	ldr	r2, [sp, #16]
 80225bc:	68a1      	ldr	r1, [r4, #8]
 80225be:	9301      	str	r3, [sp, #4]
 80225c0:	4620      	mov	r0, r4
 80225c2:	f000 fe69 	bl	8023298 <_vfiprintf_r>
 80225c6:	b002      	add	sp, #8
 80225c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80225cc:	b004      	add	sp, #16
 80225ce:	4770      	bx	lr
 80225d0:	20000140 	.word	0x20000140

080225d4 <putchar>:
 80225d4:	4b09      	ldr	r3, [pc, #36]	; (80225fc <putchar+0x28>)
 80225d6:	b513      	push	{r0, r1, r4, lr}
 80225d8:	681c      	ldr	r4, [r3, #0]
 80225da:	4601      	mov	r1, r0
 80225dc:	b134      	cbz	r4, 80225ec <putchar+0x18>
 80225de:	69a3      	ldr	r3, [r4, #24]
 80225e0:	b923      	cbnz	r3, 80225ec <putchar+0x18>
 80225e2:	9001      	str	r0, [sp, #4]
 80225e4:	4620      	mov	r0, r4
 80225e6:	f000 fbad 	bl	8022d44 <__sinit>
 80225ea:	9901      	ldr	r1, [sp, #4]
 80225ec:	68a2      	ldr	r2, [r4, #8]
 80225ee:	4620      	mov	r0, r4
 80225f0:	b002      	add	sp, #8
 80225f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80225f6:	f001 b913 	b.w	8023820 <_putc_r>
 80225fa:	bf00      	nop
 80225fc:	20000140 	.word	0x20000140

08022600 <_puts_r>:
 8022600:	b570      	push	{r4, r5, r6, lr}
 8022602:	460e      	mov	r6, r1
 8022604:	4605      	mov	r5, r0
 8022606:	b118      	cbz	r0, 8022610 <_puts_r+0x10>
 8022608:	6983      	ldr	r3, [r0, #24]
 802260a:	b90b      	cbnz	r3, 8022610 <_puts_r+0x10>
 802260c:	f000 fb9a 	bl	8022d44 <__sinit>
 8022610:	69ab      	ldr	r3, [r5, #24]
 8022612:	68ac      	ldr	r4, [r5, #8]
 8022614:	b913      	cbnz	r3, 802261c <_puts_r+0x1c>
 8022616:	4628      	mov	r0, r5
 8022618:	f000 fb94 	bl	8022d44 <__sinit>
 802261c:	4b2c      	ldr	r3, [pc, #176]	; (80226d0 <_puts_r+0xd0>)
 802261e:	429c      	cmp	r4, r3
 8022620:	d120      	bne.n	8022664 <_puts_r+0x64>
 8022622:	686c      	ldr	r4, [r5, #4]
 8022624:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022626:	07db      	lsls	r3, r3, #31
 8022628:	d405      	bmi.n	8022636 <_puts_r+0x36>
 802262a:	89a3      	ldrh	r3, [r4, #12]
 802262c:	0598      	lsls	r0, r3, #22
 802262e:	d402      	bmi.n	8022636 <_puts_r+0x36>
 8022630:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022632:	f000 fc37 	bl	8022ea4 <__retarget_lock_acquire_recursive>
 8022636:	89a3      	ldrh	r3, [r4, #12]
 8022638:	0719      	lsls	r1, r3, #28
 802263a:	d51d      	bpl.n	8022678 <_puts_r+0x78>
 802263c:	6923      	ldr	r3, [r4, #16]
 802263e:	b1db      	cbz	r3, 8022678 <_puts_r+0x78>
 8022640:	3e01      	subs	r6, #1
 8022642:	68a3      	ldr	r3, [r4, #8]
 8022644:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8022648:	3b01      	subs	r3, #1
 802264a:	60a3      	str	r3, [r4, #8]
 802264c:	bb39      	cbnz	r1, 802269e <_puts_r+0x9e>
 802264e:	2b00      	cmp	r3, #0
 8022650:	da38      	bge.n	80226c4 <_puts_r+0xc4>
 8022652:	4622      	mov	r2, r4
 8022654:	210a      	movs	r1, #10
 8022656:	4628      	mov	r0, r5
 8022658:	f000 f97c 	bl	8022954 <__swbuf_r>
 802265c:	3001      	adds	r0, #1
 802265e:	d011      	beq.n	8022684 <_puts_r+0x84>
 8022660:	250a      	movs	r5, #10
 8022662:	e011      	b.n	8022688 <_puts_r+0x88>
 8022664:	4b1b      	ldr	r3, [pc, #108]	; (80226d4 <_puts_r+0xd4>)
 8022666:	429c      	cmp	r4, r3
 8022668:	d101      	bne.n	802266e <_puts_r+0x6e>
 802266a:	68ac      	ldr	r4, [r5, #8]
 802266c:	e7da      	b.n	8022624 <_puts_r+0x24>
 802266e:	4b1a      	ldr	r3, [pc, #104]	; (80226d8 <_puts_r+0xd8>)
 8022670:	429c      	cmp	r4, r3
 8022672:	bf08      	it	eq
 8022674:	68ec      	ldreq	r4, [r5, #12]
 8022676:	e7d5      	b.n	8022624 <_puts_r+0x24>
 8022678:	4621      	mov	r1, r4
 802267a:	4628      	mov	r0, r5
 802267c:	f000 f9bc 	bl	80229f8 <__swsetup_r>
 8022680:	2800      	cmp	r0, #0
 8022682:	d0dd      	beq.n	8022640 <_puts_r+0x40>
 8022684:	f04f 35ff 	mov.w	r5, #4294967295
 8022688:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802268a:	07da      	lsls	r2, r3, #31
 802268c:	d405      	bmi.n	802269a <_puts_r+0x9a>
 802268e:	89a3      	ldrh	r3, [r4, #12]
 8022690:	059b      	lsls	r3, r3, #22
 8022692:	d402      	bmi.n	802269a <_puts_r+0x9a>
 8022694:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022696:	f000 fc06 	bl	8022ea6 <__retarget_lock_release_recursive>
 802269a:	4628      	mov	r0, r5
 802269c:	bd70      	pop	{r4, r5, r6, pc}
 802269e:	2b00      	cmp	r3, #0
 80226a0:	da04      	bge.n	80226ac <_puts_r+0xac>
 80226a2:	69a2      	ldr	r2, [r4, #24]
 80226a4:	429a      	cmp	r2, r3
 80226a6:	dc06      	bgt.n	80226b6 <_puts_r+0xb6>
 80226a8:	290a      	cmp	r1, #10
 80226aa:	d004      	beq.n	80226b6 <_puts_r+0xb6>
 80226ac:	6823      	ldr	r3, [r4, #0]
 80226ae:	1c5a      	adds	r2, r3, #1
 80226b0:	6022      	str	r2, [r4, #0]
 80226b2:	7019      	strb	r1, [r3, #0]
 80226b4:	e7c5      	b.n	8022642 <_puts_r+0x42>
 80226b6:	4622      	mov	r2, r4
 80226b8:	4628      	mov	r0, r5
 80226ba:	f000 f94b 	bl	8022954 <__swbuf_r>
 80226be:	3001      	adds	r0, #1
 80226c0:	d1bf      	bne.n	8022642 <_puts_r+0x42>
 80226c2:	e7df      	b.n	8022684 <_puts_r+0x84>
 80226c4:	6823      	ldr	r3, [r4, #0]
 80226c6:	250a      	movs	r5, #10
 80226c8:	1c5a      	adds	r2, r3, #1
 80226ca:	6022      	str	r2, [r4, #0]
 80226cc:	701d      	strb	r5, [r3, #0]
 80226ce:	e7db      	b.n	8022688 <_puts_r+0x88>
 80226d0:	08029078 	.word	0x08029078
 80226d4:	08029098 	.word	0x08029098
 80226d8:	08029058 	.word	0x08029058

080226dc <puts>:
 80226dc:	4b02      	ldr	r3, [pc, #8]	; (80226e8 <puts+0xc>)
 80226de:	4601      	mov	r1, r0
 80226e0:	6818      	ldr	r0, [r3, #0]
 80226e2:	f7ff bf8d 	b.w	8022600 <_puts_r>
 80226e6:	bf00      	nop
 80226e8:	20000140 	.word	0x20000140

080226ec <rand>:
 80226ec:	4b16      	ldr	r3, [pc, #88]	; (8022748 <rand+0x5c>)
 80226ee:	b510      	push	{r4, lr}
 80226f0:	681c      	ldr	r4, [r3, #0]
 80226f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80226f4:	b9b3      	cbnz	r3, 8022724 <rand+0x38>
 80226f6:	2018      	movs	r0, #24
 80226f8:	f7ff fe24 	bl	8022344 <malloc>
 80226fc:	63a0      	str	r0, [r4, #56]	; 0x38
 80226fe:	b928      	cbnz	r0, 802270c <rand+0x20>
 8022700:	4602      	mov	r2, r0
 8022702:	4b12      	ldr	r3, [pc, #72]	; (802274c <rand+0x60>)
 8022704:	4812      	ldr	r0, [pc, #72]	; (8022750 <rand+0x64>)
 8022706:	214e      	movs	r1, #78	; 0x4e
 8022708:	f000 f9e4 	bl	8022ad4 <__assert_func>
 802270c:	4a11      	ldr	r2, [pc, #68]	; (8022754 <rand+0x68>)
 802270e:	4b12      	ldr	r3, [pc, #72]	; (8022758 <rand+0x6c>)
 8022710:	e9c0 2300 	strd	r2, r3, [r0]
 8022714:	4b11      	ldr	r3, [pc, #68]	; (802275c <rand+0x70>)
 8022716:	6083      	str	r3, [r0, #8]
 8022718:	230b      	movs	r3, #11
 802271a:	8183      	strh	r3, [r0, #12]
 802271c:	2201      	movs	r2, #1
 802271e:	2300      	movs	r3, #0
 8022720:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8022724:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8022726:	4a0e      	ldr	r2, [pc, #56]	; (8022760 <rand+0x74>)
 8022728:	6920      	ldr	r0, [r4, #16]
 802272a:	6963      	ldr	r3, [r4, #20]
 802272c:	490d      	ldr	r1, [pc, #52]	; (8022764 <rand+0x78>)
 802272e:	4342      	muls	r2, r0
 8022730:	fb01 2203 	mla	r2, r1, r3, r2
 8022734:	fba0 0101 	umull	r0, r1, r0, r1
 8022738:	1c43      	adds	r3, r0, #1
 802273a:	eb42 0001 	adc.w	r0, r2, r1
 802273e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8022742:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8022746:	bd10      	pop	{r4, pc}
 8022748:	20000140 	.word	0x20000140
 802274c:	08028fa8 	.word	0x08028fa8
 8022750:	08028fbf 	.word	0x08028fbf
 8022754:	abcd330e 	.word	0xabcd330e
 8022758:	e66d1234 	.word	0xe66d1234
 802275c:	0005deec 	.word	0x0005deec
 8022760:	5851f42d 	.word	0x5851f42d
 8022764:	4c957f2d 	.word	0x4c957f2d

08022768 <_sbrk_r>:
 8022768:	b538      	push	{r3, r4, r5, lr}
 802276a:	4d06      	ldr	r5, [pc, #24]	; (8022784 <_sbrk_r+0x1c>)
 802276c:	2300      	movs	r3, #0
 802276e:	4604      	mov	r4, r0
 8022770:	4608      	mov	r0, r1
 8022772:	602b      	str	r3, [r5, #0]
 8022774:	f7f2 f888 	bl	8014888 <_sbrk>
 8022778:	1c43      	adds	r3, r0, #1
 802277a:	d102      	bne.n	8022782 <_sbrk_r+0x1a>
 802277c:	682b      	ldr	r3, [r5, #0]
 802277e:	b103      	cbz	r3, 8022782 <_sbrk_r+0x1a>
 8022780:	6023      	str	r3, [r4, #0]
 8022782:	bd38      	pop	{r3, r4, r5, pc}
 8022784:	200142a4 	.word	0x200142a4

08022788 <setvbuf>:
 8022788:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802278c:	461d      	mov	r5, r3
 802278e:	4b5d      	ldr	r3, [pc, #372]	; (8022904 <setvbuf+0x17c>)
 8022790:	681f      	ldr	r7, [r3, #0]
 8022792:	4604      	mov	r4, r0
 8022794:	460e      	mov	r6, r1
 8022796:	4690      	mov	r8, r2
 8022798:	b127      	cbz	r7, 80227a4 <setvbuf+0x1c>
 802279a:	69bb      	ldr	r3, [r7, #24]
 802279c:	b913      	cbnz	r3, 80227a4 <setvbuf+0x1c>
 802279e:	4638      	mov	r0, r7
 80227a0:	f000 fad0 	bl	8022d44 <__sinit>
 80227a4:	4b58      	ldr	r3, [pc, #352]	; (8022908 <setvbuf+0x180>)
 80227a6:	429c      	cmp	r4, r3
 80227a8:	d167      	bne.n	802287a <setvbuf+0xf2>
 80227aa:	687c      	ldr	r4, [r7, #4]
 80227ac:	f1b8 0f02 	cmp.w	r8, #2
 80227b0:	d006      	beq.n	80227c0 <setvbuf+0x38>
 80227b2:	f1b8 0f01 	cmp.w	r8, #1
 80227b6:	f200 809f 	bhi.w	80228f8 <setvbuf+0x170>
 80227ba:	2d00      	cmp	r5, #0
 80227bc:	f2c0 809c 	blt.w	80228f8 <setvbuf+0x170>
 80227c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80227c2:	07db      	lsls	r3, r3, #31
 80227c4:	d405      	bmi.n	80227d2 <setvbuf+0x4a>
 80227c6:	89a3      	ldrh	r3, [r4, #12]
 80227c8:	0598      	lsls	r0, r3, #22
 80227ca:	d402      	bmi.n	80227d2 <setvbuf+0x4a>
 80227cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80227ce:	f000 fb69 	bl	8022ea4 <__retarget_lock_acquire_recursive>
 80227d2:	4621      	mov	r1, r4
 80227d4:	4638      	mov	r0, r7
 80227d6:	f000 fa21 	bl	8022c1c <_fflush_r>
 80227da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80227dc:	b141      	cbz	r1, 80227f0 <setvbuf+0x68>
 80227de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80227e2:	4299      	cmp	r1, r3
 80227e4:	d002      	beq.n	80227ec <setvbuf+0x64>
 80227e6:	4638      	mov	r0, r7
 80227e8:	f7ff fdfc 	bl	80223e4 <_free_r>
 80227ec:	2300      	movs	r3, #0
 80227ee:	6363      	str	r3, [r4, #52]	; 0x34
 80227f0:	2300      	movs	r3, #0
 80227f2:	61a3      	str	r3, [r4, #24]
 80227f4:	6063      	str	r3, [r4, #4]
 80227f6:	89a3      	ldrh	r3, [r4, #12]
 80227f8:	0619      	lsls	r1, r3, #24
 80227fa:	d503      	bpl.n	8022804 <setvbuf+0x7c>
 80227fc:	6921      	ldr	r1, [r4, #16]
 80227fe:	4638      	mov	r0, r7
 8022800:	f7ff fdf0 	bl	80223e4 <_free_r>
 8022804:	89a3      	ldrh	r3, [r4, #12]
 8022806:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 802280a:	f023 0303 	bic.w	r3, r3, #3
 802280e:	f1b8 0f02 	cmp.w	r8, #2
 8022812:	81a3      	strh	r3, [r4, #12]
 8022814:	d06c      	beq.n	80228f0 <setvbuf+0x168>
 8022816:	ab01      	add	r3, sp, #4
 8022818:	466a      	mov	r2, sp
 802281a:	4621      	mov	r1, r4
 802281c:	4638      	mov	r0, r7
 802281e:	f000 fb43 	bl	8022ea8 <__swhatbuf_r>
 8022822:	89a3      	ldrh	r3, [r4, #12]
 8022824:	4318      	orrs	r0, r3
 8022826:	81a0      	strh	r0, [r4, #12]
 8022828:	2d00      	cmp	r5, #0
 802282a:	d130      	bne.n	802288e <setvbuf+0x106>
 802282c:	9d00      	ldr	r5, [sp, #0]
 802282e:	4628      	mov	r0, r5
 8022830:	f7ff fd88 	bl	8022344 <malloc>
 8022834:	4606      	mov	r6, r0
 8022836:	2800      	cmp	r0, #0
 8022838:	d155      	bne.n	80228e6 <setvbuf+0x15e>
 802283a:	f8dd 9000 	ldr.w	r9, [sp]
 802283e:	45a9      	cmp	r9, r5
 8022840:	d14a      	bne.n	80228d8 <setvbuf+0x150>
 8022842:	f04f 35ff 	mov.w	r5, #4294967295
 8022846:	2200      	movs	r2, #0
 8022848:	60a2      	str	r2, [r4, #8]
 802284a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 802284e:	6022      	str	r2, [r4, #0]
 8022850:	6122      	str	r2, [r4, #16]
 8022852:	2201      	movs	r2, #1
 8022854:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022858:	6162      	str	r2, [r4, #20]
 802285a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802285c:	f043 0302 	orr.w	r3, r3, #2
 8022860:	07d2      	lsls	r2, r2, #31
 8022862:	81a3      	strh	r3, [r4, #12]
 8022864:	d405      	bmi.n	8022872 <setvbuf+0xea>
 8022866:	f413 7f00 	tst.w	r3, #512	; 0x200
 802286a:	d102      	bne.n	8022872 <setvbuf+0xea>
 802286c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802286e:	f000 fb1a 	bl	8022ea6 <__retarget_lock_release_recursive>
 8022872:	4628      	mov	r0, r5
 8022874:	b003      	add	sp, #12
 8022876:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802287a:	4b24      	ldr	r3, [pc, #144]	; (802290c <setvbuf+0x184>)
 802287c:	429c      	cmp	r4, r3
 802287e:	d101      	bne.n	8022884 <setvbuf+0xfc>
 8022880:	68bc      	ldr	r4, [r7, #8]
 8022882:	e793      	b.n	80227ac <setvbuf+0x24>
 8022884:	4b22      	ldr	r3, [pc, #136]	; (8022910 <setvbuf+0x188>)
 8022886:	429c      	cmp	r4, r3
 8022888:	bf08      	it	eq
 802288a:	68fc      	ldreq	r4, [r7, #12]
 802288c:	e78e      	b.n	80227ac <setvbuf+0x24>
 802288e:	2e00      	cmp	r6, #0
 8022890:	d0cd      	beq.n	802282e <setvbuf+0xa6>
 8022892:	69bb      	ldr	r3, [r7, #24]
 8022894:	b913      	cbnz	r3, 802289c <setvbuf+0x114>
 8022896:	4638      	mov	r0, r7
 8022898:	f000 fa54 	bl	8022d44 <__sinit>
 802289c:	f1b8 0f01 	cmp.w	r8, #1
 80228a0:	bf08      	it	eq
 80228a2:	89a3      	ldrheq	r3, [r4, #12]
 80228a4:	6026      	str	r6, [r4, #0]
 80228a6:	bf04      	itt	eq
 80228a8:	f043 0301 	orreq.w	r3, r3, #1
 80228ac:	81a3      	strheq	r3, [r4, #12]
 80228ae:	89a2      	ldrh	r2, [r4, #12]
 80228b0:	f012 0308 	ands.w	r3, r2, #8
 80228b4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80228b8:	d01c      	beq.n	80228f4 <setvbuf+0x16c>
 80228ba:	07d3      	lsls	r3, r2, #31
 80228bc:	bf41      	itttt	mi
 80228be:	2300      	movmi	r3, #0
 80228c0:	426d      	negmi	r5, r5
 80228c2:	60a3      	strmi	r3, [r4, #8]
 80228c4:	61a5      	strmi	r5, [r4, #24]
 80228c6:	bf58      	it	pl
 80228c8:	60a5      	strpl	r5, [r4, #8]
 80228ca:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80228cc:	f015 0501 	ands.w	r5, r5, #1
 80228d0:	d115      	bne.n	80228fe <setvbuf+0x176>
 80228d2:	f412 7f00 	tst.w	r2, #512	; 0x200
 80228d6:	e7c8      	b.n	802286a <setvbuf+0xe2>
 80228d8:	4648      	mov	r0, r9
 80228da:	f7ff fd33 	bl	8022344 <malloc>
 80228de:	4606      	mov	r6, r0
 80228e0:	2800      	cmp	r0, #0
 80228e2:	d0ae      	beq.n	8022842 <setvbuf+0xba>
 80228e4:	464d      	mov	r5, r9
 80228e6:	89a3      	ldrh	r3, [r4, #12]
 80228e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80228ec:	81a3      	strh	r3, [r4, #12]
 80228ee:	e7d0      	b.n	8022892 <setvbuf+0x10a>
 80228f0:	2500      	movs	r5, #0
 80228f2:	e7a8      	b.n	8022846 <setvbuf+0xbe>
 80228f4:	60a3      	str	r3, [r4, #8]
 80228f6:	e7e8      	b.n	80228ca <setvbuf+0x142>
 80228f8:	f04f 35ff 	mov.w	r5, #4294967295
 80228fc:	e7b9      	b.n	8022872 <setvbuf+0xea>
 80228fe:	2500      	movs	r5, #0
 8022900:	e7b7      	b.n	8022872 <setvbuf+0xea>
 8022902:	bf00      	nop
 8022904:	20000140 	.word	0x20000140
 8022908:	08029078 	.word	0x08029078
 802290c:	08029098 	.word	0x08029098
 8022910:	08029058 	.word	0x08029058

08022914 <siprintf>:
 8022914:	b40e      	push	{r1, r2, r3}
 8022916:	b500      	push	{lr}
 8022918:	b09c      	sub	sp, #112	; 0x70
 802291a:	ab1d      	add	r3, sp, #116	; 0x74
 802291c:	9002      	str	r0, [sp, #8]
 802291e:	9006      	str	r0, [sp, #24]
 8022920:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8022924:	4809      	ldr	r0, [pc, #36]	; (802294c <siprintf+0x38>)
 8022926:	9107      	str	r1, [sp, #28]
 8022928:	9104      	str	r1, [sp, #16]
 802292a:	4909      	ldr	r1, [pc, #36]	; (8022950 <siprintf+0x3c>)
 802292c:	f853 2b04 	ldr.w	r2, [r3], #4
 8022930:	9105      	str	r1, [sp, #20]
 8022932:	6800      	ldr	r0, [r0, #0]
 8022934:	9301      	str	r3, [sp, #4]
 8022936:	a902      	add	r1, sp, #8
 8022938:	f000 fb84 	bl	8023044 <_svfiprintf_r>
 802293c:	9b02      	ldr	r3, [sp, #8]
 802293e:	2200      	movs	r2, #0
 8022940:	701a      	strb	r2, [r3, #0]
 8022942:	b01c      	add	sp, #112	; 0x70
 8022944:	f85d eb04 	ldr.w	lr, [sp], #4
 8022948:	b003      	add	sp, #12
 802294a:	4770      	bx	lr
 802294c:	20000140 	.word	0x20000140
 8022950:	ffff0208 	.word	0xffff0208

08022954 <__swbuf_r>:
 8022954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022956:	460e      	mov	r6, r1
 8022958:	4614      	mov	r4, r2
 802295a:	4605      	mov	r5, r0
 802295c:	b118      	cbz	r0, 8022966 <__swbuf_r+0x12>
 802295e:	6983      	ldr	r3, [r0, #24]
 8022960:	b90b      	cbnz	r3, 8022966 <__swbuf_r+0x12>
 8022962:	f000 f9ef 	bl	8022d44 <__sinit>
 8022966:	4b21      	ldr	r3, [pc, #132]	; (80229ec <__swbuf_r+0x98>)
 8022968:	429c      	cmp	r4, r3
 802296a:	d12b      	bne.n	80229c4 <__swbuf_r+0x70>
 802296c:	686c      	ldr	r4, [r5, #4]
 802296e:	69a3      	ldr	r3, [r4, #24]
 8022970:	60a3      	str	r3, [r4, #8]
 8022972:	89a3      	ldrh	r3, [r4, #12]
 8022974:	071a      	lsls	r2, r3, #28
 8022976:	d52f      	bpl.n	80229d8 <__swbuf_r+0x84>
 8022978:	6923      	ldr	r3, [r4, #16]
 802297a:	b36b      	cbz	r3, 80229d8 <__swbuf_r+0x84>
 802297c:	6923      	ldr	r3, [r4, #16]
 802297e:	6820      	ldr	r0, [r4, #0]
 8022980:	1ac0      	subs	r0, r0, r3
 8022982:	6963      	ldr	r3, [r4, #20]
 8022984:	b2f6      	uxtb	r6, r6
 8022986:	4283      	cmp	r3, r0
 8022988:	4637      	mov	r7, r6
 802298a:	dc04      	bgt.n	8022996 <__swbuf_r+0x42>
 802298c:	4621      	mov	r1, r4
 802298e:	4628      	mov	r0, r5
 8022990:	f000 f944 	bl	8022c1c <_fflush_r>
 8022994:	bb30      	cbnz	r0, 80229e4 <__swbuf_r+0x90>
 8022996:	68a3      	ldr	r3, [r4, #8]
 8022998:	3b01      	subs	r3, #1
 802299a:	60a3      	str	r3, [r4, #8]
 802299c:	6823      	ldr	r3, [r4, #0]
 802299e:	1c5a      	adds	r2, r3, #1
 80229a0:	6022      	str	r2, [r4, #0]
 80229a2:	701e      	strb	r6, [r3, #0]
 80229a4:	6963      	ldr	r3, [r4, #20]
 80229a6:	3001      	adds	r0, #1
 80229a8:	4283      	cmp	r3, r0
 80229aa:	d004      	beq.n	80229b6 <__swbuf_r+0x62>
 80229ac:	89a3      	ldrh	r3, [r4, #12]
 80229ae:	07db      	lsls	r3, r3, #31
 80229b0:	d506      	bpl.n	80229c0 <__swbuf_r+0x6c>
 80229b2:	2e0a      	cmp	r6, #10
 80229b4:	d104      	bne.n	80229c0 <__swbuf_r+0x6c>
 80229b6:	4621      	mov	r1, r4
 80229b8:	4628      	mov	r0, r5
 80229ba:	f000 f92f 	bl	8022c1c <_fflush_r>
 80229be:	b988      	cbnz	r0, 80229e4 <__swbuf_r+0x90>
 80229c0:	4638      	mov	r0, r7
 80229c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80229c4:	4b0a      	ldr	r3, [pc, #40]	; (80229f0 <__swbuf_r+0x9c>)
 80229c6:	429c      	cmp	r4, r3
 80229c8:	d101      	bne.n	80229ce <__swbuf_r+0x7a>
 80229ca:	68ac      	ldr	r4, [r5, #8]
 80229cc:	e7cf      	b.n	802296e <__swbuf_r+0x1a>
 80229ce:	4b09      	ldr	r3, [pc, #36]	; (80229f4 <__swbuf_r+0xa0>)
 80229d0:	429c      	cmp	r4, r3
 80229d2:	bf08      	it	eq
 80229d4:	68ec      	ldreq	r4, [r5, #12]
 80229d6:	e7ca      	b.n	802296e <__swbuf_r+0x1a>
 80229d8:	4621      	mov	r1, r4
 80229da:	4628      	mov	r0, r5
 80229dc:	f000 f80c 	bl	80229f8 <__swsetup_r>
 80229e0:	2800      	cmp	r0, #0
 80229e2:	d0cb      	beq.n	802297c <__swbuf_r+0x28>
 80229e4:	f04f 37ff 	mov.w	r7, #4294967295
 80229e8:	e7ea      	b.n	80229c0 <__swbuf_r+0x6c>
 80229ea:	bf00      	nop
 80229ec:	08029078 	.word	0x08029078
 80229f0:	08029098 	.word	0x08029098
 80229f4:	08029058 	.word	0x08029058

080229f8 <__swsetup_r>:
 80229f8:	4b32      	ldr	r3, [pc, #200]	; (8022ac4 <__swsetup_r+0xcc>)
 80229fa:	b570      	push	{r4, r5, r6, lr}
 80229fc:	681d      	ldr	r5, [r3, #0]
 80229fe:	4606      	mov	r6, r0
 8022a00:	460c      	mov	r4, r1
 8022a02:	b125      	cbz	r5, 8022a0e <__swsetup_r+0x16>
 8022a04:	69ab      	ldr	r3, [r5, #24]
 8022a06:	b913      	cbnz	r3, 8022a0e <__swsetup_r+0x16>
 8022a08:	4628      	mov	r0, r5
 8022a0a:	f000 f99b 	bl	8022d44 <__sinit>
 8022a0e:	4b2e      	ldr	r3, [pc, #184]	; (8022ac8 <__swsetup_r+0xd0>)
 8022a10:	429c      	cmp	r4, r3
 8022a12:	d10f      	bne.n	8022a34 <__swsetup_r+0x3c>
 8022a14:	686c      	ldr	r4, [r5, #4]
 8022a16:	89a3      	ldrh	r3, [r4, #12]
 8022a18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022a1c:	0719      	lsls	r1, r3, #28
 8022a1e:	d42c      	bmi.n	8022a7a <__swsetup_r+0x82>
 8022a20:	06dd      	lsls	r5, r3, #27
 8022a22:	d411      	bmi.n	8022a48 <__swsetup_r+0x50>
 8022a24:	2309      	movs	r3, #9
 8022a26:	6033      	str	r3, [r6, #0]
 8022a28:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8022a2c:	81a3      	strh	r3, [r4, #12]
 8022a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8022a32:	e03e      	b.n	8022ab2 <__swsetup_r+0xba>
 8022a34:	4b25      	ldr	r3, [pc, #148]	; (8022acc <__swsetup_r+0xd4>)
 8022a36:	429c      	cmp	r4, r3
 8022a38:	d101      	bne.n	8022a3e <__swsetup_r+0x46>
 8022a3a:	68ac      	ldr	r4, [r5, #8]
 8022a3c:	e7eb      	b.n	8022a16 <__swsetup_r+0x1e>
 8022a3e:	4b24      	ldr	r3, [pc, #144]	; (8022ad0 <__swsetup_r+0xd8>)
 8022a40:	429c      	cmp	r4, r3
 8022a42:	bf08      	it	eq
 8022a44:	68ec      	ldreq	r4, [r5, #12]
 8022a46:	e7e6      	b.n	8022a16 <__swsetup_r+0x1e>
 8022a48:	0758      	lsls	r0, r3, #29
 8022a4a:	d512      	bpl.n	8022a72 <__swsetup_r+0x7a>
 8022a4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022a4e:	b141      	cbz	r1, 8022a62 <__swsetup_r+0x6a>
 8022a50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022a54:	4299      	cmp	r1, r3
 8022a56:	d002      	beq.n	8022a5e <__swsetup_r+0x66>
 8022a58:	4630      	mov	r0, r6
 8022a5a:	f7ff fcc3 	bl	80223e4 <_free_r>
 8022a5e:	2300      	movs	r3, #0
 8022a60:	6363      	str	r3, [r4, #52]	; 0x34
 8022a62:	89a3      	ldrh	r3, [r4, #12]
 8022a64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8022a68:	81a3      	strh	r3, [r4, #12]
 8022a6a:	2300      	movs	r3, #0
 8022a6c:	6063      	str	r3, [r4, #4]
 8022a6e:	6923      	ldr	r3, [r4, #16]
 8022a70:	6023      	str	r3, [r4, #0]
 8022a72:	89a3      	ldrh	r3, [r4, #12]
 8022a74:	f043 0308 	orr.w	r3, r3, #8
 8022a78:	81a3      	strh	r3, [r4, #12]
 8022a7a:	6923      	ldr	r3, [r4, #16]
 8022a7c:	b94b      	cbnz	r3, 8022a92 <__swsetup_r+0x9a>
 8022a7e:	89a3      	ldrh	r3, [r4, #12]
 8022a80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8022a84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8022a88:	d003      	beq.n	8022a92 <__swsetup_r+0x9a>
 8022a8a:	4621      	mov	r1, r4
 8022a8c:	4630      	mov	r0, r6
 8022a8e:	f000 fa31 	bl	8022ef4 <__smakebuf_r>
 8022a92:	89a0      	ldrh	r0, [r4, #12]
 8022a94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022a98:	f010 0301 	ands.w	r3, r0, #1
 8022a9c:	d00a      	beq.n	8022ab4 <__swsetup_r+0xbc>
 8022a9e:	2300      	movs	r3, #0
 8022aa0:	60a3      	str	r3, [r4, #8]
 8022aa2:	6963      	ldr	r3, [r4, #20]
 8022aa4:	425b      	negs	r3, r3
 8022aa6:	61a3      	str	r3, [r4, #24]
 8022aa8:	6923      	ldr	r3, [r4, #16]
 8022aaa:	b943      	cbnz	r3, 8022abe <__swsetup_r+0xc6>
 8022aac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8022ab0:	d1ba      	bne.n	8022a28 <__swsetup_r+0x30>
 8022ab2:	bd70      	pop	{r4, r5, r6, pc}
 8022ab4:	0781      	lsls	r1, r0, #30
 8022ab6:	bf58      	it	pl
 8022ab8:	6963      	ldrpl	r3, [r4, #20]
 8022aba:	60a3      	str	r3, [r4, #8]
 8022abc:	e7f4      	b.n	8022aa8 <__swsetup_r+0xb0>
 8022abe:	2000      	movs	r0, #0
 8022ac0:	e7f7      	b.n	8022ab2 <__swsetup_r+0xba>
 8022ac2:	bf00      	nop
 8022ac4:	20000140 	.word	0x20000140
 8022ac8:	08029078 	.word	0x08029078
 8022acc:	08029098 	.word	0x08029098
 8022ad0:	08029058 	.word	0x08029058

08022ad4 <__assert_func>:
 8022ad4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022ad6:	4614      	mov	r4, r2
 8022ad8:	461a      	mov	r2, r3
 8022ada:	4b09      	ldr	r3, [pc, #36]	; (8022b00 <__assert_func+0x2c>)
 8022adc:	681b      	ldr	r3, [r3, #0]
 8022ade:	4605      	mov	r5, r0
 8022ae0:	68d8      	ldr	r0, [r3, #12]
 8022ae2:	b14c      	cbz	r4, 8022af8 <__assert_func+0x24>
 8022ae4:	4b07      	ldr	r3, [pc, #28]	; (8022b04 <__assert_func+0x30>)
 8022ae6:	9100      	str	r1, [sp, #0]
 8022ae8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8022aec:	4906      	ldr	r1, [pc, #24]	; (8022b08 <__assert_func+0x34>)
 8022aee:	462b      	mov	r3, r5
 8022af0:	f000 f9a6 	bl	8022e40 <fiprintf>
 8022af4:	f000 ff32 	bl	802395c <abort>
 8022af8:	4b04      	ldr	r3, [pc, #16]	; (8022b0c <__assert_func+0x38>)
 8022afa:	461c      	mov	r4, r3
 8022afc:	e7f3      	b.n	8022ae6 <__assert_func+0x12>
 8022afe:	bf00      	nop
 8022b00:	20000140 	.word	0x20000140
 8022b04:	0802901a 	.word	0x0802901a
 8022b08:	08029027 	.word	0x08029027
 8022b0c:	08029055 	.word	0x08029055

08022b10 <__sflush_r>:
 8022b10:	898a      	ldrh	r2, [r1, #12]
 8022b12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022b16:	4605      	mov	r5, r0
 8022b18:	0710      	lsls	r0, r2, #28
 8022b1a:	460c      	mov	r4, r1
 8022b1c:	d458      	bmi.n	8022bd0 <__sflush_r+0xc0>
 8022b1e:	684b      	ldr	r3, [r1, #4]
 8022b20:	2b00      	cmp	r3, #0
 8022b22:	dc05      	bgt.n	8022b30 <__sflush_r+0x20>
 8022b24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8022b26:	2b00      	cmp	r3, #0
 8022b28:	dc02      	bgt.n	8022b30 <__sflush_r+0x20>
 8022b2a:	2000      	movs	r0, #0
 8022b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022b30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022b32:	2e00      	cmp	r6, #0
 8022b34:	d0f9      	beq.n	8022b2a <__sflush_r+0x1a>
 8022b36:	2300      	movs	r3, #0
 8022b38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8022b3c:	682f      	ldr	r7, [r5, #0]
 8022b3e:	602b      	str	r3, [r5, #0]
 8022b40:	d032      	beq.n	8022ba8 <__sflush_r+0x98>
 8022b42:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8022b44:	89a3      	ldrh	r3, [r4, #12]
 8022b46:	075a      	lsls	r2, r3, #29
 8022b48:	d505      	bpl.n	8022b56 <__sflush_r+0x46>
 8022b4a:	6863      	ldr	r3, [r4, #4]
 8022b4c:	1ac0      	subs	r0, r0, r3
 8022b4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8022b50:	b10b      	cbz	r3, 8022b56 <__sflush_r+0x46>
 8022b52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8022b54:	1ac0      	subs	r0, r0, r3
 8022b56:	2300      	movs	r3, #0
 8022b58:	4602      	mov	r2, r0
 8022b5a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022b5c:	6a21      	ldr	r1, [r4, #32]
 8022b5e:	4628      	mov	r0, r5
 8022b60:	47b0      	blx	r6
 8022b62:	1c43      	adds	r3, r0, #1
 8022b64:	89a3      	ldrh	r3, [r4, #12]
 8022b66:	d106      	bne.n	8022b76 <__sflush_r+0x66>
 8022b68:	6829      	ldr	r1, [r5, #0]
 8022b6a:	291d      	cmp	r1, #29
 8022b6c:	d82c      	bhi.n	8022bc8 <__sflush_r+0xb8>
 8022b6e:	4a2a      	ldr	r2, [pc, #168]	; (8022c18 <__sflush_r+0x108>)
 8022b70:	40ca      	lsrs	r2, r1
 8022b72:	07d6      	lsls	r6, r2, #31
 8022b74:	d528      	bpl.n	8022bc8 <__sflush_r+0xb8>
 8022b76:	2200      	movs	r2, #0
 8022b78:	6062      	str	r2, [r4, #4]
 8022b7a:	04d9      	lsls	r1, r3, #19
 8022b7c:	6922      	ldr	r2, [r4, #16]
 8022b7e:	6022      	str	r2, [r4, #0]
 8022b80:	d504      	bpl.n	8022b8c <__sflush_r+0x7c>
 8022b82:	1c42      	adds	r2, r0, #1
 8022b84:	d101      	bne.n	8022b8a <__sflush_r+0x7a>
 8022b86:	682b      	ldr	r3, [r5, #0]
 8022b88:	b903      	cbnz	r3, 8022b8c <__sflush_r+0x7c>
 8022b8a:	6560      	str	r0, [r4, #84]	; 0x54
 8022b8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022b8e:	602f      	str	r7, [r5, #0]
 8022b90:	2900      	cmp	r1, #0
 8022b92:	d0ca      	beq.n	8022b2a <__sflush_r+0x1a>
 8022b94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022b98:	4299      	cmp	r1, r3
 8022b9a:	d002      	beq.n	8022ba2 <__sflush_r+0x92>
 8022b9c:	4628      	mov	r0, r5
 8022b9e:	f7ff fc21 	bl	80223e4 <_free_r>
 8022ba2:	2000      	movs	r0, #0
 8022ba4:	6360      	str	r0, [r4, #52]	; 0x34
 8022ba6:	e7c1      	b.n	8022b2c <__sflush_r+0x1c>
 8022ba8:	6a21      	ldr	r1, [r4, #32]
 8022baa:	2301      	movs	r3, #1
 8022bac:	4628      	mov	r0, r5
 8022bae:	47b0      	blx	r6
 8022bb0:	1c41      	adds	r1, r0, #1
 8022bb2:	d1c7      	bne.n	8022b44 <__sflush_r+0x34>
 8022bb4:	682b      	ldr	r3, [r5, #0]
 8022bb6:	2b00      	cmp	r3, #0
 8022bb8:	d0c4      	beq.n	8022b44 <__sflush_r+0x34>
 8022bba:	2b1d      	cmp	r3, #29
 8022bbc:	d001      	beq.n	8022bc2 <__sflush_r+0xb2>
 8022bbe:	2b16      	cmp	r3, #22
 8022bc0:	d101      	bne.n	8022bc6 <__sflush_r+0xb6>
 8022bc2:	602f      	str	r7, [r5, #0]
 8022bc4:	e7b1      	b.n	8022b2a <__sflush_r+0x1a>
 8022bc6:	89a3      	ldrh	r3, [r4, #12]
 8022bc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022bcc:	81a3      	strh	r3, [r4, #12]
 8022bce:	e7ad      	b.n	8022b2c <__sflush_r+0x1c>
 8022bd0:	690f      	ldr	r7, [r1, #16]
 8022bd2:	2f00      	cmp	r7, #0
 8022bd4:	d0a9      	beq.n	8022b2a <__sflush_r+0x1a>
 8022bd6:	0793      	lsls	r3, r2, #30
 8022bd8:	680e      	ldr	r6, [r1, #0]
 8022bda:	bf08      	it	eq
 8022bdc:	694b      	ldreq	r3, [r1, #20]
 8022bde:	600f      	str	r7, [r1, #0]
 8022be0:	bf18      	it	ne
 8022be2:	2300      	movne	r3, #0
 8022be4:	eba6 0807 	sub.w	r8, r6, r7
 8022be8:	608b      	str	r3, [r1, #8]
 8022bea:	f1b8 0f00 	cmp.w	r8, #0
 8022bee:	dd9c      	ble.n	8022b2a <__sflush_r+0x1a>
 8022bf0:	6a21      	ldr	r1, [r4, #32]
 8022bf2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8022bf4:	4643      	mov	r3, r8
 8022bf6:	463a      	mov	r2, r7
 8022bf8:	4628      	mov	r0, r5
 8022bfa:	47b0      	blx	r6
 8022bfc:	2800      	cmp	r0, #0
 8022bfe:	dc06      	bgt.n	8022c0e <__sflush_r+0xfe>
 8022c00:	89a3      	ldrh	r3, [r4, #12]
 8022c02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022c06:	81a3      	strh	r3, [r4, #12]
 8022c08:	f04f 30ff 	mov.w	r0, #4294967295
 8022c0c:	e78e      	b.n	8022b2c <__sflush_r+0x1c>
 8022c0e:	4407      	add	r7, r0
 8022c10:	eba8 0800 	sub.w	r8, r8, r0
 8022c14:	e7e9      	b.n	8022bea <__sflush_r+0xda>
 8022c16:	bf00      	nop
 8022c18:	20400001 	.word	0x20400001

08022c1c <_fflush_r>:
 8022c1c:	b538      	push	{r3, r4, r5, lr}
 8022c1e:	690b      	ldr	r3, [r1, #16]
 8022c20:	4605      	mov	r5, r0
 8022c22:	460c      	mov	r4, r1
 8022c24:	b913      	cbnz	r3, 8022c2c <_fflush_r+0x10>
 8022c26:	2500      	movs	r5, #0
 8022c28:	4628      	mov	r0, r5
 8022c2a:	bd38      	pop	{r3, r4, r5, pc}
 8022c2c:	b118      	cbz	r0, 8022c36 <_fflush_r+0x1a>
 8022c2e:	6983      	ldr	r3, [r0, #24]
 8022c30:	b90b      	cbnz	r3, 8022c36 <_fflush_r+0x1a>
 8022c32:	f000 f887 	bl	8022d44 <__sinit>
 8022c36:	4b14      	ldr	r3, [pc, #80]	; (8022c88 <_fflush_r+0x6c>)
 8022c38:	429c      	cmp	r4, r3
 8022c3a:	d11b      	bne.n	8022c74 <_fflush_r+0x58>
 8022c3c:	686c      	ldr	r4, [r5, #4]
 8022c3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022c42:	2b00      	cmp	r3, #0
 8022c44:	d0ef      	beq.n	8022c26 <_fflush_r+0xa>
 8022c46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8022c48:	07d0      	lsls	r0, r2, #31
 8022c4a:	d404      	bmi.n	8022c56 <_fflush_r+0x3a>
 8022c4c:	0599      	lsls	r1, r3, #22
 8022c4e:	d402      	bmi.n	8022c56 <_fflush_r+0x3a>
 8022c50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022c52:	f000 f927 	bl	8022ea4 <__retarget_lock_acquire_recursive>
 8022c56:	4628      	mov	r0, r5
 8022c58:	4621      	mov	r1, r4
 8022c5a:	f7ff ff59 	bl	8022b10 <__sflush_r>
 8022c5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022c60:	07da      	lsls	r2, r3, #31
 8022c62:	4605      	mov	r5, r0
 8022c64:	d4e0      	bmi.n	8022c28 <_fflush_r+0xc>
 8022c66:	89a3      	ldrh	r3, [r4, #12]
 8022c68:	059b      	lsls	r3, r3, #22
 8022c6a:	d4dd      	bmi.n	8022c28 <_fflush_r+0xc>
 8022c6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022c6e:	f000 f91a 	bl	8022ea6 <__retarget_lock_release_recursive>
 8022c72:	e7d9      	b.n	8022c28 <_fflush_r+0xc>
 8022c74:	4b05      	ldr	r3, [pc, #20]	; (8022c8c <_fflush_r+0x70>)
 8022c76:	429c      	cmp	r4, r3
 8022c78:	d101      	bne.n	8022c7e <_fflush_r+0x62>
 8022c7a:	68ac      	ldr	r4, [r5, #8]
 8022c7c:	e7df      	b.n	8022c3e <_fflush_r+0x22>
 8022c7e:	4b04      	ldr	r3, [pc, #16]	; (8022c90 <_fflush_r+0x74>)
 8022c80:	429c      	cmp	r4, r3
 8022c82:	bf08      	it	eq
 8022c84:	68ec      	ldreq	r4, [r5, #12]
 8022c86:	e7da      	b.n	8022c3e <_fflush_r+0x22>
 8022c88:	08029078 	.word	0x08029078
 8022c8c:	08029098 	.word	0x08029098
 8022c90:	08029058 	.word	0x08029058

08022c94 <std>:
 8022c94:	2300      	movs	r3, #0
 8022c96:	b510      	push	{r4, lr}
 8022c98:	4604      	mov	r4, r0
 8022c9a:	e9c0 3300 	strd	r3, r3, [r0]
 8022c9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8022ca2:	6083      	str	r3, [r0, #8]
 8022ca4:	8181      	strh	r1, [r0, #12]
 8022ca6:	6643      	str	r3, [r0, #100]	; 0x64
 8022ca8:	81c2      	strh	r2, [r0, #14]
 8022caa:	6183      	str	r3, [r0, #24]
 8022cac:	4619      	mov	r1, r3
 8022cae:	2208      	movs	r2, #8
 8022cb0:	305c      	adds	r0, #92	; 0x5c
 8022cb2:	f7ff fb8f 	bl	80223d4 <memset>
 8022cb6:	4b05      	ldr	r3, [pc, #20]	; (8022ccc <std+0x38>)
 8022cb8:	6263      	str	r3, [r4, #36]	; 0x24
 8022cba:	4b05      	ldr	r3, [pc, #20]	; (8022cd0 <std+0x3c>)
 8022cbc:	62a3      	str	r3, [r4, #40]	; 0x28
 8022cbe:	4b05      	ldr	r3, [pc, #20]	; (8022cd4 <std+0x40>)
 8022cc0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8022cc2:	4b05      	ldr	r3, [pc, #20]	; (8022cd8 <std+0x44>)
 8022cc4:	6224      	str	r4, [r4, #32]
 8022cc6:	6323      	str	r3, [r4, #48]	; 0x30
 8022cc8:	bd10      	pop	{r4, pc}
 8022cca:	bf00      	nop
 8022ccc:	080238b1 	.word	0x080238b1
 8022cd0:	080238d3 	.word	0x080238d3
 8022cd4:	0802390b 	.word	0x0802390b
 8022cd8:	0802392f 	.word	0x0802392f

08022cdc <_cleanup_r>:
 8022cdc:	4901      	ldr	r1, [pc, #4]	; (8022ce4 <_cleanup_r+0x8>)
 8022cde:	f000 b8c1 	b.w	8022e64 <_fwalk_reent>
 8022ce2:	bf00      	nop
 8022ce4:	08022c1d 	.word	0x08022c1d

08022ce8 <__sfmoreglue>:
 8022ce8:	b570      	push	{r4, r5, r6, lr}
 8022cea:	2268      	movs	r2, #104	; 0x68
 8022cec:	1e4d      	subs	r5, r1, #1
 8022cee:	4355      	muls	r5, r2
 8022cf0:	460e      	mov	r6, r1
 8022cf2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8022cf6:	f7ff fbe1 	bl	80224bc <_malloc_r>
 8022cfa:	4604      	mov	r4, r0
 8022cfc:	b140      	cbz	r0, 8022d10 <__sfmoreglue+0x28>
 8022cfe:	2100      	movs	r1, #0
 8022d00:	e9c0 1600 	strd	r1, r6, [r0]
 8022d04:	300c      	adds	r0, #12
 8022d06:	60a0      	str	r0, [r4, #8]
 8022d08:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8022d0c:	f7ff fb62 	bl	80223d4 <memset>
 8022d10:	4620      	mov	r0, r4
 8022d12:	bd70      	pop	{r4, r5, r6, pc}

08022d14 <__sfp_lock_acquire>:
 8022d14:	4801      	ldr	r0, [pc, #4]	; (8022d1c <__sfp_lock_acquire+0x8>)
 8022d16:	f000 b8c5 	b.w	8022ea4 <__retarget_lock_acquire_recursive>
 8022d1a:	bf00      	nop
 8022d1c:	200142a9 	.word	0x200142a9

08022d20 <__sfp_lock_release>:
 8022d20:	4801      	ldr	r0, [pc, #4]	; (8022d28 <__sfp_lock_release+0x8>)
 8022d22:	f000 b8c0 	b.w	8022ea6 <__retarget_lock_release_recursive>
 8022d26:	bf00      	nop
 8022d28:	200142a9 	.word	0x200142a9

08022d2c <__sinit_lock_acquire>:
 8022d2c:	4801      	ldr	r0, [pc, #4]	; (8022d34 <__sinit_lock_acquire+0x8>)
 8022d2e:	f000 b8b9 	b.w	8022ea4 <__retarget_lock_acquire_recursive>
 8022d32:	bf00      	nop
 8022d34:	200142aa 	.word	0x200142aa

08022d38 <__sinit_lock_release>:
 8022d38:	4801      	ldr	r0, [pc, #4]	; (8022d40 <__sinit_lock_release+0x8>)
 8022d3a:	f000 b8b4 	b.w	8022ea6 <__retarget_lock_release_recursive>
 8022d3e:	bf00      	nop
 8022d40:	200142aa 	.word	0x200142aa

08022d44 <__sinit>:
 8022d44:	b510      	push	{r4, lr}
 8022d46:	4604      	mov	r4, r0
 8022d48:	f7ff fff0 	bl	8022d2c <__sinit_lock_acquire>
 8022d4c:	69a3      	ldr	r3, [r4, #24]
 8022d4e:	b11b      	cbz	r3, 8022d58 <__sinit+0x14>
 8022d50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022d54:	f7ff bff0 	b.w	8022d38 <__sinit_lock_release>
 8022d58:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8022d5c:	6523      	str	r3, [r4, #80]	; 0x50
 8022d5e:	4b13      	ldr	r3, [pc, #76]	; (8022dac <__sinit+0x68>)
 8022d60:	4a13      	ldr	r2, [pc, #76]	; (8022db0 <__sinit+0x6c>)
 8022d62:	681b      	ldr	r3, [r3, #0]
 8022d64:	62a2      	str	r2, [r4, #40]	; 0x28
 8022d66:	42a3      	cmp	r3, r4
 8022d68:	bf04      	itt	eq
 8022d6a:	2301      	moveq	r3, #1
 8022d6c:	61a3      	streq	r3, [r4, #24]
 8022d6e:	4620      	mov	r0, r4
 8022d70:	f000 f820 	bl	8022db4 <__sfp>
 8022d74:	6060      	str	r0, [r4, #4]
 8022d76:	4620      	mov	r0, r4
 8022d78:	f000 f81c 	bl	8022db4 <__sfp>
 8022d7c:	60a0      	str	r0, [r4, #8]
 8022d7e:	4620      	mov	r0, r4
 8022d80:	f000 f818 	bl	8022db4 <__sfp>
 8022d84:	2200      	movs	r2, #0
 8022d86:	60e0      	str	r0, [r4, #12]
 8022d88:	2104      	movs	r1, #4
 8022d8a:	6860      	ldr	r0, [r4, #4]
 8022d8c:	f7ff ff82 	bl	8022c94 <std>
 8022d90:	68a0      	ldr	r0, [r4, #8]
 8022d92:	2201      	movs	r2, #1
 8022d94:	2109      	movs	r1, #9
 8022d96:	f7ff ff7d 	bl	8022c94 <std>
 8022d9a:	68e0      	ldr	r0, [r4, #12]
 8022d9c:	2202      	movs	r2, #2
 8022d9e:	2112      	movs	r1, #18
 8022da0:	f7ff ff78 	bl	8022c94 <std>
 8022da4:	2301      	movs	r3, #1
 8022da6:	61a3      	str	r3, [r4, #24]
 8022da8:	e7d2      	b.n	8022d50 <__sinit+0xc>
 8022daa:	bf00      	nop
 8022dac:	08028fa4 	.word	0x08028fa4
 8022db0:	08022cdd 	.word	0x08022cdd

08022db4 <__sfp>:
 8022db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022db6:	4607      	mov	r7, r0
 8022db8:	f7ff ffac 	bl	8022d14 <__sfp_lock_acquire>
 8022dbc:	4b1e      	ldr	r3, [pc, #120]	; (8022e38 <__sfp+0x84>)
 8022dbe:	681e      	ldr	r6, [r3, #0]
 8022dc0:	69b3      	ldr	r3, [r6, #24]
 8022dc2:	b913      	cbnz	r3, 8022dca <__sfp+0x16>
 8022dc4:	4630      	mov	r0, r6
 8022dc6:	f7ff ffbd 	bl	8022d44 <__sinit>
 8022dca:	3648      	adds	r6, #72	; 0x48
 8022dcc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8022dd0:	3b01      	subs	r3, #1
 8022dd2:	d503      	bpl.n	8022ddc <__sfp+0x28>
 8022dd4:	6833      	ldr	r3, [r6, #0]
 8022dd6:	b30b      	cbz	r3, 8022e1c <__sfp+0x68>
 8022dd8:	6836      	ldr	r6, [r6, #0]
 8022dda:	e7f7      	b.n	8022dcc <__sfp+0x18>
 8022ddc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8022de0:	b9d5      	cbnz	r5, 8022e18 <__sfp+0x64>
 8022de2:	4b16      	ldr	r3, [pc, #88]	; (8022e3c <__sfp+0x88>)
 8022de4:	60e3      	str	r3, [r4, #12]
 8022de6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8022dea:	6665      	str	r5, [r4, #100]	; 0x64
 8022dec:	f000 f859 	bl	8022ea2 <__retarget_lock_init_recursive>
 8022df0:	f7ff ff96 	bl	8022d20 <__sfp_lock_release>
 8022df4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8022df8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8022dfc:	6025      	str	r5, [r4, #0]
 8022dfe:	61a5      	str	r5, [r4, #24]
 8022e00:	2208      	movs	r2, #8
 8022e02:	4629      	mov	r1, r5
 8022e04:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8022e08:	f7ff fae4 	bl	80223d4 <memset>
 8022e0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8022e10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8022e14:	4620      	mov	r0, r4
 8022e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022e18:	3468      	adds	r4, #104	; 0x68
 8022e1a:	e7d9      	b.n	8022dd0 <__sfp+0x1c>
 8022e1c:	2104      	movs	r1, #4
 8022e1e:	4638      	mov	r0, r7
 8022e20:	f7ff ff62 	bl	8022ce8 <__sfmoreglue>
 8022e24:	4604      	mov	r4, r0
 8022e26:	6030      	str	r0, [r6, #0]
 8022e28:	2800      	cmp	r0, #0
 8022e2a:	d1d5      	bne.n	8022dd8 <__sfp+0x24>
 8022e2c:	f7ff ff78 	bl	8022d20 <__sfp_lock_release>
 8022e30:	230c      	movs	r3, #12
 8022e32:	603b      	str	r3, [r7, #0]
 8022e34:	e7ee      	b.n	8022e14 <__sfp+0x60>
 8022e36:	bf00      	nop
 8022e38:	08028fa4 	.word	0x08028fa4
 8022e3c:	ffff0001 	.word	0xffff0001

08022e40 <fiprintf>:
 8022e40:	b40e      	push	{r1, r2, r3}
 8022e42:	b503      	push	{r0, r1, lr}
 8022e44:	4601      	mov	r1, r0
 8022e46:	ab03      	add	r3, sp, #12
 8022e48:	4805      	ldr	r0, [pc, #20]	; (8022e60 <fiprintf+0x20>)
 8022e4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8022e4e:	6800      	ldr	r0, [r0, #0]
 8022e50:	9301      	str	r3, [sp, #4]
 8022e52:	f000 fa21 	bl	8023298 <_vfiprintf_r>
 8022e56:	b002      	add	sp, #8
 8022e58:	f85d eb04 	ldr.w	lr, [sp], #4
 8022e5c:	b003      	add	sp, #12
 8022e5e:	4770      	bx	lr
 8022e60:	20000140 	.word	0x20000140

08022e64 <_fwalk_reent>:
 8022e64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022e68:	4606      	mov	r6, r0
 8022e6a:	4688      	mov	r8, r1
 8022e6c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8022e70:	2700      	movs	r7, #0
 8022e72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8022e76:	f1b9 0901 	subs.w	r9, r9, #1
 8022e7a:	d505      	bpl.n	8022e88 <_fwalk_reent+0x24>
 8022e7c:	6824      	ldr	r4, [r4, #0]
 8022e7e:	2c00      	cmp	r4, #0
 8022e80:	d1f7      	bne.n	8022e72 <_fwalk_reent+0xe>
 8022e82:	4638      	mov	r0, r7
 8022e84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022e88:	89ab      	ldrh	r3, [r5, #12]
 8022e8a:	2b01      	cmp	r3, #1
 8022e8c:	d907      	bls.n	8022e9e <_fwalk_reent+0x3a>
 8022e8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8022e92:	3301      	adds	r3, #1
 8022e94:	d003      	beq.n	8022e9e <_fwalk_reent+0x3a>
 8022e96:	4629      	mov	r1, r5
 8022e98:	4630      	mov	r0, r6
 8022e9a:	47c0      	blx	r8
 8022e9c:	4307      	orrs	r7, r0
 8022e9e:	3568      	adds	r5, #104	; 0x68
 8022ea0:	e7e9      	b.n	8022e76 <_fwalk_reent+0x12>

08022ea2 <__retarget_lock_init_recursive>:
 8022ea2:	4770      	bx	lr

08022ea4 <__retarget_lock_acquire_recursive>:
 8022ea4:	4770      	bx	lr

08022ea6 <__retarget_lock_release_recursive>:
 8022ea6:	4770      	bx	lr

08022ea8 <__swhatbuf_r>:
 8022ea8:	b570      	push	{r4, r5, r6, lr}
 8022eaa:	460e      	mov	r6, r1
 8022eac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022eb0:	2900      	cmp	r1, #0
 8022eb2:	b096      	sub	sp, #88	; 0x58
 8022eb4:	4614      	mov	r4, r2
 8022eb6:	461d      	mov	r5, r3
 8022eb8:	da08      	bge.n	8022ecc <__swhatbuf_r+0x24>
 8022eba:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8022ebe:	2200      	movs	r2, #0
 8022ec0:	602a      	str	r2, [r5, #0]
 8022ec2:	061a      	lsls	r2, r3, #24
 8022ec4:	d410      	bmi.n	8022ee8 <__swhatbuf_r+0x40>
 8022ec6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022eca:	e00e      	b.n	8022eea <__swhatbuf_r+0x42>
 8022ecc:	466a      	mov	r2, sp
 8022ece:	f000 fd5d 	bl	802398c <_fstat_r>
 8022ed2:	2800      	cmp	r0, #0
 8022ed4:	dbf1      	blt.n	8022eba <__swhatbuf_r+0x12>
 8022ed6:	9a01      	ldr	r2, [sp, #4]
 8022ed8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8022edc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8022ee0:	425a      	negs	r2, r3
 8022ee2:	415a      	adcs	r2, r3
 8022ee4:	602a      	str	r2, [r5, #0]
 8022ee6:	e7ee      	b.n	8022ec6 <__swhatbuf_r+0x1e>
 8022ee8:	2340      	movs	r3, #64	; 0x40
 8022eea:	2000      	movs	r0, #0
 8022eec:	6023      	str	r3, [r4, #0]
 8022eee:	b016      	add	sp, #88	; 0x58
 8022ef0:	bd70      	pop	{r4, r5, r6, pc}
	...

08022ef4 <__smakebuf_r>:
 8022ef4:	898b      	ldrh	r3, [r1, #12]
 8022ef6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8022ef8:	079d      	lsls	r5, r3, #30
 8022efa:	4606      	mov	r6, r0
 8022efc:	460c      	mov	r4, r1
 8022efe:	d507      	bpl.n	8022f10 <__smakebuf_r+0x1c>
 8022f00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8022f04:	6023      	str	r3, [r4, #0]
 8022f06:	6123      	str	r3, [r4, #16]
 8022f08:	2301      	movs	r3, #1
 8022f0a:	6163      	str	r3, [r4, #20]
 8022f0c:	b002      	add	sp, #8
 8022f0e:	bd70      	pop	{r4, r5, r6, pc}
 8022f10:	ab01      	add	r3, sp, #4
 8022f12:	466a      	mov	r2, sp
 8022f14:	f7ff ffc8 	bl	8022ea8 <__swhatbuf_r>
 8022f18:	9900      	ldr	r1, [sp, #0]
 8022f1a:	4605      	mov	r5, r0
 8022f1c:	4630      	mov	r0, r6
 8022f1e:	f7ff facd 	bl	80224bc <_malloc_r>
 8022f22:	b948      	cbnz	r0, 8022f38 <__smakebuf_r+0x44>
 8022f24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022f28:	059a      	lsls	r2, r3, #22
 8022f2a:	d4ef      	bmi.n	8022f0c <__smakebuf_r+0x18>
 8022f2c:	f023 0303 	bic.w	r3, r3, #3
 8022f30:	f043 0302 	orr.w	r3, r3, #2
 8022f34:	81a3      	strh	r3, [r4, #12]
 8022f36:	e7e3      	b.n	8022f00 <__smakebuf_r+0xc>
 8022f38:	4b0d      	ldr	r3, [pc, #52]	; (8022f70 <__smakebuf_r+0x7c>)
 8022f3a:	62b3      	str	r3, [r6, #40]	; 0x28
 8022f3c:	89a3      	ldrh	r3, [r4, #12]
 8022f3e:	6020      	str	r0, [r4, #0]
 8022f40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022f44:	81a3      	strh	r3, [r4, #12]
 8022f46:	9b00      	ldr	r3, [sp, #0]
 8022f48:	6163      	str	r3, [r4, #20]
 8022f4a:	9b01      	ldr	r3, [sp, #4]
 8022f4c:	6120      	str	r0, [r4, #16]
 8022f4e:	b15b      	cbz	r3, 8022f68 <__smakebuf_r+0x74>
 8022f50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022f54:	4630      	mov	r0, r6
 8022f56:	f000 fd2b 	bl	80239b0 <_isatty_r>
 8022f5a:	b128      	cbz	r0, 8022f68 <__smakebuf_r+0x74>
 8022f5c:	89a3      	ldrh	r3, [r4, #12]
 8022f5e:	f023 0303 	bic.w	r3, r3, #3
 8022f62:	f043 0301 	orr.w	r3, r3, #1
 8022f66:	81a3      	strh	r3, [r4, #12]
 8022f68:	89a0      	ldrh	r0, [r4, #12]
 8022f6a:	4305      	orrs	r5, r0
 8022f6c:	81a5      	strh	r5, [r4, #12]
 8022f6e:	e7cd      	b.n	8022f0c <__smakebuf_r+0x18>
 8022f70:	08022cdd 	.word	0x08022cdd

08022f74 <__malloc_lock>:
 8022f74:	4801      	ldr	r0, [pc, #4]	; (8022f7c <__malloc_lock+0x8>)
 8022f76:	f7ff bf95 	b.w	8022ea4 <__retarget_lock_acquire_recursive>
 8022f7a:	bf00      	nop
 8022f7c:	200142a8 	.word	0x200142a8

08022f80 <__malloc_unlock>:
 8022f80:	4801      	ldr	r0, [pc, #4]	; (8022f88 <__malloc_unlock+0x8>)
 8022f82:	f7ff bf90 	b.w	8022ea6 <__retarget_lock_release_recursive>
 8022f86:	bf00      	nop
 8022f88:	200142a8 	.word	0x200142a8

08022f8c <__ssputs_r>:
 8022f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022f90:	688e      	ldr	r6, [r1, #8]
 8022f92:	429e      	cmp	r6, r3
 8022f94:	4682      	mov	sl, r0
 8022f96:	460c      	mov	r4, r1
 8022f98:	4690      	mov	r8, r2
 8022f9a:	461f      	mov	r7, r3
 8022f9c:	d838      	bhi.n	8023010 <__ssputs_r+0x84>
 8022f9e:	898a      	ldrh	r2, [r1, #12]
 8022fa0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8022fa4:	d032      	beq.n	802300c <__ssputs_r+0x80>
 8022fa6:	6825      	ldr	r5, [r4, #0]
 8022fa8:	6909      	ldr	r1, [r1, #16]
 8022faa:	eba5 0901 	sub.w	r9, r5, r1
 8022fae:	6965      	ldr	r5, [r4, #20]
 8022fb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022fb4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8022fb8:	3301      	adds	r3, #1
 8022fba:	444b      	add	r3, r9
 8022fbc:	106d      	asrs	r5, r5, #1
 8022fbe:	429d      	cmp	r5, r3
 8022fc0:	bf38      	it	cc
 8022fc2:	461d      	movcc	r5, r3
 8022fc4:	0553      	lsls	r3, r2, #21
 8022fc6:	d531      	bpl.n	802302c <__ssputs_r+0xa0>
 8022fc8:	4629      	mov	r1, r5
 8022fca:	f7ff fa77 	bl	80224bc <_malloc_r>
 8022fce:	4606      	mov	r6, r0
 8022fd0:	b950      	cbnz	r0, 8022fe8 <__ssputs_r+0x5c>
 8022fd2:	230c      	movs	r3, #12
 8022fd4:	f8ca 3000 	str.w	r3, [sl]
 8022fd8:	89a3      	ldrh	r3, [r4, #12]
 8022fda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022fde:	81a3      	strh	r3, [r4, #12]
 8022fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8022fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022fe8:	6921      	ldr	r1, [r4, #16]
 8022fea:	464a      	mov	r2, r9
 8022fec:	f7ff f9ca 	bl	8022384 <memcpy>
 8022ff0:	89a3      	ldrh	r3, [r4, #12]
 8022ff2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8022ff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022ffa:	81a3      	strh	r3, [r4, #12]
 8022ffc:	6126      	str	r6, [r4, #16]
 8022ffe:	6165      	str	r5, [r4, #20]
 8023000:	444e      	add	r6, r9
 8023002:	eba5 0509 	sub.w	r5, r5, r9
 8023006:	6026      	str	r6, [r4, #0]
 8023008:	60a5      	str	r5, [r4, #8]
 802300a:	463e      	mov	r6, r7
 802300c:	42be      	cmp	r6, r7
 802300e:	d900      	bls.n	8023012 <__ssputs_r+0x86>
 8023010:	463e      	mov	r6, r7
 8023012:	6820      	ldr	r0, [r4, #0]
 8023014:	4632      	mov	r2, r6
 8023016:	4641      	mov	r1, r8
 8023018:	f7ff f9c2 	bl	80223a0 <memmove>
 802301c:	68a3      	ldr	r3, [r4, #8]
 802301e:	1b9b      	subs	r3, r3, r6
 8023020:	60a3      	str	r3, [r4, #8]
 8023022:	6823      	ldr	r3, [r4, #0]
 8023024:	4433      	add	r3, r6
 8023026:	6023      	str	r3, [r4, #0]
 8023028:	2000      	movs	r0, #0
 802302a:	e7db      	b.n	8022fe4 <__ssputs_r+0x58>
 802302c:	462a      	mov	r2, r5
 802302e:	f000 fce1 	bl	80239f4 <_realloc_r>
 8023032:	4606      	mov	r6, r0
 8023034:	2800      	cmp	r0, #0
 8023036:	d1e1      	bne.n	8022ffc <__ssputs_r+0x70>
 8023038:	6921      	ldr	r1, [r4, #16]
 802303a:	4650      	mov	r0, sl
 802303c:	f7ff f9d2 	bl	80223e4 <_free_r>
 8023040:	e7c7      	b.n	8022fd2 <__ssputs_r+0x46>
	...

08023044 <_svfiprintf_r>:
 8023044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023048:	4698      	mov	r8, r3
 802304a:	898b      	ldrh	r3, [r1, #12]
 802304c:	061b      	lsls	r3, r3, #24
 802304e:	b09d      	sub	sp, #116	; 0x74
 8023050:	4607      	mov	r7, r0
 8023052:	460d      	mov	r5, r1
 8023054:	4614      	mov	r4, r2
 8023056:	d50e      	bpl.n	8023076 <_svfiprintf_r+0x32>
 8023058:	690b      	ldr	r3, [r1, #16]
 802305a:	b963      	cbnz	r3, 8023076 <_svfiprintf_r+0x32>
 802305c:	2140      	movs	r1, #64	; 0x40
 802305e:	f7ff fa2d 	bl	80224bc <_malloc_r>
 8023062:	6028      	str	r0, [r5, #0]
 8023064:	6128      	str	r0, [r5, #16]
 8023066:	b920      	cbnz	r0, 8023072 <_svfiprintf_r+0x2e>
 8023068:	230c      	movs	r3, #12
 802306a:	603b      	str	r3, [r7, #0]
 802306c:	f04f 30ff 	mov.w	r0, #4294967295
 8023070:	e0d1      	b.n	8023216 <_svfiprintf_r+0x1d2>
 8023072:	2340      	movs	r3, #64	; 0x40
 8023074:	616b      	str	r3, [r5, #20]
 8023076:	2300      	movs	r3, #0
 8023078:	9309      	str	r3, [sp, #36]	; 0x24
 802307a:	2320      	movs	r3, #32
 802307c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8023080:	f8cd 800c 	str.w	r8, [sp, #12]
 8023084:	2330      	movs	r3, #48	; 0x30
 8023086:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8023230 <_svfiprintf_r+0x1ec>
 802308a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802308e:	f04f 0901 	mov.w	r9, #1
 8023092:	4623      	mov	r3, r4
 8023094:	469a      	mov	sl, r3
 8023096:	f813 2b01 	ldrb.w	r2, [r3], #1
 802309a:	b10a      	cbz	r2, 80230a0 <_svfiprintf_r+0x5c>
 802309c:	2a25      	cmp	r2, #37	; 0x25
 802309e:	d1f9      	bne.n	8023094 <_svfiprintf_r+0x50>
 80230a0:	ebba 0b04 	subs.w	fp, sl, r4
 80230a4:	d00b      	beq.n	80230be <_svfiprintf_r+0x7a>
 80230a6:	465b      	mov	r3, fp
 80230a8:	4622      	mov	r2, r4
 80230aa:	4629      	mov	r1, r5
 80230ac:	4638      	mov	r0, r7
 80230ae:	f7ff ff6d 	bl	8022f8c <__ssputs_r>
 80230b2:	3001      	adds	r0, #1
 80230b4:	f000 80aa 	beq.w	802320c <_svfiprintf_r+0x1c8>
 80230b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80230ba:	445a      	add	r2, fp
 80230bc:	9209      	str	r2, [sp, #36]	; 0x24
 80230be:	f89a 3000 	ldrb.w	r3, [sl]
 80230c2:	2b00      	cmp	r3, #0
 80230c4:	f000 80a2 	beq.w	802320c <_svfiprintf_r+0x1c8>
 80230c8:	2300      	movs	r3, #0
 80230ca:	f04f 32ff 	mov.w	r2, #4294967295
 80230ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80230d2:	f10a 0a01 	add.w	sl, sl, #1
 80230d6:	9304      	str	r3, [sp, #16]
 80230d8:	9307      	str	r3, [sp, #28]
 80230da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80230de:	931a      	str	r3, [sp, #104]	; 0x68
 80230e0:	4654      	mov	r4, sl
 80230e2:	2205      	movs	r2, #5
 80230e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80230e8:	4851      	ldr	r0, [pc, #324]	; (8023230 <_svfiprintf_r+0x1ec>)
 80230ea:	f7dd f8c1 	bl	8000270 <memchr>
 80230ee:	9a04      	ldr	r2, [sp, #16]
 80230f0:	b9d8      	cbnz	r0, 802312a <_svfiprintf_r+0xe6>
 80230f2:	06d0      	lsls	r0, r2, #27
 80230f4:	bf44      	itt	mi
 80230f6:	2320      	movmi	r3, #32
 80230f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80230fc:	0711      	lsls	r1, r2, #28
 80230fe:	bf44      	itt	mi
 8023100:	232b      	movmi	r3, #43	; 0x2b
 8023102:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023106:	f89a 3000 	ldrb.w	r3, [sl]
 802310a:	2b2a      	cmp	r3, #42	; 0x2a
 802310c:	d015      	beq.n	802313a <_svfiprintf_r+0xf6>
 802310e:	9a07      	ldr	r2, [sp, #28]
 8023110:	4654      	mov	r4, sl
 8023112:	2000      	movs	r0, #0
 8023114:	f04f 0c0a 	mov.w	ip, #10
 8023118:	4621      	mov	r1, r4
 802311a:	f811 3b01 	ldrb.w	r3, [r1], #1
 802311e:	3b30      	subs	r3, #48	; 0x30
 8023120:	2b09      	cmp	r3, #9
 8023122:	d94e      	bls.n	80231c2 <_svfiprintf_r+0x17e>
 8023124:	b1b0      	cbz	r0, 8023154 <_svfiprintf_r+0x110>
 8023126:	9207      	str	r2, [sp, #28]
 8023128:	e014      	b.n	8023154 <_svfiprintf_r+0x110>
 802312a:	eba0 0308 	sub.w	r3, r0, r8
 802312e:	fa09 f303 	lsl.w	r3, r9, r3
 8023132:	4313      	orrs	r3, r2
 8023134:	9304      	str	r3, [sp, #16]
 8023136:	46a2      	mov	sl, r4
 8023138:	e7d2      	b.n	80230e0 <_svfiprintf_r+0x9c>
 802313a:	9b03      	ldr	r3, [sp, #12]
 802313c:	1d19      	adds	r1, r3, #4
 802313e:	681b      	ldr	r3, [r3, #0]
 8023140:	9103      	str	r1, [sp, #12]
 8023142:	2b00      	cmp	r3, #0
 8023144:	bfbb      	ittet	lt
 8023146:	425b      	neglt	r3, r3
 8023148:	f042 0202 	orrlt.w	r2, r2, #2
 802314c:	9307      	strge	r3, [sp, #28]
 802314e:	9307      	strlt	r3, [sp, #28]
 8023150:	bfb8      	it	lt
 8023152:	9204      	strlt	r2, [sp, #16]
 8023154:	7823      	ldrb	r3, [r4, #0]
 8023156:	2b2e      	cmp	r3, #46	; 0x2e
 8023158:	d10c      	bne.n	8023174 <_svfiprintf_r+0x130>
 802315a:	7863      	ldrb	r3, [r4, #1]
 802315c:	2b2a      	cmp	r3, #42	; 0x2a
 802315e:	d135      	bne.n	80231cc <_svfiprintf_r+0x188>
 8023160:	9b03      	ldr	r3, [sp, #12]
 8023162:	1d1a      	adds	r2, r3, #4
 8023164:	681b      	ldr	r3, [r3, #0]
 8023166:	9203      	str	r2, [sp, #12]
 8023168:	2b00      	cmp	r3, #0
 802316a:	bfb8      	it	lt
 802316c:	f04f 33ff 	movlt.w	r3, #4294967295
 8023170:	3402      	adds	r4, #2
 8023172:	9305      	str	r3, [sp, #20]
 8023174:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8023240 <_svfiprintf_r+0x1fc>
 8023178:	7821      	ldrb	r1, [r4, #0]
 802317a:	2203      	movs	r2, #3
 802317c:	4650      	mov	r0, sl
 802317e:	f7dd f877 	bl	8000270 <memchr>
 8023182:	b140      	cbz	r0, 8023196 <_svfiprintf_r+0x152>
 8023184:	2340      	movs	r3, #64	; 0x40
 8023186:	eba0 000a 	sub.w	r0, r0, sl
 802318a:	fa03 f000 	lsl.w	r0, r3, r0
 802318e:	9b04      	ldr	r3, [sp, #16]
 8023190:	4303      	orrs	r3, r0
 8023192:	3401      	adds	r4, #1
 8023194:	9304      	str	r3, [sp, #16]
 8023196:	f814 1b01 	ldrb.w	r1, [r4], #1
 802319a:	4826      	ldr	r0, [pc, #152]	; (8023234 <_svfiprintf_r+0x1f0>)
 802319c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80231a0:	2206      	movs	r2, #6
 80231a2:	f7dd f865 	bl	8000270 <memchr>
 80231a6:	2800      	cmp	r0, #0
 80231a8:	d038      	beq.n	802321c <_svfiprintf_r+0x1d8>
 80231aa:	4b23      	ldr	r3, [pc, #140]	; (8023238 <_svfiprintf_r+0x1f4>)
 80231ac:	bb1b      	cbnz	r3, 80231f6 <_svfiprintf_r+0x1b2>
 80231ae:	9b03      	ldr	r3, [sp, #12]
 80231b0:	3307      	adds	r3, #7
 80231b2:	f023 0307 	bic.w	r3, r3, #7
 80231b6:	3308      	adds	r3, #8
 80231b8:	9303      	str	r3, [sp, #12]
 80231ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80231bc:	4433      	add	r3, r6
 80231be:	9309      	str	r3, [sp, #36]	; 0x24
 80231c0:	e767      	b.n	8023092 <_svfiprintf_r+0x4e>
 80231c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80231c6:	460c      	mov	r4, r1
 80231c8:	2001      	movs	r0, #1
 80231ca:	e7a5      	b.n	8023118 <_svfiprintf_r+0xd4>
 80231cc:	2300      	movs	r3, #0
 80231ce:	3401      	adds	r4, #1
 80231d0:	9305      	str	r3, [sp, #20]
 80231d2:	4619      	mov	r1, r3
 80231d4:	f04f 0c0a 	mov.w	ip, #10
 80231d8:	4620      	mov	r0, r4
 80231da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80231de:	3a30      	subs	r2, #48	; 0x30
 80231e0:	2a09      	cmp	r2, #9
 80231e2:	d903      	bls.n	80231ec <_svfiprintf_r+0x1a8>
 80231e4:	2b00      	cmp	r3, #0
 80231e6:	d0c5      	beq.n	8023174 <_svfiprintf_r+0x130>
 80231e8:	9105      	str	r1, [sp, #20]
 80231ea:	e7c3      	b.n	8023174 <_svfiprintf_r+0x130>
 80231ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80231f0:	4604      	mov	r4, r0
 80231f2:	2301      	movs	r3, #1
 80231f4:	e7f0      	b.n	80231d8 <_svfiprintf_r+0x194>
 80231f6:	ab03      	add	r3, sp, #12
 80231f8:	9300      	str	r3, [sp, #0]
 80231fa:	462a      	mov	r2, r5
 80231fc:	4b0f      	ldr	r3, [pc, #60]	; (802323c <_svfiprintf_r+0x1f8>)
 80231fe:	a904      	add	r1, sp, #16
 8023200:	4638      	mov	r0, r7
 8023202:	f3af 8000 	nop.w
 8023206:	1c42      	adds	r2, r0, #1
 8023208:	4606      	mov	r6, r0
 802320a:	d1d6      	bne.n	80231ba <_svfiprintf_r+0x176>
 802320c:	89ab      	ldrh	r3, [r5, #12]
 802320e:	065b      	lsls	r3, r3, #25
 8023210:	f53f af2c 	bmi.w	802306c <_svfiprintf_r+0x28>
 8023214:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023216:	b01d      	add	sp, #116	; 0x74
 8023218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802321c:	ab03      	add	r3, sp, #12
 802321e:	9300      	str	r3, [sp, #0]
 8023220:	462a      	mov	r2, r5
 8023222:	4b06      	ldr	r3, [pc, #24]	; (802323c <_svfiprintf_r+0x1f8>)
 8023224:	a904      	add	r1, sp, #16
 8023226:	4638      	mov	r0, r7
 8023228:	f000 f9d4 	bl	80235d4 <_printf_i>
 802322c:	e7eb      	b.n	8023206 <_svfiprintf_r+0x1c2>
 802322e:	bf00      	nop
 8023230:	080290b8 	.word	0x080290b8
 8023234:	080290c2 	.word	0x080290c2
 8023238:	00000000 	.word	0x00000000
 802323c:	08022f8d 	.word	0x08022f8d
 8023240:	080290be 	.word	0x080290be

08023244 <__sfputc_r>:
 8023244:	6893      	ldr	r3, [r2, #8]
 8023246:	3b01      	subs	r3, #1
 8023248:	2b00      	cmp	r3, #0
 802324a:	b410      	push	{r4}
 802324c:	6093      	str	r3, [r2, #8]
 802324e:	da08      	bge.n	8023262 <__sfputc_r+0x1e>
 8023250:	6994      	ldr	r4, [r2, #24]
 8023252:	42a3      	cmp	r3, r4
 8023254:	db01      	blt.n	802325a <__sfputc_r+0x16>
 8023256:	290a      	cmp	r1, #10
 8023258:	d103      	bne.n	8023262 <__sfputc_r+0x1e>
 802325a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802325e:	f7ff bb79 	b.w	8022954 <__swbuf_r>
 8023262:	6813      	ldr	r3, [r2, #0]
 8023264:	1c58      	adds	r0, r3, #1
 8023266:	6010      	str	r0, [r2, #0]
 8023268:	7019      	strb	r1, [r3, #0]
 802326a:	4608      	mov	r0, r1
 802326c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023270:	4770      	bx	lr

08023272 <__sfputs_r>:
 8023272:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023274:	4606      	mov	r6, r0
 8023276:	460f      	mov	r7, r1
 8023278:	4614      	mov	r4, r2
 802327a:	18d5      	adds	r5, r2, r3
 802327c:	42ac      	cmp	r4, r5
 802327e:	d101      	bne.n	8023284 <__sfputs_r+0x12>
 8023280:	2000      	movs	r0, #0
 8023282:	e007      	b.n	8023294 <__sfputs_r+0x22>
 8023284:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023288:	463a      	mov	r2, r7
 802328a:	4630      	mov	r0, r6
 802328c:	f7ff ffda 	bl	8023244 <__sfputc_r>
 8023290:	1c43      	adds	r3, r0, #1
 8023292:	d1f3      	bne.n	802327c <__sfputs_r+0xa>
 8023294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08023298 <_vfiprintf_r>:
 8023298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802329c:	460d      	mov	r5, r1
 802329e:	b09d      	sub	sp, #116	; 0x74
 80232a0:	4614      	mov	r4, r2
 80232a2:	4698      	mov	r8, r3
 80232a4:	4606      	mov	r6, r0
 80232a6:	b118      	cbz	r0, 80232b0 <_vfiprintf_r+0x18>
 80232a8:	6983      	ldr	r3, [r0, #24]
 80232aa:	b90b      	cbnz	r3, 80232b0 <_vfiprintf_r+0x18>
 80232ac:	f7ff fd4a 	bl	8022d44 <__sinit>
 80232b0:	4b89      	ldr	r3, [pc, #548]	; (80234d8 <_vfiprintf_r+0x240>)
 80232b2:	429d      	cmp	r5, r3
 80232b4:	d11b      	bne.n	80232ee <_vfiprintf_r+0x56>
 80232b6:	6875      	ldr	r5, [r6, #4]
 80232b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80232ba:	07d9      	lsls	r1, r3, #31
 80232bc:	d405      	bmi.n	80232ca <_vfiprintf_r+0x32>
 80232be:	89ab      	ldrh	r3, [r5, #12]
 80232c0:	059a      	lsls	r2, r3, #22
 80232c2:	d402      	bmi.n	80232ca <_vfiprintf_r+0x32>
 80232c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80232c6:	f7ff fded 	bl	8022ea4 <__retarget_lock_acquire_recursive>
 80232ca:	89ab      	ldrh	r3, [r5, #12]
 80232cc:	071b      	lsls	r3, r3, #28
 80232ce:	d501      	bpl.n	80232d4 <_vfiprintf_r+0x3c>
 80232d0:	692b      	ldr	r3, [r5, #16]
 80232d2:	b9eb      	cbnz	r3, 8023310 <_vfiprintf_r+0x78>
 80232d4:	4629      	mov	r1, r5
 80232d6:	4630      	mov	r0, r6
 80232d8:	f7ff fb8e 	bl	80229f8 <__swsetup_r>
 80232dc:	b1c0      	cbz	r0, 8023310 <_vfiprintf_r+0x78>
 80232de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80232e0:	07dc      	lsls	r4, r3, #31
 80232e2:	d50e      	bpl.n	8023302 <_vfiprintf_r+0x6a>
 80232e4:	f04f 30ff 	mov.w	r0, #4294967295
 80232e8:	b01d      	add	sp, #116	; 0x74
 80232ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80232ee:	4b7b      	ldr	r3, [pc, #492]	; (80234dc <_vfiprintf_r+0x244>)
 80232f0:	429d      	cmp	r5, r3
 80232f2:	d101      	bne.n	80232f8 <_vfiprintf_r+0x60>
 80232f4:	68b5      	ldr	r5, [r6, #8]
 80232f6:	e7df      	b.n	80232b8 <_vfiprintf_r+0x20>
 80232f8:	4b79      	ldr	r3, [pc, #484]	; (80234e0 <_vfiprintf_r+0x248>)
 80232fa:	429d      	cmp	r5, r3
 80232fc:	bf08      	it	eq
 80232fe:	68f5      	ldreq	r5, [r6, #12]
 8023300:	e7da      	b.n	80232b8 <_vfiprintf_r+0x20>
 8023302:	89ab      	ldrh	r3, [r5, #12]
 8023304:	0598      	lsls	r0, r3, #22
 8023306:	d4ed      	bmi.n	80232e4 <_vfiprintf_r+0x4c>
 8023308:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802330a:	f7ff fdcc 	bl	8022ea6 <__retarget_lock_release_recursive>
 802330e:	e7e9      	b.n	80232e4 <_vfiprintf_r+0x4c>
 8023310:	2300      	movs	r3, #0
 8023312:	9309      	str	r3, [sp, #36]	; 0x24
 8023314:	2320      	movs	r3, #32
 8023316:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802331a:	f8cd 800c 	str.w	r8, [sp, #12]
 802331e:	2330      	movs	r3, #48	; 0x30
 8023320:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80234e4 <_vfiprintf_r+0x24c>
 8023324:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8023328:	f04f 0901 	mov.w	r9, #1
 802332c:	4623      	mov	r3, r4
 802332e:	469a      	mov	sl, r3
 8023330:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023334:	b10a      	cbz	r2, 802333a <_vfiprintf_r+0xa2>
 8023336:	2a25      	cmp	r2, #37	; 0x25
 8023338:	d1f9      	bne.n	802332e <_vfiprintf_r+0x96>
 802333a:	ebba 0b04 	subs.w	fp, sl, r4
 802333e:	d00b      	beq.n	8023358 <_vfiprintf_r+0xc0>
 8023340:	465b      	mov	r3, fp
 8023342:	4622      	mov	r2, r4
 8023344:	4629      	mov	r1, r5
 8023346:	4630      	mov	r0, r6
 8023348:	f7ff ff93 	bl	8023272 <__sfputs_r>
 802334c:	3001      	adds	r0, #1
 802334e:	f000 80aa 	beq.w	80234a6 <_vfiprintf_r+0x20e>
 8023352:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023354:	445a      	add	r2, fp
 8023356:	9209      	str	r2, [sp, #36]	; 0x24
 8023358:	f89a 3000 	ldrb.w	r3, [sl]
 802335c:	2b00      	cmp	r3, #0
 802335e:	f000 80a2 	beq.w	80234a6 <_vfiprintf_r+0x20e>
 8023362:	2300      	movs	r3, #0
 8023364:	f04f 32ff 	mov.w	r2, #4294967295
 8023368:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802336c:	f10a 0a01 	add.w	sl, sl, #1
 8023370:	9304      	str	r3, [sp, #16]
 8023372:	9307      	str	r3, [sp, #28]
 8023374:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8023378:	931a      	str	r3, [sp, #104]	; 0x68
 802337a:	4654      	mov	r4, sl
 802337c:	2205      	movs	r2, #5
 802337e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023382:	4858      	ldr	r0, [pc, #352]	; (80234e4 <_vfiprintf_r+0x24c>)
 8023384:	f7dc ff74 	bl	8000270 <memchr>
 8023388:	9a04      	ldr	r2, [sp, #16]
 802338a:	b9d8      	cbnz	r0, 80233c4 <_vfiprintf_r+0x12c>
 802338c:	06d1      	lsls	r1, r2, #27
 802338e:	bf44      	itt	mi
 8023390:	2320      	movmi	r3, #32
 8023392:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023396:	0713      	lsls	r3, r2, #28
 8023398:	bf44      	itt	mi
 802339a:	232b      	movmi	r3, #43	; 0x2b
 802339c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80233a0:	f89a 3000 	ldrb.w	r3, [sl]
 80233a4:	2b2a      	cmp	r3, #42	; 0x2a
 80233a6:	d015      	beq.n	80233d4 <_vfiprintf_r+0x13c>
 80233a8:	9a07      	ldr	r2, [sp, #28]
 80233aa:	4654      	mov	r4, sl
 80233ac:	2000      	movs	r0, #0
 80233ae:	f04f 0c0a 	mov.w	ip, #10
 80233b2:	4621      	mov	r1, r4
 80233b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80233b8:	3b30      	subs	r3, #48	; 0x30
 80233ba:	2b09      	cmp	r3, #9
 80233bc:	d94e      	bls.n	802345c <_vfiprintf_r+0x1c4>
 80233be:	b1b0      	cbz	r0, 80233ee <_vfiprintf_r+0x156>
 80233c0:	9207      	str	r2, [sp, #28]
 80233c2:	e014      	b.n	80233ee <_vfiprintf_r+0x156>
 80233c4:	eba0 0308 	sub.w	r3, r0, r8
 80233c8:	fa09 f303 	lsl.w	r3, r9, r3
 80233cc:	4313      	orrs	r3, r2
 80233ce:	9304      	str	r3, [sp, #16]
 80233d0:	46a2      	mov	sl, r4
 80233d2:	e7d2      	b.n	802337a <_vfiprintf_r+0xe2>
 80233d4:	9b03      	ldr	r3, [sp, #12]
 80233d6:	1d19      	adds	r1, r3, #4
 80233d8:	681b      	ldr	r3, [r3, #0]
 80233da:	9103      	str	r1, [sp, #12]
 80233dc:	2b00      	cmp	r3, #0
 80233de:	bfbb      	ittet	lt
 80233e0:	425b      	neglt	r3, r3
 80233e2:	f042 0202 	orrlt.w	r2, r2, #2
 80233e6:	9307      	strge	r3, [sp, #28]
 80233e8:	9307      	strlt	r3, [sp, #28]
 80233ea:	bfb8      	it	lt
 80233ec:	9204      	strlt	r2, [sp, #16]
 80233ee:	7823      	ldrb	r3, [r4, #0]
 80233f0:	2b2e      	cmp	r3, #46	; 0x2e
 80233f2:	d10c      	bne.n	802340e <_vfiprintf_r+0x176>
 80233f4:	7863      	ldrb	r3, [r4, #1]
 80233f6:	2b2a      	cmp	r3, #42	; 0x2a
 80233f8:	d135      	bne.n	8023466 <_vfiprintf_r+0x1ce>
 80233fa:	9b03      	ldr	r3, [sp, #12]
 80233fc:	1d1a      	adds	r2, r3, #4
 80233fe:	681b      	ldr	r3, [r3, #0]
 8023400:	9203      	str	r2, [sp, #12]
 8023402:	2b00      	cmp	r3, #0
 8023404:	bfb8      	it	lt
 8023406:	f04f 33ff 	movlt.w	r3, #4294967295
 802340a:	3402      	adds	r4, #2
 802340c:	9305      	str	r3, [sp, #20]
 802340e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80234f4 <_vfiprintf_r+0x25c>
 8023412:	7821      	ldrb	r1, [r4, #0]
 8023414:	2203      	movs	r2, #3
 8023416:	4650      	mov	r0, sl
 8023418:	f7dc ff2a 	bl	8000270 <memchr>
 802341c:	b140      	cbz	r0, 8023430 <_vfiprintf_r+0x198>
 802341e:	2340      	movs	r3, #64	; 0x40
 8023420:	eba0 000a 	sub.w	r0, r0, sl
 8023424:	fa03 f000 	lsl.w	r0, r3, r0
 8023428:	9b04      	ldr	r3, [sp, #16]
 802342a:	4303      	orrs	r3, r0
 802342c:	3401      	adds	r4, #1
 802342e:	9304      	str	r3, [sp, #16]
 8023430:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023434:	482c      	ldr	r0, [pc, #176]	; (80234e8 <_vfiprintf_r+0x250>)
 8023436:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802343a:	2206      	movs	r2, #6
 802343c:	f7dc ff18 	bl	8000270 <memchr>
 8023440:	2800      	cmp	r0, #0
 8023442:	d03f      	beq.n	80234c4 <_vfiprintf_r+0x22c>
 8023444:	4b29      	ldr	r3, [pc, #164]	; (80234ec <_vfiprintf_r+0x254>)
 8023446:	bb1b      	cbnz	r3, 8023490 <_vfiprintf_r+0x1f8>
 8023448:	9b03      	ldr	r3, [sp, #12]
 802344a:	3307      	adds	r3, #7
 802344c:	f023 0307 	bic.w	r3, r3, #7
 8023450:	3308      	adds	r3, #8
 8023452:	9303      	str	r3, [sp, #12]
 8023454:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023456:	443b      	add	r3, r7
 8023458:	9309      	str	r3, [sp, #36]	; 0x24
 802345a:	e767      	b.n	802332c <_vfiprintf_r+0x94>
 802345c:	fb0c 3202 	mla	r2, ip, r2, r3
 8023460:	460c      	mov	r4, r1
 8023462:	2001      	movs	r0, #1
 8023464:	e7a5      	b.n	80233b2 <_vfiprintf_r+0x11a>
 8023466:	2300      	movs	r3, #0
 8023468:	3401      	adds	r4, #1
 802346a:	9305      	str	r3, [sp, #20]
 802346c:	4619      	mov	r1, r3
 802346e:	f04f 0c0a 	mov.w	ip, #10
 8023472:	4620      	mov	r0, r4
 8023474:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023478:	3a30      	subs	r2, #48	; 0x30
 802347a:	2a09      	cmp	r2, #9
 802347c:	d903      	bls.n	8023486 <_vfiprintf_r+0x1ee>
 802347e:	2b00      	cmp	r3, #0
 8023480:	d0c5      	beq.n	802340e <_vfiprintf_r+0x176>
 8023482:	9105      	str	r1, [sp, #20]
 8023484:	e7c3      	b.n	802340e <_vfiprintf_r+0x176>
 8023486:	fb0c 2101 	mla	r1, ip, r1, r2
 802348a:	4604      	mov	r4, r0
 802348c:	2301      	movs	r3, #1
 802348e:	e7f0      	b.n	8023472 <_vfiprintf_r+0x1da>
 8023490:	ab03      	add	r3, sp, #12
 8023492:	9300      	str	r3, [sp, #0]
 8023494:	462a      	mov	r2, r5
 8023496:	4b16      	ldr	r3, [pc, #88]	; (80234f0 <_vfiprintf_r+0x258>)
 8023498:	a904      	add	r1, sp, #16
 802349a:	4630      	mov	r0, r6
 802349c:	f3af 8000 	nop.w
 80234a0:	4607      	mov	r7, r0
 80234a2:	1c78      	adds	r0, r7, #1
 80234a4:	d1d6      	bne.n	8023454 <_vfiprintf_r+0x1bc>
 80234a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80234a8:	07d9      	lsls	r1, r3, #31
 80234aa:	d405      	bmi.n	80234b8 <_vfiprintf_r+0x220>
 80234ac:	89ab      	ldrh	r3, [r5, #12]
 80234ae:	059a      	lsls	r2, r3, #22
 80234b0:	d402      	bmi.n	80234b8 <_vfiprintf_r+0x220>
 80234b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80234b4:	f7ff fcf7 	bl	8022ea6 <__retarget_lock_release_recursive>
 80234b8:	89ab      	ldrh	r3, [r5, #12]
 80234ba:	065b      	lsls	r3, r3, #25
 80234bc:	f53f af12 	bmi.w	80232e4 <_vfiprintf_r+0x4c>
 80234c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80234c2:	e711      	b.n	80232e8 <_vfiprintf_r+0x50>
 80234c4:	ab03      	add	r3, sp, #12
 80234c6:	9300      	str	r3, [sp, #0]
 80234c8:	462a      	mov	r2, r5
 80234ca:	4b09      	ldr	r3, [pc, #36]	; (80234f0 <_vfiprintf_r+0x258>)
 80234cc:	a904      	add	r1, sp, #16
 80234ce:	4630      	mov	r0, r6
 80234d0:	f000 f880 	bl	80235d4 <_printf_i>
 80234d4:	e7e4      	b.n	80234a0 <_vfiprintf_r+0x208>
 80234d6:	bf00      	nop
 80234d8:	08029078 	.word	0x08029078
 80234dc:	08029098 	.word	0x08029098
 80234e0:	08029058 	.word	0x08029058
 80234e4:	080290b8 	.word	0x080290b8
 80234e8:	080290c2 	.word	0x080290c2
 80234ec:	00000000 	.word	0x00000000
 80234f0:	08023273 	.word	0x08023273
 80234f4:	080290be 	.word	0x080290be

080234f8 <_printf_common>:
 80234f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80234fc:	4616      	mov	r6, r2
 80234fe:	4699      	mov	r9, r3
 8023500:	688a      	ldr	r2, [r1, #8]
 8023502:	690b      	ldr	r3, [r1, #16]
 8023504:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8023508:	4293      	cmp	r3, r2
 802350a:	bfb8      	it	lt
 802350c:	4613      	movlt	r3, r2
 802350e:	6033      	str	r3, [r6, #0]
 8023510:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8023514:	4607      	mov	r7, r0
 8023516:	460c      	mov	r4, r1
 8023518:	b10a      	cbz	r2, 802351e <_printf_common+0x26>
 802351a:	3301      	adds	r3, #1
 802351c:	6033      	str	r3, [r6, #0]
 802351e:	6823      	ldr	r3, [r4, #0]
 8023520:	0699      	lsls	r1, r3, #26
 8023522:	bf42      	ittt	mi
 8023524:	6833      	ldrmi	r3, [r6, #0]
 8023526:	3302      	addmi	r3, #2
 8023528:	6033      	strmi	r3, [r6, #0]
 802352a:	6825      	ldr	r5, [r4, #0]
 802352c:	f015 0506 	ands.w	r5, r5, #6
 8023530:	d106      	bne.n	8023540 <_printf_common+0x48>
 8023532:	f104 0a19 	add.w	sl, r4, #25
 8023536:	68e3      	ldr	r3, [r4, #12]
 8023538:	6832      	ldr	r2, [r6, #0]
 802353a:	1a9b      	subs	r3, r3, r2
 802353c:	42ab      	cmp	r3, r5
 802353e:	dc26      	bgt.n	802358e <_printf_common+0x96>
 8023540:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8023544:	1e13      	subs	r3, r2, #0
 8023546:	6822      	ldr	r2, [r4, #0]
 8023548:	bf18      	it	ne
 802354a:	2301      	movne	r3, #1
 802354c:	0692      	lsls	r2, r2, #26
 802354e:	d42b      	bmi.n	80235a8 <_printf_common+0xb0>
 8023550:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8023554:	4649      	mov	r1, r9
 8023556:	4638      	mov	r0, r7
 8023558:	47c0      	blx	r8
 802355a:	3001      	adds	r0, #1
 802355c:	d01e      	beq.n	802359c <_printf_common+0xa4>
 802355e:	6823      	ldr	r3, [r4, #0]
 8023560:	68e5      	ldr	r5, [r4, #12]
 8023562:	6832      	ldr	r2, [r6, #0]
 8023564:	f003 0306 	and.w	r3, r3, #6
 8023568:	2b04      	cmp	r3, #4
 802356a:	bf08      	it	eq
 802356c:	1aad      	subeq	r5, r5, r2
 802356e:	68a3      	ldr	r3, [r4, #8]
 8023570:	6922      	ldr	r2, [r4, #16]
 8023572:	bf0c      	ite	eq
 8023574:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8023578:	2500      	movne	r5, #0
 802357a:	4293      	cmp	r3, r2
 802357c:	bfc4      	itt	gt
 802357e:	1a9b      	subgt	r3, r3, r2
 8023580:	18ed      	addgt	r5, r5, r3
 8023582:	2600      	movs	r6, #0
 8023584:	341a      	adds	r4, #26
 8023586:	42b5      	cmp	r5, r6
 8023588:	d11a      	bne.n	80235c0 <_printf_common+0xc8>
 802358a:	2000      	movs	r0, #0
 802358c:	e008      	b.n	80235a0 <_printf_common+0xa8>
 802358e:	2301      	movs	r3, #1
 8023590:	4652      	mov	r2, sl
 8023592:	4649      	mov	r1, r9
 8023594:	4638      	mov	r0, r7
 8023596:	47c0      	blx	r8
 8023598:	3001      	adds	r0, #1
 802359a:	d103      	bne.n	80235a4 <_printf_common+0xac>
 802359c:	f04f 30ff 	mov.w	r0, #4294967295
 80235a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80235a4:	3501      	adds	r5, #1
 80235a6:	e7c6      	b.n	8023536 <_printf_common+0x3e>
 80235a8:	18e1      	adds	r1, r4, r3
 80235aa:	1c5a      	adds	r2, r3, #1
 80235ac:	2030      	movs	r0, #48	; 0x30
 80235ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80235b2:	4422      	add	r2, r4
 80235b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80235b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80235bc:	3302      	adds	r3, #2
 80235be:	e7c7      	b.n	8023550 <_printf_common+0x58>
 80235c0:	2301      	movs	r3, #1
 80235c2:	4622      	mov	r2, r4
 80235c4:	4649      	mov	r1, r9
 80235c6:	4638      	mov	r0, r7
 80235c8:	47c0      	blx	r8
 80235ca:	3001      	adds	r0, #1
 80235cc:	d0e6      	beq.n	802359c <_printf_common+0xa4>
 80235ce:	3601      	adds	r6, #1
 80235d0:	e7d9      	b.n	8023586 <_printf_common+0x8e>
	...

080235d4 <_printf_i>:
 80235d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80235d8:	7e0f      	ldrb	r7, [r1, #24]
 80235da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80235dc:	2f78      	cmp	r7, #120	; 0x78
 80235de:	4691      	mov	r9, r2
 80235e0:	4680      	mov	r8, r0
 80235e2:	460c      	mov	r4, r1
 80235e4:	469a      	mov	sl, r3
 80235e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80235ea:	d807      	bhi.n	80235fc <_printf_i+0x28>
 80235ec:	2f62      	cmp	r7, #98	; 0x62
 80235ee:	d80a      	bhi.n	8023606 <_printf_i+0x32>
 80235f0:	2f00      	cmp	r7, #0
 80235f2:	f000 80d8 	beq.w	80237a6 <_printf_i+0x1d2>
 80235f6:	2f58      	cmp	r7, #88	; 0x58
 80235f8:	f000 80a3 	beq.w	8023742 <_printf_i+0x16e>
 80235fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8023600:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8023604:	e03a      	b.n	802367c <_printf_i+0xa8>
 8023606:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802360a:	2b15      	cmp	r3, #21
 802360c:	d8f6      	bhi.n	80235fc <_printf_i+0x28>
 802360e:	a101      	add	r1, pc, #4	; (adr r1, 8023614 <_printf_i+0x40>)
 8023610:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8023614:	0802366d 	.word	0x0802366d
 8023618:	08023681 	.word	0x08023681
 802361c:	080235fd 	.word	0x080235fd
 8023620:	080235fd 	.word	0x080235fd
 8023624:	080235fd 	.word	0x080235fd
 8023628:	080235fd 	.word	0x080235fd
 802362c:	08023681 	.word	0x08023681
 8023630:	080235fd 	.word	0x080235fd
 8023634:	080235fd 	.word	0x080235fd
 8023638:	080235fd 	.word	0x080235fd
 802363c:	080235fd 	.word	0x080235fd
 8023640:	0802378d 	.word	0x0802378d
 8023644:	080236b1 	.word	0x080236b1
 8023648:	0802376f 	.word	0x0802376f
 802364c:	080235fd 	.word	0x080235fd
 8023650:	080235fd 	.word	0x080235fd
 8023654:	080237af 	.word	0x080237af
 8023658:	080235fd 	.word	0x080235fd
 802365c:	080236b1 	.word	0x080236b1
 8023660:	080235fd 	.word	0x080235fd
 8023664:	080235fd 	.word	0x080235fd
 8023668:	08023777 	.word	0x08023777
 802366c:	682b      	ldr	r3, [r5, #0]
 802366e:	1d1a      	adds	r2, r3, #4
 8023670:	681b      	ldr	r3, [r3, #0]
 8023672:	602a      	str	r2, [r5, #0]
 8023674:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8023678:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802367c:	2301      	movs	r3, #1
 802367e:	e0a3      	b.n	80237c8 <_printf_i+0x1f4>
 8023680:	6820      	ldr	r0, [r4, #0]
 8023682:	6829      	ldr	r1, [r5, #0]
 8023684:	0606      	lsls	r6, r0, #24
 8023686:	f101 0304 	add.w	r3, r1, #4
 802368a:	d50a      	bpl.n	80236a2 <_printf_i+0xce>
 802368c:	680e      	ldr	r6, [r1, #0]
 802368e:	602b      	str	r3, [r5, #0]
 8023690:	2e00      	cmp	r6, #0
 8023692:	da03      	bge.n	802369c <_printf_i+0xc8>
 8023694:	232d      	movs	r3, #45	; 0x2d
 8023696:	4276      	negs	r6, r6
 8023698:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802369c:	485e      	ldr	r0, [pc, #376]	; (8023818 <_printf_i+0x244>)
 802369e:	230a      	movs	r3, #10
 80236a0:	e019      	b.n	80236d6 <_printf_i+0x102>
 80236a2:	680e      	ldr	r6, [r1, #0]
 80236a4:	602b      	str	r3, [r5, #0]
 80236a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80236aa:	bf18      	it	ne
 80236ac:	b236      	sxthne	r6, r6
 80236ae:	e7ef      	b.n	8023690 <_printf_i+0xbc>
 80236b0:	682b      	ldr	r3, [r5, #0]
 80236b2:	6820      	ldr	r0, [r4, #0]
 80236b4:	1d19      	adds	r1, r3, #4
 80236b6:	6029      	str	r1, [r5, #0]
 80236b8:	0601      	lsls	r1, r0, #24
 80236ba:	d501      	bpl.n	80236c0 <_printf_i+0xec>
 80236bc:	681e      	ldr	r6, [r3, #0]
 80236be:	e002      	b.n	80236c6 <_printf_i+0xf2>
 80236c0:	0646      	lsls	r6, r0, #25
 80236c2:	d5fb      	bpl.n	80236bc <_printf_i+0xe8>
 80236c4:	881e      	ldrh	r6, [r3, #0]
 80236c6:	4854      	ldr	r0, [pc, #336]	; (8023818 <_printf_i+0x244>)
 80236c8:	2f6f      	cmp	r7, #111	; 0x6f
 80236ca:	bf0c      	ite	eq
 80236cc:	2308      	moveq	r3, #8
 80236ce:	230a      	movne	r3, #10
 80236d0:	2100      	movs	r1, #0
 80236d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80236d6:	6865      	ldr	r5, [r4, #4]
 80236d8:	60a5      	str	r5, [r4, #8]
 80236da:	2d00      	cmp	r5, #0
 80236dc:	bfa2      	ittt	ge
 80236de:	6821      	ldrge	r1, [r4, #0]
 80236e0:	f021 0104 	bicge.w	r1, r1, #4
 80236e4:	6021      	strge	r1, [r4, #0]
 80236e6:	b90e      	cbnz	r6, 80236ec <_printf_i+0x118>
 80236e8:	2d00      	cmp	r5, #0
 80236ea:	d04d      	beq.n	8023788 <_printf_i+0x1b4>
 80236ec:	4615      	mov	r5, r2
 80236ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80236f2:	fb03 6711 	mls	r7, r3, r1, r6
 80236f6:	5dc7      	ldrb	r7, [r0, r7]
 80236f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80236fc:	4637      	mov	r7, r6
 80236fe:	42bb      	cmp	r3, r7
 8023700:	460e      	mov	r6, r1
 8023702:	d9f4      	bls.n	80236ee <_printf_i+0x11a>
 8023704:	2b08      	cmp	r3, #8
 8023706:	d10b      	bne.n	8023720 <_printf_i+0x14c>
 8023708:	6823      	ldr	r3, [r4, #0]
 802370a:	07de      	lsls	r6, r3, #31
 802370c:	d508      	bpl.n	8023720 <_printf_i+0x14c>
 802370e:	6923      	ldr	r3, [r4, #16]
 8023710:	6861      	ldr	r1, [r4, #4]
 8023712:	4299      	cmp	r1, r3
 8023714:	bfde      	ittt	le
 8023716:	2330      	movle	r3, #48	; 0x30
 8023718:	f805 3c01 	strble.w	r3, [r5, #-1]
 802371c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8023720:	1b52      	subs	r2, r2, r5
 8023722:	6122      	str	r2, [r4, #16]
 8023724:	f8cd a000 	str.w	sl, [sp]
 8023728:	464b      	mov	r3, r9
 802372a:	aa03      	add	r2, sp, #12
 802372c:	4621      	mov	r1, r4
 802372e:	4640      	mov	r0, r8
 8023730:	f7ff fee2 	bl	80234f8 <_printf_common>
 8023734:	3001      	adds	r0, #1
 8023736:	d14c      	bne.n	80237d2 <_printf_i+0x1fe>
 8023738:	f04f 30ff 	mov.w	r0, #4294967295
 802373c:	b004      	add	sp, #16
 802373e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023742:	4835      	ldr	r0, [pc, #212]	; (8023818 <_printf_i+0x244>)
 8023744:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8023748:	6829      	ldr	r1, [r5, #0]
 802374a:	6823      	ldr	r3, [r4, #0]
 802374c:	f851 6b04 	ldr.w	r6, [r1], #4
 8023750:	6029      	str	r1, [r5, #0]
 8023752:	061d      	lsls	r5, r3, #24
 8023754:	d514      	bpl.n	8023780 <_printf_i+0x1ac>
 8023756:	07df      	lsls	r7, r3, #31
 8023758:	bf44      	itt	mi
 802375a:	f043 0320 	orrmi.w	r3, r3, #32
 802375e:	6023      	strmi	r3, [r4, #0]
 8023760:	b91e      	cbnz	r6, 802376a <_printf_i+0x196>
 8023762:	6823      	ldr	r3, [r4, #0]
 8023764:	f023 0320 	bic.w	r3, r3, #32
 8023768:	6023      	str	r3, [r4, #0]
 802376a:	2310      	movs	r3, #16
 802376c:	e7b0      	b.n	80236d0 <_printf_i+0xfc>
 802376e:	6823      	ldr	r3, [r4, #0]
 8023770:	f043 0320 	orr.w	r3, r3, #32
 8023774:	6023      	str	r3, [r4, #0]
 8023776:	2378      	movs	r3, #120	; 0x78
 8023778:	4828      	ldr	r0, [pc, #160]	; (802381c <_printf_i+0x248>)
 802377a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802377e:	e7e3      	b.n	8023748 <_printf_i+0x174>
 8023780:	0659      	lsls	r1, r3, #25
 8023782:	bf48      	it	mi
 8023784:	b2b6      	uxthmi	r6, r6
 8023786:	e7e6      	b.n	8023756 <_printf_i+0x182>
 8023788:	4615      	mov	r5, r2
 802378a:	e7bb      	b.n	8023704 <_printf_i+0x130>
 802378c:	682b      	ldr	r3, [r5, #0]
 802378e:	6826      	ldr	r6, [r4, #0]
 8023790:	6961      	ldr	r1, [r4, #20]
 8023792:	1d18      	adds	r0, r3, #4
 8023794:	6028      	str	r0, [r5, #0]
 8023796:	0635      	lsls	r5, r6, #24
 8023798:	681b      	ldr	r3, [r3, #0]
 802379a:	d501      	bpl.n	80237a0 <_printf_i+0x1cc>
 802379c:	6019      	str	r1, [r3, #0]
 802379e:	e002      	b.n	80237a6 <_printf_i+0x1d2>
 80237a0:	0670      	lsls	r0, r6, #25
 80237a2:	d5fb      	bpl.n	802379c <_printf_i+0x1c8>
 80237a4:	8019      	strh	r1, [r3, #0]
 80237a6:	2300      	movs	r3, #0
 80237a8:	6123      	str	r3, [r4, #16]
 80237aa:	4615      	mov	r5, r2
 80237ac:	e7ba      	b.n	8023724 <_printf_i+0x150>
 80237ae:	682b      	ldr	r3, [r5, #0]
 80237b0:	1d1a      	adds	r2, r3, #4
 80237b2:	602a      	str	r2, [r5, #0]
 80237b4:	681d      	ldr	r5, [r3, #0]
 80237b6:	6862      	ldr	r2, [r4, #4]
 80237b8:	2100      	movs	r1, #0
 80237ba:	4628      	mov	r0, r5
 80237bc:	f7dc fd58 	bl	8000270 <memchr>
 80237c0:	b108      	cbz	r0, 80237c6 <_printf_i+0x1f2>
 80237c2:	1b40      	subs	r0, r0, r5
 80237c4:	6060      	str	r0, [r4, #4]
 80237c6:	6863      	ldr	r3, [r4, #4]
 80237c8:	6123      	str	r3, [r4, #16]
 80237ca:	2300      	movs	r3, #0
 80237cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80237d0:	e7a8      	b.n	8023724 <_printf_i+0x150>
 80237d2:	6923      	ldr	r3, [r4, #16]
 80237d4:	462a      	mov	r2, r5
 80237d6:	4649      	mov	r1, r9
 80237d8:	4640      	mov	r0, r8
 80237da:	47d0      	blx	sl
 80237dc:	3001      	adds	r0, #1
 80237de:	d0ab      	beq.n	8023738 <_printf_i+0x164>
 80237e0:	6823      	ldr	r3, [r4, #0]
 80237e2:	079b      	lsls	r3, r3, #30
 80237e4:	d413      	bmi.n	802380e <_printf_i+0x23a>
 80237e6:	68e0      	ldr	r0, [r4, #12]
 80237e8:	9b03      	ldr	r3, [sp, #12]
 80237ea:	4298      	cmp	r0, r3
 80237ec:	bfb8      	it	lt
 80237ee:	4618      	movlt	r0, r3
 80237f0:	e7a4      	b.n	802373c <_printf_i+0x168>
 80237f2:	2301      	movs	r3, #1
 80237f4:	4632      	mov	r2, r6
 80237f6:	4649      	mov	r1, r9
 80237f8:	4640      	mov	r0, r8
 80237fa:	47d0      	blx	sl
 80237fc:	3001      	adds	r0, #1
 80237fe:	d09b      	beq.n	8023738 <_printf_i+0x164>
 8023800:	3501      	adds	r5, #1
 8023802:	68e3      	ldr	r3, [r4, #12]
 8023804:	9903      	ldr	r1, [sp, #12]
 8023806:	1a5b      	subs	r3, r3, r1
 8023808:	42ab      	cmp	r3, r5
 802380a:	dcf2      	bgt.n	80237f2 <_printf_i+0x21e>
 802380c:	e7eb      	b.n	80237e6 <_printf_i+0x212>
 802380e:	2500      	movs	r5, #0
 8023810:	f104 0619 	add.w	r6, r4, #25
 8023814:	e7f5      	b.n	8023802 <_printf_i+0x22e>
 8023816:	bf00      	nop
 8023818:	080290c9 	.word	0x080290c9
 802381c:	080290da 	.word	0x080290da

08023820 <_putc_r>:
 8023820:	b570      	push	{r4, r5, r6, lr}
 8023822:	460d      	mov	r5, r1
 8023824:	4614      	mov	r4, r2
 8023826:	4606      	mov	r6, r0
 8023828:	b118      	cbz	r0, 8023832 <_putc_r+0x12>
 802382a:	6983      	ldr	r3, [r0, #24]
 802382c:	b90b      	cbnz	r3, 8023832 <_putc_r+0x12>
 802382e:	f7ff fa89 	bl	8022d44 <__sinit>
 8023832:	4b1c      	ldr	r3, [pc, #112]	; (80238a4 <_putc_r+0x84>)
 8023834:	429c      	cmp	r4, r3
 8023836:	d124      	bne.n	8023882 <_putc_r+0x62>
 8023838:	6874      	ldr	r4, [r6, #4]
 802383a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802383c:	07d8      	lsls	r0, r3, #31
 802383e:	d405      	bmi.n	802384c <_putc_r+0x2c>
 8023840:	89a3      	ldrh	r3, [r4, #12]
 8023842:	0599      	lsls	r1, r3, #22
 8023844:	d402      	bmi.n	802384c <_putc_r+0x2c>
 8023846:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023848:	f7ff fb2c 	bl	8022ea4 <__retarget_lock_acquire_recursive>
 802384c:	68a3      	ldr	r3, [r4, #8]
 802384e:	3b01      	subs	r3, #1
 8023850:	2b00      	cmp	r3, #0
 8023852:	60a3      	str	r3, [r4, #8]
 8023854:	da05      	bge.n	8023862 <_putc_r+0x42>
 8023856:	69a2      	ldr	r2, [r4, #24]
 8023858:	4293      	cmp	r3, r2
 802385a:	db1c      	blt.n	8023896 <_putc_r+0x76>
 802385c:	b2eb      	uxtb	r3, r5
 802385e:	2b0a      	cmp	r3, #10
 8023860:	d019      	beq.n	8023896 <_putc_r+0x76>
 8023862:	6823      	ldr	r3, [r4, #0]
 8023864:	1c5a      	adds	r2, r3, #1
 8023866:	6022      	str	r2, [r4, #0]
 8023868:	701d      	strb	r5, [r3, #0]
 802386a:	b2ed      	uxtb	r5, r5
 802386c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802386e:	07da      	lsls	r2, r3, #31
 8023870:	d405      	bmi.n	802387e <_putc_r+0x5e>
 8023872:	89a3      	ldrh	r3, [r4, #12]
 8023874:	059b      	lsls	r3, r3, #22
 8023876:	d402      	bmi.n	802387e <_putc_r+0x5e>
 8023878:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802387a:	f7ff fb14 	bl	8022ea6 <__retarget_lock_release_recursive>
 802387e:	4628      	mov	r0, r5
 8023880:	bd70      	pop	{r4, r5, r6, pc}
 8023882:	4b09      	ldr	r3, [pc, #36]	; (80238a8 <_putc_r+0x88>)
 8023884:	429c      	cmp	r4, r3
 8023886:	d101      	bne.n	802388c <_putc_r+0x6c>
 8023888:	68b4      	ldr	r4, [r6, #8]
 802388a:	e7d6      	b.n	802383a <_putc_r+0x1a>
 802388c:	4b07      	ldr	r3, [pc, #28]	; (80238ac <_putc_r+0x8c>)
 802388e:	429c      	cmp	r4, r3
 8023890:	bf08      	it	eq
 8023892:	68f4      	ldreq	r4, [r6, #12]
 8023894:	e7d1      	b.n	802383a <_putc_r+0x1a>
 8023896:	4629      	mov	r1, r5
 8023898:	4622      	mov	r2, r4
 802389a:	4630      	mov	r0, r6
 802389c:	f7ff f85a 	bl	8022954 <__swbuf_r>
 80238a0:	4605      	mov	r5, r0
 80238a2:	e7e3      	b.n	802386c <_putc_r+0x4c>
 80238a4:	08029078 	.word	0x08029078
 80238a8:	08029098 	.word	0x08029098
 80238ac:	08029058 	.word	0x08029058

080238b0 <__sread>:
 80238b0:	b510      	push	{r4, lr}
 80238b2:	460c      	mov	r4, r1
 80238b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80238b8:	f000 f8cc 	bl	8023a54 <_read_r>
 80238bc:	2800      	cmp	r0, #0
 80238be:	bfab      	itete	ge
 80238c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80238c2:	89a3      	ldrhlt	r3, [r4, #12]
 80238c4:	181b      	addge	r3, r3, r0
 80238c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80238ca:	bfac      	ite	ge
 80238cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80238ce:	81a3      	strhlt	r3, [r4, #12]
 80238d0:	bd10      	pop	{r4, pc}

080238d2 <__swrite>:
 80238d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80238d6:	461f      	mov	r7, r3
 80238d8:	898b      	ldrh	r3, [r1, #12]
 80238da:	05db      	lsls	r3, r3, #23
 80238dc:	4605      	mov	r5, r0
 80238de:	460c      	mov	r4, r1
 80238e0:	4616      	mov	r6, r2
 80238e2:	d505      	bpl.n	80238f0 <__swrite+0x1e>
 80238e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80238e8:	2302      	movs	r3, #2
 80238ea:	2200      	movs	r2, #0
 80238ec:	f000 f870 	bl	80239d0 <_lseek_r>
 80238f0:	89a3      	ldrh	r3, [r4, #12]
 80238f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80238f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80238fa:	81a3      	strh	r3, [r4, #12]
 80238fc:	4632      	mov	r2, r6
 80238fe:	463b      	mov	r3, r7
 8023900:	4628      	mov	r0, r5
 8023902:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8023906:	f000 b817 	b.w	8023938 <_write_r>

0802390a <__sseek>:
 802390a:	b510      	push	{r4, lr}
 802390c:	460c      	mov	r4, r1
 802390e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023912:	f000 f85d 	bl	80239d0 <_lseek_r>
 8023916:	1c43      	adds	r3, r0, #1
 8023918:	89a3      	ldrh	r3, [r4, #12]
 802391a:	bf15      	itete	ne
 802391c:	6560      	strne	r0, [r4, #84]	; 0x54
 802391e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8023922:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8023926:	81a3      	strheq	r3, [r4, #12]
 8023928:	bf18      	it	ne
 802392a:	81a3      	strhne	r3, [r4, #12]
 802392c:	bd10      	pop	{r4, pc}

0802392e <__sclose>:
 802392e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023932:	f000 b81b 	b.w	802396c <_close_r>
	...

08023938 <_write_r>:
 8023938:	b538      	push	{r3, r4, r5, lr}
 802393a:	4d07      	ldr	r5, [pc, #28]	; (8023958 <_write_r+0x20>)
 802393c:	4604      	mov	r4, r0
 802393e:	4608      	mov	r0, r1
 8023940:	4611      	mov	r1, r2
 8023942:	2200      	movs	r2, #0
 8023944:	602a      	str	r2, [r5, #0]
 8023946:	461a      	mov	r2, r3
 8023948:	f7f0 ff4d 	bl	80147e6 <_write>
 802394c:	1c43      	adds	r3, r0, #1
 802394e:	d102      	bne.n	8023956 <_write_r+0x1e>
 8023950:	682b      	ldr	r3, [r5, #0]
 8023952:	b103      	cbz	r3, 8023956 <_write_r+0x1e>
 8023954:	6023      	str	r3, [r4, #0]
 8023956:	bd38      	pop	{r3, r4, r5, pc}
 8023958:	200142a4 	.word	0x200142a4

0802395c <abort>:
 802395c:	b508      	push	{r3, lr}
 802395e:	2006      	movs	r0, #6
 8023960:	f000 f8b2 	bl	8023ac8 <raise>
 8023964:	2001      	movs	r0, #1
 8023966:	f7f0 ff17 	bl	8014798 <_exit>
	...

0802396c <_close_r>:
 802396c:	b538      	push	{r3, r4, r5, lr}
 802396e:	4d06      	ldr	r5, [pc, #24]	; (8023988 <_close_r+0x1c>)
 8023970:	2300      	movs	r3, #0
 8023972:	4604      	mov	r4, r0
 8023974:	4608      	mov	r0, r1
 8023976:	602b      	str	r3, [r5, #0]
 8023978:	f7f0 ff51 	bl	801481e <_close>
 802397c:	1c43      	adds	r3, r0, #1
 802397e:	d102      	bne.n	8023986 <_close_r+0x1a>
 8023980:	682b      	ldr	r3, [r5, #0]
 8023982:	b103      	cbz	r3, 8023986 <_close_r+0x1a>
 8023984:	6023      	str	r3, [r4, #0]
 8023986:	bd38      	pop	{r3, r4, r5, pc}
 8023988:	200142a4 	.word	0x200142a4

0802398c <_fstat_r>:
 802398c:	b538      	push	{r3, r4, r5, lr}
 802398e:	4d07      	ldr	r5, [pc, #28]	; (80239ac <_fstat_r+0x20>)
 8023990:	2300      	movs	r3, #0
 8023992:	4604      	mov	r4, r0
 8023994:	4608      	mov	r0, r1
 8023996:	4611      	mov	r1, r2
 8023998:	602b      	str	r3, [r5, #0]
 802399a:	f7f0 ff4c 	bl	8014836 <_fstat>
 802399e:	1c43      	adds	r3, r0, #1
 80239a0:	d102      	bne.n	80239a8 <_fstat_r+0x1c>
 80239a2:	682b      	ldr	r3, [r5, #0]
 80239a4:	b103      	cbz	r3, 80239a8 <_fstat_r+0x1c>
 80239a6:	6023      	str	r3, [r4, #0]
 80239a8:	bd38      	pop	{r3, r4, r5, pc}
 80239aa:	bf00      	nop
 80239ac:	200142a4 	.word	0x200142a4

080239b0 <_isatty_r>:
 80239b0:	b538      	push	{r3, r4, r5, lr}
 80239b2:	4d06      	ldr	r5, [pc, #24]	; (80239cc <_isatty_r+0x1c>)
 80239b4:	2300      	movs	r3, #0
 80239b6:	4604      	mov	r4, r0
 80239b8:	4608      	mov	r0, r1
 80239ba:	602b      	str	r3, [r5, #0]
 80239bc:	f7f0 ff4b 	bl	8014856 <_isatty>
 80239c0:	1c43      	adds	r3, r0, #1
 80239c2:	d102      	bne.n	80239ca <_isatty_r+0x1a>
 80239c4:	682b      	ldr	r3, [r5, #0]
 80239c6:	b103      	cbz	r3, 80239ca <_isatty_r+0x1a>
 80239c8:	6023      	str	r3, [r4, #0]
 80239ca:	bd38      	pop	{r3, r4, r5, pc}
 80239cc:	200142a4 	.word	0x200142a4

080239d0 <_lseek_r>:
 80239d0:	b538      	push	{r3, r4, r5, lr}
 80239d2:	4d07      	ldr	r5, [pc, #28]	; (80239f0 <_lseek_r+0x20>)
 80239d4:	4604      	mov	r4, r0
 80239d6:	4608      	mov	r0, r1
 80239d8:	4611      	mov	r1, r2
 80239da:	2200      	movs	r2, #0
 80239dc:	602a      	str	r2, [r5, #0]
 80239de:	461a      	mov	r2, r3
 80239e0:	f7f0 ff44 	bl	801486c <_lseek>
 80239e4:	1c43      	adds	r3, r0, #1
 80239e6:	d102      	bne.n	80239ee <_lseek_r+0x1e>
 80239e8:	682b      	ldr	r3, [r5, #0]
 80239ea:	b103      	cbz	r3, 80239ee <_lseek_r+0x1e>
 80239ec:	6023      	str	r3, [r4, #0]
 80239ee:	bd38      	pop	{r3, r4, r5, pc}
 80239f0:	200142a4 	.word	0x200142a4

080239f4 <_realloc_r>:
 80239f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80239f8:	4680      	mov	r8, r0
 80239fa:	4614      	mov	r4, r2
 80239fc:	460e      	mov	r6, r1
 80239fe:	b921      	cbnz	r1, 8023a0a <_realloc_r+0x16>
 8023a00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8023a04:	4611      	mov	r1, r2
 8023a06:	f7fe bd59 	b.w	80224bc <_malloc_r>
 8023a0a:	b92a      	cbnz	r2, 8023a18 <_realloc_r+0x24>
 8023a0c:	f7fe fcea 	bl	80223e4 <_free_r>
 8023a10:	4625      	mov	r5, r4
 8023a12:	4628      	mov	r0, r5
 8023a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023a18:	f000 f872 	bl	8023b00 <_malloc_usable_size_r>
 8023a1c:	4284      	cmp	r4, r0
 8023a1e:	4607      	mov	r7, r0
 8023a20:	d802      	bhi.n	8023a28 <_realloc_r+0x34>
 8023a22:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8023a26:	d812      	bhi.n	8023a4e <_realloc_r+0x5a>
 8023a28:	4621      	mov	r1, r4
 8023a2a:	4640      	mov	r0, r8
 8023a2c:	f7fe fd46 	bl	80224bc <_malloc_r>
 8023a30:	4605      	mov	r5, r0
 8023a32:	2800      	cmp	r0, #0
 8023a34:	d0ed      	beq.n	8023a12 <_realloc_r+0x1e>
 8023a36:	42bc      	cmp	r4, r7
 8023a38:	4622      	mov	r2, r4
 8023a3a:	4631      	mov	r1, r6
 8023a3c:	bf28      	it	cs
 8023a3e:	463a      	movcs	r2, r7
 8023a40:	f7fe fca0 	bl	8022384 <memcpy>
 8023a44:	4631      	mov	r1, r6
 8023a46:	4640      	mov	r0, r8
 8023a48:	f7fe fccc 	bl	80223e4 <_free_r>
 8023a4c:	e7e1      	b.n	8023a12 <_realloc_r+0x1e>
 8023a4e:	4635      	mov	r5, r6
 8023a50:	e7df      	b.n	8023a12 <_realloc_r+0x1e>
	...

08023a54 <_read_r>:
 8023a54:	b538      	push	{r3, r4, r5, lr}
 8023a56:	4d07      	ldr	r5, [pc, #28]	; (8023a74 <_read_r+0x20>)
 8023a58:	4604      	mov	r4, r0
 8023a5a:	4608      	mov	r0, r1
 8023a5c:	4611      	mov	r1, r2
 8023a5e:	2200      	movs	r2, #0
 8023a60:	602a      	str	r2, [r5, #0]
 8023a62:	461a      	mov	r2, r3
 8023a64:	f7f0 fea2 	bl	80147ac <_read>
 8023a68:	1c43      	adds	r3, r0, #1
 8023a6a:	d102      	bne.n	8023a72 <_read_r+0x1e>
 8023a6c:	682b      	ldr	r3, [r5, #0]
 8023a6e:	b103      	cbz	r3, 8023a72 <_read_r+0x1e>
 8023a70:	6023      	str	r3, [r4, #0]
 8023a72:	bd38      	pop	{r3, r4, r5, pc}
 8023a74:	200142a4 	.word	0x200142a4

08023a78 <_raise_r>:
 8023a78:	291f      	cmp	r1, #31
 8023a7a:	b538      	push	{r3, r4, r5, lr}
 8023a7c:	4604      	mov	r4, r0
 8023a7e:	460d      	mov	r5, r1
 8023a80:	d904      	bls.n	8023a8c <_raise_r+0x14>
 8023a82:	2316      	movs	r3, #22
 8023a84:	6003      	str	r3, [r0, #0]
 8023a86:	f04f 30ff 	mov.w	r0, #4294967295
 8023a8a:	bd38      	pop	{r3, r4, r5, pc}
 8023a8c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8023a8e:	b112      	cbz	r2, 8023a96 <_raise_r+0x1e>
 8023a90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8023a94:	b94b      	cbnz	r3, 8023aaa <_raise_r+0x32>
 8023a96:	4620      	mov	r0, r4
 8023a98:	f000 f830 	bl	8023afc <_getpid_r>
 8023a9c:	462a      	mov	r2, r5
 8023a9e:	4601      	mov	r1, r0
 8023aa0:	4620      	mov	r0, r4
 8023aa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023aa6:	f000 b817 	b.w	8023ad8 <_kill_r>
 8023aaa:	2b01      	cmp	r3, #1
 8023aac:	d00a      	beq.n	8023ac4 <_raise_r+0x4c>
 8023aae:	1c59      	adds	r1, r3, #1
 8023ab0:	d103      	bne.n	8023aba <_raise_r+0x42>
 8023ab2:	2316      	movs	r3, #22
 8023ab4:	6003      	str	r3, [r0, #0]
 8023ab6:	2001      	movs	r0, #1
 8023ab8:	e7e7      	b.n	8023a8a <_raise_r+0x12>
 8023aba:	2400      	movs	r4, #0
 8023abc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8023ac0:	4628      	mov	r0, r5
 8023ac2:	4798      	blx	r3
 8023ac4:	2000      	movs	r0, #0
 8023ac6:	e7e0      	b.n	8023a8a <_raise_r+0x12>

08023ac8 <raise>:
 8023ac8:	4b02      	ldr	r3, [pc, #8]	; (8023ad4 <raise+0xc>)
 8023aca:	4601      	mov	r1, r0
 8023acc:	6818      	ldr	r0, [r3, #0]
 8023ace:	f7ff bfd3 	b.w	8023a78 <_raise_r>
 8023ad2:	bf00      	nop
 8023ad4:	20000140 	.word	0x20000140

08023ad8 <_kill_r>:
 8023ad8:	b538      	push	{r3, r4, r5, lr}
 8023ada:	4d07      	ldr	r5, [pc, #28]	; (8023af8 <_kill_r+0x20>)
 8023adc:	2300      	movs	r3, #0
 8023ade:	4604      	mov	r4, r0
 8023ae0:	4608      	mov	r0, r1
 8023ae2:	4611      	mov	r1, r2
 8023ae4:	602b      	str	r3, [r5, #0]
 8023ae6:	f7f0 fe45 	bl	8014774 <_kill>
 8023aea:	1c43      	adds	r3, r0, #1
 8023aec:	d102      	bne.n	8023af4 <_kill_r+0x1c>
 8023aee:	682b      	ldr	r3, [r5, #0]
 8023af0:	b103      	cbz	r3, 8023af4 <_kill_r+0x1c>
 8023af2:	6023      	str	r3, [r4, #0]
 8023af4:	bd38      	pop	{r3, r4, r5, pc}
 8023af6:	bf00      	nop
 8023af8:	200142a4 	.word	0x200142a4

08023afc <_getpid_r>:
 8023afc:	f7f0 be32 	b.w	8014764 <_getpid>

08023b00 <_malloc_usable_size_r>:
 8023b00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8023b04:	1f18      	subs	r0, r3, #4
 8023b06:	2b00      	cmp	r3, #0
 8023b08:	bfbc      	itt	lt
 8023b0a:	580b      	ldrlt	r3, [r1, r0]
 8023b0c:	18c0      	addlt	r0, r0, r3
 8023b0e:	4770      	bx	lr

08023b10 <_init>:
 8023b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023b12:	bf00      	nop
 8023b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023b16:	bc08      	pop	{r3}
 8023b18:	469e      	mov	lr, r3
 8023b1a:	4770      	bx	lr

08023b1c <_fini>:
 8023b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023b1e:	bf00      	nop
 8023b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023b22:	bc08      	pop	{r3}
 8023b24:	469e      	mov	lr, r3
 8023b26:	4770      	bx	lr
