
EI_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023e80  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000532c  08024080  08024080  00034080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080293ac  080293ac  000402e4  2**0
                  CONTENTS
  4 .ARM          00000008  080293ac  080293ac  000393ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080293b4  080293b4  000402e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080293b4  080293b4  000393b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080293b8  080293b8  000393b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a4  20000000  080293bc  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001a4  08029560  000401a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000244  08029600  00040244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00014070  200002e4  080296a0  000402e4  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20014354  080296a0  00044354  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000402e4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00037efe  00000000  00000000  00040312  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00008327  00000000  00000000  00078210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002480  00000000  00000000  00080538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000021b0  00000000  00000000  000829b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00043076  00000000  00000000  00084b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004551e  00000000  00000000  000c7bde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0013baae  00000000  00000000  0010d0fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00248baa  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000a040  00000000  00000000  00248bfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200002e4 	.word	0x200002e4
 800021c:	00000000 	.word	0x00000000
 8000220:	08024068 	.word	0x08024068

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200002e8 	.word	0x200002e8
 800023c:	08024068 	.word	0x08024068

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b974 	b.w	8000610 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468e      	mov	lr, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14d      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034e:	428a      	cmp	r2, r1
 8000350:	4694      	mov	ip, r2
 8000352:	d969      	bls.n	8000428 <__udivmoddi4+0xe8>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b152      	cbz	r2, 8000370 <__udivmoddi4+0x30>
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	f1c2 0120 	rsb	r1, r2, #32
 8000362:	fa20 f101 	lsr.w	r1, r0, r1
 8000366:	fa0c fc02 	lsl.w	ip, ip, r2
 800036a:	ea41 0e03 	orr.w	lr, r1, r3
 800036e:	4094      	lsls	r4, r2
 8000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000374:	0c21      	lsrs	r1, r4, #16
 8000376:	fbbe f6f8 	udiv	r6, lr, r8
 800037a:	fa1f f78c 	uxth.w	r7, ip
 800037e:	fb08 e316 	mls	r3, r8, r6, lr
 8000382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000386:	fb06 f107 	mul.w	r1, r6, r7
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f106 30ff 	add.w	r0, r6, #4294967295
 8000396:	f080 811f 	bcs.w	80005d8 <__udivmoddi4+0x298>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 811c 	bls.w	80005d8 <__udivmoddi4+0x298>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ac:	fb08 3310 	mls	r3, r8, r0, r3
 80003b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b4:	fb00 f707 	mul.w	r7, r0, r7
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x92>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x29c>
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x29c>
 80003ce:	4464      	add	r4, ip
 80003d0:	3802      	subs	r0, #2
 80003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d6:	1be4      	subs	r4, r4, r7
 80003d8:	2600      	movs	r6, #0
 80003da:	b11d      	cbz	r5, 80003e4 <__udivmoddi4+0xa4>
 80003dc:	40d4      	lsrs	r4, r2
 80003de:	2300      	movs	r3, #0
 80003e0:	e9c5 4300 	strd	r4, r3, [r5]
 80003e4:	4631      	mov	r1, r6
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0xc2>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80ef 	beq.w	80005d2 <__udivmoddi4+0x292>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x160>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xd4>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80f9 	bhi.w	8000606 <__udivmoddi4+0x2c6>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0303 	sbc.w	r3, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	469e      	mov	lr, r3
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e0      	beq.n	80003e4 <__udivmoddi4+0xa4>
 8000422:	e9c5 4e00 	strd	r4, lr, [r5]
 8000426:	e7dd      	b.n	80003e4 <__udivmoddi4+0xa4>
 8000428:	b902      	cbnz	r2, 800042c <__udivmoddi4+0xec>
 800042a:	deff      	udf	#255	; 0xff
 800042c:	fab2 f282 	clz	r2, r2
 8000430:	2a00      	cmp	r2, #0
 8000432:	f040 8092 	bne.w	800055a <__udivmoddi4+0x21a>
 8000436:	eba1 010c 	sub.w	r1, r1, ip
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	2601      	movs	r6, #1
 8000444:	0c20      	lsrs	r0, r4, #16
 8000446:	fbb1 f3f7 	udiv	r3, r1, r7
 800044a:	fb07 1113 	mls	r1, r7, r3, r1
 800044e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000452:	fb0e f003 	mul.w	r0, lr, r3
 8000456:	4288      	cmp	r0, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x12c>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x12a>
 8000464:	4288      	cmp	r0, r1
 8000466:	f200 80cb 	bhi.w	8000600 <__udivmoddi4+0x2c0>
 800046a:	4643      	mov	r3, r8
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1110 	mls	r1, r7, r0, r1
 8000478:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800047c:	fb0e fe00 	mul.w	lr, lr, r0
 8000480:	45a6      	cmp	lr, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x156>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f100 31ff 	add.w	r1, r0, #4294967295
 800048c:	d202      	bcs.n	8000494 <__udivmoddi4+0x154>
 800048e:	45a6      	cmp	lr, r4
 8000490:	f200 80bb 	bhi.w	800060a <__udivmoddi4+0x2ca>
 8000494:	4608      	mov	r0, r1
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x9a>
 80004a0:	f1c6 0720 	rsb	r7, r6, #32
 80004a4:	40b3      	lsls	r3, r6
 80004a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ae:	fa20 f407 	lsr.w	r4, r0, r7
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	431c      	orrs	r4, r3
 80004b8:	40f9      	lsrs	r1, r7
 80004ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004be:	fa00 f306 	lsl.w	r3, r0, r6
 80004c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c6:	0c20      	lsrs	r0, r4, #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fb09 1118 	mls	r1, r9, r8, r1
 80004d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d4:	fb08 f00e 	mul.w	r0, r8, lr
 80004d8:	4288      	cmp	r0, r1
 80004da:	fa02 f206 	lsl.w	r2, r2, r6
 80004de:	d90b      	bls.n	80004f8 <__udivmoddi4+0x1b8>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e8:	f080 8088 	bcs.w	80005fc <__udivmoddi4+0x2bc>
 80004ec:	4288      	cmp	r0, r1
 80004ee:	f240 8085 	bls.w	80005fc <__udivmoddi4+0x2bc>
 80004f2:	f1a8 0802 	sub.w	r8, r8, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1a09      	subs	r1, r1, r0
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000500:	fb09 1110 	mls	r1, r9, r0, r1
 8000504:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000508:	fb00 fe0e 	mul.w	lr, r0, lr
 800050c:	458e      	cmp	lr, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x1e2>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f100 34ff 	add.w	r4, r0, #4294967295
 8000518:	d26c      	bcs.n	80005f4 <__udivmoddi4+0x2b4>
 800051a:	458e      	cmp	lr, r1
 800051c:	d96a      	bls.n	80005f4 <__udivmoddi4+0x2b4>
 800051e:	3802      	subs	r0, #2
 8000520:	4461      	add	r1, ip
 8000522:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000526:	fba0 9402 	umull	r9, r4, r0, r2
 800052a:	eba1 010e 	sub.w	r1, r1, lr
 800052e:	42a1      	cmp	r1, r4
 8000530:	46c8      	mov	r8, r9
 8000532:	46a6      	mov	lr, r4
 8000534:	d356      	bcc.n	80005e4 <__udivmoddi4+0x2a4>
 8000536:	d053      	beq.n	80005e0 <__udivmoddi4+0x2a0>
 8000538:	b15d      	cbz	r5, 8000552 <__udivmoddi4+0x212>
 800053a:	ebb3 0208 	subs.w	r2, r3, r8
 800053e:	eb61 010e 	sbc.w	r1, r1, lr
 8000542:	fa01 f707 	lsl.w	r7, r1, r7
 8000546:	fa22 f306 	lsr.w	r3, r2, r6
 800054a:	40f1      	lsrs	r1, r6
 800054c:	431f      	orrs	r7, r3
 800054e:	e9c5 7100 	strd	r7, r1, [r5]
 8000552:	2600      	movs	r6, #0
 8000554:	4631      	mov	r1, r6
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	40d8      	lsrs	r0, r3
 8000560:	fa0c fc02 	lsl.w	ip, ip, r2
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
 8000568:	4091      	lsls	r1, r2
 800056a:	4301      	orrs	r1, r0
 800056c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000570:	fa1f fe8c 	uxth.w	lr, ip
 8000574:	fbb3 f0f7 	udiv	r0, r3, r7
 8000578:	fb07 3610 	mls	r6, r7, r0, r3
 800057c:	0c0b      	lsrs	r3, r1, #16
 800057e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000582:	fb00 f60e 	mul.w	r6, r0, lr
 8000586:	429e      	cmp	r6, r3
 8000588:	fa04 f402 	lsl.w	r4, r4, r2
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x260>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 38ff 	add.w	r8, r0, #4294967295
 8000596:	d22f      	bcs.n	80005f8 <__udivmoddi4+0x2b8>
 8000598:	429e      	cmp	r6, r3
 800059a:	d92d      	bls.n	80005f8 <__udivmoddi4+0x2b8>
 800059c:	3802      	subs	r0, #2
 800059e:	4463      	add	r3, ip
 80005a0:	1b9b      	subs	r3, r3, r6
 80005a2:	b289      	uxth	r1, r1
 80005a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b0:	fb06 f30e 	mul.w	r3, r6, lr
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x28a>
 80005b8:	eb1c 0101 	adds.w	r1, ip, r1
 80005bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005c0:	d216      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d914      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 80005c6:	3e02      	subs	r6, #2
 80005c8:	4461      	add	r1, ip
 80005ca:	1ac9      	subs	r1, r1, r3
 80005cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005d0:	e738      	b.n	8000444 <__udivmoddi4+0x104>
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e705      	b.n	80003e4 <__udivmoddi4+0xa4>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e3      	b.n	80003a4 <__udivmoddi4+0x64>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x92>
 80005e0:	454b      	cmp	r3, r9
 80005e2:	d2a9      	bcs.n	8000538 <__udivmoddi4+0x1f8>
 80005e4:	ebb9 0802 	subs.w	r8, r9, r2
 80005e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7a3      	b.n	8000538 <__udivmoddi4+0x1f8>
 80005f0:	4646      	mov	r6, r8
 80005f2:	e7ea      	b.n	80005ca <__udivmoddi4+0x28a>
 80005f4:	4620      	mov	r0, r4
 80005f6:	e794      	b.n	8000522 <__udivmoddi4+0x1e2>
 80005f8:	4640      	mov	r0, r8
 80005fa:	e7d1      	b.n	80005a0 <__udivmoddi4+0x260>
 80005fc:	46d0      	mov	r8, sl
 80005fe:	e77b      	b.n	80004f8 <__udivmoddi4+0x1b8>
 8000600:	3b02      	subs	r3, #2
 8000602:	4461      	add	r1, ip
 8000604:	e732      	b.n	800046c <__udivmoddi4+0x12c>
 8000606:	4630      	mov	r0, r6
 8000608:	e709      	b.n	800041e <__udivmoddi4+0xde>
 800060a:	4464      	add	r4, ip
 800060c:	3802      	subs	r0, #2
 800060e:	e742      	b.n	8000496 <__udivmoddi4+0x156>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <ExtractBits>:
******************************************************************************/

unsigned long ExtractBits(unsigned short int us_Start,
                            unsigned short int us_NoOfBits,
                            unsigned char *puc_Msg)
{
 8000614:	b480      	push	{r7}
 8000616:	b087      	sub	sp, #28
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	603a      	str	r2, [r7, #0]
 800061e:	80fb      	strh	r3, [r7, #6]
 8000620:	460b      	mov	r3, r1
 8000622:	80bb      	strh	r3, [r7, #4]
		0x1FFFFFFL,0x3FFFFFFL,0x7FFFFFFL,0xFFFFFFFL,
		0x1FFFFFFFL,0x3FFFFFFFL,0x7FFFFFFFL,0xFFFFFFFFL
    };                                  /* Used for Masking */

    /* compute the offset of the farthest bit */
	us_BitPos = us_Start + us_NoOfBits;
 8000624:	88fa      	ldrh	r2, [r7, #6]
 8000626:	88bb      	ldrh	r3, [r7, #4]
 8000628:	4413      	add	r3, r2
 800062a:	823b      	strh	r3, [r7, #16]

    if (us_BitPos <= EIGHT)
 800062c:	8a3b      	ldrh	r3, [r7, #16]
 800062e:	2b08      	cmp	r3, #8
 8000630:	d806      	bhi.n	8000640 <ExtractBits+0x2c>
    {
	    /* All bits are in the same byte */
	    us_Start = SEVEN - us_Start;
 8000632:	88fb      	ldrh	r3, [r7, #6]
 8000634:	f1c3 0307 	rsb	r3, r3, #7
 8000638:	80fb      	strh	r3, [r7, #6]
	    us_NBytes = ONE;
 800063a:	2301      	movs	r3, #1
 800063c:	827b      	strh	r3, [r7, #18]
 800063e:	e019      	b.n	8000674 <ExtractBits+0x60>
    }
    else if (us_BitPos <= SIXTEEN)
 8000640:	8a3b      	ldrh	r3, [r7, #16]
 8000642:	2b10      	cmp	r3, #16
 8000644:	d806      	bhi.n	8000654 <ExtractBits+0x40>
    {
	    /* Bits straddle 2 bytes */
	    us_Start = FIFTEEN - us_Start;
 8000646:	88fb      	ldrh	r3, [r7, #6]
 8000648:	f1c3 030f 	rsb	r3, r3, #15
 800064c:	80fb      	strh	r3, [r7, #6]
	    us_NBytes = TWO;
 800064e:	2302      	movs	r3, #2
 8000650:	827b      	strh	r3, [r7, #18]
 8000652:	e00f      	b.n	8000674 <ExtractBits+0x60>
    }
		 else if (us_BitPos <= TWENTY_FOUR)
 8000654:	8a3b      	ldrh	r3, [r7, #16]
 8000656:	2b18      	cmp	r3, #24
 8000658:	d806      	bhi.n	8000668 <ExtractBits+0x54>
    {
	    /* Bits straddle 2 bytes */
	    us_Start = TWENTY_THREE - us_Start;
 800065a:	88fb      	ldrh	r3, [r7, #6]
 800065c:	f1c3 0317 	rsb	r3, r3, #23
 8000660:	80fb      	strh	r3, [r7, #6]
	    us_NBytes = THREE;
 8000662:	2303      	movs	r3, #3
 8000664:	827b      	strh	r3, [r7, #18]
 8000666:	e005      	b.n	8000674 <ExtractBits+0x60>
    }
    else
    {
	    /* Bits straddle 3 bytes */
	    us_Start = THIRTY_ONE - us_Start;
 8000668:	88fb      	ldrh	r3, [r7, #6]
 800066a:	f1c3 031f 	rsb	r3, r3, #31
 800066e:	80fb      	strh	r3, [r7, #6]
	    us_NBytes = FOUR;
 8000670:	2304      	movs	r3, #4
 8000672:	827b      	strh	r3, [r7, #18]
    }
    ul_DataBits = ZERO;
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]

    /* Read required no. of bytes */
    switch (us_NBytes)
 8000678:	8a7b      	ldrh	r3, [r7, #18]
 800067a:	3b01      	subs	r3, #1
 800067c:	2b03      	cmp	r3, #3
 800067e:	d834      	bhi.n	80006ea <ExtractBits+0xd6>
 8000680:	a201      	add	r2, pc, #4	; (adr r2, 8000688 <ExtractBits+0x74>)
 8000682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000686:	bf00      	nop
 8000688:	080006d5 	.word	0x080006d5
 800068c:	080006bf 	.word	0x080006bf
 8000690:	080006a9 	.word	0x080006a9
 8000694:	08000699 	.word	0x08000699
    {
	    case FOUR:
	        ul_DataBits |= *puc_Msg++;	/* caution: Fall through */
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	1c5a      	adds	r2, r3, #1
 800069c:	603a      	str	r2, [r7, #0]
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	461a      	mov	r2, r3
 80006a2:	697b      	ldr	r3, [r7, #20]
 80006a4:	4313      	orrs	r3, r2
 80006a6:	617b      	str	r3, [r7, #20]
	    case THREE:
	        ul_DataBits <<= EIGHT;
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	021b      	lsls	r3, r3, #8
 80006ac:	617b      	str	r3, [r7, #20]
	        ul_DataBits |= *puc_Msg++;
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	1c5a      	adds	r2, r3, #1
 80006b2:	603a      	str	r2, [r7, #0]
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	461a      	mov	r2, r3
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	4313      	orrs	r3, r2
 80006bc:	617b      	str	r3, [r7, #20]
	    case TWO:
	        ul_DataBits <<= EIGHT;
 80006be:	697b      	ldr	r3, [r7, #20]
 80006c0:	021b      	lsls	r3, r3, #8
 80006c2:	617b      	str	r3, [r7, #20]
	        ul_DataBits |= *puc_Msg++;
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	1c5a      	adds	r2, r3, #1
 80006c8:	603a      	str	r2, [r7, #0]
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	461a      	mov	r2, r3
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	4313      	orrs	r3, r2
 80006d2:	617b      	str	r3, [r7, #20]
	    case ONE:
	        ul_DataBits <<= EIGHT;
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	021b      	lsls	r3, r3, #8
 80006d8:	617b      	str	r3, [r7, #20]
	        ul_DataBits |= *puc_Msg++;
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	1c5a      	adds	r2, r3, #1
 80006de:	603a      	str	r2, [r7, #0]
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	461a      	mov	r2, r3
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	4313      	orrs	r3, r2
 80006e8:	617b      	str	r3, [r7, #20]
    }

    /* Compute number of bit position to shift */
    us_ShiftCount = us_Start - us_NoOfBits + ONE;
 80006ea:	88fa      	ldrh	r2, [r7, #6]
 80006ec:	88bb      	ldrh	r3, [r7, #4]
 80006ee:	1ad3      	subs	r3, r2, r3
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	3301      	adds	r3, #1
 80006f4:	81fb      	strh	r3, [r7, #14]

    /* Get bit mask which contains the 'us_NoOfBits' set to 1 */
    ul_BitMask = sul_AdMask[us_NoOfBits];
 80006f6:	88bb      	ldrh	r3, [r7, #4]
 80006f8:	4a0b      	ldr	r2, [pc, #44]	; (8000728 <ExtractBits+0x114>)
 80006fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006fe:	60bb      	str	r3, [r7, #8]

    /* Shift the mask to required position and extract the bits */
    ul_DataBits = ((ul_BitMask << (us_ShiftCount)) & ul_DataBits);
 8000700:	89fb      	ldrh	r3, [r7, #14]
 8000702:	68ba      	ldr	r2, [r7, #8]
 8000704:	fa02 f303 	lsl.w	r3, r2, r3
 8000708:	697a      	ldr	r2, [r7, #20]
 800070a:	4013      	ands	r3, r2
 800070c:	617b      	str	r3, [r7, #20]

    /* Right adjust the extracted bits */
    ul_DataBits = (ul_DataBits >> (us_ShiftCount));
 800070e:	89fb      	ldrh	r3, [r7, #14]
 8000710:	697a      	ldr	r2, [r7, #20]
 8000712:	fa22 f303 	lsr.w	r3, r2, r3
 8000716:	617b      	str	r3, [r7, #20]

    return(ul_DataBits);
 8000718:	697b      	ldr	r3, [r7, #20]
}	/* End of CommExtractBits */
 800071a:	4618      	mov	r0, r3
 800071c:	371c      	adds	r7, #28
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	20000000 	.word	0x20000000

0800072c <InsertBits>:

unsigned long InsertBits(unsigned short int us_Start,
                        unsigned short int us_NoOfBits,
                        unsigned char *puc_Msg,
                        unsigned long ul_DataIn)
{
 800072c:	b480      	push	{r7}
 800072e:	b08b      	sub	sp, #44	; 0x2c
 8000730:	af00      	add	r7, sp, #0
 8000732:	60ba      	str	r2, [r7, #8]
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	4603      	mov	r3, r0
 8000738:	81fb      	strh	r3, [r7, #14]
 800073a:	460b      	mov	r3, r1
 800073c:	81bb      	strh	r3, [r7, #12]
	    0x1FFFFFFL,0x3FFFFFFL,0x7FFFFFFL,0xFFFFFFFL,
	    0x1FFFFFFFL,0x3FFFFFFFL,0x7FFFFFFFL,0xFFFFFFFFL
    };                                   /* Used for Masking */

    /* Save current byte pointer */
	puc_Bit = puc_Msg;
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	61fb      	str	r3, [r7, #28]

    /* compute the offset of the farthest bit */
    us_BitPos = us_Start + us_NoOfBits;
 8000742:	89fa      	ldrh	r2, [r7, #14]
 8000744:	89bb      	ldrh	r3, [r7, #12]
 8000746:	4413      	add	r3, r2
 8000748:	837b      	strh	r3, [r7, #26]

    if (us_BitPos <= EIGHT)
 800074a:	8b7b      	ldrh	r3, [r7, #26]
 800074c:	2b08      	cmp	r3, #8
 800074e:	d806      	bhi.n	800075e <InsertBits+0x32>
    {
	    /* All bits are in the same byte */
	    us_Start = SEVEN - us_Start;
 8000750:	89fb      	ldrh	r3, [r7, #14]
 8000752:	f1c3 0307 	rsb	r3, r3, #7
 8000756:	81fb      	strh	r3, [r7, #14]
	    us_NBytes = ONE;
 8000758:	2301      	movs	r3, #1
 800075a:	847b      	strh	r3, [r7, #34]	; 0x22
 800075c:	e019      	b.n	8000792 <InsertBits+0x66>
    }
    else if (us_BitPos <= SIXTEEN)
 800075e:	8b7b      	ldrh	r3, [r7, #26]
 8000760:	2b10      	cmp	r3, #16
 8000762:	d806      	bhi.n	8000772 <InsertBits+0x46>
    {
	    /* Bits straddle 2 bytes */
	    us_Start = FIFTEEN - us_Start;
 8000764:	89fb      	ldrh	r3, [r7, #14]
 8000766:	f1c3 030f 	rsb	r3, r3, #15
 800076a:	81fb      	strh	r3, [r7, #14]
	    us_NBytes = TWO;
 800076c:	2302      	movs	r3, #2
 800076e:	847b      	strh	r3, [r7, #34]	; 0x22
 8000770:	e00f      	b.n	8000792 <InsertBits+0x66>
    }
		else if (us_BitPos <= TWENTY_FOUR)
 8000772:	8b7b      	ldrh	r3, [r7, #26]
 8000774:	2b18      	cmp	r3, #24
 8000776:	d806      	bhi.n	8000786 <InsertBits+0x5a>
		{
			us_Start = TWENTY_THREE - us_Start;
 8000778:	89fb      	ldrh	r3, [r7, #14]
 800077a:	f1c3 0317 	rsb	r3, r3, #23
 800077e:	81fb      	strh	r3, [r7, #14]
	    us_NBytes = THREE;
 8000780:	2303      	movs	r3, #3
 8000782:	847b      	strh	r3, [r7, #34]	; 0x22
 8000784:	e005      	b.n	8000792 <InsertBits+0x66>
		}
    else
    {
	    /* Bits straddle 4 bytes */
	    us_Start = THIRTY_ONE - us_Start;
 8000786:	89fb      	ldrh	r3, [r7, #14]
 8000788:	f1c3 031f 	rsb	r3, r3, #31
 800078c:	81fb      	strh	r3, [r7, #14]
	    us_NBytes = FOUR;
 800078e:	2304      	movs	r3, #4
 8000790:	847b      	strh	r3, [r7, #34]	; 0x22
    }

    ul_DataBits = ZERO;
 8000792:	2300      	movs	r3, #0
 8000794:	627b      	str	r3, [r7, #36]	; 0x24

    /* Read current data */
    switch (us_NBytes)
 8000796:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000798:	3b01      	subs	r3, #1
 800079a:	2b03      	cmp	r3, #3
 800079c:	d831      	bhi.n	8000802 <InsertBits+0xd6>
 800079e:	a201      	add	r2, pc, #4	; (adr r2, 80007a4 <InsertBits+0x78>)
 80007a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007a4:	080007f1 	.word	0x080007f1
 80007a8:	080007db 	.word	0x080007db
 80007ac:	080007c5 	.word	0x080007c5
 80007b0:	080007b5 	.word	0x080007b5
    {
	    case FOUR:
	        ul_DataBits |= *puc_Msg++;	 /* Caution: Fall through */
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	1c5a      	adds	r2, r3, #1
 80007b8:	60ba      	str	r2, [r7, #8]
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	461a      	mov	r2, r3
 80007be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c0:	4313      	orrs	r3, r2
 80007c2:	627b      	str	r3, [r7, #36]	; 0x24
	    case THREE:
	        ul_DataBits <<= EIGHT;
 80007c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c6:	021b      	lsls	r3, r3, #8
 80007c8:	627b      	str	r3, [r7, #36]	; 0x24
	        ul_DataBits |= *puc_Msg++;
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	1c5a      	adds	r2, r3, #1
 80007ce:	60ba      	str	r2, [r7, #8]
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	461a      	mov	r2, r3
 80007d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007d6:	4313      	orrs	r3, r2
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
	    case TWO:
	        ul_DataBits <<= EIGHT;
 80007da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007dc:	021b      	lsls	r3, r3, #8
 80007de:	627b      	str	r3, [r7, #36]	; 0x24
	        ul_DataBits |= *puc_Msg++;
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	1c5a      	adds	r2, r3, #1
 80007e4:	60ba      	str	r2, [r7, #8]
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	461a      	mov	r2, r3
 80007ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ec:	4313      	orrs	r3, r2
 80007ee:	627b      	str	r3, [r7, #36]	; 0x24
	    case ONE:
	        ul_DataBits <<= EIGHT;
 80007f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f2:	021b      	lsls	r3, r3, #8
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
	        ul_DataBits |= *puc_Msg;
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	461a      	mov	r2, r3
 80007fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007fe:	4313      	orrs	r3, r2
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
			default:
				   ;
    }

    /* Compute number of bit position to shift */
    us_ShiftCount = us_Start - us_NoOfBits + ONE;
 8000802:	89fa      	ldrh	r2, [r7, #14]
 8000804:	89bb      	ldrh	r3, [r7, #12]
 8000806:	1ad3      	subs	r3, r2, r3
 8000808:	b29b      	uxth	r3, r3
 800080a:	3301      	adds	r3, #1
 800080c:	833b      	strh	r3, [r7, #24]

    /* get bit mask which contains the 'us_NoOfBits' set to 1 */
    ul_BitMask = sul_AdMask[us_NoOfBits];
 800080e:	89bb      	ldrh	r3, [r7, #12]
 8000810:	4a23      	ldr	r2, [pc, #140]	; (80008a0 <InsertBits+0x174>)
 8000812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000816:	617b      	str	r3, [r7, #20]

    /* Mask the unwanted bits */
    ul_DataIn &= ul_BitMask;
 8000818:	687a      	ldr	r2, [r7, #4]
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	4013      	ands	r3, r2
 800081e:	607b      	str	r3, [r7, #4]

    /* Shift the data bits to required position */
    ul_DataIn <<= us_ShiftCount;
 8000820:	8b3b      	ldrh	r3, [r7, #24]
 8000822:	687a      	ldr	r2, [r7, #4]
 8000824:	fa02 f303 	lsl.w	r3, r2, r3
 8000828:	607b      	str	r3, [r7, #4]

    /* Reset the existing bits to 0 as per the mask */
    ul_DataBits &= ~(ul_BitMask << us_ShiftCount);
 800082a:	8b3b      	ldrh	r3, [r7, #24]
 800082c:	697a      	ldr	r2, [r7, #20]
 800082e:	fa02 f303 	lsl.w	r3, r2, r3
 8000832:	43db      	mvns	r3, r3
 8000834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000836:	4013      	ands	r3, r2
 8000838:	627b      	str	r3, [r7, #36]	; 0x24

    /* Copy the bits */
    ul_DataBits |= ul_DataIn;
 800083a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	4313      	orrs	r3, r2
 8000840:	627b      	str	r3, [r7, #36]	; 0x24

    /* Update bytes */
    switch (us_NBytes)
 8000842:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000844:	3b01      	subs	r3, #1
 8000846:	2b03      	cmp	r3, #3
 8000848:	d823      	bhi.n	8000892 <InsertBits+0x166>
 800084a:	a201      	add	r2, pc, #4	; (adr r2, 8000850 <InsertBits+0x124>)
 800084c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000850:	0800088b 	.word	0x0800088b
 8000854:	0800087d 	.word	0x0800087d
 8000858:	0800086f 	.word	0x0800086f
 800085c:	08000861 	.word	0x08000861
    {
	    case FOUR:
	        *puc_Bit++ = (char)(ul_DataBits >> TWENTY_FOUR);	/* caution: Fall through */
 8000860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000862:	0e19      	lsrs	r1, r3, #24
 8000864:	69fb      	ldr	r3, [r7, #28]
 8000866:	1c5a      	adds	r2, r3, #1
 8000868:	61fa      	str	r2, [r7, #28]
 800086a:	b2ca      	uxtb	r2, r1
 800086c:	701a      	strb	r2, [r3, #0]
	    case THREE:
	        *puc_Bit++ = (char)(ul_DataBits >> SIXTEEN);
 800086e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000870:	0c19      	lsrs	r1, r3, #16
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	1c5a      	adds	r2, r3, #1
 8000876:	61fa      	str	r2, [r7, #28]
 8000878:	b2ca      	uxtb	r2, r1
 800087a:	701a      	strb	r2, [r3, #0]
	    case TWO:
	        *puc_Bit++ = (char)(ul_DataBits >> EIGHT);
 800087c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800087e:	0a19      	lsrs	r1, r3, #8
 8000880:	69fb      	ldr	r3, [r7, #28]
 8000882:	1c5a      	adds	r2, r3, #1
 8000884:	61fa      	str	r2, [r7, #28]
 8000886:	b2ca      	uxtb	r2, r1
 8000888:	701a      	strb	r2, [r3, #0]
	    case ONE:
	        *puc_Bit = (char)(ul_DataBits);
 800088a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800088c:	b2da      	uxtb	r2, r3
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	701a      	strb	r2, [r3, #0]
			default:
				   ;
    }

    return ul_DataBits;
 8000892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}	/* End of CommInsertBits */
 8000894:	4618      	mov	r0, r3
 8000896:	372c      	adds	r7, #44	; 0x2c
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr
 80008a0:	20000084 	.word	0x20000084

080008a4 <Update_HitachiCommands>:
uint16_t EI_HealthStatus = 0;
EI_HEALTH_2_MIE_t Ei_health_2_mie_st;


void Update_HitachiCommands(void)
{
 80008a4:	b4b0      	push	{r4, r5, r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
	uint8_t CmdCnt = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	71fb      	strb	r3, [r7, #7]

	Commands_List[CmdCnt][0] = 0X24;
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	4a6e      	ldr	r2, [pc, #440]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008b2:	2132      	movs	r1, #50	; 0x32
 80008b4:	fb01 f303 	mul.w	r3, r1, r3
 80008b8:	4413      	add	r3, r2
 80008ba:	2224      	movs	r2, #36	; 0x24
 80008bc:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][1] = 0X01;
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	4a6a      	ldr	r2, [pc, #424]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008c2:	2132      	movs	r1, #50	; 0x32
 80008c4:	fb01 f303 	mul.w	r3, r1, r3
 80008c8:	4413      	add	r3, r2
 80008ca:	3301      	adds	r3, #1
 80008cc:	2201      	movs	r2, #1
 80008ce:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][2] = 0X30;
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	4a66      	ldr	r2, [pc, #408]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008d4:	2132      	movs	r1, #50	; 0x32
 80008d6:	fb01 f303 	mul.w	r3, r1, r3
 80008da:	4413      	add	r3, r2
 80008dc:	3302      	adds	r3, #2
 80008de:	2230      	movs	r2, #48	; 0x30
 80008e0:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][3] = 0X40;
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	4a61      	ldr	r2, [pc, #388]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008e6:	2132      	movs	r1, #50	; 0x32
 80008e8:	fb01 f303 	mul.w	r3, r1, r3
 80008ec:	4413      	add	r3, r2
 80008ee:	3303      	adds	r3, #3
 80008f0:	2240      	movs	r2, #64	; 0x40
 80008f2:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][4] = 0XC0;
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	4a5d      	ldr	r2, [pc, #372]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008f8:	2132      	movs	r1, #50	; 0x32
 80008fa:	fb01 f303 	mul.w	r3, r1, r3
 80008fe:	4413      	add	r3, r2
 8000900:	3304      	adds	r3, #4
 8000902:	22c0      	movs	r2, #192	; 0xc0
 8000904:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][5] = 0X4E;
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	4a58      	ldr	r2, [pc, #352]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 800090a:	2132      	movs	r1, #50	; 0x32
 800090c:	fb01 f303 	mul.w	r3, r1, r3
 8000910:	4413      	add	r3, r2
 8000912:	3305      	adds	r3, #5
 8000914:	224e      	movs	r2, #78	; 0x4e
 8000916:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][6] = 0X26;
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	4a54      	ldr	r2, [pc, #336]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 800091c:	2132      	movs	r1, #50	; 0x32
 800091e:	fb01 f303 	mul.w	r3, r1, r3
 8000922:	4413      	add	r3, r2
 8000924:	3306      	adds	r3, #6
 8000926:	2226      	movs	r2, #38	; 0x26
 8000928:	701a      	strb	r2, [r3, #0]
	++CmdCnt;
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	3301      	adds	r3, #1
 800092e:	71fb      	strb	r3, [r7, #7]




	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"DEBUG_MODE");
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	1c5a      	adds	r2, r3, #1
 8000934:	71fa      	strb	r2, [r7, #7]
 8000936:	461a      	mov	r2, r3
 8000938:	2332      	movs	r3, #50	; 0x32
 800093a:	fb02 f303 	mul.w	r3, r2, r3
 800093e:	4a4b      	ldr	r2, [pc, #300]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000940:	4413      	add	r3, r2
 8000942:	494b      	ldr	r1, [pc, #300]	; (8000a70 <Update_HitachiCommands+0x1cc>)
 8000944:	461a      	mov	r2, r3
 8000946:	460b      	mov	r3, r1
 8000948:	cb03      	ldmia	r3!, {r0, r1}
 800094a:	6010      	str	r0, [r2, #0]
 800094c:	6051      	str	r1, [r2, #4]
 800094e:	8819      	ldrh	r1, [r3, #0]
 8000950:	789b      	ldrb	r3, [r3, #2]
 8000952:	8111      	strh	r1, [r2, #8]
 8000954:	7293      	strb	r3, [r2, #10]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_ADDRESS");
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	1c5a      	adds	r2, r3, #1
 800095a:	71fa      	strb	r2, [r7, #7]
 800095c:	461a      	mov	r2, r3
 800095e:	2332      	movs	r3, #50	; 0x32
 8000960:	fb02 f303 	mul.w	r3, r2, r3
 8000964:	4a41      	ldr	r2, [pc, #260]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000966:	4413      	add	r3, r2
 8000968:	4a42      	ldr	r2, [pc, #264]	; (8000a74 <Update_HitachiCommands+0x1d0>)
 800096a:	461c      	mov	r4, r3
 800096c:	4615      	mov	r5, r2
 800096e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000970:	6020      	str	r0, [r4, #0]
 8000972:	6061      	str	r1, [r4, #4]
 8000974:	60a2      	str	r2, [r4, #8]
 8000976:	60e3      	str	r3, [r4, #12]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_BOOLEAN");
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	1c5a      	adds	r2, r3, #1
 800097c:	71fa      	strb	r2, [r7, #7]
 800097e:	461a      	mov	r2, r3
 8000980:	2332      	movs	r3, #50	; 0x32
 8000982:	fb02 f303 	mul.w	r3, r2, r3
 8000986:	4a39      	ldr	r2, [pc, #228]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000988:	4413      	add	r3, r2
 800098a:	4a3b      	ldr	r2, [pc, #236]	; (8000a78 <Update_HitachiCommands+0x1d4>)
 800098c:	461c      	mov	r4, r3
 800098e:	4615      	mov	r5, r2
 8000990:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000992:	6020      	str	r0, [r4, #0]
 8000994:	6061      	str	r1, [r4, #4]
 8000996:	60a2      	str	r2, [r4, #8]
 8000998:	60e3      	str	r3, [r4, #12]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"STALE_DATA_TIMEOUT");
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	1c5a      	adds	r2, r3, #1
 800099e:	71fa      	strb	r2, [r7, #7]
 80009a0:	461a      	mov	r2, r3
 80009a2:	2332      	movs	r3, #50	; 0x32
 80009a4:	fb02 f303 	mul.w	r3, r2, r3
 80009a8:	4a30      	ldr	r2, [pc, #192]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80009aa:	4413      	add	r3, r2
 80009ac:	4a33      	ldr	r2, [pc, #204]	; (8000a7c <Update_HitachiCommands+0x1d8>)
 80009ae:	461d      	mov	r5, r3
 80009b0:	4614      	mov	r4, r2
 80009b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009b4:	6028      	str	r0, [r5, #0]
 80009b6:	6069      	str	r1, [r5, #4]
 80009b8:	60aa      	str	r2, [r5, #8]
 80009ba:	60eb      	str	r3, [r5, #12]
 80009bc:	8823      	ldrh	r3, [r4, #0]
 80009be:	78a2      	ldrb	r2, [r4, #2]
 80009c0:	822b      	strh	r3, [r5, #16]
 80009c2:	4613      	mov	r3, r2
 80009c4:	74ab      	strb	r3, [r5, #18]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"RX_VITAL_INIT_FAIL");
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	1c5a      	adds	r2, r3, #1
 80009ca:	71fa      	strb	r2, [r7, #7]
 80009cc:	461a      	mov	r2, r3
 80009ce:	2332      	movs	r3, #50	; 0x32
 80009d0:	fb02 f303 	mul.w	r3, r2, r3
 80009d4:	4a25      	ldr	r2, [pc, #148]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80009d6:	4413      	add	r3, r2
 80009d8:	4a29      	ldr	r2, [pc, #164]	; (8000a80 <Update_HitachiCommands+0x1dc>)
 80009da:	461d      	mov	r5, r3
 80009dc:	4614      	mov	r4, r2
 80009de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009e0:	6028      	str	r0, [r5, #0]
 80009e2:	6069      	str	r1, [r5, #4]
 80009e4:	60aa      	str	r2, [r5, #8]
 80009e6:	60eb      	str	r3, [r5, #12]
 80009e8:	8823      	ldrh	r3, [r4, #0]
 80009ea:	78a2      	ldrb	r2, [r4, #2]
 80009ec:	822b      	strh	r3, [r5, #16]
 80009ee:	4613      	mov	r3, r2
 80009f0:	74ab      	strb	r3, [r5, #18]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"TX_VITAL_INIT_FAIL");
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	1c5a      	adds	r2, r3, #1
 80009f6:	71fa      	strb	r2, [r7, #7]
 80009f8:	461a      	mov	r2, r3
 80009fa:	2332      	movs	r3, #50	; 0x32
 80009fc:	fb02 f303 	mul.w	r3, r2, r3
 8000a00:	4a1a      	ldr	r2, [pc, #104]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000a02:	4413      	add	r3, r2
 8000a04:	4a1f      	ldr	r2, [pc, #124]	; (8000a84 <Update_HitachiCommands+0x1e0>)
 8000a06:	461d      	mov	r5, r3
 8000a08:	4614      	mov	r4, r2
 8000a0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a0c:	6028      	str	r0, [r5, #0]
 8000a0e:	6069      	str	r1, [r5, #4]
 8000a10:	60aa      	str	r2, [r5, #8]
 8000a12:	60eb      	str	r3, [r5, #12]
 8000a14:	8823      	ldrh	r3, [r4, #0]
 8000a16:	78a2      	ldrb	r2, [r4, #2]
 8000a18:	822b      	strh	r3, [r5, #16]
 8000a1a:	4613      	mov	r3, r2
 8000a1c:	74ab      	strb	r3, [r5, #18]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"CLEAR_ALL");
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	1c5a      	adds	r2, r3, #1
 8000a22:	71fa      	strb	r2, [r7, #7]
 8000a24:	461a      	mov	r2, r3
 8000a26:	2332      	movs	r3, #50	; 0x32
 8000a28:	fb02 f303 	mul.w	r3, r2, r3
 8000a2c:	4a0f      	ldr	r2, [pc, #60]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000a2e:	4413      	add	r3, r2
 8000a30:	4915      	ldr	r1, [pc, #84]	; (8000a88 <Update_HitachiCommands+0x1e4>)
 8000a32:	461a      	mov	r2, r3
 8000a34:	460b      	mov	r3, r1
 8000a36:	cb03      	ldmia	r3!, {r0, r1}
 8000a38:	6010      	str	r0, [r2, #0]
 8000a3a:	6051      	str	r1, [r2, #4]
 8000a3c:	881b      	ldrh	r3, [r3, #0]
 8000a3e:	8113      	strh	r3, [r2, #8]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"HELP");
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	1c5a      	adds	r2, r3, #1
 8000a44:	71fa      	strb	r2, [r7, #7]
 8000a46:	461a      	mov	r2, r3
 8000a48:	2332      	movs	r3, #50	; 0x32
 8000a4a:	fb02 f303 	mul.w	r3, r2, r3
 8000a4e:	4a07      	ldr	r2, [pc, #28]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000a50:	4413      	add	r3, r2
 8000a52:	4a0e      	ldr	r2, [pc, #56]	; (8000a8c <Update_HitachiCommands+0x1e8>)
 8000a54:	6810      	ldr	r0, [r2, #0]
 8000a56:	6018      	str	r0, [r3, #0]
 8000a58:	7912      	ldrb	r2, [r2, #4]
 8000a5a:	711a      	strb	r2, [r3, #4]
	Commands_Count =  CmdCnt;
 8000a5c:	4a0c      	ldr	r2, [pc, #48]	; (8000a90 <Update_HitachiCommands+0x1ec>)
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	7013      	strb	r3, [r2, #0]
}
 8000a62:	bf00      	nop
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bcb0      	pop	{r4, r5, r7}
 8000a6a:	4770      	bx	lr
 8000a6c:	20000a50 	.word	0x20000a50
 8000a70:	08024080 	.word	0x08024080
 8000a74:	0802408c 	.word	0x0802408c
 8000a78:	0802409c 	.word	0x0802409c
 8000a7c:	080240ac 	.word	0x080240ac
 8000a80:	080240c0 	.word	0x080240c0
 8000a84:	080240d4 	.word	0x080240d4
 8000a88:	080240e8 	.word	0x080240e8
 8000a8c:	080240f4 	.word	0x080240f4
 8000a90:	20000e38 	.word	0x20000e38

08000a94 <__io_putchar>:




PUTCHAR_PROTOTYPE
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 0xFFFF);
 8000a9c:	1d39      	adds	r1, r7, #4
 8000a9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	4807      	ldr	r0, [pc, #28]	; (8000ac4 <__io_putchar+0x30>)
 8000aa6:	f01a fde7 	bl	801b678 <HAL_UART_Transmit>
	//HAL_UART_Transmit(&DLL_COM, (uint8_t*) &ch, 1, 0xFFFF);
	setvbuf(stdout, NULL, _IONBF, 0); //For printing even without Newline
 8000aaa:	4b07      	ldr	r3, [pc, #28]	; (8000ac8 <__io_putchar+0x34>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	6898      	ldr	r0, [r3, #8]
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	2202      	movs	r2, #2
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	f022 f913 	bl	8022ce0 <setvbuf>
	return ch;
 8000aba:	687b      	ldr	r3, [r7, #4]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	2000bcf4 	.word	0x2000bcf4
 8000ac8:	20000140 	.word	0x20000140

08000acc <Get_Slot>:



void Get_Slot(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
	uint8_t Local_SlotID = 0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	71fb      	strb	r3, [r7, #7]
	uint8_t *ptr = (uint8_t *)&Slot;
 8000ad6:	4b1d      	ldr	r3, [pc, #116]	; (8000b4c <Get_Slot+0x80>)
 8000ad8:	603b      	str	r3, [r7, #0]
	Local_SlotID |= (!HAL_GPIO_ReadPin(IP3_GPIO_Port, IP3_Pin)) << 0;
 8000ada:	2108      	movs	r1, #8
 8000adc:	481c      	ldr	r0, [pc, #112]	; (8000b50 <Get_Slot+0x84>)
 8000ade:	f017 fcbb 	bl	8018458 <HAL_GPIO_ReadPin>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	bf0c      	ite	eq
 8000ae8:	2301      	moveq	r3, #1
 8000aea:	2300      	movne	r3, #0
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	b25a      	sxtb	r2, r3
 8000af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	b25b      	sxtb	r3, r3
 8000af8:	71fb      	strb	r3, [r7, #7]
	Local_SlotID |= (!HAL_GPIO_ReadPin(IP4_GPIO_Port, IP4_Pin)) << 1;
 8000afa:	2110      	movs	r1, #16
 8000afc:	4814      	ldr	r0, [pc, #80]	; (8000b50 <Get_Slot+0x84>)
 8000afe:	f017 fcab 	bl	8018458 <HAL_GPIO_ReadPin>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d101      	bne.n	8000b0c <Get_Slot+0x40>
 8000b08:	2302      	movs	r3, #2
 8000b0a:	e000      	b.n	8000b0e <Get_Slot+0x42>
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	b25a      	sxtb	r2, r3
 8000b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	b25b      	sxtb	r3, r3
 8000b18:	71fb      	strb	r3, [r7, #7]
	Local_SlotID |= (!HAL_GPIO_ReadPin(IP5_GPIO_Port, IP5_Pin)) << 2;
 8000b1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b1e:	480d      	ldr	r0, [pc, #52]	; (8000b54 <Get_Slot+0x88>)
 8000b20:	f017 fc9a 	bl	8018458 <HAL_GPIO_ReadPin>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d101      	bne.n	8000b2e <Get_Slot+0x62>
 8000b2a:	2304      	movs	r3, #4
 8000b2c:	e000      	b.n	8000b30 <Get_Slot+0x64>
 8000b2e:	2300      	movs	r3, #0
 8000b30:	b25a      	sxtb	r2, r3
 8000b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b36:	4313      	orrs	r3, r2
 8000b38:	b25b      	sxtb	r3, r3
 8000b3a:	71fb      	strb	r3, [r7, #7]

	*ptr = Local_SlotID;
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	79fa      	ldrb	r2, [r7, #7]
 8000b40:	701a      	strb	r2, [r3, #0]

}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000a48 	.word	0x20000a48
 8000b50:	40022800 	.word	0x40022800
 8000b54:	40022000 	.word	0x40022000

08000b58 <Check_for_cmd>:




void Check_for_cmd(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b09a      	sub	sp, #104	; 0x68
 8000b5c:	af00      	add	r7, sp, #0
	//	unsigned char ch[20] = {0,},i=0;
	uint8_t IS_COMMAND_RECEIVED = NO;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t Index = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t Byte = 0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	uint8_t Buffer[100] = {0,};
 8000b70:	2300      	movs	r3, #0
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	1d3b      	adds	r3, r7, #4
 8000b76:	2260      	movs	r2, #96	; 0x60
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f021 fed6 	bl	802292c <memset>
	if(HAL_Elaps_Ticks(Isp_Intr_Clk) < 10)
 8000b80:	4bc0      	ldr	r3, [pc, #768]	; (8000e84 <Check_for_cmd+0x32c>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f00e f9c5 	bl	800ef14 <HAL_Elaps_Ticks>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b09      	cmp	r3, #9
 8000b8e:	f240 8175 	bls.w	8000e7c <Check_for_cmd+0x324>
	{
		return;
	}
	else
	{
		while(Com_DataReady(ISP_PORT))
 8000b92:	e010      	b.n	8000bb6 <Check_for_cmd+0x5e>
		{
			Byte = Com_Get_Byte(ISP_PORT);
 8000b94:	2000      	movs	r0, #0
 8000b96:	f014 fc7f 	bl	8015498 <Com_Get_Byte>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			Buffer[Index++] = Byte;
 8000ba0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000ba4:	1c5a      	adds	r2, r3, #1
 8000ba6:	f887 2066 	strb.w	r2, [r7, #102]	; 0x66
 8000baa:	3368      	adds	r3, #104	; 0x68
 8000bac:	443b      	add	r3, r7
 8000bae:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8000bb2:	f803 2c68 	strb.w	r2, [r3, #-104]
		while(Com_DataReady(ISP_PORT))
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	f014 fc2e 	bl	8015418 <Com_DataReady>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d1e8      	bne.n	8000b94 <Check_for_cmd+0x3c>
		}
		if(Index>0)
 8000bc2:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f000 814e 	beq.w	8000e68 <Check_for_cmd+0x310>
		{
			Buffer[Index] = 0;
 8000bcc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000bd0:	3368      	adds	r3, #104	; 0x68
 8000bd2:	443b      	add	r3, r7
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f803 2c68 	strb.w	r2, [r3, #-104]
			printf("Received from ISP:%s\n",Buffer);
 8000bda:	463b      	mov	r3, r7
 8000bdc:	4619      	mov	r1, r3
 8000bde:	48aa      	ldr	r0, [pc, #680]	; (8000e88 <Check_for_cmd+0x330>)
 8000be0:	f021 ff8c 	bl	8022afc <iprintf>
			switch(Is_Command_Valid(Buffer,Index))
 8000be4:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8000be8:	463b      	mov	r3, r7
 8000bea:	4611      	mov	r1, r2
 8000bec:	4618      	mov	r0, r3
 8000bee:	f000 f979 	bl	8000ee4 <Is_Command_Valid>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b09      	cmp	r3, #9
 8000bf6:	f200 8133 	bhi.w	8000e60 <Check_for_cmd+0x308>
 8000bfa:	a201      	add	r2, pc, #4	; (adr r2, 8000c00 <Check_for_cmd+0xa8>)
 8000bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c00:	08000c29 	.word	0x08000c29
 8000c04:	08000c37 	.word	0x08000c37
 8000c08:	08000c9b 	.word	0x08000c9b
 8000c0c:	08000cf1 	.word	0x08000cf1
 8000c10:	08000d4d 	.word	0x08000d4d
 8000c14:	08000d97 	.word	0x08000d97
 8000c18:	08000ddb 	.word	0x08000ddb
 8000c1c:	08000e1f 	.word	0x08000e1f
 8000c20:	08000e3b 	.word	0x08000e3b
 8000c24:	08000e45 	.word	0x08000e45
			{
			case ZERO:
				Dats_Request_Flag = 1;
 8000c28:	4b98      	ldr	r3, [pc, #608]	; (8000e8c <Check_for_cmd+0x334>)
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	701a      	strb	r2, [r3, #0]
				printf("\n*************PLEASE LOAD EI DATS USING APPLICATION************\n");
 8000c2e:	4898      	ldr	r0, [pc, #608]	; (8000e90 <Check_for_cmd+0x338>)
 8000c30:	f022 f800 	bl	8022c34 <puts>
				break;
 8000c34:	e119      	b.n	8000e6a <Check_for_cmd+0x312>
			case ONE:
				printf("Received \"%s\":%u\n",Commands_List[ONE],(Buffer[Index-1])-'0');
 8000c36:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	3368      	adds	r3, #104	; 0x68
 8000c3e:	443b      	add	r3, r7
 8000c40:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000c44:	3b30      	subs	r3, #48	; 0x30
 8000c46:	461a      	mov	r2, r3
 8000c48:	4992      	ldr	r1, [pc, #584]	; (8000e94 <Check_for_cmd+0x33c>)
 8000c4a:	4893      	ldr	r0, [pc, #588]	; (8000e98 <Check_for_cmd+0x340>)
 8000c4c:	f021 ff56 	bl	8022afc <iprintf>
				if( (((Buffer[Index-1])-'0') >= 0) && ((Buffer[Index-1])-'0') < 2)
 8000c50:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c54:	3b01      	subs	r3, #1
 8000c56:	3368      	adds	r3, #104	; 0x68
 8000c58:	443b      	add	r3, r7
 8000c5a:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000c5e:	2b2f      	cmp	r3, #47	; 0x2f
 8000c60:	d914      	bls.n	8000c8c <Check_for_cmd+0x134>
 8000c62:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c66:	3b01      	subs	r3, #1
 8000c68:	3368      	adds	r3, #104	; 0x68
 8000c6a:	443b      	add	r3, r7
 8000c6c:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000c70:	2b31      	cmp	r3, #49	; 0x31
 8000c72:	d80b      	bhi.n	8000c8c <Check_for_cmd+0x134>
				{
					Debug_flag = (Buffer[Index-1])-'0';
 8000c74:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	3368      	adds	r3, #104	; 0x68
 8000c7c:	443b      	add	r3, r7
 8000c7e:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000c82:	3b30      	subs	r3, #48	; 0x30
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	4b85      	ldr	r3, [pc, #532]	; (8000e9c <Check_for_cmd+0x344>)
 8000c88:	701a      	strb	r2, [r3, #0]
 8000c8a:	e002      	b.n	8000c92 <Check_for_cmd+0x13a>
				}
				else
				{
					printf("Please Send Valid Command\n");
 8000c8c:	4884      	ldr	r0, [pc, #528]	; (8000ea0 <Check_for_cmd+0x348>)
 8000c8e:	f021 ffd1 	bl	8022c34 <puts>
				}
				IS_COMMAND_RECEIVED = YES;
 8000c92:	2301      	movs	r3, #1
 8000c94:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8000c98:	e0e7      	b.n	8000e6a <Check_for_cmd+0x312>

			case TWO:
				printf("Received %s for Peer:%u\n",Commands_List[TWO],(Buffer[Index-1])-'0'); /* Invalid Address*/
 8000c9a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	3368      	adds	r3, #104	; 0x68
 8000ca2:	443b      	add	r3, r7
 8000ca4:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000ca8:	3b30      	subs	r3, #48	; 0x30
 8000caa:	461a      	mov	r2, r3
 8000cac:	497d      	ldr	r1, [pc, #500]	; (8000ea4 <Check_for_cmd+0x34c>)
 8000cae:	487e      	ldr	r0, [pc, #504]	; (8000ea8 <Check_for_cmd+0x350>)
 8000cb0:	f021 ff24 	bl	8022afc <iprintf>
				printf("Invalid Addess\n");
 8000cb4:	487d      	ldr	r0, [pc, #500]	; (8000eac <Check_for_cmd+0x354>)
 8000cb6:	f021 ffbd 	bl	8022c34 <puts>
				SET_BIT_USER(4,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000cba:	4b7d      	ldr	r3, [pc, #500]	; (8000eb0 <Check_for_cmd+0x358>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f043 0310 	orr.w	r3, r3, #16
 8000cc2:	4a7b      	ldr	r2, [pc, #492]	; (8000eb0 <Check_for_cmd+0x358>)
 8000cc4:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= ((Buffer[Index-1])-'0');
 8000cc6:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	3368      	adds	r3, #104	; 0x68
 8000cce:	443b      	add	r3, r7
 8000cd0:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000cd4:	3b30      	subs	r3, #48	; 0x30
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	4b75      	ldr	r3, [pc, #468]	; (8000eb0 <Check_for_cmd+0x358>)
 8000cda:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				printf("\nFAULT BITS:%08lx\n",Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000ce2:	4b73      	ldr	r3, [pc, #460]	; (8000eb0 <Check_for_cmd+0x358>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4872      	ldr	r0, [pc, #456]	; (8000eb4 <Check_for_cmd+0x35c>)
 8000cea:	f021 ff07 	bl	8022afc <iprintf>
				break;
 8000cee:	e0bc      	b.n	8000e6a <Check_for_cmd+0x312>

			case THREE:
				/* Invalid Boolean Inputs, To do this case 1st we Have to break the Communication of the Peer
				 * By Either Not reply to peer up to stale Data Time (or) By Rejecting Packets of the Up to stale data time out.
				 */
				printf("Received %s for Peer:%u\n",Commands_List[THREE],(Buffer[Index-1])-'0');
 8000cf0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000cf4:	3b01      	subs	r3, #1
 8000cf6:	3368      	adds	r3, #104	; 0x68
 8000cf8:	443b      	add	r3, r7
 8000cfa:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000cfe:	3b30      	subs	r3, #48	; 0x30
 8000d00:	461a      	mov	r2, r3
 8000d02:	496d      	ldr	r1, [pc, #436]	; (8000eb8 <Check_for_cmd+0x360>)
 8000d04:	4868      	ldr	r0, [pc, #416]	; (8000ea8 <Check_for_cmd+0x350>)
 8000d06:	f021 fef9 	bl	8022afc <iprintf>
				printf("Invalid Boolean\n");
 8000d0a:	486c      	ldr	r0, [pc, #432]	; (8000ebc <Check_for_cmd+0x364>)
 8000d0c:	f021 ff92 	bl	8022c34 <puts>
				Hitachi_fault_injection_st.FAULT_INJECTION_BITS = 0;
 8000d10:	4b67      	ldr	r3, [pc, #412]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(5,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000d16:	4b66      	ldr	r3, [pc, #408]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f043 0320 	orr.w	r3, r3, #32
 8000d1e:	4a64      	ldr	r2, [pc, #400]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d20:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX =  ((Buffer[Index-1])-'0');
 8000d22:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000d26:	3b01      	subs	r3, #1
 8000d28:	3368      	adds	r3, #104	; 0x68
 8000d2a:	443b      	add	r3, r7
 8000d2c:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000d30:	3b30      	subs	r3, #48	; 0x30
 8000d32:	b2da      	uxtb	r2, r3
 8000d34:	4b5e      	ldr	r3, [pc, #376]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d36:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				printf("\nFAULT BITS:%08lx\n",Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000d3e:	4b5c      	ldr	r3, [pc, #368]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4619      	mov	r1, r3
 8000d44:	485b      	ldr	r0, [pc, #364]	; (8000eb4 <Check_for_cmd+0x35c>)
 8000d46:	f021 fed9 	bl	8022afc <iprintf>
				break;
 8000d4a:	e08e      	b.n	8000e6a <Check_for_cmd+0x312>

			case FOUR:
				printf("Received %s for Peer:%u\n",Commands_List[FOUR],(Buffer[Index-1])-'0'); /* STALE Data Timeout by Not Replying to the Peer */
 8000d4c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000d50:	3b01      	subs	r3, #1
 8000d52:	3368      	adds	r3, #104	; 0x68
 8000d54:	443b      	add	r3, r7
 8000d56:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000d5a:	3b30      	subs	r3, #48	; 0x30
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4958      	ldr	r1, [pc, #352]	; (8000ec0 <Check_for_cmd+0x368>)
 8000d60:	4851      	ldr	r0, [pc, #324]	; (8000ea8 <Check_for_cmd+0x350>)
 8000d62:	f021 fecb 	bl	8022afc <iprintf>
				printf("Making Ethernet TX Disable\n");
 8000d66:	4857      	ldr	r0, [pc, #348]	; (8000ec4 <Check_for_cmd+0x36c>)
 8000d68:	f021 ff64 	bl	8022c34 <puts>
				SET_BIT_USER(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000d6c:	4b50      	ldr	r3, [pc, #320]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d74:	4a4e      	ldr	r2, [pc, #312]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d76:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= ((Buffer[Index-1])-'0');
 8000d78:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000d7c:	3b01      	subs	r3, #1
 8000d7e:	3368      	adds	r3, #104	; 0x68
 8000d80:	443b      	add	r3, r7
 8000d82:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000d86:	3b30      	subs	r3, #48	; 0x30
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	4b49      	ldr	r3, [pc, #292]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d8c:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8000d94:	e069      	b.n	8000e6a <Check_for_cmd+0x312>

			case FIVE:
				/* Vital Init Value Received from MICROLOK will be Modified */
				printf("Received %s for Peer:%u\n",Commands_List[FIVE],(Buffer[Index-1])-'0');
 8000d96:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	3368      	adds	r3, #104	; 0x68
 8000d9e:	443b      	add	r3, r7
 8000da0:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000da4:	3b30      	subs	r3, #48	; 0x30
 8000da6:	461a      	mov	r2, r3
 8000da8:	4947      	ldr	r1, [pc, #284]	; (8000ec8 <Check_for_cmd+0x370>)
 8000daa:	483f      	ldr	r0, [pc, #252]	; (8000ea8 <Check_for_cmd+0x350>)
 8000dac:	f021 fea6 	bl	8022afc <iprintf>
				SET_BIT_USER(0,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000db0:	4b3f      	ldr	r3, [pc, #252]	; (8000eb0 <Check_for_cmd+0x358>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	4a3d      	ldr	r2, [pc, #244]	; (8000eb0 <Check_for_cmd+0x358>)
 8000dba:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= ((Buffer[Index-1])-'0');
 8000dbc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	3368      	adds	r3, #104	; 0x68
 8000dc4:	443b      	add	r3, r7
 8000dc6:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000dca:	3b30      	subs	r3, #48	; 0x30
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	4b38      	ldr	r3, [pc, #224]	; (8000eb0 <Check_for_cmd+0x358>)
 8000dd0:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8000dd8:	e047      	b.n	8000e6a <Check_for_cmd+0x312>
			case SIX:
				/* Vital Init Value Sent by EIPC to MICROLOK
				 * is going to be Random value which will be prepend to the Message and CRC calculated and sent to MICROLOK
				 * This will make the CRC to Fail at MICROLOK end.
				 */
				printf("Received %s for Peer:%u\n",Commands_List[SIX],(Buffer[Index-1])-'0');
 8000dda:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000dde:	3b01      	subs	r3, #1
 8000de0:	3368      	adds	r3, #104	; 0x68
 8000de2:	443b      	add	r3, r7
 8000de4:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000de8:	3b30      	subs	r3, #48	; 0x30
 8000dea:	461a      	mov	r2, r3
 8000dec:	4937      	ldr	r1, [pc, #220]	; (8000ecc <Check_for_cmd+0x374>)
 8000dee:	482e      	ldr	r0, [pc, #184]	; (8000ea8 <Check_for_cmd+0x350>)
 8000df0:	f021 fe84 	bl	8022afc <iprintf>
				SET_BIT_USER(1,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000df4:	4b2e      	ldr	r3, [pc, #184]	; (8000eb0 <Check_for_cmd+0x358>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f043 0302 	orr.w	r3, r3, #2
 8000dfc:	4a2c      	ldr	r2, [pc, #176]	; (8000eb0 <Check_for_cmd+0x358>)
 8000dfe:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= ((Buffer[Index-1])-'0');
 8000e00:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000e04:	3b01      	subs	r3, #1
 8000e06:	3368      	adds	r3, #104	; 0x68
 8000e08:	443b      	add	r3, r7
 8000e0a:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000e0e:	3b30      	subs	r3, #48	; 0x30
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	4b27      	ldr	r3, [pc, #156]	; (8000eb0 <Check_for_cmd+0x358>)
 8000e14:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000e16:	2301      	movs	r3, #1
 8000e18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8000e1c:	e025      	b.n	8000e6a <Check_for_cmd+0x312>
			case SEVEN:
				/* CLEAR ALL */
				printf("Received %s\n",Commands_List[SEVEN]);
 8000e1e:	492c      	ldr	r1, [pc, #176]	; (8000ed0 <Check_for_cmd+0x378>)
 8000e20:	482c      	ldr	r0, [pc, #176]	; (8000ed4 <Check_for_cmd+0x37c>)
 8000e22:	f021 fe6b 	bl	8022afc <iprintf>
				Hitachi_fault_injection_st.FAULT_INJECTION_BITS = 0;
 8000e26:	4b22      	ldr	r3, [pc, #136]	; (8000eb0 <Check_for_cmd+0x358>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= 0XFF;
 8000e2c:	4b20      	ldr	r3, [pc, #128]	; (8000eb0 <Check_for_cmd+0x358>)
 8000e2e:	22ff      	movs	r2, #255	; 0xff
 8000e30:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000e32:	2301      	movs	r3, #1
 8000e34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

				break;
 8000e38:	e017      	b.n	8000e6a <Check_for_cmd+0x312>
			case EIGHT:
				printf("Received %s Command\n",Commands_List[EIGHT]);
 8000e3a:	4927      	ldr	r1, [pc, #156]	; (8000ed8 <Check_for_cmd+0x380>)
 8000e3c:	4827      	ldr	r0, [pc, #156]	; (8000edc <Check_for_cmd+0x384>)
 8000e3e:	f021 fe5d 	bl	8022afc <iprintf>
				break;
 8000e42:	e012      	b.n	8000e6a <Check_for_cmd+0x312>
			case NINE:
				printf("Received %s for Peer:%u\n",Commands_List[NINE],(Buffer[Index-1])-'0');
 8000e44:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	3368      	adds	r3, #104	; 0x68
 8000e4c:	443b      	add	r3, r7
 8000e4e:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000e52:	3b30      	subs	r3, #48	; 0x30
 8000e54:	461a      	mov	r2, r3
 8000e56:	4922      	ldr	r1, [pc, #136]	; (8000ee0 <Check_for_cmd+0x388>)
 8000e58:	4813      	ldr	r0, [pc, #76]	; (8000ea8 <Check_for_cmd+0x350>)
 8000e5a:	f021 fe4f 	bl	8022afc <iprintf>
				break;
 8000e5e:	e004      	b.n	8000e6a <Check_for_cmd+0x312>

			default:
				printf("Please Send Valid Command\n");
 8000e60:	480f      	ldr	r0, [pc, #60]	; (8000ea0 <Check_for_cmd+0x348>)
 8000e62:	f021 fee7 	bl	8022c34 <puts>
 8000e66:	e000      	b.n	8000e6a <Check_for_cmd+0x312>
			}
		}
 8000e68:	bf00      	nop

		if(IS_COMMAND_RECEIVED == YES)
 8000e6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d105      	bne.n	8000e7e <Check_for_cmd+0x326>
		{
			TransmitCanPkt(CAN_FAULT_INJECTION);
 8000e72:	f240 2005 	movw	r0, #517	; 0x205
 8000e76:	f00e fe07 	bl	800fa88 <TransmitCanPkt>
 8000e7a:	e000      	b.n	8000e7e <Check_for_cmd+0x326>
		return;
 8000e7c:	bf00      	nop
	{
		TransmitCanPkt(CAN_FAULT_INJECTION);
	}

#endif
}
 8000e7e:	3768      	adds	r7, #104	; 0x68
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	2000a0b4 	.word	0x2000a0b4
 8000e88:	080240fc 	.word	0x080240fc
 8000e8c:	20000644 	.word	0x20000644
 8000e90:	08024114 	.word	0x08024114
 8000e94:	20000a82 	.word	0x20000a82
 8000e98:	08024154 	.word	0x08024154
 8000e9c:	20000645 	.word	0x20000645
 8000ea0:	08024168 	.word	0x08024168
 8000ea4:	20000ab4 	.word	0x20000ab4
 8000ea8:	08024184 	.word	0x08024184
 8000eac:	080241a0 	.word	0x080241a0
 8000eb0:	20001968 	.word	0x20001968
 8000eb4:	080241b0 	.word	0x080241b0
 8000eb8:	20000ae6 	.word	0x20000ae6
 8000ebc:	080241c4 	.word	0x080241c4
 8000ec0:	20000b18 	.word	0x20000b18
 8000ec4:	080241d4 	.word	0x080241d4
 8000ec8:	20000b4a 	.word	0x20000b4a
 8000ecc:	20000b7c 	.word	0x20000b7c
 8000ed0:	20000bae 	.word	0x20000bae
 8000ed4:	080241f0 	.word	0x080241f0
 8000ed8:	20000be0 	.word	0x20000be0
 8000edc:	08024200 	.word	0x08024200
 8000ee0:	20000c12 	.word	0x20000c12

08000ee4 <Is_Command_Valid>:

uint8_t Is_Command_Valid(uint8_t *Buffer,uint8_t Length)
{
 8000ee4:	b590      	push	{r4, r7, lr}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	460b      	mov	r3, r1
 8000eee:	70fb      	strb	r3, [r7, #3]
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	73fb      	strb	r3, [r7, #15]
 8000ef4:	e01c      	b.n	8000f30 <Is_Command_Valid+0x4c>
	{
		//		if(strstr((char *)Buffer,(char *)Commands_List[Traverser]) != NULL)
		if(memcmp(Buffer,Commands_List[Traverser],strlen((char *)Commands_List[Traverser])) == 0)
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
 8000ef8:	2232      	movs	r2, #50	; 0x32
 8000efa:	fb02 f303 	mul.w	r3, r2, r3
 8000efe:	4a11      	ldr	r2, [pc, #68]	; (8000f44 <Is_Command_Valid+0x60>)
 8000f00:	189c      	adds	r4, r3, r2
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
 8000f04:	2232      	movs	r2, #50	; 0x32
 8000f06:	fb02 f303 	mul.w	r3, r2, r3
 8000f0a:	4a0e      	ldr	r2, [pc, #56]	; (8000f44 <Is_Command_Valid+0x60>)
 8000f0c:	4413      	add	r3, r2
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff f9a0 	bl	8000254 <strlen>
 8000f14:	4603      	mov	r3, r0
 8000f16:	461a      	mov	r2, r3
 8000f18:	4621      	mov	r1, r4
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f021 fcce 	bl	80228bc <memcmp>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d101      	bne.n	8000f2a <Is_Command_Valid+0x46>
		{
			return Traverser;
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
 8000f28:	e008      	b.n	8000f3c <Is_Command_Valid+0x58>
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	73fb      	strb	r3, [r7, #15]
 8000f30:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <Is_Command_Valid+0x64>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	7bfa      	ldrb	r2, [r7, #15]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d3dd      	bcc.n	8000ef6 <Is_Command_Valid+0x12>
		}
	}
	return 255;
 8000f3a:	23ff      	movs	r3, #255	; 0xff
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3714      	adds	r7, #20
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd90      	pop	{r4, r7, pc}
 8000f44:	20000a50 	.word	0x20000a50
 8000f48:	20000e38 	.word	0x20000e38

08000f4c <SendCombineHealth>:
}



void SendCombineHealth(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
	static uint32_t LastSentClk = 0;
	if(HAL_Elaps_Ticks(LastSentClk) > 3000)
 8000f52:	4b30      	ldr	r3, [pc, #192]	; (8001014 <SendCombineHealth+0xc8>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4618      	mov	r0, r3
 8000f58:	f00d ffdc 	bl	800ef14 <HAL_Elaps_Ticks>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d951      	bls.n	800100a <SendCombineHealth+0xbe>
	{

		Ei_health_2_mie_st.ProtocolType = EI_data.ProtocolType;
 8000f66:	4b2c      	ldr	r3, [pc, #176]	; (8001018 <SendCombineHealth+0xcc>)
 8000f68:	781a      	ldrb	r2, [r3, #0]
 8000f6a:	4b2c      	ldr	r3, [pc, #176]	; (800101c <SendCombineHealth+0xd0>)
 8000f6c:	701a      	strb	r2, [r3, #0]

		if(EI_data.ProtocolType == HITACHI)
 8000f6e:	4b2a      	ldr	r3, [pc, #168]	; (8001018 <SendCombineHealth+0xcc>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d105      	bne.n	8000f82 <SendCombineHealth+0x36>
		{
			Ei_health_2_mie_st.No_ofPeers =  EI_data.Hitachi_st.PeersCnt;
 8000f76:	4b28      	ldr	r3, [pc, #160]	; (8001018 <SendCombineHealth+0xcc>)
 8000f78:	f893 2020 	ldrb.w	r2, [r3, #32]
 8000f7c:	4b27      	ldr	r3, [pc, #156]	; (800101c <SendCombineHealth+0xd0>)
 8000f7e:	705a      	strb	r2, [r3, #1]
 8000f80:	e002      	b.n	8000f88 <SendCombineHealth+0x3c>
		}
		else
		{
			Ei_health_2_mie_st.No_ofPeers = 1;
 8000f82:	4b26      	ldr	r3, [pc, #152]	; (800101c <SendCombineHealth+0xd0>)
 8000f84:	2201      	movs	r2, #1
 8000f86:	705a      	strb	r2, [r3, #1]
		}

		for(uint8_t i=0;i<(Ei_health_2_mie_st.No_ofPeers);++i)
 8000f88:	2300      	movs	r3, #0
 8000f8a:	71fb      	strb	r3, [r7, #7]
 8000f8c:	e02f      	b.n	8000fee <SendCombineHealth+0xa2>
		{
			if(CHECKFLAG(i,EI_HealthStatus) == SET)
 8000f8e:	4b24      	ldr	r3, [pc, #144]	; (8001020 <SendCombineHealth+0xd4>)
 8000f90:	881b      	ldrh	r3, [r3, #0]
 8000f92:	461a      	mov	r2, r3
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	fa42 f303 	asr.w	r3, r2, r3
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d00f      	beq.n	8000fc2 <SendCombineHealth+0x76>
			{
				SET_BIT(i,Ei_health_2_mie_st.PeersStatuses);
 8000fa2:	4b1e      	ldr	r3, [pc, #120]	; (800101c <SendCombineHealth+0xd0>)
 8000fa4:	885b      	ldrh	r3, [r3, #2]
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	71fb      	strb	r3, [r7, #7]
				if(Debug_flag == 1)
 8000fae:	4b1d      	ldr	r3, [pc, #116]	; (8001024 <SendCombineHealth+0xd8>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d118      	bne.n	8000fe8 <SendCombineHealth+0x9c>
				{
					printf("P:%u:H:NOK\n",i);
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	4619      	mov	r1, r3
 8000fba:	481b      	ldr	r0, [pc, #108]	; (8001028 <SendCombineHealth+0xdc>)
 8000fbc:	f021 fd9e 	bl	8022afc <iprintf>
 8000fc0:	e012      	b.n	8000fe8 <SendCombineHealth+0x9c>
				}
			}
			else
			{
				CLEAR_BIT(i,Ei_health_2_mie_st.PeersStatuses);
 8000fc2:	4b16      	ldr	r3, [pc, #88]	; (800101c <SendCombineHealth+0xd0>)
 8000fc4:	885b      	ldrh	r3, [r3, #2]
 8000fc6:	b25b      	sxtb	r3, r3
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	b25a      	sxtb	r2, r3
 8000fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	b25b      	sxtb	r3, r3
 8000fd4:	71fb      	strb	r3, [r7, #7]
				if(Debug_flag == 1)
 8000fd6:	4b13      	ldr	r3, [pc, #76]	; (8001024 <SendCombineHealth+0xd8>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d104      	bne.n	8000fe8 <SendCombineHealth+0x9c>
				{
					printf("P:%u:H:OK\n",i);
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4812      	ldr	r0, [pc, #72]	; (800102c <SendCombineHealth+0xe0>)
 8000fe4:	f021 fd8a 	bl	8022afc <iprintf>
		for(uint8_t i=0;i<(Ei_health_2_mie_st.No_ofPeers);++i)
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	3301      	adds	r3, #1
 8000fec:	71fb      	strb	r3, [r7, #7]
 8000fee:	4b0b      	ldr	r3, [pc, #44]	; (800101c <SendCombineHealth+0xd0>)
 8000ff0:	785b      	ldrb	r3, [r3, #1]
 8000ff2:	79fa      	ldrb	r2, [r7, #7]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d3ca      	bcc.n	8000f8e <SendCombineHealth+0x42>
				}
			}
		}

		TransmitCanPkt(COMBINE_EiPC_HEALTH);
 8000ff8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ffc:	f00e fd44 	bl	800fa88 <TransmitCanPkt>

		LastSentClk = HAL_GetTick();
 8001000:	f014 fd72 	bl	8015ae8 <HAL_GetTick>
 8001004:	4603      	mov	r3, r0
 8001006:	4a03      	ldr	r2, [pc, #12]	; (8001014 <SendCombineHealth+0xc8>)
 8001008:	6013      	str	r3, [r2, #0]
	}
}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000e40 	.word	0x20000e40
 8001018:	20000304 	.word	0x20000304
 800101c:	20000e3c 	.word	0x20000e3c
 8001020:	20000e3a 	.word	0x20000e3a
 8001024:	20000645 	.word	0x20000645
 8001028:	0802423c 	.word	0x0802423c
 800102c:	08024248 	.word	0x08024248

08001030 <Process_Hitachi_Packets_Eth>:
RELAYS_t							Main_Relays_st[MAX_PEER_CONNECTIONS];
RELAYS_t							OtherCard_Relays_st[MAX_PEER_CONNECTIONS];
RELAYS_t							Tx_Temp_Main_Relays_st,Rx_Temp_Main_Relays_st;

void Process_Hitachi_Packets_Eth(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b0a2      	sub	sp, #136	; 0x88
 8001034:	af00      	add	r7, sp, #0
	uint8_t Data = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
	uint8_t Temp_array[HITACHI_MAX_PAYLOAD] = {0,};
 800103c:	2300      	movs	r3, #0
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	f107 0308 	add.w	r3, r7, #8
 8001044:	227c      	movs	r2, #124	; 0x7c
 8001046:	2100      	movs	r1, #0
 8001048:	4618      	mov	r0, r3
 800104a:	f021 fc6f 	bl	802292c <memset>
	uint8_t Traverser = 0,uc_Found = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8001054:	2300      	movs	r3, #0
 8001056:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

	while(Is_There_EI_Data())
 800105a:	e03a      	b.n	80010d2 <Process_Hitachi_Packets_Eth+0xa2>
	{
		Data = Get_Eth_Byte();
 800105c:	f00e fb22 	bl	800f6a4 <Get_Eth_Byte>
 8001060:	4603      	mov	r3, r0
 8001062:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
		switch(Data)
 8001066:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 800106a:	2bf4      	cmp	r3, #244	; 0xf4
 800106c:	d002      	beq.n	8001074 <Process_Hitachi_Packets_Eth+0x44>
 800106e:	2bf6      	cmp	r3, #246	; 0xf6
 8001070:	d00c      	beq.n	800108c <Process_Hitachi_Packets_Eth+0x5c>
 8001072:	e01b      	b.n	80010ac <Process_Hitachi_Packets_Eth+0x7c>
		{
		case HITACHI_SOM:
			Temp_array[Traverser++] = Data;
 8001074:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001078:	1c5a      	adds	r2, r3, #1
 800107a:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 800107e:	3388      	adds	r3, #136	; 0x88
 8001080:	443b      	add	r3, r7
 8001082:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 8001086:	f803 2c84 	strb.w	r2, [r3, #-132]
			break;
 800108a:	e01e      	b.n	80010ca <Process_Hitachi_Packets_Eth+0x9a>
		case HITACHI_EOM:
			Temp_array[Traverser++] = Data;
 800108c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001090:	1c5a      	adds	r2, r3, #1
 8001092:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8001096:	3388      	adds	r3, #136	; 0x88
 8001098:	443b      	add	r3, r7
 800109a:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 800109e:	f803 2c84 	strb.w	r2, [r3, #-132]
			uc_Found = Traverser;
 80010a2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80010a6:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
			break;
 80010aa:	e00e      	b.n	80010ca <Process_Hitachi_Packets_Eth+0x9a>
		default:
			if(Traverser >0)
 80010ac:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d00a      	beq.n	80010ca <Process_Hitachi_Packets_Eth+0x9a>
			{
				Temp_array[Traverser++] = Data;
 80010b4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80010b8:	1c5a      	adds	r2, r3, #1
 80010ba:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 80010be:	3388      	adds	r3, #136	; 0x88
 80010c0:	443b      	add	r3, r7
 80010c2:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 80010c6:	f803 2c84 	strb.w	r2, [r3, #-132]
			}
		}
		if(uc_Found > 0)
 80010ca:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d105      	bne.n	80010de <Process_Hitachi_Packets_Eth+0xae>
	while(Is_There_EI_Data())
 80010d2:	f00e fad3 	bl	800f67c <Is_There_EI_Data>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d1bf      	bne.n	800105c <Process_Hitachi_Packets_Eth+0x2c>
 80010dc:	e000      	b.n	80010e0 <Process_Hitachi_Packets_Eth+0xb0>
		{
			break;
 80010de:	bf00      	nop
		}
	}
	if(uc_Found > 0)
 80010e0:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d00d      	beq.n	8001104 <Process_Hitachi_Packets_Eth+0xd4>
	{
		if(Traverser>15)
 80010e8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80010ec:	2b0f      	cmp	r3, #15
 80010ee:	d906      	bls.n	80010fe <Process_Hitachi_Packets_Eth+0xce>
		{
			Convert_Data_format(Temp_array,Traverser);
 80010f0:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 80010f4:	1d3b      	adds	r3, r7, #4
 80010f6:	4611      	mov	r1, r2
 80010f8:	4618      	mov	r0, r3
 80010fa:	f000 f8a3 	bl	8001244 <Convert_Data_format>
		}
		Traverser = 0;
 80010fe:	2300      	movs	r3, #0
 8001100:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	}
}
 8001104:	bf00      	nop
 8001106:	3788      	adds	r7, #136	; 0x88
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <Process_Hitachi_Packets_Com>:

void Process_Hitachi_Packets_Com(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b0a2      	sub	sp, #136	; 0x88
 8001110:	af00      	add	r7, sp, #0
	uint8_t Data = 0;
 8001112:	2300      	movs	r3, #0
 8001114:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
	uint8_t Temp_array[HITACHI_MAX_PAYLOAD] = {0,};
 8001118:	2300      	movs	r3, #0
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	f107 0308 	add.w	r3, r7, #8
 8001120:	227c      	movs	r2, #124	; 0x7c
 8001122:	2100      	movs	r1, #0
 8001124:	4618      	mov	r0, r3
 8001126:	f021 fc01 	bl	802292c <memset>
	uint8_t Traverser = 0,uc_Found = 0;
 800112a:	2300      	movs	r3, #0
 800112c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8001130:	2300      	movs	r3, #0
 8001132:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

	if(EI_data.Hitachi_st.EnableSerialPort == 0)
 8001136:	4b40      	ldr	r3, [pc, #256]	; (8001238 <Process_Hitachi_Packets_Com+0x12c>)
 8001138:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800113c:	2b00      	cmp	r3, #0
 800113e:	d074      	beq.n	800122a <Process_Hitachi_Packets_Com+0x11e>
		return;
	}


	/* Waiting Until the Full Packet is Received this Variable will be updated in UART4 Interrupt*/
	if(HAL_Elaps_Ticks(UART4_Intr_Clk) < 20)
 8001140:	4b3e      	ldr	r3, [pc, #248]	; (800123c <Process_Hitachi_Packets_Com+0x130>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4618      	mov	r0, r3
 8001146:	f00d fee5 	bl	800ef14 <HAL_Elaps_Ticks>
 800114a:	4603      	mov	r3, r0
 800114c:	2b13      	cmp	r3, #19
 800114e:	d96e      	bls.n	800122e <Process_Hitachi_Packets_Com+0x122>
	{
		return;
	}

	while(Com_DataReady(THREE_PORT))
 8001150:	e04a      	b.n	80011e8 <Process_Hitachi_Packets_Com+0xdc>
	{
		Data = Com_Get_Byte(THREE_PORT);
 8001152:	2003      	movs	r0, #3
 8001154:	f014 f9a0 	bl	8015498 <Com_Get_Byte>
 8001158:	4603      	mov	r3, r0
 800115a:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
		if(Traverser > (HITACHI_MAX_PAYLOAD-2))
 800115e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001162:	2b7e      	cmp	r3, #126	; 0x7e
 8001164:	d90a      	bls.n	800117c <Process_Hitachi_Packets_Com+0x70>
		{
			printf("Received data %u Bytes exceeded %u Bytes",Traverser,HITACHI_MAX_PAYLOAD);
 8001166:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800116a:	2280      	movs	r2, #128	; 0x80
 800116c:	4619      	mov	r1, r3
 800116e:	4834      	ldr	r0, [pc, #208]	; (8001240 <Process_Hitachi_Packets_Com+0x134>)
 8001170:	f021 fcc4 	bl	8022afc <iprintf>
			Traverser = 0;
 8001174:	2300      	movs	r3, #0
 8001176:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			break;
 800117a:	e03d      	b.n	80011f8 <Process_Hitachi_Packets_Com+0xec>
		}
		//printf("%02X ",Data);
		switch(Data)
 800117c:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8001180:	2bf4      	cmp	r3, #244	; 0xf4
 8001182:	d002      	beq.n	800118a <Process_Hitachi_Packets_Com+0x7e>
 8001184:	2bf6      	cmp	r3, #246	; 0xf6
 8001186:	d00c      	beq.n	80011a2 <Process_Hitachi_Packets_Com+0x96>
 8001188:	e01b      	b.n	80011c2 <Process_Hitachi_Packets_Com+0xb6>
		{
		case HITACHI_SOM:
			Temp_array[Traverser++] = Data;
 800118a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800118e:	1c5a      	adds	r2, r3, #1
 8001190:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8001194:	3388      	adds	r3, #136	; 0x88
 8001196:	443b      	add	r3, r7
 8001198:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 800119c:	f803 2c84 	strb.w	r2, [r3, #-132]
			break;
 80011a0:	e01e      	b.n	80011e0 <Process_Hitachi_Packets_Com+0xd4>
		case HITACHI_EOM:
			Temp_array[Traverser++] = Data;
 80011a2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80011a6:	1c5a      	adds	r2, r3, #1
 80011a8:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 80011ac:	3388      	adds	r3, #136	; 0x88
 80011ae:	443b      	add	r3, r7
 80011b0:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 80011b4:	f803 2c84 	strb.w	r2, [r3, #-132]
			uc_Found = Traverser;
 80011b8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80011bc:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
			break;
 80011c0:	e00e      	b.n	80011e0 <Process_Hitachi_Packets_Com+0xd4>
		default:
			if(Traverser >0)
 80011c2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d00a      	beq.n	80011e0 <Process_Hitachi_Packets_Com+0xd4>
			{
				Temp_array[Traverser++] = Data;
 80011ca:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80011ce:	1c5a      	adds	r2, r3, #1
 80011d0:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 80011d4:	3388      	adds	r3, #136	; 0x88
 80011d6:	443b      	add	r3, r7
 80011d8:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 80011dc:	f803 2c84 	strb.w	r2, [r3, #-132]
			}
		}
		if(uc_Found > 0)
 80011e0:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d106      	bne.n	80011f6 <Process_Hitachi_Packets_Com+0xea>
	while(Com_DataReady(THREE_PORT))
 80011e8:	2003      	movs	r0, #3
 80011ea:	f014 f915 	bl	8015418 <Com_DataReady>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d1ae      	bne.n	8001152 <Process_Hitachi_Packets_Com+0x46>
 80011f4:	e000      	b.n	80011f8 <Process_Hitachi_Packets_Com+0xec>
		{
			break;
 80011f6:	bf00      	nop
		}
	}
	if(uc_Found > 0)
 80011f8:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d017      	beq.n	8001230 <Process_Hitachi_Packets_Com+0x124>
	{
		if(Traverser>15)
 8001200:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001204:	2b0f      	cmp	r3, #15
 8001206:	d906      	bls.n	8001216 <Process_Hitachi_Packets_Com+0x10a>
		{
			Convert_Data_format(Temp_array,Traverser);
 8001208:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	4611      	mov	r1, r2
 8001210:	4618      	mov	r0, r3
 8001212:	f000 f817 	bl	8001244 <Convert_Data_format>
		}
		Traverser = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		memset(&Temp_array,0,sizeof(Temp_array));
 800121c:	1d3b      	adds	r3, r7, #4
 800121e:	2280      	movs	r2, #128	; 0x80
 8001220:	2100      	movs	r1, #0
 8001222:	4618      	mov	r0, r3
 8001224:	f021 fb82 	bl	802292c <memset>
 8001228:	e002      	b.n	8001230 <Process_Hitachi_Packets_Com+0x124>
		return;
 800122a:	bf00      	nop
 800122c:	e000      	b.n	8001230 <Process_Hitachi_Packets_Com+0x124>
		return;
 800122e:	bf00      	nop
	}
}
 8001230:	3788      	adds	r7, #136	; 0x88
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20000304 	.word	0x20000304
 800123c:	2000a0b0 	.word	0x2000a0b0
 8001240:	08024254 	.word	0x08024254

08001244 <Convert_Data_format>:


void Convert_Data_format(uint8_t *Data,uint8_t Length)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b0a4      	sub	sp, #144	; 0x90
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	460b      	mov	r3, r1
 800124e:	70fb      	strb	r3, [r7, #3]
	uint8_t Temp_Buff[128] = {0,};
 8001250:	2300      	movs	r3, #0
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	f107 0310 	add.w	r3, r7, #16
 8001258:	227c      	movs	r2, #124	; 0x7c
 800125a:	2100      	movs	r1, #0
 800125c:	4618      	mov	r0, r3
 800125e:	f021 fb65 	bl	802292c <memset>
	uint16_t des_index=0,src_index=0;
 8001262:	2300      	movs	r3, #0
 8001264:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8001268:	2300      	movs	r3, #0
 800126a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c

	for(des_index=0,src_index=0; src_index < Length; ++des_index,++src_index)
 800126e:	2300      	movs	r3, #0
 8001270:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8001274:	2300      	movs	r3, #0
 8001276:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800127a:	e034      	b.n	80012e6 <Convert_Data_format+0xa2>
	{
		if(Data[src_index] == (uint8_t)0xF0)
 800127c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	4413      	add	r3, r2
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	2bf0      	cmp	r3, #240	; 0xf0
 8001288:	d118      	bne.n	80012bc <Convert_Data_format+0x78>
		{
			Temp_Buff[des_index] = Data[src_index] | Data[src_index+1];
 800128a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	4413      	add	r3, r2
 8001292:	7819      	ldrb	r1, [r3, #0]
 8001294:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8001298:	3301      	adds	r3, #1
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	4413      	add	r3, r2
 800129e:	781a      	ldrb	r2, [r3, #0]
 80012a0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80012a4:	430a      	orrs	r2, r1
 80012a6:	b2d2      	uxtb	r2, r2
 80012a8:	3390      	adds	r3, #144	; 0x90
 80012aa:	443b      	add	r3, r7
 80012ac:	f803 2c84 	strb.w	r2, [r3, #-132]
			++src_index;
 80012b0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80012b4:	3301      	adds	r3, #1
 80012b6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80012ba:	e00a      	b.n	80012d2 <Convert_Data_format+0x8e>
		}
		else
		{
			Temp_Buff[des_index] = Data[src_index];
 80012bc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	441a      	add	r2, r3
 80012c4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80012c8:	7812      	ldrb	r2, [r2, #0]
 80012ca:	3390      	adds	r3, #144	; 0x90
 80012cc:	443b      	add	r3, r7
 80012ce:	f803 2c84 	strb.w	r2, [r3, #-132]
	for(des_index=0,src_index=0; src_index < Length; ++des_index,++src_index)
 80012d2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80012d6:	3301      	adds	r3, #1
 80012d8:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80012dc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80012e0:	3301      	adds	r3, #1
 80012e2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80012e6:	78fb      	ldrb	r3, [r7, #3]
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d3c4      	bcc.n	800127c <Convert_Data_format+0x38>
		}
	}
	EI_Data_Analyzer(Temp_Buff,des_index);
 80012f2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80012f6:	f107 030c 	add.w	r3, r7, #12
 80012fa:	4611      	mov	r1, r2
 80012fc:	4618      	mov	r0, r3
 80012fe:	f000 f805 	bl	800130c <EI_Data_Analyzer>
}
 8001302:	bf00      	nop
 8001304:	3790      	adds	r7, #144	; 0x90
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
	...

0800130c <EI_Data_Analyzer>:

void EI_Data_Analyzer(unsigned char *Buff, unsigned short int Size)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b088      	sub	sp, #32
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	460b      	mov	r3, r1
 8001316:	807b      	strh	r3, [r7, #2]
	uint8_t Message_Type = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	75fb      	strb	r3, [r7, #23]
	uint8_t Source_Index = 0,Dest_Index = 0;
 800131c:	2300      	movs	r3, #0
 800131e:	77fb      	strb	r3, [r7, #31]
 8001320:	2300      	movs	r3, #0
 8001322:	77bb      	strb	r3, [r7, #30]
	uint32_t Destin_Address = 0;
 8001324:	2300      	movs	r3, #0
 8001326:	61bb      	str	r3, [r7, #24]
	uint32_t Source_Address = 0;
 8001328:	2300      	movs	r3, #0
 800132a:	613b      	str	r3, [r7, #16]
	uint32_t Cur_Ticks = HAL_GetTick();
 800132c:	f014 fbdc 	bl	8015ae8 <HAL_GetTick>
 8001330:	60f8      	str	r0, [r7, #12]

	if( (Is_CAN_Exchange_happening == NO) && (HAL_GetTick() >= TEN_SEC) )
 8001332:	4ba7      	ldr	r3, [pc, #668]	; (80015d0 <EI_Data_Analyzer+0x2c4>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d111      	bne.n	800135e <EI_Data_Analyzer+0x52>
 800133a:	f014 fbd5 	bl	8015ae8 <HAL_GetTick>
 800133e:	4603      	mov	r3, r0
 8001340:	f242 720f 	movw	r2, #9999	; 0x270f
 8001344:	4293      	cmp	r3, r2
 8001346:	d90a      	bls.n	800135e <EI_Data_Analyzer+0x52>
	{
		printf("\n Not Processing Any EI Packet As CAN Packets are Not receiving\n");
 8001348:	48a2      	ldr	r0, [pc, #648]	; (80015d4 <EI_Data_Analyzer+0x2c8>)
 800134a:	f021 fc73 	bl	8022c34 <puts>
		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)
 800134e:	49a2      	ldr	r1, [pc, #648]	; (80015d8 <EI_Data_Analyzer+0x2cc>)
 8001350:	48a2      	ldr	r0, [pc, #648]	; (80015dc <EI_Data_Analyzer+0x2d0>)
 8001352:	f7fe ff75 	bl	8000240 <strcmp>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	f040 81a1 	bne.w	80016a0 <EI_Data_Analyzer+0x394>
			//Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = 0x123456;
			return;
		}		//		return;
	}

	Source_Address  = (uint16_t)ExtractBits(0, 16, (unsigned char *)&Buff[3]);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	3303      	adds	r3, #3
 8001362:	461a      	mov	r2, r3
 8001364:	2110      	movs	r1, #16
 8001366:	2000      	movs	r0, #0
 8001368:	f7ff f954 	bl	8000614 <ExtractBits>
 800136c:	4603      	mov	r3, r0
 800136e:	b29b      	uxth	r3, r3
 8001370:	613b      	str	r3, [r7, #16]
	for(; Source_Index < EI_data.Hitachi_st.PeersCnt; ++Source_Index)
 8001372:	e00b      	b.n	800138c <EI_Data_Analyzer+0x80>
	{
		if(Source_Address == EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index])
 8001374:	7ffb      	ldrb	r3, [r7, #31]
 8001376:	4a9a      	ldr	r2, [pc, #616]	; (80015e0 <EI_Data_Analyzer+0x2d4>)
 8001378:	3366      	adds	r3, #102	; 0x66
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	4413      	add	r3, r2
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	429a      	cmp	r2, r3
 8001384:	d009      	beq.n	800139a <EI_Data_Analyzer+0x8e>
	for(; Source_Index < EI_data.Hitachi_st.PeersCnt; ++Source_Index)
 8001386:	7ffb      	ldrb	r3, [r7, #31]
 8001388:	3301      	adds	r3, #1
 800138a:	77fb      	strb	r3, [r7, #31]
 800138c:	4b94      	ldr	r3, [pc, #592]	; (80015e0 <EI_Data_Analyzer+0x2d4>)
 800138e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001392:	7ffa      	ldrb	r2, [r7, #31]
 8001394:	429a      	cmp	r2, r3
 8001396:	d3ed      	bcc.n	8001374 <EI_Data_Analyzer+0x68>
 8001398:	e000      	b.n	800139c <EI_Data_Analyzer+0x90>
		{
			break;
 800139a:	bf00      	nop
		}
	}
	if(Source_Index>= EI_data.Hitachi_st.PeersCnt)
 800139c:	4b90      	ldr	r3, [pc, #576]	; (80015e0 <EI_Data_Analyzer+0x2d4>)
 800139e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013a2:	7ffa      	ldrb	r2, [r7, #31]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d309      	bcc.n	80013bc <EI_Data_Analyzer+0xb0>
	{
		if(Debug_flag == 1)
 80013a8:	4b8e      	ldr	r3, [pc, #568]	; (80015e4 <EI_Data_Analyzer+0x2d8>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	f040 8179 	bne.w	80016a4 <EI_Data_Analyzer+0x398>
		{
			printf("Rejected Source Address:%lu which is Not Available in List\n",Source_Address);
 80013b2:	6939      	ldr	r1, [r7, #16]
 80013b4:	488c      	ldr	r0, [pc, #560]	; (80015e8 <EI_Data_Analyzer+0x2dc>)
 80013b6:	f021 fba1 	bl	8022afc <iprintf>
		}
		return;
 80013ba:	e173      	b.n	80016a4 <EI_Data_Analyzer+0x398>
	}

	Destin_Address = (uint16_t)ExtractBits(0, 16, (unsigned char *)&Buff[1]);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3301      	adds	r3, #1
 80013c0:	461a      	mov	r2, r3
 80013c2:	2110      	movs	r1, #16
 80013c4:	2000      	movs	r0, #0
 80013c6:	f7ff f925 	bl	8000614 <ExtractBits>
 80013ca:	4603      	mov	r3, r0
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	61bb      	str	r3, [r7, #24]

	if(Destin_Address != EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index] )
 80013d0:	7ffb      	ldrb	r3, [r7, #31]
 80013d2:	4a83      	ldr	r2, [pc, #524]	; (80015e0 <EI_Data_Analyzer+0x2d4>)
 80013d4:	3370      	adds	r3, #112	; 0x70
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	4413      	add	r3, r2
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	429a      	cmp	r2, r3
 80013e0:	d012      	beq.n	8001408 <EI_Data_Analyzer+0xfc>
	{
		printf("Packet Indexes Not matching\n");
 80013e2:	4882      	ldr	r0, [pc, #520]	; (80015ec <EI_Data_Analyzer+0x2e0>)
 80013e4:	f021 fc26 	bl	8022c34 <puts>
		printf("Received Destination Address:%lu\n",Destin_Address);
 80013e8:	69b9      	ldr	r1, [r7, #24]
 80013ea:	4881      	ldr	r0, [pc, #516]	; (80015f0 <EI_Data_Analyzer+0x2e4>)
 80013ec:	f021 fb86 	bl	8022afc <iprintf>
		printf("Actual Destination Address for Source Address[%lu]:%lu\n",Source_Address,EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]);
 80013f0:	7ffb      	ldrb	r3, [r7, #31]
 80013f2:	4a7b      	ldr	r2, [pc, #492]	; (80015e0 <EI_Data_Analyzer+0x2d4>)
 80013f4:	3370      	adds	r3, #112	; 0x70
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	4413      	add	r3, r2
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	461a      	mov	r2, r3
 80013fe:	6939      	ldr	r1, [r7, #16]
 8001400:	487c      	ldr	r0, [pc, #496]	; (80015f4 <EI_Data_Analyzer+0x2e8>)
 8001402:	f021 fb7b 	bl	8022afc <iprintf>
		return;
 8001406:	e14e      	b.n	80016a6 <EI_Data_Analyzer+0x39a>
	}
	else
	{
		Dest_Index = Source_Index;
 8001408:	7ffb      	ldrb	r3, [r7, #31]
 800140a:	77bb      	strb	r3, [r7, #30]
	}
	if( (CHECKFLAG(4,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800140c:	4b7a      	ldr	r3, [pc, #488]	; (80015f8 <EI_Data_Analyzer+0x2ec>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	091b      	lsrs	r3, r3, #4
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	2b00      	cmp	r3, #0
 8001418:	d016      	beq.n	8001448 <EI_Data_Analyzer+0x13c>
	{
		if(Dest_Index == Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX)
 800141a:	4b77      	ldr	r3, [pc, #476]	; (80015f8 <EI_Data_Analyzer+0x2ec>)
 800141c:	791b      	ldrb	r3, [r3, #4]
 800141e:	7fba      	ldrb	r2, [r7, #30]
 8001420:	429a      	cmp	r2, r3
 8001422:	d111      	bne.n	8001448 <EI_Data_Analyzer+0x13c>
		{
			printf("\nInjected Invalid Destin_Address\n");
 8001424:	4875      	ldr	r0, [pc, #468]	; (80015fc <EI_Data_Analyzer+0x2f0>)
 8001426:	f021 fc05 	bl	8022c34 <puts>
			printf("Received:%lu\n",Destin_Address);
 800142a:	69b9      	ldr	r1, [r7, #24]
 800142c:	4874      	ldr	r0, [pc, #464]	; (8001600 <EI_Data_Analyzer+0x2f4>)
 800142e:	f021 fb65 	bl	8022afc <iprintf>
			Destin_Address = 333;
 8001432:	f240 134d 	movw	r3, #333	; 0x14d
 8001436:	61bb      	str	r3, [r7, #24]
			Dest_Index = EI_data.Hitachi_st.PeersCnt;
 8001438:	4b69      	ldr	r3, [pc, #420]	; (80015e0 <EI_Data_Analyzer+0x2d4>)
 800143a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800143e:	77bb      	strb	r3, [r7, #30]
			printf("Injected:%lu\n",Destin_Address);
 8001440:	69b9      	ldr	r1, [r7, #24]
 8001442:	4870      	ldr	r0, [pc, #448]	; (8001604 <EI_Data_Analyzer+0x2f8>)
 8001444:	f021 fb5a 	bl	8022afc <iprintf>
		}
	}
	if(Dest_Index>=EI_data.Hitachi_st.PeersCnt)
 8001448:	4b65      	ldr	r3, [pc, #404]	; (80015e0 <EI_Data_Analyzer+0x2d4>)
 800144a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800144e:	7fba      	ldrb	r2, [r7, #30]
 8001450:	429a      	cmp	r2, r3
 8001452:	d307      	bcc.n	8001464 <EI_Data_Analyzer+0x158>
	{
		printf("Destin_Address is not in the List of DEST_ADDRESSES\n");
 8001454:	486c      	ldr	r0, [pc, #432]	; (8001608 <EI_Data_Analyzer+0x2fc>)
 8001456:	f021 fbed 	bl	8022c34 <puts>
		printf("Received Destin_Address:%lu\n",Destin_Address);
 800145a:	69b9      	ldr	r1, [r7, #24]
 800145c:	486b      	ldr	r0, [pc, #428]	; (800160c <EI_Data_Analyzer+0x300>)
 800145e:	f021 fb4d 	bl	8022afc <iprintf>
		return;
 8001462:	e120      	b.n	80016a6 <EI_Data_Analyzer+0x39a>
	}

	if(Debug_flag == 1)
 8001464:	4b5f      	ldr	r3, [pc, #380]	; (80015e4 <EI_Data_Analyzer+0x2d8>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b01      	cmp	r3, #1
 800146a:	d121      	bne.n	80014b0 <EI_Data_Analyzer+0x1a4>
	{
		switch(Recv_IP_Index[Source_Index])
 800146c:	7ffb      	ldrb	r3, [r7, #31]
 800146e:	4a68      	ldr	r2, [pc, #416]	; (8001610 <EI_Data_Analyzer+0x304>)
 8001470:	5cd3      	ldrb	r3, [r2, r3]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d002      	beq.n	800147c <EI_Data_Analyzer+0x170>
 8001476:	2b02      	cmp	r3, #2
 8001478:	d004      	beq.n	8001484 <EI_Data_Analyzer+0x178>
 800147a:	e007      	b.n	800148c <EI_Data_Analyzer+0x180>
		{
		case ONE:
			printf("RCV from MLK-A\n");
 800147c:	4865      	ldr	r0, [pc, #404]	; (8001614 <EI_Data_Analyzer+0x308>)
 800147e:	f021 fbd9 	bl	8022c34 <puts>
			break;
 8001482:	e015      	b.n	80014b0 <EI_Data_Analyzer+0x1a4>
		case TWO:
			printf("RCV from MLK-B\n");
 8001484:	4864      	ldr	r0, [pc, #400]	; (8001618 <EI_Data_Analyzer+0x30c>)
 8001486:	f021 fbd5 	bl	8022c34 <puts>
			break;
 800148a:	e011      	b.n	80014b0 <EI_Data_Analyzer+0x1a4>
		default:
			if(EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL)
 800148c:	7ffb      	ldrb	r3, [r7, #31]
 800148e:	4a54      	ldr	r2, [pc, #336]	; (80015e0 <EI_Data_Analyzer+0x2d4>)
 8001490:	4413      	add	r3, r2
 8001492:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001496:	2b02      	cmp	r3, #2
 8001498:	d103      	bne.n	80014a2 <EI_Data_Analyzer+0x196>
			{
				printf("Received from Serial\n");
 800149a:	4860      	ldr	r0, [pc, #384]	; (800161c <EI_Data_Analyzer+0x310>)
 800149c:	f021 fbca 	bl	8022c34 <puts>
 80014a0:	e006      	b.n	80014b0 <EI_Data_Analyzer+0x1a4>
			}
			else
			{
				printf("Received from Unknown Source:%u\n",Recv_IP_Index[Source_Index]);
 80014a2:	7ffb      	ldrb	r3, [r7, #31]
 80014a4:	4a5a      	ldr	r2, [pc, #360]	; (8001610 <EI_Data_Analyzer+0x304>)
 80014a6:	5cd3      	ldrb	r3, [r2, r3]
 80014a8:	4619      	mov	r1, r3
 80014aa:	485d      	ldr	r0, [pc, #372]	; (8001620 <EI_Data_Analyzer+0x314>)
 80014ac:	f021 fb26 	bl	8022afc <iprintf>
			}
		}
	}
	if(Prev_IP_Source[Source_Index] != Recv_IP_Index[Source_Index]) //This if condition is to Avoid data missing when MLK Primary to Secondary shifting.
 80014b0:	7ffb      	ldrb	r3, [r7, #31]
 80014b2:	4a5c      	ldr	r2, [pc, #368]	; (8001624 <EI_Data_Analyzer+0x318>)
 80014b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014b8:	7ffa      	ldrb	r2, [r7, #31]
 80014ba:	4955      	ldr	r1, [pc, #340]	; (8001610 <EI_Data_Analyzer+0x304>)
 80014bc:	5c8a      	ldrb	r2, [r1, r2]
 80014be:	4293      	cmp	r3, r2
 80014c0:	d014      	beq.n	80014ec <EI_Data_Analyzer+0x1e0>
	{
		Last_Recevied_Clock[Source_Index] = Cur_Ticks;
 80014c2:	7ffb      	ldrb	r3, [r7, #31]
 80014c4:	4958      	ldr	r1, [pc, #352]	; (8001628 <EI_Data_Analyzer+0x31c>)
 80014c6:	68fa      	ldr	r2, [r7, #12]
 80014c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Last_Recevied_Clock_ValidMsgs[Source_Index] = Cur_Ticks;
 80014cc:	7ffb      	ldrb	r3, [r7, #31]
 80014ce:	4957      	ldr	r1, [pc, #348]	; (800162c <EI_Data_Analyzer+0x320>)
 80014d0:	68fa      	ldr	r2, [r7, #12]
 80014d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Prev_IP_Source[Source_Index] = Recv_IP_Index[Source_Index];
 80014d6:	7ffb      	ldrb	r3, [r7, #31]
 80014d8:	4a4d      	ldr	r2, [pc, #308]	; (8001610 <EI_Data_Analyzer+0x304>)
 80014da:	5cd2      	ldrb	r2, [r2, r3]
 80014dc:	7ffb      	ldrb	r3, [r7, #31]
 80014de:	4611      	mov	r1, r2
 80014e0:	4a50      	ldr	r2, [pc, #320]	; (8001624 <EI_Data_Analyzer+0x318>)
 80014e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		printf("MLK Shifting Detected\n");
 80014e6:	4852      	ldr	r0, [pc, #328]	; (8001630 <EI_Data_Analyzer+0x324>)
 80014e8:	f021 fba4 	bl	8022c34 <puts>
	}
	IP_Source_Peer[Source_Index] = Recv_IP_Index[Source_Index];
 80014ec:	7ffa      	ldrb	r2, [r7, #31]
 80014ee:	7ffb      	ldrb	r3, [r7, #31]
 80014f0:	4947      	ldr	r1, [pc, #284]	; (8001610 <EI_Data_Analyzer+0x304>)
 80014f2:	5c89      	ldrb	r1, [r1, r2]
 80014f4:	4a4f      	ldr	r2, [pc, #316]	; (8001634 <EI_Data_Analyzer+0x328>)
 80014f6:	54d1      	strb	r1, [r2, r3]

	if( HAL_Elaps_Ticks(Prev_INTR_Rcv_Clk[Source_Index]) >= EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Source_Index])
 80014f8:	7ffb      	ldrb	r3, [r7, #31]
 80014fa:	4a4f      	ldr	r2, [pc, #316]	; (8001638 <EI_Data_Analyzer+0x32c>)
 80014fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001500:	4618      	mov	r0, r3
 8001502:	f00d fd07 	bl	800ef14 <HAL_Elaps_Ticks>
 8001506:	4602      	mov	r2, r0
 8001508:	7ffb      	ldrb	r3, [r7, #31]
 800150a:	4935      	ldr	r1, [pc, #212]	; (80015e0 <EI_Data_Analyzer+0x2d4>)
 800150c:	338a      	adds	r3, #138	; 0x8a
 800150e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001512:	429a      	cmp	r2, r3
 8001514:	d318      	bcc.n	8001548 <EI_Data_Analyzer+0x23c>
	{
		Prev_INTR_Rcv_Clk[Source_Index] =Cur_Ticks;
 8001516:	7ffb      	ldrb	r3, [r7, #31]
 8001518:	4947      	ldr	r1, [pc, #284]	; (8001638 <EI_Data_Analyzer+0x32c>)
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Last_Recevied_Clock[Source_Index] = Cur_Ticks;
 8001520:	7ffb      	ldrb	r3, [r7, #31]
 8001522:	4941      	ldr	r1, [pc, #260]	; (8001628 <EI_Data_Analyzer+0x31c>)
 8001524:	68fa      	ldr	r2, [r7, #12]
 8001526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Last_Recevied_Clock_ValidMsgs[Source_Index] = Cur_Ticks;
 800152a:	7ffb      	ldrb	r3, [r7, #31]
 800152c:	493f      	ldr	r1, [pc, #252]	; (800162c <EI_Data_Analyzer+0x320>)
 800152e:	68fa      	ldr	r2, [r7, #12]
 8001530:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		printf("EIPC Shifting Detected:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8001534:	7ffb      	ldrb	r3, [r7, #31]
 8001536:	4a2a      	ldr	r2, [pc, #168]	; (80015e0 <EI_Data_Analyzer+0x2d4>)
 8001538:	3366      	adds	r3, #102	; 0x66
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	4413      	add	r3, r2
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	4619      	mov	r1, r3
 8001542:	483e      	ldr	r0, [pc, #248]	; (800163c <EI_Data_Analyzer+0x330>)
 8001544:	f021 fada 	bl	8022afc <iprintf>
	}
	Prev_INTR_Rcv_Clk[Source_Index] = Cur_Ticks;
 8001548:	7ffb      	ldrb	r3, [r7, #31]
 800154a:	493b      	ldr	r1, [pc, #236]	; (8001638 <EI_Data_Analyzer+0x32c>)
 800154c:	68fa      	ldr	r2, [r7, #12]
 800154e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	memset(&Rx_Print_st,0,sizeof(RX_Print_t));
 8001552:	2281      	movs	r2, #129	; 0x81
 8001554:	2100      	movs	r1, #0
 8001556:	483a      	ldr	r0, [pc, #232]	; (8001640 <EI_Data_Analyzer+0x334>)
 8001558:	f021 f9e8 	bl	802292c <memset>
	memcpy(Rx_Print_st.Print_Buff,Buff,Size);
 800155c:	887b      	ldrh	r3, [r7, #2]
 800155e:	461a      	mov	r2, r3
 8001560:	6879      	ldr	r1, [r7, #4]
 8001562:	4837      	ldr	r0, [pc, #220]	; (8001640 <EI_Data_Analyzer+0x334>)
 8001564:	f021 f9ba 	bl	80228dc <memcpy>
	Rx_Print_st.Size = Size;
 8001568:	887b      	ldrh	r3, [r7, #2]
 800156a:	b2da      	uxtb	r2, r3
 800156c:	4b34      	ldr	r3, [pc, #208]	; (8001640 <EI_Data_Analyzer+0x334>)
 800156e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	//Print_EI_DATA(Buff,RCV,Size); // To Print in Hitachi Format.

	Message_Type = (uint8_t)ExtractBits(0, 8, (unsigned char *)&Buff[7]);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	3307      	adds	r3, #7
 8001576:	461a      	mov	r2, r3
 8001578:	2108      	movs	r1, #8
 800157a:	2000      	movs	r0, #0
 800157c:	f7ff f84a 	bl	8000614 <ExtractBits>
 8001580:	4603      	mov	r3, r0
 8001582:	75fb      	strb	r3, [r7, #23]
	Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status = RECEIVED;
 8001584:	7ffa      	ldrb	r2, [r7, #31]
 8001586:	492f      	ldr	r1, [pc, #188]	; (8001644 <EI_Data_Analyzer+0x338>)
 8001588:	4613      	mov	r3, r2
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	4413      	add	r3, r2
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	440b      	add	r3, r1
 8001592:	3303      	adds	r3, #3
 8001594:	2201      	movs	r2, #1
 8001596:	701a      	strb	r2, [r3, #0]


	Last_ReceptionClk[Source_Index] = Cur_Ticks;
 8001598:	7ffb      	ldrb	r3, [r7, #31]
 800159a:	492b      	ldr	r1, [pc, #172]	; (8001648 <EI_Data_Analyzer+0x33c>)
 800159c:	68fa      	ldr	r2, [r7, #12]
 800159e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Check_Other_EiPC_Packet(Source_Index);
 80015a2:	7ffb      	ldrb	r3, [r7, #31]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f006 fc15 	bl	8007dd4 <Check_Other_EiPC_Packet>
	switch (Message_Type)
 80015aa:	7dfb      	ldrb	r3, [r7, #23]
 80015ac:	3b01      	subs	r3, #1
 80015ae:	2b05      	cmp	r3, #5
 80015b0:	d870      	bhi.n	8001694 <EI_Data_Analyzer+0x388>
 80015b2:	a201      	add	r2, pc, #4	; (adr r2, 80015b8 <EI_Data_Analyzer+0x2ac>)
 80015b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015b8:	0800164d 	.word	0x0800164d
 80015bc:	0800165d 	.word	0x0800165d
 80015c0:	0800166d 	.word	0x0800166d
 80015c4:	08001675 	.word	0x08001675
 80015c8:	08001695 	.word	0x08001695
 80015cc:	08001685 	.word	0x08001685
 80015d0:	20000108 	.word	0x20000108
 80015d4:	08024280 	.word	0x08024280
 80015d8:	080242c0 	.word	0x080242c0
 80015dc:	20000305 	.word	0x20000305
 80015e0:	20000304 	.word	0x20000304
 80015e4:	20000645 	.word	0x20000645
 80015e8:	080242cc 	.word	0x080242cc
 80015ec:	08024308 	.word	0x08024308
 80015f0:	08024324 	.word	0x08024324
 80015f4:	08024348 	.word	0x08024348
 80015f8:	20001968 	.word	0x20001968
 80015fc:	08024380 	.word	0x08024380
 8001600:	080243a4 	.word	0x080243a4
 8001604:	080243b4 	.word	0x080243b4
 8001608:	080243c4 	.word	0x080243c4
 800160c:	080243f8 	.word	0x080243f8
 8001610:	2000108c 	.word	0x2000108c
 8001614:	08024418 	.word	0x08024418
 8001618:	08024428 	.word	0x08024428
 800161c:	08024438 	.word	0x08024438
 8001620:	08024450 	.word	0x08024450
 8001624:	20000f88 	.word	0x20000f88
 8001628:	20000fb0 	.word	0x20000fb0
 800162c:	20000fd8 	.word	0x20000fd8
 8001630:	08024474 	.word	0x08024474
 8001634:	20001030 	.word	0x20001030
 8001638:	2000103c 	.word	0x2000103c
 800163c:	0802448c 	.word	0x0802448c
 8001640:	20001c1c 	.word	0x20001c1c
 8001644:	20001680 	.word	0x20001680
 8001648:	20000e80 	.word	0x20000e80
	{
	case INIT_MSG:
		//printf("\nReceived Init Message\n");
		Init_Msg_extr(Buff, Size, Source_Index, Dest_Index);
 800164c:	887b      	ldrh	r3, [r7, #2]
 800164e:	b2d9      	uxtb	r1, r3
 8001650:	7fbb      	ldrb	r3, [r7, #30]
 8001652:	7ffa      	ldrb	r2, [r7, #31]
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f000 f82d 	bl	80016b4 <Init_Msg_extr>
		break;
 800165a:	e024      	b.n	80016a6 <EI_Data_Analyzer+0x39a>

	case VDATAMSG:
		//printf("\nReceived VITAL DATA Message\n");
		Vital_Msg_extr(Buff, Size, Source_Index, Dest_Index);
 800165c:	887b      	ldrh	r3, [r7, #2]
 800165e:	b2d9      	uxtb	r1, r3
 8001660:	7fbb      	ldrb	r3, [r7, #30]
 8001662:	7ffa      	ldrb	r2, [r7, #31]
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f001 fbc3 	bl	8002df0 <Vital_Msg_extr>
		break;
 800166a:	e01c      	b.n	80016a6 <EI_Data_Analyzer+0x39a>

	case NVDATAMSG:
		printf("\nReceived NON-VITAL DATA Message\n");
 800166c:	480f      	ldr	r0, [pc, #60]	; (80016ac <EI_Data_Analyzer+0x3a0>)
 800166e:	f021 fae1 	bl	8022c34 <puts>
		break;
 8001672:	e018      	b.n	80016a6 <EI_Data_Analyzer+0x39a>

	case STATUSMSG:
		//printf("\nReceived STATUS Message\n");
		Status_Msg_Extr(Buff, Size, Source_Index, Dest_Index);
 8001674:	887b      	ldrh	r3, [r7, #2]
 8001676:	b2d9      	uxtb	r1, r3
 8001678:	7fbb      	ldrb	r3, [r7, #30]
 800167a:	7ffa      	ldrb	r2, [r7, #31]
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f003 fe61 	bl	8005344 <Status_Msg_Extr>
		break;
 8001682:	e010      	b.n	80016a6 <EI_Data_Analyzer+0x39a>

	case SERVICEMSG:
		//printf("\nReceived SERVICE Message\n");
		Service_Msg_Extr(Buff, Size, Source_Index, Dest_Index);
 8001684:	887b      	ldrh	r3, [r7, #2]
 8001686:	b2d9      	uxtb	r1, r3
 8001688:	7fbb      	ldrb	r3, [r7, #30]
 800168a:	7ffa      	ldrb	r2, [r7, #31]
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f005 f861 	bl	8006754 <Service_Msg_Extr>
		break;
 8001692:	e008      	b.n	80016a6 <EI_Data_Analyzer+0x39a>

	default:
		printf("Received \"%d\" Message type\n", Message_Type);
 8001694:	7dfb      	ldrb	r3, [r7, #23]
 8001696:	4619      	mov	r1, r3
 8001698:	4805      	ldr	r0, [pc, #20]	; (80016b0 <EI_Data_Analyzer+0x3a4>)
 800169a:	f021 fa2f 	bl	8022afc <iprintf>
		break;
 800169e:	e002      	b.n	80016a6 <EI_Data_Analyzer+0x39a>
			return;
 80016a0:	bf00      	nop
 80016a2:	e000      	b.n	80016a6 <EI_Data_Analyzer+0x39a>
		return;
 80016a4:	bf00      	nop
	} /* Switch */

} /*  EI_Data_Analyzer */
 80016a6:	3720      	adds	r7, #32
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	080244a8 	.word	0x080244a8
 80016b0:	080244cc 	.word	0x080244cc

080016b4 <Init_Msg_extr>:

void Init_Msg_extr(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 80016b4:	b590      	push	{r4, r7, lr}
 80016b6:	b089      	sub	sp, #36	; 0x24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	4608      	mov	r0, r1
 80016be:	4611      	mov	r1, r2
 80016c0:	461a      	mov	r2, r3
 80016c2:	4603      	mov	r3, r0
 80016c4:	70fb      	strb	r3, [r7, #3]
 80016c6:	460b      	mov	r3, r1
 80016c8:	70bb      	strb	r3, [r7, #2]
 80016ca:	4613      	mov	r3, r2
 80016cc:	707b      	strb	r3, [r7, #1]
	// unsigned int Traverser=0;
	uint16_t Recv_App_CRC = 0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	837b      	strh	r3, [r7, #26]
	uint8_t Recv_Inputs = 0;
 80016d2:	2300      	movs	r3, #0
 80016d4:	767b      	strb	r3, [r7, #25]
	uint32_t Calc_CRC = 0;
 80016d6:	2300      	movs	r3, #0
 80016d8:	617b      	str	r3, [r7, #20]
	uint32_t Recv_CRC = 0;
 80016da:	2300      	movs	r3, #0
 80016dc:	613b      	str	r3, [r7, #16]
	uint32_t Cur_Ticks = HAL_GetTick();
 80016de:	f014 fa03 	bl	8015ae8 <HAL_GetTick>
 80016e2:	60f8      	str	r0, [r7, #12]
	BITSTUFFINIT(0, 0);
 80016e4:	2300      	movs	r3, #0
 80016e6:	83fb      	strh	r3, [r7, #30]
 80016e8:	2300      	movs	r3, #0
 80016ea:	83bb      	strh	r3, [r7, #28]

	Calc_CRC = CalculateDirectReverseCrc(Buff, Length - 5);
 80016ec:	78fb      	ldrb	r3, [r7, #3]
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	3b05      	subs	r3, #5
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	4619      	mov	r1, r3
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f011 fe1e 	bl	8013338 <CalculateDirectReverseCrc>
 80016fc:	6178      	str	r0, [r7, #20]
	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 80016fe:	78fb      	ldrb	r3, [r7, #3]
 8001700:	3b05      	subs	r3, #5
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	441a      	add	r2, r3
 8001706:	8bbb      	ldrh	r3, [r7, #28]
 8001708:	2120      	movs	r1, #32
 800170a:	4618      	mov	r0, r3
 800170c:	f7fe ff82 	bl	8000614 <ExtractBits>
 8001710:	6138      	str	r0, [r7, #16]

	if(Recv_CRC != Calc_CRC)
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	429a      	cmp	r2, r3
 8001718:	d013      	beq.n	8001742 <Init_Msg_extr+0x8e>
	{
		printf("Init Message CRC fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 800171a:	78bb      	ldrb	r3, [r7, #2]
 800171c:	4a29      	ldr	r2, [pc, #164]	; (80017c4 <Init_Msg_extr+0x110>)
 800171e:	3366      	adds	r3, #102	; 0x66
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	4413      	add	r3, r2
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	4619      	mov	r1, r3
 8001728:	4827      	ldr	r0, [pc, #156]	; (80017c8 <Init_Msg_extr+0x114>)
 800172a:	f021 f9e7 	bl	8022afc <iprintf>
		printf("R-CRC:0x%08lX\n",Recv_CRC);
 800172e:	6939      	ldr	r1, [r7, #16]
 8001730:	4826      	ldr	r0, [pc, #152]	; (80017cc <Init_Msg_extr+0x118>)
 8001732:	f021 f9e3 	bl	8022afc <iprintf>
		printf("C-CRC:0x%08lX\n",Calc_CRC);
 8001736:	6979      	ldr	r1, [r7, #20]
 8001738:	4825      	ldr	r0, [pc, #148]	; (80017d0 <Init_Msg_extr+0x11c>)
 800173a:	f021 f9df 	bl	8022afc <iprintf>
		return;
 800173e:	f000 be32 	b.w	80023a6 <Init_Msg_extr+0xcf2>
	}
	else
	{
		//printf("Received CRC       :0x%06lX\n",Recv_CRC);
		INIT_Received[Source_Index] = RECEIVED;
 8001742:	78bb      	ldrb	r3, [r7, #2]
 8001744:	4a23      	ldr	r2, [pc, #140]	; (80017d4 <Init_Msg_extr+0x120>)
 8001746:	2101      	movs	r1, #1
 8001748:	54d1      	strb	r1, [r2, r3]
		Received_Init[Source_Index] = 1;
 800174a:	78bb      	ldrb	r3, [r7, #2]
 800174c:	4a22      	ldr	r2, [pc, #136]	; (80017d8 <Init_Msg_extr+0x124>)
 800174e:	2101      	movs	r1, #1
 8001750:	54d1      	strb	r1, [r2, r3]
	}

	Recv_App_CRC = ExtractBits(ucBit, 16, (unsigned char *)&Buff[29]);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f103 021d 	add.w	r2, r3, #29
 8001758:	8bbb      	ldrh	r3, [r7, #28]
 800175a:	2110      	movs	r1, #16
 800175c:	4618      	mov	r0, r3
 800175e:	f7fe ff59 	bl	8000614 <ExtractBits>
 8001762:	4603      	mov	r3, r0
 8001764:	837b      	strh	r3, [r7, #26]


	if(Recv_App_CRC != EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][Source_Index])
 8001766:	78bb      	ldrb	r3, [r7, #2]
 8001768:	4a16      	ldr	r2, [pc, #88]	; (80017c4 <Init_Msg_extr+0x110>)
 800176a:	33f4      	adds	r3, #244	; 0xf4
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	4413      	add	r3, r2
 8001770:	889b      	ldrh	r3, [r3, #4]
 8001772:	8b7a      	ldrh	r2, [r7, #26]
 8001774:	429a      	cmp	r2, r3
 8001776:	d03d      	beq.n	80017f4 <Init_Msg_extr+0x140>
	{
		App_Identity_CRC_Fail[Source_Index] = 1;
 8001778:	78bb      	ldrb	r3, [r7, #2]
 800177a:	4a18      	ldr	r2, [pc, #96]	; (80017dc <Init_Msg_extr+0x128>)
 800177c:	2101      	movs	r1, #1
 800177e:	54d1      	strb	r1, [r2, r3]
		printf("Received App Identity CRC is not Matching for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8001780:	78bb      	ldrb	r3, [r7, #2]
 8001782:	4a10      	ldr	r2, [pc, #64]	; (80017c4 <Init_Msg_extr+0x110>)
 8001784:	3366      	adds	r3, #102	; 0x66
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	4413      	add	r3, r2
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	4619      	mov	r1, r3
 800178e:	4814      	ldr	r0, [pc, #80]	; (80017e0 <Init_Msg_extr+0x12c>)
 8001790:	f021 f9b4 	bl	8022afc <iprintf>
		printf("Received App Identity CRC:0X%04X\n",Recv_App_CRC);
 8001794:	8b7b      	ldrh	r3, [r7, #26]
 8001796:	4619      	mov	r1, r3
 8001798:	4812      	ldr	r0, [pc, #72]	; (80017e4 <Init_Msg_extr+0x130>)
 800179a:	f021 f9af 	bl	8022afc <iprintf>
		printf("Expected App Identity CRC:0X%04X\n",EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][Source_Index]);
 800179e:	78bb      	ldrb	r3, [r7, #2]
 80017a0:	4a08      	ldr	r2, [pc, #32]	; (80017c4 <Init_Msg_extr+0x110>)
 80017a2:	33f4      	adds	r3, #244	; 0xf4
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	4413      	add	r3, r2
 80017a8:	889b      	ldrh	r3, [r3, #4]
 80017aa:	4619      	mov	r1, r3
 80017ac:	480e      	ldr	r0, [pc, #56]	; (80017e8 <Init_Msg_extr+0x134>)
 80017ae:	f021 f9a5 	bl	8022afc <iprintf>

		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)
 80017b2:	490e      	ldr	r1, [pc, #56]	; (80017ec <Init_Msg_extr+0x138>)
 80017b4:	480e      	ldr	r0, [pc, #56]	; (80017f0 <Init_Msg_extr+0x13c>)
 80017b6:	f7fe fd43 	bl	8000240 <strcmp>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d01d      	beq.n	80017fc <Init_Msg_extr+0x148>
		{
			return;
 80017c0:	f000 bdf1 	b.w	80023a6 <Init_Msg_extr+0xcf2>
 80017c4:	20000304 	.word	0x20000304
 80017c8:	080244e8 	.word	0x080244e8
 80017cc:	08024504 	.word	0x08024504
 80017d0:	08024514 	.word	0x08024514
 80017d4:	20001000 	.word	0x20001000
 80017d8:	20001018 	.word	0x20001018
 80017dc:	2000100c 	.word	0x2000100c
 80017e0:	08024524 	.word	0x08024524
 80017e4:	0802455c 	.word	0x0802455c
 80017e8:	08024580 	.word	0x08024580
 80017ec:	080242c0 	.word	0x080242c0
 80017f0:	20000305 	.word	0x20000305
		}
	}
	else
	{
		App_Identity_CRC_Fail[Source_Index] = 0;
 80017f4:	78bb      	ldrb	r3, [r7, #2]
 80017f6:	4aab      	ldr	r2, [pc, #684]	; (8001aa4 <Init_Msg_extr+0x3f0>)
 80017f8:	2100      	movs	r1, #0
 80017fa:	54d1      	strb	r1, [r2, r3]
	}

	Recv_Inputs = ExtractBits(ucBit, 8, (unsigned char *)&Buff[36]);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8001802:	8bbb      	ldrh	r3, [r7, #28]
 8001804:	2108      	movs	r1, #8
 8001806:	4618      	mov	r0, r3
 8001808:	f7fe ff04 	bl	8000614 <ExtractBits>
 800180c:	4603      	mov	r3, r0
 800180e:	767b      	strb	r3, [r7, #25]
	if(Recv_Inputs != EI_data.Hitachi_st.Bool_outputs[Source_Index])
 8001810:	78bb      	ldrb	r3, [r7, #2]
 8001812:	4aa5      	ldr	r2, [pc, #660]	; (8001aa8 <Init_Msg_extr+0x3f4>)
 8001814:	4413      	add	r3, r2
 8001816:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 800181a:	7e7a      	ldrb	r2, [r7, #25]
 800181c:	429a      	cmp	r2, r3
 800181e:	d01f      	beq.n	8001860 <Init_Msg_extr+0x1ac>
	{
		printf("Vital Inputs Not Matching for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8001820:	78bb      	ldrb	r3, [r7, #2]
 8001822:	4aa1      	ldr	r2, [pc, #644]	; (8001aa8 <Init_Msg_extr+0x3f4>)
 8001824:	3366      	adds	r3, #102	; 0x66
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	4413      	add	r3, r2
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	4619      	mov	r1, r3
 800182e:	489f      	ldr	r0, [pc, #636]	; (8001aac <Init_Msg_extr+0x3f8>)
 8001830:	f021 f964 	bl	8022afc <iprintf>
		printf("Expected Inputs:%u\n",EI_data.Hitachi_st.Bool_outputs[Source_Index]);
 8001834:	78bb      	ldrb	r3, [r7, #2]
 8001836:	4a9c      	ldr	r2, [pc, #624]	; (8001aa8 <Init_Msg_extr+0x3f4>)
 8001838:	4413      	add	r3, r2
 800183a:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 800183e:	4619      	mov	r1, r3
 8001840:	489b      	ldr	r0, [pc, #620]	; (8001ab0 <Init_Msg_extr+0x3fc>)
 8001842:	f021 f95b 	bl	8022afc <iprintf>
		printf("Received Inputs:%u\n",Recv_Inputs);
 8001846:	7e7b      	ldrb	r3, [r7, #25]
 8001848:	4619      	mov	r1, r3
 800184a:	489a      	ldr	r0, [pc, #616]	; (8001ab4 <Init_Msg_extr+0x400>)
 800184c:	f021 f956 	bl	8022afc <iprintf>

		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)
 8001850:	4999      	ldr	r1, [pc, #612]	; (8001ab8 <Init_Msg_extr+0x404>)
 8001852:	489a      	ldr	r0, [pc, #616]	; (8001abc <Init_Msg_extr+0x408>)
 8001854:	f7fe fcf4 	bl	8000240 <strcmp>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	f040 85a2 	bne.w	80023a4 <Init_Msg_extr+0xcf0>
			return;
		}
	}


	Last_Recevied_Clock[Source_Index] = Cur_Ticks;
 8001860:	78bb      	ldrb	r3, [r7, #2]
 8001862:	4997      	ldr	r1, [pc, #604]	; (8001ac0 <Init_Msg_extr+0x40c>)
 8001864:	68fa      	ldr	r2, [r7, #12]
 8001866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff); // To detected EiPC shifting Faster
	Received_Init[Source_Index] = SET;
 800186a:	78bb      	ldrb	r3, [r7, #2]
 800186c:	4a95      	ldr	r2, [pc, #596]	; (8001ac4 <Init_Msg_extr+0x410>)
 800186e:	2101      	movs	r1, #1
 8001870:	54d1      	strb	r1, [r2, r3]
	Init_Msg_Sent_After_Timeout[Source_Index] = 0;
 8001872:	78bb      	ldrb	r3, [r7, #2]
 8001874:	4a94      	ldr	r2, [pc, #592]	; (8001ac8 <Init_Msg_extr+0x414>)
 8001876:	2100      	movs	r1, #0
 8001878:	54d1      	strb	r1, [r2, r3]
	Last_Received_Init_Clk[Source_Index] = Cur_Ticks;
 800187a:	78bb      	ldrb	r3, [r7, #2]
 800187c:	4993      	ldr	r1, [pc, #588]	; (8001acc <Init_Msg_extr+0x418>)
 800187e:	68fa      	ldr	r2, [r7, #12]
 8001880:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//		{
	//			Link_Establish_Clock[Source_Index] = TWO_SEC;
	//		}
	//	}

	BITSTUFFINC(8); // Incrementing to escape SOM
 8001884:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001888:	3308      	adds	r3, #8
 800188a:	2b00      	cmp	r3, #0
 800188c:	da00      	bge.n	8001890 <Init_Msg_extr+0x1dc>
 800188e:	3307      	adds	r3, #7
 8001890:	10db      	asrs	r3, r3, #3
 8001892:	b29a      	uxth	r2, r3
 8001894:	8bfb      	ldrh	r3, [r7, #30]
 8001896:	4413      	add	r3, r2
 8001898:	83fb      	strh	r3, [r7, #30]
 800189a:	8bbb      	ldrh	r3, [r7, #28]
 800189c:	3308      	adds	r3, #8
 800189e:	b29b      	uxth	r3, r3
 80018a0:	b21b      	sxth	r3, r3
 80018a2:	425a      	negs	r2, r3
 80018a4:	f003 0307 	and.w	r3, r3, #7
 80018a8:	f002 0207 	and.w	r2, r2, #7
 80018ac:	bf58      	it	pl
 80018ae:	4253      	negpl	r3, r2
 80018b0:	b21b      	sxth	r3, r3
 80018b2:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80018b4:	8bfb      	ldrh	r3, [r7, #30]
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	441a      	add	r2, r3
 80018ba:	8bbb      	ldrh	r3, [r7, #28]
 80018bc:	2110      	movs	r1, #16
 80018be:	4618      	mov	r0, r3
 80018c0:	f7fe fea8 	bl	8000614 <ExtractBits>
 80018c4:	4602      	mov	r2, r0
 80018c6:	78bb      	ldrb	r3, [r7, #2]
 80018c8:	b291      	uxth	r1, r2
 80018ca:	4a81      	ldr	r2, [pc, #516]	; (8001ad0 <Init_Msg_extr+0x41c>)
 80018cc:	015b      	lsls	r3, r3, #5
 80018ce:	4413      	add	r3, r2
 80018d0:	3310      	adds	r3, #16
 80018d2:	460a      	mov	r2, r1
 80018d4:	801a      	strh	r2, [r3, #0]
	printf("DA:%u ",Hitachi_Init_st[Source_Index].Des_Addr);
 80018d6:	78bb      	ldrb	r3, [r7, #2]
 80018d8:	4a7d      	ldr	r2, [pc, #500]	; (8001ad0 <Init_Msg_extr+0x41c>)
 80018da:	015b      	lsls	r3, r3, #5
 80018dc:	4413      	add	r3, r2
 80018de:	3310      	adds	r3, #16
 80018e0:	881b      	ldrh	r3, [r3, #0]
 80018e2:	4619      	mov	r1, r3
 80018e4:	487b      	ldr	r0, [pc, #492]	; (8001ad4 <Init_Msg_extr+0x420>)
 80018e6:	f021 f909 	bl	8022afc <iprintf>
	BITSTUFFINC(16);
 80018ea:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80018ee:	3310      	adds	r3, #16
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	da00      	bge.n	80018f6 <Init_Msg_extr+0x242>
 80018f4:	3307      	adds	r3, #7
 80018f6:	10db      	asrs	r3, r3, #3
 80018f8:	b29a      	uxth	r2, r3
 80018fa:	8bfb      	ldrh	r3, [r7, #30]
 80018fc:	4413      	add	r3, r2
 80018fe:	83fb      	strh	r3, [r7, #30]
 8001900:	8bbb      	ldrh	r3, [r7, #28]
 8001902:	3310      	adds	r3, #16
 8001904:	b29b      	uxth	r3, r3
 8001906:	b21b      	sxth	r3, r3
 8001908:	425a      	negs	r2, r3
 800190a:	f003 0307 	and.w	r3, r3, #7
 800190e:	f002 0207 	and.w	r2, r2, #7
 8001912:	bf58      	it	pl
 8001914:	4253      	negpl	r3, r2
 8001916:	b21b      	sxth	r3, r3
 8001918:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 800191a:	8bfb      	ldrh	r3, [r7, #30]
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	441a      	add	r2, r3
 8001920:	8bbb      	ldrh	r3, [r7, #28]
 8001922:	2110      	movs	r1, #16
 8001924:	4618      	mov	r0, r3
 8001926:	f7fe fe75 	bl	8000614 <ExtractBits>
 800192a:	4602      	mov	r2, r0
 800192c:	78bb      	ldrb	r3, [r7, #2]
 800192e:	b291      	uxth	r1, r2
 8001930:	4a67      	ldr	r2, [pc, #412]	; (8001ad0 <Init_Msg_extr+0x41c>)
 8001932:	015b      	lsls	r3, r3, #5
 8001934:	4413      	add	r3, r2
 8001936:	330e      	adds	r3, #14
 8001938:	460a      	mov	r2, r1
 800193a:	801a      	strh	r2, [r3, #0]
	printf("SA:%u ",Hitachi_Init_st[Source_Index].Src_Addr);
 800193c:	78bb      	ldrb	r3, [r7, #2]
 800193e:	4a64      	ldr	r2, [pc, #400]	; (8001ad0 <Init_Msg_extr+0x41c>)
 8001940:	015b      	lsls	r3, r3, #5
 8001942:	4413      	add	r3, r2
 8001944:	330e      	adds	r3, #14
 8001946:	881b      	ldrh	r3, [r3, #0]
 8001948:	4619      	mov	r1, r3
 800194a:	4863      	ldr	r0, [pc, #396]	; (8001ad8 <Init_Msg_extr+0x424>)
 800194c:	f021 f8d6 	bl	8022afc <iprintf>
	BITSTUFFINC(16);
 8001950:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001954:	3310      	adds	r3, #16
 8001956:	2b00      	cmp	r3, #0
 8001958:	da00      	bge.n	800195c <Init_Msg_extr+0x2a8>
 800195a:	3307      	adds	r3, #7
 800195c:	10db      	asrs	r3, r3, #3
 800195e:	b29a      	uxth	r2, r3
 8001960:	8bfb      	ldrh	r3, [r7, #30]
 8001962:	4413      	add	r3, r2
 8001964:	83fb      	strh	r3, [r7, #30]
 8001966:	8bbb      	ldrh	r3, [r7, #28]
 8001968:	3310      	adds	r3, #16
 800196a:	b29b      	uxth	r3, r3
 800196c:	b21b      	sxth	r3, r3
 800196e:	425a      	negs	r2, r3
 8001970:	f003 0307 	and.w	r3, r3, #7
 8001974:	f002 0207 	and.w	r2, r2, #7
 8001978:	bf58      	it	pl
 800197a:	4253      	negpl	r3, r2
 800197c:	b21b      	sxth	r3, r3
 800197e:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001980:	8bfb      	ldrh	r3, [r7, #30]
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	441a      	add	r2, r3
 8001986:	8bbb      	ldrh	r3, [r7, #28]
 8001988:	2108      	movs	r1, #8
 800198a:	4618      	mov	r0, r3
 800198c:	f7fe fe42 	bl	8000614 <ExtractBits>
 8001990:	4602      	mov	r2, r0
 8001992:	78bb      	ldrb	r3, [r7, #2]
 8001994:	b2d1      	uxtb	r1, r2
 8001996:	4a4e      	ldr	r2, [pc, #312]	; (8001ad0 <Init_Msg_extr+0x41c>)
 8001998:	015b      	lsls	r3, r3, #5
 800199a:	4413      	add	r3, r2
 800199c:	460a      	mov	r2, r1
 800199e:	701a      	strb	r2, [r3, #0]
	//printf("Tx_seq             :%u\n",Hitachi_Init_st[Source_Index].Tx_Seq);
	BITSTUFFINC(8);
 80019a0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80019a4:	3308      	adds	r3, #8
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	da00      	bge.n	80019ac <Init_Msg_extr+0x2f8>
 80019aa:	3307      	adds	r3, #7
 80019ac:	10db      	asrs	r3, r3, #3
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	8bfb      	ldrh	r3, [r7, #30]
 80019b2:	4413      	add	r3, r2
 80019b4:	83fb      	strh	r3, [r7, #30]
 80019b6:	8bbb      	ldrh	r3, [r7, #28]
 80019b8:	3308      	adds	r3, #8
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	b21b      	sxth	r3, r3
 80019be:	425a      	negs	r2, r3
 80019c0:	f003 0307 	and.w	r3, r3, #7
 80019c4:	f002 0207 	and.w	r2, r2, #7
 80019c8:	bf58      	it	pl
 80019ca:	4253      	negpl	r3, r2
 80019cc:	b21b      	sxth	r3, r3
 80019ce:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80019d0:	8bfb      	ldrh	r3, [r7, #30]
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	441a      	add	r2, r3
 80019d6:	8bbb      	ldrh	r3, [r7, #28]
 80019d8:	2108      	movs	r1, #8
 80019da:	4618      	mov	r0, r3
 80019dc:	f7fe fe1a 	bl	8000614 <ExtractBits>
 80019e0:	4602      	mov	r2, r0
 80019e2:	78bb      	ldrb	r3, [r7, #2]
 80019e4:	b2d1      	uxtb	r1, r2
 80019e6:	4a3a      	ldr	r2, [pc, #232]	; (8001ad0 <Init_Msg_extr+0x41c>)
 80019e8:	015b      	lsls	r3, r3, #5
 80019ea:	4413      	add	r3, r2
 80019ec:	3301      	adds	r3, #1
 80019ee:	460a      	mov	r2, r1
 80019f0:	701a      	strb	r2, [r3, #0]
	//printf("Rx_seq             :%u\n", Hitachi_Init_st[Source_Index].Rx_Seq);
	BITSTUFFINC(8);
 80019f2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80019f6:	3308      	adds	r3, #8
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	da00      	bge.n	80019fe <Init_Msg_extr+0x34a>
 80019fc:	3307      	adds	r3, #7
 80019fe:	10db      	asrs	r3, r3, #3
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	8bfb      	ldrh	r3, [r7, #30]
 8001a04:	4413      	add	r3, r2
 8001a06:	83fb      	strh	r3, [r7, #30]
 8001a08:	8bbb      	ldrh	r3, [r7, #28]
 8001a0a:	3308      	adds	r3, #8
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	b21b      	sxth	r3, r3
 8001a10:	425a      	negs	r2, r3
 8001a12:	f003 0307 	and.w	r3, r3, #7
 8001a16:	f002 0207 	and.w	r2, r2, #7
 8001a1a:	bf58      	it	pl
 8001a1c:	4253      	negpl	r3, r2
 8001a1e:	b21b      	sxth	r3, r3
 8001a20:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001a22:	8bfb      	ldrh	r3, [r7, #30]
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	441a      	add	r2, r3
 8001a28:	8bbb      	ldrh	r3, [r7, #28]
 8001a2a:	2108      	movs	r1, #8
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7fe fdf1 	bl	8000614 <ExtractBits>
 8001a32:	4602      	mov	r2, r0
 8001a34:	78bb      	ldrb	r3, [r7, #2]
 8001a36:	b2d1      	uxtb	r1, r2
 8001a38:	4a25      	ldr	r2, [pc, #148]	; (8001ad0 <Init_Msg_extr+0x41c>)
 8001a3a:	015b      	lsls	r3, r3, #5
 8001a3c:	4413      	add	r3, r2
 8001a3e:	3302      	adds	r3, #2
 8001a40:	460a      	mov	r2, r1
 8001a42:	701a      	strb	r2, [r3, #0]
	//printf("Msg_Type           :%u\n", Hitachi_Init_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 8001a44:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001a48:	3308      	adds	r3, #8
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	da00      	bge.n	8001a50 <Init_Msg_extr+0x39c>
 8001a4e:	3307      	adds	r3, #7
 8001a50:	10db      	asrs	r3, r3, #3
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	8bfb      	ldrh	r3, [r7, #30]
 8001a56:	4413      	add	r3, r2
 8001a58:	83fb      	strh	r3, [r7, #30]
 8001a5a:	8bbb      	ldrh	r3, [r7, #28]
 8001a5c:	3308      	adds	r3, #8
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	b21b      	sxth	r3, r3
 8001a62:	425a      	negs	r2, r3
 8001a64:	f003 0307 	and.w	r3, r3, #7
 8001a68:	f002 0207 	and.w	r2, r2, #7
 8001a6c:	bf58      	it	pl
 8001a6e:	4253      	negpl	r3, r2
 8001a70:	b21b      	sxth	r3, r3
 8001a72:	83bb      	strh	r3, [r7, #28]


	Hitachi_prms_st[Source_Index].Msg_Status_Flag = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8001a74:	8bfb      	ldrh	r3, [r7, #30]
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	441a      	add	r2, r3
 8001a7a:	8bbb      	ldrh	r3, [r7, #28]
 8001a7c:	2110      	movs	r1, #16
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7fe fdc8 	bl	8000614 <ExtractBits>
 8001a84:	4602      	mov	r2, r0
 8001a86:	78bb      	ldrb	r3, [r7, #2]
 8001a88:	b291      	uxth	r1, r2
 8001a8a:	4a14      	ldr	r2, [pc, #80]	; (8001adc <Init_Msg_extr+0x428>)
 8001a8c:	011b      	lsls	r3, r3, #4
 8001a8e:	4413      	add	r3, r2
 8001a90:	3304      	adds	r3, #4
 8001a92:	460a      	mov	r2, r1
 8001a94:	801a      	strh	r2, [r3, #0]
	BITSTUFFINC(16);
 8001a96:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001a9a:	3310      	adds	r3, #16
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	da1f      	bge.n	8001ae0 <Init_Msg_extr+0x42c>
 8001aa0:	3307      	adds	r3, #7
 8001aa2:	e01d      	b.n	8001ae0 <Init_Msg_extr+0x42c>
 8001aa4:	2000100c 	.word	0x2000100c
 8001aa8:	20000304 	.word	0x20000304
 8001aac:	080245a4 	.word	0x080245a4
 8001ab0:	080245cc 	.word	0x080245cc
 8001ab4:	080245e0 	.word	0x080245e0
 8001ab8:	080242c0 	.word	0x080242c0
 8001abc:	20000305 	.word	0x20000305
 8001ac0:	20000fb0 	.word	0x20000fb0
 8001ac4:	20001018 	.word	0x20001018
 8001ac8:	20001098 	.word	0x20001098
 8001acc:	200010a4 	.word	0x200010a4
 8001ad0:	20001270 	.word	0x20001270
 8001ad4:	080245f4 	.word	0x080245f4
 8001ad8:	080245fc 	.word	0x080245fc
 8001adc:	200011d0 	.word	0x200011d0
 8001ae0:	10db      	asrs	r3, r3, #3
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	8bfb      	ldrh	r3, [r7, #30]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	83fb      	strh	r3, [r7, #30]
 8001aea:	8bbb      	ldrh	r3, [r7, #28]
 8001aec:	3310      	adds	r3, #16
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	b21b      	sxth	r3, r3
 8001af2:	425a      	negs	r2, r3
 8001af4:	f003 0307 	and.w	r3, r3, #7
 8001af8:	f002 0207 	and.w	r2, r2, #7
 8001afc:	bf58      	it	pl
 8001afe:	4253      	negpl	r3, r2
 8001b00:	b21b      	sxth	r3, r3
 8001b02:	83bb      	strh	r3, [r7, #28]
	//printf("Msg_sts_flag       :0x%04X\n", Hitachi_prms_st[Source_Index].Msg_Status_Flag);

	//Debug_Status_Flag(Hitachi_prms_st[Source_Index].Msg_Status_Flag,Hitachi_Init_st[Source_Index].Msg_Type);

	if ( CHECKFLAG(TIME_STAMP,Hitachi_prms_st[Source_Index].Msg_Status_Flag)== SET) // Time-stamp Extraction
 8001b04:	78bb      	ldrb	r3, [r7, #2]
 8001b06:	4a8e      	ldr	r2, [pc, #568]	; (8001d40 <Init_Msg_extr+0x68c>)
 8001b08:	011b      	lsls	r3, r3, #4
 8001b0a:	4413      	add	r3, r2
 8001b0c:	3304      	adds	r3, #4
 8001b0e:	881b      	ldrh	r3, [r3, #0]
 8001b10:	f003 0320 	and.w	r3, r3, #32
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	f000 811d 	beq.w	8001d54 <Init_Msg_extr+0x6a0>
	{
		// printf("Time Included in the Data field\n");
		HITACHI_time_Stamp_st[Source_Index].YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001b1a:	8bfb      	ldrh	r3, [r7, #30]
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	441a      	add	r2, r3
 8001b20:	8bbb      	ldrh	r3, [r7, #28]
 8001b22:	2108      	movs	r1, #8
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7fe fd75 	bl	8000614 <ExtractBits>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	78ba      	ldrb	r2, [r7, #2]
 8001b2e:	b2d8      	uxtb	r0, r3
 8001b30:	4984      	ldr	r1, [pc, #528]	; (8001d44 <Init_Msg_extr+0x690>)
 8001b32:	4613      	mov	r3, r2
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	4413      	add	r3, r2
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	440b      	add	r3, r1
 8001b3c:	3305      	adds	r3, #5
 8001b3e:	4602      	mov	r2, r0
 8001b40:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8001b42:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001b46:	3308      	adds	r3, #8
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	da00      	bge.n	8001b4e <Init_Msg_extr+0x49a>
 8001b4c:	3307      	adds	r3, #7
 8001b4e:	10db      	asrs	r3, r3, #3
 8001b50:	b29a      	uxth	r2, r3
 8001b52:	8bfb      	ldrh	r3, [r7, #30]
 8001b54:	4413      	add	r3, r2
 8001b56:	83fb      	strh	r3, [r7, #30]
 8001b58:	8bbb      	ldrh	r3, [r7, #28]
 8001b5a:	3308      	adds	r3, #8
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	b21b      	sxth	r3, r3
 8001b60:	425a      	negs	r2, r3
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	f002 0207 	and.w	r2, r2, #7
 8001b6a:	bf58      	it	pl
 8001b6c:	4253      	negpl	r3, r2
 8001b6e:	b21b      	sxth	r3, r3
 8001b70:	83bb      	strh	r3, [r7, #28]
		//printf("YEAR               :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].YY);

		HITACHI_time_Stamp_st[Source_Index].MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001b72:	8bfb      	ldrh	r3, [r7, #30]
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	441a      	add	r2, r3
 8001b78:	8bbb      	ldrh	r3, [r7, #28]
 8001b7a:	2108      	movs	r1, #8
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7fe fd49 	bl	8000614 <ExtractBits>
 8001b82:	4603      	mov	r3, r0
 8001b84:	78ba      	ldrb	r2, [r7, #2]
 8001b86:	b2d8      	uxtb	r0, r3
 8001b88:	496e      	ldr	r1, [pc, #440]	; (8001d44 <Init_Msg_extr+0x690>)
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	4413      	add	r3, r2
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	440b      	add	r3, r1
 8001b94:	3304      	adds	r3, #4
 8001b96:	4602      	mov	r2, r0
 8001b98:	701a      	strb	r2, [r3, #0]
		//printf("Month              :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].YY);
		BITSTUFFINC(8);
 8001b9a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001b9e:	3308      	adds	r3, #8
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	da00      	bge.n	8001ba6 <Init_Msg_extr+0x4f2>
 8001ba4:	3307      	adds	r3, #7
 8001ba6:	10db      	asrs	r3, r3, #3
 8001ba8:	b29a      	uxth	r2, r3
 8001baa:	8bfb      	ldrh	r3, [r7, #30]
 8001bac:	4413      	add	r3, r2
 8001bae:	83fb      	strh	r3, [r7, #30]
 8001bb0:	8bbb      	ldrh	r3, [r7, #28]
 8001bb2:	3308      	adds	r3, #8
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	b21b      	sxth	r3, r3
 8001bb8:	425a      	negs	r2, r3
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	f002 0207 	and.w	r2, r2, #7
 8001bc2:	bf58      	it	pl
 8001bc4:	4253      	negpl	r3, r2
 8001bc6:	b21b      	sxth	r3, r3
 8001bc8:	83bb      	strh	r3, [r7, #28]

		HITACHI_time_Stamp_st[Source_Index].DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001bca:	8bfb      	ldrh	r3, [r7, #30]
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	441a      	add	r2, r3
 8001bd0:	8bbb      	ldrh	r3, [r7, #28]
 8001bd2:	2108      	movs	r1, #8
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7fe fd1d 	bl	8000614 <ExtractBits>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	78ba      	ldrb	r2, [r7, #2]
 8001bde:	b2d8      	uxtb	r0, r3
 8001be0:	4958      	ldr	r1, [pc, #352]	; (8001d44 <Init_Msg_extr+0x690>)
 8001be2:	4613      	mov	r3, r2
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	4413      	add	r3, r2
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	440b      	add	r3, r1
 8001bec:	3303      	adds	r3, #3
 8001bee:	4602      	mov	r2, r0
 8001bf0:	701a      	strb	r2, [r3, #0]
		//printf("Day                :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].DD);
		BITSTUFFINC(8);
 8001bf2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001bf6:	3308      	adds	r3, #8
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	da00      	bge.n	8001bfe <Init_Msg_extr+0x54a>
 8001bfc:	3307      	adds	r3, #7
 8001bfe:	10db      	asrs	r3, r3, #3
 8001c00:	b29a      	uxth	r2, r3
 8001c02:	8bfb      	ldrh	r3, [r7, #30]
 8001c04:	4413      	add	r3, r2
 8001c06:	83fb      	strh	r3, [r7, #30]
 8001c08:	8bbb      	ldrh	r3, [r7, #28]
 8001c0a:	3308      	adds	r3, #8
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	b21b      	sxth	r3, r3
 8001c10:	425a      	negs	r2, r3
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	f002 0207 	and.w	r2, r2, #7
 8001c1a:	bf58      	it	pl
 8001c1c:	4253      	negpl	r3, r2
 8001c1e:	b21b      	sxth	r3, r3
 8001c20:	83bb      	strh	r3, [r7, #28]

		HITACHI_time_Stamp_st[Source_Index].hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001c22:	8bfb      	ldrh	r3, [r7, #30]
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	441a      	add	r2, r3
 8001c28:	8bbb      	ldrh	r3, [r7, #28]
 8001c2a:	2108      	movs	r1, #8
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7fe fcf1 	bl	8000614 <ExtractBits>
 8001c32:	4603      	mov	r3, r0
 8001c34:	78ba      	ldrb	r2, [r7, #2]
 8001c36:	b2d8      	uxtb	r0, r3
 8001c38:	4942      	ldr	r1, [pc, #264]	; (8001d44 <Init_Msg_extr+0x690>)
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	4413      	add	r3, r2
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	440b      	add	r3, r1
 8001c44:	4602      	mov	r2, r0
 8001c46:	701a      	strb	r2, [r3, #0]
		//printf("HOURS              :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].hh);
		BITSTUFFINC(8);
 8001c48:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c4c:	3308      	adds	r3, #8
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	da00      	bge.n	8001c54 <Init_Msg_extr+0x5a0>
 8001c52:	3307      	adds	r3, #7
 8001c54:	10db      	asrs	r3, r3, #3
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	8bfb      	ldrh	r3, [r7, #30]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	83fb      	strh	r3, [r7, #30]
 8001c5e:	8bbb      	ldrh	r3, [r7, #28]
 8001c60:	3308      	adds	r3, #8
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	b21b      	sxth	r3, r3
 8001c66:	425a      	negs	r2, r3
 8001c68:	f003 0307 	and.w	r3, r3, #7
 8001c6c:	f002 0207 	and.w	r2, r2, #7
 8001c70:	bf58      	it	pl
 8001c72:	4253      	negpl	r3, r2
 8001c74:	b21b      	sxth	r3, r3
 8001c76:	83bb      	strh	r3, [r7, #28]

		HITACHI_time_Stamp_st[Source_Index].mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001c78:	8bfb      	ldrh	r3, [r7, #30]
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	441a      	add	r2, r3
 8001c7e:	8bbb      	ldrh	r3, [r7, #28]
 8001c80:	2108      	movs	r1, #8
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7fe fcc6 	bl	8000614 <ExtractBits>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	78ba      	ldrb	r2, [r7, #2]
 8001c8c:	b2d8      	uxtb	r0, r3
 8001c8e:	492d      	ldr	r1, [pc, #180]	; (8001d44 <Init_Msg_extr+0x690>)
 8001c90:	4613      	mov	r3, r2
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	4413      	add	r3, r2
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	440b      	add	r3, r1
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	701a      	strb	r2, [r3, #0]
		//printf("MIN                :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].mm);
		BITSTUFFINC(8);
 8001ca0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001ca4:	3308      	adds	r3, #8
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	da00      	bge.n	8001cac <Init_Msg_extr+0x5f8>
 8001caa:	3307      	adds	r3, #7
 8001cac:	10db      	asrs	r3, r3, #3
 8001cae:	b29a      	uxth	r2, r3
 8001cb0:	8bfb      	ldrh	r3, [r7, #30]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	83fb      	strh	r3, [r7, #30]
 8001cb6:	8bbb      	ldrh	r3, [r7, #28]
 8001cb8:	3308      	adds	r3, #8
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	b21b      	sxth	r3, r3
 8001cbe:	425a      	negs	r2, r3
 8001cc0:	f003 0307 	and.w	r3, r3, #7
 8001cc4:	f002 0207 	and.w	r2, r2, #7
 8001cc8:	bf58      	it	pl
 8001cca:	4253      	negpl	r3, r2
 8001ccc:	b21b      	sxth	r3, r3
 8001cce:	83bb      	strh	r3, [r7, #28]

		HITACHI_time_Stamp_st[Source_Index].ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001cd0:	8bfb      	ldrh	r3, [r7, #30]
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	441a      	add	r2, r3
 8001cd6:	8bbb      	ldrh	r3, [r7, #28]
 8001cd8:	2108      	movs	r1, #8
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7fe fc9a 	bl	8000614 <ExtractBits>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	78ba      	ldrb	r2, [r7, #2]
 8001ce4:	b2d8      	uxtb	r0, r3
 8001ce6:	4917      	ldr	r1, [pc, #92]	; (8001d44 <Init_Msg_extr+0x690>)
 8001ce8:	4613      	mov	r3, r2
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	4413      	add	r3, r2
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	440b      	add	r3, r1
 8001cf2:	3302      	adds	r3, #2
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	701a      	strb	r2, [r3, #0]
		//printf("SEC                :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].ss);
		BITSTUFFINC(8);
 8001cf8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001cfc:	3308      	adds	r3, #8
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	da00      	bge.n	8001d04 <Init_Msg_extr+0x650>
 8001d02:	3307      	adds	r3, #7
 8001d04:	10db      	asrs	r3, r3, #3
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	8bfb      	ldrh	r3, [r7, #30]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	83fb      	strh	r3, [r7, #30]
 8001d0e:	8bbb      	ldrh	r3, [r7, #28]
 8001d10:	3308      	adds	r3, #8
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	b21b      	sxth	r3, r3
 8001d16:	425a      	negs	r2, r3
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	f002 0207 	and.w	r2, r2, #7
 8001d20:	bf58      	it	pl
 8001d22:	4253      	negpl	r3, r2
 8001d24:	b21b      	sxth	r3, r3
 8001d26:	83bb      	strh	r3, [r7, #28]

		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
 8001d28:	78bb      	ldrb	r3, [r7, #2]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f007 f882 	bl	8008e34 <IS_MLK_EIPC_TIME_MATCHING>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d00a      	beq.n	8001d4c <Init_Msg_extr+0x698>
 8001d36:	78bb      	ldrb	r3, [r7, #2]
 8001d38:	4a03      	ldr	r2, [pc, #12]	; (8001d48 <Init_Msg_extr+0x694>)
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	54d1      	strb	r1, [r2, r3]
 8001d3e:	e009      	b.n	8001d54 <Init_Msg_extr+0x6a0>
 8001d40:	200011d0 	.word	0x200011d0
 8001d44:	20001194 	.word	0x20001194
 8001d48:	200010e4 	.word	0x200010e4
 8001d4c:	78bb      	ldrb	r3, [r7, #2]
 8001d4e:	4aa4      	ldr	r2, [pc, #656]	; (8001fe0 <Init_Msg_extr+0x92c>)
 8001d50:	2101      	movs	r1, #1
 8001d52:	54d1      	strb	r1, [r2, r3]
	}

	Hitachi_Init_st[Source_Index].Init_Size = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001d54:	8bfb      	ldrh	r3, [r7, #30]
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	441a      	add	r2, r3
 8001d5a:	8bbb      	ldrh	r3, [r7, #28]
 8001d5c:	2108      	movs	r1, #8
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7fe fc58 	bl	8000614 <ExtractBits>
 8001d64:	4602      	mov	r2, r0
 8001d66:	78bb      	ldrb	r3, [r7, #2]
 8001d68:	b2d1      	uxtb	r1, r2
 8001d6a:	4a9e      	ldr	r2, [pc, #632]	; (8001fe4 <Init_Msg_extr+0x930>)
 8001d6c:	015b      	lsls	r3, r3, #5
 8001d6e:	4413      	add	r3, r2
 8001d70:	3303      	adds	r3, #3
 8001d72:	460a      	mov	r2, r1
 8001d74:	701a      	strb	r2, [r3, #0]
	//printf("sizofInitData      :0x%02X\n", Hitachi_Init_st[Source_Index].Init_Size);
	BITSTUFFINC(8);
 8001d76:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001d7a:	3308      	adds	r3, #8
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	da00      	bge.n	8001d82 <Init_Msg_extr+0x6ce>
 8001d80:	3307      	adds	r3, #7
 8001d82:	10db      	asrs	r3, r3, #3
 8001d84:	b29a      	uxth	r2, r3
 8001d86:	8bfb      	ldrh	r3, [r7, #30]
 8001d88:	4413      	add	r3, r2
 8001d8a:	83fb      	strh	r3, [r7, #30]
 8001d8c:	8bbb      	ldrh	r3, [r7, #28]
 8001d8e:	3308      	adds	r3, #8
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	b21b      	sxth	r3, r3
 8001d94:	425a      	negs	r2, r3
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	f002 0207 	and.w	r2, r2, #7
 8001d9e:	bf58      	it	pl
 8001da0:	4253      	negpl	r3, r2
 8001da2:	b21b      	sxth	r3, r3
 8001da4:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Protocol_Ver = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8001da6:	8bfb      	ldrh	r3, [r7, #30]
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	441a      	add	r2, r3
 8001dac:	8bbb      	ldrh	r3, [r7, #28]
 8001dae:	2110      	movs	r1, #16
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7fe fc2f 	bl	8000614 <ExtractBits>
 8001db6:	4602      	mov	r2, r0
 8001db8:	78bb      	ldrb	r3, [r7, #2]
 8001dba:	b291      	uxth	r1, r2
 8001dbc:	4a89      	ldr	r2, [pc, #548]	; (8001fe4 <Init_Msg_extr+0x930>)
 8001dbe:	015b      	lsls	r3, r3, #5
 8001dc0:	4413      	add	r3, r2
 8001dc2:	3312      	adds	r3, #18
 8001dc4:	460a      	mov	r2, r1
 8001dc6:	801a      	strh	r2, [r3, #0]
	//printf("Protocol_Ver       :0x%04X\n",Hitachi_Init_st[Source_Index].Protocol_Ver);
	BITSTUFFINC(16);
 8001dc8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001dcc:	3310      	adds	r3, #16
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	da00      	bge.n	8001dd4 <Init_Msg_extr+0x720>
 8001dd2:	3307      	adds	r3, #7
 8001dd4:	10db      	asrs	r3, r3, #3
 8001dd6:	b29a      	uxth	r2, r3
 8001dd8:	8bfb      	ldrh	r3, [r7, #30]
 8001dda:	4413      	add	r3, r2
 8001ddc:	83fb      	strh	r3, [r7, #30]
 8001dde:	8bbb      	ldrh	r3, [r7, #28]
 8001de0:	3310      	adds	r3, #16
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	b21b      	sxth	r3, r3
 8001de6:	425a      	negs	r2, r3
 8001de8:	f003 0307 	and.w	r3, r3, #7
 8001dec:	f002 0207 	and.w	r2, r2, #7
 8001df0:	bf58      	it	pl
 8001df2:	4253      	negpl	r3, r2
 8001df4:	b21b      	sxth	r3, r3
 8001df6:	83bb      	strh	r3, [r7, #28]

	memcpy(Hitachi_Init_st[Source_Index].Exe_Ver,&Buff[ucByte],6);
 8001df8:	78bb      	ldrb	r3, [r7, #2]
 8001dfa:	015b      	lsls	r3, r3, #5
 8001dfc:	4a79      	ldr	r2, [pc, #484]	; (8001fe4 <Init_Msg_extr+0x930>)
 8001dfe:	4413      	add	r3, r2
 8001e00:	1d18      	adds	r0, r3, #4
 8001e02:	8bfb      	ldrh	r3, [r7, #30]
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	4413      	add	r3, r2
 8001e08:	2206      	movs	r2, #6
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	f020 fd66 	bl	80228dc <memcpy>
	//	printf("Executive Version  :0x%02X%02X%02X%02X%02X%02X\n",Hitachi_Init_st[Source_Index].Exe_Ver[0],Hitachi_Init_st[Source_Index].Exe_Ver[1],
	//			Hitachi_Init_st[Source_Index].Exe_Ver[2],Hitachi_Init_st[Source_Index].Exe_Ver[3],
	//			Hitachi_Init_st[Source_Index].Exe_Ver[4],Hitachi_Init_st[Source_Index].Exe_Ver[5]);

	BITSTUFFINC(16);
 8001e10:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001e14:	3310      	adds	r3, #16
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	da00      	bge.n	8001e1c <Init_Msg_extr+0x768>
 8001e1a:	3307      	adds	r3, #7
 8001e1c:	10db      	asrs	r3, r3, #3
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	8bfb      	ldrh	r3, [r7, #30]
 8001e22:	4413      	add	r3, r2
 8001e24:	83fb      	strh	r3, [r7, #30]
 8001e26:	8bbb      	ldrh	r3, [r7, #28]
 8001e28:	3310      	adds	r3, #16
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	b21b      	sxth	r3, r3
 8001e2e:	425a      	negs	r2, r3
 8001e30:	f003 0307 	and.w	r3, r3, #7
 8001e34:	f002 0207 	and.w	r2, r2, #7
 8001e38:	bf58      	it	pl
 8001e3a:	4253      	negpl	r3, r2
 8001e3c:	b21b      	sxth	r3, r3
 8001e3e:	83bb      	strh	r3, [r7, #28]
	BITSTUFFINC(16);
 8001e40:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001e44:	3310      	adds	r3, #16
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	da00      	bge.n	8001e4c <Init_Msg_extr+0x798>
 8001e4a:	3307      	adds	r3, #7
 8001e4c:	10db      	asrs	r3, r3, #3
 8001e4e:	b29a      	uxth	r2, r3
 8001e50:	8bfb      	ldrh	r3, [r7, #30]
 8001e52:	4413      	add	r3, r2
 8001e54:	83fb      	strh	r3, [r7, #30]
 8001e56:	8bbb      	ldrh	r3, [r7, #28]
 8001e58:	3310      	adds	r3, #16
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	b21b      	sxth	r3, r3
 8001e5e:	425a      	negs	r2, r3
 8001e60:	f003 0307 	and.w	r3, r3, #7
 8001e64:	f002 0207 	and.w	r2, r2, #7
 8001e68:	bf58      	it	pl
 8001e6a:	4253      	negpl	r3, r2
 8001e6c:	b21b      	sxth	r3, r3
 8001e6e:	83bb      	strh	r3, [r7, #28]
	BITSTUFFINC(16);
 8001e70:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001e74:	3310      	adds	r3, #16
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	da00      	bge.n	8001e7c <Init_Msg_extr+0x7c8>
 8001e7a:	3307      	adds	r3, #7
 8001e7c:	10db      	asrs	r3, r3, #3
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	8bfb      	ldrh	r3, [r7, #30]
 8001e82:	4413      	add	r3, r2
 8001e84:	83fb      	strh	r3, [r7, #30]
 8001e86:	8bbb      	ldrh	r3, [r7, #28]
 8001e88:	3310      	adds	r3, #16
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	b21b      	sxth	r3, r3
 8001e8e:	425a      	negs	r2, r3
 8001e90:	f003 0307 	and.w	r3, r3, #7
 8001e94:	f002 0207 	and.w	r2, r2, #7
 8001e98:	bf58      	it	pl
 8001e9a:	4253      	negpl	r3, r2
 8001e9c:	b21b      	sxth	r3, r3
 8001e9e:	83bb      	strh	r3, [r7, #28]
	// printf("Skip Exe_ver\n");

	Hitachi_Init_st[Source_Index].App_comp = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8001ea0:	8bfb      	ldrh	r3, [r7, #30]
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	441a      	add	r2, r3
 8001ea6:	8bbb      	ldrh	r3, [r7, #28]
 8001ea8:	2110      	movs	r1, #16
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7fe fbb2 	bl	8000614 <ExtractBits>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	78bb      	ldrb	r3, [r7, #2]
 8001eb4:	b291      	uxth	r1, r2
 8001eb6:	4a4b      	ldr	r2, [pc, #300]	; (8001fe4 <Init_Msg_extr+0x930>)
 8001eb8:	015b      	lsls	r3, r3, #5
 8001eba:	4413      	add	r3, r2
 8001ebc:	3314      	adds	r3, #20
 8001ebe:	460a      	mov	r2, r1
 8001ec0:	801a      	strh	r2, [r3, #0]
	//printf("Application_comp   :0x%04X\n",Hitachi_Init_st[Source_Index].App_comp);
	BITSTUFFINC(16);
 8001ec2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001ec6:	3310      	adds	r3, #16
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	da00      	bge.n	8001ece <Init_Msg_extr+0x81a>
 8001ecc:	3307      	adds	r3, #7
 8001ece:	10db      	asrs	r3, r3, #3
 8001ed0:	b29a      	uxth	r2, r3
 8001ed2:	8bfb      	ldrh	r3, [r7, #30]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	83fb      	strh	r3, [r7, #30]
 8001ed8:	8bbb      	ldrh	r3, [r7, #28]
 8001eda:	3310      	adds	r3, #16
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	b21b      	sxth	r3, r3
 8001ee0:	425a      	negs	r2, r3
 8001ee2:	f003 0307 	and.w	r3, r3, #7
 8001ee6:	f002 0207 	and.w	r2, r2, #7
 8001eea:	bf58      	it	pl
 8001eec:	4253      	negpl	r3, r2
 8001eee:	b21b      	sxth	r3, r3
 8001ef0:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].Exe_Idty_CRC = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8001ef2:	8bfb      	ldrh	r3, [r7, #30]
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	441a      	add	r2, r3
 8001ef8:	8bbb      	ldrh	r3, [r7, #28]
 8001efa:	2110      	movs	r1, #16
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7fe fb89 	bl	8000614 <ExtractBits>
 8001f02:	4602      	mov	r2, r0
 8001f04:	78bb      	ldrb	r3, [r7, #2]
 8001f06:	b291      	uxth	r1, r2
 8001f08:	4a36      	ldr	r2, [pc, #216]	; (8001fe4 <Init_Msg_extr+0x930>)
 8001f0a:	015b      	lsls	r3, r3, #5
 8001f0c:	4413      	add	r3, r2
 8001f0e:	3316      	adds	r3, #22
 8001f10:	460a      	mov	r2, r1
 8001f12:	801a      	strh	r2, [r3, #0]
	//	printf("Executive_Idty_CRC :0x%04X\n",Hitachi_Init_st[Source_Index].Exe_Idty_CRC);
	BITSTUFFINC(16);
 8001f14:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f18:	3310      	adds	r3, #16
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	da00      	bge.n	8001f20 <Init_Msg_extr+0x86c>
 8001f1e:	3307      	adds	r3, #7
 8001f20:	10db      	asrs	r3, r3, #3
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	8bfb      	ldrh	r3, [r7, #30]
 8001f26:	4413      	add	r3, r2
 8001f28:	83fb      	strh	r3, [r7, #30]
 8001f2a:	8bbb      	ldrh	r3, [r7, #28]
 8001f2c:	3310      	adds	r3, #16
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	b21b      	sxth	r3, r3
 8001f32:	425a      	negs	r2, r3
 8001f34:	f003 0307 	and.w	r3, r3, #7
 8001f38:	f002 0207 	and.w	r2, r2, #7
 8001f3c:	bf58      	it	pl
 8001f3e:	4253      	negpl	r3, r2
 8001f40:	b21b      	sxth	r3, r3
 8001f42:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].App_Idty_CRC = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8001f44:	8bfb      	ldrh	r3, [r7, #30]
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	441a      	add	r2, r3
 8001f4a:	8bbb      	ldrh	r3, [r7, #28]
 8001f4c:	2110      	movs	r1, #16
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7fe fb60 	bl	8000614 <ExtractBits>
 8001f54:	4602      	mov	r2, r0
 8001f56:	78bb      	ldrb	r3, [r7, #2]
 8001f58:	b291      	uxth	r1, r2
 8001f5a:	4a22      	ldr	r2, [pc, #136]	; (8001fe4 <Init_Msg_extr+0x930>)
 8001f5c:	015b      	lsls	r3, r3, #5
 8001f5e:	4413      	add	r3, r2
 8001f60:	3318      	adds	r3, #24
 8001f62:	460a      	mov	r2, r1
 8001f64:	801a      	strh	r2, [r3, #0]
	//printf("App_Idty_CRC       :%04u\n",Hitachi_Init_st[Source_Index].App_Idty_CRC);
	BITSTUFFINC(16);
 8001f66:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f6a:	3310      	adds	r3, #16
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	da00      	bge.n	8001f72 <Init_Msg_extr+0x8be>
 8001f70:	3307      	adds	r3, #7
 8001f72:	10db      	asrs	r3, r3, #3
 8001f74:	b29a      	uxth	r2, r3
 8001f76:	8bfb      	ldrh	r3, [r7, #30]
 8001f78:	4413      	add	r3, r2
 8001f7a:	83fb      	strh	r3, [r7, #30]
 8001f7c:	8bbb      	ldrh	r3, [r7, #28]
 8001f7e:	3310      	adds	r3, #16
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	b21b      	sxth	r3, r3
 8001f84:	425a      	negs	r2, r3
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	f002 0207 	and.w	r2, r2, #7
 8001f8e:	bf58      	it	pl
 8001f90:	4253      	negpl	r3, r2
 8001f92:	b21b      	sxth	r3, r3
 8001f94:	83bb      	strh	r3, [r7, #28]

	Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = ExtractBits(ucBit, 24, (unsigned char *)&Buff[ucByte]);
 8001f96:	8bfb      	ldrh	r3, [r7, #30]
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	441a      	add	r2, r3
 8001f9c:	78bc      	ldrb	r4, [r7, #2]
 8001f9e:	8bbb      	ldrh	r3, [r7, #28]
 8001fa0:	2118      	movs	r1, #24
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7fe fb36 	bl	8000614 <ExtractBits>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	490f      	ldr	r1, [pc, #60]	; (8001fe8 <Init_Msg_extr+0x934>)
 8001fac:	0123      	lsls	r3, r4, #4
 8001fae:	440b      	add	r3, r1
 8001fb0:	3308      	adds	r3, #8
 8001fb2:	601a      	str	r2, [r3, #0]
	//printf("Vital_CRC_Init_Val :0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
	Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 8001fb4:	78bb      	ldrb	r3, [r7, #2]
 8001fb6:	78ba      	ldrb	r2, [r7, #2]
 8001fb8:	490b      	ldr	r1, [pc, #44]	; (8001fe8 <Init_Msg_extr+0x934>)
 8001fba:	011b      	lsls	r3, r3, #4
 8001fbc:	440b      	add	r3, r1
 8001fbe:	3308      	adds	r3, #8
 8001fc0:	6819      	ldr	r1, [r3, #0]
 8001fc2:	480a      	ldr	r0, [pc, #40]	; (8001fec <Init_Msg_extr+0x938>)
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	4413      	add	r3, r2
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	4403      	add	r3, r0
 8001fce:	3308      	adds	r3, #8
 8001fd0:	6019      	str	r1, [r3, #0]
	BITSTUFFINC(24);
 8001fd2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001fd6:	3318      	adds	r3, #24
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	da09      	bge.n	8001ff0 <Init_Msg_extr+0x93c>
 8001fdc:	3307      	adds	r3, #7
 8001fde:	e007      	b.n	8001ff0 <Init_Msg_extr+0x93c>
 8001fe0:	200010e4 	.word	0x200010e4
 8001fe4:	20001270 	.word	0x20001270
 8001fe8:	200011d0 	.word	0x200011d0
 8001fec:	20001680 	.word	0x20001680
 8001ff0:	10db      	asrs	r3, r3, #3
 8001ff2:	b29a      	uxth	r2, r3
 8001ff4:	8bfb      	ldrh	r3, [r7, #30]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	83fb      	strh	r3, [r7, #30]
 8001ffa:	8bbb      	ldrh	r3, [r7, #28]
 8001ffc:	3318      	adds	r3, #24
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	b21b      	sxth	r3, r3
 8002002:	425a      	negs	r2, r3
 8002004:	f003 0307 	and.w	r3, r3, #7
 8002008:	f002 0207 	and.w	r2, r2, #7
 800200c:	bf58      	it	pl
 800200e:	4253      	negpl	r3, r2
 8002010:	b21b      	sxth	r3, r3
 8002012:	83bb      	strh	r3, [r7, #28]

	Hitachi_prms_st[Source_Index].Seq_Init_Value = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8002014:	8bfb      	ldrh	r3, [r7, #30]
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	441a      	add	r2, r3
 800201a:	8bbb      	ldrh	r3, [r7, #28]
 800201c:	2108      	movs	r1, #8
 800201e:	4618      	mov	r0, r3
 8002020:	f7fe faf8 	bl	8000614 <ExtractBits>
 8002024:	4602      	mov	r2, r0
 8002026:	78bb      	ldrb	r3, [r7, #2]
 8002028:	b2d1      	uxtb	r1, r2
 800202a:	4ab1      	ldr	r2, [pc, #708]	; (80022f0 <Init_Msg_extr+0xc3c>)
 800202c:	011b      	lsls	r3, r3, #4
 800202e:	4413      	add	r3, r2
 8002030:	460a      	mov	r2, r1
 8002032:	701a      	strb	r2, [r3, #0]
	Hitachi_prms_st[Source_Index].Rx_Seq = Hitachi_prms_st[Source_Index].Seq_Init_Value;
 8002034:	78ba      	ldrb	r2, [r7, #2]
 8002036:	78bb      	ldrb	r3, [r7, #2]
 8002038:	49ad      	ldr	r1, [pc, #692]	; (80022f0 <Init_Msg_extr+0xc3c>)
 800203a:	0112      	lsls	r2, r2, #4
 800203c:	440a      	add	r2, r1
 800203e:	7811      	ldrb	r1, [r2, #0]
 8002040:	4aab      	ldr	r2, [pc, #684]	; (80022f0 <Init_Msg_extr+0xc3c>)
 8002042:	011b      	lsls	r3, r3, #4
 8002044:	4413      	add	r3, r2
 8002046:	3302      	adds	r3, #2
 8002048:	460a      	mov	r2, r1
 800204a:	701a      	strb	r2, [r3, #0]
	//printf("Seq_Init_Val       :%u\n",Hitachi_prms_st[Source_Index].Seq_Init_Value);
	BITSTUFFINC(8);
 800204c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002050:	3308      	adds	r3, #8
 8002052:	2b00      	cmp	r3, #0
 8002054:	da00      	bge.n	8002058 <Init_Msg_extr+0x9a4>
 8002056:	3307      	adds	r3, #7
 8002058:	10db      	asrs	r3, r3, #3
 800205a:	b29a      	uxth	r2, r3
 800205c:	8bfb      	ldrh	r3, [r7, #30]
 800205e:	4413      	add	r3, r2
 8002060:	83fb      	strh	r3, [r7, #30]
 8002062:	8bbb      	ldrh	r3, [r7, #28]
 8002064:	3308      	adds	r3, #8
 8002066:	b29b      	uxth	r3, r3
 8002068:	b21b      	sxth	r3, r3
 800206a:	425a      	negs	r2, r3
 800206c:	f003 0307 	and.w	r3, r3, #7
 8002070:	f002 0207 	and.w	r2, r2, #7
 8002074:	bf58      	it	pl
 8002076:	4253      	negpl	r3, r2
 8002078:	b21b      	sxth	r3, r3
 800207a:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].V_NV_Flag = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800207c:	8bfb      	ldrh	r3, [r7, #30]
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	441a      	add	r2, r3
 8002082:	8bbb      	ldrh	r3, [r7, #28]
 8002084:	2108      	movs	r1, #8
 8002086:	4618      	mov	r0, r3
 8002088:	f7fe fac4 	bl	8000614 <ExtractBits>
 800208c:	4602      	mov	r2, r0
 800208e:	78bb      	ldrb	r3, [r7, #2]
 8002090:	b2d1      	uxtb	r1, r2
 8002092:	4a98      	ldr	r2, [pc, #608]	; (80022f4 <Init_Msg_extr+0xc40>)
 8002094:	015b      	lsls	r3, r3, #5
 8002096:	4413      	add	r3, r2
 8002098:	330a      	adds	r3, #10
 800209a:	460a      	mov	r2, r1
 800209c:	701a      	strb	r2, [r3, #0]
	//printf("V_NV_Flag          :%u\n",Hitachi_Init_st[Source_Index].V_NV_Flag);
	BITSTUFFINC(8);
 800209e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80020a2:	3308      	adds	r3, #8
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	da00      	bge.n	80020aa <Init_Msg_extr+0x9f6>
 80020a8:	3307      	adds	r3, #7
 80020aa:	10db      	asrs	r3, r3, #3
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	8bfb      	ldrh	r3, [r7, #30]
 80020b0:	4413      	add	r3, r2
 80020b2:	83fb      	strh	r3, [r7, #30]
 80020b4:	8bbb      	ldrh	r3, [r7, #28]
 80020b6:	3308      	adds	r3, #8
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	b21b      	sxth	r3, r3
 80020bc:	425a      	negs	r2, r3
 80020be:	f003 0307 	and.w	r3, r3, #7
 80020c2:	f002 0207 	and.w	r2, r2, #7
 80020c6:	bf58      	it	pl
 80020c8:	4253      	negpl	r3, r2
 80020ca:	b21b      	sxth	r3, r3
 80020cc:	83bb      	strh	r3, [r7, #28]

	Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80020ce:	8bfb      	ldrh	r3, [r7, #30]
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	441a      	add	r2, r3
 80020d4:	8bbb      	ldrh	r3, [r7, #28]
 80020d6:	2108      	movs	r1, #8
 80020d8:	4618      	mov	r0, r3
 80020da:	f7fe fa9b 	bl	8000614 <ExtractBits>
 80020de:	4602      	mov	r2, r0
 80020e0:	78bb      	ldrb	r3, [r7, #2]
 80020e2:	b2d1      	uxtb	r1, r2
 80020e4:	4a82      	ldr	r2, [pc, #520]	; (80022f0 <Init_Msg_extr+0xc3c>)
 80020e6:	011b      	lsls	r3, r3, #4
 80020e8:	4413      	add	r3, r2
 80020ea:	3303      	adds	r3, #3
 80020ec:	460a      	mov	r2, r1
 80020ee:	701a      	strb	r2, [r3, #0]
	//printf("Sz_Bool_V_Data     :%u\n", Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA);
	BITSTUFFINC(8);
 80020f0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80020f4:	3308      	adds	r3, #8
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	da00      	bge.n	80020fc <Init_Msg_extr+0xa48>
 80020fa:	3307      	adds	r3, #7
 80020fc:	10db      	asrs	r3, r3, #3
 80020fe:	b29a      	uxth	r2, r3
 8002100:	8bfb      	ldrh	r3, [r7, #30]
 8002102:	4413      	add	r3, r2
 8002104:	83fb      	strh	r3, [r7, #30]
 8002106:	8bbb      	ldrh	r3, [r7, #28]
 8002108:	3308      	adds	r3, #8
 800210a:	b29b      	uxth	r3, r3
 800210c:	b21b      	sxth	r3, r3
 800210e:	425a      	negs	r2, r3
 8002110:	f003 0307 	and.w	r3, r3, #7
 8002114:	f002 0207 	and.w	r2, r2, #7
 8002118:	bf58      	it	pl
 800211a:	4253      	negpl	r3, r2
 800211c:	b21b      	sxth	r3, r3
 800211e:	83bb      	strh	r3, [r7, #28]




	if(Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA != EI_data.Hitachi_st.Bool_outputs[Source_Index])
 8002120:	78bb      	ldrb	r3, [r7, #2]
 8002122:	4a73      	ldr	r2, [pc, #460]	; (80022f0 <Init_Msg_extr+0xc3c>)
 8002124:	011b      	lsls	r3, r3, #4
 8002126:	4413      	add	r3, r2
 8002128:	3303      	adds	r3, #3
 800212a:	781a      	ldrb	r2, [r3, #0]
 800212c:	78bb      	ldrb	r3, [r7, #2]
 800212e:	4972      	ldr	r1, [pc, #456]	; (80022f8 <Init_Msg_extr+0xc44>)
 8002130:	440b      	add	r3, r1
 8002132:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 8002136:	429a      	cmp	r2, r3
 8002138:	d015      	beq.n	8002166 <Init_Msg_extr+0xab2>
	{
		printf("Vital Inputs Not Matching\n");
 800213a:	4870      	ldr	r0, [pc, #448]	; (80022fc <Init_Msg_extr+0xc48>)
 800213c:	f020 fd7a 	bl	8022c34 <puts>
		printf("Expected Inputs:%u\n",EI_data.Hitachi_st.Bool_outputs[Source_Index]);
 8002140:	78bb      	ldrb	r3, [r7, #2]
 8002142:	4a6d      	ldr	r2, [pc, #436]	; (80022f8 <Init_Msg_extr+0xc44>)
 8002144:	4413      	add	r3, r2
 8002146:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 800214a:	4619      	mov	r1, r3
 800214c:	486c      	ldr	r0, [pc, #432]	; (8002300 <Init_Msg_extr+0xc4c>)
 800214e:	f020 fcd5 	bl	8022afc <iprintf>
		printf("Received Inputs:%u\n",Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA);
 8002152:	78bb      	ldrb	r3, [r7, #2]
 8002154:	4a66      	ldr	r2, [pc, #408]	; (80022f0 <Init_Msg_extr+0xc3c>)
 8002156:	011b      	lsls	r3, r3, #4
 8002158:	4413      	add	r3, r2
 800215a:	3303      	adds	r3, #3
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	4619      	mov	r1, r3
 8002160:	4868      	ldr	r0, [pc, #416]	; (8002304 <Init_Msg_extr+0xc50>)
 8002162:	f020 fccb 	bl	8022afc <iprintf>
	}

	Hitachi_Init_st[Source_Index].Sz_Num_Val_Data = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8002166:	8bfb      	ldrh	r3, [r7, #30]
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	441a      	add	r2, r3
 800216c:	8bbb      	ldrh	r3, [r7, #28]
 800216e:	2108      	movs	r1, #8
 8002170:	4618      	mov	r0, r3
 8002172:	f7fe fa4f 	bl	8000614 <ExtractBits>
 8002176:	4602      	mov	r2, r0
 8002178:	78bb      	ldrb	r3, [r7, #2]
 800217a:	b2d1      	uxtb	r1, r2
 800217c:	4a5d      	ldr	r2, [pc, #372]	; (80022f4 <Init_Msg_extr+0xc40>)
 800217e:	015b      	lsls	r3, r3, #5
 8002180:	4413      	add	r3, r2
 8002182:	330b      	adds	r3, #11
 8002184:	460a      	mov	r2, r1
 8002186:	701a      	strb	r2, [r3, #0]
	//printf("Sz_Num_Val_Data    :%u\n",Hitachi_Init_st[Source_Index].Sz_Num_Val_Data);
	BITSTUFFINC(8);
 8002188:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800218c:	3308      	adds	r3, #8
 800218e:	2b00      	cmp	r3, #0
 8002190:	da00      	bge.n	8002194 <Init_Msg_extr+0xae0>
 8002192:	3307      	adds	r3, #7
 8002194:	10db      	asrs	r3, r3, #3
 8002196:	b29a      	uxth	r2, r3
 8002198:	8bfb      	ldrh	r3, [r7, #30]
 800219a:	4413      	add	r3, r2
 800219c:	83fb      	strh	r3, [r7, #30]
 800219e:	8bbb      	ldrh	r3, [r7, #28]
 80021a0:	3308      	adds	r3, #8
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	b21b      	sxth	r3, r3
 80021a6:	425a      	negs	r2, r3
 80021a8:	f003 0307 	and.w	r3, r3, #7
 80021ac:	f002 0207 	and.w	r2, r2, #7
 80021b0:	bf58      	it	pl
 80021b2:	4253      	negpl	r3, r2
 80021b4:	b21b      	sxth	r3, r3
 80021b6:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Val_Bool_Ops = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80021b8:	8bfb      	ldrh	r3, [r7, #30]
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	441a      	add	r2, r3
 80021be:	8bbb      	ldrh	r3, [r7, #28]
 80021c0:	2108      	movs	r1, #8
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7fe fa26 	bl	8000614 <ExtractBits>
 80021c8:	4602      	mov	r2, r0
 80021ca:	78bb      	ldrb	r3, [r7, #2]
 80021cc:	b2d1      	uxtb	r1, r2
 80021ce:	4a49      	ldr	r2, [pc, #292]	; (80022f4 <Init_Msg_extr+0xc40>)
 80021d0:	015b      	lsls	r3, r3, #5
 80021d2:	4413      	add	r3, r2
 80021d4:	330c      	adds	r3, #12
 80021d6:	460a      	mov	r2, r1
 80021d8:	701a      	strb	r2, [r3, #0]
	//printf("Val_Bool_Ops       :%u\n",Hitachi_Init_st[Source_Index].Val_Bool_Ops);
	BITSTUFFINC(8);
 80021da:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80021de:	3308      	adds	r3, #8
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	da00      	bge.n	80021e6 <Init_Msg_extr+0xb32>
 80021e4:	3307      	adds	r3, #7
 80021e6:	10db      	asrs	r3, r3, #3
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	8bfb      	ldrh	r3, [r7, #30]
 80021ec:	4413      	add	r3, r2
 80021ee:	83fb      	strh	r3, [r7, #30]
 80021f0:	8bbb      	ldrh	r3, [r7, #28]
 80021f2:	3308      	adds	r3, #8
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	b21b      	sxth	r3, r3
 80021f8:	425a      	negs	r2, r3
 80021fa:	f003 0307 	and.w	r3, r3, #7
 80021fe:	f002 0207 	and.w	r2, r2, #7
 8002202:	bf58      	it	pl
 8002204:	4253      	negpl	r3, r2
 8002206:	b21b      	sxth	r3, r3
 8002208:	83bb      	strh	r3, [r7, #28]
	if(Hitachi_Init_st[Source_Index].Val_Bool_Ops != 1)
 800220a:	78bb      	ldrb	r3, [r7, #2]
 800220c:	4a39      	ldr	r2, [pc, #228]	; (80022f4 <Init_Msg_extr+0xc40>)
 800220e:	015b      	lsls	r3, r3, #5
 8002210:	4413      	add	r3, r2
 8002212:	330c      	adds	r3, #12
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d00c      	beq.n	8002234 <Init_Msg_extr+0xb80>
	{
		printf("Transmitted size of Numerical Received:%u\n",Hitachi_Init_st[Source_Index].Val_Bool_Ops);
 800221a:	78bb      	ldrb	r3, [r7, #2]
 800221c:	4a35      	ldr	r2, [pc, #212]	; (80022f4 <Init_Msg_extr+0xc40>)
 800221e:	015b      	lsls	r3, r3, #5
 8002220:	4413      	add	r3, r2
 8002222:	330c      	adds	r3, #12
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	4619      	mov	r1, r3
 8002228:	4837      	ldr	r0, [pc, #220]	; (8002308 <Init_Msg_extr+0xc54>)
 800222a:	f020 fc67 	bl	8022afc <iprintf>
		printf("This Value has to be \"1\"\n");
 800222e:	4837      	ldr	r0, [pc, #220]	; (800230c <Init_Msg_extr+0xc58>)
 8002230:	f020 fd00 	bl	8022c34 <puts>
	}

	Hitachi_Init_st[Source_Index].Val_Num_Ops = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8002234:	8bfb      	ldrh	r3, [r7, #30]
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	441a      	add	r2, r3
 800223a:	8bbb      	ldrh	r3, [r7, #28]
 800223c:	2108      	movs	r1, #8
 800223e:	4618      	mov	r0, r3
 8002240:	f7fe f9e8 	bl	8000614 <ExtractBits>
 8002244:	4602      	mov	r2, r0
 8002246:	78bb      	ldrb	r3, [r7, #2]
 8002248:	b2d1      	uxtb	r1, r2
 800224a:	4a2a      	ldr	r2, [pc, #168]	; (80022f4 <Init_Msg_extr+0xc40>)
 800224c:	015b      	lsls	r3, r3, #5
 800224e:	4413      	add	r3, r2
 8002250:	330d      	adds	r3, #13
 8002252:	460a      	mov	r2, r1
 8002254:	701a      	strb	r2, [r3, #0]
	//printf("Val_Num_Ops        :%u\n",Hitachi_Init_st[Source_Index].Val_Num_Ops);
	BITSTUFFINC(8);
 8002256:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800225a:	3308      	adds	r3, #8
 800225c:	2b00      	cmp	r3, #0
 800225e:	da00      	bge.n	8002262 <Init_Msg_extr+0xbae>
 8002260:	3307      	adds	r3, #7
 8002262:	10db      	asrs	r3, r3, #3
 8002264:	b29a      	uxth	r2, r3
 8002266:	8bfb      	ldrh	r3, [r7, #30]
 8002268:	4413      	add	r3, r2
 800226a:	83fb      	strh	r3, [r7, #30]
 800226c:	8bbb      	ldrh	r3, [r7, #28]
 800226e:	3308      	adds	r3, #8
 8002270:	b29b      	uxth	r3, r3
 8002272:	b21b      	sxth	r3, r3
 8002274:	425a      	negs	r2, r3
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	f002 0207 	and.w	r2, r2, #7
 800227e:	bf58      	it	pl
 8002280:	4253      	negpl	r3, r2
 8002282:	b21b      	sxth	r3, r3
 8002284:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].Init_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[ucByte]);
 8002286:	8bfb      	ldrh	r3, [r7, #30]
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	441a      	add	r2, r3
 800228c:	78bc      	ldrb	r4, [r7, #2]
 800228e:	8bbb      	ldrh	r3, [r7, #28]
 8002290:	2120      	movs	r1, #32
 8002292:	4618      	mov	r0, r3
 8002294:	f7fe f9be 	bl	8000614 <ExtractBits>
 8002298:	4602      	mov	r2, r0
 800229a:	4916      	ldr	r1, [pc, #88]	; (80022f4 <Init_Msg_extr+0xc40>)
 800229c:	0163      	lsls	r3, r4, #5
 800229e:	440b      	add	r3, r1
 80022a0:	331c      	adds	r3, #28
 80022a2:	601a      	str	r2, [r3, #0]
	//printf("Received CRC       :0x%08lX\n",Hitachi_Init_st[Source_Index].Init_CRC);
	BITSTUFFINC(32);
 80022a4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80022a8:	3320      	adds	r3, #32
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	da00      	bge.n	80022b0 <Init_Msg_extr+0xbfc>
 80022ae:	3307      	adds	r3, #7
 80022b0:	10db      	asrs	r3, r3, #3
 80022b2:	b29a      	uxth	r2, r3
 80022b4:	8bfb      	ldrh	r3, [r7, #30]
 80022b6:	4413      	add	r3, r2
 80022b8:	83fb      	strh	r3, [r7, #30]
 80022ba:	8bbb      	ldrh	r3, [r7, #28]
 80022bc:	3320      	adds	r3, #32
 80022be:	b29b      	uxth	r3, r3
 80022c0:	b21b      	sxth	r3, r3
 80022c2:	425a      	negs	r2, r3
 80022c4:	f003 0307 	and.w	r3, r3, #7
 80022c8:	f002 0207 	and.w	r2, r2, #7
 80022cc:	bf58      	it	pl
 80022ce:	4253      	negpl	r3, r2
 80022d0:	b21b      	sxth	r3, r3
 80022d2:	83bb      	strh	r3, [r7, #28]

	//Calc_CRC = CalculateDirectReverseCrc(Buff, Length - 5);

	//printf("\n___________________________________ INIT-MSG ___________________________________\n");
	Send_Init_Msg(Source_Index,Des_Index);
 80022d4:	787a      	ldrb	r2, [r7, #1]
 80022d6:	78bb      	ldrb	r3, [r7, #2]
 80022d8:	4611      	mov	r1, r2
 80022da:	4618      	mov	r0, r3
 80022dc:	f000 f86c 	bl	80023b8 <Send_Init_Msg>

	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_CRC = Recv_CRC;
 80022e0:	78ba      	ldrb	r2, [r7, #2]
 80022e2:	490b      	ldr	r1, [pc, #44]	; (8002310 <Init_Msg_extr+0xc5c>)
 80022e4:	4613      	mov	r3, r2
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	4413      	add	r3, r2
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	e012      	b.n	8002314 <Init_Msg_extr+0xc60>
 80022ee:	bf00      	nop
 80022f0:	200011d0 	.word	0x200011d0
 80022f4:	20001270 	.word	0x20001270
 80022f8:	20000304 	.word	0x20000304
 80022fc:	08024604 	.word	0x08024604
 8002300:	080245cc 	.word	0x080245cc
 8002304:	080245e0 	.word	0x080245e0
 8002308:	08024620 	.word	0x08024620
 800230c:	0802464c 	.word	0x0802464c
 8002310:	20001680 	.word	0x20001680
 8002314:	440b      	add	r3, r1
 8002316:	3314      	adds	r3, #20
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	601a      	str	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_Msg_Type = INIT_MSG;
 800231c:	78ba      	ldrb	r2, [r7, #2]
 800231e:	4923      	ldr	r1, [pc, #140]	; (80023ac <Init_Msg_extr+0xcf8>)
 8002320:	4613      	mov	r3, r2
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	4413      	add	r3, r2
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	440b      	add	r3, r1
 800232a:	3305      	adds	r3, #5
 800232c:	2201      	movs	r2, #1
 800232e:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 8002330:	78ba      	ldrb	r2, [r7, #2]
 8002332:	491e      	ldr	r1, [pc, #120]	; (80023ac <Init_Msg_extr+0xcf8>)
 8002334:	4613      	mov	r3, r2
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	4413      	add	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	440b      	add	r3, r1
 800233e:	78ba      	ldrb	r2, [r7, #2]
 8002340:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 8002342:	78ba      	ldrb	r2, [r7, #2]
 8002344:	4919      	ldr	r1, [pc, #100]	; (80023ac <Init_Msg_extr+0xcf8>)
 8002346:	4613      	mov	r3, r2
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	4413      	add	r3, r2
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	440b      	add	r3, r1
 8002350:	3301      	adds	r3, #1
 8002352:	2201      	movs	r2, #1
 8002354:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8002356:	2218      	movs	r2, #24
 8002358:	2100      	movs	r1, #0
 800235a:	4815      	ldr	r0, [pc, #84]	; (80023b0 <Init_Msg_extr+0xcfc>)
 800235c:	f020 fae6 	bl	802292c <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 8002360:	78ba      	ldrb	r2, [r7, #2]
 8002362:	4613      	mov	r3, r2
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	4413      	add	r3, r2
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	4a10      	ldr	r2, [pc, #64]	; (80023ac <Init_Msg_extr+0xcf8>)
 800236c:	4413      	add	r3, r2
 800236e:	2218      	movs	r2, #24
 8002370:	4619      	mov	r1, r3
 8002372:	480f      	ldr	r0, [pc, #60]	; (80023b0 <Init_Msg_extr+0xcfc>)
 8002374:	f020 fab2 	bl	80228dc <memcpy>


#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING); //for Immediate sharing of VItal CRC Init Value.
 8002378:	f240 2001 	movw	r0, #513	; 0x201
 800237c:	f00d fb84 	bl	800fa88 <TransmitCanPkt>

#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING); //for Immediate sharing of VItal CRC Init Value.
#endif

	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 8002380:	78ba      	ldrb	r2, [r7, #2]
 8002382:	490a      	ldr	r1, [pc, #40]	; (80023ac <Init_Msg_extr+0xcf8>)
 8002384:	4613      	mov	r3, r2
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	4413      	add	r3, r2
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	440b      	add	r3, r1
 800238e:	3301      	adds	r3, #1
 8002390:	2200      	movs	r2, #0
 8002392:	701a      	strb	r2, [r3, #0]

	Self_Sharing_CAN_Clk[Source_Index] = HAL_GetTick();
 8002394:	78bc      	ldrb	r4, [r7, #2]
 8002396:	f013 fba7 	bl	8015ae8 <HAL_GetTick>
 800239a:	4603      	mov	r3, r0
 800239c:	4a05      	ldr	r2, [pc, #20]	; (80023b4 <Init_Msg_extr+0xd00>)
 800239e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80023a2:	e000      	b.n	80023a6 <Init_Msg_extr+0xcf2>
			return;
 80023a4:	bf00      	nop
}
 80023a6:	3724      	adds	r7, #36	; 0x24
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd90      	pop	{r4, r7, pc}
 80023ac:	20001680 	.word	0x20001680
 80023b0:	20001860 	.word	0x20001860
 80023b4:	20000e50 	.word	0x20000e50

080023b8 <Send_Init_Msg>:

void Send_Init_Msg(uint8_t Source_Index,uint8_t Des_Index)
{
 80023b8:	b590      	push	{r4, r7, lr}
 80023ba:	b097      	sub	sp, #92	; 0x5c
 80023bc:	af00      	add	r7, sp, #0
 80023be:	4603      	mov	r3, r0
 80023c0:	460a      	mov	r2, r1
 80023c2:	71fb      	strb	r3, [r7, #7]
 80023c4:	4613      	mov	r3, r2
 80023c6:	71bb      	strb	r3, [r7, #6]

	uint8_t Transmit_Buff[60] = {0,};
 80023c8:	2300      	movs	r3, #0
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	f107 0310 	add.w	r3, r7, #16
 80023d0:	2238      	movs	r2, #56	; 0x38
 80023d2:	2100      	movs	r1, #0
 80023d4:	4618      	mov	r0, r3
 80023d6:	f020 faa9 	bl	802292c <memset>
	uint32_t Calc_CRC = 0;
 80023da:	2300      	movs	r3, #0
 80023dc:	653b      	str	r3, [r7, #80]	; 0x50

	BITSTUFFINIT(0, 0);
 80023de:	2300      	movs	r3, #0
 80023e0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80023e4:	2300      	movs	r3, #0
 80023e6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], 0xf4);
 80023ea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023ee:	f107 020c 	add.w	r2, r7, #12
 80023f2:	441a      	add	r2, r3
 80023f4:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80023f8:	23f4      	movs	r3, #244	; 0xf4
 80023fa:	2108      	movs	r1, #8
 80023fc:	f7fe f996 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8002400:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002404:	3308      	adds	r3, #8
 8002406:	2b00      	cmp	r3, #0
 8002408:	da00      	bge.n	800240c <Send_Init_Msg+0x54>
 800240a:	3307      	adds	r3, #7
 800240c:	10db      	asrs	r3, r3, #3
 800240e:	b29a      	uxth	r2, r3
 8002410:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002414:	4413      	add	r3, r2
 8002416:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800241a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800241e:	3308      	adds	r3, #8
 8002420:	b29b      	uxth	r3, r3
 8002422:	b21b      	sxth	r3, r3
 8002424:	425a      	negs	r2, r3
 8002426:	f003 0307 	and.w	r3, r3, #7
 800242a:	f002 0207 	and.w	r2, r2, #7
 800242e:	bf58      	it	pl
 8002430:	4253      	negpl	r3, r2
 8002432:	b21b      	sxth	r3, r3
 8002434:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8002438:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800243c:	f107 020c 	add.w	r2, r7, #12
 8002440:	441a      	add	r2, r3
 8002442:	79fb      	ldrb	r3, [r7, #7]
 8002444:	4977      	ldr	r1, [pc, #476]	; (8002624 <Send_Init_Msg+0x26c>)
 8002446:	3366      	adds	r3, #102	; 0x66
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	440b      	add	r3, r1
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002452:	2110      	movs	r1, #16
 8002454:	f7fe f96a 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002458:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800245c:	3310      	adds	r3, #16
 800245e:	2b00      	cmp	r3, #0
 8002460:	da00      	bge.n	8002464 <Send_Init_Msg+0xac>
 8002462:	3307      	adds	r3, #7
 8002464:	10db      	asrs	r3, r3, #3
 8002466:	b29a      	uxth	r2, r3
 8002468:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800246c:	4413      	add	r3, r2
 800246e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002472:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002476:	3310      	adds	r3, #16
 8002478:	b29b      	uxth	r3, r3
 800247a:	b21b      	sxth	r3, r3
 800247c:	425a      	negs	r2, r3
 800247e:	f003 0307 	and.w	r3, r3, #7
 8002482:	f002 0207 	and.w	r2, r2, #7
 8002486:	bf58      	it	pl
 8002488:	4253      	negpl	r3, r2
 800248a:	b21b      	sxth	r3, r3
 800248c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]);
 8002490:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002494:	f107 020c 	add.w	r2, r7, #12
 8002498:	441a      	add	r2, r3
 800249a:	79fb      	ldrb	r3, [r7, #7]
 800249c:	4961      	ldr	r1, [pc, #388]	; (8002624 <Send_Init_Msg+0x26c>)
 800249e:	3370      	adds	r3, #112	; 0x70
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	440b      	add	r3, r1
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80024aa:	2110      	movs	r1, #16
 80024ac:	f7fe f93e 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 80024b0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80024b4:	3310      	adds	r3, #16
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	da00      	bge.n	80024bc <Send_Init_Msg+0x104>
 80024ba:	3307      	adds	r3, #7
 80024bc:	10db      	asrs	r3, r3, #3
 80024be:	b29a      	uxth	r2, r3
 80024c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024c4:	4413      	add	r3, r2
 80024c6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80024ca:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80024ce:	3310      	adds	r3, #16
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	b21b      	sxth	r3, r3
 80024d4:	425a      	negs	r2, r3
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	f002 0207 	and.w	r2, r2, #7
 80024de:	bf58      	it	pl
 80024e0:	4253      	negpl	r3, r2
 80024e2:	b21b      	sxth	r3, r3
 80024e4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( (CHECKFLAG(2,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 80024e8:	4b4f      	ldr	r3, [pc, #316]	; (8002628 <Send_Init_Msg+0x270>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	089b      	lsrs	r3, r3, #2
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d031      	beq.n	800255a <Send_Init_Msg+0x1a2>
	{
		if(Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index)
 80024f6:	4b4c      	ldr	r3, [pc, #304]	; (8002628 <Send_Init_Msg+0x270>)
 80024f8:	791b      	ldrb	r3, [r3, #4]
 80024fa:	79fa      	ldrb	r2, [r7, #7]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d137      	bne.n	8002570 <Send_Init_Msg+0x1b8>
		{
			uint8_t Rand_Number  = 0;
 8002500:	2300      	movs	r3, #0
 8002502:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
#ifdef STM_32
			Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 200 )+1;
 8002506:	4849      	ldr	r0, [pc, #292]	; (800262c <Send_Init_Msg+0x274>)
 8002508:	f017 ffa0 	bl	801a44c <HAL_RNG_GetRandomNumber>
 800250c:	4602      	mov	r2, r0
 800250e:	4b48      	ldr	r3, [pc, #288]	; (8002630 <Send_Init_Msg+0x278>)
 8002510:	fba3 1302 	umull	r1, r3, r3, r2
 8002514:	099b      	lsrs	r3, r3, #6
 8002516:	21c8      	movs	r1, #200	; 0xc8
 8002518:	fb01 f303 	mul.w	r3, r1, r3
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	b2db      	uxtb	r3, r3
 8002520:	3301      	adds	r3, #1
 8002522:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
#endif
			printf("Injected TX Sequence value failure\n");
 8002526:	4843      	ldr	r0, [pc, #268]	; (8002634 <Send_Init_Msg+0x27c>)
 8002528:	f020 fb84 	bl	8022c34 <puts>
			printf("Actual   TX Sequence value:%u\n",0);
 800252c:	2100      	movs	r1, #0
 800252e:	4842      	ldr	r0, [pc, #264]	; (8002638 <Send_Init_Msg+0x280>)
 8002530:	f020 fae4 	bl	8022afc <iprintf>
			printf("Injected TX Sequence value:%u\n",Rand_Number);
 8002534:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002538:	4619      	mov	r1, r3
 800253a:	4840      	ldr	r0, [pc, #256]	; (800263c <Send_Init_Msg+0x284>)
 800253c:	f020 fade 	bl	8022afc <iprintf>
			InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number); // Rx Seq Number
 8002540:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002544:	f107 020c 	add.w	r2, r7, #12
 8002548:	441a      	add	r2, r3
 800254a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800254e:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002552:	2108      	movs	r1, #8
 8002554:	f7fe f8ea 	bl	800072c <InsertBits>
 8002558:	e00a      	b.n	8002570 <Send_Init_Msg+0x1b8>
			//Last Received Packet Tx_seq number is our Rx_Seq Number for VITAL_Message we don't Increment Sequence Number.
		}
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], 0x00);
 800255a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800255e:	f107 020c 	add.w	r2, r7, #12
 8002562:	441a      	add	r2, r3
 8002564:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002568:	2300      	movs	r3, #0
 800256a:	2108      	movs	r1, #8
 800256c:	f7fe f8de 	bl	800072c <InsertBits>
	}
	BITSTUFFINC(8);
 8002570:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002574:	3308      	adds	r3, #8
 8002576:	2b00      	cmp	r3, #0
 8002578:	da00      	bge.n	800257c <Send_Init_Msg+0x1c4>
 800257a:	3307      	adds	r3, #7
 800257c:	10db      	asrs	r3, r3, #3
 800257e:	b29a      	uxth	r2, r3
 8002580:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002584:	4413      	add	r3, r2
 8002586:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800258a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800258e:	3308      	adds	r3, #8
 8002590:	b29b      	uxth	r3, r3
 8002592:	b21b      	sxth	r3, r3
 8002594:	425a      	negs	r2, r3
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	f002 0207 	and.w	r2, r2, #7
 800259e:	bf58      	it	pl
 80025a0:	4253      	negpl	r3, r2
 80025a2:	b21b      	sxth	r3, r3
 80025a4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c



	if( (CHECKFLAG(3,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 80025a8:	4b1f      	ldr	r3, [pc, #124]	; (8002628 <Send_Init_Msg+0x270>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	08db      	lsrs	r3, r3, #3
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d04c      	beq.n	8002650 <Send_Init_Msg+0x298>
	{
		if(Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index)
 80025b6:	4b1c      	ldr	r3, [pc, #112]	; (8002628 <Send_Init_Msg+0x270>)
 80025b8:	791b      	ldrb	r3, [r3, #4]
 80025ba:	79fa      	ldrb	r2, [r7, #7]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d165      	bne.n	800268c <Send_Init_Msg+0x2d4>
		{
			uint8_t Rand_Number  = 0;
 80025c0:	2300      	movs	r3, #0
 80025c2:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
#ifdef STM_32
			Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 200 );
 80025c6:	4819      	ldr	r0, [pc, #100]	; (800262c <Send_Init_Msg+0x274>)
 80025c8:	f017 ff40 	bl	801a44c <HAL_RNG_GetRandomNumber>
 80025cc:	4602      	mov	r2, r0
 80025ce:	4b18      	ldr	r3, [pc, #96]	; (8002630 <Send_Init_Msg+0x278>)
 80025d0:	fba3 1302 	umull	r1, r3, r3, r2
 80025d4:	099b      	lsrs	r3, r3, #6
 80025d6:	21c8      	movs	r1, #200	; 0xc8
 80025d8:	fb01 f303 	mul.w	r3, r1, r3
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
#endif
			printf("Injected RX Sequence value failure\n");
 80025e2:	4817      	ldr	r0, [pc, #92]	; (8002640 <Send_Init_Msg+0x288>)
 80025e4:	f020 fb26 	bl	8022c34 <puts>
			printf("Actual   RX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Rx_Seq);
 80025e8:	79fb      	ldrb	r3, [r7, #7]
 80025ea:	4a16      	ldr	r2, [pc, #88]	; (8002644 <Send_Init_Msg+0x28c>)
 80025ec:	011b      	lsls	r3, r3, #4
 80025ee:	4413      	add	r3, r2
 80025f0:	3302      	adds	r3, #2
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	4619      	mov	r1, r3
 80025f6:	4814      	ldr	r0, [pc, #80]	; (8002648 <Send_Init_Msg+0x290>)
 80025f8:	f020 fa80 	bl	8022afc <iprintf>
			printf("Injected RX Sequence value:%u\n",Rand_Number);
 80025fc:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002600:	4619      	mov	r1, r3
 8002602:	4812      	ldr	r0, [pc, #72]	; (800264c <Send_Init_Msg+0x294>)
 8002604:	f020 fa7a 	bl	8022afc <iprintf>
			InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number); // Rx Seq Number
 8002608:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800260c:	f107 020c 	add.w	r2, r7, #12
 8002610:	441a      	add	r2, r3
 8002612:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002616:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800261a:	2108      	movs	r1, #8
 800261c:	f7fe f886 	bl	800072c <InsertBits>
 8002620:	e034      	b.n	800268c <Send_Init_Msg+0x2d4>
 8002622:	bf00      	nop
 8002624:	20000304 	.word	0x20000304
 8002628:	20001968 	.word	0x20001968
 800262c:	20009d2c 	.word	0x20009d2c
 8002630:	51eb851f 	.word	0x51eb851f
 8002634:	08024668 	.word	0x08024668
 8002638:	0802468c 	.word	0x0802468c
 800263c:	080246ac 	.word	0x080246ac
 8002640:	080246cc 	.word	0x080246cc
 8002644:	200011d0 	.word	0x200011d0
 8002648:	080246f0 	.word	0x080246f0
 800264c:	08024710 	.word	0x08024710

	}
	else
	{
		// Hitachi_prms_st[Source_Index].Rx_Seq = Hitachi_prms_st[Source_Index].Seq_Init_Value + 1;
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], ++Hitachi_prms_st[Source_Index].Rx_Seq);
 8002650:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002654:	f107 020c 	add.w	r2, r7, #12
 8002658:	18d1      	adds	r1, r2, r3
 800265a:	79fb      	ldrb	r3, [r7, #7]
 800265c:	48c4      	ldr	r0, [pc, #784]	; (8002970 <Send_Init_Msg+0x5b8>)
 800265e:	011a      	lsls	r2, r3, #4
 8002660:	4402      	add	r2, r0
 8002662:	3202      	adds	r2, #2
 8002664:	7812      	ldrb	r2, [r2, #0]
 8002666:	3201      	adds	r2, #1
 8002668:	b2d4      	uxtb	r4, r2
 800266a:	48c1      	ldr	r0, [pc, #772]	; (8002970 <Send_Init_Msg+0x5b8>)
 800266c:	011a      	lsls	r2, r3, #4
 800266e:	4402      	add	r2, r0
 8002670:	3202      	adds	r2, #2
 8002672:	4620      	mov	r0, r4
 8002674:	7010      	strb	r0, [r2, #0]
 8002676:	4abe      	ldr	r2, [pc, #760]	; (8002970 <Send_Init_Msg+0x5b8>)
 8002678:	011b      	lsls	r3, r3, #4
 800267a:	4413      	add	r3, r2
 800267c:	3302      	adds	r3, #2
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002684:	460a      	mov	r2, r1
 8002686:	2108      	movs	r1, #8
 8002688:	f7fe f850 	bl	800072c <InsertBits>
	}
	BITSTUFFINC(8);
 800268c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002690:	3308      	adds	r3, #8
 8002692:	2b00      	cmp	r3, #0
 8002694:	da00      	bge.n	8002698 <Send_Init_Msg+0x2e0>
 8002696:	3307      	adds	r3, #7
 8002698:	10db      	asrs	r3, r3, #3
 800269a:	b29a      	uxth	r2, r3
 800269c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026a0:	4413      	add	r3, r2
 80026a2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80026a6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80026aa:	3308      	adds	r3, #8
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	b21b      	sxth	r3, r3
 80026b0:	425a      	negs	r2, r3
 80026b2:	f003 0307 	and.w	r3, r3, #7
 80026b6:	f002 0207 	and.w	r2, r2, #7
 80026ba:	bf58      	it	pl
 80026bc:	4253      	negpl	r3, r2
 80026be:	b21b      	sxth	r3, r3
 80026c0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], INIT_MSG);
 80026c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026c8:	f107 020c 	add.w	r2, r7, #12
 80026cc:	441a      	add	r2, r3
 80026ce:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80026d2:	2301      	movs	r3, #1
 80026d4:	2108      	movs	r1, #8
 80026d6:	f7fe f829 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80026da:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80026de:	3308      	adds	r3, #8
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	da00      	bge.n	80026e6 <Send_Init_Msg+0x32e>
 80026e4:	3307      	adds	r3, #7
 80026e6:	10db      	asrs	r3, r3, #3
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026ee:	4413      	add	r3, r2
 80026f0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80026f4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80026f8:	3308      	adds	r3, #8
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	b21b      	sxth	r3, r3
 80026fe:	425a      	negs	r2, r3
 8002700:	f003 0307 	and.w	r3, r3, #7
 8002704:	f002 0207 	and.w	r2, r2, #7
 8002708:	bf58      	it	pl
 800270a:	4253      	negpl	r3, r2
 800270c:	b21b      	sxth	r3, r3
 800270e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	Hitachi_prms_st[Source_Index].Tx_Msg_Status_Flag = 0x0005;
 8002712:	79fb      	ldrb	r3, [r7, #7]
 8002714:	4a96      	ldr	r2, [pc, #600]	; (8002970 <Send_Init_Msg+0x5b8>)
 8002716:	011b      	lsls	r3, r3, #4
 8002718:	4413      	add	r3, r2
 800271a:	3306      	adds	r3, #6
 800271c:	2205      	movs	r2, #5
 800271e:	801a      	strh	r2, [r3, #0]
	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Msg_Status_Flag);
 8002720:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002724:	f107 020c 	add.w	r2, r7, #12
 8002728:	441a      	add	r2, r3
 800272a:	79fb      	ldrb	r3, [r7, #7]
 800272c:	4990      	ldr	r1, [pc, #576]	; (8002970 <Send_Init_Msg+0x5b8>)
 800272e:	011b      	lsls	r3, r3, #4
 8002730:	440b      	add	r3, r1
 8002732:	3306      	adds	r3, #6
 8002734:	881b      	ldrh	r3, [r3, #0]
 8002736:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800273a:	2110      	movs	r1, #16
 800273c:	f7fd fff6 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002740:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002744:	3310      	adds	r3, #16
 8002746:	2b00      	cmp	r3, #0
 8002748:	da00      	bge.n	800274c <Send_Init_Msg+0x394>
 800274a:	3307      	adds	r3, #7
 800274c:	10db      	asrs	r3, r3, #3
 800274e:	b29a      	uxth	r2, r3
 8002750:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002754:	4413      	add	r3, r2
 8002756:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800275a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800275e:	3310      	adds	r3, #16
 8002760:	b29b      	uxth	r3, r3
 8002762:	b21b      	sxth	r3, r3
 8002764:	425a      	negs	r2, r3
 8002766:	f003 0307 	and.w	r3, r3, #7
 800276a:	f002 0207 	and.w	r2, r2, #7
 800276e:	bf58      	it	pl
 8002770:	4253      	negpl	r3, r2
 8002772:	b21b      	sxth	r3, r3
 8002774:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], INIT_MSG_SIZE);
 8002778:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800277c:	f107 020c 	add.w	r2, r7, #12
 8002780:	441a      	add	r2, r3
 8002782:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002786:	2317      	movs	r3, #23
 8002788:	2108      	movs	r1, #8
 800278a:	f7fd ffcf 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 800278e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002792:	3308      	adds	r3, #8
 8002794:	2b00      	cmp	r3, #0
 8002796:	da00      	bge.n	800279a <Send_Init_Msg+0x3e2>
 8002798:	3307      	adds	r3, #7
 800279a:	10db      	asrs	r3, r3, #3
 800279c:	b29a      	uxth	r2, r3
 800279e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027a2:	4413      	add	r3, r2
 80027a4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80027a8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80027ac:	3308      	adds	r3, #8
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	b21b      	sxth	r3, r3
 80027b2:	425a      	negs	r2, r3
 80027b4:	f003 0307 	and.w	r3, r3, #7
 80027b8:	f002 0207 	and.w	r2, r2, #7
 80027bc:	bf58      	it	pl
 80027be:	4253      	negpl	r3, r2
 80027c0:	b21b      	sxth	r3, r3
 80027c2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_PCOL_VER);
 80027c6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027ca:	f107 020c 	add.w	r2, r7, #12
 80027ce:	441a      	add	r2, r3
 80027d0:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80027d4:	2301      	movs	r3, #1
 80027d6:	2110      	movs	r1, #16
 80027d8:	f7fd ffa8 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 80027dc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80027e0:	3310      	adds	r3, #16
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	da00      	bge.n	80027e8 <Send_Init_Msg+0x430>
 80027e6:	3307      	adds	r3, #7
 80027e8:	10db      	asrs	r3, r3, #3
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027f0:	4413      	add	r3, r2
 80027f2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80027f6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80027fa:	3310      	adds	r3, #16
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	b21b      	sxth	r3, r3
 8002800:	425a      	negs	r2, r3
 8002802:	f003 0307 	and.w	r3, r3, #7
 8002806:	f002 0207 	and.w	r2, r2, #7
 800280a:	bf58      	it	pl
 800280c:	4253      	negpl	r3, r2
 800280e:	b21b      	sxth	r3, r3
 8002810:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	//As Execuctive version is 6Bytes we divided in two parts as 32-bit AND 16-bit
	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], EIPC_EXE_VER_1);
 8002814:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002818:	f107 020c 	add.w	r2, r7, #12
 800281c:	441a      	add	r2, r3
 800281e:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002822:	4b54      	ldr	r3, [pc, #336]	; (8002974 <Send_Init_Msg+0x5bc>)
 8002824:	2120      	movs	r1, #32
 8002826:	f7fd ff81 	bl	800072c <InsertBits>
	BITSTUFFINC(32);
 800282a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800282e:	3320      	adds	r3, #32
 8002830:	2b00      	cmp	r3, #0
 8002832:	da00      	bge.n	8002836 <Send_Init_Msg+0x47e>
 8002834:	3307      	adds	r3, #7
 8002836:	10db      	asrs	r3, r3, #3
 8002838:	b29a      	uxth	r2, r3
 800283a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800283e:	4413      	add	r3, r2
 8002840:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002844:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002848:	3320      	adds	r3, #32
 800284a:	b29b      	uxth	r3, r3
 800284c:	b21b      	sxth	r3, r3
 800284e:	425a      	negs	r2, r3
 8002850:	f003 0307 	and.w	r3, r3, #7
 8002854:	f002 0207 	and.w	r2, r2, #7
 8002858:	bf58      	it	pl
 800285a:	4253      	negpl	r3, r2
 800285c:	b21b      	sxth	r3, r3
 800285e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_EXE_VER_2);
 8002862:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002866:	f107 020c 	add.w	r2, r7, #12
 800286a:	441a      	add	r2, r3
 800286c:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002870:	2300      	movs	r3, #0
 8002872:	2110      	movs	r1, #16
 8002874:	f7fd ff5a 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002878:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800287c:	3310      	adds	r3, #16
 800287e:	2b00      	cmp	r3, #0
 8002880:	da00      	bge.n	8002884 <Send_Init_Msg+0x4cc>
 8002882:	3307      	adds	r3, #7
 8002884:	10db      	asrs	r3, r3, #3
 8002886:	b29a      	uxth	r2, r3
 8002888:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800288c:	4413      	add	r3, r2
 800288e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002892:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002896:	3310      	adds	r3, #16
 8002898:	b29b      	uxth	r3, r3
 800289a:	b21b      	sxth	r3, r3
 800289c:	425a      	negs	r2, r3
 800289e:	f003 0307 	and.w	r3, r3, #7
 80028a2:	f002 0207 	and.w	r2, r2, #7
 80028a6:	bf58      	it	pl
 80028a8:	4253      	negpl	r3, r2
 80028aa:	b21b      	sxth	r3, r3
 80028ac:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_APP_COMP_STAMP);
 80028b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80028b4:	f107 020c 	add.w	r2, r7, #12
 80028b8:	441a      	add	r2, r3
 80028ba:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80028be:	2300      	movs	r3, #0
 80028c0:	2110      	movs	r1, #16
 80028c2:	f7fd ff33 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 80028c6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80028ca:	3310      	adds	r3, #16
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	da00      	bge.n	80028d2 <Send_Init_Msg+0x51a>
 80028d0:	3307      	adds	r3, #7
 80028d2:	10db      	asrs	r3, r3, #3
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80028da:	4413      	add	r3, r2
 80028dc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80028e0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80028e4:	3310      	adds	r3, #16
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	b21b      	sxth	r3, r3
 80028ea:	425a      	negs	r2, r3
 80028ec:	f003 0307 	and.w	r3, r3, #7
 80028f0:	f002 0207 	and.w	r2, r2, #7
 80028f4:	bf58      	it	pl
 80028f6:	4253      	negpl	r3, r2
 80028f8:	b21b      	sxth	r3, r3
 80028fa:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_EXE_IDEN_CRC);
 80028fe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002902:	f107 020c 	add.w	r2, r7, #12
 8002906:	441a      	add	r2, r3
 8002908:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800290c:	2300      	movs	r3, #0
 800290e:	2110      	movs	r1, #16
 8002910:	f7fd ff0c 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002914:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002918:	3310      	adds	r3, #16
 800291a:	2b00      	cmp	r3, #0
 800291c:	da00      	bge.n	8002920 <Send_Init_Msg+0x568>
 800291e:	3307      	adds	r3, #7
 8002920:	10db      	asrs	r3, r3, #3
 8002922:	b29a      	uxth	r2, r3
 8002924:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002928:	4413      	add	r3, r2
 800292a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800292e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002932:	3310      	adds	r3, #16
 8002934:	b29b      	uxth	r3, r3
 8002936:	b21b      	sxth	r3, r3
 8002938:	425a      	negs	r2, r3
 800293a:	f003 0307 	and.w	r3, r3, #7
 800293e:	f002 0207 	and.w	r2, r2, #7
 8002942:	bf58      	it	pl
 8002944:	4253      	negpl	r3, r2
 8002946:	b21b      	sxth	r3, r3
 8002948:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_APP_IDEN_CRC);
 800294c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002950:	f107 020c 	add.w	r2, r7, #12
 8002954:	441a      	add	r2, r3
 8002956:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800295a:	2300      	movs	r3, #0
 800295c:	2110      	movs	r1, #16
 800295e:	f7fd fee5 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002962:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002966:	3310      	adds	r3, #16
 8002968:	2b00      	cmp	r3, #0
 800296a:	da05      	bge.n	8002978 <Send_Init_Msg+0x5c0>
 800296c:	3307      	adds	r3, #7
 800296e:	e003      	b.n	8002978 <Send_Init_Msg+0x5c0>
 8002970:	200011d0 	.word	0x200011d0
 8002974:	33e232af 	.word	0x33e232af
 8002978:	10db      	asrs	r3, r3, #3
 800297a:	b29a      	uxth	r2, r3
 800297c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002980:	4413      	add	r3, r2
 8002982:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002986:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800298a:	3310      	adds	r3, #16
 800298c:	b29b      	uxth	r3, r3
 800298e:	b21b      	sxth	r3, r3
 8002990:	425a      	negs	r2, r3
 8002992:	f003 0307 	and.w	r3, r3, #7
 8002996:	f002 0207 	and.w	r2, r2, #7
 800299a:	bf58      	it	pl
 800299c:	4253      	negpl	r3, r2
 800299e:	b21b      	sxth	r3, r3
 80029a0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	//we are sending VITAL CRC INIT VALUE by adding 1 to the Vital_CRC_Init_Value in INIT_MESSAGE from Hitachi
	if(Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value >= 0xfffff0)
 80029a4:	79fb      	ldrb	r3, [r7, #7]
 80029a6:	4ab2      	ldr	r2, [pc, #712]	; (8002c70 <Send_Init_Msg+0x8b8>)
 80029a8:	011b      	lsls	r3, r3, #4
 80029aa:	4413      	add	r3, r2
 80029ac:	3308      	adds	r3, #8
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4ab0      	ldr	r2, [pc, #704]	; (8002c74 <Send_Init_Msg+0x8bc>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d90d      	bls.n	80029d2 <Send_Init_Msg+0x61a>
	{
		Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value - 1;
 80029b6:	79fb      	ldrb	r3, [r7, #7]
 80029b8:	4aad      	ldr	r2, [pc, #692]	; (8002c70 <Send_Init_Msg+0x8b8>)
 80029ba:	011b      	lsls	r3, r3, #4
 80029bc:	4413      	add	r3, r2
 80029be:	3308      	adds	r3, #8
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	79fb      	ldrb	r3, [r7, #7]
 80029c4:	3a01      	subs	r2, #1
 80029c6:	49aa      	ldr	r1, [pc, #680]	; (8002c70 <Send_Init_Msg+0x8b8>)
 80029c8:	011b      	lsls	r3, r3, #4
 80029ca:	440b      	add	r3, r1
 80029cc:	330c      	adds	r3, #12
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	e00c      	b.n	80029ec <Send_Init_Msg+0x634>
	}
	else
	{
		Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value + 1;
 80029d2:	79fb      	ldrb	r3, [r7, #7]
 80029d4:	4aa6      	ldr	r2, [pc, #664]	; (8002c70 <Send_Init_Msg+0x8b8>)
 80029d6:	011b      	lsls	r3, r3, #4
 80029d8:	4413      	add	r3, r2
 80029da:	3308      	adds	r3, #8
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	79fb      	ldrb	r3, [r7, #7]
 80029e0:	3201      	adds	r2, #1
 80029e2:	49a3      	ldr	r1, [pc, #652]	; (8002c70 <Send_Init_Msg+0x8b8>)
 80029e4:	011b      	lsls	r3, r3, #4
 80029e6:	440b      	add	r3, r1
 80029e8:	330c      	adds	r3, #12
 80029ea:	601a      	str	r2, [r3, #0]
	}

	InsertBits(ucBit, 24, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 80029ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029f0:	f107 020c 	add.w	r2, r7, #12
 80029f4:	441a      	add	r2, r3
 80029f6:	79fb      	ldrb	r3, [r7, #7]
 80029f8:	499d      	ldr	r1, [pc, #628]	; (8002c70 <Send_Init_Msg+0x8b8>)
 80029fa:	011b      	lsls	r3, r3, #4
 80029fc:	440b      	add	r3, r1
 80029fe:	330c      	adds	r3, #12
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002a06:	2118      	movs	r1, #24
 8002a08:	f7fd fe90 	bl	800072c <InsertBits>
	Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 8002a0c:	79fb      	ldrb	r3, [r7, #7]
 8002a0e:	79fa      	ldrb	r2, [r7, #7]
 8002a10:	4997      	ldr	r1, [pc, #604]	; (8002c70 <Send_Init_Msg+0x8b8>)
 8002a12:	011b      	lsls	r3, r3, #4
 8002a14:	440b      	add	r3, r1
 8002a16:	330c      	adds	r3, #12
 8002a18:	6819      	ldr	r1, [r3, #0]
 8002a1a:	4897      	ldr	r0, [pc, #604]	; (8002c78 <Send_Init_Msg+0x8c0>)
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	4413      	add	r3, r2
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	4403      	add	r3, r0
 8002a26:	330c      	adds	r3, #12
 8002a28:	6019      	str	r1, [r3, #0]
	BITSTUFFINC(24);
 8002a2a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002a2e:	3318      	adds	r3, #24
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	da00      	bge.n	8002a36 <Send_Init_Msg+0x67e>
 8002a34:	3307      	adds	r3, #7
 8002a36:	10db      	asrs	r3, r3, #3
 8002a38:	b29a      	uxth	r2, r3
 8002a3a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a3e:	4413      	add	r3, r2
 8002a40:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002a44:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002a48:	3318      	adds	r3, #24
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	b21b      	sxth	r3, r3
 8002a4e:	425a      	negs	r2, r3
 8002a50:	f003 0307 	and.w	r3, r3, #7
 8002a54:	f002 0207 	and.w	r2, r2, #7
 8002a58:	bf58      	it	pl
 8002a5a:	4253      	negpl	r3, r2
 8002a5c:	b21b      	sxth	r3, r3
 8002a5e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	++Self_Seq_Init_Value[Source_Index];
 8002a62:	79fb      	ldrb	r3, [r7, #7]
 8002a64:	4a85      	ldr	r2, [pc, #532]	; (8002c7c <Send_Init_Msg+0x8c4>)
 8002a66:	5cd2      	ldrb	r2, [r2, r3]
 8002a68:	3201      	adds	r2, #1
 8002a6a:	b2d1      	uxtb	r1, r2
 8002a6c:	4a83      	ldr	r2, [pc, #524]	; (8002c7c <Send_Init_Msg+0x8c4>)
 8002a6e:	54d1      	strb	r1, [r2, r3]
	if((Self_Seq_Init_Value[Source_Index]>= 180) || (Self_Seq_Init_Value[Source_Index] == 0) )
 8002a70:	79fb      	ldrb	r3, [r7, #7]
 8002a72:	4a82      	ldr	r2, [pc, #520]	; (8002c7c <Send_Init_Msg+0x8c4>)
 8002a74:	5cd3      	ldrb	r3, [r2, r3]
 8002a76:	2bb3      	cmp	r3, #179	; 0xb3
 8002a78:	d804      	bhi.n	8002a84 <Send_Init_Msg+0x6cc>
 8002a7a:	79fb      	ldrb	r3, [r7, #7]
 8002a7c:	4a7f      	ldr	r2, [pc, #508]	; (8002c7c <Send_Init_Msg+0x8c4>)
 8002a7e:	5cd3      	ldrb	r3, [r2, r3]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d103      	bne.n	8002a8c <Send_Init_Msg+0x6d4>
	{
		Self_Seq_Init_Value[Source_Index] = 10;
 8002a84:	79fb      	ldrb	r3, [r7, #7]
 8002a86:	4a7d      	ldr	r2, [pc, #500]	; (8002c7c <Send_Init_Msg+0x8c4>)
 8002a88:	210a      	movs	r1, #10
 8002a8a:	54d1      	strb	r1, [r2, r3]
	}

	//printf("\nSelf Seq Init Value:%u\n",Self_Seq_Init_Value[Source_Index]);
	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Self_Seq_Init_Value[Source_Index]);
 8002a8c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a90:	f107 020c 	add.w	r2, r7, #12
 8002a94:	441a      	add	r2, r3
 8002a96:	79fb      	ldrb	r3, [r7, #7]
 8002a98:	4978      	ldr	r1, [pc, #480]	; (8002c7c <Send_Init_Msg+0x8c4>)
 8002a9a:	5ccb      	ldrb	r3, [r1, r3]
 8002a9c:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002aa0:	2108      	movs	r1, #8
 8002aa2:	f7fd fe43 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8002aa6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002aaa:	3308      	adds	r3, #8
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	da00      	bge.n	8002ab2 <Send_Init_Msg+0x6fa>
 8002ab0:	3307      	adds	r3, #7
 8002ab2:	10db      	asrs	r3, r3, #3
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002aba:	4413      	add	r3, r2
 8002abc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002ac0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002ac4:	3308      	adds	r3, #8
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	b21b      	sxth	r3, r3
 8002aca:	425a      	negs	r2, r3
 8002acc:	f003 0307 	and.w	r3, r3, #7
 8002ad0:	f002 0207 	and.w	r2, r2, #7
 8002ad4:	bf58      	it	pl
 8002ad6:	4253      	negpl	r3, r2
 8002ad8:	b21b      	sxth	r3, r3
 8002ada:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], V_NV_FLAG);
 8002ade:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ae2:	f107 020c 	add.w	r2, r7, #12
 8002ae6:	441a      	add	r2, r3
 8002ae8:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002aec:	2301      	movs	r3, #1
 8002aee:	2108      	movs	r1, #8
 8002af0:	f7fd fe1c 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8002af4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002af8:	3308      	adds	r3, #8
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	da00      	bge.n	8002b00 <Send_Init_Msg+0x748>
 8002afe:	3307      	adds	r3, #7
 8002b00:	10db      	asrs	r3, r3, #3
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b08:	4413      	add	r3, r2
 8002b0a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002b0e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002b12:	3308      	adds	r3, #8
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	b21b      	sxth	r3, r3
 8002b18:	425a      	negs	r2, r3
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	f002 0207 	and.w	r2, r2, #7
 8002b22:	bf58      	it	pl
 8002b24:	4253      	negpl	r3, r2
 8002b26:	b21b      	sxth	r3, r3
 8002b28:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], SIZE_BOOL_VAL_DATA);
 8002b2c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b30:	f107 020c 	add.w	r2, r7, #12
 8002b34:	441a      	add	r2, r3
 8002b36:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	2108      	movs	r1, #8
 8002b3e:	f7fd fdf5 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8002b42:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002b46:	3308      	adds	r3, #8
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	da00      	bge.n	8002b4e <Send_Init_Msg+0x796>
 8002b4c:	3307      	adds	r3, #7
 8002b4e:	10db      	asrs	r3, r3, #3
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b56:	4413      	add	r3, r2
 8002b58:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002b5c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002b60:	3308      	adds	r3, #8
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	b21b      	sxth	r3, r3
 8002b66:	425a      	negs	r2, r3
 8002b68:	f003 0307 	and.w	r3, r3, #7
 8002b6c:	f002 0207 	and.w	r2, r2, #7
 8002b70:	bf58      	it	pl
 8002b72:	4253      	negpl	r3, r2
 8002b74:	b21b      	sxth	r3, r3
 8002b76:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], SIZE_NUMER_VAL_DATA);
 8002b7a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b7e:	f107 020c 	add.w	r2, r7, #12
 8002b82:	441a      	add	r2, r3
 8002b84:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002b88:	2300      	movs	r3, #0
 8002b8a:	2108      	movs	r1, #8
 8002b8c:	f7fd fdce 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8002b90:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002b94:	3308      	adds	r3, #8
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	da00      	bge.n	8002b9c <Send_Init_Msg+0x7e4>
 8002b9a:	3307      	adds	r3, #7
 8002b9c:	10db      	asrs	r3, r3, #3
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ba4:	4413      	add	r3, r2
 8002ba6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002baa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002bae:	3308      	adds	r3, #8
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	b21b      	sxth	r3, r3
 8002bb4:	425a      	negs	r2, r3
 8002bb6:	f003 0307 	and.w	r3, r3, #7
 8002bba:	f002 0207 	and.w	r2, r2, #7
 8002bbe:	bf58      	it	pl
 8002bc0:	4253      	negpl	r3, r2
 8002bc2:	b21b      	sxth	r3, r3
 8002bc4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	//printf("Hitachi_fault_injection_st.FAULT_INJECTION_BITS:%lu\n",Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
	//printf("Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX:%u\n",Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX);

	if( ( (CHECKFLAG(5,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8002bc8:	4b2d      	ldr	r3, [pc, #180]	; (8002c80 <Send_Init_Msg+0x8c8>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	095b      	lsrs	r3, r3, #5
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d060      	beq.n	8002c98 <Send_Init_Msg+0x8e0>
 8002bd6:	4b2a      	ldr	r3, [pc, #168]	; (8002c80 <Send_Init_Msg+0x8c8>)
 8002bd8:	791b      	ldrb	r3, [r3, #4]
 8002bda:	79fa      	ldrb	r2, [r7, #7]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d15b      	bne.n	8002c98 <Send_Init_Msg+0x8e0>
	{
		uint8_t Rand_Number = 12;
 8002be0:	230c      	movs	r3, #12
 8002be2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#ifdef STM_32
		Rand_Number  = (HAL_RNG_GetRandomNumber(&hrng) % 125) + 1;
 8002be6:	4827      	ldr	r0, [pc, #156]	; (8002c84 <Send_Init_Msg+0x8cc>)
 8002be8:	f017 fc30 	bl	801a44c <HAL_RNG_GetRandomNumber>
 8002bec:	4601      	mov	r1, r0
 8002bee:	4b26      	ldr	r3, [pc, #152]	; (8002c88 <Send_Init_Msg+0x8d0>)
 8002bf0:	fba3 2301 	umull	r2, r3, r3, r1
 8002bf4:	08da      	lsrs	r2, r3, #3
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	015b      	lsls	r3, r3, #5
 8002bfa:	1a9b      	subs	r3, r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4413      	add	r3, r2
 8002c00:	1aca      	subs	r2, r1, r3
 8002c02:	b2d3      	uxtb	r3, r2
 8002c04:	3301      	adds	r3, #1
 8002c06:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#endif
		printf("Injecting Invalid Boolean value Outputs failure\n");
 8002c0a:	4820      	ldr	r0, [pc, #128]	; (8002c8c <Send_Init_Msg+0x8d4>)
 8002c0c:	f020 f812 	bl	8022c34 <puts>
		printf("Actual Boolean value:%u\n",Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA);
 8002c10:	79fb      	ldrb	r3, [r7, #7]
 8002c12:	4a17      	ldr	r2, [pc, #92]	; (8002c70 <Send_Init_Msg+0x8b8>)
 8002c14:	011b      	lsls	r3, r3, #4
 8002c16:	4413      	add	r3, r2
 8002c18:	3303      	adds	r3, #3
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	481c      	ldr	r0, [pc, #112]	; (8002c90 <Send_Init_Msg+0x8d8>)
 8002c20:	f01f ff6c 	bl	8022afc <iprintf>
		if(Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA == Rand_Number)
 8002c24:	79fb      	ldrb	r3, [r7, #7]
 8002c26:	4a12      	ldr	r2, [pc, #72]	; (8002c70 <Send_Init_Msg+0x8b8>)
 8002c28:	011b      	lsls	r3, r3, #4
 8002c2a:	4413      	add	r3, r2
 8002c2c:	3303      	adds	r3, #3
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d108      	bne.n	8002c4a <Send_Init_Msg+0x892>
		{
			Rand_Number = Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA-2;
 8002c38:	79fb      	ldrb	r3, [r7, #7]
 8002c3a:	4a0d      	ldr	r2, [pc, #52]	; (8002c70 <Send_Init_Msg+0x8b8>)
 8002c3c:	011b      	lsls	r3, r3, #4
 8002c3e:	4413      	add	r3, r2
 8002c40:	3303      	adds	r3, #3
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	3b02      	subs	r3, #2
 8002c46:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		printf("Injected Boolean value:%u\n",Rand_Number);
 8002c4a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002c4e:	4619      	mov	r1, r3
 8002c50:	4810      	ldr	r0, [pc, #64]	; (8002c94 <Send_Init_Msg+0x8dc>)
 8002c52:	f01f ff53 	bl	8022afc <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number);
 8002c56:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c5a:	f107 020c 	add.w	r2, r7, #12
 8002c5e:	441a      	add	r2, r3
 8002c60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002c64:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002c68:	2108      	movs	r1, #8
 8002c6a:	f7fd fd5f 	bl	800072c <InsertBits>
	{
 8002c6e:	e022      	b.n	8002cb6 <Send_Init_Msg+0x8fe>
 8002c70:	200011d0 	.word	0x200011d0
 8002c74:	00ffffef 	.word	0x00ffffef
 8002c78:	20001680 	.word	0x20001680
 8002c7c:	2000010c 	.word	0x2000010c
 8002c80:	20001968 	.word	0x20001968
 8002c84:	20009d2c 	.word	0x20009d2c
 8002c88:	10624dd3 	.word	0x10624dd3
 8002c8c:	08024730 	.word	0x08024730
 8002c90:	08024760 	.word	0x08024760
 8002c94:	0802477c 	.word	0x0802477c
	}
	else
	{
		//InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA);
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], EI_data.Hitachi_st.Bool_outputs[Source_Index]);
 8002c98:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c9c:	f107 020c 	add.w	r2, r7, #12
 8002ca0:	441a      	add	r2, r3
 8002ca2:	79fb      	ldrb	r3, [r7, #7]
 8002ca4:	494e      	ldr	r1, [pc, #312]	; (8002de0 <Send_Init_Msg+0xa28>)
 8002ca6:	440b      	add	r3, r1
 8002ca8:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 8002cac:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002cb0:	2108      	movs	r1, #8
 8002cb2:	f7fd fd3b 	bl	800072c <InsertBits>
	}
	BITSTUFFINC(8);
 8002cb6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002cba:	3308      	adds	r3, #8
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	da00      	bge.n	8002cc2 <Send_Init_Msg+0x90a>
 8002cc0:	3307      	adds	r3, #7
 8002cc2:	10db      	asrs	r3, r3, #3
 8002cc4:	b29a      	uxth	r2, r3
 8002cc6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002cca:	4413      	add	r3, r2
 8002ccc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002cd0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002cd4:	3308      	adds	r3, #8
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	b21b      	sxth	r3, r3
 8002cda:	425a      	negs	r2, r3
 8002cdc:	f003 0307 	and.w	r3, r3, #7
 8002ce0:	f002 0207 	and.w	r2, r2, #7
 8002ce4:	bf58      	it	pl
 8002ce6:	4253      	negpl	r3, r2
 8002ce8:	b21b      	sxth	r3, r3
 8002cea:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], VAL_NUM_OUTPUTS);
 8002cee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002cf2:	f107 020c 	add.w	r2, r7, #12
 8002cf6:	441a      	add	r2, r3
 8002cf8:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	2108      	movs	r1, #8
 8002d00:	f7fd fd14 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8002d04:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002d08:	3308      	adds	r3, #8
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	da00      	bge.n	8002d10 <Send_Init_Msg+0x958>
 8002d0e:	3307      	adds	r3, #7
 8002d10:	10db      	asrs	r3, r3, #3
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d18:	4413      	add	r3, r2
 8002d1a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002d1e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002d22:	3308      	adds	r3, #8
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	b21b      	sxth	r3, r3
 8002d28:	425a      	negs	r2, r3
 8002d2a:	f003 0307 	and.w	r3, r3, #7
 8002d2e:	f002 0207 	and.w	r2, r2, #7
 8002d32:	bf58      	it	pl
 8002d34:	4253      	negpl	r3, r2
 8002d36:	b21b      	sxth	r3, r3
 8002d38:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	Calc_CRC = CalculateDirectReverseCrc(Transmit_Buff, ucByte);
 8002d3c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8002d40:	f107 030c 	add.w	r3, r7, #12
 8002d44:	4611      	mov	r1, r2
 8002d46:	4618      	mov	r0, r3
 8002d48:	f010 faf6 	bl	8013338 <CalculateDirectReverseCrc>
 8002d4c:	6538      	str	r0, [r7, #80]	; 0x50
	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], Calc_CRC);
 8002d4e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d52:	f107 020c 	add.w	r2, r7, #12
 8002d56:	441a      	add	r2, r3
 8002d58:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002d5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d5e:	2120      	movs	r1, #32
 8002d60:	f7fd fce4 	bl	800072c <InsertBits>
	BITSTUFFINC(32);
 8002d64:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002d68:	3320      	adds	r3, #32
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	da00      	bge.n	8002d70 <Send_Init_Msg+0x9b8>
 8002d6e:	3307      	adds	r3, #7
 8002d70:	10db      	asrs	r3, r3, #3
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d78:	4413      	add	r3, r2
 8002d7a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002d7e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002d82:	3320      	adds	r3, #32
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	b21b      	sxth	r3, r3
 8002d88:	425a      	negs	r2, r3
 8002d8a:	f003 0307 	and.w	r3, r3, #7
 8002d8e:	f002 0207 	and.w	r2, r2, #7
 8002d92:	bf58      	it	pl
 8002d94:	4253      	negpl	r3, r2
 8002d96:	b21b      	sxth	r3, r3
 8002d98:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( ( CHECKFLAG(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)== SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8002d9c:	4b11      	ldr	r3, [pc, #68]	; (8002de4 <Send_Init_Msg+0xa2c>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	0a5b      	lsrs	r3, r3, #9
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00b      	beq.n	8002dc2 <Send_Init_Msg+0xa0a>
 8002daa:	4b0e      	ldr	r3, [pc, #56]	; (8002de4 <Send_Init_Msg+0xa2c>)
 8002dac:	791b      	ldrb	r3, [r3, #4]
 8002dae:	79fa      	ldrb	r2, [r7, #7]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d106      	bne.n	8002dc2 <Send_Init_Msg+0xa0a>
	{
		printf("Injected ETH tx Fail\n");
 8002db4:	480c      	ldr	r0, [pc, #48]	; (8002de8 <Send_Init_Msg+0xa30>)
 8002db6:	f01f ff3d 	bl	8022c34 <puts>
		printf("Not Sending Reply");
 8002dba:	480c      	ldr	r0, [pc, #48]	; (8002dec <Send_Init_Msg+0xa34>)
 8002dbc:	f01f fe9e 	bl	8022afc <iprintf>
 8002dc0:	e009      	b.n	8002dd6 <Send_Init_Msg+0xa1e>
	}
	else
	{
		Process_Sending_Reply(Transmit_Buff,ucByte,Source_Index);
 8002dc2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002dc6:	b2d9      	uxtb	r1, r3
 8002dc8:	79fa      	ldrb	r2, [r7, #7]
 8002dca:	f107 030c 	add.w	r3, r7, #12
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f004 fc68 	bl	80076a4 <Process_Sending_Reply>
	}
}
 8002dd4:	bf00      	nop
 8002dd6:	bf00      	nop
 8002dd8:	375c      	adds	r7, #92	; 0x5c
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd90      	pop	{r4, r7, pc}
 8002dde:	bf00      	nop
 8002de0:	20000304 	.word	0x20000304
 8002de4:	20001968 	.word	0x20001968
 8002de8:	08024798 	.word	0x08024798
 8002dec:	080247b0 	.word	0x080247b0

08002df0 <Vital_Msg_extr>:

void Vital_Msg_extr(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 8002df0:	b590      	push	{r4, r7, lr}
 8002df2:	b099      	sub	sp, #100	; 0x64
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	4608      	mov	r0, r1
 8002dfa:	4611      	mov	r1, r2
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	4603      	mov	r3, r0
 8002e00:	70fb      	strb	r3, [r7, #3]
 8002e02:	460b      	mov	r3, r1
 8002e04:	70bb      	strb	r3, [r7, #2]
 8002e06:	4613      	mov	r3, r2
 8002e08:	707b      	strb	r3, [r7, #1]
	uint16_t Traverser = 0;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	uint32_t Calc_CRC = 0;
 8002e10:	2300      	movs	r3, #0
 8002e12:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t Recv_CRC = 0;
 8002e14:	2300      	movs	r3, #0
 8002e16:	65bb      	str	r3, [r7, #88]	; 0x58
	uint32_t Ticks = HAL_GetTick();
 8002e18:	f012 fe66 	bl	8015ae8 <HAL_GetTick>
 8002e1c:	64b8      	str	r0, [r7, #72]	; 0x48
	uint8_t noofIP = 0, uc_index = 0;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002e24:	2300      	movs	r3, #0
 8002e26:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	uint8_t LinkEstablishFlag = CLEAR;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	uint8_t Temp_Vital_Data_Buff[60] = {0,};
 8002e30:	2300      	movs	r3, #0
 8002e32:	60bb      	str	r3, [r7, #8]
 8002e34:	f107 030c 	add.w	r3, r7, #12
 8002e38:	2238      	movs	r2, #56	; 0x38
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f01f fd75 	bl	802292c <memset>
	BITSTUFFINIT(0, 0);
 8002e42:	2300      	movs	r3, #0
 8002e44:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8002e48:	2300      	movs	r3, #0
 8002e4a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50


	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8002e4e:	49a1      	ldr	r1, [pc, #644]	; (80030d4 <Vital_Msg_extr+0x2e4>)
 8002e50:	48a1      	ldr	r0, [pc, #644]	; (80030d8 <Vital_Msg_extr+0x2e8>)
 8002e52:	f7fd f9f5 	bl	8000240 <strcmp>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f000 8138 	beq.w	80030ce <Vital_Msg_extr+0x2de>
		//Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = 0x123456;
		goto ROLLOVER_VITAL;
	}


	if( ( (CHECKFLAG(0,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8002e5e:	4b9f      	ldr	r3, [pc, #636]	; (80030dc <Vital_Msg_extr+0x2ec>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d02d      	beq.n	8002ec6 <Vital_Msg_extr+0xd6>
 8002e6a:	4b9c      	ldr	r3, [pc, #624]	; (80030dc <Vital_Msg_extr+0x2ec>)
 8002e6c:	791b      	ldrb	r3, [r3, #4]
 8002e6e:	78ba      	ldrb	r2, [r7, #2]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d128      	bne.n	8002ec6 <Vital_Msg_extr+0xd6>
	{
		uint32_t Rand_Number = 22;
 8002e74:	2316      	movs	r3, #22
 8002e76:	647b      	str	r3, [r7, #68]	; 0x44
#ifdef STM_32
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 0xffff00);
 8002e78:	4899      	ldr	r0, [pc, #612]	; (80030e0 <Vital_Msg_extr+0x2f0>)
 8002e7a:	f017 fae7 	bl	801a44c <HAL_RNG_GetRandomNumber>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	4b98      	ldr	r3, [pc, #608]	; (80030e4 <Vital_Msg_extr+0x2f4>)
 8002e82:	fba3 1302 	umull	r1, r3, r3, r2
 8002e86:	0dd9      	lsrs	r1, r3, #23
 8002e88:	460b      	mov	r3, r1
 8002e8a:	041b      	lsls	r3, r3, #16
 8002e8c:	1a5b      	subs	r3, r3, r1
 8002e8e:	021b      	lsls	r3, r3, #8
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	647b      	str	r3, [r7, #68]	; 0x44
#endif
		printf("\nInjected RX Vital CRC failure\n");
 8002e94:	4894      	ldr	r0, [pc, #592]	; (80030e8 <Vital_Msg_extr+0x2f8>)
 8002e96:	f01f fecd 	bl	8022c34 <puts>
		printf("Actual   RX Vital Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8002e9a:	78bb      	ldrb	r3, [r7, #2]
 8002e9c:	4a93      	ldr	r2, [pc, #588]	; (80030ec <Vital_Msg_extr+0x2fc>)
 8002e9e:	011b      	lsls	r3, r3, #4
 8002ea0:	4413      	add	r3, r2
 8002ea2:	3308      	adds	r3, #8
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	4891      	ldr	r0, [pc, #580]	; (80030f0 <Vital_Msg_extr+0x300>)
 8002eaa:	f01f fe27 	bl	8022afc <iprintf>
		printf("Injected RX Vital Init Value:0x%06lX\n",Rand_Number);
 8002eae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002eb0:	4890      	ldr	r0, [pc, #576]	; (80030f4 <Vital_Msg_extr+0x304>)
 8002eb2:	f01f fe23 	bl	8022afc <iprintf>
		InsertBits(0, 24, &Temp_Vital_Data_Buff[0],Rand_Number);
 8002eb6:	f107 0208 	add.w	r2, r7, #8
 8002eba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ebc:	2118      	movs	r1, #24
 8002ebe:	2000      	movs	r0, #0
 8002ec0:	f7fd fc34 	bl	800072c <InsertBits>
	{
 8002ec4:	e00b      	b.n	8002ede <Vital_Msg_extr+0xee>
	}
	else
	{
		InsertBits(0, 24, &Temp_Vital_Data_Buff[0], Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8002ec6:	78bb      	ldrb	r3, [r7, #2]
 8002ec8:	4a88      	ldr	r2, [pc, #544]	; (80030ec <Vital_Msg_extr+0x2fc>)
 8002eca:	011b      	lsls	r3, r3, #4
 8002ecc:	4413      	add	r3, r2
 8002ece:	3308      	adds	r3, #8
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f107 0208 	add.w	r2, r7, #8
 8002ed6:	2118      	movs	r1, #24
 8002ed8:	2000      	movs	r0, #0
 8002eda:	f7fd fc27 	bl	800072c <InsertBits>
	}
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8002ede:	2300      	movs	r3, #0
 8002ee0:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8002ee4:	e010      	b.n	8002f08 <Vital_Msg_extr+0x118>
	{
		Temp_Vital_Data_Buff[uc_index + 3] = Buff[uc_index];
 8002ee6:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	441a      	add	r2, r3
 8002eee:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002ef2:	3303      	adds	r3, #3
 8002ef4:	7812      	ldrb	r2, [r2, #0]
 8002ef6:	3360      	adds	r3, #96	; 0x60
 8002ef8:	443b      	add	r3, r7
 8002efa:	f803 2c58 	strb.w	r2, [r3, #-88]
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8002efe:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002f02:	3301      	adds	r3, #1
 8002f04:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8002f08:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8002f0c:	78fb      	ldrb	r3, [r7, #3]
 8002f0e:	3b05      	subs	r3, #5
 8002f10:	429a      	cmp	r2, r3
 8002f12:	dbe8      	blt.n	8002ee6 <Vital_Msg_extr+0xf6>
	}
	Calc_CRC = CalculateDirectReverseCrc(Temp_Vital_Data_Buff, uc_index + 3);
 8002f14:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	3303      	adds	r3, #3
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	f107 0308 	add.w	r3, r7, #8
 8002f22:	4611      	mov	r1, r2
 8002f24:	4618      	mov	r0, r3
 8002f26:	f010 fa07 	bl	8013338 <CalculateDirectReverseCrc>
 8002f2a:	64f8      	str	r0, [r7, #76]	; 0x4c
	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 8002f2c:	78fb      	ldrb	r3, [r7, #3]
 8002f2e:	3b05      	subs	r3, #5
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	441a      	add	r2, r3
 8002f34:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002f38:	2120      	movs	r1, #32
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7fd fb6a 	bl	8000614 <ExtractBits>
 8002f40:	65b8      	str	r0, [r7, #88]	; 0x58

	//	printf("\n___________________________________ VITAL-MSG ___________________________________\n");
	if(Calc_CRC != Recv_CRC)
 8002f42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f46:	429a      	cmp	r2, r3
 8002f48:	f000 80ec 	beq.w	8003124 <Vital_Msg_extr+0x334>
	{
		if( ( ExtractBits(0, 8, (unsigned char *)&Buff[5]) == 0x00) || (ExtractBits(0, 8, (unsigned char *)&Buff[5]) == 0x01) )
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	3305      	adds	r3, #5
 8002f50:	461a      	mov	r2, r3
 8002f52:	2108      	movs	r1, #8
 8002f54:	2000      	movs	r0, #0
 8002f56:	f7fd fb5d 	bl	8000614 <ExtractBits>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00a      	beq.n	8002f76 <Vital_Msg_extr+0x186>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	3305      	adds	r3, #5
 8002f64:	461a      	mov	r2, r3
 8002f66:	2108      	movs	r1, #8
 8002f68:	2000      	movs	r0, #0
 8002f6a:	f7fd fb53 	bl	8000614 <ExtractBits>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	f040 8098 	bne.w	80030a6 <Vital_Msg_extr+0x2b6>
		{
			printf("Tx seq Roll over Detected\n");
 8002f76:	4860      	ldr	r0, [pc, #384]	; (80030f8 <Vital_Msg_extr+0x308>)
 8002f78:	f01f fe5c 	bl	8022c34 <puts>
			memset(Temp_Vital_Data_Buff,0,sizeof(Temp_Vital_Data_Buff));
 8002f7c:	f107 0308 	add.w	r3, r7, #8
 8002f80:	223c      	movs	r2, #60	; 0x3c
 8002f82:	2100      	movs	r1, #0
 8002f84:	4618      	mov	r0, r3
 8002f86:	f01f fcd1 	bl	802292c <memset>
			InsertBits(0, 24, &Temp_Vital_Data_Buff[0], (Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value+1));
 8002f8a:	78bb      	ldrb	r3, [r7, #2]
 8002f8c:	4a57      	ldr	r2, [pc, #348]	; (80030ec <Vital_Msg_extr+0x2fc>)
 8002f8e:	011b      	lsls	r3, r3, #4
 8002f90:	4413      	add	r3, r2
 8002f92:	3308      	adds	r3, #8
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	3301      	adds	r3, #1
 8002f98:	f107 0208 	add.w	r2, r7, #8
 8002f9c:	2118      	movs	r1, #24
 8002f9e:	2000      	movs	r0, #0
 8002fa0:	f7fd fbc4 	bl	800072c <InsertBits>
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8002faa:	e010      	b.n	8002fce <Vital_Msg_extr+0x1de>
			{
				Temp_Vital_Data_Buff[uc_index + 3] = Buff[uc_index];
 8002fac:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	441a      	add	r2, r3
 8002fb4:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002fb8:	3303      	adds	r3, #3
 8002fba:	7812      	ldrb	r2, [r2, #0]
 8002fbc:	3360      	adds	r3, #96	; 0x60
 8002fbe:	443b      	add	r3, r7
 8002fc0:	f803 2c58 	strb.w	r2, [r3, #-88]
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8002fc4:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002fc8:	3301      	adds	r3, #1
 8002fca:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8002fce:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8002fd2:	78fb      	ldrb	r3, [r7, #3]
 8002fd4:	3b05      	subs	r3, #5
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	dbe8      	blt.n	8002fac <Vital_Msg_extr+0x1bc>
			}
			Calc_CRC = CalculateDirectReverseCrc(Temp_Vital_Data_Buff, uc_index + 3);
 8002fda:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	3303      	adds	r3, #3
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	f107 0308 	add.w	r3, r7, #8
 8002fe8:	4611      	mov	r1, r2
 8002fea:	4618      	mov	r0, r3
 8002fec:	f010 f9a4 	bl	8013338 <CalculateDirectReverseCrc>
 8002ff0:	64f8      	str	r0, [r7, #76]	; 0x4c
			Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 8002ff2:	78fb      	ldrb	r3, [r7, #3]
 8002ff4:	3b05      	subs	r3, #5
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	441a      	add	r2, r3
 8002ffa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002ffe:	2120      	movs	r1, #32
 8003000:	4618      	mov	r0, r3
 8003002:	f7fd fb07 	bl	8000614 <ExtractBits>
 8003006:	65b8      	str	r0, [r7, #88]	; 0x58

			if(Calc_CRC == Recv_CRC)
 8003008:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800300a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800300c:	429a      	cmp	r2, r3
 800300e:	d136      	bne.n	800307e <Vital_Msg_extr+0x28e>
			{
				printf("CRC OK AFTER ROLL OVER\n");
 8003010:	483a      	ldr	r0, [pc, #232]	; (80030fc <Vital_Msg_extr+0x30c>)
 8003012:	f01f fe0f 	bl	8022c34 <puts>
				printf("Received CRC       :0x%08lX\n",Recv_CRC);
 8003016:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003018:	4839      	ldr	r0, [pc, #228]	; (8003100 <Vital_Msg_extr+0x310>)
 800301a:	f01f fd6f 	bl	8022afc <iprintf>
				printf("Previous Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 800301e:	78bb      	ldrb	r3, [r7, #2]
 8003020:	4a32      	ldr	r2, [pc, #200]	; (80030ec <Vital_Msg_extr+0x2fc>)
 8003022:	011b      	lsls	r3, r3, #4
 8003024:	4413      	add	r3, r2
 8003026:	3308      	adds	r3, #8
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4619      	mov	r1, r3
 800302c:	4835      	ldr	r0, [pc, #212]	; (8003104 <Vital_Msg_extr+0x314>)
 800302e:	f01f fd65 	bl	8022afc <iprintf>
				++Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 8003032:	78bb      	ldrb	r3, [r7, #2]
 8003034:	492d      	ldr	r1, [pc, #180]	; (80030ec <Vital_Msg_extr+0x2fc>)
 8003036:	011a      	lsls	r2, r3, #4
 8003038:	440a      	add	r2, r1
 800303a:	3208      	adds	r2, #8
 800303c:	6812      	ldr	r2, [r2, #0]
 800303e:	3201      	adds	r2, #1
 8003040:	492a      	ldr	r1, [pc, #168]	; (80030ec <Vital_Msg_extr+0x2fc>)
 8003042:	011b      	lsls	r3, r3, #4
 8003044:	440b      	add	r3, r1
 8003046:	3308      	adds	r3, #8
 8003048:	601a      	str	r2, [r3, #0]
				printf("Incremented Vital_CRC Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 800304a:	78bb      	ldrb	r3, [r7, #2]
 800304c:	4a27      	ldr	r2, [pc, #156]	; (80030ec <Vital_Msg_extr+0x2fc>)
 800304e:	011b      	lsls	r3, r3, #4
 8003050:	4413      	add	r3, r2
 8003052:	3308      	adds	r3, #8
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4619      	mov	r1, r3
 8003058:	482b      	ldr	r0, [pc, #172]	; (8003108 <Vital_Msg_extr+0x318>)
 800305a:	f01f fd4f 	bl	8022afc <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 800305e:	78bb      	ldrb	r3, [r7, #2]
 8003060:	78ba      	ldrb	r2, [r7, #2]
 8003062:	4922      	ldr	r1, [pc, #136]	; (80030ec <Vital_Msg_extr+0x2fc>)
 8003064:	011b      	lsls	r3, r3, #4
 8003066:	440b      	add	r3, r1
 8003068:	3308      	adds	r3, #8
 800306a:	6819      	ldr	r1, [r3, #0]
 800306c:	4827      	ldr	r0, [pc, #156]	; (800310c <Vital_Msg_extr+0x31c>)
 800306e:	4613      	mov	r3, r2
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	4413      	add	r3, r2
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	4403      	add	r3, r0
 8003078:	3308      	adds	r3, #8
 800307a:	6019      	str	r1, [r3, #0]
				goto ROLLOVER_VITAL;
 800307c:	e053      	b.n	8003126 <Vital_Msg_extr+0x336>
			}
			else
			{
				printf("Vital CRC Fail_Rollover:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 800307e:	78bb      	ldrb	r3, [r7, #2]
 8003080:	4a23      	ldr	r2, [pc, #140]	; (8003110 <Vital_Msg_extr+0x320>)
 8003082:	3366      	adds	r3, #102	; 0x66
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	4413      	add	r3, r2
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	4619      	mov	r1, r3
 800308c:	4821      	ldr	r0, [pc, #132]	; (8003114 <Vital_Msg_extr+0x324>)
 800308e:	f01f fd35 	bl	8022afc <iprintf>
				printf("R-CRC:0x%08lX\n",Recv_CRC);
 8003092:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003094:	4820      	ldr	r0, [pc, #128]	; (8003118 <Vital_Msg_extr+0x328>)
 8003096:	f01f fd31 	bl	8022afc <iprintf>
				printf("C-CRC:0x%08lX\n",Calc_CRC);
 800309a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800309c:	481f      	ldr	r0, [pc, #124]	; (800311c <Vital_Msg_extr+0x32c>)
 800309e:	f01f fd2d 	bl	8022afc <iprintf>
				return;
 80030a2:	f000 beac 	b.w	8003dfe <Vital_Msg_extr+0x100e>
			}
		}
		else
		{
			printf("Vital CRC Fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80030a6:	78bb      	ldrb	r3, [r7, #2]
 80030a8:	4a19      	ldr	r2, [pc, #100]	; (8003110 <Vital_Msg_extr+0x320>)
 80030aa:	3366      	adds	r3, #102	; 0x66
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4413      	add	r3, r2
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	4619      	mov	r1, r3
 80030b4:	481a      	ldr	r0, [pc, #104]	; (8003120 <Vital_Msg_extr+0x330>)
 80030b6:	f01f fd21 	bl	8022afc <iprintf>
			printf("R-CRC:0x%08lX\n",Recv_CRC);
 80030ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80030bc:	4816      	ldr	r0, [pc, #88]	; (8003118 <Vital_Msg_extr+0x328>)
 80030be:	f01f fd1d 	bl	8022afc <iprintf>
			printf("C-CRC:0x%08lX\n",Calc_CRC);
 80030c2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80030c4:	4815      	ldr	r0, [pc, #84]	; (800311c <Vital_Msg_extr+0x32c>)
 80030c6:	f01f fd19 	bl	8022afc <iprintf>
			return;
 80030ca:	f000 be98 	b.w	8003dfe <Vital_Msg_extr+0x100e>
		goto ROLLOVER_VITAL;
 80030ce:	bf00      	nop
 80030d0:	e029      	b.n	8003126 <Vital_Msg_extr+0x336>
 80030d2:	bf00      	nop
 80030d4:	080242c0 	.word	0x080242c0
 80030d8:	20000305 	.word	0x20000305
 80030dc:	20001968 	.word	0x20001968
 80030e0:	20009d2c 	.word	0x20009d2c
 80030e4:	80008001 	.word	0x80008001
 80030e8:	080247c4 	.word	0x080247c4
 80030ec:	200011d0 	.word	0x200011d0
 80030f0:	080247e4 	.word	0x080247e4
 80030f4:	0802480c 	.word	0x0802480c
 80030f8:	08024834 	.word	0x08024834
 80030fc:	08024850 	.word	0x08024850
 8003100:	08024868 	.word	0x08024868
 8003104:	08024888 	.word	0x08024888
 8003108:	080248a8 	.word	0x080248a8
 800310c:	20001680 	.word	0x20001680
 8003110:	20000304 	.word	0x20000304
 8003114:	080248d4 	.word	0x080248d4
 8003118:	08024504 	.word	0x08024504
 800311c:	08024514 	.word	0x08024514
 8003120:	080248f4 	.word	0x080248f4
		}
	}

	ROLLOVER_VITAL:
 8003124:	bf00      	nop
	Last_Recevied_Clock[Source_Index] = Ticks;
 8003126:	78bb      	ldrb	r3, [r7, #2]
 8003128:	49c3      	ldr	r1, [pc, #780]	; (8003438 <Vital_Msg_extr+0x648>)
 800312a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800312c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Last_Recevied_Clock_ValidMsgs[Source_Index] = Ticks;
 8003130:	78bb      	ldrb	r3, [r7, #2]
 8003132:	49c2      	ldr	r1, [pc, #776]	; (800343c <Vital_Msg_extr+0x64c>)
 8003134:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Received_Vital[Source_Index] = SET;
 800313a:	78bb      	ldrb	r3, [r7, #2]
 800313c:	4ac0      	ldr	r2, [pc, #768]	; (8003440 <Vital_Msg_extr+0x650>)
 800313e:	2101      	movs	r1, #1
 8003140:	54d1      	strb	r1, [r2, r3]
	//Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff); // To detected EiPC shifting Faster

	//------| To have a copy and check if the data received on Ethernet and CAN are same.
	//------| If both same no need extract data again in CAN.
	//------| This buffer will be cleared in VITAL-MSG-CAN Function After checking.
	memset(&Last_Rcv_Vdata_st[Source_Index].Last_Rcv_vdata,0,sizeof(Last_Rcv_Vdata_st[Source_Index].Last_Rcv_vdata));
 8003142:	78ba      	ldrb	r2, [r7, #2]
 8003144:	4613      	mov	r3, r2
 8003146:	015b      	lsls	r3, r3, #5
 8003148:	4413      	add	r3, r2
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	4abd      	ldr	r2, [pc, #756]	; (8003444 <Vital_Msg_extr+0x654>)
 800314e:	4413      	add	r3, r2
 8003150:	2240      	movs	r2, #64	; 0x40
 8003152:	2100      	movs	r1, #0
 8003154:	4618      	mov	r0, r3
 8003156:	f01f fbe9 	bl	802292c <memset>
	memcpy(&Last_Rcv_Vdata_st[Source_Index].Last_Rcv_vdata,Buff,Length);
 800315a:	78ba      	ldrb	r2, [r7, #2]
 800315c:	4613      	mov	r3, r2
 800315e:	015b      	lsls	r3, r3, #5
 8003160:	4413      	add	r3, r2
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	4ab7      	ldr	r2, [pc, #732]	; (8003444 <Vital_Msg_extr+0x654>)
 8003166:	4413      	add	r3, r2
 8003168:	78fa      	ldrb	r2, [r7, #3]
 800316a:	6879      	ldr	r1, [r7, #4]
 800316c:	4618      	mov	r0, r3
 800316e:	f01f fbb5 	bl	80228dc <memcpy>
	Last_Rcv_Vdata_st[Source_Index].Length = Length;
 8003172:	78ba      	ldrb	r2, [r7, #2]
 8003174:	78fb      	ldrb	r3, [r7, #3]
 8003176:	b298      	uxth	r0, r3
 8003178:	49b2      	ldr	r1, [pc, #712]	; (8003444 <Vital_Msg_extr+0x654>)
 800317a:	4613      	mov	r3, r2
 800317c:	015b      	lsls	r3, r3, #5
 800317e:	4413      	add	r3, r2
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	440b      	add	r3, r1
 8003184:	3340      	adds	r3, #64	; 0x40
 8003186:	4602      	mov	r2, r0
 8003188:	801a      	strh	r2, [r3, #0]
	/////////////////////////////////////////////////////////////////////////////////////////////////////

	BITSTUFFINC(8); // Incrementing to escape SOM
 800318a:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800318e:	3308      	adds	r3, #8
 8003190:	2b00      	cmp	r3, #0
 8003192:	da00      	bge.n	8003196 <Vital_Msg_extr+0x3a6>
 8003194:	3307      	adds	r3, #7
 8003196:	10db      	asrs	r3, r3, #3
 8003198:	b29a      	uxth	r2, r3
 800319a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800319e:	4413      	add	r3, r2
 80031a0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80031a4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80031a8:	3308      	adds	r3, #8
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	b21b      	sxth	r3, r3
 80031ae:	425a      	negs	r2, r3
 80031b0:	f003 0307 	and.w	r3, r3, #7
 80031b4:	f002 0207 	and.w	r2, r2, #7
 80031b8:	bf58      	it	pl
 80031ba:	4253      	negpl	r3, r2
 80031bc:	b21b      	sxth	r3, r3
 80031be:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	Hitachi_Vital_st[Source_Index].Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80031c2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	441a      	add	r2, r3
 80031ca:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80031ce:	2110      	movs	r1, #16
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7fd fa1f 	bl	8000614 <ExtractBits>
 80031d6:	4603      	mov	r3, r0
 80031d8:	78ba      	ldrb	r2, [r7, #2]
 80031da:	b298      	uxth	r0, r3
 80031dc:	499a      	ldr	r1, [pc, #616]	; (8003448 <Vital_Msg_extr+0x658>)
 80031de:	4613      	mov	r3, r2
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	4413      	add	r3, r2
 80031e4:	011b      	lsls	r3, r3, #4
 80031e6:	440b      	add	r3, r1
 80031e8:	3328      	adds	r3, #40	; 0x28
 80031ea:	4602      	mov	r2, r0
 80031ec:	801a      	strh	r2, [r3, #0]
	printf("DA:%u ", Hitachi_Vital_st[Source_Index].Des_Addr);
 80031ee:	78ba      	ldrb	r2, [r7, #2]
 80031f0:	4995      	ldr	r1, [pc, #596]	; (8003448 <Vital_Msg_extr+0x658>)
 80031f2:	4613      	mov	r3, r2
 80031f4:	005b      	lsls	r3, r3, #1
 80031f6:	4413      	add	r3, r2
 80031f8:	011b      	lsls	r3, r3, #4
 80031fa:	440b      	add	r3, r1
 80031fc:	3328      	adds	r3, #40	; 0x28
 80031fe:	881b      	ldrh	r3, [r3, #0]
 8003200:	4619      	mov	r1, r3
 8003202:	4892      	ldr	r0, [pc, #584]	; (800344c <Vital_Msg_extr+0x65c>)
 8003204:	f01f fc7a 	bl	8022afc <iprintf>
	BITSTUFFINC(16);
 8003208:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800320c:	3310      	adds	r3, #16
 800320e:	2b00      	cmp	r3, #0
 8003210:	da00      	bge.n	8003214 <Vital_Msg_extr+0x424>
 8003212:	3307      	adds	r3, #7
 8003214:	10db      	asrs	r3, r3, #3
 8003216:	b29a      	uxth	r2, r3
 8003218:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800321c:	4413      	add	r3, r2
 800321e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003222:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003226:	3310      	adds	r3, #16
 8003228:	b29b      	uxth	r3, r3
 800322a:	b21b      	sxth	r3, r3
 800322c:	425a      	negs	r2, r3
 800322e:	f003 0307 	and.w	r3, r3, #7
 8003232:	f002 0207 	and.w	r2, r2, #7
 8003236:	bf58      	it	pl
 8003238:	4253      	negpl	r3, r2
 800323a:	b21b      	sxth	r3, r3
 800323c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	Hitachi_Vital_st[Source_Index].Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8003240:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	441a      	add	r2, r3
 8003248:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800324c:	2110      	movs	r1, #16
 800324e:	4618      	mov	r0, r3
 8003250:	f7fd f9e0 	bl	8000614 <ExtractBits>
 8003254:	4603      	mov	r3, r0
 8003256:	78ba      	ldrb	r2, [r7, #2]
 8003258:	b298      	uxth	r0, r3
 800325a:	497b      	ldr	r1, [pc, #492]	; (8003448 <Vital_Msg_extr+0x658>)
 800325c:	4613      	mov	r3, r2
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	4413      	add	r3, r2
 8003262:	011b      	lsls	r3, r3, #4
 8003264:	440b      	add	r3, r1
 8003266:	3326      	adds	r3, #38	; 0x26
 8003268:	4602      	mov	r2, r0
 800326a:	801a      	strh	r2, [r3, #0]
	printf("SA:%u ", Hitachi_Vital_st[Source_Index].Src_Addr);
 800326c:	78ba      	ldrb	r2, [r7, #2]
 800326e:	4976      	ldr	r1, [pc, #472]	; (8003448 <Vital_Msg_extr+0x658>)
 8003270:	4613      	mov	r3, r2
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	4413      	add	r3, r2
 8003276:	011b      	lsls	r3, r3, #4
 8003278:	440b      	add	r3, r1
 800327a:	3326      	adds	r3, #38	; 0x26
 800327c:	881b      	ldrh	r3, [r3, #0]
 800327e:	4619      	mov	r1, r3
 8003280:	4873      	ldr	r0, [pc, #460]	; (8003450 <Vital_Msg_extr+0x660>)
 8003282:	f01f fc3b 	bl	8022afc <iprintf>
	BITSTUFFINC(16);
 8003286:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800328a:	3310      	adds	r3, #16
 800328c:	2b00      	cmp	r3, #0
 800328e:	da00      	bge.n	8003292 <Vital_Msg_extr+0x4a2>
 8003290:	3307      	adds	r3, #7
 8003292:	10db      	asrs	r3, r3, #3
 8003294:	b29a      	uxth	r2, r3
 8003296:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800329a:	4413      	add	r3, r2
 800329c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80032a0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80032a4:	3310      	adds	r3, #16
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	b21b      	sxth	r3, r3
 80032aa:	425a      	negs	r2, r3
 80032ac:	f003 0307 	and.w	r3, r3, #7
 80032b0:	f002 0207 	and.w	r2, r2, #7
 80032b4:	bf58      	it	pl
 80032b6:	4253      	negpl	r3, r2
 80032b8:	b21b      	sxth	r3, r3
 80032ba:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	Hitachi_prms_st[Source_Index].Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80032be:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	441a      	add	r2, r3
 80032c6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80032ca:	2108      	movs	r1, #8
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7fd f9a1 	bl	8000614 <ExtractBits>
 80032d2:	4602      	mov	r2, r0
 80032d4:	78bb      	ldrb	r3, [r7, #2]
 80032d6:	b2d1      	uxtb	r1, r2
 80032d8:	4a5e      	ldr	r2, [pc, #376]	; (8003454 <Vital_Msg_extr+0x664>)
 80032da:	011b      	lsls	r3, r3, #4
 80032dc:	4413      	add	r3, r2
 80032de:	3302      	adds	r3, #2
 80032e0:	460a      	mov	r2, r1
 80032e2:	701a      	strb	r2, [r3, #0]
	//printf("Tx_seq             :%u\n", Hitachi_prms_st[Source_Index].Rx_Seq);
	BITSTUFFINC(8);
 80032e4:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80032e8:	3308      	adds	r3, #8
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	da00      	bge.n	80032f0 <Vital_Msg_extr+0x500>
 80032ee:	3307      	adds	r3, #7
 80032f0:	10db      	asrs	r3, r3, #3
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80032f8:	4413      	add	r3, r2
 80032fa:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80032fe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003302:	3308      	adds	r3, #8
 8003304:	b29b      	uxth	r3, r3
 8003306:	b21b      	sxth	r3, r3
 8003308:	425a      	negs	r2, r3
 800330a:	f003 0307 	and.w	r3, r3, #7
 800330e:	f002 0207 	and.w	r2, r2, #7
 8003312:	bf58      	it	pl
 8003314:	4253      	negpl	r3, r2
 8003316:	b21b      	sxth	r3, r3
 8003318:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	Hitachi_prms_st[Source_Index].Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800331c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	441a      	add	r2, r3
 8003324:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003328:	2108      	movs	r1, #8
 800332a:	4618      	mov	r0, r3
 800332c:	f7fd f972 	bl	8000614 <ExtractBits>
 8003330:	4602      	mov	r2, r0
 8003332:	78bb      	ldrb	r3, [r7, #2]
 8003334:	b2d1      	uxtb	r1, r2
 8003336:	4a47      	ldr	r2, [pc, #284]	; (8003454 <Vital_Msg_extr+0x664>)
 8003338:	011b      	lsls	r3, r3, #4
 800333a:	4413      	add	r3, r2
 800333c:	3301      	adds	r3, #1
 800333e:	460a      	mov	r2, r1
 8003340:	701a      	strb	r2, [r3, #0]
	//printf("Rx_seq             :%u\n", Hitachi_prms_st[Source_Index].Tx_Seq);
	if(Hitachi_prms_st[Source_Index].Tx_Seq == 0)
 8003342:	78bb      	ldrb	r3, [r7, #2]
 8003344:	4a43      	ldr	r2, [pc, #268]	; (8003454 <Vital_Msg_extr+0x664>)
 8003346:	011b      	lsls	r3, r3, #4
 8003348:	4413      	add	r3, r2
 800334a:	3301      	adds	r3, #1
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d138      	bne.n	80033c4 <Vital_Msg_extr+0x5d4>
	{
		printf("\nRX_Seq Roll over Detected Incremented self Vital Init Value:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8003352:	78bb      	ldrb	r3, [r7, #2]
 8003354:	4a40      	ldr	r2, [pc, #256]	; (8003458 <Vital_Msg_extr+0x668>)
 8003356:	3366      	adds	r3, #102	; 0x66
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	4413      	add	r3, r2
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	4619      	mov	r1, r3
 8003360:	483e      	ldr	r0, [pc, #248]	; (800345c <Vital_Msg_extr+0x66c>)
 8003362:	f01f fbcb 	bl	8022afc <iprintf>
		printf("Prev Val:%06lx:",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8003366:	78bb      	ldrb	r3, [r7, #2]
 8003368:	4a3a      	ldr	r2, [pc, #232]	; (8003454 <Vital_Msg_extr+0x664>)
 800336a:	011b      	lsls	r3, r3, #4
 800336c:	4413      	add	r3, r2
 800336e:	330c      	adds	r3, #12
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4619      	mov	r1, r3
 8003374:	483a      	ldr	r0, [pc, #232]	; (8003460 <Vital_Msg_extr+0x670>)
 8003376:	f01f fbc1 	bl	8022afc <iprintf>
		++Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 800337a:	78bb      	ldrb	r3, [r7, #2]
 800337c:	4935      	ldr	r1, [pc, #212]	; (8003454 <Vital_Msg_extr+0x664>)
 800337e:	011a      	lsls	r2, r3, #4
 8003380:	440a      	add	r2, r1
 8003382:	320c      	adds	r2, #12
 8003384:	6812      	ldr	r2, [r2, #0]
 8003386:	3201      	adds	r2, #1
 8003388:	4932      	ldr	r1, [pc, #200]	; (8003454 <Vital_Msg_extr+0x664>)
 800338a:	011b      	lsls	r3, r3, #4
 800338c:	440b      	add	r3, r1
 800338e:	330c      	adds	r3, #12
 8003390:	601a      	str	r2, [r3, #0]
		printf("Cur Val:%06lx\n",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8003392:	78bb      	ldrb	r3, [r7, #2]
 8003394:	4a2f      	ldr	r2, [pc, #188]	; (8003454 <Vital_Msg_extr+0x664>)
 8003396:	011b      	lsls	r3, r3, #4
 8003398:	4413      	add	r3, r2
 800339a:	330c      	adds	r3, #12
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4619      	mov	r1, r3
 80033a0:	4830      	ldr	r0, [pc, #192]	; (8003464 <Vital_Msg_extr+0x674>)
 80033a2:	f01f fbab 	bl	8022afc <iprintf>
		Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 80033a6:	78bb      	ldrb	r3, [r7, #2]
 80033a8:	78ba      	ldrb	r2, [r7, #2]
 80033aa:	492a      	ldr	r1, [pc, #168]	; (8003454 <Vital_Msg_extr+0x664>)
 80033ac:	011b      	lsls	r3, r3, #4
 80033ae:	440b      	add	r3, r1
 80033b0:	330c      	adds	r3, #12
 80033b2:	6819      	ldr	r1, [r3, #0]
 80033b4:	482c      	ldr	r0, [pc, #176]	; (8003468 <Vital_Msg_extr+0x678>)
 80033b6:	4613      	mov	r3, r2
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	4413      	add	r3, r2
 80033bc:	00db      	lsls	r3, r3, #3
 80033be:	4403      	add	r3, r0
 80033c0:	330c      	adds	r3, #12
 80033c2:	6019      	str	r1, [r3, #0]
	}
	BITSTUFFINC(8);
 80033c4:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80033c8:	3308      	adds	r3, #8
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	da00      	bge.n	80033d0 <Vital_Msg_extr+0x5e0>
 80033ce:	3307      	adds	r3, #7
 80033d0:	10db      	asrs	r3, r3, #3
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80033d8:	4413      	add	r3, r2
 80033da:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80033de:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80033e2:	3308      	adds	r3, #8
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	b21b      	sxth	r3, r3
 80033e8:	425a      	negs	r2, r3
 80033ea:	f003 0307 	and.w	r3, r3, #7
 80033ee:	f002 0207 	and.w	r2, r2, #7
 80033f2:	bf58      	it	pl
 80033f4:	4253      	negpl	r3, r2
 80033f6:	b21b      	sxth	r3, r3
 80033f8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	Hitachi_Vital_st[Source_Index].Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80033fc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	441a      	add	r2, r3
 8003404:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003408:	2108      	movs	r1, #8
 800340a:	4618      	mov	r0, r3
 800340c:	f7fd f902 	bl	8000614 <ExtractBits>
 8003410:	4603      	mov	r3, r0
 8003412:	78ba      	ldrb	r2, [r7, #2]
 8003414:	b2d8      	uxtb	r0, r3
 8003416:	490c      	ldr	r1, [pc, #48]	; (8003448 <Vital_Msg_extr+0x658>)
 8003418:	4613      	mov	r3, r2
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	4413      	add	r3, r2
 800341e:	011b      	lsls	r3, r3, #4
 8003420:	440b      	add	r3, r1
 8003422:	3302      	adds	r3, #2
 8003424:	4602      	mov	r2, r0
 8003426:	701a      	strb	r2, [r3, #0]
	//printf("Msg_Type           :%u\n",Hitachi_Vital_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 8003428:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800342c:	3308      	adds	r3, #8
 800342e:	2b00      	cmp	r3, #0
 8003430:	da1c      	bge.n	800346c <Vital_Msg_extr+0x67c>
 8003432:	3307      	adds	r3, #7
 8003434:	e01a      	b.n	800346c <Vital_Msg_extr+0x67c>
 8003436:	bf00      	nop
 8003438:	20000fb0 	.word	0x20000fb0
 800343c:	20000fd8 	.word	0x20000fd8
 8003440:	20001024 	.word	0x20001024
 8003444:	20001988 	.word	0x20001988
 8003448:	200013b0 	.word	0x200013b0
 800344c:	080245f4 	.word	0x080245f4
 8003450:	080245fc 	.word	0x080245fc
 8003454:	200011d0 	.word	0x200011d0
 8003458:	20000304 	.word	0x20000304
 800345c:	08024908 	.word	0x08024908
 8003460:	0802494c 	.word	0x0802494c
 8003464:	0802495c 	.word	0x0802495c
 8003468:	20001680 	.word	0x20001680
 800346c:	10db      	asrs	r3, r3, #3
 800346e:	b29a      	uxth	r2, r3
 8003470:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003474:	4413      	add	r3, r2
 8003476:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800347a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800347e:	3308      	adds	r3, #8
 8003480:	b29b      	uxth	r3, r3
 8003482:	b21b      	sxth	r3, r3
 8003484:	425a      	negs	r2, r3
 8003486:	f003 0307 	and.w	r3, r3, #7
 800348a:	f002 0207 	and.w	r2, r2, #7
 800348e:	bf58      	it	pl
 8003490:	4253      	negpl	r3, r2
 8003492:	b21b      	sxth	r3, r3
 8003494:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	Hitachi_prms_st[Source_Index].Msg_Status_Flag= ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8003498:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	441a      	add	r2, r3
 80034a0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80034a4:	2110      	movs	r1, #16
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7fd f8b4 	bl	8000614 <ExtractBits>
 80034ac:	4602      	mov	r2, r0
 80034ae:	78bb      	ldrb	r3, [r7, #2]
 80034b0:	b291      	uxth	r1, r2
 80034b2:	4abd      	ldr	r2, [pc, #756]	; (80037a8 <Vital_Msg_extr+0x9b8>)
 80034b4:	011b      	lsls	r3, r3, #4
 80034b6:	4413      	add	r3, r2
 80034b8:	3304      	adds	r3, #4
 80034ba:	460a      	mov	r2, r1
 80034bc:	801a      	strh	r2, [r3, #0]

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 80034be:	49bb      	ldr	r1, [pc, #748]	; (80037ac <Vital_Msg_extr+0x9bc>)
 80034c0:	48bb      	ldr	r0, [pc, #748]	; (80037b0 <Vital_Msg_extr+0x9c0>)
 80034c2:	f7fc febd 	bl	8000240 <strcmp>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d10f      	bne.n	80034ec <Vital_Msg_extr+0x6fc>
	{
		SET_BIT_USER(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag);
 80034cc:	78bb      	ldrb	r3, [r7, #2]
 80034ce:	4ab6      	ldr	r2, [pc, #728]	; (80037a8 <Vital_Msg_extr+0x9b8>)
 80034d0:	011b      	lsls	r3, r3, #4
 80034d2:	4413      	add	r3, r2
 80034d4:	3304      	adds	r3, #4
 80034d6:	881a      	ldrh	r2, [r3, #0]
 80034d8:	78bb      	ldrb	r3, [r7, #2]
 80034da:	f042 0208 	orr.w	r2, r2, #8
 80034de:	b291      	uxth	r1, r2
 80034e0:	4ab1      	ldr	r2, [pc, #708]	; (80037a8 <Vital_Msg_extr+0x9b8>)
 80034e2:	011b      	lsls	r3, r3, #4
 80034e4:	4413      	add	r3, r2
 80034e6:	3304      	adds	r3, #4
 80034e8:	460a      	mov	r2, r1
 80034ea:	801a      	strh	r2, [r3, #0]
	}
	//printf("Msg_sts_flag       :0x%04X\n", Hitachi_prms_st[Source_Index].Msg_Status_Flag);
	BITSTUFFINC(16);
 80034ec:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80034f0:	3310      	adds	r3, #16
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	da00      	bge.n	80034f8 <Vital_Msg_extr+0x708>
 80034f6:	3307      	adds	r3, #7
 80034f8:	10db      	asrs	r3, r3, #3
 80034fa:	b29a      	uxth	r2, r3
 80034fc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003500:	4413      	add	r3, r2
 8003502:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003506:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800350a:	3310      	adds	r3, #16
 800350c:	b29b      	uxth	r3, r3
 800350e:	b21b      	sxth	r3, r3
 8003510:	425a      	negs	r2, r3
 8003512:	f003 0307 	and.w	r3, r3, #7
 8003516:	f002 0207 	and.w	r2, r2, #7
 800351a:	bf58      	it	pl
 800351c:	4253      	negpl	r3, r2
 800351e:	b21b      	sxth	r3, r3
 8003520:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	//Debug_Status_Flag(Hitachi_prms_st[Source_Index].Msg_Status_Flag, Hitachi_Vital_st[Source_Index].Msg_Type);

	if ( ( SET == (CHECKFLAG(TIME_STAMP,Hitachi_prms_st[Source_Index].Msg_Status_Flag))) ) // Time-stamp Extraction
 8003524:	78bb      	ldrb	r3, [r7, #2]
 8003526:	4aa0      	ldr	r2, [pc, #640]	; (80037a8 <Vital_Msg_extr+0x9b8>)
 8003528:	011b      	lsls	r3, r3, #4
 800352a:	4413      	add	r3, r2
 800352c:	3304      	adds	r3, #4
 800352e:	881b      	ldrh	r3, [r3, #0]
 8003530:	f003 0320 	and.w	r3, r3, #32
 8003534:	2b00      	cmp	r3, #0
 8003536:	f000 8145 	beq.w	80037c4 <Vital_Msg_extr+0x9d4>
	{
		HITACHI_time_Stamp_st[Source_Index].YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800353a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	441a      	add	r2, r3
 8003542:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003546:	2108      	movs	r1, #8
 8003548:	4618      	mov	r0, r3
 800354a:	f7fd f863 	bl	8000614 <ExtractBits>
 800354e:	4603      	mov	r3, r0
 8003550:	78ba      	ldrb	r2, [r7, #2]
 8003552:	b2d8      	uxtb	r0, r3
 8003554:	4997      	ldr	r1, [pc, #604]	; (80037b4 <Vital_Msg_extr+0x9c4>)
 8003556:	4613      	mov	r3, r2
 8003558:	005b      	lsls	r3, r3, #1
 800355a:	4413      	add	r3, r2
 800355c:	005b      	lsls	r3, r3, #1
 800355e:	440b      	add	r3, r1
 8003560:	3305      	adds	r3, #5
 8003562:	4602      	mov	r2, r0
 8003564:	701a      	strb	r2, [r3, #0]
		//printf("YEAR               :%02X\n", HITACHI_time_Stamp_st[Source_Index].YY);
		BITSTUFFINC(8);
 8003566:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800356a:	3308      	adds	r3, #8
 800356c:	2b00      	cmp	r3, #0
 800356e:	da00      	bge.n	8003572 <Vital_Msg_extr+0x782>
 8003570:	3307      	adds	r3, #7
 8003572:	10db      	asrs	r3, r3, #3
 8003574:	b29a      	uxth	r2, r3
 8003576:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800357a:	4413      	add	r3, r2
 800357c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003580:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003584:	3308      	adds	r3, #8
 8003586:	b29b      	uxth	r3, r3
 8003588:	b21b      	sxth	r3, r3
 800358a:	425a      	negs	r2, r3
 800358c:	f003 0307 	and.w	r3, r3, #7
 8003590:	f002 0207 	and.w	r2, r2, #7
 8003594:	bf58      	it	pl
 8003596:	4253      	negpl	r3, r2
 8003598:	b21b      	sxth	r3, r3
 800359a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

		HITACHI_time_Stamp_st[Source_Index].MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800359e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	441a      	add	r2, r3
 80035a6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80035aa:	2108      	movs	r1, #8
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7fd f831 	bl	8000614 <ExtractBits>
 80035b2:	4603      	mov	r3, r0
 80035b4:	78ba      	ldrb	r2, [r7, #2]
 80035b6:	b2d8      	uxtb	r0, r3
 80035b8:	497e      	ldr	r1, [pc, #504]	; (80037b4 <Vital_Msg_extr+0x9c4>)
 80035ba:	4613      	mov	r3, r2
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	4413      	add	r3, r2
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	440b      	add	r3, r1
 80035c4:	3304      	adds	r3, #4
 80035c6:	4602      	mov	r2, r0
 80035c8:	701a      	strb	r2, [r3, #0]
		//printf("Month              :%02X\n", HITACHI_time_Stamp_st[Source_Index].MM);
		BITSTUFFINC(8);
 80035ca:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80035ce:	3308      	adds	r3, #8
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	da00      	bge.n	80035d6 <Vital_Msg_extr+0x7e6>
 80035d4:	3307      	adds	r3, #7
 80035d6:	10db      	asrs	r3, r3, #3
 80035d8:	b29a      	uxth	r2, r3
 80035da:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80035de:	4413      	add	r3, r2
 80035e0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80035e4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80035e8:	3308      	adds	r3, #8
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	b21b      	sxth	r3, r3
 80035ee:	425a      	negs	r2, r3
 80035f0:	f003 0307 	and.w	r3, r3, #7
 80035f4:	f002 0207 	and.w	r2, r2, #7
 80035f8:	bf58      	it	pl
 80035fa:	4253      	negpl	r3, r2
 80035fc:	b21b      	sxth	r3, r3
 80035fe:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

		HITACHI_time_Stamp_st[Source_Index].DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003602:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	441a      	add	r2, r3
 800360a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800360e:	2108      	movs	r1, #8
 8003610:	4618      	mov	r0, r3
 8003612:	f7fc ffff 	bl	8000614 <ExtractBits>
 8003616:	4603      	mov	r3, r0
 8003618:	78ba      	ldrb	r2, [r7, #2]
 800361a:	b2d8      	uxtb	r0, r3
 800361c:	4965      	ldr	r1, [pc, #404]	; (80037b4 <Vital_Msg_extr+0x9c4>)
 800361e:	4613      	mov	r3, r2
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	4413      	add	r3, r2
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	440b      	add	r3, r1
 8003628:	3303      	adds	r3, #3
 800362a:	4602      	mov	r2, r0
 800362c:	701a      	strb	r2, [r3, #0]
		//printf("Date               :%02X\n", HITACHI_time_Stamp_st[Source_Index].DD);
		BITSTUFFINC(8);
 800362e:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8003632:	3308      	adds	r3, #8
 8003634:	2b00      	cmp	r3, #0
 8003636:	da00      	bge.n	800363a <Vital_Msg_extr+0x84a>
 8003638:	3307      	adds	r3, #7
 800363a:	10db      	asrs	r3, r3, #3
 800363c:	b29a      	uxth	r2, r3
 800363e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003642:	4413      	add	r3, r2
 8003644:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003648:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800364c:	3308      	adds	r3, #8
 800364e:	b29b      	uxth	r3, r3
 8003650:	b21b      	sxth	r3, r3
 8003652:	425a      	negs	r2, r3
 8003654:	f003 0307 	and.w	r3, r3, #7
 8003658:	f002 0207 	and.w	r2, r2, #7
 800365c:	bf58      	it	pl
 800365e:	4253      	negpl	r3, r2
 8003660:	b21b      	sxth	r3, r3
 8003662:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

		HITACHI_time_Stamp_st[Source_Index].hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003666:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	441a      	add	r2, r3
 800366e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003672:	2108      	movs	r1, #8
 8003674:	4618      	mov	r0, r3
 8003676:	f7fc ffcd 	bl	8000614 <ExtractBits>
 800367a:	4603      	mov	r3, r0
 800367c:	78ba      	ldrb	r2, [r7, #2]
 800367e:	b2d8      	uxtb	r0, r3
 8003680:	494c      	ldr	r1, [pc, #304]	; (80037b4 <Vital_Msg_extr+0x9c4>)
 8003682:	4613      	mov	r3, r2
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	4413      	add	r3, r2
 8003688:	005b      	lsls	r3, r3, #1
 800368a:	440b      	add	r3, r1
 800368c:	4602      	mov	r2, r0
 800368e:	701a      	strb	r2, [r3, #0]
		//printf("HOURS              :%02X\n", HITACHI_time_Stamp_st[Source_Index].hh);
		BITSTUFFINC(8);
 8003690:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8003694:	3308      	adds	r3, #8
 8003696:	2b00      	cmp	r3, #0
 8003698:	da00      	bge.n	800369c <Vital_Msg_extr+0x8ac>
 800369a:	3307      	adds	r3, #7
 800369c:	10db      	asrs	r3, r3, #3
 800369e:	b29a      	uxth	r2, r3
 80036a0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80036a4:	4413      	add	r3, r2
 80036a6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80036aa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80036ae:	3308      	adds	r3, #8
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	b21b      	sxth	r3, r3
 80036b4:	425a      	negs	r2, r3
 80036b6:	f003 0307 	and.w	r3, r3, #7
 80036ba:	f002 0207 	and.w	r2, r2, #7
 80036be:	bf58      	it	pl
 80036c0:	4253      	negpl	r3, r2
 80036c2:	b21b      	sxth	r3, r3
 80036c4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

		HITACHI_time_Stamp_st[Source_Index].mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80036c8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	441a      	add	r2, r3
 80036d0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80036d4:	2108      	movs	r1, #8
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7fc ff9c 	bl	8000614 <ExtractBits>
 80036dc:	4603      	mov	r3, r0
 80036de:	78ba      	ldrb	r2, [r7, #2]
 80036e0:	b2d8      	uxtb	r0, r3
 80036e2:	4934      	ldr	r1, [pc, #208]	; (80037b4 <Vital_Msg_extr+0x9c4>)
 80036e4:	4613      	mov	r3, r2
 80036e6:	005b      	lsls	r3, r3, #1
 80036e8:	4413      	add	r3, r2
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	440b      	add	r3, r1
 80036ee:	3301      	adds	r3, #1
 80036f0:	4602      	mov	r2, r0
 80036f2:	701a      	strb	r2, [r3, #0]
		//printf("MINS               :%02X\n", HITACHI_time_Stamp_st[Source_Index].mm);
		BITSTUFFINC(8);
 80036f4:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80036f8:	3308      	adds	r3, #8
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	da00      	bge.n	8003700 <Vital_Msg_extr+0x910>
 80036fe:	3307      	adds	r3, #7
 8003700:	10db      	asrs	r3, r3, #3
 8003702:	b29a      	uxth	r2, r3
 8003704:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003708:	4413      	add	r3, r2
 800370a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800370e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003712:	3308      	adds	r3, #8
 8003714:	b29b      	uxth	r3, r3
 8003716:	b21b      	sxth	r3, r3
 8003718:	425a      	negs	r2, r3
 800371a:	f003 0307 	and.w	r3, r3, #7
 800371e:	f002 0207 	and.w	r2, r2, #7
 8003722:	bf58      	it	pl
 8003724:	4253      	negpl	r3, r2
 8003726:	b21b      	sxth	r3, r3
 8003728:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

		HITACHI_time_Stamp_st[Source_Index].ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800372c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	441a      	add	r2, r3
 8003734:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003738:	2108      	movs	r1, #8
 800373a:	4618      	mov	r0, r3
 800373c:	f7fc ff6a 	bl	8000614 <ExtractBits>
 8003740:	4603      	mov	r3, r0
 8003742:	78ba      	ldrb	r2, [r7, #2]
 8003744:	b2d8      	uxtb	r0, r3
 8003746:	491b      	ldr	r1, [pc, #108]	; (80037b4 <Vital_Msg_extr+0x9c4>)
 8003748:	4613      	mov	r3, r2
 800374a:	005b      	lsls	r3, r3, #1
 800374c:	4413      	add	r3, r2
 800374e:	005b      	lsls	r3, r3, #1
 8003750:	440b      	add	r3, r1
 8003752:	3302      	adds	r3, #2
 8003754:	4602      	mov	r2, r0
 8003756:	701a      	strb	r2, [r3, #0]
		//printf("SEC                :%02X\n", HITACHI_time_Stamp_st[Source_Index].ss);
		BITSTUFFINC(8);
 8003758:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800375c:	3308      	adds	r3, #8
 800375e:	2b00      	cmp	r3, #0
 8003760:	da00      	bge.n	8003764 <Vital_Msg_extr+0x974>
 8003762:	3307      	adds	r3, #7
 8003764:	10db      	asrs	r3, r3, #3
 8003766:	b29a      	uxth	r2, r3
 8003768:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800376c:	4413      	add	r3, r2
 800376e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003772:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003776:	3308      	adds	r3, #8
 8003778:	b29b      	uxth	r3, r3
 800377a:	b21b      	sxth	r3, r3
 800377c:	425a      	negs	r2, r3
 800377e:	f003 0307 	and.w	r3, r3, #7
 8003782:	f002 0207 	and.w	r2, r2, #7
 8003786:	bf58      	it	pl
 8003788:	4253      	negpl	r3, r2
 800378a:	b21b      	sxth	r3, r3
 800378c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
 8003790:	78bb      	ldrb	r3, [r7, #2]
 8003792:	4618      	mov	r0, r3
 8003794:	f005 fb4e 	bl	8008e34 <IS_MLK_EIPC_TIME_MATCHING>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00e      	beq.n	80037bc <Vital_Msg_extr+0x9cc>
 800379e:	78bb      	ldrb	r3, [r7, #2]
 80037a0:	4a05      	ldr	r2, [pc, #20]	; (80037b8 <Vital_Msg_extr+0x9c8>)
 80037a2:	2100      	movs	r1, #0
 80037a4:	54d1      	strb	r1, [r2, r3]
 80037a6:	e00d      	b.n	80037c4 <Vital_Msg_extr+0x9d4>
 80037a8:	200011d0 	.word	0x200011d0
 80037ac:	080242c0 	.word	0x080242c0
 80037b0:	20000305 	.word	0x20000305
 80037b4:	20001194 	.word	0x20001194
 80037b8:	200010e4 	.word	0x200010e4
 80037bc:	78bb      	ldrb	r3, [r7, #2]
 80037be:	4a86      	ldr	r2, [pc, #536]	; (80039d8 <Vital_Msg_extr+0xbe8>)
 80037c0:	2101      	movs	r1, #1
 80037c2:	54d1      	strb	r1, [r2, r3]


	}
	if ( ( SET == (CHECKFLAG(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag))) )
 80037c4:	78bb      	ldrb	r3, [r7, #2]
 80037c6:	4a85      	ldr	r2, [pc, #532]	; (80039dc <Vital_Msg_extr+0xbec>)
 80037c8:	011b      	lsls	r3, r3, #4
 80037ca:	4413      	add	r3, r2
 80037cc:	3304      	adds	r3, #4
 80037ce:	881b      	ldrh	r3, [r3, #0]
 80037d0:	f003 0308 	and.w	r3, r3, #8
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d002      	beq.n	80037de <Vital_Msg_extr+0x9ee>
	{
		LinkEstablishFlag = SET;
 80037d8:	2301      	movs	r3, #1
 80037da:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	}

	Hitachi_Vital_st[Source_Index].No_Outputs = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80037de:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	441a      	add	r2, r3
 80037e6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80037ea:	2108      	movs	r1, #8
 80037ec:	4618      	mov	r0, r3
 80037ee:	f7fc ff11 	bl	8000614 <ExtractBits>
 80037f2:	4603      	mov	r3, r0
 80037f4:	78ba      	ldrb	r2, [r7, #2]
 80037f6:	b2d8      	uxtb	r0, r3
 80037f8:	4979      	ldr	r1, [pc, #484]	; (80039e0 <Vital_Msg_extr+0xbf0>)
 80037fa:	4613      	mov	r3, r2
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	4413      	add	r3, r2
 8003800:	011b      	lsls	r3, r3, #4
 8003802:	440b      	add	r3, r1
 8003804:	3303      	adds	r3, #3
 8003806:	4602      	mov	r2, r0
 8003808:	701a      	strb	r2, [r3, #0]
	BITSTUFFINC(8);
 800380a:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800380e:	3308      	adds	r3, #8
 8003810:	2b00      	cmp	r3, #0
 8003812:	da00      	bge.n	8003816 <Vital_Msg_extr+0xa26>
 8003814:	3307      	adds	r3, #7
 8003816:	10db      	asrs	r3, r3, #3
 8003818:	b29a      	uxth	r2, r3
 800381a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800381e:	4413      	add	r3, r2
 8003820:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003824:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003828:	3308      	adds	r3, #8
 800382a:	b29b      	uxth	r3, r3
 800382c:	b21b      	sxth	r3, r3
 800382e:	425a      	negs	r2, r3
 8003830:	f003 0307 	and.w	r3, r3, #7
 8003834:	f002 0207 	and.w	r2, r2, #7
 8003838:	bf58      	it	pl
 800383a:	4253      	negpl	r3, r2
 800383c:	b21b      	sxth	r3, r3
 800383e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	printf("OP:%u ", Hitachi_Vital_st[Source_Index].No_Outputs);
 8003842:	78ba      	ldrb	r2, [r7, #2]
 8003844:	4966      	ldr	r1, [pc, #408]	; (80039e0 <Vital_Msg_extr+0xbf0>)
 8003846:	4613      	mov	r3, r2
 8003848:	005b      	lsls	r3, r3, #1
 800384a:	4413      	add	r3, r2
 800384c:	011b      	lsls	r3, r3, #4
 800384e:	440b      	add	r3, r1
 8003850:	3303      	adds	r3, #3
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	4619      	mov	r1, r3
 8003856:	4863      	ldr	r0, [pc, #396]	; (80039e4 <Vital_Msg_extr+0xbf4>)
 8003858:	f01f f950 	bl	8022afc <iprintf>

	Hitachi_Vital_st[Source_Index].Size_Num_val = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800385c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	441a      	add	r2, r3
 8003864:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003868:	2108      	movs	r1, #8
 800386a:	4618      	mov	r0, r3
 800386c:	f7fc fed2 	bl	8000614 <ExtractBits>
 8003870:	4603      	mov	r3, r0
 8003872:	78ba      	ldrb	r2, [r7, #2]
 8003874:	b2d8      	uxtb	r0, r3
 8003876:	495a      	ldr	r1, [pc, #360]	; (80039e0 <Vital_Msg_extr+0xbf0>)
 8003878:	4613      	mov	r3, r2
 800387a:	005b      	lsls	r3, r3, #1
 800387c:	4413      	add	r3, r2
 800387e:	011b      	lsls	r3, r3, #4
 8003880:	440b      	add	r3, r1
 8003882:	3304      	adds	r3, #4
 8003884:	4602      	mov	r2, r0
 8003886:	701a      	strb	r2, [r3, #0]
	BITSTUFFINC(8);
 8003888:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800388c:	3308      	adds	r3, #8
 800388e:	2b00      	cmp	r3, #0
 8003890:	da00      	bge.n	8003894 <Vital_Msg_extr+0xaa4>
 8003892:	3307      	adds	r3, #7
 8003894:	10db      	asrs	r3, r3, #3
 8003896:	b29a      	uxth	r2, r3
 8003898:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800389c:	4413      	add	r3, r2
 800389e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80038a2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80038a6:	3308      	adds	r3, #8
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	b21b      	sxth	r3, r3
 80038ac:	425a      	negs	r2, r3
 80038ae:	f003 0307 	and.w	r3, r3, #7
 80038b2:	f002 0207 	and.w	r2, r2, #7
 80038b6:	bf58      	it	pl
 80038b8:	4253      	negpl	r3, r2
 80038ba:	b21b      	sxth	r3, r3
 80038bc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	//printf("Sz_Num_Val_Data    :%u\n", Hitachi_Vital_st[Source_Index].Size_Num_val);

	noofIP = (Hitachi_Vital_st[Source_Index].No_Outputs % 8);
 80038c0:	78ba      	ldrb	r2, [r7, #2]
 80038c2:	4947      	ldr	r1, [pc, #284]	; (80039e0 <Vital_Msg_extr+0xbf0>)
 80038c4:	4613      	mov	r3, r2
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	4413      	add	r3, r2
 80038ca:	011b      	lsls	r3, r3, #4
 80038cc:	440b      	add	r3, r1
 80038ce:	3303      	adds	r3, #3
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	f003 0307 	and.w	r3, r3, #7
 80038d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (noofIP != 0)
 80038da:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00e      	beq.n	8003900 <Vital_Msg_extr+0xb10>
	{
		noofIP = ((Hitachi_Vital_st[Source_Index].No_Outputs / 8)) + 1; //	including 0th buffer
 80038e2:	78ba      	ldrb	r2, [r7, #2]
 80038e4:	493e      	ldr	r1, [pc, #248]	; (80039e0 <Vital_Msg_extr+0xbf0>)
 80038e6:	4613      	mov	r3, r2
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	4413      	add	r3, r2
 80038ec:	011b      	lsls	r3, r3, #4
 80038ee:	440b      	add	r3, r1
 80038f0:	3303      	adds	r3, #3
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	08db      	lsrs	r3, r3, #3
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	3301      	adds	r3, #1
 80038fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80038fe:	e00b      	b.n	8003918 <Vital_Msg_extr+0xb28>
	}
	else
	{
		noofIP = (Hitachi_Vital_st[Source_Index].No_Outputs / 8);
 8003900:	78ba      	ldrb	r2, [r7, #2]
 8003902:	4937      	ldr	r1, [pc, #220]	; (80039e0 <Vital_Msg_extr+0xbf0>)
 8003904:	4613      	mov	r3, r2
 8003906:	005b      	lsls	r3, r3, #1
 8003908:	4413      	add	r3, r2
 800390a:	011b      	lsls	r3, r3, #4
 800390c:	440b      	add	r3, r1
 800390e:	3303      	adds	r3, #3
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	08db      	lsrs	r3, r3, #3
 8003914:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	}
	for (Traverser = 0; Traverser < noofIP; ++Traverser)
 8003918:	2300      	movs	r3, #0
 800391a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800391e:	e04c      	b.n	80039ba <Vital_Msg_extr+0xbca>
	{
		Hitachi_Vital_st[Source_Index].Outputs[Traverser] = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003920:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	441a      	add	r2, r3
 8003928:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800392c:	2108      	movs	r1, #8
 800392e:	4618      	mov	r0, r3
 8003930:	f7fc fe70 	bl	8000614 <ExtractBits>
 8003934:	4603      	mov	r3, r0
 8003936:	78ba      	ldrb	r2, [r7, #2]
 8003938:	f8b7 105e 	ldrh.w	r1, [r7, #94]	; 0x5e
 800393c:	b2dc      	uxtb	r4, r3
 800393e:	4828      	ldr	r0, [pc, #160]	; (80039e0 <Vital_Msg_extr+0xbf0>)
 8003940:	4613      	mov	r3, r2
 8003942:	005b      	lsls	r3, r3, #1
 8003944:	4413      	add	r3, r2
 8003946:	011b      	lsls	r3, r3, #4
 8003948:	4403      	add	r3, r0
 800394a:	440b      	add	r3, r1
 800394c:	3305      	adds	r3, #5
 800394e:	4622      	mov	r2, r4
 8003950:	701a      	strb	r2, [r3, #0]
		printf("[%02u]:%02X ", Traverser,Hitachi_Vital_st[Source_Index].Outputs[Traverser]);
 8003952:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
 8003956:	78ba      	ldrb	r2, [r7, #2]
 8003958:	f8b7 105e 	ldrh.w	r1, [r7, #94]	; 0x5e
 800395c:	4c20      	ldr	r4, [pc, #128]	; (80039e0 <Vital_Msg_extr+0xbf0>)
 800395e:	4613      	mov	r3, r2
 8003960:	005b      	lsls	r3, r3, #1
 8003962:	4413      	add	r3, r2
 8003964:	011b      	lsls	r3, r3, #4
 8003966:	4423      	add	r3, r4
 8003968:	440b      	add	r3, r1
 800396a:	3305      	adds	r3, #5
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	461a      	mov	r2, r3
 8003970:	4601      	mov	r1, r0
 8003972:	481d      	ldr	r0, [pc, #116]	; (80039e8 <Vital_Msg_extr+0xbf8>)
 8003974:	f01f f8c2 	bl	8022afc <iprintf>
		BITSTUFFINC(8);
 8003978:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800397c:	3308      	adds	r3, #8
 800397e:	2b00      	cmp	r3, #0
 8003980:	da00      	bge.n	8003984 <Vital_Msg_extr+0xb94>
 8003982:	3307      	adds	r3, #7
 8003984:	10db      	asrs	r3, r3, #3
 8003986:	b29a      	uxth	r2, r3
 8003988:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800398c:	4413      	add	r3, r2
 800398e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003992:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003996:	3308      	adds	r3, #8
 8003998:	b29b      	uxth	r3, r3
 800399a:	b21b      	sxth	r3, r3
 800399c:	425a      	negs	r2, r3
 800399e:	f003 0307 	and.w	r3, r3, #7
 80039a2:	f002 0207 	and.w	r2, r2, #7
 80039a6:	bf58      	it	pl
 80039a8:	4253      	negpl	r3, r2
 80039aa:	b21b      	sxth	r3, r3
 80039ac:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	for (Traverser = 0; Traverser < noofIP; ++Traverser)
 80039b0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80039b4:	3301      	adds	r3, #1
 80039b6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80039ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80039be:	b29b      	uxth	r3, r3
 80039c0:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d3ab      	bcc.n	8003920 <Vital_Msg_extr+0xb30>
	}
	printf("\n");
 80039c8:	200a      	movs	r0, #10
 80039ca:	f01f f8af 	bl	8022b2c <putchar>

	for (Traverser = 0; Traverser < Hitachi_Vital_st[Source_Index].Size_Num_val; ++Traverser)
 80039ce:	2300      	movs	r3, #0
 80039d0:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80039d4:	e044      	b.n	8003a60 <Vital_Msg_extr+0xc70>
 80039d6:	bf00      	nop
 80039d8:	200010e4 	.word	0x200010e4
 80039dc:	200011d0 	.word	0x200011d0
 80039e0:	200013b0 	.word	0x200013b0
 80039e4:	0802496c 	.word	0x0802496c
 80039e8:	08024974 	.word	0x08024974
	{
		Hitachi_Vital_st[Source_Index].Num_Outputs[Traverser] = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80039ec:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	441a      	add	r2, r3
 80039f4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80039f8:	2108      	movs	r1, #8
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7fc fe0a 	bl	8000614 <ExtractBits>
 8003a00:	4603      	mov	r3, r0
 8003a02:	78ba      	ldrb	r2, [r7, #2]
 8003a04:	f8b7 105e 	ldrh.w	r1, [r7, #94]	; 0x5e
 8003a08:	b2dc      	uxtb	r4, r3
 8003a0a:	48c4      	ldr	r0, [pc, #784]	; (8003d1c <Vital_Msg_extr+0xf2c>)
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	005b      	lsls	r3, r3, #1
 8003a10:	4413      	add	r3, r2
 8003a12:	011b      	lsls	r3, r3, #4
 8003a14:	4403      	add	r3, r0
 8003a16:	440b      	add	r3, r1
 8003a18:	3315      	adds	r3, #21
 8003a1a:	4622      	mov	r2, r4
 8003a1c:	701a      	strb	r2, [r3, #0]
		//printf("Num op Values      :0x%02X\n",  Hitachi_Vital_st[Source_Index].Num_Outputs[Traverser]);
		BITSTUFFINC(8);
 8003a1e:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8003a22:	3308      	adds	r3, #8
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	da00      	bge.n	8003a2a <Vital_Msg_extr+0xc3a>
 8003a28:	3307      	adds	r3, #7
 8003a2a:	10db      	asrs	r3, r3, #3
 8003a2c:	b29a      	uxth	r2, r3
 8003a2e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003a32:	4413      	add	r3, r2
 8003a34:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003a38:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003a3c:	3308      	adds	r3, #8
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	b21b      	sxth	r3, r3
 8003a42:	425a      	negs	r2, r3
 8003a44:	f003 0307 	and.w	r3, r3, #7
 8003a48:	f002 0207 	and.w	r2, r2, #7
 8003a4c:	bf58      	it	pl
 8003a4e:	4253      	negpl	r3, r2
 8003a50:	b21b      	sxth	r3, r3
 8003a52:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	for (Traverser = 0; Traverser < Hitachi_Vital_st[Source_Index].Size_Num_val; ++Traverser)
 8003a56:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003a60:	78ba      	ldrb	r2, [r7, #2]
 8003a62:	49ae      	ldr	r1, [pc, #696]	; (8003d1c <Vital_Msg_extr+0xf2c>)
 8003a64:	4613      	mov	r3, r2
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	4413      	add	r3, r2
 8003a6a:	011b      	lsls	r3, r3, #4
 8003a6c:	440b      	add	r3, r1
 8003a6e:	3304      	adds	r3, #4
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d3b7      	bcc.n	80039ec <Vital_Msg_extr+0xbfc>
	}

	/* Reply to Vital Message */
	Send_Service_Signal_Message(Source_Index,Des_Index);
 8003a7c:	787a      	ldrb	r2, [r7, #1]
 8003a7e:	78bb      	ldrb	r3, [r7, #2]
 8003a80:	4611      	mov	r1, r2
 8003a82:	4618      	mov	r0, r3
 8003a84:	f003 fa6e 	bl	8006f64 <Send_Service_Signal_Message>
	/* Reply to Vital Message */

	/* To Send VITAL Message after Some Time say 500ms Later */
	Send_Vital_MSG_st.flag[Source_Index] = SET;
 8003a88:	78bb      	ldrb	r3, [r7, #2]
 8003a8a:	4aa5      	ldr	r2, [pc, #660]	; (8003d20 <Vital_Msg_extr+0xf30>)
 8003a8c:	2101      	movs	r1, #1
 8003a8e:	54d1      	strb	r1, [r2, r3]
	Send_Vital_MSG_st.Clk[Source_Index] = Ticks;
 8003a90:	78bb      	ldrb	r3, [r7, #2]
 8003a92:	4aa3      	ldr	r2, [pc, #652]	; (8003d20 <Vital_Msg_extr+0xf30>)
 8003a94:	3302      	adds	r3, #2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	4413      	add	r3, r2
 8003a9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a9c:	605a      	str	r2, [r3, #4]
	/* To Send VITAL Message after Some Time say 500ms Later */

	/*To Send VITAL DATA MESSAGE TO OTHER CARD*/
	if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY == RECEIVED)
 8003a9e:	78ba      	ldrb	r2, [r7, #2]
 8003aa0:	49a0      	ldr	r1, [pc, #640]	; (8003d24 <Vital_Msg_extr+0xf34>)
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	005b      	lsls	r3, r3, #1
 8003aa6:	4413      	add	r3, r2
 8003aa8:	00db      	lsls	r3, r3, #3
 8003aaa:	440b      	add	r3, r1
 8003aac:	3304      	adds	r3, #4
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d116      	bne.n	8003ae2 <Vital_Msg_extr+0xcf2>
	{
		memset(&Tx_VITAL_MSG_CAN_st,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8003ab4:	2246      	movs	r2, #70	; 0x46
 8003ab6:	2100      	movs	r1, #0
 8003ab8:	489b      	ldr	r0, [pc, #620]	; (8003d28 <Vital_Msg_extr+0xf38>)
 8003aba:	f01e ff37 	bl	802292c <memset>
		Tx_VITAL_MSG_CAN_st.Source_Peer_Index = Source_Index;
 8003abe:	78bb      	ldrb	r3, [r7, #2]
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	4b99      	ldr	r3, [pc, #612]	; (8003d28 <Vital_Msg_extr+0xf38>)
 8003ac4:	801a      	strh	r2, [r3, #0]
		Tx_VITAL_MSG_CAN_st.Packet_Length = Length;
 8003ac6:	78fb      	ldrb	r3, [r7, #3]
 8003ac8:	b29a      	uxth	r2, r3
 8003aca:	4b97      	ldr	r3, [pc, #604]	; (8003d28 <Vital_Msg_extr+0xf38>)
 8003acc:	809a      	strh	r2, [r3, #4]
		memcpy(Tx_VITAL_MSG_CAN_st.VITAL_MESSAGE,Buff,Length);
 8003ace:	78fb      	ldrb	r3, [r7, #3]
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	6879      	ldr	r1, [r7, #4]
 8003ad4:	4895      	ldr	r0, [pc, #596]	; (8003d2c <Vital_Msg_extr+0xf3c>)
 8003ad6:	f01e ff01 	bl	80228dc <memcpy>
#ifdef EI_1
		TransmitCanPkt(SEND_VITAL_MSG_1);
 8003ada:	f240 2003 	movw	r0, #515	; 0x203
 8003ade:	f00b ffd3 	bl	800fa88 <TransmitCanPkt>




	/* COPYING RELAYS INFO 2 Temporary Buffer */
	memset(&Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Relays_st[Source_Index].RelayIPS_Buff));
 8003ae2:	78ba      	ldrb	r2, [r7, #2]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	4413      	add	r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	4a90      	ldr	r2, [pc, #576]	; (8003d30 <Vital_Msg_extr+0xf40>)
 8003aee:	4413      	add	r3, r2
 8003af0:	3301      	adds	r3, #1
 8003af2:	2210      	movs	r2, #16
 8003af4:	2100      	movs	r1, #0
 8003af6:	4618      	mov	r0, r3
 8003af8:	f01e ff18 	bl	802292c <memset>
	memcpy(Relays_st[Source_Index].RelayIPS_Buff,Hitachi_Vital_st[Source_Index].Outputs,noofIP);
 8003afc:	78ba      	ldrb	r2, [r7, #2]
 8003afe:	4613      	mov	r3, r2
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	4413      	add	r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	4a8a      	ldr	r2, [pc, #552]	; (8003d30 <Vital_Msg_extr+0xf40>)
 8003b08:	4413      	add	r3, r2
 8003b0a:	1c58      	adds	r0, r3, #1
 8003b0c:	78ba      	ldrb	r2, [r7, #2]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	005b      	lsls	r3, r3, #1
 8003b12:	4413      	add	r3, r2
 8003b14:	011b      	lsls	r3, r3, #4
 8003b16:	4a81      	ldr	r2, [pc, #516]	; (8003d1c <Vital_Msg_extr+0xf2c>)
 8003b18:	4413      	add	r3, r2
 8003b1a:	3305      	adds	r3, #5
 8003b1c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8003b20:	4619      	mov	r1, r3
 8003b22:	f01e fedb 	bl	80228dc <memcpy>
	Relays_st[Source_Index].RelayIPS_CRC = GetCRC16(0,Relays_st[Source_Index].RelayIPS_Buff,noofIP);
 8003b26:	78ba      	ldrb	r2, [r7, #2]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4413      	add	r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	4a7f      	ldr	r2, [pc, #508]	; (8003d30 <Vital_Msg_extr+0xf40>)
 8003b32:	4413      	add	r3, r2
 8003b34:	3301      	adds	r3, #1
 8003b36:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8003b3a:	b212      	sxth	r2, r2
 8003b3c:	78bc      	ldrb	r4, [r7, #2]
 8003b3e:	4619      	mov	r1, r3
 8003b40:	2000      	movs	r0, #0
 8003b42:	f00f fb3f 	bl	80131c4 <GetCRC16>
 8003b46:	4603      	mov	r3, r0
 8003b48:	4619      	mov	r1, r3
 8003b4a:	4a79      	ldr	r2, [pc, #484]	; (8003d30 <Vital_Msg_extr+0xf40>)
 8003b4c:	4623      	mov	r3, r4
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	4423      	add	r3, r4
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	4413      	add	r3, r2
 8003b56:	3312      	adds	r3, #18
 8003b58:	460a      	mov	r2, r1
 8003b5a:	801a      	strh	r2, [r3, #0]
	Relays_st[Source_Index].No_ofIps = noofIP;
 8003b5c:	78ba      	ldrb	r2, [r7, #2]
 8003b5e:	4974      	ldr	r1, [pc, #464]	; (8003d30 <Vital_Msg_extr+0xf40>)
 8003b60:	4613      	mov	r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	4413      	add	r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	440b      	add	r3, r1
 8003b6a:	3311      	adds	r3, #17
 8003b6c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8003b70:	701a      	strb	r2, [r3, #0]
	Relays_st[Source_Index].Peer_Index = Source_Index;
 8003b72:	78ba      	ldrb	r2, [r7, #2]
 8003b74:	496e      	ldr	r1, [pc, #440]	; (8003d30 <Vital_Msg_extr+0xf40>)
 8003b76:	4613      	mov	r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	4413      	add	r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	440b      	add	r3, r1
 8003b80:	78ba      	ldrb	r2, [r7, #2]
 8003b82:	701a      	strb	r2, [r3, #0]


	/*	Checking whether the Link is Established or Not
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */
	if(LinkEstablishFlag == SET)
 8003b84:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d172      	bne.n	8003c72 <Vital_Msg_extr+0xe82>
	{
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8003b8c:	78ba      	ldrb	r2, [r7, #2]
 8003b8e:	4613      	mov	r3, r2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	4413      	add	r3, r2
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	4a67      	ldr	r2, [pc, #412]	; (8003d34 <Vital_Msg_extr+0xf44>)
 8003b98:	4413      	add	r3, r2
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	2210      	movs	r2, #16
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f01e fec3 	bl	802292c <memset>
		memcpy(&Main_Relays_st[Source_Index],&Relays_st[Source_Index],sizeof(Relays_st[Source_Index]));
 8003ba6:	78ba      	ldrb	r2, [r7, #2]
 8003ba8:	4613      	mov	r3, r2
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	4413      	add	r3, r2
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	4a60      	ldr	r2, [pc, #384]	; (8003d34 <Vital_Msg_extr+0xf44>)
 8003bb2:	1898      	adds	r0, r3, r2
 8003bb4:	78ba      	ldrb	r2, [r7, #2]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	4413      	add	r3, r2
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	4a5c      	ldr	r2, [pc, #368]	; (8003d30 <Vital_Msg_extr+0xf40>)
 8003bc0:	4413      	add	r3, r2
 8003bc2:	2214      	movs	r2, #20
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	f01e fe89 	bl	80228dc <memcpy>
		Last_Vital_Received_Clk[Source_Index] = Ticks;
 8003bca:	78bb      	ldrb	r3, [r7, #2]
 8003bcc:	495a      	ldr	r1, [pc, #360]	; (8003d38 <Vital_Msg_extr+0xf48>)
 8003bce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003bd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		if(Prev_Relay_CRC[Source_Index] != Main_Relays_st[Source_Index].RelayIPS_CRC)
 8003bd4:	78bb      	ldrb	r3, [r7, #2]
 8003bd6:	4a59      	ldr	r2, [pc, #356]	; (8003d3c <Vital_Msg_extr+0xf4c>)
 8003bd8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8003bdc:	78ba      	ldrb	r2, [r7, #2]
 8003bde:	4855      	ldr	r0, [pc, #340]	; (8003d34 <Vital_Msg_extr+0xf44>)
 8003be0:	4613      	mov	r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	4413      	add	r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	4403      	add	r3, r0
 8003bea:	3312      	adds	r3, #18
 8003bec:	881b      	ldrh	r3, [r3, #0]
 8003bee:	4299      	cmp	r1, r3
 8003bf0:	d03f      	beq.n	8003c72 <Vital_Msg_extr+0xe82>
		{
			Prev_Relay_CRC[Source_Index] = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8003bf2:	78ba      	ldrb	r2, [r7, #2]
 8003bf4:	78b9      	ldrb	r1, [r7, #2]
 8003bf6:	484f      	ldr	r0, [pc, #316]	; (8003d34 <Vital_Msg_extr+0xf44>)
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	4413      	add	r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	4403      	add	r3, r0
 8003c02:	3312      	adds	r3, #18
 8003c04:	881a      	ldrh	r2, [r3, #0]
 8003c06:	4b4d      	ldr	r3, [pc, #308]	; (8003d3c <Vital_Msg_extr+0xf4c>)
 8003c08:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			memset(&Tx_Temp_Main_Relays_st,0,sizeof(Tx_Temp_Main_Relays_st));
 8003c0c:	2214      	movs	r2, #20
 8003c0e:	2100      	movs	r1, #0
 8003c10:	484b      	ldr	r0, [pc, #300]	; (8003d40 <Vital_Msg_extr+0xf50>)
 8003c12:	f01e fe8b 	bl	802292c <memset>
			memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Source_Index],sizeof(Tx_Temp_Main_Relays_st));
 8003c16:	78ba      	ldrb	r2, [r7, #2]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	4413      	add	r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	4a44      	ldr	r2, [pc, #272]	; (8003d34 <Vital_Msg_extr+0xf44>)
 8003c22:	4413      	add	r3, r2
 8003c24:	2214      	movs	r2, #20
 8003c26:	4619      	mov	r1, r3
 8003c28:	4845      	ldr	r0, [pc, #276]	; (8003d40 <Vital_Msg_extr+0xf50>)
 8003c2a:	f01e fe57 	bl	80228dc <memcpy>
#ifdef EI_1
			TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 8003c2e:	f240 2007 	movw	r0, #519	; 0x207
 8003c32:	f00b ff29 	bl	800fa88 <TransmitCanPkt>
#endif
#ifdef EI_2
			TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif

			if(MisMatchFlag[Source_Index] == CLEAR)
 8003c36:	78bb      	ldrb	r3, [r7, #2]
 8003c38:	4a42      	ldr	r2, [pc, #264]	; (8003d44 <Vital_Msg_extr+0xf54>)
 8003c3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d117      	bne.n	8003c72 <Vital_Msg_extr+0xe82>
			{
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Source_Index * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Source_Index].RelayIPS_Buff,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8003c42:	78bb      	ldrb	r3, [r7, #2]
 8003c44:	011b      	lsls	r3, r3, #4
 8003c46:	4a40      	ldr	r2, [pc, #256]	; (8003d48 <Vital_Msg_extr+0xf58>)
 8003c48:	4413      	add	r3, r2
 8003c4a:	1c98      	adds	r0, r3, #2
 8003c4c:	78ba      	ldrb	r2, [r7, #2]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	4413      	add	r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	4a37      	ldr	r2, [pc, #220]	; (8003d34 <Vital_Msg_extr+0xf44>)
 8003c58:	4413      	add	r3, r2
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	2210      	movs	r2, #16
 8003c5e:	4619      	mov	r1, r3
 8003c60:	f01e fe3c 	bl	80228dc <memcpy>
#ifdef EI_1
				TransmitCanPkt(EI_PROCESS_DATA);
 8003c64:	f240 1019 	movw	r0, #281	; 0x119
 8003c68:	f00b ff0e 	bl	800fa88 <TransmitCanPkt>
				MIE_Signal_Send_CLK = Ticks;
 8003c6c:	4a37      	ldr	r2, [pc, #220]	; (8003d4c <Vital_Msg_extr+0xf5c>)
 8003c6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c70:	6013      	str	r3, [r2, #0]

		}
	}

	/*	Sending Message Details to Other Card */
	Tx_Ei_self_sharing_st[Source_Index].VITAL_DATA_CRC = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8003c72:	78b9      	ldrb	r1, [r7, #2]
 8003c74:	78ba      	ldrb	r2, [r7, #2]
 8003c76:	482f      	ldr	r0, [pc, #188]	; (8003d34 <Vital_Msg_extr+0xf44>)
 8003c78:	460b      	mov	r3, r1
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	440b      	add	r3, r1
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	4403      	add	r3, r0
 8003c82:	3312      	adds	r3, #18
 8003c84:	8818      	ldrh	r0, [r3, #0]
 8003c86:	4927      	ldr	r1, [pc, #156]	; (8003d24 <Vital_Msg_extr+0xf34>)
 8003c88:	4613      	mov	r3, r2
 8003c8a:	005b      	lsls	r3, r3, #1
 8003c8c:	4413      	add	r3, r2
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	440b      	add	r3, r1
 8003c92:	3306      	adds	r3, #6
 8003c94:	4602      	mov	r2, r0
 8003c96:	801a      	strh	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_CRC = Recv_CRC;
 8003c98:	78ba      	ldrb	r2, [r7, #2]
 8003c9a:	4922      	ldr	r1, [pc, #136]	; (8003d24 <Vital_Msg_extr+0xf34>)
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	005b      	lsls	r3, r3, #1
 8003ca0:	4413      	add	r3, r2
 8003ca2:	00db      	lsls	r3, r3, #3
 8003ca4:	440b      	add	r3, r1
 8003ca6:	3314      	adds	r3, #20
 8003ca8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003caa:	601a      	str	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_Msg_Type = VDATAMSG;
 8003cac:	78ba      	ldrb	r2, [r7, #2]
 8003cae:	491d      	ldr	r1, [pc, #116]	; (8003d24 <Vital_Msg_extr+0xf34>)
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	005b      	lsls	r3, r3, #1
 8003cb4:	4413      	add	r3, r2
 8003cb6:	00db      	lsls	r3, r3, #3
 8003cb8:	440b      	add	r3, r1
 8003cba:	3305      	adds	r3, #5
 8003cbc:	2202      	movs	r2, #2
 8003cbe:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 8003cc0:	78ba      	ldrb	r2, [r7, #2]
 8003cc2:	4918      	ldr	r1, [pc, #96]	; (8003d24 <Vital_Msg_extr+0xf34>)
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	005b      	lsls	r3, r3, #1
 8003cc8:	4413      	add	r3, r2
 8003cca:	00db      	lsls	r3, r3, #3
 8003ccc:	440b      	add	r3, r1
 8003cce:	78ba      	ldrb	r2, [r7, #2]
 8003cd0:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 8003cd2:	78ba      	ldrb	r2, [r7, #2]
 8003cd4:	4913      	ldr	r1, [pc, #76]	; (8003d24 <Vital_Msg_extr+0xf34>)
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	005b      	lsls	r3, r3, #1
 8003cda:	4413      	add	r3, r2
 8003cdc:	00db      	lsls	r3, r3, #3
 8003cde:	440b      	add	r3, r1
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].LinkEstablishFlag = LinkEstablishFlag;
 8003ce6:	78ba      	ldrb	r2, [r7, #2]
 8003ce8:	490e      	ldr	r1, [pc, #56]	; (8003d24 <Vital_Msg_extr+0xf34>)
 8003cea:	4613      	mov	r3, r2
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	4413      	add	r3, r2
 8003cf0:	00db      	lsls	r3, r3, #3
 8003cf2:	440b      	add	r3, r1
 8003cf4:	3302      	adds	r3, #2
 8003cf6:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8003cfa:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8003cfc:	2218      	movs	r2, #24
 8003cfe:	2100      	movs	r1, #0
 8003d00:	4813      	ldr	r0, [pc, #76]	; (8003d50 <Vital_Msg_extr+0xf60>)
 8003d02:	f01e fe13 	bl	802292c <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 8003d06:	78ba      	ldrb	r2, [r7, #2]
 8003d08:	4613      	mov	r3, r2
 8003d0a:	005b      	lsls	r3, r3, #1
 8003d0c:	4413      	add	r3, r2
 8003d0e:	00db      	lsls	r3, r3, #3
 8003d10:	4a04      	ldr	r2, [pc, #16]	; (8003d24 <Vital_Msg_extr+0xf34>)
 8003d12:	4413      	add	r3, r2
 8003d14:	2218      	movs	r2, #24
 8003d16:	4619      	mov	r1, r3
 8003d18:	e01c      	b.n	8003d54 <Vital_Msg_extr+0xf64>
 8003d1a:	bf00      	nop
 8003d1c:	200013b0 	.word	0x200013b0
 8003d20:	20001ca0 	.word	0x20001ca0
 8003d24:	20001680 	.word	0x20001680
 8003d28:	20001890 	.word	0x20001890
 8003d2c:	20001896 	.word	0x20001896
 8003d30:	20001dc4 	.word	0x20001dc4
 8003d34:	20001e8c 	.word	0x20001e8c
 8003d38:	20000ee4 	.word	0x20000ee4
 8003d3c:	20000f0c 	.word	0x20000f0c
 8003d40:	2000201c 	.word	0x2000201c
 8003d44:	20000ed0 	.word	0x20000ed0
 8003d48:	200010f0 	.word	0x200010f0
 8003d4c:	20000e7c 	.word	0x20000e7c
 8003d50:	20001860 	.word	0x20001860
 8003d54:	482b      	ldr	r0, [pc, #172]	; (8003e04 <Vital_Msg_extr+0x1014>)
 8003d56:	f01e fdc1 	bl	80228dc <memcpy>

#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
 8003d5a:	f240 2001 	movw	r0, #513	; 0x201
 8003d5e:	f00b fe93 	bl	800fa88 <TransmitCanPkt>
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
#endif
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 8003d62:	78ba      	ldrb	r2, [r7, #2]
 8003d64:	4928      	ldr	r1, [pc, #160]	; (8003e08 <Vital_Msg_extr+0x1018>)
 8003d66:	4613      	mov	r3, r2
 8003d68:	005b      	lsls	r3, r3, #1
 8003d6a:	4413      	add	r3, r2
 8003d6c:	00db      	lsls	r3, r3, #3
 8003d6e:	440b      	add	r3, r1
 8003d70:	3301      	adds	r3, #1
 8003d72:	2200      	movs	r2, #0
 8003d74:	701a      	strb	r2, [r3, #0]
	Self_Sharing_CAN_Clk[Source_Index] = Ticks;
 8003d76:	78bb      	ldrb	r3, [r7, #2]
 8003d78:	4924      	ldr	r1, [pc, #144]	; (8003e0c <Vital_Msg_extr+0x101c>)
 8003d7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	/*	Sending Message Details to Other Card */


	/* Checking the Link Status */
	if(LinkEstablishFlag == SET)
 8003d80:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d11d      	bne.n	8003dc4 <Vital_Msg_extr+0xfd4>
	{
		Link_Establish_Clock[Source_Index] = Ticks;
 8003d88:	78bb      	ldrb	r3, [r7, #2]
 8003d8a:	4921      	ldr	r1, [pc, #132]	; (8003e10 <Vital_Msg_extr+0x1020>)
 8003d8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishClk = Ticks;
 8003d92:	78ba      	ldrb	r2, [r7, #2]
 8003d94:	491f      	ldr	r1, [pc, #124]	; (8003e14 <Vital_Msg_extr+0x1024>)
 8003d96:	4613      	mov	r3, r2
 8003d98:	005b      	lsls	r3, r3, #1
 8003d9a:	4413      	add	r3, r2
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	440b      	add	r3, r1
 8003da0:	3304      	adds	r3, #4
 8003da2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003da4:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = SET;
 8003da6:	78ba      	ldrb	r2, [r7, #2]
 8003da8:	491a      	ldr	r1, [pc, #104]	; (8003e14 <Vital_Msg_extr+0x1024>)
 8003daa:	4613      	mov	r3, r2
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	4413      	add	r3, r2
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	440b      	add	r3, r1
 8003db4:	3301      	adds	r3, #1
 8003db6:	2201      	movs	r2, #1
 8003db8:	701a      	strb	r2, [r3, #0]
		Link_Flag[Source_Index] = SET;
 8003dba:	78bb      	ldrb	r3, [r7, #2]
 8003dbc:	4a16      	ldr	r2, [pc, #88]	; (8003e18 <Vital_Msg_extr+0x1028>)
 8003dbe:	2101      	movs	r1, #1
 8003dc0:	54d1      	strb	r1, [r2, r3]
 8003dc2:	e017      	b.n	8003df4 <Vital_Msg_extr+0x1004>
	}
	else
	{
		Link_Flag[Source_Index] = CLEAR;
 8003dc4:	78bb      	ldrb	r3, [r7, #2]
 8003dc6:	4a14      	ldr	r2, [pc, #80]	; (8003e18 <Vital_Msg_extr+0x1028>)
 8003dc8:	2100      	movs	r1, #0
 8003dca:	54d1      	strb	r1, [r2, r3]
		Hitachi_clk_flags_st[Source_Index].Link_FailClk = Ticks;
 8003dcc:	78ba      	ldrb	r2, [r7, #2]
 8003dce:	4911      	ldr	r1, [pc, #68]	; (8003e14 <Vital_Msg_extr+0x1024>)
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	005b      	lsls	r3, r3, #1
 8003dd4:	4413      	add	r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	440b      	add	r3, r1
 8003dda:	3308      	adds	r3, #8
 8003ddc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003dde:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = CLEAR;
 8003de0:	78ba      	ldrb	r2, [r7, #2]
 8003de2:	490c      	ldr	r1, [pc, #48]	; (8003e14 <Vital_Msg_extr+0x1024>)
 8003de4:	4613      	mov	r3, r2
 8003de6:	005b      	lsls	r3, r3, #1
 8003de8:	4413      	add	r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	440b      	add	r3, r1
 8003dee:	3301      	adds	r3, #1
 8003df0:	2200      	movs	r2, #0
 8003df2:	701a      	strb	r2, [r3, #0]
	}
	/* Checking the Link Status */

	HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 8003df4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003df8:	4808      	ldr	r0, [pc, #32]	; (8003e1c <Vital_Msg_extr+0x102c>)
 8003dfa:	f014 fb5e 	bl	80184ba <HAL_GPIO_TogglePin>

}
 8003dfe:	3764      	adds	r7, #100	; 0x64
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd90      	pop	{r4, r7, pc}
 8003e04:	20001860 	.word	0x20001860
 8003e08:	20001680 	.word	0x20001680
 8003e0c:	20000e50 	.word	0x20000e50
 8003e10:	20000f20 	.word	0x20000f20
 8003e14:	20001cd4 	.word	0x20001cd4
 8003e18:	20000f70 	.word	0x20000f70
 8003e1c:	40021c00 	.word	0x40021c00

08003e20 <Send_Vital_Data_Message>:

void Send_Vital_Data_Message(uint8_t Source_Index,uint8_t Des_Index)
{
 8003e20:	b590      	push	{r4, r7, lr}
 8003e22:	b0a5      	sub	sp, #148	; 0x94
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	4603      	mov	r3, r0
 8003e28:	460a      	mov	r2, r1
 8003e2a:	71fb      	strb	r3, [r7, #7]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	71bb      	strb	r3, [r7, #6]
	uint8_t Transmit_Buff[60] = {0,};
 8003e30:	2300      	movs	r3, #0
 8003e32:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e34:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003e38:	2238      	movs	r2, #56	; 0x38
 8003e3a:	2100      	movs	r1, #0
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f01e fd75 	bl	802292c <memset>
	uint8_t Temp_Buff[60] = {0,};
 8003e42:	2300      	movs	r3, #0
 8003e44:	60fb      	str	r3, [r7, #12]
 8003e46:	f107 0310 	add.w	r3, r7, #16
 8003e4a:	2238      	movs	r2, #56	; 0x38
 8003e4c:	2100      	movs	r1, #0
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f01e fd6c 	bl	802292c <memset>
	uint8_t uc_index = 0;
 8003e54:	2300      	movs	r3, #0
 8003e56:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	BITSTUFFINIT(0, 0);
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8003e60:	2300      	movs	r3, #0
 8003e62:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	memset(Transmit_Buff,0,sizeof(Transmit_Buff));
 8003e66:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e6a:	223c      	movs	r2, #60	; 0x3c
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f01e fd5c 	bl	802292c <memset>

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_SOM);
 8003e74:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003e78:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003e7c:	441a      	add	r2, r3
 8003e7e:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8003e82:	23f4      	movs	r3, #244	; 0xf4
 8003e84:	2108      	movs	r1, #8
 8003e86:	f7fc fc51 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8003e8a:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8003e8e:	3308      	adds	r3, #8
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	da00      	bge.n	8003e96 <Send_Vital_Data_Message+0x76>
 8003e94:	3307      	adds	r3, #7
 8003e96:	10db      	asrs	r3, r3, #3
 8003e98:	b29a      	uxth	r2, r3
 8003e9a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003e9e:	4413      	add	r3, r2
 8003ea0:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8003ea4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003ea8:	3308      	adds	r3, #8
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	b21b      	sxth	r3, r3
 8003eae:	425a      	negs	r2, r3
 8003eb0:	f003 0307 	and.w	r3, r3, #7
 8003eb4:	f002 0207 	and.w	r2, r2, #7
 8003eb8:	bf58      	it	pl
 8003eba:	4253      	negpl	r3, r2
 8003ebc:	b21b      	sxth	r3, r3
 8003ebe:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8003ec2:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003ec6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003eca:	441a      	add	r2, r3
 8003ecc:	79fb      	ldrb	r3, [r7, #7]
 8003ece:	49c6      	ldr	r1, [pc, #792]	; (80041e8 <Send_Vital_Data_Message+0x3c8>)
 8003ed0:	3366      	adds	r3, #102	; 0x66
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	440b      	add	r3, r1
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8003edc:	2110      	movs	r1, #16
 8003ede:	f7fc fc25 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8003ee2:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8003ee6:	3310      	adds	r3, #16
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	da00      	bge.n	8003eee <Send_Vital_Data_Message+0xce>
 8003eec:	3307      	adds	r3, #7
 8003eee:	10db      	asrs	r3, r3, #3
 8003ef0:	b29a      	uxth	r2, r3
 8003ef2:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003ef6:	4413      	add	r3, r2
 8003ef8:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8003efc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003f00:	3310      	adds	r3, #16
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	b21b      	sxth	r3, r3
 8003f06:	425a      	negs	r2, r3
 8003f08:	f003 0307 	and.w	r3, r3, #7
 8003f0c:	f002 0207 	and.w	r2, r2, #7
 8003f10:	bf58      	it	pl
 8003f12:	4253      	negpl	r3, r2
 8003f14:	b21b      	sxth	r3, r3
 8003f16:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]);
 8003f1a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003f1e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003f22:	441a      	add	r2, r3
 8003f24:	79fb      	ldrb	r3, [r7, #7]
 8003f26:	49b0      	ldr	r1, [pc, #704]	; (80041e8 <Send_Vital_Data_Message+0x3c8>)
 8003f28:	3370      	adds	r3, #112	; 0x70
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	440b      	add	r3, r1
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8003f34:	2110      	movs	r1, #16
 8003f36:	f7fc fbf9 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8003f3a:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8003f3e:	3310      	adds	r3, #16
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	da00      	bge.n	8003f46 <Send_Vital_Data_Message+0x126>
 8003f44:	3307      	adds	r3, #7
 8003f46:	10db      	asrs	r3, r3, #3
 8003f48:	b29a      	uxth	r2, r3
 8003f4a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003f4e:	4413      	add	r3, r2
 8003f50:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8003f54:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003f58:	3310      	adds	r3, #16
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	b21b      	sxth	r3, r3
 8003f5e:	425a      	negs	r2, r3
 8003f60:	f003 0307 	and.w	r3, r3, #7
 8003f64:	f002 0207 	and.w	r2, r2, #7
 8003f68:	bf58      	it	pl
 8003f6a:	4253      	negpl	r3, r2
 8003f6c:	b21b      	sxth	r3, r3
 8003f6e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a


	if( ( (CHECKFLAG(2,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8003f72:	4b9e      	ldr	r3, [pc, #632]	; (80041ec <Send_Vital_Data_Message+0x3cc>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	089b      	lsrs	r3, r3, #2
 8003f78:	f003 0301 	and.w	r3, r3, #1
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d035      	beq.n	8003fec <Send_Vital_Data_Message+0x1cc>
 8003f80:	4b9a      	ldr	r3, [pc, #616]	; (80041ec <Send_Vital_Data_Message+0x3cc>)
 8003f82:	791b      	ldrb	r3, [r3, #4]
 8003f84:	79fa      	ldrb	r2, [r7, #7]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d130      	bne.n	8003fec <Send_Vital_Data_Message+0x1cc>
	{
		uint8_t Rand_Number = 0;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
#ifdef STM_32
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 200);
 8003f90:	4897      	ldr	r0, [pc, #604]	; (80041f0 <Send_Vital_Data_Message+0x3d0>)
 8003f92:	f016 fa5b 	bl	801a44c <HAL_RNG_GetRandomNumber>
 8003f96:	4602      	mov	r2, r0
 8003f98:	4b96      	ldr	r3, [pc, #600]	; (80041f4 <Send_Vital_Data_Message+0x3d4>)
 8003f9a:	fba3 1302 	umull	r1, r3, r3, r2
 8003f9e:	099b      	lsrs	r3, r3, #6
 8003fa0:	21c8      	movs	r1, #200	; 0xc8
 8003fa2:	fb01 f303 	mul.w	r3, r1, r3
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
#endif
		printf("Injected Tx Sequence value failure\n");
 8003fac:	4892      	ldr	r0, [pc, #584]	; (80041f8 <Send_Vital_Data_Message+0x3d8>)
 8003fae:	f01e fe41 	bl	8022c34 <puts>
		printf("Actual   Tx Sequence vale:%u\n",Hitachi_prms_st[Source_Index].Tx_Seq);
 8003fb2:	79fb      	ldrb	r3, [r7, #7]
 8003fb4:	4a91      	ldr	r2, [pc, #580]	; (80041fc <Send_Vital_Data_Message+0x3dc>)
 8003fb6:	011b      	lsls	r3, r3, #4
 8003fb8:	4413      	add	r3, r2
 8003fba:	3301      	adds	r3, #1
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	488f      	ldr	r0, [pc, #572]	; (8004200 <Send_Vital_Data_Message+0x3e0>)
 8003fc2:	f01e fd9b 	bl	8022afc <iprintf>
		printf("Injected Tx Sequence value:%u\n",Rand_Number);
 8003fc6:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8003fca:	4619      	mov	r1, r3
 8003fcc:	488d      	ldr	r0, [pc, #564]	; (8004204 <Send_Vital_Data_Message+0x3e4>)
 8003fce:	f01e fd95 	bl	8022afc <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number);
 8003fd2:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003fd6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003fda:	441a      	add	r2, r3
 8003fdc:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8003fe0:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8003fe4:	2108      	movs	r1, #8
 8003fe6:	f7fc fba1 	bl	800072c <InsertBits>
	{
 8003fea:	e00f      	b.n	800400c <Send_Vital_Data_Message+0x1ec>
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Seq); // TX Seq Number
 8003fec:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003ff0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003ff4:	441a      	add	r2, r3
 8003ff6:	79fb      	ldrb	r3, [r7, #7]
 8003ff8:	4980      	ldr	r1, [pc, #512]	; (80041fc <Send_Vital_Data_Message+0x3dc>)
 8003ffa:	011b      	lsls	r3, r3, #4
 8003ffc:	440b      	add	r3, r1
 8003ffe:	3301      	adds	r3, #1
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004006:	2108      	movs	r1, #8
 8004008:	f7fc fb90 	bl	800072c <InsertBits>
	}
	//Last Received Packet Rx_seq number is our TX_Seq Number
	BITSTUFFINC(8);
 800400c:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004010:	3308      	adds	r3, #8
 8004012:	2b00      	cmp	r3, #0
 8004014:	da00      	bge.n	8004018 <Send_Vital_Data_Message+0x1f8>
 8004016:	3307      	adds	r3, #7
 8004018:	10db      	asrs	r3, r3, #3
 800401a:	b29a      	uxth	r2, r3
 800401c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004020:	4413      	add	r3, r2
 8004022:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004026:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800402a:	3308      	adds	r3, #8
 800402c:	b29b      	uxth	r3, r3
 800402e:	b21b      	sxth	r3, r3
 8004030:	425a      	negs	r2, r3
 8004032:	f003 0307 	and.w	r3, r3, #7
 8004036:	f002 0207 	and.w	r2, r2, #7
 800403a:	bf58      	it	pl
 800403c:	4253      	negpl	r3, r2
 800403e:	b21b      	sxth	r3, r3
 8004040:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a


	if( ( (CHECKFLAG(3,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8004044:	4b69      	ldr	r3, [pc, #420]	; (80041ec <Send_Vital_Data_Message+0x3cc>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	08db      	lsrs	r3, r3, #3
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b00      	cmp	r3, #0
 8004050:	d035      	beq.n	80040be <Send_Vital_Data_Message+0x29e>
 8004052:	4b66      	ldr	r3, [pc, #408]	; (80041ec <Send_Vital_Data_Message+0x3cc>)
 8004054:	791b      	ldrb	r3, [r3, #4]
 8004056:	79fa      	ldrb	r2, [r7, #7]
 8004058:	429a      	cmp	r2, r3
 800405a:	d130      	bne.n	80040be <Send_Vital_Data_Message+0x29e>
	{
		uint8_t Rand_Number  = 0;
 800405c:	2300      	movs	r3, #0
 800405e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
#ifdef STM_32
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 200 );
 8004062:	4863      	ldr	r0, [pc, #396]	; (80041f0 <Send_Vital_Data_Message+0x3d0>)
 8004064:	f016 f9f2 	bl	801a44c <HAL_RNG_GetRandomNumber>
 8004068:	4602      	mov	r2, r0
 800406a:	4b62      	ldr	r3, [pc, #392]	; (80041f4 <Send_Vital_Data_Message+0x3d4>)
 800406c:	fba3 1302 	umull	r1, r3, r3, r2
 8004070:	099b      	lsrs	r3, r3, #6
 8004072:	21c8      	movs	r1, #200	; 0xc8
 8004074:	fb01 f303 	mul.w	r3, r1, r3
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
#endif
		printf("Injected RX Sequence value failure\n");
 800407e:	4862      	ldr	r0, [pc, #392]	; (8004208 <Send_Vital_Data_Message+0x3e8>)
 8004080:	f01e fdd8 	bl	8022c34 <puts>
		printf("Actual   RX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Rx_Seq);
 8004084:	79fb      	ldrb	r3, [r7, #7]
 8004086:	4a5d      	ldr	r2, [pc, #372]	; (80041fc <Send_Vital_Data_Message+0x3dc>)
 8004088:	011b      	lsls	r3, r3, #4
 800408a:	4413      	add	r3, r2
 800408c:	3302      	adds	r3, #2
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	4619      	mov	r1, r3
 8004092:	485e      	ldr	r0, [pc, #376]	; (800420c <Send_Vital_Data_Message+0x3ec>)
 8004094:	f01e fd32 	bl	8022afc <iprintf>
		printf("Injected RX Sequence value:%u\n",Rand_Number);
 8004098:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800409c:	4619      	mov	r1, r3
 800409e:	485c      	ldr	r0, [pc, #368]	; (8004210 <Send_Vital_Data_Message+0x3f0>)
 80040a0:	f01e fd2c 	bl	8022afc <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number); // Rx Seq Number
 80040a4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80040a8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80040ac:	441a      	add	r2, r3
 80040ae:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80040b2:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80040b6:	2108      	movs	r1, #8
 80040b8:	f7fc fb38 	bl	800072c <InsertBits>
	{
 80040bc:	e00f      	b.n	80040de <Send_Vital_Data_Message+0x2be>
		//Last Received Packet Tx_seq number is our Rx_Seq Number for VITAL_Message we don't Increment Sequence Number.
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Rx_Seq); // Rx Seq Number
 80040be:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80040c2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80040c6:	441a      	add	r2, r3
 80040c8:	79fb      	ldrb	r3, [r7, #7]
 80040ca:	494c      	ldr	r1, [pc, #304]	; (80041fc <Send_Vital_Data_Message+0x3dc>)
 80040cc:	011b      	lsls	r3, r3, #4
 80040ce:	440b      	add	r3, r1
 80040d0:	3302      	adds	r3, #2
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80040d8:	2108      	movs	r1, #8
 80040da:	f7fc fb27 	bl	800072c <InsertBits>
		//Last Received Packet Tx_seq number is our Rx_Seq Number for VITAL_Message we don't Increment Sequence Number.
	}
	BITSTUFFINC(8);
 80040de:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80040e2:	3308      	adds	r3, #8
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	da00      	bge.n	80040ea <Send_Vital_Data_Message+0x2ca>
 80040e8:	3307      	adds	r3, #7
 80040ea:	10db      	asrs	r3, r3, #3
 80040ec:	b29a      	uxth	r2, r3
 80040ee:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80040f2:	4413      	add	r3, r2
 80040f4:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80040f8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80040fc:	3308      	adds	r3, #8
 80040fe:	b29b      	uxth	r3, r3
 8004100:	b21b      	sxth	r3, r3
 8004102:	425a      	negs	r2, r3
 8004104:	f003 0307 	and.w	r3, r3, #7
 8004108:	f002 0207 	and.w	r2, r2, #7
 800410c:	bf58      	it	pl
 800410e:	4253      	negpl	r3, r2
 8004110:	b21b      	sxth	r3, r3
 8004112:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], VDATAMSG);
 8004116:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800411a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800411e:	441a      	add	r2, r3
 8004120:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004124:	2302      	movs	r3, #2
 8004126:	2108      	movs	r1, #8
 8004128:	f7fc fb00 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 800412c:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004130:	3308      	adds	r3, #8
 8004132:	2b00      	cmp	r3, #0
 8004134:	da00      	bge.n	8004138 <Send_Vital_Data_Message+0x318>
 8004136:	3307      	adds	r3, #7
 8004138:	10db      	asrs	r3, r3, #3
 800413a:	b29a      	uxth	r2, r3
 800413c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004140:	4413      	add	r3, r2
 8004142:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004146:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800414a:	3308      	adds	r3, #8
 800414c:	b29b      	uxth	r3, r3
 800414e:	b21b      	sxth	r3, r3
 8004150:	425a      	negs	r2, r3
 8004152:	f003 0307 	and.w	r3, r3, #7
 8004156:	f002 0207 	and.w	r2, r2, #7
 800415a:	bf58      	it	pl
 800415c:	4253      	negpl	r3, r2
 800415e:	b21b      	sxth	r3, r3
 8004160:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	//Inserting Message Status Flag
	//InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x002C);


	if(Change_MLK_TIME[Source_Index]== 1)
 8004164:	79fb      	ldrb	r3, [r7, #7]
 8004166:	4a2b      	ldr	r2, [pc, #172]	; (8004214 <Send_Vital_Data_Message+0x3f4>)
 8004168:	5cd3      	ldrb	r3, [r2, r3]
 800416a:	2b01      	cmp	r3, #1
 800416c:	d15a      	bne.n	8004224 <Send_Vital_Data_Message+0x404>
	{
		Get_time();
 800416e:	f007 fa45 	bl	800b5fc <Get_time>
		memcpy(&HITACHI_time_Stamp_st[Source_Index],&RTC_Date_time_BCD_st,sizeof(GPS_DATE_TIME_t));
 8004172:	79fa      	ldrb	r2, [r7, #7]
 8004174:	4613      	mov	r3, r2
 8004176:	005b      	lsls	r3, r3, #1
 8004178:	4413      	add	r3, r2
 800417a:	005b      	lsls	r3, r3, #1
 800417c:	4a26      	ldr	r2, [pc, #152]	; (8004218 <Send_Vital_Data_Message+0x3f8>)
 800417e:	4413      	add	r3, r2
 8004180:	4a26      	ldr	r2, [pc, #152]	; (800421c <Send_Vital_Data_Message+0x3fc>)
 8004182:	6811      	ldr	r1, [r2, #0]
 8004184:	6019      	str	r1, [r3, #0]
 8004186:	8892      	ldrh	r2, [r2, #4]
 8004188:	809a      	strh	r2, [r3, #4]
		printf("Sending Updated Time\n");
 800418a:	4825      	ldr	r0, [pc, #148]	; (8004220 <Send_Vital_Data_Message+0x400>)
 800418c:	f01e fd52 	bl	8022c34 <puts>
		Change_MLK_TIME[Source_Index] = 0;
 8004190:	79fb      	ldrb	r3, [r7, #7]
 8004192:	4a20      	ldr	r2, [pc, #128]	; (8004214 <Send_Vital_Data_Message+0x3f4>)
 8004194:	2100      	movs	r1, #0
 8004196:	54d1      	strb	r1, [r2, r3]
		InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x0068);
 8004198:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800419c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80041a0:	441a      	add	r2, r3
 80041a2:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80041a6:	2368      	movs	r3, #104	; 0x68
 80041a8:	2110      	movs	r1, #16
 80041aa:	f7fc fabf 	bl	800072c <InsertBits>
		BITSTUFFINC(16);
 80041ae:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80041b2:	3310      	adds	r3, #16
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	da00      	bge.n	80041ba <Send_Vital_Data_Message+0x39a>
 80041b8:	3307      	adds	r3, #7
 80041ba:	10db      	asrs	r3, r3, #3
 80041bc:	b29a      	uxth	r2, r3
 80041be:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80041c2:	4413      	add	r3, r2
 80041c4:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80041c8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80041cc:	3310      	adds	r3, #16
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	b21b      	sxth	r3, r3
 80041d2:	425a      	negs	r2, r3
 80041d4:	f003 0307 	and.w	r3, r3, #7
 80041d8:	f002 0207 	and.w	r2, r2, #7
 80041dc:	bf58      	it	pl
 80041de:	4253      	negpl	r3, r2
 80041e0:	b21b      	sxth	r3, r3
 80041e2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80041e6:	e044      	b.n	8004272 <Send_Vital_Data_Message+0x452>
 80041e8:	20000304 	.word	0x20000304
 80041ec:	20001968 	.word	0x20001968
 80041f0:	20009d2c 	.word	0x20009d2c
 80041f4:	51eb851f 	.word	0x51eb851f
 80041f8:	08024984 	.word	0x08024984
 80041fc:	200011d0 	.word	0x200011d0
 8004200:	080249a8 	.word	0x080249a8
 8004204:	080249c8 	.word	0x080249c8
 8004208:	080246cc 	.word	0x080246cc
 800420c:	080246f0 	.word	0x080246f0
 8004210:	08024710 	.word	0x08024710
 8004214:	200010e4 	.word	0x200010e4
 8004218:	20001194 	.word	0x20001194
 800421c:	2000289c 	.word	0x2000289c
 8004220:	080249e8 	.word	0x080249e8
	}
	else
	{
		InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x0028);
 8004224:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004228:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800422c:	441a      	add	r2, r3
 800422e:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004232:	2328      	movs	r3, #40	; 0x28
 8004234:	2110      	movs	r1, #16
 8004236:	f7fc fa79 	bl	800072c <InsertBits>
		BITSTUFFINC(16);
 800423a:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800423e:	3310      	adds	r3, #16
 8004240:	2b00      	cmp	r3, #0
 8004242:	da00      	bge.n	8004246 <Send_Vital_Data_Message+0x426>
 8004244:	3307      	adds	r3, #7
 8004246:	10db      	asrs	r3, r3, #3
 8004248:	b29a      	uxth	r2, r3
 800424a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800424e:	4413      	add	r3, r2
 8004250:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004254:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004258:	3310      	adds	r3, #16
 800425a:	b29b      	uxth	r3, r3
 800425c:	b21b      	sxth	r3, r3
 800425e:	425a      	negs	r2, r3
 8004260:	f003 0307 	and.w	r3, r3, #7
 8004264:	f002 0207 	and.w	r2, r2, #7
 8004268:	bf58      	it	pl
 800426a:	4253      	negpl	r3, r2
 800426c:	b21b      	sxth	r3, r3
 800426e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	}



	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].YY);
 8004272:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004276:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800427a:	18d1      	adds	r1, r2, r3
 800427c:	79fa      	ldrb	r2, [r7, #7]
 800427e:	48cd      	ldr	r0, [pc, #820]	; (80045b4 <Send_Vital_Data_Message+0x794>)
 8004280:	4613      	mov	r3, r2
 8004282:	005b      	lsls	r3, r3, #1
 8004284:	4413      	add	r3, r2
 8004286:	005b      	lsls	r3, r3, #1
 8004288:	4403      	add	r3, r0
 800428a:	3305      	adds	r3, #5
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004292:	460a      	mov	r2, r1
 8004294:	2108      	movs	r1, #8
 8004296:	f7fc fa49 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 800429a:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800429e:	3308      	adds	r3, #8
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	da00      	bge.n	80042a6 <Send_Vital_Data_Message+0x486>
 80042a4:	3307      	adds	r3, #7
 80042a6:	10db      	asrs	r3, r3, #3
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80042ae:	4413      	add	r3, r2
 80042b0:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80042b4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80042b8:	3308      	adds	r3, #8
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	b21b      	sxth	r3, r3
 80042be:	425a      	negs	r2, r3
 80042c0:	f003 0307 	and.w	r3, r3, #7
 80042c4:	f002 0207 	and.w	r2, r2, #7
 80042c8:	bf58      	it	pl
 80042ca:	4253      	negpl	r3, r2
 80042cc:	b21b      	sxth	r3, r3
 80042ce:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].MM);
 80042d2:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80042d6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80042da:	18d1      	adds	r1, r2, r3
 80042dc:	79fa      	ldrb	r2, [r7, #7]
 80042de:	48b5      	ldr	r0, [pc, #724]	; (80045b4 <Send_Vital_Data_Message+0x794>)
 80042e0:	4613      	mov	r3, r2
 80042e2:	005b      	lsls	r3, r3, #1
 80042e4:	4413      	add	r3, r2
 80042e6:	005b      	lsls	r3, r3, #1
 80042e8:	4403      	add	r3, r0
 80042ea:	3304      	adds	r3, #4
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80042f2:	460a      	mov	r2, r1
 80042f4:	2108      	movs	r1, #8
 80042f6:	f7fc fa19 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80042fa:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80042fe:	3308      	adds	r3, #8
 8004300:	2b00      	cmp	r3, #0
 8004302:	da00      	bge.n	8004306 <Send_Vital_Data_Message+0x4e6>
 8004304:	3307      	adds	r3, #7
 8004306:	10db      	asrs	r3, r3, #3
 8004308:	b29a      	uxth	r2, r3
 800430a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800430e:	4413      	add	r3, r2
 8004310:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004314:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004318:	3308      	adds	r3, #8
 800431a:	b29b      	uxth	r3, r3
 800431c:	b21b      	sxth	r3, r3
 800431e:	425a      	negs	r2, r3
 8004320:	f003 0307 	and.w	r3, r3, #7
 8004324:	f002 0207 	and.w	r2, r2, #7
 8004328:	bf58      	it	pl
 800432a:	4253      	negpl	r3, r2
 800432c:	b21b      	sxth	r3, r3
 800432e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].DD);
 8004332:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004336:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800433a:	18d1      	adds	r1, r2, r3
 800433c:	79fa      	ldrb	r2, [r7, #7]
 800433e:	489d      	ldr	r0, [pc, #628]	; (80045b4 <Send_Vital_Data_Message+0x794>)
 8004340:	4613      	mov	r3, r2
 8004342:	005b      	lsls	r3, r3, #1
 8004344:	4413      	add	r3, r2
 8004346:	005b      	lsls	r3, r3, #1
 8004348:	4403      	add	r3, r0
 800434a:	3303      	adds	r3, #3
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004352:	460a      	mov	r2, r1
 8004354:	2108      	movs	r1, #8
 8004356:	f7fc f9e9 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 800435a:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800435e:	3308      	adds	r3, #8
 8004360:	2b00      	cmp	r3, #0
 8004362:	da00      	bge.n	8004366 <Send_Vital_Data_Message+0x546>
 8004364:	3307      	adds	r3, #7
 8004366:	10db      	asrs	r3, r3, #3
 8004368:	b29a      	uxth	r2, r3
 800436a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800436e:	4413      	add	r3, r2
 8004370:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004374:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004378:	3308      	adds	r3, #8
 800437a:	b29b      	uxth	r3, r3
 800437c:	b21b      	sxth	r3, r3
 800437e:	425a      	negs	r2, r3
 8004380:	f003 0307 	and.w	r3, r3, #7
 8004384:	f002 0207 	and.w	r2, r2, #7
 8004388:	bf58      	it	pl
 800438a:	4253      	negpl	r3, r2
 800438c:	b21b      	sxth	r3, r3
 800438e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].hh);
 8004392:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004396:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800439a:	18d1      	adds	r1, r2, r3
 800439c:	79fa      	ldrb	r2, [r7, #7]
 800439e:	4885      	ldr	r0, [pc, #532]	; (80045b4 <Send_Vital_Data_Message+0x794>)
 80043a0:	4613      	mov	r3, r2
 80043a2:	005b      	lsls	r3, r3, #1
 80043a4:	4413      	add	r3, r2
 80043a6:	005b      	lsls	r3, r3, #1
 80043a8:	4403      	add	r3, r0
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80043b0:	460a      	mov	r2, r1
 80043b2:	2108      	movs	r1, #8
 80043b4:	f7fc f9ba 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80043b8:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80043bc:	3308      	adds	r3, #8
 80043be:	2b00      	cmp	r3, #0
 80043c0:	da00      	bge.n	80043c4 <Send_Vital_Data_Message+0x5a4>
 80043c2:	3307      	adds	r3, #7
 80043c4:	10db      	asrs	r3, r3, #3
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80043cc:	4413      	add	r3, r2
 80043ce:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80043d2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80043d6:	3308      	adds	r3, #8
 80043d8:	b29b      	uxth	r3, r3
 80043da:	b21b      	sxth	r3, r3
 80043dc:	425a      	negs	r2, r3
 80043de:	f003 0307 	and.w	r3, r3, #7
 80043e2:	f002 0207 	and.w	r2, r2, #7
 80043e6:	bf58      	it	pl
 80043e8:	4253      	negpl	r3, r2
 80043ea:	b21b      	sxth	r3, r3
 80043ec:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].mm);
 80043f0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80043f4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80043f8:	18d1      	adds	r1, r2, r3
 80043fa:	79fa      	ldrb	r2, [r7, #7]
 80043fc:	486d      	ldr	r0, [pc, #436]	; (80045b4 <Send_Vital_Data_Message+0x794>)
 80043fe:	4613      	mov	r3, r2
 8004400:	005b      	lsls	r3, r3, #1
 8004402:	4413      	add	r3, r2
 8004404:	005b      	lsls	r3, r3, #1
 8004406:	4403      	add	r3, r0
 8004408:	3301      	adds	r3, #1
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004410:	460a      	mov	r2, r1
 8004412:	2108      	movs	r1, #8
 8004414:	f7fc f98a 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004418:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800441c:	3308      	adds	r3, #8
 800441e:	2b00      	cmp	r3, #0
 8004420:	da00      	bge.n	8004424 <Send_Vital_Data_Message+0x604>
 8004422:	3307      	adds	r3, #7
 8004424:	10db      	asrs	r3, r3, #3
 8004426:	b29a      	uxth	r2, r3
 8004428:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800442c:	4413      	add	r3, r2
 800442e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004432:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004436:	3308      	adds	r3, #8
 8004438:	b29b      	uxth	r3, r3
 800443a:	b21b      	sxth	r3, r3
 800443c:	425a      	negs	r2, r3
 800443e:	f003 0307 	and.w	r3, r3, #7
 8004442:	f002 0207 	and.w	r2, r2, #7
 8004446:	bf58      	it	pl
 8004448:	4253      	negpl	r3, r2
 800444a:	b21b      	sxth	r3, r3
 800444c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].ss);
 8004450:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004454:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004458:	18d1      	adds	r1, r2, r3
 800445a:	79fa      	ldrb	r2, [r7, #7]
 800445c:	4855      	ldr	r0, [pc, #340]	; (80045b4 <Send_Vital_Data_Message+0x794>)
 800445e:	4613      	mov	r3, r2
 8004460:	005b      	lsls	r3, r3, #1
 8004462:	4413      	add	r3, r2
 8004464:	005b      	lsls	r3, r3, #1
 8004466:	4403      	add	r3, r0
 8004468:	3302      	adds	r3, #2
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004470:	460a      	mov	r2, r1
 8004472:	2108      	movs	r1, #8
 8004474:	f7fc f95a 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004478:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800447c:	3308      	adds	r3, #8
 800447e:	2b00      	cmp	r3, #0
 8004480:	da00      	bge.n	8004484 <Send_Vital_Data_Message+0x664>
 8004482:	3307      	adds	r3, #7
 8004484:	10db      	asrs	r3, r3, #3
 8004486:	b29a      	uxth	r2, r3
 8004488:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800448c:	4413      	add	r3, r2
 800448e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004492:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004496:	3308      	adds	r3, #8
 8004498:	b29b      	uxth	r3, r3
 800449a:	b21b      	sxth	r3, r3
 800449c:	425a      	negs	r2, r3
 800449e:	f003 0307 	and.w	r3, r3, #7
 80044a2:	f002 0207 	and.w	r2, r2, #7
 80044a6:	bf58      	it	pl
 80044a8:	4253      	negpl	r3, r2
 80044aa:	b21b      	sxth	r3, r3
 80044ac:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], TX_SIZE_BOOL_OPS);
 80044b0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80044b4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80044b8:	441a      	add	r2, r3
 80044ba:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80044be:	2301      	movs	r3, #1
 80044c0:	2108      	movs	r1, #8
 80044c2:	f7fc f933 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80044c6:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80044ca:	3308      	adds	r3, #8
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	da00      	bge.n	80044d2 <Send_Vital_Data_Message+0x6b2>
 80044d0:	3307      	adds	r3, #7
 80044d2:	10db      	asrs	r3, r3, #3
 80044d4:	b29a      	uxth	r2, r3
 80044d6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80044da:	4413      	add	r3, r2
 80044dc:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80044e0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80044e4:	3308      	adds	r3, #8
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	b21b      	sxth	r3, r3
 80044ea:	425a      	negs	r2, r3
 80044ec:	f003 0307 	and.w	r3, r3, #7
 80044f0:	f002 0207 	and.w	r2, r2, #7
 80044f4:	bf58      	it	pl
 80044f6:	4253      	negpl	r3, r2
 80044f8:	b21b      	sxth	r3, r3
 80044fa:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], TX_NUM_VAL_OPS);
 80044fe:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004502:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004506:	441a      	add	r2, r3
 8004508:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800450c:	2300      	movs	r3, #0
 800450e:	2108      	movs	r1, #8
 8004510:	f7fc f90c 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004514:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004518:	3308      	adds	r3, #8
 800451a:	2b00      	cmp	r3, #0
 800451c:	da00      	bge.n	8004520 <Send_Vital_Data_Message+0x700>
 800451e:	3307      	adds	r3, #7
 8004520:	10db      	asrs	r3, r3, #3
 8004522:	b29a      	uxth	r2, r3
 8004524:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004528:	4413      	add	r3, r2
 800452a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800452e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004532:	3308      	adds	r3, #8
 8004534:	b29b      	uxth	r3, r3
 8004536:	b21b      	sxth	r3, r3
 8004538:	425a      	negs	r2, r3
 800453a:	f003 0307 	and.w	r3, r3, #7
 800453e:	f002 0207 	and.w	r2, r2, #7
 8004542:	bf58      	it	pl
 8004544:	4253      	negpl	r3, r2
 8004546:	b21b      	sxth	r3, r3
 8004548:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], TX_BOOL_VAL_STATE);
 800454c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004550:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004554:	441a      	add	r2, r3
 8004556:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800455a:	2301      	movs	r3, #1
 800455c:	2108      	movs	r1, #8
 800455e:	f7fc f8e5 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004562:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004566:	3308      	adds	r3, #8
 8004568:	2b00      	cmp	r3, #0
 800456a:	da00      	bge.n	800456e <Send_Vital_Data_Message+0x74e>
 800456c:	3307      	adds	r3, #7
 800456e:	10db      	asrs	r3, r3, #3
 8004570:	b29a      	uxth	r2, r3
 8004572:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004576:	4413      	add	r3, r2
 8004578:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800457c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004580:	3308      	adds	r3, #8
 8004582:	b29b      	uxth	r3, r3
 8004584:	b21b      	sxth	r3, r3
 8004586:	425a      	negs	r2, r3
 8004588:	f003 0307 	and.w	r3, r3, #7
 800458c:	f002 0207 	and.w	r2, r2, #7
 8004590:	bf58      	it	pl
 8004592:	4253      	negpl	r3, r2
 8004594:	b21b      	sxth	r3, r3
 8004596:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	//	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
	//	{
	//		Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value = 0x654321;
	//	}

	if( ( (CHECKFLAG(1,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 800459a:	4b07      	ldr	r3, [pc, #28]	; (80045b8 <Send_Vital_Data_Message+0x798>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	085b      	lsrs	r3, r3, #1
 80045a0:	f003 0301 	and.w	r3, r3, #1
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d02c      	beq.n	8004602 <Send_Vital_Data_Message+0x7e2>
 80045a8:	4b03      	ldr	r3, [pc, #12]	; (80045b8 <Send_Vital_Data_Message+0x798>)
 80045aa:	791b      	ldrb	r3, [r3, #4]
 80045ac:	79fa      	ldrb	r2, [r7, #7]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d127      	bne.n	8004602 <Send_Vital_Data_Message+0x7e2>
 80045b2:	e003      	b.n	80045bc <Send_Vital_Data_Message+0x79c>
 80045b4:	20001194 	.word	0x20001194
 80045b8:	20001968 	.word	0x20001968
	{
		uint32_t Rand_Number = 0;
 80045bc:	2300      	movs	r3, #0
 80045be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
#ifdef STM_32
		Rand_Number = HAL_RNG_GetRandomNumber(&hrng);
 80045c2:	484e      	ldr	r0, [pc, #312]	; (80046fc <Send_Vital_Data_Message+0x8dc>)
 80045c4:	f015 ff42 	bl	801a44c <HAL_RNG_GetRandomNumber>
 80045c8:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
#endif
		printf("\nInjected Vital Init Value Failure\n");
 80045cc:	484c      	ldr	r0, [pc, #304]	; (8004700 <Send_Vital_Data_Message+0x8e0>)
 80045ce:	f01e fb31 	bl	8022c34 <puts>
		printf("Actual Vital Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 80045d2:	79fb      	ldrb	r3, [r7, #7]
 80045d4:	4a4b      	ldr	r2, [pc, #300]	; (8004704 <Send_Vital_Data_Message+0x8e4>)
 80045d6:	011b      	lsls	r3, r3, #4
 80045d8:	4413      	add	r3, r2
 80045da:	330c      	adds	r3, #12
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4619      	mov	r1, r3
 80045e0:	4849      	ldr	r0, [pc, #292]	; (8004708 <Send_Vital_Data_Message+0x8e8>)
 80045e2:	f01e fa8b 	bl	8022afc <iprintf>
		printf("Injected Vital Init Value:0x%06lX\n",Rand_Number);
 80045e6:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80045ea:	4848      	ldr	r0, [pc, #288]	; (800470c <Send_Vital_Data_Message+0x8ec>)
 80045ec:	f01e fa86 	bl	8022afc <iprintf>
		InsertBits(0, 24, &Temp_Buff[0], Rand_Number);
 80045f0:	f107 020c 	add.w	r2, r7, #12
 80045f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80045f8:	2118      	movs	r1, #24
 80045fa:	2000      	movs	r0, #0
 80045fc:	f7fc f896 	bl	800072c <InsertBits>
	{
 8004600:	e00b      	b.n	800461a <Send_Vital_Data_Message+0x7fa>
	}
	else
	{
		InsertBits(0, 24, &Temp_Buff[0], Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8004602:	79fb      	ldrb	r3, [r7, #7]
 8004604:	4a3f      	ldr	r2, [pc, #252]	; (8004704 <Send_Vital_Data_Message+0x8e4>)
 8004606:	011b      	lsls	r3, r3, #4
 8004608:	4413      	add	r3, r2
 800460a:	330c      	adds	r3, #12
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f107 020c 	add.w	r2, r7, #12
 8004612:	2118      	movs	r1, #24
 8004614:	2000      	movs	r0, #0
 8004616:	f7fc f889 	bl	800072c <InsertBits>
	}
	for (uc_index = 0; uc_index < ucByte; uc_index++)
 800461a:	2300      	movs	r3, #0
 800461c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8004620:	e011      	b.n	8004646 <Send_Vital_Data_Message+0x826>
	{
		Temp_Buff[uc_index + 3] = Transmit_Buff[uc_index];
 8004622:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8004626:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800462a:	3303      	adds	r3, #3
 800462c:	3290      	adds	r2, #144	; 0x90
 800462e:	443a      	add	r2, r7
 8004630:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8004634:	3390      	adds	r3, #144	; 0x90
 8004636:	443b      	add	r3, r7
 8004638:	f803 2c84 	strb.w	r2, [r3, #-132]
	for (uc_index = 0; uc_index < ucByte; uc_index++)
 800463c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004640:	3301      	adds	r3, #1
 8004642:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8004646:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800464a:	b29b      	uxth	r3, r3
 800464c:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8004650:	429a      	cmp	r2, r3
 8004652:	d8e6      	bhi.n	8004622 <Send_Vital_Data_Message+0x802>
	}

	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], CalculateDirectReverseCrc(Temp_Buff, uc_index + 3));
 8004654:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004658:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800465c:	18d4      	adds	r4, r2, r3
 800465e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004662:	b29b      	uxth	r3, r3
 8004664:	3303      	adds	r3, #3
 8004666:	b29a      	uxth	r2, r3
 8004668:	f107 030c 	add.w	r3, r7, #12
 800466c:	4611      	mov	r1, r2
 800466e:	4618      	mov	r0, r3
 8004670:	f00e fe62 	bl	8013338 <CalculateDirectReverseCrc>
 8004674:	4603      	mov	r3, r0
 8004676:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800467a:	4622      	mov	r2, r4
 800467c:	2120      	movs	r1, #32
 800467e:	f7fc f855 	bl	800072c <InsertBits>
	BITSTUFFINC(32);
 8004682:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004686:	3320      	adds	r3, #32
 8004688:	2b00      	cmp	r3, #0
 800468a:	da00      	bge.n	800468e <Send_Vital_Data_Message+0x86e>
 800468c:	3307      	adds	r3, #7
 800468e:	10db      	asrs	r3, r3, #3
 8004690:	b29a      	uxth	r2, r3
 8004692:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004696:	4413      	add	r3, r2
 8004698:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800469c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80046a0:	3320      	adds	r3, #32
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	b21b      	sxth	r3, r3
 80046a6:	425a      	negs	r2, r3
 80046a8:	f003 0307 	and.w	r3, r3, #7
 80046ac:	f002 0207 	and.w	r2, r2, #7
 80046b0:	bf58      	it	pl
 80046b2:	4253      	negpl	r3, r2
 80046b4:	b21b      	sxth	r3, r3
 80046b6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

#if ENABLE_FAULT_INJECTION
	if( ( CHECKFLAG(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)== SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 80046ba:	4b15      	ldr	r3, [pc, #84]	; (8004710 <Send_Vital_Data_Message+0x8f0>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	0a5b      	lsrs	r3, r3, #9
 80046c0:	f003 0301 	and.w	r3, r3, #1
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00b      	beq.n	80046e0 <Send_Vital_Data_Message+0x8c0>
 80046c8:	4b11      	ldr	r3, [pc, #68]	; (8004710 <Send_Vital_Data_Message+0x8f0>)
 80046ca:	791b      	ldrb	r3, [r3, #4]
 80046cc:	79fa      	ldrb	r2, [r7, #7]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d106      	bne.n	80046e0 <Send_Vital_Data_Message+0x8c0>
	{
		printf("Injected ETH tx Fail\n");
 80046d2:	4810      	ldr	r0, [pc, #64]	; (8004714 <Send_Vital_Data_Message+0x8f4>)
 80046d4:	f01e faae 	bl	8022c34 <puts>
		printf("Not Sending Reply");
 80046d8:	480f      	ldr	r0, [pc, #60]	; (8004718 <Send_Vital_Data_Message+0x8f8>)
 80046da:	f01e fa0f 	bl	8022afc <iprintf>
 80046de:	e009      	b.n	80046f4 <Send_Vital_Data_Message+0x8d4>
	}
	else
	{
		Process_Sending_Reply(Transmit_Buff,ucByte,Source_Index);
 80046e0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80046e4:	b2d9      	uxtb	r1, r3
 80046e6:	79fa      	ldrb	r2, [r7, #7]
 80046e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80046ec:	4618      	mov	r0, r3
 80046ee:	f002 ffd9 	bl	80076a4 <Process_Sending_Reply>
	}
#else
	Process_Sending_Reply(Transmit_Buff,ucByte,Source_Index);
#endif
}
 80046f2:	bf00      	nop
 80046f4:	bf00      	nop
 80046f6:	3794      	adds	r7, #148	; 0x94
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd90      	pop	{r4, r7, pc}
 80046fc:	20009d2c 	.word	0x20009d2c
 8004700:	08024a00 	.word	0x08024a00
 8004704:	200011d0 	.word	0x200011d0
 8004708:	08024a24 	.word	0x08024a24
 800470c:	08024a48 	.word	0x08024a48
 8004710:	20001968 	.word	0x20001968
 8004714:	08024798 	.word	0x08024798
 8004718:	080247b0 	.word	0x080247b0

0800471c <Vital_Msg_extr_from_CAN>:


void Vital_Msg_extr_from_CAN(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b0c0      	sub	sp, #256	; 0x100
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	4608      	mov	r0, r1
 8004726:	4611      	mov	r1, r2
 8004728:	461a      	mov	r2, r3
 800472a:	4603      	mov	r3, r0
 800472c:	70fb      	strb	r3, [r7, #3]
 800472e:	460b      	mov	r3, r1
 8004730:	70bb      	strb	r3, [r7, #2]
 8004732:	4613      	mov	r3, r2
 8004734:	707b      	strb	r3, [r7, #1]
	uint16_t Traverser = 0;
 8004736:	2300      	movs	r3, #0
 8004738:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
	uint32_t Calc_CRC = 0;
 800473c:	2300      	movs	r3, #0
 800473e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	uint32_t Recv_CRC = 0;
 8004742:	2300      	movs	r3, #0
 8004744:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	uint32_t Ticks = HAL_GetTick();
 8004748:	f011 f9ce 	bl	8015ae8 <HAL_GetTick>
 800474c:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
	uint8_t noofIP = 0, uc_index = 0;
 8004750:	2300      	movs	r3, #0
 8004752:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
 8004756:	2300      	movs	r3, #0
 8004758:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
	uint8_t LinkEstablishFlag = 0;
 800475c:	2300      	movs	r3, #0
 800475e:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	uint8_t Temp_Vital_Data_Buff[128] = {0,};
 8004762:	2300      	movs	r3, #0
 8004764:	667b      	str	r3, [r7, #100]	; 0x64
 8004766:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800476a:	227c      	movs	r2, #124	; 0x7c
 800476c:	2100      	movs	r1, #0
 800476e:	4618      	mov	r0, r3
 8004770:	f01e f8dc 	bl	802292c <memset>
	HITACHI_VITAL_t CAN_Hitachi_Vital_st;
	HITACHI_PARAMETERS_t CAN_Hitachi_Parameters_t;
	HITACHI_TIME_t CAN_HITACHI_time_Stamp_st;
	RELAYS_t CAN_Relay_st;

	BITSTUFFINIT(0, 0);
 8004774:	2300      	movs	r3, #0
 8004776:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 800477a:	2300      	movs	r3, #0
 800477c:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	if(Length == Last_Rcv_Vdata_st[Source_Index].Length)
 8004780:	78fb      	ldrb	r3, [r7, #3]
 8004782:	b299      	uxth	r1, r3
 8004784:	78ba      	ldrb	r2, [r7, #2]
 8004786:	48c3      	ldr	r0, [pc, #780]	; (8004a94 <Vital_Msg_extr_from_CAN+0x378>)
 8004788:	4613      	mov	r3, r2
 800478a:	015b      	lsls	r3, r3, #5
 800478c:	4413      	add	r3, r2
 800478e:	005b      	lsls	r3, r3, #1
 8004790:	4403      	add	r3, r0
 8004792:	3340      	adds	r3, #64	; 0x40
 8004794:	881b      	ldrh	r3, [r3, #0]
 8004796:	4299      	cmp	r1, r3
 8004798:	d11a      	bne.n	80047d0 <Vital_Msg_extr_from_CAN+0xb4>
	{
		if(memcmp(Buff,Last_Rcv_Vdata_st[Source_Index].Last_Rcv_vdata,Length) == 0)
 800479a:	78ba      	ldrb	r2, [r7, #2]
 800479c:	4613      	mov	r3, r2
 800479e:	015b      	lsls	r3, r3, #5
 80047a0:	4413      	add	r3, r2
 80047a2:	005b      	lsls	r3, r3, #1
 80047a4:	4abb      	ldr	r2, [pc, #748]	; (8004a94 <Vital_Msg_extr_from_CAN+0x378>)
 80047a6:	4413      	add	r3, r2
 80047a8:	78fa      	ldrb	r2, [r7, #3]
 80047aa:	4619      	mov	r1, r3
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f01e f885 	bl	80228bc <memcmp>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d10b      	bne.n	80047d0 <Vital_Msg_extr_from_CAN+0xb4>
		{
			printf("\nBoth Ethernet Vdata Msg and CAN Vdata Msg Matched for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80047b8:	78bb      	ldrb	r3, [r7, #2]
 80047ba:	4ab7      	ldr	r2, [pc, #732]	; (8004a98 <Vital_Msg_extr_from_CAN+0x37c>)
 80047bc:	3366      	adds	r3, #102	; 0x66
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	4413      	add	r3, r2
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	4619      	mov	r1, r3
 80047c6:	48b5      	ldr	r0, [pc, #724]	; (8004a9c <Vital_Msg_extr_from_CAN+0x380>)
 80047c8:	f01e f998 	bl	8022afc <iprintf>
			return;
 80047cc:	f000 bda0 	b.w	8005310 <Vital_Msg_extr_from_CAN+0xbf4>
		}
	}

	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 80047d0:	78fb      	ldrb	r3, [r7, #3]
 80047d2:	3b05      	subs	r3, #5
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	441a      	add	r2, r3
 80047d8:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80047dc:	2120      	movs	r1, #32
 80047de:	4618      	mov	r0, r3
 80047e0:	f7fb ff18 	bl	8000614 <ExtractBits>
 80047e4:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec


#if ENABLE_FAULT_INJECTION
	if( ( (CHECKFLAG(0,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 80047e8:	4bad      	ldr	r3, [pc, #692]	; (8004aa0 <Vital_Msg_extr_from_CAN+0x384>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0301 	and.w	r3, r3, #1
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d034      	beq.n	800485e <Vital_Msg_extr_from_CAN+0x142>
 80047f4:	4baa      	ldr	r3, [pc, #680]	; (8004aa0 <Vital_Msg_extr_from_CAN+0x384>)
 80047f6:	791b      	ldrb	r3, [r3, #4]
 80047f8:	78ba      	ldrb	r2, [r7, #2]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d12f      	bne.n	800485e <Vital_Msg_extr_from_CAN+0x142>
	{
		uint32_t Rand_Number = 22;
 80047fe:	2316      	movs	r3, #22
 8004800:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 0xffff00);
 8004804:	48a7      	ldr	r0, [pc, #668]	; (8004aa4 <Vital_Msg_extr_from_CAN+0x388>)
 8004806:	f015 fe21 	bl	801a44c <HAL_RNG_GetRandomNumber>
 800480a:	4602      	mov	r2, r0
 800480c:	4ba6      	ldr	r3, [pc, #664]	; (8004aa8 <Vital_Msg_extr_from_CAN+0x38c>)
 800480e:	fba3 1302 	umull	r1, r3, r3, r2
 8004812:	0dd9      	lsrs	r1, r3, #23
 8004814:	460b      	mov	r3, r1
 8004816:	041b      	lsls	r3, r3, #16
 8004818:	1a5b      	subs	r3, r3, r1
 800481a:	021b      	lsls	r3, r3, #8
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		printf("\nInjected RX Vital CRC failure\n");
 8004822:	48a2      	ldr	r0, [pc, #648]	; (8004aac <Vital_Msg_extr_from_CAN+0x390>)
 8004824:	f01e fa06 	bl	8022c34 <puts>
		printf("Actual   RX Vital Init Value:0x%06lX\n",Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 8004828:	78ba      	ldrb	r2, [r7, #2]
 800482a:	49a1      	ldr	r1, [pc, #644]	; (8004ab0 <Vital_Msg_extr_from_CAN+0x394>)
 800482c:	4613      	mov	r3, r2
 800482e:	005b      	lsls	r3, r3, #1
 8004830:	4413      	add	r3, r2
 8004832:	00db      	lsls	r3, r3, #3
 8004834:	440b      	add	r3, r1
 8004836:	3308      	adds	r3, #8
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4619      	mov	r1, r3
 800483c:	489d      	ldr	r0, [pc, #628]	; (8004ab4 <Vital_Msg_extr_from_CAN+0x398>)
 800483e:	f01e f95d 	bl	8022afc <iprintf>
		printf("Injected RX Vital Init Value:0x%06lX\n",Rand_Number);
 8004842:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8004846:	489c      	ldr	r0, [pc, #624]	; (8004ab8 <Vital_Msg_extr_from_CAN+0x39c>)
 8004848:	f01e f958 	bl	8022afc <iprintf>
		InsertBits(0, 24, &Temp_Vital_Data_Buff[0],Rand_Number);
 800484c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8004850:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004854:	2118      	movs	r1, #24
 8004856:	2000      	movs	r0, #0
 8004858:	f7fb ff68 	bl	800072c <InsertBits>
	{
 800485c:	e00e      	b.n	800487c <Vital_Msg_extr_from_CAN+0x160>
	}
	else
	{
		InsertBits(0, 24, &Temp_Vital_Data_Buff[0], Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 800485e:	78ba      	ldrb	r2, [r7, #2]
 8004860:	4993      	ldr	r1, [pc, #588]	; (8004ab0 <Vital_Msg_extr_from_CAN+0x394>)
 8004862:	4613      	mov	r3, r2
 8004864:	005b      	lsls	r3, r3, #1
 8004866:	4413      	add	r3, r2
 8004868:	00db      	lsls	r3, r3, #3
 800486a:	440b      	add	r3, r1
 800486c:	3308      	adds	r3, #8
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8004874:	2118      	movs	r1, #24
 8004876:	2000      	movs	r0, #0
 8004878:	f7fb ff58 	bl	800072c <InsertBits>
	}
#else
	InsertBits(0, 24, &Temp_Vital_Data_Buff[0], Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
#endif
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 800487c:	2300      	movs	r3, #0
 800487e:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 8004882:	e011      	b.n	80048a8 <Vital_Msg_extr_from_CAN+0x18c>
	{
		Temp_Vital_Data_Buff[uc_index + 3] = Buff[uc_index];
 8004884:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	441a      	add	r2, r3
 800488c:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8004890:	3303      	adds	r3, #3
 8004892:	7812      	ldrb	r2, [r2, #0]
 8004894:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004898:	443b      	add	r3, r7
 800489a:	f803 2c9c 	strb.w	r2, [r3, #-156]
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 800489e:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 80048a2:	3301      	adds	r3, #1
 80048a4:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 80048a8:	f897 20fc 	ldrb.w	r2, [r7, #252]	; 0xfc
 80048ac:	78fb      	ldrb	r3, [r7, #3]
 80048ae:	3b05      	subs	r3, #5
 80048b0:	429a      	cmp	r2, r3
 80048b2:	dbe7      	blt.n	8004884 <Vital_Msg_extr_from_CAN+0x168>
	}
	Calc_CRC = CalculateDirectReverseCrc(Temp_Vital_Data_Buff, uc_index + 3);
 80048b4:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	3303      	adds	r3, #3
 80048bc:	b29a      	uxth	r2, r3
 80048be:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80048c2:	4611      	mov	r1, r2
 80048c4:	4618      	mov	r0, r3
 80048c6:	f00e fd37 	bl	8013338 <CalculateDirectReverseCrc>
 80048ca:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0

	if(Calc_CRC != Recv_CRC)
 80048ce:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 80048d2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80048d6:	429a      	cmp	r2, r3
 80048d8:	f000 8104 	beq.w	8004ae4 <Vital_Msg_extr_from_CAN+0x3c8>
	{
		if( ExtractBits(0, 8, (unsigned char *)&Buff[5]) == 0x00)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	3305      	adds	r3, #5
 80048e0:	461a      	mov	r2, r3
 80048e2:	2108      	movs	r1, #8
 80048e4:	2000      	movs	r0, #0
 80048e6:	f7fb fe95 	bl	8000614 <ExtractBits>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	f040 80ba 	bne.w	8004a66 <Vital_Msg_extr_from_CAN+0x34a>
		{
			printf("Tx seq Roll over Detected\n");
 80048f2:	4872      	ldr	r0, [pc, #456]	; (8004abc <Vital_Msg_extr_from_CAN+0x3a0>)
 80048f4:	f01e f99e 	bl	8022c34 <puts>
			memset(Temp_Vital_Data_Buff,0,sizeof(Temp_Vital_Data_Buff));
 80048f8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80048fc:	2280      	movs	r2, #128	; 0x80
 80048fe:	2100      	movs	r1, #0
 8004900:	4618      	mov	r0, r3
 8004902:	f01e f813 	bl	802292c <memset>
			InsertBits(0, 24, &Temp_Vital_Data_Buff[0], (Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val+1));
 8004906:	78ba      	ldrb	r2, [r7, #2]
 8004908:	4969      	ldr	r1, [pc, #420]	; (8004ab0 <Vital_Msg_extr_from_CAN+0x394>)
 800490a:	4613      	mov	r3, r2
 800490c:	005b      	lsls	r3, r3, #1
 800490e:	4413      	add	r3, r2
 8004910:	00db      	lsls	r3, r3, #3
 8004912:	440b      	add	r3, r1
 8004914:	3308      	adds	r3, #8
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	3301      	adds	r3, #1
 800491a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800491e:	2118      	movs	r1, #24
 8004920:	2000      	movs	r0, #0
 8004922:	f7fb ff03 	bl	800072c <InsertBits>
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8004926:	2300      	movs	r3, #0
 8004928:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 800492c:	e011      	b.n	8004952 <Vital_Msg_extr_from_CAN+0x236>
			{
				Temp_Vital_Data_Buff[uc_index + 3] = Buff[uc_index];
 800492e:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	441a      	add	r2, r3
 8004936:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 800493a:	3303      	adds	r3, #3
 800493c:	7812      	ldrb	r2, [r2, #0]
 800493e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004942:	443b      	add	r3, r7
 8004944:	f803 2c9c 	strb.w	r2, [r3, #-156]
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8004948:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 800494c:	3301      	adds	r3, #1
 800494e:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 8004952:	f897 20fc 	ldrb.w	r2, [r7, #252]	; 0xfc
 8004956:	78fb      	ldrb	r3, [r7, #3]
 8004958:	3b05      	subs	r3, #5
 800495a:	429a      	cmp	r2, r3
 800495c:	dbe7      	blt.n	800492e <Vital_Msg_extr_from_CAN+0x212>
			}
			Calc_CRC = CalculateDirectReverseCrc(Temp_Vital_Data_Buff, uc_index + 3);
 800495e:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8004962:	b29b      	uxth	r3, r3
 8004964:	3303      	adds	r3, #3
 8004966:	b29a      	uxth	r2, r3
 8004968:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800496c:	4611      	mov	r1, r2
 800496e:	4618      	mov	r0, r3
 8004970:	f00e fce2 	bl	8013338 <CalculateDirectReverseCrc>
 8004974:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
			Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 8004978:	78fb      	ldrb	r3, [r7, #3]
 800497a:	3b05      	subs	r3, #5
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	441a      	add	r2, r3
 8004980:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004984:	2120      	movs	r1, #32
 8004986:	4618      	mov	r0, r3
 8004988:	f7fb fe44 	bl	8000614 <ExtractBits>
 800498c:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec

			if(Calc_CRC == Recv_CRC)
 8004990:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8004994:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004998:	429a      	cmp	r2, r3
 800499a:	d14e      	bne.n	8004a3a <Vital_Msg_extr_from_CAN+0x31e>
			{
				printf("CRC OK AFTER ROLL OVER @VITAL_CAN\n");
 800499c:	4848      	ldr	r0, [pc, #288]	; (8004ac0 <Vital_Msg_extr_from_CAN+0x3a4>)
 800499e:	f01e f949 	bl	8022c34 <puts>
				printf("Received CRC       :0x%08lX\n",Recv_CRC);
 80049a2:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 80049a6:	4847      	ldr	r0, [pc, #284]	; (8004ac4 <Vital_Msg_extr_from_CAN+0x3a8>)
 80049a8:	f01e f8a8 	bl	8022afc <iprintf>
				printf("Previous Init Value:%lu\n",Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 80049ac:	78ba      	ldrb	r2, [r7, #2]
 80049ae:	4940      	ldr	r1, [pc, #256]	; (8004ab0 <Vital_Msg_extr_from_CAN+0x394>)
 80049b0:	4613      	mov	r3, r2
 80049b2:	005b      	lsls	r3, r3, #1
 80049b4:	4413      	add	r3, r2
 80049b6:	00db      	lsls	r3, r3, #3
 80049b8:	440b      	add	r3, r1
 80049ba:	3308      	adds	r3, #8
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4619      	mov	r1, r3
 80049c0:	4841      	ldr	r0, [pc, #260]	; (8004ac8 <Vital_Msg_extr_from_CAN+0x3ac>)
 80049c2:	f01e f89b 	bl	8022afc <iprintf>
				Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = ++Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val;
 80049c6:	78ba      	ldrb	r2, [r7, #2]
 80049c8:	4939      	ldr	r1, [pc, #228]	; (8004ab0 <Vital_Msg_extr_from_CAN+0x394>)
 80049ca:	4613      	mov	r3, r2
 80049cc:	005b      	lsls	r3, r3, #1
 80049ce:	4413      	add	r3, r2
 80049d0:	00db      	lsls	r3, r3, #3
 80049d2:	440b      	add	r3, r1
 80049d4:	3308      	adds	r3, #8
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	1c59      	adds	r1, r3, #1
 80049da:	4835      	ldr	r0, [pc, #212]	; (8004ab0 <Vital_Msg_extr_from_CAN+0x394>)
 80049dc:	4613      	mov	r3, r2
 80049de:	005b      	lsls	r3, r3, #1
 80049e0:	4413      	add	r3, r2
 80049e2:	00db      	lsls	r3, r3, #3
 80049e4:	4403      	add	r3, r0
 80049e6:	3308      	adds	r3, #8
 80049e8:	6019      	str	r1, [r3, #0]
 80049ea:	78b9      	ldrb	r1, [r7, #2]
 80049ec:	4830      	ldr	r0, [pc, #192]	; (8004ab0 <Vital_Msg_extr_from_CAN+0x394>)
 80049ee:	4613      	mov	r3, r2
 80049f0:	005b      	lsls	r3, r3, #1
 80049f2:	4413      	add	r3, r2
 80049f4:	00db      	lsls	r3, r3, #3
 80049f6:	4403      	add	r3, r0
 80049f8:	3308      	adds	r3, #8
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	4833      	ldr	r0, [pc, #204]	; (8004acc <Vital_Msg_extr_from_CAN+0x3b0>)
 80049fe:	010b      	lsls	r3, r1, #4
 8004a00:	4403      	add	r3, r0
 8004a02:	3308      	adds	r3, #8
 8004a04:	601a      	str	r2, [r3, #0]
				printf("Incremented Vital_CRC Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8004a06:	78bb      	ldrb	r3, [r7, #2]
 8004a08:	4a30      	ldr	r2, [pc, #192]	; (8004acc <Vital_Msg_extr_from_CAN+0x3b0>)
 8004a0a:	011b      	lsls	r3, r3, #4
 8004a0c:	4413      	add	r3, r2
 8004a0e:	3308      	adds	r3, #8
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4619      	mov	r1, r3
 8004a14:	482e      	ldr	r0, [pc, #184]	; (8004ad0 <Vital_Msg_extr_from_CAN+0x3b4>)
 8004a16:	f01e f871 	bl	8022afc <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 8004a1a:	78bb      	ldrb	r3, [r7, #2]
 8004a1c:	78ba      	ldrb	r2, [r7, #2]
 8004a1e:	492b      	ldr	r1, [pc, #172]	; (8004acc <Vital_Msg_extr_from_CAN+0x3b0>)
 8004a20:	011b      	lsls	r3, r3, #4
 8004a22:	440b      	add	r3, r1
 8004a24:	3308      	adds	r3, #8
 8004a26:	6819      	ldr	r1, [r3, #0]
 8004a28:	482a      	ldr	r0, [pc, #168]	; (8004ad4 <Vital_Msg_extr_from_CAN+0x3b8>)
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	005b      	lsls	r3, r3, #1
 8004a2e:	4413      	add	r3, r2
 8004a30:	00db      	lsls	r3, r3, #3
 8004a32:	4403      	add	r3, r0
 8004a34:	3308      	adds	r3, #8
 8004a36:	6019      	str	r1, [r3, #0]
				goto ROLLOVER_VITAL_CAN;
 8004a38:	e055      	b.n	8004ae6 <Vital_Msg_extr_from_CAN+0x3ca>
			}
			else
			{
				printf("CAN VITAL MSG CRC fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8004a3a:	78bb      	ldrb	r3, [r7, #2]
 8004a3c:	4a16      	ldr	r2, [pc, #88]	; (8004a98 <Vital_Msg_extr_from_CAN+0x37c>)
 8004a3e:	3366      	adds	r3, #102	; 0x66
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	4413      	add	r3, r2
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	4619      	mov	r1, r3
 8004a48:	4823      	ldr	r0, [pc, #140]	; (8004ad8 <Vital_Msg_extr_from_CAN+0x3bc>)
 8004a4a:	f01e f857 	bl	8022afc <iprintf>
				printf("R-CRC:0x%08lX\n", Recv_CRC);
 8004a4e:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8004a52:	4822      	ldr	r0, [pc, #136]	; (8004adc <Vital_Msg_extr_from_CAN+0x3c0>)
 8004a54:	f01e f852 	bl	8022afc <iprintf>
				printf("C-CRC:0x%08lX\n", Calc_CRC);
 8004a58:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8004a5c:	4820      	ldr	r0, [pc, #128]	; (8004ae0 <Vital_Msg_extr_from_CAN+0x3c4>)
 8004a5e:	f01e f84d 	bl	8022afc <iprintf>
				return;
 8004a62:	f000 bc55 	b.w	8005310 <Vital_Msg_extr_from_CAN+0xbf4>
			}
		}
		else
		{
			printf("CAN VITAL MSG CRC fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8004a66:	78bb      	ldrb	r3, [r7, #2]
 8004a68:	4a0b      	ldr	r2, [pc, #44]	; (8004a98 <Vital_Msg_extr_from_CAN+0x37c>)
 8004a6a:	3366      	adds	r3, #102	; 0x66
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	4413      	add	r3, r2
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	4619      	mov	r1, r3
 8004a74:	4818      	ldr	r0, [pc, #96]	; (8004ad8 <Vital_Msg_extr_from_CAN+0x3bc>)
 8004a76:	f01e f841 	bl	8022afc <iprintf>
			printf("R-CRC:0x%08lX\n", Recv_CRC);
 8004a7a:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8004a7e:	4817      	ldr	r0, [pc, #92]	; (8004adc <Vital_Msg_extr_from_CAN+0x3c0>)
 8004a80:	f01e f83c 	bl	8022afc <iprintf>
			printf("C-CRC:0x%08lX\n", Calc_CRC);
 8004a84:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8004a88:	4815      	ldr	r0, [pc, #84]	; (8004ae0 <Vital_Msg_extr_from_CAN+0x3c4>)
 8004a8a:	f01e f837 	bl	8022afc <iprintf>
			return;
 8004a8e:	f000 bc3f 	b.w	8005310 <Vital_Msg_extr_from_CAN+0xbf4>
 8004a92:	bf00      	nop
 8004a94:	20001988 	.word	0x20001988
 8004a98:	20000304 	.word	0x20000304
 8004a9c:	08024a6c 	.word	0x08024a6c
 8004aa0:	20001968 	.word	0x20001968
 8004aa4:	20009d2c 	.word	0x20009d2c
 8004aa8:	80008001 	.word	0x80008001
 8004aac:	080247c4 	.word	0x080247c4
 8004ab0:	20001770 	.word	0x20001770
 8004ab4:	080247e4 	.word	0x080247e4
 8004ab8:	0802480c 	.word	0x0802480c
 8004abc:	08024834 	.word	0x08024834
 8004ac0:	08024ab0 	.word	0x08024ab0
 8004ac4:	08024868 	.word	0x08024868
 8004ac8:	08024ad4 	.word	0x08024ad4
 8004acc:	200011d0 	.word	0x200011d0
 8004ad0:	080248a8 	.word	0x080248a8
 8004ad4:	20001680 	.word	0x20001680
 8004ad8:	08024af0 	.word	0x08024af0
 8004adc:	08024504 	.word	0x08024504
 8004ae0:	08024514 	.word	0x08024514
		}
	}
	ROLLOVER_VITAL_CAN:
 8004ae4:	bf00      	nop
	//printf("Actual   RX Vital Init Value:0x%06lX\n",Rx_Ei_self_sharing_st.Vital_CRC_Init_Value[Source_Index]);
	BITSTUFFINC(8); // Incrementing to escape SOM
 8004ae6:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004aea:	3308      	adds	r3, #8
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	da00      	bge.n	8004af2 <Vital_Msg_extr_from_CAN+0x3d6>
 8004af0:	3307      	adds	r3, #7
 8004af2:	10db      	asrs	r3, r3, #3
 8004af4:	b29a      	uxth	r2, r3
 8004af6:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004afa:	4413      	add	r3, r2
 8004afc:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004b00:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004b04:	3308      	adds	r3, #8
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	b21b      	sxth	r3, r3
 8004b0a:	425a      	negs	r2, r3
 8004b0c:	f003 0307 	and.w	r3, r3, #7
 8004b10:	f002 0207 	and.w	r2, r2, #7
 8004b14:	bf58      	it	pl
 8004b16:	4253      	negpl	r3, r2
 8004b18:	b21b      	sxth	r3, r3
 8004b1a:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Vital_st.Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8004b1e:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	441a      	add	r2, r3
 8004b26:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004b2a:	2110      	movs	r1, #16
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f7fb fd71 	bl	8000614 <ExtractBits>
 8004b32:	4603      	mov	r3, r0
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	printf("DA:%u ",CAN_Hitachi_Vital_st.Des_Addr);
 8004b3a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004b3e:	4619      	mov	r1, r3
 8004b40:	48c6      	ldr	r0, [pc, #792]	; (8004e5c <Vital_Msg_extr_from_CAN+0x740>)
 8004b42:	f01d ffdb 	bl	8022afc <iprintf>
	BITSTUFFINC(16);
 8004b46:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004b4a:	3310      	adds	r3, #16
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	da00      	bge.n	8004b52 <Vital_Msg_extr_from_CAN+0x436>
 8004b50:	3307      	adds	r3, #7
 8004b52:	10db      	asrs	r3, r3, #3
 8004b54:	b29a      	uxth	r2, r3
 8004b56:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004b5a:	4413      	add	r3, r2
 8004b5c:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004b60:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004b64:	3310      	adds	r3, #16
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	b21b      	sxth	r3, r3
 8004b6a:	425a      	negs	r2, r3
 8004b6c:	f003 0307 	and.w	r3, r3, #7
 8004b70:	f002 0207 	and.w	r2, r2, #7
 8004b74:	bf58      	it	pl
 8004b76:	4253      	negpl	r3, r2
 8004b78:	b21b      	sxth	r3, r3
 8004b7a:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Vital_st.Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8004b7e:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	441a      	add	r2, r3
 8004b86:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004b8a:	2110      	movs	r1, #16
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f7fb fd41 	bl	8000614 <ExtractBits>
 8004b92:	4603      	mov	r3, r0
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	printf("SA:%u ",CAN_Hitachi_Vital_st.Src_Addr);
 8004b9a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	48af      	ldr	r0, [pc, #700]	; (8004e60 <Vital_Msg_extr_from_CAN+0x744>)
 8004ba2:	f01d ffab 	bl	8022afc <iprintf>
	BITSTUFFINC(16);
 8004ba6:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004baa:	3310      	adds	r3, #16
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	da00      	bge.n	8004bb2 <Vital_Msg_extr_from_CAN+0x496>
 8004bb0:	3307      	adds	r3, #7
 8004bb2:	10db      	asrs	r3, r3, #3
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004bba:	4413      	add	r3, r2
 8004bbc:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004bc0:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004bc4:	3310      	adds	r3, #16
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	b21b      	sxth	r3, r3
 8004bca:	425a      	negs	r2, r3
 8004bcc:	f003 0307 	and.w	r3, r3, #7
 8004bd0:	f002 0207 	and.w	r2, r2, #7
 8004bd4:	bf58      	it	pl
 8004bd6:	4253      	negpl	r3, r2
 8004bd8:	b21b      	sxth	r3, r3
 8004bda:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Parameters_t.Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004bde:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	441a      	add	r2, r3
 8004be6:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004bea:	2108      	movs	r1, #8
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7fb fd11 	bl	8000614 <ExtractBits>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	//printf("Tx_seq             :%u\n", CAN_Hitachi_Parameters_t.Tx_Seq);
	BITSTUFFINC(8);
 8004bfa:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004bfe:	3308      	adds	r3, #8
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	da00      	bge.n	8004c06 <Vital_Msg_extr_from_CAN+0x4ea>
 8004c04:	3307      	adds	r3, #7
 8004c06:	10db      	asrs	r3, r3, #3
 8004c08:	b29a      	uxth	r2, r3
 8004c0a:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004c0e:	4413      	add	r3, r2
 8004c10:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004c14:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004c18:	3308      	adds	r3, #8
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	b21b      	sxth	r3, r3
 8004c1e:	425a      	negs	r2, r3
 8004c20:	f003 0307 	and.w	r3, r3, #7
 8004c24:	f002 0207 	and.w	r2, r2, #7
 8004c28:	bf58      	it	pl
 8004c2a:	4253      	negpl	r3, r2
 8004c2c:	b21b      	sxth	r3, r3
 8004c2e:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Parameters_t.Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004c32:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	441a      	add	r2, r3
 8004c3a:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004c3e:	2108      	movs	r1, #8
 8004c40:	4618      	mov	r0, r3
 8004c42:	f7fb fce7 	bl	8000614 <ExtractBits>
 8004c46:	4603      	mov	r3, r0
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	//printf("Rx_seq             :%u\n", CAN_Hitachi_Parameters_t.Rx_Seq);
	BITSTUFFINC(8);
 8004c4e:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004c52:	3308      	adds	r3, #8
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	da00      	bge.n	8004c5a <Vital_Msg_extr_from_CAN+0x53e>
 8004c58:	3307      	adds	r3, #7
 8004c5a:	10db      	asrs	r3, r3, #3
 8004c5c:	b29a      	uxth	r2, r3
 8004c5e:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004c62:	4413      	add	r3, r2
 8004c64:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004c68:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004c6c:	3308      	adds	r3, #8
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	b21b      	sxth	r3, r3
 8004c72:	425a      	negs	r2, r3
 8004c74:	f003 0307 	and.w	r3, r3, #7
 8004c78:	f002 0207 	and.w	r2, r2, #7
 8004c7c:	bf58      	it	pl
 8004c7e:	4253      	negpl	r3, r2
 8004c80:	b21b      	sxth	r3, r3
 8004c82:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Vital_st.Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004c86:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	441a      	add	r2, r3
 8004c8e:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004c92:	2108      	movs	r1, #8
 8004c94:	4618      	mov	r0, r3
 8004c96:	f7fb fcbd 	bl	8000614 <ExtractBits>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	//printf("Msg_Type           :%u\n",Hitachi_Vital_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 8004ca2:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004ca6:	3308      	adds	r3, #8
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	da00      	bge.n	8004cae <Vital_Msg_extr_from_CAN+0x592>
 8004cac:	3307      	adds	r3, #7
 8004cae:	10db      	asrs	r3, r3, #3
 8004cb0:	b29a      	uxth	r2, r3
 8004cb2:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004cb6:	4413      	add	r3, r2
 8004cb8:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004cbc:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004cc0:	3308      	adds	r3, #8
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	b21b      	sxth	r3, r3
 8004cc6:	425a      	negs	r2, r3
 8004cc8:	f003 0307 	and.w	r3, r3, #7
 8004ccc:	f002 0207 	and.w	r2, r2, #7
 8004cd0:	bf58      	it	pl
 8004cd2:	4253      	negpl	r3, r2
 8004cd4:	b21b      	sxth	r3, r3
 8004cd6:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Parameters_t.Msg_Status_Flag= ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8004cda:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	441a      	add	r2, r3
 8004ce2:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004ce6:	2110      	movs	r1, #16
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f7fb fc93 	bl	8000614 <ExtractBits>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	853b      	strh	r3, [r7, #40]	; 0x28
	//printf("Msg_sts_flag       :0x%04X\n", CAN_Hitachi_Parameters_t.Msg_Status_Flag);
	BITSTUFFINC(16);
 8004cf4:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004cf8:	3310      	adds	r3, #16
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	da00      	bge.n	8004d00 <Vital_Msg_extr_from_CAN+0x5e4>
 8004cfe:	3307      	adds	r3, #7
 8004d00:	10db      	asrs	r3, r3, #3
 8004d02:	b29a      	uxth	r2, r3
 8004d04:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004d08:	4413      	add	r3, r2
 8004d0a:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004d0e:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004d12:	3310      	adds	r3, #16
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	b21b      	sxth	r3, r3
 8004d18:	425a      	negs	r2, r3
 8004d1a:	f003 0307 	and.w	r3, r3, #7
 8004d1e:	f002 0207 	and.w	r2, r2, #7
 8004d22:	bf58      	it	pl
 8004d24:	4253      	negpl	r3, r2
 8004d26:	b21b      	sxth	r3, r3
 8004d28:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	//Debug_Status_Flag(CAN_Hitachi_Parameters_t.Msg_Status_Flag,CAN_Hitachi_Vital_st.Msg_Type);

	if ( ( SET == (CHECKFLAG(TIME_STAMP,CAN_Hitachi_Parameters_t.Msg_Status_Flag))) ) // Time-stamp Extraction
 8004d2c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004d2e:	f003 0320 	and.w	r3, r3, #32
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	f000 80fe 	beq.w	8004f34 <Vital_Msg_extr_from_CAN+0x818>
	{
		CAN_HITACHI_time_Stamp_st.YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004d38:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	441a      	add	r2, r3
 8004d40:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004d44:	2108      	movs	r1, #8
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7fb fc64 	bl	8000614 <ExtractBits>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		//printf("YEAR               :0x%02X\n", CAN_HITACHI_time_Stamp_st.YY);
		BITSTUFFINC(8);
 8004d54:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004d58:	3308      	adds	r3, #8
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	da00      	bge.n	8004d60 <Vital_Msg_extr_from_CAN+0x644>
 8004d5e:	3307      	adds	r3, #7
 8004d60:	10db      	asrs	r3, r3, #3
 8004d62:	b29a      	uxth	r2, r3
 8004d64:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004d68:	4413      	add	r3, r2
 8004d6a:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004d6e:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004d72:	3308      	adds	r3, #8
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	b21b      	sxth	r3, r3
 8004d78:	425a      	negs	r2, r3
 8004d7a:	f003 0307 	and.w	r3, r3, #7
 8004d7e:	f002 0207 	and.w	r2, r2, #7
 8004d82:	bf58      	it	pl
 8004d84:	4253      	negpl	r3, r2
 8004d86:	b21b      	sxth	r3, r3
 8004d88:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004d8c:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	441a      	add	r2, r3
 8004d94:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004d98:	2108      	movs	r1, #8
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f7fb fc3a 	bl	8000614 <ExtractBits>
 8004da0:	4603      	mov	r3, r0
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	f887 3020 	strb.w	r3, [r7, #32]
		//printf("Month              :0x%02X\n", CAN_HITACHI_time_Stamp_st.MM);
		BITSTUFFINC(8);
 8004da8:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004dac:	3308      	adds	r3, #8
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	da00      	bge.n	8004db4 <Vital_Msg_extr_from_CAN+0x698>
 8004db2:	3307      	adds	r3, #7
 8004db4:	10db      	asrs	r3, r3, #3
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004dbc:	4413      	add	r3, r2
 8004dbe:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004dc2:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004dc6:	3308      	adds	r3, #8
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	b21b      	sxth	r3, r3
 8004dcc:	425a      	negs	r2, r3
 8004dce:	f003 0307 	and.w	r3, r3, #7
 8004dd2:	f002 0207 	and.w	r2, r2, #7
 8004dd6:	bf58      	it	pl
 8004dd8:	4253      	negpl	r3, r2
 8004dda:	b21b      	sxth	r3, r3
 8004ddc:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004de0:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	441a      	add	r2, r3
 8004de8:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004dec:	2108      	movs	r1, #8
 8004dee:	4618      	mov	r0, r3
 8004df0:	f7fb fc10 	bl	8000614 <ExtractBits>
 8004df4:	4603      	mov	r3, r0
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	77fb      	strb	r3, [r7, #31]
		//printf("Date               :0x%02X\n", CAN_HITACHI_time_Stamp_st.DD);
		BITSTUFFINC(8);
 8004dfa:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004dfe:	3308      	adds	r3, #8
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	da00      	bge.n	8004e06 <Vital_Msg_extr_from_CAN+0x6ea>
 8004e04:	3307      	adds	r3, #7
 8004e06:	10db      	asrs	r3, r3, #3
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004e0e:	4413      	add	r3, r2
 8004e10:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004e14:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004e18:	3308      	adds	r3, #8
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	b21b      	sxth	r3, r3
 8004e1e:	425a      	negs	r2, r3
 8004e20:	f003 0307 	and.w	r3, r3, #7
 8004e24:	f002 0207 	and.w	r2, r2, #7
 8004e28:	bf58      	it	pl
 8004e2a:	4253      	negpl	r3, r2
 8004e2c:	b21b      	sxth	r3, r3
 8004e2e:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004e32:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	441a      	add	r2, r3
 8004e3a:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004e3e:	2108      	movs	r1, #8
 8004e40:	4618      	mov	r0, r3
 8004e42:	f7fb fbe7 	bl	8000614 <ExtractBits>
 8004e46:	4603      	mov	r3, r0
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	773b      	strb	r3, [r7, #28]
		//printf("HOURS              :0x%02X\n", CAN_HITACHI_time_Stamp_st.hh);
		BITSTUFFINC(8);
 8004e4c:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004e50:	3308      	adds	r3, #8
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	da06      	bge.n	8004e64 <Vital_Msg_extr_from_CAN+0x748>
 8004e56:	3307      	adds	r3, #7
 8004e58:	e004      	b.n	8004e64 <Vital_Msg_extr_from_CAN+0x748>
 8004e5a:	bf00      	nop
 8004e5c:	080245f4 	.word	0x080245f4
 8004e60:	080245fc 	.word	0x080245fc
 8004e64:	10db      	asrs	r3, r3, #3
 8004e66:	b29a      	uxth	r2, r3
 8004e68:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004e6c:	4413      	add	r3, r2
 8004e6e:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004e72:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004e76:	3308      	adds	r3, #8
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	b21b      	sxth	r3, r3
 8004e7c:	425a      	negs	r2, r3
 8004e7e:	f003 0307 	and.w	r3, r3, #7
 8004e82:	f002 0207 	and.w	r2, r2, #7
 8004e86:	bf58      	it	pl
 8004e88:	4253      	negpl	r3, r2
 8004e8a:	b21b      	sxth	r3, r3
 8004e8c:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004e90:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	441a      	add	r2, r3
 8004e98:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004e9c:	2108      	movs	r1, #8
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f7fb fbb8 	bl	8000614 <ExtractBits>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	777b      	strb	r3, [r7, #29]
		//printf("MINS               :0x%02X\n", CAN_HITACHI_time_Stamp_st.mm);
		BITSTUFFINC(8);
 8004eaa:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004eae:	3308      	adds	r3, #8
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	da00      	bge.n	8004eb6 <Vital_Msg_extr_from_CAN+0x79a>
 8004eb4:	3307      	adds	r3, #7
 8004eb6:	10db      	asrs	r3, r3, #3
 8004eb8:	b29a      	uxth	r2, r3
 8004eba:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004ebe:	4413      	add	r3, r2
 8004ec0:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004ec4:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004ec8:	3308      	adds	r3, #8
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	b21b      	sxth	r3, r3
 8004ece:	425a      	negs	r2, r3
 8004ed0:	f003 0307 	and.w	r3, r3, #7
 8004ed4:	f002 0207 	and.w	r2, r2, #7
 8004ed8:	bf58      	it	pl
 8004eda:	4253      	negpl	r3, r2
 8004edc:	b21b      	sxth	r3, r3
 8004ede:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004ee2:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	441a      	add	r2, r3
 8004eea:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004eee:	2108      	movs	r1, #8
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f7fb fb8f 	bl	8000614 <ExtractBits>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	77bb      	strb	r3, [r7, #30]
		//printf("SEC                :0x%02X\n", CAN_HITACHI_time_Stamp_st.ss);
		BITSTUFFINC(8);
 8004efc:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004f00:	3308      	adds	r3, #8
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	da00      	bge.n	8004f08 <Vital_Msg_extr_from_CAN+0x7ec>
 8004f06:	3307      	adds	r3, #7
 8004f08:	10db      	asrs	r3, r3, #3
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004f10:	4413      	add	r3, r2
 8004f12:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004f16:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004f1a:	3308      	adds	r3, #8
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	b21b      	sxth	r3, r3
 8004f20:	425a      	negs	r2, r3
 8004f22:	f003 0307 	and.w	r3, r3, #7
 8004f26:	f002 0207 	and.w	r2, r2, #7
 8004f2a:	bf58      	it	pl
 8004f2c:	4253      	negpl	r3, r2
 8004f2e:	b21b      	sxth	r3, r3
 8004f30:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		//		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
	}
	if ( ( SET == (CHECKFLAG(LINK_ESTABLISHED,CAN_Hitachi_Parameters_t.Msg_Status_Flag))) )
 8004f34:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004f36:	f003 0308 	and.w	r3, r3, #8
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d002      	beq.n	8004f44 <Vital_Msg_extr_from_CAN+0x828>
	{
		LinkEstablishFlag = SET;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	}


	CAN_Hitachi_Vital_st.No_Outputs = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004f44:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	441a      	add	r2, r3
 8004f4c:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004f50:	2108      	movs	r1, #8
 8004f52:	4618      	mov	r0, r3
 8004f54:	f7fb fb5e 	bl	8000614 <ExtractBits>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	BITSTUFFINC(8);
 8004f60:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004f64:	3308      	adds	r3, #8
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	da00      	bge.n	8004f6c <Vital_Msg_extr_from_CAN+0x850>
 8004f6a:	3307      	adds	r3, #7
 8004f6c:	10db      	asrs	r3, r3, #3
 8004f6e:	b29a      	uxth	r2, r3
 8004f70:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004f74:	4413      	add	r3, r2
 8004f76:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004f7a:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004f7e:	3308      	adds	r3, #8
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	b21b      	sxth	r3, r3
 8004f84:	425a      	negs	r2, r3
 8004f86:	f003 0307 	and.w	r3, r3, #7
 8004f8a:	f002 0207 	and.w	r2, r2, #7
 8004f8e:	bf58      	it	pl
 8004f90:	4253      	negpl	r3, r2
 8004f92:	b21b      	sxth	r3, r3
 8004f94:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
	printf("OPS:%u ",CAN_Hitachi_Vital_st.No_Outputs);
 8004f98:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	484b      	ldr	r0, [pc, #300]	; (80050cc <Vital_Msg_extr_from_CAN+0x9b0>)
 8004fa0:	f01d fdac 	bl	8022afc <iprintf>

	CAN_Hitachi_Vital_st.Size_Num_val = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004fa4:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	441a      	add	r2, r3
 8004fac:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004fb0:	2108      	movs	r1, #8
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f7fb fb2e 	bl	8000614 <ExtractBits>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	BITSTUFFINC(8);
 8004fc0:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004fc4:	3308      	adds	r3, #8
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	da00      	bge.n	8004fcc <Vital_Msg_extr_from_CAN+0x8b0>
 8004fca:	3307      	adds	r3, #7
 8004fcc:	10db      	asrs	r3, r3, #3
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004fd4:	4413      	add	r3, r2
 8004fd6:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004fda:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004fde:	3308      	adds	r3, #8
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	b21b      	sxth	r3, r3
 8004fe4:	425a      	negs	r2, r3
 8004fe6:	f003 0307 	and.w	r3, r3, #7
 8004fea:	f002 0207 	and.w	r2, r2, #7
 8004fee:	bf58      	it	pl
 8004ff0:	4253      	negpl	r3, r2
 8004ff2:	b21b      	sxth	r3, r3
 8004ff4:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
	//printf("Sz_Num_Val_Data    :%u\n",CAN_Hitachi_Vital_st.Size_Num_val);

	noofIP = (CAN_Hitachi_Vital_st.No_Outputs% 8);
 8004ff8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004ffc:	f003 0307 	and.w	r3, r3, #7
 8005000:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
	if (noofIP != 0)
 8005004:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 8005008:	2b00      	cmp	r3, #0
 800500a:	d007      	beq.n	800501c <Vital_Msg_extr_from_CAN+0x900>
	{
		noofIP = ((CAN_Hitachi_Vital_st.No_Outputs / 8)) + 1; //	including 0th buffer
 800500c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005010:	08db      	lsrs	r3, r3, #3
 8005012:	b2db      	uxtb	r3, r3
 8005014:	3301      	adds	r3, #1
 8005016:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
 800501a:	e004      	b.n	8005026 <Vital_Msg_extr_from_CAN+0x90a>
	}
	else
	{
		noofIP = (CAN_Hitachi_Vital_st.No_Outputs / 8);
 800501c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005020:	08db      	lsrs	r3, r3, #3
 8005022:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
	}
	for (Traverser = 0; Traverser < noofIP; ++Traverser)
 8005026:	2300      	movs	r3, #0
 8005028:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 800502c:	e040      	b.n	80050b0 <Vital_Msg_extr_from_CAN+0x994>
	{
		CAN_Hitachi_Vital_st.Outputs[Traverser] = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800502e:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	441a      	add	r2, r3
 8005036:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800503a:	2108      	movs	r1, #8
 800503c:	4618      	mov	r0, r3
 800503e:	f7fb fae9 	bl	8000614 <ExtractBits>
 8005042:	4602      	mov	r2, r0
 8005044:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8005048:	b2d2      	uxtb	r2, r2
 800504a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800504e:	443b      	add	r3, r7
 8005050:	f803 2cc7 	strb.w	r2, [r3, #-199]
		printf("[%02u]:0x%02X ", Traverser,CAN_Hitachi_Vital_st.Outputs[Traverser]);
 8005054:	f8b7 10fe 	ldrh.w	r1, [r7, #254]	; 0xfe
 8005058:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 800505c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005060:	443b      	add	r3, r7
 8005062:	f813 3cc7 	ldrb.w	r3, [r3, #-199]
 8005066:	461a      	mov	r2, r3
 8005068:	4819      	ldr	r0, [pc, #100]	; (80050d0 <Vital_Msg_extr_from_CAN+0x9b4>)
 800506a:	f01d fd47 	bl	8022afc <iprintf>
		BITSTUFFINC(8);
 800506e:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8005072:	3308      	adds	r3, #8
 8005074:	2b00      	cmp	r3, #0
 8005076:	da00      	bge.n	800507a <Vital_Msg_extr_from_CAN+0x95e>
 8005078:	3307      	adds	r3, #7
 800507a:	10db      	asrs	r3, r3, #3
 800507c:	b29a      	uxth	r2, r3
 800507e:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005082:	4413      	add	r3, r2
 8005084:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8005088:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800508c:	3308      	adds	r3, #8
 800508e:	b29b      	uxth	r3, r3
 8005090:	b21b      	sxth	r3, r3
 8005092:	425a      	negs	r2, r3
 8005094:	f003 0307 	and.w	r3, r3, #7
 8005098:	f002 0207 	and.w	r2, r2, #7
 800509c:	bf58      	it	pl
 800509e:	4253      	negpl	r3, r2
 80050a0:	b21b      	sxth	r3, r3
 80050a2:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
	for (Traverser = 0; Traverser < noofIP; ++Traverser)
 80050a6:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 80050aa:	3301      	adds	r3, #1
 80050ac:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 80050b0:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	; 0xfe
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d3b7      	bcc.n	800502e <Vital_Msg_extr_from_CAN+0x912>
	}
	printf("\n");
 80050be:	200a      	movs	r0, #10
 80050c0:	f01d fd34 	bl	8022b2c <putchar>

	for (Traverser = 0; Traverser <CAN_Hitachi_Vital_st.Size_Num_val; ++Traverser)
 80050c4:	2300      	movs	r3, #0
 80050c6:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 80050ca:	e037      	b.n	800513c <Vital_Msg_extr_from_CAN+0xa20>
 80050cc:	08024b0c 	.word	0x08024b0c
 80050d0:	08024b14 	.word	0x08024b14
	{
		CAN_Hitachi_Vital_st.Num_Outputs[Traverser] = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80050d4:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	441a      	add	r2, r3
 80050dc:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80050e0:	2108      	movs	r1, #8
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7fb fa96 	bl	8000614 <ExtractBits>
 80050e8:	4602      	mov	r2, r0
 80050ea:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 80050ee:	b2d2      	uxtb	r2, r2
 80050f0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80050f4:	443b      	add	r3, r7
 80050f6:	f803 2cb7 	strb.w	r2, [r3, #-183]
		//printf("Num op Values      :0x%02X\n", CAN_Hitachi_Vital_st.Num_Outputs[Traverser]);
		BITSTUFFINC(8);
 80050fa:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 80050fe:	3308      	adds	r3, #8
 8005100:	2b00      	cmp	r3, #0
 8005102:	da00      	bge.n	8005106 <Vital_Msg_extr_from_CAN+0x9ea>
 8005104:	3307      	adds	r3, #7
 8005106:	10db      	asrs	r3, r3, #3
 8005108:	b29a      	uxth	r2, r3
 800510a:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 800510e:	4413      	add	r3, r2
 8005110:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8005114:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005118:	3308      	adds	r3, #8
 800511a:	b29b      	uxth	r3, r3
 800511c:	b21b      	sxth	r3, r3
 800511e:	425a      	negs	r2, r3
 8005120:	f003 0307 	and.w	r3, r3, #7
 8005124:	f002 0207 	and.w	r2, r2, #7
 8005128:	bf58      	it	pl
 800512a:	4253      	negpl	r3, r2
 800512c:	b21b      	sxth	r3, r3
 800512e:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
	for (Traverser = 0; Traverser <CAN_Hitachi_Vital_st.Size_Num_val; ++Traverser)
 8005132:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8005136:	3301      	adds	r3, #1
 8005138:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 800513c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005140:	b29b      	uxth	r3, r3
 8005142:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	; 0xfe
 8005146:	429a      	cmp	r2, r3
 8005148:	d3c4      	bcc.n	80050d4 <Vital_Msg_extr_from_CAN+0x9b8>
	}

	/* COPYING RELAYS INFO 2 Temporary Buffer */
	memset(&CAN_Relay_st.RelayIPS_Buff,0,sizeof(CAN_Relay_st.RelayIPS_Buff));
 800514a:	f107 0308 	add.w	r3, r7, #8
 800514e:	3301      	adds	r3, #1
 8005150:	2210      	movs	r2, #16
 8005152:	2100      	movs	r1, #0
 8005154:	4618      	mov	r0, r3
 8005156:	f01d fbe9 	bl	802292c <memset>
	memcpy(CAN_Relay_st.RelayIPS_Buff,CAN_Hitachi_Vital_st.Outputs,noofIP);
 800515a:	f897 20fd 	ldrb.w	r2, [r7, #253]	; 0xfd
 800515e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005162:	1d59      	adds	r1, r3, #5
 8005164:	f107 0308 	add.w	r3, r7, #8
 8005168:	3301      	adds	r3, #1
 800516a:	4618      	mov	r0, r3
 800516c:	f01d fbb6 	bl	80228dc <memcpy>
	CAN_Relay_st.RelayIPS_CRC = GetCRC16(0,CAN_Relay_st.RelayIPS_Buff,noofIP);
 8005170:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 8005174:	b21a      	sxth	r2, r3
 8005176:	f107 0308 	add.w	r3, r7, #8
 800517a:	3301      	adds	r3, #1
 800517c:	4619      	mov	r1, r3
 800517e:	2000      	movs	r0, #0
 8005180:	f00e f820 	bl	80131c4 <GetCRC16>
 8005184:	4603      	mov	r3, r0
 8005186:	837b      	strh	r3, [r7, #26]
	CAN_Relay_st.No_ofIps = noofIP;
 8005188:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 800518c:	767b      	strb	r3, [r7, #25]
	CAN_Relay_st.Peer_Index = Source_Index;
 800518e:	78bb      	ldrb	r3, [r7, #2]
 8005190:	723b      	strb	r3, [r7, #8]


	/*	Checking whether the Link is Established or Not
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */
	if ( (EI_data.Hitachi_st.Interface_Type[Source_Index] == ETHERNET) && (LinkEstablishFlag == SET) && (CAN_Relay_st.RelayIPS_CRC != Main_Relays_st[Source_Index].RelayIPS_CRC) )
 8005192:	78bb      	ldrb	r3, [r7, #2]
 8005194:	4a60      	ldr	r2, [pc, #384]	; (8005318 <Vital_Msg_extr_from_CAN+0xbfc>)
 8005196:	4413      	add	r3, r2
 8005198:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800519c:	2b01      	cmp	r3, #1
 800519e:	d17f      	bne.n	80052a0 <Vital_Msg_extr_from_CAN+0xb84>
 80051a0:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d17b      	bne.n	80052a0 <Vital_Msg_extr_from_CAN+0xb84>
 80051a8:	8b79      	ldrh	r1, [r7, #26]
 80051aa:	78ba      	ldrb	r2, [r7, #2]
 80051ac:	485b      	ldr	r0, [pc, #364]	; (800531c <Vital_Msg_extr_from_CAN+0xc00>)
 80051ae:	4613      	mov	r3, r2
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	4413      	add	r3, r2
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	4403      	add	r3, r0
 80051b8:	3312      	adds	r3, #18
 80051ba:	881b      	ldrh	r3, [r3, #0]
 80051bc:	4299      	cmp	r1, r3
 80051be:	d06f      	beq.n	80052a0 <Vital_Msg_extr_from_CAN+0xb84>
	{
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 80051c0:	78ba      	ldrb	r2, [r7, #2]
 80051c2:	4613      	mov	r3, r2
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	4413      	add	r3, r2
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	4a54      	ldr	r2, [pc, #336]	; (800531c <Vital_Msg_extr_from_CAN+0xc00>)
 80051cc:	4413      	add	r3, r2
 80051ce:	3301      	adds	r3, #1
 80051d0:	2210      	movs	r2, #16
 80051d2:	2100      	movs	r1, #0
 80051d4:	4618      	mov	r0, r3
 80051d6:	f01d fba9 	bl	802292c <memset>
		memcpy(&Main_Relays_st[Source_Index],&CAN_Relay_st,sizeof(RELAYS_t));
 80051da:	78ba      	ldrb	r2, [r7, #2]
 80051dc:	4613      	mov	r3, r2
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	4413      	add	r3, r2
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	4a4d      	ldr	r2, [pc, #308]	; (800531c <Vital_Msg_extr_from_CAN+0xc00>)
 80051e6:	4413      	add	r3, r2
 80051e8:	f107 0108 	add.w	r1, r7, #8
 80051ec:	2214      	movs	r2, #20
 80051ee:	4618      	mov	r0, r3
 80051f0:	f01d fb74 	bl	80228dc <memcpy>
		Last_Vital_Received_Clk[Source_Index] = Ticks;
 80051f4:	78bb      	ldrb	r3, [r7, #2]
 80051f6:	494a      	ldr	r1, [pc, #296]	; (8005320 <Vital_Msg_extr_from_CAN+0xc04>)
 80051f8:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80051fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		if(Prev_Relay_CRC[Source_Index] != Main_Relays_st[Source_Index].RelayIPS_CRC)
 8005200:	78bb      	ldrb	r3, [r7, #2]
 8005202:	4a48      	ldr	r2, [pc, #288]	; (8005324 <Vital_Msg_extr_from_CAN+0xc08>)
 8005204:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8005208:	78ba      	ldrb	r2, [r7, #2]
 800520a:	4844      	ldr	r0, [pc, #272]	; (800531c <Vital_Msg_extr_from_CAN+0xc00>)
 800520c:	4613      	mov	r3, r2
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	4413      	add	r3, r2
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	4403      	add	r3, r0
 8005216:	3312      	adds	r3, #18
 8005218:	881b      	ldrh	r3, [r3, #0]
 800521a:	4299      	cmp	r1, r3
 800521c:	d040      	beq.n	80052a0 <Vital_Msg_extr_from_CAN+0xb84>
		{
			Prev_Relay_CRC[Source_Index] = Main_Relays_st[Source_Index].RelayIPS_CRC;
 800521e:	78ba      	ldrb	r2, [r7, #2]
 8005220:	78b9      	ldrb	r1, [r7, #2]
 8005222:	483e      	ldr	r0, [pc, #248]	; (800531c <Vital_Msg_extr_from_CAN+0xc00>)
 8005224:	4613      	mov	r3, r2
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	4413      	add	r3, r2
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	4403      	add	r3, r0
 800522e:	3312      	adds	r3, #18
 8005230:	881a      	ldrh	r2, [r3, #0]
 8005232:	4b3c      	ldr	r3, [pc, #240]	; (8005324 <Vital_Msg_extr_from_CAN+0xc08>)
 8005234:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			memset(&Tx_Temp_Main_Relays_st,0,sizeof(Tx_Temp_Main_Relays_st));
 8005238:	2214      	movs	r2, #20
 800523a:	2100      	movs	r1, #0
 800523c:	483a      	ldr	r0, [pc, #232]	; (8005328 <Vital_Msg_extr_from_CAN+0xc0c>)
 800523e:	f01d fb75 	bl	802292c <memset>
			memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Source_Index],sizeof(Tx_Temp_Main_Relays_st));
 8005242:	78ba      	ldrb	r2, [r7, #2]
 8005244:	4613      	mov	r3, r2
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	4413      	add	r3, r2
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	4a33      	ldr	r2, [pc, #204]	; (800531c <Vital_Msg_extr_from_CAN+0xc00>)
 800524e:	4413      	add	r3, r2
 8005250:	2214      	movs	r2, #20
 8005252:	4619      	mov	r1, r3
 8005254:	4834      	ldr	r0, [pc, #208]	; (8005328 <Vital_Msg_extr_from_CAN+0xc0c>)
 8005256:	f01d fb41 	bl	80228dc <memcpy>
#ifdef EI_1
			TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 800525a:	f240 2007 	movw	r0, #519	; 0x207
 800525e:	f00a fc13 	bl	800fa88 <TransmitCanPkt>
#endif
#ifdef EI_2
			TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif

			if(MisMatchFlag[Source_Index] == CLEAR)
 8005262:	78bb      	ldrb	r3, [r7, #2]
 8005264:	4a31      	ldr	r2, [pc, #196]	; (800532c <Vital_Msg_extr_from_CAN+0xc10>)
 8005266:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d118      	bne.n	80052a0 <Vital_Msg_extr_from_CAN+0xb84>
			{
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Source_Index * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Source_Index].RelayIPS_Buff,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 800526e:	78bb      	ldrb	r3, [r7, #2]
 8005270:	011b      	lsls	r3, r3, #4
 8005272:	4a2f      	ldr	r2, [pc, #188]	; (8005330 <Vital_Msg_extr_from_CAN+0xc14>)
 8005274:	4413      	add	r3, r2
 8005276:	1c98      	adds	r0, r3, #2
 8005278:	78ba      	ldrb	r2, [r7, #2]
 800527a:	4613      	mov	r3, r2
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	4413      	add	r3, r2
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	4a26      	ldr	r2, [pc, #152]	; (800531c <Vital_Msg_extr_from_CAN+0xc00>)
 8005284:	4413      	add	r3, r2
 8005286:	3301      	adds	r3, #1
 8005288:	2210      	movs	r2, #16
 800528a:	4619      	mov	r1, r3
 800528c:	f01d fb26 	bl	80228dc <memcpy>
#ifdef EI_1
				TransmitCanPkt(EI_PROCESS_DATA);
 8005290:	f240 1019 	movw	r0, #281	; 0x119
 8005294:	f00a fbf8 	bl	800fa88 <TransmitCanPkt>
				MIE_Signal_Send_CLK = Ticks;
 8005298:	4a26      	ldr	r2, [pc, #152]	; (8005334 <Vital_Msg_extr_from_CAN+0xc18>)
 800529a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800529e:	6013      	str	r3, [r2, #0]





	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 80052a0:	78ba      	ldrb	r2, [r7, #2]
 80052a2:	4925      	ldr	r1, [pc, #148]	; (8005338 <Vital_Msg_extr_from_CAN+0xc1c>)
 80052a4:	4613      	mov	r3, r2
 80052a6:	005b      	lsls	r3, r3, #1
 80052a8:	4413      	add	r3, r2
 80052aa:	00db      	lsls	r3, r3, #3
 80052ac:	440b      	add	r3, r1
 80052ae:	78ba      	ldrb	r2, [r7, #2]
 80052b0:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 80052b2:	78ba      	ldrb	r2, [r7, #2]
 80052b4:	4920      	ldr	r1, [pc, #128]	; (8005338 <Vital_Msg_extr_from_CAN+0xc1c>)
 80052b6:	4613      	mov	r3, r2
 80052b8:	005b      	lsls	r3, r3, #1
 80052ba:	4413      	add	r3, r2
 80052bc:	00db      	lsls	r3, r3, #3
 80052be:	440b      	add	r3, r1
 80052c0:	3301      	adds	r3, #1
 80052c2:	2201      	movs	r2, #1
 80052c4:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 80052c6:	2218      	movs	r2, #24
 80052c8:	2100      	movs	r1, #0
 80052ca:	481c      	ldr	r0, [pc, #112]	; (800533c <Vital_Msg_extr_from_CAN+0xc20>)
 80052cc:	f01d fb2e 	bl	802292c <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 80052d0:	78ba      	ldrb	r2, [r7, #2]
 80052d2:	4613      	mov	r3, r2
 80052d4:	005b      	lsls	r3, r3, #1
 80052d6:	4413      	add	r3, r2
 80052d8:	00db      	lsls	r3, r3, #3
 80052da:	4a17      	ldr	r2, [pc, #92]	; (8005338 <Vital_Msg_extr_from_CAN+0xc1c>)
 80052dc:	4413      	add	r3, r2
 80052de:	2218      	movs	r2, #24
 80052e0:	4619      	mov	r1, r3
 80052e2:	4816      	ldr	r0, [pc, #88]	; (800533c <Vital_Msg_extr_from_CAN+0xc20>)
 80052e4:	f01d fafa 	bl	80228dc <memcpy>

#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
 80052e8:	f240 2001 	movw	r0, #513	; 0x201
 80052ec:	f00a fbcc 	bl	800fa88 <TransmitCanPkt>
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
#endif
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 80052f0:	78ba      	ldrb	r2, [r7, #2]
 80052f2:	4911      	ldr	r1, [pc, #68]	; (8005338 <Vital_Msg_extr_from_CAN+0xc1c>)
 80052f4:	4613      	mov	r3, r2
 80052f6:	005b      	lsls	r3, r3, #1
 80052f8:	4413      	add	r3, r2
 80052fa:	00db      	lsls	r3, r3, #3
 80052fc:	440b      	add	r3, r1
 80052fe:	3301      	adds	r3, #1
 8005300:	2200      	movs	r2, #0
 8005302:	701a      	strb	r2, [r3, #0]
	Self_Sharing_CAN_Clk[Source_Index] = Ticks;
 8005304:	78bb      	ldrb	r3, [r7, #2]
 8005306:	490e      	ldr	r1, [pc, #56]	; (8005340 <Vital_Msg_extr_from_CAN+0xc24>)
 8005308:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800530c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	UNUSED(CAN_HITACHI_time_Stamp_st);
}
 8005310:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	20000304 	.word	0x20000304
 800531c:	20001e8c 	.word	0x20001e8c
 8005320:	20000ee4 	.word	0x20000ee4
 8005324:	20000f0c 	.word	0x20000f0c
 8005328:	2000201c 	.word	0x2000201c
 800532c:	20000ed0 	.word	0x20000ed0
 8005330:	200010f0 	.word	0x200010f0
 8005334:	20000e7c 	.word	0x20000e7c
 8005338:	20001680 	.word	0x20001680
 800533c:	20001860 	.word	0x20001860
 8005340:	20000e50 	.word	0x20000e50

08005344 <Status_Msg_Extr>:


void Status_Msg_Extr(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 8005344:	b590      	push	{r4, r7, lr}
 8005346:	b095      	sub	sp, #84	; 0x54
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	4608      	mov	r0, r1
 800534e:	4611      	mov	r1, r2
 8005350:	461a      	mov	r2, r3
 8005352:	4603      	mov	r3, r0
 8005354:	70fb      	strb	r3, [r7, #3]
 8005356:	460b      	mov	r3, r1
 8005358:	70bb      	strb	r3, [r7, #2]
 800535a:	4613      	mov	r3, r2
 800535c:	707b      	strb	r3, [r7, #1]
	uint8_t Temp_Buff[40] = {0,};
 800535e:	2300      	movs	r3, #0
 8005360:	60bb      	str	r3, [r7, #8]
 8005362:	f107 030c 	add.w	r3, r7, #12
 8005366:	2224      	movs	r2, #36	; 0x24
 8005368:	2100      	movs	r1, #0
 800536a:	4618      	mov	r0, r3
 800536c:	f01d fade 	bl	802292c <memset>
	uint8_t uc_index = 0;
 8005370:	2300      	movs	r3, #0
 8005372:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint32_t Calc_CRC = 0;
 8005376:	2300      	movs	r3, #0
 8005378:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t Recv_CRC = 0;
 800537a:	2300      	movs	r3, #0
 800537c:	64bb      	str	r3, [r7, #72]	; 0x48
	uint8_t LinkEstablishFlag = CLEAR;
 800537e:	2300      	movs	r3, #0
 8005380:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t Ticks = HAL_GetTick();
 8005384:	f010 fbb0 	bl	8015ae8 <HAL_GetTick>
 8005388:	63f8      	str	r0, [r7, #60]	; 0x3c
	uint8_t Seq_Num_2_Detect_Roll_over = 0;
 800538a:	2300      	movs	r3, #0
 800538c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

	BITSTUFFINIT(0, 0);
 8005390:	2300      	movs	r3, #0
 8005392:	873b      	strh	r3, [r7, #56]	; 0x38
 8005394:	2300      	movs	r3, #0
 8005396:	86fb      	strh	r3, [r7, #54]	; 0x36

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8005398:	499a      	ldr	r1, [pc, #616]	; (8005604 <Status_Msg_Extr+0x2c0>)
 800539a:	489b      	ldr	r0, [pc, #620]	; (8005608 <Status_Msg_Extr+0x2c4>)
 800539c:	f7fa ff50 	bl	8000240 <strcmp>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	f000 812c 	beq.w	8005600 <Status_Msg_Extr+0x2bc>
	}


#if ENABLE_FAULT_INJECTION

	if( ( (CHECKFLAG(0,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 80053a8:	4b98      	ldr	r3, [pc, #608]	; (800560c <Status_Msg_Extr+0x2c8>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0301 	and.w	r3, r3, #1
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d02c      	beq.n	800540e <Status_Msg_Extr+0xca>
 80053b4:	4b95      	ldr	r3, [pc, #596]	; (800560c <Status_Msg_Extr+0x2c8>)
 80053b6:	791b      	ldrb	r3, [r3, #4]
 80053b8:	78ba      	ldrb	r2, [r7, #2]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d127      	bne.n	800540e <Status_Msg_Extr+0xca>
	{
		uint32_t Rand_Number = 0;
 80053be:	2300      	movs	r3, #0
 80053c0:	633b      	str	r3, [r7, #48]	; 0x30
#ifdef STM_32
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 0xffff);
 80053c2:	4893      	ldr	r0, [pc, #588]	; (8005610 <Status_Msg_Extr+0x2cc>)
 80053c4:	f015 f842 	bl	801a44c <HAL_RNG_GetRandomNumber>
 80053c8:	4602      	mov	r2, r0
 80053ca:	4b92      	ldr	r3, [pc, #584]	; (8005614 <Status_Msg_Extr+0x2d0>)
 80053cc:	fba3 1302 	umull	r1, r3, r3, r2
 80053d0:	0bd9      	lsrs	r1, r3, #15
 80053d2:	460b      	mov	r3, r1
 80053d4:	041b      	lsls	r3, r3, #16
 80053d6:	1a5b      	subs	r3, r3, r1
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	633b      	str	r3, [r7, #48]	; 0x30
#endif
		printf("Injected RX Vital CRC failure\n");
 80053dc:	488e      	ldr	r0, [pc, #568]	; (8005618 <Status_Msg_Extr+0x2d4>)
 80053de:	f01d fc29 	bl	8022c34 <puts>
		printf("Actual RX Vital Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 80053e2:	78bb      	ldrb	r3, [r7, #2]
 80053e4:	4a8d      	ldr	r2, [pc, #564]	; (800561c <Status_Msg_Extr+0x2d8>)
 80053e6:	011b      	lsls	r3, r3, #4
 80053e8:	4413      	add	r3, r2
 80053ea:	3308      	adds	r3, #8
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4619      	mov	r1, r3
 80053f0:	488b      	ldr	r0, [pc, #556]	; (8005620 <Status_Msg_Extr+0x2dc>)
 80053f2:	f01d fb83 	bl	8022afc <iprintf>
		printf("Injected RX Vital Init Value:0x%06lX\n",Rand_Number);
 80053f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80053f8:	488a      	ldr	r0, [pc, #552]	; (8005624 <Status_Msg_Extr+0x2e0>)
 80053fa:	f01d fb7f 	bl	8022afc <iprintf>
		InsertBits(0, 24, &Temp_Buff[0],Rand_Number);
 80053fe:	f107 0208 	add.w	r2, r7, #8
 8005402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005404:	2118      	movs	r1, #24
 8005406:	2000      	movs	r0, #0
 8005408:	f7fb f990 	bl	800072c <InsertBits>
	{
 800540c:	e00b      	b.n	8005426 <Status_Msg_Extr+0xe2>
	}
	else
	{
		InsertBits(0, 24, &Temp_Buff[0], Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 800540e:	78bb      	ldrb	r3, [r7, #2]
 8005410:	4a82      	ldr	r2, [pc, #520]	; (800561c <Status_Msg_Extr+0x2d8>)
 8005412:	011b      	lsls	r3, r3, #4
 8005414:	4413      	add	r3, r2
 8005416:	3308      	adds	r3, #8
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f107 0208 	add.w	r2, r7, #8
 800541e:	2118      	movs	r1, #24
 8005420:	2000      	movs	r0, #0
 8005422:	f7fb f983 	bl	800072c <InsertBits>
	}
#else
	InsertBits(0, 24, &Temp_Buff[0], Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
#endif
	//memcpy(&Temp_Buff[3],Buff,(Length-5));
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8005426:	2300      	movs	r3, #0
 8005428:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800542c:	e010      	b.n	8005450 <Status_Msg_Extr+0x10c>
	{
		Temp_Buff[uc_index + 3] = Buff[uc_index];
 800542e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	441a      	add	r2, r3
 8005436:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800543a:	3303      	adds	r3, #3
 800543c:	7812      	ldrb	r2, [r2, #0]
 800543e:	3350      	adds	r3, #80	; 0x50
 8005440:	443b      	add	r3, r7
 8005442:	f803 2c48 	strb.w	r2, [r3, #-72]
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8005446:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800544a:	3301      	adds	r3, #1
 800544c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005450:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8005454:	78fb      	ldrb	r3, [r7, #3]
 8005456:	3b05      	subs	r3, #5
 8005458:	429a      	cmp	r2, r3
 800545a:	dbe8      	blt.n	800542e <Status_Msg_Extr+0xea>
	}
	Calc_CRC = CalculateDirectReverseCrc(Temp_Buff, uc_index + 3);
 800545c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005460:	b29b      	uxth	r3, r3
 8005462:	3303      	adds	r3, #3
 8005464:	b29a      	uxth	r2, r3
 8005466:	f107 0308 	add.w	r3, r7, #8
 800546a:	4611      	mov	r1, r2
 800546c:	4618      	mov	r0, r3
 800546e:	f00d ff63 	bl	8013338 <CalculateDirectReverseCrc>
 8005472:	6438      	str	r0, [r7, #64]	; 0x40
	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 8005474:	78fb      	ldrb	r3, [r7, #3]
 8005476:	3b05      	subs	r3, #5
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	441a      	add	r2, r3
 800547c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800547e:	2120      	movs	r1, #32
 8005480:	4618      	mov	r0, r3
 8005482:	f7fb f8c7 	bl	8000614 <ExtractBits>
 8005486:	64b8      	str	r0, [r7, #72]	; 0x48
	if(Calc_CRC != Recv_CRC)
 8005488:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800548a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800548c:	429a      	cmp	r2, r3
 800548e:	f000 80df 	beq.w	8005650 <Status_Msg_Extr+0x30c>
	{
		Seq_Num_2_Detect_Roll_over = ExtractBits(0, 8, (unsigned char *)&Buff[5]);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	3305      	adds	r3, #5
 8005496:	461a      	mov	r2, r3
 8005498:	2108      	movs	r1, #8
 800549a:	2000      	movs	r0, #0
 800549c:	f7fb f8ba 	bl	8000614 <ExtractBits>
 80054a0:	4603      	mov	r3, r0
 80054a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		if( (Seq_Num_2_Detect_Roll_over ==0) || (Seq_Num_2_Detect_Roll_over == 1) )
 80054a6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d004      	beq.n	80054b8 <Status_Msg_Extr+0x174>
 80054ae:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	f040 8090 	bne.w	80055d8 <Status_Msg_Extr+0x294>
		{
			printf("Tx seq Rollover Found for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80054b8:	78bb      	ldrb	r3, [r7, #2]
 80054ba:	4a5b      	ldr	r2, [pc, #364]	; (8005628 <Status_Msg_Extr+0x2e4>)
 80054bc:	3366      	adds	r3, #102	; 0x66
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	4413      	add	r3, r2
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	4619      	mov	r1, r3
 80054c6:	4859      	ldr	r0, [pc, #356]	; (800562c <Status_Msg_Extr+0x2e8>)
 80054c8:	f01d fb18 	bl	8022afc <iprintf>
			memset(Temp_Buff,0,sizeof(Temp_Buff));
 80054cc:	f107 0308 	add.w	r3, r7, #8
 80054d0:	2228      	movs	r2, #40	; 0x28
 80054d2:	2100      	movs	r1, #0
 80054d4:	4618      	mov	r0, r3
 80054d6:	f01d fa29 	bl	802292c <memset>
			InsertBits(0, 24, &Temp_Buff[0], (Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value+1));
 80054da:	78bb      	ldrb	r3, [r7, #2]
 80054dc:	4a4f      	ldr	r2, [pc, #316]	; (800561c <Status_Msg_Extr+0x2d8>)
 80054de:	011b      	lsls	r3, r3, #4
 80054e0:	4413      	add	r3, r2
 80054e2:	3308      	adds	r3, #8
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	3301      	adds	r3, #1
 80054e8:	f107 0208 	add.w	r2, r7, #8
 80054ec:	2118      	movs	r1, #24
 80054ee:	2000      	movs	r0, #0
 80054f0:	f7fb f91c 	bl	800072c <InsertBits>
			//memcpy(&Temp_Buff[3],Buff,(Length-5));
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 80054f4:	2300      	movs	r3, #0
 80054f6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80054fa:	e010      	b.n	800551e <Status_Msg_Extr+0x1da>
			{
				Temp_Buff[uc_index + 3] = Buff[uc_index];
 80054fc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	441a      	add	r2, r3
 8005504:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005508:	3303      	adds	r3, #3
 800550a:	7812      	ldrb	r2, [r2, #0]
 800550c:	3350      	adds	r3, #80	; 0x50
 800550e:	443b      	add	r3, r7
 8005510:	f803 2c48 	strb.w	r2, [r3, #-72]
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8005514:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005518:	3301      	adds	r3, #1
 800551a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800551e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8005522:	78fb      	ldrb	r3, [r7, #3]
 8005524:	3b05      	subs	r3, #5
 8005526:	429a      	cmp	r2, r3
 8005528:	dbe8      	blt.n	80054fc <Status_Msg_Extr+0x1b8>
			}
			Calc_CRC = CalculateDirectReverseCrc(Temp_Buff, uc_index + 3);
 800552a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800552e:	b29b      	uxth	r3, r3
 8005530:	3303      	adds	r3, #3
 8005532:	b29a      	uxth	r2, r3
 8005534:	f107 0308 	add.w	r3, r7, #8
 8005538:	4611      	mov	r1, r2
 800553a:	4618      	mov	r0, r3
 800553c:	f00d fefc 	bl	8013338 <CalculateDirectReverseCrc>
 8005540:	6438      	str	r0, [r7, #64]	; 0x40
			if(Calc_CRC == Recv_CRC)
 8005542:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005544:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005546:	429a      	cmp	r2, r3
 8005548:	d132      	bne.n	80055b0 <Status_Msg_Extr+0x26c>
			{
				printf("CRC OK AFTER ROLL OVER\n");
 800554a:	4839      	ldr	r0, [pc, #228]	; (8005630 <Status_Msg_Extr+0x2ec>)
 800554c:	f01d fb72 	bl	8022c34 <puts>
				printf("Prev Init Val:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8005550:	78bb      	ldrb	r3, [r7, #2]
 8005552:	4a32      	ldr	r2, [pc, #200]	; (800561c <Status_Msg_Extr+0x2d8>)
 8005554:	011b      	lsls	r3, r3, #4
 8005556:	4413      	add	r3, r2
 8005558:	3308      	adds	r3, #8
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4619      	mov	r1, r3
 800555e:	4835      	ldr	r0, [pc, #212]	; (8005634 <Status_Msg_Extr+0x2f0>)
 8005560:	f01d facc 	bl	8022afc <iprintf>
				++Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 8005564:	78bb      	ldrb	r3, [r7, #2]
 8005566:	492d      	ldr	r1, [pc, #180]	; (800561c <Status_Msg_Extr+0x2d8>)
 8005568:	011a      	lsls	r2, r3, #4
 800556a:	440a      	add	r2, r1
 800556c:	3208      	adds	r2, #8
 800556e:	6812      	ldr	r2, [r2, #0]
 8005570:	3201      	adds	r2, #1
 8005572:	492a      	ldr	r1, [pc, #168]	; (800561c <Status_Msg_Extr+0x2d8>)
 8005574:	011b      	lsls	r3, r3, #4
 8005576:	440b      	add	r3, r1
 8005578:	3308      	adds	r3, #8
 800557a:	601a      	str	r2, [r3, #0]
				printf("After Init Val:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 800557c:	78bb      	ldrb	r3, [r7, #2]
 800557e:	4a27      	ldr	r2, [pc, #156]	; (800561c <Status_Msg_Extr+0x2d8>)
 8005580:	011b      	lsls	r3, r3, #4
 8005582:	4413      	add	r3, r2
 8005584:	3308      	adds	r3, #8
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4619      	mov	r1, r3
 800558a:	482b      	ldr	r0, [pc, #172]	; (8005638 <Status_Msg_Extr+0x2f4>)
 800558c:	f01d fab6 	bl	8022afc <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 8005590:	78bb      	ldrb	r3, [r7, #2]
 8005592:	78ba      	ldrb	r2, [r7, #2]
 8005594:	4921      	ldr	r1, [pc, #132]	; (800561c <Status_Msg_Extr+0x2d8>)
 8005596:	011b      	lsls	r3, r3, #4
 8005598:	440b      	add	r3, r1
 800559a:	3308      	adds	r3, #8
 800559c:	6819      	ldr	r1, [r3, #0]
 800559e:	4827      	ldr	r0, [pc, #156]	; (800563c <Status_Msg_Extr+0x2f8>)
 80055a0:	4613      	mov	r3, r2
 80055a2:	005b      	lsls	r3, r3, #1
 80055a4:	4413      	add	r3, r2
 80055a6:	00db      	lsls	r3, r3, #3
 80055a8:	4403      	add	r3, r0
 80055aa:	3308      	adds	r3, #8
 80055ac:	6019      	str	r1, [r3, #0]
			if(Calc_CRC == Recv_CRC)
 80055ae:	e050      	b.n	8005652 <Status_Msg_Extr+0x30e>
			}
			else
			{
				printf("Status CRC fail Rollover:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80055b0:	78bb      	ldrb	r3, [r7, #2]
 80055b2:	4a1d      	ldr	r2, [pc, #116]	; (8005628 <Status_Msg_Extr+0x2e4>)
 80055b4:	3366      	adds	r3, #102	; 0x66
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	4413      	add	r3, r2
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	4619      	mov	r1, r3
 80055be:	4820      	ldr	r0, [pc, #128]	; (8005640 <Status_Msg_Extr+0x2fc>)
 80055c0:	f01d fa9c 	bl	8022afc <iprintf>
				printf("R-CRC:0x%08lX\n",Recv_CRC);
 80055c4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80055c6:	481f      	ldr	r0, [pc, #124]	; (8005644 <Status_Msg_Extr+0x300>)
 80055c8:	f01d fa98 	bl	8022afc <iprintf>
				printf("C-CRC:0x%08lX\n",Calc_CRC);
 80055cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80055ce:	481e      	ldr	r0, [pc, #120]	; (8005648 <Status_Msg_Extr+0x304>)
 80055d0:	f01d fa94 	bl	8022afc <iprintf>
				return;
 80055d4:	f000 bc33 	b.w	8005e3e <Status_Msg_Extr+0xafa>
			}
		}
		else
		{
			printf("Status  CRC fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80055d8:	78bb      	ldrb	r3, [r7, #2]
 80055da:	4a13      	ldr	r2, [pc, #76]	; (8005628 <Status_Msg_Extr+0x2e4>)
 80055dc:	3366      	adds	r3, #102	; 0x66
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	4413      	add	r3, r2
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	4619      	mov	r1, r3
 80055e6:	4819      	ldr	r0, [pc, #100]	; (800564c <Status_Msg_Extr+0x308>)
 80055e8:	f01d fa88 	bl	8022afc <iprintf>
			printf("R-CRC:0x%08lX\n",Recv_CRC);
 80055ec:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80055ee:	4815      	ldr	r0, [pc, #84]	; (8005644 <Status_Msg_Extr+0x300>)
 80055f0:	f01d fa84 	bl	8022afc <iprintf>
			printf("C-CRC:0x%08lX\n",Calc_CRC);
 80055f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80055f6:	4814      	ldr	r0, [pc, #80]	; (8005648 <Status_Msg_Extr+0x304>)
 80055f8:	f01d fa80 	bl	8022afc <iprintf>
			return;
 80055fc:	f000 bc1f 	b.w	8005e3e <Status_Msg_Extr+0xafa>
		goto ROLLOVER_STATUS;
 8005600:	bf00      	nop
 8005602:	e026      	b.n	8005652 <Status_Msg_Extr+0x30e>
 8005604:	080242c0 	.word	0x080242c0
 8005608:	20000305 	.word	0x20000305
 800560c:	20001968 	.word	0x20001968
 8005610:	20009d2c 	.word	0x20009d2c
 8005614:	80008001 	.word	0x80008001
 8005618:	08024b24 	.word	0x08024b24
 800561c:	200011d0 	.word	0x200011d0
 8005620:	08024b44 	.word	0x08024b44
 8005624:	0802480c 	.word	0x0802480c
 8005628:	20000304 	.word	0x20000304
 800562c:	08024b68 	.word	0x08024b68
 8005630:	08024850 	.word	0x08024850
 8005634:	08024b8c 	.word	0x08024b8c
 8005638:	08024ba4 	.word	0x08024ba4
 800563c:	20001680 	.word	0x20001680
 8005640:	08024bbc 	.word	0x08024bbc
 8005644:	08024504 	.word	0x08024504
 8005648:	08024514 	.word	0x08024514
 800564c:	08024bdc 	.word	0x08024bdc
	else
	{
		//printf("Received CRC       :0x%08lX\n",Recv_CRC);
	}

	ROLLOVER_STATUS:
 8005650:	bf00      	nop

	BITSTUFFINC(8);
 8005652:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005656:	3308      	adds	r3, #8
 8005658:	2b00      	cmp	r3, #0
 800565a:	da00      	bge.n	800565e <Status_Msg_Extr+0x31a>
 800565c:	3307      	adds	r3, #7
 800565e:	10db      	asrs	r3, r3, #3
 8005660:	b29a      	uxth	r2, r3
 8005662:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005664:	4413      	add	r3, r2
 8005666:	873b      	strh	r3, [r7, #56]	; 0x38
 8005668:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800566a:	3308      	adds	r3, #8
 800566c:	b29b      	uxth	r3, r3
 800566e:	b21b      	sxth	r3, r3
 8005670:	425a      	negs	r2, r3
 8005672:	f003 0307 	and.w	r3, r3, #7
 8005676:	f002 0207 	and.w	r2, r2, #7
 800567a:	bf58      	it	pl
 800567c:	4253      	negpl	r3, r2
 800567e:	b21b      	sxth	r3, r3
 8005680:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_Status_st[Source_Index].Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8005682:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	441a      	add	r2, r3
 8005688:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800568a:	2110      	movs	r1, #16
 800568c:	4618      	mov	r0, r3
 800568e:	f7fa ffc1 	bl	8000614 <ExtractBits>
 8005692:	4603      	mov	r3, r0
 8005694:	78ba      	ldrb	r2, [r7, #2]
 8005696:	b298      	uxth	r0, r3
 8005698:	49ab      	ldr	r1, [pc, #684]	; (8005948 <Status_Msg_Extr+0x604>)
 800569a:	4613      	mov	r3, r2
 800569c:	005b      	lsls	r3, r3, #1
 800569e:	4413      	add	r3, r2
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	440b      	add	r3, r1
 80056a4:	3306      	adds	r3, #6
 80056a6:	4602      	mov	r2, r0
 80056a8:	801a      	strh	r2, [r3, #0]
	//printf("Des_Addr           :%u\n", Hitachi_Status_st[Source_Index].Des_Addr);
	BITSTUFFINC(16);
 80056aa:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80056ae:	3310      	adds	r3, #16
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	da00      	bge.n	80056b6 <Status_Msg_Extr+0x372>
 80056b4:	3307      	adds	r3, #7
 80056b6:	10db      	asrs	r3, r3, #3
 80056b8:	b29a      	uxth	r2, r3
 80056ba:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80056bc:	4413      	add	r3, r2
 80056be:	873b      	strh	r3, [r7, #56]	; 0x38
 80056c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80056c2:	3310      	adds	r3, #16
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	b21b      	sxth	r3, r3
 80056c8:	425a      	negs	r2, r3
 80056ca:	f003 0307 	and.w	r3, r3, #7
 80056ce:	f002 0207 	and.w	r2, r2, #7
 80056d2:	bf58      	it	pl
 80056d4:	4253      	negpl	r3, r2
 80056d6:	b21b      	sxth	r3, r3
 80056d8:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_Status_st[Source_Index].Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80056da:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	441a      	add	r2, r3
 80056e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80056e2:	2110      	movs	r1, #16
 80056e4:	4618      	mov	r0, r3
 80056e6:	f7fa ff95 	bl	8000614 <ExtractBits>
 80056ea:	4603      	mov	r3, r0
 80056ec:	78ba      	ldrb	r2, [r7, #2]
 80056ee:	b298      	uxth	r0, r3
 80056f0:	4995      	ldr	r1, [pc, #596]	; (8005948 <Status_Msg_Extr+0x604>)
 80056f2:	4613      	mov	r3, r2
 80056f4:	005b      	lsls	r3, r3, #1
 80056f6:	4413      	add	r3, r2
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	440b      	add	r3, r1
 80056fc:	3304      	adds	r3, #4
 80056fe:	4602      	mov	r2, r0
 8005700:	801a      	strh	r2, [r3, #0]
	//printf("Src_Addr           :%u\n", Hitachi_Status_st[Source_Index].Src_Addr);
	BITSTUFFINC(16);
 8005702:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005706:	3310      	adds	r3, #16
 8005708:	2b00      	cmp	r3, #0
 800570a:	da00      	bge.n	800570e <Status_Msg_Extr+0x3ca>
 800570c:	3307      	adds	r3, #7
 800570e:	10db      	asrs	r3, r3, #3
 8005710:	b29a      	uxth	r2, r3
 8005712:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005714:	4413      	add	r3, r2
 8005716:	873b      	strh	r3, [r7, #56]	; 0x38
 8005718:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800571a:	3310      	adds	r3, #16
 800571c:	b29b      	uxth	r3, r3
 800571e:	b21b      	sxth	r3, r3
 8005720:	425a      	negs	r2, r3
 8005722:	f003 0307 	and.w	r3, r3, #7
 8005726:	f002 0207 	and.w	r2, r2, #7
 800572a:	bf58      	it	pl
 800572c:	4253      	negpl	r3, r2
 800572e:	b21b      	sxth	r3, r3
 8005730:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_prms_st[Source_Index].Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005732:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	441a      	add	r2, r3
 8005738:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800573a:	2108      	movs	r1, #8
 800573c:	4618      	mov	r0, r3
 800573e:	f7fa ff69 	bl	8000614 <ExtractBits>
 8005742:	4602      	mov	r2, r0
 8005744:	78bb      	ldrb	r3, [r7, #2]
 8005746:	b2d1      	uxtb	r1, r2
 8005748:	4a80      	ldr	r2, [pc, #512]	; (800594c <Status_Msg_Extr+0x608>)
 800574a:	011b      	lsls	r3, r3, #4
 800574c:	4413      	add	r3, r2
 800574e:	3302      	adds	r3, #2
 8005750:	460a      	mov	r2, r1
 8005752:	701a      	strb	r2, [r3, #0]
	//printf("Tx_seq             :%u\n", Hitachi_prms_st[Source_Index].Rx_Seq);
	BITSTUFFINC(8);
 8005754:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005758:	3308      	adds	r3, #8
 800575a:	2b00      	cmp	r3, #0
 800575c:	da00      	bge.n	8005760 <Status_Msg_Extr+0x41c>
 800575e:	3307      	adds	r3, #7
 8005760:	10db      	asrs	r3, r3, #3
 8005762:	b29a      	uxth	r2, r3
 8005764:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005766:	4413      	add	r3, r2
 8005768:	873b      	strh	r3, [r7, #56]	; 0x38
 800576a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800576c:	3308      	adds	r3, #8
 800576e:	b29b      	uxth	r3, r3
 8005770:	b21b      	sxth	r3, r3
 8005772:	425a      	negs	r2, r3
 8005774:	f003 0307 	and.w	r3, r3, #7
 8005778:	f002 0207 	and.w	r2, r2, #7
 800577c:	bf58      	it	pl
 800577e:	4253      	negpl	r3, r2
 8005780:	b21b      	sxth	r3, r3
 8005782:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_prms_st[Source_Index].Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005784:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	441a      	add	r2, r3
 800578a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800578c:	2108      	movs	r1, #8
 800578e:	4618      	mov	r0, r3
 8005790:	f7fa ff40 	bl	8000614 <ExtractBits>
 8005794:	4602      	mov	r2, r0
 8005796:	78bb      	ldrb	r3, [r7, #2]
 8005798:	b2d1      	uxtb	r1, r2
 800579a:	4a6c      	ldr	r2, [pc, #432]	; (800594c <Status_Msg_Extr+0x608>)
 800579c:	011b      	lsls	r3, r3, #4
 800579e:	4413      	add	r3, r2
 80057a0:	3301      	adds	r3, #1
 80057a2:	460a      	mov	r2, r1
 80057a4:	701a      	strb	r2, [r3, #0]
	//printf("Rx_Seq             :%u\n", Hitachi_prms_st[Source_Index].Tx_Seq);
	if(Hitachi_prms_st[Source_Index].Tx_Seq == 0)
 80057a6:	78bb      	ldrb	r3, [r7, #2]
 80057a8:	4a68      	ldr	r2, [pc, #416]	; (800594c <Status_Msg_Extr+0x608>)
 80057aa:	011b      	lsls	r3, r3, #4
 80057ac:	4413      	add	r3, r2
 80057ae:	3301      	adds	r3, #1
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d138      	bne.n	8005828 <Status_Msg_Extr+0x4e4>
	{
		printf("\nRX_Seq Roll over Detected Incremented self Vital Init Value:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80057b6:	78bb      	ldrb	r3, [r7, #2]
 80057b8:	4a65      	ldr	r2, [pc, #404]	; (8005950 <Status_Msg_Extr+0x60c>)
 80057ba:	3366      	adds	r3, #102	; 0x66
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	4413      	add	r3, r2
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	4619      	mov	r1, r3
 80057c4:	4863      	ldr	r0, [pc, #396]	; (8005954 <Status_Msg_Extr+0x610>)
 80057c6:	f01d f999 	bl	8022afc <iprintf>
		printf("Prev:%06lx",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 80057ca:	78bb      	ldrb	r3, [r7, #2]
 80057cc:	4a5f      	ldr	r2, [pc, #380]	; (800594c <Status_Msg_Extr+0x608>)
 80057ce:	011b      	lsls	r3, r3, #4
 80057d0:	4413      	add	r3, r2
 80057d2:	330c      	adds	r3, #12
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4619      	mov	r1, r3
 80057d8:	485f      	ldr	r0, [pc, #380]	; (8005958 <Status_Msg_Extr+0x614>)
 80057da:	f01d f98f 	bl	8022afc <iprintf>
		++Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 80057de:	78bb      	ldrb	r3, [r7, #2]
 80057e0:	495a      	ldr	r1, [pc, #360]	; (800594c <Status_Msg_Extr+0x608>)
 80057e2:	011a      	lsls	r2, r3, #4
 80057e4:	440a      	add	r2, r1
 80057e6:	320c      	adds	r2, #12
 80057e8:	6812      	ldr	r2, [r2, #0]
 80057ea:	3201      	adds	r2, #1
 80057ec:	4957      	ldr	r1, [pc, #348]	; (800594c <Status_Msg_Extr+0x608>)
 80057ee:	011b      	lsls	r3, r3, #4
 80057f0:	440b      	add	r3, r1
 80057f2:	330c      	adds	r3, #12
 80057f4:	601a      	str	r2, [r3, #0]
		printf("Curr:%06lx",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 80057f6:	78bb      	ldrb	r3, [r7, #2]
 80057f8:	4a54      	ldr	r2, [pc, #336]	; (800594c <Status_Msg_Extr+0x608>)
 80057fa:	011b      	lsls	r3, r3, #4
 80057fc:	4413      	add	r3, r2
 80057fe:	330c      	adds	r3, #12
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4619      	mov	r1, r3
 8005804:	4855      	ldr	r0, [pc, #340]	; (800595c <Status_Msg_Extr+0x618>)
 8005806:	f01d f979 	bl	8022afc <iprintf>
		Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 800580a:	78bb      	ldrb	r3, [r7, #2]
 800580c:	78ba      	ldrb	r2, [r7, #2]
 800580e:	494f      	ldr	r1, [pc, #316]	; (800594c <Status_Msg_Extr+0x608>)
 8005810:	011b      	lsls	r3, r3, #4
 8005812:	440b      	add	r3, r1
 8005814:	330c      	adds	r3, #12
 8005816:	6819      	ldr	r1, [r3, #0]
 8005818:	4851      	ldr	r0, [pc, #324]	; (8005960 <Status_Msg_Extr+0x61c>)
 800581a:	4613      	mov	r3, r2
 800581c:	005b      	lsls	r3, r3, #1
 800581e:	4413      	add	r3, r2
 8005820:	00db      	lsls	r3, r3, #3
 8005822:	4403      	add	r3, r0
 8005824:	330c      	adds	r3, #12
 8005826:	6019      	str	r1, [r3, #0]
	}
	BITSTUFFINC(8);
 8005828:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800582c:	3308      	adds	r3, #8
 800582e:	2b00      	cmp	r3, #0
 8005830:	da00      	bge.n	8005834 <Status_Msg_Extr+0x4f0>
 8005832:	3307      	adds	r3, #7
 8005834:	10db      	asrs	r3, r3, #3
 8005836:	b29a      	uxth	r2, r3
 8005838:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800583a:	4413      	add	r3, r2
 800583c:	873b      	strh	r3, [r7, #56]	; 0x38
 800583e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005840:	3308      	adds	r3, #8
 8005842:	b29b      	uxth	r3, r3
 8005844:	b21b      	sxth	r3, r3
 8005846:	425a      	negs	r2, r3
 8005848:	f003 0307 	and.w	r3, r3, #7
 800584c:	f002 0207 	and.w	r2, r2, #7
 8005850:	bf58      	it	pl
 8005852:	4253      	negpl	r3, r2
 8005854:	b21b      	sxth	r3, r3
 8005856:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_Status_st[Source_Index].Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005858:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	441a      	add	r2, r3
 800585e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005860:	2108      	movs	r1, #8
 8005862:	4618      	mov	r0, r3
 8005864:	f7fa fed6 	bl	8000614 <ExtractBits>
 8005868:	4603      	mov	r3, r0
 800586a:	78ba      	ldrb	r2, [r7, #2]
 800586c:	b2d8      	uxtb	r0, r3
 800586e:	4936      	ldr	r1, [pc, #216]	; (8005948 <Status_Msg_Extr+0x604>)
 8005870:	4613      	mov	r3, r2
 8005872:	005b      	lsls	r3, r3, #1
 8005874:	4413      	add	r3, r2
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	440b      	add	r3, r1
 800587a:	3302      	adds	r3, #2
 800587c:	4602      	mov	r2, r0
 800587e:	701a      	strb	r2, [r3, #0]
	//printf("Msg_type           :%u\n", Hitachi_Status_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 8005880:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005884:	3308      	adds	r3, #8
 8005886:	2b00      	cmp	r3, #0
 8005888:	da00      	bge.n	800588c <Status_Msg_Extr+0x548>
 800588a:	3307      	adds	r3, #7
 800588c:	10db      	asrs	r3, r3, #3
 800588e:	b29a      	uxth	r2, r3
 8005890:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005892:	4413      	add	r3, r2
 8005894:	873b      	strh	r3, [r7, #56]	; 0x38
 8005896:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005898:	3308      	adds	r3, #8
 800589a:	b29b      	uxth	r3, r3
 800589c:	b21b      	sxth	r3, r3
 800589e:	425a      	negs	r2, r3
 80058a0:	f003 0307 	and.w	r3, r3, #7
 80058a4:	f002 0207 	and.w	r2, r2, #7
 80058a8:	bf58      	it	pl
 80058aa:	4253      	negpl	r3, r2
 80058ac:	b21b      	sxth	r3, r3
 80058ae:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_prms_st[Source_Index].Msg_Status_Flag = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80058b0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	441a      	add	r2, r3
 80058b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80058b8:	2110      	movs	r1, #16
 80058ba:	4618      	mov	r0, r3
 80058bc:	f7fa feaa 	bl	8000614 <ExtractBits>
 80058c0:	4602      	mov	r2, r0
 80058c2:	78bb      	ldrb	r3, [r7, #2]
 80058c4:	b291      	uxth	r1, r2
 80058c6:	4a21      	ldr	r2, [pc, #132]	; (800594c <Status_Msg_Extr+0x608>)
 80058c8:	011b      	lsls	r3, r3, #4
 80058ca:	4413      	add	r3, r2
 80058cc:	3304      	adds	r3, #4
 80058ce:	460a      	mov	r2, r1
 80058d0:	801a      	strh	r2, [r3, #0]
	//printf("Msg_Flag           :0x%04X\n", Hitachi_prms_st[Source_Index].Msg_Status_Flag);
	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 80058d2:	4924      	ldr	r1, [pc, #144]	; (8005964 <Status_Msg_Extr+0x620>)
 80058d4:	4824      	ldr	r0, [pc, #144]	; (8005968 <Status_Msg_Extr+0x624>)
 80058d6:	f7fa fcb3 	bl	8000240 <strcmp>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d10f      	bne.n	8005900 <Status_Msg_Extr+0x5bc>
	{
		SET_BIT_USER(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag);
 80058e0:	78bb      	ldrb	r3, [r7, #2]
 80058e2:	4a1a      	ldr	r2, [pc, #104]	; (800594c <Status_Msg_Extr+0x608>)
 80058e4:	011b      	lsls	r3, r3, #4
 80058e6:	4413      	add	r3, r2
 80058e8:	3304      	adds	r3, #4
 80058ea:	881a      	ldrh	r2, [r3, #0]
 80058ec:	78bb      	ldrb	r3, [r7, #2]
 80058ee:	f042 0208 	orr.w	r2, r2, #8
 80058f2:	b291      	uxth	r1, r2
 80058f4:	4a15      	ldr	r2, [pc, #84]	; (800594c <Status_Msg_Extr+0x608>)
 80058f6:	011b      	lsls	r3, r3, #4
 80058f8:	4413      	add	r3, r2
 80058fa:	3304      	adds	r3, #4
 80058fc:	460a      	mov	r2, r1
 80058fe:	801a      	strh	r2, [r3, #0]
	}

	BITSTUFFINC(16);
 8005900:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005904:	3310      	adds	r3, #16
 8005906:	2b00      	cmp	r3, #0
 8005908:	da00      	bge.n	800590c <Status_Msg_Extr+0x5c8>
 800590a:	3307      	adds	r3, #7
 800590c:	10db      	asrs	r3, r3, #3
 800590e:	b29a      	uxth	r2, r3
 8005910:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005912:	4413      	add	r3, r2
 8005914:	873b      	strh	r3, [r7, #56]	; 0x38
 8005916:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005918:	3310      	adds	r3, #16
 800591a:	b29b      	uxth	r3, r3
 800591c:	b21b      	sxth	r3, r3
 800591e:	425a      	negs	r2, r3
 8005920:	f003 0307 	and.w	r3, r3, #7
 8005924:	f002 0207 	and.w	r2, r2, #7
 8005928:	bf58      	it	pl
 800592a:	4253      	negpl	r3, r2
 800592c:	b21b      	sxth	r3, r3
 800592e:	86fb      	strh	r3, [r7, #54]	; 0x36

	//Debug_Status_Flag(Hitachi_prms_st[Source_Index].Msg_Status_Flag,Hitachi_Status_st[Source_Index].Msg_Type);

	if ( SET == (CHECKFLAG(TIME_STAMP,Hitachi_prms_st[Source_Index].Msg_Status_Flag)) ) // Time-stamp Extraction
 8005930:	78bb      	ldrb	r3, [r7, #2]
 8005932:	4a06      	ldr	r2, [pc, #24]	; (800594c <Status_Msg_Extr+0x608>)
 8005934:	011b      	lsls	r3, r3, #4
 8005936:	4413      	add	r3, r2
 8005938:	3304      	adds	r3, #4
 800593a:	881b      	ldrh	r3, [r3, #0]
 800593c:	f003 0320 	and.w	r3, r3, #32
 8005940:	2b00      	cmp	r3, #0
 8005942:	f000 812f 	beq.w	8005ba4 <Status_Msg_Extr+0x860>
 8005946:	e011      	b.n	800596c <Status_Msg_Extr+0x628>
 8005948:	20001608 	.word	0x20001608
 800594c:	200011d0 	.word	0x200011d0
 8005950:	20000304 	.word	0x20000304
 8005954:	08024908 	.word	0x08024908
 8005958:	08024bf4 	.word	0x08024bf4
 800595c:	08024c00 	.word	0x08024c00
 8005960:	20001680 	.word	0x20001680
 8005964:	080242c0 	.word	0x080242c0
 8005968:	20000305 	.word	0x20000305
	{
		HITACHI_time_Stamp_st[Source_Index].YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800596c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	441a      	add	r2, r3
 8005972:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005974:	2108      	movs	r1, #8
 8005976:	4618      	mov	r0, r3
 8005978:	f7fa fe4c 	bl	8000614 <ExtractBits>
 800597c:	4603      	mov	r3, r0
 800597e:	78ba      	ldrb	r2, [r7, #2]
 8005980:	b2d8      	uxtb	r0, r3
 8005982:	4984      	ldr	r1, [pc, #528]	; (8005b94 <Status_Msg_Extr+0x850>)
 8005984:	4613      	mov	r3, r2
 8005986:	005b      	lsls	r3, r3, #1
 8005988:	4413      	add	r3, r2
 800598a:	005b      	lsls	r3, r3, #1
 800598c:	440b      	add	r3, r1
 800598e:	3305      	adds	r3, #5
 8005990:	4602      	mov	r2, r0
 8005992:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8005994:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005998:	3308      	adds	r3, #8
 800599a:	2b00      	cmp	r3, #0
 800599c:	da00      	bge.n	80059a0 <Status_Msg_Extr+0x65c>
 800599e:	3307      	adds	r3, #7
 80059a0:	10db      	asrs	r3, r3, #3
 80059a2:	b29a      	uxth	r2, r3
 80059a4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80059a6:	4413      	add	r3, r2
 80059a8:	873b      	strh	r3, [r7, #56]	; 0x38
 80059aa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80059ac:	3308      	adds	r3, #8
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	b21b      	sxth	r3, r3
 80059b2:	425a      	negs	r2, r3
 80059b4:	f003 0307 	and.w	r3, r3, #7
 80059b8:	f002 0207 	and.w	r2, r2, #7
 80059bc:	bf58      	it	pl
 80059be:	4253      	negpl	r3, r2
 80059c0:	b21b      	sxth	r3, r3
 80059c2:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("YEAR               :%02X\n", HITACHI_time_Stamp_st[Source_Index].YY);

		HITACHI_time_Stamp_st[Source_Index].MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80059c4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	441a      	add	r2, r3
 80059ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80059cc:	2108      	movs	r1, #8
 80059ce:	4618      	mov	r0, r3
 80059d0:	f7fa fe20 	bl	8000614 <ExtractBits>
 80059d4:	4603      	mov	r3, r0
 80059d6:	78ba      	ldrb	r2, [r7, #2]
 80059d8:	b2d8      	uxtb	r0, r3
 80059da:	496e      	ldr	r1, [pc, #440]	; (8005b94 <Status_Msg_Extr+0x850>)
 80059dc:	4613      	mov	r3, r2
 80059de:	005b      	lsls	r3, r3, #1
 80059e0:	4413      	add	r3, r2
 80059e2:	005b      	lsls	r3, r3, #1
 80059e4:	440b      	add	r3, r1
 80059e6:	3304      	adds	r3, #4
 80059e8:	4602      	mov	r2, r0
 80059ea:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 80059ec:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80059f0:	3308      	adds	r3, #8
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	da00      	bge.n	80059f8 <Status_Msg_Extr+0x6b4>
 80059f6:	3307      	adds	r3, #7
 80059f8:	10db      	asrs	r3, r3, #3
 80059fa:	b29a      	uxth	r2, r3
 80059fc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80059fe:	4413      	add	r3, r2
 8005a00:	873b      	strh	r3, [r7, #56]	; 0x38
 8005a02:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005a04:	3308      	adds	r3, #8
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	b21b      	sxth	r3, r3
 8005a0a:	425a      	negs	r2, r3
 8005a0c:	f003 0307 	and.w	r3, r3, #7
 8005a10:	f002 0207 	and.w	r2, r2, #7
 8005a14:	bf58      	it	pl
 8005a16:	4253      	negpl	r3, r2
 8005a18:	b21b      	sxth	r3, r3
 8005a1a:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Month              :%02X\n", HITACHI_time_Stamp_st[Source_Index].MM);

		HITACHI_time_Stamp_st[Source_Index].DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005a1c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	441a      	add	r2, r3
 8005a22:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005a24:	2108      	movs	r1, #8
 8005a26:	4618      	mov	r0, r3
 8005a28:	f7fa fdf4 	bl	8000614 <ExtractBits>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	78ba      	ldrb	r2, [r7, #2]
 8005a30:	b2d8      	uxtb	r0, r3
 8005a32:	4958      	ldr	r1, [pc, #352]	; (8005b94 <Status_Msg_Extr+0x850>)
 8005a34:	4613      	mov	r3, r2
 8005a36:	005b      	lsls	r3, r3, #1
 8005a38:	4413      	add	r3, r2
 8005a3a:	005b      	lsls	r3, r3, #1
 8005a3c:	440b      	add	r3, r1
 8005a3e:	3303      	adds	r3, #3
 8005a40:	4602      	mov	r2, r0
 8005a42:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8005a44:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005a48:	3308      	adds	r3, #8
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	da00      	bge.n	8005a50 <Status_Msg_Extr+0x70c>
 8005a4e:	3307      	adds	r3, #7
 8005a50:	10db      	asrs	r3, r3, #3
 8005a52:	b29a      	uxth	r2, r3
 8005a54:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005a56:	4413      	add	r3, r2
 8005a58:	873b      	strh	r3, [r7, #56]	; 0x38
 8005a5a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005a5c:	3308      	adds	r3, #8
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	b21b      	sxth	r3, r3
 8005a62:	425a      	negs	r2, r3
 8005a64:	f003 0307 	and.w	r3, r3, #7
 8005a68:	f002 0207 	and.w	r2, r2, #7
 8005a6c:	bf58      	it	pl
 8005a6e:	4253      	negpl	r3, r2
 8005a70:	b21b      	sxth	r3, r3
 8005a72:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Date               :%02X\n", HITACHI_time_Stamp_st[Source_Index].DD);

		HITACHI_time_Stamp_st[Source_Index].hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005a74:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	441a      	add	r2, r3
 8005a7a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005a7c:	2108      	movs	r1, #8
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7fa fdc8 	bl	8000614 <ExtractBits>
 8005a84:	4603      	mov	r3, r0
 8005a86:	78ba      	ldrb	r2, [r7, #2]
 8005a88:	b2d8      	uxtb	r0, r3
 8005a8a:	4942      	ldr	r1, [pc, #264]	; (8005b94 <Status_Msg_Extr+0x850>)
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	005b      	lsls	r3, r3, #1
 8005a90:	4413      	add	r3, r2
 8005a92:	005b      	lsls	r3, r3, #1
 8005a94:	440b      	add	r3, r1
 8005a96:	4602      	mov	r2, r0
 8005a98:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8005a9a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005a9e:	3308      	adds	r3, #8
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	da00      	bge.n	8005aa6 <Status_Msg_Extr+0x762>
 8005aa4:	3307      	adds	r3, #7
 8005aa6:	10db      	asrs	r3, r3, #3
 8005aa8:	b29a      	uxth	r2, r3
 8005aaa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005aac:	4413      	add	r3, r2
 8005aae:	873b      	strh	r3, [r7, #56]	; 0x38
 8005ab0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005ab2:	3308      	adds	r3, #8
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	b21b      	sxth	r3, r3
 8005ab8:	425a      	negs	r2, r3
 8005aba:	f003 0307 	and.w	r3, r3, #7
 8005abe:	f002 0207 	and.w	r2, r2, #7
 8005ac2:	bf58      	it	pl
 8005ac4:	4253      	negpl	r3, r2
 8005ac6:	b21b      	sxth	r3, r3
 8005ac8:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Hour               :%02X\n", HITACHI_time_Stamp_st[Source_Index].hh);

		HITACHI_time_Stamp_st[Source_Index].mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005aca:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	441a      	add	r2, r3
 8005ad0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005ad2:	2108      	movs	r1, #8
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f7fa fd9d 	bl	8000614 <ExtractBits>
 8005ada:	4603      	mov	r3, r0
 8005adc:	78ba      	ldrb	r2, [r7, #2]
 8005ade:	b2d8      	uxtb	r0, r3
 8005ae0:	492c      	ldr	r1, [pc, #176]	; (8005b94 <Status_Msg_Extr+0x850>)
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	005b      	lsls	r3, r3, #1
 8005ae6:	4413      	add	r3, r2
 8005ae8:	005b      	lsls	r3, r3, #1
 8005aea:	440b      	add	r3, r1
 8005aec:	3301      	adds	r3, #1
 8005aee:	4602      	mov	r2, r0
 8005af0:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8005af2:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005af6:	3308      	adds	r3, #8
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	da00      	bge.n	8005afe <Status_Msg_Extr+0x7ba>
 8005afc:	3307      	adds	r3, #7
 8005afe:	10db      	asrs	r3, r3, #3
 8005b00:	b29a      	uxth	r2, r3
 8005b02:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005b04:	4413      	add	r3, r2
 8005b06:	873b      	strh	r3, [r7, #56]	; 0x38
 8005b08:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005b0a:	3308      	adds	r3, #8
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	b21b      	sxth	r3, r3
 8005b10:	425a      	negs	r2, r3
 8005b12:	f003 0307 	and.w	r3, r3, #7
 8005b16:	f002 0207 	and.w	r2, r2, #7
 8005b1a:	bf58      	it	pl
 8005b1c:	4253      	negpl	r3, r2
 8005b1e:	b21b      	sxth	r3, r3
 8005b20:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Minutes            :%02X\n", HITACHI_time_Stamp_st[Source_Index].mm);

		HITACHI_time_Stamp_st[Source_Index].ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005b22:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	441a      	add	r2, r3
 8005b28:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005b2a:	2108      	movs	r1, #8
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f7fa fd71 	bl	8000614 <ExtractBits>
 8005b32:	4603      	mov	r3, r0
 8005b34:	78ba      	ldrb	r2, [r7, #2]
 8005b36:	b2d8      	uxtb	r0, r3
 8005b38:	4916      	ldr	r1, [pc, #88]	; (8005b94 <Status_Msg_Extr+0x850>)
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	005b      	lsls	r3, r3, #1
 8005b3e:	4413      	add	r3, r2
 8005b40:	005b      	lsls	r3, r3, #1
 8005b42:	440b      	add	r3, r1
 8005b44:	3302      	adds	r3, #2
 8005b46:	4602      	mov	r2, r0
 8005b48:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8005b4a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005b4e:	3308      	adds	r3, #8
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	da00      	bge.n	8005b56 <Status_Msg_Extr+0x812>
 8005b54:	3307      	adds	r3, #7
 8005b56:	10db      	asrs	r3, r3, #3
 8005b58:	b29a      	uxth	r2, r3
 8005b5a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005b5c:	4413      	add	r3, r2
 8005b5e:	873b      	strh	r3, [r7, #56]	; 0x38
 8005b60:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005b62:	3308      	adds	r3, #8
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	b21b      	sxth	r3, r3
 8005b68:	425a      	negs	r2, r3
 8005b6a:	f003 0307 	and.w	r3, r3, #7
 8005b6e:	f002 0207 	and.w	r2, r2, #7
 8005b72:	bf58      	it	pl
 8005b74:	4253      	negpl	r3, r2
 8005b76:	b21b      	sxth	r3, r3
 8005b78:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Seconds            :%02X\n", HITACHI_time_Stamp_st[Source_Index].ss);

		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
 8005b7a:	78bb      	ldrb	r3, [r7, #2]
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f003 f959 	bl	8008e34 <IS_MLK_EIPC_TIME_MATCHING>
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d009      	beq.n	8005b9c <Status_Msg_Extr+0x858>
 8005b88:	78bb      	ldrb	r3, [r7, #2]
 8005b8a:	4a03      	ldr	r2, [pc, #12]	; (8005b98 <Status_Msg_Extr+0x854>)
 8005b8c:	2100      	movs	r1, #0
 8005b8e:	54d1      	strb	r1, [r2, r3]
 8005b90:	e008      	b.n	8005ba4 <Status_Msg_Extr+0x860>
 8005b92:	bf00      	nop
 8005b94:	20001194 	.word	0x20001194
 8005b98:	200010e4 	.word	0x200010e4
 8005b9c:	78bb      	ldrb	r3, [r7, #2]
 8005b9e:	4aa9      	ldr	r2, [pc, #676]	; (8005e44 <Status_Msg_Extr+0xb00>)
 8005ba0:	2101      	movs	r1, #1
 8005ba2:	54d1      	strb	r1, [r2, r3]

	}
	if ( ( SET == (CHECKFLAG(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag))) )
 8005ba4:	78bb      	ldrb	r3, [r7, #2]
 8005ba6:	4aa8      	ldr	r2, [pc, #672]	; (8005e48 <Status_Msg_Extr+0xb04>)
 8005ba8:	011b      	lsls	r3, r3, #4
 8005baa:	4413      	add	r3, r2
 8005bac:	3304      	adds	r3, #4
 8005bae:	881b      	ldrh	r3, [r3, #0]
 8005bb0:	f003 0308 	and.w	r3, r3, #8
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d002      	beq.n	8005bbe <Status_Msg_Extr+0x87a>
	{
		LinkEstablishFlag = SET;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}


	/* Preparing and Sending Reply */
	Send_Status_Message(Source_Index,Des_Index);
 8005bbe:	787a      	ldrb	r2, [r7, #1]
 8005bc0:	78bb      	ldrb	r3, [r7, #2]
 8005bc2:	4611      	mov	r1, r2
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f000 f961 	bl	8005e8c <Send_Status_Message>
	/* Preparing and Sending Reply */

	/* Updating the Clocks */
	Last_Recevied_Clock[Source_Index] = Ticks;
 8005bca:	78bb      	ldrb	r3, [r7, #2]
 8005bcc:	499f      	ldr	r1, [pc, #636]	; (8005e4c <Status_Msg_Extr+0xb08>)
 8005bce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005bd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Last_Recevied_Clock_ValidMsgs[Source_Index] = Ticks;
 8005bd4:	78bb      	ldrb	r3, [r7, #2]
 8005bd6:	499e      	ldr	r1, [pc, #632]	; (8005e50 <Status_Msg_Extr+0xb0c>)
 8005bd8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//	Recv_Init_Msg_cnt[Source_Index] = 0;
	Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff); // To detected EiPC shifting Faster
 8005bde:	78ba      	ldrb	r2, [r7, #2]
 8005be0:	499c      	ldr	r1, [pc, #624]	; (8005e54 <Status_Msg_Extr+0xb10>)
 8005be2:	4613      	mov	r3, r2
 8005be4:	005b      	lsls	r3, r3, #1
 8005be6:	4413      	add	r3, r2
 8005be8:	00db      	lsls	r3, r3, #3
 8005bea:	440b      	add	r3, r1
 8005bec:	3310      	adds	r3, #16
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	78bc      	ldrb	r4, [r7, #2]
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f009 f98e 	bl	800ef14 <HAL_Elaps_Ticks>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	4996      	ldr	r1, [pc, #600]	; (8005e54 <Status_Msg_Extr+0xb10>)
 8005bfc:	4623      	mov	r3, r4
 8005bfe:	005b      	lsls	r3, r3, #1
 8005c00:	4423      	add	r3, r4
 8005c02:	00db      	lsls	r3, r3, #3
 8005c04:	440b      	add	r3, r1
 8005c06:	3310      	adds	r3, #16
 8005c08:	601a      	str	r2, [r3, #0]


	/*	Checking whether the Link is Established or Not
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */
	if( LinkEstablishFlag == SET )
 8005c0a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d16d      	bne.n	8005cee <Status_Msg_Extr+0x9aa>
	{
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8005c12:	78ba      	ldrb	r2, [r7, #2]
 8005c14:	4613      	mov	r3, r2
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	4413      	add	r3, r2
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	4a8e      	ldr	r2, [pc, #568]	; (8005e58 <Status_Msg_Extr+0xb14>)
 8005c1e:	4413      	add	r3, r2
 8005c20:	3301      	adds	r3, #1
 8005c22:	2210      	movs	r2, #16
 8005c24:	2100      	movs	r1, #0
 8005c26:	4618      	mov	r0, r3
 8005c28:	f01c fe80 	bl	802292c <memset>
		memcpy(&Main_Relays_st[Source_Index],&Relays_st[Source_Index],sizeof(Relays_st[Source_Index]));
 8005c2c:	78ba      	ldrb	r2, [r7, #2]
 8005c2e:	4613      	mov	r3, r2
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	4413      	add	r3, r2
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	4a88      	ldr	r2, [pc, #544]	; (8005e58 <Status_Msg_Extr+0xb14>)
 8005c38:	1898      	adds	r0, r3, r2
 8005c3a:	78ba      	ldrb	r2, [r7, #2]
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	4413      	add	r3, r2
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	4a85      	ldr	r2, [pc, #532]	; (8005e5c <Status_Msg_Extr+0xb18>)
 8005c46:	4413      	add	r3, r2
 8005c48:	2214      	movs	r2, #20
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	f01c fe46 	bl	80228dc <memcpy>

		if(Prev_Relay_CRC[Source_Index] != Main_Relays_st[Source_Index].RelayIPS_CRC)
 8005c50:	78bb      	ldrb	r3, [r7, #2]
 8005c52:	4a83      	ldr	r2, [pc, #524]	; (8005e60 <Status_Msg_Extr+0xb1c>)
 8005c54:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8005c58:	78ba      	ldrb	r2, [r7, #2]
 8005c5a:	487f      	ldr	r0, [pc, #508]	; (8005e58 <Status_Msg_Extr+0xb14>)
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	4413      	add	r3, r2
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	4403      	add	r3, r0
 8005c66:	3312      	adds	r3, #18
 8005c68:	881b      	ldrh	r3, [r3, #0]
 8005c6a:	4299      	cmp	r1, r3
 8005c6c:	d03f      	beq.n	8005cee <Status_Msg_Extr+0x9aa>
		{
			Prev_Relay_CRC[Source_Index] = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8005c6e:	78ba      	ldrb	r2, [r7, #2]
 8005c70:	78b9      	ldrb	r1, [r7, #2]
 8005c72:	4879      	ldr	r0, [pc, #484]	; (8005e58 <Status_Msg_Extr+0xb14>)
 8005c74:	4613      	mov	r3, r2
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	4413      	add	r3, r2
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	4403      	add	r3, r0
 8005c7e:	3312      	adds	r3, #18
 8005c80:	881a      	ldrh	r2, [r3, #0]
 8005c82:	4b77      	ldr	r3, [pc, #476]	; (8005e60 <Status_Msg_Extr+0xb1c>)
 8005c84:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			memset(&Tx_Temp_Main_Relays_st,0,sizeof(Tx_Temp_Main_Relays_st));
 8005c88:	2214      	movs	r2, #20
 8005c8a:	2100      	movs	r1, #0
 8005c8c:	4875      	ldr	r0, [pc, #468]	; (8005e64 <Status_Msg_Extr+0xb20>)
 8005c8e:	f01c fe4d 	bl	802292c <memset>
			memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Source_Index],sizeof(Tx_Temp_Main_Relays_st));
 8005c92:	78ba      	ldrb	r2, [r7, #2]
 8005c94:	4613      	mov	r3, r2
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	4413      	add	r3, r2
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	4a6e      	ldr	r2, [pc, #440]	; (8005e58 <Status_Msg_Extr+0xb14>)
 8005c9e:	4413      	add	r3, r2
 8005ca0:	2214      	movs	r2, #20
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	486f      	ldr	r0, [pc, #444]	; (8005e64 <Status_Msg_Extr+0xb20>)
 8005ca6:	f01c fe19 	bl	80228dc <memcpy>
#ifdef EI_1
			TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 8005caa:	f240 2007 	movw	r0, #519	; 0x207
 8005cae:	f009 feeb 	bl	800fa88 <TransmitCanPkt>
#endif
#ifdef EI_2
			TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif

			if(MisMatchFlag[Source_Index] == 0)
 8005cb2:	78bb      	ldrb	r3, [r7, #2]
 8005cb4:	4a6c      	ldr	r2, [pc, #432]	; (8005e68 <Status_Msg_Extr+0xb24>)
 8005cb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d117      	bne.n	8005cee <Status_Msg_Extr+0x9aa>
			{
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Source_Index * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Source_Index].RelayIPS_Buff,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8005cbe:	78bb      	ldrb	r3, [r7, #2]
 8005cc0:	011b      	lsls	r3, r3, #4
 8005cc2:	4a6a      	ldr	r2, [pc, #424]	; (8005e6c <Status_Msg_Extr+0xb28>)
 8005cc4:	4413      	add	r3, r2
 8005cc6:	1c98      	adds	r0, r3, #2
 8005cc8:	78ba      	ldrb	r2, [r7, #2]
 8005cca:	4613      	mov	r3, r2
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	4413      	add	r3, r2
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	4a61      	ldr	r2, [pc, #388]	; (8005e58 <Status_Msg_Extr+0xb14>)
 8005cd4:	4413      	add	r3, r2
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	2210      	movs	r2, #16
 8005cda:	4619      	mov	r1, r3
 8005cdc:	f01c fdfe 	bl	80228dc <memcpy>
#ifdef EI_1
				TransmitCanPkt(EI_PROCESS_DATA);
 8005ce0:	f240 1019 	movw	r0, #281	; 0x119
 8005ce4:	f009 fed0 	bl	800fa88 <TransmitCanPkt>
				MIE_Signal_Send_CLK = Ticks;
 8005ce8:	4a61      	ldr	r2, [pc, #388]	; (8005e70 <Status_Msg_Extr+0xb2c>)
 8005cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cec:	6013      	str	r3, [r2, #0]
		}
	}


	/* Sending Information to Other Card */
	Tx_Ei_self_sharing_st[Source_Index].VITAL_DATA_CRC = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8005cee:	78b9      	ldrb	r1, [r7, #2]
 8005cf0:	78ba      	ldrb	r2, [r7, #2]
 8005cf2:	4859      	ldr	r0, [pc, #356]	; (8005e58 <Status_Msg_Extr+0xb14>)
 8005cf4:	460b      	mov	r3, r1
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	440b      	add	r3, r1
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	4403      	add	r3, r0
 8005cfe:	3312      	adds	r3, #18
 8005d00:	8818      	ldrh	r0, [r3, #0]
 8005d02:	4954      	ldr	r1, [pc, #336]	; (8005e54 <Status_Msg_Extr+0xb10>)
 8005d04:	4613      	mov	r3, r2
 8005d06:	005b      	lsls	r3, r3, #1
 8005d08:	4413      	add	r3, r2
 8005d0a:	00db      	lsls	r3, r3, #3
 8005d0c:	440b      	add	r3, r1
 8005d0e:	3306      	adds	r3, #6
 8005d10:	4602      	mov	r2, r0
 8005d12:	801a      	strh	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_CRC = Recv_CRC;
 8005d14:	78ba      	ldrb	r2, [r7, #2]
 8005d16:	494f      	ldr	r1, [pc, #316]	; (8005e54 <Status_Msg_Extr+0xb10>)
 8005d18:	4613      	mov	r3, r2
 8005d1a:	005b      	lsls	r3, r3, #1
 8005d1c:	4413      	add	r3, r2
 8005d1e:	00db      	lsls	r3, r3, #3
 8005d20:	440b      	add	r3, r1
 8005d22:	3314      	adds	r3, #20
 8005d24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d26:	601a      	str	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_Msg_Type = STATUSMSG;
 8005d28:	78ba      	ldrb	r2, [r7, #2]
 8005d2a:	494a      	ldr	r1, [pc, #296]	; (8005e54 <Status_Msg_Extr+0xb10>)
 8005d2c:	4613      	mov	r3, r2
 8005d2e:	005b      	lsls	r3, r3, #1
 8005d30:	4413      	add	r3, r2
 8005d32:	00db      	lsls	r3, r3, #3
 8005d34:	440b      	add	r3, r1
 8005d36:	3305      	adds	r3, #5
 8005d38:	2204      	movs	r2, #4
 8005d3a:	701a      	strb	r2, [r3, #0]

	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 8005d3c:	78ba      	ldrb	r2, [r7, #2]
 8005d3e:	4945      	ldr	r1, [pc, #276]	; (8005e54 <Status_Msg_Extr+0xb10>)
 8005d40:	4613      	mov	r3, r2
 8005d42:	005b      	lsls	r3, r3, #1
 8005d44:	4413      	add	r3, r2
 8005d46:	00db      	lsls	r3, r3, #3
 8005d48:	440b      	add	r3, r1
 8005d4a:	78ba      	ldrb	r2, [r7, #2]
 8005d4c:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 8005d4e:	78ba      	ldrb	r2, [r7, #2]
 8005d50:	4940      	ldr	r1, [pc, #256]	; (8005e54 <Status_Msg_Extr+0xb10>)
 8005d52:	4613      	mov	r3, r2
 8005d54:	005b      	lsls	r3, r3, #1
 8005d56:	4413      	add	r3, r2
 8005d58:	00db      	lsls	r3, r3, #3
 8005d5a:	440b      	add	r3, r1
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	2201      	movs	r2, #1
 8005d60:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].LinkEstablishFlag = LinkEstablishFlag;
 8005d62:	78ba      	ldrb	r2, [r7, #2]
 8005d64:	493b      	ldr	r1, [pc, #236]	; (8005e54 <Status_Msg_Extr+0xb10>)
 8005d66:	4613      	mov	r3, r2
 8005d68:	005b      	lsls	r3, r3, #1
 8005d6a:	4413      	add	r3, r2
 8005d6c:	00db      	lsls	r3, r3, #3
 8005d6e:	440b      	add	r3, r1
 8005d70:	3302      	adds	r3, #2
 8005d72:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8005d76:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8005d78:	2218      	movs	r2, #24
 8005d7a:	2100      	movs	r1, #0
 8005d7c:	483d      	ldr	r0, [pc, #244]	; (8005e74 <Status_Msg_Extr+0xb30>)
 8005d7e:	f01c fdd5 	bl	802292c <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 8005d82:	78ba      	ldrb	r2, [r7, #2]
 8005d84:	4613      	mov	r3, r2
 8005d86:	005b      	lsls	r3, r3, #1
 8005d88:	4413      	add	r3, r2
 8005d8a:	00db      	lsls	r3, r3, #3
 8005d8c:	4a31      	ldr	r2, [pc, #196]	; (8005e54 <Status_Msg_Extr+0xb10>)
 8005d8e:	4413      	add	r3, r2
 8005d90:	2218      	movs	r2, #24
 8005d92:	4619      	mov	r1, r3
 8005d94:	4837      	ldr	r0, [pc, #220]	; (8005e74 <Status_Msg_Extr+0xb30>)
 8005d96:	f01c fda1 	bl	80228dc <memcpy>

#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
 8005d9a:	f240 2001 	movw	r0, #513	; 0x201
 8005d9e:	f009 fe73 	bl	800fa88 <TransmitCanPkt>
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
#endif
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 8005da2:	78ba      	ldrb	r2, [r7, #2]
 8005da4:	492b      	ldr	r1, [pc, #172]	; (8005e54 <Status_Msg_Extr+0xb10>)
 8005da6:	4613      	mov	r3, r2
 8005da8:	005b      	lsls	r3, r3, #1
 8005daa:	4413      	add	r3, r2
 8005dac:	00db      	lsls	r3, r3, #3
 8005dae:	440b      	add	r3, r1
 8005db0:	3301      	adds	r3, #1
 8005db2:	2200      	movs	r2, #0
 8005db4:	701a      	strb	r2, [r3, #0]
	Self_Sharing_CAN_Clk[Source_Index] = Ticks;
 8005db6:	78bb      	ldrb	r3, [r7, #2]
 8005db8:	492f      	ldr	r1, [pc, #188]	; (8005e78 <Status_Msg_Extr+0xb34>)
 8005dba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005dbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	/* Sending Information to Other Card */



	/* Checking the Link Status */
	if(LinkEstablishFlag == SET)
 8005dc0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d11d      	bne.n	8005e04 <Status_Msg_Extr+0xac0>
	{
		Link_Establish_Clock[Source_Index] = Ticks;
 8005dc8:	78bb      	ldrb	r3, [r7, #2]
 8005dca:	492c      	ldr	r1, [pc, #176]	; (8005e7c <Status_Msg_Extr+0xb38>)
 8005dcc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishClk = Ticks;
 8005dd2:	78ba      	ldrb	r2, [r7, #2]
 8005dd4:	492a      	ldr	r1, [pc, #168]	; (8005e80 <Status_Msg_Extr+0xb3c>)
 8005dd6:	4613      	mov	r3, r2
 8005dd8:	005b      	lsls	r3, r3, #1
 8005dda:	4413      	add	r3, r2
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	440b      	add	r3, r1
 8005de0:	3304      	adds	r3, #4
 8005de2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005de4:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = SET;
 8005de6:	78ba      	ldrb	r2, [r7, #2]
 8005de8:	4925      	ldr	r1, [pc, #148]	; (8005e80 <Status_Msg_Extr+0xb3c>)
 8005dea:	4613      	mov	r3, r2
 8005dec:	005b      	lsls	r3, r3, #1
 8005dee:	4413      	add	r3, r2
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	440b      	add	r3, r1
 8005df4:	3301      	adds	r3, #1
 8005df6:	2201      	movs	r2, #1
 8005df8:	701a      	strb	r2, [r3, #0]
		Link_Flag[Source_Index] = SET;
 8005dfa:	78bb      	ldrb	r3, [r7, #2]
 8005dfc:	4a21      	ldr	r2, [pc, #132]	; (8005e84 <Status_Msg_Extr+0xb40>)
 8005dfe:	2101      	movs	r1, #1
 8005e00:	54d1      	strb	r1, [r2, r3]
 8005e02:	e017      	b.n	8005e34 <Status_Msg_Extr+0xaf0>
	}
	else
	{
		Link_Flag[Source_Index] = CLEAR;
 8005e04:	78bb      	ldrb	r3, [r7, #2]
 8005e06:	4a1f      	ldr	r2, [pc, #124]	; (8005e84 <Status_Msg_Extr+0xb40>)
 8005e08:	2100      	movs	r1, #0
 8005e0a:	54d1      	strb	r1, [r2, r3]
		Hitachi_clk_flags_st[Source_Index].Link_FailClk = Ticks;
 8005e0c:	78ba      	ldrb	r2, [r7, #2]
 8005e0e:	491c      	ldr	r1, [pc, #112]	; (8005e80 <Status_Msg_Extr+0xb3c>)
 8005e10:	4613      	mov	r3, r2
 8005e12:	005b      	lsls	r3, r3, #1
 8005e14:	4413      	add	r3, r2
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	440b      	add	r3, r1
 8005e1a:	3308      	adds	r3, #8
 8005e1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005e1e:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = CLEAR;
 8005e20:	78ba      	ldrb	r2, [r7, #2]
 8005e22:	4917      	ldr	r1, [pc, #92]	; (8005e80 <Status_Msg_Extr+0xb3c>)
 8005e24:	4613      	mov	r3, r2
 8005e26:	005b      	lsls	r3, r3, #1
 8005e28:	4413      	add	r3, r2
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	440b      	add	r3, r1
 8005e2e:	3301      	adds	r3, #1
 8005e30:	2200      	movs	r2, #0
 8005e32:	701a      	strb	r2, [r3, #0]
	}
	/* Checking the Link Status */
	HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 8005e34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005e38:	4813      	ldr	r0, [pc, #76]	; (8005e88 <Status_Msg_Extr+0xb44>)
 8005e3a:	f012 fb3e 	bl	80184ba <HAL_GPIO_TogglePin>

}
 8005e3e:	3754      	adds	r7, #84	; 0x54
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd90      	pop	{r4, r7, pc}
 8005e44:	200010e4 	.word	0x200010e4
 8005e48:	200011d0 	.word	0x200011d0
 8005e4c:	20000fb0 	.word	0x20000fb0
 8005e50:	20000fd8 	.word	0x20000fd8
 8005e54:	20001680 	.word	0x20001680
 8005e58:	20001e8c 	.word	0x20001e8c
 8005e5c:	20001dc4 	.word	0x20001dc4
 8005e60:	20000f0c 	.word	0x20000f0c
 8005e64:	2000201c 	.word	0x2000201c
 8005e68:	20000ed0 	.word	0x20000ed0
 8005e6c:	200010f0 	.word	0x200010f0
 8005e70:	20000e7c 	.word	0x20000e7c
 8005e74:	20001860 	.word	0x20001860
 8005e78:	20000e50 	.word	0x20000e50
 8005e7c:	20000f20 	.word	0x20000f20
 8005e80:	20001cd4 	.word	0x20001cd4
 8005e84:	20000f70 	.word	0x20000f70
 8005e88:	40021c00 	.word	0x40021c00

08005e8c <Send_Status_Message>:

void Send_Status_Message(uint8_t Source_Index,uint8_t Des_Index)
{
 8005e8c:	b590      	push	{r4, r7, lr}
 8005e8e:	b0a5      	sub	sp, #148	; 0x94
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	4603      	mov	r3, r0
 8005e94:	460a      	mov	r2, r1
 8005e96:	71fb      	strb	r3, [r7, #7]
 8005e98:	4613      	mov	r3, r2
 8005e9a:	71bb      	strb	r3, [r7, #6]
	uint8_t Transmit_Buff[60] = {0,};
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ea0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005ea4:	2238      	movs	r2, #56	; 0x38
 8005ea6:	2100      	movs	r1, #0
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f01c fd3f 	bl	802292c <memset>
	uint8_t Temp_Buff[60] = {0,};
 8005eae:	2300      	movs	r3, #0
 8005eb0:	60fb      	str	r3, [r7, #12]
 8005eb2:	f107 0310 	add.w	r3, r7, #16
 8005eb6:	2238      	movs	r2, #56	; 0x38
 8005eb8:	2100      	movs	r1, #0
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f01c fd36 	bl	802292c <memset>
	uint8_t uc_index = 0;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	BITSTUFFINIT(0,0);
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8005ecc:	2300      	movs	r3, #0
 8005ece:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_SOM);
 8005ed2:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005ed6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005eda:	441a      	add	r2, r3
 8005edc:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8005ee0:	23f4      	movs	r3, #244	; 0xf4
 8005ee2:	2108      	movs	r1, #8
 8005ee4:	f7fa fc22 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8005ee8:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8005eec:	3308      	adds	r3, #8
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	da00      	bge.n	8005ef4 <Send_Status_Message+0x68>
 8005ef2:	3307      	adds	r3, #7
 8005ef4:	10db      	asrs	r3, r3, #3
 8005ef6:	b29a      	uxth	r2, r3
 8005ef8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005efc:	4413      	add	r3, r2
 8005efe:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8005f02:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005f06:	3308      	adds	r3, #8
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	b21b      	sxth	r3, r3
 8005f0c:	425a      	negs	r2, r3
 8005f0e:	f003 0307 	and.w	r3, r3, #7
 8005f12:	f002 0207 	and.w	r2, r2, #7
 8005f16:	bf58      	it	pl
 8005f18:	4253      	negpl	r3, r2
 8005f1a:	b21b      	sxth	r3, r3
 8005f1c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8005f20:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005f24:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005f28:	441a      	add	r2, r3
 8005f2a:	79fb      	ldrb	r3, [r7, #7]
 8005f2c:	49bc      	ldr	r1, [pc, #752]	; (8006220 <Send_Status_Message+0x394>)
 8005f2e:	3366      	adds	r3, #102	; 0x66
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	440b      	add	r3, r1
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8005f3a:	2110      	movs	r1, #16
 8005f3c:	f7fa fbf6 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8005f40:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8005f44:	3310      	adds	r3, #16
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	da00      	bge.n	8005f4c <Send_Status_Message+0xc0>
 8005f4a:	3307      	adds	r3, #7
 8005f4c:	10db      	asrs	r3, r3, #3
 8005f4e:	b29a      	uxth	r2, r3
 8005f50:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005f54:	4413      	add	r3, r2
 8005f56:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8005f5a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005f5e:	3310      	adds	r3, #16
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	b21b      	sxth	r3, r3
 8005f64:	425a      	negs	r2, r3
 8005f66:	f003 0307 	and.w	r3, r3, #7
 8005f6a:	f002 0207 	and.w	r2, r2, #7
 8005f6e:	bf58      	it	pl
 8005f70:	4253      	negpl	r3, r2
 8005f72:	b21b      	sxth	r3, r3
 8005f74:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]);
 8005f78:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005f7c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005f80:	441a      	add	r2, r3
 8005f82:	79fb      	ldrb	r3, [r7, #7]
 8005f84:	49a6      	ldr	r1, [pc, #664]	; (8006220 <Send_Status_Message+0x394>)
 8005f86:	3370      	adds	r3, #112	; 0x70
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	440b      	add	r3, r1
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8005f92:	2110      	movs	r1, #16
 8005f94:	f7fa fbca 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8005f98:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8005f9c:	3310      	adds	r3, #16
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	da00      	bge.n	8005fa4 <Send_Status_Message+0x118>
 8005fa2:	3307      	adds	r3, #7
 8005fa4:	10db      	asrs	r3, r3, #3
 8005fa6:	b29a      	uxth	r2, r3
 8005fa8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005fac:	4413      	add	r3, r2
 8005fae:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8005fb2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005fb6:	3310      	adds	r3, #16
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	b21b      	sxth	r3, r3
 8005fbc:	425a      	negs	r2, r3
 8005fbe:	f003 0307 	and.w	r3, r3, #7
 8005fc2:	f002 0207 	and.w	r2, r2, #7
 8005fc6:	bf58      	it	pl
 8005fc8:	4253      	negpl	r3, r2
 8005fca:	b21b      	sxth	r3, r3
 8005fcc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	if( ( (CHECKFLAG(2,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8005fd0:	4b94      	ldr	r3, [pc, #592]	; (8006224 <Send_Status_Message+0x398>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	089b      	lsrs	r3, r3, #2
 8005fd6:	f003 0301 	and.w	r3, r3, #1
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d035      	beq.n	800604a <Send_Status_Message+0x1be>
 8005fde:	4b91      	ldr	r3, [pc, #580]	; (8006224 <Send_Status_Message+0x398>)
 8005fe0:	791b      	ldrb	r3, [r3, #4]
 8005fe2:	79fa      	ldrb	r2, [r7, #7]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d130      	bne.n	800604a <Send_Status_Message+0x1be>
	{
		uint8_t Rand_number = 0;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
#ifdef STM_32
		Rand_number = HAL_RNG_GetRandomNumber(&hrng) % 200;
 8005fee:	488e      	ldr	r0, [pc, #568]	; (8006228 <Send_Status_Message+0x39c>)
 8005ff0:	f014 fa2c 	bl	801a44c <HAL_RNG_GetRandomNumber>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	4b8d      	ldr	r3, [pc, #564]	; (800622c <Send_Status_Message+0x3a0>)
 8005ff8:	fba3 1302 	umull	r1, r3, r3, r2
 8005ffc:	099b      	lsrs	r3, r3, #6
 8005ffe:	21c8      	movs	r1, #200	; 0xc8
 8006000:	fb01 f303 	mul.w	r3, r1, r3
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
#endif
		printf("Injected TX Sequence value failure\n");
 800600a:	4889      	ldr	r0, [pc, #548]	; (8006230 <Send_Status_Message+0x3a4>)
 800600c:	f01c fe12 	bl	8022c34 <puts>
		printf("Actual TX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Tx_Seq);
 8006010:	79fb      	ldrb	r3, [r7, #7]
 8006012:	4a88      	ldr	r2, [pc, #544]	; (8006234 <Send_Status_Message+0x3a8>)
 8006014:	011b      	lsls	r3, r3, #4
 8006016:	4413      	add	r3, r2
 8006018:	3301      	adds	r3, #1
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	4619      	mov	r1, r3
 800601e:	4886      	ldr	r0, [pc, #536]	; (8006238 <Send_Status_Message+0x3ac>)
 8006020:	f01c fd6c 	bl	8022afc <iprintf>
		printf("Injected TX Sequence Value:%u\n",Rand_number);
 8006024:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8006028:	4619      	mov	r1, r3
 800602a:	4884      	ldr	r0, [pc, #528]	; (800623c <Send_Status_Message+0x3b0>)
 800602c:	f01c fd66 	bl	8022afc <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte],Rand_number);
 8006030:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006034:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006038:	441a      	add	r2, r3
 800603a:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800603e:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006042:	2108      	movs	r1, #8
 8006044:	f7fa fb72 	bl	800072c <InsertBits>
	{
 8006048:	e00f      	b.n	800606a <Send_Status_Message+0x1de>
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Seq); // TX Seq Number
 800604a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800604e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006052:	441a      	add	r2, r3
 8006054:	79fb      	ldrb	r3, [r7, #7]
 8006056:	4977      	ldr	r1, [pc, #476]	; (8006234 <Send_Status_Message+0x3a8>)
 8006058:	011b      	lsls	r3, r3, #4
 800605a:	440b      	add	r3, r1
 800605c:	3301      	adds	r3, #1
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006064:	2108      	movs	r1, #8
 8006066:	f7fa fb61 	bl	800072c <InsertBits>
		//Last Received Packet Rx_seq number is our TX_Seq Number
	}
	BITSTUFFINC(8);
 800606a:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800606e:	3308      	adds	r3, #8
 8006070:	2b00      	cmp	r3, #0
 8006072:	da00      	bge.n	8006076 <Send_Status_Message+0x1ea>
 8006074:	3307      	adds	r3, #7
 8006076:	10db      	asrs	r3, r3, #3
 8006078:	b29a      	uxth	r2, r3
 800607a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800607e:	4413      	add	r3, r2
 8006080:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006084:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006088:	3308      	adds	r3, #8
 800608a:	b29b      	uxth	r3, r3
 800608c:	b21b      	sxth	r3, r3
 800608e:	425a      	negs	r2, r3
 8006090:	f003 0307 	and.w	r3, r3, #7
 8006094:	f002 0207 	and.w	r2, r2, #7
 8006098:	bf58      	it	pl
 800609a:	4253      	negpl	r3, r2
 800609c:	b21b      	sxth	r3, r3
 800609e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	if( ( (CHECKFLAG(3,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 80060a2:	4b60      	ldr	r3, [pc, #384]	; (8006224 <Send_Status_Message+0x398>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	08db      	lsrs	r3, r3, #3
 80060a8:	f003 0301 	and.w	r3, r3, #1
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d038      	beq.n	8006122 <Send_Status_Message+0x296>
 80060b0:	4b5c      	ldr	r3, [pc, #368]	; (8006224 <Send_Status_Message+0x398>)
 80060b2:	791b      	ldrb	r3, [r3, #4]
 80060b4:	79fa      	ldrb	r2, [r7, #7]
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d133      	bne.n	8006122 <Send_Status_Message+0x296>
	{
		uint8_t Rand_number = 0;
 80060ba:	2300      	movs	r3, #0
 80060bc:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
#ifdef STM_32
		Rand_number = (HAL_RNG_GetRandomNumber(&hrng) % 200);
 80060c0:	4859      	ldr	r0, [pc, #356]	; (8006228 <Send_Status_Message+0x39c>)
 80060c2:	f014 f9c3 	bl	801a44c <HAL_RNG_GetRandomNumber>
 80060c6:	4602      	mov	r2, r0
 80060c8:	4b58      	ldr	r3, [pc, #352]	; (800622c <Send_Status_Message+0x3a0>)
 80060ca:	fba3 1302 	umull	r1, r3, r3, r2
 80060ce:	099b      	lsrs	r3, r3, #6
 80060d0:	21c8      	movs	r1, #200	; 0xc8
 80060d2:	fb01 f303 	mul.w	r3, r1, r3
 80060d6:	1ad3      	subs	r3, r2, r3
 80060d8:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
#endif
		printf("Injected RX Sequence value failure\n");
 80060dc:	4858      	ldr	r0, [pc, #352]	; (8006240 <Send_Status_Message+0x3b4>)
 80060de:	f01c fda9 	bl	8022c34 <puts>
		printf("Actual RX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Rx_Seq);
 80060e2:	79fb      	ldrb	r3, [r7, #7]
 80060e4:	4a53      	ldr	r2, [pc, #332]	; (8006234 <Send_Status_Message+0x3a8>)
 80060e6:	011b      	lsls	r3, r3, #4
 80060e8:	4413      	add	r3, r2
 80060ea:	3302      	adds	r3, #2
 80060ec:	781b      	ldrb	r3, [r3, #0]
 80060ee:	4619      	mov	r1, r3
 80060f0:	4854      	ldr	r0, [pc, #336]	; (8006244 <Send_Status_Message+0x3b8>)
 80060f2:	f01c fd03 	bl	8022afc <iprintf>
		printf("Injected RX Vital Init Value:%u\n",Rand_number);
 80060f6:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80060fa:	4619      	mov	r1, r3
 80060fc:	4852      	ldr	r0, [pc, #328]	; (8006248 <Send_Status_Message+0x3bc>)
 80060fe:	f01c fcfd 	bl	8022afc <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_number); // Rx Seq Number
 8006102:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006106:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800610a:	441a      	add	r2, r3
 800610c:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8006110:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006114:	2108      	movs	r1, #8
 8006116:	f7fa fb09 	bl	800072c <InsertBits>
		Rx_Seq_failure = 1;
 800611a:	4b4c      	ldr	r3, [pc, #304]	; (800624c <Send_Status_Message+0x3c0>)
 800611c:	2201      	movs	r2, #1
 800611e:	701a      	strb	r2, [r3, #0]
	{
 8006120:	e020      	b.n	8006164 <Send_Status_Message+0x2d8>
	}
	else
	{
		Rx_Seq_failure = 0;
 8006122:	4b4a      	ldr	r3, [pc, #296]	; (800624c <Send_Status_Message+0x3c0>)
 8006124:	2200      	movs	r2, #0
 8006126:	701a      	strb	r2, [r3, #0]
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], ++Hitachi_prms_st[Source_Index].Rx_Seq); // Rx Seq Number
 8006128:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800612c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006130:	18d1      	adds	r1, r2, r3
 8006132:	79fb      	ldrb	r3, [r7, #7]
 8006134:	483f      	ldr	r0, [pc, #252]	; (8006234 <Send_Status_Message+0x3a8>)
 8006136:	011a      	lsls	r2, r3, #4
 8006138:	4402      	add	r2, r0
 800613a:	3202      	adds	r2, #2
 800613c:	7812      	ldrb	r2, [r2, #0]
 800613e:	3201      	adds	r2, #1
 8006140:	b2d4      	uxtb	r4, r2
 8006142:	483c      	ldr	r0, [pc, #240]	; (8006234 <Send_Status_Message+0x3a8>)
 8006144:	011a      	lsls	r2, r3, #4
 8006146:	4402      	add	r2, r0
 8006148:	3202      	adds	r2, #2
 800614a:	4620      	mov	r0, r4
 800614c:	7010      	strb	r0, [r2, #0]
 800614e:	4a39      	ldr	r2, [pc, #228]	; (8006234 <Send_Status_Message+0x3a8>)
 8006150:	011b      	lsls	r3, r3, #4
 8006152:	4413      	add	r3, r2
 8006154:	3302      	adds	r3, #2
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800615c:	460a      	mov	r2, r1
 800615e:	2108      	movs	r1, #8
 8006160:	f7fa fae4 	bl	800072c <InsertBits>
		//Last Received Packet Tx_seq number is our Rx_Seq Number incremented by 1.
	}
	BITSTUFFINC(8);
 8006164:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006168:	3308      	adds	r3, #8
 800616a:	2b00      	cmp	r3, #0
 800616c:	da00      	bge.n	8006170 <Send_Status_Message+0x2e4>
 800616e:	3307      	adds	r3, #7
 8006170:	10db      	asrs	r3, r3, #3
 8006172:	b29a      	uxth	r2, r3
 8006174:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006178:	4413      	add	r3, r2
 800617a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800617e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006182:	3308      	adds	r3, #8
 8006184:	b29b      	uxth	r3, r3
 8006186:	b21b      	sxth	r3, r3
 8006188:	425a      	negs	r2, r3
 800618a:	f003 0307 	and.w	r3, r3, #7
 800618e:	f002 0207 	and.w	r2, r2, #7
 8006192:	bf58      	it	pl
 8006194:	4253      	negpl	r3, r2
 8006196:	b21b      	sxth	r3, r3
 8006198:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], STATUSMSG);
 800619c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80061a0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80061a4:	441a      	add	r2, r3
 80061a6:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80061aa:	2304      	movs	r3, #4
 80061ac:	2108      	movs	r1, #8
 80061ae:	f7fa fabd 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80061b2:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80061b6:	3308      	adds	r3, #8
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	da00      	bge.n	80061be <Send_Status_Message+0x332>
 80061bc:	3307      	adds	r3, #7
 80061be:	10db      	asrs	r3, r3, #3
 80061c0:	b29a      	uxth	r2, r3
 80061c2:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80061c6:	4413      	add	r3, r2
 80061c8:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80061cc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80061d0:	3308      	adds	r3, #8
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	b21b      	sxth	r3, r3
 80061d6:	425a      	negs	r2, r3
 80061d8:	f003 0307 	and.w	r3, r3, #7
 80061dc:	f002 0207 	and.w	r2, r2, #7
 80061e0:	bf58      	it	pl
 80061e2:	4253      	negpl	r3, r2
 80061e4:	b21b      	sxth	r3, r3
 80061e6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a


	if(SET == CHECKFLAG(3,Hitachi_prms_st[Source_Index].Msg_Status_Flag))
 80061ea:	79fb      	ldrb	r3, [r7, #7]
 80061ec:	4a11      	ldr	r2, [pc, #68]	; (8006234 <Send_Status_Message+0x3a8>)
 80061ee:	011b      	lsls	r3, r3, #4
 80061f0:	4413      	add	r3, r2
 80061f2:	3304      	adds	r3, #4
 80061f4:	881b      	ldrh	r3, [r3, #0]
 80061f6:	f003 0308 	and.w	r3, r3, #8
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d052      	beq.n	80062a4 <Send_Status_Message+0x418>
	{
		if(Change_MLK_TIME[Source_Index]== 1)
 80061fe:	79fb      	ldrb	r3, [r7, #7]
 8006200:	4a13      	ldr	r2, [pc, #76]	; (8006250 <Send_Status_Message+0x3c4>)
 8006202:	5cd3      	ldrb	r3, [r2, r3]
 8006204:	2b01      	cmp	r3, #1
 8006206:	d125      	bne.n	8006254 <Send_Status_Message+0x3c8>
		{
			InsertBits(ucBit, 16, &Transmit_Buff[ucByte],0x0068);
 8006208:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800620c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006210:	441a      	add	r2, r3
 8006212:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006216:	2368      	movs	r3, #104	; 0x68
 8006218:	2110      	movs	r1, #16
 800621a:	f7fa fa87 	bl	800072c <InsertBits>
 800621e:	e024      	b.n	800626a <Send_Status_Message+0x3de>
 8006220:	20000304 	.word	0x20000304
 8006224:	20001968 	.word	0x20001968
 8006228:	20009d2c 	.word	0x20009d2c
 800622c:	51eb851f 	.word	0x51eb851f
 8006230:	08024668 	.word	0x08024668
 8006234:	200011d0 	.word	0x200011d0
 8006238:	08024c0c 	.word	0x08024c0c
 800623c:	08024c2c 	.word	0x08024c2c
 8006240:	080246cc 	.word	0x080246cc
 8006244:	08024c4c 	.word	0x08024c4c
 8006248:	08024c6c 	.word	0x08024c6c
 800624c:	20000e44 	.word	0x20000e44
 8006250:	200010e4 	.word	0x200010e4
		}
		else
		{
			InsertBits(ucBit, 16, &Transmit_Buff[ucByte],0x0028);
 8006254:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006258:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800625c:	441a      	add	r2, r3
 800625e:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006262:	2328      	movs	r3, #40	; 0x28
 8006264:	2110      	movs	r1, #16
 8006266:	f7fa fa61 	bl	800072c <InsertBits>
		}
		BITSTUFFINC(16);
 800626a:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800626e:	3310      	adds	r3, #16
 8006270:	2b00      	cmp	r3, #0
 8006272:	da00      	bge.n	8006276 <Send_Status_Message+0x3ea>
 8006274:	3307      	adds	r3, #7
 8006276:	10db      	asrs	r3, r3, #3
 8006278:	b29a      	uxth	r2, r3
 800627a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800627e:	4413      	add	r3, r2
 8006280:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006284:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006288:	3310      	adds	r3, #16
 800628a:	b29b      	uxth	r3, r3
 800628c:	b21b      	sxth	r3, r3
 800628e:	425a      	negs	r2, r3
 8006290:	f003 0307 	and.w	r3, r3, #7
 8006294:	f002 0207 	and.w	r2, r2, #7
 8006298:	bf58      	it	pl
 800629a:	4253      	negpl	r3, r2
 800629c:	b21b      	sxth	r3, r3
 800629e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80062a2:	e03a      	b.n	800631a <Send_Status_Message+0x48e>
	}
	else
	{
		if(Change_MLK_TIME[Source_Index]== 1)
 80062a4:	79fb      	ldrb	r3, [r7, #7]
 80062a6:	4a08      	ldr	r2, [pc, #32]	; (80062c8 <Send_Status_Message+0x43c>)
 80062a8:	5cd3      	ldrb	r3, [r2, r3]
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d10e      	bne.n	80062cc <Send_Status_Message+0x440>
		{
			InsertBits(ucBit, 16, &Transmit_Buff[ucByte],0x0064);
 80062ae:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80062b2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80062b6:	441a      	add	r2, r3
 80062b8:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80062bc:	2364      	movs	r3, #100	; 0x64
 80062be:	2110      	movs	r1, #16
 80062c0:	f7fa fa34 	bl	800072c <InsertBits>
 80062c4:	e00d      	b.n	80062e2 <Send_Status_Message+0x456>
 80062c6:	bf00      	nop
 80062c8:	200010e4 	.word	0x200010e4
		}
		else
		{
			InsertBits(ucBit, 16, &Transmit_Buff[ucByte],0x0024);
 80062cc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80062d0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80062d4:	441a      	add	r2, r3
 80062d6:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80062da:	2324      	movs	r3, #36	; 0x24
 80062dc:	2110      	movs	r1, #16
 80062de:	f7fa fa25 	bl	800072c <InsertBits>
		}
		BITSTUFFINC(16);
 80062e2:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80062e6:	3310      	adds	r3, #16
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	da00      	bge.n	80062ee <Send_Status_Message+0x462>
 80062ec:	3307      	adds	r3, #7
 80062ee:	10db      	asrs	r3, r3, #3
 80062f0:	b29a      	uxth	r2, r3
 80062f2:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80062f6:	4413      	add	r3, r2
 80062f8:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80062fc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006300:	3310      	adds	r3, #16
 8006302:	b29b      	uxth	r3, r3
 8006304:	b21b      	sxth	r3, r3
 8006306:	425a      	negs	r2, r3
 8006308:	f003 0307 	and.w	r3, r3, #7
 800630c:	f002 0207 	and.w	r2, r2, #7
 8006310:	bf58      	it	pl
 8006312:	4253      	negpl	r3, r2
 8006314:	b21b      	sxth	r3, r3
 8006316:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	}

	if (((Hitachi_prms_st[Source_Index].Msg_Status_Flag >> 5) & 1)) // Time-stamp Extraction
 800631a:	79fb      	ldrb	r3, [r7, #7]
 800631c:	4ac6      	ldr	r2, [pc, #792]	; (8006638 <Send_Status_Message+0x7ac>)
 800631e:	011b      	lsls	r3, r3, #4
 8006320:	4413      	add	r3, r2
 8006322:	3304      	adds	r3, #4
 8006324:	881b      	ldrh	r3, [r3, #0]
 8006326:	095b      	lsrs	r3, r3, #5
 8006328:	b29b      	uxth	r3, r3
 800632a:	f003 0301 	and.w	r3, r3, #1
 800632e:	2b00      	cmp	r3, #0
 8006330:	f000 8139 	beq.w	80065a6 <Send_Status_Message+0x71a>
	{
		if(Change_MLK_TIME[Source_Index]== 1)
 8006334:	79fb      	ldrb	r3, [r7, #7]
 8006336:	4ac1      	ldr	r2, [pc, #772]	; (800663c <Send_Status_Message+0x7b0>)
 8006338:	5cd3      	ldrb	r3, [r2, r3]
 800633a:	2b01      	cmp	r3, #1
 800633c:	d114      	bne.n	8006368 <Send_Status_Message+0x4dc>
		{
			Get_time();
 800633e:	f005 f95d 	bl	800b5fc <Get_time>
			memcpy(&HITACHI_time_Stamp_st[Source_Index],&RTC_Date_time_BCD_st,sizeof(GPS_DATE_TIME_t));
 8006342:	79fa      	ldrb	r2, [r7, #7]
 8006344:	4613      	mov	r3, r2
 8006346:	005b      	lsls	r3, r3, #1
 8006348:	4413      	add	r3, r2
 800634a:	005b      	lsls	r3, r3, #1
 800634c:	4abc      	ldr	r2, [pc, #752]	; (8006640 <Send_Status_Message+0x7b4>)
 800634e:	4413      	add	r3, r2
 8006350:	4abc      	ldr	r2, [pc, #752]	; (8006644 <Send_Status_Message+0x7b8>)
 8006352:	6811      	ldr	r1, [r2, #0]
 8006354:	6019      	str	r1, [r3, #0]
 8006356:	8892      	ldrh	r2, [r2, #4]
 8006358:	809a      	strh	r2, [r3, #4]
			printf("Sending Updated Time\n");
 800635a:	48bb      	ldr	r0, [pc, #748]	; (8006648 <Send_Status_Message+0x7bc>)
 800635c:	f01c fc6a 	bl	8022c34 <puts>
			Change_MLK_TIME[Source_Index] = 0;
 8006360:	79fb      	ldrb	r3, [r7, #7]
 8006362:	4ab6      	ldr	r2, [pc, #728]	; (800663c <Send_Status_Message+0x7b0>)
 8006364:	2100      	movs	r1, #0
 8006366:	54d1      	strb	r1, [r2, r3]
		}
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].YY);
 8006368:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800636c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006370:	18d1      	adds	r1, r2, r3
 8006372:	79fa      	ldrb	r2, [r7, #7]
 8006374:	48b2      	ldr	r0, [pc, #712]	; (8006640 <Send_Status_Message+0x7b4>)
 8006376:	4613      	mov	r3, r2
 8006378:	005b      	lsls	r3, r3, #1
 800637a:	4413      	add	r3, r2
 800637c:	005b      	lsls	r3, r3, #1
 800637e:	4403      	add	r3, r0
 8006380:	3305      	adds	r3, #5
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006388:	460a      	mov	r2, r1
 800638a:	2108      	movs	r1, #8
 800638c:	f7fa f9ce 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 8006390:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006394:	3308      	adds	r3, #8
 8006396:	2b00      	cmp	r3, #0
 8006398:	da00      	bge.n	800639c <Send_Status_Message+0x510>
 800639a:	3307      	adds	r3, #7
 800639c:	10db      	asrs	r3, r3, #3
 800639e:	b29a      	uxth	r2, r3
 80063a0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80063a4:	4413      	add	r3, r2
 80063a6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80063aa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80063ae:	3308      	adds	r3, #8
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	b21b      	sxth	r3, r3
 80063b4:	425a      	negs	r2, r3
 80063b6:	f003 0307 	and.w	r3, r3, #7
 80063ba:	f002 0207 	and.w	r2, r2, #7
 80063be:	bf58      	it	pl
 80063c0:	4253      	negpl	r3, r2
 80063c2:	b21b      	sxth	r3, r3
 80063c4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].MM);
 80063c8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80063cc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80063d0:	18d1      	adds	r1, r2, r3
 80063d2:	79fa      	ldrb	r2, [r7, #7]
 80063d4:	489a      	ldr	r0, [pc, #616]	; (8006640 <Send_Status_Message+0x7b4>)
 80063d6:	4613      	mov	r3, r2
 80063d8:	005b      	lsls	r3, r3, #1
 80063da:	4413      	add	r3, r2
 80063dc:	005b      	lsls	r3, r3, #1
 80063de:	4403      	add	r3, r0
 80063e0:	3304      	adds	r3, #4
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80063e8:	460a      	mov	r2, r1
 80063ea:	2108      	movs	r1, #8
 80063ec:	f7fa f99e 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 80063f0:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80063f4:	3308      	adds	r3, #8
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	da00      	bge.n	80063fc <Send_Status_Message+0x570>
 80063fa:	3307      	adds	r3, #7
 80063fc:	10db      	asrs	r3, r3, #3
 80063fe:	b29a      	uxth	r2, r3
 8006400:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006404:	4413      	add	r3, r2
 8006406:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800640a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800640e:	3308      	adds	r3, #8
 8006410:	b29b      	uxth	r3, r3
 8006412:	b21b      	sxth	r3, r3
 8006414:	425a      	negs	r2, r3
 8006416:	f003 0307 	and.w	r3, r3, #7
 800641a:	f002 0207 	and.w	r2, r2, #7
 800641e:	bf58      	it	pl
 8006420:	4253      	negpl	r3, r2
 8006422:	b21b      	sxth	r3, r3
 8006424:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].DD);
 8006428:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800642c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006430:	18d1      	adds	r1, r2, r3
 8006432:	79fa      	ldrb	r2, [r7, #7]
 8006434:	4882      	ldr	r0, [pc, #520]	; (8006640 <Send_Status_Message+0x7b4>)
 8006436:	4613      	mov	r3, r2
 8006438:	005b      	lsls	r3, r3, #1
 800643a:	4413      	add	r3, r2
 800643c:	005b      	lsls	r3, r3, #1
 800643e:	4403      	add	r3, r0
 8006440:	3303      	adds	r3, #3
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006448:	460a      	mov	r2, r1
 800644a:	2108      	movs	r1, #8
 800644c:	f7fa f96e 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 8006450:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006454:	3308      	adds	r3, #8
 8006456:	2b00      	cmp	r3, #0
 8006458:	da00      	bge.n	800645c <Send_Status_Message+0x5d0>
 800645a:	3307      	adds	r3, #7
 800645c:	10db      	asrs	r3, r3, #3
 800645e:	b29a      	uxth	r2, r3
 8006460:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006464:	4413      	add	r3, r2
 8006466:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800646a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800646e:	3308      	adds	r3, #8
 8006470:	b29b      	uxth	r3, r3
 8006472:	b21b      	sxth	r3, r3
 8006474:	425a      	negs	r2, r3
 8006476:	f003 0307 	and.w	r3, r3, #7
 800647a:	f002 0207 	and.w	r2, r2, #7
 800647e:	bf58      	it	pl
 8006480:	4253      	negpl	r3, r2
 8006482:	b21b      	sxth	r3, r3
 8006484:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].hh);
 8006488:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800648c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006490:	18d1      	adds	r1, r2, r3
 8006492:	79fa      	ldrb	r2, [r7, #7]
 8006494:	486a      	ldr	r0, [pc, #424]	; (8006640 <Send_Status_Message+0x7b4>)
 8006496:	4613      	mov	r3, r2
 8006498:	005b      	lsls	r3, r3, #1
 800649a:	4413      	add	r3, r2
 800649c:	005b      	lsls	r3, r3, #1
 800649e:	4403      	add	r3, r0
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80064a6:	460a      	mov	r2, r1
 80064a8:	2108      	movs	r1, #8
 80064aa:	f7fa f93f 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 80064ae:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80064b2:	3308      	adds	r3, #8
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	da00      	bge.n	80064ba <Send_Status_Message+0x62e>
 80064b8:	3307      	adds	r3, #7
 80064ba:	10db      	asrs	r3, r3, #3
 80064bc:	b29a      	uxth	r2, r3
 80064be:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80064c2:	4413      	add	r3, r2
 80064c4:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80064c8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80064cc:	3308      	adds	r3, #8
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	b21b      	sxth	r3, r3
 80064d2:	425a      	negs	r2, r3
 80064d4:	f003 0307 	and.w	r3, r3, #7
 80064d8:	f002 0207 	and.w	r2, r2, #7
 80064dc:	bf58      	it	pl
 80064de:	4253      	negpl	r3, r2
 80064e0:	b21b      	sxth	r3, r3
 80064e2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].mm);
 80064e6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80064ea:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80064ee:	18d1      	adds	r1, r2, r3
 80064f0:	79fa      	ldrb	r2, [r7, #7]
 80064f2:	4853      	ldr	r0, [pc, #332]	; (8006640 <Send_Status_Message+0x7b4>)
 80064f4:	4613      	mov	r3, r2
 80064f6:	005b      	lsls	r3, r3, #1
 80064f8:	4413      	add	r3, r2
 80064fa:	005b      	lsls	r3, r3, #1
 80064fc:	4403      	add	r3, r0
 80064fe:	3301      	adds	r3, #1
 8006500:	781b      	ldrb	r3, [r3, #0]
 8006502:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006506:	460a      	mov	r2, r1
 8006508:	2108      	movs	r1, #8
 800650a:	f7fa f90f 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 800650e:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006512:	3308      	adds	r3, #8
 8006514:	2b00      	cmp	r3, #0
 8006516:	da00      	bge.n	800651a <Send_Status_Message+0x68e>
 8006518:	3307      	adds	r3, #7
 800651a:	10db      	asrs	r3, r3, #3
 800651c:	b29a      	uxth	r2, r3
 800651e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006522:	4413      	add	r3, r2
 8006524:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006528:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800652c:	3308      	adds	r3, #8
 800652e:	b29b      	uxth	r3, r3
 8006530:	b21b      	sxth	r3, r3
 8006532:	425a      	negs	r2, r3
 8006534:	f003 0307 	and.w	r3, r3, #7
 8006538:	f002 0207 	and.w	r2, r2, #7
 800653c:	bf58      	it	pl
 800653e:	4253      	negpl	r3, r2
 8006540:	b21b      	sxth	r3, r3
 8006542:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].ss);
 8006546:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800654a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800654e:	18d1      	adds	r1, r2, r3
 8006550:	79fa      	ldrb	r2, [r7, #7]
 8006552:	483b      	ldr	r0, [pc, #236]	; (8006640 <Send_Status_Message+0x7b4>)
 8006554:	4613      	mov	r3, r2
 8006556:	005b      	lsls	r3, r3, #1
 8006558:	4413      	add	r3, r2
 800655a:	005b      	lsls	r3, r3, #1
 800655c:	4403      	add	r3, r0
 800655e:	3302      	adds	r3, #2
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006566:	460a      	mov	r2, r1
 8006568:	2108      	movs	r1, #8
 800656a:	f7fa f8df 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 800656e:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006572:	3308      	adds	r3, #8
 8006574:	2b00      	cmp	r3, #0
 8006576:	da00      	bge.n	800657a <Send_Status_Message+0x6ee>
 8006578:	3307      	adds	r3, #7
 800657a:	10db      	asrs	r3, r3, #3
 800657c:	b29a      	uxth	r2, r3
 800657e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006582:	4413      	add	r3, r2
 8006584:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006588:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800658c:	3308      	adds	r3, #8
 800658e:	b29b      	uxth	r3, r3
 8006590:	b21b      	sxth	r3, r3
 8006592:	425a      	negs	r2, r3
 8006594:	f003 0307 	and.w	r3, r3, #7
 8006598:	f002 0207 	and.w	r2, r2, #7
 800659c:	bf58      	it	pl
 800659e:	4253      	negpl	r3, r2
 80065a0:	b21b      	sxth	r3, r3
 80065a2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	}

	if( ( (CHECKFLAG(1,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 80065a6:	4b29      	ldr	r3, [pc, #164]	; (800664c <Send_Status_Message+0x7c0>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	085b      	lsrs	r3, r3, #1
 80065ac:	f003 0301 	and.w	r3, r3, #1
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d031      	beq.n	8006618 <Send_Status_Message+0x78c>
 80065b4:	4b25      	ldr	r3, [pc, #148]	; (800664c <Send_Status_Message+0x7c0>)
 80065b6:	791b      	ldrb	r3, [r3, #4]
 80065b8:	79fa      	ldrb	r2, [r7, #7]
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d12c      	bne.n	8006618 <Send_Status_Message+0x78c>
	{
		uint32_t Rand_number = 0;
 80065be:	2300      	movs	r3, #0
 80065c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
#ifdef STM_32
		Rand_number = HAL_RNG_GetRandomNumber(&hrng) % 0xffff00;
 80065c4:	4822      	ldr	r0, [pc, #136]	; (8006650 <Send_Status_Message+0x7c4>)
 80065c6:	f013 ff41 	bl	801a44c <HAL_RNG_GetRandomNumber>
 80065ca:	4602      	mov	r2, r0
 80065cc:	4b21      	ldr	r3, [pc, #132]	; (8006654 <Send_Status_Message+0x7c8>)
 80065ce:	fba3 1302 	umull	r1, r3, r3, r2
 80065d2:	0dd9      	lsrs	r1, r3, #23
 80065d4:	460b      	mov	r3, r1
 80065d6:	041b      	lsls	r3, r3, #16
 80065d8:	1a5b      	subs	r3, r3, r1
 80065da:	021b      	lsls	r3, r3, #8
 80065dc:	1ad3      	subs	r3, r2, r3
 80065de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
#endif
		printf("\nInjected Vital Init Value Failure\n");
 80065e2:	481d      	ldr	r0, [pc, #116]	; (8006658 <Send_Status_Message+0x7cc>)
 80065e4:	f01c fb26 	bl	8022c34 <puts>
		printf("Actual Vital Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 80065e8:	79fb      	ldrb	r3, [r7, #7]
 80065ea:	4a13      	ldr	r2, [pc, #76]	; (8006638 <Send_Status_Message+0x7ac>)
 80065ec:	011b      	lsls	r3, r3, #4
 80065ee:	4413      	add	r3, r2
 80065f0:	330c      	adds	r3, #12
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4619      	mov	r1, r3
 80065f6:	4819      	ldr	r0, [pc, #100]	; (800665c <Send_Status_Message+0x7d0>)
 80065f8:	f01c fa80 	bl	8022afc <iprintf>
		printf("Injected Vital Init Value:0x%06lX\n",Rand_number);
 80065fc:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8006600:	4817      	ldr	r0, [pc, #92]	; (8006660 <Send_Status_Message+0x7d4>)
 8006602:	f01c fa7b 	bl	8022afc <iprintf>
		InsertBits(0, 24, &Temp_Buff[0], Rand_number);
 8006606:	f107 020c 	add.w	r2, r7, #12
 800660a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800660e:	2118      	movs	r1, #24
 8006610:	2000      	movs	r0, #0
 8006612:	f7fa f88b 	bl	800072c <InsertBits>
	{
 8006616:	e00b      	b.n	8006630 <Send_Status_Message+0x7a4>
	}
	else
	{
		InsertBits(0, 24, &Temp_Buff[0], Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8006618:	79fb      	ldrb	r3, [r7, #7]
 800661a:	4a07      	ldr	r2, [pc, #28]	; (8006638 <Send_Status_Message+0x7ac>)
 800661c:	011b      	lsls	r3, r3, #4
 800661e:	4413      	add	r3, r2
 8006620:	330c      	adds	r3, #12
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f107 020c 	add.w	r2, r7, #12
 8006628:	2118      	movs	r1, #24
 800662a:	2000      	movs	r0, #0
 800662c:	f7fa f87e 	bl	800072c <InsertBits>
	}
	for (uc_index = 0; uc_index < ucByte; uc_index++)
 8006630:	2300      	movs	r3, #0
 8006632:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8006636:	e027      	b.n	8006688 <Send_Status_Message+0x7fc>
 8006638:	200011d0 	.word	0x200011d0
 800663c:	200010e4 	.word	0x200010e4
 8006640:	20001194 	.word	0x20001194
 8006644:	2000289c 	.word	0x2000289c
 8006648:	080249e8 	.word	0x080249e8
 800664c:	20001968 	.word	0x20001968
 8006650:	20009d2c 	.word	0x20009d2c
 8006654:	80008001 	.word	0x80008001
 8006658:	08024a00 	.word	0x08024a00
 800665c:	08024a24 	.word	0x08024a24
 8006660:	08024a48 	.word	0x08024a48
	{
		Temp_Buff[uc_index + 3] = Transmit_Buff[uc_index];
 8006664:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8006668:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800666c:	3303      	adds	r3, #3
 800666e:	3290      	adds	r2, #144	; 0x90
 8006670:	443a      	add	r2, r7
 8006672:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8006676:	3390      	adds	r3, #144	; 0x90
 8006678:	443b      	add	r3, r7
 800667a:	f803 2c84 	strb.w	r2, [r3, #-132]
	for (uc_index = 0; uc_index < ucByte; uc_index++)
 800667e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8006682:	3301      	adds	r3, #1
 8006684:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8006688:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800668c:	b29b      	uxth	r3, r3
 800668e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8006692:	429a      	cmp	r2, r3
 8006694:	d8e6      	bhi.n	8006664 <Send_Status_Message+0x7d8>
	}

	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], CalculateDirectReverseCrc(Temp_Buff, uc_index + 3));
 8006696:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800669a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800669e:	18d4      	adds	r4, r2, r3
 80066a0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	3303      	adds	r3, #3
 80066a8:	b29a      	uxth	r2, r3
 80066aa:	f107 030c 	add.w	r3, r7, #12
 80066ae:	4611      	mov	r1, r2
 80066b0:	4618      	mov	r0, r3
 80066b2:	f00c fe41 	bl	8013338 <CalculateDirectReverseCrc>
 80066b6:	4603      	mov	r3, r0
 80066b8:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80066bc:	4622      	mov	r2, r4
 80066be:	2120      	movs	r1, #32
 80066c0:	f7fa f834 	bl	800072c <InsertBits>
	Rx_Seq_failure = 0;
 80066c4:	4b1f      	ldr	r3, [pc, #124]	; (8006744 <Send_Status_Message+0x8b8>)
 80066c6:	2200      	movs	r2, #0
 80066c8:	701a      	strb	r2, [r3, #0]
	BITSTUFFINC(32);
 80066ca:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80066ce:	3320      	adds	r3, #32
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	da00      	bge.n	80066d6 <Send_Status_Message+0x84a>
 80066d4:	3307      	adds	r3, #7
 80066d6:	10db      	asrs	r3, r3, #3
 80066d8:	b29a      	uxth	r2, r3
 80066da:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80066de:	4413      	add	r3, r2
 80066e0:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80066e4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80066e8:	3320      	adds	r3, #32
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	b21b      	sxth	r3, r3
 80066ee:	425a      	negs	r2, r3
 80066f0:	f003 0307 	and.w	r3, r3, #7
 80066f4:	f002 0207 	and.w	r2, r2, #7
 80066f8:	bf58      	it	pl
 80066fa:	4253      	negpl	r3, r2
 80066fc:	b21b      	sxth	r3, r3
 80066fe:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	if( ( CHECKFLAG(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)== SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8006702:	4b11      	ldr	r3, [pc, #68]	; (8006748 <Send_Status_Message+0x8bc>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	0a5b      	lsrs	r3, r3, #9
 8006708:	f003 0301 	and.w	r3, r3, #1
 800670c:	2b00      	cmp	r3, #0
 800670e:	d00b      	beq.n	8006728 <Send_Status_Message+0x89c>
 8006710:	4b0d      	ldr	r3, [pc, #52]	; (8006748 <Send_Status_Message+0x8bc>)
 8006712:	791b      	ldrb	r3, [r3, #4]
 8006714:	79fa      	ldrb	r2, [r7, #7]
 8006716:	429a      	cmp	r2, r3
 8006718:	d106      	bne.n	8006728 <Send_Status_Message+0x89c>
	{
		printf("Injected ETH tx Fail\n");
 800671a:	480c      	ldr	r0, [pc, #48]	; (800674c <Send_Status_Message+0x8c0>)
 800671c:	f01c fa8a 	bl	8022c34 <puts>
		printf("Not Sending Reply");
 8006720:	480b      	ldr	r0, [pc, #44]	; (8006750 <Send_Status_Message+0x8c4>)
 8006722:	f01c f9eb 	bl	8022afc <iprintf>
 8006726:	e009      	b.n	800673c <Send_Status_Message+0x8b0>
	}
	else
	{
		Process_Sending_Reply(Transmit_Buff, ucByte,Source_Index);
 8006728:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800672c:	b2d9      	uxtb	r1, r3
 800672e:	79fa      	ldrb	r2, [r7, #7]
 8006730:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006734:	4618      	mov	r0, r3
 8006736:	f000 ffb5 	bl	80076a4 <Process_Sending_Reply>
	}
}
 800673a:	bf00      	nop
 800673c:	bf00      	nop
 800673e:	3794      	adds	r7, #148	; 0x94
 8006740:	46bd      	mov	sp, r7
 8006742:	bd90      	pop	{r4, r7, pc}
 8006744:	20000e44 	.word	0x20000e44
 8006748:	20001968 	.word	0x20001968
 800674c:	08024798 	.word	0x08024798
 8006750:	080247b0 	.word	0x080247b0

08006754 <Service_Msg_Extr>:

void Service_Msg_Extr(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b088      	sub	sp, #32
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	4608      	mov	r0, r1
 800675e:	4611      	mov	r1, r2
 8006760:	461a      	mov	r2, r3
 8006762:	4603      	mov	r3, r0
 8006764:	70fb      	strb	r3, [r7, #3]
 8006766:	460b      	mov	r3, r1
 8006768:	70bb      	strb	r3, [r7, #2]
 800676a:	4613      	mov	r3, r2
 800676c:	707b      	strb	r3, [r7, #1]
	uint32_t Calc_CRC = 0;
 800676e:	2300      	movs	r3, #0
 8006770:	61bb      	str	r3, [r7, #24]
	uint32_t Recv_CRC = 0;
 8006772:	2300      	movs	r3, #0
 8006774:	617b      	str	r3, [r7, #20]
	uint8_t LinkEstablishFlag = CLEAR;
 8006776:	2300      	movs	r3, #0
 8006778:	77fb      	strb	r3, [r7, #31]
	uint32_t Ticks = HAL_GetTick();
 800677a:	f00f f9b5 	bl	8015ae8 <HAL_GetTick>
 800677e:	6138      	str	r0, [r7, #16]
	BITSTUFFINIT(0, 0);
 8006780:	2300      	movs	r3, #0
 8006782:	81fb      	strh	r3, [r7, #14]
 8006784:	2300      	movs	r3, #0
 8006786:	81bb      	strh	r3, [r7, #12]

	Calc_CRC = CalculateDirectReverseCrc(Buff, Length - 5);
 8006788:	78fb      	ldrb	r3, [r7, #3]
 800678a:	b29b      	uxth	r3, r3
 800678c:	3b05      	subs	r3, #5
 800678e:	b29b      	uxth	r3, r3
 8006790:	4619      	mov	r1, r3
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f00c fdd0 	bl	8013338 <CalculateDirectReverseCrc>
 8006798:	61b8      	str	r0, [r7, #24]
	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length - 5]);
 800679a:	78fb      	ldrb	r3, [r7, #3]
 800679c:	3b05      	subs	r3, #5
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	441a      	add	r2, r3
 80067a2:	89bb      	ldrh	r3, [r7, #12]
 80067a4:	2120      	movs	r1, #32
 80067a6:	4618      	mov	r0, r3
 80067a8:	f7f9 ff34 	bl	8000614 <ExtractBits>
 80067ac:	6178      	str	r0, [r7, #20]

	if(Recv_CRC != Calc_CRC)
 80067ae:	697a      	ldr	r2, [r7, #20]
 80067b0:	69bb      	ldr	r3, [r7, #24]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d01a      	beq.n	80067ec <Service_Msg_Extr+0x98>
	{
		printf("Service Message CRC Fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80067b6:	78bb      	ldrb	r3, [r7, #2]
 80067b8:	4a08      	ldr	r2, [pc, #32]	; (80067dc <Service_Msg_Extr+0x88>)
 80067ba:	3366      	adds	r3, #102	; 0x66
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	4413      	add	r3, r2
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	4619      	mov	r1, r3
 80067c4:	4806      	ldr	r0, [pc, #24]	; (80067e0 <Service_Msg_Extr+0x8c>)
 80067c6:	f01c f999 	bl	8022afc <iprintf>
		printf("R-CRC:0x%08lX\n",Recv_CRC);
 80067ca:	6979      	ldr	r1, [r7, #20]
 80067cc:	4805      	ldr	r0, [pc, #20]	; (80067e4 <Service_Msg_Extr+0x90>)
 80067ce:	f01c f995 	bl	8022afc <iprintf>
		printf("C-CRC:0x%08lX\n",Calc_CRC);
 80067d2:	69b9      	ldr	r1, [r7, #24]
 80067d4:	4804      	ldr	r0, [pc, #16]	; (80067e8 <Service_Msg_Extr+0x94>)
 80067d6:	f01c f991 	bl	8022afc <iprintf>
		return;
 80067da:	e39f      	b.n	8006f1c <Service_Msg_Extr+0x7c8>
 80067dc:	20000304 	.word	0x20000304
 80067e0:	08024c90 	.word	0x08024c90
 80067e4:	08024504 	.word	0x08024504
 80067e8:	08024514 	.word	0x08024514
	}

	Last_Recevied_Clock[Source_Index] = Ticks;
 80067ec:	78bb      	ldrb	r3, [r7, #2]
 80067ee:	49ae      	ldr	r1, [pc, #696]	; (8006aa8 <Service_Msg_Extr+0x354>)
 80067f0:	693a      	ldr	r2, [r7, #16]
 80067f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Last_Recevied_Clock_ValidMsgs[Source_Index] = Ticks;
 80067f6:	78bb      	ldrb	r3, [r7, #2]
 80067f8:	49ac      	ldr	r1, [pc, #688]	; (8006aac <Service_Msg_Extr+0x358>)
 80067fa:	693a      	ldr	r2, [r7, #16]
 80067fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff); // To detected EiPC shifting Faster
	BITSTUFFINC(8);
 8006800:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006804:	3308      	adds	r3, #8
 8006806:	2b00      	cmp	r3, #0
 8006808:	da00      	bge.n	800680c <Service_Msg_Extr+0xb8>
 800680a:	3307      	adds	r3, #7
 800680c:	10db      	asrs	r3, r3, #3
 800680e:	b29a      	uxth	r2, r3
 8006810:	89fb      	ldrh	r3, [r7, #14]
 8006812:	4413      	add	r3, r2
 8006814:	81fb      	strh	r3, [r7, #14]
 8006816:	89bb      	ldrh	r3, [r7, #12]
 8006818:	3308      	adds	r3, #8
 800681a:	b29b      	uxth	r3, r3
 800681c:	b21b      	sxth	r3, r3
 800681e:	425a      	negs	r2, r3
 8006820:	f003 0307 	and.w	r3, r3, #7
 8006824:	f002 0207 	and.w	r2, r2, #7
 8006828:	bf58      	it	pl
 800682a:	4253      	negpl	r3, r2
 800682c:	b21b      	sxth	r3, r3
 800682e:	81bb      	strh	r3, [r7, #12]

	Hitachi_Service_st[Source_Index].Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8006830:	89fb      	ldrh	r3, [r7, #14]
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	441a      	add	r2, r3
 8006836:	89bb      	ldrh	r3, [r7, #12]
 8006838:	2110      	movs	r1, #16
 800683a:	4618      	mov	r0, r3
 800683c:	f7f9 feea 	bl	8000614 <ExtractBits>
 8006840:	4603      	mov	r3, r0
 8006842:	78ba      	ldrb	r2, [r7, #2]
 8006844:	b298      	uxth	r0, r3
 8006846:	499a      	ldr	r1, [pc, #616]	; (8006ab0 <Service_Msg_Extr+0x35c>)
 8006848:	4613      	mov	r3, r2
 800684a:	005b      	lsls	r3, r3, #1
 800684c:	4413      	add	r3, r2
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	440b      	add	r3, r1
 8006852:	3306      	adds	r3, #6
 8006854:	4602      	mov	r2, r0
 8006856:	801a      	strh	r2, [r3, #0]
	//	printf("Des_Addr:%u\n", Hitachi_Service_st[Source_Index].Des_Addr);
	BITSTUFFINC(16);
 8006858:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800685c:	3310      	adds	r3, #16
 800685e:	2b00      	cmp	r3, #0
 8006860:	da00      	bge.n	8006864 <Service_Msg_Extr+0x110>
 8006862:	3307      	adds	r3, #7
 8006864:	10db      	asrs	r3, r3, #3
 8006866:	b29a      	uxth	r2, r3
 8006868:	89fb      	ldrh	r3, [r7, #14]
 800686a:	4413      	add	r3, r2
 800686c:	81fb      	strh	r3, [r7, #14]
 800686e:	89bb      	ldrh	r3, [r7, #12]
 8006870:	3310      	adds	r3, #16
 8006872:	b29b      	uxth	r3, r3
 8006874:	b21b      	sxth	r3, r3
 8006876:	425a      	negs	r2, r3
 8006878:	f003 0307 	and.w	r3, r3, #7
 800687c:	f002 0207 	and.w	r2, r2, #7
 8006880:	bf58      	it	pl
 8006882:	4253      	negpl	r3, r2
 8006884:	b21b      	sxth	r3, r3
 8006886:	81bb      	strh	r3, [r7, #12]

	Hitachi_Service_st[Source_Index].Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8006888:	89fb      	ldrh	r3, [r7, #14]
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	441a      	add	r2, r3
 800688e:	89bb      	ldrh	r3, [r7, #12]
 8006890:	2110      	movs	r1, #16
 8006892:	4618      	mov	r0, r3
 8006894:	f7f9 febe 	bl	8000614 <ExtractBits>
 8006898:	4603      	mov	r3, r0
 800689a:	78ba      	ldrb	r2, [r7, #2]
 800689c:	b298      	uxth	r0, r3
 800689e:	4984      	ldr	r1, [pc, #528]	; (8006ab0 <Service_Msg_Extr+0x35c>)
 80068a0:	4613      	mov	r3, r2
 80068a2:	005b      	lsls	r3, r3, #1
 80068a4:	4413      	add	r3, r2
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	440b      	add	r3, r1
 80068aa:	3304      	adds	r3, #4
 80068ac:	4602      	mov	r2, r0
 80068ae:	801a      	strh	r2, [r3, #0]
	//	printf("Src_Addr:%u\n", Hitachi_Service_st[Source_Index].Src_Addr);
	BITSTUFFINC(16);
 80068b0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80068b4:	3310      	adds	r3, #16
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	da00      	bge.n	80068bc <Service_Msg_Extr+0x168>
 80068ba:	3307      	adds	r3, #7
 80068bc:	10db      	asrs	r3, r3, #3
 80068be:	b29a      	uxth	r2, r3
 80068c0:	89fb      	ldrh	r3, [r7, #14]
 80068c2:	4413      	add	r3, r2
 80068c4:	81fb      	strh	r3, [r7, #14]
 80068c6:	89bb      	ldrh	r3, [r7, #12]
 80068c8:	3310      	adds	r3, #16
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	b21b      	sxth	r3, r3
 80068ce:	425a      	negs	r2, r3
 80068d0:	f003 0307 	and.w	r3, r3, #7
 80068d4:	f002 0207 	and.w	r2, r2, #7
 80068d8:	bf58      	it	pl
 80068da:	4253      	negpl	r3, r2
 80068dc:	b21b      	sxth	r3, r3
 80068de:	81bb      	strh	r3, [r7, #12]

	Hitachi_prms_st[Source_Index].Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80068e0:	89fb      	ldrh	r3, [r7, #14]
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	441a      	add	r2, r3
 80068e6:	89bb      	ldrh	r3, [r7, #12]
 80068e8:	2108      	movs	r1, #8
 80068ea:	4618      	mov	r0, r3
 80068ec:	f7f9 fe92 	bl	8000614 <ExtractBits>
 80068f0:	4602      	mov	r2, r0
 80068f2:	78bb      	ldrb	r3, [r7, #2]
 80068f4:	b2d1      	uxtb	r1, r2
 80068f6:	4a6f      	ldr	r2, [pc, #444]	; (8006ab4 <Service_Msg_Extr+0x360>)
 80068f8:	011b      	lsls	r3, r3, #4
 80068fa:	4413      	add	r3, r2
 80068fc:	3302      	adds	r3, #2
 80068fe:	460a      	mov	r2, r1
 8006900:	701a      	strb	r2, [r3, #0]
	//printf("Tx_seq             :%u\n",  Hitachi_prms_st[Source_Index].Rx_Seq);
	BITSTUFFINC(8);
 8006902:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006906:	3308      	adds	r3, #8
 8006908:	2b00      	cmp	r3, #0
 800690a:	da00      	bge.n	800690e <Service_Msg_Extr+0x1ba>
 800690c:	3307      	adds	r3, #7
 800690e:	10db      	asrs	r3, r3, #3
 8006910:	b29a      	uxth	r2, r3
 8006912:	89fb      	ldrh	r3, [r7, #14]
 8006914:	4413      	add	r3, r2
 8006916:	81fb      	strh	r3, [r7, #14]
 8006918:	89bb      	ldrh	r3, [r7, #12]
 800691a:	3308      	adds	r3, #8
 800691c:	b29b      	uxth	r3, r3
 800691e:	b21b      	sxth	r3, r3
 8006920:	425a      	negs	r2, r3
 8006922:	f003 0307 	and.w	r3, r3, #7
 8006926:	f002 0207 	and.w	r2, r2, #7
 800692a:	bf58      	it	pl
 800692c:	4253      	negpl	r3, r2
 800692e:	b21b      	sxth	r3, r3
 8006930:	81bb      	strh	r3, [r7, #12]

	Hitachi_prms_st[Source_Index].Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006932:	89fb      	ldrh	r3, [r7, #14]
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	441a      	add	r2, r3
 8006938:	89bb      	ldrh	r3, [r7, #12]
 800693a:	2108      	movs	r1, #8
 800693c:	4618      	mov	r0, r3
 800693e:	f7f9 fe69 	bl	8000614 <ExtractBits>
 8006942:	4602      	mov	r2, r0
 8006944:	78bb      	ldrb	r3, [r7, #2]
 8006946:	b2d1      	uxtb	r1, r2
 8006948:	4a5a      	ldr	r2, [pc, #360]	; (8006ab4 <Service_Msg_Extr+0x360>)
 800694a:	011b      	lsls	r3, r3, #4
 800694c:	4413      	add	r3, r2
 800694e:	3301      	adds	r3, #1
 8006950:	460a      	mov	r2, r1
 8006952:	701a      	strb	r2, [r3, #0]
	//printf("Rx_Seq             :%u\n",Hitachi_prms_st[Source_Index].Tx_Seq);
	BITSTUFFINC(8);
 8006954:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006958:	3308      	adds	r3, #8
 800695a:	2b00      	cmp	r3, #0
 800695c:	da00      	bge.n	8006960 <Service_Msg_Extr+0x20c>
 800695e:	3307      	adds	r3, #7
 8006960:	10db      	asrs	r3, r3, #3
 8006962:	b29a      	uxth	r2, r3
 8006964:	89fb      	ldrh	r3, [r7, #14]
 8006966:	4413      	add	r3, r2
 8006968:	81fb      	strh	r3, [r7, #14]
 800696a:	89bb      	ldrh	r3, [r7, #12]
 800696c:	3308      	adds	r3, #8
 800696e:	b29b      	uxth	r3, r3
 8006970:	b21b      	sxth	r3, r3
 8006972:	425a      	negs	r2, r3
 8006974:	f003 0307 	and.w	r3, r3, #7
 8006978:	f002 0207 	and.w	r2, r2, #7
 800697c:	bf58      	it	pl
 800697e:	4253      	negpl	r3, r2
 8006980:	b21b      	sxth	r3, r3
 8006982:	81bb      	strh	r3, [r7, #12]


	Hitachi_Service_st[Source_Index].Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006984:	89fb      	ldrh	r3, [r7, #14]
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	441a      	add	r2, r3
 800698a:	89bb      	ldrh	r3, [r7, #12]
 800698c:	2108      	movs	r1, #8
 800698e:	4618      	mov	r0, r3
 8006990:	f7f9 fe40 	bl	8000614 <ExtractBits>
 8006994:	4603      	mov	r3, r0
 8006996:	78ba      	ldrb	r2, [r7, #2]
 8006998:	b2d8      	uxtb	r0, r3
 800699a:	4945      	ldr	r1, [pc, #276]	; (8006ab0 <Service_Msg_Extr+0x35c>)
 800699c:	4613      	mov	r3, r2
 800699e:	005b      	lsls	r3, r3, #1
 80069a0:	4413      	add	r3, r2
 80069a2:	009b      	lsls	r3, r3, #2
 80069a4:	440b      	add	r3, r1
 80069a6:	3302      	adds	r3, #2
 80069a8:	4602      	mov	r2, r0
 80069aa:	701a      	strb	r2, [r3, #0]
	//printf("Msg_type           :%u\n", Hitachi_Service_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 80069ac:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80069b0:	3308      	adds	r3, #8
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	da00      	bge.n	80069b8 <Service_Msg_Extr+0x264>
 80069b6:	3307      	adds	r3, #7
 80069b8:	10db      	asrs	r3, r3, #3
 80069ba:	b29a      	uxth	r2, r3
 80069bc:	89fb      	ldrh	r3, [r7, #14]
 80069be:	4413      	add	r3, r2
 80069c0:	81fb      	strh	r3, [r7, #14]
 80069c2:	89bb      	ldrh	r3, [r7, #12]
 80069c4:	3308      	adds	r3, #8
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	b21b      	sxth	r3, r3
 80069ca:	425a      	negs	r2, r3
 80069cc:	f003 0307 	and.w	r3, r3, #7
 80069d0:	f002 0207 	and.w	r2, r2, #7
 80069d4:	bf58      	it	pl
 80069d6:	4253      	negpl	r3, r2
 80069d8:	b21b      	sxth	r3, r3
 80069da:	81bb      	strh	r3, [r7, #12]


	Hitachi_prms_st[Source_Index].Msg_Status_Flag = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80069dc:	89fb      	ldrh	r3, [r7, #14]
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	441a      	add	r2, r3
 80069e2:	89bb      	ldrh	r3, [r7, #12]
 80069e4:	2110      	movs	r1, #16
 80069e6:	4618      	mov	r0, r3
 80069e8:	f7f9 fe14 	bl	8000614 <ExtractBits>
 80069ec:	4602      	mov	r2, r0
 80069ee:	78bb      	ldrb	r3, [r7, #2]
 80069f0:	b291      	uxth	r1, r2
 80069f2:	4a30      	ldr	r2, [pc, #192]	; (8006ab4 <Service_Msg_Extr+0x360>)
 80069f4:	011b      	lsls	r3, r3, #4
 80069f6:	4413      	add	r3, r2
 80069f8:	3304      	adds	r3, #4
 80069fa:	460a      	mov	r2, r1
 80069fc:	801a      	strh	r2, [r3, #0]

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 80069fe:	492e      	ldr	r1, [pc, #184]	; (8006ab8 <Service_Msg_Extr+0x364>)
 8006a00:	482e      	ldr	r0, [pc, #184]	; (8006abc <Service_Msg_Extr+0x368>)
 8006a02:	f7f9 fc1d 	bl	8000240 <strcmp>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d10f      	bne.n	8006a2c <Service_Msg_Extr+0x2d8>
	{
		SET_BIT_USER(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag);
 8006a0c:	78bb      	ldrb	r3, [r7, #2]
 8006a0e:	4a29      	ldr	r2, [pc, #164]	; (8006ab4 <Service_Msg_Extr+0x360>)
 8006a10:	011b      	lsls	r3, r3, #4
 8006a12:	4413      	add	r3, r2
 8006a14:	3304      	adds	r3, #4
 8006a16:	881a      	ldrh	r2, [r3, #0]
 8006a18:	78bb      	ldrb	r3, [r7, #2]
 8006a1a:	f042 0208 	orr.w	r2, r2, #8
 8006a1e:	b291      	uxth	r1, r2
 8006a20:	4a24      	ldr	r2, [pc, #144]	; (8006ab4 <Service_Msg_Extr+0x360>)
 8006a22:	011b      	lsls	r3, r3, #4
 8006a24:	4413      	add	r3, r2
 8006a26:	3304      	adds	r3, #4
 8006a28:	460a      	mov	r2, r1
 8006a2a:	801a      	strh	r2, [r3, #0]
	}

	//printf("Msg_Flag           :0x%04X\n", Hitachi_prms_st[Source_Index].Msg_Status_Flag);
	BITSTUFFINC(16);
 8006a2c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006a30:	3310      	adds	r3, #16
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	da00      	bge.n	8006a38 <Service_Msg_Extr+0x2e4>
 8006a36:	3307      	adds	r3, #7
 8006a38:	10db      	asrs	r3, r3, #3
 8006a3a:	b29a      	uxth	r2, r3
 8006a3c:	89fb      	ldrh	r3, [r7, #14]
 8006a3e:	4413      	add	r3, r2
 8006a40:	81fb      	strh	r3, [r7, #14]
 8006a42:	89bb      	ldrh	r3, [r7, #12]
 8006a44:	3310      	adds	r3, #16
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	b21b      	sxth	r3, r3
 8006a4a:	425a      	negs	r2, r3
 8006a4c:	f003 0307 	and.w	r3, r3, #7
 8006a50:	f002 0207 	and.w	r2, r2, #7
 8006a54:	bf58      	it	pl
 8006a56:	4253      	negpl	r3, r2
 8006a58:	b21b      	sxth	r3, r3
 8006a5a:	81bb      	strh	r3, [r7, #12]

	//Debug_Status_Flag(Hitachi_prms_st[Source_Index].Msg_Status_Flag,Hitachi_Service_st[Source_Index].Msg_Type);

	if ( SET == CHECKFLAG(TIME_STAMP,Hitachi_prms_st[Source_Index].Msg_Status_Flag) ) // Time-stamp Extraction
 8006a5c:	78bb      	ldrb	r3, [r7, #2]
 8006a5e:	4a15      	ldr	r2, [pc, #84]	; (8006ab4 <Service_Msg_Extr+0x360>)
 8006a60:	011b      	lsls	r3, r3, #4
 8006a62:	4413      	add	r3, r2
 8006a64:	3304      	adds	r3, #4
 8006a66:	881b      	ldrh	r3, [r3, #0]
 8006a68:	f003 0320 	and.w	r3, r3, #32
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	f000 812b 	beq.w	8006cc8 <Service_Msg_Extr+0x574>
	{
		HITACHI_time_Stamp_st[Source_Index].YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006a72:	89fb      	ldrh	r3, [r7, #14]
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	441a      	add	r2, r3
 8006a78:	89bb      	ldrh	r3, [r7, #12]
 8006a7a:	2108      	movs	r1, #8
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f7f9 fdc9 	bl	8000614 <ExtractBits>
 8006a82:	4603      	mov	r3, r0
 8006a84:	78ba      	ldrb	r2, [r7, #2]
 8006a86:	b2d8      	uxtb	r0, r3
 8006a88:	490d      	ldr	r1, [pc, #52]	; (8006ac0 <Service_Msg_Extr+0x36c>)
 8006a8a:	4613      	mov	r3, r2
 8006a8c:	005b      	lsls	r3, r3, #1
 8006a8e:	4413      	add	r3, r2
 8006a90:	005b      	lsls	r3, r3, #1
 8006a92:	440b      	add	r3, r1
 8006a94:	3305      	adds	r3, #5
 8006a96:	4602      	mov	r2, r0
 8006a98:	701a      	strb	r2, [r3, #0]
		//printf("YEAR               :%02X\n", HITACHI_time_Stamp_st[Source_Index].YY);
		BITSTUFFINC(8);
 8006a9a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006a9e:	3308      	adds	r3, #8
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	da0f      	bge.n	8006ac4 <Service_Msg_Extr+0x370>
 8006aa4:	3307      	adds	r3, #7
 8006aa6:	e00d      	b.n	8006ac4 <Service_Msg_Extr+0x370>
 8006aa8:	20000fb0 	.word	0x20000fb0
 8006aac:	20000fd8 	.word	0x20000fd8
 8006ab0:	20001590 	.word	0x20001590
 8006ab4:	200011d0 	.word	0x200011d0
 8006ab8:	080242c0 	.word	0x080242c0
 8006abc:	20000305 	.word	0x20000305
 8006ac0:	20001194 	.word	0x20001194
 8006ac4:	10db      	asrs	r3, r3, #3
 8006ac6:	b29a      	uxth	r2, r3
 8006ac8:	89fb      	ldrh	r3, [r7, #14]
 8006aca:	4413      	add	r3, r2
 8006acc:	81fb      	strh	r3, [r7, #14]
 8006ace:	89bb      	ldrh	r3, [r7, #12]
 8006ad0:	3308      	adds	r3, #8
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	b21b      	sxth	r3, r3
 8006ad6:	425a      	negs	r2, r3
 8006ad8:	f003 0307 	and.w	r3, r3, #7
 8006adc:	f002 0207 	and.w	r2, r2, #7
 8006ae0:	bf58      	it	pl
 8006ae2:	4253      	negpl	r3, r2
 8006ae4:	b21b      	sxth	r3, r3
 8006ae6:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006ae8:	89fb      	ldrh	r3, [r7, #14]
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	441a      	add	r2, r3
 8006aee:	89bb      	ldrh	r3, [r7, #12]
 8006af0:	2108      	movs	r1, #8
 8006af2:	4618      	mov	r0, r3
 8006af4:	f7f9 fd8e 	bl	8000614 <ExtractBits>
 8006af8:	4603      	mov	r3, r0
 8006afa:	78ba      	ldrb	r2, [r7, #2]
 8006afc:	b2d8      	uxtb	r0, r3
 8006afe:	496e      	ldr	r1, [pc, #440]	; (8006cb8 <Service_Msg_Extr+0x564>)
 8006b00:	4613      	mov	r3, r2
 8006b02:	005b      	lsls	r3, r3, #1
 8006b04:	4413      	add	r3, r2
 8006b06:	005b      	lsls	r3, r3, #1
 8006b08:	440b      	add	r3, r1
 8006b0a:	3304      	adds	r3, #4
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	701a      	strb	r2, [r3, #0]
		//printf("Month              :%02X\n", HITACHI_time_Stamp_st[Source_Index].MM);
		BITSTUFFINC(8);
 8006b10:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006b14:	3308      	adds	r3, #8
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	da00      	bge.n	8006b1c <Service_Msg_Extr+0x3c8>
 8006b1a:	3307      	adds	r3, #7
 8006b1c:	10db      	asrs	r3, r3, #3
 8006b1e:	b29a      	uxth	r2, r3
 8006b20:	89fb      	ldrh	r3, [r7, #14]
 8006b22:	4413      	add	r3, r2
 8006b24:	81fb      	strh	r3, [r7, #14]
 8006b26:	89bb      	ldrh	r3, [r7, #12]
 8006b28:	3308      	adds	r3, #8
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	b21b      	sxth	r3, r3
 8006b2e:	425a      	negs	r2, r3
 8006b30:	f003 0307 	and.w	r3, r3, #7
 8006b34:	f002 0207 	and.w	r2, r2, #7
 8006b38:	bf58      	it	pl
 8006b3a:	4253      	negpl	r3, r2
 8006b3c:	b21b      	sxth	r3, r3
 8006b3e:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006b40:	89fb      	ldrh	r3, [r7, #14]
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	441a      	add	r2, r3
 8006b46:	89bb      	ldrh	r3, [r7, #12]
 8006b48:	2108      	movs	r1, #8
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f7f9 fd62 	bl	8000614 <ExtractBits>
 8006b50:	4603      	mov	r3, r0
 8006b52:	78ba      	ldrb	r2, [r7, #2]
 8006b54:	b2d8      	uxtb	r0, r3
 8006b56:	4958      	ldr	r1, [pc, #352]	; (8006cb8 <Service_Msg_Extr+0x564>)
 8006b58:	4613      	mov	r3, r2
 8006b5a:	005b      	lsls	r3, r3, #1
 8006b5c:	4413      	add	r3, r2
 8006b5e:	005b      	lsls	r3, r3, #1
 8006b60:	440b      	add	r3, r1
 8006b62:	3303      	adds	r3, #3
 8006b64:	4602      	mov	r2, r0
 8006b66:	701a      	strb	r2, [r3, #0]
		//printf("Date               :%02X\n", HITACHI_time_Stamp_st[Source_Index].DD);
		BITSTUFFINC(8);
 8006b68:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006b6c:	3308      	adds	r3, #8
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	da00      	bge.n	8006b74 <Service_Msg_Extr+0x420>
 8006b72:	3307      	adds	r3, #7
 8006b74:	10db      	asrs	r3, r3, #3
 8006b76:	b29a      	uxth	r2, r3
 8006b78:	89fb      	ldrh	r3, [r7, #14]
 8006b7a:	4413      	add	r3, r2
 8006b7c:	81fb      	strh	r3, [r7, #14]
 8006b7e:	89bb      	ldrh	r3, [r7, #12]
 8006b80:	3308      	adds	r3, #8
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	b21b      	sxth	r3, r3
 8006b86:	425a      	negs	r2, r3
 8006b88:	f003 0307 	and.w	r3, r3, #7
 8006b8c:	f002 0207 	and.w	r2, r2, #7
 8006b90:	bf58      	it	pl
 8006b92:	4253      	negpl	r3, r2
 8006b94:	b21b      	sxth	r3, r3
 8006b96:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006b98:	89fb      	ldrh	r3, [r7, #14]
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	441a      	add	r2, r3
 8006b9e:	89bb      	ldrh	r3, [r7, #12]
 8006ba0:	2108      	movs	r1, #8
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f7f9 fd36 	bl	8000614 <ExtractBits>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	78ba      	ldrb	r2, [r7, #2]
 8006bac:	b2d8      	uxtb	r0, r3
 8006bae:	4942      	ldr	r1, [pc, #264]	; (8006cb8 <Service_Msg_Extr+0x564>)
 8006bb0:	4613      	mov	r3, r2
 8006bb2:	005b      	lsls	r3, r3, #1
 8006bb4:	4413      	add	r3, r2
 8006bb6:	005b      	lsls	r3, r3, #1
 8006bb8:	440b      	add	r3, r1
 8006bba:	4602      	mov	r2, r0
 8006bbc:	701a      	strb	r2, [r3, #0]
		//printf("Hour               :%02X\n", HITACHI_time_Stamp_st[Source_Index].hh);
		BITSTUFFINC(8);
 8006bbe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006bc2:	3308      	adds	r3, #8
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	da00      	bge.n	8006bca <Service_Msg_Extr+0x476>
 8006bc8:	3307      	adds	r3, #7
 8006bca:	10db      	asrs	r3, r3, #3
 8006bcc:	b29a      	uxth	r2, r3
 8006bce:	89fb      	ldrh	r3, [r7, #14]
 8006bd0:	4413      	add	r3, r2
 8006bd2:	81fb      	strh	r3, [r7, #14]
 8006bd4:	89bb      	ldrh	r3, [r7, #12]
 8006bd6:	3308      	adds	r3, #8
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	b21b      	sxth	r3, r3
 8006bdc:	425a      	negs	r2, r3
 8006bde:	f003 0307 	and.w	r3, r3, #7
 8006be2:	f002 0207 	and.w	r2, r2, #7
 8006be6:	bf58      	it	pl
 8006be8:	4253      	negpl	r3, r2
 8006bea:	b21b      	sxth	r3, r3
 8006bec:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006bee:	89fb      	ldrh	r3, [r7, #14]
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	441a      	add	r2, r3
 8006bf4:	89bb      	ldrh	r3, [r7, #12]
 8006bf6:	2108      	movs	r1, #8
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f7f9 fd0b 	bl	8000614 <ExtractBits>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	78ba      	ldrb	r2, [r7, #2]
 8006c02:	b2d8      	uxtb	r0, r3
 8006c04:	492c      	ldr	r1, [pc, #176]	; (8006cb8 <Service_Msg_Extr+0x564>)
 8006c06:	4613      	mov	r3, r2
 8006c08:	005b      	lsls	r3, r3, #1
 8006c0a:	4413      	add	r3, r2
 8006c0c:	005b      	lsls	r3, r3, #1
 8006c0e:	440b      	add	r3, r1
 8006c10:	3301      	adds	r3, #1
 8006c12:	4602      	mov	r2, r0
 8006c14:	701a      	strb	r2, [r3, #0]
		//printf("Minutes            :%02X\n", HITACHI_time_Stamp_st[Source_Index].mm);
		BITSTUFFINC(8);
 8006c16:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006c1a:	3308      	adds	r3, #8
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	da00      	bge.n	8006c22 <Service_Msg_Extr+0x4ce>
 8006c20:	3307      	adds	r3, #7
 8006c22:	10db      	asrs	r3, r3, #3
 8006c24:	b29a      	uxth	r2, r3
 8006c26:	89fb      	ldrh	r3, [r7, #14]
 8006c28:	4413      	add	r3, r2
 8006c2a:	81fb      	strh	r3, [r7, #14]
 8006c2c:	89bb      	ldrh	r3, [r7, #12]
 8006c2e:	3308      	adds	r3, #8
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	b21b      	sxth	r3, r3
 8006c34:	425a      	negs	r2, r3
 8006c36:	f003 0307 	and.w	r3, r3, #7
 8006c3a:	f002 0207 	and.w	r2, r2, #7
 8006c3e:	bf58      	it	pl
 8006c40:	4253      	negpl	r3, r2
 8006c42:	b21b      	sxth	r3, r3
 8006c44:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006c46:	89fb      	ldrh	r3, [r7, #14]
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	441a      	add	r2, r3
 8006c4c:	89bb      	ldrh	r3, [r7, #12]
 8006c4e:	2108      	movs	r1, #8
 8006c50:	4618      	mov	r0, r3
 8006c52:	f7f9 fcdf 	bl	8000614 <ExtractBits>
 8006c56:	4603      	mov	r3, r0
 8006c58:	78ba      	ldrb	r2, [r7, #2]
 8006c5a:	b2d8      	uxtb	r0, r3
 8006c5c:	4916      	ldr	r1, [pc, #88]	; (8006cb8 <Service_Msg_Extr+0x564>)
 8006c5e:	4613      	mov	r3, r2
 8006c60:	005b      	lsls	r3, r3, #1
 8006c62:	4413      	add	r3, r2
 8006c64:	005b      	lsls	r3, r3, #1
 8006c66:	440b      	add	r3, r1
 8006c68:	3302      	adds	r3, #2
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	701a      	strb	r2, [r3, #0]
		//printf("Seconds            :%02X\n", HITACHI_time_Stamp_st[Source_Index].ss);
		BITSTUFFINC(8);
 8006c6e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006c72:	3308      	adds	r3, #8
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	da00      	bge.n	8006c7a <Service_Msg_Extr+0x526>
 8006c78:	3307      	adds	r3, #7
 8006c7a:	10db      	asrs	r3, r3, #3
 8006c7c:	b29a      	uxth	r2, r3
 8006c7e:	89fb      	ldrh	r3, [r7, #14]
 8006c80:	4413      	add	r3, r2
 8006c82:	81fb      	strh	r3, [r7, #14]
 8006c84:	89bb      	ldrh	r3, [r7, #12]
 8006c86:	3308      	adds	r3, #8
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	b21b      	sxth	r3, r3
 8006c8c:	425a      	negs	r2, r3
 8006c8e:	f003 0307 	and.w	r3, r3, #7
 8006c92:	f002 0207 	and.w	r2, r2, #7
 8006c96:	bf58      	it	pl
 8006c98:	4253      	negpl	r3, r2
 8006c9a:	b21b      	sxth	r3, r3
 8006c9c:	81bb      	strh	r3, [r7, #12]


		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
 8006c9e:	78bb      	ldrb	r3, [r7, #2]
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f002 f8c7 	bl	8008e34 <IS_MLK_EIPC_TIME_MATCHING>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d009      	beq.n	8006cc0 <Service_Msg_Extr+0x56c>
 8006cac:	78bb      	ldrb	r3, [r7, #2]
 8006cae:	4a03      	ldr	r2, [pc, #12]	; (8006cbc <Service_Msg_Extr+0x568>)
 8006cb0:	2100      	movs	r1, #0
 8006cb2:	54d1      	strb	r1, [r2, r3]
 8006cb4:	e008      	b.n	8006cc8 <Service_Msg_Extr+0x574>
 8006cb6:	bf00      	nop
 8006cb8:	20001194 	.word	0x20001194
 8006cbc:	200010e4 	.word	0x200010e4
 8006cc0:	78bb      	ldrb	r3, [r7, #2]
 8006cc2:	4a98      	ldr	r2, [pc, #608]	; (8006f24 <Service_Msg_Extr+0x7d0>)
 8006cc4:	2101      	movs	r1, #1
 8006cc6:	54d1      	strb	r1, [r2, r3]

	}
	if ( ( SET == (CHECKFLAG(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag))) )
 8006cc8:	78bb      	ldrb	r3, [r7, #2]
 8006cca:	4a97      	ldr	r2, [pc, #604]	; (8006f28 <Service_Msg_Extr+0x7d4>)
 8006ccc:	011b      	lsls	r3, r3, #4
 8006cce:	4413      	add	r3, r2
 8006cd0:	3304      	adds	r3, #4
 8006cd2:	881b      	ldrh	r3, [r3, #0]
 8006cd4:	f003 0308 	and.w	r3, r3, #8
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d001      	beq.n	8006ce0 <Service_Msg_Extr+0x58c>
	{
		LinkEstablishFlag = SET;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	77fb      	strb	r3, [r7, #31]
	}

	/* Preparing and Sending Reply */
	Send_Status_Message(Source_Index, Des_Index);
 8006ce0:	787a      	ldrb	r2, [r7, #1]
 8006ce2:	78bb      	ldrb	r3, [r7, #2]
 8006ce4:	4611      	mov	r1, r2
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f7ff f8d0 	bl	8005e8c <Send_Status_Message>


	/*	Checking whether the Link is Established or Not
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */
	if (LinkEstablishFlag == SET )
 8006cec:	7ffb      	ldrb	r3, [r7, #31]
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	f040 8081 	bne.w	8006df6 <Service_Msg_Extr+0x6a2>
	{
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8006cf4:	78ba      	ldrb	r2, [r7, #2]
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	4413      	add	r3, r2
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	4a8b      	ldr	r2, [pc, #556]	; (8006f2c <Service_Msg_Extr+0x7d8>)
 8006d00:	4413      	add	r3, r2
 8006d02:	3301      	adds	r3, #1
 8006d04:	2210      	movs	r2, #16
 8006d06:	2100      	movs	r1, #0
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f01b fe0f 	bl	802292c <memset>
		memcpy(&Main_Relays_st[Source_Index],&Relays_st[Source_Index],sizeof(Relays_st[Source_Index]));
 8006d0e:	78ba      	ldrb	r2, [r7, #2]
 8006d10:	4613      	mov	r3, r2
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	4413      	add	r3, r2
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	4a84      	ldr	r2, [pc, #528]	; (8006f2c <Service_Msg_Extr+0x7d8>)
 8006d1a:	1898      	adds	r0, r3, r2
 8006d1c:	78ba      	ldrb	r2, [r7, #2]
 8006d1e:	4613      	mov	r3, r2
 8006d20:	009b      	lsls	r3, r3, #2
 8006d22:	4413      	add	r3, r2
 8006d24:	009b      	lsls	r3, r3, #2
 8006d26:	4a82      	ldr	r2, [pc, #520]	; (8006f30 <Service_Msg_Extr+0x7dc>)
 8006d28:	4413      	add	r3, r2
 8006d2a:	2214      	movs	r2, #20
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	f01b fdd5 	bl	80228dc <memcpy>

		if(Prev_Relay_CRC[Source_Index] != Main_Relays_st[Source_Index].RelayIPS_CRC)
 8006d32:	78bb      	ldrb	r3, [r7, #2]
 8006d34:	4a7f      	ldr	r2, [pc, #508]	; (8006f34 <Service_Msg_Extr+0x7e0>)
 8006d36:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8006d3a:	78ba      	ldrb	r2, [r7, #2]
 8006d3c:	487b      	ldr	r0, [pc, #492]	; (8006f2c <Service_Msg_Extr+0x7d8>)
 8006d3e:	4613      	mov	r3, r2
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	4413      	add	r3, r2
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	4403      	add	r3, r0
 8006d48:	3312      	adds	r3, #18
 8006d4a:	881b      	ldrh	r3, [r3, #0]
 8006d4c:	4299      	cmp	r1, r3
 8006d4e:	d052      	beq.n	8006df6 <Service_Msg_Extr+0x6a2>
		{
			Prev_Relay_CRC[Source_Index] = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8006d50:	78ba      	ldrb	r2, [r7, #2]
 8006d52:	78b9      	ldrb	r1, [r7, #2]
 8006d54:	4875      	ldr	r0, [pc, #468]	; (8006f2c <Service_Msg_Extr+0x7d8>)
 8006d56:	4613      	mov	r3, r2
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	4413      	add	r3, r2
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	4403      	add	r3, r0
 8006d60:	3312      	adds	r3, #18
 8006d62:	881a      	ldrh	r2, [r3, #0]
 8006d64:	4b73      	ldr	r3, [pc, #460]	; (8006f34 <Service_Msg_Extr+0x7e0>)
 8006d66:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			memset(&Tx_Temp_Main_Relays_st,0,sizeof(Tx_Temp_Main_Relays_st));
 8006d6a:	2214      	movs	r2, #20
 8006d6c:	2100      	movs	r1, #0
 8006d6e:	4872      	ldr	r0, [pc, #456]	; (8006f38 <Service_Msg_Extr+0x7e4>)
 8006d70:	f01b fddc 	bl	802292c <memset>
			memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Source_Index],sizeof(Tx_Temp_Main_Relays_st));
 8006d74:	78ba      	ldrb	r2, [r7, #2]
 8006d76:	4613      	mov	r3, r2
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	4413      	add	r3, r2
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	4a6b      	ldr	r2, [pc, #428]	; (8006f2c <Service_Msg_Extr+0x7d8>)
 8006d80:	4413      	add	r3, r2
 8006d82:	2214      	movs	r2, #20
 8006d84:	4619      	mov	r1, r3
 8006d86:	486c      	ldr	r0, [pc, #432]	; (8006f38 <Service_Msg_Extr+0x7e4>)
 8006d88:	f01b fda8 	bl	80228dc <memcpy>

#ifdef EI_1
			TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 8006d8c:	f240 2007 	movw	r0, #519	; 0x207
 8006d90:	f008 fe7a 	bl	800fa88 <TransmitCanPkt>
#endif
#ifdef EI_2
			TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif

			Tx_Ei_self_sharing_st[Source_Index].VITAL_DATA_CRC = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8006d94:	78b9      	ldrb	r1, [r7, #2]
 8006d96:	78ba      	ldrb	r2, [r7, #2]
 8006d98:	4864      	ldr	r0, [pc, #400]	; (8006f2c <Service_Msg_Extr+0x7d8>)
 8006d9a:	460b      	mov	r3, r1
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	440b      	add	r3, r1
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	4403      	add	r3, r0
 8006da4:	3312      	adds	r3, #18
 8006da6:	8818      	ldrh	r0, [r3, #0]
 8006da8:	4964      	ldr	r1, [pc, #400]	; (8006f3c <Service_Msg_Extr+0x7e8>)
 8006daa:	4613      	mov	r3, r2
 8006dac:	005b      	lsls	r3, r3, #1
 8006dae:	4413      	add	r3, r2
 8006db0:	00db      	lsls	r3, r3, #3
 8006db2:	440b      	add	r3, r1
 8006db4:	3306      	adds	r3, #6
 8006db6:	4602      	mov	r2, r0
 8006db8:	801a      	strh	r2, [r3, #0]

			if(MisMatchFlag[Source_Index] == 0)
 8006dba:	78bb      	ldrb	r3, [r7, #2]
 8006dbc:	4a60      	ldr	r2, [pc, #384]	; (8006f40 <Service_Msg_Extr+0x7ec>)
 8006dbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d117      	bne.n	8006df6 <Service_Msg_Extr+0x6a2>
			{
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Source_Index * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Source_Index].RelayIPS_Buff,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8006dc6:	78bb      	ldrb	r3, [r7, #2]
 8006dc8:	011b      	lsls	r3, r3, #4
 8006dca:	4a5e      	ldr	r2, [pc, #376]	; (8006f44 <Service_Msg_Extr+0x7f0>)
 8006dcc:	4413      	add	r3, r2
 8006dce:	1c98      	adds	r0, r3, #2
 8006dd0:	78ba      	ldrb	r2, [r7, #2]
 8006dd2:	4613      	mov	r3, r2
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	4413      	add	r3, r2
 8006dd8:	009b      	lsls	r3, r3, #2
 8006dda:	4a54      	ldr	r2, [pc, #336]	; (8006f2c <Service_Msg_Extr+0x7d8>)
 8006ddc:	4413      	add	r3, r2
 8006dde:	3301      	adds	r3, #1
 8006de0:	2210      	movs	r2, #16
 8006de2:	4619      	mov	r1, r3
 8006de4:	f01b fd7a 	bl	80228dc <memcpy>
#ifdef EI_1
				TransmitCanPkt(EI_PROCESS_DATA);
 8006de8:	f240 1019 	movw	r0, #281	; 0x119
 8006dec:	f008 fe4c 	bl	800fa88 <TransmitCanPkt>
				MIE_Signal_Send_CLK = Ticks;
 8006df0:	4a55      	ldr	r2, [pc, #340]	; (8006f48 <Service_Msg_Extr+0x7f4>)
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	6013      	str	r3, [r2, #0]
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */


	/* Sending Information to Other card */
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_CRC = Recv_CRC;
 8006df6:	78ba      	ldrb	r2, [r7, #2]
 8006df8:	4950      	ldr	r1, [pc, #320]	; (8006f3c <Service_Msg_Extr+0x7e8>)
 8006dfa:	4613      	mov	r3, r2
 8006dfc:	005b      	lsls	r3, r3, #1
 8006dfe:	4413      	add	r3, r2
 8006e00:	00db      	lsls	r3, r3, #3
 8006e02:	440b      	add	r3, r1
 8006e04:	3314      	adds	r3, #20
 8006e06:	697a      	ldr	r2, [r7, #20]
 8006e08:	601a      	str	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_Msg_Type = SERVICEMSG;
 8006e0a:	78ba      	ldrb	r2, [r7, #2]
 8006e0c:	494b      	ldr	r1, [pc, #300]	; (8006f3c <Service_Msg_Extr+0x7e8>)
 8006e0e:	4613      	mov	r3, r2
 8006e10:	005b      	lsls	r3, r3, #1
 8006e12:	4413      	add	r3, r2
 8006e14:	00db      	lsls	r3, r3, #3
 8006e16:	440b      	add	r3, r1
 8006e18:	3305      	adds	r3, #5
 8006e1a:	2206      	movs	r2, #6
 8006e1c:	701a      	strb	r2, [r3, #0]

	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 8006e1e:	78ba      	ldrb	r2, [r7, #2]
 8006e20:	4946      	ldr	r1, [pc, #280]	; (8006f3c <Service_Msg_Extr+0x7e8>)
 8006e22:	4613      	mov	r3, r2
 8006e24:	005b      	lsls	r3, r3, #1
 8006e26:	4413      	add	r3, r2
 8006e28:	00db      	lsls	r3, r3, #3
 8006e2a:	440b      	add	r3, r1
 8006e2c:	78ba      	ldrb	r2, [r7, #2]
 8006e2e:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 8006e30:	78ba      	ldrb	r2, [r7, #2]
 8006e32:	4942      	ldr	r1, [pc, #264]	; (8006f3c <Service_Msg_Extr+0x7e8>)
 8006e34:	4613      	mov	r3, r2
 8006e36:	005b      	lsls	r3, r3, #1
 8006e38:	4413      	add	r3, r2
 8006e3a:	00db      	lsls	r3, r3, #3
 8006e3c:	440b      	add	r3, r1
 8006e3e:	3301      	adds	r3, #1
 8006e40:	2201      	movs	r2, #1
 8006e42:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].LinkEstablishFlag = LinkEstablishFlag;
 8006e44:	78ba      	ldrb	r2, [r7, #2]
 8006e46:	493d      	ldr	r1, [pc, #244]	; (8006f3c <Service_Msg_Extr+0x7e8>)
 8006e48:	4613      	mov	r3, r2
 8006e4a:	005b      	lsls	r3, r3, #1
 8006e4c:	4413      	add	r3, r2
 8006e4e:	00db      	lsls	r3, r3, #3
 8006e50:	440b      	add	r3, r1
 8006e52:	3302      	adds	r3, #2
 8006e54:	7ffa      	ldrb	r2, [r7, #31]
 8006e56:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8006e58:	2218      	movs	r2, #24
 8006e5a:	2100      	movs	r1, #0
 8006e5c:	483b      	ldr	r0, [pc, #236]	; (8006f4c <Service_Msg_Extr+0x7f8>)
 8006e5e:	f01b fd65 	bl	802292c <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 8006e62:	78ba      	ldrb	r2, [r7, #2]
 8006e64:	4613      	mov	r3, r2
 8006e66:	005b      	lsls	r3, r3, #1
 8006e68:	4413      	add	r3, r2
 8006e6a:	00db      	lsls	r3, r3, #3
 8006e6c:	4a33      	ldr	r2, [pc, #204]	; (8006f3c <Service_Msg_Extr+0x7e8>)
 8006e6e:	4413      	add	r3, r2
 8006e70:	2218      	movs	r2, #24
 8006e72:	4619      	mov	r1, r3
 8006e74:	4835      	ldr	r0, [pc, #212]	; (8006f4c <Service_Msg_Extr+0x7f8>)
 8006e76:	f01b fd31 	bl	80228dc <memcpy>
#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
 8006e7a:	f240 2001 	movw	r0, #513	; 0x201
 8006e7e:	f008 fe03 	bl	800fa88 <TransmitCanPkt>
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
#endif
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 8006e82:	78ba      	ldrb	r2, [r7, #2]
 8006e84:	492d      	ldr	r1, [pc, #180]	; (8006f3c <Service_Msg_Extr+0x7e8>)
 8006e86:	4613      	mov	r3, r2
 8006e88:	005b      	lsls	r3, r3, #1
 8006e8a:	4413      	add	r3, r2
 8006e8c:	00db      	lsls	r3, r3, #3
 8006e8e:	440b      	add	r3, r1
 8006e90:	3301      	adds	r3, #1
 8006e92:	2200      	movs	r2, #0
 8006e94:	701a      	strb	r2, [r3, #0]
	Self_Sharing_CAN_Clk[Source_Index] = Ticks;
 8006e96:	78bb      	ldrb	r3, [r7, #2]
 8006e98:	492d      	ldr	r1, [pc, #180]	; (8006f50 <Service_Msg_Extr+0x7fc>)
 8006e9a:	693a      	ldr	r2, [r7, #16]
 8006e9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	/* Sending Information to Other card */


	/*	Checking Link Status */
	if( LinkEstablishFlag == SET)
 8006ea0:	7ffb      	ldrb	r3, [r7, #31]
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d11d      	bne.n	8006ee2 <Service_Msg_Extr+0x78e>
	{
		Link_Establish_Clock[Source_Index] = Ticks;
 8006ea6:	78bb      	ldrb	r3, [r7, #2]
 8006ea8:	492a      	ldr	r1, [pc, #168]	; (8006f54 <Service_Msg_Extr+0x800>)
 8006eaa:	693a      	ldr	r2, [r7, #16]
 8006eac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Link_Flag[Source_Index] = SET;
 8006eb0:	78bb      	ldrb	r3, [r7, #2]
 8006eb2:	4a29      	ldr	r2, [pc, #164]	; (8006f58 <Service_Msg_Extr+0x804>)
 8006eb4:	2101      	movs	r1, #1
 8006eb6:	54d1      	strb	r1, [r2, r3]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = SET;
 8006eb8:	78ba      	ldrb	r2, [r7, #2]
 8006eba:	4928      	ldr	r1, [pc, #160]	; (8006f5c <Service_Msg_Extr+0x808>)
 8006ebc:	4613      	mov	r3, r2
 8006ebe:	005b      	lsls	r3, r3, #1
 8006ec0:	4413      	add	r3, r2
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	440b      	add	r3, r1
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	2201      	movs	r2, #1
 8006eca:	701a      	strb	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishClk = Ticks;
 8006ecc:	78ba      	ldrb	r2, [r7, #2]
 8006ece:	4923      	ldr	r1, [pc, #140]	; (8006f5c <Service_Msg_Extr+0x808>)
 8006ed0:	4613      	mov	r3, r2
 8006ed2:	005b      	lsls	r3, r3, #1
 8006ed4:	4413      	add	r3, r2
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	440b      	add	r3, r1
 8006eda:	3304      	adds	r3, #4
 8006edc:	693a      	ldr	r2, [r7, #16]
 8006ede:	601a      	str	r2, [r3, #0]
 8006ee0:	e017      	b.n	8006f12 <Service_Msg_Extr+0x7be>
	}
	else
	{
		Link_Flag[Source_Index] = CLEAR;
 8006ee2:	78bb      	ldrb	r3, [r7, #2]
 8006ee4:	4a1c      	ldr	r2, [pc, #112]	; (8006f58 <Service_Msg_Extr+0x804>)
 8006ee6:	2100      	movs	r1, #0
 8006ee8:	54d1      	strb	r1, [r2, r3]
		Hitachi_clk_flags_st[Source_Index].Link_FailClk = Ticks;
 8006eea:	78ba      	ldrb	r2, [r7, #2]
 8006eec:	491b      	ldr	r1, [pc, #108]	; (8006f5c <Service_Msg_Extr+0x808>)
 8006eee:	4613      	mov	r3, r2
 8006ef0:	005b      	lsls	r3, r3, #1
 8006ef2:	4413      	add	r3, r2
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	440b      	add	r3, r1
 8006ef8:	3308      	adds	r3, #8
 8006efa:	693a      	ldr	r2, [r7, #16]
 8006efc:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = CLEAR;
 8006efe:	78ba      	ldrb	r2, [r7, #2]
 8006f00:	4916      	ldr	r1, [pc, #88]	; (8006f5c <Service_Msg_Extr+0x808>)
 8006f02:	4613      	mov	r3, r2
 8006f04:	005b      	lsls	r3, r3, #1
 8006f06:	4413      	add	r3, r2
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	440b      	add	r3, r1
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	2200      	movs	r2, #0
 8006f10:	701a      	strb	r2, [r3, #0]
	}
	/*	Checking Link Status */

	HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 8006f12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006f16:	4812      	ldr	r0, [pc, #72]	; (8006f60 <Service_Msg_Extr+0x80c>)
 8006f18:	f011 facf 	bl	80184ba <HAL_GPIO_TogglePin>

}
 8006f1c:	3720      	adds	r7, #32
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}
 8006f22:	bf00      	nop
 8006f24:	200010e4 	.word	0x200010e4
 8006f28:	200011d0 	.word	0x200011d0
 8006f2c:	20001e8c 	.word	0x20001e8c
 8006f30:	20001dc4 	.word	0x20001dc4
 8006f34:	20000f0c 	.word	0x20000f0c
 8006f38:	2000201c 	.word	0x2000201c
 8006f3c:	20001680 	.word	0x20001680
 8006f40:	20000ed0 	.word	0x20000ed0
 8006f44:	200010f0 	.word	0x200010f0
 8006f48:	20000e7c 	.word	0x20000e7c
 8006f4c:	20001860 	.word	0x20001860
 8006f50:	20000e50 	.word	0x20000e50
 8006f54:	20000f20 	.word	0x20000f20
 8006f58:	20000f70 	.word	0x20000f70
 8006f5c:	20001cd4 	.word	0x20001cd4
 8006f60:	40021c00 	.word	0x40021c00

08006f64 <Send_Service_Signal_Message>:

void Send_Service_Signal_Message(uint8_t Source_Index,uint8_t Des_Index)
{
 8006f64:	b590      	push	{r4, r7, lr}
 8006f66:	b095      	sub	sp, #84	; 0x54
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	460a      	mov	r2, r1
 8006f6e:	71fb      	strb	r3, [r7, #7]
 8006f70:	4613      	mov	r3, r2
 8006f72:	71bb      	strb	r3, [r7, #6]
	uint8_t Transmit_Buff[60] = {0,};
 8006f74:	2300      	movs	r3, #0
 8006f76:	60fb      	str	r3, [r7, #12]
 8006f78:	f107 0310 	add.w	r3, r7, #16
 8006f7c:	2238      	movs	r2, #56	; 0x38
 8006f7e:	2100      	movs	r1, #0
 8006f80:	4618      	mov	r0, r3
 8006f82:	f01b fcd3 	bl	802292c <memset>

	BITSTUFFINIT(0, 0);
 8006f86:	2300      	movs	r3, #0
 8006f88:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_SOM); //Destination Address
 8006f92:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006f96:	f107 020c 	add.w	r2, r7, #12
 8006f9a:	441a      	add	r2, r3
 8006f9c:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8006fa0:	23f4      	movs	r3, #244	; 0xf4
 8006fa2:	2108      	movs	r1, #8
 8006fa4:	f7f9 fbc2 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8006fa8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8006fac:	3308      	adds	r3, #8
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	da00      	bge.n	8006fb4 <Send_Service_Signal_Message+0x50>
 8006fb2:	3307      	adds	r3, #7
 8006fb4:	10db      	asrs	r3, r3, #3
 8006fb6:	b29a      	uxth	r2, r3
 8006fb8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006fbc:	4413      	add	r3, r2
 8006fbe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006fc2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006fc6:	3308      	adds	r3, #8
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	b21b      	sxth	r3, r3
 8006fcc:	425a      	negs	r2, r3
 8006fce:	f003 0307 	and.w	r3, r3, #7
 8006fd2:	f002 0207 	and.w	r2, r2, #7
 8006fd6:	bf58      	it	pl
 8006fd8:	4253      	negpl	r3, r2
 8006fda:	b21b      	sxth	r3, r3
 8006fdc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]); //Destination Address
 8006fe0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006fe4:	f107 020c 	add.w	r2, r7, #12
 8006fe8:	441a      	add	r2, r3
 8006fea:	79fb      	ldrb	r3, [r7, #7]
 8006fec:	497b      	ldr	r1, [pc, #492]	; (80071dc <Send_Service_Signal_Message+0x278>)
 8006fee:	3366      	adds	r3, #102	; 0x66
 8006ff0:	009b      	lsls	r3, r3, #2
 8006ff2:	440b      	add	r3, r1
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8006ffa:	2110      	movs	r1, #16
 8006ffc:	f7f9 fb96 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8007000:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007004:	3310      	adds	r3, #16
 8007006:	2b00      	cmp	r3, #0
 8007008:	da00      	bge.n	800700c <Send_Service_Signal_Message+0xa8>
 800700a:	3307      	adds	r3, #7
 800700c:	10db      	asrs	r3, r3, #3
 800700e:	b29a      	uxth	r2, r3
 8007010:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007014:	4413      	add	r3, r2
 8007016:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800701a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800701e:	3310      	adds	r3, #16
 8007020:	b29b      	uxth	r3, r3
 8007022:	b21b      	sxth	r3, r3
 8007024:	425a      	negs	r2, r3
 8007026:	f003 0307 	and.w	r3, r3, #7
 800702a:	f002 0207 	and.w	r2, r2, #7
 800702e:	bf58      	it	pl
 8007030:	4253      	negpl	r3, r2
 8007032:	b21b      	sxth	r3, r3
 8007034:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]); //Source Address
 8007038:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800703c:	f107 020c 	add.w	r2, r7, #12
 8007040:	441a      	add	r2, r3
 8007042:	79fb      	ldrb	r3, [r7, #7]
 8007044:	4965      	ldr	r1, [pc, #404]	; (80071dc <Send_Service_Signal_Message+0x278>)
 8007046:	3370      	adds	r3, #112	; 0x70
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	440b      	add	r3, r1
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007052:	2110      	movs	r1, #16
 8007054:	f7f9 fb6a 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8007058:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800705c:	3310      	adds	r3, #16
 800705e:	2b00      	cmp	r3, #0
 8007060:	da00      	bge.n	8007064 <Send_Service_Signal_Message+0x100>
 8007062:	3307      	adds	r3, #7
 8007064:	10db      	asrs	r3, r3, #3
 8007066:	b29a      	uxth	r2, r3
 8007068:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800706c:	4413      	add	r3, r2
 800706e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007072:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007076:	3310      	adds	r3, #16
 8007078:	b29b      	uxth	r3, r3
 800707a:	b21b      	sxth	r3, r3
 800707c:	425a      	negs	r2, r3
 800707e:	f003 0307 	and.w	r3, r3, #7
 8007082:	f002 0207 	and.w	r2, r2, #7
 8007086:	bf58      	it	pl
 8007088:	4253      	negpl	r3, r2
 800708a:	b21b      	sxth	r3, r3
 800708c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( ( (CHECKFLAG(2,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8007090:	4b53      	ldr	r3, [pc, #332]	; (80071e0 <Send_Service_Signal_Message+0x27c>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	089b      	lsrs	r3, r3, #2
 8007096:	f003 0301 	and.w	r3, r3, #1
 800709a:	2b00      	cmp	r3, #0
 800709c:	d035      	beq.n	800710a <Send_Service_Signal_Message+0x1a6>
 800709e:	4b50      	ldr	r3, [pc, #320]	; (80071e0 <Send_Service_Signal_Message+0x27c>)
 80070a0:	791b      	ldrb	r3, [r3, #4]
 80070a2:	79fa      	ldrb	r2, [r7, #7]
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d130      	bne.n	800710a <Send_Service_Signal_Message+0x1a6>
	{
		uint8_t Rand_number = 0;
 80070a8:	2300      	movs	r3, #0
 80070aa:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
#ifdef STM_32
		Rand_number = (HAL_RNG_GetRandomNumber(&hrng) % 200);
 80070ae:	484d      	ldr	r0, [pc, #308]	; (80071e4 <Send_Service_Signal_Message+0x280>)
 80070b0:	f013 f9cc 	bl	801a44c <HAL_RNG_GetRandomNumber>
 80070b4:	4602      	mov	r2, r0
 80070b6:	4b4c      	ldr	r3, [pc, #304]	; (80071e8 <Send_Service_Signal_Message+0x284>)
 80070b8:	fba3 1302 	umull	r1, r3, r3, r2
 80070bc:	099b      	lsrs	r3, r3, #6
 80070be:	21c8      	movs	r1, #200	; 0xc8
 80070c0:	fb01 f303 	mul.w	r3, r1, r3
 80070c4:	1ad3      	subs	r3, r2, r3
 80070c6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
#endif
		printf("Injected TX Sequence value failure\n");
 80070ca:	4848      	ldr	r0, [pc, #288]	; (80071ec <Send_Service_Signal_Message+0x288>)
 80070cc:	f01b fdb2 	bl	8022c34 <puts>
		printf("Actual TX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Tx_Seq);
 80070d0:	79fb      	ldrb	r3, [r7, #7]
 80070d2:	4a47      	ldr	r2, [pc, #284]	; (80071f0 <Send_Service_Signal_Message+0x28c>)
 80070d4:	011b      	lsls	r3, r3, #4
 80070d6:	4413      	add	r3, r2
 80070d8:	3301      	adds	r3, #1
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	4619      	mov	r1, r3
 80070de:	4845      	ldr	r0, [pc, #276]	; (80071f4 <Send_Service_Signal_Message+0x290>)
 80070e0:	f01b fd0c 	bl	8022afc <iprintf>
		printf("Injected TX Sequence Value:%u\n",Rand_number);
 80070e4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80070e8:	4619      	mov	r1, r3
 80070ea:	4843      	ldr	r0, [pc, #268]	; (80071f8 <Send_Service_Signal_Message+0x294>)
 80070ec:	f01b fd06 	bl	8022afc <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_number); // TX Seq Number
 80070f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80070f4:	f107 020c 	add.w	r2, r7, #12
 80070f8:	441a      	add	r2, r3
 80070fa:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80070fe:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007102:	2108      	movs	r1, #8
 8007104:	f7f9 fb12 	bl	800072c <InsertBits>
	{
 8007108:	e00f      	b.n	800712a <Send_Service_Signal_Message+0x1c6>
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Seq); // TX Seq Number
 800710a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800710e:	f107 020c 	add.w	r2, r7, #12
 8007112:	441a      	add	r2, r3
 8007114:	79fb      	ldrb	r3, [r7, #7]
 8007116:	4936      	ldr	r1, [pc, #216]	; (80071f0 <Send_Service_Signal_Message+0x28c>)
 8007118:	011b      	lsls	r3, r3, #4
 800711a:	440b      	add	r3, r1
 800711c:	3301      	adds	r3, #1
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007124:	2108      	movs	r1, #8
 8007126:	f7f9 fb01 	bl	800072c <InsertBits>
		//Last Received Packet Rx_seq number is our TX_Seq Number
	}
	//Last Received Packet Rx_seq number is our TX_Seq Number
	BITSTUFFINC(8);
 800712a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800712e:	3308      	adds	r3, #8
 8007130:	2b00      	cmp	r3, #0
 8007132:	da00      	bge.n	8007136 <Send_Service_Signal_Message+0x1d2>
 8007134:	3307      	adds	r3, #7
 8007136:	10db      	asrs	r3, r3, #3
 8007138:	b29a      	uxth	r2, r3
 800713a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800713e:	4413      	add	r3, r2
 8007140:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007144:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007148:	3308      	adds	r3, #8
 800714a:	b29b      	uxth	r3, r3
 800714c:	b21b      	sxth	r3, r3
 800714e:	425a      	negs	r2, r3
 8007150:	f003 0307 	and.w	r3, r3, #7
 8007154:	f002 0207 	and.w	r2, r2, #7
 8007158:	bf58      	it	pl
 800715a:	4253      	negpl	r3, r2
 800715c:	b21b      	sxth	r3, r3
 800715e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( ( (CHECKFLAG(3,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8007162:	4b1f      	ldr	r3, [pc, #124]	; (80071e0 <Send_Service_Signal_Message+0x27c>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	08db      	lsrs	r3, r3, #3
 8007168:	f003 0301 	and.w	r3, r3, #1
 800716c:	2b00      	cmp	r3, #0
 800716e:	d04b      	beq.n	8007208 <Send_Service_Signal_Message+0x2a4>
 8007170:	4b1b      	ldr	r3, [pc, #108]	; (80071e0 <Send_Service_Signal_Message+0x27c>)
 8007172:	791b      	ldrb	r3, [r3, #4]
 8007174:	79fa      	ldrb	r2, [r7, #7]
 8007176:	429a      	cmp	r2, r3
 8007178:	d146      	bne.n	8007208 <Send_Service_Signal_Message+0x2a4>
	{
		uint8_t Rand_number = 0;
 800717a:	2300      	movs	r3, #0
 800717c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
#ifdef STM_32
		Rand_number = (HAL_RNG_GetRandomNumber(&hrng) % 200);
 8007180:	4818      	ldr	r0, [pc, #96]	; (80071e4 <Send_Service_Signal_Message+0x280>)
 8007182:	f013 f963 	bl	801a44c <HAL_RNG_GetRandomNumber>
 8007186:	4602      	mov	r2, r0
 8007188:	4b17      	ldr	r3, [pc, #92]	; (80071e8 <Send_Service_Signal_Message+0x284>)
 800718a:	fba3 1302 	umull	r1, r3, r3, r2
 800718e:	099b      	lsrs	r3, r3, #6
 8007190:	21c8      	movs	r1, #200	; 0xc8
 8007192:	fb01 f303 	mul.w	r3, r1, r3
 8007196:	1ad3      	subs	r3, r2, r3
 8007198:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
#endif
		printf("Injected RX Sequence value failure\n");
 800719c:	4817      	ldr	r0, [pc, #92]	; (80071fc <Send_Service_Signal_Message+0x298>)
 800719e:	f01b fd49 	bl	8022c34 <puts>
		printf("Actual RX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Rx_Seq);
 80071a2:	79fb      	ldrb	r3, [r7, #7]
 80071a4:	4a12      	ldr	r2, [pc, #72]	; (80071f0 <Send_Service_Signal_Message+0x28c>)
 80071a6:	011b      	lsls	r3, r3, #4
 80071a8:	4413      	add	r3, r2
 80071aa:	3302      	adds	r3, #2
 80071ac:	781b      	ldrb	r3, [r3, #0]
 80071ae:	4619      	mov	r1, r3
 80071b0:	4813      	ldr	r0, [pc, #76]	; (8007200 <Send_Service_Signal_Message+0x29c>)
 80071b2:	f01b fca3 	bl	8022afc <iprintf>
		printf("Injected RX Vital Init Value:%u\n",Rand_number);
 80071b6:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80071ba:	4619      	mov	r1, r3
 80071bc:	4811      	ldr	r0, [pc, #68]	; (8007204 <Send_Service_Signal_Message+0x2a0>)
 80071be:	f01b fc9d 	bl	8022afc <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_number); // Rx Seq Number
 80071c2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80071c6:	f107 020c 	add.w	r2, r7, #12
 80071ca:	441a      	add	r2, r3
 80071cc:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80071d0:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80071d4:	2108      	movs	r1, #8
 80071d6:	f7f9 faa9 	bl	800072c <InsertBits>
	{
 80071da:	e033      	b.n	8007244 <Send_Service_Signal_Message+0x2e0>
 80071dc:	20000304 	.word	0x20000304
 80071e0:	20001968 	.word	0x20001968
 80071e4:	20009d2c 	.word	0x20009d2c
 80071e8:	51eb851f 	.word	0x51eb851f
 80071ec:	08024668 	.word	0x08024668
 80071f0:	200011d0 	.word	0x200011d0
 80071f4:	08024c0c 	.word	0x08024c0c
 80071f8:	08024c2c 	.word	0x08024c2c
 80071fc:	080246cc 	.word	0x080246cc
 8007200:	08024c4c 	.word	0x08024c4c
 8007204:	08024c6c 	.word	0x08024c6c
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], ++Hitachi_prms_st[Source_Index].Rx_Seq); // Rx Seq Number
 8007208:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800720c:	f107 020c 	add.w	r2, r7, #12
 8007210:	18d1      	adds	r1, r2, r3
 8007212:	79fb      	ldrb	r3, [r7, #7]
 8007214:	484e      	ldr	r0, [pc, #312]	; (8007350 <Send_Service_Signal_Message+0x3ec>)
 8007216:	011a      	lsls	r2, r3, #4
 8007218:	4402      	add	r2, r0
 800721a:	3202      	adds	r2, #2
 800721c:	7812      	ldrb	r2, [r2, #0]
 800721e:	3201      	adds	r2, #1
 8007220:	b2d4      	uxtb	r4, r2
 8007222:	484b      	ldr	r0, [pc, #300]	; (8007350 <Send_Service_Signal_Message+0x3ec>)
 8007224:	011a      	lsls	r2, r3, #4
 8007226:	4402      	add	r2, r0
 8007228:	3202      	adds	r2, #2
 800722a:	4620      	mov	r0, r4
 800722c:	7010      	strb	r0, [r2, #0]
 800722e:	4a48      	ldr	r2, [pc, #288]	; (8007350 <Send_Service_Signal_Message+0x3ec>)
 8007230:	011b      	lsls	r3, r3, #4
 8007232:	4413      	add	r3, r2
 8007234:	3302      	adds	r3, #2
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800723c:	460a      	mov	r2, r1
 800723e:	2108      	movs	r1, #8
 8007240:	f7f9 fa74 	bl	800072c <InsertBits>
		//Last Received Packet Tx_seq number is our Rx_Seq Number incremented by 1.
	}
	BITSTUFFINC(8);
 8007244:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007248:	3308      	adds	r3, #8
 800724a:	2b00      	cmp	r3, #0
 800724c:	da00      	bge.n	8007250 <Send_Service_Signal_Message+0x2ec>
 800724e:	3307      	adds	r3, #7
 8007250:	10db      	asrs	r3, r3, #3
 8007252:	b29a      	uxth	r2, r3
 8007254:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007258:	4413      	add	r3, r2
 800725a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800725e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007262:	3308      	adds	r3, #8
 8007264:	b29b      	uxth	r3, r3
 8007266:	b21b      	sxth	r3, r3
 8007268:	425a      	negs	r2, r3
 800726a:	f003 0307 	and.w	r3, r3, #7
 800726e:	f002 0207 	and.w	r2, r2, #7
 8007272:	bf58      	it	pl
 8007274:	4253      	negpl	r3, r2
 8007276:	b21b      	sxth	r3, r3
 8007278:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], SERVICEMSG);
 800727c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007280:	f107 020c 	add.w	r2, r7, #12
 8007284:	441a      	add	r2, r3
 8007286:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800728a:	2306      	movs	r3, #6
 800728c:	2108      	movs	r1, #8
 800728e:	f7f9 fa4d 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007292:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007296:	3308      	adds	r3, #8
 8007298:	2b00      	cmp	r3, #0
 800729a:	da00      	bge.n	800729e <Send_Service_Signal_Message+0x33a>
 800729c:	3307      	adds	r3, #7
 800729e:	10db      	asrs	r3, r3, #3
 80072a0:	b29a      	uxth	r2, r3
 80072a2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80072a6:	4413      	add	r3, r2
 80072a8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80072ac:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80072b0:	3308      	adds	r3, #8
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	b21b      	sxth	r3, r3
 80072b6:	425a      	negs	r2, r3
 80072b8:	f003 0307 	and.w	r3, r3, #7
 80072bc:	f002 0207 	and.w	r2, r2, #7
 80072c0:	bf58      	it	pl
 80072c2:	4253      	negpl	r3, r2
 80072c4:	b21b      	sxth	r3, r3
 80072c6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c



	if(Change_MLK_TIME[Source_Index]== 1)
 80072ca:	79fb      	ldrb	r3, [r7, #7]
 80072cc:	4a21      	ldr	r2, [pc, #132]	; (8007354 <Send_Service_Signal_Message+0x3f0>)
 80072ce:	5cd3      	ldrb	r3, [r2, r3]
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d147      	bne.n	8007364 <Send_Service_Signal_Message+0x400>
	{
		Get_time();
 80072d4:	f004 f992 	bl	800b5fc <Get_time>
		memcpy(&HITACHI_time_Stamp_st[Source_Index],&RTC_Date_time_BCD_st,sizeof(GPS_DATE_TIME_t));
 80072d8:	79fa      	ldrb	r2, [r7, #7]
 80072da:	4613      	mov	r3, r2
 80072dc:	005b      	lsls	r3, r3, #1
 80072de:	4413      	add	r3, r2
 80072e0:	005b      	lsls	r3, r3, #1
 80072e2:	4a1d      	ldr	r2, [pc, #116]	; (8007358 <Send_Service_Signal_Message+0x3f4>)
 80072e4:	4413      	add	r3, r2
 80072e6:	4a1d      	ldr	r2, [pc, #116]	; (800735c <Send_Service_Signal_Message+0x3f8>)
 80072e8:	6811      	ldr	r1, [r2, #0]
 80072ea:	6019      	str	r1, [r3, #0]
 80072ec:	8892      	ldrh	r2, [r2, #4]
 80072ee:	809a      	strh	r2, [r3, #4]
		printf("Sending Updated Time\n");
 80072f0:	481b      	ldr	r0, [pc, #108]	; (8007360 <Send_Service_Signal_Message+0x3fc>)
 80072f2:	f01b fc9f 	bl	8022c34 <puts>
		Change_MLK_TIME[Source_Index] = 0;
 80072f6:	79fb      	ldrb	r3, [r7, #7]
 80072f8:	4a16      	ldr	r2, [pc, #88]	; (8007354 <Send_Service_Signal_Message+0x3f0>)
 80072fa:	2100      	movs	r1, #0
 80072fc:	54d1      	strb	r1, [r2, r3]
		InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x0069);
 80072fe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007302:	f107 020c 	add.w	r2, r7, #12
 8007306:	441a      	add	r2, r3
 8007308:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800730c:	2369      	movs	r3, #105	; 0x69
 800730e:	2110      	movs	r1, #16
 8007310:	f7f9 fa0c 	bl	800072c <InsertBits>
		BITSTUFFINC(16);
 8007314:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007318:	3310      	adds	r3, #16
 800731a:	2b00      	cmp	r3, #0
 800731c:	da00      	bge.n	8007320 <Send_Service_Signal_Message+0x3bc>
 800731e:	3307      	adds	r3, #7
 8007320:	10db      	asrs	r3, r3, #3
 8007322:	b29a      	uxth	r2, r3
 8007324:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007328:	4413      	add	r3, r2
 800732a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800732e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007332:	3310      	adds	r3, #16
 8007334:	b29b      	uxth	r3, r3
 8007336:	b21b      	sxth	r3, r3
 8007338:	425a      	negs	r2, r3
 800733a:	f003 0307 	and.w	r3, r3, #7
 800733e:	f002 0207 	and.w	r2, r2, #7
 8007342:	bf58      	it	pl
 8007344:	4253      	negpl	r3, r2
 8007346:	b21b      	sxth	r3, r3
 8007348:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800734c:	e031      	b.n	80073b2 <Send_Service_Signal_Message+0x44e>
 800734e:	bf00      	nop
 8007350:	200011d0 	.word	0x200011d0
 8007354:	200010e4 	.word	0x200010e4
 8007358:	20001194 	.word	0x20001194
 800735c:	2000289c 	.word	0x2000289c
 8007360:	080249e8 	.word	0x080249e8
	}
	else
	{
		InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x0029);
 8007364:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007368:	f107 020c 	add.w	r2, r7, #12
 800736c:	441a      	add	r2, r3
 800736e:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007372:	2329      	movs	r3, #41	; 0x29
 8007374:	2110      	movs	r1, #16
 8007376:	f7f9 f9d9 	bl	800072c <InsertBits>
		BITSTUFFINC(16);
 800737a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800737e:	3310      	adds	r3, #16
 8007380:	2b00      	cmp	r3, #0
 8007382:	da00      	bge.n	8007386 <Send_Service_Signal_Message+0x422>
 8007384:	3307      	adds	r3, #7
 8007386:	10db      	asrs	r3, r3, #3
 8007388:	b29a      	uxth	r2, r3
 800738a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800738e:	4413      	add	r3, r2
 8007390:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007394:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007398:	3310      	adds	r3, #16
 800739a:	b29b      	uxth	r3, r3
 800739c:	b21b      	sxth	r3, r3
 800739e:	425a      	negs	r2, r3
 80073a0:	f003 0307 	and.w	r3, r3, #7
 80073a4:	f002 0207 	and.w	r2, r2, #7
 80073a8:	bf58      	it	pl
 80073aa:	4253      	negpl	r3, r2
 80073ac:	b21b      	sxth	r3, r3
 80073ae:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	}

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].YY);
 80073b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80073b6:	f107 020c 	add.w	r2, r7, #12
 80073ba:	18d1      	adds	r1, r2, r3
 80073bc:	79fa      	ldrb	r2, [r7, #7]
 80073be:	48b5      	ldr	r0, [pc, #724]	; (8007694 <Send_Service_Signal_Message+0x730>)
 80073c0:	4613      	mov	r3, r2
 80073c2:	005b      	lsls	r3, r3, #1
 80073c4:	4413      	add	r3, r2
 80073c6:	005b      	lsls	r3, r3, #1
 80073c8:	4403      	add	r3, r0
 80073ca:	3305      	adds	r3, #5
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80073d2:	460a      	mov	r2, r1
 80073d4:	2108      	movs	r1, #8
 80073d6:	f7f9 f9a9 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80073da:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80073de:	3308      	adds	r3, #8
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	da00      	bge.n	80073e6 <Send_Service_Signal_Message+0x482>
 80073e4:	3307      	adds	r3, #7
 80073e6:	10db      	asrs	r3, r3, #3
 80073e8:	b29a      	uxth	r2, r3
 80073ea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80073ee:	4413      	add	r3, r2
 80073f0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80073f4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80073f8:	3308      	adds	r3, #8
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	b21b      	sxth	r3, r3
 80073fe:	425a      	negs	r2, r3
 8007400:	f003 0307 	and.w	r3, r3, #7
 8007404:	f002 0207 	and.w	r2, r2, #7
 8007408:	bf58      	it	pl
 800740a:	4253      	negpl	r3, r2
 800740c:	b21b      	sxth	r3, r3
 800740e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].MM);
 8007412:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007416:	f107 020c 	add.w	r2, r7, #12
 800741a:	18d1      	adds	r1, r2, r3
 800741c:	79fa      	ldrb	r2, [r7, #7]
 800741e:	489d      	ldr	r0, [pc, #628]	; (8007694 <Send_Service_Signal_Message+0x730>)
 8007420:	4613      	mov	r3, r2
 8007422:	005b      	lsls	r3, r3, #1
 8007424:	4413      	add	r3, r2
 8007426:	005b      	lsls	r3, r3, #1
 8007428:	4403      	add	r3, r0
 800742a:	3304      	adds	r3, #4
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007432:	460a      	mov	r2, r1
 8007434:	2108      	movs	r1, #8
 8007436:	f7f9 f979 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 800743a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800743e:	3308      	adds	r3, #8
 8007440:	2b00      	cmp	r3, #0
 8007442:	da00      	bge.n	8007446 <Send_Service_Signal_Message+0x4e2>
 8007444:	3307      	adds	r3, #7
 8007446:	10db      	asrs	r3, r3, #3
 8007448:	b29a      	uxth	r2, r3
 800744a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800744e:	4413      	add	r3, r2
 8007450:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007454:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007458:	3308      	adds	r3, #8
 800745a:	b29b      	uxth	r3, r3
 800745c:	b21b      	sxth	r3, r3
 800745e:	425a      	negs	r2, r3
 8007460:	f003 0307 	and.w	r3, r3, #7
 8007464:	f002 0207 	and.w	r2, r2, #7
 8007468:	bf58      	it	pl
 800746a:	4253      	negpl	r3, r2
 800746c:	b21b      	sxth	r3, r3
 800746e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].DD);
 8007472:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007476:	f107 020c 	add.w	r2, r7, #12
 800747a:	18d1      	adds	r1, r2, r3
 800747c:	79fa      	ldrb	r2, [r7, #7]
 800747e:	4885      	ldr	r0, [pc, #532]	; (8007694 <Send_Service_Signal_Message+0x730>)
 8007480:	4613      	mov	r3, r2
 8007482:	005b      	lsls	r3, r3, #1
 8007484:	4413      	add	r3, r2
 8007486:	005b      	lsls	r3, r3, #1
 8007488:	4403      	add	r3, r0
 800748a:	3303      	adds	r3, #3
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007492:	460a      	mov	r2, r1
 8007494:	2108      	movs	r1, #8
 8007496:	f7f9 f949 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 800749a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800749e:	3308      	adds	r3, #8
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	da00      	bge.n	80074a6 <Send_Service_Signal_Message+0x542>
 80074a4:	3307      	adds	r3, #7
 80074a6:	10db      	asrs	r3, r3, #3
 80074a8:	b29a      	uxth	r2, r3
 80074aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80074ae:	4413      	add	r3, r2
 80074b0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80074b4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80074b8:	3308      	adds	r3, #8
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	b21b      	sxth	r3, r3
 80074be:	425a      	negs	r2, r3
 80074c0:	f003 0307 	and.w	r3, r3, #7
 80074c4:	f002 0207 	and.w	r2, r2, #7
 80074c8:	bf58      	it	pl
 80074ca:	4253      	negpl	r3, r2
 80074cc:	b21b      	sxth	r3, r3
 80074ce:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].hh);
 80074d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80074d6:	f107 020c 	add.w	r2, r7, #12
 80074da:	18d1      	adds	r1, r2, r3
 80074dc:	79fa      	ldrb	r2, [r7, #7]
 80074de:	486d      	ldr	r0, [pc, #436]	; (8007694 <Send_Service_Signal_Message+0x730>)
 80074e0:	4613      	mov	r3, r2
 80074e2:	005b      	lsls	r3, r3, #1
 80074e4:	4413      	add	r3, r2
 80074e6:	005b      	lsls	r3, r3, #1
 80074e8:	4403      	add	r3, r0
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80074f0:	460a      	mov	r2, r1
 80074f2:	2108      	movs	r1, #8
 80074f4:	f7f9 f91a 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80074f8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80074fc:	3308      	adds	r3, #8
 80074fe:	2b00      	cmp	r3, #0
 8007500:	da00      	bge.n	8007504 <Send_Service_Signal_Message+0x5a0>
 8007502:	3307      	adds	r3, #7
 8007504:	10db      	asrs	r3, r3, #3
 8007506:	b29a      	uxth	r2, r3
 8007508:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800750c:	4413      	add	r3, r2
 800750e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007512:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007516:	3308      	adds	r3, #8
 8007518:	b29b      	uxth	r3, r3
 800751a:	b21b      	sxth	r3, r3
 800751c:	425a      	negs	r2, r3
 800751e:	f003 0307 	and.w	r3, r3, #7
 8007522:	f002 0207 	and.w	r2, r2, #7
 8007526:	bf58      	it	pl
 8007528:	4253      	negpl	r3, r2
 800752a:	b21b      	sxth	r3, r3
 800752c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].mm);
 8007530:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007534:	f107 020c 	add.w	r2, r7, #12
 8007538:	18d1      	adds	r1, r2, r3
 800753a:	79fa      	ldrb	r2, [r7, #7]
 800753c:	4855      	ldr	r0, [pc, #340]	; (8007694 <Send_Service_Signal_Message+0x730>)
 800753e:	4613      	mov	r3, r2
 8007540:	005b      	lsls	r3, r3, #1
 8007542:	4413      	add	r3, r2
 8007544:	005b      	lsls	r3, r3, #1
 8007546:	4403      	add	r3, r0
 8007548:	3301      	adds	r3, #1
 800754a:	781b      	ldrb	r3, [r3, #0]
 800754c:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007550:	460a      	mov	r2, r1
 8007552:	2108      	movs	r1, #8
 8007554:	f7f9 f8ea 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007558:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800755c:	3308      	adds	r3, #8
 800755e:	2b00      	cmp	r3, #0
 8007560:	da00      	bge.n	8007564 <Send_Service_Signal_Message+0x600>
 8007562:	3307      	adds	r3, #7
 8007564:	10db      	asrs	r3, r3, #3
 8007566:	b29a      	uxth	r2, r3
 8007568:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800756c:	4413      	add	r3, r2
 800756e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007572:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007576:	3308      	adds	r3, #8
 8007578:	b29b      	uxth	r3, r3
 800757a:	b21b      	sxth	r3, r3
 800757c:	425a      	negs	r2, r3
 800757e:	f003 0307 	and.w	r3, r3, #7
 8007582:	f002 0207 	and.w	r2, r2, #7
 8007586:	bf58      	it	pl
 8007588:	4253      	negpl	r3, r2
 800758a:	b21b      	sxth	r3, r3
 800758c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].ss);
 8007590:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007594:	f107 020c 	add.w	r2, r7, #12
 8007598:	18d1      	adds	r1, r2, r3
 800759a:	79fa      	ldrb	r2, [r7, #7]
 800759c:	483d      	ldr	r0, [pc, #244]	; (8007694 <Send_Service_Signal_Message+0x730>)
 800759e:	4613      	mov	r3, r2
 80075a0:	005b      	lsls	r3, r3, #1
 80075a2:	4413      	add	r3, r2
 80075a4:	005b      	lsls	r3, r3, #1
 80075a6:	4403      	add	r3, r0
 80075a8:	3302      	adds	r3, #2
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80075b0:	460a      	mov	r2, r1
 80075b2:	2108      	movs	r1, #8
 80075b4:	f7f9 f8ba 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80075b8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80075bc:	3308      	adds	r3, #8
 80075be:	2b00      	cmp	r3, #0
 80075c0:	da00      	bge.n	80075c4 <Send_Service_Signal_Message+0x660>
 80075c2:	3307      	adds	r3, #7
 80075c4:	10db      	asrs	r3, r3, #3
 80075c6:	b29a      	uxth	r2, r3
 80075c8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80075cc:	4413      	add	r3, r2
 80075ce:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80075d2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80075d6:	3308      	adds	r3, #8
 80075d8:	b29b      	uxth	r3, r3
 80075da:	b21b      	sxth	r3, r3
 80075dc:	425a      	negs	r2, r3
 80075de:	f003 0307 	and.w	r3, r3, #7
 80075e2:	f002 0207 	and.w	r2, r2, #7
 80075e6:	bf58      	it	pl
 80075e8:	4253      	negpl	r3, r2
 80075ea:	b21b      	sxth	r3, r3
 80075ec:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], CalculateDirectReverseCrc(Transmit_Buff, ucByte));
 80075f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80075f4:	f107 020c 	add.w	r2, r7, #12
 80075f8:	18d4      	adds	r4, r2, r3
 80075fa:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80075fe:	f107 030c 	add.w	r3, r7, #12
 8007602:	4611      	mov	r1, r2
 8007604:	4618      	mov	r0, r3
 8007606:	f00b fe97 	bl	8013338 <CalculateDirectReverseCrc>
 800760a:	4603      	mov	r3, r0
 800760c:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007610:	4622      	mov	r2, r4
 8007612:	2120      	movs	r1, #32
 8007614:	f7f9 f88a 	bl	800072c <InsertBits>
	BITSTUFFINC(32);
 8007618:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800761c:	3320      	adds	r3, #32
 800761e:	2b00      	cmp	r3, #0
 8007620:	da00      	bge.n	8007624 <Send_Service_Signal_Message+0x6c0>
 8007622:	3307      	adds	r3, #7
 8007624:	10db      	asrs	r3, r3, #3
 8007626:	b29a      	uxth	r2, r3
 8007628:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800762c:	4413      	add	r3, r2
 800762e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007632:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007636:	3320      	adds	r3, #32
 8007638:	b29b      	uxth	r3, r3
 800763a:	b21b      	sxth	r3, r3
 800763c:	425a      	negs	r2, r3
 800763e:	f003 0307 	and.w	r3, r3, #7
 8007642:	f002 0207 	and.w	r2, r2, #7
 8007646:	bf58      	it	pl
 8007648:	4253      	negpl	r3, r2
 800764a:	b21b      	sxth	r3, r3
 800764c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( ( CHECKFLAG(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)== SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8007650:	4b11      	ldr	r3, [pc, #68]	; (8007698 <Send_Service_Signal_Message+0x734>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	0a5b      	lsrs	r3, r3, #9
 8007656:	f003 0301 	and.w	r3, r3, #1
 800765a:	2b00      	cmp	r3, #0
 800765c:	d00b      	beq.n	8007676 <Send_Service_Signal_Message+0x712>
 800765e:	4b0e      	ldr	r3, [pc, #56]	; (8007698 <Send_Service_Signal_Message+0x734>)
 8007660:	791b      	ldrb	r3, [r3, #4]
 8007662:	79fa      	ldrb	r2, [r7, #7]
 8007664:	429a      	cmp	r2, r3
 8007666:	d106      	bne.n	8007676 <Send_Service_Signal_Message+0x712>
	{
		printf("Injected ETH tx Fail\n");
 8007668:	480c      	ldr	r0, [pc, #48]	; (800769c <Send_Service_Signal_Message+0x738>)
 800766a:	f01b fae3 	bl	8022c34 <puts>
		printf("Not Sending Reply");
 800766e:	480c      	ldr	r0, [pc, #48]	; (80076a0 <Send_Service_Signal_Message+0x73c>)
 8007670:	f01b fa44 	bl	8022afc <iprintf>
 8007674:	e009      	b.n	800768a <Send_Service_Signal_Message+0x726>
	}
	else
	{
		Process_Sending_Reply(Transmit_Buff,ucByte,Source_Index);
 8007676:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800767a:	b2d9      	uxtb	r1, r3
 800767c:	79fa      	ldrb	r2, [r7, #7]
 800767e:	f107 030c 	add.w	r3, r7, #12
 8007682:	4618      	mov	r0, r3
 8007684:	f000 f80e 	bl	80076a4 <Process_Sending_Reply>
	}
}
 8007688:	bf00      	nop
 800768a:	bf00      	nop
 800768c:	3754      	adds	r7, #84	; 0x54
 800768e:	46bd      	mov	sp, r7
 8007690:	bd90      	pop	{r4, r7, pc}
 8007692:	bf00      	nop
 8007694:	20001194 	.word	0x20001194
 8007698:	20001968 	.word	0x20001968
 800769c:	08024798 	.word	0x08024798
 80076a0:	080247b0 	.word	0x080247b0

080076a4 <Process_Sending_Reply>:

void Process_Sending_Reply(uint8_t *Transmit_Buff, uint8_t Length,uint8_t Source_Index)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b09c      	sub	sp, #112	; 0x70
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	460b      	mov	r3, r1
 80076ae:	70fb      	strb	r3, [r7, #3]
 80076b0:	4613      	mov	r3, r2
 80076b2:	70bb      	strb	r3, [r7, #2]
	uint8_t Temp_Buff[100] = {0,};
 80076b4:	2300      	movs	r3, #0
 80076b6:	60bb      	str	r3, [r7, #8]
 80076b8:	f107 030c 	add.w	r3, r7, #12
 80076bc:	2260      	movs	r2, #96	; 0x60
 80076be:	2100      	movs	r1, #0
 80076c0:	4618      	mov	r0, r3
 80076c2:	f01b f933 	bl	802292c <memset>
	uint8_t uc_index = 0;
 80076c6:	2300      	movs	r3, #0
 80076c8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	uint8_t Temp_Index = 0;
 80076cc:	2300      	movs	r3, #0
 80076ce:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e

	//memset(Temp_Buff,0,sizeof(Temp_Buff));
	//Print_EI_DATA(Transmit_Buff,XMT,Length);

	//	printf("Reply Packet:\n");
	Temp_Buff[Temp_Index++] = Transmit_Buff[0];
 80076d2:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80076d6:	1c5a      	adds	r2, r3, #1
 80076d8:	f887 206e 	strb.w	r2, [r7, #110]	; 0x6e
 80076dc:	4619      	mov	r1, r3
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	781a      	ldrb	r2, [r3, #0]
 80076e2:	f101 0370 	add.w	r3, r1, #112	; 0x70
 80076e6:	443b      	add	r3, r7
 80076e8:	f803 2c68 	strb.w	r2, [r3, #-104]
	for (uc_index = 1; uc_index < Length; ++uc_index)
 80076ec:	2301      	movs	r3, #1
 80076ee:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80076f2:	e03c      	b.n	800776e <Process_Sending_Reply+0xca>
	{
		if ((Transmit_Buff[uc_index] >= 0xF0) && (Transmit_Buff[uc_index] <= 0xFF))
 80076f4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	4413      	add	r3, r2
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	2bef      	cmp	r3, #239	; 0xef
 8007700:	d922      	bls.n	8007748 <Process_Sending_Reply+0xa4>
		{
			Temp_Buff[Temp_Index++] = Transmit_Buff[uc_index] & 0xF0;
 8007702:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007706:	687a      	ldr	r2, [r7, #4]
 8007708:	4413      	add	r3, r2
 800770a:	781a      	ldrb	r2, [r3, #0]
 800770c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8007710:	1c59      	adds	r1, r3, #1
 8007712:	f887 106e 	strb.w	r1, [r7, #110]	; 0x6e
 8007716:	f022 020f 	bic.w	r2, r2, #15
 800771a:	b2d2      	uxtb	r2, r2
 800771c:	3370      	adds	r3, #112	; 0x70
 800771e:	443b      	add	r3, r7
 8007720:	f803 2c68 	strb.w	r2, [r3, #-104]
			Temp_Buff[Temp_Index++] = Transmit_Buff[uc_index] & 0x0F;
 8007724:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	4413      	add	r3, r2
 800772c:	781a      	ldrb	r2, [r3, #0]
 800772e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8007732:	1c59      	adds	r1, r3, #1
 8007734:	f887 106e 	strb.w	r1, [r7, #110]	; 0x6e
 8007738:	f002 020f 	and.w	r2, r2, #15
 800773c:	b2d2      	uxtb	r2, r2
 800773e:	3370      	adds	r3, #112	; 0x70
 8007740:	443b      	add	r3, r7
 8007742:	f803 2c68 	strb.w	r2, [r3, #-104]
 8007746:	e00d      	b.n	8007764 <Process_Sending_Reply+0xc0>
		}
		else
		{
			Temp_Buff[Temp_Index++] = Transmit_Buff[uc_index];
 8007748:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800774c:	687a      	ldr	r2, [r7, #4]
 800774e:	441a      	add	r2, r3
 8007750:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8007754:	1c59      	adds	r1, r3, #1
 8007756:	f887 106e 	strb.w	r1, [r7, #110]	; 0x6e
 800775a:	7812      	ldrb	r2, [r2, #0]
 800775c:	3370      	adds	r3, #112	; 0x70
 800775e:	443b      	add	r3, r7
 8007760:	f803 2c68 	strb.w	r2, [r3, #-104]
	for (uc_index = 1; uc_index < Length; ++uc_index)
 8007764:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007768:	3301      	adds	r3, #1
 800776a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800776e:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8007772:	78fb      	ldrb	r3, [r7, #3]
 8007774:	429a      	cmp	r2, r3
 8007776:	d3bd      	bcc.n	80076f4 <Process_Sending_Reply+0x50>
		}
	}
	Temp_Buff[Temp_Index++] = 0xf6;
 8007778:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800777c:	1c5a      	adds	r2, r3, #1
 800777e:	f887 206e 	strb.w	r2, [r7, #110]	; 0x6e
 8007782:	3370      	adds	r3, #112	; 0x70
 8007784:	443b      	add	r3, r7
 8007786:	22f6      	movs	r2, #246	; 0xf6
 8007788:	f803 2c68 	strb.w	r2, [r3, #-104]
	//	{
	//		printf("0x%02X|", Temp_Buff[uc_index]);
	//	}
	//	printf("\n");

	if( (SEND_FORCE_REPLY[Source_Index] == SET) && (Rx_Print_st.Size == 0) && (Debug_flag == 1) )
 800778c:	78bb      	ldrb	r3, [r7, #2]
 800778e:	4a37      	ldr	r2, [pc, #220]	; (800786c <Process_Sending_Reply+0x1c8>)
 8007790:	5cd3      	ldrb	r3, [r2, r3]
 8007792:	2b01      	cmp	r3, #1
 8007794:	d10b      	bne.n	80077ae <Process_Sending_Reply+0x10a>
 8007796:	4b36      	ldr	r3, [pc, #216]	; (8007870 <Process_Sending_Reply+0x1cc>)
 8007798:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800779c:	2b00      	cmp	r3, #0
 800779e:	d106      	bne.n	80077ae <Process_Sending_Reply+0x10a>
 80077a0:	4b34      	ldr	r3, [pc, #208]	; (8007874 <Process_Sending_Reply+0x1d0>)
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d102      	bne.n	80077ae <Process_Sending_Reply+0x10a>
	{
		Display("\n________________________________________MSG DETAILS________________________________________\n");
 80077a8:	4833      	ldr	r0, [pc, #204]	; (8007878 <Process_Sending_Reply+0x1d4>)
 80077aa:	f001 f897 	bl	80088dc <Display>
	}

	//	if( (EI_data.Hitachi_st.Interface_Type[Source_Index] == ETHERNET) && ((Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY == RECEIVED) || (SEND_FORCE_REPLY[Source_Index] == SET)))
	//if( (EI_data.Hitachi_st.Interface_Type[Source_Index] == ETHERNET) || ((Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY == RECEIVED) || (SEND_FORCE_REPLY[Source_Index] == SET)))
	if(EI_data.Hitachi_st.Interface_Type[Source_Index] == ETHERNET)
 80077ae:	78bb      	ldrb	r3, [r7, #2]
 80077b0:	4a32      	ldr	r2, [pc, #200]	; (800787c <Process_Sending_Reply+0x1d8>)
 80077b2:	4413      	add	r3, r2
 80077b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d10d      	bne.n	80077d8 <Process_Sending_Reply+0x134>
		//printf("Sending Reply:%s\n",ipaddr_ntoa(&Recv_IP_List[0]));
		//printf("\n");
		//		char *SendingIP = ipaddr_ntoa(&Recv_IP_List[Source_Index]);
		//		printf("\nSent IP[%lu]:%s\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index], SendingIP);

		udpClient_send(Temp_Buff, Temp_Index,Recv_IP_List[Source_Index]);
 80077bc:	78bb      	ldrb	r3, [r7, #2]
 80077be:	4a30      	ldr	r2, [pc, #192]	; (8007880 <Process_Sending_Reply+0x1dc>)
 80077c0:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
 80077c4:	f107 0008 	add.w	r0, r7, #8
 80077c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80077cc:	f007 ff18 	bl	800f600 <udpClient_send>
		//udpClient_send(Temp_Buff, Temp_Index,Recv_IP_List[0]); //Only for IRISET
		SEND_FORCE_REPLY[Source_Index] = CLEAR;
 80077d0:	78bb      	ldrb	r3, [r7, #2]
 80077d2:	4a26      	ldr	r2, [pc, #152]	; (800786c <Process_Sending_Reply+0x1c8>)
 80077d4:	2100      	movs	r1, #0
 80077d6:	54d1      	strb	r1, [r2, r3]
	//	else
	//	{
	//		printf("\nNot sending:%u\n",Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY);
	//	}

	if(	EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL)
 80077d8:	78bb      	ldrb	r3, [r7, #2]
 80077da:	4a28      	ldr	r2, [pc, #160]	; (800787c <Process_Sending_Reply+0x1d8>)
 80077dc:	4413      	add	r3, r2
 80077de:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80077e2:	2b02      	cmp	r3, #2
 80077e4:	d119      	bne.n	800781a <Process_Sending_Reply+0x176>
	{
		for(uint16_t i=0;i<Temp_Index;++i)
 80077e6:	2300      	movs	r3, #0
 80077e8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 80077ec:	e00e      	b.n	800780c <Process_Sending_Reply+0x168>
		{
			Com_SendByte(THREE_PORT, Temp_Buff[i]);
 80077ee:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80077f2:	3370      	adds	r3, #112	; 0x70
 80077f4:	443b      	add	r3, r7
 80077f6:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 80077fa:	4619      	mov	r1, r3
 80077fc:	2003      	movs	r0, #3
 80077fe:	f00d ff1b 	bl	8015638 <Com_SendByte>
		for(uint16_t i=0;i<Temp_Index;++i)
 8007802:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007806:	3301      	adds	r3, #1
 8007808:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800780c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8007810:	b29b      	uxth	r3, r3
 8007812:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8007816:	429a      	cmp	r2, r3
 8007818:	d3e9      	bcc.n	80077ee <Process_Sending_Reply+0x14a>
			//printf("%02X ",Temp_Buff[i]);
		}
	}


	if(Debug_flag == 1)
 800781a:	4b16      	ldr	r3, [pc, #88]	; (8007874 <Process_Sending_Reply+0x1d0>)
 800781c:	781b      	ldrb	r3, [r3, #0]
 800781e:	2b01      	cmp	r3, #1
 8007820:	d102      	bne.n	8007828 <Process_Sending_Reply+0x184>
	{
		Display("\n________________________________________MSG DETAILS________________________________________\n");
 8007822:	4815      	ldr	r0, [pc, #84]	; (8007878 <Process_Sending_Reply+0x1d4>)
 8007824:	f001 f85a 	bl	80088dc <Display>
	//	else
	//	{
	//		Display("\n");
	//	}

	if(Rx_Print_st.Size)//To Print Received Data
 8007828:	4b11      	ldr	r3, [pc, #68]	; (8007870 <Process_Sending_Reply+0x1cc>)
 800782a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800782e:	2b00      	cmp	r3, #0
 8007830:	d00b      	beq.n	800784a <Process_Sending_Reply+0x1a6>
	{
		Print_EI_DATA(Rx_Print_st.Print_Buff, RCV, Rx_Print_st.Size);
 8007832:	4b0f      	ldr	r3, [pc, #60]	; (8007870 <Process_Sending_Reply+0x1cc>)
 8007834:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007838:	461a      	mov	r2, r3
 800783a:	2101      	movs	r1, #1
 800783c:	480c      	ldr	r0, [pc, #48]	; (8007870 <Process_Sending_Reply+0x1cc>)
 800783e:	f000 fea7 	bl	8008590 <Print_EI_DATA>
		Rx_Print_st.Size = 0;
 8007842:	4b0b      	ldr	r3, [pc, #44]	; (8007870 <Process_Sending_Reply+0x1cc>)
 8007844:	2200      	movs	r2, #0
 8007846:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	}

	Print_EI_DATA(Transmit_Buff,XMT,Length); //To Print Transmitted data
 800784a:	78fb      	ldrb	r3, [r7, #3]
 800784c:	461a      	mov	r2, r3
 800784e:	2100      	movs	r1, #0
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 fe9d 	bl	8008590 <Print_EI_DATA>

	if(Debug_flag == 1)
 8007856:	4b07      	ldr	r3, [pc, #28]	; (8007874 <Process_Sending_Reply+0x1d0>)
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	2b01      	cmp	r3, #1
 800785c:	d102      	bne.n	8007864 <Process_Sending_Reply+0x1c0>
	{
		Display("___________________________________________________________________________________________\n");
 800785e:	4809      	ldr	r0, [pc, #36]	; (8007884 <Process_Sending_Reply+0x1e0>)
 8007860:	f001 f83c 	bl	80088dc <Display>
	}
	//	else
	//	{
	//		Display("\n");
	//	}
}
 8007864:	bf00      	nop
 8007866:	3770      	adds	r7, #112	; 0x70
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}
 800786c:	200010d8 	.word	0x200010d8
 8007870:	20001c1c 	.word	0x20001c1c
 8007874:	20000645 	.word	0x20000645
 8007878:	08024cb0 	.word	0x08024cb0
 800787c:	20000304 	.word	0x20000304
 8007880:	20001064 	.word	0x20001064
 8007884:	08024d10 	.word	0x08024d10

08007888 <Check_Primary_r_Secondary>:
	printf("\n");
}


void Check_Primary_r_Secondary(uint8_t Source_Index)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
 800788e:	4603      	mov	r3, r0
 8007890:	71fb      	strb	r3, [r7, #7]
	uint32_t CurTicks = HAL_GetTick();
 8007892:	f00e f929 	bl	8015ae8 <HAL_GetTick>
 8007896:	60f8      	str	r0, [r7, #12]
	if(EI_data.Hitachi_st.Interface_Type[Source_Index] ==  SERIAL)
 8007898:	79fb      	ldrb	r3, [r7, #7]
 800789a:	4a86      	ldr	r2, [pc, #536]	; (8007ab4 <Check_Primary_r_Secondary+0x22c>)
 800789c:	4413      	add	r3, r2
 800789e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80078a2:	2b02      	cmp	r3, #2
 80078a4:	f000 8102 	beq.w	8007aac <Check_Primary_r_Secondary+0x224>
		return;
	}
	else
	{
		//_______________________ DECIDING PRIMARY OR SECONDARY _________________________________________
		if( (Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == NOT_RECEIVED) && (Rx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == NOT_RECEIVED) )
 80078a8:	79fa      	ldrb	r2, [r7, #7]
 80078aa:	4983      	ldr	r1, [pc, #524]	; (8007ab8 <Check_Primary_r_Secondary+0x230>)
 80078ac:	4613      	mov	r3, r2
 80078ae:	005b      	lsls	r3, r3, #1
 80078b0:	4413      	add	r3, r2
 80078b2:	00db      	lsls	r3, r3, #3
 80078b4:	440b      	add	r3, r1
 80078b6:	3303      	adds	r3, #3
 80078b8:	781b      	ldrb	r3, [r3, #0]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d12b      	bne.n	8007916 <Check_Primary_r_Secondary+0x8e>
 80078be:	79fa      	ldrb	r2, [r7, #7]
 80078c0:	497e      	ldr	r1, [pc, #504]	; (8007abc <Check_Primary_r_Secondary+0x234>)
 80078c2:	4613      	mov	r3, r2
 80078c4:	005b      	lsls	r3, r3, #1
 80078c6:	4413      	add	r3, r2
 80078c8:	00db      	lsls	r3, r3, #3
 80078ca:	440b      	add	r3, r1
 80078cc:	3303      	adds	r3, #3
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d120      	bne.n	8007916 <Check_Primary_r_Secondary+0x8e>
		{
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != SECONDARY)
 80078d4:	79fa      	ldrb	r2, [r7, #7]
 80078d6:	4978      	ldr	r1, [pc, #480]	; (8007ab8 <Check_Primary_r_Secondary+0x230>)
 80078d8:	4613      	mov	r3, r2
 80078da:	005b      	lsls	r3, r3, #1
 80078dc:	4413      	add	r3, r2
 80078de:	00db      	lsls	r3, r3, #3
 80078e0:	440b      	add	r3, r1
 80078e2:	3304      	adds	r3, #4
 80078e4:	781b      	ldrb	r3, [r3, #0]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	f000 80e1 	beq.w	8007aae <Check_Primary_r_Secondary+0x226>
			{
				printf("Both Cards not Receiving data, Shifting to Secondary:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80078ec:	79fb      	ldrb	r3, [r7, #7]
 80078ee:	4a71      	ldr	r2, [pc, #452]	; (8007ab4 <Check_Primary_r_Secondary+0x22c>)
 80078f0:	3366      	adds	r3, #102	; 0x66
 80078f2:	009b      	lsls	r3, r3, #2
 80078f4:	4413      	add	r3, r2
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	4619      	mov	r1, r3
 80078fa:	4871      	ldr	r0, [pc, #452]	; (8007ac0 <Check_Primary_r_Secondary+0x238>)
 80078fc:	f01b f8fe 	bl	8022afc <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY = SECONDARY;
 8007900:	79fa      	ldrb	r2, [r7, #7]
 8007902:	496d      	ldr	r1, [pc, #436]	; (8007ab8 <Check_Primary_r_Secondary+0x230>)
 8007904:	4613      	mov	r3, r2
 8007906:	005b      	lsls	r3, r3, #1
 8007908:	4413      	add	r3, r2
 800790a:	00db      	lsls	r3, r3, #3
 800790c:	440b      	add	r3, r1
 800790e:	3304      	adds	r3, #4
 8007910:	2200      	movs	r2, #0
 8007912:	701a      	strb	r2, [r3, #0]
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != SECONDARY)
 8007914:	e0cb      	b.n	8007aae <Check_Primary_r_Secondary+0x226>
			}
		}
		else if( (Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == NOT_RECEIVED) && (Rx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == RECEIVED) )
 8007916:	79fa      	ldrb	r2, [r7, #7]
 8007918:	4967      	ldr	r1, [pc, #412]	; (8007ab8 <Check_Primary_r_Secondary+0x230>)
 800791a:	4613      	mov	r3, r2
 800791c:	005b      	lsls	r3, r3, #1
 800791e:	4413      	add	r3, r2
 8007920:	00db      	lsls	r3, r3, #3
 8007922:	440b      	add	r3, r1
 8007924:	3303      	adds	r3, #3
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d12b      	bne.n	8007984 <Check_Primary_r_Secondary+0xfc>
 800792c:	79fa      	ldrb	r2, [r7, #7]
 800792e:	4963      	ldr	r1, [pc, #396]	; (8007abc <Check_Primary_r_Secondary+0x234>)
 8007930:	4613      	mov	r3, r2
 8007932:	005b      	lsls	r3, r3, #1
 8007934:	4413      	add	r3, r2
 8007936:	00db      	lsls	r3, r3, #3
 8007938:	440b      	add	r3, r1
 800793a:	3303      	adds	r3, #3
 800793c:	781b      	ldrb	r3, [r3, #0]
 800793e:	2b01      	cmp	r3, #1
 8007940:	d120      	bne.n	8007984 <Check_Primary_r_Secondary+0xfc>
		{
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != SECONDARY)
 8007942:	79fa      	ldrb	r2, [r7, #7]
 8007944:	495c      	ldr	r1, [pc, #368]	; (8007ab8 <Check_Primary_r_Secondary+0x230>)
 8007946:	4613      	mov	r3, r2
 8007948:	005b      	lsls	r3, r3, #1
 800794a:	4413      	add	r3, r2
 800794c:	00db      	lsls	r3, r3, #3
 800794e:	440b      	add	r3, r1
 8007950:	3304      	adds	r3, #4
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	2b00      	cmp	r3, #0
 8007956:	f000 80aa 	beq.w	8007aae <Check_Primary_r_Secondary+0x226>
			{
				printf("This Card not Receiving data, Shifting to Secondary:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 800795a:	79fb      	ldrb	r3, [r7, #7]
 800795c:	4a55      	ldr	r2, [pc, #340]	; (8007ab4 <Check_Primary_r_Secondary+0x22c>)
 800795e:	3366      	adds	r3, #102	; 0x66
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	4413      	add	r3, r2
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	4619      	mov	r1, r3
 8007968:	4856      	ldr	r0, [pc, #344]	; (8007ac4 <Check_Primary_r_Secondary+0x23c>)
 800796a:	f01b f8c7 	bl	8022afc <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY = SECONDARY;
 800796e:	79fa      	ldrb	r2, [r7, #7]
 8007970:	4951      	ldr	r1, [pc, #324]	; (8007ab8 <Check_Primary_r_Secondary+0x230>)
 8007972:	4613      	mov	r3, r2
 8007974:	005b      	lsls	r3, r3, #1
 8007976:	4413      	add	r3, r2
 8007978:	00db      	lsls	r3, r3, #3
 800797a:	440b      	add	r3, r1
 800797c:	3304      	adds	r3, #4
 800797e:	2200      	movs	r2, #0
 8007980:	701a      	strb	r2, [r3, #0]
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != SECONDARY)
 8007982:	e094      	b.n	8007aae <Check_Primary_r_Secondary+0x226>
			}
		}
		else if( (Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == RECEIVED) && (Rx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == NOT_RECEIVED) )
 8007984:	79fa      	ldrb	r2, [r7, #7]
 8007986:	494c      	ldr	r1, [pc, #304]	; (8007ab8 <Check_Primary_r_Secondary+0x230>)
 8007988:	4613      	mov	r3, r2
 800798a:	005b      	lsls	r3, r3, #1
 800798c:	4413      	add	r3, r2
 800798e:	00db      	lsls	r3, r3, #3
 8007990:	440b      	add	r3, r1
 8007992:	3303      	adds	r3, #3
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	2b01      	cmp	r3, #1
 8007998:	d13e      	bne.n	8007a18 <Check_Primary_r_Secondary+0x190>
 800799a:	79fa      	ldrb	r2, [r7, #7]
 800799c:	4947      	ldr	r1, [pc, #284]	; (8007abc <Check_Primary_r_Secondary+0x234>)
 800799e:	4613      	mov	r3, r2
 80079a0:	005b      	lsls	r3, r3, #1
 80079a2:	4413      	add	r3, r2
 80079a4:	00db      	lsls	r3, r3, #3
 80079a6:	440b      	add	r3, r1
 80079a8:	3303      	adds	r3, #3
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d133      	bne.n	8007a18 <Check_Primary_r_Secondary+0x190>
		{
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY)
 80079b0:	79fa      	ldrb	r2, [r7, #7]
 80079b2:	4941      	ldr	r1, [pc, #260]	; (8007ab8 <Check_Primary_r_Secondary+0x230>)
 80079b4:	4613      	mov	r3, r2
 80079b6:	005b      	lsls	r3, r3, #1
 80079b8:	4413      	add	r3, r2
 80079ba:	00db      	lsls	r3, r3, #3
 80079bc:	440b      	add	r3, r1
 80079be:	3304      	adds	r3, #4
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d073      	beq.n	8007aae <Check_Primary_r_Secondary+0x226>
			{
				printf("This Card Only Receiving data, Shifting to Primary:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80079c6:	79fb      	ldrb	r3, [r7, #7]
 80079c8:	4a3a      	ldr	r2, [pc, #232]	; (8007ab4 <Check_Primary_r_Secondary+0x22c>)
 80079ca:	3366      	adds	r3, #102	; 0x66
 80079cc:	009b      	lsls	r3, r3, #2
 80079ce:	4413      	add	r3, r2
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	4619      	mov	r1, r3
 80079d4:	483c      	ldr	r0, [pc, #240]	; (8007ac8 <Check_Primary_r_Secondary+0x240>)
 80079d6:	f01b f891 	bl	8022afc <iprintf>
				Last_Recevied_Clock[Source_Index] = CurTicks;
 80079da:	79fb      	ldrb	r3, [r7, #7]
 80079dc:	493b      	ldr	r1, [pc, #236]	; (8007acc <Check_Primary_r_Secondary+0x244>)
 80079de:	68fa      	ldr	r2, [r7, #12]
 80079e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				Last_Recevied_Clock_ValidMsgs[Source_Index] = CurTicks;
 80079e4:	79fb      	ldrb	r3, [r7, #7]
 80079e6:	493a      	ldr	r1, [pc, #232]	; (8007ad0 <Check_Primary_r_Secondary+0x248>)
 80079e8:	68fa      	ldr	r2, [r7, #12]
 80079ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				//				Link_Establish_Clock[Source_Index] = CurTicks;

				Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = 0;
 80079ee:	79fa      	ldrb	r2, [r7, #7]
 80079f0:	4931      	ldr	r1, [pc, #196]	; (8007ab8 <Check_Primary_r_Secondary+0x230>)
 80079f2:	4613      	mov	r3, r2
 80079f4:	005b      	lsls	r3, r3, #1
 80079f6:	4413      	add	r3, r2
 80079f8:	00db      	lsls	r3, r3, #3
 80079fa:	440b      	add	r3, r1
 80079fc:	3310      	adds	r3, #16
 80079fe:	2200      	movs	r2, #0
 8007a00:	601a      	str	r2, [r3, #0]
				Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY = PRIMARY;
 8007a02:	79fa      	ldrb	r2, [r7, #7]
 8007a04:	492c      	ldr	r1, [pc, #176]	; (8007ab8 <Check_Primary_r_Secondary+0x230>)
 8007a06:	4613      	mov	r3, r2
 8007a08:	005b      	lsls	r3, r3, #1
 8007a0a:	4413      	add	r3, r2
 8007a0c:	00db      	lsls	r3, r3, #3
 8007a0e:	440b      	add	r3, r1
 8007a10:	3304      	adds	r3, #4
 8007a12:	2201      	movs	r2, #1
 8007a14:	701a      	strb	r2, [r3, #0]
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY)
 8007a16:	e04a      	b.n	8007aae <Check_Primary_r_Secondary+0x226>
			}
		}
		else if( (Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == RECEIVED) && (Rx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == RECEIVED) )
 8007a18:	79fa      	ldrb	r2, [r7, #7]
 8007a1a:	4927      	ldr	r1, [pc, #156]	; (8007ab8 <Check_Primary_r_Secondary+0x230>)
 8007a1c:	4613      	mov	r3, r2
 8007a1e:	005b      	lsls	r3, r3, #1
 8007a20:	4413      	add	r3, r2
 8007a22:	00db      	lsls	r3, r3, #3
 8007a24:	440b      	add	r3, r1
 8007a26:	3303      	adds	r3, #3
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	2b01      	cmp	r3, #1
 8007a2c:	d13f      	bne.n	8007aae <Check_Primary_r_Secondary+0x226>
 8007a2e:	79fa      	ldrb	r2, [r7, #7]
 8007a30:	4922      	ldr	r1, [pc, #136]	; (8007abc <Check_Primary_r_Secondary+0x234>)
 8007a32:	4613      	mov	r3, r2
 8007a34:	005b      	lsls	r3, r3, #1
 8007a36:	4413      	add	r3, r2
 8007a38:	00db      	lsls	r3, r3, #3
 8007a3a:	440b      	add	r3, r1
 8007a3c:	3303      	adds	r3, #3
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d134      	bne.n	8007aae <Check_Primary_r_Secondary+0x226>
		{
#ifdef EI_1
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY)
 8007a44:	79fa      	ldrb	r2, [r7, #7]
 8007a46:	491c      	ldr	r1, [pc, #112]	; (8007ab8 <Check_Primary_r_Secondary+0x230>)
 8007a48:	4613      	mov	r3, r2
 8007a4a:	005b      	lsls	r3, r3, #1
 8007a4c:	4413      	add	r3, r2
 8007a4e:	00db      	lsls	r3, r3, #3
 8007a50:	440b      	add	r3, r1
 8007a52:	3304      	adds	r3, #4
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d029      	beq.n	8007aae <Check_Primary_r_Secondary+0x226>
			{
				printf("Both Cards Receiving data,EiPC_1 Shifting to Primary:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8007a5a:	79fb      	ldrb	r3, [r7, #7]
 8007a5c:	4a15      	ldr	r2, [pc, #84]	; (8007ab4 <Check_Primary_r_Secondary+0x22c>)
 8007a5e:	3366      	adds	r3, #102	; 0x66
 8007a60:	009b      	lsls	r3, r3, #2
 8007a62:	4413      	add	r3, r2
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	4619      	mov	r1, r3
 8007a68:	481a      	ldr	r0, [pc, #104]	; (8007ad4 <Check_Primary_r_Secondary+0x24c>)
 8007a6a:	f01b f847 	bl	8022afc <iprintf>
				Last_Recevied_Clock[Source_Index] = CurTicks;
 8007a6e:	79fb      	ldrb	r3, [r7, #7]
 8007a70:	4916      	ldr	r1, [pc, #88]	; (8007acc <Check_Primary_r_Secondary+0x244>)
 8007a72:	68fa      	ldr	r2, [r7, #12]
 8007a74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				Last_Recevied_Clock_ValidMsgs[Source_Index] = CurTicks;
 8007a78:	79fb      	ldrb	r3, [r7, #7]
 8007a7a:	4915      	ldr	r1, [pc, #84]	; (8007ad0 <Check_Primary_r_Secondary+0x248>)
 8007a7c:	68fa      	ldr	r2, [r7, #12]
 8007a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = 0;
 8007a82:	79fa      	ldrb	r2, [r7, #7]
 8007a84:	490c      	ldr	r1, [pc, #48]	; (8007ab8 <Check_Primary_r_Secondary+0x230>)
 8007a86:	4613      	mov	r3, r2
 8007a88:	005b      	lsls	r3, r3, #1
 8007a8a:	4413      	add	r3, r2
 8007a8c:	00db      	lsls	r3, r3, #3
 8007a8e:	440b      	add	r3, r1
 8007a90:	3310      	adds	r3, #16
 8007a92:	2200      	movs	r2, #0
 8007a94:	601a      	str	r2, [r3, #0]
				Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY = PRIMARY;
 8007a96:	79fa      	ldrb	r2, [r7, #7]
 8007a98:	4907      	ldr	r1, [pc, #28]	; (8007ab8 <Check_Primary_r_Secondary+0x230>)
 8007a9a:	4613      	mov	r3, r2
 8007a9c:	005b      	lsls	r3, r3, #1
 8007a9e:	4413      	add	r3, r2
 8007aa0:	00db      	lsls	r3, r3, #3
 8007aa2:	440b      	add	r3, r1
 8007aa4:	3304      	adds	r3, #4
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	701a      	strb	r2, [r3, #0]
 8007aaa:	e000      	b.n	8007aae <Check_Primary_r_Secondary+0x226>
		return;
 8007aac:	bf00      	nop
			//			}
#endif

		}
	}
}
 8007aae:	3710      	adds	r7, #16
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}
 8007ab4:	20000304 	.word	0x20000304
 8007ab8:	20001680 	.word	0x20001680
 8007abc:	20001770 	.word	0x20001770
 8007ac0:	08024ec8 	.word	0x08024ec8
 8007ac4:	08024f04 	.word	0x08024f04
 8007ac8:	08024f40 	.word	0x08024f40
 8007acc:	20000fb0 	.word	0x20000fb0
 8007ad0:	20000fd8 	.word	0x20000fd8
 8007ad4:	08024f78 	.word	0x08024f78

08007ad8 <Check_Vital_CRC>:

void Check_Vital_CRC(uint8_t Source_Index)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	4603      	mov	r3, r0
 8007ae0:	71fb      	strb	r3, [r7, #7]
	static uint8_t Diff_Cnt_Rx[MAX_PEER_CONNECTIONS] = {0,};
	static uint8_t Diff_Cnt_Tx[MAX_PEER_CONNECTIONS] = {0,};


	if(EI_data.Hitachi_st.Interface_Type[Source_Index] ==  SERIAL)
 8007ae2:	79fb      	ldrb	r3, [r7, #7]
 8007ae4:	4aac      	ldr	r2, [pc, #688]	; (8007d98 <Check_Vital_CRC+0x2c0>)
 8007ae6:	4413      	add	r3, r2
 8007ae8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007aec:	2b02      	cmp	r3, #2
 8007aee:	f000 814f 	beq.w	8007d90 <Check_Vital_CRC+0x2b8>
	{
		return;
	}
	else
	{
		if(Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val != Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val )
 8007af2:	79fa      	ldrb	r2, [r7, #7]
 8007af4:	49a9      	ldr	r1, [pc, #676]	; (8007d9c <Check_Vital_CRC+0x2c4>)
 8007af6:	4613      	mov	r3, r2
 8007af8:	005b      	lsls	r3, r3, #1
 8007afa:	4413      	add	r3, r2
 8007afc:	00db      	lsls	r3, r3, #3
 8007afe:	440b      	add	r3, r1
 8007b00:	3308      	adds	r3, #8
 8007b02:	6819      	ldr	r1, [r3, #0]
 8007b04:	79fa      	ldrb	r2, [r7, #7]
 8007b06:	48a6      	ldr	r0, [pc, #664]	; (8007da0 <Check_Vital_CRC+0x2c8>)
 8007b08:	4613      	mov	r3, r2
 8007b0a:	005b      	lsls	r3, r3, #1
 8007b0c:	4413      	add	r3, r2
 8007b0e:	00db      	lsls	r3, r3, #3
 8007b10:	4403      	add	r3, r0
 8007b12:	3308      	adds	r3, #8
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4299      	cmp	r1, r3
 8007b18:	f000 8092 	beq.w	8007c40 <Check_Vital_CRC+0x168>
		{
			if(Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val != 0)
 8007b1c:	79fa      	ldrb	r2, [r7, #7]
 8007b1e:	49a0      	ldr	r1, [pc, #640]	; (8007da0 <Check_Vital_CRC+0x2c8>)
 8007b20:	4613      	mov	r3, r2
 8007b22:	005b      	lsls	r3, r3, #1
 8007b24:	4413      	add	r3, r2
 8007b26:	00db      	lsls	r3, r3, #3
 8007b28:	440b      	add	r3, r1
 8007b2a:	3308      	adds	r3, #8
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	f000 8086 	beq.w	8007c40 <Check_Vital_CRC+0x168>
			{
				if( (Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY) || (INIT_Received[Source_Index] == NOT_RECEIVED) )
 8007b34:	79fa      	ldrb	r2, [r7, #7]
 8007b36:	4999      	ldr	r1, [pc, #612]	; (8007d9c <Check_Vital_CRC+0x2c4>)
 8007b38:	4613      	mov	r3, r2
 8007b3a:	005b      	lsls	r3, r3, #1
 8007b3c:	4413      	add	r3, r2
 8007b3e:	00db      	lsls	r3, r3, #3
 8007b40:	440b      	add	r3, r1
 8007b42:	3304      	adds	r3, #4
 8007b44:	781b      	ldrb	r3, [r3, #0]
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d104      	bne.n	8007b54 <Check_Vital_CRC+0x7c>
 8007b4a:	79fb      	ldrb	r3, [r7, #7]
 8007b4c:	4a95      	ldr	r2, [pc, #596]	; (8007da4 <Check_Vital_CRC+0x2cc>)
 8007b4e:	5cd3      	ldrb	r3, [r2, r3]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d175      	bne.n	8007c40 <Check_Vital_CRC+0x168>
				{
					uint32_t Diff = abs(Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val - Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 8007b54:	79fa      	ldrb	r2, [r7, #7]
 8007b56:	4991      	ldr	r1, [pc, #580]	; (8007d9c <Check_Vital_CRC+0x2c4>)
 8007b58:	4613      	mov	r3, r2
 8007b5a:	005b      	lsls	r3, r3, #1
 8007b5c:	4413      	add	r3, r2
 8007b5e:	00db      	lsls	r3, r3, #3
 8007b60:	440b      	add	r3, r1
 8007b62:	3308      	adds	r3, #8
 8007b64:	6819      	ldr	r1, [r3, #0]
 8007b66:	79fa      	ldrb	r2, [r7, #7]
 8007b68:	488d      	ldr	r0, [pc, #564]	; (8007da0 <Check_Vital_CRC+0x2c8>)
 8007b6a:	4613      	mov	r3, r2
 8007b6c:	005b      	lsls	r3, r3, #1
 8007b6e:	4413      	add	r3, r2
 8007b70:	00db      	lsls	r3, r3, #3
 8007b72:	4403      	add	r3, r0
 8007b74:	3308      	adds	r3, #8
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	1acb      	subs	r3, r1, r3
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	bfb8      	it	lt
 8007b7e:	425b      	neglt	r3, r3
 8007b80:	60fb      	str	r3, [r7, #12]

					if( (Diff != 1 ) || (Diff_Cnt_Rx[Source_Index] == 3) )
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d104      	bne.n	8007b92 <Check_Vital_CRC+0xba>
 8007b88:	79fb      	ldrb	r3, [r7, #7]
 8007b8a:	4a87      	ldr	r2, [pc, #540]	; (8007da8 <Check_Vital_CRC+0x2d0>)
 8007b8c:	5cd3      	ldrb	r3, [r2, r3]
 8007b8e:	2b03      	cmp	r3, #3
 8007b90:	d14c      	bne.n	8007c2c <Check_Vital_CRC+0x154>
					{
						Diff_Cnt_Rx[Source_Index] = 0;
 8007b92:	79fb      	ldrb	r3, [r7, #7]
 8007b94:	4a84      	ldr	r2, [pc, #528]	; (8007da8 <Check_Vital_CRC+0x2d0>)
 8007b96:	2100      	movs	r1, #0
 8007b98:	54d1      	strb	r1, [r2, r3]
						printf("RX_Vital Init Value is not same in Self and Other EiPC Cards:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8007b9a:	79fb      	ldrb	r3, [r7, #7]
 8007b9c:	4a7e      	ldr	r2, [pc, #504]	; (8007d98 <Check_Vital_CRC+0x2c0>)
 8007b9e:	3366      	adds	r3, #102	; 0x66
 8007ba0:	009b      	lsls	r3, r3, #2
 8007ba2:	4413      	add	r3, r2
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	4619      	mov	r1, r3
 8007ba8:	4880      	ldr	r0, [pc, #512]	; (8007dac <Check_Vital_CRC+0x2d4>)
 8007baa:	f01a ffa7 	bl	8022afc <iprintf>
						printf("RX_Vital Init Value S-EiPC:0x%06lX\n",Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 8007bae:	79fa      	ldrb	r2, [r7, #7]
 8007bb0:	497a      	ldr	r1, [pc, #488]	; (8007d9c <Check_Vital_CRC+0x2c4>)
 8007bb2:	4613      	mov	r3, r2
 8007bb4:	005b      	lsls	r3, r3, #1
 8007bb6:	4413      	add	r3, r2
 8007bb8:	00db      	lsls	r3, r3, #3
 8007bba:	440b      	add	r3, r1
 8007bbc:	3308      	adds	r3, #8
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	487b      	ldr	r0, [pc, #492]	; (8007db0 <Check_Vital_CRC+0x2d8>)
 8007bc4:	f01a ff9a 	bl	8022afc <iprintf>
						printf("RX_Vital Init Value O-EiPC:0x%06lX\n",Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 8007bc8:	79fa      	ldrb	r2, [r7, #7]
 8007bca:	4975      	ldr	r1, [pc, #468]	; (8007da0 <Check_Vital_CRC+0x2c8>)
 8007bcc:	4613      	mov	r3, r2
 8007bce:	005b      	lsls	r3, r3, #1
 8007bd0:	4413      	add	r3, r2
 8007bd2:	00db      	lsls	r3, r3, #3
 8007bd4:	440b      	add	r3, r1
 8007bd6:	3308      	adds	r3, #8
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4619      	mov	r1, r3
 8007bdc:	4875      	ldr	r0, [pc, #468]	; (8007db4 <Check_Vital_CRC+0x2dc>)
 8007bde:	f01a ff8d 	bl	8022afc <iprintf>
						printf("\nCopied RX_Vital Init Value from O-EiPC\n");
 8007be2:	4875      	ldr	r0, [pc, #468]	; (8007db8 <Check_Vital_CRC+0x2e0>)
 8007be4:	f01b f826 	bl	8022c34 <puts>
						Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val;
 8007be8:	79fa      	ldrb	r2, [r7, #7]
 8007bea:	79f9      	ldrb	r1, [r7, #7]
 8007bec:	486c      	ldr	r0, [pc, #432]	; (8007da0 <Check_Vital_CRC+0x2c8>)
 8007bee:	4613      	mov	r3, r2
 8007bf0:	005b      	lsls	r3, r3, #1
 8007bf2:	4413      	add	r3, r2
 8007bf4:	00db      	lsls	r3, r3, #3
 8007bf6:	4403      	add	r3, r0
 8007bf8:	3308      	adds	r3, #8
 8007bfa:	681a      	ldr	r2, [r3, #0]
 8007bfc:	486f      	ldr	r0, [pc, #444]	; (8007dbc <Check_Vital_CRC+0x2e4>)
 8007bfe:	010b      	lsls	r3, r1, #4
 8007c00:	4403      	add	r3, r0
 8007c02:	3308      	adds	r3, #8
 8007c04:	601a      	str	r2, [r3, #0]
						Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val;
 8007c06:	79f9      	ldrb	r1, [r7, #7]
 8007c08:	79fa      	ldrb	r2, [r7, #7]
 8007c0a:	4865      	ldr	r0, [pc, #404]	; (8007da0 <Check_Vital_CRC+0x2c8>)
 8007c0c:	460b      	mov	r3, r1
 8007c0e:	005b      	lsls	r3, r3, #1
 8007c10:	440b      	add	r3, r1
 8007c12:	00db      	lsls	r3, r3, #3
 8007c14:	4403      	add	r3, r0
 8007c16:	3308      	adds	r3, #8
 8007c18:	6819      	ldr	r1, [r3, #0]
 8007c1a:	4860      	ldr	r0, [pc, #384]	; (8007d9c <Check_Vital_CRC+0x2c4>)
 8007c1c:	4613      	mov	r3, r2
 8007c1e:	005b      	lsls	r3, r3, #1
 8007c20:	4413      	add	r3, r2
 8007c22:	00db      	lsls	r3, r3, #3
 8007c24:	4403      	add	r3, r0
 8007c26:	3308      	adds	r3, #8
 8007c28:	6019      	str	r1, [r3, #0]
 8007c2a:	e009      	b.n	8007c40 <Check_Vital_CRC+0x168>
					}
					else if(Diff == 1)
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2b01      	cmp	r3, #1
 8007c30:	d106      	bne.n	8007c40 <Check_Vital_CRC+0x168>
					{
						Diff_Cnt_Rx[Source_Index]++;
 8007c32:	79fb      	ldrb	r3, [r7, #7]
 8007c34:	4a5c      	ldr	r2, [pc, #368]	; (8007da8 <Check_Vital_CRC+0x2d0>)
 8007c36:	5cd2      	ldrb	r2, [r2, r3]
 8007c38:	3201      	adds	r2, #1
 8007c3a:	b2d1      	uxtb	r1, r2
 8007c3c:	4a5a      	ldr	r2, [pc, #360]	; (8007da8 <Check_Vital_CRC+0x2d0>)
 8007c3e:	54d1      	strb	r1, [r2, r3]
				}
			}
		}
	}

	if(Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val != Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val )
 8007c40:	79fa      	ldrb	r2, [r7, #7]
 8007c42:	4956      	ldr	r1, [pc, #344]	; (8007d9c <Check_Vital_CRC+0x2c4>)
 8007c44:	4613      	mov	r3, r2
 8007c46:	005b      	lsls	r3, r3, #1
 8007c48:	4413      	add	r3, r2
 8007c4a:	00db      	lsls	r3, r3, #3
 8007c4c:	440b      	add	r3, r1
 8007c4e:	330c      	adds	r3, #12
 8007c50:	6819      	ldr	r1, [r3, #0]
 8007c52:	79fa      	ldrb	r2, [r7, #7]
 8007c54:	4852      	ldr	r0, [pc, #328]	; (8007da0 <Check_Vital_CRC+0x2c8>)
 8007c56:	4613      	mov	r3, r2
 8007c58:	005b      	lsls	r3, r3, #1
 8007c5a:	4413      	add	r3, r2
 8007c5c:	00db      	lsls	r3, r3, #3
 8007c5e:	4403      	add	r3, r0
 8007c60:	330c      	adds	r3, #12
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4299      	cmp	r1, r3
 8007c66:	f000 8094 	beq.w	8007d92 <Check_Vital_CRC+0x2ba>
	{
		if(Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val != 0)
 8007c6a:	79fa      	ldrb	r2, [r7, #7]
 8007c6c:	494c      	ldr	r1, [pc, #304]	; (8007da0 <Check_Vital_CRC+0x2c8>)
 8007c6e:	4613      	mov	r3, r2
 8007c70:	005b      	lsls	r3, r3, #1
 8007c72:	4413      	add	r3, r2
 8007c74:	00db      	lsls	r3, r3, #3
 8007c76:	440b      	add	r3, r1
 8007c78:	330c      	adds	r3, #12
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	f000 8088 	beq.w	8007d92 <Check_Vital_CRC+0x2ba>
		{
			if( (Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY) || (INIT_Received[Source_Index] == NOT_RECEIVED) )
 8007c82:	79fa      	ldrb	r2, [r7, #7]
 8007c84:	4945      	ldr	r1, [pc, #276]	; (8007d9c <Check_Vital_CRC+0x2c4>)
 8007c86:	4613      	mov	r3, r2
 8007c88:	005b      	lsls	r3, r3, #1
 8007c8a:	4413      	add	r3, r2
 8007c8c:	00db      	lsls	r3, r3, #3
 8007c8e:	440b      	add	r3, r1
 8007c90:	3304      	adds	r3, #4
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d104      	bne.n	8007ca2 <Check_Vital_CRC+0x1ca>
 8007c98:	79fb      	ldrb	r3, [r7, #7]
 8007c9a:	4a42      	ldr	r2, [pc, #264]	; (8007da4 <Check_Vital_CRC+0x2cc>)
 8007c9c:	5cd3      	ldrb	r3, [r2, r3]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d177      	bne.n	8007d92 <Check_Vital_CRC+0x2ba>
			{
				uint32_t Diff = abs(Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val - Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val);
 8007ca2:	79fa      	ldrb	r2, [r7, #7]
 8007ca4:	493d      	ldr	r1, [pc, #244]	; (8007d9c <Check_Vital_CRC+0x2c4>)
 8007ca6:	4613      	mov	r3, r2
 8007ca8:	005b      	lsls	r3, r3, #1
 8007caa:	4413      	add	r3, r2
 8007cac:	00db      	lsls	r3, r3, #3
 8007cae:	440b      	add	r3, r1
 8007cb0:	330c      	adds	r3, #12
 8007cb2:	6819      	ldr	r1, [r3, #0]
 8007cb4:	79fa      	ldrb	r2, [r7, #7]
 8007cb6:	483a      	ldr	r0, [pc, #232]	; (8007da0 <Check_Vital_CRC+0x2c8>)
 8007cb8:	4613      	mov	r3, r2
 8007cba:	005b      	lsls	r3, r3, #1
 8007cbc:	4413      	add	r3, r2
 8007cbe:	00db      	lsls	r3, r3, #3
 8007cc0:	4403      	add	r3, r0
 8007cc2:	330c      	adds	r3, #12
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	1acb      	subs	r3, r1, r3
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	bfb8      	it	lt
 8007ccc:	425b      	neglt	r3, r3
 8007cce:	60bb      	str	r3, [r7, #8]
				if( (Diff != 1 ) || (Diff_Cnt_Tx[Source_Index] == 3) )
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	d104      	bne.n	8007ce0 <Check_Vital_CRC+0x208>
 8007cd6:	79fb      	ldrb	r3, [r7, #7]
 8007cd8:	4a39      	ldr	r2, [pc, #228]	; (8007dc0 <Check_Vital_CRC+0x2e8>)
 8007cda:	5cd3      	ldrb	r3, [r2, r3]
 8007cdc:	2b03      	cmp	r3, #3
 8007cde:	d14c      	bne.n	8007d7a <Check_Vital_CRC+0x2a2>
				{
					Diff_Cnt_Tx[Source_Index] = 0;
 8007ce0:	79fb      	ldrb	r3, [r7, #7]
 8007ce2:	4a37      	ldr	r2, [pc, #220]	; (8007dc0 <Check_Vital_CRC+0x2e8>)
 8007ce4:	2100      	movs	r1, #0
 8007ce6:	54d1      	strb	r1, [r2, r3]
					printf("TX_Vital Init Value is not same in Self and Other EiPC Cards:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8007ce8:	79fb      	ldrb	r3, [r7, #7]
 8007cea:	4a2b      	ldr	r2, [pc, #172]	; (8007d98 <Check_Vital_CRC+0x2c0>)
 8007cec:	3366      	adds	r3, #102	; 0x66
 8007cee:	009b      	lsls	r3, r3, #2
 8007cf0:	4413      	add	r3, r2
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	4833      	ldr	r0, [pc, #204]	; (8007dc4 <Check_Vital_CRC+0x2ec>)
 8007cf8:	f01a ff00 	bl	8022afc <iprintf>
					printf("TX_Vital Init Value S-EiPC:0x%06lX\n",Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val);
 8007cfc:	79fa      	ldrb	r2, [r7, #7]
 8007cfe:	4927      	ldr	r1, [pc, #156]	; (8007d9c <Check_Vital_CRC+0x2c4>)
 8007d00:	4613      	mov	r3, r2
 8007d02:	005b      	lsls	r3, r3, #1
 8007d04:	4413      	add	r3, r2
 8007d06:	00db      	lsls	r3, r3, #3
 8007d08:	440b      	add	r3, r1
 8007d0a:	330c      	adds	r3, #12
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4619      	mov	r1, r3
 8007d10:	482d      	ldr	r0, [pc, #180]	; (8007dc8 <Check_Vital_CRC+0x2f0>)
 8007d12:	f01a fef3 	bl	8022afc <iprintf>
					printf("TX_Vital Init Value O-EiPC:0x%06lX\n",Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val);
 8007d16:	79fa      	ldrb	r2, [r7, #7]
 8007d18:	4921      	ldr	r1, [pc, #132]	; (8007da0 <Check_Vital_CRC+0x2c8>)
 8007d1a:	4613      	mov	r3, r2
 8007d1c:	005b      	lsls	r3, r3, #1
 8007d1e:	4413      	add	r3, r2
 8007d20:	00db      	lsls	r3, r3, #3
 8007d22:	440b      	add	r3, r1
 8007d24:	330c      	adds	r3, #12
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4619      	mov	r1, r3
 8007d2a:	4828      	ldr	r0, [pc, #160]	; (8007dcc <Check_Vital_CRC+0x2f4>)
 8007d2c:	f01a fee6 	bl	8022afc <iprintf>
					printf("\nCopied TX Vital Init Value from O-EiPC\n");
 8007d30:	4827      	ldr	r0, [pc, #156]	; (8007dd0 <Check_Vital_CRC+0x2f8>)
 8007d32:	f01a ff7f 	bl	8022c34 <puts>
					Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value = Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val;
 8007d36:	79fa      	ldrb	r2, [r7, #7]
 8007d38:	79f9      	ldrb	r1, [r7, #7]
 8007d3a:	4819      	ldr	r0, [pc, #100]	; (8007da0 <Check_Vital_CRC+0x2c8>)
 8007d3c:	4613      	mov	r3, r2
 8007d3e:	005b      	lsls	r3, r3, #1
 8007d40:	4413      	add	r3, r2
 8007d42:	00db      	lsls	r3, r3, #3
 8007d44:	4403      	add	r3, r0
 8007d46:	330c      	adds	r3, #12
 8007d48:	681a      	ldr	r2, [r3, #0]
 8007d4a:	481c      	ldr	r0, [pc, #112]	; (8007dbc <Check_Vital_CRC+0x2e4>)
 8007d4c:	010b      	lsls	r3, r1, #4
 8007d4e:	4403      	add	r3, r0
 8007d50:	330c      	adds	r3, #12
 8007d52:	601a      	str	r2, [r3, #0]
					Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val = Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val;
 8007d54:	79f9      	ldrb	r1, [r7, #7]
 8007d56:	79fa      	ldrb	r2, [r7, #7]
 8007d58:	4811      	ldr	r0, [pc, #68]	; (8007da0 <Check_Vital_CRC+0x2c8>)
 8007d5a:	460b      	mov	r3, r1
 8007d5c:	005b      	lsls	r3, r3, #1
 8007d5e:	440b      	add	r3, r1
 8007d60:	00db      	lsls	r3, r3, #3
 8007d62:	4403      	add	r3, r0
 8007d64:	330c      	adds	r3, #12
 8007d66:	6819      	ldr	r1, [r3, #0]
 8007d68:	480c      	ldr	r0, [pc, #48]	; (8007d9c <Check_Vital_CRC+0x2c4>)
 8007d6a:	4613      	mov	r3, r2
 8007d6c:	005b      	lsls	r3, r3, #1
 8007d6e:	4413      	add	r3, r2
 8007d70:	00db      	lsls	r3, r3, #3
 8007d72:	4403      	add	r3, r0
 8007d74:	330c      	adds	r3, #12
 8007d76:	6019      	str	r1, [r3, #0]
 8007d78:	e00b      	b.n	8007d92 <Check_Vital_CRC+0x2ba>
				}
				else if(Diff == 1)
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d108      	bne.n	8007d92 <Check_Vital_CRC+0x2ba>
				{
					Diff_Cnt_Tx[Source_Index]++;
 8007d80:	79fb      	ldrb	r3, [r7, #7]
 8007d82:	4a0f      	ldr	r2, [pc, #60]	; (8007dc0 <Check_Vital_CRC+0x2e8>)
 8007d84:	5cd2      	ldrb	r2, [r2, r3]
 8007d86:	3201      	adds	r2, #1
 8007d88:	b2d1      	uxtb	r1, r2
 8007d8a:	4a0d      	ldr	r2, [pc, #52]	; (8007dc0 <Check_Vital_CRC+0x2e8>)
 8007d8c:	54d1      	strb	r1, [r2, r3]
 8007d8e:	e000      	b.n	8007d92 <Check_Vital_CRC+0x2ba>
		return;
 8007d90:	bf00      	nop
				}
			}
		}
	}
}
 8007d92:	3710      	adds	r7, #16
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}
 8007d98:	20000304 	.word	0x20000304
 8007d9c:	20001680 	.word	0x20001680
 8007da0:	20001770 	.word	0x20001770
 8007da4:	20001000 	.word	0x20001000
 8007da8:	20002044 	.word	0x20002044
 8007dac:	08024fb4 	.word	0x08024fb4
 8007db0:	08024ff8 	.word	0x08024ff8
 8007db4:	0802501c 	.word	0x0802501c
 8007db8:	08025040 	.word	0x08025040
 8007dbc:	200011d0 	.word	0x200011d0
 8007dc0:	20002050 	.word	0x20002050
 8007dc4:	08025068 	.word	0x08025068
 8007dc8:	080250ac 	.word	0x080250ac
 8007dcc:	080250d0 	.word	0x080250d0
 8007dd0:	080250f4 	.word	0x080250f4

08007dd4 <Check_Other_EiPC_Packet>:

void Check_Other_EiPC_Packet(uint8_t Source_Index)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b082      	sub	sp, #8
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	4603      	mov	r3, r0
 8007ddc:	71fb      	strb	r3, [r7, #7]
	if(EI_data.Hitachi_st.Interface_Type[Source_Index] !=  SERIAL)
 8007dde:	79fb      	ldrb	r3, [r7, #7]
 8007de0:	4a0a      	ldr	r2, [pc, #40]	; (8007e0c <Check_Other_EiPC_Packet+0x38>)
 8007de2:	4413      	add	r3, r2
 8007de4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007de8:	2b02      	cmp	r3, #2
 8007dea:	d007      	beq.n	8007dfc <Check_Other_EiPC_Packet+0x28>
	{
		Check_Primary_r_Secondary(Source_Index);
 8007dec:	79fb      	ldrb	r3, [r7, #7]
 8007dee:	4618      	mov	r0, r3
 8007df0:	f7ff fd4a 	bl	8007888 <Check_Primary_r_Secondary>
		Check_Vital_CRC(Source_Index);
 8007df4:	79fb      	ldrb	r3, [r7, #7]
 8007df6:	4618      	mov	r0, r3
 8007df8:	f7ff fe6e 	bl	8007ad8 <Check_Vital_CRC>
	}
	CheckOtherLinkStatus(Source_Index);
 8007dfc:	79fb      	ldrb	r3, [r7, #7]
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f001 f9b0 	bl	8009164 <CheckOtherLinkStatus>
}
 8007e04:	bf00      	nop
 8007e06:	3708      	adds	r7, #8
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}
 8007e0c:	20000304 	.word	0x20000304

08007e10 <CheckLinkEstablishTimeout>:

void CheckLinkEstablishTimeout(void)
{
 8007e10:	b590      	push	{r4, r7, lr}
 8007e12:	b083      	sub	sp, #12
 8007e14:	af00      	add	r7, sp, #0
	uint8_t Traverser = 0;
 8007e16:	2300      	movs	r3, #0
 8007e18:	71fb      	strb	r3, [r7, #7]
	static uint32_t Prev_Last_LinkEstablish_CLK[MAX_PEER_CONNECTIONS] = {0,};

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8007e1a:	4930      	ldr	r1, [pc, #192]	; (8007edc <CheckLinkEstablishTimeout+0xcc>)
 8007e1c:	4830      	ldr	r0, [pc, #192]	; (8007ee0 <CheckLinkEstablishTimeout+0xd0>)
 8007e1e:	f7f8 fa0f 	bl	8000240 <strcmp>
 8007e22:	4603      	mov	r3, r0
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d055      	beq.n	8007ed4 <CheckLinkEstablishTimeout+0xc4>
		return;
	}



	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8007e28:	2300      	movs	r3, #0
 8007e2a:	71fb      	strb	r3, [r7, #7]
 8007e2c:	e04b      	b.n	8007ec6 <CheckLinkEstablishTimeout+0xb6>
	{
		if( (HAL_Elaps_Ticks(Link_Establish_Clock[Traverser]) > EI_data.Hitachi_st.LinkEstablishTimeout[Traverser]) && (Prev_Last_LinkEstablish_CLK[Traverser] != Link_Establish_Clock[Traverser]) )
 8007e2e:	79fb      	ldrb	r3, [r7, #7]
 8007e30:	4a2c      	ldr	r2, [pc, #176]	; (8007ee4 <CheckLinkEstablishTimeout+0xd4>)
 8007e32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e36:	4618      	mov	r0, r3
 8007e38:	f007 f86c 	bl	800ef14 <HAL_Elaps_Ticks>
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	79fb      	ldrb	r3, [r7, #7]
 8007e40:	4929      	ldr	r1, [pc, #164]	; (8007ee8 <CheckLinkEstablishTimeout+0xd8>)
 8007e42:	339e      	adds	r3, #158	; 0x9e
 8007e44:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d939      	bls.n	8007ec0 <CheckLinkEstablishTimeout+0xb0>
 8007e4c:	79fb      	ldrb	r3, [r7, #7]
 8007e4e:	4a27      	ldr	r2, [pc, #156]	; (8007eec <CheckLinkEstablishTimeout+0xdc>)
 8007e50:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007e54:	79fb      	ldrb	r3, [r7, #7]
 8007e56:	4923      	ldr	r1, [pc, #140]	; (8007ee4 <CheckLinkEstablishTimeout+0xd4>)
 8007e58:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	d02f      	beq.n	8007ec0 <CheckLinkEstablishTimeout+0xb0>
		{
			Prev_Last_LinkEstablish_CLK[Traverser] = Link_Establish_Clock[Traverser];
 8007e60:	79fa      	ldrb	r2, [r7, #7]
 8007e62:	79fb      	ldrb	r3, [r7, #7]
 8007e64:	491f      	ldr	r1, [pc, #124]	; (8007ee4 <CheckLinkEstablishTimeout+0xd4>)
 8007e66:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007e6a:	4920      	ldr	r1, [pc, #128]	; (8007eec <CheckLinkEstablishTimeout+0xdc>)
 8007e6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			printf("Link Establish Timeout for:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
 8007e70:	79fb      	ldrb	r3, [r7, #7]
 8007e72:	4a1d      	ldr	r2, [pc, #116]	; (8007ee8 <CheckLinkEstablishTimeout+0xd8>)
 8007e74:	3366      	adds	r3, #102	; 0x66
 8007e76:	009b      	lsls	r3, r3, #2
 8007e78:	4413      	add	r3, r2
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	4619      	mov	r1, r3
 8007e7e:	481c      	ldr	r0, [pc, #112]	; (8007ef0 <CheckLinkEstablishTimeout+0xe0>)
 8007e80:	f01a fe3c 	bl	8022afc <iprintf>
			Link_Flag[Traverser] = CLEAR;
 8007e84:	79fb      	ldrb	r3, [r7, #7]
 8007e86:	4a1b      	ldr	r2, [pc, #108]	; (8007ef4 <CheckLinkEstablishTimeout+0xe4>)
 8007e88:	2100      	movs	r1, #0
 8007e8a:	54d1      	strb	r1, [r2, r3]
			Tx_Ei_self_sharing_st[Traverser].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Traverser].Last_RCV_Clk_diff); // To detected EiPC shifting Faster
 8007e8c:	79fa      	ldrb	r2, [r7, #7]
 8007e8e:	491a      	ldr	r1, [pc, #104]	; (8007ef8 <CheckLinkEstablishTimeout+0xe8>)
 8007e90:	4613      	mov	r3, r2
 8007e92:	005b      	lsls	r3, r3, #1
 8007e94:	4413      	add	r3, r2
 8007e96:	00db      	lsls	r3, r3, #3
 8007e98:	440b      	add	r3, r1
 8007e9a:	3310      	adds	r3, #16
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	79fc      	ldrb	r4, [r7, #7]
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f007 f837 	bl	800ef14 <HAL_Elaps_Ticks>
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	4913      	ldr	r1, [pc, #76]	; (8007ef8 <CheckLinkEstablishTimeout+0xe8>)
 8007eaa:	4623      	mov	r3, r4
 8007eac:	005b      	lsls	r3, r3, #1
 8007eae:	4423      	add	r3, r4
 8007eb0:	00db      	lsls	r3, r3, #3
 8007eb2:	440b      	add	r3, r1
 8007eb4:	3310      	adds	r3, #16
 8007eb6:	601a      	str	r2, [r3, #0]
			CheckOtherLinkStatus(Traverser);
 8007eb8:	79fb      	ldrb	r3, [r7, #7]
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f001 f952 	bl	8009164 <CheckOtherLinkStatus>
	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8007ec0:	79fb      	ldrb	r3, [r7, #7]
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	71fb      	strb	r3, [r7, #7]
 8007ec6:	4b08      	ldr	r3, [pc, #32]	; (8007ee8 <CheckLinkEstablishTimeout+0xd8>)
 8007ec8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007ecc:	79fa      	ldrb	r2, [r7, #7]
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	d3ad      	bcc.n	8007e2e <CheckLinkEstablishTimeout+0x1e>
 8007ed2:	e000      	b.n	8007ed6 <CheckLinkEstablishTimeout+0xc6>
		return;
 8007ed4:	bf00      	nop
		}
	}
}
 8007ed6:	370c      	adds	r7, #12
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd90      	pop	{r4, r7, pc}
 8007edc:	080242c0 	.word	0x080242c0
 8007ee0:	20000305 	.word	0x20000305
 8007ee4:	20000f20 	.word	0x20000f20
 8007ee8:	20000304 	.word	0x20000304
 8007eec:	2000205c 	.word	0x2000205c
 8007ef0:	0802511c 	.word	0x0802511c
 8007ef4:	20000f70 	.word	0x20000f70
 8007ef8:	20001680 	.word	0x20001680

08007efc <Send_Self_Sharing>:


void Send_Self_Sharing(void)
{
 8007efc:	b590      	push	{r4, r7, lr}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8007f02:	2300      	movs	r3, #0
 8007f04:	71fb      	strb	r3, [r7, #7]
 8007f06:	e049      	b.n	8007f9c <Send_Self_Sharing+0xa0>
	{
		if(HAL_Elaps_Ticks(Self_Sharing_CAN_Clk[Traverser]) > (EI_data.Hitachi_st.CAN_Xchange_Time) )
 8007f08:	79fb      	ldrb	r3, [r7, #7]
 8007f0a:	4a29      	ldr	r2, [pc, #164]	; (8007fb0 <Send_Self_Sharing+0xb4>)
 8007f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f10:	4618      	mov	r0, r3
 8007f12:	f006 ffff 	bl	800ef14 <HAL_Elaps_Ticks>
 8007f16:	4602      	mov	r2, r0
 8007f18:	4b26      	ldr	r3, [pc, #152]	; (8007fb4 <Send_Self_Sharing+0xb8>)
 8007f1a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d939      	bls.n	8007f96 <Send_Self_Sharing+0x9a>
		{
			Tx_Ei_self_sharing_st[Traverser].Msg_Rcv_Flag = NOT_RECEIVED;
 8007f22:	79fa      	ldrb	r2, [r7, #7]
 8007f24:	4924      	ldr	r1, [pc, #144]	; (8007fb8 <Send_Self_Sharing+0xbc>)
 8007f26:	4613      	mov	r3, r2
 8007f28:	005b      	lsls	r3, r3, #1
 8007f2a:	4413      	add	r3, r2
 8007f2c:	00db      	lsls	r3, r3, #3
 8007f2e:	440b      	add	r3, r1
 8007f30:	3301      	adds	r3, #1
 8007f32:	2200      	movs	r2, #0
 8007f34:	701a      	strb	r2, [r3, #0]
			Tx_Ei_self_sharing_st[Traverser].LinkEstablishFlag = Hitachi_clk_flags_st[Traverser].Link_EstablishFlag;
 8007f36:	79f9      	ldrb	r1, [r7, #7]
 8007f38:	79fa      	ldrb	r2, [r7, #7]
 8007f3a:	4820      	ldr	r0, [pc, #128]	; (8007fbc <Send_Self_Sharing+0xc0>)
 8007f3c:	460b      	mov	r3, r1
 8007f3e:	005b      	lsls	r3, r3, #1
 8007f40:	440b      	add	r3, r1
 8007f42:	009b      	lsls	r3, r3, #2
 8007f44:	4403      	add	r3, r0
 8007f46:	3301      	adds	r3, #1
 8007f48:	7818      	ldrb	r0, [r3, #0]
 8007f4a:	491b      	ldr	r1, [pc, #108]	; (8007fb8 <Send_Self_Sharing+0xbc>)
 8007f4c:	4613      	mov	r3, r2
 8007f4e:	005b      	lsls	r3, r3, #1
 8007f50:	4413      	add	r3, r2
 8007f52:	00db      	lsls	r3, r3, #3
 8007f54:	440b      	add	r3, r1
 8007f56:	3302      	adds	r3, #2
 8007f58:	4602      	mov	r2, r0
 8007f5a:	701a      	strb	r2, [r3, #0]

			memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8007f5c:	2218      	movs	r2, #24
 8007f5e:	2100      	movs	r1, #0
 8007f60:	4817      	ldr	r0, [pc, #92]	; (8007fc0 <Send_Self_Sharing+0xc4>)
 8007f62:	f01a fce3 	bl	802292c <memset>
			memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Traverser],sizeof(EI_SELF_SHARING_t));
 8007f66:	79fa      	ldrb	r2, [r7, #7]
 8007f68:	4613      	mov	r3, r2
 8007f6a:	005b      	lsls	r3, r3, #1
 8007f6c:	4413      	add	r3, r2
 8007f6e:	00db      	lsls	r3, r3, #3
 8007f70:	4a11      	ldr	r2, [pc, #68]	; (8007fb8 <Send_Self_Sharing+0xbc>)
 8007f72:	4413      	add	r3, r2
 8007f74:	2218      	movs	r2, #24
 8007f76:	4619      	mov	r1, r3
 8007f78:	4811      	ldr	r0, [pc, #68]	; (8007fc0 <Send_Self_Sharing+0xc4>)
 8007f7a:	f01a fcaf 	bl	80228dc <memcpy>

#ifdef EI_1
			TransmitCanPkt(EI_1_SELF_SHARING);
 8007f7e:	f240 2001 	movw	r0, #513	; 0x201
 8007f82:	f007 fd81 	bl	800fa88 <TransmitCanPkt>
#endif
#ifdef EI_2
			TransmitCanPkt(EI_2_SELF_SHARING);
#endif
			Self_Sharing_CAN_Clk[Traverser] = HAL_GetTick();
 8007f86:	79fc      	ldrb	r4, [r7, #7]
 8007f88:	f00d fdae 	bl	8015ae8 <HAL_GetTick>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	4a08      	ldr	r2, [pc, #32]	; (8007fb0 <Send_Self_Sharing+0xb4>)
 8007f90:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			return; /* Returning from the function because to avoid the Data Mismatch at Receiption end*/
 8007f94:	e008      	b.n	8007fa8 <Send_Self_Sharing+0xac>
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8007f96:	79fb      	ldrb	r3, [r7, #7]
 8007f98:	3301      	adds	r3, #1
 8007f9a:	71fb      	strb	r3, [r7, #7]
 8007f9c:	4b05      	ldr	r3, [pc, #20]	; (8007fb4 <Send_Self_Sharing+0xb8>)
 8007f9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007fa2:	79fa      	ldrb	r2, [r7, #7]
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d3af      	bcc.n	8007f08 <Send_Self_Sharing+0xc>
		}
	}
}
 8007fa8:	370c      	adds	r7, #12
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd90      	pop	{r4, r7, pc}
 8007fae:	bf00      	nop
 8007fb0:	20000e50 	.word	0x20000e50
 8007fb4:	20000304 	.word	0x20000304
 8007fb8:	20001680 	.word	0x20001680
 8007fbc:	20001cd4 	.word	0x20001cd4
 8007fc0:	20001860 	.word	0x20001860

08007fc4 <Detect_CAN_Xchange_Failure>:

void Detect_CAN_Xchange_Failure(void)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	af00      	add	r7, sp, #0
	static uint32_t Previous_Clock_RCV_SELF_XCHG_CLK = 0;

	if(Is_CAN_Exchange_happening == YES)
 8007fc8:	4b24      	ldr	r3, [pc, #144]	; (800805c <Detect_CAN_Xchange_Failure+0x98>)
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d101      	bne.n	8007fd4 <Detect_CAN_Xchange_Failure+0x10>
	{
		Blink_S2();
 8007fd0:	f00b fc62 	bl	8013898 <Blink_S2>
	}

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8007fd4:	4922      	ldr	r1, [pc, #136]	; (8008060 <Detect_CAN_Xchange_Failure+0x9c>)
 8007fd6:	4823      	ldr	r0, [pc, #140]	; (8008064 <Detect_CAN_Xchange_Failure+0xa0>)
 8007fd8:	f7f8 f932 	bl	8000240 <strcmp>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d103      	bne.n	8007fea <Detect_CAN_Xchange_Failure+0x26>
	{
		Is_CAN_Exchange_happening = YES;
 8007fe2:	4b1e      	ldr	r3, [pc, #120]	; (800805c <Detect_CAN_Xchange_Failure+0x98>)
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	701a      	strb	r2, [r3, #0]
		return;
 8007fe8:	e036      	b.n	8008058 <Detect_CAN_Xchange_Failure+0x94>
	}
	if(HAL_Elaps_Ticks(RCV_SELF_XCHG_CLK)>= EI_data.Hitachi_st.CAN_EXCHANGE_TIME_OUT)
 8007fea:	4b1f      	ldr	r3, [pc, #124]	; (8008068 <Detect_CAN_Xchange_Failure+0xa4>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f006 ff90 	bl	800ef14 <HAL_Elaps_Ticks>
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	4b1d      	ldr	r3, [pc, #116]	; (800806c <Detect_CAN_Xchange_Failure+0xa8>)
 8007ff8:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d32b      	bcc.n	8008058 <Detect_CAN_Xchange_Failure+0x94>
	{
		if(Previous_Clock_RCV_SELF_XCHG_CLK != RCV_SELF_XCHG_CLK)
 8008000:	4b1b      	ldr	r3, [pc, #108]	; (8008070 <Detect_CAN_Xchange_Failure+0xac>)
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	4b18      	ldr	r3, [pc, #96]	; (8008068 <Detect_CAN_Xchange_Failure+0xa4>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	429a      	cmp	r2, r3
 800800a:	d025      	beq.n	8008058 <Detect_CAN_Xchange_Failure+0x94>
		{
			Is_CAN_Exchange_happening = NO;
 800800c:	4b13      	ldr	r3, [pc, #76]	; (800805c <Detect_CAN_Xchange_Failure+0x98>)
 800800e:	2200      	movs	r2, #0
 8008010:	701a      	strb	r2, [r3, #0]
			Previous_Clock_RCV_SELF_XCHG_CLK = RCV_SELF_XCHG_CLK;
 8008012:	4b15      	ldr	r3, [pc, #84]	; (8008068 <Detect_CAN_Xchange_Failure+0xa4>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a16      	ldr	r2, [pc, #88]	; (8008070 <Detect_CAN_Xchange_Failure+0xac>)
 8008018:	6013      	str	r3, [r2, #0]
			printf("CAN Data Not Received from last %lu Seconds\n",(HAL_Elaps_Ticks(RCV_SELF_XCHG_CLK)/1000));
 800801a:	4b13      	ldr	r3, [pc, #76]	; (8008068 <Detect_CAN_Xchange_Failure+0xa4>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4618      	mov	r0, r3
 8008020:	f006 ff78 	bl	800ef14 <HAL_Elaps_Ticks>
 8008024:	4603      	mov	r3, r0
 8008026:	4a13      	ldr	r2, [pc, #76]	; (8008074 <Detect_CAN_Xchange_Failure+0xb0>)
 8008028:	fba2 2303 	umull	r2, r3, r2, r3
 800802c:	099b      	lsrs	r3, r3, #6
 800802e:	4619      	mov	r1, r3
 8008030:	4811      	ldr	r0, [pc, #68]	; (8008078 <Detect_CAN_Xchange_Failure+0xb4>)
 8008032:	f01a fd63 	bl	8022afc <iprintf>
			printf("Mem setting Rx_Ei_self_sharing_st\n");
 8008036:	4811      	ldr	r0, [pc, #68]	; (800807c <Detect_CAN_Xchange_Failure+0xb8>)
 8008038:	f01a fdfc 	bl	8022c34 <puts>
			memset(&Rx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 800803c:	2218      	movs	r2, #24
 800803e:	2100      	movs	r1, #0
 8008040:	480f      	ldr	r0, [pc, #60]	; (8008080 <Detect_CAN_Xchange_Failure+0xbc>)
 8008042:	f01a fc73 	bl	802292c <memset>
			memset(&vEI_Transver_EI_To_MIE,0,sizeof(EI_VITAL_DATA_TO_VITAL_COMPUTER_t));
 8008046:	22a2      	movs	r2, #162	; 0xa2
 8008048:	2100      	movs	r1, #0
 800804a:	480e      	ldr	r0, [pc, #56]	; (8008084 <Detect_CAN_Xchange_Failure+0xc0>)
 800804c:	f01a fc6e 	bl	802292c <memset>
			TransmitCanPkt(EI_PROCESS_DATA);
 8008050:	f240 1019 	movw	r0, #281	; 0x119
 8008054:	f007 fd18 	bl	800fa88 <TransmitCanPkt>
		}
	}
}
 8008058:	bd80      	pop	{r7, pc}
 800805a:	bf00      	nop
 800805c:	20000108 	.word	0x20000108
 8008060:	080242c0 	.word	0x080242c0
 8008064:	20000305 	.word	0x20000305
 8008068:	20000e4c 	.word	0x20000e4c
 800806c:	20000304 	.word	0x20000304
 8008070:	20002084 	.word	0x20002084
 8008074:	10624dd3 	.word	0x10624dd3
 8008078:	0802513c 	.word	0x0802513c
 800807c:	0802516c 	.word	0x0802516c
 8008080:	20001770 	.word	0x20001770
 8008084:	200010f0 	.word	0x200010f0

08008088 <Process_Send_Signals_2_MIE>:

void Process_Send_Signals_2_MIE(void)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b0ae      	sub	sp, #184	; 0xb8
 800808c:	af00      	add	r7, sp, #0

#ifdef EI_1

	static uint32_t send_signals_serial_Clk = 0;
	static uint8_t Prev_Buff[MAX_OUTPUTS_PER_PEER * MAX_PEER_CONNECTIONS] = {0,};
	uint8_t Serial_Send_Buffer[(MAX_OUTPUTS_PER_PEER * MAX_PEER_CONNECTIONS) + 10] = {0,};
 800808e:	2300      	movs	r3, #0
 8008090:	607b      	str	r3, [r7, #4]
 8008092:	f107 0308 	add.w	r3, r7, #8
 8008096:	22a6      	movs	r2, #166	; 0xa6
 8008098:	2100      	movs	r1, #0
 800809a:	4618      	mov	r0, r3
 800809c:	f01a fc46 	bl	802292c <memset>
	uint16_t Serial_Byte=0;
 80080a0:	2300      	movs	r3, #0
 80080a2:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
#endif

	if(HAL_Elaps_Ticks(MIE_Signal_Send_CLK) > (EI_data.Hitachi_st.MIE_SIGNAL_SEND_CLK))
 80080a6:	4bb3      	ldr	r3, [pc, #716]	; (8008374 <Process_Send_Signals_2_MIE+0x2ec>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4618      	mov	r0, r3
 80080ac:	f006 ff32 	bl	800ef14 <HAL_Elaps_Ticks>
 80080b0:	4602      	mov	r2, r0
 80080b2:	4bb1      	ldr	r3, [pc, #708]	; (8008378 <Process_Send_Signals_2_MIE+0x2f0>)
 80080b4:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 80080b8:	429a      	cmp	r2, r3
 80080ba:	f240 8254 	bls.w	8008566 <Process_Send_Signals_2_MIE+0x4de>
	{
		uint8_t Traverser = 0;
 80080be:	2300      	movs	r3, #0
 80080c0:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
		uint8_t Choice = 0;
 80080c4:	2300      	movs	r3, #0
 80080c6:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
#ifdef EI_1
		for(Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 80080ca:	2300      	movs	r3, #0
 80080cc:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
 80080d0:	e0ad      	b.n	800822e <Process_Send_Signals_2_MIE+0x1a6>
		{
			if( (MisMatchFlag[Traverser] == SET) && ( strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0))
 80080d2:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 80080d6:	4aa9      	ldr	r2, [pc, #676]	; (800837c <Process_Send_Signals_2_MIE+0x2f4>)
 80080d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080dc:	2b01      	cmp	r3, #1
 80080de:	d11d      	bne.n	800811c <Process_Send_Signals_2_MIE+0x94>
 80080e0:	49a7      	ldr	r1, [pc, #668]	; (8008380 <Process_Send_Signals_2_MIE+0x2f8>)
 80080e2:	48a8      	ldr	r0, [pc, #672]	; (8008384 <Process_Send_Signals_2_MIE+0x2fc>)
 80080e4:	f7f8 f8ac 	bl	8000240 <strcmp>
 80080e8:	4603      	mov	r3, r0
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d016      	beq.n	800811c <Process_Send_Signals_2_MIE+0x94>
			{
				printf("MisMatch Found:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
 80080ee:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 80080f2:	4aa1      	ldr	r2, [pc, #644]	; (8008378 <Process_Send_Signals_2_MIE+0x2f0>)
 80080f4:	3366      	adds	r3, #102	; 0x66
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	4413      	add	r3, r2
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	4619      	mov	r1, r3
 80080fe:	48a2      	ldr	r0, [pc, #648]	; (8008388 <Process_Send_Signals_2_MIE+0x300>)
 8008100:	f01a fcfc 	bl	8022afc <iprintf>
				memset(&vEI_Transver_EI_To_MIE.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],0,MAX_OUTPUTS_PER_PEER);
 8008104:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008108:	011b      	lsls	r3, r3, #4
 800810a:	4aa0      	ldr	r2, [pc, #640]	; (800838c <Process_Send_Signals_2_MIE+0x304>)
 800810c:	4413      	add	r3, r2
 800810e:	3302      	adds	r3, #2
 8008110:	2210      	movs	r2, #16
 8008112:	2100      	movs	r1, #0
 8008114:	4618      	mov	r0, r3
 8008116:	f01a fc09 	bl	802292c <memset>

				continue;
 800811a:	e083      	b.n	8008224 <Process_Send_Signals_2_MIE+0x19c>
			}



			Choice = 0;
 800811c:	2300      	movs	r3, #0
 800811e:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
			(OtherCardLink_Flag[Traverser] == SET)?SET_BIT_USER(0,Choice):CLEAR_BIT_USER(0,Choice);
 8008122:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008126:	4a9a      	ldr	r2, [pc, #616]	; (8008390 <Process_Send_Signals_2_MIE+0x308>)
 8008128:	5cd3      	ldrb	r3, [r2, r3]
 800812a:	2b01      	cmp	r3, #1
 800812c:	d106      	bne.n	800813c <Process_Send_Signals_2_MIE+0xb4>
 800812e:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8008132:	f043 0301 	orr.w	r3, r3, #1
 8008136:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 800813a:	e005      	b.n	8008148 <Process_Send_Signals_2_MIE+0xc0>
 800813c:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8008140:	f023 0301 	bic.w	r3, r3, #1
 8008144:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
			(Link_Flag[Traverser] == SET)?SET_BIT_USER(1,Choice):CLEAR_BIT_USER(1,Choice);
 8008148:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 800814c:	4a91      	ldr	r2, [pc, #580]	; (8008394 <Process_Send_Signals_2_MIE+0x30c>)
 800814e:	5cd3      	ldrb	r3, [r2, r3]
 8008150:	2b01      	cmp	r3, #1
 8008152:	d106      	bne.n	8008162 <Process_Send_Signals_2_MIE+0xda>
 8008154:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8008158:	f043 0302 	orr.w	r3, r3, #2
 800815c:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8008160:	e005      	b.n	800816e <Process_Send_Signals_2_MIE+0xe6>
 8008162:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8008166:	f023 0302 	bic.w	r3, r3, #2
 800816a:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4

			switch(Choice)
 800816e:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8008172:	2b01      	cmp	r3, #1
 8008174:	d005      	beq.n	8008182 <Process_Send_Signals_2_MIE+0xfa>
 8008176:	2b00      	cmp	r3, #0
 8008178:	dd41      	ble.n	80081fe <Process_Send_Signals_2_MIE+0x176>
 800817a:	3b02      	subs	r3, #2
 800817c:	2b01      	cmp	r3, #1
 800817e:	d83e      	bhi.n	80081fe <Process_Send_Signals_2_MIE+0x176>
 8008180:	e01e      	b.n	80081c0 <Process_Send_Signals_2_MIE+0x138>
			{
			case ONE:
				//				printf("\nOtherCard SET\n");
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],OtherCard_Relays_st[Traverser].RelayIPS_Buff,MAX_OUTPUTS_PER_PEER);
 8008182:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008186:	011b      	lsls	r3, r3, #4
 8008188:	4a80      	ldr	r2, [pc, #512]	; (800838c <Process_Send_Signals_2_MIE+0x304>)
 800818a:	4413      	add	r3, r2
 800818c:	1c98      	adds	r0, r3, #2
 800818e:	f897 20b5 	ldrb.w	r2, [r7, #181]	; 0xb5
 8008192:	4613      	mov	r3, r2
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	4413      	add	r3, r2
 8008198:	009b      	lsls	r3, r3, #2
 800819a:	4a7f      	ldr	r2, [pc, #508]	; (8008398 <Process_Send_Signals_2_MIE+0x310>)
 800819c:	4413      	add	r3, r2
 800819e:	3301      	adds	r3, #1
 80081a0:	2210      	movs	r2, #16
 80081a2:	4619      	mov	r1, r3
 80081a4:	f01a fb9a 	bl	80228dc <memcpy>
				CLEAR_BIT(Traverser,EI_HealthStatus); /* For Sending to MIE */
 80081a8:	4b7c      	ldr	r3, [pc, #496]	; (800839c <Process_Send_Signals_2_MIE+0x314>)
 80081aa:	881b      	ldrh	r3, [r3, #0]
 80081ac:	b25b      	sxtb	r3, r3
 80081ae:	43db      	mvns	r3, r3
 80081b0:	b25a      	sxtb	r2, r3
 80081b2:	f997 30b5 	ldrsb.w	r3, [r7, #181]	; 0xb5
 80081b6:	4013      	ands	r3, r2
 80081b8:	b25b      	sxtb	r3, r3
 80081ba:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
				break;
 80081be:	e031      	b.n	8008224 <Process_Send_Signals_2_MIE+0x19c>
			case TWO:
				//				printf("\nBothCard SET2\n");
			case THREE:
				//				printf("\nBothCard SET3\n");
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Traverser].RelayIPS_Buff,MAX_OUTPUTS_PER_PEER);
 80081c0:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 80081c4:	011b      	lsls	r3, r3, #4
 80081c6:	4a71      	ldr	r2, [pc, #452]	; (800838c <Process_Send_Signals_2_MIE+0x304>)
 80081c8:	4413      	add	r3, r2
 80081ca:	1c98      	adds	r0, r3, #2
 80081cc:	f897 20b5 	ldrb.w	r2, [r7, #181]	; 0xb5
 80081d0:	4613      	mov	r3, r2
 80081d2:	009b      	lsls	r3, r3, #2
 80081d4:	4413      	add	r3, r2
 80081d6:	009b      	lsls	r3, r3, #2
 80081d8:	4a71      	ldr	r2, [pc, #452]	; (80083a0 <Process_Send_Signals_2_MIE+0x318>)
 80081da:	4413      	add	r3, r2
 80081dc:	3301      	adds	r3, #1
 80081de:	2210      	movs	r2, #16
 80081e0:	4619      	mov	r1, r3
 80081e2:	f01a fb7b 	bl	80228dc <memcpy>
				CLEAR_BIT(Traverser,EI_HealthStatus); /* For Sending to MIE */
 80081e6:	4b6d      	ldr	r3, [pc, #436]	; (800839c <Process_Send_Signals_2_MIE+0x314>)
 80081e8:	881b      	ldrh	r3, [r3, #0]
 80081ea:	b25b      	sxtb	r3, r3
 80081ec:	43db      	mvns	r3, r3
 80081ee:	b25a      	sxtb	r2, r3
 80081f0:	f997 30b5 	ldrsb.w	r3, [r7, #181]	; 0xb5
 80081f4:	4013      	ands	r3, r2
 80081f6:	b25b      	sxtb	r3, r3
 80081f8:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
				break;
 80081fc:	e012      	b.n	8008224 <Process_Send_Signals_2_MIE+0x19c>

			default:
				memset(&vEI_Transver_EI_To_MIE.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],0,MAX_OUTPUTS_PER_PEER);
 80081fe:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008202:	011b      	lsls	r3, r3, #4
 8008204:	4a61      	ldr	r2, [pc, #388]	; (800838c <Process_Send_Signals_2_MIE+0x304>)
 8008206:	4413      	add	r3, r2
 8008208:	3302      	adds	r3, #2
 800820a:	2210      	movs	r2, #16
 800820c:	2100      	movs	r1, #0
 800820e:	4618      	mov	r0, r3
 8008210:	f01a fb8c 	bl	802292c <memset>
				SET_BIT(Traverser,EI_HealthStatus); /* For Sending to MIE */
 8008214:	4b61      	ldr	r3, [pc, #388]	; (800839c <Process_Send_Signals_2_MIE+0x314>)
 8008216:	881b      	ldrh	r3, [r3, #0]
 8008218:	b2da      	uxtb	r2, r3
 800821a:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 800821e:	4313      	orrs	r3, r2
 8008220:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
		for(Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008224:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008228:	3301      	adds	r3, #1
 800822a:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
 800822e:	4b52      	ldr	r3, [pc, #328]	; (8008378 <Process_Send_Signals_2_MIE+0x2f0>)
 8008230:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008234:	f897 20b5 	ldrb.w	r2, [r7, #181]	; 0xb5
 8008238:	429a      	cmp	r2, r3
 800823a:	f4ff af4a 	bcc.w	80080d2 <Process_Send_Signals_2_MIE+0x4a>
			}
		}


		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 800823e:	4950      	ldr	r1, [pc, #320]	; (8008380 <Process_Send_Signals_2_MIE+0x2f8>)
 8008240:	4850      	ldr	r0, [pc, #320]	; (8008384 <Process_Send_Signals_2_MIE+0x2fc>)
 8008242:	f7f7 fffd 	bl	8000240 <strcmp>
 8008246:	4603      	mov	r3, r0
 8008248:	2b00      	cmp	r3, #0
 800824a:	d102      	bne.n	8008252 <Process_Send_Signals_2_MIE+0x1ca>
		{
			Is_CAN_Exchange_happening = YES;
 800824c:	4b55      	ldr	r3, [pc, #340]	; (80083a4 <Process_Send_Signals_2_MIE+0x31c>)
 800824e:	2201      	movs	r2, #1
 8008250:	701a      	strb	r2, [r3, #0]
		}

		if(Is_CAN_Exchange_happening == NO)
 8008252:	4b54      	ldr	r3, [pc, #336]	; (80083a4 <Process_Send_Signals_2_MIE+0x31c>)
 8008254:	781b      	ldrb	r3, [r3, #0]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d10a      	bne.n	8008270 <Process_Send_Signals_2_MIE+0x1e8>
		{
			printf("CAN Packet Not Receiving from EIPC1\n");
 800825a:	4853      	ldr	r0, [pc, #332]	; (80083a8 <Process_Send_Signals_2_MIE+0x320>)
 800825c:	f01a fcea 	bl	8022c34 <puts>
			printf("Sending Blank Relay statuses\n");
 8008260:	4852      	ldr	r0, [pc, #328]	; (80083ac <Process_Send_Signals_2_MIE+0x324>)
 8008262:	f01a fce7 	bl	8022c34 <puts>
			memset(&vEI_Transver_EI_To_MIE,0,sizeof(vEI_Transver_EI_To_MIE));
 8008266:	22a2      	movs	r2, #162	; 0xa2
 8008268:	2100      	movs	r1, #0
 800826a:	4848      	ldr	r0, [pc, #288]	; (800838c <Process_Send_Signals_2_MIE+0x304>)
 800826c:	f01a fb5e 	bl	802292c <memset>
		}


		if(Debug_flag == 1)
 8008270:	4b4f      	ldr	r3, [pc, #316]	; (80083b0 <Process_Send_Signals_2_MIE+0x328>)
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	2b01      	cmp	r3, #1
 8008276:	d133      	bne.n	80082e0 <Process_Send_Signals_2_MIE+0x258>
		{
			Get_time();
 8008278:	f003 f9c0 	bl	800b5fc <Get_time>
			//		printf("\n_________________________________________\n");
			printf("Data Sending 2 MIE T:%02u:%02u:%02u\n",RTC_Date_time_Dec_st.Hour,RTC_Date_time_Dec_st.Mins,RTC_Date_time_Dec_st.Secs);
 800827c:	4b4d      	ldr	r3, [pc, #308]	; (80083b4 <Process_Send_Signals_2_MIE+0x32c>)
 800827e:	781b      	ldrb	r3, [r3, #0]
 8008280:	4619      	mov	r1, r3
 8008282:	4b4c      	ldr	r3, [pc, #304]	; (80083b4 <Process_Send_Signals_2_MIE+0x32c>)
 8008284:	785b      	ldrb	r3, [r3, #1]
 8008286:	461a      	mov	r2, r3
 8008288:	4b4a      	ldr	r3, [pc, #296]	; (80083b4 <Process_Send_Signals_2_MIE+0x32c>)
 800828a:	789b      	ldrb	r3, [r3, #2]
 800828c:	484a      	ldr	r0, [pc, #296]	; (80083b8 <Process_Send_Signals_2_MIE+0x330>)
 800828e:	f01a fc35 	bl	8022afc <iprintf>
			//		for(uint16_t Byte = 0; Byte<Num_of_Bytes;++Byte )
			for(uint16_t Byte = 0; Byte<(EI_data.Hitachi_st.PeersCnt * MAX_OUTPUTS_PER_PEER);++Byte )
 8008292:	2300      	movs	r3, #0
 8008294:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 8008298:	e017      	b.n	80082ca <Process_Send_Signals_2_MIE+0x242>

			{
				printf("%02X ",vEI_Transver_EI_To_MIE.Inputs[Byte]);
 800829a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800829e:	4a3b      	ldr	r2, [pc, #236]	; (800838c <Process_Send_Signals_2_MIE+0x304>)
 80082a0:	4413      	add	r3, r2
 80082a2:	789b      	ldrb	r3, [r3, #2]
 80082a4:	4619      	mov	r1, r3
 80082a6:	4845      	ldr	r0, [pc, #276]	; (80083bc <Process_Send_Signals_2_MIE+0x334>)
 80082a8:	f01a fc28 	bl	8022afc <iprintf>
				if(((Byte+1)%16)==0)
 80082ac:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80082b0:	3301      	adds	r3, #1
 80082b2:	f003 030f 	and.w	r3, r3, #15
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d102      	bne.n	80082c0 <Process_Send_Signals_2_MIE+0x238>
				{
					printf("\n");
 80082ba:	200a      	movs	r0, #10
 80082bc:	f01a fc36 	bl	8022b2c <putchar>
			for(uint16_t Byte = 0; Byte<(EI_data.Hitachi_st.PeersCnt * MAX_OUTPUTS_PER_PEER);++Byte )
 80082c0:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80082c4:	3301      	adds	r3, #1
 80082c6:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 80082ca:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	; 0xb2
 80082ce:	4b2a      	ldr	r3, [pc, #168]	; (8008378 <Process_Send_Signals_2_MIE+0x2f0>)
 80082d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80082d4:	011b      	lsls	r3, r3, #4
 80082d6:	429a      	cmp	r2, r3
 80082d8:	dbdf      	blt.n	800829a <Process_Send_Signals_2_MIE+0x212>
				}
			}
			printf("\n");
 80082da:	200a      	movs	r0, #10
 80082dc:	f01a fc26 	bl	8022b2c <putchar>
			//		printf("\n_________________________________________\n");
		}
		TransmitCanPkt(EI_PROCESS_DATA);
 80082e0:	f240 1019 	movw	r0, #281	; 0x119
 80082e4:	f007 fbd0 	bl	800fa88 <TransmitCanPkt>


		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 80082e8:	4925      	ldr	r1, [pc, #148]	; (8008380 <Process_Send_Signals_2_MIE+0x2f8>)
 80082ea:	4826      	ldr	r0, [pc, #152]	; (8008384 <Process_Send_Signals_2_MIE+0x2fc>)
 80082ec:	f7f7 ffa8 	bl	8000240 <strcmp>
 80082f0:	4603      	mov	r3, r0
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	f040 8130 	bne.w	8008558 <Process_Send_Signals_2_MIE+0x4d0>
		{
			if(HAL_Elaps_Ticks(send_signals_serial_Clk) >= TWO_SEC )
 80082f8:	4b31      	ldr	r3, [pc, #196]	; (80083c0 <Process_Send_Signals_2_MIE+0x338>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4618      	mov	r0, r3
 80082fe:	f006 fe09 	bl	800ef14 <HAL_Elaps_Ticks>
 8008302:	4603      	mov	r3, r0
 8008304:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008308:	f0c0 80a8 	bcc.w	800845c <Process_Send_Signals_2_MIE+0x3d4>
			{
				memcpy(Prev_Buff,&vEI_Transver_EI_To_MIE.Inputs[0],sizeof(Prev_Buff));
 800830c:	4a2d      	ldr	r2, [pc, #180]	; (80083c4 <Process_Send_Signals_2_MIE+0x33c>)
 800830e:	4b1f      	ldr	r3, [pc, #124]	; (800838c <Process_Send_Signals_2_MIE+0x304>)
 8008310:	4610      	mov	r0, r2
 8008312:	3302      	adds	r3, #2
 8008314:	22a0      	movs	r2, #160	; 0xa0
 8008316:	4619      	mov	r1, r3
 8008318:	f01a fae0 	bl	80228dc <memcpy>
				Serial_Byte = 0;
 800831c:	2300      	movs	r3, #0
 800831e:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
				Serial_Send_Buffer[Serial_Byte++] = 0x7E;
 8008322:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008326:	1c5a      	adds	r2, r3, #1
 8008328:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 800832c:	33b8      	adds	r3, #184	; 0xb8
 800832e:	443b      	add	r3, r7
 8008330:	227e      	movs	r2, #126	; 0x7e
 8008332:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7E;
 8008336:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800833a:	1c5a      	adds	r2, r3, #1
 800833c:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008340:	33b8      	adds	r3, #184	; 0xb8
 8008342:	443b      	add	r3, r7
 8008344:	227e      	movs	r2, #126	; 0x7e
 8008346:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7E;
 800834a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800834e:	1c5a      	adds	r2, r3, #1
 8008350:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008354:	33b8      	adds	r3, #184	; 0xb8
 8008356:	443b      	add	r3, r7
 8008358:	227e      	movs	r2, #126	; 0x7e
 800835a:	f803 2cb4 	strb.w	r2, [r3, #-180]
				if(Debug_flag == 1)
 800835e:	4b14      	ldr	r3, [pc, #80]	; (80083b0 <Process_Send_Signals_2_MIE+0x328>)
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	2b01      	cmp	r3, #1
 8008364:	d102      	bne.n	800836c <Process_Send_Signals_2_MIE+0x2e4>
				{
					printf("Sending Signals over Ethernet:\n");
 8008366:	4818      	ldr	r0, [pc, #96]	; (80083c8 <Process_Send_Signals_2_MIE+0x340>)
 8008368:	f01a fc64 	bl	8022c34 <puts>
				}
				for(uint16_t Byte = 0;Byte<(vEI_Transver_EI_To_MIE.ActualDataBytes);++Byte)
 800836c:	2300      	movs	r3, #0
 800836e:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
 8008372:	e040      	b.n	80083f6 <Process_Send_Signals_2_MIE+0x36e>
 8008374:	20000e7c 	.word	0x20000e7c
 8008378:	20000304 	.word	0x20000304
 800837c:	20000ed0 	.word	0x20000ed0
 8008380:	080242c0 	.word	0x080242c0
 8008384:	20000305 	.word	0x20000305
 8008388:	08025190 	.word	0x08025190
 800838c:	200010f0 	.word	0x200010f0
 8008390:	20000f7c 	.word	0x20000f7c
 8008394:	20000f70 	.word	0x20000f70
 8008398:	20001f54 	.word	0x20001f54
 800839c:	20000e3a 	.word	0x20000e3a
 80083a0:	20001e8c 	.word	0x20001e8c
 80083a4:	20000108 	.word	0x20000108
 80083a8:	080251a4 	.word	0x080251a4
 80083ac:	080251c8 	.word	0x080251c8
 80083b0:	20000645 	.word	0x20000645
 80083b4:	20002894 	.word	0x20002894
 80083b8:	080251e8 	.word	0x080251e8
 80083bc:	08025210 	.word	0x08025210
 80083c0:	20002088 	.word	0x20002088
 80083c4:	2000208c 	.word	0x2000208c
 80083c8:	08025218 	.word	0x08025218
				{
					Serial_Send_Buffer[Serial_Byte++] = vEI_Transver_EI_To_MIE.Inputs[Byte];
 80083cc:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 80083d0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80083d4:	1c59      	adds	r1, r3, #1
 80083d6:	f8a7 10b6 	strh.w	r1, [r7, #182]	; 0xb6
 80083da:	4619      	mov	r1, r3
 80083dc:	4b64      	ldr	r3, [pc, #400]	; (8008570 <Process_Send_Signals_2_MIE+0x4e8>)
 80083de:	4413      	add	r3, r2
 80083e0:	789a      	ldrb	r2, [r3, #2]
 80083e2:	f101 03b8 	add.w	r3, r1, #184	; 0xb8
 80083e6:	443b      	add	r3, r7
 80083e8:	f803 2cb4 	strb.w	r2, [r3, #-180]
				for(uint16_t Byte = 0;Byte<(vEI_Transver_EI_To_MIE.ActualDataBytes);++Byte)
 80083ec:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 80083f0:	3301      	adds	r3, #1
 80083f2:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
 80083f6:	4b5e      	ldr	r3, [pc, #376]	; (8008570 <Process_Send_Signals_2_MIE+0x4e8>)
 80083f8:	881b      	ldrh	r3, [r3, #0]
 80083fa:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 80083fe:	429a      	cmp	r2, r3
 8008400:	d3e4      	bcc.n	80083cc <Process_Send_Signals_2_MIE+0x344>
				}
				Serial_Send_Buffer[Serial_Byte++] = 0x7F;
 8008402:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008406:	1c5a      	adds	r2, r3, #1
 8008408:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 800840c:	33b8      	adds	r3, #184	; 0xb8
 800840e:	443b      	add	r3, r7
 8008410:	227f      	movs	r2, #127	; 0x7f
 8008412:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7F;
 8008416:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800841a:	1c5a      	adds	r2, r3, #1
 800841c:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008420:	33b8      	adds	r3, #184	; 0xb8
 8008422:	443b      	add	r3, r7
 8008424:	227f      	movs	r2, #127	; 0x7f
 8008426:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7F;
 800842a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800842e:	1c5a      	adds	r2, r3, #1
 8008430:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008434:	33b8      	adds	r3, #184	; 0xb8
 8008436:	443b      	add	r3, r7
 8008438:	227f      	movs	r2, #127	; 0x7f
 800843a:	f803 2cb4 	strb.w	r2, [r3, #-180]

				Udp_Send_SigInfo(Serial_Send_Buffer, Serial_Byte, Recv_IP_List[0]);
 800843e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008442:	b2d9      	uxtb	r1, r3
 8008444:	4a4b      	ldr	r2, [pc, #300]	; (8008574 <Process_Send_Signals_2_MIE+0x4ec>)
 8008446:	1d3b      	adds	r3, r7, #4
 8008448:	6812      	ldr	r2, [r2, #0]
 800844a:	4618      	mov	r0, r3
 800844c:	f007 f95a 	bl	800f704 <Udp_Send_SigInfo>
				send_signals_serial_Clk = HAL_GetTick();
 8008450:	f00d fb4a 	bl	8015ae8 <HAL_GetTick>
 8008454:	4603      	mov	r3, r0
 8008456:	4a48      	ldr	r2, [pc, #288]	; (8008578 <Process_Send_Signals_2_MIE+0x4f0>)
 8008458:	6013      	str	r3, [r2, #0]
 800845a:	e07d      	b.n	8008558 <Process_Send_Signals_2_MIE+0x4d0>
			}
			else if(memcmp(Prev_Buff,&vEI_Transver_EI_To_MIE.Inputs[0],sizeof(Prev_Buff)) != 0)
 800845c:	22a0      	movs	r2, #160	; 0xa0
 800845e:	4947      	ldr	r1, [pc, #284]	; (800857c <Process_Send_Signals_2_MIE+0x4f4>)
 8008460:	4847      	ldr	r0, [pc, #284]	; (8008580 <Process_Send_Signals_2_MIE+0x4f8>)
 8008462:	f01a fa2b 	bl	80228bc <memcmp>
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	d075      	beq.n	8008558 <Process_Send_Signals_2_MIE+0x4d0>
			{
				memcpy(Prev_Buff,&vEI_Transver_EI_To_MIE.Inputs[0],sizeof(Prev_Buff));
 800846c:	4a44      	ldr	r2, [pc, #272]	; (8008580 <Process_Send_Signals_2_MIE+0x4f8>)
 800846e:	4b40      	ldr	r3, [pc, #256]	; (8008570 <Process_Send_Signals_2_MIE+0x4e8>)
 8008470:	4610      	mov	r0, r2
 8008472:	3302      	adds	r3, #2
 8008474:	22a0      	movs	r2, #160	; 0xa0
 8008476:	4619      	mov	r1, r3
 8008478:	f01a fa30 	bl	80228dc <memcpy>
				Serial_Byte = 0;
 800847c:	2300      	movs	r3, #0
 800847e:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
				Serial_Send_Buffer[Serial_Byte++] = 0x7E;
 8008482:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008486:	1c5a      	adds	r2, r3, #1
 8008488:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 800848c:	33b8      	adds	r3, #184	; 0xb8
 800848e:	443b      	add	r3, r7
 8008490:	227e      	movs	r2, #126	; 0x7e
 8008492:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7E;
 8008496:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800849a:	1c5a      	adds	r2, r3, #1
 800849c:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 80084a0:	33b8      	adds	r3, #184	; 0xb8
 80084a2:	443b      	add	r3, r7
 80084a4:	227e      	movs	r2, #126	; 0x7e
 80084a6:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7E;
 80084aa:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80084ae:	1c5a      	adds	r2, r3, #1
 80084b0:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 80084b4:	33b8      	adds	r3, #184	; 0xb8
 80084b6:	443b      	add	r3, r7
 80084b8:	227e      	movs	r2, #126	; 0x7e
 80084ba:	f803 2cb4 	strb.w	r2, [r3, #-180]
				if(Debug_flag == 1)
 80084be:	4b31      	ldr	r3, [pc, #196]	; (8008584 <Process_Send_Signals_2_MIE+0x4fc>)
 80084c0:	781b      	ldrb	r3, [r3, #0]
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	d102      	bne.n	80084cc <Process_Send_Signals_2_MIE+0x444>
				{
					printf("Sending Signals over Ethernet:\n");
 80084c6:	4830      	ldr	r0, [pc, #192]	; (8008588 <Process_Send_Signals_2_MIE+0x500>)
 80084c8:	f01a fbb4 	bl	8022c34 <puts>
				}
				for(uint16_t Byte = 0;Byte<(vEI_Transver_EI_To_MIE.ActualDataBytes);++Byte)
 80084cc:	2300      	movs	r3, #0
 80084ce:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 80084d2:	e014      	b.n	80084fe <Process_Send_Signals_2_MIE+0x476>
				{
					Serial_Send_Buffer[Serial_Byte++] = vEI_Transver_EI_To_MIE.Inputs[Byte];
 80084d4:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 80084d8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80084dc:	1c59      	adds	r1, r3, #1
 80084de:	f8a7 10b6 	strh.w	r1, [r7, #182]	; 0xb6
 80084e2:	4619      	mov	r1, r3
 80084e4:	4b22      	ldr	r3, [pc, #136]	; (8008570 <Process_Send_Signals_2_MIE+0x4e8>)
 80084e6:	4413      	add	r3, r2
 80084e8:	789a      	ldrb	r2, [r3, #2]
 80084ea:	f101 03b8 	add.w	r3, r1, #184	; 0xb8
 80084ee:	443b      	add	r3, r7
 80084f0:	f803 2cb4 	strb.w	r2, [r3, #-180]
				for(uint16_t Byte = 0;Byte<(vEI_Transver_EI_To_MIE.ActualDataBytes);++Byte)
 80084f4:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80084f8:	3301      	adds	r3, #1
 80084fa:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 80084fe:	4b1c      	ldr	r3, [pc, #112]	; (8008570 <Process_Send_Signals_2_MIE+0x4e8>)
 8008500:	881b      	ldrh	r3, [r3, #0]
 8008502:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 8008506:	429a      	cmp	r2, r3
 8008508:	d3e4      	bcc.n	80084d4 <Process_Send_Signals_2_MIE+0x44c>
				}
				Serial_Send_Buffer[Serial_Byte++] = 0x7F;
 800850a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800850e:	1c5a      	adds	r2, r3, #1
 8008510:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008514:	33b8      	adds	r3, #184	; 0xb8
 8008516:	443b      	add	r3, r7
 8008518:	227f      	movs	r2, #127	; 0x7f
 800851a:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7F;
 800851e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008522:	1c5a      	adds	r2, r3, #1
 8008524:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008528:	33b8      	adds	r3, #184	; 0xb8
 800852a:	443b      	add	r3, r7
 800852c:	227f      	movs	r2, #127	; 0x7f
 800852e:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7F;
 8008532:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008536:	1c5a      	adds	r2, r3, #1
 8008538:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 800853c:	33b8      	adds	r3, #184	; 0xb8
 800853e:	443b      	add	r3, r7
 8008540:	227f      	movs	r2, #127	; 0x7f
 8008542:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Udp_Send_SigInfo(Serial_Send_Buffer, Serial_Byte, Recv_IP_List[0]);
 8008546:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800854a:	b2d9      	uxtb	r1, r3
 800854c:	4a09      	ldr	r2, [pc, #36]	; (8008574 <Process_Send_Signals_2_MIE+0x4ec>)
 800854e:	1d3b      	adds	r3, r7, #4
 8008550:	6812      	ldr	r2, [r2, #0]
 8008552:	4618      	mov	r0, r3
 8008554:	f007 f8d6 	bl	800f704 <Udp_Send_SigInfo>
			}

		}


		SendCombineHealth();
 8008558:	f7f8 fcf8 	bl	8000f4c <SendCombineHealth>
			}
			printf("\n");
		}

#endif
		MIE_Signal_Send_CLK = HAL_GetTick();
 800855c:	f00d fac4 	bl	8015ae8 <HAL_GetTick>
 8008560:	4603      	mov	r3, r0
 8008562:	4a0a      	ldr	r2, [pc, #40]	; (800858c <Process_Send_Signals_2_MIE+0x504>)
 8008564:	6013      	str	r3, [r2, #0]
		UNUSED(Choice);
	}
}
 8008566:	bf00      	nop
 8008568:	37b8      	adds	r7, #184	; 0xb8
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}
 800856e:	bf00      	nop
 8008570:	200010f0 	.word	0x200010f0
 8008574:	20001064 	.word	0x20001064
 8008578:	20002088 	.word	0x20002088
 800857c:	200010f2 	.word	0x200010f2
 8008580:	2000208c 	.word	0x2000208c
 8008584:	20000645 	.word	0x20000645
 8008588:	08025218 	.word	0x08025218
 800858c:	20000e7c 	.word	0x20000e7c

08008590 <Print_EI_DATA>:
	Display("\n___________________________________________________\n");
}
#endif

void Print_EI_DATA(uint8_t *Msg,uint8_t Msg_Status,uint8_t Length)
{
 8008590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008592:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 8008596:	af04      	add	r7, sp, #16
 8008598:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800859c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80085a0:	6018      	str	r0, [r3, #0]
 80085a2:	4608      	mov	r0, r1
 80085a4:	4611      	mov	r1, r2
 80085a6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80085aa:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 80085ae:	4602      	mov	r2, r0
 80085b0:	701a      	strb	r2, [r3, #0]
 80085b2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80085b6:	f2a3 230e 	subw	r3, r3, #526	; 0x20e
 80085ba:	460a      	mov	r2, r1
 80085bc:	701a      	strb	r2, [r3, #0]
	char Print_buff[512] = {0,};
 80085be:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80085c2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80085c6:	2200      	movs	r2, #0
 80085c8:	601a      	str	r2, [r3, #0]
 80085ca:	3304      	adds	r3, #4
 80085cc:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 80085d0:	2100      	movs	r1, #0
 80085d2:	4618      	mov	r0, r3
 80085d4:	f01a f9aa 	bl	802292c <memset>
	uint8_t Msg_type;
	uint16_t Msg_status_flag;
	uint8_t Traverser = 0;
 80085d8:	2300      	movs	r3, #0
 80085da:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f

	//	Display("\n________________________________________MSG DETAILS________________________________________\n");
	//Display("\nMSG STATUS:");

	Msg_Status?Display("\nR|"):Display("\nX|");
 80085de:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80085e2:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d003      	beq.n	80085f4 <Print_EI_DATA+0x64>
 80085ec:	48a8      	ldr	r0, [pc, #672]	; (8008890 <Print_EI_DATA+0x300>)
 80085ee:	f000 f975 	bl	80088dc <Display>
 80085f2:	e002      	b.n	80085fa <Print_EI_DATA+0x6a>
 80085f4:	48a7      	ldr	r0, [pc, #668]	; (8008894 <Print_EI_DATA+0x304>)
 80085f6:	f000 f971 	bl	80088dc <Display>

	//sprintf(Print_buff,"D_ADDR: %04lX  |",ExtractBits(0,16,&Msg[1]));
	sprintf(Print_buff,"DA:%lu|",ExtractBits(0,16,&Msg[1]));
 80085fa:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80085fe:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	3301      	adds	r3, #1
 8008606:	461a      	mov	r2, r3
 8008608:	2110      	movs	r1, #16
 800860a:	2000      	movs	r0, #0
 800860c:	f7f8 f802 	bl	8000614 <ExtractBits>
 8008610:	4602      	mov	r2, r0
 8008612:	f107 030c 	add.w	r3, r7, #12
 8008616:	49a0      	ldr	r1, [pc, #640]	; (8008898 <Print_EI_DATA+0x308>)
 8008618:	4618      	mov	r0, r3
 800861a:	f01a fc27 	bl	8022e6c <siprintf>
	Display(Print_buff);
 800861e:	f107 030c 	add.w	r3, r7, #12
 8008622:	4618      	mov	r0, r3
 8008624:	f000 f95a 	bl	80088dc <Display>

	//sprintf(Print_buff,"S_ADDR: %04lX|\n",ExtractBits(0,16,&Msg[3]));
	sprintf(Print_buff,"SA:%lu|",ExtractBits(0,16,&Msg[3]));
 8008628:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800862c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	3303      	adds	r3, #3
 8008634:	461a      	mov	r2, r3
 8008636:	2110      	movs	r1, #16
 8008638:	2000      	movs	r0, #0
 800863a:	f7f7 ffeb 	bl	8000614 <ExtractBits>
 800863e:	4602      	mov	r2, r0
 8008640:	f107 030c 	add.w	r3, r7, #12
 8008644:	4995      	ldr	r1, [pc, #596]	; (800889c <Print_EI_DATA+0x30c>)
 8008646:	4618      	mov	r0, r3
 8008648:	f01a fc10 	bl	8022e6c <siprintf>
	Display(Print_buff);
 800864c:	f107 030c 	add.w	r3, r7, #12
 8008650:	4618      	mov	r0, r3
 8008652:	f000 f943 	bl	80088dc <Display>

	Msg_type = ExtractBits(0,8,&Msg[7]);
 8008656:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800865a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	3307      	adds	r3, #7
 8008662:	461a      	mov	r2, r3
 8008664:	2108      	movs	r1, #8
 8008666:	2000      	movs	r0, #0
 8008668:	f7f7 ffd4 	bl	8000614 <ExtractBits>
 800866c:	4603      	mov	r3, r0
 800866e:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
	Display("MT:");
 8008672:	488b      	ldr	r0, [pc, #556]	; (80088a0 <Print_EI_DATA+0x310>)
 8008674:	f000 f932 	bl	80088dc <Display>
	switch(Msg_type)
 8008678:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 800867c:	3b01      	subs	r3, #1
 800867e:	2b05      	cmp	r3, #5
 8008680:	d829      	bhi.n	80086d6 <Print_EI_DATA+0x146>
 8008682:	a201      	add	r2, pc, #4	; (adr r2, 8008688 <Print_EI_DATA+0xf8>)
 8008684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008688:	080086a1 	.word	0x080086a1
 800868c:	080086bf 	.word	0x080086bf
 8008690:	080086d7 	.word	0x080086d7
 8008694:	080086c7 	.word	0x080086c7
 8008698:	080086d7 	.word	0x080086d7
 800869c:	080086cf 	.word	0x080086cf
	{
	case 1:
		Msg_Status?Display("INIT_R"):Display("INIT_X");
 80086a0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80086a4:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 80086a8:	781b      	ldrb	r3, [r3, #0]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d003      	beq.n	80086b6 <Print_EI_DATA+0x126>
 80086ae:	487d      	ldr	r0, [pc, #500]	; (80088a4 <Print_EI_DATA+0x314>)
 80086b0:	f000 f914 	bl	80088dc <Display>
		//Display("INIT     ");
		break;
 80086b4:	e012      	b.n	80086dc <Print_EI_DATA+0x14c>
		Msg_Status?Display("INIT_R"):Display("INIT_X");
 80086b6:	487c      	ldr	r0, [pc, #496]	; (80088a8 <Print_EI_DATA+0x318>)
 80086b8:	f000 f910 	bl	80088dc <Display>
		break;
 80086bc:	e00e      	b.n	80086dc <Print_EI_DATA+0x14c>
	case 2:
		Display("VIT");
 80086be:	487b      	ldr	r0, [pc, #492]	; (80088ac <Print_EI_DATA+0x31c>)
 80086c0:	f000 f90c 	bl	80088dc <Display>
		break;
 80086c4:	e00a      	b.n	80086dc <Print_EI_DATA+0x14c>
	case 4:
		Display("STS");
 80086c6:	487a      	ldr	r0, [pc, #488]	; (80088b0 <Print_EI_DATA+0x320>)
 80086c8:	f000 f908 	bl	80088dc <Display>
		break;
 80086cc:	e006      	b.n	80086dc <Print_EI_DATA+0x14c>
	case 6:
		Display("SER");
 80086ce:	4879      	ldr	r0, [pc, #484]	; (80088b4 <Print_EI_DATA+0x324>)
 80086d0:	f000 f904 	bl	80088dc <Display>
		break;
 80086d4:	e002      	b.n	80086dc <Print_EI_DATA+0x14c>
	default:
		Display("UNKNOWN MESSAGE\n");
 80086d6:	4878      	ldr	r0, [pc, #480]	; (80088b8 <Print_EI_DATA+0x328>)
 80086d8:	f000 f900 	bl	80088dc <Display>
	}
	Display("|");
 80086dc:	4877      	ldr	r0, [pc, #476]	; (80088bc <Print_EI_DATA+0x32c>)
 80086de:	f000 f8fd 	bl	80088dc <Display>

	sprintf(Print_buff,"TX:%02lX|",ExtractBits(0,8,&Msg[5]));
 80086e2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80086e6:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	3305      	adds	r3, #5
 80086ee:	461a      	mov	r2, r3
 80086f0:	2108      	movs	r1, #8
 80086f2:	2000      	movs	r0, #0
 80086f4:	f7f7 ff8e 	bl	8000614 <ExtractBits>
 80086f8:	4602      	mov	r2, r0
 80086fa:	f107 030c 	add.w	r3, r7, #12
 80086fe:	4970      	ldr	r1, [pc, #448]	; (80088c0 <Print_EI_DATA+0x330>)
 8008700:	4618      	mov	r0, r3
 8008702:	f01a fbb3 	bl	8022e6c <siprintf>
	Display(Print_buff);
 8008706:	f107 030c 	add.w	r3, r7, #12
 800870a:	4618      	mov	r0, r3
 800870c:	f000 f8e6 	bl	80088dc <Display>

	sprintf(Print_buff,"RX:%02lX|",ExtractBits(0,8,&Msg[6]));
 8008710:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008714:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	3306      	adds	r3, #6
 800871c:	461a      	mov	r2, r3
 800871e:	2108      	movs	r1, #8
 8008720:	2000      	movs	r0, #0
 8008722:	f7f7 ff77 	bl	8000614 <ExtractBits>
 8008726:	4602      	mov	r2, r0
 8008728:	f107 030c 	add.w	r3, r7, #12
 800872c:	4965      	ldr	r1, [pc, #404]	; (80088c4 <Print_EI_DATA+0x334>)
 800872e:	4618      	mov	r0, r3
 8008730:	f01a fb9c 	bl	8022e6c <siprintf>
	Display(Print_buff);
 8008734:	f107 030c 	add.w	r3, r7, #12
 8008738:	4618      	mov	r0, r3
 800873a:	f000 f8cf 	bl	80088dc <Display>

	Msg_status_flag = ExtractBits(0,16,&Msg[8]);
 800873e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008742:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	3308      	adds	r3, #8
 800874a:	461a      	mov	r2, r3
 800874c:	2110      	movs	r1, #16
 800874e:	2000      	movs	r0, #0
 8008750:	f7f7 ff60 	bl	8000614 <ExtractBits>
 8008754:	4603      	mov	r3, r0
 8008756:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
	sprintf(Print_buff,"MSF:%04X|",Msg_status_flag);
 800875a:	f8b7 220c 	ldrh.w	r2, [r7, #524]	; 0x20c
 800875e:	f107 030c 	add.w	r3, r7, #12
 8008762:	4959      	ldr	r1, [pc, #356]	; (80088c8 <Print_EI_DATA+0x338>)
 8008764:	4618      	mov	r0, r3
 8008766:	f01a fb81 	bl	8022e6c <siprintf>
	Display(Print_buff);
 800876a:	f107 030c 	add.w	r3, r7, #12
 800876e:	4618      	mov	r0, r3
 8008770:	f000 f8b4 	bl	80088dc <Display>
	if( ((Msg_status_flag >> 5)&1) == 1)
 8008774:	f8b7 320c 	ldrh.w	r3, [r7, #524]	; 0x20c
 8008778:	095b      	lsrs	r3, r3, #5
 800877a:	b29b      	uxth	r3, r3
 800877c:	f003 0301 	and.w	r3, r3, #1
 8008780:	2b00      	cmp	r3, #0
 8008782:	d03f      	beq.n	8008804 <Print_EI_DATA+0x274>
	{
		sprintf(Print_buff,"DT:%02X%02X%02X|T:%02X:%02X:%02X\n",Msg[10],Msg[11],Msg[12],Msg[13],Msg[14],Msg[15]);
 8008784:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008788:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	330a      	adds	r3, #10
 8008790:	781b      	ldrb	r3, [r3, #0]
 8008792:	461d      	mov	r5, r3
 8008794:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008798:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	330b      	adds	r3, #11
 80087a0:	781b      	ldrb	r3, [r3, #0]
 80087a2:	461e      	mov	r6, r3
 80087a4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80087a8:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	330c      	adds	r3, #12
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	461a      	mov	r2, r3
 80087b4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80087b8:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	330d      	adds	r3, #13
 80087c0:	781b      	ldrb	r3, [r3, #0]
 80087c2:	4619      	mov	r1, r3
 80087c4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80087c8:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	330e      	adds	r3, #14
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	461c      	mov	r4, r3
 80087d4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80087d8:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	330f      	adds	r3, #15
 80087e0:	781b      	ldrb	r3, [r3, #0]
 80087e2:	f107 000c 	add.w	r0, r7, #12
 80087e6:	9303      	str	r3, [sp, #12]
 80087e8:	9402      	str	r4, [sp, #8]
 80087ea:	9101      	str	r1, [sp, #4]
 80087ec:	9200      	str	r2, [sp, #0]
 80087ee:	4633      	mov	r3, r6
 80087f0:	462a      	mov	r2, r5
 80087f2:	4936      	ldr	r1, [pc, #216]	; (80088cc <Print_EI_DATA+0x33c>)
 80087f4:	f01a fb3a 	bl	8022e6c <siprintf>
		Display(Print_buff);
 80087f8:	f107 030c 	add.w	r3, r7, #12
 80087fc:	4618      	mov	r0, r3
 80087fe:	f000 f86d 	bl	80088dc <Display>
 8008802:	e002      	b.n	800880a <Print_EI_DATA+0x27a>
	}
	else
	{
		Display("NO TIME SPECIFIED\n");
 8008804:	4832      	ldr	r0, [pc, #200]	; (80088d0 <Print_EI_DATA+0x340>)
 8008806:	f000 f869 	bl	80088dc <Display>
	}
	if(Debug_flag == 1)
 800880a:	4b32      	ldr	r3, [pc, #200]	; (80088d4 <Print_EI_DATA+0x344>)
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	2b01      	cmp	r3, #1
 8008810:	d139      	bne.n	8008886 <Print_EI_DATA+0x2f6>
	{
		for(Traverser = 0;Traverser<Length;++Traverser)
 8008812:	2300      	movs	r3, #0
 8008814:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 8008818:	e019      	b.n	800884e <Print_EI_DATA+0x2be>
		{
			sprintf(Print_buff,"%02X ",Msg[Traverser]);
 800881a:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 800881e:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8008822:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8008826:	6812      	ldr	r2, [r2, #0]
 8008828:	4413      	add	r3, r2
 800882a:	781b      	ldrb	r3, [r3, #0]
 800882c:	461a      	mov	r2, r3
 800882e:	f107 030c 	add.w	r3, r7, #12
 8008832:	4929      	ldr	r1, [pc, #164]	; (80088d8 <Print_EI_DATA+0x348>)
 8008834:	4618      	mov	r0, r3
 8008836:	f01a fb19 	bl	8022e6c <siprintf>
			Display(Print_buff);
 800883a:	f107 030c 	add.w	r3, r7, #12
 800883e:	4618      	mov	r0, r3
 8008840:	f000 f84c 	bl	80088dc <Display>
		for(Traverser = 0;Traverser<Length;++Traverser)
 8008844:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8008848:	3301      	adds	r3, #1
 800884a:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 800884e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008852:	f2a3 230e 	subw	r3, r3, #526	; 0x20e
 8008856:	f897 220f 	ldrb.w	r2, [r7, #527]	; 0x20f
 800885a:	781b      	ldrb	r3, [r3, #0]
 800885c:	429a      	cmp	r2, r3
 800885e:	d3dc      	bcc.n	800881a <Print_EI_DATA+0x28a>
			//		if( (Traverser>0) && ((Traverser%16) == 0) )
			//		{
			//			Display("\n");
			//		}
		}
		if(Msg_Status == XMT)
 8008860:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008864:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 8008868:	781b      	ldrb	r3, [r3, #0]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d10b      	bne.n	8008886 <Print_EI_DATA+0x2f6>
		{
			sprintf(Print_buff,"%02X ",0xF6);
 800886e:	f107 030c 	add.w	r3, r7, #12
 8008872:	22f6      	movs	r2, #246	; 0xf6
 8008874:	4918      	ldr	r1, [pc, #96]	; (80088d8 <Print_EI_DATA+0x348>)
 8008876:	4618      	mov	r0, r3
 8008878:	f01a faf8 	bl	8022e6c <siprintf>
			Display(Print_buff);
 800887c:	f107 030c 	add.w	r3, r7, #12
 8008880:	4618      	mov	r0, r3
 8008882:	f000 f82b 	bl	80088dc <Display>
		}
	}
	//	Display("\n");
	//Display("\n__________ MSG DETAILS __________\n");
}
 8008886:	bf00      	nop
 8008888:	f507 7705 	add.w	r7, r7, #532	; 0x214
 800888c:	46bd      	mov	sp, r7
 800888e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008890:	08025238 	.word	0x08025238
 8008894:	0802523c 	.word	0x0802523c
 8008898:	08025240 	.word	0x08025240
 800889c:	08025248 	.word	0x08025248
 80088a0:	08025250 	.word	0x08025250
 80088a4:	08025254 	.word	0x08025254
 80088a8:	0802525c 	.word	0x0802525c
 80088ac:	08025264 	.word	0x08025264
 80088b0:	08025268 	.word	0x08025268
 80088b4:	0802526c 	.word	0x0802526c
 80088b8:	08025270 	.word	0x08025270
 80088bc:	08025284 	.word	0x08025284
 80088c0:	08025288 	.word	0x08025288
 80088c4:	08025294 	.word	0x08025294
 80088c8:	080252a0 	.word	0x080252a0
 80088cc:	080252ac 	.word	0x080252ac
 80088d0:	080252d0 	.word	0x080252d0
 80088d4:	20000645 	.word	0x20000645
 80088d8:	08025210 	.word	0x08025210

080088dc <Display>:

void Display(char *Data)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b084      	sub	sp, #16
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
	uint8_t Traverser = 0;
 80088e4:	2300      	movs	r3, #0
 80088e6:	73fb      	strb	r3, [r7, #15]
	for(;Data[Traverser];++Traverser)
 80088e8:	e00a      	b.n	8008900 <Display+0x24>
	{
		Com_SendByte(0,Data[Traverser]);
 80088ea:	7bfb      	ldrb	r3, [r7, #15]
 80088ec:	687a      	ldr	r2, [r7, #4]
 80088ee:	4413      	add	r3, r2
 80088f0:	781b      	ldrb	r3, [r3, #0]
 80088f2:	4619      	mov	r1, r3
 80088f4:	2000      	movs	r0, #0
 80088f6:	f00c fe9f 	bl	8015638 <Com_SendByte>
	for(;Data[Traverser];++Traverser)
 80088fa:	7bfb      	ldrb	r3, [r7, #15]
 80088fc:	3301      	adds	r3, #1
 80088fe:	73fb      	strb	r3, [r7, #15]
 8008900:	7bfb      	ldrb	r3, [r7, #15]
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	4413      	add	r3, r2
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d1ee      	bne.n	80088ea <Display+0xe>
	}
}
 800890c:	bf00      	nop
 800890e:	bf00      	nop
 8008910:	3710      	adds	r7, #16
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}
	...

08008918 <print_self_Details>:
	}

}

void print_self_Details(void)
{
 8008918:	b5b0      	push	{r4, r5, r7, lr}
 800891a:	b086      	sub	sp, #24
 800891c:	af04      	add	r7, sp, #16
	uint8_t Traverser = 0;
 800891e:	2300      	movs	r3, #0
 8008920:	71fb      	strb	r3, [r7, #7]

#ifdef EI_1
	printf("\n ______________________________ EI_1_SELF_DETAILS ______________________________ \n");
 8008922:	4890      	ldr	r0, [pc, #576]	; (8008b64 <print_self_Details+0x24c>)
 8008924:	f01a f986 	bl	8022c34 <puts>
#endif
#ifdef EI_2
	printf("\n ______________________________ EI_2_SELF_DETAILS ______________________________ \n");
#endif

	printf("EI_data.Hitachi_st.No_of_IP_s:%u\n",EI_data.Hitachi_st.No_of_IP_s);
 8008928:	4b8f      	ldr	r3, [pc, #572]	; (8008b68 <print_self_Details+0x250>)
 800892a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800892e:	4619      	mov	r1, r3
 8008930:	488e      	ldr	r0, [pc, #568]	; (8008b6c <print_self_Details+0x254>)
 8008932:	f01a f8e3 	bl	8022afc <iprintf>
	printf("EI_data.Hitachi_st.CanXchange:%lu\n",EI_data.Hitachi_st.CAN_Xchange_Time);
 8008936:	4b8c      	ldr	r3, [pc, #560]	; (8008b68 <print_self_Details+0x250>)
 8008938:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800893c:	4619      	mov	r1, r3
 800893e:	488c      	ldr	r0, [pc, #560]	; (8008b70 <print_self_Details+0x258>)
 8008940:	f01a f8dc 	bl	8022afc <iprintf>
	printf("EI_data.Hitachi_st.CanXchangeTimeout:%lu\n",EI_data.Hitachi_st.CAN_EXCHANGE_TIME_OUT);
 8008944:	4b88      	ldr	r3, [pc, #544]	; (8008b68 <print_self_Details+0x250>)
 8008946:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800894a:	4619      	mov	r1, r3
 800894c:	4889      	ldr	r0, [pc, #548]	; (8008b74 <print_self_Details+0x25c>)
 800894e:	f01a f8d5 	bl	8022afc <iprintf>
	printf("EI_data.Hitachi_st.MIE_SIGNAL_SEND_CLK:%lu\n",EI_data.Hitachi_st.MIE_SIGNAL_SEND_CLK);
 8008952:	4b85      	ldr	r3, [pc, #532]	; (8008b68 <print_self_Details+0x250>)
 8008954:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8008958:	4619      	mov	r1, r3
 800895a:	4887      	ldr	r0, [pc, #540]	; (8008b78 <print_self_Details+0x260>)
 800895c:	f01a f8ce 	bl	8022afc <iprintf>
	printf("EI_data.Hitachi_st.HEALTH_PACKET_TIME:%lu\n",EI_data.Hitachi_st.HEALTH_PACKET_TIME);
 8008960:	4b81      	ldr	r3, [pc, #516]	; (8008b68 <print_self_Details+0x250>)
 8008962:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8008966:	4619      	mov	r1, r3
 8008968:	4884      	ldr	r0, [pc, #528]	; (8008b7c <print_self_Details+0x264>)
 800896a:	f01a f8c7 	bl	8022afc <iprintf>
	printf("EI_data.Hitachi_st.Self_Listening_Port:%u\n",EI_data.Hitachi_st.Self_Listening_Port[CARD_INDEX]);
 800896e:	4b7e      	ldr	r3, [pc, #504]	; (8008b68 <print_self_Details+0x250>)
 8008970:	f8b3 30f6 	ldrh.w	r3, [r3, #246]	; 0xf6
 8008974:	4619      	mov	r1, r3
 8008976:	4882      	ldr	r0, [pc, #520]	; (8008b80 <print_self_Details+0x268>)
 8008978:	f01a f8c0 	bl	8022afc <iprintf>
	printf("EI_data.Hitachi_st.No_of_IP_s:%u\n",EI_data.Hitachi_st.No_of_IP_s);
 800897c:	4b7a      	ldr	r3, [pc, #488]	; (8008b68 <print_self_Details+0x250>)
 800897e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008982:	4619      	mov	r1, r3
 8008984:	4879      	ldr	r0, [pc, #484]	; (8008b6c <print_self_Details+0x254>)
 8008986:	f01a f8b9 	bl	8022afc <iprintf>


	for(Traverser = 0;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 800898a:	2300      	movs	r3, #0
 800898c:	71fb      	strb	r3, [r7, #7]
 800898e:	e03b      	b.n	8008a08 <print_self_Details+0xf0>
	{
		printf("Source IP[%u]  :%u.%u.%u.%u\n",Traverser,EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][0],EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][1],EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][2],EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][3]);
 8008990:	79f9      	ldrb	r1, [r7, #7]
 8008992:	79fb      	ldrb	r3, [r7, #7]
 8008994:	4a74      	ldr	r2, [pc, #464]	; (8008b68 <print_self_Details+0x250>)
 8008996:	3312      	adds	r3, #18
 8008998:	009b      	lsls	r3, r3, #2
 800899a:	4413      	add	r3, r2
 800899c:	78db      	ldrb	r3, [r3, #3]
 800899e:	461c      	mov	r4, r3
 80089a0:	79fb      	ldrb	r3, [r7, #7]
 80089a2:	4a71      	ldr	r2, [pc, #452]	; (8008b68 <print_self_Details+0x250>)
 80089a4:	009b      	lsls	r3, r3, #2
 80089a6:	4413      	add	r3, r2
 80089a8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80089ac:	461d      	mov	r5, r3
 80089ae:	79fb      	ldrb	r3, [r7, #7]
 80089b0:	4a6d      	ldr	r2, [pc, #436]	; (8008b68 <print_self_Details+0x250>)
 80089b2:	009b      	lsls	r3, r3, #2
 80089b4:	4413      	add	r3, r2
 80089b6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80089ba:	4618      	mov	r0, r3
 80089bc:	79fb      	ldrb	r3, [r7, #7]
 80089be:	4a6a      	ldr	r2, [pc, #424]	; (8008b68 <print_self_Details+0x250>)
 80089c0:	009b      	lsls	r3, r3, #2
 80089c2:	4413      	add	r3, r2
 80089c4:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80089c8:	9301      	str	r3, [sp, #4]
 80089ca:	9000      	str	r0, [sp, #0]
 80089cc:	462b      	mov	r3, r5
 80089ce:	4622      	mov	r2, r4
 80089d0:	486c      	ldr	r0, [pc, #432]	; (8008b84 <print_self_Details+0x26c>)
 80089d2:	f01a f893 	bl	8022afc <iprintf>
		printf("TX_Port[%u]:%u\n",Traverser,EI_data.Hitachi_st.PORTS[CARD_INDEX][Traverser][TX_PORT]);
 80089d6:	79f9      	ldrb	r1, [r7, #7]
 80089d8:	79fb      	ldrb	r3, [r7, #7]
 80089da:	4a63      	ldr	r2, [pc, #396]	; (8008b68 <print_self_Details+0x250>)
 80089dc:	333e      	adds	r3, #62	; 0x3e
 80089de:	009b      	lsls	r3, r3, #2
 80089e0:	4413      	add	r3, r2
 80089e2:	885b      	ldrh	r3, [r3, #2]
 80089e4:	461a      	mov	r2, r3
 80089e6:	4868      	ldr	r0, [pc, #416]	; (8008b88 <print_self_Details+0x270>)
 80089e8:	f01a f888 	bl	8022afc <iprintf>
		printf("RX_Port[%u]:%u\n",Traverser,EI_data.Hitachi_st.PORTS[CARD_INDEX][Traverser][RX_PORT]);
 80089ec:	79f9      	ldrb	r1, [r7, #7]
 80089ee:	79fb      	ldrb	r3, [r7, #7]
 80089f0:	4a5d      	ldr	r2, [pc, #372]	; (8008b68 <print_self_Details+0x250>)
 80089f2:	009b      	lsls	r3, r3, #2
 80089f4:	4413      	add	r3, r2
 80089f6:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
 80089fa:	461a      	mov	r2, r3
 80089fc:	4863      	ldr	r0, [pc, #396]	; (8008b8c <print_self_Details+0x274>)
 80089fe:	f01a f87d 	bl	8022afc <iprintf>
	for(Traverser = 0;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 8008a02:	79fb      	ldrb	r3, [r7, #7]
 8008a04:	3301      	adds	r3, #1
 8008a06:	71fb      	strb	r3, [r7, #7]
 8008a08:	4b57      	ldr	r3, [pc, #348]	; (8008b68 <print_self_Details+0x250>)
 8008a0a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008a0e:	79fa      	ldrb	r2, [r7, #7]
 8008a10:	429a      	cmp	r2, r3
 8008a12:	d3bd      	bcc.n	8008990 <print_self_Details+0x78>
	}
	printf("Self IP       :%u.%u.%u.%u\n",EI_data.Hitachi_st.Self_IP[CARD_INDEX][0],EI_data.Hitachi_st.Self_IP[CARD_INDEX][1],EI_data.Hitachi_st.Self_IP[CARD_INDEX][2],EI_data.Hitachi_st.Self_IP[CARD_INDEX][3]);
 8008a14:	4b54      	ldr	r3, [pc, #336]	; (8008b68 <print_self_Details+0x250>)
 8008a16:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8008a1a:	4619      	mov	r1, r3
 8008a1c:	4b52      	ldr	r3, [pc, #328]	; (8008b68 <print_self_Details+0x250>)
 8008a1e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008a22:	461a      	mov	r2, r3
 8008a24:	4b50      	ldr	r3, [pc, #320]	; (8008b68 <print_self_Details+0x250>)
 8008a26:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	4b4e      	ldr	r3, [pc, #312]	; (8008b68 <print_self_Details+0x250>)
 8008a2e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008a32:	9300      	str	r3, [sp, #0]
 8008a34:	4603      	mov	r3, r0
 8008a36:	4856      	ldr	r0, [pc, #344]	; (8008b90 <print_self_Details+0x278>)
 8008a38:	f01a f860 	bl	8022afc <iprintf>
	printf("Self MAC      :%02X:%02X:%02X:%02X:%02X:%02X\n",EI_data.Hitachi_st.Self_MAC[CARD_INDEX][0],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][1],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][2],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][3],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][4],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][5]);
 8008a3c:	4b4a      	ldr	r3, [pc, #296]	; (8008b68 <print_self_Details+0x250>)
 8008a3e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008a42:	4618      	mov	r0, r3
 8008a44:	4b48      	ldr	r3, [pc, #288]	; (8008b68 <print_self_Details+0x250>)
 8008a46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008a4a:	461c      	mov	r4, r3
 8008a4c:	4b46      	ldr	r3, [pc, #280]	; (8008b68 <print_self_Details+0x250>)
 8008a4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a52:	461d      	mov	r5, r3
 8008a54:	4b44      	ldr	r3, [pc, #272]	; (8008b68 <print_self_Details+0x250>)
 8008a56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	4b42      	ldr	r3, [pc, #264]	; (8008b68 <print_self_Details+0x250>)
 8008a5e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008a62:	4619      	mov	r1, r3
 8008a64:	4b40      	ldr	r3, [pc, #256]	; (8008b68 <print_self_Details+0x250>)
 8008a66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a6a:	9302      	str	r3, [sp, #8]
 8008a6c:	9101      	str	r1, [sp, #4]
 8008a6e:	9200      	str	r2, [sp, #0]
 8008a70:	462b      	mov	r3, r5
 8008a72:	4622      	mov	r2, r4
 8008a74:	4601      	mov	r1, r0
 8008a76:	4847      	ldr	r0, [pc, #284]	; (8008b94 <print_self_Details+0x27c>)
 8008a78:	f01a f840 	bl	8022afc <iprintf>

	printf("Listening Port:%u\n",EI_data.Hitachi_st.Self_Listening_Port[CARD_INDEX]);
 8008a7c:	4b3a      	ldr	r3, [pc, #232]	; (8008b68 <print_self_Details+0x250>)
 8008a7e:	f8b3 30f6 	ldrh.w	r3, [r3, #246]	; 0xf6
 8008a82:	4619      	mov	r1, r3
 8008a84:	4844      	ldr	r0, [pc, #272]	; (8008b98 <print_self_Details+0x280>)
 8008a86:	f01a f839 	bl	8022afc <iprintf>

	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	71fb      	strb	r3, [r7, #7]
 8008a8e:	e05c      	b.n	8008b4a <print_self_Details+0x232>
	{
		printf("\nPEER:%u Details:\n",Traverser+1);
 8008a90:	79fb      	ldrb	r3, [r7, #7]
 8008a92:	3301      	adds	r3, #1
 8008a94:	4619      	mov	r1, r3
 8008a96:	4841      	ldr	r0, [pc, #260]	; (8008b9c <print_self_Details+0x284>)
 8008a98:	f01a f830 	bl	8022afc <iprintf>
		printf("Source Peer Address:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
 8008a9c:	79fb      	ldrb	r3, [r7, #7]
 8008a9e:	4a32      	ldr	r2, [pc, #200]	; (8008b68 <print_self_Details+0x250>)
 8008aa0:	3366      	adds	r3, #102	; 0x66
 8008aa2:	009b      	lsls	r3, r3, #2
 8008aa4:	4413      	add	r3, r2
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	4619      	mov	r1, r3
 8008aaa:	483d      	ldr	r0, [pc, #244]	; (8008ba0 <print_self_Details+0x288>)
 8008aac:	f01a f826 	bl	8022afc <iprintf>
		printf("Dest   Peer Address:%lu\n",EI_data.Hitachi_st.DEST_ADDRESSES[Traverser]);
 8008ab0:	79fb      	ldrb	r3, [r7, #7]
 8008ab2:	4a2d      	ldr	r2, [pc, #180]	; (8008b68 <print_self_Details+0x250>)
 8008ab4:	3370      	adds	r3, #112	; 0x70
 8008ab6:	009b      	lsls	r3, r3, #2
 8008ab8:	4413      	add	r3, r2
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	4619      	mov	r1, r3
 8008abe:	4839      	ldr	r0, [pc, #228]	; (8008ba4 <print_self_Details+0x28c>)
 8008ac0:	f01a f81c 	bl	8022afc <iprintf>
		printf("MLK Application CRC:0x%04X\n",EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][Traverser]);
 8008ac4:	79fb      	ldrb	r3, [r7, #7]
 8008ac6:	4a28      	ldr	r2, [pc, #160]	; (8008b68 <print_self_Details+0x250>)
 8008ac8:	33f4      	adds	r3, #244	; 0xf4
 8008aca:	005b      	lsls	r3, r3, #1
 8008acc:	4413      	add	r3, r2
 8008ace:	889b      	ldrh	r3, [r3, #4]
 8008ad0:	4619      	mov	r1, r3
 8008ad2:	4835      	ldr	r0, [pc, #212]	; (8008ba8 <print_self_Details+0x290>)
 8008ad4:	f01a f812 	bl	8022afc <iprintf>
		printf("Number of Outputs  :%u\n",EI_data.Hitachi_st.Bool_outputs[Traverser]);
 8008ad8:	79fb      	ldrb	r3, [r7, #7]
 8008ada:	4a23      	ldr	r2, [pc, #140]	; (8008b68 <print_self_Details+0x250>)
 8008adc:	4413      	add	r3, r2
 8008ade:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 8008ae2:	4619      	mov	r1, r3
 8008ae4:	4831      	ldr	r0, [pc, #196]	; (8008bac <print_self_Details+0x294>)
 8008ae6:	f01a f809 	bl	8022afc <iprintf>
		printf("Clock Master:%u\n",EI_data.Hitachi_st.ClockMaster[Traverser]);
 8008aea:	79fb      	ldrb	r3, [r7, #7]
 8008aec:	4a1e      	ldr	r2, [pc, #120]	; (8008b68 <print_self_Details+0x250>)
 8008aee:	4413      	add	r3, r2
 8008af0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008af4:	4619      	mov	r1, r3
 8008af6:	482e      	ldr	r0, [pc, #184]	; (8008bb0 <print_self_Details+0x298>)
 8008af8:	f01a f800 	bl	8022afc <iprintf>
		printf("Interface Type:%u\n",EI_data.Hitachi_st.Interface_Type[Traverser]);
 8008afc:	79fb      	ldrb	r3, [r7, #7]
 8008afe:	4a1a      	ldr	r2, [pc, #104]	; (8008b68 <print_self_Details+0x250>)
 8008b00:	4413      	add	r3, r2
 8008b02:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008b06:	4619      	mov	r1, r3
 8008b08:	482a      	ldr	r0, [pc, #168]	; (8008bb4 <print_self_Details+0x29c>)
 8008b0a:	f019 fff7 	bl	8022afc <iprintf>
		printf("COMM_FAILURE_TIME_OUT:%lu\n",EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Traverser]);
 8008b0e:	79fb      	ldrb	r3, [r7, #7]
 8008b10:	4a15      	ldr	r2, [pc, #84]	; (8008b68 <print_self_Details+0x250>)
 8008b12:	338a      	adds	r3, #138	; 0x8a
 8008b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b18:	4619      	mov	r1, r3
 8008b1a:	4827      	ldr	r0, [pc, #156]	; (8008bb8 <print_self_Details+0x2a0>)
 8008b1c:	f019 ffee 	bl	8022afc <iprintf>
		printf("STALE_DATA_TIME_OUT:%lu\n",EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser]);
 8008b20:	79fb      	ldrb	r3, [r7, #7]
 8008b22:	4a11      	ldr	r2, [pc, #68]	; (8008b68 <print_self_Details+0x250>)
 8008b24:	3394      	adds	r3, #148	; 0x94
 8008b26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b2a:	4619      	mov	r1, r3
 8008b2c:	4823      	ldr	r0, [pc, #140]	; (8008bbc <print_self_Details+0x2a4>)
 8008b2e:	f019 ffe5 	bl	8022afc <iprintf>
		printf("LinkEstablishTimeout:%lu\n",EI_data.Hitachi_st.LinkEstablishTimeout[Traverser]);
 8008b32:	79fb      	ldrb	r3, [r7, #7]
 8008b34:	4a0c      	ldr	r2, [pc, #48]	; (8008b68 <print_self_Details+0x250>)
 8008b36:	339e      	adds	r3, #158	; 0x9e
 8008b38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b3c:	4619      	mov	r1, r3
 8008b3e:	4820      	ldr	r0, [pc, #128]	; (8008bc0 <print_self_Details+0x2a8>)
 8008b40:	f019 ffdc 	bl	8022afc <iprintf>
	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008b44:	79fb      	ldrb	r3, [r7, #7]
 8008b46:	3301      	adds	r3, #1
 8008b48:	71fb      	strb	r3, [r7, #7]
 8008b4a:	4b07      	ldr	r3, [pc, #28]	; (8008b68 <print_self_Details+0x250>)
 8008b4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008b50:	79fa      	ldrb	r2, [r7, #7]
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d39c      	bcc.n	8008a90 <print_self_Details+0x178>

	}

#ifdef EI_1
	printf("\n ______________________________ EI_1_SELF_DETAILS ______________________________ \n");
 8008b56:	4803      	ldr	r0, [pc, #12]	; (8008b64 <print_self_Details+0x24c>)
 8008b58:	f01a f86c 	bl	8022c34 <puts>
#endif
#ifdef EI_2
	printf("\n ______________________________ EI_2_SELF_DETAILS ______________________________ \n");
#endif
}
 8008b5c:	bf00      	nop
 8008b5e:	3708      	adds	r7, #8
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bdb0      	pop	{r4, r5, r7, pc}
 8008b64:	08025344 	.word	0x08025344
 8008b68:	20000304 	.word	0x20000304
 8008b6c:	08025398 	.word	0x08025398
 8008b70:	080253bc 	.word	0x080253bc
 8008b74:	080253e0 	.word	0x080253e0
 8008b78:	0802540c 	.word	0x0802540c
 8008b7c:	08025438 	.word	0x08025438
 8008b80:	08025464 	.word	0x08025464
 8008b84:	08025490 	.word	0x08025490
 8008b88:	080254b0 	.word	0x080254b0
 8008b8c:	080254c0 	.word	0x080254c0
 8008b90:	080254d0 	.word	0x080254d0
 8008b94:	080254ec 	.word	0x080254ec
 8008b98:	0802551c 	.word	0x0802551c
 8008b9c:	08025530 	.word	0x08025530
 8008ba0:	08025544 	.word	0x08025544
 8008ba4:	08025560 	.word	0x08025560
 8008ba8:	0802557c 	.word	0x0802557c
 8008bac:	08025598 	.word	0x08025598
 8008bb0:	080255b0 	.word	0x080255b0
 8008bb4:	080255c4 	.word	0x080255c4
 8008bb8:	080255d8 	.word	0x080255d8
 8008bbc:	080255f4 	.word	0x080255f4
 8008bc0:	08025610 	.word	0x08025610

08008bc4 <Send_Init_After_Timeout>:

void Send_Init_After_Timeout(void)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b082      	sub	sp, #8
 8008bc8:	af00      	add	r7, sp, #0
	uint8_t Traverser =0;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	71fb      	strb	r3, [r7, #7]

	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008bce:	2300      	movs	r3, #0
 8008bd0:	71fb      	strb	r3, [r7, #7]
 8008bd2:	e054      	b.n	8008c7e <Send_Init_After_Timeout+0xba>
	{
		if(Last_Recevied_Clock[Traverser] != 0)
 8008bd4:	79fb      	ldrb	r3, [r7, #7]
 8008bd6:	4a2f      	ldr	r2, [pc, #188]	; (8008c94 <Send_Init_After_Timeout+0xd0>)
 8008bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d04b      	beq.n	8008c78 <Send_Init_After_Timeout+0xb4>
		{
#ifdef EI_1
			if(
					(
							( (HAL_Elaps_Ticks(Last_Recevied_Clock[Traverser]) > EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser]) &&
 8008be0:	79fb      	ldrb	r3, [r7, #7]
 8008be2:	4a2c      	ldr	r2, [pc, #176]	; (8008c94 <Send_Init_After_Timeout+0xd0>)
 8008be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008be8:	4618      	mov	r0, r3
 8008bea:	f006 f993 	bl	800ef14 <HAL_Elaps_Ticks>
 8008bee:	4602      	mov	r2, r0
 8008bf0:	79fb      	ldrb	r3, [r7, #7]
 8008bf2:	4929      	ldr	r1, [pc, #164]	; (8008c98 <Send_Init_After_Timeout+0xd4>)
 8008bf4:	3394      	adds	r3, #148	; 0x94
 8008bf6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
			if(
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	d93c      	bls.n	8008c78 <Send_Init_After_Timeout+0xb4>
									(HAL_Elaps_Ticks(OtherCardReceptionClk[Traverser]) > EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser])) &&
 8008bfe:	79fb      	ldrb	r3, [r7, #7]
 8008c00:	4a26      	ldr	r2, [pc, #152]	; (8008c9c <Send_Init_After_Timeout+0xd8>)
 8008c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c06:	4618      	mov	r0, r3
 8008c08:	f006 f984 	bl	800ef14 <HAL_Elaps_Ticks>
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	79fb      	ldrb	r3, [r7, #7]
 8008c10:	4921      	ldr	r1, [pc, #132]	; (8008c98 <Send_Init_After_Timeout+0xd4>)
 8008c12:	3394      	adds	r3, #148	; 0x94
 8008c14:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
							( (HAL_Elaps_Ticks(Last_Recevied_Clock[Traverser]) > EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser]) &&
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d92d      	bls.n	8008c78 <Send_Init_After_Timeout+0xb4>

									(Init_Msg_Sent_After_Timeout[Traverser] != 1) &&
 8008c1c:	79fb      	ldrb	r3, [r7, #7]
 8008c1e:	4a20      	ldr	r2, [pc, #128]	; (8008ca0 <Send_Init_After_Timeout+0xdc>)
 8008c20:	5cd3      	ldrb	r3, [r2, r3]
									(HAL_Elaps_Ticks(OtherCardReceptionClk[Traverser]) > EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser])) &&
 8008c22:	2b01      	cmp	r3, #1
 8008c24:	d028      	beq.n	8008c78 <Send_Init_After_Timeout+0xb4>
									(Last_Received_Init_Clk[Traverser] > ONE_SEC) )
 8008c26:	79fb      	ldrb	r3, [r7, #7]
 8008c28:	4a1e      	ldr	r2, [pc, #120]	; (8008ca4 <Send_Init_After_Timeout+0xe0>)
 8008c2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
									(Init_Msg_Sent_After_Timeout[Traverser] != 1) &&
 8008c2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c32:	d921      	bls.n	8008c78 <Send_Init_After_Timeout+0xb4>
			)
			{
				printf("Sending INIT-MSG After Timeout:%lu Seconds\n",HAL_Elaps_Ticks(Last_Recevied_Clock[Traverser])/1000);
 8008c34:	79fb      	ldrb	r3, [r7, #7]
 8008c36:	4a17      	ldr	r2, [pc, #92]	; (8008c94 <Send_Init_After_Timeout+0xd0>)
 8008c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f006 f969 	bl	800ef14 <HAL_Elaps_Ticks>
 8008c42:	4603      	mov	r3, r0
 8008c44:	4a18      	ldr	r2, [pc, #96]	; (8008ca8 <Send_Init_After_Timeout+0xe4>)
 8008c46:	fba2 2303 	umull	r2, r3, r2, r3
 8008c4a:	099b      	lsrs	r3, r3, #6
 8008c4c:	4619      	mov	r1, r3
 8008c4e:	4817      	ldr	r0, [pc, #92]	; (8008cac <Send_Init_After_Timeout+0xe8>)
 8008c50:	f019 ff54 	bl	8022afc <iprintf>
				SEND_FORCE_REPLY[Traverser] = 1;
 8008c54:	79fb      	ldrb	r3, [r7, #7]
 8008c56:	4a16      	ldr	r2, [pc, #88]	; (8008cb0 <Send_Init_After_Timeout+0xec>)
 8008c58:	2101      	movs	r1, #1
 8008c5a:	54d1      	strb	r1, [r2, r3]
				Send_Init_Msg(Traverser, Traverser);
 8008c5c:	79fa      	ldrb	r2, [r7, #7]
 8008c5e:	79fb      	ldrb	r3, [r7, #7]
 8008c60:	4611      	mov	r1, r2
 8008c62:	4618      	mov	r0, r3
 8008c64:	f7f9 fba8 	bl	80023b8 <Send_Init_Msg>
				Init_Msg_Sent_After_Timeout[Traverser] = 1;
 8008c68:	79fb      	ldrb	r3, [r7, #7]
 8008c6a:	4a0d      	ldr	r2, [pc, #52]	; (8008ca0 <Send_Init_After_Timeout+0xdc>)
 8008c6c:	2101      	movs	r1, #1
 8008c6e:	54d1      	strb	r1, [r2, r3]
				INIT_REQ_SENT_Flag[Traverser] = 1;
 8008c70:	79fb      	ldrb	r3, [r7, #7]
 8008c72:	4a10      	ldr	r2, [pc, #64]	; (8008cb4 <Send_Init_After_Timeout+0xf0>)
 8008c74:	2101      	movs	r1, #1
 8008c76:	54d1      	strb	r1, [r2, r3]
	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008c78:	79fb      	ldrb	r3, [r7, #7]
 8008c7a:	3301      	adds	r3, #1
 8008c7c:	71fb      	strb	r3, [r7, #7]
 8008c7e:	4b06      	ldr	r3, [pc, #24]	; (8008c98 <Send_Init_After_Timeout+0xd4>)
 8008c80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008c84:	79fa      	ldrb	r2, [r7, #7]
 8008c86:	429a      	cmp	r2, r3
 8008c88:	d3a4      	bcc.n	8008bd4 <Send_Init_After_Timeout+0x10>
				INIT_REQ_SENT_Flag[Traverser] = 1;
			}
#endif
		}
	}
}
 8008c8a:	bf00      	nop
 8008c8c:	bf00      	nop
 8008c8e:	3708      	adds	r7, #8
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}
 8008c94:	20000fb0 	.word	0x20000fb0
 8008c98:	20000304 	.word	0x20000304
 8008c9c:	20000ea8 	.word	0x20000ea8
 8008ca0:	20001098 	.word	0x20001098
 8008ca4:	200010a4 	.word	0x200010a4
 8008ca8:	10624dd3 	.word	0x10624dd3
 8008cac:	0802562c 	.word	0x0802562c
 8008cb0:	200010d8 	.word	0x200010d8
 8008cb4:	200010cc 	.word	0x200010cc

08008cb8 <Send_Vital_Msg_After_Rx_VITAL>:

void Send_Vital_Msg_After_Rx_VITAL(void)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b082      	sub	sp, #8
 8008cbc:	af00      	add	r7, sp, #0
	uint8_t Traverser = 0;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	71fb      	strb	r3, [r7, #7]
	for(;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008cc2:	e037      	b.n	8008d34 <Send_Vital_Msg_After_Rx_VITAL+0x7c>
			Send_Vital_MSG_st.flag[Traverser] = CLEAR;
			Send_Vital_MSG_st.Clk[Traverser] = -1;
		}*/

		if(
				((Tx_Ei_self_sharing_st[Traverser].IS_PRIMARY == PRIMARY) || (EI_data.Hitachi_st.Interface_Type[Traverser] == SERIAL)) &&
 8008cc4:	79fa      	ldrb	r2, [r7, #7]
 8008cc6:	4921      	ldr	r1, [pc, #132]	; (8008d4c <Send_Vital_Msg_After_Rx_VITAL+0x94>)
 8008cc8:	4613      	mov	r3, r2
 8008cca:	005b      	lsls	r3, r3, #1
 8008ccc:	4413      	add	r3, r2
 8008cce:	00db      	lsls	r3, r3, #3
 8008cd0:	440b      	add	r3, r1
 8008cd2:	3304      	adds	r3, #4
 8008cd4:	781b      	ldrb	r3, [r3, #0]
		if(
 8008cd6:	2b01      	cmp	r3, #1
 8008cd8:	d006      	beq.n	8008ce8 <Send_Vital_Msg_After_Rx_VITAL+0x30>
				((Tx_Ei_self_sharing_st[Traverser].IS_PRIMARY == PRIMARY) || (EI_data.Hitachi_st.Interface_Type[Traverser] == SERIAL)) &&
 8008cda:	79fb      	ldrb	r3, [r7, #7]
 8008cdc:	4a1c      	ldr	r2, [pc, #112]	; (8008d50 <Send_Vital_Msg_After_Rx_VITAL+0x98>)
 8008cde:	4413      	add	r3, r2
 8008ce0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008ce4:	2b02      	cmp	r3, #2
 8008ce6:	d122      	bne.n	8008d2e <Send_Vital_Msg_After_Rx_VITAL+0x76>
				(Send_Vital_MSG_st.flag[Traverser] == SET) &&
 8008ce8:	79fb      	ldrb	r3, [r7, #7]
 8008cea:	4a1a      	ldr	r2, [pc, #104]	; (8008d54 <Send_Vital_Msg_After_Rx_VITAL+0x9c>)
 8008cec:	5cd3      	ldrb	r3, [r2, r3]
				((Tx_Ei_self_sharing_st[Traverser].IS_PRIMARY == PRIMARY) || (EI_data.Hitachi_st.Interface_Type[Traverser] == SERIAL)) &&
 8008cee:	2b01      	cmp	r3, #1
 8008cf0:	d11d      	bne.n	8008d2e <Send_Vital_Msg_After_Rx_VITAL+0x76>
				(HAL_Elaps_Ticks(Send_Vital_MSG_st.Clk[Traverser]) > 50 )
 8008cf2:	79fb      	ldrb	r3, [r7, #7]
 8008cf4:	4a17      	ldr	r2, [pc, #92]	; (8008d54 <Send_Vital_Msg_After_Rx_VITAL+0x9c>)
 8008cf6:	3302      	adds	r3, #2
 8008cf8:	009b      	lsls	r3, r3, #2
 8008cfa:	4413      	add	r3, r2
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f006 f908 	bl	800ef14 <HAL_Elaps_Ticks>
 8008d04:	4603      	mov	r3, r0
				(Send_Vital_MSG_st.flag[Traverser] == SET) &&
 8008d06:	2b32      	cmp	r3, #50	; 0x32
 8008d08:	d911      	bls.n	8008d2e <Send_Vital_Msg_After_Rx_VITAL+0x76>
		)
		{
			Send_Vital_Data_Message(Traverser, Traverser);
 8008d0a:	79fa      	ldrb	r2, [r7, #7]
 8008d0c:	79fb      	ldrb	r3, [r7, #7]
 8008d0e:	4611      	mov	r1, r2
 8008d10:	4618      	mov	r0, r3
 8008d12:	f7fb f885 	bl	8003e20 <Send_Vital_Data_Message>
			Send_Vital_MSG_st.flag[Traverser] = CLEAR;
 8008d16:	79fb      	ldrb	r3, [r7, #7]
 8008d18:	4a0e      	ldr	r2, [pc, #56]	; (8008d54 <Send_Vital_Msg_After_Rx_VITAL+0x9c>)
 8008d1a:	2100      	movs	r1, #0
 8008d1c:	54d1      	strb	r1, [r2, r3]
			Send_Vital_MSG_st.Clk[Traverser] = -1;
 8008d1e:	79fb      	ldrb	r3, [r7, #7]
 8008d20:	4a0c      	ldr	r2, [pc, #48]	; (8008d54 <Send_Vital_Msg_After_Rx_VITAL+0x9c>)
 8008d22:	3302      	adds	r3, #2
 8008d24:	009b      	lsls	r3, r3, #2
 8008d26:	4413      	add	r3, r2
 8008d28:	f04f 32ff 	mov.w	r2, #4294967295
 8008d2c:	605a      	str	r2, [r3, #4]
	for(;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008d2e:	79fb      	ldrb	r3, [r7, #7]
 8008d30:	3301      	adds	r3, #1
 8008d32:	71fb      	strb	r3, [r7, #7]
 8008d34:	4b06      	ldr	r3, [pc, #24]	; (8008d50 <Send_Vital_Msg_After_Rx_VITAL+0x98>)
 8008d36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008d3a:	79fa      	ldrb	r2, [r7, #7]
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	d3c1      	bcc.n	8008cc4 <Send_Vital_Msg_After_Rx_VITAL+0xc>
		//			Send_Vital_Data_Message(Traverser, Traverser);
		//			Send_Vital_MSG_st.flag[Traverser] = CLEAR;
		//			Send_Vital_MSG_st.Clk[Traverser] = -1;
		//		}
	}
}
 8008d40:	bf00      	nop
 8008d42:	bf00      	nop
 8008d44:	3708      	adds	r7, #8
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}
 8008d4a:	bf00      	nop
 8008d4c:	20001680 	.word	0x20001680
 8008d50:	20000304 	.word	0x20000304
 8008d54:	20001ca0 	.word	0x20001ca0

08008d58 <Check_Recv_Status_fail>:

void Check_Recv_Status_fail(void)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b082      	sub	sp, #8
 8008d5c:	af00      	add	r7, sp, #0
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008d5e:	2300      	movs	r3, #0
 8008d60:	71fb      	strb	r3, [r7, #7]
 8008d62:	e04e      	b.n	8008e02 <Check_Recv_Status_fail+0xaa>
	{
		if( (Last_Recevied_Clock_ValidMsgs[Traverser] != 0) && (Tx_Ei_self_sharing_st[Traverser].EI_Receiving_Status != NOT_RECEIVED) )
 8008d64:	79fb      	ldrb	r3, [r7, #7]
 8008d66:	4a2c      	ldr	r2, [pc, #176]	; (8008e18 <Check_Recv_Status_fail+0xc0>)
 8008d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d045      	beq.n	8008dfc <Check_Recv_Status_fail+0xa4>
 8008d70:	79fa      	ldrb	r2, [r7, #7]
 8008d72:	492a      	ldr	r1, [pc, #168]	; (8008e1c <Check_Recv_Status_fail+0xc4>)
 8008d74:	4613      	mov	r3, r2
 8008d76:	005b      	lsls	r3, r3, #1
 8008d78:	4413      	add	r3, r2
 8008d7a:	00db      	lsls	r3, r3, #3
 8008d7c:	440b      	add	r3, r1
 8008d7e:	3303      	adds	r3, #3
 8008d80:	781b      	ldrb	r3, [r3, #0]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d03a      	beq.n	8008dfc <Check_Recv_Status_fail+0xa4>
		{
			if(HAL_Elaps_Ticks(Last_Recevied_Clock_ValidMsgs[Traverser]) > EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Traverser])
 8008d86:	79fb      	ldrb	r3, [r7, #7]
 8008d88:	4a23      	ldr	r2, [pc, #140]	; (8008e18 <Check_Recv_Status_fail+0xc0>)
 8008d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f006 f8c0 	bl	800ef14 <HAL_Elaps_Ticks>
 8008d94:	4602      	mov	r2, r0
 8008d96:	79fb      	ldrb	r3, [r7, #7]
 8008d98:	4921      	ldr	r1, [pc, #132]	; (8008e20 <Check_Recv_Status_fail+0xc8>)
 8008d9a:	338a      	adds	r3, #138	; 0x8a
 8008d9c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008da0:	429a      	cmp	r2, r3
 8008da2:	d92b      	bls.n	8008dfc <Check_Recv_Status_fail+0xa4>
			{
				printf("!Received any Packet of:%lu from last %lu Seconds\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser],(EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Traverser]/1000));
 8008da4:	79fb      	ldrb	r3, [r7, #7]
 8008da6:	4a1e      	ldr	r2, [pc, #120]	; (8008e20 <Check_Recv_Status_fail+0xc8>)
 8008da8:	3366      	adds	r3, #102	; 0x66
 8008daa:	009b      	lsls	r3, r3, #2
 8008dac:	4413      	add	r3, r2
 8008dae:	6859      	ldr	r1, [r3, #4]
 8008db0:	79fb      	ldrb	r3, [r7, #7]
 8008db2:	4a1b      	ldr	r2, [pc, #108]	; (8008e20 <Check_Recv_Status_fail+0xc8>)
 8008db4:	338a      	adds	r3, #138	; 0x8a
 8008db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008dba:	4a1a      	ldr	r2, [pc, #104]	; (8008e24 <Check_Recv_Status_fail+0xcc>)
 8008dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8008dc0:	099b      	lsrs	r3, r3, #6
 8008dc2:	461a      	mov	r2, r3
 8008dc4:	4818      	ldr	r0, [pc, #96]	; (8008e28 <Check_Recv_Status_fail+0xd0>)
 8008dc6:	f019 fe99 	bl	8022afc <iprintf>
				printf("Last_Recevied_Clock_ValidMsgs[Traverser]:%lu\n",Last_Recevied_Clock_ValidMsgs[Traverser]);
 8008dca:	79fb      	ldrb	r3, [r7, #7]
 8008dcc:	4a12      	ldr	r2, [pc, #72]	; (8008e18 <Check_Recv_Status_fail+0xc0>)
 8008dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008dd2:	4619      	mov	r1, r3
 8008dd4:	4815      	ldr	r0, [pc, #84]	; (8008e2c <Check_Recv_Status_fail+0xd4>)
 8008dd6:	f019 fe91 	bl	8022afc <iprintf>
				printf("Ticks:%lu\n",HAL_GetTick());
 8008dda:	f00c fe85 	bl	8015ae8 <HAL_GetTick>
 8008dde:	4603      	mov	r3, r0
 8008de0:	4619      	mov	r1, r3
 8008de2:	4813      	ldr	r0, [pc, #76]	; (8008e30 <Check_Recv_Status_fail+0xd8>)
 8008de4:	f019 fe8a 	bl	8022afc <iprintf>
				Tx_Ei_self_sharing_st[Traverser].EI_Receiving_Status = NOT_RECEIVED;
 8008de8:	79fa      	ldrb	r2, [r7, #7]
 8008dea:	490c      	ldr	r1, [pc, #48]	; (8008e1c <Check_Recv_Status_fail+0xc4>)
 8008dec:	4613      	mov	r3, r2
 8008dee:	005b      	lsls	r3, r3, #1
 8008df0:	4413      	add	r3, r2
 8008df2:	00db      	lsls	r3, r3, #3
 8008df4:	440b      	add	r3, r1
 8008df6:	3303      	adds	r3, #3
 8008df8:	2200      	movs	r2, #0
 8008dfa:	701a      	strb	r2, [r3, #0]
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008dfc:	79fb      	ldrb	r3, [r7, #7]
 8008dfe:	3301      	adds	r3, #1
 8008e00:	71fb      	strb	r3, [r7, #7]
 8008e02:	4b07      	ldr	r3, [pc, #28]	; (8008e20 <Check_Recv_Status_fail+0xc8>)
 8008e04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008e08:	79fa      	ldrb	r2, [r7, #7]
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	d3aa      	bcc.n	8008d64 <Check_Recv_Status_fail+0xc>
			}
		}
	}
}
 8008e0e:	bf00      	nop
 8008e10:	bf00      	nop
 8008e12:	3708      	adds	r7, #8
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}
 8008e18:	20000fd8 	.word	0x20000fd8
 8008e1c:	20001680 	.word	0x20001680
 8008e20:	20000304 	.word	0x20000304
 8008e24:	10624dd3 	.word	0x10624dd3
 8008e28:	08025658 	.word	0x08025658
 8008e2c:	0802568c 	.word	0x0802568c
 8008e30:	080256bc 	.word	0x080256bc

08008e34 <IS_MLK_EIPC_TIME_MATCHING>:

uint8_t IS_MLK_EIPC_TIME_MATCHING(uint8_t Source_Index)
{
 8008e34:	b590      	push	{r4, r7, lr}
 8008e36:	b087      	sub	sp, #28
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	71fb      	strb	r3, [r7, #7]
	uint32_t Hitachi_Frame = 0;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	613b      	str	r3, [r7, #16]
	uint32_t Self_Frame = 0;
 8008e42:	2300      	movs	r3, #0
 8008e44:	60fb      	str	r3, [r7, #12]
	uint8_t Return_Value = 1;
 8008e46:	2301      	movs	r3, #1
 8008e48:	75fb      	strb	r3, [r7, #23]

	if( (EI_data.Hitachi_st.ClockMaster[Source_Index] == SET) && (Is_GPS_Packet_Received == 1) )
 8008e4a:	79fb      	ldrb	r3, [r7, #7]
 8008e4c:	4a39      	ldr	r2, [pc, #228]	; (8008f34 <IS_MLK_EIPC_TIME_MATCHING+0x100>)
 8008e4e:	4413      	add	r3, r2
 8008e50:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008e54:	2b01      	cmp	r3, #1
 8008e56:	d168      	bne.n	8008f2a <IS_MLK_EIPC_TIME_MATCHING+0xf6>
 8008e58:	4b37      	ldr	r3, [pc, #220]	; (8008f38 <IS_MLK_EIPC_TIME_MATCHING+0x104>)
 8008e5a:	781b      	ldrb	r3, [r3, #0]
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	d164      	bne.n	8008f2a <IS_MLK_EIPC_TIME_MATCHING+0xf6>
	{
		Hitachi_Frame = ( ( (bcdToDec(HITACHI_time_Stamp_st[Source_Index].hh) * 3600) +
 8008e60:	79fa      	ldrb	r2, [r7, #7]
 8008e62:	4936      	ldr	r1, [pc, #216]	; (8008f3c <IS_MLK_EIPC_TIME_MATCHING+0x108>)
 8008e64:	4613      	mov	r3, r2
 8008e66:	005b      	lsls	r3, r3, #1
 8008e68:	4413      	add	r3, r2
 8008e6a:	005b      	lsls	r3, r3, #1
 8008e6c:	440b      	add	r3, r1
 8008e6e:	781b      	ldrb	r3, [r3, #0]
 8008e70:	4618      	mov	r0, r3
 8008e72:	f002 fac7 	bl	800b404 <bcdToDec>
 8008e76:	4603      	mov	r3, r0
 8008e78:	461a      	mov	r2, r3
 8008e7a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8008e7e:	fb03 f402 	mul.w	r4, r3, r2
				(bcdToDec(HITACHI_time_Stamp_st[Source_Index].mm) * 60) +
 8008e82:	79fa      	ldrb	r2, [r7, #7]
 8008e84:	492d      	ldr	r1, [pc, #180]	; (8008f3c <IS_MLK_EIPC_TIME_MATCHING+0x108>)
 8008e86:	4613      	mov	r3, r2
 8008e88:	005b      	lsls	r3, r3, #1
 8008e8a:	4413      	add	r3, r2
 8008e8c:	005b      	lsls	r3, r3, #1
 8008e8e:	440b      	add	r3, r1
 8008e90:	3301      	adds	r3, #1
 8008e92:	781b      	ldrb	r3, [r3, #0]
 8008e94:	4618      	mov	r0, r3
 8008e96:	f002 fab5 	bl	800b404 <bcdToDec>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	461a      	mov	r2, r3
 8008e9e:	4613      	mov	r3, r2
 8008ea0:	011b      	lsls	r3, r3, #4
 8008ea2:	1a9b      	subs	r3, r3, r2
 8008ea4:	009b      	lsls	r3, r3, #2
		Hitachi_Frame = ( ( (bcdToDec(HITACHI_time_Stamp_st[Source_Index].hh) * 3600) +
 8008ea6:	441c      	add	r4, r3
				bcdToDec(HITACHI_time_Stamp_st[Source_Index].ss)) + 1);
 8008ea8:	79fa      	ldrb	r2, [r7, #7]
 8008eaa:	4924      	ldr	r1, [pc, #144]	; (8008f3c <IS_MLK_EIPC_TIME_MATCHING+0x108>)
 8008eac:	4613      	mov	r3, r2
 8008eae:	005b      	lsls	r3, r3, #1
 8008eb0:	4413      	add	r3, r2
 8008eb2:	005b      	lsls	r3, r3, #1
 8008eb4:	440b      	add	r3, r1
 8008eb6:	3302      	adds	r3, #2
 8008eb8:	781b      	ldrb	r3, [r3, #0]
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f002 faa2 	bl	800b404 <bcdToDec>
 8008ec0:	4603      	mov	r3, r0
				(bcdToDec(HITACHI_time_Stamp_st[Source_Index].mm) * 60) +
 8008ec2:	4423      	add	r3, r4
				bcdToDec(HITACHI_time_Stamp_st[Source_Index].ss)) + 1);
 8008ec4:	3301      	adds	r3, #1
		Hitachi_Frame = ( ( (bcdToDec(HITACHI_time_Stamp_st[Source_Index].hh) * 3600) +
 8008ec6:	613b      	str	r3, [r7, #16]

		Get_time();
 8008ec8:	f002 fb98 	bl	800b5fc <Get_time>

		Self_Frame = ( (RTC_Date_time_Dec_st.Hour * 3600) +
 8008ecc:	4b1c      	ldr	r3, [pc, #112]	; (8008f40 <IS_MLK_EIPC_TIME_MATCHING+0x10c>)
 8008ece:	781b      	ldrb	r3, [r3, #0]
 8008ed0:	461a      	mov	r2, r3
 8008ed2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8008ed6:	fb03 f202 	mul.w	r2, r3, r2
				(RTC_Date_time_Dec_st.Mins * 60) +
 8008eda:	4b19      	ldr	r3, [pc, #100]	; (8008f40 <IS_MLK_EIPC_TIME_MATCHING+0x10c>)
 8008edc:	785b      	ldrb	r3, [r3, #1]
 8008ede:	4619      	mov	r1, r3
 8008ee0:	460b      	mov	r3, r1
 8008ee2:	011b      	lsls	r3, r3, #4
 8008ee4:	1a5b      	subs	r3, r3, r1
 8008ee6:	009b      	lsls	r3, r3, #2
		Self_Frame = ( (RTC_Date_time_Dec_st.Hour * 3600) +
 8008ee8:	4413      	add	r3, r2
				(RTC_Date_time_Dec_st.Secs) + 1);
 8008eea:	4a15      	ldr	r2, [pc, #84]	; (8008f40 <IS_MLK_EIPC_TIME_MATCHING+0x10c>)
 8008eec:	7892      	ldrb	r2, [r2, #2]
				(RTC_Date_time_Dec_st.Mins * 60) +
 8008eee:	4413      	add	r3, r2
				(RTC_Date_time_Dec_st.Secs) + 1);
 8008ef0:	3301      	adds	r3, #1
		Self_Frame = ( (RTC_Date_time_Dec_st.Hour * 3600) +
 8008ef2:	60fb      	str	r3, [r7, #12]


		if(abs(Hitachi_Frame - Self_Frame) > 1)
 8008ef4:	693a      	ldr	r2, [r7, #16]
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	1ad3      	subs	r3, r2, r3
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	bfb8      	it	lt
 8008efe:	425b      	neglt	r3, r3
 8008f00:	2b01      	cmp	r3, #1
 8008f02:	dd12      	ble.n	8008f2a <IS_MLK_EIPC_TIME_MATCHING+0xf6>
		{
			printf("Time Difference %lu Seconds found in MLK & EIPC for Peer:%lu\n",labs(Hitachi_Frame - Self_Frame),EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8008f04:	693a      	ldr	r2, [r7, #16]
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	1ad3      	subs	r3, r2, r3
 8008f0a:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8008f0e:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8008f12:	79fb      	ldrb	r3, [r7, #7]
 8008f14:	4a07      	ldr	r2, [pc, #28]	; (8008f34 <IS_MLK_EIPC_TIME_MATCHING+0x100>)
 8008f16:	3366      	adds	r3, #102	; 0x66
 8008f18:	009b      	lsls	r3, r3, #2
 8008f1a:	4413      	add	r3, r2
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	461a      	mov	r2, r3
 8008f20:	4808      	ldr	r0, [pc, #32]	; (8008f44 <IS_MLK_EIPC_TIME_MATCHING+0x110>)
 8008f22:	f019 fdeb 	bl	8022afc <iprintf>
			Return_Value  = 0;
 8008f26:	2300      	movs	r3, #0
 8008f28:	75fb      	strb	r3, [r7, #23]
		}
	}

	return Return_Value;
 8008f2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	371c      	adds	r7, #28
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd90      	pop	{r4, r7, pc}
 8008f34:	20000304 	.word	0x20000304
 8008f38:	20000e78 	.word	0x20000e78
 8008f3c:	20001194 	.word	0x20001194
 8008f40:	20002894 	.word	0x20002894
 8008f44:	080256c8 	.word	0x080256c8

08008f48 <Check_All_Peers>:

void Check_All_Peers(void)
{
 8008f48:	b590      	push	{r4, r7, lr}
 8008f4a:	b083      	sub	sp, #12
 8008f4c:	af00      	add	r7, sp, #0
	static uint32_t PrevLinkFailClk[MAX_PEER_CONNECTIONS] = {0,};

	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008f4e:	2300      	movs	r3, #0
 8008f50:	71fb      	strb	r3, [r7, #7]
 8008f52:	e045      	b.n	8008fe0 <Check_All_Peers+0x98>
	{
		Check_Vital_CRC(Traverser);
 8008f54:	79fb      	ldrb	r3, [r7, #7]
 8008f56:	4618      	mov	r0, r3
 8008f58:	f7fe fdbe 	bl	8007ad8 <Check_Vital_CRC>

		if( (HAL_Elaps_Ticks(Hitachi_clk_flags_st[Traverser].Link_EstablishClk)) > EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Traverser])
 8008f5c:	79fa      	ldrb	r2, [r7, #7]
 8008f5e:	4926      	ldr	r1, [pc, #152]	; (8008ff8 <Check_All_Peers+0xb0>)
 8008f60:	4613      	mov	r3, r2
 8008f62:	005b      	lsls	r3, r3, #1
 8008f64:	4413      	add	r3, r2
 8008f66:	009b      	lsls	r3, r3, #2
 8008f68:	440b      	add	r3, r1
 8008f6a:	3304      	adds	r3, #4
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f005 ffd0 	bl	800ef14 <HAL_Elaps_Ticks>
 8008f74:	4602      	mov	r2, r0
 8008f76:	79fb      	ldrb	r3, [r7, #7]
 8008f78:	4920      	ldr	r1, [pc, #128]	; (8008ffc <Check_All_Peers+0xb4>)
 8008f7a:	338a      	adds	r3, #138	; 0x8a
 8008f7c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008f80:	429a      	cmp	r2, r3
 8008f82:	d92a      	bls.n	8008fda <Check_All_Peers+0x92>
		{
			if((Hitachi_clk_flags_st[Traverser].Link_EstablishFlag == SET) && (PrevLinkFailClk[Traverser] != Hitachi_clk_flags_st[Traverser].Link_EstablishClk) )
 8008f84:	79fa      	ldrb	r2, [r7, #7]
 8008f86:	491c      	ldr	r1, [pc, #112]	; (8008ff8 <Check_All_Peers+0xb0>)
 8008f88:	4613      	mov	r3, r2
 8008f8a:	005b      	lsls	r3, r3, #1
 8008f8c:	4413      	add	r3, r2
 8008f8e:	009b      	lsls	r3, r3, #2
 8008f90:	440b      	add	r3, r1
 8008f92:	3301      	adds	r3, #1
 8008f94:	781b      	ldrb	r3, [r3, #0]
 8008f96:	2b01      	cmp	r3, #1
 8008f98:	d11f      	bne.n	8008fda <Check_All_Peers+0x92>
 8008f9a:	79fb      	ldrb	r3, [r7, #7]
 8008f9c:	4a18      	ldr	r2, [pc, #96]	; (8009000 <Check_All_Peers+0xb8>)
 8008f9e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008fa2:	79fa      	ldrb	r2, [r7, #7]
 8008fa4:	4814      	ldr	r0, [pc, #80]	; (8008ff8 <Check_All_Peers+0xb0>)
 8008fa6:	4613      	mov	r3, r2
 8008fa8:	005b      	lsls	r3, r3, #1
 8008faa:	4413      	add	r3, r2
 8008fac:	009b      	lsls	r3, r3, #2
 8008fae:	4403      	add	r3, r0
 8008fb0:	3304      	adds	r3, #4
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4299      	cmp	r1, r3
 8008fb6:	d010      	beq.n	8008fda <Check_All_Peers+0x92>
			{
				Hitachi_clk_flags_st[Traverser].Link_EstablishFlag = CLEAR;
 8008fb8:	79fa      	ldrb	r2, [r7, #7]
 8008fba:	490f      	ldr	r1, [pc, #60]	; (8008ff8 <Check_All_Peers+0xb0>)
 8008fbc:	4613      	mov	r3, r2
 8008fbe:	005b      	lsls	r3, r3, #1
 8008fc0:	4413      	add	r3, r2
 8008fc2:	009b      	lsls	r3, r3, #2
 8008fc4:	440b      	add	r3, r1
 8008fc6:	3301      	adds	r3, #1
 8008fc8:	2200      	movs	r2, #0
 8008fca:	701a      	strb	r2, [r3, #0]
				PrevLinkFailClk[Traverser] = HAL_GetTick();
 8008fcc:	79fc      	ldrb	r4, [r7, #7]
 8008fce:	f00c fd8b 	bl	8015ae8 <HAL_GetTick>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	4a0a      	ldr	r2, [pc, #40]	; (8009000 <Check_All_Peers+0xb8>)
 8008fd6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008fda:	79fb      	ldrb	r3, [r7, #7]
 8008fdc:	3301      	adds	r3, #1
 8008fde:	71fb      	strb	r3, [r7, #7]
 8008fe0:	4b06      	ldr	r3, [pc, #24]	; (8008ffc <Check_All_Peers+0xb4>)
 8008fe2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008fe6:	79fa      	ldrb	r2, [r7, #7]
 8008fe8:	429a      	cmp	r2, r3
 8008fea:	d3b3      	bcc.n	8008f54 <Check_All_Peers+0xc>
			}
		}
	}
}
 8008fec:	bf00      	nop
 8008fee:	bf00      	nop
 8008ff0:	370c      	adds	r7, #12
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd90      	pop	{r4, r7, pc}
 8008ff6:	bf00      	nop
 8008ff8:	20001cd4 	.word	0x20001cd4
 8008ffc:	20000304 	.word	0x20000304
 8009000:	2000212c 	.word	0x2000212c

08009004 <Check_for_RelayMisMatch>:

void Check_for_RelayMisMatch(void)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b082      	sub	sp, #8
 8009008:	af00      	add	r7, sp, #0
	static uint32_t Check_Clk = 0;

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 800900a:	4949      	ldr	r1, [pc, #292]	; (8009130 <Check_for_RelayMisMatch+0x12c>)
 800900c:	4849      	ldr	r0, [pc, #292]	; (8009134 <Check_for_RelayMisMatch+0x130>)
 800900e:	f7f7 f917 	bl	8000240 <strcmp>
 8009012:	4603      	mov	r3, r0
 8009014:	2b00      	cmp	r3, #0
 8009016:	f000 8086 	beq.w	8009126 <Check_for_RelayMisMatch+0x122>
	{
		return;
	}


	if(HAL_Elaps_Ticks(Check_Clk) > TWO_HUNDRED_MS )
 800901a:	4b47      	ldr	r3, [pc, #284]	; (8009138 <Check_for_RelayMisMatch+0x134>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	4618      	mov	r0, r3
 8009020:	f005 ff78 	bl	800ef14 <HAL_Elaps_Ticks>
 8009024:	4603      	mov	r3, r0
 8009026:	2bc8      	cmp	r3, #200	; 0xc8
 8009028:	d97e      	bls.n	8009128 <Check_for_RelayMisMatch+0x124>
	{
		for(uint8_t Traverser = 0;Traverser <EI_data.Hitachi_st.PeersCnt;++Traverser)
 800902a:	2300      	movs	r3, #0
 800902c:	71fb      	strb	r3, [r7, #7]
 800902e:	e06e      	b.n	800910e <Check_for_RelayMisMatch+0x10a>
		{
			if( (OtherCardLink_Flag[Traverser] == SET) && (Link_Flag[Traverser] == CLEAR))
 8009030:	79fb      	ldrb	r3, [r7, #7]
 8009032:	4a42      	ldr	r2, [pc, #264]	; (800913c <Check_for_RelayMisMatch+0x138>)
 8009034:	5cd3      	ldrb	r3, [r2, r3]
 8009036:	2b01      	cmp	r3, #1
 8009038:	d116      	bne.n	8009068 <Check_for_RelayMisMatch+0x64>
 800903a:	79fb      	ldrb	r3, [r7, #7]
 800903c:	4a40      	ldr	r2, [pc, #256]	; (8009140 <Check_for_RelayMisMatch+0x13c>)
 800903e:	5cd3      	ldrb	r3, [r2, r3]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d111      	bne.n	8009068 <Check_for_RelayMisMatch+0x64>
			{
				//				printf("This Card Link is Clear and Other Link is SET for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
				//				printf("Copying from Other Card\n");
				memcpy(&Main_Relays_st[Traverser],&OtherCard_Relays_st[Traverser],sizeof(RELAYS_t));
 8009044:	79fa      	ldrb	r2, [r7, #7]
 8009046:	4613      	mov	r3, r2
 8009048:	009b      	lsls	r3, r3, #2
 800904a:	4413      	add	r3, r2
 800904c:	009b      	lsls	r3, r3, #2
 800904e:	4a3d      	ldr	r2, [pc, #244]	; (8009144 <Check_for_RelayMisMatch+0x140>)
 8009050:	1898      	adds	r0, r3, r2
 8009052:	79fa      	ldrb	r2, [r7, #7]
 8009054:	4613      	mov	r3, r2
 8009056:	009b      	lsls	r3, r3, #2
 8009058:	4413      	add	r3, r2
 800905a:	009b      	lsls	r3, r3, #2
 800905c:	4a3a      	ldr	r2, [pc, #232]	; (8009148 <Check_for_RelayMisMatch+0x144>)
 800905e:	4413      	add	r3, r2
 8009060:	2214      	movs	r2, #20
 8009062:	4619      	mov	r1, r3
 8009064:	f019 fc3a 	bl	80228dc <memcpy>
				//				printf("Self CRC:%04x\n",Main_Relays_st[Traverser].RelayIPS_CRC);
			}

			if(Main_Relays_st[Traverser].RelayIPS_CRC !=  OtherCard_Relays_st[Traverser].RelayIPS_CRC)
 8009068:	79fa      	ldrb	r2, [r7, #7]
 800906a:	4936      	ldr	r1, [pc, #216]	; (8009144 <Check_for_RelayMisMatch+0x140>)
 800906c:	4613      	mov	r3, r2
 800906e:	009b      	lsls	r3, r3, #2
 8009070:	4413      	add	r3, r2
 8009072:	009b      	lsls	r3, r3, #2
 8009074:	440b      	add	r3, r1
 8009076:	3312      	adds	r3, #18
 8009078:	8819      	ldrh	r1, [r3, #0]
 800907a:	79fa      	ldrb	r2, [r7, #7]
 800907c:	4832      	ldr	r0, [pc, #200]	; (8009148 <Check_for_RelayMisMatch+0x144>)
 800907e:	4613      	mov	r3, r2
 8009080:	009b      	lsls	r3, r3, #2
 8009082:	4413      	add	r3, r2
 8009084:	009b      	lsls	r3, r3, #2
 8009086:	4403      	add	r3, r0
 8009088:	3312      	adds	r3, #18
 800908a:	881b      	ldrh	r3, [r3, #0]
 800908c:	4299      	cmp	r1, r3
 800908e:	d034      	beq.n	80090fa <Check_for_RelayMisMatch+0xf6>
			{
				/* If Signals are Recently updated we are waiting to check CRC after ONE_SEC */
				if(HAL_Elaps_Ticks(Last_Vital_Received_Clk[Traverser]) < ONE_SEC)
 8009090:	79fb      	ldrb	r3, [r7, #7]
 8009092:	4a2e      	ldr	r2, [pc, #184]	; (800914c <Check_for_RelayMisMatch+0x148>)
 8009094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009098:	4618      	mov	r0, r3
 800909a:	f005 ff3b 	bl	800ef14 <HAL_Elaps_Ticks>
 800909e:	4603      	mov	r3, r0
 80090a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80090a4:	d32f      	bcc.n	8009106 <Check_for_RelayMisMatch+0x102>
				{
					continue;
				}
				else
				{
					printf("Peer:%lu ",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
 80090a6:	79fb      	ldrb	r3, [r7, #7]
 80090a8:	4a29      	ldr	r2, [pc, #164]	; (8009150 <Check_for_RelayMisMatch+0x14c>)
 80090aa:	3366      	adds	r3, #102	; 0x66
 80090ac:	009b      	lsls	r3, r3, #2
 80090ae:	4413      	add	r3, r2
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	4619      	mov	r1, r3
 80090b4:	4827      	ldr	r0, [pc, #156]	; (8009154 <Check_for_RelayMisMatch+0x150>)
 80090b6:	f019 fd21 	bl	8022afc <iprintf>
					printf("SelfCRC:%04x ",Main_Relays_st[Traverser].RelayIPS_CRC);
 80090ba:	79fa      	ldrb	r2, [r7, #7]
 80090bc:	4921      	ldr	r1, [pc, #132]	; (8009144 <Check_for_RelayMisMatch+0x140>)
 80090be:	4613      	mov	r3, r2
 80090c0:	009b      	lsls	r3, r3, #2
 80090c2:	4413      	add	r3, r2
 80090c4:	009b      	lsls	r3, r3, #2
 80090c6:	440b      	add	r3, r1
 80090c8:	3312      	adds	r3, #18
 80090ca:	881b      	ldrh	r3, [r3, #0]
 80090cc:	4619      	mov	r1, r3
 80090ce:	4822      	ldr	r0, [pc, #136]	; (8009158 <Check_for_RelayMisMatch+0x154>)
 80090d0:	f019 fd14 	bl	8022afc <iprintf>
					printf("OtherCRC:%04x\n",OtherCard_Relays_st[Traverser].RelayIPS_CRC);
 80090d4:	79fa      	ldrb	r2, [r7, #7]
 80090d6:	491c      	ldr	r1, [pc, #112]	; (8009148 <Check_for_RelayMisMatch+0x144>)
 80090d8:	4613      	mov	r3, r2
 80090da:	009b      	lsls	r3, r3, #2
 80090dc:	4413      	add	r3, r2
 80090de:	009b      	lsls	r3, r3, #2
 80090e0:	440b      	add	r3, r1
 80090e2:	3312      	adds	r3, #18
 80090e4:	881b      	ldrh	r3, [r3, #0]
 80090e6:	4619      	mov	r1, r3
 80090e8:	481c      	ldr	r0, [pc, #112]	; (800915c <Check_for_RelayMisMatch+0x158>)
 80090ea:	f019 fd07 	bl	8022afc <iprintf>

					MisMatchFlag[Traverser] = SET;
 80090ee:	79fb      	ldrb	r3, [r7, #7]
 80090f0:	4a1b      	ldr	r2, [pc, #108]	; (8009160 <Check_for_RelayMisMatch+0x15c>)
 80090f2:	2101      	movs	r1, #1
 80090f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80090f8:	e006      	b.n	8009108 <Check_for_RelayMisMatch+0x104>
					//					Tx_Peer_Index_To_SignalReq = 0xff;
				}
			}
			else
			{
				MisMatchFlag[Traverser] = CLEAR; /* If both Relay CRC is Matching MisMatch will be CLEAR */
 80090fa:	79fb      	ldrb	r3, [r7, #7]
 80090fc:	4a18      	ldr	r2, [pc, #96]	; (8009160 <Check_for_RelayMisMatch+0x15c>)
 80090fe:	2100      	movs	r1, #0
 8009100:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8009104:	e000      	b.n	8009108 <Check_for_RelayMisMatch+0x104>
					continue;
 8009106:	bf00      	nop
		for(uint8_t Traverser = 0;Traverser <EI_data.Hitachi_st.PeersCnt;++Traverser)
 8009108:	79fb      	ldrb	r3, [r7, #7]
 800910a:	3301      	adds	r3, #1
 800910c:	71fb      	strb	r3, [r7, #7]
 800910e:	4b10      	ldr	r3, [pc, #64]	; (8009150 <Check_for_RelayMisMatch+0x14c>)
 8009110:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009114:	79fa      	ldrb	r2, [r7, #7]
 8009116:	429a      	cmp	r2, r3
 8009118:	d38a      	bcc.n	8009030 <Check_for_RelayMisMatch+0x2c>
			}
		}
		Check_Clk = HAL_GetTick();
 800911a:	f00c fce5 	bl	8015ae8 <HAL_GetTick>
 800911e:	4603      	mov	r3, r0
 8009120:	4a05      	ldr	r2, [pc, #20]	; (8009138 <Check_for_RelayMisMatch+0x134>)
 8009122:	6013      	str	r3, [r2, #0]
 8009124:	e000      	b.n	8009128 <Check_for_RelayMisMatch+0x124>
		return;
 8009126:	bf00      	nop
	}
}
 8009128:	3708      	adds	r7, #8
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}
 800912e:	bf00      	nop
 8009130:	080242c0 	.word	0x080242c0
 8009134:	20000305 	.word	0x20000305
 8009138:	20002154 	.word	0x20002154
 800913c:	20000f7c 	.word	0x20000f7c
 8009140:	20000f70 	.word	0x20000f70
 8009144:	20001e8c 	.word	0x20001e8c
 8009148:	20001f54 	.word	0x20001f54
 800914c:	20000ee4 	.word	0x20000ee4
 8009150:	20000304 	.word	0x20000304
 8009154:	08025708 	.word	0x08025708
 8009158:	08025714 	.word	0x08025714
 800915c:	08025724 	.word	0x08025724
 8009160:	20000ed0 	.word	0x20000ed0

08009164 <CheckOtherLinkStatus>:

void CheckOtherLinkStatus(uint8_t SourceIndex)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b084      	sub	sp, #16
 8009168:	af00      	add	r7, sp, #0
 800916a:	4603      	mov	r3, r0
 800916c:	71fb      	strb	r3, [r7, #7]
	uint32_t CurTicks = HAL_GetTick();
 800916e:	f00c fcbb 	bl	8015ae8 <HAL_GetTick>
 8009172:	60f8      	str	r0, [r7, #12]

	if(Rx_Ei_self_sharing_st[SourceIndex].LinkEstablishFlag == SET)
 8009174:	79fa      	ldrb	r2, [r7, #7]
 8009176:	492a      	ldr	r1, [pc, #168]	; (8009220 <CheckOtherLinkStatus+0xbc>)
 8009178:	4613      	mov	r3, r2
 800917a:	005b      	lsls	r3, r3, #1
 800917c:	4413      	add	r3, r2
 800917e:	00db      	lsls	r3, r3, #3
 8009180:	440b      	add	r3, r1
 8009182:	3302      	adds	r3, #2
 8009184:	781b      	ldrb	r3, [r3, #0]
 8009186:	2b01      	cmp	r3, #1
 8009188:	d11d      	bne.n	80091c6 <CheckOtherLinkStatus+0x62>
	{
		OtherCardLink_Establish_Clock[SourceIndex] = CurTicks;
 800918a:	79fb      	ldrb	r3, [r7, #7]
 800918c:	4925      	ldr	r1, [pc, #148]	; (8009224 <CheckOtherLinkStatus+0xc0>)
 800918e:	68fa      	ldr	r2, [r7, #12]
 8009190:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Other_Hitachi_clk_flags_st[SourceIndex].Link_EstablishClk = CurTicks;
 8009194:	79fa      	ldrb	r2, [r7, #7]
 8009196:	4924      	ldr	r1, [pc, #144]	; (8009228 <CheckOtherLinkStatus+0xc4>)
 8009198:	4613      	mov	r3, r2
 800919a:	005b      	lsls	r3, r3, #1
 800919c:	4413      	add	r3, r2
 800919e:	009b      	lsls	r3, r3, #2
 80091a0:	440b      	add	r3, r1
 80091a2:	3304      	adds	r3, #4
 80091a4:	68fa      	ldr	r2, [r7, #12]
 80091a6:	601a      	str	r2, [r3, #0]
		Other_Hitachi_clk_flags_st[SourceIndex].Link_EstablishFlag = SET;
 80091a8:	79fa      	ldrb	r2, [r7, #7]
 80091aa:	491f      	ldr	r1, [pc, #124]	; (8009228 <CheckOtherLinkStatus+0xc4>)
 80091ac:	4613      	mov	r3, r2
 80091ae:	005b      	lsls	r3, r3, #1
 80091b0:	4413      	add	r3, r2
 80091b2:	009b      	lsls	r3, r3, #2
 80091b4:	440b      	add	r3, r1
 80091b6:	3301      	adds	r3, #1
 80091b8:	2201      	movs	r2, #1
 80091ba:	701a      	strb	r2, [r3, #0]
		OtherCardLink_Flag[SourceIndex] = SET;
 80091bc:	79fb      	ldrb	r3, [r7, #7]
 80091be:	4a1b      	ldr	r2, [pc, #108]	; (800922c <CheckOtherLinkStatus+0xc8>)
 80091c0:	2101      	movs	r1, #1
 80091c2:	54d1      	strb	r1, [r2, r3]
 80091c4:	e017      	b.n	80091f6 <CheckOtherLinkStatus+0x92>
		/* Checking the Link Status */
	}
	else
	{
		OtherCardLink_Flag[SourceIndex] = CLEAR;
 80091c6:	79fb      	ldrb	r3, [r7, #7]
 80091c8:	4a18      	ldr	r2, [pc, #96]	; (800922c <CheckOtherLinkStatus+0xc8>)
 80091ca:	2100      	movs	r1, #0
 80091cc:	54d1      	strb	r1, [r2, r3]
		Other_Hitachi_clk_flags_st[SourceIndex].Link_FailClk = CurTicks;
 80091ce:	79fa      	ldrb	r2, [r7, #7]
 80091d0:	4915      	ldr	r1, [pc, #84]	; (8009228 <CheckOtherLinkStatus+0xc4>)
 80091d2:	4613      	mov	r3, r2
 80091d4:	005b      	lsls	r3, r3, #1
 80091d6:	4413      	add	r3, r2
 80091d8:	009b      	lsls	r3, r3, #2
 80091da:	440b      	add	r3, r1
 80091dc:	3308      	adds	r3, #8
 80091de:	68fa      	ldr	r2, [r7, #12]
 80091e0:	601a      	str	r2, [r3, #0]
		Other_Hitachi_clk_flags_st[SourceIndex].Link_EstablishFlag = CLEAR;
 80091e2:	79fa      	ldrb	r2, [r7, #7]
 80091e4:	4910      	ldr	r1, [pc, #64]	; (8009228 <CheckOtherLinkStatus+0xc4>)
 80091e6:	4613      	mov	r3, r2
 80091e8:	005b      	lsls	r3, r3, #1
 80091ea:	4413      	add	r3, r2
 80091ec:	009b      	lsls	r3, r3, #2
 80091ee:	440b      	add	r3, r1
 80091f0:	3301      	adds	r3, #1
 80091f2:	2200      	movs	r2, #0
 80091f4:	701a      	strb	r2, [r3, #0]
	}


	if(Rx_Ei_self_sharing_st[SourceIndex].Msg_Rcv_Flag == SET)
 80091f6:	79fa      	ldrb	r2, [r7, #7]
 80091f8:	4909      	ldr	r1, [pc, #36]	; (8009220 <CheckOtherLinkStatus+0xbc>)
 80091fa:	4613      	mov	r3, r2
 80091fc:	005b      	lsls	r3, r3, #1
 80091fe:	4413      	add	r3, r2
 8009200:	00db      	lsls	r3, r3, #3
 8009202:	440b      	add	r3, r1
 8009204:	3301      	adds	r3, #1
 8009206:	781b      	ldrb	r3, [r3, #0]
 8009208:	2b01      	cmp	r3, #1
 800920a:	d104      	bne.n	8009216 <CheckOtherLinkStatus+0xb2>
	{
		OtherCardReceptionClk[SourceIndex] = CurTicks;
 800920c:	79fb      	ldrb	r3, [r7, #7]
 800920e:	4908      	ldr	r1, [pc, #32]	; (8009230 <CheckOtherLinkStatus+0xcc>)
 8009210:	68fa      	ldr	r2, [r7, #12]
 8009212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}


}
 8009216:	bf00      	nop
 8009218:	3710      	adds	r7, #16
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}
 800921e:	bf00      	nop
 8009220:	20001770 	.word	0x20001770
 8009224:	20000f48 	.word	0x20000f48
 8009228:	20001d4c 	.word	0x20001d4c
 800922c:	20000f7c 	.word	0x20000f7c
 8009230:	20000ea8 	.word	0x20000ea8

08009234 <SendRelay2_Other>:

void SendRelay2_Other(void)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	af00      	add	r7, sp, #0
	static uint32_t RelaySendClk =0;
	static uint32_t Traverser = 0;

	if(HAL_Elaps_Ticks(RelaySendClk) > ONE_SEC)
 8009238:	4b1a      	ldr	r3, [pc, #104]	; (80092a4 <SendRelay2_Other+0x70>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4618      	mov	r0, r3
 800923e:	f005 fe69 	bl	800ef14 <HAL_Elaps_Ticks>
 8009242:	4603      	mov	r3, r0
 8009244:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009248:	d92a      	bls.n	80092a0 <SendRelay2_Other+0x6c>
	{

		memset(&Tx_Temp_Main_Relays_st,0,sizeof(RELAYS_t));
 800924a:	2214      	movs	r2, #20
 800924c:	2100      	movs	r1, #0
 800924e:	4816      	ldr	r0, [pc, #88]	; (80092a8 <SendRelay2_Other+0x74>)
 8009250:	f019 fb6c 	bl	802292c <memset>
		memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Traverser],sizeof(RELAYS_t));
 8009254:	4b15      	ldr	r3, [pc, #84]	; (80092ac <SendRelay2_Other+0x78>)
 8009256:	681a      	ldr	r2, [r3, #0]
 8009258:	4613      	mov	r3, r2
 800925a:	009b      	lsls	r3, r3, #2
 800925c:	4413      	add	r3, r2
 800925e:	009b      	lsls	r3, r3, #2
 8009260:	4a13      	ldr	r2, [pc, #76]	; (80092b0 <SendRelay2_Other+0x7c>)
 8009262:	4413      	add	r3, r2
 8009264:	2214      	movs	r2, #20
 8009266:	4619      	mov	r1, r3
 8009268:	480f      	ldr	r0, [pc, #60]	; (80092a8 <SendRelay2_Other+0x74>)
 800926a:	f019 fb37 	bl	80228dc <memcpy>
		//			printf("I:%u ",Tx_Temp_Main_Relays_st.No_ofIps);
		//			printf("C:%04X\n",Tx_Temp_Main_Relays_st.RelayIPS_CRC);
		//		}

#ifdef EI_1
		TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 800926e:	f240 2007 	movw	r0, #519	; 0x207
 8009272:	f006 fc09 	bl	800fa88 <TransmitCanPkt>
#endif
#ifdef EI_2
		TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif

		++Traverser;
 8009276:	4b0d      	ldr	r3, [pc, #52]	; (80092ac <SendRelay2_Other+0x78>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	3301      	adds	r3, #1
 800927c:	4a0b      	ldr	r2, [pc, #44]	; (80092ac <SendRelay2_Other+0x78>)
 800927e:	6013      	str	r3, [r2, #0]
		if(Traverser == EI_data.Hitachi_st.PeersCnt)
 8009280:	4b0c      	ldr	r3, [pc, #48]	; (80092b4 <SendRelay2_Other+0x80>)
 8009282:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009286:	461a      	mov	r2, r3
 8009288:	4b08      	ldr	r3, [pc, #32]	; (80092ac <SendRelay2_Other+0x78>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	429a      	cmp	r2, r3
 800928e:	d102      	bne.n	8009296 <SendRelay2_Other+0x62>
		{
			Traverser = 0;
 8009290:	4b06      	ldr	r3, [pc, #24]	; (80092ac <SendRelay2_Other+0x78>)
 8009292:	2200      	movs	r2, #0
 8009294:	601a      	str	r2, [r3, #0]
		}

		RelaySendClk = HAL_GetTick();
 8009296:	f00c fc27 	bl	8015ae8 <HAL_GetTick>
 800929a:	4603      	mov	r3, r0
 800929c:	4a01      	ldr	r2, [pc, #4]	; (80092a4 <SendRelay2_Other+0x70>)
 800929e:	6013      	str	r3, [r2, #0]
	}
}
 80092a0:	bf00      	nop
 80092a2:	bd80      	pop	{r7, pc}
 80092a4:	20002158 	.word	0x20002158
 80092a8:	2000201c 	.word	0x2000201c
 80092ac:	2000215c 	.word	0x2000215c
 80092b0:	20001e8c 	.word	0x20001e8c
 80092b4:	20000304 	.word	0x20000304

080092b8 <Process_HitachiEI>:

void Process_HitachiEI(void)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	af00      	add	r7, sp, #0
	while(1)
	{
		MX_LWIP_Process(); //This funtion will get the Ethernet data.
 80092bc:	f013 ff02 	bl	801d0c4 <MX_LWIP_Process>

		HAL_IWDG_Refresh(&hiwdg);
 80092c0:	481a      	ldr	r0, [pc, #104]	; (800932c <Process_HitachiEI+0x74>)
 80092c2:	f00f ff77 	bl	80191b4 <HAL_IWDG_Refresh>

		Feed_wdt();
 80092c6:	f00a facb 	bl	8013860 <Feed_wdt>

		readCanToStructs();
 80092ca:	f007 f8b9 	bl	8010440 <readCanToStructs>

		Check_for_cmd();
 80092ce:	f7f7 fc43 	bl	8000b58 <Check_for_cmd>

		Process_Hitachi_Packets_Eth();
 80092d2:	f7f7 fead 	bl	8001030 <Process_Hitachi_Packets_Eth>

		Process_Hitachi_Packets_Com();
 80092d6:	f7f7 ff19 	bl	800110c <Process_Hitachi_Packets_Com>

		Process_Send_Signals_2_MIE();
 80092da:	f7fe fed5 	bl	8008088 <Process_Send_Signals_2_MIE>

		Send_Self_Sharing();
 80092de:	f7fe fe0d 	bl	8007efc <Send_Self_Sharing>

		Detect_CAN_Xchange_Failure();
 80092e2:	f7fe fe6f 	bl	8007fc4 <Detect_CAN_Xchange_Failure>

		//		Send_Health_Status();

		CheckLinkEstablishTimeout();
 80092e6:	f7fe fd93 	bl	8007e10 <CheckLinkEstablishTimeout>

		Check_All_Peers();
 80092ea:	f7ff fe2d 	bl	8008f48 <Check_All_Peers>

		Send_Vital_Msg_After_Rx_VITAL();
 80092ee:	f7ff fce3 	bl	8008cb8 <Send_Vital_Msg_After_Rx_VITAL>

		Send_Init_After_Timeout();
 80092f2:	f7ff fc67 	bl	8008bc4 <Send_Init_After_Timeout>

		Check_Recv_Status_fail();
 80092f6:	f7ff fd2f 	bl	8008d58 <Check_Recv_Status_fail>

		Update_Time_Every_Sec();
 80092fa:	f002 f9e1 	bl	800b6c0 <Update_Time_Every_Sec>

		Check_for_RelayMisMatch();
 80092fe:	f7ff fe81 	bl	8009004 <Check_for_RelayMisMatch>

		SendRelay2_Other();
 8009302:	f7ff ff97 	bl	8009234 <SendRelay2_Other>
		//Dats_Request_Flag = CheckDocklightForRqst(ISP_PORT);

		Print_BuildDat_Details();
 8009306:	f00b fbbd 	bl	8014a84 <Print_BuildDat_Details>

		if(Dats_Request_Flag > 0)
 800930a:	4b09      	ldr	r3, [pc, #36]	; (8009330 <Process_HitachiEI+0x78>)
 800930c:	781b      	ldrb	r3, [r3, #0]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d003      	beq.n	800931a <Process_HitachiEI+0x62>
		{
			gucFlagUpdate = 3;
 8009312:	4b08      	ldr	r3, [pc, #32]	; (8009334 <Process_HitachiEI+0x7c>)
 8009314:	2203      	movs	r2, #3
 8009316:	701a      	strb	r2, [r3, #0]
			break;
 8009318:	e002      	b.n	8009320 <Process_HitachiEI+0x68>
		}

		Enable_UART_Interrupts();
 800931a:	f00c f9d3 	bl	80156c4 <Enable_UART_Interrupts>
		MX_LWIP_Process(); //This funtion will get the Ethernet data.
 800931e:	e7cd      	b.n	80092bc <Process_HitachiEI+0x4>

	}

	while(1)
	{
		Data_Processing();
 8009320:	f00b faae 	bl	8014880 <Data_Processing>
		HAL_IWDG_Refresh(&hiwdg);
 8009324:	4801      	ldr	r0, [pc, #4]	; (800932c <Process_HitachiEI+0x74>)
 8009326:	f00f ff45 	bl	80191b4 <HAL_IWDG_Refresh>
		Data_Processing();
 800932a:	e7f9      	b.n	8009320 <Process_HitachiEI+0x68>
 800932c:	20009d1c 	.word	0x20009d1c
 8009330:	20000644 	.word	0x20000644
 8009334:	20000a49 	.word	0x20000a49

08009338 <reset_cause_get>:

/// @brief      Obtain the STM32 system reset cause
/// @param      None
/// @return     The system reset cause
reset_cause_t reset_cause_get(void)
{
 8009338:	b480      	push	{r7}
 800933a:	b083      	sub	sp, #12
 800933c:	af00      	add	r7, sp, #0
    reset_cause_t reset_cause;

    if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST))
 800933e:	4b26      	ldr	r3, [pc, #152]	; (80093d8 <reset_cause_get+0xa0>)
 8009340:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009342:	2b00      	cmp	r3, #0
 8009344:	da02      	bge.n	800934c <reset_cause_get+0x14>
    {
        reset_cause = RESET_CAUSE_LOW_POWER_RESET;
 8009346:	2301      	movs	r3, #1
 8009348:	71fb      	strb	r3, [r7, #7]
 800934a:	e037      	b.n	80093bc <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST))
 800934c:	4b22      	ldr	r3, [pc, #136]	; (80093d8 <reset_cause_get+0xa0>)
 800934e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009350:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009354:	2b00      	cmp	r3, #0
 8009356:	d002      	beq.n	800935e <reset_cause_get+0x26>
    {
        reset_cause = RESET_CAUSE_WINDOW_WATCHDOG_RESET;
 8009358:	2302      	movs	r3, #2
 800935a:	71fb      	strb	r3, [r7, #7]
 800935c:	e02e      	b.n	80093bc <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST))
 800935e:	4b1e      	ldr	r3, [pc, #120]	; (80093d8 <reset_cause_get+0xa0>)
 8009360:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009362:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009366:	2b00      	cmp	r3, #0
 8009368:	d002      	beq.n	8009370 <reset_cause_get+0x38>
    {
        reset_cause = RESET_CAUSE_INDEPENDENT_WATCHDOG_RESET;
 800936a:	2303      	movs	r3, #3
 800936c:	71fb      	strb	r3, [r7, #7]
 800936e:	e025      	b.n	80093bc <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST))
 8009370:	4b19      	ldr	r3, [pc, #100]	; (80093d8 <reset_cause_get+0xa0>)
 8009372:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009374:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009378:	2b00      	cmp	r3, #0
 800937a:	d002      	beq.n	8009382 <reset_cause_get+0x4a>
    {
        // This reset is induced by calling the ARM CMSIS
        // `NVIC_SystemReset()` function!
        reset_cause = RESET_CAUSE_SOFTWARE_RESET;
 800937c:	2304      	movs	r3, #4
 800937e:	71fb      	strb	r3, [r7, #7]
 8009380:	e01c      	b.n	80093bc <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST))
 8009382:	4b15      	ldr	r3, [pc, #84]	; (80093d8 <reset_cause_get+0xa0>)
 8009384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009386:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800938a:	2b00      	cmp	r3, #0
 800938c:	d002      	beq.n	8009394 <reset_cause_get+0x5c>
    {
        reset_cause = RESET_CAUSE_POWER_ON_POWER_DOWN_RESET;
 800938e:	2305      	movs	r3, #5
 8009390:	71fb      	strb	r3, [r7, #7]
 8009392:	e013      	b.n	80093bc <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST))
 8009394:	4b10      	ldr	r3, [pc, #64]	; (80093d8 <reset_cause_get+0xa0>)
 8009396:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009398:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800939c:	2b00      	cmp	r3, #0
 800939e:	d002      	beq.n	80093a6 <reset_cause_get+0x6e>
    {
        reset_cause = RESET_CAUSE_EXTERNAL_RESET_PIN_RESET;
 80093a0:	2306      	movs	r3, #6
 80093a2:	71fb      	strb	r3, [r7, #7]
 80093a4:	e00a      	b.n	80093bc <reset_cause_get+0x84>
    }
    // Needs to come *after* checking the `RCC_FLAG_PORRST` flag in order to
    // ensure first that the reset cause is NOT a POR/PDR reset. See note
    // below.
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST))
 80093a6:	4b0c      	ldr	r3, [pc, #48]	; (80093d8 <reset_cause_get+0xa0>)
 80093a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d002      	beq.n	80093b8 <reset_cause_get+0x80>
    {
        reset_cause = RESET_CAUSE_BROWNOUT_RESET;
 80093b2:	2307      	movs	r3, #7
 80093b4:	71fb      	strb	r3, [r7, #7]
 80093b6:	e001      	b.n	80093bc <reset_cause_get+0x84>
    }
    else
    {
        reset_cause = RESET_CAUSE_UNKNOWN;
 80093b8:	2300      	movs	r3, #0
 80093ba:	71fb      	strb	r3, [r7, #7]
    }

    // Clear all the reset flags or else they will remain set during future
    // resets until system power is fully removed.
    __HAL_RCC_CLEAR_RESET_FLAGS();
 80093bc:	4b06      	ldr	r3, [pc, #24]	; (80093d8 <reset_cause_get+0xa0>)
 80093be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093c0:	4a05      	ldr	r2, [pc, #20]	; (80093d8 <reset_cause_get+0xa0>)
 80093c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80093c6:	6753      	str	r3, [r2, #116]	; 0x74

    return reset_cause;
 80093c8:	79fb      	ldrb	r3, [r7, #7]
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	370c      	adds	r7, #12
 80093ce:	46bd      	mov	sp, r7
 80093d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d4:	4770      	bx	lr
 80093d6:	bf00      	nop
 80093d8:	40023800 	.word	0x40023800

080093dc <reset_cause_get_name>:
char * reset_cause_get_name(reset_cause_t reset_cause)
{
 80093dc:	b480      	push	{r7}
 80093de:	b085      	sub	sp, #20
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	4603      	mov	r3, r0
 80093e4:	71fb      	strb	r3, [r7, #7]
    char * reset_cause_name = "TBD";
 80093e6:	4b1c      	ldr	r3, [pc, #112]	; (8009458 <reset_cause_get_name+0x7c>)
 80093e8:	60fb      	str	r3, [r7, #12]

    switch (reset_cause)
 80093ea:	79fb      	ldrb	r3, [r7, #7]
 80093ec:	2b07      	cmp	r3, #7
 80093ee:	d82b      	bhi.n	8009448 <reset_cause_get_name+0x6c>
 80093f0:	a201      	add	r2, pc, #4	; (adr r2, 80093f8 <reset_cause_get_name+0x1c>)
 80093f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093f6:	bf00      	nop
 80093f8:	08009419 	.word	0x08009419
 80093fc:	0800941f 	.word	0x0800941f
 8009400:	08009425 	.word	0x08009425
 8009404:	0800942b 	.word	0x0800942b
 8009408:	08009431 	.word	0x08009431
 800940c:	08009437 	.word	0x08009437
 8009410:	0800943d 	.word	0x0800943d
 8009414:	08009443 	.word	0x08009443
    {
        case RESET_CAUSE_UNKNOWN:
            reset_cause_name = "UNKNOWN";
 8009418:	4b10      	ldr	r3, [pc, #64]	; (800945c <reset_cause_get_name+0x80>)
 800941a:	60fb      	str	r3, [r7, #12]
            break;
 800941c:	e014      	b.n	8009448 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_LOW_POWER_RESET:
            reset_cause_name = "LOW_POWER_RESET";
 800941e:	4b10      	ldr	r3, [pc, #64]	; (8009460 <reset_cause_get_name+0x84>)
 8009420:	60fb      	str	r3, [r7, #12]
            break;
 8009422:	e011      	b.n	8009448 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_WINDOW_WATCHDOG_RESET:
            reset_cause_name = "WINDOW_WATCHDOG_RESET";
 8009424:	4b0f      	ldr	r3, [pc, #60]	; (8009464 <reset_cause_get_name+0x88>)
 8009426:	60fb      	str	r3, [r7, #12]
            break;
 8009428:	e00e      	b.n	8009448 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_INDEPENDENT_WATCHDOG_RESET:
            reset_cause_name = "INDEPENDENT_WATCHDOG_RESET";
 800942a:	4b0f      	ldr	r3, [pc, #60]	; (8009468 <reset_cause_get_name+0x8c>)
 800942c:	60fb      	str	r3, [r7, #12]
            break;
 800942e:	e00b      	b.n	8009448 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_SOFTWARE_RESET:
            reset_cause_name = "SOFTWARE_RESET";
 8009430:	4b0e      	ldr	r3, [pc, #56]	; (800946c <reset_cause_get_name+0x90>)
 8009432:	60fb      	str	r3, [r7, #12]
            break;
 8009434:	e008      	b.n	8009448 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_POWER_ON_POWER_DOWN_RESET:
            reset_cause_name = "POWER-ON_RESET (POR) / POWER-DOWN_RESET (PDR)";
 8009436:	4b0e      	ldr	r3, [pc, #56]	; (8009470 <reset_cause_get_name+0x94>)
 8009438:	60fb      	str	r3, [r7, #12]
            break;
 800943a:	e005      	b.n	8009448 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_EXTERNAL_RESET_PIN_RESET:
            reset_cause_name = "EXTERNAL_RESET_PIN_RESET";
 800943c:	4b0d      	ldr	r3, [pc, #52]	; (8009474 <reset_cause_get_name+0x98>)
 800943e:	60fb      	str	r3, [r7, #12]
            break;
 8009440:	e002      	b.n	8009448 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_BROWNOUT_RESET:
            reset_cause_name = "BROWNOUT_RESET (BOR)";
 8009442:	4b0d      	ldr	r3, [pc, #52]	; (8009478 <reset_cause_get_name+0x9c>)
 8009444:	60fb      	str	r3, [r7, #12]
            break;
 8009446:	bf00      	nop
    }

    return reset_cause_name;
 8009448:	68fb      	ldr	r3, [r7, #12]
}
 800944a:	4618      	mov	r0, r3
 800944c:	3714      	adds	r7, #20
 800944e:	46bd      	mov	sp, r7
 8009450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009454:	4770      	bx	lr
 8009456:	bf00      	nop
 8009458:	08025734 	.word	0x08025734
 800945c:	08025738 	.word	0x08025738
 8009460:	08025740 	.word	0x08025740
 8009464:	08025750 	.word	0x08025750
 8009468:	08025768 	.word	0x08025768
 800946c:	08025784 	.word	0x08025784
 8009470:	08025794 	.word	0x08025794
 8009474:	080257c4 	.word	0x080257c4
 8009478:	080257e0 	.word	0x080257e0

0800947c <Process_Medha_EI>:
		0xB40BBE37,0xC30C8EA1,0x5A05DF1B,0x2D02EF8D
};


void Process_Medha_EI(void)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	af00      	add	r7, sp, #0
	while(1)
	{
		Print_BuildDat_Details();
 8009480:	f00b fb00 	bl	8014a84 <Print_BuildDat_Details>

		readCanToStructs();
 8009484:	f006 ffdc 	bl	8010440 <readCanToStructs>

		Feed_wdt();
 8009488:	f00a f9ea 	bl	8013860 <Feed_wdt>

		HAL_IWDG_Refresh(&hiwdg);
 800948c:	480f      	ldr	r0, [pc, #60]	; (80094cc <Process_Medha_EI+0x50>)
 800948e:	f00f fe91 	bl	80191b4 <HAL_IWDG_Refresh>

		Medha_EI_Analyser();
 8009492:	f000 f91d 	bl	80096d0 <Medha_EI_Analyser>

		Send_Relay_Statuses_2_MIE();
 8009496:	f000 fed3 	bl	800a240 <Send_Relay_Statuses_2_MIE>

		Process_Clear_Relays();
 800949a:	f000 ff4f 	bl	800a33c <Process_Clear_Relays>

		Send_Data_to_Other();
 800949e:	f001 f811 	bl	800a4c4 <Send_Data_to_Other>

		Process_Data_from_Other();
 80094a2:	f001 f869 	bl	800a578 <Process_Data_from_Other>

		CheckforMedhaCMD();
 80094a6:	f001 fa2f 	bl	800a908 <CheckforMedhaCMD>


		if(Dats_Request_Flag > 0)
 80094aa:	4b09      	ldr	r3, [pc, #36]	; (80094d0 <Process_Medha_EI+0x54>)
 80094ac:	781b      	ldrb	r3, [r3, #0]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d003      	beq.n	80094ba <Process_Medha_EI+0x3e>
		{
			gucFlagUpdate = 3;
 80094b2:	4b08      	ldr	r3, [pc, #32]	; (80094d4 <Process_Medha_EI+0x58>)
 80094b4:	2203      	movs	r2, #3
 80094b6:	701a      	strb	r2, [r3, #0]
			break;
 80094b8:	e002      	b.n	80094c0 <Process_Medha_EI+0x44>
		}

#if FAULT_INJECTION_ENABLED
		Get_Command();
#endif
		Enable_UART_Interrupts();
 80094ba:	f00c f903 	bl	80156c4 <Enable_UART_Interrupts>
		Print_BuildDat_Details();
 80094be:	e7df      	b.n	8009480 <Process_Medha_EI+0x4>
	}
	while(1)
	{
		HAL_IWDG_Refresh(&hiwdg);
 80094c0:	4802      	ldr	r0, [pc, #8]	; (80094cc <Process_Medha_EI+0x50>)
 80094c2:	f00f fe77 	bl	80191b4 <HAL_IWDG_Refresh>
		Data_Processing();
 80094c6:	f00b f9db 	bl	8014880 <Data_Processing>
		HAL_IWDG_Refresh(&hiwdg);
 80094ca:	e7f9      	b.n	80094c0 <Process_Medha_EI+0x44>
 80094cc:	20009d1c 	.word	0x20009d1c
 80094d0:	20000644 	.word	0x20000644
 80094d4:	20000a49 	.word	0x20000a49

080094d8 <Get_Medha_EI_Message>:
	}
}

uint16_t Get_Medha_EI_Message(uint8_t ComPort,uint8_t *Buffer,uint16_t Buffer_Size)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b084      	sub	sp, #16
 80094dc:	af00      	add	r7, sp, #0
 80094de:	4603      	mov	r3, r0
 80094e0:	6039      	str	r1, [r7, #0]
 80094e2:	71fb      	strb	r3, [r7, #7]
 80094e4:	4613      	mov	r3, r2
 80094e6:	80bb      	strh	r3, [r7, #4]
	static uint8_t suc_RcvStatus = ONE;
	uint16_t EI_pktlength=0;
 80094e8:	2300      	movs	r3, #0
 80094ea:	81bb      	strh	r3, [r7, #12]
	static uint8_t suc_RByte = ZERO;
	static uint16_t i = ZERO,j=ZERO;
	static uint16_t sus_CRC = ZERO;
	uint16_t us_ReturnBytes = ZERO;
 80094ec:	2300      	movs	r3, #0
 80094ee:	81fb      	strh	r3, [r7, #14]
	static uint16_t SuiBuffer_Index = ZERO;
	/* If data available on port read and store data */
	while(Com_DataReady(ComPort))
 80094f0:	e0d0      	b.n	8009694 <Get_Medha_EI_Message+0x1bc>
	{
		suc_RByte = Com_Get_Byte(ComPort);
 80094f2:	79fb      	ldrb	r3, [r7, #7]
 80094f4:	4618      	mov	r0, r3
 80094f6:	f00b ffcf 	bl	8015498 <Com_Get_Byte>
 80094fa:	4603      	mov	r3, r0
 80094fc:	461a      	mov	r2, r3
 80094fe:	4b6c      	ldr	r3, [pc, #432]	; (80096b0 <Get_Medha_EI_Message+0x1d8>)
 8009500:	701a      	strb	r2, [r3, #0]
		//printf("0x%02x ",suc_RByte);
		switch(suc_RcvStatus)
 8009502:	4b6c      	ldr	r3, [pc, #432]	; (80096b4 <Get_Medha_EI_Message+0x1dc>)
 8009504:	781b      	ldrb	r3, [r3, #0]
 8009506:	3b01      	subs	r3, #1
 8009508:	2b04      	cmp	r3, #4
 800950a:	f200 80c2 	bhi.w	8009692 <Get_Medha_EI_Message+0x1ba>
 800950e:	a201      	add	r2, pc, #4	; (adr r2, 8009514 <Get_Medha_EI_Message+0x3c>)
 8009510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009514:	08009529 	.word	0x08009529
 8009518:	08009541 	.word	0x08009541
 800951c:	08009693 	.word	0x08009693
 8009520:	0800958d 	.word	0x0800958d
 8009524:	080095e5 	.word	0x080095e5
		{
		case ONE: /* Receive Start of Message */
			if(SOM_MEDHA == suc_RByte)
 8009528:	4b61      	ldr	r3, [pc, #388]	; (80096b0 <Get_Medha_EI_Message+0x1d8>)
 800952a:	781b      	ldrb	r3, [r3, #0]
 800952c:	2b53      	cmp	r3, #83	; 0x53
 800952e:	f040 80b1 	bne.w	8009694 <Get_Medha_EI_Message+0x1bc>
			{
				//Buffer[ZERO] = suc_RByte;
				i = ONE;
 8009532:	4b61      	ldr	r3, [pc, #388]	; (80096b8 <Get_Medha_EI_Message+0x1e0>)
 8009534:	2201      	movs	r2, #1
 8009536:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 8009538:	4b5e      	ldr	r3, [pc, #376]	; (80096b4 <Get_Medha_EI_Message+0x1dc>)
 800953a:	2202      	movs	r2, #2
 800953c:	701a      	strb	r2, [r3, #0]
			}
			break;
 800953e:	e0a9      	b.n	8009694 <Get_Medha_EI_Message+0x1bc>
			switch(suc_RByte)
			{
			//			case THREE:
			//				break;
			default:
				if(EIGHT == i )
 8009540:	4b5d      	ldr	r3, [pc, #372]	; (80096b8 <Get_Medha_EI_Message+0x1e0>)
 8009542:	881b      	ldrh	r3, [r3, #0]
 8009544:	2b08      	cmp	r3, #8
 8009546:	d111      	bne.n	800956c <Get_Medha_EI_Message+0x94>
				{
					Buffer[i] = suc_RByte;
 8009548:	4b5b      	ldr	r3, [pc, #364]	; (80096b8 <Get_Medha_EI_Message+0x1e0>)
 800954a:	881b      	ldrh	r3, [r3, #0]
 800954c:	461a      	mov	r2, r3
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	4413      	add	r3, r2
 8009552:	4a57      	ldr	r2, [pc, #348]	; (80096b0 <Get_Medha_EI_Message+0x1d8>)
 8009554:	7812      	ldrb	r2, [r2, #0]
 8009556:	701a      	strb	r2, [r3, #0]
					i++;
 8009558:	4b57      	ldr	r3, [pc, #348]	; (80096b8 <Get_Medha_EI_Message+0x1e0>)
 800955a:	881b      	ldrh	r3, [r3, #0]
 800955c:	3301      	adds	r3, #1
 800955e:	b29a      	uxth	r2, r3
 8009560:	4b55      	ldr	r3, [pc, #340]	; (80096b8 <Get_Medha_EI_Message+0x1e0>)
 8009562:	801a      	strh	r2, [r3, #0]
					suc_RcvStatus = FOUR;
 8009564:	4b53      	ldr	r3, [pc, #332]	; (80096b4 <Get_Medha_EI_Message+0x1dc>)
 8009566:	2204      	movs	r2, #4
 8009568:	701a      	strb	r2, [r3, #0]
				else
				{
					Buffer[i] = suc_RByte;
					i++;
				}
				break;
 800956a:	e00d      	b.n	8009588 <Get_Medha_EI_Message+0xb0>
					Buffer[i] = suc_RByte;
 800956c:	4b52      	ldr	r3, [pc, #328]	; (80096b8 <Get_Medha_EI_Message+0x1e0>)
 800956e:	881b      	ldrh	r3, [r3, #0]
 8009570:	461a      	mov	r2, r3
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	4413      	add	r3, r2
 8009576:	4a4e      	ldr	r2, [pc, #312]	; (80096b0 <Get_Medha_EI_Message+0x1d8>)
 8009578:	7812      	ldrb	r2, [r2, #0]
 800957a:	701a      	strb	r2, [r3, #0]
					i++;
 800957c:	4b4e      	ldr	r3, [pc, #312]	; (80096b8 <Get_Medha_EI_Message+0x1e0>)
 800957e:	881b      	ldrh	r3, [r3, #0]
 8009580:	3301      	adds	r3, #1
 8009582:	b29a      	uxth	r2, r3
 8009584:	4b4c      	ldr	r3, [pc, #304]	; (80096b8 <Get_Medha_EI_Message+0x1e0>)
 8009586:	801a      	strh	r2, [r3, #0]
				break;
 8009588:	bf00      	nop
			}
			break;
 800958a:	e083      	b.n	8009694 <Get_Medha_EI_Message+0x1bc>
			case FOUR:
				memcpy(&EI_pktlength,&Buffer[i-2],2);
 800958c:	4b4a      	ldr	r3, [pc, #296]	; (80096b8 <Get_Medha_EI_Message+0x1e0>)
 800958e:	881b      	ldrh	r3, [r3, #0]
 8009590:	3b02      	subs	r3, #2
 8009592:	683a      	ldr	r2, [r7, #0]
 8009594:	4413      	add	r3, r2
 8009596:	881b      	ldrh	r3, [r3, #0]
 8009598:	b29b      	uxth	r3, r3
 800959a:	81bb      	strh	r3, [r7, #12]
				//printf("PKT LENGTH:%u\n",EI_pktlength);
				SuiBuffer_Index  = 0;
 800959c:	4b47      	ldr	r3, [pc, #284]	; (80096bc <Get_Medha_EI_Message+0x1e4>)
 800959e:	2200      	movs	r2, #0
 80095a0:	801a      	strh	r2, [r3, #0]
				j=1;
 80095a2:	4b47      	ldr	r3, [pc, #284]	; (80096c0 <Get_Medha_EI_Message+0x1e8>)
 80095a4:	2201      	movs	r2, #1
 80095a6:	801a      	strh	r2, [r3, #0]
				Buffer[i] = suc_RByte;
 80095a8:	4b43      	ldr	r3, [pc, #268]	; (80096b8 <Get_Medha_EI_Message+0x1e0>)
 80095aa:	881b      	ldrh	r3, [r3, #0]
 80095ac:	461a      	mov	r2, r3
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	4413      	add	r3, r2
 80095b2:	4a3f      	ldr	r2, [pc, #252]	; (80096b0 <Get_Medha_EI_Message+0x1d8>)
 80095b4:	7812      	ldrb	r2, [r2, #0]
 80095b6:	701a      	strb	r2, [r3, #0]
				SuiBuffer_Index++;
 80095b8:	4b40      	ldr	r3, [pc, #256]	; (80096bc <Get_Medha_EI_Message+0x1e4>)
 80095ba:	881b      	ldrh	r3, [r3, #0]
 80095bc:	3301      	adds	r3, #1
 80095be:	b29a      	uxth	r2, r3
 80095c0:	4b3e      	ldr	r3, [pc, #248]	; (80096bc <Get_Medha_EI_Message+0x1e4>)
 80095c2:	801a      	strh	r2, [r3, #0]
				i++;
 80095c4:	4b3c      	ldr	r3, [pc, #240]	; (80096b8 <Get_Medha_EI_Message+0x1e0>)
 80095c6:	881b      	ldrh	r3, [r3, #0]
 80095c8:	3301      	adds	r3, #1
 80095ca:	b29a      	uxth	r2, r3
 80095cc:	4b3a      	ldr	r3, [pc, #232]	; (80096b8 <Get_Medha_EI_Message+0x1e0>)
 80095ce:	801a      	strh	r2, [r3, #0]
				j++;
 80095d0:	4b3b      	ldr	r3, [pc, #236]	; (80096c0 <Get_Medha_EI_Message+0x1e8>)
 80095d2:	881b      	ldrh	r3, [r3, #0]
 80095d4:	3301      	adds	r3, #1
 80095d6:	b29a      	uxth	r2, r3
 80095d8:	4b39      	ldr	r3, [pc, #228]	; (80096c0 <Get_Medha_EI_Message+0x1e8>)
 80095da:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = FIVE;
 80095dc:	4b35      	ldr	r3, [pc, #212]	; (80096b4 <Get_Medha_EI_Message+0x1dc>)
 80095de:	2205      	movs	r2, #5
 80095e0:	701a      	strb	r2, [r3, #0]
				break;
 80095e2:	e057      	b.n	8009694 <Get_Medha_EI_Message+0x1bc>
			case FIVE:
				Buffer[i] = suc_RByte;
 80095e4:	4b34      	ldr	r3, [pc, #208]	; (80096b8 <Get_Medha_EI_Message+0x1e0>)
 80095e6:	881b      	ldrh	r3, [r3, #0]
 80095e8:	461a      	mov	r2, r3
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	4413      	add	r3, r2
 80095ee:	4a30      	ldr	r2, [pc, #192]	; (80096b0 <Get_Medha_EI_Message+0x1d8>)
 80095f0:	7812      	ldrb	r2, [r2, #0]
 80095f2:	701a      	strb	r2, [r3, #0]
				if ((EI_pktlength) > SuiBuffer_Index)
 80095f4:	89ba      	ldrh	r2, [r7, #12]
 80095f6:	4b31      	ldr	r3, [pc, #196]	; (80096bc <Get_Medha_EI_Message+0x1e4>)
 80095f8:	881b      	ldrh	r3, [r3, #0]
 80095fa:	429a      	cmp	r2, r3
 80095fc:	d940      	bls.n	8009680 <Get_Medha_EI_Message+0x1a8>
				{
					SuiBuffer_Index++;
 80095fe:	4b2f      	ldr	r3, [pc, #188]	; (80096bc <Get_Medha_EI_Message+0x1e4>)
 8009600:	881b      	ldrh	r3, [r3, #0]
 8009602:	3301      	adds	r3, #1
 8009604:	b29a      	uxth	r2, r3
 8009606:	4b2d      	ldr	r3, [pc, #180]	; (80096bc <Get_Medha_EI_Message+0x1e4>)
 8009608:	801a      	strh	r2, [r3, #0]
					i++;
 800960a:	4b2b      	ldr	r3, [pc, #172]	; (80096b8 <Get_Medha_EI_Message+0x1e0>)
 800960c:	881b      	ldrh	r3, [r3, #0]
 800960e:	3301      	adds	r3, #1
 8009610:	b29a      	uxth	r2, r3
 8009612:	4b29      	ldr	r3, [pc, #164]	; (80096b8 <Get_Medha_EI_Message+0x1e0>)
 8009614:	801a      	strh	r2, [r3, #0]
					j++;
 8009616:	4b2a      	ldr	r3, [pc, #168]	; (80096c0 <Get_Medha_EI_Message+0x1e8>)
 8009618:	881b      	ldrh	r3, [r3, #0]
 800961a:	3301      	adds	r3, #1
 800961c:	b29a      	uxth	r2, r3
 800961e:	4b28      	ldr	r3, [pc, #160]	; (80096c0 <Get_Medha_EI_Message+0x1e8>)
 8009620:	801a      	strh	r2, [r3, #0]
					if ((EI_pktlength) == (SuiBuffer_Index) )
 8009622:	89ba      	ldrh	r2, [r7, #12]
 8009624:	4b25      	ldr	r3, [pc, #148]	; (80096bc <Get_Medha_EI_Message+0x1e4>)
 8009626:	881b      	ldrh	r3, [r3, #0]
 8009628:	429a      	cmp	r2, r3
 800962a:	d133      	bne.n	8009694 <Get_Medha_EI_Message+0x1bc>
					{
						sus_CRC = i - FOUR;
 800962c:	4b22      	ldr	r3, [pc, #136]	; (80096b8 <Get_Medha_EI_Message+0x1e0>)
 800962e:	881b      	ldrh	r3, [r3, #0]
 8009630:	3b04      	subs	r3, #4
 8009632:	b29a      	uxth	r2, r3
 8009634:	4b23      	ldr	r3, [pc, #140]	; (80096c4 <Get_Medha_EI_Message+0x1ec>)
 8009636:	801a      	strh	r2, [r3, #0]
						us_ReturnBytes = sus_CRC;
 8009638:	4b22      	ldr	r3, [pc, #136]	; (80096c4 <Get_Medha_EI_Message+0x1ec>)
 800963a:	881b      	ldrh	r3, [r3, #0]
 800963c:	81fb      	strh	r3, [r7, #14]
						i = 0;
 800963e:	4b1e      	ldr	r3, [pc, #120]	; (80096b8 <Get_Medha_EI_Message+0x1e0>)
 8009640:	2200      	movs	r2, #0
 8009642:	801a      	strh	r2, [r3, #0]
						suc_RcvStatus = ONE;
 8009644:	4b1b      	ldr	r3, [pc, #108]	; (80096b4 <Get_Medha_EI_Message+0x1dc>)
 8009646:	2201      	movs	r2, #1
 8009648:	701a      	strb	r2, [r3, #0]
						EI_pktlength = 0;
 800964a:	2300      	movs	r3, #0
 800964c:	81bb      	strh	r3, [r7, #12]
						if(us_ReturnBytes <= FOUR)
 800964e:	89fb      	ldrh	r3, [r7, #14]
 8009650:	2b04      	cmp	r3, #4
 8009652:	d804      	bhi.n	800965e <Get_Medha_EI_Message+0x186>
						{
							printf("\nHERE\n");
 8009654:	481c      	ldr	r0, [pc, #112]	; (80096c8 <Get_Medha_EI_Message+0x1f0>)
 8009656:	f019 faed 	bl	8022c34 <puts>
							return ZERO;
 800965a:	2300      	movs	r3, #0
 800965c:	e023      	b.n	80096a6 <Get_Medha_EI_Message+0x1ce>
						}
						if(CheckCRC32(0,Buffer,sus_CRC))
 800965e:	4b19      	ldr	r3, [pc, #100]	; (80096c4 <Get_Medha_EI_Message+0x1ec>)
 8009660:	881b      	ldrh	r3, [r3, #0]
 8009662:	461a      	mov	r2, r3
 8009664:	6839      	ldr	r1, [r7, #0]
 8009666:	2000      	movs	r0, #0
 8009668:	f001 fc10 	bl	800ae8c <CheckCRC32>
 800966c:	4603      	mov	r3, r0
 800966e:	2b00      	cmp	r3, #0
 8009670:	d001      	beq.n	8009676 <Get_Medha_EI_Message+0x19e>
						{
							/*							printf("\nCRC OK\n");*/
							return us_ReturnBytes;
 8009672:	89fb      	ldrh	r3, [r7, #14]
 8009674:	e017      	b.n	80096a6 <Get_Medha_EI_Message+0x1ce>
						}
						else
						{
							printf("CRC NOK\n");
 8009676:	4815      	ldr	r0, [pc, #84]	; (80096cc <Get_Medha_EI_Message+0x1f4>)
 8009678:	f019 fadc 	bl	8022c34 <puts>
							return ZERO;
 800967c:	2300      	movs	r3, #0
 800967e:	e012      	b.n	80096a6 <Get_Medha_EI_Message+0x1ce>
						}
					}
				}
				else
				{
					i = 0;
 8009680:	4b0d      	ldr	r3, [pc, #52]	; (80096b8 <Get_Medha_EI_Message+0x1e0>)
 8009682:	2200      	movs	r2, #0
 8009684:	801a      	strh	r2, [r3, #0]
					suc_RcvStatus= 1;
 8009686:	4b0b      	ldr	r3, [pc, #44]	; (80096b4 <Get_Medha_EI_Message+0x1dc>)
 8009688:	2201      	movs	r2, #1
 800968a:	701a      	strb	r2, [r3, #0]
					EI_pktlength = 0;
 800968c:	2300      	movs	r3, #0
 800968e:	81bb      	strh	r3, [r7, #12]
				}
				break;
 8009690:	e000      	b.n	8009694 <Get_Medha_EI_Message+0x1bc>
			default:
				break;
 8009692:	bf00      	nop
	while(Com_DataReady(ComPort))
 8009694:	79fb      	ldrb	r3, [r7, #7]
 8009696:	4618      	mov	r0, r3
 8009698:	f00b febe 	bl	8015418 <Com_DataReady>
 800969c:	4603      	mov	r3, r0
 800969e:	2b00      	cmp	r3, #0
 80096a0:	f47f af27 	bne.w	80094f2 <Get_Medha_EI_Message+0x1a>
		}
	}	    /* End of While data ready */
	return ZERO;
 80096a4:	2300      	movs	r3, #0
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3710      	adds	r7, #16
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}
 80096ae:	bf00      	nop
 80096b0:	2000285c 	.word	0x2000285c
 80096b4:	20000116 	.word	0x20000116
 80096b8:	2000285e 	.word	0x2000285e
 80096bc:	20002860 	.word	0x20002860
 80096c0:	20002862 	.word	0x20002862
 80096c4:	20002864 	.word	0x20002864
 80096c8:	080257f8 	.word	0x080257f8
 80096cc:	08025800 	.word	0x08025800

080096d0 <Medha_EI_Analyser>:
void Medha_EI_Analyser(void)
{
 80096d0:	b5b0      	push	{r4, r5, r7, lr}
 80096d2:	f5ad 7d3c 	sub.w	sp, sp, #752	; 0x2f0
 80096d6:	af04      	add	r7, sp, #16

	uint16_t NoofBuffBytes 		= 0;
 80096d8:	2300      	movs	r3, #0
 80096da:	f8a7 32d6 	strh.w	r3, [r7, #726]	; 0x2d6
	uint8_t EI_Buffer[300]		= "\0";
 80096de:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80096e2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80096e6:	2200      	movs	r2, #0
 80096e8:	601a      	str	r2, [r3, #0]
 80096ea:	3304      	adds	r3, #4
 80096ec:	f44f 7294 	mov.w	r2, #296	; 0x128
 80096f0:	2100      	movs	r1, #0
 80096f2:	4618      	mov	r0, r3
 80096f4:	f019 f91a 	bl	802292c <memset>
	uint16_t NoOfInputs 		= 0;
 80096f8:	2300      	movs	r3, #0
 80096fa:	f8a7 32de 	strh.w	r3, [r7, #734]	; 0x2de
	uint16_t Traverser 			= 0;
 80096fe:	2300      	movs	r3, #0
 8009700:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
	uint8_t TempCompliment[128] = {0,};
 8009704:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009708:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800970c:	2200      	movs	r2, #0
 800970e:	601a      	str	r2, [r3, #0]
 8009710:	3304      	adds	r3, #4
 8009712:	227c      	movs	r2, #124	; 0x7c
 8009714:	2100      	movs	r1, #0
 8009716:	4618      	mov	r0, r3
 8009718:	f019 f908 	bl	802292c <memset>
	uint16_t VitalCrcStartLoc 	= 0;
 800971c:	2300      	movs	r3, #0
 800971e:	f8a7 32d4 	strh.w	r3, [r7, #724]	; 0x2d4
	uint32_t CalcVitalCrc 		= 0;
 8009722:	2300      	movs	r3, #0
 8009724:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
	MEDHA_EI_PKT_t Medha_EI_Temp_Rx_st;

	NoofBuffBytes= Get_Medha_EI_Message(EI_data.Medha_Prms_st.Comport,EI_Buffer,sizeof(EI_Buffer));
 8009728:	4bbf      	ldr	r3, [pc, #764]	; (8009a28 <Medha_EI_Analyser+0x358>)
 800972a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800972e:	f507 71d2 	add.w	r1, r7, #420	; 0x1a4
 8009732:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009736:	4618      	mov	r0, r3
 8009738:	f7ff fece 	bl	80094d8 <Get_Medha_EI_Message>
 800973c:	4603      	mov	r3, r0
 800973e:	f8a7 32d6 	strh.w	r3, [r7, #726]	; 0x2d6

	if(NoofBuffBytes > 5)
 8009742:	f8b7 32d6 	ldrh.w	r3, [r7, #726]	; 0x2d6
 8009746:	2b05      	cmp	r3, #5
 8009748:	d934      	bls.n	80097b4 <Medha_EI_Analyser+0xe4>
	{
		printf("Raw Data:\n");
 800974a:	48b8      	ldr	r0, [pc, #736]	; (8009a2c <Medha_EI_Analyser+0x35c>)
 800974c:	f019 fa72 	bl	8022c34 <puts>
		for(uint16_t i=0;i<NoofBuffBytes;++i)
 8009750:	2300      	movs	r3, #0
 8009752:	f8a7 32da 	strh.w	r3, [r7, #730]	; 0x2da
 8009756:	e024      	b.n	80097a2 <Medha_EI_Analyser+0xd2>
		{

			if((i!=0) && ((i%10)==0))
 8009758:	f8b7 32da 	ldrh.w	r3, [r7, #730]	; 0x2da
 800975c:	2b00      	cmp	r3, #0
 800975e:	d010      	beq.n	8009782 <Medha_EI_Analyser+0xb2>
 8009760:	f8b7 22da 	ldrh.w	r2, [r7, #730]	; 0x2da
 8009764:	4bb2      	ldr	r3, [pc, #712]	; (8009a30 <Medha_EI_Analyser+0x360>)
 8009766:	fba3 1302 	umull	r1, r3, r3, r2
 800976a:	08d9      	lsrs	r1, r3, #3
 800976c:	460b      	mov	r3, r1
 800976e:	009b      	lsls	r3, r3, #2
 8009770:	440b      	add	r3, r1
 8009772:	005b      	lsls	r3, r3, #1
 8009774:	1ad3      	subs	r3, r2, r3
 8009776:	b29b      	uxth	r3, r3
 8009778:	2b00      	cmp	r3, #0
 800977a:	d102      	bne.n	8009782 <Medha_EI_Analyser+0xb2>
			{
				printf("\n");
 800977c:	200a      	movs	r0, #10
 800977e:	f019 f9d5 	bl	8022b2c <putchar>
			}
			printf("%02X ",EI_Buffer[i]);
 8009782:	f8b7 32da 	ldrh.w	r3, [r7, #730]	; 0x2da
 8009786:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 800978a:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 800978e:	5cd3      	ldrb	r3, [r2, r3]
 8009790:	4619      	mov	r1, r3
 8009792:	48a8      	ldr	r0, [pc, #672]	; (8009a34 <Medha_EI_Analyser+0x364>)
 8009794:	f019 f9b2 	bl	8022afc <iprintf>
		for(uint16_t i=0;i<NoofBuffBytes;++i)
 8009798:	f8b7 32da 	ldrh.w	r3, [r7, #730]	; 0x2da
 800979c:	3301      	adds	r3, #1
 800979e:	f8a7 32da 	strh.w	r3, [r7, #730]	; 0x2da
 80097a2:	f8b7 22da 	ldrh.w	r2, [r7, #730]	; 0x2da
 80097a6:	f8b7 32d6 	ldrh.w	r3, [r7, #726]	; 0x2d6
 80097aa:	429a      	cmp	r2, r3
 80097ac:	d3d4      	bcc.n	8009758 <Medha_EI_Analyser+0x88>
		}
		printf("\n");
 80097ae:	200a      	movs	r0, #10
 80097b0:	f019 f9bc 	bl	8022b2c <putchar>
		printf("Injected EIPC_RX_FAILURE\n");
		NoofBuffBytes  =0;
	}
#endif

	if(NoofBuffBytes > 0)
 80097b4:	f8b7 32d6 	ldrh.w	r3, [r7, #726]	; 0x2d6
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	f000 83ba 	beq.w	8009f32 <Medha_EI_Analyser+0x862>
	{
		memset(&Medha_EI_Temp_Rx_st,0,sizeof(MEDHA_EI_PKT_t));
 80097be:	463b      	mov	r3, r7
 80097c0:	f44f 7292 	mov.w	r2, #292	; 0x124
 80097c4:	2100      	movs	r1, #0
 80097c6:	4618      	mov	r0, r3
 80097c8:	f019 f8b0 	bl	802292c <memset>

		BYTEINIT(0);
 80097cc:	2300      	movs	r3, #0
 80097ce:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8
		memcpy(&Medha_EI_Temp_Rx_st.SOM,&EI_Buffer[ucByte],1);
 80097d2:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80097d6:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 80097da:	4413      	add	r3, r2
 80097dc:	781a      	ldrb	r2, [r3, #0]
 80097de:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80097e2:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80097e6:	701a      	strb	r2, [r3, #0]
		BYTEINC(1);
 80097e8:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80097ec:	3301      	adds	r3, #1
 80097ee:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Dest_Addr,&EI_Buffer[ucByte],2);
 80097f2:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80097f6:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 80097fa:	4413      	add	r3, r2
 80097fc:	881b      	ldrh	r3, [r3, #0]
 80097fe:	b29a      	uxth	r2, r3
 8009800:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009804:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009808:	809a      	strh	r2, [r3, #4]
			}
			printf("Injected Destination Address:%u\n",Medha_EI_Temp_Rx_st.Dest_Addr);
		}
#endif

		if(EI_data.Medha_Prms_st.Dest_Addr != Medha_EI_Temp_Rx_st.Dest_Addr)
 800980a:	4b87      	ldr	r3, [pc, #540]	; (8009a28 <Medha_EI_Analyser+0x358>)
 800980c:	f8b3 2324 	ldrh.w	r2, [r3, #804]	; 0x324
 8009810:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009814:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009818:	889b      	ldrh	r3, [r3, #4]
 800981a:	429a      	cmp	r2, r3
 800981c:	d010      	beq.n	8009840 <Medha_EI_Analyser+0x170>
		{
			printf("Destination Address Not Matched - Packet Rejected\n");
 800981e:	4886      	ldr	r0, [pc, #536]	; (8009a38 <Medha_EI_Analyser+0x368>)
 8009820:	f019 fa08 	bl	8022c34 <puts>
			printf("Configured:\"%u\" - Received:\"%u\"\n",EI_data.Medha_Prms_st.Dest_Addr,Medha_EI_Temp_Rx_st.Dest_Addr);
 8009824:	4b80      	ldr	r3, [pc, #512]	; (8009a28 <Medha_EI_Analyser+0x358>)
 8009826:	f8b3 3324 	ldrh.w	r3, [r3, #804]	; 0x324
 800982a:	4619      	mov	r1, r3
 800982c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009830:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009834:	889b      	ldrh	r3, [r3, #4]
 8009836:	461a      	mov	r2, r3
 8009838:	4880      	ldr	r0, [pc, #512]	; (8009a3c <Medha_EI_Analyser+0x36c>)
 800983a:	f019 f95f 	bl	8022afc <iprintf>
			return;
 800983e:	e37b      	b.n	8009f38 <Medha_EI_Analyser+0x868>
		}
		BYTEINC(2);
 8009840:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009844:	3302      	adds	r3, #2
 8009846:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8



		memcpy(&Medha_EI_Temp_Rx_st.Source_Addr,&EI_Buffer[ucByte],2);
 800984a:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800984e:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8009852:	4413      	add	r3, r2
 8009854:	881b      	ldrh	r3, [r3, #0]
 8009856:	b29a      	uxth	r2, r3
 8009858:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800985c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009860:	805a      	strh	r2, [r3, #2]

		}

#endif

		if(EI_data.Medha_Prms_st.Source_Addr != Medha_EI_Temp_Rx_st.Source_Addr)
 8009862:	4b71      	ldr	r3, [pc, #452]	; (8009a28 <Medha_EI_Analyser+0x358>)
 8009864:	f8b3 2322 	ldrh.w	r2, [r3, #802]	; 0x322
 8009868:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800986c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009870:	885b      	ldrh	r3, [r3, #2]
 8009872:	429a      	cmp	r2, r3
 8009874:	d010      	beq.n	8009898 <Medha_EI_Analyser+0x1c8>
		{
			printf("Source Address Not Matched - Packet Rejected\n");
 8009876:	4872      	ldr	r0, [pc, #456]	; (8009a40 <Medha_EI_Analyser+0x370>)
 8009878:	f019 f9dc 	bl	8022c34 <puts>
			printf("Configured:\"%u\" - Received:\"%u\"\n",EI_data.Medha_Prms_st.Source_Addr,Medha_EI_Temp_Rx_st.Source_Addr);
 800987c:	4b6a      	ldr	r3, [pc, #424]	; (8009a28 <Medha_EI_Analyser+0x358>)
 800987e:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 8009882:	4619      	mov	r1, r3
 8009884:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009888:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800988c:	885b      	ldrh	r3, [r3, #2]
 800988e:	461a      	mov	r2, r3
 8009890:	486a      	ldr	r0, [pc, #424]	; (8009a3c <Medha_EI_Analyser+0x36c>)
 8009892:	f019 f933 	bl	8022afc <iprintf>
			return;
 8009896:	e34f      	b.n	8009f38 <Medha_EI_Analyser+0x868>
		}
		BYTEINC(2);
 8009898:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800989c:	3302      	adds	r3, #2
 800989e:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Channel_Type,&EI_Buffer[ucByte],1);
 80098a2:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80098a6:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 80098aa:	4413      	add	r3, r2
 80098ac:	781a      	ldrb	r2, [r3, #0]
 80098ae:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80098b2:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80098b6:	719a      	strb	r2, [r3, #6]
			printf("Injected Channel_Type:%02X\n",Medha_EI_Temp_Rx_st.Channel_Type);
		}

#endif

		if( ! ( (Medha_EI_Temp_Rx_st.Channel_Type == CHANNEL_A) || (Medha_EI_Temp_Rx_st.Channel_Type ==CHANNEL_B) ) )
 80098b8:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80098bc:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80098c0:	799b      	ldrb	r3, [r3, #6]
 80098c2:	2baa      	cmp	r3, #170	; 0xaa
 80098c4:	d010      	beq.n	80098e8 <Medha_EI_Analyser+0x218>
 80098c6:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80098ca:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80098ce:	799b      	ldrb	r3, [r3, #6]
 80098d0:	2bbb      	cmp	r3, #187	; 0xbb
 80098d2:	d009      	beq.n	80098e8 <Medha_EI_Analyser+0x218>
		{
			printf("Received from Unknown Channel:%02X - Packet Rejected\n",Medha_EI_Temp_Rx_st.Channel_Type);
 80098d4:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80098d8:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80098dc:	799b      	ldrb	r3, [r3, #6]
 80098de:	4619      	mov	r1, r3
 80098e0:	4858      	ldr	r0, [pc, #352]	; (8009a44 <Medha_EI_Analyser+0x374>)
 80098e2:	f019 f90b 	bl	8022afc <iprintf>
			return;
 80098e6:	e327      	b.n	8009f38 <Medha_EI_Analyser+0x868>
		}
		BYTEINC(1);
 80098e8:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80098ec:	3301      	adds	r3, #1
 80098ee:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8


		memcpy(&Medha_EI_Temp_Rx_st.Control_Byte,&EI_Buffer[ucByte],1);
 80098f2:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80098f6:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 80098fa:	4413      	add	r3, r2
 80098fc:	781a      	ldrb	r2, [r3, #0]
 80098fe:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009902:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009906:	71da      	strb	r2, [r3, #7]
			printf("Injected Control_Byte:%02X\n",Medha_EI_Temp_Rx_st.Control_Byte);
		}

#endif

		if( Medha_EI_Temp_Rx_st.Control_Byte != CONTROL_BYTE_RX )
 8009908:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800990c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009910:	79db      	ldrb	r3, [r3, #7]
 8009912:	2be1      	cmp	r3, #225	; 0xe1
 8009914:	d009      	beq.n	800992a <Medha_EI_Analyser+0x25a>
		{
			printf("Received Unknown ControlByte:%02X - Packet Rejected\n",Medha_EI_Temp_Rx_st.Control_Byte);
 8009916:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800991a:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800991e:	79db      	ldrb	r3, [r3, #7]
 8009920:	4619      	mov	r1, r3
 8009922:	4849      	ldr	r0, [pc, #292]	; (8009a48 <Medha_EI_Analyser+0x378>)
 8009924:	f019 f8ea 	bl	8022afc <iprintf>
			return;
 8009928:	e306      	b.n	8009f38 <Medha_EI_Analyser+0x868>
		}

		BYTEINC(1);
 800992a:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800992e:	3301      	adds	r3, #1
 8009930:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8


		memcpy(&Medha_EI_Temp_Rx_st.Length,&EI_Buffer[ucByte],2);
 8009934:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009938:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800993c:	4413      	add	r3, r2
 800993e:	881b      	ldrh	r3, [r3, #0]
 8009940:	b29a      	uxth	r2, r3
 8009942:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009946:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800994a:	811a      	strh	r2, [r3, #8]
		BYTEINC(2);
 800994c:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009950:	3302      	adds	r3, #2
 8009952:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Packet_Number,&EI_Buffer[ucByte],1);
 8009956:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800995a:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800995e:	4413      	add	r3, r2
 8009960:	781a      	ldrb	r2, [r3, #0]
 8009962:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009966:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800996a:	729a      	strb	r2, [r3, #10]
		BYTEINC(1);
 800996c:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009970:	3301      	adds	r3, #1
 8009972:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Reserved1,&EI_Buffer[ucByte],7);
 8009976:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800997a:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800997e:	441a      	add	r2, r3
 8009980:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009984:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009988:	330b      	adds	r3, #11
 800998a:	6811      	ldr	r1, [r2, #0]
 800998c:	6019      	str	r1, [r3, #0]
 800998e:	8891      	ldrh	r1, [r2, #4]
 8009990:	7992      	ldrb	r2, [r2, #6]
 8009992:	8099      	strh	r1, [r3, #4]
 8009994:	719a      	strb	r2, [r3, #6]
		BYTEINC(7);
 8009996:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800999a:	3307      	adds	r3, #7
 800999c:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Health_Status,&EI_Buffer[ucByte],1);
 80099a0:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80099a4:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 80099a8:	4413      	add	r3, r2
 80099aa:	781a      	ldrb	r2, [r3, #0]
 80099ac:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80099b0:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80099b4:	749a      	strb	r2, [r3, #18]
			printf("Injected Health_Status:%02X\n",Medha_EI_Temp_Rx_st.Health_Status);
		}

#endif

		if(Medha_EI_Temp_Rx_st.Health_Status != HEALTH_OK)
 80099b6:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80099ba:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80099be:	7c9b      	ldrb	r3, [r3, #18]
 80099c0:	2b11      	cmp	r3, #17
 80099c2:	d009      	beq.n	80099d8 <Medha_EI_Analyser+0x308>
		{
			printf("MEDHA-EI HEALTH \"NOT-OK\"... \nReceived Health:%02x\nPacket Rejected.\n",Medha_EI_Temp_Rx_st.Health_Status);
 80099c4:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80099c8:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80099cc:	7c9b      	ldrb	r3, [r3, #18]
 80099ce:	4619      	mov	r1, r3
 80099d0:	481e      	ldr	r0, [pc, #120]	; (8009a4c <Medha_EI_Analyser+0x37c>)
 80099d2:	f019 f893 	bl	8022afc <iprintf>
			return;
 80099d6:	e2af      	b.n	8009f38 <Medha_EI_Analyser+0x868>
		}

		BYTEINC(1);
 80099d8:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80099dc:	3301      	adds	r3, #1
 80099de:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		VitalCrcStartLoc = ucByte;
 80099e2:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80099e6:	f8a7 32d4 	strh.w	r3, [r7, #724]	; 0x2d4
		memcpy(&Medha_EI_Temp_Rx_st.NoofRelays,&EI_Buffer[ucByte],2);
 80099ea:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80099ee:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 80099f2:	4413      	add	r3, r2
 80099f4:	881b      	ldrh	r3, [r3, #0]
 80099f6:	b29a      	uxth	r2, r3
 80099f8:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80099fc:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009a00:	829a      	strh	r2, [r3, #20]
			printf("Injected NoofRelays:%u\n",Medha_EI_Temp_Rx_st.NoofRelays);
		}

#endif

		if(Medha_EI_Temp_Rx_st.NoofRelays>1024)
 8009a02:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009a06:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009a0a:	8a9b      	ldrh	r3, [r3, #20]
 8009a0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a10:	d920      	bls.n	8009a54 <Medha_EI_Analyser+0x384>
		{
			printf("No of Relays Exceeding 1024 Inputs\nNo of Relays Received:%u\nSo Packet Rejected\n",Medha_EI_Temp_Rx_st.NoofRelays);
 8009a12:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009a16:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009a1a:	8a9b      	ldrh	r3, [r3, #20]
 8009a1c:	4619      	mov	r1, r3
 8009a1e:	480c      	ldr	r0, [pc, #48]	; (8009a50 <Medha_EI_Analyser+0x380>)
 8009a20:	f019 f86c 	bl	8022afc <iprintf>
			return;
 8009a24:	e288      	b.n	8009f38 <Medha_EI_Analyser+0x868>
 8009a26:	bf00      	nop
 8009a28:	20000304 	.word	0x20000304
 8009a2c:	08025808 	.word	0x08025808
 8009a30:	cccccccd 	.word	0xcccccccd
 8009a34:	08025814 	.word	0x08025814
 8009a38:	0802581c 	.word	0x0802581c
 8009a3c:	08025850 	.word	0x08025850
 8009a40:	08025874 	.word	0x08025874
 8009a44:	080258a4 	.word	0x080258a4
 8009a48:	080258dc 	.word	0x080258dc
 8009a4c:	08025914 	.word	0x08025914
 8009a50:	08025958 	.word	0x08025958
		}

		if(Medha_EI_Temp_Rx_st.NoofRelays != EI_data.Medha_Prms_st.NoofRelays)
 8009a54:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009a58:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009a5c:	8a9a      	ldrh	r2, [r3, #20]
 8009a5e:	4ba6      	ldr	r3, [pc, #664]	; (8009cf8 <Medha_EI_Analyser+0x628>)
 8009a60:	f8b3 3328 	ldrh.w	r3, [r3, #808]	; 0x328
 8009a64:	429a      	cmp	r2, r3
 8009a66:	d014      	beq.n	8009a92 <Medha_EI_Analyser+0x3c2>
		{
			printf("No of Relays Not Matching...\nConfigured:%u - Received:%u\n",EI_data.Medha_Prms_st.NoofRelays,Medha_EI_Temp_Rx_st.NoofRelays);
 8009a68:	4ba3      	ldr	r3, [pc, #652]	; (8009cf8 <Medha_EI_Analyser+0x628>)
 8009a6a:	f8b3 3328 	ldrh.w	r3, [r3, #808]	; 0x328
 8009a6e:	4619      	mov	r1, r3
 8009a70:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009a74:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009a78:	8a9b      	ldrh	r3, [r3, #20]
 8009a7a:	461a      	mov	r2, r3
 8009a7c:	489f      	ldr	r0, [pc, #636]	; (8009cfc <Medha_EI_Analyser+0x62c>)
 8009a7e:	f019 f83d 	bl	8022afc <iprintf>

			if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8009a82:	499f      	ldr	r1, [pc, #636]	; (8009d00 <Medha_EI_Analyser+0x630>)
 8009a84:	489f      	ldr	r0, [pc, #636]	; (8009d04 <Medha_EI_Analyser+0x634>)
 8009a86:	f7f6 fbdb 	bl	8000240 <strcmp>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	f000 8252 	beq.w	8009f36 <Medha_EI_Analyser+0x866>
			{
				return;
			}
		}

		BYTEINC(2);
 8009a92:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009a96:	3302      	adds	r3, #2
 8009a98:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		/*		printf("MedhaEI_Rx_Temp_Pkt_st.NoofRelays:%u\n",MedhaEI_Rx_Temp_Pkt_st.NoofRelays); */

		NoOfInputs = (Medha_EI_Temp_Rx_st.NoofRelays % 8);
 8009a9c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009aa0:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009aa4:	8a9b      	ldrh	r3, [r3, #20]
 8009aa6:	f003 0307 	and.w	r3, r3, #7
 8009aaa:	f8a7 32de 	strh.w	r3, [r7, #734]	; 0x2de
		if (NoOfInputs != 0)
 8009aae:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d00a      	beq.n	8009acc <Medha_EI_Analyser+0x3fc>
		{
			NoOfInputs = ((Medha_EI_Temp_Rx_st.NoofRelays / 8)) + 1; //	including 0th buffer
 8009ab6:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009aba:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009abe:	8a9b      	ldrh	r3, [r3, #20]
 8009ac0:	08db      	lsrs	r3, r3, #3
 8009ac2:	b29b      	uxth	r3, r3
 8009ac4:	3301      	adds	r3, #1
 8009ac6:	f8a7 32de 	strh.w	r3, [r7, #734]	; 0x2de
 8009aca:	e007      	b.n	8009adc <Medha_EI_Analyser+0x40c>
		}
		else
		{
			NoOfInputs = (Medha_EI_Temp_Rx_st.NoofRelays / 8);
 8009acc:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009ad0:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009ad4:	8a9b      	ldrh	r3, [r3, #20]
 8009ad6:	08db      	lsrs	r3, r3, #3
 8009ad8:	f8a7 32de 	strh.w	r3, [r7, #734]	; 0x2de
		}

		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 8009adc:	2300      	movs	r3, #0
 8009ade:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009ae2:	e02a      	b.n	8009b3a <Medha_EI_Analyser+0x46a>
		{
			Medha_EI_Temp_Rx_st.RelayStatus[Traverser] = EI_Buffer[ucByte];
 8009ae4:	f8b7 22d8 	ldrh.w	r2, [r7, #728]	; 0x2d8
 8009ae8:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009aec:	f507 7138 	add.w	r1, r7, #736	; 0x2e0
 8009af0:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 8009af4:	5c89      	ldrb	r1, [r1, r2]
 8009af6:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 8009afa:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 8009afe:	4413      	add	r3, r2
 8009b00:	460a      	mov	r2, r1
 8009b02:	759a      	strb	r2, [r3, #22]
			TempCompliment[Traverser] = ~(Medha_EI_Temp_Rx_st.RelayStatus[Traverser]);
 8009b04:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009b08:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 8009b0c:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 8009b10:	4413      	add	r3, r2
 8009b12:	7d9a      	ldrb	r2, [r3, #22]
 8009b14:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009b18:	43d2      	mvns	r2, r2
 8009b1a:	b2d1      	uxtb	r1, r2
 8009b1c:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 8009b20:	f5a2 72de 	sub.w	r2, r2, #444	; 0x1bc
 8009b24:	54d1      	strb	r1, [r2, r3]
			BYTEINC(1);
 8009b26:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009b2a:	3301      	adds	r3, #1
 8009b2c:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 8009b30:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009b34:	3301      	adds	r3, #1
 8009b36:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009b3a:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 8009b3e:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009b42:	429a      	cmp	r2, r3
 8009b44:	d3ce      	bcc.n	8009ae4 <Medha_EI_Analyser+0x414>
		 * printf("\n");
		 * printf("Compliement Data\n");
		 *
		 */

		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 8009b46:	2300      	movs	r3, #0
 8009b48:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009b4c:	e01a      	b.n	8009b84 <Medha_EI_Analyser+0x4b4>
		{
			Medha_EI_Temp_Rx_st.Comp_RelayStatus[Traverser] = EI_Buffer[ucByte];
 8009b4e:	f8b7 22d8 	ldrh.w	r2, [r7, #728]	; 0x2d8
 8009b52:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009b56:	f507 7138 	add.w	r1, r7, #736	; 0x2e0
 8009b5a:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 8009b5e:	5c89      	ldrb	r1, [r1, r2]
 8009b60:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 8009b64:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 8009b68:	4413      	add	r3, r2
 8009b6a:	460a      	mov	r2, r1
 8009b6c:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
			BYTEINC(1);
 8009b70:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009b74:	3301      	adds	r3, #1
 8009b76:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 8009b7a:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009b7e:	3301      	adds	r3, #1
 8009b80:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009b84:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 8009b88:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009b8c:	429a      	cmp	r2, r3
 8009b8e:	d3de      	bcc.n	8009b4e <Medha_EI_Analyser+0x47e>
			printf("Injected Received Compliment value:%02X\n",Medha_EI_Temp_Rx_st.Comp_RelayStatus[Index]);
		}

#endif

		if(memcmp(Medha_EI_Temp_Rx_st.Comp_RelayStatus,TempCompliment,NoOfInputs) != 0)
 8009b90:	f8b7 22de 	ldrh.w	r2, [r7, #734]	; 0x2de
 8009b94:	f507 7192 	add.w	r1, r7, #292	; 0x124
 8009b98:	463b      	mov	r3, r7
 8009b9a:	3396      	adds	r3, #150	; 0x96
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f018 fe8d 	bl	80228bc <memcmp>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d03f      	beq.n	8009c28 <Medha_EI_Analyser+0x558>
		{
			printf("Relay Data Compliment Verification Failed\nReceived Relay Compliment Status:\n");
 8009ba8:	4857      	ldr	r0, [pc, #348]	; (8009d08 <Medha_EI_Analyser+0x638>)
 8009baa:	f019 f843 	bl	8022c34 <puts>
			for(Traverser = 0;Traverser<NoOfInputs;++Traverser)
 8009bae:	2300      	movs	r3, #0
 8009bb0:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009bb4:	e011      	b.n	8009bda <Medha_EI_Analyser+0x50a>
			{
				printf("%02X ",Medha_EI_Temp_Rx_st.Comp_RelayStatus[Traverser]);
 8009bb6:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009bba:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 8009bbe:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 8009bc2:	4413      	add	r3, r2
 8009bc4:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8009bc8:	4619      	mov	r1, r3
 8009bca:	4850      	ldr	r0, [pc, #320]	; (8009d0c <Medha_EI_Analyser+0x63c>)
 8009bcc:	f018 ff96 	bl	8022afc <iprintf>
			for(Traverser = 0;Traverser<NoOfInputs;++Traverser)
 8009bd0:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009bd4:	3301      	adds	r3, #1
 8009bd6:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009bda:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 8009bde:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009be2:	429a      	cmp	r2, r3
 8009be4:	d3e7      	bcc.n	8009bb6 <Medha_EI_Analyser+0x4e6>
			}

			printf("\nExpected Compliment Relay Status:\n");
 8009be6:	484a      	ldr	r0, [pc, #296]	; (8009d10 <Medha_EI_Analyser+0x640>)
 8009be8:	f019 f824 	bl	8022c34 <puts>

			for(Traverser = 0;Traverser<NoOfInputs;++Traverser)
 8009bec:	2300      	movs	r3, #0
 8009bee:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009bf2:	e00f      	b.n	8009c14 <Medha_EI_Analyser+0x544>
			{
				printf("%02X ",TempCompliment[Traverser]);
 8009bf4:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009bf8:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 8009bfc:	f5a2 72de 	sub.w	r2, r2, #444	; 0x1bc
 8009c00:	5cd3      	ldrb	r3, [r2, r3]
 8009c02:	4619      	mov	r1, r3
 8009c04:	4841      	ldr	r0, [pc, #260]	; (8009d0c <Medha_EI_Analyser+0x63c>)
 8009c06:	f018 ff79 	bl	8022afc <iprintf>
			for(Traverser = 0;Traverser<NoOfInputs;++Traverser)
 8009c0a:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009c0e:	3301      	adds	r3, #1
 8009c10:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009c14:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 8009c18:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009c1c:	429a      	cmp	r2, r3
 8009c1e:	d3e9      	bcc.n	8009bf4 <Medha_EI_Analyser+0x524>
			}

			printf("\nPACKET Rejected\n");
 8009c20:	483c      	ldr	r0, [pc, #240]	; (8009d14 <Medha_EI_Analyser+0x644>)
 8009c22:	f019 f807 	bl	8022c34 <puts>
			return;
 8009c26:	e187      	b.n	8009f38 <Medha_EI_Analyser+0x868>
		}


		CalcVitalCrc = GetCRC32(VitalCrcStartLoc, EI_Buffer, ucByte);
 8009c28:	f8b7 22d8 	ldrh.w	r2, [r7, #728]	; 0x2d8
 8009c2c:	f507 71d2 	add.w	r1, r7, #420	; 0x1a4
 8009c30:	f8b7 32d4 	ldrh.w	r3, [r7, #724]	; 0x2d4
 8009c34:	4618      	mov	r0, r3
 8009c36:	f001 f8f5 	bl	800ae24 <GetCRC32>
 8009c3a:	f8c7 02d0 	str.w	r0, [r7, #720]	; 0x2d0
		memcpy(&Medha_EI_Temp_Rx_st.Vital_CRC, &EI_Buffer[ucByte],4);
 8009c3e:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009c42:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8009c46:	4413      	add	r3, r2
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	461a      	mov	r2, r3
 8009c4c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009c50:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009c54:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

#endif



		if(CalcVitalCrc != Medha_EI_Temp_Rx_st.Vital_CRC)
 8009c58:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009c5c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009c60:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8009c64:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 8009c68:	429a      	cmp	r2, r3
 8009c6a:	d00c      	beq.n	8009c86 <Medha_EI_Analyser+0x5b6>
		{
			printf("Vital CRC Failed....\nCalc:0X%08lX|Recv:0X%08lX\nPacket Rejected\n",CalcVitalCrc,Medha_EI_Temp_Rx_st.Vital_CRC);
 8009c6c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009c70:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009c74:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8009c78:	461a      	mov	r2, r3
 8009c7a:	f8d7 12d0 	ldr.w	r1, [r7, #720]	; 0x2d0
 8009c7e:	4826      	ldr	r0, [pc, #152]	; (8009d18 <Medha_EI_Analyser+0x648>)
 8009c80:	f018 ff3c 	bl	8022afc <iprintf>
			return;
 8009c84:	e158      	b.n	8009f38 <Medha_EI_Analyser+0x868>
		}
		BYTEINC(4);
 8009c86:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009c8a:	3304      	adds	r3, #4
 8009c8c:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Reserved2, &EI_Buffer[ucByte],2);
 8009c90:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009c94:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8009c98:	4413      	add	r3, r2
 8009c9a:	881b      	ldrh	r3, [r3, #0]
 8009c9c:	b29a      	uxth	r2, r3
 8009c9e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009ca2:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009ca6:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
		BYTEINC(2);
 8009caa:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009cae:	3302      	adds	r3, #2
 8009cb0:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		/* ******************************************************* PROCESS VALID PACKET STEPS ↓ ******************************************************* */

		//printf("\n                     ELAPSED_TICKS:%lu\n",HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk));
		Medha_Fault_Handler_st.Pkt_Rcv_clk = HAL_GetTick();
 8009cb4:	f00b ff18 	bl	8015ae8 <HAL_GetTick>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	4a18      	ldr	r2, [pc, #96]	; (8009d1c <Medha_EI_Analyser+0x64c>)
 8009cbc:	6053      	str	r3, [r2, #4]
		memcpy(&Medha_EI_Rx_Pkt_st,&Medha_EI_Temp_Rx_st,sizeof(MEDHA_EI_PKT_t));
 8009cbe:	4a18      	ldr	r2, [pc, #96]	; (8009d20 <Medha_EI_Analyser+0x650>)
 8009cc0:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009cc4:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009cc8:	4610      	mov	r0, r2
 8009cca:	4619      	mov	r1, r3
 8009ccc:	f44f 7392 	mov.w	r3, #292	; 0x124
 8009cd0:	461a      	mov	r2, r3
 8009cd2:	f018 fe03 	bl	80228dc <memcpy>

		Medha_ei_self_sharing_TX_st.Receiving_Status = RECEIVED;
 8009cd6:	4b13      	ldr	r3, [pc, #76]	; (8009d24 <Medha_EI_Analyser+0x654>)
 8009cd8:	2201      	movs	r2, #1
 8009cda:	701a      	strb	r2, [r3, #0]
		Medha_ei_self_sharing_TX_st.Vital_CRC = Medha_EI_Rx_Pkt_st.Vital_CRC;
 8009cdc:	4b10      	ldr	r3, [pc, #64]	; (8009d20 <Medha_EI_Analyser+0x650>)
 8009cde:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8009ce2:	4a10      	ldr	r2, [pc, #64]	; (8009d24 <Medha_EI_Analyser+0x654>)
 8009ce4:	6053      	str	r3, [r2, #4]

		Send_Medha_EI_Reply(NoOfInputs); /* TO ACKNOWLEDGE THE PACKET */
 8009ce6:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009cea:	4618      	mov	r0, r3
 8009cec:	f000 f954 	bl	8009f98 <Send_Medha_EI_Reply>


		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009cf6:	e028      	b.n	8009d4a <Medha_EI_Analyser+0x67a>
 8009cf8:	20000304 	.word	0x20000304
 8009cfc:	080259a8 	.word	0x080259a8
 8009d00:	080259e4 	.word	0x080259e4
 8009d04:	20000305 	.word	0x20000305
 8009d08:	080259f0 	.word	0x080259f0
 8009d0c:	08025814 	.word	0x08025814
 8009d10:	08025a3c 	.word	0x08025a3c
 8009d14:	08025a60 	.word	0x08025a60
 8009d18:	08025a74 	.word	0x08025a74
 8009d1c:	200026a8 	.word	0x200026a8
 8009d20:	20002554 	.word	0x20002554
 8009d24:	200026b8 	.word	0x200026b8
		{
			//Medha_Cur_Relay_Status_st.Relay_Status[Traverser] = ROTATE_BYTE(Medha_EI_Temp_Rx_st.RelayStatus[Traverser]);
			Medha_Cur_Relay_Status_st.Relay_Status[Traverser] = (Medha_EI_Temp_Rx_st.RelayStatus[Traverser]);
 8009d28:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 8009d2c:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009d30:	f507 7138 	add.w	r1, r7, #736	; 0x2e0
 8009d34:	f5a1 7138 	sub.w	r1, r1, #736	; 0x2e0
 8009d38:	440a      	add	r2, r1
 8009d3a:	7d91      	ldrb	r1, [r2, #22]
 8009d3c:	4a80      	ldr	r2, [pc, #512]	; (8009f40 <Medha_EI_Analyser+0x870>)
 8009d3e:	54d1      	strb	r1, [r2, r3]
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 8009d40:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009d44:	3301      	adds	r3, #1
 8009d46:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009d4a:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 8009d4e:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009d52:	429a      	cmp	r2, r3
 8009d54:	d3e8      	bcc.n	8009d28 <Medha_EI_Analyser+0x658>
		}
		Medha_Cur_Relay_Status_st.Vital_CRC = Medha_EI_Rx_Pkt_st.Vital_CRC;
 8009d56:	4b7b      	ldr	r3, [pc, #492]	; (8009f44 <Medha_EI_Analyser+0x874>)
 8009d58:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8009d5c:	4a78      	ldr	r2, [pc, #480]	; (8009f40 <Medha_EI_Analyser+0x870>)
 8009d5e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

		if(memcmp(Medha_Temp_relay_sts_t.Relay_Status,Medha_Cur_Relay_Status_st.Relay_Status,NoOfInputs)!=0)
 8009d62:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009d66:	461a      	mov	r2, r3
 8009d68:	4975      	ldr	r1, [pc, #468]	; (8009f40 <Medha_EI_Analyser+0x870>)
 8009d6a:	4877      	ldr	r0, [pc, #476]	; (8009f48 <Medha_EI_Analyser+0x878>)
 8009d6c:	f018 fda6 	bl	80228bc <memcmp>
 8009d70:	4603      	mov	r3, r0
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d030      	beq.n	8009dd8 <Medha_EI_Analyser+0x708>
		{
			memcpy(&Medha_Temp_relay_sts_t.Relay_Status,&Medha_Cur_Relay_Status_st.Relay_Status,NoOfInputs);
 8009d76:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009d7a:	461a      	mov	r2, r3
 8009d7c:	4970      	ldr	r1, [pc, #448]	; (8009f40 <Medha_EI_Analyser+0x870>)
 8009d7e:	4872      	ldr	r0, [pc, #456]	; (8009f48 <Medha_EI_Analyser+0x878>)
 8009d80:	f018 fdac 	bl	80228dc <memcpy>
			Medha_Temp_relay_sts_t.Vital_CRC = Medha_Cur_Relay_Status_st.Vital_CRC;
 8009d84:	4b6e      	ldr	r3, [pc, #440]	; (8009f40 <Medha_EI_Analyser+0x870>)
 8009d86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d8a:	4a6f      	ldr	r2, [pc, #444]	; (8009f48 <Medha_EI_Analyser+0x878>)
 8009d8c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

			memset(&Medha_Relay_Sts_st.Relay_Sts,0,sizeof(MEDHA_RELAY_STS_t));
 8009d90:	2230      	movs	r2, #48	; 0x30
 8009d92:	2100      	movs	r1, #0
 8009d94:	486d      	ldr	r0, [pc, #436]	; (8009f4c <Medha_EI_Analyser+0x87c>)
 8009d96:	f018 fdc9 	bl	802292c <memset>
			//InsertBits(0, 16, &Medha_Relay_Sts_st.Relay_Sts[0], Medha_Prms_st.NoofRelays);
			memcpy(&Medha_Relay_Sts_st.Relay_Sts,Medha_Cur_Relay_Status_st.Relay_Status,NoOfInputs);
 8009d9a:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009d9e:	461a      	mov	r2, r3
 8009da0:	4967      	ldr	r1, [pc, #412]	; (8009f40 <Medha_EI_Analyser+0x870>)
 8009da2:	486a      	ldr	r0, [pc, #424]	; (8009f4c <Medha_EI_Analyser+0x87c>)
 8009da4:	f018 fd9a 	bl	80228dc <memcpy>
#ifdef EI_1
			TransmitCanPkt(EI_PROCESS_DATA);
 8009da8:	f240 1019 	movw	r0, #281	; 0x119
 8009dac:	f005 fe6c 	bl	800fa88 <TransmitCanPkt>
#endif
			Medha_Fault_Handler_st.Relay_sending_clk = HAL_GetTick();
 8009db0:	f00b fe9a 	bl	8015ae8 <HAL_GetTick>
 8009db4:	4603      	mov	r3, r0
 8009db6:	4a66      	ldr	r2, [pc, #408]	; (8009f50 <Medha_EI_Analyser+0x880>)
 8009db8:	6093      	str	r3, [r2, #8]

			printf("CAN Packet sent to MIE\n");
 8009dba:	4866      	ldr	r0, [pc, #408]	; (8009f54 <Medha_EI_Analyser+0x884>)
 8009dbc:	f018 ff3a 	bl	8022c34 <puts>


#ifdef EI_1
			TransmitCanPkt(EI_1_SELF_SHARING);
 8009dc0:	f240 2001 	movw	r0, #513	; 0x201
 8009dc4:	f005 fe60 	bl	800fa88 <TransmitCanPkt>
#endif
#ifdef EI_2
			TransmitCanPkt(EI_2_SELF_SHARING);
#endif

			if(Medha_ei_self_sharing_RX_st.Vital_CRC == 0)
 8009dc8:	4b63      	ldr	r3, [pc, #396]	; (8009f58 <Medha_EI_Analyser+0x888>)
 8009dca:	685b      	ldr	r3, [r3, #4]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d103      	bne.n	8009dd8 <Medha_EI_Analyser+0x708>
			{
#ifdef EI_1
				TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 8009dd0:	f240 2007 	movw	r0, #519	; 0x207
 8009dd4:	f005 fe58 	bl	800fa88 <TransmitCanPkt>
#endif
			}

		}

		printf("\n__________ RCV MSG DETAILS __________\n");
 8009dd8:	4860      	ldr	r0, [pc, #384]	; (8009f5c <Medha_EI_Analyser+0x88c>)
 8009dda:	f018 ff2b 	bl	8022c34 <puts>
		printf("DA:%5u|",Medha_EI_Temp_Rx_st.Dest_Addr);
 8009dde:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009de2:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009de6:	889b      	ldrh	r3, [r3, #4]
 8009de8:	4619      	mov	r1, r3
 8009dea:	485d      	ldr	r0, [pc, #372]	; (8009f60 <Medha_EI_Analyser+0x890>)
 8009dec:	f018 fe86 	bl	8022afc <iprintf>
		printf("SA:%5u|",Medha_EI_Temp_Rx_st.Source_Addr);
 8009df0:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009df4:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009df8:	885b      	ldrh	r3, [r3, #2]
 8009dfa:	4619      	mov	r1, r3
 8009dfc:	4859      	ldr	r0, [pc, #356]	; (8009f64 <Medha_EI_Analyser+0x894>)
 8009dfe:	f018 fe7d 	bl	8022afc <iprintf>
		printf("CT:%02X|",Medha_EI_Temp_Rx_st.Channel_Type);
 8009e02:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009e06:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009e0a:	799b      	ldrb	r3, [r3, #6]
 8009e0c:	4619      	mov	r1, r3
 8009e0e:	4856      	ldr	r0, [pc, #344]	; (8009f68 <Medha_EI_Analyser+0x898>)
 8009e10:	f018 fe74 	bl	8022afc <iprintf>
		printf("CB:%02X|",Medha_EI_Temp_Rx_st.Control_Byte);
 8009e14:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009e18:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009e1c:	79db      	ldrb	r3, [r3, #7]
 8009e1e:	4619      	mov	r1, r3
 8009e20:	4852      	ldr	r0, [pc, #328]	; (8009f6c <Medha_EI_Analyser+0x89c>)
 8009e22:	f018 fe6b 	bl	8022afc <iprintf>
		printf("L :%5u|",Medha_EI_Temp_Rx_st.Length);
 8009e26:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009e2a:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009e2e:	891b      	ldrh	r3, [r3, #8]
 8009e30:	4619      	mov	r1, r3
 8009e32:	484f      	ldr	r0, [pc, #316]	; (8009f70 <Medha_EI_Analyser+0x8a0>)
 8009e34:	f018 fe62 	bl	8022afc <iprintf>
		printf("PN:%3u|",Medha_EI_Temp_Rx_st.Packet_Number);
 8009e38:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009e3c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009e40:	7a9b      	ldrb	r3, [r3, #10]
 8009e42:	4619      	mov	r1, r3
 8009e44:	484b      	ldr	r0, [pc, #300]	; (8009f74 <Medha_EI_Analyser+0x8a4>)
 8009e46:	f018 fe59 	bl	8022afc <iprintf>
		printf("TS:%02x:%02x:%02x|%02x/%02x/%02x|",Medha_EI_Temp_Rx_st.Reserved1[3],Medha_EI_Temp_Rx_st.Reserved1[2],Medha_EI_Temp_Rx_st.Reserved1[1],Medha_EI_Temp_Rx_st.Reserved1[4],Medha_EI_Temp_Rx_st.Reserved1[5],Medha_EI_Temp_Rx_st.Reserved1[6]);
 8009e4a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009e4e:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009e52:	7b9b      	ldrb	r3, [r3, #14]
 8009e54:	4618      	mov	r0, r3
 8009e56:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009e5a:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009e5e:	7b5b      	ldrb	r3, [r3, #13]
 8009e60:	461c      	mov	r4, r3
 8009e62:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009e66:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009e6a:	7b1b      	ldrb	r3, [r3, #12]
 8009e6c:	461d      	mov	r5, r3
 8009e6e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009e72:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009e76:	7bdb      	ldrb	r3, [r3, #15]
 8009e78:	461a      	mov	r2, r3
 8009e7a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009e7e:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009e82:	7c1b      	ldrb	r3, [r3, #16]
 8009e84:	4619      	mov	r1, r3
 8009e86:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009e8a:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009e8e:	7c5b      	ldrb	r3, [r3, #17]
 8009e90:	9302      	str	r3, [sp, #8]
 8009e92:	9101      	str	r1, [sp, #4]
 8009e94:	9200      	str	r2, [sp, #0]
 8009e96:	462b      	mov	r3, r5
 8009e98:	4622      	mov	r2, r4
 8009e9a:	4601      	mov	r1, r0
 8009e9c:	4836      	ldr	r0, [pc, #216]	; (8009f78 <Medha_EI_Analyser+0x8a8>)
 8009e9e:	f018 fe2d 	bl	8022afc <iprintf>
		printf("HS:%02X|",Medha_EI_Temp_Rx_st.Health_Status);
 8009ea2:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009ea6:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009eaa:	7c9b      	ldrb	r3, [r3, #18]
 8009eac:	4619      	mov	r1, r3
 8009eae:	4833      	ldr	r0, [pc, #204]	; (8009f7c <Medha_EI_Analyser+0x8ac>)
 8009eb0:	f018 fe24 	bl	8022afc <iprintf>
		printf("RC:%5u\n",Medha_EI_Temp_Rx_st.NoofRelays);
 8009eb4:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009eb8:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009ebc:	8a9b      	ldrh	r3, [r3, #20]
 8009ebe:	4619      	mov	r1, r3
 8009ec0:	482f      	ldr	r0, [pc, #188]	; (8009f80 <Medha_EI_Analyser+0x8b0>)
 8009ec2:	f018 fe1b 	bl	8022afc <iprintf>
		printf("SIGNAL DATA       :");
 8009ec6:	482f      	ldr	r0, [pc, #188]	; (8009f84 <Medha_EI_Analyser+0x8b4>)
 8009ec8:	f018 fe18 	bl	8022afc <iprintf>
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 8009ecc:	2300      	movs	r3, #0
 8009ece:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009ed2:	e021      	b.n	8009f18 <Medha_EI_Analyser+0x848>
		{
			if((Traverser!=0) && ((Traverser%10)==0))
 8009ed4:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d010      	beq.n	8009efe <Medha_EI_Analyser+0x82e>
 8009edc:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 8009ee0:	4b29      	ldr	r3, [pc, #164]	; (8009f88 <Medha_EI_Analyser+0x8b8>)
 8009ee2:	fba3 1302 	umull	r1, r3, r3, r2
 8009ee6:	08d9      	lsrs	r1, r3, #3
 8009ee8:	460b      	mov	r3, r1
 8009eea:	009b      	lsls	r3, r3, #2
 8009eec:	440b      	add	r3, r1
 8009eee:	005b      	lsls	r3, r3, #1
 8009ef0:	1ad3      	subs	r3, r2, r3
 8009ef2:	b29b      	uxth	r3, r3
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d102      	bne.n	8009efe <Medha_EI_Analyser+0x82e>
			{
				printf("\n                   ");
 8009ef8:	4824      	ldr	r0, [pc, #144]	; (8009f8c <Medha_EI_Analyser+0x8bc>)
 8009efa:	f018 fdff 	bl	8022afc <iprintf>
			}
			printf("%02X ",Medha_Cur_Relay_Status_st.Relay_Status[Traverser]);
 8009efe:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009f02:	4a0f      	ldr	r2, [pc, #60]	; (8009f40 <Medha_EI_Analyser+0x870>)
 8009f04:	5cd3      	ldrb	r3, [r2, r3]
 8009f06:	4619      	mov	r1, r3
 8009f08:	4821      	ldr	r0, [pc, #132]	; (8009f90 <Medha_EI_Analyser+0x8c0>)
 8009f0a:	f018 fdf7 	bl	8022afc <iprintf>
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 8009f0e:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009f12:	3301      	adds	r3, #1
 8009f14:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009f18:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 8009f1c:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009f20:	429a      	cmp	r2, r3
 8009f22:	d3d7      	bcc.n	8009ed4 <Medha_EI_Analyser+0x804>
		}
		printf("\n");
 8009f24:	200a      	movs	r0, #10
 8009f26:	f018 fe01 	bl	8022b2c <putchar>
		printf("__________ RCV MSG DETAILS __________\n");
 8009f2a:	481a      	ldr	r0, [pc, #104]	; (8009f94 <Medha_EI_Analyser+0x8c4>)
 8009f2c:	f018 fe82 	bl	8022c34 <puts>
		return;
 8009f30:	e002      	b.n	8009f38 <Medha_EI_Analyser+0x868>
	}
	else
	{
		return;
 8009f32:	bf00      	nop
 8009f34:	e000      	b.n	8009f38 <Medha_EI_Analyser+0x868>
				return;
 8009f36:	bf00      	nop
	}
}
 8009f38:	f507 7738 	add.w	r7, r7, #736	; 0x2e0
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bdb0      	pop	{r4, r5, r7, pc}
 8009f40:	200026d0 	.word	0x200026d0
 8009f44:	20002554 	.word	0x20002554
 8009f48:	200027d8 	.word	0x200027d8
 8009f4c:	20002678 	.word	0x20002678
 8009f50:	200026a8 	.word	0x200026a8
 8009f54:	08025ab4 	.word	0x08025ab4
 8009f58:	200026c0 	.word	0x200026c0
 8009f5c:	08025acc 	.word	0x08025acc
 8009f60:	08025af4 	.word	0x08025af4
 8009f64:	08025afc 	.word	0x08025afc
 8009f68:	08025b04 	.word	0x08025b04
 8009f6c:	08025b10 	.word	0x08025b10
 8009f70:	08025b1c 	.word	0x08025b1c
 8009f74:	08025b24 	.word	0x08025b24
 8009f78:	08025b2c 	.word	0x08025b2c
 8009f7c:	08025b50 	.word	0x08025b50
 8009f80:	08025b5c 	.word	0x08025b5c
 8009f84:	08025b64 	.word	0x08025b64
 8009f88:	cccccccd 	.word	0xcccccccd
 8009f8c:	08025b78 	.word	0x08025b78
 8009f90:	08025814 	.word	0x08025814
 8009f94:	08025b90 	.word	0x08025b90

08009f98 <Send_Medha_EI_Reply>:

void Send_Medha_EI_Reply(uint16_t Outputs)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b0d2      	sub	sp, #328	; 0x148
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	4602      	mov	r2, r0
 8009fa0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009fa4:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 8009fa8:	801a      	strh	r2, [r3, #0]
	uint8_t Transmit_Buff[300] = {0,};
 8009faa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009fae:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	601a      	str	r2, [r3, #0]
 8009fb6:	3304      	adds	r3, #4
 8009fb8:	f44f 7294 	mov.w	r2, #296	; 0x128
 8009fbc:	2100      	movs	r1, #0
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f018 fcb4 	bl	802292c <memset>
	uint32_t Cal_Crc =0;
 8009fc4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009fc8:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8009fcc:	2200      	movs	r2, #0
 8009fce:	601a      	str	r2, [r3, #0]
	uint8_t Message_Length_Loc = 0;
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
	uint16_t Message_Lengh = 0;
 8009fd6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009fda:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8009fde:	2200      	movs	r2, #0
 8009fe0:	801a      	strh	r2, [r3, #0]
	BYTEINIT(0);
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	Transmit_Buff[ucByte] = SOM_MEDHA;
 8009fe8:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009fec:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8009ff0:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8009ff4:	2153      	movs	r1, #83	; 0x53
 8009ff6:	54d1      	strb	r1, [r2, r3]
	BYTEINC(1);
 8009ff8:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009ffc:	3301      	adds	r3, #1
 8009ffe:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Source_Addr,2);
 800a002:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a006:	f107 0214 	add.w	r2, r7, #20
 800a00a:	4413      	add	r3, r2
 800a00c:	4a88      	ldr	r2, [pc, #544]	; (800a230 <Send_Medha_EI_Reply+0x298>)
 800a00e:	8852      	ldrh	r2, [r2, #2]
 800a010:	801a      	strh	r2, [r3, #0]
	BYTEINC(2);
 800a012:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a016:	3302      	adds	r3, #2
 800a018:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Dest_Addr,2);
 800a01c:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a020:	f107 0214 	add.w	r2, r7, #20
 800a024:	4413      	add	r3, r2
 800a026:	4a82      	ldr	r2, [pc, #520]	; (800a230 <Send_Medha_EI_Reply+0x298>)
 800a028:	8892      	ldrh	r2, [r2, #4]
 800a02a:	801a      	strh	r2, [r3, #0]
	BYTEINC(2);
 800a02c:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a030:	3302      	adds	r3, #2
 800a032:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Channel_Type,1);
 800a036:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a03a:	f107 0214 	add.w	r2, r7, #20
 800a03e:	4413      	add	r3, r2
 800a040:	4a7b      	ldr	r2, [pc, #492]	; (800a230 <Send_Medha_EI_Reply+0x298>)
 800a042:	7992      	ldrb	r2, [r2, #6]
 800a044:	701a      	strb	r2, [r3, #0]
	BYTEINC(1);
 800a046:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a04a:	3301      	adds	r3, #1
 800a04c:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	Transmit_Buff[ucByte] = CONTROL_BYTE_TX;
 800a050:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a054:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800a058:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800a05c:	21e2      	movs	r1, #226	; 0xe2
 800a05e:	54d1      	strb	r1, [r2, r3]
	BYTEINC(1);
 800a060:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a064:	3301      	adds	r3, #1
 800a066:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	Message_Length_Loc = ucByte;
 800a06a:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a06e:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
	Transmit_Buff[ucByte] = 0;
 800a072:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a076:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800a07a:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800a07e:	2100      	movs	r1, #0
 800a080:	54d1      	strb	r1, [r2, r3]
	Transmit_Buff[ucByte+1] = 0;
 800a082:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a086:	3301      	adds	r3, #1
 800a088:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800a08c:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800a090:	2100      	movs	r1, #0
 800a092:	54d1      	strb	r1, [r2, r3]
	/*	 Add Message Length at Last.*/
	BYTEINC(2);
 800a094:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a098:	3302      	adds	r3, #2
 800a09a:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Packet_Number,1);
 800a09e:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a0a2:	f107 0214 	add.w	r2, r7, #20
 800a0a6:	4413      	add	r3, r2
 800a0a8:	4a61      	ldr	r2, [pc, #388]	; (800a230 <Send_Medha_EI_Reply+0x298>)
 800a0aa:	7a92      	ldrb	r2, [r2, #10]
 800a0ac:	701a      	strb	r2, [r3, #0]
	BYTEINC(1);
 800a0ae:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a0b2:	3301      	adds	r3, #1
 800a0b4:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	/*	/////////////////////////////////////////////////////////////////*/
	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Reserved1,7);
 800a0b8:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a0bc:	f107 0214 	add.w	r2, r7, #20
 800a0c0:	441a      	add	r2, r3
 800a0c2:	4b5b      	ldr	r3, [pc, #364]	; (800a230 <Send_Medha_EI_Reply+0x298>)
 800a0c4:	330b      	adds	r3, #11
 800a0c6:	6819      	ldr	r1, [r3, #0]
 800a0c8:	6011      	str	r1, [r2, #0]
 800a0ca:	8899      	ldrh	r1, [r3, #4]
 800a0cc:	799b      	ldrb	r3, [r3, #6]
 800a0ce:	8091      	strh	r1, [r2, #4]
 800a0d0:	7193      	strb	r3, [r2, #6]
	BYTEINC(7);
 800a0d2:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a0d6:	3307      	adds	r3, #7
 800a0d8:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142
	/*	/////////////////////////////////////////////////////////////////*/

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.NoofRelays,2);
 800a0dc:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a0e0:	f107 0214 	add.w	r2, r7, #20
 800a0e4:	4413      	add	r3, r2
 800a0e6:	4a52      	ldr	r2, [pc, #328]	; (800a230 <Send_Medha_EI_Reply+0x298>)
 800a0e8:	8a92      	ldrh	r2, [r2, #20]
 800a0ea:	801a      	strh	r2, [r3, #0]
	BYTEINC(2);
 800a0ec:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a0f0:	3302      	adds	r3, #2
 800a0f2:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.RelayStatus,Outputs);
 800a0f6:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a0fa:	f107 0214 	add.w	r2, r7, #20
 800a0fe:	18d0      	adds	r0, r2, r3
 800a100:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a104:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 800a108:	881b      	ldrh	r3, [r3, #0]
 800a10a:	461a      	mov	r2, r3
 800a10c:	4949      	ldr	r1, [pc, #292]	; (800a234 <Send_Medha_EI_Reply+0x29c>)
 800a10e:	f018 fbe5 	bl	80228dc <memcpy>
	BYTEINC(Outputs);
 800a112:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a116:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 800a11a:	f8b7 2142 	ldrh.w	r2, [r7, #322]	; 0x142
 800a11e:	881b      	ldrh	r3, [r3, #0]
 800a120:	4413      	add	r3, r2
 800a122:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Comp_RelayStatus,Outputs);
 800a126:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a12a:	f107 0214 	add.w	r2, r7, #20
 800a12e:	18d0      	adds	r0, r2, r3
 800a130:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a134:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 800a138:	881b      	ldrh	r3, [r3, #0]
 800a13a:	461a      	mov	r2, r3
 800a13c:	493e      	ldr	r1, [pc, #248]	; (800a238 <Send_Medha_EI_Reply+0x2a0>)
 800a13e:	f018 fbcd 	bl	80228dc <memcpy>
	BYTEINC(Outputs);
 800a142:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a146:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 800a14a:	f8b7 2142 	ldrh.w	r2, [r7, #322]	; 0x142
 800a14e:	881b      	ldrh	r3, [r3, #0]
 800a150:	4413      	add	r3, r2
 800a152:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	Transmit_Buff[ucByte]=0;
 800a156:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a15a:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800a15e:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800a162:	2100      	movs	r1, #0
 800a164:	54d1      	strb	r1, [r2, r3]
	Transmit_Buff[ucByte]=0;
 800a166:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a16a:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800a16e:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800a172:	2100      	movs	r1, #0
 800a174:	54d1      	strb	r1, [r2, r3]
	BYTEINC(2); /*RESERVED2*/
 800a176:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a17a:	3302      	adds	r3, #2
 800a17c:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142
	 * "Message_Length_Loc" is Size before Message_length field excluding the Length 2 Bytes.
	 * To get Message Length we calculated like below.
	 *
	 * Message_Length = (     (current Packet Length+"CRC_SIZE") - (Message_Length_Location + "MSG_LEN_SIZE") )
	 */
	Message_Lengh = ( (ucByte+4)-(Message_Length_Loc+2));
 800a180:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800a184:	b29b      	uxth	r3, r3
 800a186:	f8b7 2142 	ldrh.w	r2, [r7, #322]	; 0x142
 800a18a:	1ad3      	subs	r3, r2, r3
 800a18c:	b29b      	uxth	r3, r3
 800a18e:	3302      	adds	r3, #2
 800a190:	b29a      	uxth	r2, r3
 800a192:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a196:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800a19a:	801a      	strh	r2, [r3, #0]
	memcpy(&Transmit_Buff[Message_Length_Loc],&Message_Lengh,2);
 800a19c:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800a1a0:	f107 0214 	add.w	r2, r7, #20
 800a1a4:	4413      	add	r3, r2
 800a1a6:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800a1aa:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 800a1ae:	8812      	ldrh	r2, [r2, #0]
 800a1b0:	801a      	strh	r2, [r3, #0]

	Cal_Crc = GetCRC32(0,Transmit_Buff,ucByte);
 800a1b2:	f8b7 2142 	ldrh.w	r2, [r7, #322]	; 0x142
 800a1b6:	f107 0314 	add.w	r3, r7, #20
 800a1ba:	4619      	mov	r1, r3
 800a1bc:	2000      	movs	r0, #0
 800a1be:	f000 fe31 	bl	800ae24 <GetCRC32>
 800a1c2:	4602      	mov	r2, r0
 800a1c4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a1c8:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800a1cc:	601a      	str	r2, [r3, #0]
	memcpy(&Transmit_Buff[ucByte],&Cal_Crc,4);
 800a1ce:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a1d2:	f107 0214 	add.w	r2, r7, #20
 800a1d6:	4413      	add	r3, r2
 800a1d8:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800a1dc:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 800a1e0:	6812      	ldr	r2, [r2, #0]
 800a1e2:	601a      	str	r2, [r3, #0]
	BYTEINC(4);
 800a1e4:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a1e8:	3304      	adds	r3, #4
 800a1ea:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142
		printf("%02x ",Transmit_Buff[Traverser]);
	}
	printf("\n");
	 */

	for(uint16_t Traverser = 0;Traverser<ucByte;++Traverser)
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
 800a1f4:	e011      	b.n	800a21a <Send_Medha_EI_Reply+0x282>
	{
		Com_SendByte(EI_data.Medha_Prms_st.Comport, Transmit_Buff[Traverser]);
 800a1f6:	4b11      	ldr	r3, [pc, #68]	; (800a23c <Send_Medha_EI_Reply+0x2a4>)
 800a1f8:	f893 0320 	ldrb.w	r0, [r3, #800]	; 0x320
 800a1fc:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 800a200:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800a204:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800a208:	5cd3      	ldrb	r3, [r2, r3]
 800a20a:	4619      	mov	r1, r3
 800a20c:	f00b fa14 	bl	8015638 <Com_SendByte>
	for(uint16_t Traverser = 0;Traverser<ucByte;++Traverser)
 800a210:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 800a214:	3301      	adds	r3, #1
 800a216:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
 800a21a:	f8b7 2146 	ldrh.w	r2, [r7, #326]	; 0x146
 800a21e:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a222:	429a      	cmp	r2, r3
 800a224:	d3e7      	bcc.n	800a1f6 <Send_Medha_EI_Reply+0x25e>
	}
	return;
 800a226:	bf00      	nop
}
 800a228:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}
 800a230:	20002554 	.word	0x20002554
 800a234:	2000256a 	.word	0x2000256a
 800a238:	200025ea 	.word	0x200025ea
 800a23c:	20000304 	.word	0x20000304

0800a240 <Send_Relay_Statuses_2_MIE>:


void Send_Relay_Statuses_2_MIE(void)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b082      	sub	sp, #8
 800a244:	af00      	add	r7, sp, #0
	if(HAL_Elaps_Ticks(Medha_Fault_Handler_st.Relay_sending_clk) >= EI_data.Medha_Prms_st.SendSignal2MIE_CLK)
 800a246:	4b36      	ldr	r3, [pc, #216]	; (800a320 <Send_Relay_Statuses_2_MIE+0xe0>)
 800a248:	689b      	ldr	r3, [r3, #8]
 800a24a:	4618      	mov	r0, r3
 800a24c:	f004 fe62 	bl	800ef14 <HAL_Elaps_Ticks>
 800a250:	4602      	mov	r2, r0
 800a252:	4b34      	ldr	r3, [pc, #208]	; (800a324 <Send_Relay_Statuses_2_MIE+0xe4>)
 800a254:	f8d3 3334 	ldr.w	r3, [r3, #820]	; 0x334
 800a258:	429a      	cmp	r2, r3
 800a25a:	d349      	bcc.n	800a2f0 <Send_Relay_Statuses_2_MIE+0xb0>
	{
		uint16_t NoOfInputs = 0;
 800a25c:	2300      	movs	r3, #0
 800a25e:	80fb      	strh	r3, [r7, #6]
		(EI_data.Medha_Prms_st.NoofRelays%8)?(NoOfInputs=((EI_data.Medha_Prms_st.NoofRelays / 8)) + 1):(NoOfInputs = (EI_data.Medha_Prms_st.NoofRelays / 8));
 800a260:	4b30      	ldr	r3, [pc, #192]	; (800a324 <Send_Relay_Statuses_2_MIE+0xe4>)
 800a262:	f8b3 3328 	ldrh.w	r3, [r3, #808]	; 0x328
 800a266:	f003 0307 	and.w	r3, r3, #7
 800a26a:	b29b      	uxth	r3, r3
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d007      	beq.n	800a280 <Send_Relay_Statuses_2_MIE+0x40>
 800a270:	4b2c      	ldr	r3, [pc, #176]	; (800a324 <Send_Relay_Statuses_2_MIE+0xe4>)
 800a272:	f8b3 3328 	ldrh.w	r3, [r3, #808]	; 0x328
 800a276:	08db      	lsrs	r3, r3, #3
 800a278:	b29b      	uxth	r3, r3
 800a27a:	3301      	adds	r3, #1
 800a27c:	80fb      	strh	r3, [r7, #6]
 800a27e:	e004      	b.n	800a28a <Send_Relay_Statuses_2_MIE+0x4a>
 800a280:	4b28      	ldr	r3, [pc, #160]	; (800a324 <Send_Relay_Statuses_2_MIE+0xe4>)
 800a282:	f8b3 3328 	ldrh.w	r3, [r3, #808]	; 0x328
 800a286:	08db      	lsrs	r3, r3, #3
 800a288:	80fb      	strh	r3, [r7, #6]

		Medha_Fault_Handler_st.Relay_sending_clk = HAL_GetTick();
 800a28a:	f00b fc2d 	bl	8015ae8 <HAL_GetTick>
 800a28e:	4603      	mov	r3, r0
 800a290:	4a23      	ldr	r2, [pc, #140]	; (800a320 <Send_Relay_Statuses_2_MIE+0xe0>)
 800a292:	6093      	str	r3, [r2, #8]
		printf("SendingRelaysToMIE:\n");
 800a294:	4824      	ldr	r0, [pc, #144]	; (800a328 <Send_Relay_Statuses_2_MIE+0xe8>)
 800a296:	f018 fccd 	bl	8022c34 <puts>
		//		for(uint32_t Traverser=0;Traverser<(sizeof(Medha_Relay_Sts_st));++Traverser)


		for(uint32_t Traverser=0;Traverser<(NoOfInputs);++Traverser)
 800a29a:	2300      	movs	r3, #0
 800a29c:	603b      	str	r3, [r7, #0]
 800a29e:	e01c      	b.n	800a2da <Send_Relay_Statuses_2_MIE+0x9a>

		{
			if( (Traverser!=0) && ( (Traverser%20)==0) )
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d00e      	beq.n	800a2c4 <Send_Relay_Statuses_2_MIE+0x84>
 800a2a6:	6839      	ldr	r1, [r7, #0]
 800a2a8:	4b20      	ldr	r3, [pc, #128]	; (800a32c <Send_Relay_Statuses_2_MIE+0xec>)
 800a2aa:	fba3 2301 	umull	r2, r3, r3, r1
 800a2ae:	091a      	lsrs	r2, r3, #4
 800a2b0:	4613      	mov	r3, r2
 800a2b2:	009b      	lsls	r3, r3, #2
 800a2b4:	4413      	add	r3, r2
 800a2b6:	009b      	lsls	r3, r3, #2
 800a2b8:	1aca      	subs	r2, r1, r3
 800a2ba:	2a00      	cmp	r2, #0
 800a2bc:	d102      	bne.n	800a2c4 <Send_Relay_Statuses_2_MIE+0x84>
			{
				printf("\n");
 800a2be:	200a      	movs	r0, #10
 800a2c0:	f018 fc34 	bl	8022b2c <putchar>
			}
			printf("%02X ",Medha_Relay_Sts_st.Relay_Sts[Traverser]);
 800a2c4:	4a1a      	ldr	r2, [pc, #104]	; (800a330 <Send_Relay_Statuses_2_MIE+0xf0>)
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	4413      	add	r3, r2
 800a2ca:	781b      	ldrb	r3, [r3, #0]
 800a2cc:	4619      	mov	r1, r3
 800a2ce:	4819      	ldr	r0, [pc, #100]	; (800a334 <Send_Relay_Statuses_2_MIE+0xf4>)
 800a2d0:	f018 fc14 	bl	8022afc <iprintf>
		for(uint32_t Traverser=0;Traverser<(NoOfInputs);++Traverser)
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	3301      	adds	r3, #1
 800a2d8:	603b      	str	r3, [r7, #0]
 800a2da:	88fb      	ldrh	r3, [r7, #6]
 800a2dc:	683a      	ldr	r2, [r7, #0]
 800a2de:	429a      	cmp	r2, r3
 800a2e0:	d3de      	bcc.n	800a2a0 <Send_Relay_Statuses_2_MIE+0x60>
		}
		printf("\n");
 800a2e2:	200a      	movs	r0, #10
 800a2e4:	f018 fc22 	bl	8022b2c <putchar>

#ifdef EI_1
		TransmitCanPkt(EI_PROCESS_DATA);
 800a2e8:	f240 1019 	movw	r0, #281	; 0x119
 800a2ec:	f005 fbcc 	bl	800fa88 <TransmitCanPkt>
	}


#ifdef EI_1
	static uint32_t CombineHealthClk = 0;
	if(HAL_Elaps_Ticks(CombineHealthClk) > THREE_SEC)
 800a2f0:	4b11      	ldr	r3, [pc, #68]	; (800a338 <Send_Relay_Statuses_2_MIE+0xf8>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f004 fe0d 	bl	800ef14 <HAL_Elaps_Ticks>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800a300:	4293      	cmp	r3, r2
 800a302:	d908      	bls.n	800a316 <Send_Relay_Statuses_2_MIE+0xd6>
	{
		TransmitCanPkt(COMBINE_EiPC_HEALTH);
 800a304:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a308:	f005 fbbe 	bl	800fa88 <TransmitCanPkt>
		CombineHealthClk = HAL_GetTick();
 800a30c:	f00b fbec 	bl	8015ae8 <HAL_GetTick>
 800a310:	4603      	mov	r3, r0
 800a312:	4a09      	ldr	r2, [pc, #36]	; (800a338 <Send_Relay_Statuses_2_MIE+0xf8>)
 800a314:	6013      	str	r3, [r2, #0]
	}
#endif



}
 800a316:	bf00      	nop
 800a318:	3708      	adds	r7, #8
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}
 800a31e:	bf00      	nop
 800a320:	200026a8 	.word	0x200026a8
 800a324:	20000304 	.word	0x20000304
 800a328:	08025bb8 	.word	0x08025bb8
 800a32c:	cccccccd 	.word	0xcccccccd
 800a330:	20002678 	.word	0x20002678
 800a334:	08025814 	.word	0x08025814
 800a338:	20002868 	.word	0x20002868

0800a33c <Process_Clear_Relays>:

void Process_Clear_Relays(void)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b082      	sub	sp, #8
 800a340:	af00      	add	r7, sp, #0
	static uint32_t Last_Clear_clk = 0;
	uint32_t Last_Received_Elaps = (HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk));
 800a342:	4b52      	ldr	r3, [pc, #328]	; (800a48c <Process_Clear_Relays+0x150>)
 800a344:	685b      	ldr	r3, [r3, #4]
 800a346:	4618      	mov	r0, r3
 800a348:	f004 fde4 	bl	800ef14 <HAL_Elaps_Ticks>
 800a34c:	6078      	str	r0, [r7, #4]
	uint32_t Timeout =  (EI_data.Medha_Prms_st.Packet_Interval_ms * EI_data.Medha_Prms_st.Packet_Timeout_Count);
 800a34e:	4b50      	ldr	r3, [pc, #320]	; (800a490 <Process_Clear_Relays+0x154>)
 800a350:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 800a354:	4a4e      	ldr	r2, [pc, #312]	; (800a490 <Process_Clear_Relays+0x154>)
 800a356:	f8b2 2326 	ldrh.w	r2, [r2, #806]	; 0x326
 800a35a:	fb02 f303 	mul.w	r3, r2, r3
 800a35e:	603b      	str	r3, [r7, #0]


	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 800a360:	494c      	ldr	r1, [pc, #304]	; (800a494 <Process_Clear_Relays+0x158>)
 800a362:	484d      	ldr	r0, [pc, #308]	; (800a498 <Process_Clear_Relays+0x15c>)
 800a364:	f7f5 ff6c 	bl	8000240 <strcmp>
 800a368:	4603      	mov	r3, r0
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	f000 8089 	beq.w	800a482 <Process_Clear_Relays+0x146>
	}




	if( ( (Last_Received_Elaps >= Timeout) && (Last_Clear_clk != Medha_Fault_Handler_st.Pkt_Rcv_clk) && (Medha_ei_self_sharing_RX_st.MisMatch_CNT > EI_data.Medha_Prms_st.Max_Mismatch_value) )
 800a370:	687a      	ldr	r2, [r7, #4]
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	429a      	cmp	r2, r3
 800a376:	d30c      	bcc.n	800a392 <Process_Clear_Relays+0x56>
 800a378:	4b44      	ldr	r3, [pc, #272]	; (800a48c <Process_Clear_Relays+0x150>)
 800a37a:	685a      	ldr	r2, [r3, #4]
 800a37c:	4b47      	ldr	r3, [pc, #284]	; (800a49c <Process_Clear_Relays+0x160>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	429a      	cmp	r2, r3
 800a382:	d006      	beq.n	800a392 <Process_Clear_Relays+0x56>
 800a384:	4b46      	ldr	r3, [pc, #280]	; (800a4a0 <Process_Clear_Relays+0x164>)
 800a386:	785a      	ldrb	r2, [r3, #1]
 800a388:	4b41      	ldr	r3, [pc, #260]	; (800a490 <Process_Clear_Relays+0x154>)
 800a38a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a38e:	429a      	cmp	r2, r3
 800a390:	d808      	bhi.n	800a3a4 <Process_Clear_Relays+0x68>
			||((Medha_Fault_Handler_st.Clear_Relay_Statuses >= 1) && (Medha_Cur_Relay_Status_st.Vital_CRC != 0))
 800a392:	4b3e      	ldr	r3, [pc, #248]	; (800a48c <Process_Clear_Relays+0x150>)
 800a394:	781b      	ldrb	r3, [r3, #0]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d051      	beq.n	800a43e <Process_Clear_Relays+0x102>
 800a39a:	4b42      	ldr	r3, [pc, #264]	; (800a4a4 <Process_Clear_Relays+0x168>)
 800a39c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d04c      	beq.n	800a43e <Process_Clear_Relays+0x102>
	)
	{
		printf("Medha_Fault_Handler_st.Clear_Relay_Statuses:%u\n",Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800a3a4:	4b39      	ldr	r3, [pc, #228]	; (800a48c <Process_Clear_Relays+0x150>)
 800a3a6:	781b      	ldrb	r3, [r3, #0]
 800a3a8:	4619      	mov	r1, r3
 800a3aa:	483f      	ldr	r0, [pc, #252]	; (800a4a8 <Process_Clear_Relays+0x16c>)
 800a3ac:	f018 fba6 	bl	8022afc <iprintf>

		if(CHECKFLAG(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses) == SET)
 800a3b0:	4b36      	ldr	r3, [pc, #216]	; (800a48c <Process_Clear_Relays+0x150>)
 800a3b2:	781b      	ldrb	r3, [r3, #0]
 800a3b4:	f003 0301 	and.w	r3, r3, #1
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d006      	beq.n	800a3ca <Process_Clear_Relays+0x8e>
		{
			CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800a3bc:	4b33      	ldr	r3, [pc, #204]	; (800a48c <Process_Clear_Relays+0x150>)
 800a3be:	781b      	ldrb	r3, [r3, #0]
 800a3c0:	f023 0301 	bic.w	r3, r3, #1
 800a3c4:	b2da      	uxtb	r2, r3
 800a3c6:	4b31      	ldr	r3, [pc, #196]	; (800a48c <Process_Clear_Relays+0x150>)
 800a3c8:	701a      	strb	r2, [r3, #0]
		}
		if(CHECKFLAG(CAN_EXCHANGE_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses) == SET)
 800a3ca:	4b30      	ldr	r3, [pc, #192]	; (800a48c <Process_Clear_Relays+0x150>)
 800a3cc:	781b      	ldrb	r3, [r3, #0]
 800a3ce:	f003 0302 	and.w	r3, r3, #2
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d006      	beq.n	800a3e4 <Process_Clear_Relays+0xa8>
		{
			CLEAR_BIT_USER(CAN_EXCHANGE_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800a3d6:	4b2d      	ldr	r3, [pc, #180]	; (800a48c <Process_Clear_Relays+0x150>)
 800a3d8:	781b      	ldrb	r3, [r3, #0]
 800a3da:	f023 0302 	bic.w	r3, r3, #2
 800a3de:	b2da      	uxtb	r2, r3
 800a3e0:	4b2a      	ldr	r3, [pc, #168]	; (800a48c <Process_Clear_Relays+0x150>)
 800a3e2:	701a      	strb	r2, [r3, #0]
		}
		memset(&Medha_Cur_Relay_Status_st,0,sizeof(MEDHA_CUR_RELAY_STS_t));
 800a3e4:	2284      	movs	r2, #132	; 0x84
 800a3e6:	2100      	movs	r1, #0
 800a3e8:	482e      	ldr	r0, [pc, #184]	; (800a4a4 <Process_Clear_Relays+0x168>)
 800a3ea:	f018 fa9f 	bl	802292c <memset>
		memset(&Medha_Relay_Sts_st,0,sizeof(MEDHA_RELAY_STS_t));
 800a3ee:	2230      	movs	r2, #48	; 0x30
 800a3f0:	2100      	movs	r1, #0
 800a3f2:	482e      	ldr	r0, [pc, #184]	; (800a4ac <Process_Clear_Relays+0x170>)
 800a3f4:	f018 fa9a 	bl	802292c <memset>
		memset(&Medha_Temp_relay_sts_t,0,sizeof(MEDHA_CUR_RELAY_STS_t));
 800a3f8:	2284      	movs	r2, #132	; 0x84
 800a3fa:	2100      	movs	r1, #0
 800a3fc:	482c      	ldr	r0, [pc, #176]	; (800a4b0 <Process_Clear_Relays+0x174>)
 800a3fe:	f018 fa95 	bl	802292c <memset>
		memset(&Medha_ei_self_sharing_TX_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 800a402:	2208      	movs	r2, #8
 800a404:	2100      	movs	r1, #0
 800a406:	482b      	ldr	r0, [pc, #172]	; (800a4b4 <Process_Clear_Relays+0x178>)
 800a408:	f018 fa90 	bl	802292c <memset>
		memset(&Medha_ei_self_sharing_RX_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 800a40c:	2208      	movs	r2, #8
 800a40e:	2100      	movs	r1, #0
 800a410:	4823      	ldr	r0, [pc, #140]	; (800a4a0 <Process_Clear_Relays+0x164>)
 800a412:	f018 fa8b 	bl	802292c <memset>
		memset(&Medha_ei_self_sharing_Temp_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 800a416:	2208      	movs	r2, #8
 800a418:	2100      	movs	r1, #0
 800a41a:	4827      	ldr	r0, [pc, #156]	; (800a4b8 <Process_Clear_Relays+0x17c>)
 800a41c:	f018 fa86 	bl	802292c <memset>
		printf("Cleared Relay Statuses\n");
 800a420:	4826      	ldr	r0, [pc, #152]	; (800a4bc <Process_Clear_Relays+0x180>)
 800a422:	f018 fc07 	bl	8022c34 <puts>
		Last_Clear_clk =Medha_Fault_Handler_st.Pkt_Rcv_clk;
 800a426:	4b19      	ldr	r3, [pc, #100]	; (800a48c <Process_Clear_Relays+0x150>)
 800a428:	685b      	ldr	r3, [r3, #4]
 800a42a:	4a1c      	ldr	r2, [pc, #112]	; (800a49c <Process_Clear_Relays+0x160>)
 800a42c:	6013      	str	r3, [r2, #0]
		SET_BIT_USER(0,EI_HealthStatus);
 800a42e:	4b24      	ldr	r3, [pc, #144]	; (800a4c0 <Process_Clear_Relays+0x184>)
 800a430:	881b      	ldrh	r3, [r3, #0]
 800a432:	f043 0301 	orr.w	r3, r3, #1
 800a436:	b29a      	uxth	r2, r3
 800a438:	4b21      	ldr	r3, [pc, #132]	; (800a4c0 <Process_Clear_Relays+0x184>)
 800a43a:	801a      	strh	r2, [r3, #0]
 800a43c:	e022      	b.n	800a484 <Process_Clear_Relays+0x148>
	}
	else if(
 800a43e:	687a      	ldr	r2, [r7, #4]
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	429a      	cmp	r2, r3
 800a444:	d80c      	bhi.n	800a460 <Process_Clear_Relays+0x124>
			(
					(Last_Received_Elaps <= Timeout) &&
					(Last_Clear_clk != Medha_Fault_Handler_st.Pkt_Rcv_clk) &&
 800a446:	4b11      	ldr	r3, [pc, #68]	; (800a48c <Process_Clear_Relays+0x150>)
 800a448:	685a      	ldr	r2, [r3, #4]
 800a44a:	4b14      	ldr	r3, [pc, #80]	; (800a49c <Process_Clear_Relays+0x160>)
 800a44c:	681b      	ldr	r3, [r3, #0]
					(Last_Received_Elaps <= Timeout) &&
 800a44e:	429a      	cmp	r2, r3
 800a450:	d006      	beq.n	800a460 <Process_Clear_Relays+0x124>
					(Medha_ei_self_sharing_RX_st.MisMatch_CNT <= EI_data.Medha_Prms_st.Max_Mismatch_value)
 800a452:	4b13      	ldr	r3, [pc, #76]	; (800a4a0 <Process_Clear_Relays+0x164>)
 800a454:	785a      	ldrb	r2, [r3, #1]
 800a456:	4b0e      	ldr	r3, [pc, #56]	; (800a490 <Process_Clear_Relays+0x154>)
 800a458:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
					(Last_Clear_clk != Medha_Fault_Handler_st.Pkt_Rcv_clk) &&
 800a45c:	429a      	cmp	r2, r3
 800a45e:	d908      	bls.n	800a472 <Process_Clear_Relays+0x136>
			)
			||
			(
					(Medha_Fault_Handler_st.Clear_Relay_Statuses < 1) &&
 800a460:	4b0a      	ldr	r3, [pc, #40]	; (800a48c <Process_Clear_Relays+0x150>)
 800a462:	781b      	ldrb	r3, [r3, #0]
			||
 800a464:	2b00      	cmp	r3, #0
 800a466:	d10d      	bne.n	800a484 <Process_Clear_Relays+0x148>
					(Medha_Cur_Relay_Status_st.Vital_CRC != 0)
 800a468:	4b0e      	ldr	r3, [pc, #56]	; (800a4a4 <Process_Clear_Relays+0x168>)
 800a46a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
					(Medha_Fault_Handler_st.Clear_Relay_Statuses < 1) &&
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d008      	beq.n	800a484 <Process_Clear_Relays+0x148>
			)
	)
	{
		CLEAR_BIT_USER(0,EI_HealthStatus);
 800a472:	4b13      	ldr	r3, [pc, #76]	; (800a4c0 <Process_Clear_Relays+0x184>)
 800a474:	881b      	ldrh	r3, [r3, #0]
 800a476:	f023 0301 	bic.w	r3, r3, #1
 800a47a:	b29a      	uxth	r2, r3
 800a47c:	4b10      	ldr	r3, [pc, #64]	; (800a4c0 <Process_Clear_Relays+0x184>)
 800a47e:	801a      	strh	r2, [r3, #0]
 800a480:	e000      	b.n	800a484 <Process_Clear_Relays+0x148>
		return;
 800a482:	bf00      	nop
	}
}
 800a484:	3708      	adds	r7, #8
 800a486:	46bd      	mov	sp, r7
 800a488:	bd80      	pop	{r7, pc}
 800a48a:	bf00      	nop
 800a48c:	200026a8 	.word	0x200026a8
 800a490:	20000304 	.word	0x20000304
 800a494:	080259e4 	.word	0x080259e4
 800a498:	20000305 	.word	0x20000305
 800a49c:	2000286c 	.word	0x2000286c
 800a4a0:	200026c0 	.word	0x200026c0
 800a4a4:	200026d0 	.word	0x200026d0
 800a4a8:	08025bcc 	.word	0x08025bcc
 800a4ac:	20002678 	.word	0x20002678
 800a4b0:	200027d8 	.word	0x200027d8
 800a4b4:	200026b8 	.word	0x200026b8
 800a4b8:	200026c8 	.word	0x200026c8
 800a4bc:	08025bfc 	.word	0x08025bfc
 800a4c0:	20000e3a 	.word	0x20000e3a

0800a4c4 <Send_Data_to_Other>:


void Send_Data_to_Other(void)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	af00      	add	r7, sp, #0
	}
#else



	if(HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk) >= (EI_data.Medha_Prms_st.Packet_Interval_ms * EI_data.Medha_Prms_st.Packet_Timeout_Count ) )
 800a4c8:	4b26      	ldr	r3, [pc, #152]	; (800a564 <Send_Data_to_Other+0xa0>)
 800a4ca:	685b      	ldr	r3, [r3, #4]
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f004 fd21 	bl	800ef14 <HAL_Elaps_Ticks>
 800a4d2:	4602      	mov	r2, r0
 800a4d4:	4b24      	ldr	r3, [pc, #144]	; (800a568 <Send_Data_to_Other+0xa4>)
 800a4d6:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 800a4da:	4923      	ldr	r1, [pc, #140]	; (800a568 <Send_Data_to_Other+0xa4>)
 800a4dc:	f8b1 1326 	ldrh.w	r1, [r1, #806]	; 0x326
 800a4e0:	fb01 f303 	mul.w	r3, r1, r3
 800a4e4:	429a      	cmp	r2, r3
 800a4e6:	d306      	bcc.n	800a4f6 <Send_Data_to_Other+0x32>
	{
		if(Medha_ei_self_sharing_TX_st.Receiving_Status != NOT_RECEIVED)
 800a4e8:	4b20      	ldr	r3, [pc, #128]	; (800a56c <Send_Data_to_Other+0xa8>)
 800a4ea:	781b      	ldrb	r3, [r3, #0]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d002      	beq.n	800a4f6 <Send_Data_to_Other+0x32>
		{
			Medha_ei_self_sharing_TX_st.Receiving_Status = NOT_RECEIVED;
 800a4f0:	4b1e      	ldr	r3, [pc, #120]	; (800a56c <Send_Data_to_Other+0xa8>)
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	701a      	strb	r2, [r3, #0]
		}
	}


	if( (HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk) > EI_data.Medha_Prms_st.CAN_Xchange_Time) && (Send_Sharing_CLK1 != Medha_Fault_Handler_st.Pkt_Rcv_clk) )
 800a4f6:	4b1b      	ldr	r3, [pc, #108]	; (800a564 <Send_Data_to_Other+0xa0>)
 800a4f8:	685b      	ldr	r3, [r3, #4]
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f004 fd0a 	bl	800ef14 <HAL_Elaps_Ticks>
 800a500:	4602      	mov	r2, r0
 800a502:	4b19      	ldr	r3, [pc, #100]	; (800a568 <Send_Data_to_Other+0xa4>)
 800a504:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 800a508:	429a      	cmp	r2, r3
 800a50a:	d90e      	bls.n	800a52a <Send_Data_to_Other+0x66>
 800a50c:	4b15      	ldr	r3, [pc, #84]	; (800a564 <Send_Data_to_Other+0xa0>)
 800a50e:	685a      	ldr	r2, [r3, #4]
 800a510:	4b17      	ldr	r3, [pc, #92]	; (800a570 <Send_Data_to_Other+0xac>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	429a      	cmp	r2, r3
 800a516:	d008      	beq.n	800a52a <Send_Data_to_Other+0x66>
	{
		Send_Sharing_CLK1 = Medha_Fault_Handler_st.Pkt_Rcv_clk;
 800a518:	4b12      	ldr	r3, [pc, #72]	; (800a564 <Send_Data_to_Other+0xa0>)
 800a51a:	685b      	ldr	r3, [r3, #4]
 800a51c:	4a14      	ldr	r2, [pc, #80]	; (800a570 <Send_Data_to_Other+0xac>)
 800a51e:	6013      	str	r3, [r2, #0]
#ifdef EI_1
		TransmitCanPkt(EI_1_SELF_SHARING);
 800a520:	f240 2001 	movw	r0, #513	; 0x201
 800a524:	f005 fab0 	bl	800fa88 <TransmitCanPkt>
		TransmitCanPkt(EI_2_SELF_SHARING);
#endif

	}
#endif
}
 800a528:	e01a      	b.n	800a560 <Send_Data_to_Other+0x9c>
	else if(  (HAL_Elaps_Ticks(Send_Sharing_CLK2) > ONE_SEC)  && (HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk) > TWO_SEC ))
 800a52a:	4b12      	ldr	r3, [pc, #72]	; (800a574 <Send_Data_to_Other+0xb0>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	4618      	mov	r0, r3
 800a530:	f004 fcf0 	bl	800ef14 <HAL_Elaps_Ticks>
 800a534:	4603      	mov	r3, r0
 800a536:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a53a:	d911      	bls.n	800a560 <Send_Data_to_Other+0x9c>
 800a53c:	4b09      	ldr	r3, [pc, #36]	; (800a564 <Send_Data_to_Other+0xa0>)
 800a53e:	685b      	ldr	r3, [r3, #4]
 800a540:	4618      	mov	r0, r3
 800a542:	f004 fce7 	bl	800ef14 <HAL_Elaps_Ticks>
 800a546:	4603      	mov	r3, r0
 800a548:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a54c:	d908      	bls.n	800a560 <Send_Data_to_Other+0x9c>
		Send_Sharing_CLK2 = HAL_GetTick();
 800a54e:	f00b facb 	bl	8015ae8 <HAL_GetTick>
 800a552:	4603      	mov	r3, r0
 800a554:	4a07      	ldr	r2, [pc, #28]	; (800a574 <Send_Data_to_Other+0xb0>)
 800a556:	6013      	str	r3, [r2, #0]
		TransmitCanPkt(EI_1_SELF_SHARING);
 800a558:	f240 2001 	movw	r0, #513	; 0x201
 800a55c:	f005 fa94 	bl	800fa88 <TransmitCanPkt>
}
 800a560:	bf00      	nop
 800a562:	bd80      	pop	{r7, pc}
 800a564:	200026a8 	.word	0x200026a8
 800a568:	20000304 	.word	0x20000304
 800a56c:	200026b8 	.word	0x200026b8
 800a570:	20002870 	.word	0x20002870
 800a574:	20002874 	.word	0x20002874

0800a578 <Process_Data_from_Other>:

void Process_Data_from_Other(void)
{
 800a578:	b5b0      	push	{r4, r5, r7, lr}
 800a57a:	af00      	add	r7, sp, #0
	static uint32_t Prev_Receive_CLK = 0;
	//static uint8_t MisMatch_CNT = 0;
	static uint32_t Previous_Clock_RCV_SELF_XCHG_CLK = 0;


	if( (Prev_Receive_CLK != Last_Received_Medha_Self_sharing) || ( (HAL_Elaps_Ticks(Prev_Receive_CLK)) >= ONE_SEC) )
 800a57c:	4b95      	ldr	r3, [pc, #596]	; (800a7d4 <Process_Data_from_Other+0x25c>)
 800a57e:	681a      	ldr	r2, [r3, #0]
 800a580:	4b95      	ldr	r3, [pc, #596]	; (800a7d8 <Process_Data_from_Other+0x260>)
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	429a      	cmp	r2, r3
 800a586:	d109      	bne.n	800a59c <Process_Data_from_Other+0x24>
 800a588:	4b92      	ldr	r3, [pc, #584]	; (800a7d4 <Process_Data_from_Other+0x25c>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	4618      	mov	r0, r3
 800a58e:	f004 fcc1 	bl	800ef14 <HAL_Elaps_Ticks>
 800a592:	4603      	mov	r3, r0
 800a594:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a598:	f0c0 80e4 	bcc.w	800a764 <Process_Data_from_Other+0x1ec>
	{
		Prev_Receive_CLK = HAL_GetTick();
 800a59c:	f00b faa4 	bl	8015ae8 <HAL_GetTick>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	4a8c      	ldr	r2, [pc, #560]	; (800a7d4 <Process_Data_from_Other+0x25c>)
 800a5a4:	6013      	str	r3, [r2, #0]
		if(Medha_ei_self_sharing_TX_st.Receiving_Status)
 800a5a6:	4b8d      	ldr	r3, [pc, #564]	; (800a7dc <Process_Data_from_Other+0x264>)
 800a5a8:	781b      	ldrb	r3, [r3, #0]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d007      	beq.n	800a5be <Process_Data_from_Other+0x46>
		{
			SET_BIT_USER(0,EIPC_1_2_STATUS);
 800a5ae:	4b8c      	ldr	r3, [pc, #560]	; (800a7e0 <Process_Data_from_Other+0x268>)
 800a5b0:	781b      	ldrb	r3, [r3, #0]
 800a5b2:	f043 0301 	orr.w	r3, r3, #1
 800a5b6:	b2da      	uxtb	r2, r3
 800a5b8:	4b89      	ldr	r3, [pc, #548]	; (800a7e0 <Process_Data_from_Other+0x268>)
 800a5ba:	701a      	strb	r2, [r3, #0]
 800a5bc:	e006      	b.n	800a5cc <Process_Data_from_Other+0x54>
		}
		else
		{
			CLEAR_BIT_USER(0,EIPC_1_2_STATUS);
 800a5be:	4b88      	ldr	r3, [pc, #544]	; (800a7e0 <Process_Data_from_Other+0x268>)
 800a5c0:	781b      	ldrb	r3, [r3, #0]
 800a5c2:	f023 0301 	bic.w	r3, r3, #1
 800a5c6:	b2da      	uxtb	r2, r3
 800a5c8:	4b85      	ldr	r3, [pc, #532]	; (800a7e0 <Process_Data_from_Other+0x268>)
 800a5ca:	701a      	strb	r2, [r3, #0]
		}
		if(Medha_ei_self_sharing_RX_st.Receiving_Status)
 800a5cc:	4b85      	ldr	r3, [pc, #532]	; (800a7e4 <Process_Data_from_Other+0x26c>)
 800a5ce:	781b      	ldrb	r3, [r3, #0]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d007      	beq.n	800a5e4 <Process_Data_from_Other+0x6c>
		{
			SET_BIT_USER(1,EIPC_1_2_STATUS);
 800a5d4:	4b82      	ldr	r3, [pc, #520]	; (800a7e0 <Process_Data_from_Other+0x268>)
 800a5d6:	781b      	ldrb	r3, [r3, #0]
 800a5d8:	f043 0302 	orr.w	r3, r3, #2
 800a5dc:	b2da      	uxtb	r2, r3
 800a5de:	4b80      	ldr	r3, [pc, #512]	; (800a7e0 <Process_Data_from_Other+0x268>)
 800a5e0:	701a      	strb	r2, [r3, #0]
 800a5e2:	e006      	b.n	800a5f2 <Process_Data_from_Other+0x7a>
		}
		else
		{
			CLEAR_BIT_USER(1,EIPC_1_2_STATUS);
 800a5e4:	4b7e      	ldr	r3, [pc, #504]	; (800a7e0 <Process_Data_from_Other+0x268>)
 800a5e6:	781b      	ldrb	r3, [r3, #0]
 800a5e8:	f023 0302 	bic.w	r3, r3, #2
 800a5ec:	b2da      	uxtb	r2, r3
 800a5ee:	4b7c      	ldr	r3, [pc, #496]	; (800a7e0 <Process_Data_from_Other+0x268>)
 800a5f0:	701a      	strb	r2, [r3, #0]
		}

		switch(EIPC_1_2_STATUS)
 800a5f2:	4b7b      	ldr	r3, [pc, #492]	; (800a7e0 <Process_Data_from_Other+0x268>)
 800a5f4:	781b      	ldrb	r3, [r3, #0]
 800a5f6:	2b03      	cmp	r3, #3
 800a5f8:	f200 809a 	bhi.w	800a730 <Process_Data_from_Other+0x1b8>
 800a5fc:	a201      	add	r2, pc, #4	; (adr r2, 800a604 <Process_Data_from_Other+0x8c>)
 800a5fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a602:	bf00      	nop
 800a604:	0800a615 	.word	0x0800a615
 800a608:	0800a6a5 	.word	0x0800a6a5
 800a60c:	0800a623 	.word	0x0800a623
 800a610:	0800a6f5 	.word	0x0800a6f5
		{
		case SELF_NRCV_OTHER_NRCV:
			Medha_ei_self_sharing_TX_st.MisMatch_CNT++;
 800a614:	4b71      	ldr	r3, [pc, #452]	; (800a7dc <Process_Data_from_Other+0x264>)
 800a616:	785b      	ldrb	r3, [r3, #1]
 800a618:	3301      	adds	r3, #1
 800a61a:	b2da      	uxtb	r2, r3
 800a61c:	4b6f      	ldr	r3, [pc, #444]	; (800a7dc <Process_Data_from_Other+0x264>)
 800a61e:	705a      	strb	r2, [r3, #1]
			break;
 800a620:	e086      	b.n	800a730 <Process_Data_from_Other+0x1b8>

		case SELF_NRCV_OTHER_RCV:
			if(Medha_ei_self_sharing_RX_st.Vital_CRC != Medha_ei_self_sharing_TX_st.Vital_CRC)
 800a622:	4b70      	ldr	r3, [pc, #448]	; (800a7e4 <Process_Data_from_Other+0x26c>)
 800a624:	685a      	ldr	r2, [r3, #4]
 800a626:	4b6d      	ldr	r3, [pc, #436]	; (800a7dc <Process_Data_from_Other+0x264>)
 800a628:	685b      	ldr	r3, [r3, #4]
 800a62a:	429a      	cmp	r2, r3
 800a62c:	d02f      	beq.n	800a68e <Process_Data_from_Other+0x116>
			{
				if( (Received_CAN_Relay_Status == YES) )
 800a62e:	4b6e      	ldr	r3, [pc, #440]	; (800a7e8 <Process_Data_from_Other+0x270>)
 800a630:	781b      	ldrb	r3, [r3, #0]
 800a632:	2b01      	cmp	r3, #1
 800a634:	d179      	bne.n	800a72a <Process_Data_from_Other+0x1b2>
				{

					printf("Self_Vital_CRC :%08lx\n",Medha_ei_self_sharing_TX_st.Vital_CRC);
 800a636:	4b69      	ldr	r3, [pc, #420]	; (800a7dc <Process_Data_from_Other+0x264>)
 800a638:	685b      	ldr	r3, [r3, #4]
 800a63a:	4619      	mov	r1, r3
 800a63c:	486b      	ldr	r0, [pc, #428]	; (800a7ec <Process_Data_from_Other+0x274>)
 800a63e:	f018 fa5d 	bl	8022afc <iprintf>
					printf("Other_Vital_CRC:%08lx\n",Medha_ei_self_sharing_RX_st.Vital_CRC);
 800a642:	4b68      	ldr	r3, [pc, #416]	; (800a7e4 <Process_Data_from_Other+0x26c>)
 800a644:	685b      	ldr	r3, [r3, #4]
 800a646:	4619      	mov	r1, r3
 800a648:	4869      	ldr	r0, [pc, #420]	; (800a7f0 <Process_Data_from_Other+0x278>)
 800a64a:	f018 fa57 	bl	8022afc <iprintf>
					Received_CAN_Relay_Status=NO;
 800a64e:	4b66      	ldr	r3, [pc, #408]	; (800a7e8 <Process_Data_from_Other+0x270>)
 800a650:	2200      	movs	r2, #0
 800a652:	701a      	strb	r2, [r3, #0]
					printf("Copies Relays status and VITAL CRC from Other Card\n");
 800a654:	4867      	ldr	r0, [pc, #412]	; (800a7f4 <Process_Data_from_Other+0x27c>)
 800a656:	f018 faed 	bl	8022c34 <puts>
					memcpy(&Medha_Cur_Relay_Status_st,&Medha_CAN_Relay_Status_st,sizeof(MEDHA_CUR_RELAY_STS_t));
 800a65a:	4a67      	ldr	r2, [pc, #412]	; (800a7f8 <Process_Data_from_Other+0x280>)
 800a65c:	4b67      	ldr	r3, [pc, #412]	; (800a7fc <Process_Data_from_Other+0x284>)
 800a65e:	4610      	mov	r0, r2
 800a660:	4619      	mov	r1, r3
 800a662:	2384      	movs	r3, #132	; 0x84
 800a664:	461a      	mov	r2, r3
 800a666:	f018 f939 	bl	80228dc <memcpy>
					memcpy(&Medha_Relay_Sts_st,&Medha_Cur_Relay_Status_st,sizeof(Medha_Relay_Sts_st));
 800a66a:	4a65      	ldr	r2, [pc, #404]	; (800a800 <Process_Data_from_Other+0x288>)
 800a66c:	4b62      	ldr	r3, [pc, #392]	; (800a7f8 <Process_Data_from_Other+0x280>)
 800a66e:	4614      	mov	r4, r2
 800a670:	461d      	mov	r5, r3
 800a672:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a674:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a676:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a678:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a67a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800a67e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
					Medha_ei_self_sharing_TX_st.Vital_CRC = Medha_Cur_Relay_Status_st.Vital_CRC;
 800a682:	4b5d      	ldr	r3, [pc, #372]	; (800a7f8 <Process_Data_from_Other+0x280>)
 800a684:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a688:	4a54      	ldr	r2, [pc, #336]	; (800a7dc <Process_Data_from_Other+0x264>)
 800a68a:	6053      	str	r3, [r2, #4]
			{
				Medha_ei_self_sharing_TX_st.MisMatch_CNT = 0;
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
				//printf("\nCLEAR 1\n");
			}
			break;
 800a68c:	e04d      	b.n	800a72a <Process_Data_from_Other+0x1b2>
				Medha_ei_self_sharing_TX_st.MisMatch_CNT = 0;
 800a68e:	4b53      	ldr	r3, [pc, #332]	; (800a7dc <Process_Data_from_Other+0x264>)
 800a690:	2200      	movs	r2, #0
 800a692:	705a      	strb	r2, [r3, #1]
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800a694:	4b5b      	ldr	r3, [pc, #364]	; (800a804 <Process_Data_from_Other+0x28c>)
 800a696:	781b      	ldrb	r3, [r3, #0]
 800a698:	f023 0301 	bic.w	r3, r3, #1
 800a69c:	b2da      	uxtb	r2, r3
 800a69e:	4b59      	ldr	r3, [pc, #356]	; (800a804 <Process_Data_from_Other+0x28c>)
 800a6a0:	701a      	strb	r2, [r3, #0]
			break;
 800a6a2:	e042      	b.n	800a72a <Process_Data_from_Other+0x1b2>

		case SELF_RCV_OTHER_NRCV:
			if(Medha_ei_self_sharing_RX_st.Vital_CRC != Medha_ei_self_sharing_TX_st.Vital_CRC)
 800a6a4:	4b4f      	ldr	r3, [pc, #316]	; (800a7e4 <Process_Data_from_Other+0x26c>)
 800a6a6:	685a      	ldr	r2, [r3, #4]
 800a6a8:	4b4c      	ldr	r3, [pc, #304]	; (800a7dc <Process_Data_from_Other+0x264>)
 800a6aa:	685b      	ldr	r3, [r3, #4]
 800a6ac:	429a      	cmp	r2, r3
 800a6ae:	d016      	beq.n	800a6de <Process_Data_from_Other+0x166>
			{
				printf("Self & Other Vital CRC Not Matching\n");
 800a6b0:	4855      	ldr	r0, [pc, #340]	; (800a808 <Process_Data_from_Other+0x290>)
 800a6b2:	f018 fabf 	bl	8022c34 <puts>
				Medha_ei_self_sharing_TX_st.MisMatch_CNT++;
 800a6b6:	4b49      	ldr	r3, [pc, #292]	; (800a7dc <Process_Data_from_Other+0x264>)
 800a6b8:	785b      	ldrb	r3, [r3, #1]
 800a6ba:	3301      	adds	r3, #1
 800a6bc:	b2da      	uxtb	r2, r3
 800a6be:	4b47      	ldr	r3, [pc, #284]	; (800a7dc <Process_Data_from_Other+0x264>)
 800a6c0:	705a      	strb	r2, [r3, #1]

				if( (Medha_ei_self_sharing_TX_st.MisMatch_CNT > 2) && (Medha_Cur_Relay_Status_st.Vital_CRC != 0) )
 800a6c2:	4b46      	ldr	r3, [pc, #280]	; (800a7dc <Process_Data_from_Other+0x264>)
 800a6c4:	785b      	ldrb	r3, [r3, #1]
 800a6c6:	2b02      	cmp	r3, #2
 800a6c8:	d931      	bls.n	800a72e <Process_Data_from_Other+0x1b6>
 800a6ca:	4b4b      	ldr	r3, [pc, #300]	; (800a7f8 <Process_Data_from_Other+0x280>)
 800a6cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d02c      	beq.n	800a72e <Process_Data_from_Other+0x1b6>
				{
#ifdef EI_1
					TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 800a6d4:	f240 2007 	movw	r0, #519	; 0x207
 800a6d8:	f005 f9d6 	bl	800fa88 <TransmitCanPkt>
			{
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
				//printf("\nCLEAR 2\n");
				Medha_ei_self_sharing_TX_st.MisMatch_CNT=0;
			}
			break;
 800a6dc:	e027      	b.n	800a72e <Process_Data_from_Other+0x1b6>
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800a6de:	4b49      	ldr	r3, [pc, #292]	; (800a804 <Process_Data_from_Other+0x28c>)
 800a6e0:	781b      	ldrb	r3, [r3, #0]
 800a6e2:	f023 0301 	bic.w	r3, r3, #1
 800a6e6:	b2da      	uxtb	r2, r3
 800a6e8:	4b46      	ldr	r3, [pc, #280]	; (800a804 <Process_Data_from_Other+0x28c>)
 800a6ea:	701a      	strb	r2, [r3, #0]
				Medha_ei_self_sharing_TX_st.MisMatch_CNT=0;
 800a6ec:	4b3b      	ldr	r3, [pc, #236]	; (800a7dc <Process_Data_from_Other+0x264>)
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	705a      	strb	r2, [r3, #1]
			break;
 800a6f2:	e01c      	b.n	800a72e <Process_Data_from_Other+0x1b6>

		case SELF_RCV_OTHER_RCV:
			if(Medha_ei_self_sharing_RX_st.Vital_CRC != Medha_ei_self_sharing_TX_st.Vital_CRC)
 800a6f4:	4b3b      	ldr	r3, [pc, #236]	; (800a7e4 <Process_Data_from_Other+0x26c>)
 800a6f6:	685a      	ldr	r2, [r3, #4]
 800a6f8:	4b38      	ldr	r3, [pc, #224]	; (800a7dc <Process_Data_from_Other+0x264>)
 800a6fa:	685b      	ldr	r3, [r3, #4]
 800a6fc:	429a      	cmp	r2, r3
 800a6fe:	d009      	beq.n	800a714 <Process_Data_from_Other+0x19c>
			{
				printf("Self & Other Vital CRC Not Matching\n");
 800a700:	4841      	ldr	r0, [pc, #260]	; (800a808 <Process_Data_from_Other+0x290>)
 800a702:	f018 fa97 	bl	8022c34 <puts>
				Medha_ei_self_sharing_TX_st.MisMatch_CNT++;
 800a706:	4b35      	ldr	r3, [pc, #212]	; (800a7dc <Process_Data_from_Other+0x264>)
 800a708:	785b      	ldrb	r3, [r3, #1]
 800a70a:	3301      	adds	r3, #1
 800a70c:	b2da      	uxtb	r2, r3
 800a70e:	4b33      	ldr	r3, [pc, #204]	; (800a7dc <Process_Data_from_Other+0x264>)
 800a710:	705a      	strb	r2, [r3, #1]
			{
				//printf("\nCLEAR 3\n");
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
				Medha_ei_self_sharing_TX_st.MisMatch_CNT=0;
			}
			break;
 800a712:	e00d      	b.n	800a730 <Process_Data_from_Other+0x1b8>
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800a714:	4b3b      	ldr	r3, [pc, #236]	; (800a804 <Process_Data_from_Other+0x28c>)
 800a716:	781b      	ldrb	r3, [r3, #0]
 800a718:	f023 0301 	bic.w	r3, r3, #1
 800a71c:	b2da      	uxtb	r2, r3
 800a71e:	4b39      	ldr	r3, [pc, #228]	; (800a804 <Process_Data_from_Other+0x28c>)
 800a720:	701a      	strb	r2, [r3, #0]
				Medha_ei_self_sharing_TX_st.MisMatch_CNT=0;
 800a722:	4b2e      	ldr	r3, [pc, #184]	; (800a7dc <Process_Data_from_Other+0x264>)
 800a724:	2200      	movs	r2, #0
 800a726:	705a      	strb	r2, [r3, #1]
			break;
 800a728:	e002      	b.n	800a730 <Process_Data_from_Other+0x1b8>
			break;
 800a72a:	bf00      	nop
 800a72c:	e000      	b.n	800a730 <Process_Data_from_Other+0x1b8>
			break;
 800a72e:	bf00      	nop
		}

		if(Medha_ei_self_sharing_TX_st.MisMatch_CNT >= EI_data.Medha_Prms_st.Max_Mismatch_value)
 800a730:	4b2a      	ldr	r3, [pc, #168]	; (800a7dc <Process_Data_from_Other+0x264>)
 800a732:	785a      	ldrb	r2, [r3, #1]
 800a734:	4b35      	ldr	r3, [pc, #212]	; (800a80c <Process_Data_from_Other+0x294>)
 800a736:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a73a:	429a      	cmp	r2, r3
 800a73c:	d312      	bcc.n	800a764 <Process_Data_from_Other+0x1ec>
		{
			if(CHECKFLAG(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses) == CLEAR)
 800a73e:	4b31      	ldr	r3, [pc, #196]	; (800a804 <Process_Data_from_Other+0x28c>)
 800a740:	781b      	ldrb	r3, [r3, #0]
 800a742:	f003 0301 	and.w	r3, r3, #1
 800a746:	2b00      	cmp	r3, #0
 800a748:	d10c      	bne.n	800a764 <Process_Data_from_Other+0x1ec>
			{
				printf("MisMatch Count Reached\n");
 800a74a:	4831      	ldr	r0, [pc, #196]	; (800a810 <Process_Data_from_Other+0x298>)
 800a74c:	f018 fa72 	bl	8022c34 <puts>
				Medha_ei_self_sharing_TX_st.MisMatch_CNT = 0;
 800a750:	4b22      	ldr	r3, [pc, #136]	; (800a7dc <Process_Data_from_Other+0x264>)
 800a752:	2200      	movs	r2, #0
 800a754:	705a      	strb	r2, [r3, #1]
				SET_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800a756:	4b2b      	ldr	r3, [pc, #172]	; (800a804 <Process_Data_from_Other+0x28c>)
 800a758:	781b      	ldrb	r3, [r3, #0]
 800a75a:	f043 0301 	orr.w	r3, r3, #1
 800a75e:	b2da      	uxtb	r2, r3
 800a760:	4b28      	ldr	r3, [pc, #160]	; (800a804 <Process_Data_from_Other+0x28c>)
 800a762:	701a      	strb	r2, [r3, #0]
		//		{
		//			//printf("\nMisMatch_CNT:%u\n",Medha_ei_self_sharing_TX_st.MisMatch_CNT);
		//		}
	}

	if(HAL_Elaps_Ticks(Last_Received_Medha_Self_sharing) > EI_data.Medha_Prms_st.CAN_Xchange_Tout)
 800a764:	4b1c      	ldr	r3, [pc, #112]	; (800a7d8 <Process_Data_from_Other+0x260>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	4618      	mov	r0, r3
 800a76a:	f004 fbd3 	bl	800ef14 <HAL_Elaps_Ticks>
 800a76e:	4602      	mov	r2, r0
 800a770:	4b26      	ldr	r3, [pc, #152]	; (800a80c <Process_Data_from_Other+0x294>)
 800a772:	f8d3 333c 	ldr.w	r3, [r3, #828]	; 0x33c
 800a776:	429a      	cmp	r2, r3
 800a778:	d92a      	bls.n	800a7d0 <Process_Data_from_Other+0x258>
	{
		if(Previous_Clock_RCV_SELF_XCHG_CLK != Last_Received_Medha_Self_sharing)
 800a77a:	4b26      	ldr	r3, [pc, #152]	; (800a814 <Process_Data_from_Other+0x29c>)
 800a77c:	681a      	ldr	r2, [r3, #0]
 800a77e:	4b16      	ldr	r3, [pc, #88]	; (800a7d8 <Process_Data_from_Other+0x260>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	429a      	cmp	r2, r3
 800a784:	d024      	beq.n	800a7d0 <Process_Data_from_Other+0x258>
		{
			Previous_Clock_RCV_SELF_XCHG_CLK = Last_Received_Medha_Self_sharing;
 800a786:	4b14      	ldr	r3, [pc, #80]	; (800a7d8 <Process_Data_from_Other+0x260>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	4a22      	ldr	r2, [pc, #136]	; (800a814 <Process_Data_from_Other+0x29c>)
 800a78c:	6013      	str	r3, [r2, #0]
			printf("CAN Data Not Received from last %lu Seconds\n",(HAL_Elaps_Ticks(Last_Received_Medha_Self_sharing)/1000));
 800a78e:	4b12      	ldr	r3, [pc, #72]	; (800a7d8 <Process_Data_from_Other+0x260>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	4618      	mov	r0, r3
 800a794:	f004 fbbe 	bl	800ef14 <HAL_Elaps_Ticks>
 800a798:	4603      	mov	r3, r0
 800a79a:	4a1f      	ldr	r2, [pc, #124]	; (800a818 <Process_Data_from_Other+0x2a0>)
 800a79c:	fba2 2303 	umull	r2, r3, r2, r3
 800a7a0:	099b      	lsrs	r3, r3, #6
 800a7a2:	4619      	mov	r1, r3
 800a7a4:	481d      	ldr	r0, [pc, #116]	; (800a81c <Process_Data_from_Other+0x2a4>)
 800a7a6:	f018 f9a9 	bl	8022afc <iprintf>
			printf("Last_Received_Medha_Self_sharing:%lu\n",Last_Received_Medha_Self_sharing);
 800a7aa:	4b0b      	ldr	r3, [pc, #44]	; (800a7d8 <Process_Data_from_Other+0x260>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	4619      	mov	r1, r3
 800a7b0:	481b      	ldr	r0, [pc, #108]	; (800a820 <Process_Data_from_Other+0x2a8>)
 800a7b2:	f018 f9a3 	bl	8022afc <iprintf>
			if(CHECKFLAG(CAN_EXCHANGE_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses) == CLEAR)
 800a7b6:	4b13      	ldr	r3, [pc, #76]	; (800a804 <Process_Data_from_Other+0x28c>)
 800a7b8:	781b      	ldrb	r3, [r3, #0]
 800a7ba:	f003 0302 	and.w	r3, r3, #2
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d106      	bne.n	800a7d0 <Process_Data_from_Other+0x258>
			{
				SET_BIT_USER(CAN_EXCHANGE_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800a7c2:	4b10      	ldr	r3, [pc, #64]	; (800a804 <Process_Data_from_Other+0x28c>)
 800a7c4:	781b      	ldrb	r3, [r3, #0]
 800a7c6:	f043 0302 	orr.w	r3, r3, #2
 800a7ca:	b2da      	uxtb	r2, r3
 800a7cc:	4b0d      	ldr	r3, [pc, #52]	; (800a804 <Process_Data_from_Other+0x28c>)
 800a7ce:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 800a7d0:	bf00      	nop
 800a7d2:	bdb0      	pop	{r4, r5, r7, pc}
 800a7d4:	20002878 	.word	0x20002878
 800a7d8:	20002164 	.word	0x20002164
 800a7dc:	200026b8 	.word	0x200026b8
 800a7e0:	20002162 	.word	0x20002162
 800a7e4:	200026c0 	.word	0x200026c0
 800a7e8:	20002161 	.word	0x20002161
 800a7ec:	08025c14 	.word	0x08025c14
 800a7f0:	08025c2c 	.word	0x08025c2c
 800a7f4:	08025c44 	.word	0x08025c44
 800a7f8:	200026d0 	.word	0x200026d0
 800a7fc:	20002754 	.word	0x20002754
 800a800:	20002678 	.word	0x20002678
 800a804:	200026a8 	.word	0x200026a8
 800a808:	08025c78 	.word	0x08025c78
 800a80c:	20000304 	.word	0x20000304
 800a810:	08025c9c 	.word	0x08025c9c
 800a814:	2000287c 	.word	0x2000287c
 800a818:	10624dd3 	.word	0x10624dd3
 800a81c:	08025cb4 	.word	0x08025cb4
 800a820:	08025ce4 	.word	0x08025ce4

0800a824 <Print_Medha_Self_Details>:


void Print_Medha_Self_Details(void)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	af00      	add	r7, sp, #0
#ifdef EI_1
	printf("\n ______________________________ EI_1_SELF_DETAILS ______________________________ \n");
 800a828:	482a      	ldr	r0, [pc, #168]	; (800a8d4 <Print_Medha_Self_Details+0xb0>)
 800a82a:	f018 fa03 	bl	8022c34 <puts>
#endif
#ifdef EI_2
	printf("\n ______________________________ EI_2_SELF_DETAILS ______________________________ \n");
#endif

	printf("Source Address                :%u\n",EI_data.Medha_Prms_st.Source_Addr);
 800a82e:	4b2a      	ldr	r3, [pc, #168]	; (800a8d8 <Print_Medha_Self_Details+0xb4>)
 800a830:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 800a834:	4619      	mov	r1, r3
 800a836:	4829      	ldr	r0, [pc, #164]	; (800a8dc <Print_Medha_Self_Details+0xb8>)
 800a838:	f018 f960 	bl	8022afc <iprintf>
	printf("Destination Address           :%u\n",EI_data.Medha_Prms_st.Dest_Addr);
 800a83c:	4b26      	ldr	r3, [pc, #152]	; (800a8d8 <Print_Medha_Self_Details+0xb4>)
 800a83e:	f8b3 3324 	ldrh.w	r3, [r3, #804]	; 0x324
 800a842:	4619      	mov	r1, r3
 800a844:	4826      	ldr	r0, [pc, #152]	; (800a8e0 <Print_Medha_Self_Details+0xbc>)
 800a846:	f018 f959 	bl	8022afc <iprintf>
	printf("Configured RS-485 port Number :%u\n",EI_data.Medha_Prms_st.Comport);
 800a84a:	4b23      	ldr	r3, [pc, #140]	; (800a8d8 <Print_Medha_Self_Details+0xb4>)
 800a84c:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a850:	4619      	mov	r1, r3
 800a852:	4824      	ldr	r0, [pc, #144]	; (800a8e4 <Print_Medha_Self_Details+0xc0>)
 800a854:	f018 f952 	bl	8022afc <iprintf>
	printf("RS-485_BaudRate               :%lu\n",EI_data.Medha_Prms_st.BaudRate);
 800a858:	4b1f      	ldr	r3, [pc, #124]	; (800a8d8 <Print_Medha_Self_Details+0xb4>)
 800a85a:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 800a85e:	4619      	mov	r1, r3
 800a860:	4821      	ldr	r0, [pc, #132]	; (800a8e8 <Print_Medha_Self_Details+0xc4>)
 800a862:	f018 f94b 	bl	8022afc <iprintf>
	printf("ExchangeAfter PKT Reception_ms:%lu\n",EI_data.Medha_Prms_st.CAN_Xchange_Time);
 800a866:	4b1c      	ldr	r3, [pc, #112]	; (800a8d8 <Print_Medha_Self_Details+0xb4>)
 800a868:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 800a86c:	4619      	mov	r1, r3
 800a86e:	481f      	ldr	r0, [pc, #124]	; (800a8ec <Print_Medha_Self_Details+0xc8>)
 800a870:	f018 f944 	bl	8022afc <iprintf>
	printf("ExchangeAfter PKT Timeout_ms  :%lu\n",EI_data.Medha_Prms_st.CAN_Xchange_Tout);
 800a874:	4b18      	ldr	r3, [pc, #96]	; (800a8d8 <Print_Medha_Self_Details+0xb4>)
 800a876:	f8d3 333c 	ldr.w	r3, [r3, #828]	; 0x33c
 800a87a:	4619      	mov	r1, r3
 800a87c:	481c      	ldr	r0, [pc, #112]	; (800a8f0 <Print_Medha_Self_Details+0xcc>)
 800a87e:	f018 f93d 	bl	8022afc <iprintf>
	printf("Max_Mismatch_value            :%u\n",EI_data.Medha_Prms_st.Max_Mismatch_value);
 800a882:	4b15      	ldr	r3, [pc, #84]	; (800a8d8 <Print_Medha_Self_Details+0xb4>)
 800a884:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a888:	4619      	mov	r1, r3
 800a88a:	481a      	ldr	r0, [pc, #104]	; (800a8f4 <Print_Medha_Self_Details+0xd0>)
 800a88c:	f018 f936 	bl	8022afc <iprintf>
	printf("NoofRelays                    :%u\n",EI_data.Medha_Prms_st.NoofRelays);
 800a890:	4b11      	ldr	r3, [pc, #68]	; (800a8d8 <Print_Medha_Self_Details+0xb4>)
 800a892:	f8b3 3328 	ldrh.w	r3, [r3, #808]	; 0x328
 800a896:	4619      	mov	r1, r3
 800a898:	4817      	ldr	r0, [pc, #92]	; (800a8f8 <Print_Medha_Self_Details+0xd4>)
 800a89a:	f018 f92f 	bl	8022afc <iprintf>
	printf("Packet_Interval_ms            :%lu\n",EI_data.Medha_Prms_st.Packet_Interval_ms);
 800a89e:	4b0e      	ldr	r3, [pc, #56]	; (800a8d8 <Print_Medha_Self_Details+0xb4>)
 800a8a0:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 800a8a4:	4619      	mov	r1, r3
 800a8a6:	4815      	ldr	r0, [pc, #84]	; (800a8fc <Print_Medha_Self_Details+0xd8>)
 800a8a8:	f018 f928 	bl	8022afc <iprintf>
	printf("Packet_Timeout_Count          :%u\n",EI_data.Medha_Prms_st.Packet_Timeout_Count);
 800a8ac:	4b0a      	ldr	r3, [pc, #40]	; (800a8d8 <Print_Medha_Self_Details+0xb4>)
 800a8ae:	f8b3 3326 	ldrh.w	r3, [r3, #806]	; 0x326
 800a8b2:	4619      	mov	r1, r3
 800a8b4:	4812      	ldr	r0, [pc, #72]	; (800a900 <Print_Medha_Self_Details+0xdc>)
 800a8b6:	f018 f921 	bl	8022afc <iprintf>
	printf("SendSignal2MIE_CLK            :%lu\n",EI_data.Medha_Prms_st.SendSignal2MIE_CLK);
 800a8ba:	4b07      	ldr	r3, [pc, #28]	; (800a8d8 <Print_Medha_Self_Details+0xb4>)
 800a8bc:	f8d3 3334 	ldr.w	r3, [r3, #820]	; 0x334
 800a8c0:	4619      	mov	r1, r3
 800a8c2:	4810      	ldr	r0, [pc, #64]	; (800a904 <Print_Medha_Self_Details+0xe0>)
 800a8c4:	f018 f91a 	bl	8022afc <iprintf>


#ifdef EI_1
	printf("\n ______________________________ EI_1_SELF_DETAILS ______________________________ \n");
 800a8c8:	4802      	ldr	r0, [pc, #8]	; (800a8d4 <Print_Medha_Self_Details+0xb0>)
 800a8ca:	f018 f9b3 	bl	8022c34 <puts>
#endif
#ifdef EI_2
	printf("\n ______________________________ EI_2_SELF_DETAILS ______________________________ \n");
#endif
}
 800a8ce:	bf00      	nop
 800a8d0:	bd80      	pop	{r7, pc}
 800a8d2:	bf00      	nop
 800a8d4:	08025d0c 	.word	0x08025d0c
 800a8d8:	20000304 	.word	0x20000304
 800a8dc:	08025d60 	.word	0x08025d60
 800a8e0:	08025d84 	.word	0x08025d84
 800a8e4:	08025da8 	.word	0x08025da8
 800a8e8:	08025dcc 	.word	0x08025dcc
 800a8ec:	08025df0 	.word	0x08025df0
 800a8f0:	08025e14 	.word	0x08025e14
 800a8f4:	08025e38 	.word	0x08025e38
 800a8f8:	08025e5c 	.word	0x08025e5c
 800a8fc:	08025e80 	.word	0x08025e80
 800a900:	08025ea4 	.word	0x08025ea4
 800a904:	08025ec8 	.word	0x08025ec8

0800a908 <CheckforMedhaCMD>:


void CheckforMedhaCMD(void)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b09a      	sub	sp, #104	; 0x68
 800a90c:	af00      	add	r7, sp, #0
	//	unsigned char ch[20] = {0,},i=0;
	uint8_t IS_COMMAND_RECEIVED = NO;
 800a90e:	2300      	movs	r3, #0
 800a910:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t Index = 0;
 800a914:	2300      	movs	r3, #0
 800a916:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t Byte = 0;
 800a91a:	2300      	movs	r3, #0
 800a91c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	uint8_t Buffer[100] = {0,};
 800a920:	2300      	movs	r3, #0
 800a922:	603b      	str	r3, [r7, #0]
 800a924:	1d3b      	adds	r3, r7, #4
 800a926:	2260      	movs	r2, #96	; 0x60
 800a928:	2100      	movs	r1, #0
 800a92a:	4618      	mov	r0, r3
 800a92c:	f017 fffe 	bl	802292c <memset>
	if(HAL_Elaps_Ticks(Isp_Intr_Clk) < 10)
 800a930:	4bb9      	ldr	r3, [pc, #740]	; (800ac18 <CheckforMedhaCMD+0x310>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	4618      	mov	r0, r3
 800a936:	f004 faed 	bl	800ef14 <HAL_Elaps_Ticks>
 800a93a:	4603      	mov	r3, r0
 800a93c:	2b09      	cmp	r3, #9
 800a93e:	f240 81ad 	bls.w	800ac9c <CheckforMedhaCMD+0x394>
	{
		return;
	}
	else
	{
		while(Com_DataReady(ISP_PORT))
 800a942:	e010      	b.n	800a966 <CheckforMedhaCMD+0x5e>
		{
			Byte = Com_Get_Byte(ISP_PORT);
 800a944:	2000      	movs	r0, #0
 800a946:	f00a fda7 	bl	8015498 <Com_Get_Byte>
 800a94a:	4603      	mov	r3, r0
 800a94c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			Buffer[Index++] = Byte;
 800a950:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800a954:	1c5a      	adds	r2, r3, #1
 800a956:	f887 2066 	strb.w	r2, [r7, #102]	; 0x66
 800a95a:	3368      	adds	r3, #104	; 0x68
 800a95c:	443b      	add	r3, r7
 800a95e:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 800a962:	f803 2c68 	strb.w	r2, [r3, #-104]
		while(Com_DataReady(ISP_PORT))
 800a966:	2000      	movs	r0, #0
 800a968:	f00a fd56 	bl	8015418 <Com_DataReady>
 800a96c:	4603      	mov	r3, r0
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d1e8      	bne.n	800a944 <CheckforMedhaCMD+0x3c>
		}
		if(Index>0)
 800a972:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800a976:	2b00      	cmp	r3, #0
 800a978:	f000 8144 	beq.w	800ac04 <CheckforMedhaCMD+0x2fc>
		{
			Buffer[Index] = 0;
 800a97c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800a980:	3368      	adds	r3, #104	; 0x68
 800a982:	443b      	add	r3, r7
 800a984:	2200      	movs	r2, #0
 800a986:	f803 2c68 	strb.w	r2, [r3, #-104]
			printf("Received from ISP:%s\n",Buffer);
 800a98a:	463b      	mov	r3, r7
 800a98c:	4619      	mov	r1, r3
 800a98e:	48a3      	ldr	r0, [pc, #652]	; (800ac1c <CheckforMedhaCMD+0x314>)
 800a990:	f018 f8b4 	bl	8022afc <iprintf>
			switch(Is_MedhaCommand_Valid(Buffer,Index))
 800a994:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 800a998:	463b      	mov	r3, r7
 800a99a:	4611      	mov	r1, r2
 800a99c:	4618      	mov	r0, r3
 800a99e:	f000 fa0d 	bl	800adbc <Is_MedhaCommand_Valid>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	2b0c      	cmp	r3, #12
 800a9a6:	f200 8129 	bhi.w	800abfc <CheckforMedhaCMD+0x2f4>
 800a9aa:	a201      	add	r2, pc, #4	; (adr r2, 800a9b0 <CheckforMedhaCMD+0xa8>)
 800a9ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9b0:	0800a9e5 	.word	0x0800a9e5
 800a9b4:	0800a9f3 	.word	0x0800a9f3
 800a9b8:	0800aa57 	.word	0x0800aa57
 800a9bc:	0800aa79 	.word	0x0800aa79
 800a9c0:	0800aaa1 	.word	0x0800aaa1
 800a9c4:	0800aac9 	.word	0x0800aac9
 800a9c8:	0800aaf1 	.word	0x0800aaf1
 800a9cc:	0800ab19 	.word	0x0800ab19
 800a9d0:	0800ab41 	.word	0x0800ab41
 800a9d4:	0800ab69 	.word	0x0800ab69
 800a9d8:	0800ab91 	.word	0x0800ab91
 800a9dc:	0800abb9 	.word	0x0800abb9
 800a9e0:	0800abe1 	.word	0x0800abe1
			{
			case ZERO:
				Dats_Request_Flag = 1;
 800a9e4:	4b8e      	ldr	r3, [pc, #568]	; (800ac20 <CheckforMedhaCMD+0x318>)
 800a9e6:	2201      	movs	r2, #1
 800a9e8:	701a      	strb	r2, [r3, #0]
				printf("\n*************PLEASE LOAD EI DATS USING APPLICATION************\n");
 800a9ea:	488e      	ldr	r0, [pc, #568]	; (800ac24 <CheckforMedhaCMD+0x31c>)
 800a9ec:	f018 f922 	bl	8022c34 <puts>
				break;
 800a9f0:	e109      	b.n	800ac06 <CheckforMedhaCMD+0x2fe>
			case ONE:
				printf("Received \"%s\":%u\n",Commands_ListMedha[ONE],(Buffer[Index-1])-'0');
 800a9f2:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800a9f6:	3b01      	subs	r3, #1
 800a9f8:	3368      	adds	r3, #104	; 0x68
 800a9fa:	443b      	add	r3, r7
 800a9fc:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800aa00:	3b30      	subs	r3, #48	; 0x30
 800aa02:	461a      	mov	r2, r3
 800aa04:	4988      	ldr	r1, [pc, #544]	; (800ac28 <CheckforMedhaCMD+0x320>)
 800aa06:	4889      	ldr	r0, [pc, #548]	; (800ac2c <CheckforMedhaCMD+0x324>)
 800aa08:	f018 f878 	bl	8022afc <iprintf>
				if( (((Buffer[Index-1])-'0') >= 0) && ((Buffer[Index-1])-'0') < 3)
 800aa0c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800aa10:	3b01      	subs	r3, #1
 800aa12:	3368      	adds	r3, #104	; 0x68
 800aa14:	443b      	add	r3, r7
 800aa16:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800aa1a:	2b2f      	cmp	r3, #47	; 0x2f
 800aa1c:	d914      	bls.n	800aa48 <CheckforMedhaCMD+0x140>
 800aa1e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800aa22:	3b01      	subs	r3, #1
 800aa24:	3368      	adds	r3, #104	; 0x68
 800aa26:	443b      	add	r3, r7
 800aa28:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800aa2c:	2b32      	cmp	r3, #50	; 0x32
 800aa2e:	d80b      	bhi.n	800aa48 <CheckforMedhaCMD+0x140>
				{
					Debug_flag = (Buffer[Index-1])-'0';
 800aa30:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800aa34:	3b01      	subs	r3, #1
 800aa36:	3368      	adds	r3, #104	; 0x68
 800aa38:	443b      	add	r3, r7
 800aa3a:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800aa3e:	3b30      	subs	r3, #48	; 0x30
 800aa40:	b2da      	uxtb	r2, r3
 800aa42:	4b7b      	ldr	r3, [pc, #492]	; (800ac30 <CheckforMedhaCMD+0x328>)
 800aa44:	701a      	strb	r2, [r3, #0]
 800aa46:	e002      	b.n	800aa4e <CheckforMedhaCMD+0x146>
				}
				else
				{
					printf("Please Send Valid Command\n");
 800aa48:	487a      	ldr	r0, [pc, #488]	; (800ac34 <CheckforMedhaCMD+0x32c>)
 800aa4a:	f018 f8f3 	bl	8022c34 <puts>
				}
				IS_COMMAND_RECEIVED = YES;
 800aa4e:	2301      	movs	r3, #1
 800aa50:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800aa54:	e0d7      	b.n	800ac06 <CheckforMedhaCMD+0x2fe>

			case TWO:
				printf("Received %s\n",Commands_ListMedha[TWO]);
 800aa56:	4978      	ldr	r1, [pc, #480]	; (800ac38 <CheckforMedhaCMD+0x330>)
 800aa58:	4878      	ldr	r0, [pc, #480]	; (800ac3c <CheckforMedhaCMD+0x334>)
 800aa5a:	f018 f84f 	bl	8022afc <iprintf>
				printf("INVALID_DES_SYS_TYPE\n");
 800aa5e:	4878      	ldr	r0, [pc, #480]	; (800ac40 <CheckforMedhaCMD+0x338>)
 800aa60:	f018 f8e8 	bl	8022c34 <puts>
				SET_BIT_USER(INVALID_DES_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800aa64:	4b77      	ldr	r3, [pc, #476]	; (800ac44 <CheckforMedhaCMD+0x33c>)
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f043 0301 	orr.w	r3, r3, #1
 800aa6c:	4a75      	ldr	r2, [pc, #468]	; (800ac44 <CheckforMedhaCMD+0x33c>)
 800aa6e:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800aa70:	2301      	movs	r3, #1
 800aa72:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800aa76:	e0c6      	b.n	800ac06 <CheckforMedhaCMD+0x2fe>

			case THREE:
				printf("Received %s\n",Commands_ListMedha[THREE]);
 800aa78:	4973      	ldr	r1, [pc, #460]	; (800ac48 <CheckforMedhaCMD+0x340>)
 800aa7a:	4870      	ldr	r0, [pc, #448]	; (800ac3c <CheckforMedhaCMD+0x334>)
 800aa7c:	f018 f83e 	bl	8022afc <iprintf>
				printf("INVALID_SRC_SYS_TYPE\n");
 800aa80:	4872      	ldr	r0, [pc, #456]	; (800ac4c <CheckforMedhaCMD+0x344>)
 800aa82:	f018 f8d7 	bl	8022c34 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800aa86:	4b6f      	ldr	r3, [pc, #444]	; (800ac44 <CheckforMedhaCMD+0x33c>)
 800aa88:	2200      	movs	r2, #0
 800aa8a:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800aa8c:	4b6d      	ldr	r3, [pc, #436]	; (800ac44 <CheckforMedhaCMD+0x33c>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f043 0302 	orr.w	r3, r3, #2
 800aa94:	4a6b      	ldr	r2, [pc, #428]	; (800ac44 <CheckforMedhaCMD+0x33c>)
 800aa96:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800aa98:	2301      	movs	r3, #1
 800aa9a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800aa9e:	e0b2      	b.n	800ac06 <CheckforMedhaCMD+0x2fe>

			case FOUR:
				printf("Received %s\n",Commands_ListMedha[FOUR]);
 800aaa0:	496b      	ldr	r1, [pc, #428]	; (800ac50 <CheckforMedhaCMD+0x348>)
 800aaa2:	4866      	ldr	r0, [pc, #408]	; (800ac3c <CheckforMedhaCMD+0x334>)
 800aaa4:	f018 f82a 	bl	8022afc <iprintf>
				printf("INVALID_SRC_ADDR\n");
 800aaa8:	486a      	ldr	r0, [pc, #424]	; (800ac54 <CheckforMedhaCMD+0x34c>)
 800aaaa:	f018 f8c3 	bl	8022c34 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800aaae:	4b65      	ldr	r3, [pc, #404]	; (800ac44 <CheckforMedhaCMD+0x33c>)
 800aab0:	2200      	movs	r2, #0
 800aab2:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_ADDR,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800aab4:	4b63      	ldr	r3, [pc, #396]	; (800ac44 <CheckforMedhaCMD+0x33c>)
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	f043 0304 	orr.w	r3, r3, #4
 800aabc:	4a61      	ldr	r2, [pc, #388]	; (800ac44 <CheckforMedhaCMD+0x33c>)
 800aabe:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800aac0:	2301      	movs	r3, #1
 800aac2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800aac6:	e09e      	b.n	800ac06 <CheckforMedhaCMD+0x2fe>

			case FIVE:
				printf("Received %s\n",Commands_ListMedha[FIVE]);
 800aac8:	4963      	ldr	r1, [pc, #396]	; (800ac58 <CheckforMedhaCMD+0x350>)
 800aaca:	485c      	ldr	r0, [pc, #368]	; (800ac3c <CheckforMedhaCMD+0x334>)
 800aacc:	f018 f816 	bl	8022afc <iprintf>
				printf("INVALID_DES_PORT\n");
 800aad0:	4862      	ldr	r0, [pc, #392]	; (800ac5c <CheckforMedhaCMD+0x354>)
 800aad2:	f018 f8af 	bl	8022c34 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800aad6:	4b5b      	ldr	r3, [pc, #364]	; (800ac44 <CheckforMedhaCMD+0x33c>)
 800aad8:	2200      	movs	r2, #0
 800aada:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_DES_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800aadc:	4b59      	ldr	r3, [pc, #356]	; (800ac44 <CheckforMedhaCMD+0x33c>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	f043 0308 	orr.w	r3, r3, #8
 800aae4:	4a57      	ldr	r2, [pc, #348]	; (800ac44 <CheckforMedhaCMD+0x33c>)
 800aae6:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800aae8:	2301      	movs	r3, #1
 800aaea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800aaee:	e08a      	b.n	800ac06 <CheckforMedhaCMD+0x2fe>

			case SIX:
				printf("Received %s\n",Commands_ListMedha[SIX]);
 800aaf0:	495b      	ldr	r1, [pc, #364]	; (800ac60 <CheckforMedhaCMD+0x358>)
 800aaf2:	4852      	ldr	r0, [pc, #328]	; (800ac3c <CheckforMedhaCMD+0x334>)
 800aaf4:	f018 f802 	bl	8022afc <iprintf>
				printf("INVALID_SRC_PORT\n");
 800aaf8:	485a      	ldr	r0, [pc, #360]	; (800ac64 <CheckforMedhaCMD+0x35c>)
 800aafa:	f018 f89b 	bl	8022c34 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800aafe:	4b51      	ldr	r3, [pc, #324]	; (800ac44 <CheckforMedhaCMD+0x33c>)
 800ab00:	2200      	movs	r2, #0
 800ab02:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800ab04:	4b4f      	ldr	r3, [pc, #316]	; (800ac44 <CheckforMedhaCMD+0x33c>)
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	f043 0310 	orr.w	r3, r3, #16
 800ab0c:	4a4d      	ldr	r2, [pc, #308]	; (800ac44 <CheckforMedhaCMD+0x33c>)
 800ab0e:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800ab10:	2301      	movs	r3, #1
 800ab12:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800ab16:	e076      	b.n	800ac06 <CheckforMedhaCMD+0x2fe>
			case SEVEN:
				printf("Received %s\n",Commands_ListMedha[SEVEN]);
 800ab18:	4953      	ldr	r1, [pc, #332]	; (800ac68 <CheckforMedhaCMD+0x360>)
 800ab1a:	4848      	ldr	r0, [pc, #288]	; (800ac3c <CheckforMedhaCMD+0x334>)
 800ab1c:	f017 ffee 	bl	8022afc <iprintf>
				printf("INVALID_PACKET_CRC_SIEMENS\n");
 800ab20:	4852      	ldr	r0, [pc, #328]	; (800ac6c <CheckforMedhaCMD+0x364>)
 800ab22:	f018 f887 	bl	8022c34 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800ab26:	4b47      	ldr	r3, [pc, #284]	; (800ac44 <CheckforMedhaCMD+0x33c>)
 800ab28:	2200      	movs	r2, #0
 800ab2a:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800ab2c:	4b45      	ldr	r3, [pc, #276]	; (800ac44 <CheckforMedhaCMD+0x33c>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f043 0320 	orr.w	r3, r3, #32
 800ab34:	4a43      	ldr	r2, [pc, #268]	; (800ac44 <CheckforMedhaCMD+0x33c>)
 800ab36:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800ab38:	2301      	movs	r3, #1
 800ab3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800ab3e:	e062      	b.n	800ac06 <CheckforMedhaCMD+0x2fe>
			case EIGHT:
				printf("Received %s Command\n",Commands_ListMedha[EIGHT]);
 800ab40:	494b      	ldr	r1, [pc, #300]	; (800ac70 <CheckforMedhaCMD+0x368>)
 800ab42:	484c      	ldr	r0, [pc, #304]	; (800ac74 <CheckforMedhaCMD+0x36c>)
 800ab44:	f017 ffda 	bl	8022afc <iprintf>
				printf("NO_REPLY_FROM_EIPC\n");
 800ab48:	484b      	ldr	r0, [pc, #300]	; (800ac78 <CheckforMedhaCMD+0x370>)
 800ab4a:	f018 f873 	bl	8022c34 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800ab4e:	4b3d      	ldr	r3, [pc, #244]	; (800ac44 <CheckforMedhaCMD+0x33c>)
 800ab50:	2200      	movs	r2, #0
 800ab52:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(NO_REPLY_FROM_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800ab54:	4b3b      	ldr	r3, [pc, #236]	; (800ac44 <CheckforMedhaCMD+0x33c>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab5c:	4a39      	ldr	r2, [pc, #228]	; (800ac44 <CheckforMedhaCMD+0x33c>)
 800ab5e:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800ab60:	2301      	movs	r3, #1
 800ab62:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800ab66:	e04e      	b.n	800ac06 <CheckforMedhaCMD+0x2fe>
			case NINE:
				printf("Received %s\n",Commands_ListMedha[NINE]);
 800ab68:	4944      	ldr	r1, [pc, #272]	; (800ac7c <CheckforMedhaCMD+0x374>)
 800ab6a:	4834      	ldr	r0, [pc, #208]	; (800ac3c <CheckforMedhaCMD+0x334>)
 800ab6c:	f017 ffc6 	bl	8022afc <iprintf>
				printf("INVALID_PACKET_CRC_EIPC\n");
 800ab70:	4843      	ldr	r0, [pc, #268]	; (800ac80 <CheckforMedhaCMD+0x378>)
 800ab72:	f018 f85f 	bl	8022c34 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800ab76:	4b33      	ldr	r3, [pc, #204]	; (800ac44 <CheckforMedhaCMD+0x33c>)
 800ab78:	2200      	movs	r2, #0
 800ab7a:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800ab7c:	4b31      	ldr	r3, [pc, #196]	; (800ac44 <CheckforMedhaCMD+0x33c>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab84:	4a2f      	ldr	r2, [pc, #188]	; (800ac44 <CheckforMedhaCMD+0x33c>)
 800ab86:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800ab88:	2301      	movs	r3, #1
 800ab8a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800ab8e:	e03a      	b.n	800ac06 <CheckforMedhaCMD+0x2fe>
			case TEN:
				printf("Received %s\n",Commands_ListMedha[TEN]);
 800ab90:	493c      	ldr	r1, [pc, #240]	; (800ac84 <CheckforMedhaCMD+0x37c>)
 800ab92:	482a      	ldr	r0, [pc, #168]	; (800ac3c <CheckforMedhaCMD+0x334>)
 800ab94:	f017 ffb2 	bl	8022afc <iprintf>
				printf("INVALID_COMP_PACKET_CRC_SIEMENS\n");
 800ab98:	483b      	ldr	r0, [pc, #236]	; (800ac88 <CheckforMedhaCMD+0x380>)
 800ab9a:	f018 f84b 	bl	8022c34 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800ab9e:	4b29      	ldr	r3, [pc, #164]	; (800ac44 <CheckforMedhaCMD+0x33c>)
 800aba0:	2200      	movs	r2, #0
 800aba2:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_COMP_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800aba4:	4b27      	ldr	r3, [pc, #156]	; (800ac44 <CheckforMedhaCMD+0x33c>)
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800abac:	4a25      	ldr	r2, [pc, #148]	; (800ac44 <CheckforMedhaCMD+0x33c>)
 800abae:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800abb0:	2301      	movs	r3, #1
 800abb2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800abb6:	e026      	b.n	800ac06 <CheckforMedhaCMD+0x2fe>
			case ELEVEN:
				printf("Received %s\n",Commands_ListMedha[ELEVEN]);
 800abb8:	4934      	ldr	r1, [pc, #208]	; (800ac8c <CheckforMedhaCMD+0x384>)
 800abba:	4820      	ldr	r0, [pc, #128]	; (800ac3c <CheckforMedhaCMD+0x334>)
 800abbc:	f017 ff9e 	bl	8022afc <iprintf>
				printf("INVALID_COMP_PACKET_CRC_EIPC\n");
 800abc0:	4833      	ldr	r0, [pc, #204]	; (800ac90 <CheckforMedhaCMD+0x388>)
 800abc2:	f018 f837 	bl	8022c34 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800abc6:	4b1f      	ldr	r3, [pc, #124]	; (800ac44 <CheckforMedhaCMD+0x33c>)
 800abc8:	2200      	movs	r2, #0
 800abca:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_COMP_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800abcc:	4b1d      	ldr	r3, [pc, #116]	; (800ac44 <CheckforMedhaCMD+0x33c>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800abd4:	4a1b      	ldr	r2, [pc, #108]	; (800ac44 <CheckforMedhaCMD+0x33c>)
 800abd6:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800abd8:	2301      	movs	r3, #1
 800abda:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800abde:	e012      	b.n	800ac06 <CheckforMedhaCMD+0x2fe>
			case TWELVE:
				printf("Received %s\n",Commands_ListMedha[TWELVE]);
 800abe0:	492c      	ldr	r1, [pc, #176]	; (800ac94 <CheckforMedhaCMD+0x38c>)
 800abe2:	4816      	ldr	r0, [pc, #88]	; (800ac3c <CheckforMedhaCMD+0x334>)
 800abe4:	f017 ff8a 	bl	8022afc <iprintf>
				printf("CLEAR ALL\n");
 800abe8:	482b      	ldr	r0, [pc, #172]	; (800ac98 <CheckforMedhaCMD+0x390>)
 800abea:	f018 f823 	bl	8022c34 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800abee:	4b15      	ldr	r3, [pc, #84]	; (800ac44 <CheckforMedhaCMD+0x33c>)
 800abf0:	2200      	movs	r2, #0
 800abf2:	601a      	str	r2, [r3, #0]
				IS_COMMAND_RECEIVED = YES;
 800abf4:	2301      	movs	r3, #1
 800abf6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800abfa:	e004      	b.n	800ac06 <CheckforMedhaCMD+0x2fe>
			default:
				printf("Please Send Valid Command\n");
 800abfc:	480d      	ldr	r0, [pc, #52]	; (800ac34 <CheckforMedhaCMD+0x32c>)
 800abfe:	f018 f819 	bl	8022c34 <puts>
 800ac02:	e000      	b.n	800ac06 <CheckforMedhaCMD+0x2fe>
			}
		}
 800ac04:	bf00      	nop

		if(IS_COMMAND_RECEIVED == YES)
 800ac06:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ac0a:	2b01      	cmp	r3, #1
 800ac0c:	d147      	bne.n	800ac9e <CheckforMedhaCMD+0x396>
		{
			TransmitCanPkt(CAN_FAULT_INJECTION);
 800ac0e:	f240 2005 	movw	r0, #517	; 0x205
 800ac12:	f004 ff39 	bl	800fa88 <TransmitCanPkt>
 800ac16:	e042      	b.n	800ac9e <CheckforMedhaCMD+0x396>
 800ac18:	2000a0b4 	.word	0x2000a0b4
 800ac1c:	08025eec 	.word	0x08025eec
 800ac20:	20000644 	.word	0x20000644
 800ac24:	08025f04 	.word	0x08025f04
 800ac28:	2000219a 	.word	0x2000219a
 800ac2c:	08025f44 	.word	0x08025f44
 800ac30:	20000645 	.word	0x20000645
 800ac34:	08025f58 	.word	0x08025f58
 800ac38:	200021cc 	.word	0x200021cc
 800ac3c:	08025f74 	.word	0x08025f74
 800ac40:	08025f84 	.word	0x08025f84
 800ac44:	20003524 	.word	0x20003524
 800ac48:	200021fe 	.word	0x200021fe
 800ac4c:	08025f9c 	.word	0x08025f9c
 800ac50:	20002230 	.word	0x20002230
 800ac54:	08025fb4 	.word	0x08025fb4
 800ac58:	20002262 	.word	0x20002262
 800ac5c:	08025fc8 	.word	0x08025fc8
 800ac60:	20002294 	.word	0x20002294
 800ac64:	08025fdc 	.word	0x08025fdc
 800ac68:	200022c6 	.word	0x200022c6
 800ac6c:	08025ff0 	.word	0x08025ff0
 800ac70:	200022f8 	.word	0x200022f8
 800ac74:	0802600c 	.word	0x0802600c
 800ac78:	08026024 	.word	0x08026024
 800ac7c:	2000232a 	.word	0x2000232a
 800ac80:	08026038 	.word	0x08026038
 800ac84:	2000235c 	.word	0x2000235c
 800ac88:	08026050 	.word	0x08026050
 800ac8c:	2000238e 	.word	0x2000238e
 800ac90:	08026070 	.word	0x08026070
 800ac94:	200023c0 	.word	0x200023c0
 800ac98:	08026090 	.word	0x08026090
		return;
 800ac9c:	bf00      	nop
		}
	}
}
 800ac9e:	3768      	adds	r7, #104	; 0x68
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}

0800aca4 <Update_MedhaCommands>:


void Update_MedhaCommands(void)
{
 800aca4:	b480      	push	{r7}
 800aca6:	b083      	sub	sp, #12
 800aca8:	af00      	add	r7, sp, #0
	uint8_t CmdCnt = 0;
 800acaa:	2300      	movs	r3, #0
 800acac:	71fb      	strb	r3, [r7, #7]

	Commands_ListMedha[CmdCnt][0] = 0X24;
 800acae:	79fb      	ldrb	r3, [r7, #7]
 800acb0:	4a3d      	ldr	r2, [pc, #244]	; (800ada8 <Update_MedhaCommands+0x104>)
 800acb2:	2132      	movs	r1, #50	; 0x32
 800acb4:	fb01 f303 	mul.w	r3, r1, r3
 800acb8:	4413      	add	r3, r2
 800acba:	2224      	movs	r2, #36	; 0x24
 800acbc:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][1] = 0X01;
 800acbe:	79fb      	ldrb	r3, [r7, #7]
 800acc0:	4a39      	ldr	r2, [pc, #228]	; (800ada8 <Update_MedhaCommands+0x104>)
 800acc2:	2132      	movs	r1, #50	; 0x32
 800acc4:	fb01 f303 	mul.w	r3, r1, r3
 800acc8:	4413      	add	r3, r2
 800acca:	3301      	adds	r3, #1
 800accc:	2201      	movs	r2, #1
 800acce:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][2] = 0X30;
 800acd0:	79fb      	ldrb	r3, [r7, #7]
 800acd2:	4a35      	ldr	r2, [pc, #212]	; (800ada8 <Update_MedhaCommands+0x104>)
 800acd4:	2132      	movs	r1, #50	; 0x32
 800acd6:	fb01 f303 	mul.w	r3, r1, r3
 800acda:	4413      	add	r3, r2
 800acdc:	3302      	adds	r3, #2
 800acde:	2230      	movs	r2, #48	; 0x30
 800ace0:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][3] = 0X40;
 800ace2:	79fb      	ldrb	r3, [r7, #7]
 800ace4:	4a30      	ldr	r2, [pc, #192]	; (800ada8 <Update_MedhaCommands+0x104>)
 800ace6:	2132      	movs	r1, #50	; 0x32
 800ace8:	fb01 f303 	mul.w	r3, r1, r3
 800acec:	4413      	add	r3, r2
 800acee:	3303      	adds	r3, #3
 800acf0:	2240      	movs	r2, #64	; 0x40
 800acf2:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][4] = 0XC0;
 800acf4:	79fb      	ldrb	r3, [r7, #7]
 800acf6:	4a2c      	ldr	r2, [pc, #176]	; (800ada8 <Update_MedhaCommands+0x104>)
 800acf8:	2132      	movs	r1, #50	; 0x32
 800acfa:	fb01 f303 	mul.w	r3, r1, r3
 800acfe:	4413      	add	r3, r2
 800ad00:	3304      	adds	r3, #4
 800ad02:	22c0      	movs	r2, #192	; 0xc0
 800ad04:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][5] = 0X4E;
 800ad06:	79fb      	ldrb	r3, [r7, #7]
 800ad08:	4a27      	ldr	r2, [pc, #156]	; (800ada8 <Update_MedhaCommands+0x104>)
 800ad0a:	2132      	movs	r1, #50	; 0x32
 800ad0c:	fb01 f303 	mul.w	r3, r1, r3
 800ad10:	4413      	add	r3, r2
 800ad12:	3305      	adds	r3, #5
 800ad14:	224e      	movs	r2, #78	; 0x4e
 800ad16:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][6] = 0X26;
 800ad18:	79fb      	ldrb	r3, [r7, #7]
 800ad1a:	4a23      	ldr	r2, [pc, #140]	; (800ada8 <Update_MedhaCommands+0x104>)
 800ad1c:	2132      	movs	r1, #50	; 0x32
 800ad1e:	fb01 f303 	mul.w	r3, r1, r3
 800ad22:	4413      	add	r3, r2
 800ad24:	3306      	adds	r3, #6
 800ad26:	2226      	movs	r2, #38	; 0x26
 800ad28:	701a      	strb	r2, [r3, #0]
	++CmdCnt;
 800ad2a:	79fb      	ldrb	r3, [r7, #7]
 800ad2c:	3301      	adds	r3, #1
 800ad2e:	71fb      	strb	r3, [r7, #7]

	strcpy( (char *)Commands_ListMedha[CmdCnt++], (const char *)"DEBUG_MODE");
 800ad30:	79fb      	ldrb	r3, [r7, #7]
 800ad32:	1c5a      	adds	r2, r3, #1
 800ad34:	71fa      	strb	r2, [r7, #7]
 800ad36:	461a      	mov	r2, r3
 800ad38:	2332      	movs	r3, #50	; 0x32
 800ad3a:	fb02 f303 	mul.w	r3, r2, r3
 800ad3e:	4a1a      	ldr	r2, [pc, #104]	; (800ada8 <Update_MedhaCommands+0x104>)
 800ad40:	4413      	add	r3, r2
 800ad42:	491a      	ldr	r1, [pc, #104]	; (800adac <Update_MedhaCommands+0x108>)
 800ad44:	461a      	mov	r2, r3
 800ad46:	460b      	mov	r3, r1
 800ad48:	cb03      	ldmia	r3!, {r0, r1}
 800ad4a:	6010      	str	r0, [r2, #0]
 800ad4c:	6051      	str	r1, [r2, #4]
 800ad4e:	8819      	ldrh	r1, [r3, #0]
 800ad50:	789b      	ldrb	r3, [r3, #2]
 800ad52:	8111      	strh	r1, [r2, #8]
 800ad54:	7293      	strb	r3, [r2, #10]
	strcpy( (char *)Commands_ListMedha[CmdCnt++], (const char *)"CLEAR_ALL");
 800ad56:	79fb      	ldrb	r3, [r7, #7]
 800ad58:	1c5a      	adds	r2, r3, #1
 800ad5a:	71fa      	strb	r2, [r7, #7]
 800ad5c:	461a      	mov	r2, r3
 800ad5e:	2332      	movs	r3, #50	; 0x32
 800ad60:	fb02 f303 	mul.w	r3, r2, r3
 800ad64:	4a10      	ldr	r2, [pc, #64]	; (800ada8 <Update_MedhaCommands+0x104>)
 800ad66:	4413      	add	r3, r2
 800ad68:	4911      	ldr	r1, [pc, #68]	; (800adb0 <Update_MedhaCommands+0x10c>)
 800ad6a:	461a      	mov	r2, r3
 800ad6c:	460b      	mov	r3, r1
 800ad6e:	cb03      	ldmia	r3!, {r0, r1}
 800ad70:	6010      	str	r0, [r2, #0]
 800ad72:	6051      	str	r1, [r2, #4]
 800ad74:	881b      	ldrh	r3, [r3, #0]
 800ad76:	8113      	strh	r3, [r2, #8]
	strcpy( (char *)Commands_ListMedha[CmdCnt++], (const char *)"HELP");
 800ad78:	79fb      	ldrb	r3, [r7, #7]
 800ad7a:	1c5a      	adds	r2, r3, #1
 800ad7c:	71fa      	strb	r2, [r7, #7]
 800ad7e:	461a      	mov	r2, r3
 800ad80:	2332      	movs	r3, #50	; 0x32
 800ad82:	fb02 f303 	mul.w	r3, r2, r3
 800ad86:	4a08      	ldr	r2, [pc, #32]	; (800ada8 <Update_MedhaCommands+0x104>)
 800ad88:	4413      	add	r3, r2
 800ad8a:	4a0a      	ldr	r2, [pc, #40]	; (800adb4 <Update_MedhaCommands+0x110>)
 800ad8c:	6810      	ldr	r0, [r2, #0]
 800ad8e:	6018      	str	r0, [r3, #0]
 800ad90:	7912      	ldrb	r2, [r2, #4]
 800ad92:	711a      	strb	r2, [r3, #4]
	Commands_Count =  CmdCnt;
 800ad94:	4a08      	ldr	r2, [pc, #32]	; (800adb8 <Update_MedhaCommands+0x114>)
 800ad96:	79fb      	ldrb	r3, [r7, #7]
 800ad98:	7013      	strb	r3, [r2, #0]
}
 800ad9a:	bf00      	nop
 800ad9c:	370c      	adds	r7, #12
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada4:	4770      	bx	lr
 800ada6:	bf00      	nop
 800ada8:	20002168 	.word	0x20002168
 800adac:	0802609c 	.word	0x0802609c
 800adb0:	080260a8 	.word	0x080260a8
 800adb4:	080260b4 	.word	0x080260b4
 800adb8:	20002550 	.word	0x20002550

0800adbc <Is_MedhaCommand_Valid>:

uint8_t Is_MedhaCommand_Valid(uint8_t *Buffer,uint8_t Length)
{
 800adbc:	b590      	push	{r4, r7, lr}
 800adbe:	b085      	sub	sp, #20
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
 800adc4:	460b      	mov	r3, r1
 800adc6:	70fb      	strb	r3, [r7, #3]
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 800adc8:	2300      	movs	r3, #0
 800adca:	73fb      	strb	r3, [r7, #15]
 800adcc:	e01c      	b.n	800ae08 <Is_MedhaCommand_Valid+0x4c>
	{
		//		if(strstr((char *)Buffer,(char *)Commands_ListMedha[Traverser]) != NULL)
		if(memcmp(Buffer,Commands_ListMedha[Traverser],strlen((char *)Commands_ListMedha[Traverser])) == 0)
 800adce:	7bfb      	ldrb	r3, [r7, #15]
 800add0:	2232      	movs	r2, #50	; 0x32
 800add2:	fb02 f303 	mul.w	r3, r2, r3
 800add6:	4a11      	ldr	r2, [pc, #68]	; (800ae1c <Is_MedhaCommand_Valid+0x60>)
 800add8:	189c      	adds	r4, r3, r2
 800adda:	7bfb      	ldrb	r3, [r7, #15]
 800addc:	2232      	movs	r2, #50	; 0x32
 800adde:	fb02 f303 	mul.w	r3, r2, r3
 800ade2:	4a0e      	ldr	r2, [pc, #56]	; (800ae1c <Is_MedhaCommand_Valid+0x60>)
 800ade4:	4413      	add	r3, r2
 800ade6:	4618      	mov	r0, r3
 800ade8:	f7f5 fa34 	bl	8000254 <strlen>
 800adec:	4603      	mov	r3, r0
 800adee:	461a      	mov	r2, r3
 800adf0:	4621      	mov	r1, r4
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f017 fd62 	bl	80228bc <memcmp>
 800adf8:	4603      	mov	r3, r0
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d101      	bne.n	800ae02 <Is_MedhaCommand_Valid+0x46>
		{
			return Traverser;
 800adfe:	7bfb      	ldrb	r3, [r7, #15]
 800ae00:	e008      	b.n	800ae14 <Is_MedhaCommand_Valid+0x58>
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 800ae02:	7bfb      	ldrb	r3, [r7, #15]
 800ae04:	3301      	adds	r3, #1
 800ae06:	73fb      	strb	r3, [r7, #15]
 800ae08:	4b05      	ldr	r3, [pc, #20]	; (800ae20 <Is_MedhaCommand_Valid+0x64>)
 800ae0a:	781b      	ldrb	r3, [r3, #0]
 800ae0c:	7bfa      	ldrb	r2, [r7, #15]
 800ae0e:	429a      	cmp	r2, r3
 800ae10:	d3dd      	bcc.n	800adce <Is_MedhaCommand_Valid+0x12>
		}
	}
	return 255;
 800ae12:	23ff      	movs	r3, #255	; 0xff
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	3714      	adds	r7, #20
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd90      	pop	{r4, r7, pc}
 800ae1c:	20002168 	.word	0x20002168
 800ae20:	20002550 	.word	0x20002550

0800ae24 <GetCRC32>:

#endif

/* __________________________________  CRC FUNCTIONS _______________________________ */
uint32_t GetCRC32(unsigned short us_Start,uint8_t *ucPtr,unsigned short us_End)
{
 800ae24:	b480      	push	{r7}
 800ae26:	b087      	sub	sp, #28
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	6039      	str	r1, [r7, #0]
 800ae2e:	80fb      	strh	r3, [r7, #6]
 800ae30:	4613      	mov	r3, r2
 800ae32:	80bb      	strh	r3, [r7, #4]
	uint32_t Crc = 0;
 800ae34:	2300      	movs	r3, #0
 800ae36:	617b      	str	r3, [r7, #20]
	uint32_t i = 0;
 800ae38:	2300      	movs	r3, #0
 800ae3a:	613b      	str	r3, [r7, #16]
	uint32_t LookUpIndex = 0;
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	60fb      	str	r3, [r7, #12]

	//	printf("\nstart cRc us_Start=%d end =%d\n",us_Start,us_End);
	for(i = us_Start ;i < us_End;i++)
 800ae40:	88fb      	ldrh	r3, [r7, #6]
 800ae42:	613b      	str	r3, [r7, #16]
 800ae44:	e015      	b.n	800ae72 <GetCRC32+0x4e>
	{
		LookUpIndex = (uint8_t)(Crc ^ ucPtr[i]);
 800ae46:	697b      	ldr	r3, [r7, #20]
 800ae48:	b2da      	uxtb	r2, r3
 800ae4a:	6839      	ldr	r1, [r7, #0]
 800ae4c:	693b      	ldr	r3, [r7, #16]
 800ae4e:	440b      	add	r3, r1
 800ae50:	781b      	ldrb	r3, [r3, #0]
 800ae52:	4053      	eors	r3, r2
 800ae54:	b2db      	uxtb	r3, r3
 800ae56:	60fb      	str	r3, [r7, #12]
		Crc = (Crc >> 8);
 800ae58:	697b      	ldr	r3, [r7, #20]
 800ae5a:	0a1b      	lsrs	r3, r3, #8
 800ae5c:	617b      	str	r3, [r7, #20]
		Crc = Crc ^ Crc32_LookUp[LookUpIndex];
 800ae5e:	4a0a      	ldr	r2, [pc, #40]	; (800ae88 <GetCRC32+0x64>)
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae66:	697a      	ldr	r2, [r7, #20]
 800ae68:	4053      	eors	r3, r2
 800ae6a:	617b      	str	r3, [r7, #20]
	for(i = us_Start ;i < us_End;i++)
 800ae6c:	693b      	ldr	r3, [r7, #16]
 800ae6e:	3301      	adds	r3, #1
 800ae70:	613b      	str	r3, [r7, #16]
 800ae72:	88bb      	ldrh	r3, [r7, #4]
 800ae74:	693a      	ldr	r2, [r7, #16]
 800ae76:	429a      	cmp	r2, r3
 800ae78:	d3e5      	bcc.n	800ae46 <GetCRC32+0x22>
	}

	return Crc;
 800ae7a:	697b      	ldr	r3, [r7, #20]
}
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	371c      	adds	r7, #28
 800ae80:	46bd      	mov	sp, r7
 800ae82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae86:	4770      	bx	lr
 800ae88:	08028d98 	.word	0x08028d98

0800ae8c <CheckCRC32>:

uint32_t CheckCRC32(uint16_t us_Start, uint8_t *ucPtr,uint16_t us_End)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b084      	sub	sp, #16
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	4603      	mov	r3, r0
 800ae94:	6039      	str	r1, [r7, #0]
 800ae96:	80fb      	strh	r3, [r7, #6]
 800ae98:	4613      	mov	r3, r2
 800ae9a:	80bb      	strh	r3, [r7, #4]
	uint32_t Pkt_Crc = 0;
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	60bb      	str	r3, [r7, #8]
	uint32_t Cal_Crc = 0;
 800aea0:	2300      	movs	r3, #0
 800aea2:	60fb      	str	r3, [r7, #12]

	Cal_Crc = GetCRC32(us_Start,ucPtr,us_End);
 800aea4:	88ba      	ldrh	r2, [r7, #4]
 800aea6:	88fb      	ldrh	r3, [r7, #6]
 800aea8:	6839      	ldr	r1, [r7, #0]
 800aeaa:	4618      	mov	r0, r3
 800aeac:	f7ff ffba 	bl	800ae24 <GetCRC32>
 800aeb0:	60f8      	str	r0, [r7, #12]
	memcpy(&Pkt_Crc,&ucPtr[us_End],4);
 800aeb2:	88bb      	ldrh	r3, [r7, #4]
 800aeb4:	683a      	ldr	r2, [r7, #0]
 800aeb6:	4413      	add	r3, r2
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	60bb      	str	r3, [r7, #8]
	}

#endif


	if(Pkt_Crc == Cal_Crc)
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	68fa      	ldr	r2, [r7, #12]
 800aec0:	429a      	cmp	r2, r3
 800aec2:	d101      	bne.n	800aec8 <CheckCRC32+0x3c>
	{
		return OK;
 800aec4:	2301      	movs	r3, #1
 800aec6:	e009      	b.n	800aedc <CheckCRC32+0x50>
	}
	else
	{
		printf("\nReceived CRC:0x%08lx\n",Pkt_Crc);
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	4619      	mov	r1, r3
 800aecc:	4805      	ldr	r0, [pc, #20]	; (800aee4 <CheckCRC32+0x58>)
 800aece:	f017 fe15 	bl	8022afc <iprintf>
		printf("Calculated CRC:0x%08lx\n",Cal_Crc);
 800aed2:	68f9      	ldr	r1, [r7, #12]
 800aed4:	4804      	ldr	r0, [pc, #16]	; (800aee8 <CheckCRC32+0x5c>)
 800aed6:	f017 fe11 	bl	8022afc <iprintf>
		return NOT_OK;
 800aeda:	2300      	movs	r3, #0
	}

}
 800aedc:	4618      	mov	r0, r3
 800aede:	3710      	adds	r7, #16
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}
 800aee4:	080260bc 	.word	0x080260bc
 800aee8:	080260d4 	.word	0x080260d4

0800aeec <CheckForRqst>:

#include "Headers.h"


unsigned char CheckForRqst(unsigned char uc_port)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b086      	sub	sp, #24
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	4603      	mov	r3, r0
 800aef4:	71fb      	strb	r3, [r7, #7]
	unsigned char buffer[10] = "\0";//index=0,data=0;
 800aef6:	2300      	movs	r3, #0
 800aef8:	60fb      	str	r3, [r7, #12]
 800aefa:	f107 0310 	add.w	r3, r7, #16
 800aefe:	2200      	movs	r2, #0
 800af00:	601a      	str	r2, [r3, #0]
 800af02:	809a      	strh	r2, [r3, #4]
	if(ReadAndFormMsg(uc_port, buffer,sizeof(buffer)) > 0)
 800af04:	79fb      	ldrb	r3, [r7, #7]
 800af06:	b29b      	uxth	r3, r3
 800af08:	f107 010c 	add.w	r1, r7, #12
 800af0c:	220a      	movs	r2, #10
 800af0e:	4618      	mov	r0, r3
 800af10:	f000 f846 	bl	800afa0 <ReadAndFormMsg>
 800af14:	4603      	mov	r3, r0
 800af16:	2b00      	cmp	r3, #0
 800af18:	dd34      	ble.n	800af84 <CheckForRqst+0x98>
	{
		if( (buffer[1] == ((DATLOADING>>8)&0XFF)) && (buffer[2] ==(DATLOADING & 0XFF)) && (buffer[3] == DATREQUEST) )
 800af1a:	7b7b      	ldrb	r3, [r7, #13]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d115      	bne.n	800af4c <CheckForRqst+0x60>
 800af20:	7bbb      	ldrb	r3, [r7, #14]
 800af22:	2b01      	cmp	r3, #1
 800af24:	d112      	bne.n	800af4c <CheckForRqst+0x60>
 800af26:	7bfb      	ldrb	r3, [r7, #15]
 800af28:	2b01      	cmp	r3, #1
 800af2a:	d10f      	bne.n	800af4c <CheckForRqst+0x60>
		{
			printf("\nUPLOADING REQUEST OK\n");
 800af2c:	4818      	ldr	r0, [pc, #96]	; (800af90 <CheckForRqst+0xa4>)
 800af2e:	f017 fe81 	bl	8022c34 <puts>
			SendAck(uc_port,DATLOADING, ACKOK);
 800af32:	79fb      	ldrb	r3, [r7, #7]
 800af34:	2202      	movs	r2, #2
 800af36:	2101      	movs	r1, #1
 800af38:	4618      	mov	r0, r3
 800af3a:	f000 f933 	bl	800b1a4 <SendAck>
			gucReqstCurTim = HAL_GetTick();
 800af3e:	f00a fdd3 	bl	8015ae8 <HAL_GetTick>
 800af42:	4603      	mov	r3, r0
 800af44:	4a13      	ldr	r2, [pc, #76]	; (800af94 <CheckForRqst+0xa8>)
 800af46:	6013      	str	r3, [r2, #0]
			return 0x01;
 800af48:	2301      	movs	r3, #1
 800af4a:	e01c      	b.n	800af86 <CheckForRqst+0x9a>
		}
		else if( (buffer[1] == ((DATSENDING>>8)&0XFF)) && (buffer[2] ==(DATSENDING & 0XFF)) && (buffer[3] == DATREQUEST) )
 800af4c:	7b7b      	ldrb	r3, [r7, #13]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d115      	bne.n	800af7e <CheckForRqst+0x92>
 800af52:	7bbb      	ldrb	r3, [r7, #14]
 800af54:	2b02      	cmp	r3, #2
 800af56:	d112      	bne.n	800af7e <CheckForRqst+0x92>
 800af58:	7bfb      	ldrb	r3, [r7, #15]
 800af5a:	2b01      	cmp	r3, #1
 800af5c:	d10f      	bne.n	800af7e <CheckForRqst+0x92>
		{
			printf("\nDOWNLOADING REQUEST OK\n");
 800af5e:	480e      	ldr	r0, [pc, #56]	; (800af98 <CheckForRqst+0xac>)
 800af60:	f017 fe68 	bl	8022c34 <puts>
			SendAck(uc_port,DATSENDING, ACKOK);
 800af64:	79fb      	ldrb	r3, [r7, #7]
 800af66:	2202      	movs	r2, #2
 800af68:	2102      	movs	r1, #2
 800af6a:	4618      	mov	r0, r3
 800af6c:	f000 f91a 	bl	800b1a4 <SendAck>
			gucReqstCurTim = HAL_GetTick();
 800af70:	f00a fdba 	bl	8015ae8 <HAL_GetTick>
 800af74:	4603      	mov	r3, r0
 800af76:	4a07      	ldr	r2, [pc, #28]	; (800af94 <CheckForRqst+0xa8>)
 800af78:	6013      	str	r3, [r2, #0]
			return 0x02;
 800af7a:	2302      	movs	r3, #2
 800af7c:	e003      	b.n	800af86 <CheckForRqst+0x9a>
		}
		else
			printf("\nREQUEST NOT OK\n");
 800af7e:	4807      	ldr	r0, [pc, #28]	; (800af9c <CheckForRqst+0xb0>)
 800af80:	f017 fe58 	bl	8022c34 <puts>
	}
	return 0x00;
 800af84:	2300      	movs	r3, #0
}
 800af86:	4618      	mov	r0, r3
 800af88:	3718      	adds	r7, #24
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}
 800af8e:	bf00      	nop
 800af90:	080260ec 	.word	0x080260ec
 800af94:	20000a4c 	.word	0x20000a4c
 800af98:	08026104 	.word	0x08026104
 800af9c:	0802611c 	.word	0x0802611c

0800afa0 <ReadAndFormMsg>:



short int ReadAndFormMsg(unsigned short int us_Port,unsigned char *puc_ReadMsg,unsigned short int us_MaxSize)
{
 800afa0:	b590      	push	{r4, r7, lr}
 800afa2:	b087      	sub	sp, #28
 800afa4:	af02      	add	r7, sp, #8
 800afa6:	4603      	mov	r3, r0
 800afa8:	6039      	str	r1, [r7, #0]
 800afaa:	80fb      	strh	r3, [r7, #6]
 800afac:	4613      	mov	r3, r2
 800afae:	80bb      	strh	r3, [r7, #4]
	static unsigned char suc_RcvStatus = ONE;
	unsigned char suc_RByte = ZERO;
 800afb0:	2300      	movs	r3, #0
 800afb2:	73fb      	strb	r3, [r7, #15]
	static unsigned short int j = ZERO;
	short int sus_CRC = ZERO;
 800afb4:	2300      	movs	r3, #0
 800afb6:	81bb      	strh	r3, [r7, #12]
	unsigned short int us_ReturnBytes = ZERO;
 800afb8:	2300      	movs	r3, #0
 800afba:	817b      	strh	r3, [r7, #10]
	/* If data available on port read and store data */
	//	if(SpoiElapsTICs(updateClk) > 5000 )
	//		*UpdateFlag = 0;


	while(Com_DataReady(us_Port))
 800afbc:	e0d4      	b.n	800b168 <ReadAndFormMsg+0x1c8>
	{
		gucUpdateFlag = 1;
 800afbe:	4b71      	ldr	r3, [pc, #452]	; (800b184 <ReadAndFormMsg+0x1e4>)
 800afc0:	2201      	movs	r2, #1
 800afc2:	701a      	strb	r2, [r3, #0]
		// updateClk = SpoiGetSysTICs();

		HAL_IWDG_Refresh(&hiwdg);
 800afc4:	4870      	ldr	r0, [pc, #448]	; (800b188 <ReadAndFormMsg+0x1e8>)
 800afc6:	f00e f8f5 	bl	80191b4 <HAL_IWDG_Refresh>
		suc_RByte = Com_Get_Byte(us_Port);
 800afca:	88fb      	ldrh	r3, [r7, #6]
 800afcc:	b2db      	uxtb	r3, r3
 800afce:	4618      	mov	r0, r3
 800afd0:	f00a fa62 	bl	8015498 <Com_Get_Byte>
 800afd4:	4603      	mov	r3, r0
 800afd6:	73fb      	strb	r3, [r7, #15]

		//Delay_SRAM(1000);

		//printf("%x|* ",suc_RByte);
		Enable_UART_Interrupts();
 800afd8:	f00a fb74 	bl	80156c4 <Enable_UART_Interrupts>
		//printf("%d:%x ",index++,suc_RByte);
		//SpoiPause(1);
		//index++	   ;
		//#endif /*PRINTF_DEBUG*/

		switch(suc_RcvStatus)
 800afdc:	4b6b      	ldr	r3, [pc, #428]	; (800b18c <ReadAndFormMsg+0x1ec>)
 800afde:	781b      	ldrb	r3, [r3, #0]
 800afe0:	2b03      	cmp	r3, #3
 800afe2:	f000 8099 	beq.w	800b118 <ReadAndFormMsg+0x178>
 800afe6:	2b03      	cmp	r3, #3
 800afe8:	f300 80b0 	bgt.w	800b14c <ReadAndFormMsg+0x1ac>
 800afec:	2b01      	cmp	r3, #1
 800afee:	d002      	beq.n	800aff6 <ReadAndFormMsg+0x56>
 800aff0:	2b02      	cmp	r3, #2
 800aff2:	d00e      	beq.n	800b012 <ReadAndFormMsg+0x72>
				}
				suc_RcvStatus = TWO;
				break;

			default:
				break;
 800aff4:	e0aa      	b.n	800b14c <ReadAndFormMsg+0x1ac>
			if(START_OF_MESSAGE == suc_RByte)
 800aff6:	7bfb      	ldrb	r3, [r7, #15]
 800aff8:	2b24      	cmp	r3, #36	; 0x24
 800affa:	f040 80a9 	bne.w	800b150 <ReadAndFormMsg+0x1b0>
				puc_ReadMsg[ZERO] = suc_RByte;
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	7bfa      	ldrb	r2, [r7, #15]
 800b002:	701a      	strb	r2, [r3, #0]
				j = ONE;
 800b004:	4b62      	ldr	r3, [pc, #392]	; (800b190 <ReadAndFormMsg+0x1f0>)
 800b006:	2201      	movs	r2, #1
 800b008:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800b00a:	4b60      	ldr	r3, [pc, #384]	; (800b18c <ReadAndFormMsg+0x1ec>)
 800b00c:	2202      	movs	r2, #2
 800b00e:	701a      	strb	r2, [r3, #0]
			break;
 800b010:	e09e      	b.n	800b150 <ReadAndFormMsg+0x1b0>
			switch(suc_RByte)
 800b012:	7bfb      	ldrb	r3, [r7, #15]
 800b014:	2b26      	cmp	r3, #38	; 0x26
 800b016:	d006      	beq.n	800b026 <ReadAndFormMsg+0x86>
 800b018:	2b26      	cmp	r3, #38	; 0x26
 800b01a:	dc6e      	bgt.n	800b0fa <ReadAndFormMsg+0x15a>
 800b01c:	2b05      	cmp	r3, #5
 800b01e:	d068      	beq.n	800b0f2 <ReadAndFormMsg+0x152>
 800b020:	2b24      	cmp	r3, #36	; 0x24
 800b022:	d05c      	beq.n	800b0de <ReadAndFormMsg+0x13e>
 800b024:	e069      	b.n	800b0fa <ReadAndFormMsg+0x15a>
				sus_CRC = j-2;
 800b026:	4b5a      	ldr	r3, [pc, #360]	; (800b190 <ReadAndFormMsg+0x1f0>)
 800b028:	881b      	ldrh	r3, [r3, #0]
 800b02a:	3b02      	subs	r3, #2
 800b02c:	b29b      	uxth	r3, r3
 800b02e:	81bb      	strh	r3, [r7, #12]
				us_ReturnBytes = j;
 800b030:	4b57      	ldr	r3, [pc, #348]	; (800b190 <ReadAndFormMsg+0x1f0>)
 800b032:	881b      	ldrh	r3, [r3, #0]
 800b034:	817b      	strh	r3, [r7, #10]
				j = ZERO;
 800b036:	4b56      	ldr	r3, [pc, #344]	; (800b190 <ReadAndFormMsg+0x1f0>)
 800b038:	2200      	movs	r2, #0
 800b03a:	801a      	strh	r2, [r3, #0]
				if (sus_CRC < 0)
 800b03c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b040:	2b00      	cmp	r3, #0
 800b042:	da01      	bge.n	800b048 <ReadAndFormMsg+0xa8>
					return 0;
 800b044:	2300      	movs	r3, #0
 800b046:	e099      	b.n	800b17c <ReadAndFormMsg+0x1dc>
				suc_RcvStatus = ONE;
 800b048:	4b50      	ldr	r3, [pc, #320]	; (800b18c <ReadAndFormMsg+0x1ec>)
 800b04a:	2201      	movs	r2, #1
 800b04c:	701a      	strb	r2, [r3, #0]
				printf("\n SDM Check sum IRDMI: [%d]%x [%d]%x",sus_CRC,
 800b04e:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
						puc_ReadMsg[sus_CRC],
 800b052:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b056:	683a      	ldr	r2, [r7, #0]
 800b058:	4413      	add	r3, r2
 800b05a:	781b      	ldrb	r3, [r3, #0]
				printf("\n SDM Check sum IRDMI: [%d]%x [%d]%x",sus_CRC,
 800b05c:	461c      	mov	r4, r3
 800b05e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b062:	1c58      	adds	r0, r3, #1
						puc_ReadMsg[sus_CRC+1]);
 800b064:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b068:	3301      	adds	r3, #1
 800b06a:	683a      	ldr	r2, [r7, #0]
 800b06c:	4413      	add	r3, r2
 800b06e:	781b      	ldrb	r3, [r3, #0]
				printf("\n SDM Check sum IRDMI: [%d]%x [%d]%x",sus_CRC,
 800b070:	9300      	str	r3, [sp, #0]
 800b072:	4603      	mov	r3, r0
 800b074:	4622      	mov	r2, r4
 800b076:	4847      	ldr	r0, [pc, #284]	; (800b194 <ReadAndFormMsg+0x1f4>)
 800b078:	f017 fd40 	bl	8022afc <iprintf>
				if(CheckCRC(puc_ReadMsg, sus_CRC))
 800b07c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b080:	4619      	mov	r1, r3
 800b082:	6838      	ldr	r0, [r7, #0]
 800b084:	f008 f84a 	bl	801311c <CheckCRC>
 800b088:	4603      	mov	r3, r0
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d012      	beq.n	800b0b4 <ReadAndFormMsg+0x114>
					printf("CRC OK [%x] [%x]\n",puc_ReadMsg[sus_CRC], puc_ReadMsg[sus_CRC+1]);
 800b08e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b092:	683a      	ldr	r2, [r7, #0]
 800b094:	4413      	add	r3, r2
 800b096:	781b      	ldrb	r3, [r3, #0]
 800b098:	4619      	mov	r1, r3
 800b09a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b09e:	3301      	adds	r3, #1
 800b0a0:	683a      	ldr	r2, [r7, #0]
 800b0a2:	4413      	add	r3, r2
 800b0a4:	781b      	ldrb	r3, [r3, #0]
 800b0a6:	461a      	mov	r2, r3
 800b0a8:	483b      	ldr	r0, [pc, #236]	; (800b198 <ReadAndFormMsg+0x1f8>)
 800b0aa:	f017 fd27 	bl	8022afc <iprintf>
					return us_ReturnBytes;
 800b0ae:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b0b2:	e063      	b.n	800b17c <ReadAndFormMsg+0x1dc>
					printf("\nCRC NOK ");
 800b0b4:	4839      	ldr	r0, [pc, #228]	; (800b19c <ReadAndFormMsg+0x1fc>)
 800b0b6:	f017 fd21 	bl	8022afc <iprintf>
					printf("[%x] [%x]\n",puc_ReadMsg[sus_CRC], puc_ReadMsg[sus_CRC+1]);
 800b0ba:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b0be:	683a      	ldr	r2, [r7, #0]
 800b0c0:	4413      	add	r3, r2
 800b0c2:	781b      	ldrb	r3, [r3, #0]
 800b0c4:	4619      	mov	r1, r3
 800b0c6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b0ca:	3301      	adds	r3, #1
 800b0cc:	683a      	ldr	r2, [r7, #0]
 800b0ce:	4413      	add	r3, r2
 800b0d0:	781b      	ldrb	r3, [r3, #0]
 800b0d2:	461a      	mov	r2, r3
 800b0d4:	4832      	ldr	r0, [pc, #200]	; (800b1a0 <ReadAndFormMsg+0x200>)
 800b0d6:	f017 fd11 	bl	8022afc <iprintf>
					return 0;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	e04e      	b.n	800b17c <ReadAndFormMsg+0x1dc>
				puc_ReadMsg[ZERO] = suc_RByte;
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	7bfa      	ldrb	r2, [r7, #15]
 800b0e2:	701a      	strb	r2, [r3, #0]
				j = ONE;
 800b0e4:	4b2a      	ldr	r3, [pc, #168]	; (800b190 <ReadAndFormMsg+0x1f0>)
 800b0e6:	2201      	movs	r2, #1
 800b0e8:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800b0ea:	4b28      	ldr	r3, [pc, #160]	; (800b18c <ReadAndFormMsg+0x1ec>)
 800b0ec:	2202      	movs	r2, #2
 800b0ee:	701a      	strb	r2, [r3, #0]
				break;
 800b0f0:	e011      	b.n	800b116 <ReadAndFormMsg+0x176>
				suc_RcvStatus = THREE;
 800b0f2:	4b26      	ldr	r3, [pc, #152]	; (800b18c <ReadAndFormMsg+0x1ec>)
 800b0f4:	2203      	movs	r2, #3
 800b0f6:	701a      	strb	r2, [r3, #0]
				break;
 800b0f8:	e00d      	b.n	800b116 <ReadAndFormMsg+0x176>
				puc_ReadMsg[j] = suc_RByte;
 800b0fa:	4b25      	ldr	r3, [pc, #148]	; (800b190 <ReadAndFormMsg+0x1f0>)
 800b0fc:	881b      	ldrh	r3, [r3, #0]
 800b0fe:	461a      	mov	r2, r3
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	4413      	add	r3, r2
 800b104:	7bfa      	ldrb	r2, [r7, #15]
 800b106:	701a      	strb	r2, [r3, #0]
				j++;
 800b108:	4b21      	ldr	r3, [pc, #132]	; (800b190 <ReadAndFormMsg+0x1f0>)
 800b10a:	881b      	ldrh	r3, [r3, #0]
 800b10c:	3301      	adds	r3, #1
 800b10e:	b29a      	uxth	r2, r3
 800b110:	4b1f      	ldr	r3, [pc, #124]	; (800b190 <ReadAndFormMsg+0x1f0>)
 800b112:	801a      	strh	r2, [r3, #0]
				break;
 800b114:	bf00      	nop
			break;
 800b116:	e01c      	b.n	800b152 <ReadAndFormMsg+0x1b2>
				if((START_OF_MESSAGE == suc_RByte)
 800b118:	7bfb      	ldrb	r3, [r7, #15]
 800b11a:	2b24      	cmp	r3, #36	; 0x24
 800b11c:	d005      	beq.n	800b12a <ReadAndFormMsg+0x18a>
						|| (END_OF_MESSAGE == suc_RByte)
 800b11e:	7bfb      	ldrb	r3, [r7, #15]
 800b120:	2b26      	cmp	r3, #38	; 0x26
 800b122:	d002      	beq.n	800b12a <ReadAndFormMsg+0x18a>
						|| (DLE == suc_RByte))
 800b124:	7bfb      	ldrb	r3, [r7, #15]
 800b126:	2b05      	cmp	r3, #5
 800b128:	d10c      	bne.n	800b144 <ReadAndFormMsg+0x1a4>
					puc_ReadMsg[j] = suc_RByte;
 800b12a:	4b19      	ldr	r3, [pc, #100]	; (800b190 <ReadAndFormMsg+0x1f0>)
 800b12c:	881b      	ldrh	r3, [r3, #0]
 800b12e:	461a      	mov	r2, r3
 800b130:	683b      	ldr	r3, [r7, #0]
 800b132:	4413      	add	r3, r2
 800b134:	7bfa      	ldrb	r2, [r7, #15]
 800b136:	701a      	strb	r2, [r3, #0]
					j++;
 800b138:	4b15      	ldr	r3, [pc, #84]	; (800b190 <ReadAndFormMsg+0x1f0>)
 800b13a:	881b      	ldrh	r3, [r3, #0]
 800b13c:	3301      	adds	r3, #1
 800b13e:	b29a      	uxth	r2, r3
 800b140:	4b13      	ldr	r3, [pc, #76]	; (800b190 <ReadAndFormMsg+0x1f0>)
 800b142:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800b144:	4b11      	ldr	r3, [pc, #68]	; (800b18c <ReadAndFormMsg+0x1ec>)
 800b146:	2202      	movs	r2, #2
 800b148:	701a      	strb	r2, [r3, #0]
				break;
 800b14a:	e002      	b.n	800b152 <ReadAndFormMsg+0x1b2>
				break;
 800b14c:	bf00      	nop
 800b14e:	e000      	b.n	800b152 <ReadAndFormMsg+0x1b2>
			break;
 800b150:	bf00      	nop
		}    /* End of switch*/

		/* If receiving invalid message, ZERO message buffer */

		if( j >= us_MaxSize)
 800b152:	4b0f      	ldr	r3, [pc, #60]	; (800b190 <ReadAndFormMsg+0x1f0>)
 800b154:	881b      	ldrh	r3, [r3, #0]
 800b156:	88ba      	ldrh	r2, [r7, #4]
 800b158:	429a      	cmp	r2, r3
 800b15a:	d805      	bhi.n	800b168 <ReadAndFormMsg+0x1c8>
		{
			suc_RcvStatus = ONE;
 800b15c:	4b0b      	ldr	r3, [pc, #44]	; (800b18c <ReadAndFormMsg+0x1ec>)
 800b15e:	2201      	movs	r2, #1
 800b160:	701a      	strb	r2, [r3, #0]
			j = ZERO;
 800b162:	4b0b      	ldr	r3, [pc, #44]	; (800b190 <ReadAndFormMsg+0x1f0>)
 800b164:	2200      	movs	r2, #0
 800b166:	801a      	strh	r2, [r3, #0]
	while(Com_DataReady(us_Port))
 800b168:	88fb      	ldrh	r3, [r7, #6]
 800b16a:	b2db      	uxtb	r3, r3
 800b16c:	4618      	mov	r0, r3
 800b16e:	f00a f953 	bl	8015418 <Com_DataReady>
 800b172:	4603      	mov	r3, r0
 800b174:	2b00      	cmp	r3, #0
 800b176:	f47f af22 	bne.w	800afbe <ReadAndFormMsg+0x1e>
		}
	}	    /* End of While data ready */

	return ZERO;
 800b17a:	2300      	movs	r3, #0
}
 800b17c:	4618      	mov	r0, r3
 800b17e:	3714      	adds	r7, #20
 800b180:	46bd      	mov	sp, r7
 800b182:	bd90      	pop	{r4, r7, pc}
 800b184:	20000a4a 	.word	0x20000a4a
 800b188:	20009d1c 	.word	0x20009d1c
 800b18c:	20000117 	.word	0x20000117
 800b190:	20002880 	.word	0x20002880
 800b194:	0802612c 	.word	0x0802612c
 800b198:	08026154 	.word	0x08026154
 800b19c:	08026168 	.word	0x08026168
 800b1a0:	08026174 	.word	0x08026174

0800b1a4 <SendAck>:


void SendAck(unsigned char uc_port, unsigned char Opcode, unsigned char ACK)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b086      	sub	sp, #24
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	71fb      	strb	r3, [r7, #7]
 800b1ae:	460b      	mov	r3, r1
 800b1b0:	71bb      	strb	r3, [r7, #6]
 800b1b2:	4613      	mov	r3, r2
 800b1b4:	717b      	strb	r3, [r7, #5]
	uint32_t AckTim=0;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	617b      	str	r3, [r7, #20]
	unsigned char puc_Message[10] = {0,};
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	60bb      	str	r3, [r7, #8]
 800b1be:	f107 030c 	add.w	r3, r7, #12
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	601a      	str	r2, [r3, #0]
 800b1c6:	809a      	strh	r2, [r3, #4]

	puc_Message[0]= '$';
 800b1c8:	2324      	movs	r3, #36	; 0x24
 800b1ca:	723b      	strb	r3, [r7, #8]
	puc_Message[1]=((unsigned char ) (Opcode >> 8) & 0xff);
 800b1cc:	79bb      	ldrb	r3, [r7, #6]
 800b1ce:	121b      	asrs	r3, r3, #8
 800b1d0:	b2db      	uxtb	r3, r3
 800b1d2:	727b      	strb	r3, [r7, #9]
	puc_Message[2]= (unsigned char ) (Opcode & 0xff);
 800b1d4:	79bb      	ldrb	r3, [r7, #6]
 800b1d6:	72bb      	strb	r3, [r7, #10]
	puc_Message[3]= ACK;
 800b1d8:	797b      	ldrb	r3, [r7, #5]
 800b1da:	72fb      	strb	r3, [r7, #11]

	ComputeCRC(puc_Message, 4);
 800b1dc:	f107 0308 	add.w	r3, r7, #8
 800b1e0:	2104      	movs	r1, #4
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	f008 f844 	bl	8013270 <ComputeCRC>
	puc_Message[6]= '&';
 800b1e8:	2326      	movs	r3, #38	; 0x26
 800b1ea:	73bb      	strb	r3, [r7, #14]
	printf("\nSending Ack CRC [%x][%x]\n",puc_Message[4],puc_Message[5]);
 800b1ec:	7b3b      	ldrb	r3, [r7, #12]
 800b1ee:	4619      	mov	r1, r3
 800b1f0:	7b7b      	ldrb	r3, [r7, #13]
 800b1f2:	461a      	mov	r2, r3
 800b1f4:	480f      	ldr	r0, [pc, #60]	; (800b234 <SendAck+0x90>)
 800b1f6:	f017 fc81 	bl	8022afc <iprintf>

	AckTim=HAL_GetTick();
 800b1fa:	f00a fc75 	bl	8015ae8 <HAL_GetTick>
 800b1fe:	6178      	str	r0, [r7, #20]

	while( HAL_Elaps_Ticks(AckTim) < 1500)
 800b200:	e002      	b.n	800b208 <SendAck+0x64>
	{
		HAL_IWDG_Refresh(&hiwdg);
 800b202:	480d      	ldr	r0, [pc, #52]	; (800b238 <SendAck+0x94>)
 800b204:	f00d ffd6 	bl	80191b4 <HAL_IWDG_Refresh>
	while( HAL_Elaps_Ticks(AckTim) < 1500)
 800b208:	6978      	ldr	r0, [r7, #20]
 800b20a:	f003 fe83 	bl	800ef14 <HAL_Elaps_Ticks>
 800b20e:	4603      	mov	r3, r0
 800b210:	f240 52db 	movw	r2, #1499	; 0x5db
 800b214:	4293      	cmp	r3, r2
 800b216:	d9f4      	bls.n	800b202 <SendAck+0x5e>
	}

	CommTransmitMessage(uc_port,puc_Message, 6);
 800b218:	f107 0108 	add.w	r1, r7, #8
 800b21c:	79fb      	ldrb	r3, [r7, #7]
 800b21e:	2206      	movs	r2, #6
 800b220:	4618      	mov	r0, r3
 800b222:	f00a f9b9 	bl	8015598 <CommTransmitMessage>

	AckTim = 0;
 800b226:	2300      	movs	r3, #0
 800b228:	617b      	str	r3, [r7, #20]
}
 800b22a:	bf00      	nop
 800b22c:	3718      	adds	r7, #24
 800b22e:	46bd      	mov	sp, r7
 800b230:	bd80      	pop	{r7, pc}
 800b232:	bf00      	nop
 800b234:	08026180 	.word	0x08026180
 800b238:	20009d1c 	.word	0x20009d1c

0800b23c <ReadAndFormConfig>:

short int ReadAndFormConfig(unsigned short int us_Port,
		unsigned char*puc_ReadMsg,unsigned short int us_MaxSize)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b084      	sub	sp, #16
 800b240:	af00      	add	r7, sp, #0
 800b242:	4603      	mov	r3, r0
 800b244:	6039      	str	r1, [r7, #0]
 800b246:	80fb      	strh	r3, [r7, #6]
 800b248:	4613      	mov	r3, r2
 800b24a:	80bb      	strh	r3, [r7, #4]
	static unsigned char suc_RcvStatus = ONE;
	unsigned char suc_RByte = ZERO;
 800b24c:	2300      	movs	r3, #0
 800b24e:	73fb      	strb	r3, [r7, #15]
	static unsigned short int i = ZERO;
	short int sus_CRC = ZERO;
 800b250:	2300      	movs	r3, #0
 800b252:	81bb      	strh	r3, [r7, #12]
	unsigned short int us_ReturnBytes = ZERO;
 800b254:	2300      	movs	r3, #0
 800b256:	817b      	strh	r3, [r7, #10]
	/* If data available on port read and store data */
	//	if(SpoiElapsTICs(updateClk) > 5000 )
	//		*UpdateFlag = 0;


	while(Com_DataReady(us_Port))
 800b258:	e0ba      	b.n	800b3d0 <ReadAndFormConfig+0x194>
	{
		// *UpdateFlag = 1;
		// updateClk = SpoiGetSysTICs();


		suc_RByte = Com_Get_Byte(us_Port);
 800b25a:	88fb      	ldrh	r3, [r7, #6]
 800b25c:	b2db      	uxtb	r3, r3
 800b25e:	4618      	mov	r0, r3
 800b260:	f00a f91a 	bl	8015498 <Com_Get_Byte>
 800b264:	4603      	mov	r3, r0
 800b266:	73fb      	strb	r3, [r7, #15]
		Enable_UART_Interrupts();
 800b268:	f00a fa2c 	bl	80156c4 <Enable_UART_Interrupts>

		HAL_IWDG_Refresh(&hiwdg);
 800b26c:	485f      	ldr	r0, [pc, #380]	; (800b3ec <ReadAndFormConfig+0x1b0>)
 800b26e:	f00d ffa1 	bl	80191b4 <HAL_IWDG_Refresh>
		//	Delay_SRAM(1000);
		//printf("DaTA\n");
		//printf("%x ",suc_RByte);
		switch(suc_RcvStatus)
 800b272:	4b5f      	ldr	r3, [pc, #380]	; (800b3f0 <ReadAndFormConfig+0x1b4>)
 800b274:	781b      	ldrb	r3, [r3, #0]
 800b276:	2b03      	cmp	r3, #3
 800b278:	f000 8082 	beq.w	800b380 <ReadAndFormConfig+0x144>
 800b27c:	2b03      	cmp	r3, #3
 800b27e:	f300 8099 	bgt.w	800b3b4 <ReadAndFormConfig+0x178>
 800b282:	2b01      	cmp	r3, #1
 800b284:	d002      	beq.n	800b28c <ReadAndFormConfig+0x50>
 800b286:	2b02      	cmp	r3, #2
 800b288:	d00e      	beq.n	800b2a8 <ReadAndFormConfig+0x6c>
				}
				suc_RcvStatus = TWO;
				break;

			default:
				break;
 800b28a:	e093      	b.n	800b3b4 <ReadAndFormConfig+0x178>
			if(START_OF_MESSAGE == suc_RByte)
 800b28c:	7bfb      	ldrb	r3, [r7, #15]
 800b28e:	2b24      	cmp	r3, #36	; 0x24
 800b290:	f040 8092 	bne.w	800b3b8 <ReadAndFormConfig+0x17c>
				puc_ReadMsg[ZERO] = suc_RByte;
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	7bfa      	ldrb	r2, [r7, #15]
 800b298:	701a      	strb	r2, [r3, #0]
				i = ONE;
 800b29a:	4b56      	ldr	r3, [pc, #344]	; (800b3f4 <ReadAndFormConfig+0x1b8>)
 800b29c:	2201      	movs	r2, #1
 800b29e:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800b2a0:	4b53      	ldr	r3, [pc, #332]	; (800b3f0 <ReadAndFormConfig+0x1b4>)
 800b2a2:	2202      	movs	r2, #2
 800b2a4:	701a      	strb	r2, [r3, #0]
			break;
 800b2a6:	e087      	b.n	800b3b8 <ReadAndFormConfig+0x17c>
			switch(suc_RByte)
 800b2a8:	7bfb      	ldrb	r3, [r7, #15]
 800b2aa:	2b26      	cmp	r3, #38	; 0x26
 800b2ac:	d006      	beq.n	800b2bc <ReadAndFormConfig+0x80>
 800b2ae:	2b26      	cmp	r3, #38	; 0x26
 800b2b0:	dc57      	bgt.n	800b362 <ReadAndFormConfig+0x126>
 800b2b2:	2b05      	cmp	r3, #5
 800b2b4:	d051      	beq.n	800b35a <ReadAndFormConfig+0x11e>
 800b2b6:	2b24      	cmp	r3, #36	; 0x24
 800b2b8:	d045      	beq.n	800b346 <ReadAndFormConfig+0x10a>
 800b2ba:	e052      	b.n	800b362 <ReadAndFormConfig+0x126>
				sus_CRC = i-2;
 800b2bc:	4b4d      	ldr	r3, [pc, #308]	; (800b3f4 <ReadAndFormConfig+0x1b8>)
 800b2be:	881b      	ldrh	r3, [r3, #0]
 800b2c0:	3b02      	subs	r3, #2
 800b2c2:	b29b      	uxth	r3, r3
 800b2c4:	81bb      	strh	r3, [r7, #12]
				us_ReturnBytes = i;
 800b2c6:	4b4b      	ldr	r3, [pc, #300]	; (800b3f4 <ReadAndFormConfig+0x1b8>)
 800b2c8:	881b      	ldrh	r3, [r3, #0]
 800b2ca:	817b      	strh	r3, [r7, #10]
				i = ZERO;
 800b2cc:	4b49      	ldr	r3, [pc, #292]	; (800b3f4 <ReadAndFormConfig+0x1b8>)
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	801a      	strh	r2, [r3, #0]
				if (sus_CRC < 0)
 800b2d2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	da01      	bge.n	800b2de <ReadAndFormConfig+0xa2>
					return 0;
 800b2da:	2300      	movs	r3, #0
 800b2dc:	e082      	b.n	800b3e4 <ReadAndFormConfig+0x1a8>
				suc_RcvStatus = ONE;
 800b2de:	4b44      	ldr	r3, [pc, #272]	; (800b3f0 <ReadAndFormConfig+0x1b4>)
 800b2e0:	2201      	movs	r2, #1
 800b2e2:	701a      	strb	r2, [r3, #0]
				if(CheckCRC(puc_ReadMsg, sus_CRC))
 800b2e4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b2e8:	4619      	mov	r1, r3
 800b2ea:	6838      	ldr	r0, [r7, #0]
 800b2ec:	f007 ff16 	bl	801311c <CheckCRC>
 800b2f0:	4603      	mov	r3, r0
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d012      	beq.n	800b31c <ReadAndFormConfig+0xe0>
					printf("CRC OK [%x][%x]\n",puc_ReadMsg[sus_CRC], puc_ReadMsg[sus_CRC+1]);
 800b2f6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b2fa:	683a      	ldr	r2, [r7, #0]
 800b2fc:	4413      	add	r3, r2
 800b2fe:	781b      	ldrb	r3, [r3, #0]
 800b300:	4619      	mov	r1, r3
 800b302:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b306:	3301      	adds	r3, #1
 800b308:	683a      	ldr	r2, [r7, #0]
 800b30a:	4413      	add	r3, r2
 800b30c:	781b      	ldrb	r3, [r3, #0]
 800b30e:	461a      	mov	r2, r3
 800b310:	4839      	ldr	r0, [pc, #228]	; (800b3f8 <ReadAndFormConfig+0x1bc>)
 800b312:	f017 fbf3 	bl	8022afc <iprintf>
					return us_ReturnBytes;
 800b316:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b31a:	e063      	b.n	800b3e4 <ReadAndFormConfig+0x1a8>
					printf("\nCRC NOK ");
 800b31c:	4837      	ldr	r0, [pc, #220]	; (800b3fc <ReadAndFormConfig+0x1c0>)
 800b31e:	f017 fbed 	bl	8022afc <iprintf>
					printf("[%x][%x]\n",puc_ReadMsg[sus_CRC], puc_ReadMsg[sus_CRC+1]);
 800b322:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b326:	683a      	ldr	r2, [r7, #0]
 800b328:	4413      	add	r3, r2
 800b32a:	781b      	ldrb	r3, [r3, #0]
 800b32c:	4619      	mov	r1, r3
 800b32e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b332:	3301      	adds	r3, #1
 800b334:	683a      	ldr	r2, [r7, #0]
 800b336:	4413      	add	r3, r2
 800b338:	781b      	ldrb	r3, [r3, #0]
 800b33a:	461a      	mov	r2, r3
 800b33c:	4830      	ldr	r0, [pc, #192]	; (800b400 <ReadAndFormConfig+0x1c4>)
 800b33e:	f017 fbdd 	bl	8022afc <iprintf>
					return 0;
 800b342:	2300      	movs	r3, #0
 800b344:	e04e      	b.n	800b3e4 <ReadAndFormConfig+0x1a8>
				puc_ReadMsg[ZERO] = suc_RByte;
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	7bfa      	ldrb	r2, [r7, #15]
 800b34a:	701a      	strb	r2, [r3, #0]
				i = ONE;
 800b34c:	4b29      	ldr	r3, [pc, #164]	; (800b3f4 <ReadAndFormConfig+0x1b8>)
 800b34e:	2201      	movs	r2, #1
 800b350:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800b352:	4b27      	ldr	r3, [pc, #156]	; (800b3f0 <ReadAndFormConfig+0x1b4>)
 800b354:	2202      	movs	r2, #2
 800b356:	701a      	strb	r2, [r3, #0]
				break;
 800b358:	e011      	b.n	800b37e <ReadAndFormConfig+0x142>
				suc_RcvStatus = THREE;
 800b35a:	4b25      	ldr	r3, [pc, #148]	; (800b3f0 <ReadAndFormConfig+0x1b4>)
 800b35c:	2203      	movs	r2, #3
 800b35e:	701a      	strb	r2, [r3, #0]
				break;
 800b360:	e00d      	b.n	800b37e <ReadAndFormConfig+0x142>
				puc_ReadMsg[i] = suc_RByte;
 800b362:	4b24      	ldr	r3, [pc, #144]	; (800b3f4 <ReadAndFormConfig+0x1b8>)
 800b364:	881b      	ldrh	r3, [r3, #0]
 800b366:	461a      	mov	r2, r3
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	4413      	add	r3, r2
 800b36c:	7bfa      	ldrb	r2, [r7, #15]
 800b36e:	701a      	strb	r2, [r3, #0]
				i++;
 800b370:	4b20      	ldr	r3, [pc, #128]	; (800b3f4 <ReadAndFormConfig+0x1b8>)
 800b372:	881b      	ldrh	r3, [r3, #0]
 800b374:	3301      	adds	r3, #1
 800b376:	b29a      	uxth	r2, r3
 800b378:	4b1e      	ldr	r3, [pc, #120]	; (800b3f4 <ReadAndFormConfig+0x1b8>)
 800b37a:	801a      	strh	r2, [r3, #0]
				break;
 800b37c:	bf00      	nop
			break;
 800b37e:	e01c      	b.n	800b3ba <ReadAndFormConfig+0x17e>
				if((START_OF_MESSAGE == suc_RByte)
 800b380:	7bfb      	ldrb	r3, [r7, #15]
 800b382:	2b24      	cmp	r3, #36	; 0x24
 800b384:	d005      	beq.n	800b392 <ReadAndFormConfig+0x156>
						|| (END_OF_MESSAGE == suc_RByte)
 800b386:	7bfb      	ldrb	r3, [r7, #15]
 800b388:	2b26      	cmp	r3, #38	; 0x26
 800b38a:	d002      	beq.n	800b392 <ReadAndFormConfig+0x156>
						|| (DLE == suc_RByte))
 800b38c:	7bfb      	ldrb	r3, [r7, #15]
 800b38e:	2b05      	cmp	r3, #5
 800b390:	d10c      	bne.n	800b3ac <ReadAndFormConfig+0x170>
					puc_ReadMsg[i] = suc_RByte;
 800b392:	4b18      	ldr	r3, [pc, #96]	; (800b3f4 <ReadAndFormConfig+0x1b8>)
 800b394:	881b      	ldrh	r3, [r3, #0]
 800b396:	461a      	mov	r2, r3
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	4413      	add	r3, r2
 800b39c:	7bfa      	ldrb	r2, [r7, #15]
 800b39e:	701a      	strb	r2, [r3, #0]
					i++;
 800b3a0:	4b14      	ldr	r3, [pc, #80]	; (800b3f4 <ReadAndFormConfig+0x1b8>)
 800b3a2:	881b      	ldrh	r3, [r3, #0]
 800b3a4:	3301      	adds	r3, #1
 800b3a6:	b29a      	uxth	r2, r3
 800b3a8:	4b12      	ldr	r3, [pc, #72]	; (800b3f4 <ReadAndFormConfig+0x1b8>)
 800b3aa:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800b3ac:	4b10      	ldr	r3, [pc, #64]	; (800b3f0 <ReadAndFormConfig+0x1b4>)
 800b3ae:	2202      	movs	r2, #2
 800b3b0:	701a      	strb	r2, [r3, #0]
				break;
 800b3b2:	e002      	b.n	800b3ba <ReadAndFormConfig+0x17e>
				break;
 800b3b4:	bf00      	nop
 800b3b6:	e000      	b.n	800b3ba <ReadAndFormConfig+0x17e>
			break;
 800b3b8:	bf00      	nop
		}    /* End of switch*/

		/* If receiving invalid message, ZERO message buffer */

		if( i >= us_MaxSize)
 800b3ba:	4b0e      	ldr	r3, [pc, #56]	; (800b3f4 <ReadAndFormConfig+0x1b8>)
 800b3bc:	881b      	ldrh	r3, [r3, #0]
 800b3be:	88ba      	ldrh	r2, [r7, #4]
 800b3c0:	429a      	cmp	r2, r3
 800b3c2:	d805      	bhi.n	800b3d0 <ReadAndFormConfig+0x194>
		{
			suc_RcvStatus = ONE;
 800b3c4:	4b0a      	ldr	r3, [pc, #40]	; (800b3f0 <ReadAndFormConfig+0x1b4>)
 800b3c6:	2201      	movs	r2, #1
 800b3c8:	701a      	strb	r2, [r3, #0]
			i = ZERO;
 800b3ca:	4b0a      	ldr	r3, [pc, #40]	; (800b3f4 <ReadAndFormConfig+0x1b8>)
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	801a      	strh	r2, [r3, #0]
	while(Com_DataReady(us_Port))
 800b3d0:	88fb      	ldrh	r3, [r7, #6]
 800b3d2:	b2db      	uxtb	r3, r3
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	f00a f81f 	bl	8015418 <Com_DataReady>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	f47f af3c 	bne.w	800b25a <ReadAndFormConfig+0x1e>
		}
	}	    /* End of While data ready */

	return ZERO;
 800b3e2:	2300      	movs	r3, #0
}
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	3710      	adds	r7, #16
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bd80      	pop	{r7, pc}
 800b3ec:	20009d1c 	.word	0x20009d1c
 800b3f0:	20000118 	.word	0x20000118
 800b3f4:	20002882 	.word	0x20002882
 800b3f8:	0802619c 	.word	0x0802619c
 800b3fc:	08026168 	.word	0x08026168
 800b400:	080261b0 	.word	0x080261b0

0800b404 <bcdToDec>:
#define RTC_I2C_ADDR 			0xD0 //0x68<<1
#define TEMPERATURE_I2C_ADDR 	0x90 //0x48<<1


uint8_t bcdToDec(const uint8_t Kuc_bcd)
{
 800b404:	b480      	push	{r7}
 800b406:	b083      	sub	sp, #12
 800b408:	af00      	add	r7, sp, #0
 800b40a:	4603      	mov	r3, r0
 800b40c:	71fb      	strb	r3, [r7, #7]
	return (((Kuc_bcd/16)*10) + (Kuc_bcd%16));
 800b40e:	79fb      	ldrb	r3, [r7, #7]
 800b410:	091b      	lsrs	r3, r3, #4
 800b412:	b2db      	uxtb	r3, r3
 800b414:	461a      	mov	r2, r3
 800b416:	0092      	lsls	r2, r2, #2
 800b418:	4413      	add	r3, r2
 800b41a:	005b      	lsls	r3, r3, #1
 800b41c:	b2da      	uxtb	r2, r3
 800b41e:	79fb      	ldrb	r3, [r7, #7]
 800b420:	f003 030f 	and.w	r3, r3, #15
 800b424:	b2db      	uxtb	r3, r3
 800b426:	4413      	add	r3, r2
 800b428:	b2db      	uxtb	r3, r3
}
 800b42a:	4618      	mov	r0, r3
 800b42c:	370c      	adds	r7, #12
 800b42e:	46bd      	mov	sp, r7
 800b430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b434:	4770      	bx	lr
	...

0800b438 <Dec_to_BCD>:

uint8_t Dec_to_BCD(uint8_t c)
{
 800b438:	b480      	push	{r7}
 800b43a:	b083      	sub	sp, #12
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	4603      	mov	r3, r0
 800b440:	71fb      	strb	r3, [r7, #7]
	c=((c/10)*16)+(c%10);
 800b442:	79fb      	ldrb	r3, [r7, #7]
 800b444:	4a0d      	ldr	r2, [pc, #52]	; (800b47c <Dec_to_BCD+0x44>)
 800b446:	fba2 2303 	umull	r2, r3, r2, r3
 800b44a:	08db      	lsrs	r3, r3, #3
 800b44c:	b2db      	uxtb	r3, r3
 800b44e:	011b      	lsls	r3, r3, #4
 800b450:	b2d8      	uxtb	r0, r3
 800b452:	79fa      	ldrb	r2, [r7, #7]
 800b454:	4b09      	ldr	r3, [pc, #36]	; (800b47c <Dec_to_BCD+0x44>)
 800b456:	fba3 1302 	umull	r1, r3, r3, r2
 800b45a:	08d9      	lsrs	r1, r3, #3
 800b45c:	460b      	mov	r3, r1
 800b45e:	009b      	lsls	r3, r3, #2
 800b460:	440b      	add	r3, r1
 800b462:	005b      	lsls	r3, r3, #1
 800b464:	1ad3      	subs	r3, r2, r3
 800b466:	b2db      	uxtb	r3, r3
 800b468:	4403      	add	r3, r0
 800b46a:	71fb      	strb	r3, [r7, #7]
	return c;
 800b46c:	79fb      	ldrb	r3, [r7, #7]
}
 800b46e:	4618      	mov	r0, r3
 800b470:	370c      	adds	r7, #12
 800b472:	46bd      	mov	sp, r7
 800b474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b478:	4770      	bx	lr
 800b47a:	bf00      	nop
 800b47c:	cccccccd 	.word	0xcccccccd

0800b480 <Is_GPS_Valid>:

uint8_t Is_GPS_Valid(void)
{
 800b480:	b480      	push	{r7}
 800b482:	af00      	add	r7, sp, #0
	//printf("\n%u:%u:%u|%u/%u/%u\n",Gps_date_time_st.ucHour,Gps_date_time_st.ucMin,Gps_date_time_st.ucSec,Gps_date_time_st.ucDate,Gps_date_time_st.ucMonth,Gps_date_time_st.ucYear);

	if(Gps_date_time_st.Year < 10)
 800b484:	4b0b      	ldr	r3, [pc, #44]	; (800b4b4 <Is_GPS_Valid+0x34>)
 800b486:	795b      	ldrb	r3, [r3, #5]
 800b488:	2b09      	cmp	r3, #9
 800b48a:	d801      	bhi.n	800b490 <Is_GPS_Valid+0x10>
	{
		return 0;
 800b48c:	2300      	movs	r3, #0
 800b48e:	e00c      	b.n	800b4aa <Is_GPS_Valid+0x2a>
	}
	if(Gps_date_time_st.Mont == 0 )
 800b490:	4b08      	ldr	r3, [pc, #32]	; (800b4b4 <Is_GPS_Valid+0x34>)
 800b492:	791b      	ldrb	r3, [r3, #4]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d101      	bne.n	800b49c <Is_GPS_Valid+0x1c>
	{
		return 0;
 800b498:	2300      	movs	r3, #0
 800b49a:	e006      	b.n	800b4aa <Is_GPS_Valid+0x2a>
	}
	if(Gps_date_time_st.Date == 0 )
 800b49c:	4b05      	ldr	r3, [pc, #20]	; (800b4b4 <Is_GPS_Valid+0x34>)
 800b49e:	78db      	ldrb	r3, [r3, #3]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d101      	bne.n	800b4a8 <Is_GPS_Valid+0x28>
	{
		return 0;
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	e000      	b.n	800b4aa <Is_GPS_Valid+0x2a>
	}
	return 1;
 800b4a8:	2301      	movs	r3, #1
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b2:	4770      	bx	lr
 800b4b4:	20002884 	.word	0x20002884

0800b4b8 <Write_RTC>:


void Write_RTC(void)
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b086      	sub	sp, #24
 800b4bc:	af04      	add	r7, sp, #16
	uint8_t set_time[7] = {0,};
 800b4be:	2300      	movs	r3, #0
 800b4c0:	603b      	str	r3, [r7, #0]
 800b4c2:	1d3b      	adds	r3, r7, #4
 800b4c4:	2100      	movs	r1, #0
 800b4c6:	460a      	mov	r2, r1
 800b4c8:	801a      	strh	r2, [r3, #0]
 800b4ca:	460a      	mov	r2, r1
 800b4cc:	709a      	strb	r2, [r3, #2]

	if(Is_GPS_Valid() ==0)
 800b4ce:	f7ff ffd7 	bl	800b480 <Is_GPS_Valid>
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d103      	bne.n	800b4e0 <Write_RTC+0x28>
	{
		printf("Invalid DATE received from MIE\n");
 800b4d8:	4844      	ldr	r0, [pc, #272]	; (800b5ec <Write_RTC+0x134>)
 800b4da:	f017 fbab 	bl	8022c34 <puts>
 800b4de:	e081      	b.n	800b5e4 <Write_RTC+0x12c>
		return;
	}


	Is_GPS_Packet_Received = 1;
 800b4e0:	4b43      	ldr	r3, [pc, #268]	; (800b5f0 <Write_RTC+0x138>)
 800b4e2:	2201      	movs	r2, #1
 800b4e4:	701a      	strb	r2, [r3, #0]

	set_time[0] = Dec_to_BCD(Gps_date_time_st.Secs);
 800b4e6:	4b43      	ldr	r3, [pc, #268]	; (800b5f4 <Write_RTC+0x13c>)
 800b4e8:	789b      	ldrb	r3, [r3, #2]
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	f7ff ffa4 	bl	800b438 <Dec_to_BCD>
 800b4f0:	4603      	mov	r3, r0
 800b4f2:	703b      	strb	r3, [r7, #0]
	set_time[1] = Dec_to_BCD(Gps_date_time_st.Mins);
 800b4f4:	4b3f      	ldr	r3, [pc, #252]	; (800b5f4 <Write_RTC+0x13c>)
 800b4f6:	785b      	ldrb	r3, [r3, #1]
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	f7ff ff9d 	bl	800b438 <Dec_to_BCD>
 800b4fe:	4603      	mov	r3, r0
 800b500:	707b      	strb	r3, [r7, #1]
	set_time[2] = Dec_to_BCD(Gps_date_time_st.Hour);
 800b502:	4b3c      	ldr	r3, [pc, #240]	; (800b5f4 <Write_RTC+0x13c>)
 800b504:	781b      	ldrb	r3, [r3, #0]
 800b506:	4618      	mov	r0, r3
 800b508:	f7ff ff96 	bl	800b438 <Dec_to_BCD>
 800b50c:	4603      	mov	r3, r0
 800b50e:	70bb      	strb	r3, [r7, #2]

	set_time[3] = Dec_to_BCD(Gps_date_time_st.Date);
 800b510:	4b38      	ldr	r3, [pc, #224]	; (800b5f4 <Write_RTC+0x13c>)
 800b512:	78db      	ldrb	r3, [r3, #3]
 800b514:	4618      	mov	r0, r3
 800b516:	f7ff ff8f 	bl	800b438 <Dec_to_BCD>
 800b51a:	4603      	mov	r3, r0
 800b51c:	70fb      	strb	r3, [r7, #3]
	set_time[4] = Dec_to_BCD(Gps_date_time_st.Mont);
 800b51e:	4b35      	ldr	r3, [pc, #212]	; (800b5f4 <Write_RTC+0x13c>)
 800b520:	791b      	ldrb	r3, [r3, #4]
 800b522:	4618      	mov	r0, r3
 800b524:	f7ff ff88 	bl	800b438 <Dec_to_BCD>
 800b528:	4603      	mov	r3, r0
 800b52a:	713b      	strb	r3, [r7, #4]
	set_time[5] = Dec_to_BCD(Gps_date_time_st.Year);
 800b52c:	4b31      	ldr	r3, [pc, #196]	; (800b5f4 <Write_RTC+0x13c>)
 800b52e:	795b      	ldrb	r3, [r3, #5]
 800b530:	4618      	mov	r0, r3
 800b532:	f7ff ff81 	bl	800b438 <Dec_to_BCD>
 800b536:	4603      	mov	r3, r0
 800b538:	717b      	strb	r3, [r7, #5]

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X00,1,&set_time[0],1,1000); //Seconds
 800b53a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b53e:	9302      	str	r3, [sp, #8]
 800b540:	2301      	movs	r3, #1
 800b542:	9301      	str	r3, [sp, #4]
 800b544:	463b      	mov	r3, r7
 800b546:	9300      	str	r3, [sp, #0]
 800b548:	2301      	movs	r3, #1
 800b54a:	2200      	movs	r2, #0
 800b54c:	21d0      	movs	r1, #208	; 0xd0
 800b54e:	482a      	ldr	r0, [pc, #168]	; (800b5f8 <Write_RTC+0x140>)
 800b550:	f00d f882 	bl	8018658 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X01,1,&set_time[1],1,1000); //Minutes
 800b554:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b558:	9302      	str	r3, [sp, #8]
 800b55a:	2301      	movs	r3, #1
 800b55c:	9301      	str	r3, [sp, #4]
 800b55e:	463b      	mov	r3, r7
 800b560:	3301      	adds	r3, #1
 800b562:	9300      	str	r3, [sp, #0]
 800b564:	2301      	movs	r3, #1
 800b566:	2201      	movs	r2, #1
 800b568:	21d0      	movs	r1, #208	; 0xd0
 800b56a:	4823      	ldr	r0, [pc, #140]	; (800b5f8 <Write_RTC+0x140>)
 800b56c:	f00d f874 	bl	8018658 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X02,1,&set_time[2],1,1000); //Hour
 800b570:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b574:	9302      	str	r3, [sp, #8]
 800b576:	2301      	movs	r3, #1
 800b578:	9301      	str	r3, [sp, #4]
 800b57a:	463b      	mov	r3, r7
 800b57c:	3302      	adds	r3, #2
 800b57e:	9300      	str	r3, [sp, #0]
 800b580:	2301      	movs	r3, #1
 800b582:	2202      	movs	r2, #2
 800b584:	21d0      	movs	r1, #208	; 0xd0
 800b586:	481c      	ldr	r0, [pc, #112]	; (800b5f8 <Write_RTC+0x140>)
 800b588:	f00d f866 	bl	8018658 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X04,1,&set_time[3],1,1000); //Date
 800b58c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b590:	9302      	str	r3, [sp, #8]
 800b592:	2301      	movs	r3, #1
 800b594:	9301      	str	r3, [sp, #4]
 800b596:	463b      	mov	r3, r7
 800b598:	3303      	adds	r3, #3
 800b59a:	9300      	str	r3, [sp, #0]
 800b59c:	2301      	movs	r3, #1
 800b59e:	2204      	movs	r2, #4
 800b5a0:	21d0      	movs	r1, #208	; 0xd0
 800b5a2:	4815      	ldr	r0, [pc, #84]	; (800b5f8 <Write_RTC+0x140>)
 800b5a4:	f00d f858 	bl	8018658 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X05,1,&set_time[4],1,1000); //Month
 800b5a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b5ac:	9302      	str	r3, [sp, #8]
 800b5ae:	2301      	movs	r3, #1
 800b5b0:	9301      	str	r3, [sp, #4]
 800b5b2:	463b      	mov	r3, r7
 800b5b4:	3304      	adds	r3, #4
 800b5b6:	9300      	str	r3, [sp, #0]
 800b5b8:	2301      	movs	r3, #1
 800b5ba:	2205      	movs	r2, #5
 800b5bc:	21d0      	movs	r1, #208	; 0xd0
 800b5be:	480e      	ldr	r0, [pc, #56]	; (800b5f8 <Write_RTC+0x140>)
 800b5c0:	f00d f84a 	bl	8018658 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X06,1,&set_time[5],1,1000); //Year
 800b5c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b5c8:	9302      	str	r3, [sp, #8]
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	9301      	str	r3, [sp, #4]
 800b5ce:	463b      	mov	r3, r7
 800b5d0:	3305      	adds	r3, #5
 800b5d2:	9300      	str	r3, [sp, #0]
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	2206      	movs	r2, #6
 800b5d8:	21d0      	movs	r1, #208	; 0xd0
 800b5da:	4807      	ldr	r0, [pc, #28]	; (800b5f8 <Write_RTC+0x140>)
 800b5dc:	f00d f83c 	bl	8018658 <HAL_I2C_Mem_Write>

	Get_time();
 800b5e0:	f000 f80c 	bl	800b5fc <Get_time>

}
 800b5e4:	3708      	adds	r7, #8
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bd80      	pop	{r7, pc}
 800b5ea:	bf00      	nop
 800b5ec:	08026210 	.word	0x08026210
 800b5f0:	20000e78 	.word	0x20000e78
 800b5f4:	20002884 	.word	0x20002884
 800b5f8:	20009c74 	.word	0x20009c74

0800b5fc <Get_time>:


void Get_time(void)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b086      	sub	sp, #24
 800b600:	af04      	add	r7, sp, #16
	uint8_t get_time[7];

	memset(get_time,0,sizeof(get_time));
 800b602:	463b      	mov	r3, r7
 800b604:	2207      	movs	r2, #7
 800b606:	2100      	movs	r1, #0
 800b608:	4618      	mov	r0, r3
 800b60a:	f017 f98f 	bl	802292c <memset>
	HAL_I2C_Mem_Read(&hi2c1, RTC_I2C_ADDR,0X00,1,get_time,7,1000);
 800b60e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b612:	9302      	str	r3, [sp, #8]
 800b614:	2307      	movs	r3, #7
 800b616:	9301      	str	r3, [sp, #4]
 800b618:	463b      	mov	r3, r7
 800b61a:	9300      	str	r3, [sp, #0]
 800b61c:	2301      	movs	r3, #1
 800b61e:	2200      	movs	r2, #0
 800b620:	21d0      	movs	r1, #208	; 0xd0
 800b622:	4824      	ldr	r0, [pc, #144]	; (800b6b4 <Get_time+0xb8>)
 800b624:	f00d f92c 	bl	8018880 <HAL_I2C_Mem_Read>

	RTC_Date_time_Dec_st.Secs = bcdToDec(get_time[0]);
 800b628:	783b      	ldrb	r3, [r7, #0]
 800b62a:	4618      	mov	r0, r3
 800b62c:	f7ff feea 	bl	800b404 <bcdToDec>
 800b630:	4603      	mov	r3, r0
 800b632:	461a      	mov	r2, r3
 800b634:	4b20      	ldr	r3, [pc, #128]	; (800b6b8 <Get_time+0xbc>)
 800b636:	709a      	strb	r2, [r3, #2]
	RTC_Date_time_Dec_st.Mins = bcdToDec(get_time[1]);
 800b638:	787b      	ldrb	r3, [r7, #1]
 800b63a:	4618      	mov	r0, r3
 800b63c:	f7ff fee2 	bl	800b404 <bcdToDec>
 800b640:	4603      	mov	r3, r0
 800b642:	461a      	mov	r2, r3
 800b644:	4b1c      	ldr	r3, [pc, #112]	; (800b6b8 <Get_time+0xbc>)
 800b646:	705a      	strb	r2, [r3, #1]
	RTC_Date_time_Dec_st.Hour = bcdToDec(get_time[2]);
 800b648:	78bb      	ldrb	r3, [r7, #2]
 800b64a:	4618      	mov	r0, r3
 800b64c:	f7ff feda 	bl	800b404 <bcdToDec>
 800b650:	4603      	mov	r3, r0
 800b652:	461a      	mov	r2, r3
 800b654:	4b18      	ldr	r3, [pc, #96]	; (800b6b8 <Get_time+0xbc>)
 800b656:	701a      	strb	r2, [r3, #0]
	RTC_Date_time_Dec_st.Date = bcdToDec(get_time[4]);
 800b658:	793b      	ldrb	r3, [r7, #4]
 800b65a:	4618      	mov	r0, r3
 800b65c:	f7ff fed2 	bl	800b404 <bcdToDec>
 800b660:	4603      	mov	r3, r0
 800b662:	461a      	mov	r2, r3
 800b664:	4b14      	ldr	r3, [pc, #80]	; (800b6b8 <Get_time+0xbc>)
 800b666:	70da      	strb	r2, [r3, #3]
	RTC_Date_time_Dec_st.Mont = bcdToDec(get_time[5]);
 800b668:	797b      	ldrb	r3, [r7, #5]
 800b66a:	4618      	mov	r0, r3
 800b66c:	f7ff feca 	bl	800b404 <bcdToDec>
 800b670:	4603      	mov	r3, r0
 800b672:	461a      	mov	r2, r3
 800b674:	4b10      	ldr	r3, [pc, #64]	; (800b6b8 <Get_time+0xbc>)
 800b676:	711a      	strb	r2, [r3, #4]
	RTC_Date_time_Dec_st.Year = bcdToDec(get_time[6]);
 800b678:	79bb      	ldrb	r3, [r7, #6]
 800b67a:	4618      	mov	r0, r3
 800b67c:	f7ff fec2 	bl	800b404 <bcdToDec>
 800b680:	4603      	mov	r3, r0
 800b682:	461a      	mov	r2, r3
 800b684:	4b0c      	ldr	r3, [pc, #48]	; (800b6b8 <Get_time+0xbc>)
 800b686:	715a      	strb	r2, [r3, #5]


	RTC_Date_time_BCD_st.Secs = (get_time[0]);
 800b688:	783a      	ldrb	r2, [r7, #0]
 800b68a:	4b0c      	ldr	r3, [pc, #48]	; (800b6bc <Get_time+0xc0>)
 800b68c:	709a      	strb	r2, [r3, #2]
	RTC_Date_time_BCD_st.Mins = (get_time[1]);
 800b68e:	787a      	ldrb	r2, [r7, #1]
 800b690:	4b0a      	ldr	r3, [pc, #40]	; (800b6bc <Get_time+0xc0>)
 800b692:	705a      	strb	r2, [r3, #1]
	RTC_Date_time_BCD_st.Hour = (get_time[2]);
 800b694:	78ba      	ldrb	r2, [r7, #2]
 800b696:	4b09      	ldr	r3, [pc, #36]	; (800b6bc <Get_time+0xc0>)
 800b698:	701a      	strb	r2, [r3, #0]
	RTC_Date_time_BCD_st.Date = (get_time[4]);
 800b69a:	793a      	ldrb	r2, [r7, #4]
 800b69c:	4b07      	ldr	r3, [pc, #28]	; (800b6bc <Get_time+0xc0>)
 800b69e:	70da      	strb	r2, [r3, #3]
	RTC_Date_time_BCD_st.Mont = (get_time[5]);
 800b6a0:	797a      	ldrb	r2, [r7, #5]
 800b6a2:	4b06      	ldr	r3, [pc, #24]	; (800b6bc <Get_time+0xc0>)
 800b6a4:	711a      	strb	r2, [r3, #4]
	RTC_Date_time_BCD_st.Year = (get_time[6]);
 800b6a6:	79ba      	ldrb	r2, [r7, #6]
 800b6a8:	4b04      	ldr	r3, [pc, #16]	; (800b6bc <Get_time+0xc0>)
 800b6aa:	715a      	strb	r2, [r3, #5]
	//printf("%02u/%02u/%02u\n",RTC_Date_time_Dec_st.Date,RTC_Date_time_Dec_st.Mont,RTC_Date_time_Dec_st.Year);

	//printf(" CURRENT TIME: 	");
	//printf("%02u:%02u:%02u\n\n",RTC_Date_time_Dec_st.Hour,RTC_Date_time_Dec_st.Mins,RTC_Date_time_Dec_st.Secs);

	return;
 800b6ac:	bf00      	nop
}
 800b6ae:	3708      	adds	r7, #8
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bd80      	pop	{r7, pc}
 800b6b4:	20009c74 	.word	0x20009c74
 800b6b8:	20002894 	.word	0x20002894
 800b6bc:	2000289c 	.word	0x2000289c

0800b6c0 <Update_Time_Every_Sec>:


void Update_Time_Every_Sec(void)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	af00      	add	r7, sp, #0
	static uint32_t RTC_CLK=0;

	if( HAL_Elaps_Ticks(RTC_CLK) >=1000)
 800b6c4:	4b09      	ldr	r3, [pc, #36]	; (800b6ec <Update_Time_Every_Sec+0x2c>)
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	f003 fc23 	bl	800ef14 <HAL_Elaps_Ticks>
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b6d4:	d307      	bcc.n	800b6e6 <Update_Time_Every_Sec+0x26>
	{
		Get_time();
 800b6d6:	f7ff ff91 	bl	800b5fc <Get_time>
		//		printf("\n CURRENT DATE: 	");
		//		printf("%02u/%02u/%02u\n",RTC_Date_time_Dec_st.Date,RTC_Date_time_Dec_st.Mont,RTC_Date_time_Dec_st.Year);
		//
		//		printf(" CURRENT TIME: 	");
		//		printf("%02u:%02u:%02u\n\n",RTC_Date_time_Dec_st.Hour,RTC_Date_time_Dec_st.Mins,RTC_Date_time_Dec_st.Secs);
		RTC_CLK=HAL_GetTick();
 800b6da:	f00a fa05 	bl	8015ae8 <HAL_GetTick>
 800b6de:	4603      	mov	r3, r0
 800b6e0:	4a02      	ldr	r2, [pc, #8]	; (800b6ec <Update_Time_Every_Sec+0x2c>)
 800b6e2:	6013      	str	r3, [r2, #0]
	}
	return;
 800b6e4:	bf00      	nop
 800b6e6:	bf00      	nop
}
 800b6e8:	bd80      	pop	{r7, pc}
 800b6ea:	bf00      	nop
 800b6ec:	200028a4 	.word	0x200028a4

0800b6f0 <Process_SiemensEI>:

uint8_t SendReply = 0;


void Process_SiemensEI(void)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	af00      	add	r7, sp, #0
	while(1)
	{
		MX_LWIP_Process();
 800b6f4:	f011 fce6 	bl	801d0c4 <MX_LWIP_Process>

		HAL_IWDG_Refresh(&hiwdg);
 800b6f8:	4813      	ldr	r0, [pc, #76]	; (800b748 <Process_SiemensEI+0x58>)
 800b6fa:	f00d fd5b 	bl	80191b4 <HAL_IWDG_Refresh>

		Feed_wdt();
 800b6fe:	f008 f8af 	bl	8013860 <Feed_wdt>

		readCanToStructs();
 800b702:	f004 fe9d 	bl	8010440 <readCanToStructs>

		Chech_forSiemensCMD();
 800b706:	f001 fe39 	bl	800d37c <Chech_forSiemensCMD>

		ProcessSendingSignals2MIE();
 800b70a:	f001 fb85 	bl	800ce18 <ProcessSendingSignals2MIE>

		ProcessSelfSharing();
 800b70e:	f001 fc7d 	bl	800d00c <ProcessSelfSharing>

		Siemens_Data_Analyser();
 800b712:	f000 f81f 	bl	800b754 <Siemens_Data_Analyser>

		ProcessDetectNoValidDataReceive();
 800b716:	f001 fc9b 	bl	800d050 <ProcessDetectNoValidDataReceive>

		SendRelays2Other();
 800b71a:	f001 fcdd 	bl	800d0d8 <SendRelays2Other>

		CheckRelayMisMatch();
 800b71e:	f001 fcf3 	bl	800d108 <CheckRelayMisMatch>

		Detect_SiemensCAN_Xchange_Failure();
 800b722:	f001 fd2b 	bl	800d17c <Detect_SiemensCAN_Xchange_Failure>

		Print_BuildDat_Details();
 800b726:	f009 f9ad 	bl	8014a84 <Print_BuildDat_Details>

		GetTimeStamp();
 800b72a:	f002 fdb1 	bl	800e290 <GetTimeStamp>

		if(Dats_Request_Flag > 0)
 800b72e:	4b07      	ldr	r3, [pc, #28]	; (800b74c <Process_SiemensEI+0x5c>)
 800b730:	781b      	ldrb	r3, [r3, #0]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d0de      	beq.n	800b6f4 <Process_SiemensEI+0x4>
		{
			gucFlagUpdate = 3;
 800b736:	4b06      	ldr	r3, [pc, #24]	; (800b750 <Process_SiemensEI+0x60>)
 800b738:	2203      	movs	r2, #3
 800b73a:	701a      	strb	r2, [r3, #0]

	}

	while(1)
	{
		Data_Processing();
 800b73c:	f009 f8a0 	bl	8014880 <Data_Processing>
		HAL_IWDG_Refresh(&hiwdg);
 800b740:	4801      	ldr	r0, [pc, #4]	; (800b748 <Process_SiemensEI+0x58>)
 800b742:	f00d fd37 	bl	80191b4 <HAL_IWDG_Refresh>
		Data_Processing();
 800b746:	e7f9      	b.n	800b73c <Process_SiemensEI+0x4c>
 800b748:	20009d1c 	.word	0x20009d1c
 800b74c:	20000644 	.word	0x20000644
 800b750:	20000a49 	.word	0x20000a49

0800b754 <Siemens_Data_Analyser>:
	}
}

void Siemens_Data_Analyser(void)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	f6ad 2d58 	subw	sp, sp, #2648	; 0xa58
 800b75a:	af00      	add	r7, sp, #0

	uint8_t Data_Traverser =0;
 800b75c:	2300      	movs	r3, #0
 800b75e:	f887 3a57 	strb.w	r3, [r7, #2647]	; 0xa57
	uint16_t Cal_CRC=0,Cal_CRC_Compliment=0;
 800b762:	2300      	movs	r3, #0
 800b764:	f8a7 3a44 	strh.w	r3, [r7, #2628]	; 0xa44
 800b768:	2300      	movs	r3, #0
 800b76a:	f8a7 3a42 	strh.w	r3, [r7, #2626]	; 0xa42
	uint16_t Recv_CRC=0,Recv_CRC_Compliment=0;
 800b76e:	2300      	movs	r3, #0
 800b770:	f8a7 3a54 	strh.w	r3, [r7, #2644]	; 0xa54
 800b774:	2300      	movs	r3, #0
 800b776:	f8a7 3a52 	strh.w	r3, [r7, #2642]	; 0xa52
	uint16_t Recv_CRC_Loc=0,Recv_CRC_Compliment_Loc = 0,Recv_CRC_Compliment_Size=0;
 800b77a:	2300      	movs	r3, #0
 800b77c:	f8a7 3a40 	strh.w	r3, [r7, #2624]	; 0xa40
 800b780:	2300      	movs	r3, #0
 800b782:	f8a7 3a3e 	strh.w	r3, [r7, #2622]	; 0xa3e
 800b786:	2300      	movs	r3, #0
 800b788:	f8a7 3a3c 	strh.w	r3, [r7, #2620]	; 0xa3c
	uint16_t Compliment_Data_Start_Loc = 0;
 800b78c:	2300      	movs	r3, #0
 800b78e:	f8a7 3a3a 	strh.w	r3, [r7, #2618]	; 0xa3a
	uint16_t App_data_Traverser = 0;
 800b792:	2300      	movs	r3, #0
 800b794:	f8a7 3a50 	strh.w	r3, [r7, #2640]	; 0xa50
	uint16_t VitalCRC = 0;
 800b798:	2300      	movs	r3, #0
 800b79a:	f8a7 3a38 	strh.w	r3, [r7, #2616]	; 0xa38
	uint16_t App_data_Size = 0;
 800b79e:	2300      	movs	r3, #0
 800b7a0:	f8a7 3a4e 	strh.w	r3, [r7, #2638]	; 0xa4e
	uint16_t TempApp_data_Size = 0;
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	f8a7 3a4c 	strh.w	r3, [r7, #2636]	; 0xa4c
	uint8_t App_Data[SIEMENS_MAX_RELAY_SIZE];
	SIEMENS_PKT_t Temp_Siemens_RX_st;
	uint8_t Buff[MAX_SIEMENS_PKT_LENGTH] = {0,};
 800b7aa:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b7ae:	f6a3 234c 	subw	r3, r3, #2636	; 0xa4c
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	601a      	str	r2, [r3, #0]
 800b7b6:	3304      	adds	r3, #4
 800b7b8:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800b7bc:	2100      	movs	r1, #0
 800b7be:	4618      	mov	r0, r3
 800b7c0:	f017 f8b4 	bl	802292c <memset>
	uint16_t Size = 0;
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	f8a7 3a36 	strh.w	r3, [r7, #2614]	; 0xa36
	uint8_t RejectPacketFlag = 0;
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b


	if(Ethernet_Circle_buff_st.Write_end > 10)
 800b7d0:	4b7c      	ldr	r3, [pc, #496]	; (800b9c4 <Siemens_Data_Analyser+0x270>)
 800b7d2:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800b7d6:	2b0a      	cmp	r3, #10
 800b7d8:	f240 86dc 	bls.w	800c594 <Siemens_Data_Analyser+0xe40>
	{
		memcpy(&Buff,Ethernet_Circle_buff_st.Ethernet_Buffers,Ethernet_Circle_buff_st.Write_end);
 800b7dc:	4b79      	ldr	r3, [pc, #484]	; (800b9c4 <Siemens_Data_Analyser+0x270>)
 800b7de:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800b7e2:	461a      	mov	r2, r3
 800b7e4:	f107 030c 	add.w	r3, r7, #12
 800b7e8:	4976      	ldr	r1, [pc, #472]	; (800b9c4 <Siemens_Data_Analyser+0x270>)
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	f017 f876 	bl	80228dc <memcpy>
		Size = Ethernet_Circle_buff_st.Write_end;
 800b7f0:	4b74      	ldr	r3, [pc, #464]	; (800b9c4 <Siemens_Data_Analyser+0x270>)
 800b7f2:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800b7f6:	f8a7 3a36 	strh.w	r3, [r7, #2614]	; 0xa36
		memset(&Ethernet_Circle_buff_st,0,sizeof(ETHERNET_Circle_t));
 800b7fa:	f240 6204 	movw	r2, #1540	; 0x604
 800b7fe:	2100      	movs	r1, #0
 800b800:	4870      	ldr	r0, [pc, #448]	; (800b9c4 <Siemens_Data_Analyser+0x270>)
 800b802:	f017 f893 	bl	802292c <memset>
	else
	{
		return;
	}

	memset(&Temp_Siemens_RX_st,0,sizeof(SIEMENS_PKT_t));
 800b806:	f207 630c 	addw	r3, r7, #1548	; 0x60c
 800b80a:	f44f 720a 	mov.w	r2, #552	; 0x228
 800b80e:	2100      	movs	r1, #0
 800b810:	4618      	mov	r0, r3
 800b812:	f017 f88b 	bl	802292c <memset>


	BITSTUFFINIT(0,0);
 800b816:	2300      	movs	r3, #0
 800b818:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800b81c:	2300      	movs	r3, #0
 800b81e:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Recv_CRC_Loc = ((Size/2)-2);
 800b822:	f8b7 3a36 	ldrh.w	r3, [r7, #2614]	; 0xa36
 800b826:	085b      	lsrs	r3, r3, #1
 800b828:	b29b      	uxth	r3, r3
 800b82a:	3b02      	subs	r3, #2
 800b82c:	f8a7 3a40 	strh.w	r3, [r7, #2624]	; 0xa40
	Recv_CRC_Compliment_Size = ((Size/2)-2);
 800b830:	f8b7 3a36 	ldrh.w	r3, [r7, #2614]	; 0xa36
 800b834:	085b      	lsrs	r3, r3, #1
 800b836:	b29b      	uxth	r3, r3
 800b838:	3b02      	subs	r3, #2
 800b83a:	f8a7 3a3c 	strh.w	r3, [r7, #2620]	; 0xa3c
	Recv_CRC_Compliment_Loc = ((Size)-2);
 800b83e:	f8b7 3a36 	ldrh.w	r3, [r7, #2614]	; 0xa36
 800b842:	3b02      	subs	r3, #2
 800b844:	f8a7 3a3e 	strh.w	r3, [r7, #2622]	; 0xa3e
	Compliment_Data_Start_Loc = (Size/2);
 800b848:	f8b7 3a36 	ldrh.w	r3, [r7, #2614]	; 0xa36
 800b84c:	085b      	lsrs	r3, r3, #1
 800b84e:	f8a7 3a3a 	strh.w	r3, [r7, #2618]	; 0xa3a


	if(  Data_Compliment(Buff,Size,VERIFY)  != 1)
 800b852:	f8b7 1a36 	ldrh.w	r1, [r7, #2614]	; 0xa36
 800b856:	f107 030c 	add.w	r3, r7, #12
 800b85a:	2200      	movs	r2, #0
 800b85c:	4618      	mov	r0, r3
 800b85e:	f002 fbfd 	bl	800e05c <Data_Compliment>
 800b862:	4603      	mov	r3, r0
 800b864:	2b01      	cmp	r3, #1
 800b866:	d004      	beq.n	800b872 <Siemens_Data_Analyser+0x11e>
	{
		printf("Compliment Data Not Verified\n");
 800b868:	4857      	ldr	r0, [pc, #348]	; (800b9c8 <Siemens_Data_Analyser+0x274>)
 800b86a:	f017 f9e3 	bl	8022c34 <puts>
		return ;
 800b86e:	f000 be94 	b.w	800c59a <Siemens_Data_Analyser+0xe46>
	}

	Recv_CRC = ExtractBits(0,16,&Buff[Recv_CRC_Loc]);
 800b872:	f8b7 3a40 	ldrh.w	r3, [r7, #2624]	; 0xa40
 800b876:	f107 020c 	add.w	r2, r7, #12
 800b87a:	4413      	add	r3, r2
 800b87c:	461a      	mov	r2, r3
 800b87e:	2110      	movs	r1, #16
 800b880:	2000      	movs	r0, #0
 800b882:	f7f4 fec7 	bl	8000614 <ExtractBits>
 800b886:	4603      	mov	r3, r0
 800b888:	f8a7 3a54 	strh.w	r3, [r7, #2644]	; 0xa54
	Cal_CRC = Siemens_CRC(&Buff[0],Recv_CRC_Loc);
 800b88c:	f8b7 2a40 	ldrh.w	r2, [r7, #2624]	; 0xa40
 800b890:	f107 030c 	add.w	r3, r7, #12
 800b894:	4611      	mov	r1, r2
 800b896:	4618      	mov	r0, r3
 800b898:	f002 f8e4 	bl	800da64 <Siemens_CRC>
 800b89c:	4603      	mov	r3, r0
 800b89e:	f8a7 3a44 	strh.w	r3, [r7, #2628]	; 0xa44

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800b8a2:	4b4a      	ldr	r3, [pc, #296]	; (800b9cc <Siemens_Data_Analyser+0x278>)
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	095b      	lsrs	r3, r3, #5
 800b8a8:	f003 0301 	and.w	r3, r3, #1
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d01c      	beq.n	800b8ea <Siemens_Data_Analyser+0x196>
	{
		printf("Injecting INVALID_PACKET_CRC_SIEMENS\n");
 800b8b0:	4847      	ldr	r0, [pc, #284]	; (800b9d0 <Siemens_Data_Analyser+0x27c>)
 800b8b2:	f017 f9bf 	bl	8022c34 <puts>
		Recv_CRC = HAL_RNG_GetRandomNumber(&hrng) % 0xffff;
 800b8b6:	4847      	ldr	r0, [pc, #284]	; (800b9d4 <Siemens_Data_Analyser+0x280>)
 800b8b8:	f00e fdc8 	bl	801a44c <HAL_RNG_GetRandomNumber>
 800b8bc:	4601      	mov	r1, r0
 800b8be:	4b46      	ldr	r3, [pc, #280]	; (800b9d8 <Siemens_Data_Analyser+0x284>)
 800b8c0:	fba3 2301 	umull	r2, r3, r3, r1
 800b8c4:	0bda      	lsrs	r2, r3, #15
 800b8c6:	4613      	mov	r3, r2
 800b8c8:	041b      	lsls	r3, r3, #16
 800b8ca:	1a9b      	subs	r3, r3, r2
 800b8cc:	1aca      	subs	r2, r1, r3
 800b8ce:	4613      	mov	r3, r2
 800b8d0:	f8a7 3a54 	strh.w	r3, [r7, #2644]	; 0xa54
		if(Recv_CRC == Cal_CRC)
 800b8d4:	f8b7 2a54 	ldrh.w	r2, [r7, #2644]	; 0xa54
 800b8d8:	f8b7 3a44 	ldrh.w	r3, [r7, #2628]	; 0xa44
 800b8dc:	429a      	cmp	r2, r3
 800b8de:	d104      	bne.n	800b8ea <Siemens_Data_Analyser+0x196>
		{
			Recv_CRC += 4;
 800b8e0:	f8b7 3a54 	ldrh.w	r3, [r7, #2644]	; 0xa54
 800b8e4:	3304      	adds	r3, #4
 800b8e6:	f8a7 3a54 	strh.w	r3, [r7, #2644]	; 0xa54
		}
	}
#endif

	if(Cal_CRC != Recv_CRC)
 800b8ea:	f8b7 2a44 	ldrh.w	r2, [r7, #2628]	; 0xa44
 800b8ee:	f8b7 3a54 	ldrh.w	r3, [r7, #2644]	; 0xa54
 800b8f2:	429a      	cmp	r2, r3
 800b8f4:	d010      	beq.n	800b918 <Siemens_Data_Analyser+0x1c4>
	{
		printf("1st CRC Fail\n");
 800b8f6:	4839      	ldr	r0, [pc, #228]	; (800b9dc <Siemens_Data_Analyser+0x288>)
 800b8f8:	f017 f99c 	bl	8022c34 <puts>
		printf("Calculated:0x%04x\n",Cal_CRC);
 800b8fc:	f8b7 3a44 	ldrh.w	r3, [r7, #2628]	; 0xa44
 800b900:	4619      	mov	r1, r3
 800b902:	4837      	ldr	r0, [pc, #220]	; (800b9e0 <Siemens_Data_Analyser+0x28c>)
 800b904:	f017 f8fa 	bl	8022afc <iprintf>
		printf("Received:0x%04x\n",Recv_CRC);
 800b908:	f8b7 3a54 	ldrh.w	r3, [r7, #2644]	; 0xa54
 800b90c:	4619      	mov	r1, r3
 800b90e:	4835      	ldr	r0, [pc, #212]	; (800b9e4 <Siemens_Data_Analyser+0x290>)
 800b910:	f017 f8f4 	bl	8022afc <iprintf>
		return;
 800b914:	f000 be41 	b.w	800c59a <Siemens_Data_Analyser+0xe46>
	}

	Recv_CRC_Compliment = ExtractBits(0,16,&Buff[Recv_CRC_Compliment_Loc]);
 800b918:	f8b7 3a3e 	ldrh.w	r3, [r7, #2622]	; 0xa3e
 800b91c:	f107 020c 	add.w	r2, r7, #12
 800b920:	4413      	add	r3, r2
 800b922:	461a      	mov	r2, r3
 800b924:	2110      	movs	r1, #16
 800b926:	2000      	movs	r0, #0
 800b928:	f7f4 fe74 	bl	8000614 <ExtractBits>
 800b92c:	4603      	mov	r3, r0
 800b92e:	f8a7 3a52 	strh.w	r3, [r7, #2642]	; 0xa52
	Cal_CRC_Compliment = Siemens_CRC(&Buff[Compliment_Data_Start_Loc],Recv_CRC_Compliment_Size);
 800b932:	f8b7 3a3a 	ldrh.w	r3, [r7, #2618]	; 0xa3a
 800b936:	f107 020c 	add.w	r2, r7, #12
 800b93a:	4413      	add	r3, r2
 800b93c:	f8b7 2a3c 	ldrh.w	r2, [r7, #2620]	; 0xa3c
 800b940:	4611      	mov	r1, r2
 800b942:	4618      	mov	r0, r3
 800b944:	f002 f88e 	bl	800da64 <Siemens_CRC>
 800b948:	4603      	mov	r3, r0
 800b94a:	f8a7 3a42 	strh.w	r3, [r7, #2626]	; 0xa42

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_COMP_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800b94e:	4b1f      	ldr	r3, [pc, #124]	; (800b9cc <Siemens_Data_Analyser+0x278>)
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	0a1b      	lsrs	r3, r3, #8
 800b954:	f003 0301 	and.w	r3, r3, #1
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d01c      	beq.n	800b996 <Siemens_Data_Analyser+0x242>
	{
		printf("Injecting INVALID_COMP_PACKET_CRC_SIEMENS\n");
 800b95c:	4822      	ldr	r0, [pc, #136]	; (800b9e8 <Siemens_Data_Analyser+0x294>)
 800b95e:	f017 f969 	bl	8022c34 <puts>
		Recv_CRC_Compliment = HAL_RNG_GetRandomNumber(&hrng) % 0xffff;
 800b962:	481c      	ldr	r0, [pc, #112]	; (800b9d4 <Siemens_Data_Analyser+0x280>)
 800b964:	f00e fd72 	bl	801a44c <HAL_RNG_GetRandomNumber>
 800b968:	4601      	mov	r1, r0
 800b96a:	4b1b      	ldr	r3, [pc, #108]	; (800b9d8 <Siemens_Data_Analyser+0x284>)
 800b96c:	fba3 2301 	umull	r2, r3, r3, r1
 800b970:	0bda      	lsrs	r2, r3, #15
 800b972:	4613      	mov	r3, r2
 800b974:	041b      	lsls	r3, r3, #16
 800b976:	1a9b      	subs	r3, r3, r2
 800b978:	1aca      	subs	r2, r1, r3
 800b97a:	4613      	mov	r3, r2
 800b97c:	f8a7 3a52 	strh.w	r3, [r7, #2642]	; 0xa52
		if(Recv_CRC_Compliment == Cal_CRC_Compliment)
 800b980:	f8b7 2a52 	ldrh.w	r2, [r7, #2642]	; 0xa52
 800b984:	f8b7 3a42 	ldrh.w	r3, [r7, #2626]	; 0xa42
 800b988:	429a      	cmp	r2, r3
 800b98a:	d104      	bne.n	800b996 <Siemens_Data_Analyser+0x242>
		{
			Recv_CRC_Compliment += 4;
 800b98c:	f8b7 3a52 	ldrh.w	r3, [r7, #2642]	; 0xa52
 800b990:	3304      	adds	r3, #4
 800b992:	f8a7 3a52 	strh.w	r3, [r7, #2642]	; 0xa52
		}
	}
#endif

	if(Cal_CRC_Compliment != Recv_CRC_Compliment)
 800b996:	f8b7 2a42 	ldrh.w	r2, [r7, #2626]	; 0xa42
 800b99a:	f8b7 3a52 	ldrh.w	r3, [r7, #2642]	; 0xa52
 800b99e:	429a      	cmp	r2, r3
 800b9a0:	d02a      	beq.n	800b9f8 <Siemens_Data_Analyser+0x2a4>
	{
		printf("2nd CRC Fail\n");
 800b9a2:	4812      	ldr	r0, [pc, #72]	; (800b9ec <Siemens_Data_Analyser+0x298>)
 800b9a4:	f017 f946 	bl	8022c34 <puts>
		printf("Cal_CRC_Compliment:0x%04x\n",Cal_CRC_Compliment);
 800b9a8:	f8b7 3a42 	ldrh.w	r3, [r7, #2626]	; 0xa42
 800b9ac:	4619      	mov	r1, r3
 800b9ae:	4810      	ldr	r0, [pc, #64]	; (800b9f0 <Siemens_Data_Analyser+0x29c>)
 800b9b0:	f017 f8a4 	bl	8022afc <iprintf>
		printf("Recv_CRC_Compliment:0x%04x\n",Recv_CRC_Compliment);
 800b9b4:	f8b7 3a52 	ldrh.w	r3, [r7, #2642]	; 0xa52
 800b9b8:	4619      	mov	r1, r3
 800b9ba:	480e      	ldr	r0, [pc, #56]	; (800b9f4 <Siemens_Data_Analyser+0x2a0>)
 800b9bc:	f017 f89e 	bl	8022afc <iprintf>
		return;
 800b9c0:	f000 bdeb 	b.w	800c59a <Siemens_Data_Analyser+0xe46>
 800b9c4:	20004c60 	.word	0x20004c60
 800b9c8:	08026230 	.word	0x08026230
 800b9cc:	20003524 	.word	0x20003524
 800b9d0:	08026250 	.word	0x08026250
 800b9d4:	20009d2c 	.word	0x20009d2c
 800b9d8:	80008001 	.word	0x80008001
 800b9dc:	08026278 	.word	0x08026278
 800b9e0:	08026288 	.word	0x08026288
 800b9e4:	0802629c 	.word	0x0802629c
 800b9e8:	080262b0 	.word	0x080262b0
 800b9ec:	080262dc 	.word	0x080262dc
 800b9f0:	080262ec 	.word	0x080262ec
 800b9f4:	08026308 	.word	0x08026308
	}

	Temp_Siemens_RX_st.DesSysType = Extract_Parity_Data(ucBit,8,&Buff[ucByte],ODD_PARITY);
 800b9f8:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800b9fc:	b2d8      	uxtb	r0, r3
 800b9fe:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800ba02:	f107 020c 	add.w	r2, r7, #12
 800ba06:	441a      	add	r2, r3
 800ba08:	2301      	movs	r3, #1
 800ba0a:	2108      	movs	r1, #8
 800ba0c:	f002 f87e 	bl	800db0c <Extract_Parity_Data>
 800ba10:	4603      	mov	r3, r0
 800ba12:	b2da      	uxtb	r2, r3
 800ba14:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800ba18:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800ba1c:	701a      	strb	r2, [r3, #0]

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_DES_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800ba1e:	4b56      	ldr	r3, [pc, #344]	; (800bb78 <Siemens_Data_Analyser+0x424>)
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	f003 0301 	and.w	r3, r3, #1
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d02a      	beq.n	800ba80 <Siemens_Data_Analyser+0x32c>
	{
		printf("Injecting INVALID_DES_SYS_TYPE\n");
 800ba2a:	4854      	ldr	r0, [pc, #336]	; (800bb7c <Siemens_Data_Analyser+0x428>)
 800ba2c:	f017 f902 	bl	8022c34 <puts>
		Temp_Siemens_RX_st.DesSysType = HAL_RNG_GetRandomNumber(&hrng) % 0xff;
 800ba30:	4853      	ldr	r0, [pc, #332]	; (800bb80 <Siemens_Data_Analyser+0x42c>)
 800ba32:	f00e fd0b 	bl	801a44c <HAL_RNG_GetRandomNumber>
 800ba36:	4601      	mov	r1, r0
 800ba38:	4b52      	ldr	r3, [pc, #328]	; (800bb84 <Siemens_Data_Analyser+0x430>)
 800ba3a:	fba3 2301 	umull	r2, r3, r3, r1
 800ba3e:	09da      	lsrs	r2, r3, #7
 800ba40:	4613      	mov	r3, r2
 800ba42:	021b      	lsls	r3, r3, #8
 800ba44:	1a9b      	subs	r3, r3, r2
 800ba46:	1aca      	subs	r2, r1, r3
 800ba48:	b2d2      	uxtb	r2, r2
 800ba4a:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800ba4e:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800ba52:	701a      	strb	r2, [r3, #0]
		if(Temp_Siemens_RX_st.DesSysType == EI_data.Siemens_st.DestSysType)
 800ba54:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800ba58:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800ba5c:	781a      	ldrb	r2, [r3, #0]
 800ba5e:	4b4a      	ldr	r3, [pc, #296]	; (800bb88 <Siemens_Data_Analyser+0x434>)
 800ba60:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 800ba64:	429a      	cmp	r2, r3
 800ba66:	d10b      	bne.n	800ba80 <Siemens_Data_Analyser+0x32c>
		{
			Temp_Siemens_RX_st.DesSysType += 4;
 800ba68:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800ba6c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800ba70:	781b      	ldrb	r3, [r3, #0]
 800ba72:	3304      	adds	r3, #4
 800ba74:	b2da      	uxtb	r2, r3
 800ba76:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800ba7a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800ba7e:	701a      	strb	r2, [r3, #0]
		}
	}
#endif

	if(Temp_Siemens_RX_st.DesSysType != EI_data.Siemens_st.DestSysType)
 800ba80:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800ba84:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800ba88:	781a      	ldrb	r2, [r3, #0]
 800ba8a:	4b3f      	ldr	r3, [pc, #252]	; (800bb88 <Siemens_Data_Analyser+0x434>)
 800ba8c:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 800ba90:	429a      	cmp	r2, r3
 800ba92:	d015      	beq.n	800bac0 <Siemens_Data_Analyser+0x36c>
	{
		printf("Destination System Type Not Matched\n");
 800ba94:	483d      	ldr	r0, [pc, #244]	; (800bb8c <Siemens_Data_Analyser+0x438>)
 800ba96:	f017 f8cd 	bl	8022c34 <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.DesSysType);
 800ba9a:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800ba9e:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800baa2:	781b      	ldrb	r3, [r3, #0]
 800baa4:	4619      	mov	r1, r3
 800baa6:	483a      	ldr	r0, [pc, #232]	; (800bb90 <Siemens_Data_Analyser+0x43c>)
 800baa8:	f017 f828 	bl	8022afc <iprintf>
		printf("Expected:%u\n",EI_data.Siemens_st.DestSysType);
 800baac:	4b36      	ldr	r3, [pc, #216]	; (800bb88 <Siemens_Data_Analyser+0x434>)
 800baae:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 800bab2:	4619      	mov	r1, r3
 800bab4:	4837      	ldr	r0, [pc, #220]	; (800bb94 <Siemens_Data_Analyser+0x440>)
 800bab6:	f017 f821 	bl	8022afc <iprintf>
		RejectPacketFlag = 1;
 800baba:	2301      	movs	r3, #1
 800babc:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("Des_type:%u\n",Temp_Siemens_RX_st.dst_sys_typ);
	BITSTUFFINC(8);//Destination System Type
 800bac0:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800bac4:	3308      	adds	r3, #8
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	da00      	bge.n	800bacc <Siemens_Data_Analyser+0x378>
 800baca:	3307      	adds	r3, #7
 800bacc:	10db      	asrs	r3, r3, #3
 800bace:	b29a      	uxth	r2, r3
 800bad0:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bad4:	4413      	add	r3, r2
 800bad6:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800bada:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800bade:	3308      	adds	r3, #8
 800bae0:	b29b      	uxth	r3, r3
 800bae2:	b21b      	sxth	r3, r3
 800bae4:	425a      	negs	r2, r3
 800bae6:	f003 0307 	and.w	r3, r3, #7
 800baea:	f002 0207 	and.w	r2, r2, #7
 800baee:	bf58      	it	pl
 800baf0:	4253      	negpl	r3, r2
 800baf2:	b21b      	sxth	r3, r3
 800baf4:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.DestAddr = Extract_Parity_Data(ucBit,24,&Buff[ucByte],EVEN_PARITY);
 800baf8:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800bafc:	b2d8      	uxtb	r0, r3
 800bafe:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bb02:	f107 020c 	add.w	r2, r7, #12
 800bb06:	441a      	add	r2, r3
 800bb08:	2300      	movs	r3, #0
 800bb0a:	2118      	movs	r1, #24
 800bb0c:	f001 fffe 	bl	800db0c <Extract_Parity_Data>
 800bb10:	4603      	mov	r3, r0
 800bb12:	461a      	mov	r2, r3
 800bb14:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bb18:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bb1c:	605a      	str	r2, [r3, #4]

	if(Temp_Siemens_RX_st.DestAddr != -1)
 800bb1e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bb22:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bb26:	685b      	ldr	r3, [r3, #4]
 800bb28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb2c:	d036      	beq.n	800bb9c <Siemens_Data_Analyser+0x448>
	{
		uint8_t ExtractBuffer[3] = {0,};
 800bb2e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bb32:	f5a3 6325 	sub.w	r3, r3, #2640	; 0xa50
 800bb36:	4a18      	ldr	r2, [pc, #96]	; (800bb98 <Siemens_Data_Analyser+0x444>)
 800bb38:	8812      	ldrh	r2, [r2, #0]
 800bb3a:	801a      	strh	r2, [r3, #0]
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	709a      	strb	r2, [r3, #2]
		ExtractAppData(&Buff[ucByte], 3, ExtractBuffer);
 800bb40:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bb44:	f107 020c 	add.w	r2, r7, #12
 800bb48:	4413      	add	r3, r2
 800bb4a:	f107 0208 	add.w	r2, r7, #8
 800bb4e:	2103      	movs	r1, #3
 800bb50:	4618      	mov	r0, r3
 800bb52:	f000 fd4d 	bl	800c5f0 <ExtractAppData>
		memcpy(&Temp_Siemens_RX_st.ExtDestAddr,&ExtractBuffer, 3);
 800bb56:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bb5a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bb5e:	f607 2258 	addw	r2, r7, #2648	; 0xa58
 800bb62:	f5a2 6225 	sub.w	r2, r2, #2640	; 0xa50
 800bb66:	3308      	adds	r3, #8
 800bb68:	6812      	ldr	r2, [r2, #0]
 800bb6a:	4611      	mov	r1, r2
 800bb6c:	8019      	strh	r1, [r3, #0]
 800bb6e:	3302      	adds	r3, #2
 800bb70:	0c12      	lsrs	r2, r2, #16
 800bb72:	701a      	strb	r2, [r3, #0]
 800bb74:	e015      	b.n	800bba2 <Siemens_Data_Analyser+0x44e>
 800bb76:	bf00      	nop
 800bb78:	20003524 	.word	0x20003524
 800bb7c:	08026324 	.word	0x08026324
 800bb80:	20009d2c 	.word	0x20009d2c
 800bb84:	80808081 	.word	0x80808081
 800bb88:	20000304 	.word	0x20000304
 800bb8c:	08026344 	.word	0x08026344
 800bb90:	08026368 	.word	0x08026368
 800bb94:	08026378 	.word	0x08026378
 800bb98:	080264fc 	.word	0x080264fc
	}
	else
	{
		RejectPacketFlag = 1;
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	//			Temp_Siemens_RX_st.DesSysType += 4;
	//		}
	//	}
	//#endif

	if(Temp_Siemens_RX_st.ExtDestAddr != EI_data.Siemens_st.DestAddress)
 800bba2:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bba6:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bbaa:	689a      	ldr	r2, [r3, #8]
 800bbac:	4bbf      	ldr	r3, [pc, #764]	; (800beac <Siemens_Data_Analyser+0x758>)
 800bbae:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 800bbb2:	429a      	cmp	r2, r3
 800bbb4:	d015      	beq.n	800bbe2 <Siemens_Data_Analyser+0x48e>
	{
		printf("Destination Address Not Matched\n");
 800bbb6:	48be      	ldr	r0, [pc, #760]	; (800beb0 <Siemens_Data_Analyser+0x75c>)
 800bbb8:	f017 f83c 	bl	8022c34 <puts>
		printf("Received:%lu\n",Temp_Siemens_RX_st.DestAddr);
 800bbbc:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bbc0:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bbc4:	685b      	ldr	r3, [r3, #4]
 800bbc6:	4619      	mov	r1, r3
 800bbc8:	48ba      	ldr	r0, [pc, #744]	; (800beb4 <Siemens_Data_Analyser+0x760>)
 800bbca:	f016 ff97 	bl	8022afc <iprintf>
		printf("Expected:%lu\n",EI_data.Siemens_st.DestAddress);
 800bbce:	4bb7      	ldr	r3, [pc, #732]	; (800beac <Siemens_Data_Analyser+0x758>)
 800bbd0:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 800bbd4:	4619      	mov	r1, r3
 800bbd6:	48b8      	ldr	r0, [pc, #736]	; (800beb8 <Siemens_Data_Analyser+0x764>)
 800bbd8:	f016 ff90 	bl	8022afc <iprintf>
		RejectPacketFlag = 1;
 800bbdc:	2301      	movs	r3, #1
 800bbde:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("dst_add:%lu\n",Temp_Siemens_RX_st.dst_add);
	BITSTUFFINC(24);//Destination Address
 800bbe2:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800bbe6:	3318      	adds	r3, #24
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	da00      	bge.n	800bbee <Siemens_Data_Analyser+0x49a>
 800bbec:	3307      	adds	r3, #7
 800bbee:	10db      	asrs	r3, r3, #3
 800bbf0:	b29a      	uxth	r2, r3
 800bbf2:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bbf6:	4413      	add	r3, r2
 800bbf8:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800bbfc:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800bc00:	3318      	adds	r3, #24
 800bc02:	b29b      	uxth	r3, r3
 800bc04:	b21b      	sxth	r3, r3
 800bc06:	425a      	negs	r2, r3
 800bc08:	f003 0307 	and.w	r3, r3, #7
 800bc0c:	f002 0207 	and.w	r2, r2, #7
 800bc10:	bf58      	it	pl
 800bc12:	4253      	negpl	r3, r2
 800bc14:	b21b      	sxth	r3, r3
 800bc16:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.SrcSysType = Extract_Parity_Data(ucBit,8,&Buff[ucByte],ODD_PARITY);
 800bc1a:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800bc1e:	b2d8      	uxtb	r0, r3
 800bc20:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bc24:	f107 020c 	add.w	r2, r7, #12
 800bc28:	441a      	add	r2, r3
 800bc2a:	2301      	movs	r3, #1
 800bc2c:	2108      	movs	r1, #8
 800bc2e:	f001 ff6d 	bl	800db0c <Extract_Parity_Data>
 800bc32:	4603      	mov	r3, r0
 800bc34:	b2da      	uxtb	r2, r3
 800bc36:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bc3a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bc3e:	731a      	strb	r2, [r3, #12]

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_SRC_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800bc40:	4b9e      	ldr	r3, [pc, #632]	; (800bebc <Siemens_Data_Analyser+0x768>)
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	085b      	lsrs	r3, r3, #1
 800bc46:	f003 0301 	and.w	r3, r3, #1
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d02a      	beq.n	800bca4 <Siemens_Data_Analyser+0x550>
	{
		printf("Injecting INVALID_SRC_SYS_TYPE\n");
 800bc4e:	489c      	ldr	r0, [pc, #624]	; (800bec0 <Siemens_Data_Analyser+0x76c>)
 800bc50:	f016 fff0 	bl	8022c34 <puts>
		Temp_Siemens_RX_st.SrcSysType = HAL_RNG_GetRandomNumber(&hrng) % 0xff;
 800bc54:	489b      	ldr	r0, [pc, #620]	; (800bec4 <Siemens_Data_Analyser+0x770>)
 800bc56:	f00e fbf9 	bl	801a44c <HAL_RNG_GetRandomNumber>
 800bc5a:	4601      	mov	r1, r0
 800bc5c:	4b9a      	ldr	r3, [pc, #616]	; (800bec8 <Siemens_Data_Analyser+0x774>)
 800bc5e:	fba3 2301 	umull	r2, r3, r3, r1
 800bc62:	09da      	lsrs	r2, r3, #7
 800bc64:	4613      	mov	r3, r2
 800bc66:	021b      	lsls	r3, r3, #8
 800bc68:	1a9b      	subs	r3, r3, r2
 800bc6a:	1aca      	subs	r2, r1, r3
 800bc6c:	b2d2      	uxtb	r2, r2
 800bc6e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bc72:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bc76:	731a      	strb	r2, [r3, #12]
		if(Temp_Siemens_RX_st.SrcSysType == EI_data.Siemens_st.SourceSysType)
 800bc78:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bc7c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bc80:	7b1a      	ldrb	r2, [r3, #12]
 800bc82:	4b8a      	ldr	r3, [pc, #552]	; (800beac <Siemens_Data_Analyser+0x758>)
 800bc84:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
 800bc88:	429a      	cmp	r2, r3
 800bc8a:	d10b      	bne.n	800bca4 <Siemens_Data_Analyser+0x550>
		{
			Temp_Siemens_RX_st.SrcSysType += 4;
 800bc8c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bc90:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bc94:	7b1b      	ldrb	r3, [r3, #12]
 800bc96:	3304      	adds	r3, #4
 800bc98:	b2da      	uxtb	r2, r3
 800bc9a:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bc9e:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bca2:	731a      	strb	r2, [r3, #12]
		}
	}
#endif

	if(Temp_Siemens_RX_st.SrcSysType != EI_data.Siemens_st.SourceSysType)
 800bca4:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bca8:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bcac:	7b1a      	ldrb	r2, [r3, #12]
 800bcae:	4b7f      	ldr	r3, [pc, #508]	; (800beac <Siemens_Data_Analyser+0x758>)
 800bcb0:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
 800bcb4:	429a      	cmp	r2, r3
 800bcb6:	d015      	beq.n	800bce4 <Siemens_Data_Analyser+0x590>
	{
		printf("Source System Type Not Matched\n");
 800bcb8:	4884      	ldr	r0, [pc, #528]	; (800becc <Siemens_Data_Analyser+0x778>)
 800bcba:	f016 ffbb 	bl	8022c34 <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.SrcSysType);
 800bcbe:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bcc2:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bcc6:	7b1b      	ldrb	r3, [r3, #12]
 800bcc8:	4619      	mov	r1, r3
 800bcca:	4881      	ldr	r0, [pc, #516]	; (800bed0 <Siemens_Data_Analyser+0x77c>)
 800bccc:	f016 ff16 	bl	8022afc <iprintf>
		printf("Expected:%u\n",EI_data.Siemens_st.SourceSysType);
 800bcd0:	4b76      	ldr	r3, [pc, #472]	; (800beac <Siemens_Data_Analyser+0x758>)
 800bcd2:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
 800bcd6:	4619      	mov	r1, r3
 800bcd8:	487e      	ldr	r0, [pc, #504]	; (800bed4 <Siemens_Data_Analyser+0x780>)
 800bcda:	f016 ff0f 	bl	8022afc <iprintf>
		RejectPacketFlag = 1;
 800bcde:	2301      	movs	r3, #1
 800bce0:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("Src_sys_type:%u\n",Temp_Siemens_RX_st.Src_sys_type);
	BITSTUFFINC(8);//Source System Type
 800bce4:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800bce8:	3308      	adds	r3, #8
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	da00      	bge.n	800bcf0 <Siemens_Data_Analyser+0x59c>
 800bcee:	3307      	adds	r3, #7
 800bcf0:	10db      	asrs	r3, r3, #3
 800bcf2:	b29a      	uxth	r2, r3
 800bcf4:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bcf8:	4413      	add	r3, r2
 800bcfa:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800bcfe:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800bd02:	3308      	adds	r3, #8
 800bd04:	b29b      	uxth	r3, r3
 800bd06:	b21b      	sxth	r3, r3
 800bd08:	425a      	negs	r2, r3
 800bd0a:	f003 0307 	and.w	r3, r3, #7
 800bd0e:	f002 0207 	and.w	r2, r2, #7
 800bd12:	bf58      	it	pl
 800bd14:	4253      	negpl	r3, r2
 800bd16:	b21b      	sxth	r3, r3
 800bd18:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.SourceAddr = Extract_Parity_Data(ucBit,24,&Buff[ucByte],EVEN_PARITY);
 800bd1c:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800bd20:	b2d8      	uxtb	r0, r3
 800bd22:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bd26:	f107 020c 	add.w	r2, r7, #12
 800bd2a:	441a      	add	r2, r3
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	2118      	movs	r1, #24
 800bd30:	f001 feec 	bl	800db0c <Extract_Parity_Data>
 800bd34:	4603      	mov	r3, r0
 800bd36:	461a      	mov	r2, r3
 800bd38:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bd3c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bd40:	611a      	str	r2, [r3, #16]

	if(Temp_Siemens_RX_st.SourceAddr != -1)
 800bd42:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bd46:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bd4a:	691b      	ldr	r3, [r3, #16]
 800bd4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd50:	d021      	beq.n	800bd96 <Siemens_Data_Analyser+0x642>
	{
		uint8_t ExtractBuffer[3] = {0,};
 800bd52:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bd56:	f6a3 2354 	subw	r3, r3, #2644	; 0xa54
 800bd5a:	4a5f      	ldr	r2, [pc, #380]	; (800bed8 <Siemens_Data_Analyser+0x784>)
 800bd5c:	8812      	ldrh	r2, [r2, #0]
 800bd5e:	801a      	strh	r2, [r3, #0]
 800bd60:	2200      	movs	r2, #0
 800bd62:	709a      	strb	r2, [r3, #2]
		ExtractAppData(&Buff[ucByte], 3, ExtractBuffer);
 800bd64:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bd68:	f107 020c 	add.w	r2, r7, #12
 800bd6c:	4413      	add	r3, r2
 800bd6e:	1d3a      	adds	r2, r7, #4
 800bd70:	2103      	movs	r1, #3
 800bd72:	4618      	mov	r0, r3
 800bd74:	f000 fc3c 	bl	800c5f0 <ExtractAppData>
		memcpy(&Temp_Siemens_RX_st.ExtSourceAddr,&ExtractBuffer, 3);
 800bd78:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bd7c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bd80:	f607 2258 	addw	r2, r7, #2648	; 0xa58
 800bd84:	f6a2 2254 	subw	r2, r2, #2644	; 0xa54
 800bd88:	3314      	adds	r3, #20
 800bd8a:	6812      	ldr	r2, [r2, #0]
 800bd8c:	4611      	mov	r1, r2
 800bd8e:	8019      	strh	r1, [r3, #0]
 800bd90:	3302      	adds	r3, #2
 800bd92:	0c12      	lsrs	r2, r2, #16
 800bd94:	701a      	strb	r2, [r3, #0]
	}

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_SRC_ADDR,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800bd96:	4b49      	ldr	r3, [pc, #292]	; (800bebc <Siemens_Data_Analyser+0x768>)
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	089b      	lsrs	r3, r3, #2
 800bd9c:	f003 0301 	and.w	r3, r3, #1
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d02c      	beq.n	800bdfe <Siemens_Data_Analyser+0x6aa>
	{
		printf("Injecting INVALID_SRC_ADDR\n");
 800bda4:	484d      	ldr	r0, [pc, #308]	; (800bedc <Siemens_Data_Analyser+0x788>)
 800bda6:	f016 ff45 	bl	8022c34 <puts>
		Temp_Siemens_RX_st.SourceAddr = HAL_RNG_GetRandomNumber(&hrng) % 0xffffff;
 800bdaa:	4846      	ldr	r0, [pc, #280]	; (800bec4 <Siemens_Data_Analyser+0x770>)
 800bdac:	f00e fb4e 	bl	801a44c <HAL_RNG_GetRandomNumber>
 800bdb0:	4601      	mov	r1, r0
 800bdb2:	f240 1301 	movw	r3, #257	; 0x101
 800bdb6:	fba3 2301 	umull	r2, r3, r3, r1
 800bdba:	1aca      	subs	r2, r1, r3
 800bdbc:	0852      	lsrs	r2, r2, #1
 800bdbe:	4413      	add	r3, r2
 800bdc0:	0dda      	lsrs	r2, r3, #23
 800bdc2:	4613      	mov	r3, r2
 800bdc4:	061b      	lsls	r3, r3, #24
 800bdc6:	1a9b      	subs	r3, r3, r2
 800bdc8:	1aca      	subs	r2, r1, r3
 800bdca:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bdce:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bdd2:	611a      	str	r2, [r3, #16]
		if(Temp_Siemens_RX_st.ExtSourceAddr == EI_data.Siemens_st.SourceAddress)
 800bdd4:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bdd8:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bddc:	695a      	ldr	r2, [r3, #20]
 800bdde:	4b33      	ldr	r3, [pc, #204]	; (800beac <Siemens_Data_Analyser+0x758>)
 800bde0:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800bde4:	429a      	cmp	r2, r3
 800bde6:	d10a      	bne.n	800bdfe <Siemens_Data_Analyser+0x6aa>
		{
			Temp_Siemens_RX_st.ExtSourceAddr += 4;
 800bde8:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bdec:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bdf0:	695b      	ldr	r3, [r3, #20]
 800bdf2:	1d1a      	adds	r2, r3, #4
 800bdf4:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bdf8:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bdfc:	615a      	str	r2, [r3, #20]
		}
	}
#endif


	if(Temp_Siemens_RX_st.ExtSourceAddr != EI_data.Siemens_st.SourceAddress)
 800bdfe:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800be02:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800be06:	695a      	ldr	r2, [r3, #20]
 800be08:	4b28      	ldr	r3, [pc, #160]	; (800beac <Siemens_Data_Analyser+0x758>)
 800be0a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800be0e:	429a      	cmp	r2, r3
 800be10:	d015      	beq.n	800be3e <Siemens_Data_Analyser+0x6ea>
	{
		printf("Source Address Not Matched\n");
 800be12:	4833      	ldr	r0, [pc, #204]	; (800bee0 <Siemens_Data_Analyser+0x78c>)
 800be14:	f016 ff0e 	bl	8022c34 <puts>
		printf("Received:%lu\n",Temp_Siemens_RX_st.ExtSourceAddr);
 800be18:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800be1c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800be20:	695b      	ldr	r3, [r3, #20]
 800be22:	4619      	mov	r1, r3
 800be24:	4823      	ldr	r0, [pc, #140]	; (800beb4 <Siemens_Data_Analyser+0x760>)
 800be26:	f016 fe69 	bl	8022afc <iprintf>
		printf("Expected:%lu\n",EI_data.Siemens_st.SourceAddress);
 800be2a:	4b20      	ldr	r3, [pc, #128]	; (800beac <Siemens_Data_Analyser+0x758>)
 800be2c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800be30:	4619      	mov	r1, r3
 800be32:	4821      	ldr	r0, [pc, #132]	; (800beb8 <Siemens_Data_Analyser+0x764>)
 800be34:	f016 fe62 	bl	8022afc <iprintf>
		RejectPacketFlag = 1;
 800be38:	2301      	movs	r3, #1
 800be3a:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("src_add:%lu\n",Temp_Siemens_RX_st.src_add);
	BITSTUFFINC(24);//Source Address
 800be3e:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800be42:	3318      	adds	r3, #24
 800be44:	2b00      	cmp	r3, #0
 800be46:	da00      	bge.n	800be4a <Siemens_Data_Analyser+0x6f6>
 800be48:	3307      	adds	r3, #7
 800be4a:	10db      	asrs	r3, r3, #3
 800be4c:	b29a      	uxth	r2, r3
 800be4e:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800be52:	4413      	add	r3, r2
 800be54:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800be58:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800be5c:	3318      	adds	r3, #24
 800be5e:	b29b      	uxth	r3, r3
 800be60:	b21b      	sxth	r3, r3
 800be62:	425a      	negs	r2, r3
 800be64:	f003 0307 	and.w	r3, r3, #7
 800be68:	f002 0207 	and.w	r2, r2, #7
 800be6c:	bf58      	it	pl
 800be6e:	4253      	negpl	r3, r2
 800be70:	b21b      	sxth	r3, r3
 800be72:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.ProdDataVer = Extract_Parity_Data(ucBit,8,&Buff[ucByte],EVEN_PARITY);
 800be76:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800be7a:	b2d8      	uxtb	r0, r3
 800be7c:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800be80:	f107 020c 	add.w	r2, r7, #12
 800be84:	441a      	add	r2, r3
 800be86:	2300      	movs	r3, #0
 800be88:	2108      	movs	r1, #8
 800be8a:	f001 fe3f 	bl	800db0c <Extract_Parity_Data>
 800be8e:	4603      	mov	r3, r0
 800be90:	b2da      	uxtb	r2, r3
 800be92:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800be96:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800be9a:	761a      	strb	r2, [r3, #24]
	//	printf("prod_data_ver:%u\n",Temp_Siemens_RX_st.prod_data_ver);
	BITSTUFFINC(8);//Product Data Version
 800be9c:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800bea0:	3308      	adds	r3, #8
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	da1e      	bge.n	800bee4 <Siemens_Data_Analyser+0x790>
 800bea6:	3307      	adds	r3, #7
 800bea8:	e01c      	b.n	800bee4 <Siemens_Data_Analyser+0x790>
 800beaa:	bf00      	nop
 800beac:	20000304 	.word	0x20000304
 800beb0:	08026388 	.word	0x08026388
 800beb4:	080263a8 	.word	0x080263a8
 800beb8:	080263b8 	.word	0x080263b8
 800bebc:	20003524 	.word	0x20003524
 800bec0:	080263c8 	.word	0x080263c8
 800bec4:	20009d2c 	.word	0x20009d2c
 800bec8:	80808081 	.word	0x80808081
 800becc:	080263e8 	.word	0x080263e8
 800bed0:	08026368 	.word	0x08026368
 800bed4:	08026378 	.word	0x08026378
 800bed8:	080264fc 	.word	0x080264fc
 800bedc:	08026408 	.word	0x08026408
 800bee0:	08026424 	.word	0x08026424
 800bee4:	10db      	asrs	r3, r3, #3
 800bee6:	b29a      	uxth	r2, r3
 800bee8:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800beec:	4413      	add	r3, r2
 800beee:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800bef2:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800bef6:	3308      	adds	r3, #8
 800bef8:	b29b      	uxth	r3, r3
 800befa:	b21b      	sxth	r3, r3
 800befc:	425a      	negs	r2, r3
 800befe:	f003 0307 	and.w	r3, r3, #7
 800bf02:	f002 0207 	and.w	r2, r2, #7
 800bf06:	bf58      	it	pl
 800bf08:	4253      	negpl	r3, r2
 800bf0a:	b21b      	sxth	r3, r3
 800bf0c:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.CompIndex = Extract_Parity_Data(ucBit,8,&Buff[ucByte],ODD_PARITY);
 800bf10:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800bf14:	b2d8      	uxtb	r0, r3
 800bf16:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bf1a:	f107 020c 	add.w	r2, r7, #12
 800bf1e:	441a      	add	r2, r3
 800bf20:	2301      	movs	r3, #1
 800bf22:	2108      	movs	r1, #8
 800bf24:	f001 fdf2 	bl	800db0c <Extract_Parity_Data>
 800bf28:	4603      	mov	r3, r0
 800bf2a:	b2da      	uxtb	r2, r3
 800bf2c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bf30:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bf34:	765a      	strb	r2, [r3, #25]
	//	printf("comp_index:%u\n",Temp_Siemens_RX_st.comp_index);
	BITSTUFFINC(8);//Compatability Index
 800bf36:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800bf3a:	3308      	adds	r3, #8
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	da00      	bge.n	800bf42 <Siemens_Data_Analyser+0x7ee>
 800bf40:	3307      	adds	r3, #7
 800bf42:	10db      	asrs	r3, r3, #3
 800bf44:	b29a      	uxth	r2, r3
 800bf46:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bf4a:	4413      	add	r3, r2
 800bf4c:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800bf50:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800bf54:	3308      	adds	r3, #8
 800bf56:	b29b      	uxth	r3, r3
 800bf58:	b21b      	sxth	r3, r3
 800bf5a:	425a      	negs	r2, r3
 800bf5c:	f003 0307 	and.w	r3, r3, #7
 800bf60:	f002 0207 	and.w	r2, r2, #7
 800bf64:	bf58      	it	pl
 800bf66:	4253      	negpl	r3, r2
 800bf68:	b21b      	sxth	r3, r3
 800bf6a:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.DestPort = Extract_Parity_Data(ucBit,8,&Buff[ucByte],NO_PARITY);
 800bf6e:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800bf72:	b2d8      	uxtb	r0, r3
 800bf74:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bf78:	f107 020c 	add.w	r2, r7, #12
 800bf7c:	441a      	add	r2, r3
 800bf7e:	2302      	movs	r3, #2
 800bf80:	2108      	movs	r1, #8
 800bf82:	f001 fdc3 	bl	800db0c <Extract_Parity_Data>
 800bf86:	4603      	mov	r3, r0
 800bf88:	b2da      	uxtb	r2, r3
 800bf8a:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bf8e:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bf92:	769a      	strb	r2, [r3, #26]

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_DES_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800bf94:	4bab      	ldr	r3, [pc, #684]	; (800c244 <Siemens_Data_Analyser+0xaf0>)
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	08db      	lsrs	r3, r3, #3
 800bf9a:	f003 0301 	and.w	r3, r3, #1
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d02a      	beq.n	800bff8 <Siemens_Data_Analyser+0x8a4>
	{
		printf("Injecting INVALID_DES_PORT\n");
 800bfa2:	48a9      	ldr	r0, [pc, #676]	; (800c248 <Siemens_Data_Analyser+0xaf4>)
 800bfa4:	f016 fe46 	bl	8022c34 <puts>
		Temp_Siemens_RX_st.DestPort = HAL_RNG_GetRandomNumber(&hrng) % 0xff;
 800bfa8:	48a8      	ldr	r0, [pc, #672]	; (800c24c <Siemens_Data_Analyser+0xaf8>)
 800bfaa:	f00e fa4f 	bl	801a44c <HAL_RNG_GetRandomNumber>
 800bfae:	4601      	mov	r1, r0
 800bfb0:	4ba7      	ldr	r3, [pc, #668]	; (800c250 <Siemens_Data_Analyser+0xafc>)
 800bfb2:	fba3 2301 	umull	r2, r3, r3, r1
 800bfb6:	09da      	lsrs	r2, r3, #7
 800bfb8:	4613      	mov	r3, r2
 800bfba:	021b      	lsls	r3, r3, #8
 800bfbc:	1a9b      	subs	r3, r3, r2
 800bfbe:	1aca      	subs	r2, r1, r3
 800bfc0:	b2d2      	uxtb	r2, r2
 800bfc2:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bfc6:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bfca:	769a      	strb	r2, [r3, #26]
		if(Temp_Siemens_RX_st.DestPort == EI_data.Siemens_st.DestPort)
 800bfcc:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bfd0:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bfd4:	7e9a      	ldrb	r2, [r3, #26]
 800bfd6:	4b9f      	ldr	r3, [pc, #636]	; (800c254 <Siemens_Data_Analyser+0xb00>)
 800bfd8:	f893 32a3 	ldrb.w	r3, [r3, #675]	; 0x2a3
 800bfdc:	429a      	cmp	r2, r3
 800bfde:	d10b      	bne.n	800bff8 <Siemens_Data_Analyser+0x8a4>
		{
			Temp_Siemens_RX_st.DestPort += 4;
 800bfe0:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bfe4:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bfe8:	7e9b      	ldrb	r3, [r3, #26]
 800bfea:	3304      	adds	r3, #4
 800bfec:	b2da      	uxtb	r2, r3
 800bfee:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bff2:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bff6:	769a      	strb	r2, [r3, #26]
		}
	}
#endif

	if(Temp_Siemens_RX_st.DestPort != EI_data.Siemens_st.DestPort)
 800bff8:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bffc:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c000:	7e9a      	ldrb	r2, [r3, #26]
 800c002:	4b94      	ldr	r3, [pc, #592]	; (800c254 <Siemens_Data_Analyser+0xb00>)
 800c004:	f893 32a3 	ldrb.w	r3, [r3, #675]	; 0x2a3
 800c008:	429a      	cmp	r2, r3
 800c00a:	d015      	beq.n	800c038 <Siemens_Data_Analyser+0x8e4>
	{
		printf("Destination Port Not Matched\n");
 800c00c:	4892      	ldr	r0, [pc, #584]	; (800c258 <Siemens_Data_Analyser+0xb04>)
 800c00e:	f016 fe11 	bl	8022c34 <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.DestPort);
 800c012:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c016:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c01a:	7e9b      	ldrb	r3, [r3, #26]
 800c01c:	4619      	mov	r1, r3
 800c01e:	488f      	ldr	r0, [pc, #572]	; (800c25c <Siemens_Data_Analyser+0xb08>)
 800c020:	f016 fd6c 	bl	8022afc <iprintf>
		printf("Expected:%u\n",EI_data.Siemens_st.DestPort);
 800c024:	4b8b      	ldr	r3, [pc, #556]	; (800c254 <Siemens_Data_Analyser+0xb00>)
 800c026:	f893 32a3 	ldrb.w	r3, [r3, #675]	; 0x2a3
 800c02a:	4619      	mov	r1, r3
 800c02c:	488c      	ldr	r0, [pc, #560]	; (800c260 <Siemens_Data_Analyser+0xb0c>)
 800c02e:	f016 fd65 	bl	8022afc <iprintf>
		RejectPacketFlag = 1;
 800c032:	2301      	movs	r3, #1
 800c034:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("dst_port:%u\n",Temp_Siemens_RX_st.dst_port);
	BITSTUFFINC(8); //Dest Port.
 800c038:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800c03c:	3308      	adds	r3, #8
 800c03e:	2b00      	cmp	r3, #0
 800c040:	da00      	bge.n	800c044 <Siemens_Data_Analyser+0x8f0>
 800c042:	3307      	adds	r3, #7
 800c044:	10db      	asrs	r3, r3, #3
 800c046:	b29a      	uxth	r2, r3
 800c048:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800c04c:	4413      	add	r3, r2
 800c04e:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800c052:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800c056:	3308      	adds	r3, #8
 800c058:	b29b      	uxth	r3, r3
 800c05a:	b21b      	sxth	r3, r3
 800c05c:	425a      	negs	r2, r3
 800c05e:	f003 0307 	and.w	r3, r3, #7
 800c062:	f002 0207 	and.w	r2, r2, #7
 800c066:	bf58      	it	pl
 800c068:	4253      	negpl	r3, r2
 800c06a:	b21b      	sxth	r3, r3
 800c06c:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.SourcePort = Extract_Parity_Data(ucBit,8,&Buff[ucByte],NO_PARITY);
 800c070:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800c074:	b2d8      	uxtb	r0, r3
 800c076:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800c07a:	f107 020c 	add.w	r2, r7, #12
 800c07e:	441a      	add	r2, r3
 800c080:	2302      	movs	r3, #2
 800c082:	2108      	movs	r1, #8
 800c084:	f001 fd42 	bl	800db0c <Extract_Parity_Data>
 800c088:	4603      	mov	r3, r0
 800c08a:	b2da      	uxtb	r2, r3
 800c08c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c090:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c094:	76da      	strb	r2, [r3, #27]

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_SRC_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800c096:	4b6b      	ldr	r3, [pc, #428]	; (800c244 <Siemens_Data_Analyser+0xaf0>)
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	091b      	lsrs	r3, r3, #4
 800c09c:	f003 0301 	and.w	r3, r3, #1
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d02a      	beq.n	800c0fa <Siemens_Data_Analyser+0x9a6>
	{
		printf("Injecting INVALID_SRC_PORT\n");
 800c0a4:	486f      	ldr	r0, [pc, #444]	; (800c264 <Siemens_Data_Analyser+0xb10>)
 800c0a6:	f016 fdc5 	bl	8022c34 <puts>
		Temp_Siemens_RX_st.SourcePort = HAL_RNG_GetRandomNumber(&hrng) % 0xff;
 800c0aa:	4868      	ldr	r0, [pc, #416]	; (800c24c <Siemens_Data_Analyser+0xaf8>)
 800c0ac:	f00e f9ce 	bl	801a44c <HAL_RNG_GetRandomNumber>
 800c0b0:	4601      	mov	r1, r0
 800c0b2:	4b67      	ldr	r3, [pc, #412]	; (800c250 <Siemens_Data_Analyser+0xafc>)
 800c0b4:	fba3 2301 	umull	r2, r3, r3, r1
 800c0b8:	09da      	lsrs	r2, r3, #7
 800c0ba:	4613      	mov	r3, r2
 800c0bc:	021b      	lsls	r3, r3, #8
 800c0be:	1a9b      	subs	r3, r3, r2
 800c0c0:	1aca      	subs	r2, r1, r3
 800c0c2:	b2d2      	uxtb	r2, r2
 800c0c4:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c0c8:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c0cc:	76da      	strb	r2, [r3, #27]
		if(Temp_Siemens_RX_st.SourcePort == EI_data.Siemens_st.SourcePort)
 800c0ce:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c0d2:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c0d6:	7eda      	ldrb	r2, [r3, #27]
 800c0d8:	4b5e      	ldr	r3, [pc, #376]	; (800c254 <Siemens_Data_Analyser+0xb00>)
 800c0da:	f893 32a4 	ldrb.w	r3, [r3, #676]	; 0x2a4
 800c0de:	429a      	cmp	r2, r3
 800c0e0:	d10b      	bne.n	800c0fa <Siemens_Data_Analyser+0x9a6>
		{
			Temp_Siemens_RX_st.SourcePort += 4;
 800c0e2:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c0e6:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c0ea:	7edb      	ldrb	r3, [r3, #27]
 800c0ec:	3304      	adds	r3, #4
 800c0ee:	b2da      	uxtb	r2, r3
 800c0f0:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c0f4:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c0f8:	76da      	strb	r2, [r3, #27]
		}
	}
#endif

	if(Temp_Siemens_RX_st.SourcePort != EI_data.Siemens_st.SourcePort)
 800c0fa:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c0fe:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c102:	7eda      	ldrb	r2, [r3, #27]
 800c104:	4b53      	ldr	r3, [pc, #332]	; (800c254 <Siemens_Data_Analyser+0xb00>)
 800c106:	f893 32a4 	ldrb.w	r3, [r3, #676]	; 0x2a4
 800c10a:	429a      	cmp	r2, r3
 800c10c:	d015      	beq.n	800c13a <Siemens_Data_Analyser+0x9e6>
	{
		printf("Source Port Not Matched\n");
 800c10e:	4856      	ldr	r0, [pc, #344]	; (800c268 <Siemens_Data_Analyser+0xb14>)
 800c110:	f016 fd90 	bl	8022c34 <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.SourcePort);
 800c114:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c118:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c11c:	7edb      	ldrb	r3, [r3, #27]
 800c11e:	4619      	mov	r1, r3
 800c120:	484e      	ldr	r0, [pc, #312]	; (800c25c <Siemens_Data_Analyser+0xb08>)
 800c122:	f016 fceb 	bl	8022afc <iprintf>
		printf("Expected:%u\n",EI_data.Siemens_st.SourcePort);
 800c126:	4b4b      	ldr	r3, [pc, #300]	; (800c254 <Siemens_Data_Analyser+0xb00>)
 800c128:	f893 32a4 	ldrb.w	r3, [r3, #676]	; 0x2a4
 800c12c:	4619      	mov	r1, r3
 800c12e:	484c      	ldr	r0, [pc, #304]	; (800c260 <Siemens_Data_Analyser+0xb0c>)
 800c130:	f016 fce4 	bl	8022afc <iprintf>
		RejectPacketFlag = 1;
 800c134:	2301      	movs	r3, #1
 800c136:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("src_port:%u\n",Temp_Siemens_RX_st.src_port);
	BITSTUFFINC(8); // Source Port.
 800c13a:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800c13e:	3308      	adds	r3, #8
 800c140:	2b00      	cmp	r3, #0
 800c142:	da00      	bge.n	800c146 <Siemens_Data_Analyser+0x9f2>
 800c144:	3307      	adds	r3, #7
 800c146:	10db      	asrs	r3, r3, #3
 800c148:	b29a      	uxth	r2, r3
 800c14a:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800c14e:	4413      	add	r3, r2
 800c150:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800c154:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800c158:	3308      	adds	r3, #8
 800c15a:	b29b      	uxth	r3, r3
 800c15c:	b21b      	sxth	r3, r3
 800c15e:	425a      	negs	r2, r3
 800c160:	f003 0307 	and.w	r3, r3, #7
 800c164:	f002 0207 	and.w	r2, r2, #7
 800c168:	bf58      	it	pl
 800c16a:	4253      	negpl	r3, r2
 800c16c:	b21b      	sxth	r3, r3
 800c16e:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46


	Temp_Siemens_RX_st.RxTimeStamp = Extract_Parity_Data(ucBit,32,&Buff[ucByte],NO_PARITY);
 800c172:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800c176:	b2d8      	uxtb	r0, r3
 800c178:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800c17c:	f107 020c 	add.w	r2, r7, #12
 800c180:	441a      	add	r2, r3
 800c182:	2302      	movs	r3, #2
 800c184:	2120      	movs	r1, #32
 800c186:	f001 fcc1 	bl	800db0c <Extract_Parity_Data>
 800c18a:	4603      	mov	r3, r0
 800c18c:	461a      	mov	r2, r3
 800c18e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c192:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c196:	61da      	str	r2, [r3, #28]
	//	printf("Rx_time_stamp:%lu\n",Temp_Siemens_RX_st.Rx_time_stamp);
	BITSTUFFINC(32);//RX_TIME STAMP
 800c198:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800c19c:	3320      	adds	r3, #32
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	da00      	bge.n	800c1a4 <Siemens_Data_Analyser+0xa50>
 800c1a2:	3307      	adds	r3, #7
 800c1a4:	10db      	asrs	r3, r3, #3
 800c1a6:	b29a      	uxth	r2, r3
 800c1a8:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800c1ac:	4413      	add	r3, r2
 800c1ae:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800c1b2:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800c1b6:	3320      	adds	r3, #32
 800c1b8:	b29b      	uxth	r3, r3
 800c1ba:	b21b      	sxth	r3, r3
 800c1bc:	425a      	negs	r2, r3
 800c1be:	f003 0307 	and.w	r3, r3, #7
 800c1c2:	f002 0207 	and.w	r2, r2, #7
 800c1c6:	bf58      	it	pl
 800c1c8:	4253      	negpl	r3, r2
 800c1ca:	b21b      	sxth	r3, r3
 800c1cc:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46


	Temp_Siemens_RX_st.TxTimeStamp = Extract_Parity_Data(ucBit,32,&Buff[ucByte],NO_PARITY);
 800c1d0:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800c1d4:	b2d8      	uxtb	r0, r3
 800c1d6:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800c1da:	f107 020c 	add.w	r2, r7, #12
 800c1de:	441a      	add	r2, r3
 800c1e0:	2302      	movs	r3, #2
 800c1e2:	2120      	movs	r1, #32
 800c1e4:	f001 fc92 	bl	800db0c <Extract_Parity_Data>
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	461a      	mov	r2, r3
 800c1ec:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c1f0:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c1f4:	621a      	str	r2, [r3, #32]
	//	printf("Tx_time_stamp:%lu\n",Temp_Siemens_RX_st.Tx_time_stamp);
	BITSTUFFINC(32);//TX_TIME STAMP
 800c1f6:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800c1fa:	3320      	adds	r3, #32
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	da00      	bge.n	800c202 <Siemens_Data_Analyser+0xaae>
 800c200:	3307      	adds	r3, #7
 800c202:	10db      	asrs	r3, r3, #3
 800c204:	b29a      	uxth	r2, r3
 800c206:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800c20a:	4413      	add	r3, r2
 800c20c:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800c210:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800c214:	3320      	adds	r3, #32
 800c216:	b29b      	uxth	r3, r3
 800c218:	b21b      	sxth	r3, r3
 800c21a:	425a      	negs	r2, r3
 800c21c:	f003 0307 	and.w	r3, r3, #7
 800c220:	f002 0207 	and.w	r2, r2, #7
 800c224:	bf58      	it	pl
 800c226:	4253      	negpl	r3, r2
 800c228:	b21b      	sxth	r3, r3
 800c22a:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	//TO DO WRITE DATA EXTRACTION
	App_data_Size = 0;
 800c22e:	2300      	movs	r3, #0
 800c230:	f8a7 3a4e 	strh.w	r3, [r7, #2638]	; 0xa4e
	printf("\n");
 800c234:	200a      	movs	r0, #10
 800c236:	f016 fc79 	bl	8022b2c <putchar>
	for(Data_Traverser = ucByte; Data_Traverser <Recv_CRC_Loc; Data_Traverser++)
 800c23a:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800c23e:	f887 3a57 	strb.w	r3, [r7, #2647]	; 0xa57
 800c242:	e052      	b.n	800c2ea <Siemens_Data_Analyser+0xb96>
 800c244:	20003524 	.word	0x20003524
 800c248:	08026440 	.word	0x08026440
 800c24c:	20009d2c 	.word	0x20009d2c
 800c250:	80808081 	.word	0x80808081
 800c254:	20000304 	.word	0x20000304
 800c258:	0802645c 	.word	0x0802645c
 800c25c:	08026368 	.word	0x08026368
 800c260:	08026378 	.word	0x08026378
 800c264:	0802647c 	.word	0x0802647c
 800c268:	08026498 	.word	0x08026498
	{
		App_Data[App_data_Traverser++] = Extract_Parity_Data(ucBit,8,&Buff[Data_Traverser],EVEN_PARITY);
 800c26c:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800c270:	b2d8      	uxtb	r0, r3
 800c272:	f897 3a57 	ldrb.w	r3, [r7, #2647]	; 0xa57
 800c276:	f107 020c 	add.w	r2, r7, #12
 800c27a:	441a      	add	r2, r3
 800c27c:	2300      	movs	r3, #0
 800c27e:	2108      	movs	r1, #8
 800c280:	f001 fc44 	bl	800db0c <Extract_Parity_Data>
 800c284:	4601      	mov	r1, r0
 800c286:	f8b7 3a50 	ldrh.w	r3, [r7, #2640]	; 0xa50
 800c28a:	1c5a      	adds	r2, r3, #1
 800c28c:	f8a7 2a50 	strh.w	r2, [r7, #2640]	; 0xa50
 800c290:	461a      	mov	r2, r3
 800c292:	b2c9      	uxtb	r1, r1
 800c294:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c298:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800c29c:	5499      	strb	r1, [r3, r2]
		//printf("D[%02u]:%02x|",App_data_Size,App_Data[App_data_Size]);
		//Temp_Siemens_RX_st.app_data[App_data_Traverser++] = Extract_Parity_Data(ucBit,8,&Buff[Data_Traverser],EVEN_PARITY);
		//Extract the Received application data into buffer and checking parity and Removing Parity.
		++App_data_Size; //This variable is to know the Latest Size of Received Application Data
 800c29e:	f8b7 3a4e 	ldrh.w	r3, [r7, #2638]	; 0xa4e
 800c2a2:	3301      	adds	r3, #1
 800c2a4:	f8a7 3a4e 	strh.w	r3, [r7, #2638]	; 0xa4e
		BITSTUFFINC(8);
 800c2a8:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800c2ac:	3308      	adds	r3, #8
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	da00      	bge.n	800c2b4 <Siemens_Data_Analyser+0xb60>
 800c2b2:	3307      	adds	r3, #7
 800c2b4:	10db      	asrs	r3, r3, #3
 800c2b6:	b29a      	uxth	r2, r3
 800c2b8:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800c2bc:	4413      	add	r3, r2
 800c2be:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800c2c2:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800c2c6:	3308      	adds	r3, #8
 800c2c8:	b29b      	uxth	r3, r3
 800c2ca:	b21b      	sxth	r3, r3
 800c2cc:	425a      	negs	r2, r3
 800c2ce:	f003 0307 	and.w	r3, r3, #7
 800c2d2:	f002 0207 	and.w	r2, r2, #7
 800c2d6:	bf58      	it	pl
 800c2d8:	4253      	negpl	r3, r2
 800c2da:	b21b      	sxth	r3, r3
 800c2dc:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46
	for(Data_Traverser = ucByte; Data_Traverser <Recv_CRC_Loc; Data_Traverser++)
 800c2e0:	f897 3a57 	ldrb.w	r3, [r7, #2647]	; 0xa57
 800c2e4:	3301      	adds	r3, #1
 800c2e6:	f887 3a57 	strb.w	r3, [r7, #2647]	; 0xa57
 800c2ea:	f897 3a57 	ldrb.w	r3, [r7, #2647]	; 0xa57
 800c2ee:	b29b      	uxth	r3, r3
 800c2f0:	f8b7 2a40 	ldrh.w	r2, [r7, #2624]	; 0xa40
 800c2f4:	429a      	cmp	r2, r3
 800c2f6:	d8b9      	bhi.n	800c26c <Siemens_Data_Analyser+0xb18>
	}
	printf("\n");
 800c2f8:	200a      	movs	r0, #10
 800c2fa:	f016 fc17 	bl	8022b2c <putchar>



	Temp_Siemens_RX_st.No_ofDataBytes = ExtractAppData(App_Data, App_data_Size, Temp_Siemens_RX_st.AppData);
 800c2fe:	f207 630c 	addw	r3, r7, #1548	; 0x60c
 800c302:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800c306:	f8b7 1a4e 	ldrh.w	r1, [r7, #2638]	; 0xa4e
 800c30a:	f607 0334 	addw	r3, r7, #2100	; 0x834
 800c30e:	4618      	mov	r0, r3
 800c310:	f000 f96e 	bl	800c5f0 <ExtractAppData>
 800c314:	4603      	mov	r3, r0
 800c316:	461a      	mov	r2, r3
 800c318:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c31c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c320:	849a      	strh	r2, [r3, #36]	; 0x24

	//	Temp_Siemens_RX_st.No_ofDataBytes = App_data_Size;

	TempApp_data_Size  = EI_data.Siemens_st.Booloutputs % 8;
 800c322:	4ba0      	ldr	r3, [pc, #640]	; (800c5a4 <Siemens_Data_Analyser+0xe50>)
 800c324:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800c328:	f003 0307 	and.w	r3, r3, #7
 800c32c:	f8a7 3a4c 	strh.w	r3, [r7, #2636]	; 0xa4c
	if(TempApp_data_Size!= 0)
 800c330:	f8b7 3a4c 	ldrh.w	r3, [r7, #2636]	; 0xa4c
 800c334:	2b00      	cmp	r3, #0
 800c336:	d008      	beq.n	800c34a <Siemens_Data_Analyser+0xbf6>
	{
		TempApp_data_Size  = (EI_data.Siemens_st.Booloutputs / 8) + 1;
 800c338:	4b9a      	ldr	r3, [pc, #616]	; (800c5a4 <Siemens_Data_Analyser+0xe50>)
 800c33a:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800c33e:	08db      	lsrs	r3, r3, #3
 800c340:	b29b      	uxth	r3, r3
 800c342:	3301      	adds	r3, #1
 800c344:	f8a7 3a4c 	strh.w	r3, [r7, #2636]	; 0xa4c
 800c348:	e005      	b.n	800c356 <Siemens_Data_Analyser+0xc02>
	}
	else
	{
		TempApp_data_Size  = (EI_data.Siemens_st.Booloutputs/8);
 800c34a:	4b96      	ldr	r3, [pc, #600]	; (800c5a4 <Siemens_Data_Analyser+0xe50>)
 800c34c:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800c350:	08db      	lsrs	r3, r3, #3
 800c352:	f8a7 3a4c 	strh.w	r3, [r7, #2636]	; 0xa4c
	}


	if(Temp_Siemens_RX_st.No_ofDataBytes != TempApp_data_Size)
 800c356:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c35a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c35e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c360:	f8b7 2a4c 	ldrh.w	r2, [r7, #2636]	; 0xa4c
 800c364:	429a      	cmp	r2, r3
 800c366:	d02c      	beq.n	800c3c2 <Siemens_Data_Analyser+0xc6e>
	{
		printf("Application Data Not Matched\n");
 800c368:	488f      	ldr	r0, [pc, #572]	; (800c5a8 <Siemens_Data_Analyser+0xe54>)
 800c36a:	f016 fc63 	bl	8022c34 <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.No_ofDataBytes);
 800c36e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c372:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c376:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c378:	4619      	mov	r1, r3
 800c37a:	488c      	ldr	r0, [pc, #560]	; (800c5ac <Siemens_Data_Analyser+0xe58>)
 800c37c:	f016 fbbe 	bl	8022afc <iprintf>
		printf("Expected:%u\n",TempApp_data_Size);
 800c380:	f8b7 3a4c 	ldrh.w	r3, [r7, #2636]	; 0xa4c
 800c384:	4619      	mov	r1, r3
 800c386:	488a      	ldr	r0, [pc, #552]	; (800c5b0 <Siemens_Data_Analyser+0xe5c>)
 800c388:	f016 fbb8 	bl	8022afc <iprintf>

		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)
 800c38c:	4989      	ldr	r1, [pc, #548]	; (800c5b4 <Siemens_Data_Analyser+0xe60>)
 800c38e:	488a      	ldr	r0, [pc, #552]	; (800c5b8 <Siemens_Data_Analyser+0xe64>)
 800c390:	f7f3 ff56 	bl	8000240 <strcmp>
 800c394:	4603      	mov	r3, r0
 800c396:	2b00      	cmp	r3, #0
 800c398:	d002      	beq.n	800c3a0 <Siemens_Data_Analyser+0xc4c>
		{
			RejectPacketFlag = 1;
 800c39a:	2301      	movs	r3, #1
 800c39c:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
		}
		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 800c3a0:	4984      	ldr	r1, [pc, #528]	; (800c5b4 <Siemens_Data_Analyser+0xe60>)
 800c3a2:	4885      	ldr	r0, [pc, #532]	; (800c5b8 <Siemens_Data_Analyser+0xe64>)
 800c3a4:	f7f3 ff4c 	bl	8000240 <strcmp>
 800c3a8:	4603      	mov	r3, r0
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d109      	bne.n	800c3c2 <Siemens_Data_Analyser+0xc6e>
		{
			EI_data.Siemens_st.Booloutputs = (Temp_Siemens_RX_st.No_ofDataBytes * 8);
 800c3ae:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c3b2:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c3b6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c3b8:	00db      	lsls	r3, r3, #3
 800c3ba:	b29a      	uxth	r2, r3
 800c3bc:	4b79      	ldr	r3, [pc, #484]	; (800c5a4 <Siemens_Data_Analyser+0xe50>)
 800c3be:	f8a3 22fe 	strh.w	r2, [r3, #766]	; 0x2fe
		}
	}

	if(RejectPacketFlag == 1)
 800c3c2:	f897 3a4b 	ldrb.w	r3, [r7, #2635]	; 0xa4b
 800c3c6:	2b01      	cmp	r3, #1
 800c3c8:	f000 80e6 	beq.w	800c598 <Siemens_Data_Analyser+0xe44>
	{
		return;
	}

	VitalCRC = GetCRC16(0, Temp_Siemens_RX_st.AppData, App_data_Size); /* Calculating Application Data CRC */
 800c3cc:	f9b7 2a4e 	ldrsh.w	r2, [r7, #2638]	; 0xa4e
 800c3d0:	f207 630c 	addw	r3, r7, #1548	; 0x60c
 800c3d4:	3326      	adds	r3, #38	; 0x26
 800c3d6:	4619      	mov	r1, r3
 800c3d8:	2000      	movs	r0, #0
 800c3da:	f006 fef3 	bl	80131c4 <GetCRC16>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	f8a7 3a38 	strh.w	r3, [r7, #2616]	; 0xa38

	Temp_Siemens_RX_st.crc = ExtractBits(0,16,&Buff[ucByte]); /* Extraction of Packet CRC */
 800c3e4:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800c3e8:	f107 020c 	add.w	r2, r7, #12
 800c3ec:	4413      	add	r3, r2
 800c3ee:	461a      	mov	r2, r3
 800c3f0:	2110      	movs	r1, #16
 800c3f2:	2000      	movs	r0, #0
 800c3f4:	f7f4 f90e 	bl	8000614 <ExtractBits>
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	b29a      	uxth	r2, r3
 800c3fc:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c400:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c404:	f8a3 2226 	strh.w	r2, [r3, #550]	; 0x226




	/* if Everything is Okay copy to Main Rx Structure */
	memset(&Siemens_RX_st,0,sizeof(SIEMENS_PKT_t));
 800c408:	f44f 720a 	mov.w	r2, #552	; 0x228
 800c40c:	2100      	movs	r1, #0
 800c40e:	486b      	ldr	r0, [pc, #428]	; (800c5bc <Siemens_Data_Analyser+0xe68>)
 800c410:	f016 fa8c 	bl	802292c <memset>
	memcpy(&Siemens_RX_st,&Temp_Siemens_RX_st,sizeof(SIEMENS_PKT_t));
 800c414:	4a69      	ldr	r2, [pc, #420]	; (800c5bc <Siemens_Data_Analyser+0xe68>)
 800c416:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c41a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c41e:	4610      	mov	r0, r2
 800c420:	4619      	mov	r1, r3
 800c422:	f44f 730a 	mov.w	r3, #552	; 0x228
 800c426:	461a      	mov	r2, r3
 800c428:	f016 fa58 	bl	80228dc <memcpy>

	/* Send Reply to Received Packet */
	Form_Siemens_Reply();
 800c42c:	f000 f936 	bl	800c69c <Form_Siemens_Reply>




	//	if( (RxTimeStampNotUpdatedCount <= EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount)  ) /* Consider the Packet If our Time stamp is Updating only (or) up to Certain count */
	if( abs(RxTimeStampNotUpdatedCount - EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) <= EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount)
 800c430:	4b63      	ldr	r3, [pc, #396]	; (800c5c0 <Siemens_Data_Analyser+0xe6c>)
 800c432:	881b      	ldrh	r3, [r3, #0]
 800c434:	461a      	mov	r2, r3
 800c436:	4b5b      	ldr	r3, [pc, #364]	; (800c5a4 <Siemens_Data_Analyser+0xe50>)
 800c438:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800c43c:	1ad3      	subs	r3, r2, r3
 800c43e:	2b00      	cmp	r3, #0
 800c440:	bfb8      	it	lt
 800c442:	425b      	neglt	r3, r3
 800c444:	461a      	mov	r2, r3
 800c446:	4b57      	ldr	r3, [pc, #348]	; (800c5a4 <Siemens_Data_Analyser+0xe50>)
 800c448:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800c44c:	429a      	cmp	r2, r3
 800c44e:	d871      	bhi.n	800c534 <Siemens_Data_Analyser+0xde0>
	{
		if(Prev_RxTimeStampSiemens != Temp_Siemens_RX_st.RxTimeStamp)
 800c450:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c454:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c458:	69da      	ldr	r2, [r3, #28]
 800c45a:	4b5a      	ldr	r3, [pc, #360]	; (800c5c4 <Siemens_Data_Analyser+0xe70>)
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	429a      	cmp	r2, r3
 800c460:	d04c      	beq.n	800c4fc <Siemens_Data_Analyser+0xda8>
		{
			/* Update Clocks if Any */
			//			printf("Updating...\n");
			SiemensClocks_st.LastReceiveClk = HAL_GetTick();
 800c462:	f009 fb41 	bl	8015ae8 <HAL_GetTick>
 800c466:	4603      	mov	r3, r0
 800c468:	4a57      	ldr	r2, [pc, #348]	; (800c5c8 <Siemens_Data_Analyser+0xe74>)
 800c46a:	60d3      	str	r3, [r2, #12]



			Prev_RxTimeStampSiemens = Temp_Siemens_RX_st.RxTimeStamp;
 800c46c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c470:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c474:	69db      	ldr	r3, [r3, #28]
 800c476:	4a53      	ldr	r2, [pc, #332]	; (800c5c4 <Siemens_Data_Analyser+0xe70>)
 800c478:	6013      	str	r3, [r2, #0]
			RxTimeStampNotUpdatedCount = 0;
 800c47a:	4b51      	ldr	r3, [pc, #324]	; (800c5c0 <Siemens_Data_Analyser+0xe6c>)
 800c47c:	2200      	movs	r2, #0
 800c47e:	801a      	strh	r2, [r3, #0]
			//			printf("Siemens RxTS Updating:%u\n",RxTimeStampNotUpdatedCount);
			if(SiemensMain_Relays_st.VitalCRC != VitalCRC)
 800c480:	4b52      	ldr	r3, [pc, #328]	; (800c5cc <Siemens_Data_Analyser+0xe78>)
 800c482:	885b      	ldrh	r3, [r3, #2]
 800c484:	f8b7 2a38 	ldrh.w	r2, [r7, #2616]	; 0xa38
 800c488:	429a      	cmp	r2, r3
 800c48a:	d053      	beq.n	800c534 <Siemens_Data_Analyser+0xde0>
			{
				memset(&SiemensMain_Relays_st,0,sizeof(VITAL_DATA_SHARING_t));
 800c48c:	f44f 7201 	mov.w	r2, #516	; 0x204
 800c490:	2100      	movs	r1, #0
 800c492:	484e      	ldr	r0, [pc, #312]	; (800c5cc <Siemens_Data_Analyser+0xe78>)
 800c494:	f016 fa4a 	bl	802292c <memset>
				memset(&VitalData2MIE_st,0,sizeof(VITAL_DATA_t));
 800c498:	f240 2202 	movw	r2, #514	; 0x202
 800c49c:	2100      	movs	r1, #0
 800c49e:	484c      	ldr	r0, [pc, #304]	; (800c5d0 <Siemens_Data_Analyser+0xe7c>)
 800c4a0:	f016 fa44 	bl	802292c <memset>

				SiemensMain_Relays_st.VitalCRC = VitalCRC;
 800c4a4:	4a49      	ldr	r2, [pc, #292]	; (800c5cc <Siemens_Data_Analyser+0xe78>)
 800c4a6:	f8b7 3a38 	ldrh.w	r3, [r7, #2616]	; 0xa38
 800c4aa:	8053      	strh	r3, [r2, #2]
				SiemensMain_Relays_st.NoofDataBytes = Siemens_RX_st.No_ofDataBytes;
 800c4ac:	4b43      	ldr	r3, [pc, #268]	; (800c5bc <Siemens_Data_Analyser+0xe68>)
 800c4ae:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800c4b0:	4b46      	ldr	r3, [pc, #280]	; (800c5cc <Siemens_Data_Analyser+0xe78>)
 800c4b2:	801a      	strh	r2, [r3, #0]
				memcpy(&SiemensMain_Relays_st.Relays,&Siemens_RX_st.AppData,Siemens_RX_st.No_ofDataBytes);
 800c4b4:	4b41      	ldr	r3, [pc, #260]	; (800c5bc <Siemens_Data_Analyser+0xe68>)
 800c4b6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c4b8:	461a      	mov	r2, r3
 800c4ba:	4946      	ldr	r1, [pc, #280]	; (800c5d4 <Siemens_Data_Analyser+0xe80>)
 800c4bc:	4846      	ldr	r0, [pc, #280]	; (800c5d8 <Siemens_Data_Analyser+0xe84>)
 800c4be:	f016 fa0d 	bl	80228dc <memcpy>

				VitalData2MIE_st.NoofDataBytes = Siemens_RX_st.No_ofDataBytes;
 800c4c2:	4b3e      	ldr	r3, [pc, #248]	; (800c5bc <Siemens_Data_Analyser+0xe68>)
 800c4c4:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800c4c6:	4b42      	ldr	r3, [pc, #264]	; (800c5d0 <Siemens_Data_Analyser+0xe7c>)
 800c4c8:	801a      	strh	r2, [r3, #0]
				memcpy(&VitalData2MIE_st.Relays,&Siemens_RX_st.AppData,Siemens_RX_st.No_ofDataBytes);
 800c4ca:	4b3c      	ldr	r3, [pc, #240]	; (800c5bc <Siemens_Data_Analyser+0xe68>)
 800c4cc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c4ce:	461a      	mov	r2, r3
 800c4d0:	4940      	ldr	r1, [pc, #256]	; (800c5d4 <Siemens_Data_Analyser+0xe80>)
 800c4d2:	4842      	ldr	r0, [pc, #264]	; (800c5dc <Siemens_Data_Analyser+0xe88>)
 800c4d4:	f016 fa02 	bl	80228dc <memcpy>

				if(SiemensClocks_st.MisMatchFlag == CLEAR)
 800c4d8:	4b3b      	ldr	r3, [pc, #236]	; (800c5c8 <Siemens_Data_Analyser+0xe74>)
 800c4da:	781b      	ldrb	r3, [r3, #0]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d103      	bne.n	800c4e8 <Siemens_Data_Analyser+0xd94>
				{
#ifdef EI_1
					TransmitCanPkt(EI_PROCESS_DATA);
 800c4e0:	f240 1019 	movw	r0, #281	; 0x119
 800c4e4:	f003 fad0 	bl	800fa88 <TransmitCanPkt>
#endif
				}

#ifdef EI_1
				TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 800c4e8:	f240 2007 	movw	r0, #519	; 0x207
 800c4ec:	f003 facc 	bl	800fa88 <TransmitCanPkt>
#endif
#ifdef EI_2
				TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif

				SiemensClocks_st.Relays2OtheClk = HAL_GetTick();
 800c4f0:	f009 fafa 	bl	8015ae8 <HAL_GetTick>
 800c4f4:	4603      	mov	r3, r0
 800c4f6:	4a34      	ldr	r2, [pc, #208]	; (800c5c8 <Siemens_Data_Analyser+0xe74>)
 800c4f8:	6113      	str	r3, [r2, #16]
 800c4fa:	e01b      	b.n	800c534 <Siemens_Data_Analyser+0xde0>

			}
		}
		else
		{
			RxTimeStampNotUpdatedCount++;
 800c4fc:	4b30      	ldr	r3, [pc, #192]	; (800c5c0 <Siemens_Data_Analyser+0xe6c>)
 800c4fe:	881b      	ldrh	r3, [r3, #0]
 800c500:	3301      	adds	r3, #1
 800c502:	b29a      	uxth	r2, r3
 800c504:	4b2e      	ldr	r3, [pc, #184]	; (800c5c0 <Siemens_Data_Analyser+0xe6c>)
 800c506:	801a      	strh	r2, [r3, #0]
			//			printf("Siemens RxTS not Updating:%u\n",RxTimeStampNotUpdatedCount);

			if(RxTimeStampNotUpdatedCount >  EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount)
 800c508:	4b2d      	ldr	r3, [pc, #180]	; (800c5c0 <Siemens_Data_Analyser+0xe6c>)
 800c50a:	881b      	ldrh	r3, [r3, #0]
 800c50c:	461a      	mov	r2, r3
 800c50e:	4b25      	ldr	r3, [pc, #148]	; (800c5a4 <Siemens_Data_Analyser+0xe50>)
 800c510:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800c514:	429a      	cmp	r2, r3
 800c516:	d90d      	bls.n	800c534 <Siemens_Data_Analyser+0xde0>
			{
				printf("Siemens RxTS not Updating:%u\n",RxTimeStampNotUpdatedCount);
 800c518:	4b29      	ldr	r3, [pc, #164]	; (800c5c0 <Siemens_Data_Analyser+0xe6c>)
 800c51a:	881b      	ldrh	r3, [r3, #0]
 800c51c:	4619      	mov	r1, r3
 800c51e:	4830      	ldr	r0, [pc, #192]	; (800c5e0 <Siemens_Data_Analyser+0xe8c>)
 800c520:	f016 faec 	bl	8022afc <iprintf>
				RxTimeStampNotUpdatedCount = EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount + 1; /* To Avoid Overflow */
 800c524:	4b1f      	ldr	r3, [pc, #124]	; (800c5a4 <Siemens_Data_Analyser+0xe50>)
 800c526:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800c52a:	b29b      	uxth	r3, r3
 800c52c:	3301      	adds	r3, #1
 800c52e:	b29a      	uxth	r2, r3
 800c530:	4b23      	ldr	r3, [pc, #140]	; (800c5c0 <Siemens_Data_Analyser+0xe6c>)
 800c532:	801a      	strh	r2, [r3, #0]
			}
		}
	}


	Print_Siemens_MSG(&Temp_Siemens_RX_st,Buff,Size,RX);
 800c534:	f8b7 2a36 	ldrh.w	r2, [r7, #2614]	; 0xa36
 800c538:	f107 010c 	add.w	r1, r7, #12
 800c53c:	f207 600c 	addw	r0, r7, #1548	; 0x60c
 800c540:	2302      	movs	r3, #2
 800c542:	f000 fe55 	bl	800d1f0 <Print_Siemens_MSG>
	if(Siemens_tx_Buffer_st.Tx_Length > 0)
 800c546:	4b27      	ldr	r3, [pc, #156]	; (800c5e4 <Siemens_Data_Analyser+0xe90>)
 800c548:	f8b3 3600 	ldrh.w	r3, [r3, #1536]	; 0x600
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d00d      	beq.n	800c56c <Siemens_Data_Analyser+0xe18>
	{
		Print_Siemens_MSG(&Temp_SiemensTx_st,Siemens_tx_Buffer_st.Tx_Buff,Siemens_tx_Buffer_st.Tx_Length,TX);
 800c550:	4b24      	ldr	r3, [pc, #144]	; (800c5e4 <Siemens_Data_Analyser+0xe90>)
 800c552:	f8b3 2600 	ldrh.w	r2, [r3, #1536]	; 0x600
 800c556:	2301      	movs	r3, #1
 800c558:	4922      	ldr	r1, [pc, #136]	; (800c5e4 <Siemens_Data_Analyser+0xe90>)
 800c55a:	4823      	ldr	r0, [pc, #140]	; (800c5e8 <Siemens_Data_Analyser+0xe94>)
 800c55c:	f000 fe48 	bl	800d1f0 <Print_Siemens_MSG>
		memset(&Siemens_tx_Buffer_st,0,sizeof(SIEMENS_TX_PKT_t));
 800c560:	f240 6202 	movw	r2, #1538	; 0x602
 800c564:	2100      	movs	r1, #0
 800c566:	481f      	ldr	r0, [pc, #124]	; (800c5e4 <Siemens_Data_Analyser+0xe90>)
 800c568:	f016 f9e0 	bl	802292c <memset>
	}

	Tx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount = RxTimeStampNotUpdatedCount;
 800c56c:	4b14      	ldr	r3, [pc, #80]	; (800c5c0 <Siemens_Data_Analyser+0xe6c>)
 800c56e:	881a      	ldrh	r2, [r3, #0]
 800c570:	4b1e      	ldr	r3, [pc, #120]	; (800c5ec <Siemens_Data_Analyser+0xe98>)
 800c572:	805a      	strh	r2, [r3, #2]
	Tx_Siemens_self_sharing_st.DataReceving = RECEIVING;
 800c574:	4b1d      	ldr	r3, [pc, #116]	; (800c5ec <Siemens_Data_Analyser+0xe98>)
 800c576:	2201      	movs	r2, #1
 800c578:	701a      	strb	r2, [r3, #0]
	Tx_Siemens_self_sharing_st.MesgReceived = RECEIVED;
 800c57a:	4b1c      	ldr	r3, [pc, #112]	; (800c5ec <Siemens_Data_Analyser+0xe98>)
 800c57c:	2201      	movs	r2, #1
 800c57e:	705a      	strb	r2, [r3, #1]

#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
 800c580:	f240 2001 	movw	r0, #513	; 0x201
 800c584:	f003 fa80 	bl	800fa88 <TransmitCanPkt>
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
#endif
	SiemensClocks_st.SelfSharingClk = HAL_GetTick();
 800c588:	f009 faae 	bl	8015ae8 <HAL_GetTick>
 800c58c:	4603      	mov	r3, r0
 800c58e:	4a0e      	ldr	r2, [pc, #56]	; (800c5c8 <Siemens_Data_Analyser+0xe74>)
 800c590:	6093      	str	r3, [r2, #8]

	return;
 800c592:	e002      	b.n	800c59a <Siemens_Data_Analyser+0xe46>
		return;
 800c594:	bf00      	nop
 800c596:	e000      	b.n	800c59a <Siemens_Data_Analyser+0xe46>
		return;
 800c598:	bf00      	nop
}
 800c59a:	f607 2758 	addw	r7, r7, #2648	; 0xa58
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bd80      	pop	{r7, pc}
 800c5a2:	bf00      	nop
 800c5a4:	20000304 	.word	0x20000304
 800c5a8:	080264b0 	.word	0x080264b0
 800c5ac:	08026368 	.word	0x08026368
 800c5b0:	08026378 	.word	0x08026378
 800c5b4:	080264d0 	.word	0x080264d0
 800c5b8:	20000305 	.word	0x20000305
 800c5bc:	200028a8 	.word	0x200028a8
 800c5c0:	20003d68 	.word	0x20003d68
 800c5c4:	20003d64 	.word	0x20003d64
 800c5c8:	20003538 	.word	0x20003538
 800c5cc:	20003758 	.word	0x20003758
 800c5d0:	20003554 	.word	0x20003554
 800c5d4:	200028ce 	.word	0x200028ce
 800c5d8:	2000375c 	.word	0x2000375c
 800c5dc:	20003556 	.word	0x20003556
 800c5e0:	080264dc 	.word	0x080264dc
 800c5e4:	20002f20 	.word	0x20002f20
 800c5e8:	20002cf8 	.word	0x20002cf8
 800c5ec:	2000352c 	.word	0x2000352c

0800c5f0 <ExtractAppData>:

uint16_t ExtractAppData(uint8_t *MainBuffer, uint16_t MainBufferLength, uint8_t *ExtractBuffer)
{
 800c5f0:	b480      	push	{r7}
 800c5f2:	b089      	sub	sp, #36	; 0x24
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	60f8      	str	r0, [r7, #12]
 800c5f8:	460b      	mov	r3, r1
 800c5fa:	607a      	str	r2, [r7, #4]
 800c5fc:	817b      	strh	r3, [r7, #10]
	uint16_t ExtractBufferByteIndex = 0;
 800c5fe:	2300      	movs	r3, #0
 800c600:	83fb      	strh	r3, [r7, #30]
	uint8_t ExtractBufferBitIndex = 0;
 800c602:	2300      	movs	r3, #0
 800c604:	777b      	strb	r3, [r7, #29]
	uint16_t TotalMainBits = (MainBufferLength * 8);
 800c606:	897b      	ldrh	r3, [r7, #10]
 800c608:	00db      	lsls	r3, r3, #3
 800c60a:	833b      	strh	r3, [r7, #24]

	for (uint16_t Traverser = 0; Traverser < TotalMainBits; ++Traverser)
 800c60c:	2300      	movs	r3, #0
 800c60e:	837b      	strh	r3, [r7, #26]
 800c610:	e039      	b.n	800c686 <ExtractAppData+0x96>
	{
		int Temp = (Traverser / 8);
 800c612:	8b7b      	ldrh	r3, [r7, #26]
 800c614:	08db      	lsrs	r3, r3, #3
 800c616:	b29b      	uxth	r3, r3
 800c618:	617b      	str	r3, [r7, #20]
		int BitJump = (Traverser % 8);
 800c61a:	8b7b      	ldrh	r3, [r7, #26]
 800c61c:	f003 0307 	and.w	r3, r3, #7
 800c620:	613b      	str	r3, [r7, #16]
		if (BitJump == 7)
 800c622:	693b      	ldr	r3, [r7, #16]
 800c624:	2b07      	cmp	r3, #7
 800c626:	d02a      	beq.n	800c67e <ExtractAppData+0x8e>
		{
			continue;
		}
		if ((MainBuffer[Temp] >> (Traverser % 8)) & 1)
 800c628:	697b      	ldr	r3, [r7, #20]
 800c62a:	68fa      	ldr	r2, [r7, #12]
 800c62c:	4413      	add	r3, r2
 800c62e:	781b      	ldrb	r3, [r3, #0]
 800c630:	461a      	mov	r2, r3
 800c632:	8b7b      	ldrh	r3, [r7, #26]
 800c634:	f003 0307 	and.w	r3, r3, #7
 800c638:	fa42 f303 	asr.w	r3, r2, r3
 800c63c:	f003 0301 	and.w	r3, r3, #1
 800c640:	2b00      	cmp	r3, #0
 800c642:	d010      	beq.n	800c666 <ExtractAppData+0x76>
		{
			SET_BIT_USER(ExtractBufferBitIndex, ExtractBuffer[ExtractBufferByteIndex]);
 800c644:	8bfb      	ldrh	r3, [r7, #30]
 800c646:	687a      	ldr	r2, [r7, #4]
 800c648:	4413      	add	r3, r2
 800c64a:	781b      	ldrb	r3, [r3, #0]
 800c64c:	b25a      	sxtb	r2, r3
 800c64e:	7f7b      	ldrb	r3, [r7, #29]
 800c650:	2101      	movs	r1, #1
 800c652:	fa01 f303 	lsl.w	r3, r1, r3
 800c656:	b25b      	sxtb	r3, r3
 800c658:	4313      	orrs	r3, r2
 800c65a:	b259      	sxtb	r1, r3
 800c65c:	8bfb      	ldrh	r3, [r7, #30]
 800c65e:	687a      	ldr	r2, [r7, #4]
 800c660:	4413      	add	r3, r2
 800c662:	b2ca      	uxtb	r2, r1
 800c664:	701a      	strb	r2, [r3, #0]
		}
		++ExtractBufferBitIndex;
 800c666:	7f7b      	ldrb	r3, [r7, #29]
 800c668:	3301      	adds	r3, #1
 800c66a:	777b      	strb	r3, [r7, #29]
		if (ExtractBufferBitIndex == 8)
 800c66c:	7f7b      	ldrb	r3, [r7, #29]
 800c66e:	2b08      	cmp	r3, #8
 800c670:	d106      	bne.n	800c680 <ExtractAppData+0x90>
		{
			ExtractBufferBitIndex = 0;
 800c672:	2300      	movs	r3, #0
 800c674:	777b      	strb	r3, [r7, #29]
			++ExtractBufferByteIndex;
 800c676:	8bfb      	ldrh	r3, [r7, #30]
 800c678:	3301      	adds	r3, #1
 800c67a:	83fb      	strh	r3, [r7, #30]
 800c67c:	e000      	b.n	800c680 <ExtractAppData+0x90>
			continue;
 800c67e:	bf00      	nop
	for (uint16_t Traverser = 0; Traverser < TotalMainBits; ++Traverser)
 800c680:	8b7b      	ldrh	r3, [r7, #26]
 800c682:	3301      	adds	r3, #1
 800c684:	837b      	strh	r3, [r7, #26]
 800c686:	8b7a      	ldrh	r2, [r7, #26]
 800c688:	8b3b      	ldrh	r3, [r7, #24]
 800c68a:	429a      	cmp	r2, r3
 800c68c:	d3c1      	bcc.n	800c612 <ExtractAppData+0x22>
		}
	}
	return (ExtractBufferByteIndex);
 800c68e:	8bfb      	ldrh	r3, [r7, #30]
}
 800c690:	4618      	mov	r0, r3
 800c692:	3724      	adds	r7, #36	; 0x24
 800c694:	46bd      	mov	sp, r7
 800c696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69a:	4770      	bx	lr

0800c69c <Form_Siemens_Reply>:

void Form_Siemens_Reply(void)
{
 800c69c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c6a0:	f5ad 6dcd 	sub.w	sp, sp, #1640	; 0x668
 800c6a4:	af04      	add	r7, sp, #16

	uint8_t Buffer[REPLY_MAX_SIZE] = {0,};
 800c6a6:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800c6aa:	f5a3 62c2 	sub.w	r2, r3, #1552	; 0x610
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	6013      	str	r3, [r2, #0]
 800c6b2:	1d10      	adds	r0, r2, #4
 800c6b4:	f240 53fc 	movw	r3, #1532	; 0x5fc
 800c6b8:	461a      	mov	r2, r3
 800c6ba:	2100      	movs	r1, #0
 800c6bc:	f016 f936 	bl	802292c <memset>
	uint16_t App_data_Traverser = 0;
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	f8a7 3652 	strh.w	r3, [r7, #1618]	; 0x652
	uint16_t Calc_CRC =0;
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	f8a7 3656 	strh.w	r3, [r7, #1622]	; 0x656
	uint16_t Calc_Compliment_CRC = 0;
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	f8a7 3654 	strh.w	r3, [r7, #1620]	; 0x654
	uint16_t CRC_Compliment_Loc  = 0;
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	f8a7 3650 	strh.w	r3, [r7, #1616]	; 0x650
	BITSTUFFINIT(0,0);
 800c6d8:	2300      	movs	r3, #0
 800c6da:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c6de:	2300      	movs	r3, #0
 800c6e0:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c


	//	printf("\nSending Packet Data:\n");
	memset(&Siemens_TX_st,0,sizeof(SIEMENS_PKT_t));
 800c6e4:	f44f 720a 	mov.w	r2, #552	; 0x228
 800c6e8:	2100      	movs	r1, #0
 800c6ea:	48ba      	ldr	r0, [pc, #744]	; (800c9d4 <Form_Siemens_Reply+0x338>)
 800c6ec:	f016 f91e 	bl	802292c <memset>


	Siemens_TX_st.DesSysType = Siemens_RX_st.SrcSysType; //Destination System_Type
 800c6f0:	4bb9      	ldr	r3, [pc, #740]	; (800c9d8 <Form_Siemens_Reply+0x33c>)
 800c6f2:	7b1b      	ldrb	r3, [r3, #12]
 800c6f4:	4ab7      	ldr	r2, [pc, #732]	; (800c9d4 <Form_Siemens_Reply+0x338>)
 800c6f6:	7013      	strb	r3, [r2, #0]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.DesSysType,ODD_PARITY);
 800c6f8:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c6fc:	b2d8      	uxtb	r0, r3
 800c6fe:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800c702:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c706:	1899      	adds	r1, r3, r2
 800c708:	4bb2      	ldr	r3, [pc, #712]	; (800c9d4 <Form_Siemens_Reply+0x338>)
 800c70a:	781b      	ldrb	r3, [r3, #0]
 800c70c:	b2db      	uxtb	r3, r3
 800c70e:	2200      	movs	r2, #0
 800c710:	461c      	mov	r4, r3
 800c712:	4615      	mov	r5, r2
 800c714:	2301      	movs	r3, #1
 800c716:	9302      	str	r3, [sp, #8]
 800c718:	e9cd 4500 	strd	r4, r5, [sp]
 800c71c:	460a      	mov	r2, r1
 800c71e:	2108      	movs	r1, #8
 800c720:	f001 fb36 	bl	800dd90 <Insert_cal_parity>
	//	printf("Dst_type:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800c724:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c728:	3308      	adds	r3, #8
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	da00      	bge.n	800c730 <Form_Siemens_Reply+0x94>
 800c72e:	3307      	adds	r3, #7
 800c730:	10db      	asrs	r3, r3, #3
 800c732:	b29a      	uxth	r2, r3
 800c734:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c738:	4413      	add	r3, r2
 800c73a:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c73e:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c742:	3308      	adds	r3, #8
 800c744:	b29b      	uxth	r3, r3
 800c746:	b21b      	sxth	r3, r3
 800c748:	425a      	negs	r2, r3
 800c74a:	f003 0107 	and.w	r1, r3, #7
 800c74e:	f002 0307 	and.w	r3, r2, #7
 800c752:	bf58      	it	pl
 800c754:	4259      	negpl	r1, r3
 800c756:	b20b      	sxth	r3, r1
 800c758:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.DestAddr = Siemens_RX_st.SourceAddr; //Destination Address
 800c75c:	4b9e      	ldr	r3, [pc, #632]	; (800c9d8 <Form_Siemens_Reply+0x33c>)
 800c75e:	691a      	ldr	r2, [r3, #16]
 800c760:	4b9c      	ldr	r3, [pc, #624]	; (800c9d4 <Form_Siemens_Reply+0x338>)
 800c762:	605a      	str	r2, [r3, #4]
	Siemens_TX_st.ExtDestAddr = Siemens_RX_st.ExtSourceAddr;
 800c764:	4b9c      	ldr	r3, [pc, #624]	; (800c9d8 <Form_Siemens_Reply+0x33c>)
 800c766:	695a      	ldr	r2, [r3, #20]
 800c768:	4b9a      	ldr	r3, [pc, #616]	; (800c9d4 <Form_Siemens_Reply+0x338>)
 800c76a:	609a      	str	r2, [r3, #8]
	Insert_cal_parity(ucBit,24,&Buffer[ucByte],Siemens_TX_st.DestAddr,EVEN_PARITY);
 800c76c:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c770:	b2d8      	uxtb	r0, r3
 800c772:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800c776:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c77a:	1899      	adds	r1, r3, r2
 800c77c:	4b95      	ldr	r3, [pc, #596]	; (800c9d4 <Form_Siemens_Reply+0x338>)
 800c77e:	685b      	ldr	r3, [r3, #4]
 800c780:	2200      	movs	r2, #0
 800c782:	4698      	mov	r8, r3
 800c784:	4691      	mov	r9, r2
 800c786:	2300      	movs	r3, #0
 800c788:	9302      	str	r3, [sp, #8]
 800c78a:	e9cd 8900 	strd	r8, r9, [sp]
 800c78e:	460a      	mov	r2, r1
 800c790:	2118      	movs	r1, #24
 800c792:	f001 fafd 	bl	800dd90 <Insert_cal_parity>
	//	printf("\nSiemens_TX_st.DestAddr = %lu\n",Siemens_TX_st.DestAddr);
	BITSTUFFINC(24);
 800c796:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c79a:	3318      	adds	r3, #24
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	da00      	bge.n	800c7a2 <Form_Siemens_Reply+0x106>
 800c7a0:	3307      	adds	r3, #7
 800c7a2:	10db      	asrs	r3, r3, #3
 800c7a4:	b29a      	uxth	r2, r3
 800c7a6:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c7aa:	4413      	add	r3, r2
 800c7ac:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c7b0:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c7b4:	3318      	adds	r3, #24
 800c7b6:	b29b      	uxth	r3, r3
 800c7b8:	b21b      	sxth	r3, r3
 800c7ba:	425a      	negs	r2, r3
 800c7bc:	f003 0107 	and.w	r1, r3, #7
 800c7c0:	f002 0307 	and.w	r3, r2, #7
 800c7c4:	bf58      	it	pl
 800c7c6:	4259      	negpl	r1, r3
 800c7c8:	b20b      	sxth	r3, r1
 800c7ca:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.SrcSysType = Siemens_RX_st.DesSysType; //Destination Address
 800c7ce:	4b82      	ldr	r3, [pc, #520]	; (800c9d8 <Form_Siemens_Reply+0x33c>)
 800c7d0:	781b      	ldrb	r3, [r3, #0]
 800c7d2:	4a80      	ldr	r2, [pc, #512]	; (800c9d4 <Form_Siemens_Reply+0x338>)
 800c7d4:	7313      	strb	r3, [r2, #12]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.SrcSysType,ODD_PARITY);
 800c7d6:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c7da:	b2d8      	uxtb	r0, r3
 800c7dc:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800c7e0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c7e4:	1899      	adds	r1, r3, r2
 800c7e6:	4b7b      	ldr	r3, [pc, #492]	; (800c9d4 <Form_Siemens_Reply+0x338>)
 800c7e8:	7b1b      	ldrb	r3, [r3, #12]
 800c7ea:	b2db      	uxtb	r3, r3
 800c7ec:	2200      	movs	r2, #0
 800c7ee:	469a      	mov	sl, r3
 800c7f0:	4693      	mov	fp, r2
 800c7f2:	2301      	movs	r3, #1
 800c7f4:	9302      	str	r3, [sp, #8]
 800c7f6:	e9cd ab00 	strd	sl, fp, [sp]
 800c7fa:	460a      	mov	r2, r1
 800c7fc:	2108      	movs	r1, #8
 800c7fe:	f001 fac7 	bl	800dd90 <Insert_cal_parity>
	//	printf("Src_sys_type:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800c802:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c806:	3308      	adds	r3, #8
 800c808:	2b00      	cmp	r3, #0
 800c80a:	da00      	bge.n	800c80e <Form_Siemens_Reply+0x172>
 800c80c:	3307      	adds	r3, #7
 800c80e:	10db      	asrs	r3, r3, #3
 800c810:	b29a      	uxth	r2, r3
 800c812:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c816:	4413      	add	r3, r2
 800c818:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c81c:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c820:	3308      	adds	r3, #8
 800c822:	b29b      	uxth	r3, r3
 800c824:	b21b      	sxth	r3, r3
 800c826:	425a      	negs	r2, r3
 800c828:	f003 0107 	and.w	r1, r3, #7
 800c82c:	f002 0307 	and.w	r3, r2, #7
 800c830:	bf58      	it	pl
 800c832:	4259      	negpl	r1, r3
 800c834:	b20b      	sxth	r3, r1
 800c836:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.SourceAddr = Siemens_RX_st.DestAddr;
 800c83a:	4b67      	ldr	r3, [pc, #412]	; (800c9d8 <Form_Siemens_Reply+0x33c>)
 800c83c:	685a      	ldr	r2, [r3, #4]
 800c83e:	4b65      	ldr	r3, [pc, #404]	; (800c9d4 <Form_Siemens_Reply+0x338>)
 800c840:	611a      	str	r2, [r3, #16]
	Siemens_TX_st.ExtSourceAddr = Siemens_RX_st.ExtDestAddr;
 800c842:	4b65      	ldr	r3, [pc, #404]	; (800c9d8 <Form_Siemens_Reply+0x33c>)
 800c844:	689a      	ldr	r2, [r3, #8]
 800c846:	4b63      	ldr	r3, [pc, #396]	; (800c9d4 <Form_Siemens_Reply+0x338>)
 800c848:	615a      	str	r2, [r3, #20]
	Insert_cal_parity(ucBit,24,&Buffer[ucByte],Siemens_TX_st.SourceAddr,EVEN_PARITY);
 800c84a:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c84e:	b2d8      	uxtb	r0, r3
 800c850:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800c854:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c858:	1899      	adds	r1, r3, r2
 800c85a:	4b5e      	ldr	r3, [pc, #376]	; (800c9d4 <Form_Siemens_Reply+0x338>)
 800c85c:	691b      	ldr	r3, [r3, #16]
 800c85e:	2200      	movs	r2, #0
 800c860:	643b      	str	r3, [r7, #64]	; 0x40
 800c862:	647a      	str	r2, [r7, #68]	; 0x44
 800c864:	2300      	movs	r3, #0
 800c866:	9302      	str	r3, [sp, #8]
 800c868:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800c86c:	e9cd 3400 	strd	r3, r4, [sp]
 800c870:	460a      	mov	r2, r1
 800c872:	2118      	movs	r1, #24
 800c874:	f001 fa8c 	bl	800dd90 <Insert_cal_parity>
	//	printf("\nSiemens_TX_st.SourceAddr = %lu\n",Siemens_TX_st.SourceAddr);
	BITSTUFFINC(24);
 800c878:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c87c:	3318      	adds	r3, #24
 800c87e:	2b00      	cmp	r3, #0
 800c880:	da00      	bge.n	800c884 <Form_Siemens_Reply+0x1e8>
 800c882:	3307      	adds	r3, #7
 800c884:	10db      	asrs	r3, r3, #3
 800c886:	b29a      	uxth	r2, r3
 800c888:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c88c:	4413      	add	r3, r2
 800c88e:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c892:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c896:	3318      	adds	r3, #24
 800c898:	b29b      	uxth	r3, r3
 800c89a:	b21b      	sxth	r3, r3
 800c89c:	425a      	negs	r2, r3
 800c89e:	f003 0107 	and.w	r1, r3, #7
 800c8a2:	f002 0307 	and.w	r3, r2, #7
 800c8a6:	bf58      	it	pl
 800c8a8:	4259      	negpl	r1, r3
 800c8aa:	b20b      	sxth	r3, r1
 800c8ac:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.ProdDataVer = PROD_VERSION; //Self Product Version
 800c8b0:	4a48      	ldr	r2, [pc, #288]	; (800c9d4 <Form_Siemens_Reply+0x338>)
 800c8b2:	230a      	movs	r3, #10
 800c8b4:	7613      	strb	r3, [r2, #24]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.ProdDataVer,EVEN_PARITY);
 800c8b6:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c8ba:	b2d8      	uxtb	r0, r3
 800c8bc:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800c8c0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c8c4:	1899      	adds	r1, r3, r2
 800c8c6:	4b43      	ldr	r3, [pc, #268]	; (800c9d4 <Form_Siemens_Reply+0x338>)
 800c8c8:	7e1b      	ldrb	r3, [r3, #24]
 800c8ca:	b2db      	uxtb	r3, r3
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	63bb      	str	r3, [r7, #56]	; 0x38
 800c8d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	9302      	str	r3, [sp, #8]
 800c8d6:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800c8da:	e9cd 3400 	strd	r3, r4, [sp]
 800c8de:	460a      	mov	r2, r1
 800c8e0:	2108      	movs	r1, #8
 800c8e2:	f001 fa55 	bl	800dd90 <Insert_cal_parity>
	//	printf("prod_data_ver:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800c8e6:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c8ea:	3308      	adds	r3, #8
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	da00      	bge.n	800c8f2 <Form_Siemens_Reply+0x256>
 800c8f0:	3307      	adds	r3, #7
 800c8f2:	10db      	asrs	r3, r3, #3
 800c8f4:	b29a      	uxth	r2, r3
 800c8f6:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c8fa:	4413      	add	r3, r2
 800c8fc:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c900:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c904:	3308      	adds	r3, #8
 800c906:	b29b      	uxth	r3, r3
 800c908:	b21b      	sxth	r3, r3
 800c90a:	425a      	negs	r2, r3
 800c90c:	f003 0107 	and.w	r1, r3, #7
 800c910:	f002 0307 	and.w	r3, r2, #7
 800c914:	bf58      	it	pl
 800c916:	4259      	negpl	r1, r3
 800c918:	b20b      	sxth	r3, r1
 800c91a:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.CompIndex = COMP_INDEX; //Self Compatability Index
 800c91e:	4a2d      	ldr	r2, [pc, #180]	; (800c9d4 <Form_Siemens_Reply+0x338>)
 800c920:	2301      	movs	r3, #1
 800c922:	7653      	strb	r3, [r2, #25]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.CompIndex,ODD_PARITY);
 800c924:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c928:	b2d8      	uxtb	r0, r3
 800c92a:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800c92e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c932:	1899      	adds	r1, r3, r2
 800c934:	4b27      	ldr	r3, [pc, #156]	; (800c9d4 <Form_Siemens_Reply+0x338>)
 800c936:	7e5b      	ldrb	r3, [r3, #25]
 800c938:	b2db      	uxtb	r3, r3
 800c93a:	2200      	movs	r2, #0
 800c93c:	633b      	str	r3, [r7, #48]	; 0x30
 800c93e:	637a      	str	r2, [r7, #52]	; 0x34
 800c940:	2301      	movs	r3, #1
 800c942:	9302      	str	r3, [sp, #8]
 800c944:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800c948:	e9cd 3400 	strd	r3, r4, [sp]
 800c94c:	460a      	mov	r2, r1
 800c94e:	2108      	movs	r1, #8
 800c950:	f001 fa1e 	bl	800dd90 <Insert_cal_parity>
	//	printf("comp_index:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800c954:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c958:	3308      	adds	r3, #8
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	da00      	bge.n	800c960 <Form_Siemens_Reply+0x2c4>
 800c95e:	3307      	adds	r3, #7
 800c960:	10db      	asrs	r3, r3, #3
 800c962:	b29a      	uxth	r2, r3
 800c964:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c968:	4413      	add	r3, r2
 800c96a:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c96e:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c972:	3308      	adds	r3, #8
 800c974:	b29b      	uxth	r3, r3
 800c976:	b21b      	sxth	r3, r3
 800c978:	425a      	negs	r2, r3
 800c97a:	f003 0307 	and.w	r3, r3, #7
 800c97e:	f002 0207 	and.w	r2, r2, #7
 800c982:	bf58      	it	pl
 800c984:	4253      	negpl	r3, r2
 800c986:	b21b      	sxth	r3, r3
 800c988:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c


	Siemens_TX_st.DestPort = Siemens_RX_st.SourcePort; //Destination Port
 800c98c:	4b12      	ldr	r3, [pc, #72]	; (800c9d8 <Form_Siemens_Reply+0x33c>)
 800c98e:	7edb      	ldrb	r3, [r3, #27]
 800c990:	4a10      	ldr	r2, [pc, #64]	; (800c9d4 <Form_Siemens_Reply+0x338>)
 800c992:	7693      	strb	r3, [r2, #26]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.DestPort,NO_PARITY);
 800c994:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c998:	b2d8      	uxtb	r0, r3
 800c99a:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800c99e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c9a2:	1899      	adds	r1, r3, r2
 800c9a4:	4b0b      	ldr	r3, [pc, #44]	; (800c9d4 <Form_Siemens_Reply+0x338>)
 800c9a6:	7e9b      	ldrb	r3, [r3, #26]
 800c9a8:	b2db      	uxtb	r3, r3
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	62bb      	str	r3, [r7, #40]	; 0x28
 800c9ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c9b0:	2302      	movs	r3, #2
 800c9b2:	9302      	str	r3, [sp, #8]
 800c9b4:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800c9b8:	e9cd 3400 	strd	r3, r4, [sp]
 800c9bc:	460a      	mov	r2, r1
 800c9be:	2108      	movs	r1, #8
 800c9c0:	f001 f9e6 	bl	800dd90 <Insert_cal_parity>
	//	printf("dst_port:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800c9c4:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c9c8:	3308      	adds	r3, #8
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	da06      	bge.n	800c9dc <Form_Siemens_Reply+0x340>
 800c9ce:	3307      	adds	r3, #7
 800c9d0:	e004      	b.n	800c9dc <Form_Siemens_Reply+0x340>
 800c9d2:	bf00      	nop
 800c9d4:	20002ad0 	.word	0x20002ad0
 800c9d8:	200028a8 	.word	0x200028a8
 800c9dc:	10db      	asrs	r3, r3, #3
 800c9de:	b29a      	uxth	r2, r3
 800c9e0:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c9e4:	4413      	add	r3, r2
 800c9e6:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c9ea:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c9ee:	3308      	adds	r3, #8
 800c9f0:	b29b      	uxth	r3, r3
 800c9f2:	b21b      	sxth	r3, r3
 800c9f4:	425a      	negs	r2, r3
 800c9f6:	f003 0307 	and.w	r3, r3, #7
 800c9fa:	f002 0207 	and.w	r2, r2, #7
 800c9fe:	bf58      	it	pl
 800ca00:	4253      	negpl	r3, r2
 800ca02:	b21b      	sxth	r3, r3
 800ca04:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.SourcePort = Siemens_RX_st.DestPort; //Source Port
 800ca08:	4bc4      	ldr	r3, [pc, #784]	; (800cd1c <Form_Siemens_Reply+0x680>)
 800ca0a:	7e9a      	ldrb	r2, [r3, #26]
 800ca0c:	4bc4      	ldr	r3, [pc, #784]	; (800cd20 <Form_Siemens_Reply+0x684>)
 800ca0e:	76da      	strb	r2, [r3, #27]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.SourcePort,NO_PARITY);
 800ca10:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800ca14:	b2d8      	uxtb	r0, r3
 800ca16:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800ca1a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800ca1e:	441a      	add	r2, r3
 800ca20:	4bbf      	ldr	r3, [pc, #764]	; (800cd20 <Form_Siemens_Reply+0x684>)
 800ca22:	7edb      	ldrb	r3, [r3, #27]
 800ca24:	b2db      	uxtb	r3, r3
 800ca26:	2100      	movs	r1, #0
 800ca28:	623b      	str	r3, [r7, #32]
 800ca2a:	6279      	str	r1, [r7, #36]	; 0x24
 800ca2c:	2302      	movs	r3, #2
 800ca2e:	9302      	str	r3, [sp, #8]
 800ca30:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800ca34:	e9cd 3400 	strd	r3, r4, [sp]
 800ca38:	2108      	movs	r1, #8
 800ca3a:	f001 f9a9 	bl	800dd90 <Insert_cal_parity>
	//	printf("src_port:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800ca3e:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800ca42:	3308      	adds	r3, #8
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	da00      	bge.n	800ca4a <Form_Siemens_Reply+0x3ae>
 800ca48:	3307      	adds	r3, #7
 800ca4a:	10db      	asrs	r3, r3, #3
 800ca4c:	b29a      	uxth	r2, r3
 800ca4e:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800ca52:	4413      	add	r3, r2
 800ca54:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800ca58:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800ca5c:	3308      	adds	r3, #8
 800ca5e:	b29b      	uxth	r3, r3
 800ca60:	b21b      	sxth	r3, r3
 800ca62:	425a      	negs	r2, r3
 800ca64:	f003 0307 	and.w	r3, r3, #7
 800ca68:	f002 0207 	and.w	r2, r2, #7
 800ca6c:	bf58      	it	pl
 800ca6e:	4253      	negpl	r3, r2
 800ca70:	b21b      	sxth	r3, r3
 800ca72:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.RxTimeStamp = Siemens_RX_st.TxTimeStamp; //Source Port
 800ca76:	4ba9      	ldr	r3, [pc, #676]	; (800cd1c <Form_Siemens_Reply+0x680>)
 800ca78:	6a1b      	ldr	r3, [r3, #32]
 800ca7a:	4aa9      	ldr	r2, [pc, #676]	; (800cd20 <Form_Siemens_Reply+0x684>)
 800ca7c:	61d3      	str	r3, [r2, #28]
	Insert_cal_parity(ucBit,32,&Buffer[ucByte],Siemens_TX_st.RxTimeStamp,NO_PARITY);
 800ca7e:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800ca82:	b2d8      	uxtb	r0, r3
 800ca84:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800ca88:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800ca8c:	4413      	add	r3, r2
 800ca8e:	4aa4      	ldr	r2, [pc, #656]	; (800cd20 <Form_Siemens_Reply+0x684>)
 800ca90:	69d2      	ldr	r2, [r2, #28]
 800ca92:	2100      	movs	r1, #0
 800ca94:	61ba      	str	r2, [r7, #24]
 800ca96:	61f9      	str	r1, [r7, #28]
 800ca98:	2202      	movs	r2, #2
 800ca9a:	9202      	str	r2, [sp, #8]
 800ca9c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800caa0:	e9cd 1200 	strd	r1, r2, [sp]
 800caa4:	461a      	mov	r2, r3
 800caa6:	2120      	movs	r1, #32
 800caa8:	f001 f972 	bl	800dd90 <Insert_cal_parity>
	//	printf("Rx_time_stamp:%lu\n",Siemens_TX_st.Rx_time_stamp);
	BITSTUFFINC(32);
 800caac:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800cab0:	3320      	adds	r3, #32
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	da00      	bge.n	800cab8 <Form_Siemens_Reply+0x41c>
 800cab6:	3307      	adds	r3, #7
 800cab8:	10db      	asrs	r3, r3, #3
 800caba:	b29a      	uxth	r2, r3
 800cabc:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800cac0:	4413      	add	r3, r2
 800cac2:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800cac6:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800caca:	3320      	adds	r3, #32
 800cacc:	b29b      	uxth	r3, r3
 800cace:	b21b      	sxth	r3, r3
 800cad0:	425a      	negs	r2, r3
 800cad2:	f003 0307 	and.w	r3, r3, #7
 800cad6:	f002 0207 	and.w	r2, r2, #7
 800cada:	bf58      	it	pl
 800cadc:	4253      	negpl	r3, r2
 800cade:	b21b      	sxth	r3, r3
 800cae0:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.TxTimeStamp = SelfTimeStamp;//(uint32_t)(HAL_GetTick()/100);//Temp_Siemens_RX_st.Tx_time_stamp; //Source Port
 800cae4:	4b8f      	ldr	r3, [pc, #572]	; (800cd24 <Form_Siemens_Reply+0x688>)
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	4a8d      	ldr	r2, [pc, #564]	; (800cd20 <Form_Siemens_Reply+0x684>)
 800caea:	6213      	str	r3, [r2, #32]
	Insert_cal_parity(ucBit,32,&Buffer[ucByte],Siemens_TX_st.TxTimeStamp,NO_PARITY);
 800caec:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800caf0:	b2d8      	uxtb	r0, r3
 800caf2:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800caf6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800cafa:	4413      	add	r3, r2
 800cafc:	4a88      	ldr	r2, [pc, #544]	; (800cd20 <Form_Siemens_Reply+0x684>)
 800cafe:	6a12      	ldr	r2, [r2, #32]
 800cb00:	2100      	movs	r1, #0
 800cb02:	613a      	str	r2, [r7, #16]
 800cb04:	6179      	str	r1, [r7, #20]
 800cb06:	2202      	movs	r2, #2
 800cb08:	9202      	str	r2, [sp, #8]
 800cb0a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800cb0e:	e9cd 1200 	strd	r1, r2, [sp]
 800cb12:	461a      	mov	r2, r3
 800cb14:	2120      	movs	r1, #32
 800cb16:	f001 f93b 	bl	800dd90 <Insert_cal_parity>
	//	printf("Tx_time_stamp:%lu\n",Siemens_TX_st.Tx_time_stamp);
	BITSTUFFINC(32);
 800cb1a:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800cb1e:	3320      	adds	r3, #32
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	da00      	bge.n	800cb26 <Form_Siemens_Reply+0x48a>
 800cb24:	3307      	adds	r3, #7
 800cb26:	10db      	asrs	r3, r3, #3
 800cb28:	b29a      	uxth	r2, r3
 800cb2a:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800cb2e:	4413      	add	r3, r2
 800cb30:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800cb34:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800cb38:	3320      	adds	r3, #32
 800cb3a:	b29b      	uxth	r3, r3
 800cb3c:	b21b      	sxth	r3, r3
 800cb3e:	425a      	negs	r2, r3
 800cb40:	f003 0307 	and.w	r3, r3, #7
 800cb44:	f002 0207 	and.w	r2, r2, #7
 800cb48:	bf58      	it	pl
 800cb4a:	4253      	negpl	r3, r2
 800cb4c:	b21b      	sxth	r3, r3
 800cb4e:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	CRC_Compliment_Loc = Data_Compliment(Buffer,ucByte,CONVERT); //ucByte = 30;
 800cb52:	f8b7 164e 	ldrh.w	r1, [r7, #1614]	; 0x64e
 800cb56:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800cb5a:	2201      	movs	r2, #1
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	f001 fa7d 	bl	800e05c <Data_Compliment>
 800cb62:	4603      	mov	r3, r0
 800cb64:	f8a7 3650 	strh.w	r3, [r7, #1616]	; 0x650

	Calc_CRC = Siemens_CRC(Buffer,ucByte); //30
 800cb68:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800cb6c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800cb70:	4611      	mov	r1, r2
 800cb72:	4618      	mov	r0, r3
 800cb74:	f000 ff76 	bl	800da64 <Siemens_CRC>
 800cb78:	4603      	mov	r3, r0
 800cb7a:	f8a7 3656 	strh.w	r3, [r7, #1622]	; 0x656


#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800cb7e:	4b6a      	ldr	r3, [pc, #424]	; (800cd28 <Form_Siemens_Reply+0x68c>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	09db      	lsrs	r3, r3, #7
 800cb84:	f003 0301 	and.w	r3, r3, #1
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d02c      	beq.n	800cbe6 <Form_Siemens_Reply+0x54a>
	{
		uint16_t Temp_Crc = Calc_CRC;
 800cb8c:	f8b7 3656 	ldrh.w	r3, [r7, #1622]	; 0x656
 800cb90:	f8a7 364a 	strh.w	r3, [r7, #1610]	; 0x64a
		printf("Injecting INVALID_PACKET_CRC_SIEMENS\n");
 800cb94:	4865      	ldr	r0, [pc, #404]	; (800cd2c <Form_Siemens_Reply+0x690>)
 800cb96:	f016 f84d 	bl	8022c34 <puts>
		printf("Actual CRC:%04x\n",Calc_CRC);
 800cb9a:	f8b7 3656 	ldrh.w	r3, [r7, #1622]	; 0x656
 800cb9e:	4619      	mov	r1, r3
 800cba0:	4863      	ldr	r0, [pc, #396]	; (800cd30 <Form_Siemens_Reply+0x694>)
 800cba2:	f015 ffab 	bl	8022afc <iprintf>

		Calc_CRC = HAL_RNG_GetRandomNumber(&hrng) % 0xffff;
 800cba6:	4863      	ldr	r0, [pc, #396]	; (800cd34 <Form_Siemens_Reply+0x698>)
 800cba8:	f00d fc50 	bl	801a44c <HAL_RNG_GetRandomNumber>
 800cbac:	4601      	mov	r1, r0
 800cbae:	4b62      	ldr	r3, [pc, #392]	; (800cd38 <Form_Siemens_Reply+0x69c>)
 800cbb0:	fba3 2301 	umull	r2, r3, r3, r1
 800cbb4:	0bda      	lsrs	r2, r3, #15
 800cbb6:	4613      	mov	r3, r2
 800cbb8:	041b      	lsls	r3, r3, #16
 800cbba:	1a9b      	subs	r3, r3, r2
 800cbbc:	1aca      	subs	r2, r1, r3
 800cbbe:	4613      	mov	r3, r2
 800cbc0:	f8a7 3656 	strh.w	r3, [r7, #1622]	; 0x656
		if(Calc_CRC == Temp_Crc)
 800cbc4:	f8b7 2656 	ldrh.w	r2, [r7, #1622]	; 0x656
 800cbc8:	f8b7 364a 	ldrh.w	r3, [r7, #1610]	; 0x64a
 800cbcc:	429a      	cmp	r2, r3
 800cbce:	d104      	bne.n	800cbda <Form_Siemens_Reply+0x53e>
		{
			Calc_CRC += 4;
 800cbd0:	f8b7 3656 	ldrh.w	r3, [r7, #1622]	; 0x656
 800cbd4:	3304      	adds	r3, #4
 800cbd6:	f8a7 3656 	strh.w	r3, [r7, #1622]	; 0x656
		}
		printf("Injected CRC:%04x\n",Calc_CRC);
 800cbda:	f8b7 3656 	ldrh.w	r3, [r7, #1622]	; 0x656
 800cbde:	4619      	mov	r1, r3
 800cbe0:	4856      	ldr	r0, [pc, #344]	; (800cd3c <Form_Siemens_Reply+0x6a0>)
 800cbe2:	f015 ff8b 	bl	8022afc <iprintf>




	//	printf("Cal_CRC:0x%04x\n",Calc_CRC);
	Insert_cal_parity(ucBit,16,&Buffer[ucByte],Calc_CRC,NO_PARITY);
 800cbe6:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800cbea:	b2d8      	uxtb	r0, r3
 800cbec:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800cbf0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800cbf4:	4413      	add	r3, r2
 800cbf6:	f8b7 2656 	ldrh.w	r2, [r7, #1622]	; 0x656
 800cbfa:	2100      	movs	r1, #0
 800cbfc:	60ba      	str	r2, [r7, #8]
 800cbfe:	60f9      	str	r1, [r7, #12]
 800cc00:	2202      	movs	r2, #2
 800cc02:	9202      	str	r2, [sp, #8]
 800cc04:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800cc08:	e9cd 1200 	strd	r1, r2, [sp]
 800cc0c:	461a      	mov	r2, r3
 800cc0e:	2110      	movs	r1, #16
 800cc10:	f001 f8be 	bl	800dd90 <Insert_cal_parity>
	BITSTUFFINC(16);
 800cc14:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800cc18:	3310      	adds	r3, #16
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	da00      	bge.n	800cc20 <Form_Siemens_Reply+0x584>
 800cc1e:	3307      	adds	r3, #7
 800cc20:	10db      	asrs	r3, r3, #3
 800cc22:	b29a      	uxth	r2, r3
 800cc24:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800cc28:	4413      	add	r3, r2
 800cc2a:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800cc2e:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800cc32:	3310      	adds	r3, #16
 800cc34:	b29b      	uxth	r3, r3
 800cc36:	b21b      	sxth	r3, r3
 800cc38:	425a      	negs	r2, r3
 800cc3a:	f003 0307 	and.w	r3, r3, #7
 800cc3e:	f002 0207 	and.w	r2, r2, #7
 800cc42:	bf58      	it	pl
 800cc44:	4253      	negpl	r3, r2
 800cc46:	b21b      	sxth	r3, r3
 800cc48:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Calc_Compliment_CRC = Siemens_CRC(&Buffer[ucByte],ucByte-2);//32,30
 800cc4c:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800cc50:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800cc54:	441a      	add	r2, r3
 800cc56:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800cc5a:	3b02      	subs	r3, #2
 800cc5c:	b29b      	uxth	r3, r3
 800cc5e:	4619      	mov	r1, r3
 800cc60:	4610      	mov	r0, r2
 800cc62:	f000 feff 	bl	800da64 <Siemens_CRC>
 800cc66:	4603      	mov	r3, r0
 800cc68:	f8a7 3654 	strh.w	r3, [r7, #1620]	; 0x654
#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_COMP_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800cc6c:	4b2e      	ldr	r3, [pc, #184]	; (800cd28 <Form_Siemens_Reply+0x68c>)
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	0a5b      	lsrs	r3, r3, #9
 800cc72:	f003 0301 	and.w	r3, r3, #1
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d02c      	beq.n	800ccd4 <Form_Siemens_Reply+0x638>
	{
		uint16_t Temp_Crc = Calc_Compliment_CRC;
 800cc7a:	f8b7 3654 	ldrh.w	r3, [r7, #1620]	; 0x654
 800cc7e:	f8a7 3648 	strh.w	r3, [r7, #1608]	; 0x648
		printf("Injecting INVALID_PACKET_CRC_SIEMENS\n");
 800cc82:	482a      	ldr	r0, [pc, #168]	; (800cd2c <Form_Siemens_Reply+0x690>)
 800cc84:	f015 ffd6 	bl	8022c34 <puts>
		printf("Actual Compliment CRC:%04x\n",Calc_Compliment_CRC);
 800cc88:	f8b7 3654 	ldrh.w	r3, [r7, #1620]	; 0x654
 800cc8c:	4619      	mov	r1, r3
 800cc8e:	482c      	ldr	r0, [pc, #176]	; (800cd40 <Form_Siemens_Reply+0x6a4>)
 800cc90:	f015 ff34 	bl	8022afc <iprintf>
		Calc_Compliment_CRC = HAL_RNG_GetRandomNumber(&hrng) % 0xffff;
 800cc94:	4827      	ldr	r0, [pc, #156]	; (800cd34 <Form_Siemens_Reply+0x698>)
 800cc96:	f00d fbd9 	bl	801a44c <HAL_RNG_GetRandomNumber>
 800cc9a:	4601      	mov	r1, r0
 800cc9c:	4b26      	ldr	r3, [pc, #152]	; (800cd38 <Form_Siemens_Reply+0x69c>)
 800cc9e:	fba3 2301 	umull	r2, r3, r3, r1
 800cca2:	0bda      	lsrs	r2, r3, #15
 800cca4:	4613      	mov	r3, r2
 800cca6:	041b      	lsls	r3, r3, #16
 800cca8:	1a9b      	subs	r3, r3, r2
 800ccaa:	1aca      	subs	r2, r1, r3
 800ccac:	4613      	mov	r3, r2
 800ccae:	f8a7 3654 	strh.w	r3, [r7, #1620]	; 0x654
		if(Calc_Compliment_CRC == Temp_Crc)
 800ccb2:	f8b7 2654 	ldrh.w	r2, [r7, #1620]	; 0x654
 800ccb6:	f8b7 3648 	ldrh.w	r3, [r7, #1608]	; 0x648
 800ccba:	429a      	cmp	r2, r3
 800ccbc:	d104      	bne.n	800ccc8 <Form_Siemens_Reply+0x62c>
		{
			Calc_Compliment_CRC += 4;
 800ccbe:	f8b7 3654 	ldrh.w	r3, [r7, #1620]	; 0x654
 800ccc2:	3304      	adds	r3, #4
 800ccc4:	f8a7 3654 	strh.w	r3, [r7, #1620]	; 0x654
		}
		printf("Injected Compliment CRC:%04x\n",Calc_Compliment_CRC);
 800ccc8:	f8b7 3654 	ldrh.w	r3, [r7, #1620]	; 0x654
 800cccc:	4619      	mov	r1, r3
 800ccce:	481d      	ldr	r0, [pc, #116]	; (800cd44 <Form_Siemens_Reply+0x6a8>)
 800ccd0:	f015 ff14 	bl	8022afc <iprintf>
	}
#endif
	//	printf("Calc_Compliment_CRC:0x%04x\n",Calc_Compliment_CRC);
	ucByte+=ucByte;
 800ccd4:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800ccd8:	005b      	lsls	r3, r3, #1
 800ccda:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
	Insert_cal_parity(ucBit,16,&Buffer[CRC_Compliment_Loc],Calc_Compliment_CRC,NO_PARITY);
 800ccde:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800cce2:	b2d8      	uxtb	r0, r3
 800cce4:	f8b7 3650 	ldrh.w	r3, [r7, #1616]	; 0x650
 800cce8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800ccec:	4413      	add	r3, r2
 800ccee:	f8b7 2654 	ldrh.w	r2, [r7, #1620]	; 0x654
 800ccf2:	2100      	movs	r1, #0
 800ccf4:	603a      	str	r2, [r7, #0]
 800ccf6:	6079      	str	r1, [r7, #4]
 800ccf8:	2202      	movs	r2, #2
 800ccfa:	9202      	str	r2, [sp, #8]
 800ccfc:	e9d7 1200 	ldrd	r1, r2, [r7]
 800cd00:	e9cd 1200 	strd	r1, r2, [sp]
 800cd04:	461a      	mov	r2, r3
 800cd06:	2110      	movs	r1, #16
 800cd08:	f001 f842 	bl	800dd90 <Insert_cal_parity>
	BITSTUFFINC(16);
 800cd0c:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800cd10:	3310      	adds	r3, #16
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	da18      	bge.n	800cd48 <Form_Siemens_Reply+0x6ac>
 800cd16:	3307      	adds	r3, #7
 800cd18:	e016      	b.n	800cd48 <Form_Siemens_Reply+0x6ac>
 800cd1a:	bf00      	nop
 800cd1c:	200028a8 	.word	0x200028a8
 800cd20:	20002ad0 	.word	0x20002ad0
 800cd24:	20003d6c 	.word	0x20003d6c
 800cd28:	20003524 	.word	0x20003524
 800cd2c:	08026250 	.word	0x08026250
 800cd30:	08026500 	.word	0x08026500
 800cd34:	20009d2c 	.word	0x20009d2c
 800cd38:	80008001 	.word	0x80008001
 800cd3c:	08026514 	.word	0x08026514
 800cd40:	08026528 	.word	0x08026528
 800cd44:	08026544 	.word	0x08026544
 800cd48:	10db      	asrs	r3, r3, #3
 800cd4a:	b29a      	uxth	r2, r3
 800cd4c:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800cd50:	4413      	add	r3, r2
 800cd52:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800cd56:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800cd5a:	3310      	adds	r3, #16
 800cd5c:	b29b      	uxth	r3, r3
 800cd5e:	b21b      	sxth	r3, r3
 800cd60:	425a      	negs	r2, r3
 800cd62:	f003 0307 	and.w	r3, r3, #7
 800cd66:	f002 0207 	and.w	r2, r2, #7
 800cd6a:	bf58      	it	pl
 800cd6c:	4253      	negpl	r3, r2
 800cd6e:	b21b      	sxth	r3, r3
 800cd70:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c


	memcpy(Siemens_tx_Buffer_st.Tx_Buff,Buffer,CRC_Compliment_Loc+2);
 800cd74:	f8b7 3650 	ldrh.w	r3, [r7, #1616]	; 0x650
 800cd78:	3302      	adds	r3, #2
 800cd7a:	461a      	mov	r2, r3
 800cd7c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800cd80:	4619      	mov	r1, r3
 800cd82:	481e      	ldr	r0, [pc, #120]	; (800cdfc <Form_Siemens_Reply+0x760>)
 800cd84:	f015 fdaa 	bl	80228dc <memcpy>
	Siemens_tx_Buffer_st.Tx_Length = (CRC_Compliment_Loc+2);
 800cd88:	f8b7 3650 	ldrh.w	r3, [r7, #1616]	; 0x650
 800cd8c:	3302      	adds	r3, #2
 800cd8e:	b29a      	uxth	r2, r3
 800cd90:	4b1a      	ldr	r3, [pc, #104]	; (800cdfc <Form_Siemens_Reply+0x760>)
 800cd92:	f8a3 2600 	strh.w	r2, [r3, #1536]	; 0x600

	CheckToSendReplyorNot();
 800cd96:	f001 f9cd 	bl	800e134 <CheckToSendReplyorNot>

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(NO_REPLY_FROM_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800cd9a:	4b19      	ldr	r3, [pc, #100]	; (800ce00 <Form_Siemens_Reply+0x764>)
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	099b      	lsrs	r3, r3, #6
 800cda0:	f003 0301 	and.w	r3, r3, #1
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d003      	beq.n	800cdb0 <Form_Siemens_Reply+0x714>
	{
		printf("Injecting NO REPLY FROM EIPC Failure\n");
 800cda8:	4816      	ldr	r0, [pc, #88]	; (800ce04 <Form_Siemens_Reply+0x768>)
 800cdaa:	f015 ff43 	bl	8022c34 <puts>
 800cdae:	e00f      	b.n	800cdd0 <Form_Siemens_Reply+0x734>
	}
	else
	{
		if(SendReply == 1)
 800cdb0:	4b15      	ldr	r3, [pc, #84]	; (800ce08 <Form_Siemens_Reply+0x76c>)
 800cdb2:	781b      	ldrb	r3, [r3, #0]
 800cdb4:	2b01      	cmp	r3, #1
 800cdb6:	d10b      	bne.n	800cdd0 <Form_Siemens_Reply+0x734>
		{
			udpClient_send(Buffer,CRC_Compliment_Loc+2,Source_IP);
 800cdb8:	f8b7 3650 	ldrh.w	r3, [r7, #1616]	; 0x650
 800cdbc:	b2db      	uxtb	r3, r3
 800cdbe:	3302      	adds	r3, #2
 800cdc0:	b2d9      	uxtb	r1, r3
 800cdc2:	4a12      	ldr	r2, [pc, #72]	; (800ce0c <Form_Siemens_Reply+0x770>)
 800cdc4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800cdc8:	6812      	ldr	r2, [r2, #0]
 800cdca:	4618      	mov	r0, r3
 800cdcc:	f002 fc18 	bl	800f600 <udpClient_send>
	{
		udpClient_send(Buffer,CRC_Compliment_Loc+2,Source_IP);
	}
#endif

	memset(&Temp_SiemensTx_st,0,sizeof(SIEMENS_PKT_t));
 800cdd0:	f44f 720a 	mov.w	r2, #552	; 0x228
 800cdd4:	2100      	movs	r1, #0
 800cdd6:	480e      	ldr	r0, [pc, #56]	; (800ce10 <Form_Siemens_Reply+0x774>)
 800cdd8:	f015 fda8 	bl	802292c <memset>
	memcpy(&Temp_SiemensTx_st,&Siemens_TX_st,sizeof(SIEMENS_PKT_t));
 800cddc:	4a0c      	ldr	r2, [pc, #48]	; (800ce10 <Form_Siemens_Reply+0x774>)
 800cdde:	4b0d      	ldr	r3, [pc, #52]	; (800ce14 <Form_Siemens_Reply+0x778>)
 800cde0:	4610      	mov	r0, r2
 800cde2:	4619      	mov	r1, r3
 800cde4:	f44f 730a 	mov.w	r3, #552	; 0x228
 800cde8:	461a      	mov	r2, r3
 800cdea:	f015 fd77 	bl	80228dc <memcpy>
	UNUSED(App_data_Traverser);
}
 800cdee:	bf00      	nop
 800cdf0:	f507 67cb 	add.w	r7, r7, #1624	; 0x658
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cdfa:	bf00      	nop
 800cdfc:	20002f20 	.word	0x20002f20
 800ce00:	20003524 	.word	0x20003524
 800ce04:	08026564 	.word	0x08026564
 800ce08:	20004c4d 	.word	0x20004c4d
 800ce0c:	200052b4 	.word	0x200052b4
 800ce10:	20002cf8 	.word	0x20002cf8
 800ce14:	20002ad0 	.word	0x20002ad0

0800ce18 <ProcessSendingSignals2MIE>:

void ProcessSendingSignals2MIE(void)
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b082      	sub	sp, #8
 800ce1c:	af00      	add	r7, sp, #0
	if(HAL_Elaps_Ticks(SiemensClocks_st.Signal2MIE_Clk) > EI_data.Siemens_st.MIE_SIGNAL_SEND_CLK)
 800ce1e:	4b6c      	ldr	r3, [pc, #432]	; (800cfd0 <ProcessSendingSignals2MIE+0x1b8>)
 800ce20:	685b      	ldr	r3, [r3, #4]
 800ce22:	4618      	mov	r0, r3
 800ce24:	f002 f876 	bl	800ef14 <HAL_Elaps_Ticks>
 800ce28:	4602      	mov	r2, r0
 800ce2a:	4b6a      	ldr	r3, [pc, #424]	; (800cfd4 <ProcessSendingSignals2MIE+0x1bc>)
 800ce2c:	f8d3 3318 	ldr.w	r3, [r3, #792]	; 0x318
 800ce30:	429a      	cmp	r2, r3
 800ce32:	f240 80c8 	bls.w	800cfc6 <ProcessSendingSignals2MIE+0x1ae>
	{
		if(
				(SiemensClocks_st.MisMatchFlag == CLEAR) &&
 800ce36:	4b66      	ldr	r3, [pc, #408]	; (800cfd0 <ProcessSendingSignals2MIE+0x1b8>)
 800ce38:	781b      	ldrb	r3, [r3, #0]
		if(
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d113      	bne.n	800ce66 <ProcessSendingSignals2MIE+0x4e>
				(SiemensClocks_st.SiemensCanXchangeHappening == YES) &&
 800ce3e:	4b64      	ldr	r3, [pc, #400]	; (800cfd0 <ProcessSendingSignals2MIE+0x1b8>)
 800ce40:	785b      	ldrb	r3, [r3, #1]
				(SiemensClocks_st.MisMatchFlag == CLEAR) &&
 800ce42:	2b01      	cmp	r3, #1
 800ce44:	d10f      	bne.n	800ce66 <ProcessSendingSignals2MIE+0x4e>
				( (Rx_Siemens_self_sharing_st.DataReceving == RECEIVING) && (Tx_Siemens_self_sharing_st.DataReceving == RECEIVING) )
 800ce46:	4b64      	ldr	r3, [pc, #400]	; (800cfd8 <ProcessSendingSignals2MIE+0x1c0>)
 800ce48:	781b      	ldrb	r3, [r3, #0]
				(SiemensClocks_st.SiemensCanXchangeHappening == YES) &&
 800ce4a:	2b01      	cmp	r3, #1
 800ce4c:	d10b      	bne.n	800ce66 <ProcessSendingSignals2MIE+0x4e>
				( (Rx_Siemens_self_sharing_st.DataReceving == RECEIVING) && (Tx_Siemens_self_sharing_st.DataReceving == RECEIVING) )
 800ce4e:	4b63      	ldr	r3, [pc, #396]	; (800cfdc <ProcessSendingSignals2MIE+0x1c4>)
 800ce50:	781b      	ldrb	r3, [r3, #0]
 800ce52:	2b01      	cmp	r3, #1
 800ce54:	d107      	bne.n	800ce66 <ProcessSendingSignals2MIE+0x4e>
			/*
			 * CAN Exchange Happening.
			 * No MisMatch Found
			 */
			//			printf("\n1\n");
			memcpy(&VitalData2MIE_st.Relays,&SiemensMain_Relays_st.Relays,SiemensMain_Relays_st.NoofDataBytes);
 800ce56:	4b62      	ldr	r3, [pc, #392]	; (800cfe0 <ProcessSendingSignals2MIE+0x1c8>)
 800ce58:	881b      	ldrh	r3, [r3, #0]
 800ce5a:	461a      	mov	r2, r3
 800ce5c:	4961      	ldr	r1, [pc, #388]	; (800cfe4 <ProcessSendingSignals2MIE+0x1cc>)
 800ce5e:	4862      	ldr	r0, [pc, #392]	; (800cfe8 <ProcessSendingSignals2MIE+0x1d0>)
 800ce60:	f015 fd3c 	bl	80228dc <memcpy>
 800ce64:	e02d      	b.n	800cec2 <ProcessSendingSignals2MIE+0xaa>
		}
		else if( ((Rx_Siemens_self_sharing_st.DataReceving == RECEIVING) && (Tx_Siemens_self_sharing_st.DataReceving == NOT_RECEIVING)) && (SiemensClocks_st.SiemensCanXchangeHappening == YES) )
 800ce66:	4b5c      	ldr	r3, [pc, #368]	; (800cfd8 <ProcessSendingSignals2MIE+0x1c0>)
 800ce68:	781b      	ldrb	r3, [r3, #0]
 800ce6a:	2b01      	cmp	r3, #1
 800ce6c:	d10f      	bne.n	800ce8e <ProcessSendingSignals2MIE+0x76>
 800ce6e:	4b5b      	ldr	r3, [pc, #364]	; (800cfdc <ProcessSendingSignals2MIE+0x1c4>)
 800ce70:	781b      	ldrb	r3, [r3, #0]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d10b      	bne.n	800ce8e <ProcessSendingSignals2MIE+0x76>
 800ce76:	4b56      	ldr	r3, [pc, #344]	; (800cfd0 <ProcessSendingSignals2MIE+0x1b8>)
 800ce78:	785b      	ldrb	r3, [r3, #1]
 800ce7a:	2b01      	cmp	r3, #1
 800ce7c:	d107      	bne.n	800ce8e <ProcessSendingSignals2MIE+0x76>
			 * CAN Exchange Happening
			 * MisMatch Found because of Other Card is Receiving,
			 * This Card is Not Receiving
			 */
			//			printf("\n2\n");
			memcpy(&VitalData2MIE_st.Relays,&Siemens_OtherRelays_st.Relays,Siemens_OtherRelays_st.NoofDataBytes);
 800ce7e:	4b5b      	ldr	r3, [pc, #364]	; (800cfec <ProcessSendingSignals2MIE+0x1d4>)
 800ce80:	881b      	ldrh	r3, [r3, #0]
 800ce82:	461a      	mov	r2, r3
 800ce84:	495a      	ldr	r1, [pc, #360]	; (800cff0 <ProcessSendingSignals2MIE+0x1d8>)
 800ce86:	4858      	ldr	r0, [pc, #352]	; (800cfe8 <ProcessSendingSignals2MIE+0x1d0>)
 800ce88:	f015 fd28 	bl	80228dc <memcpy>
 800ce8c:	e019      	b.n	800cec2 <ProcessSendingSignals2MIE+0xaa>
		}
		else if( ((Tx_Siemens_self_sharing_st.DataReceving == RECEIVING) && (Rx_Siemens_self_sharing_st.DataReceving == NOT_RECEIVING)) && (SiemensClocks_st.SiemensCanXchangeHappening == YES) )
 800ce8e:	4b53      	ldr	r3, [pc, #332]	; (800cfdc <ProcessSendingSignals2MIE+0x1c4>)
 800ce90:	781b      	ldrb	r3, [r3, #0]
 800ce92:	2b01      	cmp	r3, #1
 800ce94:	d10f      	bne.n	800ceb6 <ProcessSendingSignals2MIE+0x9e>
 800ce96:	4b50      	ldr	r3, [pc, #320]	; (800cfd8 <ProcessSendingSignals2MIE+0x1c0>)
 800ce98:	781b      	ldrb	r3, [r3, #0]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d10b      	bne.n	800ceb6 <ProcessSendingSignals2MIE+0x9e>
 800ce9e:	4b4c      	ldr	r3, [pc, #304]	; (800cfd0 <ProcessSendingSignals2MIE+0x1b8>)
 800cea0:	785b      	ldrb	r3, [r3, #1]
 800cea2:	2b01      	cmp	r3, #1
 800cea4:	d107      	bne.n	800ceb6 <ProcessSendingSignals2MIE+0x9e>
			 * CAN Exchange Happening
			 * MisMatch Found because of This Card is Receiving,
			 * Other Card is Not Receiving
			 */
			//			printf("\n4\n");
			memcpy(&VitalData2MIE_st.Relays,&SiemensMain_Relays_st.Relays,SiemensMain_Relays_st.NoofDataBytes);
 800cea6:	4b4e      	ldr	r3, [pc, #312]	; (800cfe0 <ProcessSendingSignals2MIE+0x1c8>)
 800cea8:	881b      	ldrh	r3, [r3, #0]
 800ceaa:	461a      	mov	r2, r3
 800ceac:	494d      	ldr	r1, [pc, #308]	; (800cfe4 <ProcessSendingSignals2MIE+0x1cc>)
 800ceae:	484e      	ldr	r0, [pc, #312]	; (800cfe8 <ProcessSendingSignals2MIE+0x1d0>)
 800ceb0:	f015 fd14 	bl	80228dc <memcpy>
 800ceb4:	e005      	b.n	800cec2 <ProcessSendingSignals2MIE+0xaa>
		}
		else
		{
			//			printf("\n5\n");
			memset(&VitalData2MIE_st.Relays,0,sizeof(VitalData2MIE_st.Relays));
 800ceb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ceba:	2100      	movs	r1, #0
 800cebc:	484a      	ldr	r0, [pc, #296]	; (800cfe8 <ProcessSendingSignals2MIE+0x1d0>)
 800cebe:	f015 fd35 	bl	802292c <memset>
		}


		if((Tx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount >= EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) && (Rx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount >= EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) )
 800cec2:	4b46      	ldr	r3, [pc, #280]	; (800cfdc <ProcessSendingSignals2MIE+0x1c4>)
 800cec4:	885b      	ldrh	r3, [r3, #2]
 800cec6:	461a      	mov	r2, r3
 800cec8:	4b42      	ldr	r3, [pc, #264]	; (800cfd4 <ProcessSendingSignals2MIE+0x1bc>)
 800ceca:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800cece:	429a      	cmp	r2, r3
 800ced0:	d315      	bcc.n	800cefe <ProcessSendingSignals2MIE+0xe6>
 800ced2:	4b41      	ldr	r3, [pc, #260]	; (800cfd8 <ProcessSendingSignals2MIE+0x1c0>)
 800ced4:	885b      	ldrh	r3, [r3, #2]
 800ced6:	461a      	mov	r2, r3
 800ced8:	4b3e      	ldr	r3, [pc, #248]	; (800cfd4 <ProcessSendingSignals2MIE+0x1bc>)
 800ceda:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800cede:	429a      	cmp	r2, r3
 800cee0:	d30d      	bcc.n	800cefe <ProcessSendingSignals2MIE+0xe6>
		{
			//			printf("\n6\n");
			memset(&VitalData2MIE_st.Relays,0,sizeof(VitalData2MIE_st.Relays));
 800cee2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cee6:	2100      	movs	r1, #0
 800cee8:	483f      	ldr	r0, [pc, #252]	; (800cfe8 <ProcessSendingSignals2MIE+0x1d0>)
 800ceea:	f015 fd1f 	bl	802292c <memset>
			SET_BIT_USER(0,EI_HealthStatus); /* For Sending to MIE */
 800ceee:	4b41      	ldr	r3, [pc, #260]	; (800cff4 <ProcessSendingSignals2MIE+0x1dc>)
 800cef0:	881b      	ldrh	r3, [r3, #0]
 800cef2:	f043 0301 	orr.w	r3, r3, #1
 800cef6:	b29a      	uxth	r2, r3
 800cef8:	4b3e      	ldr	r3, [pc, #248]	; (800cff4 <ProcessSendingSignals2MIE+0x1dc>)
 800cefa:	801a      	strh	r2, [r3, #0]
 800cefc:	e006      	b.n	800cf0c <ProcessSendingSignals2MIE+0xf4>
		}
		else
		{
			CLEAR_BIT_USER(0,EI_HealthStatus); /* For Sending to MIE */
 800cefe:	4b3d      	ldr	r3, [pc, #244]	; (800cff4 <ProcessSendingSignals2MIE+0x1dc>)
 800cf00:	881b      	ldrh	r3, [r3, #0]
 800cf02:	f023 0301 	bic.w	r3, r3, #1
 800cf06:	b29a      	uxth	r2, r3
 800cf08:	4b3a      	ldr	r3, [pc, #232]	; (800cff4 <ProcessSendingSignals2MIE+0x1dc>)
 800cf0a:	801a      	strh	r2, [r3, #0]
		}

		VitalData2MIE_st.NoofDataBytes = EI_data.Siemens_st.Booloutputs  % 8;
 800cf0c:	4b31      	ldr	r3, [pc, #196]	; (800cfd4 <ProcessSendingSignals2MIE+0x1bc>)
 800cf0e:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800cf12:	f003 0307 	and.w	r3, r3, #7
 800cf16:	b29a      	uxth	r2, r3
 800cf18:	4b37      	ldr	r3, [pc, #220]	; (800cff8 <ProcessSendingSignals2MIE+0x1e0>)
 800cf1a:	801a      	strh	r2, [r3, #0]

		if(VitalData2MIE_st.NoofDataBytes != 0)
 800cf1c:	4b36      	ldr	r3, [pc, #216]	; (800cff8 <ProcessSendingSignals2MIE+0x1e0>)
 800cf1e:	881b      	ldrh	r3, [r3, #0]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d009      	beq.n	800cf38 <ProcessSendingSignals2MIE+0x120>
		{
			VitalData2MIE_st.NoofDataBytes  = (EI_data.Siemens_st.Booloutputs / 8) + 1;
 800cf24:	4b2b      	ldr	r3, [pc, #172]	; (800cfd4 <ProcessSendingSignals2MIE+0x1bc>)
 800cf26:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800cf2a:	08db      	lsrs	r3, r3, #3
 800cf2c:	b29b      	uxth	r3, r3
 800cf2e:	3301      	adds	r3, #1
 800cf30:	b29a      	uxth	r2, r3
 800cf32:	4b31      	ldr	r3, [pc, #196]	; (800cff8 <ProcessSendingSignals2MIE+0x1e0>)
 800cf34:	801a      	strh	r2, [r3, #0]
 800cf36:	e006      	b.n	800cf46 <ProcessSendingSignals2MIE+0x12e>
		}
		else
		{
			VitalData2MIE_st.NoofDataBytes = (EI_data.Siemens_st.Booloutputs / 8);
 800cf38:	4b26      	ldr	r3, [pc, #152]	; (800cfd4 <ProcessSendingSignals2MIE+0x1bc>)
 800cf3a:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800cf3e:	08db      	lsrs	r3, r3, #3
 800cf40:	b29a      	uxth	r2, r3
 800cf42:	4b2d      	ldr	r3, [pc, #180]	; (800cff8 <ProcessSendingSignals2MIE+0x1e0>)
 800cf44:	801a      	strh	r2, [r3, #0]
		}

		if(((strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)) && (SiemensClocks_st.SiemensCanXchangeHappening == NO))
 800cf46:	492d      	ldr	r1, [pc, #180]	; (800cffc <ProcessSendingSignals2MIE+0x1e4>)
 800cf48:	482d      	ldr	r0, [pc, #180]	; (800d000 <ProcessSendingSignals2MIE+0x1e8>)
 800cf4a:	f7f3 f979 	bl	8000240 <strcmp>
 800cf4e:	4603      	mov	r3, r0
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d008      	beq.n	800cf66 <ProcessSendingSignals2MIE+0x14e>
 800cf54:	4b1e      	ldr	r3, [pc, #120]	; (800cfd0 <ProcessSendingSignals2MIE+0x1b8>)
 800cf56:	785b      	ldrb	r3, [r3, #1]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d104      	bne.n	800cf66 <ProcessSendingSignals2MIE+0x14e>
		{
			TransmitCanPkt(EI_PROCESS_DATA);
 800cf5c:	f240 1019 	movw	r0, #281	; 0x119
 800cf60:	f002 fd92 	bl	800fa88 <TransmitCanPkt>
 800cf64:	e011      	b.n	800cf8a <ProcessSendingSignals2MIE+0x172>


#ifdef EI_1
		else
		{
			if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 800cf66:	4925      	ldr	r1, [pc, #148]	; (800cffc <ProcessSendingSignals2MIE+0x1e4>)
 800cf68:	4825      	ldr	r0, [pc, #148]	; (800d000 <ProcessSendingSignals2MIE+0x1e8>)
 800cf6a:	f7f3 f969 	bl	8000240 <strcmp>
 800cf6e:	4603      	mov	r3, r0
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d106      	bne.n	800cf82 <ProcessSendingSignals2MIE+0x16a>
			{
				memcpy(&VitalData2MIE_st.Relays,&SiemensMain_Relays_st.Relays,SiemensMain_Relays_st.NoofDataBytes);
 800cf74:	4b1a      	ldr	r3, [pc, #104]	; (800cfe0 <ProcessSendingSignals2MIE+0x1c8>)
 800cf76:	881b      	ldrh	r3, [r3, #0]
 800cf78:	461a      	mov	r2, r3
 800cf7a:	491a      	ldr	r1, [pc, #104]	; (800cfe4 <ProcessSendingSignals2MIE+0x1cc>)
 800cf7c:	481a      	ldr	r0, [pc, #104]	; (800cfe8 <ProcessSendingSignals2MIE+0x1d0>)
 800cf7e:	f015 fcad 	bl	80228dc <memcpy>
			}
			TransmitCanPkt(EI_PROCESS_DATA);
 800cf82:	f240 1019 	movw	r0, #281	; 0x119
 800cf86:	f002 fd7f 	bl	800fa88 <TransmitCanPkt>




#ifdef EI_1
		printf("\nSendingRelaysToMIE:");
 800cf8a:	481e      	ldr	r0, [pc, #120]	; (800d004 <ProcessSendingSignals2MIE+0x1ec>)
 800cf8c:	f015 fdb6 	bl	8022afc <iprintf>
		for(uint16_t Traverser = 0;Traverser<VitalData2MIE_st.NoofDataBytes;++Traverser)
 800cf90:	2300      	movs	r3, #0
 800cf92:	80fb      	strh	r3, [r7, #6]
 800cf94:	e00a      	b.n	800cfac <ProcessSendingSignals2MIE+0x194>
		{
			printf("%02X ",VitalData2MIE_st.Relays[Traverser]);
 800cf96:	88fb      	ldrh	r3, [r7, #6]
 800cf98:	4a17      	ldr	r2, [pc, #92]	; (800cff8 <ProcessSendingSignals2MIE+0x1e0>)
 800cf9a:	4413      	add	r3, r2
 800cf9c:	789b      	ldrb	r3, [r3, #2]
 800cf9e:	4619      	mov	r1, r3
 800cfa0:	4819      	ldr	r0, [pc, #100]	; (800d008 <ProcessSendingSignals2MIE+0x1f0>)
 800cfa2:	f015 fdab 	bl	8022afc <iprintf>
		for(uint16_t Traverser = 0;Traverser<VitalData2MIE_st.NoofDataBytes;++Traverser)
 800cfa6:	88fb      	ldrh	r3, [r7, #6]
 800cfa8:	3301      	adds	r3, #1
 800cfaa:	80fb      	strh	r3, [r7, #6]
 800cfac:	4b12      	ldr	r3, [pc, #72]	; (800cff8 <ProcessSendingSignals2MIE+0x1e0>)
 800cfae:	881b      	ldrh	r3, [r3, #0]
 800cfb0:	88fa      	ldrh	r2, [r7, #6]
 800cfb2:	429a      	cmp	r2, r3
 800cfb4:	d3ef      	bcc.n	800cf96 <ProcessSendingSignals2MIE+0x17e>
		}
		printf("\n");
 800cfb6:	200a      	movs	r0, #10
 800cfb8:	f015 fdb8 	bl	8022b2c <putchar>




#endif
		SiemensClocks_st.Signal2MIE_Clk = HAL_GetTick();
 800cfbc:	f008 fd94 	bl	8015ae8 <HAL_GetTick>
 800cfc0:	4603      	mov	r3, r0
 800cfc2:	4a03      	ldr	r2, [pc, #12]	; (800cfd0 <ProcessSendingSignals2MIE+0x1b8>)
 800cfc4:	6053      	str	r3, [r2, #4]
	}
}
 800cfc6:	bf00      	nop
 800cfc8:	3708      	adds	r7, #8
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	bd80      	pop	{r7, pc}
 800cfce:	bf00      	nop
 800cfd0:	20003538 	.word	0x20003538
 800cfd4:	20000304 	.word	0x20000304
 800cfd8:	20003530 	.word	0x20003530
 800cfdc:	2000352c 	.word	0x2000352c
 800cfe0:	20003758 	.word	0x20003758
 800cfe4:	2000375c 	.word	0x2000375c
 800cfe8:	20003556 	.word	0x20003556
 800cfec:	2000395c 	.word	0x2000395c
 800cff0:	20003960 	.word	0x20003960
 800cff4:	20000e3a 	.word	0x20000e3a
 800cff8:	20003554 	.word	0x20003554
 800cffc:	080264d0 	.word	0x080264d0
 800d000:	20000305 	.word	0x20000305
 800d004:	0802658c 	.word	0x0802658c
 800d008:	080265a4 	.word	0x080265a4

0800d00c <ProcessSelfSharing>:


void ProcessSelfSharing(void)
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	af00      	add	r7, sp, #0
	if( HAL_Elaps_Ticks(SiemensClocks_st.SelfSharingClk) > EI_data.Siemens_st.CAN_Xchange_Time)
 800d010:	4b0c      	ldr	r3, [pc, #48]	; (800d044 <ProcessSelfSharing+0x38>)
 800d012:	689b      	ldr	r3, [r3, #8]
 800d014:	4618      	mov	r0, r3
 800d016:	f001 ff7d 	bl	800ef14 <HAL_Elaps_Ticks>
 800d01a:	4602      	mov	r2, r0
 800d01c:	4b0a      	ldr	r3, [pc, #40]	; (800d048 <ProcessSelfSharing+0x3c>)
 800d01e:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 800d022:	429a      	cmp	r2, r3
 800d024:	d90b      	bls.n	800d03e <ProcessSelfSharing+0x32>
	{
		Tx_Siemens_self_sharing_st.MesgReceived = NOT_RECEIVED;
 800d026:	4b09      	ldr	r3, [pc, #36]	; (800d04c <ProcessSelfSharing+0x40>)
 800d028:	2200      	movs	r2, #0
 800d02a:	705a      	strb	r2, [r3, #1]

#ifdef EI_1
		TransmitCanPkt(EI_1_SELF_SHARING);
 800d02c:	f240 2001 	movw	r0, #513	; 0x201
 800d030:	f002 fd2a 	bl	800fa88 <TransmitCanPkt>
#endif
#ifdef EI_2
		TransmitCanPkt(EI_2_SELF_SHARING);
#endif

		SiemensClocks_st.SelfSharingClk = HAL_GetTick();
 800d034:	f008 fd58 	bl	8015ae8 <HAL_GetTick>
 800d038:	4603      	mov	r3, r0
 800d03a:	4a02      	ldr	r2, [pc, #8]	; (800d044 <ProcessSelfSharing+0x38>)
 800d03c:	6093      	str	r3, [r2, #8]
	}
}
 800d03e:	bf00      	nop
 800d040:	bd80      	pop	{r7, pc}
 800d042:	bf00      	nop
 800d044:	20003538 	.word	0x20003538
 800d048:	20000304 	.word	0x20000304
 800d04c:	2000352c 	.word	0x2000352c

0800d050 <ProcessDetectNoValidDataReceive>:

void ProcessDetectNoValidDataReceive(void)
{
 800d050:	b580      	push	{r7, lr}
 800d052:	af00      	add	r7, sp, #0

	if((SiemensClocks_st.LastReceiveClk != 0) && (HAL_Elaps_Ticks(SiemensClocks_st.LastReceiveClk) > EI_data.Siemens_st.COMM_FAILURE_TIME_OUT) )
 800d054:	4b1a      	ldr	r3, [pc, #104]	; (800d0c0 <ProcessDetectNoValidDataReceive+0x70>)
 800d056:	68db      	ldr	r3, [r3, #12]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d014      	beq.n	800d086 <ProcessDetectNoValidDataReceive+0x36>
 800d05c:	4b18      	ldr	r3, [pc, #96]	; (800d0c0 <ProcessDetectNoValidDataReceive+0x70>)
 800d05e:	68db      	ldr	r3, [r3, #12]
 800d060:	4618      	mov	r0, r3
 800d062:	f001 ff57 	bl	800ef14 <HAL_Elaps_Ticks>
 800d066:	4602      	mov	r2, r0
 800d068:	4b16      	ldr	r3, [pc, #88]	; (800d0c4 <ProcessDetectNoValidDataReceive+0x74>)
 800d06a:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 800d06e:	429a      	cmp	r2, r3
 800d070:	d909      	bls.n	800d086 <ProcessDetectNoValidDataReceive+0x36>
	{
		if(Tx_Siemens_self_sharing_st.DataReceving != NOT_RECEIVED)
 800d072:	4b15      	ldr	r3, [pc, #84]	; (800d0c8 <ProcessDetectNoValidDataReceive+0x78>)
 800d074:	781b      	ldrb	r3, [r3, #0]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d005      	beq.n	800d086 <ProcessDetectNoValidDataReceive+0x36>
		{
			printf("This Card Not Receiving Data\n");
 800d07a:	4814      	ldr	r0, [pc, #80]	; (800d0cc <ProcessDetectNoValidDataReceive+0x7c>)
 800d07c:	f015 fdda 	bl	8022c34 <puts>
			Tx_Siemens_self_sharing_st.DataReceving = NOT_RECEIVED;
 800d080:	4b11      	ldr	r3, [pc, #68]	; (800d0c8 <ProcessDetectNoValidDataReceive+0x78>)
 800d082:	2200      	movs	r2, #0
 800d084:	701a      	strb	r2, [r3, #0]
		}
	}

	if((Tx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount > EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) && (Rx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount > EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) )
 800d086:	4b10      	ldr	r3, [pc, #64]	; (800d0c8 <ProcessDetectNoValidDataReceive+0x78>)
 800d088:	885b      	ldrh	r3, [r3, #2]
 800d08a:	461a      	mov	r2, r3
 800d08c:	4b0d      	ldr	r3, [pc, #52]	; (800d0c4 <ProcessDetectNoValidDataReceive+0x74>)
 800d08e:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800d092:	429a      	cmp	r2, r3
 800d094:	d911      	bls.n	800d0ba <ProcessDetectNoValidDataReceive+0x6a>
 800d096:	4b0e      	ldr	r3, [pc, #56]	; (800d0d0 <ProcessDetectNoValidDataReceive+0x80>)
 800d098:	885b      	ldrh	r3, [r3, #2]
 800d09a:	461a      	mov	r2, r3
 800d09c:	4b09      	ldr	r3, [pc, #36]	; (800d0c4 <ProcessDetectNoValidDataReceive+0x74>)
 800d09e:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800d0a2:	429a      	cmp	r2, r3
 800d0a4:	d909      	bls.n	800d0ba <ProcessDetectNoValidDataReceive+0x6a>
	{
		if(Tx_Siemens_self_sharing_st.DataReceving != NOT_RECEIVED)
 800d0a6:	4b08      	ldr	r3, [pc, #32]	; (800d0c8 <ProcessDetectNoValidDataReceive+0x78>)
 800d0a8:	781b      	ldrb	r3, [r3, #0]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d005      	beq.n	800d0ba <ProcessDetectNoValidDataReceive+0x6a>
		{
			printf("This Card Not Valid Receiving Data\n");
 800d0ae:	4809      	ldr	r0, [pc, #36]	; (800d0d4 <ProcessDetectNoValidDataReceive+0x84>)
 800d0b0:	f015 fdc0 	bl	8022c34 <puts>
			Tx_Siemens_self_sharing_st.DataReceving = NOT_RECEIVED;
 800d0b4:	4b04      	ldr	r3, [pc, #16]	; (800d0c8 <ProcessDetectNoValidDataReceive+0x78>)
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800d0ba:	bf00      	nop
 800d0bc:	bd80      	pop	{r7, pc}
 800d0be:	bf00      	nop
 800d0c0:	20003538 	.word	0x20003538
 800d0c4:	20000304 	.word	0x20000304
 800d0c8:	2000352c 	.word	0x2000352c
 800d0cc:	080265ac 	.word	0x080265ac
 800d0d0:	20003530 	.word	0x20003530
 800d0d4:	080265cc 	.word	0x080265cc

0800d0d8 <SendRelays2Other>:

void SendRelays2Other(void)
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	af00      	add	r7, sp, #0
	if( HAL_Elaps_Ticks(SiemensClocks_st.Relays2OtheClk) > ONE_SEC)
 800d0dc:	4b09      	ldr	r3, [pc, #36]	; (800d104 <SendRelays2Other+0x2c>)
 800d0de:	691b      	ldr	r3, [r3, #16]
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	f001 ff17 	bl	800ef14 <HAL_Elaps_Ticks>
 800d0e6:	4603      	mov	r3, r0
 800d0e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d0ec:	d908      	bls.n	800d100 <SendRelays2Other+0x28>
	{

#ifdef EI_1
		TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 800d0ee:	f240 2007 	movw	r0, #519	; 0x207
 800d0f2:	f002 fcc9 	bl	800fa88 <TransmitCanPkt>
#endif
#ifdef EI_2
		TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif
		SiemensClocks_st.Relays2OtheClk = HAL_GetTick();
 800d0f6:	f008 fcf7 	bl	8015ae8 <HAL_GetTick>
 800d0fa:	4603      	mov	r3, r0
 800d0fc:	4a01      	ldr	r2, [pc, #4]	; (800d104 <SendRelays2Other+0x2c>)
 800d0fe:	6113      	str	r3, [r2, #16]

	}
}
 800d100:	bf00      	nop
 800d102:	bd80      	pop	{r7, pc}
 800d104:	20003538 	.word	0x20003538

0800d108 <CheckRelayMisMatch>:

void CheckRelayMisMatch(void)
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	af00      	add	r7, sp, #0
	if(HAL_Elaps_Ticks(SiemensClocks_st.RelayMisMatchCheckClk) > FIVE_HUNDRED_MS)
 800d10c:	4b16      	ldr	r3, [pc, #88]	; (800d168 <CheckRelayMisMatch+0x60>)
 800d10e:	695b      	ldr	r3, [r3, #20]
 800d110:	4618      	mov	r0, r3
 800d112:	f001 feff 	bl	800ef14 <HAL_Elaps_Ticks>
 800d116:	4603      	mov	r3, r0
 800d118:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800d11c:	d922      	bls.n	800d164 <CheckRelayMisMatch+0x5c>
	{
		if( (Tx_Siemens_self_sharing_st.DataReceving == NOT_RECEIVING) && (Rx_Siemens_self_sharing_st.DataReceving == RECEIVING) )
 800d11e:	4b13      	ldr	r3, [pc, #76]	; (800d16c <CheckRelayMisMatch+0x64>)
 800d120:	781b      	ldrb	r3, [r3, #0]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d10c      	bne.n	800d140 <CheckRelayMisMatch+0x38>
 800d126:	4b12      	ldr	r3, [pc, #72]	; (800d170 <CheckRelayMisMatch+0x68>)
 800d128:	781b      	ldrb	r3, [r3, #0]
 800d12a:	2b01      	cmp	r3, #1
 800d12c:	d108      	bne.n	800d140 <CheckRelayMisMatch+0x38>
		{
			memcpy(&SiemensMain_Relays_st,&Siemens_OtherRelays_st,sizeof(VITAL_DATA_SHARING_t));
 800d12e:	4a11      	ldr	r2, [pc, #68]	; (800d174 <CheckRelayMisMatch+0x6c>)
 800d130:	4b11      	ldr	r3, [pc, #68]	; (800d178 <CheckRelayMisMatch+0x70>)
 800d132:	4610      	mov	r0, r2
 800d134:	4619      	mov	r1, r3
 800d136:	f44f 7301 	mov.w	r3, #516	; 0x204
 800d13a:	461a      	mov	r2, r3
 800d13c:	f015 fbce 	bl	80228dc <memcpy>
		}
		if(Siemens_OtherRelays_st.VitalCRC != SiemensMain_Relays_st.VitalCRC)
 800d140:	4b0d      	ldr	r3, [pc, #52]	; (800d178 <CheckRelayMisMatch+0x70>)
 800d142:	885a      	ldrh	r2, [r3, #2]
 800d144:	4b0b      	ldr	r3, [pc, #44]	; (800d174 <CheckRelayMisMatch+0x6c>)
 800d146:	885b      	ldrh	r3, [r3, #2]
 800d148:	429a      	cmp	r2, r3
 800d14a:	d003      	beq.n	800d154 <CheckRelayMisMatch+0x4c>
		{
			SiemensClocks_st.MisMatchFlag = SET;
 800d14c:	4b06      	ldr	r3, [pc, #24]	; (800d168 <CheckRelayMisMatch+0x60>)
 800d14e:	2201      	movs	r2, #1
 800d150:	701a      	strb	r2, [r3, #0]
 800d152:	e002      	b.n	800d15a <CheckRelayMisMatch+0x52>
		}
		else
		{
			SiemensClocks_st.MisMatchFlag = CLEAR;
 800d154:	4b04      	ldr	r3, [pc, #16]	; (800d168 <CheckRelayMisMatch+0x60>)
 800d156:	2200      	movs	r2, #0
 800d158:	701a      	strb	r2, [r3, #0]
		}

		SiemensClocks_st.RelayMisMatchCheckClk = HAL_GetTick();
 800d15a:	f008 fcc5 	bl	8015ae8 <HAL_GetTick>
 800d15e:	4603      	mov	r3, r0
 800d160:	4a01      	ldr	r2, [pc, #4]	; (800d168 <CheckRelayMisMatch+0x60>)
 800d162:	6153      	str	r3, [r2, #20]
	}
}
 800d164:	bf00      	nop
 800d166:	bd80      	pop	{r7, pc}
 800d168:	20003538 	.word	0x20003538
 800d16c:	2000352c 	.word	0x2000352c
 800d170:	20003530 	.word	0x20003530
 800d174:	20003758 	.word	0x20003758
 800d178:	2000395c 	.word	0x2000395c

0800d17c <Detect_SiemensCAN_Xchange_Failure>:

void Detect_SiemensCAN_Xchange_Failure(void)
{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	af00      	add	r7, sp, #0
	static uint32_t Previous_Clock_RCV_SELF_XCHG_CLK = 0;

	if(SiemensClocks_st.SiemensCanXchangeHappening == YES)
 800d180:	4b16      	ldr	r3, [pc, #88]	; (800d1dc <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800d182:	785b      	ldrb	r3, [r3, #1]
 800d184:	2b01      	cmp	r3, #1
 800d186:	d101      	bne.n	800d18c <Detect_SiemensCAN_Xchange_Failure+0x10>
	{
		Blink_S2();
 800d188:	f006 fb86 	bl	8013898 <Blink_S2>
	}

	if(HAL_Elaps_Ticks(SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK)>= EI_data.Siemens_st.CAN_EXCHANGE_TIME_OUT)
 800d18c:	4b13      	ldr	r3, [pc, #76]	; (800d1dc <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800d18e:	699b      	ldr	r3, [r3, #24]
 800d190:	4618      	mov	r0, r3
 800d192:	f001 febf 	bl	800ef14 <HAL_Elaps_Ticks>
 800d196:	4602      	mov	r2, r0
 800d198:	4b11      	ldr	r3, [pc, #68]	; (800d1e0 <Detect_SiemensCAN_Xchange_Failure+0x64>)
 800d19a:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
 800d19e:	429a      	cmp	r2, r3
 800d1a0:	d31a      	bcc.n	800d1d8 <Detect_SiemensCAN_Xchange_Failure+0x5c>
	{
		if(Previous_Clock_RCV_SELF_XCHG_CLK != SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK)
 800d1a2:	4b0e      	ldr	r3, [pc, #56]	; (800d1dc <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800d1a4:	699a      	ldr	r2, [r3, #24]
 800d1a6:	4b0f      	ldr	r3, [pc, #60]	; (800d1e4 <Detect_SiemensCAN_Xchange_Failure+0x68>)
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	429a      	cmp	r2, r3
 800d1ac:	d014      	beq.n	800d1d8 <Detect_SiemensCAN_Xchange_Failure+0x5c>
		{
			SiemensClocks_st.SiemensCanXchangeHappening = NO;
 800d1ae:	4b0b      	ldr	r3, [pc, #44]	; (800d1dc <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	705a      	strb	r2, [r3, #1]
			Previous_Clock_RCV_SELF_XCHG_CLK = SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK;
 800d1b4:	4b09      	ldr	r3, [pc, #36]	; (800d1dc <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800d1b6:	699b      	ldr	r3, [r3, #24]
 800d1b8:	4a0a      	ldr	r2, [pc, #40]	; (800d1e4 <Detect_SiemensCAN_Xchange_Failure+0x68>)
 800d1ba:	6013      	str	r3, [r2, #0]
			printf("CAN Data Not Received from last %lu Seconds\n",(HAL_Elaps_Ticks(SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK)/1000));
 800d1bc:	4b07      	ldr	r3, [pc, #28]	; (800d1dc <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800d1be:	699b      	ldr	r3, [r3, #24]
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	f001 fea7 	bl	800ef14 <HAL_Elaps_Ticks>
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	4a07      	ldr	r2, [pc, #28]	; (800d1e8 <Detect_SiemensCAN_Xchange_Failure+0x6c>)
 800d1ca:	fba2 2303 	umull	r2, r3, r2, r3
 800d1ce:	099b      	lsrs	r3, r3, #6
 800d1d0:	4619      	mov	r1, r3
 800d1d2:	4806      	ldr	r0, [pc, #24]	; (800d1ec <Detect_SiemensCAN_Xchange_Failure+0x70>)
 800d1d4:	f015 fc92 	bl	8022afc <iprintf>
		}
	}
}
 800d1d8:	bf00      	nop
 800d1da:	bd80      	pop	{r7, pc}
 800d1dc:	20003538 	.word	0x20003538
 800d1e0:	20000304 	.word	0x20000304
 800d1e4:	20004c50 	.word	0x20004c50
 800d1e8:	10624dd3 	.word	0x10624dd3
 800d1ec:	080265f0 	.word	0x080265f0

0800d1f0 <Print_Siemens_MSG>:

void Print_Siemens_MSG(SIEMENS_PKT_t *SiemensPrint_st,uint8_t *Buff,uint16_t Length,uint8_t TX_RX)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b086      	sub	sp, #24
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	60f8      	str	r0, [r7, #12]
 800d1f8:	60b9      	str	r1, [r7, #8]
 800d1fa:	4611      	mov	r1, r2
 800d1fc:	461a      	mov	r2, r3
 800d1fe:	460b      	mov	r3, r1
 800d200:	80fb      	strh	r3, [r7, #6]
 800d202:	4613      	mov	r3, r2
 800d204:	717b      	strb	r3, [r7, #5]

	//	printf("\n________________________________________________________________________________________________\n");
	printf("\nTX_RX:");
 800d206:	484d      	ldr	r0, [pc, #308]	; (800d33c <Print_Siemens_MSG+0x14c>)
 800d208:	f015 fc78 	bl	8022afc <iprintf>
	if(TX_RX == TX)
 800d20c:	797b      	ldrb	r3, [r7, #5]
 800d20e:	2b01      	cmp	r3, #1
 800d210:	d103      	bne.n	800d21a <Print_Siemens_MSG+0x2a>
	{
		printf("TX|");
 800d212:	484b      	ldr	r0, [pc, #300]	; (800d340 <Print_Siemens_MSG+0x150>)
 800d214:	f015 fc72 	bl	8022afc <iprintf>
 800d218:	e005      	b.n	800d226 <Print_Siemens_MSG+0x36>
	}
	else if(TX_RX == RX)
 800d21a:	797b      	ldrb	r3, [r7, #5]
 800d21c:	2b02      	cmp	r3, #2
 800d21e:	d102      	bne.n	800d226 <Print_Siemens_MSG+0x36>
	{
		printf("RX|");
 800d220:	4848      	ldr	r0, [pc, #288]	; (800d344 <Print_Siemens_MSG+0x154>)
 800d222:	f015 fc6b 	bl	8022afc <iprintf>
	}
	printf("DT:%u|",SiemensPrint_st->DesSysType);
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	781b      	ldrb	r3, [r3, #0]
 800d22a:	4619      	mov	r1, r3
 800d22c:	4846      	ldr	r0, [pc, #280]	; (800d348 <Print_Siemens_MSG+0x158>)
 800d22e:	f015 fc65 	bl	8022afc <iprintf>
	printf("DA:%lu|",SiemensPrint_st->ExtDestAddr);
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	689b      	ldr	r3, [r3, #8]
 800d236:	4619      	mov	r1, r3
 800d238:	4844      	ldr	r0, [pc, #272]	; (800d34c <Print_Siemens_MSG+0x15c>)
 800d23a:	f015 fc5f 	bl	8022afc <iprintf>
	printf("ST:%u|",SiemensPrint_st->SrcSysType);
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	7b1b      	ldrb	r3, [r3, #12]
 800d242:	4619      	mov	r1, r3
 800d244:	4842      	ldr	r0, [pc, #264]	; (800d350 <Print_Siemens_MSG+0x160>)
 800d246:	f015 fc59 	bl	8022afc <iprintf>
	printf("SA:%lu|",SiemensPrint_st->ExtSourceAddr);
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	695b      	ldr	r3, [r3, #20]
 800d24e:	4619      	mov	r1, r3
 800d250:	4840      	ldr	r0, [pc, #256]	; (800d354 <Print_Siemens_MSG+0x164>)
 800d252:	f015 fc53 	bl	8022afc <iprintf>
	printf("PD_V:%u|",SiemensPrint_st->ProdDataVer);
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	7e1b      	ldrb	r3, [r3, #24]
 800d25a:	4619      	mov	r1, r3
 800d25c:	483e      	ldr	r0, [pc, #248]	; (800d358 <Print_Siemens_MSG+0x168>)
 800d25e:	f015 fc4d 	bl	8022afc <iprintf>
	printf("CI:%u|",SiemensPrint_st->CompIndex);
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	7e5b      	ldrb	r3, [r3, #25]
 800d266:	4619      	mov	r1, r3
 800d268:	483c      	ldr	r0, [pc, #240]	; (800d35c <Print_Siemens_MSG+0x16c>)
 800d26a:	f015 fc47 	bl	8022afc <iprintf>
	printf("DP:%u|",SiemensPrint_st->DestPort);
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	7e9b      	ldrb	r3, [r3, #26]
 800d272:	4619      	mov	r1, r3
 800d274:	483a      	ldr	r0, [pc, #232]	; (800d360 <Print_Siemens_MSG+0x170>)
 800d276:	f015 fc41 	bl	8022afc <iprintf>
	printf("SP:%u|",SiemensPrint_st->SourcePort);
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	7edb      	ldrb	r3, [r3, #27]
 800d27e:	4619      	mov	r1, r3
 800d280:	4838      	ldr	r0, [pc, #224]	; (800d364 <Print_Siemens_MSG+0x174>)
 800d282:	f015 fc3b 	bl	8022afc <iprintf>
	printf("RX_TS:%lu|",SiemensPrint_st->RxTimeStamp);
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	69db      	ldr	r3, [r3, #28]
 800d28a:	4619      	mov	r1, r3
 800d28c:	4836      	ldr	r0, [pc, #216]	; (800d368 <Print_Siemens_MSG+0x178>)
 800d28e:	f015 fc35 	bl	8022afc <iprintf>
	printf("TX_TS:%lu\n",SiemensPrint_st->TxTimeStamp);
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	6a1b      	ldr	r3, [r3, #32]
 800d296:	4619      	mov	r1, r3
 800d298:	4834      	ldr	r0, [pc, #208]	; (800d36c <Print_Siemens_MSG+0x17c>)
 800d29a:	f015 fc2f 	bl	8022afc <iprintf>
	if(TX_RX == RX)
 800d29e:	797b      	ldrb	r3, [r7, #5]
 800d2a0:	2b02      	cmp	r3, #2
 800d2a2:	d122      	bne.n	800d2ea <Print_Siemens_MSG+0xfa>
	{
		printf("RC:%u|",SiemensPrint_st->No_ofDataBytes);
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d2a8:	4619      	mov	r1, r3
 800d2aa:	4831      	ldr	r0, [pc, #196]	; (800d370 <Print_Siemens_MSG+0x180>)
 800d2ac:	f015 fc26 	bl	8022afc <iprintf>
		for(uint16_t Traverser = 0;Traverser <SiemensPrint_st->No_ofDataBytes;++Traverser)
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	82fb      	strh	r3, [r7, #22]
 800d2b4:	e00b      	b.n	800d2ce <Print_Siemens_MSG+0xde>
		{
			printf("%02X ",SiemensPrint_st->AppData[Traverser]);
 800d2b6:	8afb      	ldrh	r3, [r7, #22]
 800d2b8:	68fa      	ldr	r2, [r7, #12]
 800d2ba:	4413      	add	r3, r2
 800d2bc:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800d2c0:	4619      	mov	r1, r3
 800d2c2:	482c      	ldr	r0, [pc, #176]	; (800d374 <Print_Siemens_MSG+0x184>)
 800d2c4:	f015 fc1a 	bl	8022afc <iprintf>
		for(uint16_t Traverser = 0;Traverser <SiemensPrint_st->No_ofDataBytes;++Traverser)
 800d2c8:	8afb      	ldrh	r3, [r7, #22]
 800d2ca:	3301      	adds	r3, #1
 800d2cc:	82fb      	strh	r3, [r7, #22]
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d2d2:	8afa      	ldrh	r2, [r7, #22]
 800d2d4:	429a      	cmp	r2, r3
 800d2d6:	d3ee      	bcc.n	800d2b6 <Print_Siemens_MSG+0xc6>
		}
		printf("\n");
 800d2d8:	200a      	movs	r0, #10
 800d2da:	f015 fc27 	bl	8022b2c <putchar>

		if(Debug_flag == 2)
 800d2de:	4b26      	ldr	r3, [pc, #152]	; (800d378 <Print_Siemens_MSG+0x188>)
 800d2e0:	781b      	ldrb	r3, [r3, #0]
 800d2e2:	2b02      	cmp	r3, #2
 800d2e4:	d101      	bne.n	800d2ea <Print_Siemens_MSG+0xfa>
		{
			PrintSignals();
 800d2e6:	f000 ff65 	bl	800e1b4 <PrintSignals>
		//		}
		//		printf("\n____________________________________ \n");


	}
	if(Debug_flag == 1)
 800d2ea:	4b23      	ldr	r3, [pc, #140]	; (800d378 <Print_Siemens_MSG+0x188>)
 800d2ec:	781b      	ldrb	r3, [r3, #0]
 800d2ee:	2b01      	cmp	r3, #1
 800d2f0:	d120      	bne.n	800d334 <Print_Siemens_MSG+0x144>
	{
		for(uint16_t Byte = 0;Byte<Length;++Byte)
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	82bb      	strh	r3, [r7, #20]
 800d2f6:	e016      	b.n	800d326 <Print_Siemens_MSG+0x136>
		{
			if((Byte != 0) && ( (Byte % 32) == 0) )
 800d2f8:	8abb      	ldrh	r3, [r7, #20]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d008      	beq.n	800d310 <Print_Siemens_MSG+0x120>
 800d2fe:	8abb      	ldrh	r3, [r7, #20]
 800d300:	f003 031f 	and.w	r3, r3, #31
 800d304:	b29b      	uxth	r3, r3
 800d306:	2b00      	cmp	r3, #0
 800d308:	d102      	bne.n	800d310 <Print_Siemens_MSG+0x120>
			{
				printf("\n");
 800d30a:	200a      	movs	r0, #10
 800d30c:	f015 fc0e 	bl	8022b2c <putchar>
			}
			printf("%02X ",Buff[Byte]);
 800d310:	8abb      	ldrh	r3, [r7, #20]
 800d312:	68ba      	ldr	r2, [r7, #8]
 800d314:	4413      	add	r3, r2
 800d316:	781b      	ldrb	r3, [r3, #0]
 800d318:	4619      	mov	r1, r3
 800d31a:	4816      	ldr	r0, [pc, #88]	; (800d374 <Print_Siemens_MSG+0x184>)
 800d31c:	f015 fbee 	bl	8022afc <iprintf>
		for(uint16_t Byte = 0;Byte<Length;++Byte)
 800d320:	8abb      	ldrh	r3, [r7, #20]
 800d322:	3301      	adds	r3, #1
 800d324:	82bb      	strh	r3, [r7, #20]
 800d326:	8aba      	ldrh	r2, [r7, #20]
 800d328:	88fb      	ldrh	r3, [r7, #6]
 800d32a:	429a      	cmp	r2, r3
 800d32c:	d3e4      	bcc.n	800d2f8 <Print_Siemens_MSG+0x108>
		}
		printf("\n");
 800d32e:	200a      	movs	r0, #10
 800d330:	f015 fbfc 	bl	8022b2c <putchar>
	}
	//	printf("\n");
	//	printf("\n________________________________________________________________________________________________\n");
}
 800d334:	bf00      	nop
 800d336:	3718      	adds	r7, #24
 800d338:	46bd      	mov	sp, r7
 800d33a:	bd80      	pop	{r7, pc}
 800d33c:	08026620 	.word	0x08026620
 800d340:	08026628 	.word	0x08026628
 800d344:	0802662c 	.word	0x0802662c
 800d348:	08026630 	.word	0x08026630
 800d34c:	08026638 	.word	0x08026638
 800d350:	08026640 	.word	0x08026640
 800d354:	08026648 	.word	0x08026648
 800d358:	08026650 	.word	0x08026650
 800d35c:	0802665c 	.word	0x0802665c
 800d360:	08026664 	.word	0x08026664
 800d364:	0802666c 	.word	0x0802666c
 800d368:	08026674 	.word	0x08026674
 800d36c:	08026680 	.word	0x08026680
 800d370:	0802668c 	.word	0x0802668c
 800d374:	080265a4 	.word	0x080265a4
 800d378:	20000645 	.word	0x20000645

0800d37c <Chech_forSiemensCMD>:



void Chech_forSiemensCMD(void)
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b09a      	sub	sp, #104	; 0x68
 800d380:	af00      	add	r7, sp, #0
	//	unsigned char ch[20] = {0,},i=0;
	uint8_t IS_COMMAND_RECEIVED = NO;
 800d382:	2300      	movs	r3, #0
 800d384:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t Index = 0;
 800d388:	2300      	movs	r3, #0
 800d38a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t Byte = 0;
 800d38e:	2300      	movs	r3, #0
 800d390:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	uint8_t Buffer[100] = {0,};
 800d394:	2300      	movs	r3, #0
 800d396:	603b      	str	r3, [r7, #0]
 800d398:	1d3b      	adds	r3, r7, #4
 800d39a:	2260      	movs	r2, #96	; 0x60
 800d39c:	2100      	movs	r1, #0
 800d39e:	4618      	mov	r0, r3
 800d3a0:	f015 fac4 	bl	802292c <memset>
	if(HAL_Elaps_Ticks(Isp_Intr_Clk) < 10)
 800d3a4:	4bb9      	ldr	r3, [pc, #740]	; (800d68c <Chech_forSiemensCMD+0x310>)
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	f001 fdb3 	bl	800ef14 <HAL_Elaps_Ticks>
 800d3ae:	4603      	mov	r3, r0
 800d3b0:	2b09      	cmp	r3, #9
 800d3b2:	f240 81ad 	bls.w	800d710 <Chech_forSiemensCMD+0x394>
	{
		return;
	}
	else
	{
		while(Com_DataReady(ISP_PORT))
 800d3b6:	e010      	b.n	800d3da <Chech_forSiemensCMD+0x5e>
		{
			Byte = Com_Get_Byte(ISP_PORT);
 800d3b8:	2000      	movs	r0, #0
 800d3ba:	f008 f86d 	bl	8015498 <Com_Get_Byte>
 800d3be:	4603      	mov	r3, r0
 800d3c0:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			Buffer[Index++] = Byte;
 800d3c4:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800d3c8:	1c5a      	adds	r2, r3, #1
 800d3ca:	f887 2066 	strb.w	r2, [r7, #102]	; 0x66
 800d3ce:	3368      	adds	r3, #104	; 0x68
 800d3d0:	443b      	add	r3, r7
 800d3d2:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 800d3d6:	f803 2c68 	strb.w	r2, [r3, #-104]
		while(Com_DataReady(ISP_PORT))
 800d3da:	2000      	movs	r0, #0
 800d3dc:	f008 f81c 	bl	8015418 <Com_DataReady>
 800d3e0:	4603      	mov	r3, r0
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d1e8      	bne.n	800d3b8 <Chech_forSiemensCMD+0x3c>
		}
		if(Index>0)
 800d3e6:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	f000 8144 	beq.w	800d678 <Chech_forSiemensCMD+0x2fc>
		{
			Buffer[Index] = 0;
 800d3f0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800d3f4:	3368      	adds	r3, #104	; 0x68
 800d3f6:	443b      	add	r3, r7
 800d3f8:	2200      	movs	r2, #0
 800d3fa:	f803 2c68 	strb.w	r2, [r3, #-104]
			printf("Received from ISP:%s\n",Buffer);
 800d3fe:	463b      	mov	r3, r7
 800d400:	4619      	mov	r1, r3
 800d402:	48a3      	ldr	r0, [pc, #652]	; (800d690 <Chech_forSiemensCMD+0x314>)
 800d404:	f015 fb7a 	bl	8022afc <iprintf>
			switch(Is_SiemensCommand_Valid(Buffer,Index))
 800d408:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 800d40c:	463b      	mov	r3, r7
 800d40e:	4611      	mov	r1, r2
 800d410:	4618      	mov	r0, r3
 800d412:	f000 faf3 	bl	800d9fc <Is_SiemensCommand_Valid>
 800d416:	4603      	mov	r3, r0
 800d418:	2b0c      	cmp	r3, #12
 800d41a:	f200 8129 	bhi.w	800d670 <Chech_forSiemensCMD+0x2f4>
 800d41e:	a201      	add	r2, pc, #4	; (adr r2, 800d424 <Chech_forSiemensCMD+0xa8>)
 800d420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d424:	0800d459 	.word	0x0800d459
 800d428:	0800d467 	.word	0x0800d467
 800d42c:	0800d4cb 	.word	0x0800d4cb
 800d430:	0800d4ed 	.word	0x0800d4ed
 800d434:	0800d515 	.word	0x0800d515
 800d438:	0800d53d 	.word	0x0800d53d
 800d43c:	0800d565 	.word	0x0800d565
 800d440:	0800d58d 	.word	0x0800d58d
 800d444:	0800d5b5 	.word	0x0800d5b5
 800d448:	0800d5dd 	.word	0x0800d5dd
 800d44c:	0800d605 	.word	0x0800d605
 800d450:	0800d62d 	.word	0x0800d62d
 800d454:	0800d655 	.word	0x0800d655
			{
			case ZERO:
				Dats_Request_Flag = 1;
 800d458:	4b8e      	ldr	r3, [pc, #568]	; (800d694 <Chech_forSiemensCMD+0x318>)
 800d45a:	2201      	movs	r2, #1
 800d45c:	701a      	strb	r2, [r3, #0]
				printf("\n*************PLEASE LOAD EI DATS USING APPLICATION************\n");
 800d45e:	488e      	ldr	r0, [pc, #568]	; (800d698 <Chech_forSiemensCMD+0x31c>)
 800d460:	f015 fbe8 	bl	8022c34 <puts>
				break;
 800d464:	e109      	b.n	800d67a <Chech_forSiemensCMD+0x2fe>
			case ONE:
				printf("Received \"%s\":%u\n",Commands_List[ONE],(Buffer[Index-1])-'0');
 800d466:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800d46a:	3b01      	subs	r3, #1
 800d46c:	3368      	adds	r3, #104	; 0x68
 800d46e:	443b      	add	r3, r7
 800d470:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800d474:	3b30      	subs	r3, #48	; 0x30
 800d476:	461a      	mov	r2, r3
 800d478:	4988      	ldr	r1, [pc, #544]	; (800d69c <Chech_forSiemensCMD+0x320>)
 800d47a:	4889      	ldr	r0, [pc, #548]	; (800d6a0 <Chech_forSiemensCMD+0x324>)
 800d47c:	f015 fb3e 	bl	8022afc <iprintf>
				if( (((Buffer[Index-1])-'0') >= 0) && ((Buffer[Index-1])-'0') < 3)
 800d480:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800d484:	3b01      	subs	r3, #1
 800d486:	3368      	adds	r3, #104	; 0x68
 800d488:	443b      	add	r3, r7
 800d48a:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800d48e:	2b2f      	cmp	r3, #47	; 0x2f
 800d490:	d914      	bls.n	800d4bc <Chech_forSiemensCMD+0x140>
 800d492:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800d496:	3b01      	subs	r3, #1
 800d498:	3368      	adds	r3, #104	; 0x68
 800d49a:	443b      	add	r3, r7
 800d49c:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800d4a0:	2b32      	cmp	r3, #50	; 0x32
 800d4a2:	d80b      	bhi.n	800d4bc <Chech_forSiemensCMD+0x140>
				{
					Debug_flag = (Buffer[Index-1])-'0';
 800d4a4:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800d4a8:	3b01      	subs	r3, #1
 800d4aa:	3368      	adds	r3, #104	; 0x68
 800d4ac:	443b      	add	r3, r7
 800d4ae:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800d4b2:	3b30      	subs	r3, #48	; 0x30
 800d4b4:	b2da      	uxtb	r2, r3
 800d4b6:	4b7b      	ldr	r3, [pc, #492]	; (800d6a4 <Chech_forSiemensCMD+0x328>)
 800d4b8:	701a      	strb	r2, [r3, #0]
 800d4ba:	e002      	b.n	800d4c2 <Chech_forSiemensCMD+0x146>
				}
				else
				{
					printf("Please Send Valid Command\n");
 800d4bc:	487a      	ldr	r0, [pc, #488]	; (800d6a8 <Chech_forSiemensCMD+0x32c>)
 800d4be:	f015 fbb9 	bl	8022c34 <puts>
				}
				IS_COMMAND_RECEIVED = YES;
 800d4c2:	2301      	movs	r3, #1
 800d4c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d4c8:	e0d7      	b.n	800d67a <Chech_forSiemensCMD+0x2fe>

			case TWO:
				printf("Received %s\n",Commands_List[TWO]);
 800d4ca:	4978      	ldr	r1, [pc, #480]	; (800d6ac <Chech_forSiemensCMD+0x330>)
 800d4cc:	4878      	ldr	r0, [pc, #480]	; (800d6b0 <Chech_forSiemensCMD+0x334>)
 800d4ce:	f015 fb15 	bl	8022afc <iprintf>
				printf("INVALID_DES_SYS_TYPE\n");
 800d4d2:	4878      	ldr	r0, [pc, #480]	; (800d6b4 <Chech_forSiemensCMD+0x338>)
 800d4d4:	f015 fbae 	bl	8022c34 <puts>
				SET_BIT_USER(INVALID_DES_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800d4d8:	4b77      	ldr	r3, [pc, #476]	; (800d6b8 <Chech_forSiemensCMD+0x33c>)
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	f043 0301 	orr.w	r3, r3, #1
 800d4e0:	4a75      	ldr	r2, [pc, #468]	; (800d6b8 <Chech_forSiemensCMD+0x33c>)
 800d4e2:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800d4e4:	2301      	movs	r3, #1
 800d4e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d4ea:	e0c6      	b.n	800d67a <Chech_forSiemensCMD+0x2fe>

			case THREE:
				printf("Received %s\n",Commands_List[THREE]);
 800d4ec:	4973      	ldr	r1, [pc, #460]	; (800d6bc <Chech_forSiemensCMD+0x340>)
 800d4ee:	4870      	ldr	r0, [pc, #448]	; (800d6b0 <Chech_forSiemensCMD+0x334>)
 800d4f0:	f015 fb04 	bl	8022afc <iprintf>
				printf("INVALID_SRC_SYS_TYPE\n");
 800d4f4:	4872      	ldr	r0, [pc, #456]	; (800d6c0 <Chech_forSiemensCMD+0x344>)
 800d4f6:	f015 fb9d 	bl	8022c34 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800d4fa:	4b6f      	ldr	r3, [pc, #444]	; (800d6b8 <Chech_forSiemensCMD+0x33c>)
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800d500:	4b6d      	ldr	r3, [pc, #436]	; (800d6b8 <Chech_forSiemensCMD+0x33c>)
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	f043 0302 	orr.w	r3, r3, #2
 800d508:	4a6b      	ldr	r2, [pc, #428]	; (800d6b8 <Chech_forSiemensCMD+0x33c>)
 800d50a:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800d50c:	2301      	movs	r3, #1
 800d50e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d512:	e0b2      	b.n	800d67a <Chech_forSiemensCMD+0x2fe>

			case FOUR:
				printf("Received %s\n",Commands_List[FOUR]);
 800d514:	496b      	ldr	r1, [pc, #428]	; (800d6c4 <Chech_forSiemensCMD+0x348>)
 800d516:	4866      	ldr	r0, [pc, #408]	; (800d6b0 <Chech_forSiemensCMD+0x334>)
 800d518:	f015 faf0 	bl	8022afc <iprintf>
				printf("INVALID_SRC_ADDR\n");
 800d51c:	486a      	ldr	r0, [pc, #424]	; (800d6c8 <Chech_forSiemensCMD+0x34c>)
 800d51e:	f015 fb89 	bl	8022c34 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800d522:	4b65      	ldr	r3, [pc, #404]	; (800d6b8 <Chech_forSiemensCMD+0x33c>)
 800d524:	2200      	movs	r2, #0
 800d526:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_ADDR,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800d528:	4b63      	ldr	r3, [pc, #396]	; (800d6b8 <Chech_forSiemensCMD+0x33c>)
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	f043 0304 	orr.w	r3, r3, #4
 800d530:	4a61      	ldr	r2, [pc, #388]	; (800d6b8 <Chech_forSiemensCMD+0x33c>)
 800d532:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800d534:	2301      	movs	r3, #1
 800d536:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d53a:	e09e      	b.n	800d67a <Chech_forSiemensCMD+0x2fe>

			case FIVE:
				printf("Received %s\n",Commands_List[FIVE]);
 800d53c:	4963      	ldr	r1, [pc, #396]	; (800d6cc <Chech_forSiemensCMD+0x350>)
 800d53e:	485c      	ldr	r0, [pc, #368]	; (800d6b0 <Chech_forSiemensCMD+0x334>)
 800d540:	f015 fadc 	bl	8022afc <iprintf>
				printf("INVALID_DES_PORT\n");
 800d544:	4862      	ldr	r0, [pc, #392]	; (800d6d0 <Chech_forSiemensCMD+0x354>)
 800d546:	f015 fb75 	bl	8022c34 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800d54a:	4b5b      	ldr	r3, [pc, #364]	; (800d6b8 <Chech_forSiemensCMD+0x33c>)
 800d54c:	2200      	movs	r2, #0
 800d54e:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_DES_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800d550:	4b59      	ldr	r3, [pc, #356]	; (800d6b8 <Chech_forSiemensCMD+0x33c>)
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	f043 0308 	orr.w	r3, r3, #8
 800d558:	4a57      	ldr	r2, [pc, #348]	; (800d6b8 <Chech_forSiemensCMD+0x33c>)
 800d55a:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800d55c:	2301      	movs	r3, #1
 800d55e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d562:	e08a      	b.n	800d67a <Chech_forSiemensCMD+0x2fe>

			case SIX:
				printf("Received %s\n",Commands_List[SIX]);
 800d564:	495b      	ldr	r1, [pc, #364]	; (800d6d4 <Chech_forSiemensCMD+0x358>)
 800d566:	4852      	ldr	r0, [pc, #328]	; (800d6b0 <Chech_forSiemensCMD+0x334>)
 800d568:	f015 fac8 	bl	8022afc <iprintf>
				printf("INVALID_SRC_PORT\n");
 800d56c:	485a      	ldr	r0, [pc, #360]	; (800d6d8 <Chech_forSiemensCMD+0x35c>)
 800d56e:	f015 fb61 	bl	8022c34 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800d572:	4b51      	ldr	r3, [pc, #324]	; (800d6b8 <Chech_forSiemensCMD+0x33c>)
 800d574:	2200      	movs	r2, #0
 800d576:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800d578:	4b4f      	ldr	r3, [pc, #316]	; (800d6b8 <Chech_forSiemensCMD+0x33c>)
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	f043 0310 	orr.w	r3, r3, #16
 800d580:	4a4d      	ldr	r2, [pc, #308]	; (800d6b8 <Chech_forSiemensCMD+0x33c>)
 800d582:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800d584:	2301      	movs	r3, #1
 800d586:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d58a:	e076      	b.n	800d67a <Chech_forSiemensCMD+0x2fe>
			case SEVEN:
				printf("Received %s\n",Commands_List[SEVEN]);
 800d58c:	4953      	ldr	r1, [pc, #332]	; (800d6dc <Chech_forSiemensCMD+0x360>)
 800d58e:	4848      	ldr	r0, [pc, #288]	; (800d6b0 <Chech_forSiemensCMD+0x334>)
 800d590:	f015 fab4 	bl	8022afc <iprintf>
				printf("INVALID_PACKET_CRC_SIEMENS\n");
 800d594:	4852      	ldr	r0, [pc, #328]	; (800d6e0 <Chech_forSiemensCMD+0x364>)
 800d596:	f015 fb4d 	bl	8022c34 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800d59a:	4b47      	ldr	r3, [pc, #284]	; (800d6b8 <Chech_forSiemensCMD+0x33c>)
 800d59c:	2200      	movs	r2, #0
 800d59e:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800d5a0:	4b45      	ldr	r3, [pc, #276]	; (800d6b8 <Chech_forSiemensCMD+0x33c>)
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	f043 0320 	orr.w	r3, r3, #32
 800d5a8:	4a43      	ldr	r2, [pc, #268]	; (800d6b8 <Chech_forSiemensCMD+0x33c>)
 800d5aa:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800d5ac:	2301      	movs	r3, #1
 800d5ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d5b2:	e062      	b.n	800d67a <Chech_forSiemensCMD+0x2fe>
			case EIGHT:
				printf("Received %s Command\n",Commands_List[EIGHT]);
 800d5b4:	494b      	ldr	r1, [pc, #300]	; (800d6e4 <Chech_forSiemensCMD+0x368>)
 800d5b6:	484c      	ldr	r0, [pc, #304]	; (800d6e8 <Chech_forSiemensCMD+0x36c>)
 800d5b8:	f015 faa0 	bl	8022afc <iprintf>
				printf("NO_REPLY_FROM_EIPC\n");
 800d5bc:	484b      	ldr	r0, [pc, #300]	; (800d6ec <Chech_forSiemensCMD+0x370>)
 800d5be:	f015 fb39 	bl	8022c34 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800d5c2:	4b3d      	ldr	r3, [pc, #244]	; (800d6b8 <Chech_forSiemensCMD+0x33c>)
 800d5c4:	2200      	movs	r2, #0
 800d5c6:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(NO_REPLY_FROM_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800d5c8:	4b3b      	ldr	r3, [pc, #236]	; (800d6b8 <Chech_forSiemensCMD+0x33c>)
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d5d0:	4a39      	ldr	r2, [pc, #228]	; (800d6b8 <Chech_forSiemensCMD+0x33c>)
 800d5d2:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800d5d4:	2301      	movs	r3, #1
 800d5d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d5da:	e04e      	b.n	800d67a <Chech_forSiemensCMD+0x2fe>
			case NINE:
				printf("Received %s\n",Commands_List[NINE]);
 800d5dc:	4944      	ldr	r1, [pc, #272]	; (800d6f0 <Chech_forSiemensCMD+0x374>)
 800d5de:	4834      	ldr	r0, [pc, #208]	; (800d6b0 <Chech_forSiemensCMD+0x334>)
 800d5e0:	f015 fa8c 	bl	8022afc <iprintf>
				printf("INVALID_PACKET_CRC_EIPC\n");
 800d5e4:	4843      	ldr	r0, [pc, #268]	; (800d6f4 <Chech_forSiemensCMD+0x378>)
 800d5e6:	f015 fb25 	bl	8022c34 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800d5ea:	4b33      	ldr	r3, [pc, #204]	; (800d6b8 <Chech_forSiemensCMD+0x33c>)
 800d5ec:	2200      	movs	r2, #0
 800d5ee:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800d5f0:	4b31      	ldr	r3, [pc, #196]	; (800d6b8 <Chech_forSiemensCMD+0x33c>)
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d5f8:	4a2f      	ldr	r2, [pc, #188]	; (800d6b8 <Chech_forSiemensCMD+0x33c>)
 800d5fa:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800d5fc:	2301      	movs	r3, #1
 800d5fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d602:	e03a      	b.n	800d67a <Chech_forSiemensCMD+0x2fe>
			case TEN:
				printf("Received %s\n",Commands_List[TEN]);
 800d604:	493c      	ldr	r1, [pc, #240]	; (800d6f8 <Chech_forSiemensCMD+0x37c>)
 800d606:	482a      	ldr	r0, [pc, #168]	; (800d6b0 <Chech_forSiemensCMD+0x334>)
 800d608:	f015 fa78 	bl	8022afc <iprintf>
				printf("INVALID_COMP_PACKET_CRC_SIEMENS\n");
 800d60c:	483b      	ldr	r0, [pc, #236]	; (800d6fc <Chech_forSiemensCMD+0x380>)
 800d60e:	f015 fb11 	bl	8022c34 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800d612:	4b29      	ldr	r3, [pc, #164]	; (800d6b8 <Chech_forSiemensCMD+0x33c>)
 800d614:	2200      	movs	r2, #0
 800d616:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_COMP_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800d618:	4b27      	ldr	r3, [pc, #156]	; (800d6b8 <Chech_forSiemensCMD+0x33c>)
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d620:	4a25      	ldr	r2, [pc, #148]	; (800d6b8 <Chech_forSiemensCMD+0x33c>)
 800d622:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800d624:	2301      	movs	r3, #1
 800d626:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d62a:	e026      	b.n	800d67a <Chech_forSiemensCMD+0x2fe>
			case ELEVEN:
				printf("Received %s\n",Commands_List[ELEVEN]);
 800d62c:	4934      	ldr	r1, [pc, #208]	; (800d700 <Chech_forSiemensCMD+0x384>)
 800d62e:	4820      	ldr	r0, [pc, #128]	; (800d6b0 <Chech_forSiemensCMD+0x334>)
 800d630:	f015 fa64 	bl	8022afc <iprintf>
				printf("INVALID_COMP_PACKET_CRC_EIPC\n");
 800d634:	4833      	ldr	r0, [pc, #204]	; (800d704 <Chech_forSiemensCMD+0x388>)
 800d636:	f015 fafd 	bl	8022c34 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800d63a:	4b1f      	ldr	r3, [pc, #124]	; (800d6b8 <Chech_forSiemensCMD+0x33c>)
 800d63c:	2200      	movs	r2, #0
 800d63e:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_COMP_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800d640:	4b1d      	ldr	r3, [pc, #116]	; (800d6b8 <Chech_forSiemensCMD+0x33c>)
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d648:	4a1b      	ldr	r2, [pc, #108]	; (800d6b8 <Chech_forSiemensCMD+0x33c>)
 800d64a:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800d64c:	2301      	movs	r3, #1
 800d64e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d652:	e012      	b.n	800d67a <Chech_forSiemensCMD+0x2fe>
			case TWELVE:
				printf("Received %s\n",Commands_List[TWELVE]);
 800d654:	492c      	ldr	r1, [pc, #176]	; (800d708 <Chech_forSiemensCMD+0x38c>)
 800d656:	4816      	ldr	r0, [pc, #88]	; (800d6b0 <Chech_forSiemensCMD+0x334>)
 800d658:	f015 fa50 	bl	8022afc <iprintf>
				printf("CLEAR ALL\n");
 800d65c:	482b      	ldr	r0, [pc, #172]	; (800d70c <Chech_forSiemensCMD+0x390>)
 800d65e:	f015 fae9 	bl	8022c34 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800d662:	4b15      	ldr	r3, [pc, #84]	; (800d6b8 <Chech_forSiemensCMD+0x33c>)
 800d664:	2200      	movs	r2, #0
 800d666:	601a      	str	r2, [r3, #0]
				IS_COMMAND_RECEIVED = YES;
 800d668:	2301      	movs	r3, #1
 800d66a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d66e:	e004      	b.n	800d67a <Chech_forSiemensCMD+0x2fe>
			default:
				printf("Please Send Valid Command\n");
 800d670:	480d      	ldr	r0, [pc, #52]	; (800d6a8 <Chech_forSiemensCMD+0x32c>)
 800d672:	f015 fadf 	bl	8022c34 <puts>
 800d676:	e000      	b.n	800d67a <Chech_forSiemensCMD+0x2fe>
			}
		}
 800d678:	bf00      	nop

		if(IS_COMMAND_RECEIVED == YES)
 800d67a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d67e:	2b01      	cmp	r3, #1
 800d680:	d147      	bne.n	800d712 <Chech_forSiemensCMD+0x396>
		{
			TransmitCanPkt(CAN_FAULT_INJECTION);
 800d682:	f240 2005 	movw	r0, #517	; 0x205
 800d686:	f002 f9ff 	bl	800fa88 <TransmitCanPkt>
 800d68a:	e042      	b.n	800d712 <Chech_forSiemensCMD+0x396>
 800d68c:	2000a0b4 	.word	0x2000a0b4
 800d690:	08026694 	.word	0x08026694
 800d694:	20000644 	.word	0x20000644
 800d698:	080266ac 	.word	0x080266ac
 800d69c:	20004896 	.word	0x20004896
 800d6a0:	080266ec 	.word	0x080266ec
 800d6a4:	20000645 	.word	0x20000645
 800d6a8:	08026700 	.word	0x08026700
 800d6ac:	200048c8 	.word	0x200048c8
 800d6b0:	0802671c 	.word	0x0802671c
 800d6b4:	0802672c 	.word	0x0802672c
 800d6b8:	20003524 	.word	0x20003524
 800d6bc:	200048fa 	.word	0x200048fa
 800d6c0:	08026744 	.word	0x08026744
 800d6c4:	2000492c 	.word	0x2000492c
 800d6c8:	0802675c 	.word	0x0802675c
 800d6cc:	2000495e 	.word	0x2000495e
 800d6d0:	08026770 	.word	0x08026770
 800d6d4:	20004990 	.word	0x20004990
 800d6d8:	08026784 	.word	0x08026784
 800d6dc:	200049c2 	.word	0x200049c2
 800d6e0:	08026798 	.word	0x08026798
 800d6e4:	200049f4 	.word	0x200049f4
 800d6e8:	080267b4 	.word	0x080267b4
 800d6ec:	080267cc 	.word	0x080267cc
 800d6f0:	20004a26 	.word	0x20004a26
 800d6f4:	080267e0 	.word	0x080267e0
 800d6f8:	20004a58 	.word	0x20004a58
 800d6fc:	080267f8 	.word	0x080267f8
 800d700:	20004a8a 	.word	0x20004a8a
 800d704:	08026818 	.word	0x08026818
 800d708:	20004abc 	.word	0x20004abc
 800d70c:	08026838 	.word	0x08026838
		return;
 800d710:	bf00      	nop
		}
	}
}
 800d712:	3768      	adds	r7, #104	; 0x68
 800d714:	46bd      	mov	sp, r7
 800d716:	bd80      	pop	{r7, pc}

0800d718 <Update_SiemensCommands>:


void Update_SiemensCommands(void)
{
 800d718:	b4b0      	push	{r4, r5, r7}
 800d71a:	b083      	sub	sp, #12
 800d71c:	af00      	add	r7, sp, #0
	uint8_t CmdCnt = 0;
 800d71e:	2300      	movs	r3, #0
 800d720:	71fb      	strb	r3, [r7, #7]

	Commands_List[CmdCnt][0] = 0X24;
 800d722:	79fb      	ldrb	r3, [r7, #7]
 800d724:	4aa6      	ldr	r2, [pc, #664]	; (800d9c0 <Update_SiemensCommands+0x2a8>)
 800d726:	2132      	movs	r1, #50	; 0x32
 800d728:	fb01 f303 	mul.w	r3, r1, r3
 800d72c:	4413      	add	r3, r2
 800d72e:	2224      	movs	r2, #36	; 0x24
 800d730:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][1] = 0X01;
 800d732:	79fb      	ldrb	r3, [r7, #7]
 800d734:	4aa2      	ldr	r2, [pc, #648]	; (800d9c0 <Update_SiemensCommands+0x2a8>)
 800d736:	2132      	movs	r1, #50	; 0x32
 800d738:	fb01 f303 	mul.w	r3, r1, r3
 800d73c:	4413      	add	r3, r2
 800d73e:	3301      	adds	r3, #1
 800d740:	2201      	movs	r2, #1
 800d742:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][2] = 0X30;
 800d744:	79fb      	ldrb	r3, [r7, #7]
 800d746:	4a9e      	ldr	r2, [pc, #632]	; (800d9c0 <Update_SiemensCommands+0x2a8>)
 800d748:	2132      	movs	r1, #50	; 0x32
 800d74a:	fb01 f303 	mul.w	r3, r1, r3
 800d74e:	4413      	add	r3, r2
 800d750:	3302      	adds	r3, #2
 800d752:	2230      	movs	r2, #48	; 0x30
 800d754:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][3] = 0X40;
 800d756:	79fb      	ldrb	r3, [r7, #7]
 800d758:	4a99      	ldr	r2, [pc, #612]	; (800d9c0 <Update_SiemensCommands+0x2a8>)
 800d75a:	2132      	movs	r1, #50	; 0x32
 800d75c:	fb01 f303 	mul.w	r3, r1, r3
 800d760:	4413      	add	r3, r2
 800d762:	3303      	adds	r3, #3
 800d764:	2240      	movs	r2, #64	; 0x40
 800d766:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][4] = 0XC0;
 800d768:	79fb      	ldrb	r3, [r7, #7]
 800d76a:	4a95      	ldr	r2, [pc, #596]	; (800d9c0 <Update_SiemensCommands+0x2a8>)
 800d76c:	2132      	movs	r1, #50	; 0x32
 800d76e:	fb01 f303 	mul.w	r3, r1, r3
 800d772:	4413      	add	r3, r2
 800d774:	3304      	adds	r3, #4
 800d776:	22c0      	movs	r2, #192	; 0xc0
 800d778:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][5] = 0X4E;
 800d77a:	79fb      	ldrb	r3, [r7, #7]
 800d77c:	4a90      	ldr	r2, [pc, #576]	; (800d9c0 <Update_SiemensCommands+0x2a8>)
 800d77e:	2132      	movs	r1, #50	; 0x32
 800d780:	fb01 f303 	mul.w	r3, r1, r3
 800d784:	4413      	add	r3, r2
 800d786:	3305      	adds	r3, #5
 800d788:	224e      	movs	r2, #78	; 0x4e
 800d78a:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][6] = 0X26;
 800d78c:	79fb      	ldrb	r3, [r7, #7]
 800d78e:	4a8c      	ldr	r2, [pc, #560]	; (800d9c0 <Update_SiemensCommands+0x2a8>)
 800d790:	2132      	movs	r1, #50	; 0x32
 800d792:	fb01 f303 	mul.w	r3, r1, r3
 800d796:	4413      	add	r3, r2
 800d798:	3306      	adds	r3, #6
 800d79a:	2226      	movs	r2, #38	; 0x26
 800d79c:	701a      	strb	r2, [r3, #0]
	++CmdCnt;
 800d79e:	79fb      	ldrb	r3, [r7, #7]
 800d7a0:	3301      	adds	r3, #1
 800d7a2:	71fb      	strb	r3, [r7, #7]

	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"DEBUG_MODE");
 800d7a4:	79fb      	ldrb	r3, [r7, #7]
 800d7a6:	1c5a      	adds	r2, r3, #1
 800d7a8:	71fa      	strb	r2, [r7, #7]
 800d7aa:	461a      	mov	r2, r3
 800d7ac:	2332      	movs	r3, #50	; 0x32
 800d7ae:	fb02 f303 	mul.w	r3, r2, r3
 800d7b2:	4a83      	ldr	r2, [pc, #524]	; (800d9c0 <Update_SiemensCommands+0x2a8>)
 800d7b4:	4413      	add	r3, r2
 800d7b6:	4983      	ldr	r1, [pc, #524]	; (800d9c4 <Update_SiemensCommands+0x2ac>)
 800d7b8:	461a      	mov	r2, r3
 800d7ba:	460b      	mov	r3, r1
 800d7bc:	cb03      	ldmia	r3!, {r0, r1}
 800d7be:	6010      	str	r0, [r2, #0]
 800d7c0:	6051      	str	r1, [r2, #4]
 800d7c2:	8819      	ldrh	r1, [r3, #0]
 800d7c4:	789b      	ldrb	r3, [r3, #2]
 800d7c6:	8111      	strh	r1, [r2, #8]
 800d7c8:	7293      	strb	r3, [r2, #10]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_DES_SYS_TYPE");
 800d7ca:	79fb      	ldrb	r3, [r7, #7]
 800d7cc:	1c5a      	adds	r2, r3, #1
 800d7ce:	71fa      	strb	r2, [r7, #7]
 800d7d0:	461a      	mov	r2, r3
 800d7d2:	2332      	movs	r3, #50	; 0x32
 800d7d4:	fb02 f303 	mul.w	r3, r2, r3
 800d7d8:	4a79      	ldr	r2, [pc, #484]	; (800d9c0 <Update_SiemensCommands+0x2a8>)
 800d7da:	4413      	add	r3, r2
 800d7dc:	4a7a      	ldr	r2, [pc, #488]	; (800d9c8 <Update_SiemensCommands+0x2b0>)
 800d7de:	461d      	mov	r5, r3
 800d7e0:	4614      	mov	r4, r2
 800d7e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d7e4:	6028      	str	r0, [r5, #0]
 800d7e6:	6069      	str	r1, [r5, #4]
 800d7e8:	60aa      	str	r2, [r5, #8]
 800d7ea:	60eb      	str	r3, [r5, #12]
 800d7ec:	6820      	ldr	r0, [r4, #0]
 800d7ee:	6128      	str	r0, [r5, #16]
 800d7f0:	7923      	ldrb	r3, [r4, #4]
 800d7f2:	752b      	strb	r3, [r5, #20]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_SRC_SYS_TYPE");
 800d7f4:	79fb      	ldrb	r3, [r7, #7]
 800d7f6:	1c5a      	adds	r2, r3, #1
 800d7f8:	71fa      	strb	r2, [r7, #7]
 800d7fa:	461a      	mov	r2, r3
 800d7fc:	2332      	movs	r3, #50	; 0x32
 800d7fe:	fb02 f303 	mul.w	r3, r2, r3
 800d802:	4a6f      	ldr	r2, [pc, #444]	; (800d9c0 <Update_SiemensCommands+0x2a8>)
 800d804:	4413      	add	r3, r2
 800d806:	4a71      	ldr	r2, [pc, #452]	; (800d9cc <Update_SiemensCommands+0x2b4>)
 800d808:	461d      	mov	r5, r3
 800d80a:	4614      	mov	r4, r2
 800d80c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d80e:	6028      	str	r0, [r5, #0]
 800d810:	6069      	str	r1, [r5, #4]
 800d812:	60aa      	str	r2, [r5, #8]
 800d814:	60eb      	str	r3, [r5, #12]
 800d816:	6820      	ldr	r0, [r4, #0]
 800d818:	6128      	str	r0, [r5, #16]
 800d81a:	7923      	ldrb	r3, [r4, #4]
 800d81c:	752b      	strb	r3, [r5, #20]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_SRC_ADDR");
 800d81e:	79fb      	ldrb	r3, [r7, #7]
 800d820:	1c5a      	adds	r2, r3, #1
 800d822:	71fa      	strb	r2, [r7, #7]
 800d824:	461a      	mov	r2, r3
 800d826:	2332      	movs	r3, #50	; 0x32
 800d828:	fb02 f303 	mul.w	r3, r2, r3
 800d82c:	4a64      	ldr	r2, [pc, #400]	; (800d9c0 <Update_SiemensCommands+0x2a8>)
 800d82e:	4413      	add	r3, r2
 800d830:	4a67      	ldr	r2, [pc, #412]	; (800d9d0 <Update_SiemensCommands+0x2b8>)
 800d832:	461d      	mov	r5, r3
 800d834:	4614      	mov	r4, r2
 800d836:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d838:	6028      	str	r0, [r5, #0]
 800d83a:	6069      	str	r1, [r5, #4]
 800d83c:	60aa      	str	r2, [r5, #8]
 800d83e:	60eb      	str	r3, [r5, #12]
 800d840:	7823      	ldrb	r3, [r4, #0]
 800d842:	742b      	strb	r3, [r5, #16]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_DES_PORT");
 800d844:	79fb      	ldrb	r3, [r7, #7]
 800d846:	1c5a      	adds	r2, r3, #1
 800d848:	71fa      	strb	r2, [r7, #7]
 800d84a:	461a      	mov	r2, r3
 800d84c:	2332      	movs	r3, #50	; 0x32
 800d84e:	fb02 f303 	mul.w	r3, r2, r3
 800d852:	4a5b      	ldr	r2, [pc, #364]	; (800d9c0 <Update_SiemensCommands+0x2a8>)
 800d854:	4413      	add	r3, r2
 800d856:	4a5f      	ldr	r2, [pc, #380]	; (800d9d4 <Update_SiemensCommands+0x2bc>)
 800d858:	461d      	mov	r5, r3
 800d85a:	4614      	mov	r4, r2
 800d85c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d85e:	6028      	str	r0, [r5, #0]
 800d860:	6069      	str	r1, [r5, #4]
 800d862:	60aa      	str	r2, [r5, #8]
 800d864:	60eb      	str	r3, [r5, #12]
 800d866:	7823      	ldrb	r3, [r4, #0]
 800d868:	742b      	strb	r3, [r5, #16]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_SRC_PORT");
 800d86a:	79fb      	ldrb	r3, [r7, #7]
 800d86c:	1c5a      	adds	r2, r3, #1
 800d86e:	71fa      	strb	r2, [r7, #7]
 800d870:	461a      	mov	r2, r3
 800d872:	2332      	movs	r3, #50	; 0x32
 800d874:	fb02 f303 	mul.w	r3, r2, r3
 800d878:	4a51      	ldr	r2, [pc, #324]	; (800d9c0 <Update_SiemensCommands+0x2a8>)
 800d87a:	4413      	add	r3, r2
 800d87c:	4a56      	ldr	r2, [pc, #344]	; (800d9d8 <Update_SiemensCommands+0x2c0>)
 800d87e:	461d      	mov	r5, r3
 800d880:	4614      	mov	r4, r2
 800d882:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d884:	6028      	str	r0, [r5, #0]
 800d886:	6069      	str	r1, [r5, #4]
 800d888:	60aa      	str	r2, [r5, #8]
 800d88a:	60eb      	str	r3, [r5, #12]
 800d88c:	7823      	ldrb	r3, [r4, #0]
 800d88e:	742b      	strb	r3, [r5, #16]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INAVLID_PACKET_CRC_SIEMENS");
 800d890:	79fb      	ldrb	r3, [r7, #7]
 800d892:	1c5a      	adds	r2, r3, #1
 800d894:	71fa      	strb	r2, [r7, #7]
 800d896:	461a      	mov	r2, r3
 800d898:	2332      	movs	r3, #50	; 0x32
 800d89a:	fb02 f303 	mul.w	r3, r2, r3
 800d89e:	4a48      	ldr	r2, [pc, #288]	; (800d9c0 <Update_SiemensCommands+0x2a8>)
 800d8a0:	4413      	add	r3, r2
 800d8a2:	4a4e      	ldr	r2, [pc, #312]	; (800d9dc <Update_SiemensCommands+0x2c4>)
 800d8a4:	461d      	mov	r5, r3
 800d8a6:	4614      	mov	r4, r2
 800d8a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d8aa:	6028      	str	r0, [r5, #0]
 800d8ac:	6069      	str	r1, [r5, #4]
 800d8ae:	60aa      	str	r2, [r5, #8]
 800d8b0:	60eb      	str	r3, [r5, #12]
 800d8b2:	cc03      	ldmia	r4!, {r0, r1}
 800d8b4:	6128      	str	r0, [r5, #16]
 800d8b6:	6169      	str	r1, [r5, #20]
 800d8b8:	8823      	ldrh	r3, [r4, #0]
 800d8ba:	78a2      	ldrb	r2, [r4, #2]
 800d8bc:	832b      	strh	r3, [r5, #24]
 800d8be:	4613      	mov	r3, r2
 800d8c0:	76ab      	strb	r3, [r5, #26]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"NO_REPLY_FROM_EIPC");
 800d8c2:	79fb      	ldrb	r3, [r7, #7]
 800d8c4:	1c5a      	adds	r2, r3, #1
 800d8c6:	71fa      	strb	r2, [r7, #7]
 800d8c8:	461a      	mov	r2, r3
 800d8ca:	2332      	movs	r3, #50	; 0x32
 800d8cc:	fb02 f303 	mul.w	r3, r2, r3
 800d8d0:	4a3b      	ldr	r2, [pc, #236]	; (800d9c0 <Update_SiemensCommands+0x2a8>)
 800d8d2:	4413      	add	r3, r2
 800d8d4:	4a42      	ldr	r2, [pc, #264]	; (800d9e0 <Update_SiemensCommands+0x2c8>)
 800d8d6:	461d      	mov	r5, r3
 800d8d8:	4614      	mov	r4, r2
 800d8da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d8dc:	6028      	str	r0, [r5, #0]
 800d8de:	6069      	str	r1, [r5, #4]
 800d8e0:	60aa      	str	r2, [r5, #8]
 800d8e2:	60eb      	str	r3, [r5, #12]
 800d8e4:	8823      	ldrh	r3, [r4, #0]
 800d8e6:	78a2      	ldrb	r2, [r4, #2]
 800d8e8:	822b      	strh	r3, [r5, #16]
 800d8ea:	4613      	mov	r3, r2
 800d8ec:	74ab      	strb	r3, [r5, #18]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_PACKET_CRC_EIPC");
 800d8ee:	79fb      	ldrb	r3, [r7, #7]
 800d8f0:	1c5a      	adds	r2, r3, #1
 800d8f2:	71fa      	strb	r2, [r7, #7]
 800d8f4:	461a      	mov	r2, r3
 800d8f6:	2332      	movs	r3, #50	; 0x32
 800d8f8:	fb02 f303 	mul.w	r3, r2, r3
 800d8fc:	4a30      	ldr	r2, [pc, #192]	; (800d9c0 <Update_SiemensCommands+0x2a8>)
 800d8fe:	4413      	add	r3, r2
 800d900:	4a38      	ldr	r2, [pc, #224]	; (800d9e4 <Update_SiemensCommands+0x2cc>)
 800d902:	461d      	mov	r5, r3
 800d904:	4614      	mov	r4, r2
 800d906:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d908:	6028      	str	r0, [r5, #0]
 800d90a:	6069      	str	r1, [r5, #4]
 800d90c:	60aa      	str	r2, [r5, #8]
 800d90e:	60eb      	str	r3, [r5, #12]
 800d910:	cc03      	ldmia	r4!, {r0, r1}
 800d912:	6128      	str	r0, [r5, #16]
 800d914:	6169      	str	r1, [r5, #20]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_COMP_PACKET_CRC_SIEMENS");
 800d916:	79fb      	ldrb	r3, [r7, #7]
 800d918:	1c5a      	adds	r2, r3, #1
 800d91a:	71fa      	strb	r2, [r7, #7]
 800d91c:	461a      	mov	r2, r3
 800d91e:	2332      	movs	r3, #50	; 0x32
 800d920:	fb02 f303 	mul.w	r3, r2, r3
 800d924:	4a26      	ldr	r2, [pc, #152]	; (800d9c0 <Update_SiemensCommands+0x2a8>)
 800d926:	4413      	add	r3, r2
 800d928:	4a2f      	ldr	r2, [pc, #188]	; (800d9e8 <Update_SiemensCommands+0x2d0>)
 800d92a:	461c      	mov	r4, r3
 800d92c:	4615      	mov	r5, r2
 800d92e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d930:	6020      	str	r0, [r4, #0]
 800d932:	6061      	str	r1, [r4, #4]
 800d934:	60a2      	str	r2, [r4, #8]
 800d936:	60e3      	str	r3, [r4, #12]
 800d938:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d93a:	6120      	str	r0, [r4, #16]
 800d93c:	6161      	str	r1, [r4, #20]
 800d93e:	61a2      	str	r2, [r4, #24]
 800d940:	61e3      	str	r3, [r4, #28]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_COMP_PACKET_CRC_EIPC");
 800d942:	79fb      	ldrb	r3, [r7, #7]
 800d944:	1c5a      	adds	r2, r3, #1
 800d946:	71fa      	strb	r2, [r7, #7]
 800d948:	461a      	mov	r2, r3
 800d94a:	2332      	movs	r3, #50	; 0x32
 800d94c:	fb02 f303 	mul.w	r3, r2, r3
 800d950:	4a1b      	ldr	r2, [pc, #108]	; (800d9c0 <Update_SiemensCommands+0x2a8>)
 800d952:	4413      	add	r3, r2
 800d954:	4a25      	ldr	r2, [pc, #148]	; (800d9ec <Update_SiemensCommands+0x2d4>)
 800d956:	461d      	mov	r5, r3
 800d958:	4614      	mov	r4, r2
 800d95a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d95c:	6028      	str	r0, [r5, #0]
 800d95e:	6069      	str	r1, [r5, #4]
 800d960:	60aa      	str	r2, [r5, #8]
 800d962:	60eb      	str	r3, [r5, #12]
 800d964:	cc07      	ldmia	r4!, {r0, r1, r2}
 800d966:	6128      	str	r0, [r5, #16]
 800d968:	6169      	str	r1, [r5, #20]
 800d96a:	61aa      	str	r2, [r5, #24]
 800d96c:	7823      	ldrb	r3, [r4, #0]
 800d96e:	772b      	strb	r3, [r5, #28]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"CLEAR_ALL");
 800d970:	79fb      	ldrb	r3, [r7, #7]
 800d972:	1c5a      	adds	r2, r3, #1
 800d974:	71fa      	strb	r2, [r7, #7]
 800d976:	461a      	mov	r2, r3
 800d978:	2332      	movs	r3, #50	; 0x32
 800d97a:	fb02 f303 	mul.w	r3, r2, r3
 800d97e:	4a10      	ldr	r2, [pc, #64]	; (800d9c0 <Update_SiemensCommands+0x2a8>)
 800d980:	4413      	add	r3, r2
 800d982:	491b      	ldr	r1, [pc, #108]	; (800d9f0 <Update_SiemensCommands+0x2d8>)
 800d984:	461a      	mov	r2, r3
 800d986:	460b      	mov	r3, r1
 800d988:	cb03      	ldmia	r3!, {r0, r1}
 800d98a:	6010      	str	r0, [r2, #0]
 800d98c:	6051      	str	r1, [r2, #4]
 800d98e:	881b      	ldrh	r3, [r3, #0]
 800d990:	8113      	strh	r3, [r2, #8]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"HELP");
 800d992:	79fb      	ldrb	r3, [r7, #7]
 800d994:	1c5a      	adds	r2, r3, #1
 800d996:	71fa      	strb	r2, [r7, #7]
 800d998:	461a      	mov	r2, r3
 800d99a:	2332      	movs	r3, #50	; 0x32
 800d99c:	fb02 f303 	mul.w	r3, r2, r3
 800d9a0:	4a07      	ldr	r2, [pc, #28]	; (800d9c0 <Update_SiemensCommands+0x2a8>)
 800d9a2:	4413      	add	r3, r2
 800d9a4:	4a13      	ldr	r2, [pc, #76]	; (800d9f4 <Update_SiemensCommands+0x2dc>)
 800d9a6:	6810      	ldr	r0, [r2, #0]
 800d9a8:	6018      	str	r0, [r3, #0]
 800d9aa:	7912      	ldrb	r2, [r2, #4]
 800d9ac:	711a      	strb	r2, [r3, #4]
	Commands_Count =  CmdCnt;
 800d9ae:	4a12      	ldr	r2, [pc, #72]	; (800d9f8 <Update_SiemensCommands+0x2e0>)
 800d9b0:	79fb      	ldrb	r3, [r7, #7]
 800d9b2:	7013      	strb	r3, [r2, #0]
}
 800d9b4:	bf00      	nop
 800d9b6:	370c      	adds	r7, #12
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	bcb0      	pop	{r4, r5, r7}
 800d9bc:	4770      	bx	lr
 800d9be:	bf00      	nop
 800d9c0:	20004864 	.word	0x20004864
 800d9c4:	08026844 	.word	0x08026844
 800d9c8:	0802672c 	.word	0x0802672c
 800d9cc:	08026744 	.word	0x08026744
 800d9d0:	0802675c 	.word	0x0802675c
 800d9d4:	08026770 	.word	0x08026770
 800d9d8:	08026784 	.word	0x08026784
 800d9dc:	08026850 	.word	0x08026850
 800d9e0:	080267cc 	.word	0x080267cc
 800d9e4:	080267e0 	.word	0x080267e0
 800d9e8:	080267f8 	.word	0x080267f8
 800d9ec:	08026818 	.word	0x08026818
 800d9f0:	0802686c 	.word	0x0802686c
 800d9f4:	08026878 	.word	0x08026878
 800d9f8:	20004c4c 	.word	0x20004c4c

0800d9fc <Is_SiemensCommand_Valid>:

uint8_t Is_SiemensCommand_Valid(uint8_t *Buffer,uint8_t Length)
{
 800d9fc:	b590      	push	{r4, r7, lr}
 800d9fe:	b085      	sub	sp, #20
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
 800da04:	460b      	mov	r3, r1
 800da06:	70fb      	strb	r3, [r7, #3]
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 800da08:	2300      	movs	r3, #0
 800da0a:	73fb      	strb	r3, [r7, #15]
 800da0c:	e01c      	b.n	800da48 <Is_SiemensCommand_Valid+0x4c>
	{
		//		if(strstr((char *)Buffer,(char *)Commands_List[Traverser]) != NULL)
		if(memcmp(Buffer,Commands_List[Traverser],strlen((char *)Commands_List[Traverser])) == 0)
 800da0e:	7bfb      	ldrb	r3, [r7, #15]
 800da10:	2232      	movs	r2, #50	; 0x32
 800da12:	fb02 f303 	mul.w	r3, r2, r3
 800da16:	4a11      	ldr	r2, [pc, #68]	; (800da5c <Is_SiemensCommand_Valid+0x60>)
 800da18:	189c      	adds	r4, r3, r2
 800da1a:	7bfb      	ldrb	r3, [r7, #15]
 800da1c:	2232      	movs	r2, #50	; 0x32
 800da1e:	fb02 f303 	mul.w	r3, r2, r3
 800da22:	4a0e      	ldr	r2, [pc, #56]	; (800da5c <Is_SiemensCommand_Valid+0x60>)
 800da24:	4413      	add	r3, r2
 800da26:	4618      	mov	r0, r3
 800da28:	f7f2 fc14 	bl	8000254 <strlen>
 800da2c:	4603      	mov	r3, r0
 800da2e:	461a      	mov	r2, r3
 800da30:	4621      	mov	r1, r4
 800da32:	6878      	ldr	r0, [r7, #4]
 800da34:	f014 ff42 	bl	80228bc <memcmp>
 800da38:	4603      	mov	r3, r0
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d101      	bne.n	800da42 <Is_SiemensCommand_Valid+0x46>
		{
			return Traverser;
 800da3e:	7bfb      	ldrb	r3, [r7, #15]
 800da40:	e008      	b.n	800da54 <Is_SiemensCommand_Valid+0x58>
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 800da42:	7bfb      	ldrb	r3, [r7, #15]
 800da44:	3301      	adds	r3, #1
 800da46:	73fb      	strb	r3, [r7, #15]
 800da48:	4b05      	ldr	r3, [pc, #20]	; (800da60 <Is_SiemensCommand_Valid+0x64>)
 800da4a:	781b      	ldrb	r3, [r3, #0]
 800da4c:	7bfa      	ldrb	r2, [r7, #15]
 800da4e:	429a      	cmp	r2, r3
 800da50:	d3dd      	bcc.n	800da0e <Is_SiemensCommand_Valid+0x12>
		}
	}
	return 255;
 800da52:	23ff      	movs	r3, #255	; 0xff
}
 800da54:	4618      	mov	r0, r3
 800da56:	3714      	adds	r7, #20
 800da58:	46bd      	mov	sp, r7
 800da5a:	bd90      	pop	{r4, r7, pc}
 800da5c:	20004864 	.word	0x20004864
 800da60:	20004c4c 	.word	0x20004c4c

0800da64 <Siemens_CRC>:
/*
 * SIEMENS CRC & Data Extract FUNTIONS
 */

uint16_t Siemens_CRC(uint8_t *data, uint16_t len)
{
 800da64:	b480      	push	{r7}
 800da66:	b087      	sub	sp, #28
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
 800da6c:	460b      	mov	r3, r1
 800da6e:	807b      	strh	r3, [r7, #2]
	uint16_t crc = 0xFFFF;
 800da70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800da74:	82fb      	strh	r3, [r7, #22]
	uint16_t i=0;
 800da76:	2300      	movs	r3, #0
 800da78:	82bb      	strh	r3, [r7, #20]
	int j =0;
 800da7a:	2300      	movs	r3, #0
 800da7c:	613b      	str	r3, [r7, #16]
		printf("0x%02x|",data[i]);
	}
	printf("\n");
#endif

	for ( i = 0; i < len; i++)
 800da7e:	2300      	movs	r3, #0
 800da80:	82bb      	strh	r3, [r7, #20]
 800da82:	e022      	b.n	800daca <Siemens_CRC+0x66>
	{
		crc ^= data[i];
 800da84:	8abb      	ldrh	r3, [r7, #20]
 800da86:	687a      	ldr	r2, [r7, #4]
 800da88:	4413      	add	r3, r2
 800da8a:	781b      	ldrb	r3, [r3, #0]
 800da8c:	b29a      	uxth	r2, r3
 800da8e:	8afb      	ldrh	r3, [r7, #22]
 800da90:	4053      	eors	r3, r2
 800da92:	82fb      	strh	r3, [r7, #22]
		for ( j = 0; j < 8; j++)
 800da94:	2300      	movs	r3, #0
 800da96:	613b      	str	r3, [r7, #16]
 800da98:	e011      	b.n	800dabe <Siemens_CRC+0x5a>
		{
			if (crc & 0x0001)
 800da9a:	8afb      	ldrh	r3, [r7, #22]
 800da9c:	f003 0301 	and.w	r3, r3, #1
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d006      	beq.n	800dab2 <Siemens_CRC+0x4e>
			{
				crc = (crc >> 1) ^ 0x8408;
 800daa4:	8afb      	ldrh	r3, [r7, #22]
 800daa6:	085b      	lsrs	r3, r3, #1
 800daa8:	b29a      	uxth	r2, r3
 800daaa:	4b17      	ldr	r3, [pc, #92]	; (800db08 <Siemens_CRC+0xa4>)
 800daac:	4053      	eors	r3, r2
 800daae:	82fb      	strh	r3, [r7, #22]
 800dab0:	e002      	b.n	800dab8 <Siemens_CRC+0x54>
			}
			else
			{
				crc >>= 1;
 800dab2:	8afb      	ldrh	r3, [r7, #22]
 800dab4:	085b      	lsrs	r3, r3, #1
 800dab6:	82fb      	strh	r3, [r7, #22]
		for ( j = 0; j < 8; j++)
 800dab8:	693b      	ldr	r3, [r7, #16]
 800daba:	3301      	adds	r3, #1
 800dabc:	613b      	str	r3, [r7, #16]
 800dabe:	693b      	ldr	r3, [r7, #16]
 800dac0:	2b07      	cmp	r3, #7
 800dac2:	ddea      	ble.n	800da9a <Siemens_CRC+0x36>
	for ( i = 0; i < len; i++)
 800dac4:	8abb      	ldrh	r3, [r7, #20]
 800dac6:	3301      	adds	r3, #1
 800dac8:	82bb      	strh	r3, [r7, #20]
 800daca:	8aba      	ldrh	r2, [r7, #20]
 800dacc:	887b      	ldrh	r3, [r7, #2]
 800dace:	429a      	cmp	r2, r3
 800dad0:	d3d8      	bcc.n	800da84 <Siemens_CRC+0x20>
			}
		}
	}

	crc_le[0] = crc & 0xFF;
 800dad2:	8afb      	ldrh	r3, [r7, #22]
 800dad4:	b2db      	uxtb	r3, r3
 800dad6:	733b      	strb	r3, [r7, #12]
	crc_le[1] = (crc >> 8) & 0xFF;
 800dad8:	8afb      	ldrh	r3, [r7, #22]
 800dada:	0a1b      	lsrs	r3, r3, #8
 800dadc:	b29b      	uxth	r3, r3
 800dade:	b2db      	uxtb	r3, r3
 800dae0:	737b      	strb	r3, [r7, #13]
	//printf("Before Reverse 1:0x%02x|0x%02x\n",crc_le[0],crc_le[1]);



	crc = crc_le[0] << 8 | crc_le[1]; // reverse CRC bytes
 800dae2:	7b3b      	ldrb	r3, [r7, #12]
 800dae4:	021b      	lsls	r3, r3, #8
 800dae6:	b21a      	sxth	r2, r3
 800dae8:	7b7b      	ldrb	r3, [r7, #13]
 800daea:	b21b      	sxth	r3, r3
 800daec:	4313      	orrs	r3, r2
 800daee:	b21b      	sxth	r3, r3
 800daf0:	82fb      	strh	r3, [r7, #22]
	crc ^= 0xFFFF; // perform final XOR with 0xFFFF
 800daf2:	8afb      	ldrh	r3, [r7, #22]
 800daf4:	43db      	mvns	r3, r3
 800daf6:	82fb      	strh	r3, [r7, #22]
	//printf("Before Reverse 2:0x%02x\n",crc);


	// crc = crc_le[1] << 8 | crc_le[0]; // reverse CRC bytes
	// crc ^= 0xFFFF; // perform final XOR with 0xFFFF
	return crc;
 800daf8:	8afb      	ldrh	r3, [r7, #22]
}
 800dafa:	4618      	mov	r0, r3
 800dafc:	371c      	adds	r7, #28
 800dafe:	46bd      	mov	sp, r7
 800db00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db04:	4770      	bx	lr
 800db06:	bf00      	nop
 800db08:	ffff8408 	.word	0xffff8408

0800db0c <Extract_Parity_Data>:


int32_t Extract_Parity_Data(uint8_t Start,uint8_t No_of_Bits,uint8_t *DataIn,uint8_t Parity_Type)
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b086      	sub	sp, #24
 800db10:	af00      	add	r7, sp, #0
 800db12:	603a      	str	r2, [r7, #0]
 800db14:	461a      	mov	r2, r3
 800db16:	4603      	mov	r3, r0
 800db18:	71fb      	strb	r3, [r7, #7]
 800db1a:	460b      	mov	r3, r1
 800db1c:	71bb      	strb	r3, [r7, #6]
 800db1e:	4613      	mov	r3, r2
 800db20:	717b      	strb	r3, [r7, #5]
	uint8_t Temp_val = 0,t1,t2,t3;
 800db22:	2300      	movs	r3, #0
 800db24:	75fb      	strb	r3, [r7, #23]
	uint32_t Return_value = 0;
 800db26:	2300      	movs	r3, #0
 800db28:	613b      	str	r3, [r7, #16]

	if(Parity_Type != NO_PARITY)
 800db2a:	797b      	ldrb	r3, [r7, #5]
 800db2c:	2b02      	cmp	r3, #2
 800db2e:	d010      	beq.n	800db52 <Extract_Parity_Data+0x46>
	{
		if(Verify_parity(DataIn,(No_of_Bits/8),Parity_Type)==0)
 800db30:	79bb      	ldrb	r3, [r7, #6]
 800db32:	08db      	lsrs	r3, r3, #3
 800db34:	b2db      	uxtb	r3, r3
 800db36:	797a      	ldrb	r2, [r7, #5]
 800db38:	4619      	mov	r1, r3
 800db3a:	6838      	ldr	r0, [r7, #0]
 800db3c:	f000 f8d0 	bl	800dce0 <Verify_parity>
 800db40:	4603      	mov	r3, r0
 800db42:	2b00      	cmp	r3, #0
 800db44:	d110      	bne.n	800db68 <Extract_Parity_Data+0x5c>
		{
			printf("Parity Verfication Failed\n");
 800db46:	4840      	ldr	r0, [pc, #256]	; (800dc48 <Extract_Parity_Data+0x13c>)
 800db48:	f015 f874 	bl	8022c34 <puts>
			return -1;
 800db4c:	f04f 33ff 	mov.w	r3, #4294967295
 800db50:	e075      	b.n	800dc3e <Extract_Parity_Data+0x132>
			//printf("Parity Verfication Success\n");
		}
	}
	else
	{
		Return_value = ExtractBits(Start,No_of_Bits,DataIn);
 800db52:	79fb      	ldrb	r3, [r7, #7]
 800db54:	b29b      	uxth	r3, r3
 800db56:	79ba      	ldrb	r2, [r7, #6]
 800db58:	b291      	uxth	r1, r2
 800db5a:	683a      	ldr	r2, [r7, #0]
 800db5c:	4618      	mov	r0, r3
 800db5e:	f7f2 fd59 	bl	8000614 <ExtractBits>
 800db62:	6138      	str	r0, [r7, #16]
		return Return_value;
 800db64:	693b      	ldr	r3, [r7, #16]
 800db66:	e06a      	b.n	800dc3e <Extract_Parity_Data+0x132>
	}



	if(No_of_Bits==8)
 800db68:	79bb      	ldrb	r3, [r7, #6]
 800db6a:	2b08      	cmp	r3, #8
 800db6c:	d108      	bne.n	800db80 <Extract_Parity_Data+0x74>
	{
		//printf("Data:0x%02x\n",DataIn[0]);
		Temp_val = DataIn[0];
 800db6e:	683b      	ldr	r3, [r7, #0]
 800db70:	781b      	ldrb	r3, [r3, #0]
 800db72:	75fb      	strb	r3, [r7, #23]
		Temp_val &= ~(1<<7);
 800db74:	7dfb      	ldrb	r3, [r7, #23]
 800db76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db7a:	75fb      	strb	r3, [r7, #23]
		return (Temp_val);
 800db7c:	7dfb      	ldrb	r3, [r7, #23]
 800db7e:	e05e      	b.n	800dc3e <Extract_Parity_Data+0x132>
	}
	else if(No_of_Bits==24)
 800db80:	79bb      	ldrb	r3, [r7, #6]
 800db82:	2b18      	cmp	r3, #24
 800db84:	d15a      	bne.n	800dc3c <Extract_Parity_Data+0x130>
	{
		//printf("24 bit extraction\n");
		Temp_val = DataIn[0];
 800db86:	683b      	ldr	r3, [r7, #0]
 800db88:	781b      	ldrb	r3, [r3, #0]
 800db8a:	75fb      	strb	r3, [r7, #23]
		//printf("Data:0x%02x\n",DataIn[0]);
		t1 = ((Temp_val>>0)&1); //copy of 0th bit
 800db8c:	7dfb      	ldrb	r3, [r7, #23]
 800db8e:	f003 0301 	and.w	r3, r3, #1
 800db92:	73fb      	strb	r3, [r7, #15]
		t2 = ((Temp_val>>1)&1); //copy of 1st bit
 800db94:	7dfb      	ldrb	r3, [r7, #23]
 800db96:	085b      	lsrs	r3, r3, #1
 800db98:	b2db      	uxtb	r3, r3
 800db9a:	f003 0301 	and.w	r3, r3, #1
 800db9e:	73bb      	strb	r3, [r7, #14]
		Temp_val &= ~(1<<7); //clearing 7th bit
 800dba0:	7dfb      	ldrb	r3, [r7, #23]
 800dba2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dba6:	75fb      	strb	r3, [r7, #23]
		Temp_val>>=2; //Shift two times.
 800dba8:	7dfb      	ldrb	r3, [r7, #23]
 800dbaa:	089b      	lsrs	r3, r3, #2
 800dbac:	75fb      	strb	r3, [r7, #23]
		//printf("Temp:0x%02x\n",Temp_val);
		Return_value = Temp_val;
 800dbae:	7dfb      	ldrb	r3, [r7, #23]
 800dbb0:	613b      	str	r3, [r7, #16]

		Temp_val = DataIn[1];
 800dbb2:	683b      	ldr	r3, [r7, #0]
 800dbb4:	785b      	ldrb	r3, [r3, #1]
 800dbb6:	75fb      	strb	r3, [r7, #23]
		//printf("Data:0x%02x\n",DataIn[1]);
		t3 = ((Temp_val>>0)&1);//copy of 0th bit.
 800dbb8:	7dfb      	ldrb	r3, [r7, #23]
 800dbba:	f003 0301 	and.w	r3, r3, #1
 800dbbe:	737b      	strb	r3, [r7, #13]
		Temp_val &= ~(1<<7); //clearing 7th bit.
 800dbc0:	7dfb      	ldrb	r3, [r7, #23]
 800dbc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dbc6:	75fb      	strb	r3, [r7, #23]
		Temp_val>>=1; //Shift one time.
 800dbc8:	7dfb      	ldrb	r3, [r7, #23]
 800dbca:	085b      	lsrs	r3, r3, #1
 800dbcc:	75fb      	strb	r3, [r7, #23]

		(t2==0)?(Temp_val &= ~(1 << 7)):(Temp_val|= 1 << 7);//copying Previous bit
 800dbce:	7bbb      	ldrb	r3, [r7, #14]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d104      	bne.n	800dbde <Extract_Parity_Data+0xd2>
 800dbd4:	7dfb      	ldrb	r3, [r7, #23]
 800dbd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dbda:	75fb      	strb	r3, [r7, #23]
 800dbdc:	e003      	b.n	800dbe6 <Extract_Parity_Data+0xda>
 800dbde:	7dfb      	ldrb	r3, [r7, #23]
 800dbe0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800dbe4:	75fb      	strb	r3, [r7, #23]
		(t1==0)?(Temp_val &= ~(1 << 6)):(Temp_val|= 1 << 6);//copying Previous bit
 800dbe6:	7bfb      	ldrb	r3, [r7, #15]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d104      	bne.n	800dbf6 <Extract_Parity_Data+0xea>
 800dbec:	7dfb      	ldrb	r3, [r7, #23]
 800dbee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dbf2:	75fb      	strb	r3, [r7, #23]
 800dbf4:	e003      	b.n	800dbfe <Extract_Parity_Data+0xf2>
 800dbf6:	7dfb      	ldrb	r3, [r7, #23]
 800dbf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dbfc:	75fb      	strb	r3, [r7, #23]
		//printf("Temp2:0x%02x\n",Temp_val);
		Return_value<<=8;
 800dbfe:	693b      	ldr	r3, [r7, #16]
 800dc00:	021b      	lsls	r3, r3, #8
 800dc02:	613b      	str	r3, [r7, #16]
		Return_value+=Temp_val;
 800dc04:	7dfb      	ldrb	r3, [r7, #23]
 800dc06:	693a      	ldr	r2, [r7, #16]
 800dc08:	4413      	add	r3, r2
 800dc0a:	613b      	str	r3, [r7, #16]


		Temp_val = DataIn[2];
 800dc0c:	683b      	ldr	r3, [r7, #0]
 800dc0e:	789b      	ldrb	r3, [r3, #2]
 800dc10:	75fb      	strb	r3, [r7, #23]
		//printf("Data:0x%02x\n",DataIn[2]);
		(t3==0)?(Temp_val &= ~(1 << 7)):(Temp_val|= 1 << 7);//copying Previous bit
 800dc12:	7b7b      	ldrb	r3, [r7, #13]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d104      	bne.n	800dc22 <Extract_Parity_Data+0x116>
 800dc18:	7dfb      	ldrb	r3, [r7, #23]
 800dc1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc1e:	75fb      	strb	r3, [r7, #23]
 800dc20:	e003      	b.n	800dc2a <Extract_Parity_Data+0x11e>
 800dc22:	7dfb      	ldrb	r3, [r7, #23]
 800dc24:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800dc28:	75fb      	strb	r3, [r7, #23]
		//printf("Temp3:0x%02x\n",Temp_val);
		Return_value<<=8;
 800dc2a:	693b      	ldr	r3, [r7, #16]
 800dc2c:	021b      	lsls	r3, r3, #8
 800dc2e:	613b      	str	r3, [r7, #16]
		Return_value+=Temp_val;
 800dc30:	7dfb      	ldrb	r3, [r7, #23]
 800dc32:	693a      	ldr	r2, [r7, #16]
 800dc34:	4413      	add	r3, r2
 800dc36:	613b      	str	r3, [r7, #16]
		//printf("Data:0x%02x\n",DataIn[2]);
		//printf("Data:0x%02x\n",DataIn[1]);
		//printf("Data:0x%02x\n",DataIn[0]);
		return Return_value;
 800dc38:	693b      	ldr	r3, [r7, #16]
 800dc3a:	e000      	b.n	800dc3e <Extract_Parity_Data+0x132>
	}
	return 0;
 800dc3c:	2300      	movs	r3, #0
}
 800dc3e:	4618      	mov	r0, r3
 800dc40:	3718      	adds	r7, #24
 800dc42:	46bd      	mov	sp, r7
 800dc44:	bd80      	pop	{r7, pc}
 800dc46:	bf00      	nop
 800dc48:	08026880 	.word	0x08026880

0800dc4c <Calculate_Parity>:

uint8_t Calculate_Parity(uint8_t Buff, uint8_t Parity_Type)
{
 800dc4c:	b480      	push	{r7}
 800dc4e:	b085      	sub	sp, #20
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	4603      	mov	r3, r0
 800dc54:	460a      	mov	r2, r1
 800dc56:	71fb      	strb	r3, [r7, #7]
 800dc58:	4613      	mov	r3, r2
 800dc5a:	71bb      	strb	r3, [r7, #6]
	int8_t bit = 0;
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	73fb      	strb	r3, [r7, #15]
	int8_t count = 0;
 800dc60:	2300      	movs	r3, #0
 800dc62:	73bb      	strb	r3, [r7, #14]

	// printf("For Value:0x%02x\n", Buff);
	for (bit = 6; bit >= 0; bit--)
 800dc64:	2306      	movs	r3, #6
 800dc66:	73fb      	strb	r3, [r7, #15]
 800dc68:	e014      	b.n	800dc94 <Calculate_Parity+0x48>
	{
		//printf("[%02u]:%u| ", bit, ((Buff >> bit) & 1));
		if ((Buff >> bit) & 1)
 800dc6a:	79fa      	ldrb	r2, [r7, #7]
 800dc6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc70:	fa42 f303 	asr.w	r3, r2, r3
 800dc74:	f003 0301 	and.w	r3, r3, #1
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d005      	beq.n	800dc88 <Calculate_Parity+0x3c>
		{
			count++;
 800dc7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dc80:	b2db      	uxtb	r3, r3
 800dc82:	3301      	adds	r3, #1
 800dc84:	b2db      	uxtb	r3, r3
 800dc86:	73bb      	strb	r3, [r7, #14]
	for (bit = 6; bit >= 0; bit--)
 800dc88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc8c:	b2db      	uxtb	r3, r3
 800dc8e:	3b01      	subs	r3, #1
 800dc90:	b2db      	uxtb	r3, r3
 800dc92:	73fb      	strb	r3, [r7, #15]
 800dc94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	dae6      	bge.n	800dc6a <Calculate_Parity+0x1e>
		}
	}
	//printf("\n");
	if (Parity_Type == 0)
 800dc9c:	79bb      	ldrb	r3, [r7, #6]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d109      	bne.n	800dcb6 <Calculate_Parity+0x6a>
	{
		if ((count % 2) == 0)
 800dca2:	7bbb      	ldrb	r3, [r7, #14]
 800dca4:	f003 0301 	and.w	r3, r3, #1
 800dca8:	b2db      	uxtb	r3, r3
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d101      	bne.n	800dcb2 <Calculate_Parity+0x66>
		{
			return 0;
 800dcae:	2300      	movs	r3, #0
 800dcb0:	e00f      	b.n	800dcd2 <Calculate_Parity+0x86>
		}
		else
		{
			return 1;
 800dcb2:	2301      	movs	r3, #1
 800dcb4:	e00d      	b.n	800dcd2 <Calculate_Parity+0x86>
		}
	}
	if (Parity_Type == 1)
 800dcb6:	79bb      	ldrb	r3, [r7, #6]
 800dcb8:	2b01      	cmp	r3, #1
 800dcba:	d109      	bne.n	800dcd0 <Calculate_Parity+0x84>
	{
		if ((count % 2) == 0)
 800dcbc:	7bbb      	ldrb	r3, [r7, #14]
 800dcbe:	f003 0301 	and.w	r3, r3, #1
 800dcc2:	b2db      	uxtb	r3, r3
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d101      	bne.n	800dccc <Calculate_Parity+0x80>
		{
			return 1;
 800dcc8:	2301      	movs	r3, #1
 800dcca:	e002      	b.n	800dcd2 <Calculate_Parity+0x86>
		}
		else
		{
			return 0;
 800dccc:	2300      	movs	r3, #0
 800dcce:	e000      	b.n	800dcd2 <Calculate_Parity+0x86>
		}
	}
	return 0;
 800dcd0:	2300      	movs	r3, #0
}
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	3714      	adds	r7, #20
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcdc:	4770      	bx	lr
	...

0800dce0 <Verify_parity>:

uint8_t Verify_parity(uint8_t *Data,uint8_t Length,uint8_t Parity_Type)
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b084      	sub	sp, #16
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
 800dce8:	460b      	mov	r3, r1
 800dcea:	70fb      	strb	r3, [r7, #3]
 800dcec:	4613      	mov	r3, r2
 800dcee:	70bb      	strb	r3, [r7, #2]
	uint8_t Byte_Traverser = 0;
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	73fb      	strb	r3, [r7, #15]

	for(Byte_Traverser= 0; Byte_Traverser < Length; ++Byte_Traverser)
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	73fb      	strb	r3, [r7, #15]
 800dcf8:	e03b      	b.n	800dd72 <Verify_parity+0x92>
	{
		if( (Calculate_Parity(Data[Byte_Traverser],Parity_Type)) != ((Data[Byte_Traverser]>>7)&1))
 800dcfa:	7bfb      	ldrb	r3, [r7, #15]
 800dcfc:	687a      	ldr	r2, [r7, #4]
 800dcfe:	4413      	add	r3, r2
 800dd00:	781b      	ldrb	r3, [r3, #0]
 800dd02:	78ba      	ldrb	r2, [r7, #2]
 800dd04:	4611      	mov	r1, r2
 800dd06:	4618      	mov	r0, r3
 800dd08:	f7ff ffa0 	bl	800dc4c <Calculate_Parity>
 800dd0c:	4603      	mov	r3, r0
 800dd0e:	4619      	mov	r1, r3
 800dd10:	7bfb      	ldrb	r3, [r7, #15]
 800dd12:	687a      	ldr	r2, [r7, #4]
 800dd14:	4413      	add	r3, r2
 800dd16:	781b      	ldrb	r3, [r3, #0]
 800dd18:	09db      	lsrs	r3, r3, #7
 800dd1a:	b2db      	uxtb	r3, r3
 800dd1c:	f003 0301 	and.w	r3, r3, #1
 800dd20:	4299      	cmp	r1, r3
 800dd22:	d023      	beq.n	800dd6c <Verify_parity+0x8c>
		{
			printf("Failed for data:0x%02x\n",Data[Byte_Traverser]);
 800dd24:	7bfb      	ldrb	r3, [r7, #15]
 800dd26:	687a      	ldr	r2, [r7, #4]
 800dd28:	4413      	add	r3, r2
 800dd2a:	781b      	ldrb	r3, [r3, #0]
 800dd2c:	4619      	mov	r1, r3
 800dd2e:	4815      	ldr	r0, [pc, #84]	; (800dd84 <Verify_parity+0xa4>)
 800dd30:	f014 fee4 	bl	8022afc <iprintf>
			printf("Expected Parity:%u\n",Calculate_Parity(Data[Byte_Traverser],Parity_Type));
 800dd34:	7bfb      	ldrb	r3, [r7, #15]
 800dd36:	687a      	ldr	r2, [r7, #4]
 800dd38:	4413      	add	r3, r2
 800dd3a:	781b      	ldrb	r3, [r3, #0]
 800dd3c:	78ba      	ldrb	r2, [r7, #2]
 800dd3e:	4611      	mov	r1, r2
 800dd40:	4618      	mov	r0, r3
 800dd42:	f7ff ff83 	bl	800dc4c <Calculate_Parity>
 800dd46:	4603      	mov	r3, r0
 800dd48:	4619      	mov	r1, r3
 800dd4a:	480f      	ldr	r0, [pc, #60]	; (800dd88 <Verify_parity+0xa8>)
 800dd4c:	f014 fed6 	bl	8022afc <iprintf>
			printf("Available Parity:%u\n",((Data[Byte_Traverser]>>7)&1));
 800dd50:	7bfb      	ldrb	r3, [r7, #15]
 800dd52:	687a      	ldr	r2, [r7, #4]
 800dd54:	4413      	add	r3, r2
 800dd56:	781b      	ldrb	r3, [r3, #0]
 800dd58:	09db      	lsrs	r3, r3, #7
 800dd5a:	b2db      	uxtb	r3, r3
 800dd5c:	f003 0301 	and.w	r3, r3, #1
 800dd60:	4619      	mov	r1, r3
 800dd62:	480a      	ldr	r0, [pc, #40]	; (800dd8c <Verify_parity+0xac>)
 800dd64:	f014 feca 	bl	8022afc <iprintf>
			return 0;
 800dd68:	2300      	movs	r3, #0
 800dd6a:	e007      	b.n	800dd7c <Verify_parity+0x9c>
	for(Byte_Traverser= 0; Byte_Traverser < Length; ++Byte_Traverser)
 800dd6c:	7bfb      	ldrb	r3, [r7, #15]
 800dd6e:	3301      	adds	r3, #1
 800dd70:	73fb      	strb	r3, [r7, #15]
 800dd72:	7bfa      	ldrb	r2, [r7, #15]
 800dd74:	78fb      	ldrb	r3, [r7, #3]
 800dd76:	429a      	cmp	r2, r3
 800dd78:	d3bf      	bcc.n	800dcfa <Verify_parity+0x1a>
		}
	}
	return 1;
 800dd7a:	2301      	movs	r3, #1
}
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	3710      	adds	r7, #16
 800dd80:	46bd      	mov	sp, r7
 800dd82:	bd80      	pop	{r7, pc}
 800dd84:	0802689c 	.word	0x0802689c
 800dd88:	080268b4 	.word	0x080268b4
 800dd8c:	080268c8 	.word	0x080268c8

0800dd90 <Insert_cal_parity>:


void Insert_cal_parity(uint8_t start, uint8_t No_of_Bits, uint8_t *Dest_Buff, uint64_t DataIn, uint8_t Parity_Type)
{
 800dd90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd94:	b089      	sub	sp, #36	; 0x24
 800dd96:	af00      	add	r7, sp, #0
 800dd98:	4603      	mov	r3, r0
 800dd9a:	60ba      	str	r2, [r7, #8]
 800dd9c:	73fb      	strb	r3, [r7, #15]
 800dd9e:	460b      	mov	r3, r1
 800dda0:	73bb      	strb	r3, [r7, #14]
	uint16_t t1 = 0, t2 = 0, t3 = 0, t4 = 0;
 800dda2:	2300      	movs	r3, #0
 800dda4:	83fb      	strh	r3, [r7, #30]
 800dda6:	2300      	movs	r3, #0
 800dda8:	83bb      	strh	r3, [r7, #28]
 800ddaa:	2300      	movs	r3, #0
 800ddac:	833b      	strh	r3, [r7, #24]
 800ddae:	2300      	movs	r3, #0
 800ddb0:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp_Data = 0;
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	76fb      	strb	r3, [r7, #27]

	if(Parity_Type == NO_PARITY)
 800ddb6:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800ddba:	2b02      	cmp	r3, #2
 800ddbc:	d108      	bne.n	800ddd0 <Insert_cal_parity+0x40>
	{
		InsertBits(start,No_of_Bits,Dest_Buff,DataIn);
 800ddbe:	7bfb      	ldrb	r3, [r7, #15]
 800ddc0:	b298      	uxth	r0, r3
 800ddc2:	7bbb      	ldrb	r3, [r7, #14]
 800ddc4:	b299      	uxth	r1, r3
 800ddc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ddc8:	68ba      	ldr	r2, [r7, #8]
 800ddca:	f7f2 fcaf 	bl	800072c <InsertBits>
		return;
 800ddce:	e13b      	b.n	800e048 <Insert_cal_parity+0x2b8>
	}

	if (No_of_Bits == 8)
 800ddd0:	7bbb      	ldrb	r3, [r7, #14]
 800ddd2:	2b08      	cmp	r3, #8
 800ddd4:	d12c      	bne.n	800de30 <Insert_cal_parity+0xa0>
	{
		// printf("One Byte Calculation\n");
		if (DataIn > 0x7f)
 800ddd6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ddda:	2a80      	cmp	r2, #128	; 0x80
 800dddc:	f173 0300 	sbcs.w	r3, r3, #0
 800dde0:	d303      	bcc.n	800ddea <Insert_cal_parity+0x5a>
		{
			printf("Can't Insert Data as it is more than 7 Bits Length\n");
 800dde2:	489b      	ldr	r0, [pc, #620]	; (800e050 <Insert_cal_parity+0x2c0>)
 800dde4:	f014 ff26 	bl	8022c34 <puts>
			return;
 800dde8:	e12e      	b.n	800e048 <Insert_cal_parity+0x2b8>
		}
		else
		{
			if (Calculate_Parity(DataIn, Parity_Type) == 1)
 800ddea:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800ddee:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800ddf2:	4611      	mov	r1, r2
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	f7ff ff29 	bl	800dc4c <Calculate_Parity>
 800ddfa:	4603      	mov	r3, r0
 800ddfc:	2b01      	cmp	r3, #1
 800ddfe:	d10b      	bne.n	800de18 <Insert_cal_parity+0x88>
			{
				//printf("\nSET\n");
				Dest_Buff[0] = DataIn;
 800de00:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800de04:	68bb      	ldr	r3, [r7, #8]
 800de06:	701a      	strb	r2, [r3, #0]
				Dest_Buff[0] |= 1 << 7;
 800de08:	68bb      	ldr	r3, [r7, #8]
 800de0a:	781b      	ldrb	r3, [r3, #0]
 800de0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800de10:	b2da      	uxtb	r2, r3
 800de12:	68bb      	ldr	r3, [r7, #8]
 800de14:	701a      	strb	r2, [r3, #0]
 800de16:	e117      	b.n	800e048 <Insert_cal_parity+0x2b8>
			}
			else
			{
				//printf("\nCLEAR\n");
				Dest_Buff[0] = DataIn;
 800de18:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800de1c:	68bb      	ldr	r3, [r7, #8]
 800de1e:	701a      	strb	r2, [r3, #0]
				Dest_Buff[0] &= ~(1 << 7);
 800de20:	68bb      	ldr	r3, [r7, #8]
 800de22:	781b      	ldrb	r3, [r3, #0]
 800de24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de28:	b2da      	uxtb	r2, r3
 800de2a:	68bb      	ldr	r3, [r7, #8]
 800de2c:	701a      	strb	r2, [r3, #0]
 800de2e:	e10b      	b.n	800e048 <Insert_cal_parity+0x2b8>
			}
		}
	}
	else if (No_of_Bits == 24)
 800de30:	7bbb      	ldrb	r3, [r7, #14]
 800de32:	2b18      	cmp	r3, #24
 800de34:	f040 8104 	bne.w	800e040 <Insert_cal_parity+0x2b0>
	{
		// printf("Three Byte's Calculation\n");
		if (DataIn > 0x1fffff)
 800de38:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800de3c:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800de40:	f173 0300 	sbcs.w	r3, r3, #0
 800de44:	d303      	bcc.n	800de4e <Insert_cal_parity+0xbe>
		{
			printf("Can't Insert Data as it is more than 21 Bits Length\n");
 800de46:	4883      	ldr	r0, [pc, #524]	; (800e054 <Insert_cal_parity+0x2c4>)
 800de48:	f014 fef4 	bl	8022c34 <puts>
			return;
 800de4c:	e0fc      	b.n	800e048 <Insert_cal_parity+0x2b8>
		}
		else
		{
			uint8_t Byte_Traverser = 0;
 800de4e:	2300      	movs	r3, #0
 800de50:	76bb      	strb	r3, [r7, #26]

			for (Byte_Traverser = 0; Byte_Traverser < 3; Byte_Traverser++)
 800de52:	2300      	movs	r3, #0
 800de54:	76bb      	strb	r3, [r7, #26]
 800de56:	e0ee      	b.n	800e036 <Insert_cal_parity+0x2a6>
			{
				Temp_Data = DataIn >> (((Byte_Traverser * 8)));
 800de58:	7ebb      	ldrb	r3, [r7, #26]
 800de5a:	00d9      	lsls	r1, r3, #3
 800de5c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800de60:	f1c1 0620 	rsb	r6, r1, #32
 800de64:	f1a1 0c20 	sub.w	ip, r1, #32
 800de68:	fa22 f001 	lsr.w	r0, r2, r1
 800de6c:	6038      	str	r0, [r7, #0]
 800de6e:	fa03 f606 	lsl.w	r6, r3, r6
 800de72:	6838      	ldr	r0, [r7, #0]
 800de74:	4330      	orrs	r0, r6
 800de76:	6038      	str	r0, [r7, #0]
 800de78:	fa23 fc0c 	lsr.w	ip, r3, ip
 800de7c:	6838      	ldr	r0, [r7, #0]
 800de7e:	ea40 000c 	orr.w	r0, r0, ip
 800de82:	6038      	str	r0, [r7, #0]
 800de84:	40cb      	lsrs	r3, r1
 800de86:	607b      	str	r3, [r7, #4]
 800de88:	783b      	ldrb	r3, [r7, #0]
 800de8a:	76fb      	strb	r3, [r7, #27]
				// printf("#Temp_Data:0x%02x\n",Temp_Data);
				switch (Byte_Traverser)
 800de8c:	7ebb      	ldrb	r3, [r7, #26]
 800de8e:	2b02      	cmp	r3, #2
 800de90:	d07a      	beq.n	800df88 <Insert_cal_parity+0x1f8>
 800de92:	2b02      	cmp	r3, #2
 800de94:	f300 8094 	bgt.w	800dfc0 <Insert_cal_parity+0x230>
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d002      	beq.n	800dea2 <Insert_cal_parity+0x112>
 800de9c:	2b01      	cmp	r3, #1
 800de9e:	d01f      	beq.n	800dee0 <Insert_cal_parity+0x150>
					(t2==0)?(Temp_Data &= ~(1 << 0)):(Temp_Data|= 1 << 0);//copying Previous bit
					(t1==0)?(Temp_Data &= ~(1 << 1)):(Temp_Data|= 1 << 1);//copying Previous bit
					//printf("Temp_Data:%u\n",Temp_Data);
					break;
				default:
					break;
 800dea0:	e08e      	b.n	800dfc0 <Insert_cal_parity+0x230>
					t1 = (((DataIn >> (((Byte_Traverser * 8)))) >> 7) & 1);
 800dea2:	7ebb      	ldrb	r3, [r7, #26]
 800dea4:	00d9      	lsls	r1, r3, #3
 800dea6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800deaa:	f1c1 0620 	rsb	r6, r1, #32
 800deae:	f1a1 0020 	sub.w	r0, r1, #32
 800deb2:	fa22 f401 	lsr.w	r4, r2, r1
 800deb6:	fa03 f606 	lsl.w	r6, r3, r6
 800deba:	4334      	orrs	r4, r6
 800debc:	fa23 f000 	lsr.w	r0, r3, r0
 800dec0:	4304      	orrs	r4, r0
 800dec2:	fa23 f501 	lsr.w	r5, r3, r1
 800dec6:	f04f 0200 	mov.w	r2, #0
 800deca:	f04f 0300 	mov.w	r3, #0
 800dece:	09e2      	lsrs	r2, r4, #7
 800ded0:	ea42 6245 	orr.w	r2, r2, r5, lsl #25
 800ded4:	09eb      	lsrs	r3, r5, #7
 800ded6:	b293      	uxth	r3, r2
 800ded8:	f003 0301 	and.w	r3, r3, #1
 800dedc:	83fb      	strh	r3, [r7, #30]
					break;
 800dede:	e070      	b.n	800dfc2 <Insert_cal_parity+0x232>
					Temp_Data<<=1; //Shifting data by 1 bit
 800dee0:	7efb      	ldrb	r3, [r7, #27]
 800dee2:	005b      	lsls	r3, r3, #1
 800dee4:	76fb      	strb	r3, [r7, #27]
					(t1==0)?(Temp_Data &= ~(1 << 0)):(Temp_Data|= 1 << 0);//copying Previous bit
 800dee6:	8bfb      	ldrh	r3, [r7, #30]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d104      	bne.n	800def6 <Insert_cal_parity+0x166>
 800deec:	7efb      	ldrb	r3, [r7, #27]
 800deee:	f023 0301 	bic.w	r3, r3, #1
 800def2:	76fb      	strb	r3, [r7, #27]
 800def4:	e003      	b.n	800defe <Insert_cal_parity+0x16e>
 800def6:	7efb      	ldrb	r3, [r7, #27]
 800def8:	f043 0301 	orr.w	r3, r3, #1
 800defc:	76fb      	strb	r3, [r7, #27]
					t1 = (((DataIn >> (((Byte_Traverser * 8)))) >> 7) & 1);
 800defe:	7ebb      	ldrb	r3, [r7, #26]
 800df00:	00d9      	lsls	r1, r3, #3
 800df02:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800df06:	f1c1 0620 	rsb	r6, r1, #32
 800df0a:	f1a1 0020 	sub.w	r0, r1, #32
 800df0e:	fa22 f801 	lsr.w	r8, r2, r1
 800df12:	fa03 f606 	lsl.w	r6, r3, r6
 800df16:	ea48 0806 	orr.w	r8, r8, r6
 800df1a:	fa23 f000 	lsr.w	r0, r3, r0
 800df1e:	ea48 0800 	orr.w	r8, r8, r0
 800df22:	fa23 f901 	lsr.w	r9, r3, r1
 800df26:	f04f 0200 	mov.w	r2, #0
 800df2a:	f04f 0300 	mov.w	r3, #0
 800df2e:	ea4f 12d8 	mov.w	r2, r8, lsr #7
 800df32:	ea42 6249 	orr.w	r2, r2, r9, lsl #25
 800df36:	ea4f 13d9 	mov.w	r3, r9, lsr #7
 800df3a:	b293      	uxth	r3, r2
 800df3c:	f003 0301 	and.w	r3, r3, #1
 800df40:	83fb      	strh	r3, [r7, #30]
					t2 = (((DataIn >> (((Byte_Traverser * 8)))) >> 6) & 1);
 800df42:	7ebb      	ldrb	r3, [r7, #26]
 800df44:	00d9      	lsls	r1, r3, #3
 800df46:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800df4a:	f1c1 0620 	rsb	r6, r1, #32
 800df4e:	f1a1 0020 	sub.w	r0, r1, #32
 800df52:	fa22 fa01 	lsr.w	sl, r2, r1
 800df56:	fa03 f606 	lsl.w	r6, r3, r6
 800df5a:	ea4a 0a06 	orr.w	sl, sl, r6
 800df5e:	fa23 f000 	lsr.w	r0, r3, r0
 800df62:	ea4a 0a00 	orr.w	sl, sl, r0
 800df66:	fa23 fb01 	lsr.w	fp, r3, r1
 800df6a:	f04f 0200 	mov.w	r2, #0
 800df6e:	f04f 0300 	mov.w	r3, #0
 800df72:	ea4f 129a 	mov.w	r2, sl, lsr #6
 800df76:	ea42 628b 	orr.w	r2, r2, fp, lsl #26
 800df7a:	ea4f 139b 	mov.w	r3, fp, lsr #6
 800df7e:	b293      	uxth	r3, r2
 800df80:	f003 0301 	and.w	r3, r3, #1
 800df84:	83bb      	strh	r3, [r7, #28]
					break;
 800df86:	e01c      	b.n	800dfc2 <Insert_cal_parity+0x232>
					Temp_Data<<=2; //Shifting data by 2 bit
 800df88:	7efb      	ldrb	r3, [r7, #27]
 800df8a:	009b      	lsls	r3, r3, #2
 800df8c:	76fb      	strb	r3, [r7, #27]
					(t2==0)?(Temp_Data &= ~(1 << 0)):(Temp_Data|= 1 << 0);//copying Previous bit
 800df8e:	8bbb      	ldrh	r3, [r7, #28]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d104      	bne.n	800df9e <Insert_cal_parity+0x20e>
 800df94:	7efb      	ldrb	r3, [r7, #27]
 800df96:	f023 0301 	bic.w	r3, r3, #1
 800df9a:	76fb      	strb	r3, [r7, #27]
 800df9c:	e003      	b.n	800dfa6 <Insert_cal_parity+0x216>
 800df9e:	7efb      	ldrb	r3, [r7, #27]
 800dfa0:	f043 0301 	orr.w	r3, r3, #1
 800dfa4:	76fb      	strb	r3, [r7, #27]
					(t1==0)?(Temp_Data &= ~(1 << 1)):(Temp_Data|= 1 << 1);//copying Previous bit
 800dfa6:	8bfb      	ldrh	r3, [r7, #30]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d104      	bne.n	800dfb6 <Insert_cal_parity+0x226>
 800dfac:	7efb      	ldrb	r3, [r7, #27]
 800dfae:	f023 0302 	bic.w	r3, r3, #2
 800dfb2:	76fb      	strb	r3, [r7, #27]
					break;
 800dfb4:	e005      	b.n	800dfc2 <Insert_cal_parity+0x232>
					(t1==0)?(Temp_Data &= ~(1 << 1)):(Temp_Data|= 1 << 1);//copying Previous bit
 800dfb6:	7efb      	ldrb	r3, [r7, #27]
 800dfb8:	f043 0302 	orr.w	r3, r3, #2
 800dfbc:	76fb      	strb	r3, [r7, #27]
					break;
 800dfbe:	e000      	b.n	800dfc2 <Insert_cal_parity+0x232>
					break;
 800dfc0:	bf00      	nop
				}
				//if (Calculate_Parity(DataIn >> ((16 - (Byte_Traverser * 8))), Parity_Type) == 1)
				if (Calculate_Parity(Temp_Data, Parity_Type) == 1)
 800dfc2:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800dfc6:	7efb      	ldrb	r3, [r7, #27]
 800dfc8:	4611      	mov	r1, r2
 800dfca:	4618      	mov	r0, r3
 800dfcc:	f7ff fe3e 	bl	800dc4c <Calculate_Parity>
 800dfd0:	4603      	mov	r3, r0
 800dfd2:	2b01      	cmp	r3, #1
 800dfd4:	d116      	bne.n	800e004 <Insert_cal_parity+0x274>
				{
					// printf("SET\n");
					//Dest_Buff[Byte_Traverser] = DataIn >> ((16 - (Byte_Traverser * 8)));
					Dest_Buff[3- Byte_Traverser-1] = Temp_Data;
 800dfd6:	7ebb      	ldrb	r3, [r7, #26]
 800dfd8:	f1c3 0302 	rsb	r3, r3, #2
 800dfdc:	68ba      	ldr	r2, [r7, #8]
 800dfde:	4413      	add	r3, r2
 800dfe0:	7efa      	ldrb	r2, [r7, #27]
 800dfe2:	701a      	strb	r2, [r3, #0]
					Dest_Buff[3- Byte_Traverser-1] |= 1 << 7;
 800dfe4:	7ebb      	ldrb	r3, [r7, #26]
 800dfe6:	f1c3 0302 	rsb	r3, r3, #2
 800dfea:	68ba      	ldr	r2, [r7, #8]
 800dfec:	4413      	add	r3, r2
 800dfee:	781a      	ldrb	r2, [r3, #0]
 800dff0:	7ebb      	ldrb	r3, [r7, #26]
 800dff2:	f1c3 0302 	rsb	r3, r3, #2
 800dff6:	68b9      	ldr	r1, [r7, #8]
 800dff8:	440b      	add	r3, r1
 800dffa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800dffe:	b2d2      	uxtb	r2, r2
 800e000:	701a      	strb	r2, [r3, #0]
 800e002:	e015      	b.n	800e030 <Insert_cal_parity+0x2a0>
				}
				else
				{
					// printf("CLEAR\n");
					//Dest_Buff[Byte_Traverser] = DataIn >> ((16 - (Byte_Traverser * 8)));
					Dest_Buff[3- Byte_Traverser-1] = Temp_Data;
 800e004:	7ebb      	ldrb	r3, [r7, #26]
 800e006:	f1c3 0302 	rsb	r3, r3, #2
 800e00a:	68ba      	ldr	r2, [r7, #8]
 800e00c:	4413      	add	r3, r2
 800e00e:	7efa      	ldrb	r2, [r7, #27]
 800e010:	701a      	strb	r2, [r3, #0]
					Dest_Buff[3 -Byte_Traverser-1] &= ~(1 << 7);
 800e012:	7ebb      	ldrb	r3, [r7, #26]
 800e014:	f1c3 0302 	rsb	r3, r3, #2
 800e018:	68ba      	ldr	r2, [r7, #8]
 800e01a:	4413      	add	r3, r2
 800e01c:	781a      	ldrb	r2, [r3, #0]
 800e01e:	7ebb      	ldrb	r3, [r7, #26]
 800e020:	f1c3 0302 	rsb	r3, r3, #2
 800e024:	68b9      	ldr	r1, [r7, #8]
 800e026:	440b      	add	r3, r1
 800e028:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e02c:	b2d2      	uxtb	r2, r2
 800e02e:	701a      	strb	r2, [r3, #0]
			for (Byte_Traverser = 0; Byte_Traverser < 3; Byte_Traverser++)
 800e030:	7ebb      	ldrb	r3, [r7, #26]
 800e032:	3301      	adds	r3, #1
 800e034:	76bb      	strb	r3, [r7, #26]
 800e036:	7ebb      	ldrb	r3, [r7, #26]
 800e038:	2b02      	cmp	r3, #2
 800e03a:	f67f af0d 	bls.w	800de58 <Insert_cal_parity+0xc8>
 800e03e:	e003      	b.n	800e048 <Insert_cal_parity+0x2b8>
			}
		}
	}
	else
	{
		printf("Selection Wrong\n");
 800e040:	4805      	ldr	r0, [pc, #20]	; (800e058 <Insert_cal_parity+0x2c8>)
 800e042:	f014 fdf7 	bl	8022c34 <puts>
		return;
 800e046:	bf00      	nop
	}
	UNUSED(t1);UNUSED(t2);UNUSED(t3);UNUSED(t4);
}
 800e048:	3724      	adds	r7, #36	; 0x24
 800e04a:	46bd      	mov	sp, r7
 800e04c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e050:	080268e0 	.word	0x080268e0
 800e054:	08026914 	.word	0x08026914
 800e058:	08026948 	.word	0x08026948

0800e05c <Data_Compliment>:

uint16_t Data_Compliment(uint8_t *Buff,uint16_t Size,uint8_t Type)
{
 800e05c:	b580      	push	{r7, lr}
 800e05e:	b084      	sub	sp, #16
 800e060:	af00      	add	r7, sp, #0
 800e062:	6078      	str	r0, [r7, #4]
 800e064:	460b      	mov	r3, r1
 800e066:	807b      	strh	r3, [r7, #2]
 800e068:	4613      	mov	r3, r2
 800e06a:	707b      	strb	r3, [r7, #1]
	uint16_t Traverser = 0;
 800e06c:	2300      	movs	r3, #0
 800e06e:	81fb      	strh	r3, [r7, #14]
	uint16_t Actual_Size = 0;
 800e070:	2300      	movs	r3, #0
 800e072:	81bb      	strh	r3, [r7, #12]

#if (SIEMENS_DEBUG==1)
	printf("Size:%u\n",Size);
#endif

	if(Type == VERIFY)
 800e074:	787b      	ldrb	r3, [r7, #1]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d133      	bne.n	800e0e2 <Data_Compliment+0x86>
	{
		Actual_Size = ((Size/2)-2);
 800e07a:	887b      	ldrh	r3, [r7, #2]
 800e07c:	085b      	lsrs	r3, r3, #1
 800e07e:	b29b      	uxth	r3, r3
 800e080:	3b02      	subs	r3, #2
 800e082:	81bb      	strh	r3, [r7, #12]
		for(Traverser = 0; Traverser < Actual_Size; ++Traverser)
 800e084:	2300      	movs	r3, #0
 800e086:	81fb      	strh	r3, [r7, #14]
 800e088:	e025      	b.n	800e0d6 <Data_Compliment+0x7a>
		{
			// printf("0x%02x|Compliment:0x%02x\n",Buff[Traverser],Buff[Traverser+Actual_Size+2]);
			if(Buff[Traverser] != (uint8_t)~Buff[Traverser+Actual_Size+2])
 800e08a:	89fb      	ldrh	r3, [r7, #14]
 800e08c:	687a      	ldr	r2, [r7, #4]
 800e08e:	4413      	add	r3, r2
 800e090:	781a      	ldrb	r2, [r3, #0]
 800e092:	89f9      	ldrh	r1, [r7, #14]
 800e094:	89bb      	ldrh	r3, [r7, #12]
 800e096:	440b      	add	r3, r1
 800e098:	3302      	adds	r3, #2
 800e09a:	6879      	ldr	r1, [r7, #4]
 800e09c:	440b      	add	r3, r1
 800e09e:	781b      	ldrb	r3, [r3, #0]
 800e0a0:	43db      	mvns	r3, r3
 800e0a2:	b2db      	uxtb	r3, r3
 800e0a4:	429a      	cmp	r2, r3
 800e0a6:	d013      	beq.n	800e0d0 <Data_Compliment+0x74>
			{
				printf("Compliment failed for DATA\n0x%02x|Compliment:0x%02x\n",Buff[Traverser],(uint8_t)~Buff[Traverser+Actual_Size+2]);
 800e0a8:	89fb      	ldrh	r3, [r7, #14]
 800e0aa:	687a      	ldr	r2, [r7, #4]
 800e0ac:	4413      	add	r3, r2
 800e0ae:	781b      	ldrb	r3, [r3, #0]
 800e0b0:	4619      	mov	r1, r3
 800e0b2:	89fa      	ldrh	r2, [r7, #14]
 800e0b4:	89bb      	ldrh	r3, [r7, #12]
 800e0b6:	4413      	add	r3, r2
 800e0b8:	3302      	adds	r3, #2
 800e0ba:	687a      	ldr	r2, [r7, #4]
 800e0bc:	4413      	add	r3, r2
 800e0be:	781b      	ldrb	r3, [r3, #0]
 800e0c0:	43db      	mvns	r3, r3
 800e0c2:	b2db      	uxtb	r3, r3
 800e0c4:	461a      	mov	r2, r3
 800e0c6:	481a      	ldr	r0, [pc, #104]	; (800e130 <Data_Compliment+0xd4>)
 800e0c8:	f014 fd18 	bl	8022afc <iprintf>
				return 0;
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	e02b      	b.n	800e128 <Data_Compliment+0xcc>
		for(Traverser = 0; Traverser < Actual_Size; ++Traverser)
 800e0d0:	89fb      	ldrh	r3, [r7, #14]
 800e0d2:	3301      	adds	r3, #1
 800e0d4:	81fb      	strh	r3, [r7, #14]
 800e0d6:	89fa      	ldrh	r2, [r7, #14]
 800e0d8:	89bb      	ldrh	r3, [r7, #12]
 800e0da:	429a      	cmp	r2, r3
 800e0dc:	d3d5      	bcc.n	800e08a <Data_Compliment+0x2e>
			}
		}
		return 1;
 800e0de:	2301      	movs	r3, #1
 800e0e0:	e022      	b.n	800e128 <Data_Compliment+0xcc>
	}
	else if(Type == CONVERT)
 800e0e2:	787b      	ldrb	r3, [r7, #1]
 800e0e4:	2b01      	cmp	r3, #1
 800e0e6:	d11e      	bne.n	800e126 <Data_Compliment+0xca>
		{
			printf("0x%02x|",Buff[Traverser]);
		}
		printf("Compliment Data:\n");
#endif
		for(Traverser = 0; Traverser <(Size); ++Traverser)
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	81fb      	strh	r3, [r7, #14]
 800e0ec:	e010      	b.n	800e110 <Data_Compliment+0xb4>
		{
			Buff[Traverser+2+Size] = ~Buff[Traverser];
 800e0ee:	89fb      	ldrh	r3, [r7, #14]
 800e0f0:	687a      	ldr	r2, [r7, #4]
 800e0f2:	4413      	add	r3, r2
 800e0f4:	781a      	ldrb	r2, [r3, #0]
 800e0f6:	89fb      	ldrh	r3, [r7, #14]
 800e0f8:	1c99      	adds	r1, r3, #2
 800e0fa:	887b      	ldrh	r3, [r7, #2]
 800e0fc:	440b      	add	r3, r1
 800e0fe:	4619      	mov	r1, r3
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	440b      	add	r3, r1
 800e104:	43d2      	mvns	r2, r2
 800e106:	b2d2      	uxtb	r2, r2
 800e108:	701a      	strb	r2, [r3, #0]
		for(Traverser = 0; Traverser <(Size); ++Traverser)
 800e10a:	89fb      	ldrh	r3, [r7, #14]
 800e10c:	3301      	adds	r3, #1
 800e10e:	81fb      	strh	r3, [r7, #14]
 800e110:	89fa      	ldrh	r2, [r7, #14]
 800e112:	887b      	ldrh	r3, [r7, #2]
 800e114:	429a      	cmp	r2, r3
 800e116:	d3ea      	bcc.n	800e0ee <Data_Compliment+0x92>
#if (SIEMENS_DEBUG==1)
			printf("0x%02x|",Buff[Traverser+2+Size]);
#endif
		}
		return (Traverser+Size+2);
 800e118:	89fa      	ldrh	r2, [r7, #14]
 800e11a:	887b      	ldrh	r3, [r7, #2]
 800e11c:	4413      	add	r3, r2
 800e11e:	b29b      	uxth	r3, r3
 800e120:	3302      	adds	r3, #2
 800e122:	b29b      	uxth	r3, r3
 800e124:	e000      	b.n	800e128 <Data_Compliment+0xcc>
	}
	return 0;
 800e126:	2300      	movs	r3, #0
}
 800e128:	4618      	mov	r0, r3
 800e12a:	3710      	adds	r7, #16
 800e12c:	46bd      	mov	sp, r7
 800e12e:	bd80      	pop	{r7, pc}
 800e130:	08026958 	.word	0x08026958

0800e134 <CheckToSendReplyorNot>:

void CheckToSendReplyorNot(void)
{
 800e134:	b480      	push	{r7}
 800e136:	b083      	sub	sp, #12
 800e138:	af00      	add	r7, sp, #0
	uint8_t Value = 0;
 800e13a:	2300      	movs	r3, #0
 800e13c:	71fb      	strb	r3, [r7, #7]

	if(Tx_Siemens_self_sharing_st.MesgReceived == RECEIVED)
 800e13e:	4b1a      	ldr	r3, [pc, #104]	; (800e1a8 <CheckToSendReplyorNot+0x74>)
 800e140:	785b      	ldrb	r3, [r3, #1]
 800e142:	2b01      	cmp	r3, #1
 800e144:	d104      	bne.n	800e150 <CheckToSendReplyorNot+0x1c>
	{
		SET_BIT_USER(0,Value);
 800e146:	79fb      	ldrb	r3, [r7, #7]
 800e148:	f043 0301 	orr.w	r3, r3, #1
 800e14c:	71fb      	strb	r3, [r7, #7]
 800e14e:	e003      	b.n	800e158 <CheckToSendReplyorNot+0x24>
	}
	else
	{
		CLEAR_BIT_USER(0,Value);
 800e150:	79fb      	ldrb	r3, [r7, #7]
 800e152:	f023 0301 	bic.w	r3, r3, #1
 800e156:	71fb      	strb	r3, [r7, #7]
	}
	if(Rx_Siemens_self_sharing_st.MesgReceived == RECEIVED)
 800e158:	4b14      	ldr	r3, [pc, #80]	; (800e1ac <CheckToSendReplyorNot+0x78>)
 800e15a:	785b      	ldrb	r3, [r3, #1]
 800e15c:	2b01      	cmp	r3, #1
 800e15e:	d104      	bne.n	800e16a <CheckToSendReplyorNot+0x36>
	{
		SET_BIT_USER(1,Value);
 800e160:	79fb      	ldrb	r3, [r7, #7]
 800e162:	f043 0302 	orr.w	r3, r3, #2
 800e166:	71fb      	strb	r3, [r7, #7]
 800e168:	e003      	b.n	800e172 <CheckToSendReplyorNot+0x3e>
	}
	else
	{
		CLEAR_BIT_USER(1,Value);
 800e16a:	79fb      	ldrb	r3, [r7, #7]
 800e16c:	f023 0302 	bic.w	r3, r3, #2
 800e170:	71fb      	strb	r3, [r7, #7]
	}

	//	printf("Value:%u\n",Value);

	switch(Value)
 800e172:	79fb      	ldrb	r3, [r7, #7]
 800e174:	2b02      	cmp	r3, #2
 800e176:	dc02      	bgt.n	800e17e <CheckToSendReplyorNot+0x4a>
 800e178:	2b00      	cmp	r3, #0
 800e17a:	da03      	bge.n	800e184 <CheckToSendReplyorNot+0x50>
 800e17c:	e00a      	b.n	800e194 <CheckToSendReplyorNot+0x60>
 800e17e:	2b03      	cmp	r3, #3
 800e180:	d004      	beq.n	800e18c <CheckToSendReplyorNot+0x58>
 800e182:	e007      	b.n	800e194 <CheckToSendReplyorNot+0x60>
	{
	case ZERO:
	case ONE:
	case TWO:
		SendReply = 1;
 800e184:	4b0a      	ldr	r3, [pc, #40]	; (800e1b0 <CheckToSendReplyorNot+0x7c>)
 800e186:	2201      	movs	r2, #1
 800e188:	701a      	strb	r2, [r3, #0]
		break;
 800e18a:	e007      	b.n	800e19c <CheckToSendReplyorNot+0x68>
	case THREE:
#ifdef EI_1
		SendReply = 1;
 800e18c:	4b08      	ldr	r3, [pc, #32]	; (800e1b0 <CheckToSendReplyorNot+0x7c>)
 800e18e:	2201      	movs	r2, #1
 800e190:	701a      	strb	r2, [r3, #0]
#endif
#ifdef EI_2
		SendReply = 0;
#endif
		break;
 800e192:	e003      	b.n	800e19c <CheckToSendReplyorNot+0x68>
	default:
		SendReply = 1;
 800e194:	4b06      	ldr	r3, [pc, #24]	; (800e1b0 <CheckToSendReplyorNot+0x7c>)
 800e196:	2201      	movs	r2, #1
 800e198:	701a      	strb	r2, [r3, #0]
		break;
 800e19a:	bf00      	nop
	}

}
 800e19c:	bf00      	nop
 800e19e:	370c      	adds	r7, #12
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a6:	4770      	bx	lr
 800e1a8:	2000352c 	.word	0x2000352c
 800e1ac:	20003530 	.word	0x20003530
 800e1b0:	20004c4d 	.word	0x20004c4d

0800e1b4 <PrintSignals>:



void PrintSignals(void)
{
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	b082      	sub	sp, #8
 800e1b8:	af00      	add	r7, sp, #0
	memcpy(&VitalData2MIE_st.Relays,&SiemensMain_Relays_st.Relays,SiemensMain_Relays_st.NoofDataBytes);
 800e1ba:	4b2d      	ldr	r3, [pc, #180]	; (800e270 <PrintSignals+0xbc>)
 800e1bc:	881b      	ldrh	r3, [r3, #0]
 800e1be:	461a      	mov	r2, r3
 800e1c0:	492c      	ldr	r1, [pc, #176]	; (800e274 <PrintSignals+0xc0>)
 800e1c2:	482d      	ldr	r0, [pc, #180]	; (800e278 <PrintSignals+0xc4>)
 800e1c4:	f014 fb8a 	bl	80228dc <memcpy>

	for(uint16_t Traverser = 1;Traverser<=(VitalData2MIE_st.NoofDataBytes * 8);++Traverser)
 800e1c8:	2301      	movs	r3, #1
 800e1ca:	80fb      	strh	r3, [r7, #6]
 800e1cc:	e045      	b.n	800e25a <PrintSignals+0xa6>
	{
		if(Traverser > TotalSigCount)
 800e1ce:	4b2b      	ldr	r3, [pc, #172]	; (800e27c <PrintSignals+0xc8>)
 800e1d0:	881b      	ldrh	r3, [r3, #0]
 800e1d2:	88fa      	ldrh	r2, [r7, #6]
 800e1d4:	429a      	cmp	r2, r3
 800e1d6:	d83c      	bhi.n	800e252 <PrintSignals+0x9e>
		{
			continue;
		}

		if(GETPIN(Traverser) > 0)
 800e1d8:	88fb      	ldrh	r3, [r7, #6]
 800e1da:	3b01      	subs	r3, #1
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	da00      	bge.n	800e1e2 <PrintSignals+0x2e>
 800e1e0:	3307      	adds	r3, #7
 800e1e2:	10db      	asrs	r3, r3, #3
 800e1e4:	461a      	mov	r2, r3
 800e1e6:	4b26      	ldr	r3, [pc, #152]	; (800e280 <PrintSignals+0xcc>)
 800e1e8:	4413      	add	r3, r2
 800e1ea:	789b      	ldrb	r3, [r3, #2]
 800e1ec:	4619      	mov	r1, r3
 800e1ee:	88fb      	ldrh	r3, [r7, #6]
 800e1f0:	3b01      	subs	r3, #1
 800e1f2:	425a      	negs	r2, r3
 800e1f4:	f003 0307 	and.w	r3, r3, #7
 800e1f8:	f002 0207 	and.w	r2, r2, #7
 800e1fc:	bf58      	it	pl
 800e1fe:	4253      	negpl	r3, r2
 800e200:	2201      	movs	r2, #1
 800e202:	fa02 f303 	lsl.w	r3, r2, r3
 800e206:	400b      	ands	r3, r1
 800e208:	2b00      	cmp	r3, #0
 800e20a:	dd0c      	ble.n	800e226 <PrintSignals+0x72>
		{
			printf("%15s:PICKUP   ",Signals[Traverser-1]);
 800e20c:	88fb      	ldrh	r3, [r7, #6]
 800e20e:	1e5a      	subs	r2, r3, #1
 800e210:	4613      	mov	r3, r2
 800e212:	009b      	lsls	r3, r3, #2
 800e214:	4413      	add	r3, r2
 800e216:	00db      	lsls	r3, r3, #3
 800e218:	4a1a      	ldr	r2, [pc, #104]	; (800e284 <PrintSignals+0xd0>)
 800e21a:	4413      	add	r3, r2
 800e21c:	4619      	mov	r1, r3
 800e21e:	481a      	ldr	r0, [pc, #104]	; (800e288 <PrintSignals+0xd4>)
 800e220:	f014 fc6c 	bl	8022afc <iprintf>
 800e224:	e00b      	b.n	800e23e <PrintSignals+0x8a>
		}
		else
		{
			printf("%15s:DROP      ",Signals[Traverser-1]);
 800e226:	88fb      	ldrh	r3, [r7, #6]
 800e228:	1e5a      	subs	r2, r3, #1
 800e22a:	4613      	mov	r3, r2
 800e22c:	009b      	lsls	r3, r3, #2
 800e22e:	4413      	add	r3, r2
 800e230:	00db      	lsls	r3, r3, #3
 800e232:	4a14      	ldr	r2, [pc, #80]	; (800e284 <PrintSignals+0xd0>)
 800e234:	4413      	add	r3, r2
 800e236:	4619      	mov	r1, r3
 800e238:	4814      	ldr	r0, [pc, #80]	; (800e28c <PrintSignals+0xd8>)
 800e23a:	f014 fc5f 	bl	8022afc <iprintf>
		}

		if( (Traverser%2) == 0)
 800e23e:	88fb      	ldrh	r3, [r7, #6]
 800e240:	f003 0301 	and.w	r3, r3, #1
 800e244:	b29b      	uxth	r3, r3
 800e246:	2b00      	cmp	r3, #0
 800e248:	d104      	bne.n	800e254 <PrintSignals+0xa0>
		{
			printf("\n");
 800e24a:	200a      	movs	r0, #10
 800e24c:	f014 fc6e 	bl	8022b2c <putchar>
 800e250:	e000      	b.n	800e254 <PrintSignals+0xa0>
			continue;
 800e252:	bf00      	nop
	for(uint16_t Traverser = 1;Traverser<=(VitalData2MIE_st.NoofDataBytes * 8);++Traverser)
 800e254:	88fb      	ldrh	r3, [r7, #6]
 800e256:	3301      	adds	r3, #1
 800e258:	80fb      	strh	r3, [r7, #6]
 800e25a:	88fa      	ldrh	r2, [r7, #6]
 800e25c:	4b08      	ldr	r3, [pc, #32]	; (800e280 <PrintSignals+0xcc>)
 800e25e:	881b      	ldrh	r3, [r3, #0]
 800e260:	00db      	lsls	r3, r3, #3
 800e262:	429a      	cmp	r2, r3
 800e264:	ddb3      	ble.n	800e1ce <PrintSignals+0x1a>
		}
	}
}
 800e266:	bf00      	nop
 800e268:	bf00      	nop
 800e26a:	3708      	adds	r7, #8
 800e26c:	46bd      	mov	sp, r7
 800e26e:	bd80      	pop	{r7, pc}
 800e270:	20003758 	.word	0x20003758
 800e274:	2000375c 	.word	0x2000375c
 800e278:	20003556 	.word	0x20003556
 800e27c:	20004860 	.word	0x20004860
 800e280:	20003554 	.word	0x20003554
 800e284:	20003d70 	.word	0x20003d70
 800e288:	08026990 	.word	0x08026990
 800e28c:	080269a0 	.word	0x080269a0

0800e290 <GetTimeStamp>:

void GetTimeStamp(void)
{
 800e290:	b580      	push	{r7, lr}
 800e292:	b084      	sub	sp, #16
 800e294:	af00      	add	r7, sp, #0
	uint32_t TimeFrame = 0;
 800e296:	2300      	movs	r3, #0
 800e298:	60fb      	str	r3, [r7, #12]
	static uint32_t PrevTimeFrame = 0;
	uint32_t TimeStamp = 0;
 800e29a:	2300      	movs	r3, #0
 800e29c:	60bb      	str	r3, [r7, #8]
	static 	uint32_t PrevTimeStamp = 0;
	static uint32_t TickswhenTimeChanged = 0;
	uint32_t ElapsTicksAfterTimeChange = 0;
 800e29e:	2300      	movs	r3, #0
 800e2a0:	607b      	str	r3, [r7, #4]

	Get_time();
 800e2a2:	f7fd f9ab 	bl	800b5fc <Get_time>
	TimeFrame = (((RTC_Date_time_Dec_st.Hour * 3600) +(RTC_Date_time_Dec_st.Mins * 60) + (RTC_Date_time_Dec_st.Secs)));
 800e2a6:	4b21      	ldr	r3, [pc, #132]	; (800e32c <GetTimeStamp+0x9c>)
 800e2a8:	781b      	ldrb	r3, [r3, #0]
 800e2aa:	461a      	mov	r2, r3
 800e2ac:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800e2b0:	fb03 f202 	mul.w	r2, r3, r2
 800e2b4:	4b1d      	ldr	r3, [pc, #116]	; (800e32c <GetTimeStamp+0x9c>)
 800e2b6:	785b      	ldrb	r3, [r3, #1]
 800e2b8:	4619      	mov	r1, r3
 800e2ba:	460b      	mov	r3, r1
 800e2bc:	011b      	lsls	r3, r3, #4
 800e2be:	1a5b      	subs	r3, r3, r1
 800e2c0:	009b      	lsls	r3, r3, #2
 800e2c2:	4413      	add	r3, r2
 800e2c4:	4a19      	ldr	r2, [pc, #100]	; (800e32c <GetTimeStamp+0x9c>)
 800e2c6:	7892      	ldrb	r2, [r2, #2]
 800e2c8:	4413      	add	r3, r2
 800e2ca:	60fb      	str	r3, [r7, #12]

	if(TimeFrame != PrevTimeFrame)
 800e2cc:	4b18      	ldr	r3, [pc, #96]	; (800e330 <GetTimeStamp+0xa0>)
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	68fa      	ldr	r2, [r7, #12]
 800e2d2:	429a      	cmp	r2, r3
 800e2d4:	d007      	beq.n	800e2e6 <GetTimeStamp+0x56>
	{
		PrevTimeFrame = TimeFrame;
 800e2d6:	4a16      	ldr	r2, [pc, #88]	; (800e330 <GetTimeStamp+0xa0>)
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	6013      	str	r3, [r2, #0]
		TickswhenTimeChanged = HAL_GetTick();
 800e2dc:	f007 fc04 	bl	8015ae8 <HAL_GetTick>
 800e2e0:	4603      	mov	r3, r0
 800e2e2:	4a14      	ldr	r2, [pc, #80]	; (800e334 <GetTimeStamp+0xa4>)
 800e2e4:	6013      	str	r3, [r2, #0]
	}

	ElapsTicksAfterTimeChange = HAL_Elaps_Ticks(TickswhenTimeChanged);
 800e2e6:	4b13      	ldr	r3, [pc, #76]	; (800e334 <GetTimeStamp+0xa4>)
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	f000 fe12 	bl	800ef14 <HAL_Elaps_Ticks>
 800e2f0:	6078      	str	r0, [r7, #4]

	TimeStamp  = (TimeFrame * 10) + (ElapsTicksAfterTimeChange/100);
 800e2f2:	68fa      	ldr	r2, [r7, #12]
 800e2f4:	4613      	mov	r3, r2
 800e2f6:	009b      	lsls	r3, r3, #2
 800e2f8:	4413      	add	r3, r2
 800e2fa:	005b      	lsls	r3, r3, #1
 800e2fc:	4619      	mov	r1, r3
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	4a0d      	ldr	r2, [pc, #52]	; (800e338 <GetTimeStamp+0xa8>)
 800e302:	fba2 2303 	umull	r2, r3, r2, r3
 800e306:	095b      	lsrs	r3, r3, #5
 800e308:	440b      	add	r3, r1
 800e30a:	60bb      	str	r3, [r7, #8]
	if(TimeStamp != PrevTimeStamp)
 800e30c:	4b0b      	ldr	r3, [pc, #44]	; (800e33c <GetTimeStamp+0xac>)
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	68ba      	ldr	r2, [r7, #8]
 800e312:	429a      	cmp	r2, r3
 800e314:	d005      	beq.n	800e322 <GetTimeStamp+0x92>
	{
		PrevTimeStamp = TimeStamp;
 800e316:	4a09      	ldr	r2, [pc, #36]	; (800e33c <GetTimeStamp+0xac>)
 800e318:	68bb      	ldr	r3, [r7, #8]
 800e31a:	6013      	str	r3, [r2, #0]
		SelfTimeStamp = TimeStamp;
 800e31c:	4a08      	ldr	r2, [pc, #32]	; (800e340 <GetTimeStamp+0xb0>)
 800e31e:	68bb      	ldr	r3, [r7, #8]
 800e320:	6013      	str	r3, [r2, #0]
		//		printf("Ticks:%lu|ms:%lu|%lu\n",HAL_GetTick(),	TimeStamp,(ElapsTicksAfterTimeChange));
	}
}
 800e322:	bf00      	nop
 800e324:	3710      	adds	r7, #16
 800e326:	46bd      	mov	sp, r7
 800e328:	bd80      	pop	{r7, pc}
 800e32a:	bf00      	nop
 800e32c:	20002894 	.word	0x20002894
 800e330:	20004c54 	.word	0x20004c54
 800e334:	20004c58 	.word	0x20004c58
 800e338:	51eb851f 	.word	0x51eb851f
 800e33c:	20004c5c 	.word	0x20004c5c
 800e340:	20003d6c 	.word	0x20003d6c

0800e344 <UpdateSIGNALSNames>:


void UpdateSIGNALSNames(void)
{
 800e344:	b490      	push	{r4, r7}
 800e346:	b082      	sub	sp, #8
 800e348:	af00      	add	r7, sp, #0
	uint8_t Signals_Cnt = 0;
 800e34a:	2300      	movs	r3, #0
 800e34c:	71fb      	strb	r3, [r7, #7]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"CLTPR");
 800e34e:	79fb      	ldrb	r3, [r7, #7]
 800e350:	1c5a      	adds	r2, r3, #1
 800e352:	71fa      	strb	r2, [r7, #7]
 800e354:	461a      	mov	r2, r3
 800e356:	4613      	mov	r3, r2
 800e358:	009b      	lsls	r3, r3, #2
 800e35a:	4413      	add	r3, r2
 800e35c:	00db      	lsls	r3, r3, #3
 800e35e:	4acd      	ldr	r2, [pc, #820]	; (800e694 <UpdateSIGNALSNames+0x350>)
 800e360:	4413      	add	r3, r2
 800e362:	4acd      	ldr	r2, [pc, #820]	; (800e698 <UpdateSIGNALSNames+0x354>)
 800e364:	6810      	ldr	r0, [r2, #0]
 800e366:	6018      	str	r0, [r3, #0]
 800e368:	8892      	ldrh	r2, [r2, #4]
 800e36a:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"DMTPR");
 800e36c:	79fb      	ldrb	r3, [r7, #7]
 800e36e:	1c5a      	adds	r2, r3, #1
 800e370:	71fa      	strb	r2, [r7, #7]
 800e372:	461a      	mov	r2, r3
 800e374:	4613      	mov	r3, r2
 800e376:	009b      	lsls	r3, r3, #2
 800e378:	4413      	add	r3, r2
 800e37a:	00db      	lsls	r3, r3, #3
 800e37c:	4ac5      	ldr	r2, [pc, #788]	; (800e694 <UpdateSIGNALSNames+0x350>)
 800e37e:	4413      	add	r3, r2
 800e380:	4ac6      	ldr	r2, [pc, #792]	; (800e69c <UpdateSIGNALSNames+0x358>)
 800e382:	6810      	ldr	r0, [r2, #0]
 800e384:	6018      	str	r0, [r3, #0]
 800e386:	8892      	ldrh	r2, [r2, #4]
 800e388:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"UMTPR");
 800e38a:	79fb      	ldrb	r3, [r7, #7]
 800e38c:	1c5a      	adds	r2, r3, #1
 800e38e:	71fa      	strb	r2, [r7, #7]
 800e390:	461a      	mov	r2, r3
 800e392:	4613      	mov	r3, r2
 800e394:	009b      	lsls	r3, r3, #2
 800e396:	4413      	add	r3, r2
 800e398:	00db      	lsls	r3, r3, #3
 800e39a:	4abe      	ldr	r2, [pc, #760]	; (800e694 <UpdateSIGNALSNames+0x350>)
 800e39c:	4413      	add	r3, r2
 800e39e:	4ac0      	ldr	r2, [pc, #768]	; (800e6a0 <UpdateSIGNALSNames+0x35c>)
 800e3a0:	6810      	ldr	r0, [r2, #0]
 800e3a2:	6018      	str	r0, [r3, #0]
 800e3a4:	8892      	ldrh	r2, [r2, #4]
 800e3a6:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"ULTPR");
 800e3a8:	79fb      	ldrb	r3, [r7, #7]
 800e3aa:	1c5a      	adds	r2, r3, #1
 800e3ac:	71fa      	strb	r2, [r7, #7]
 800e3ae:	461a      	mov	r2, r3
 800e3b0:	4613      	mov	r3, r2
 800e3b2:	009b      	lsls	r3, r3, #2
 800e3b4:	4413      	add	r3, r2
 800e3b6:	00db      	lsls	r3, r3, #3
 800e3b8:	4ab6      	ldr	r2, [pc, #728]	; (800e694 <UpdateSIGNALSNames+0x350>)
 800e3ba:	4413      	add	r3, r2
 800e3bc:	4ab9      	ldr	r2, [pc, #740]	; (800e6a4 <UpdateSIGNALSNames+0x360>)
 800e3be:	6810      	ldr	r0, [r2, #0]
 800e3c0:	6018      	str	r0, [r3, #0]
 800e3c2:	8892      	ldrh	r2, [r2, #4]
 800e3c4:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"1ATPR");
 800e3c6:	79fb      	ldrb	r3, [r7, #7]
 800e3c8:	1c5a      	adds	r2, r3, #1
 800e3ca:	71fa      	strb	r2, [r7, #7]
 800e3cc:	461a      	mov	r2, r3
 800e3ce:	4613      	mov	r3, r2
 800e3d0:	009b      	lsls	r3, r3, #2
 800e3d2:	4413      	add	r3, r2
 800e3d4:	00db      	lsls	r3, r3, #3
 800e3d6:	4aaf      	ldr	r2, [pc, #700]	; (800e694 <UpdateSIGNALSNames+0x350>)
 800e3d8:	4413      	add	r3, r2
 800e3da:	4ab3      	ldr	r2, [pc, #716]	; (800e6a8 <UpdateSIGNALSNames+0x364>)
 800e3dc:	6810      	ldr	r0, [r2, #0]
 800e3de:	6018      	str	r0, [r3, #0]
 800e3e0:	8892      	ldrh	r2, [r2, #4]
 800e3e2:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"30ATPR");
 800e3e4:	79fb      	ldrb	r3, [r7, #7]
 800e3e6:	1c5a      	adds	r2, r3, #1
 800e3e8:	71fa      	strb	r2, [r7, #7]
 800e3ea:	461a      	mov	r2, r3
 800e3ec:	4613      	mov	r3, r2
 800e3ee:	009b      	lsls	r3, r3, #2
 800e3f0:	4413      	add	r3, r2
 800e3f2:	00db      	lsls	r3, r3, #3
 800e3f4:	4aa7      	ldr	r2, [pc, #668]	; (800e694 <UpdateSIGNALSNames+0x350>)
 800e3f6:	4413      	add	r3, r2
 800e3f8:	4aac      	ldr	r2, [pc, #688]	; (800e6ac <UpdateSIGNALSNames+0x368>)
 800e3fa:	6810      	ldr	r0, [r2, #0]
 800e3fc:	6018      	str	r0, [r3, #0]
 800e3fe:	8891      	ldrh	r1, [r2, #4]
 800e400:	7992      	ldrb	r2, [r2, #6]
 800e402:	8099      	strh	r1, [r3, #4]
 800e404:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"3_4TPR");
 800e406:	79fb      	ldrb	r3, [r7, #7]
 800e408:	1c5a      	adds	r2, r3, #1
 800e40a:	71fa      	strb	r2, [r7, #7]
 800e40c:	461a      	mov	r2, r3
 800e40e:	4613      	mov	r3, r2
 800e410:	009b      	lsls	r3, r3, #2
 800e412:	4413      	add	r3, r2
 800e414:	00db      	lsls	r3, r3, #3
 800e416:	4a9f      	ldr	r2, [pc, #636]	; (800e694 <UpdateSIGNALSNames+0x350>)
 800e418:	4413      	add	r3, r2
 800e41a:	4aa5      	ldr	r2, [pc, #660]	; (800e6b0 <UpdateSIGNALSNames+0x36c>)
 800e41c:	6810      	ldr	r0, [r2, #0]
 800e41e:	6018      	str	r0, [r3, #0]
 800e420:	8891      	ldrh	r1, [r2, #4]
 800e422:	7992      	ldrb	r2, [r2, #6]
 800e424:	8099      	strh	r1, [r3, #4]
 800e426:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"6TPR");
 800e428:	79fb      	ldrb	r3, [r7, #7]
 800e42a:	1c5a      	adds	r2, r3, #1
 800e42c:	71fa      	strb	r2, [r7, #7]
 800e42e:	461a      	mov	r2, r3
 800e430:	4613      	mov	r3, r2
 800e432:	009b      	lsls	r3, r3, #2
 800e434:	4413      	add	r3, r2
 800e436:	00db      	lsls	r3, r3, #3
 800e438:	4a96      	ldr	r2, [pc, #600]	; (800e694 <UpdateSIGNALSNames+0x350>)
 800e43a:	4413      	add	r3, r2
 800e43c:	4a9d      	ldr	r2, [pc, #628]	; (800e6b4 <UpdateSIGNALSNames+0x370>)
 800e43e:	6810      	ldr	r0, [r2, #0]
 800e440:	6018      	str	r0, [r3, #0]
 800e442:	7912      	ldrb	r2, [r2, #4]
 800e444:	711a      	strb	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"26_28TPR");
 800e446:	79fb      	ldrb	r3, [r7, #7]
 800e448:	1c5a      	adds	r2, r3, #1
 800e44a:	71fa      	strb	r2, [r7, #7]
 800e44c:	461a      	mov	r2, r3
 800e44e:	4613      	mov	r3, r2
 800e450:	009b      	lsls	r3, r3, #2
 800e452:	4413      	add	r3, r2
 800e454:	00db      	lsls	r3, r3, #3
 800e456:	4a8f      	ldr	r2, [pc, #572]	; (800e694 <UpdateSIGNALSNames+0x350>)
 800e458:	4413      	add	r3, r2
 800e45a:	4997      	ldr	r1, [pc, #604]	; (800e6b8 <UpdateSIGNALSNames+0x374>)
 800e45c:	461a      	mov	r2, r3
 800e45e:	460b      	mov	r3, r1
 800e460:	cb03      	ldmia	r3!, {r0, r1}
 800e462:	6010      	str	r0, [r2, #0]
 800e464:	6051      	str	r1, [r2, #4]
 800e466:	781b      	ldrb	r3, [r3, #0]
 800e468:	7213      	strb	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"25TPR");
 800e46a:	79fb      	ldrb	r3, [r7, #7]
 800e46c:	1c5a      	adds	r2, r3, #1
 800e46e:	71fa      	strb	r2, [r7, #7]
 800e470:	461a      	mov	r2, r3
 800e472:	4613      	mov	r3, r2
 800e474:	009b      	lsls	r3, r3, #2
 800e476:	4413      	add	r3, r2
 800e478:	00db      	lsls	r3, r3, #3
 800e47a:	4a86      	ldr	r2, [pc, #536]	; (800e694 <UpdateSIGNALSNames+0x350>)
 800e47c:	4413      	add	r3, r2
 800e47e:	4a8f      	ldr	r2, [pc, #572]	; (800e6bc <UpdateSIGNALSNames+0x378>)
 800e480:	6810      	ldr	r0, [r2, #0]
 800e482:	6018      	str	r0, [r3, #0]
 800e484:	8892      	ldrh	r2, [r2, #4]
 800e486:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D1_DECR");
 800e488:	79fb      	ldrb	r3, [r7, #7]
 800e48a:	1c5a      	adds	r2, r3, #1
 800e48c:	71fa      	strb	r2, [r7, #7]
 800e48e:	461a      	mov	r2, r3
 800e490:	4613      	mov	r3, r2
 800e492:	009b      	lsls	r3, r3, #2
 800e494:	4413      	add	r3, r2
 800e496:	00db      	lsls	r3, r3, #3
 800e498:	4a7e      	ldr	r2, [pc, #504]	; (800e694 <UpdateSIGNALSNames+0x350>)
 800e49a:	4413      	add	r3, r2
 800e49c:	4988      	ldr	r1, [pc, #544]	; (800e6c0 <UpdateSIGNALSNames+0x37c>)
 800e49e:	461a      	mov	r2, r3
 800e4a0:	460b      	mov	r3, r1
 800e4a2:	cb03      	ldmia	r3!, {r0, r1}
 800e4a4:	6010      	str	r0, [r2, #0]
 800e4a6:	6051      	str	r1, [r2, #4]
 800e4a8:	881b      	ldrh	r3, [r3, #0]
 800e4aa:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D1_HHECR");
 800e4ac:	79fb      	ldrb	r3, [r7, #7]
 800e4ae:	1c5a      	adds	r2, r3, #1
 800e4b0:	71fa      	strb	r2, [r7, #7]
 800e4b2:	461a      	mov	r2, r3
 800e4b4:	4613      	mov	r3, r2
 800e4b6:	009b      	lsls	r3, r3, #2
 800e4b8:	4413      	add	r3, r2
 800e4ba:	00db      	lsls	r3, r3, #3
 800e4bc:	4a75      	ldr	r2, [pc, #468]	; (800e694 <UpdateSIGNALSNames+0x350>)
 800e4be:	4413      	add	r3, r2
 800e4c0:	4980      	ldr	r1, [pc, #512]	; (800e6c4 <UpdateSIGNALSNames+0x380>)
 800e4c2:	461a      	mov	r2, r3
 800e4c4:	460b      	mov	r3, r1
 800e4c6:	cb03      	ldmia	r3!, {r0, r1}
 800e4c8:	6010      	str	r0, [r2, #0]
 800e4ca:	6051      	str	r1, [r2, #4]
 800e4cc:	8819      	ldrh	r1, [r3, #0]
 800e4ce:	789b      	ldrb	r3, [r3, #2]
 800e4d0:	8111      	strh	r1, [r2, #8]
 800e4d2:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D1_HECR");
 800e4d4:	79fb      	ldrb	r3, [r7, #7]
 800e4d6:	1c5a      	adds	r2, r3, #1
 800e4d8:	71fa      	strb	r2, [r7, #7]
 800e4da:	461a      	mov	r2, r3
 800e4dc:	4613      	mov	r3, r2
 800e4de:	009b      	lsls	r3, r3, #2
 800e4e0:	4413      	add	r3, r2
 800e4e2:	00db      	lsls	r3, r3, #3
 800e4e4:	4a6b      	ldr	r2, [pc, #428]	; (800e694 <UpdateSIGNALSNames+0x350>)
 800e4e6:	4413      	add	r3, r2
 800e4e8:	4977      	ldr	r1, [pc, #476]	; (800e6c8 <UpdateSIGNALSNames+0x384>)
 800e4ea:	461a      	mov	r2, r3
 800e4ec:	460b      	mov	r3, r1
 800e4ee:	cb03      	ldmia	r3!, {r0, r1}
 800e4f0:	6010      	str	r0, [r2, #0]
 800e4f2:	6051      	str	r1, [r2, #4]
 800e4f4:	881b      	ldrh	r3, [r3, #0]
 800e4f6:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D2_DECR");
 800e4f8:	79fb      	ldrb	r3, [r7, #7]
 800e4fa:	1c5a      	adds	r2, r3, #1
 800e4fc:	71fa      	strb	r2, [r7, #7]
 800e4fe:	461a      	mov	r2, r3
 800e500:	4613      	mov	r3, r2
 800e502:	009b      	lsls	r3, r3, #2
 800e504:	4413      	add	r3, r2
 800e506:	00db      	lsls	r3, r3, #3
 800e508:	4a62      	ldr	r2, [pc, #392]	; (800e694 <UpdateSIGNALSNames+0x350>)
 800e50a:	4413      	add	r3, r2
 800e50c:	496f      	ldr	r1, [pc, #444]	; (800e6cc <UpdateSIGNALSNames+0x388>)
 800e50e:	461a      	mov	r2, r3
 800e510:	460b      	mov	r3, r1
 800e512:	cb03      	ldmia	r3!, {r0, r1}
 800e514:	6010      	str	r0, [r2, #0]
 800e516:	6051      	str	r1, [r2, #4]
 800e518:	881b      	ldrh	r3, [r3, #0]
 800e51a:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D2_HHECR");
 800e51c:	79fb      	ldrb	r3, [r7, #7]
 800e51e:	1c5a      	adds	r2, r3, #1
 800e520:	71fa      	strb	r2, [r7, #7]
 800e522:	461a      	mov	r2, r3
 800e524:	4613      	mov	r3, r2
 800e526:	009b      	lsls	r3, r3, #2
 800e528:	4413      	add	r3, r2
 800e52a:	00db      	lsls	r3, r3, #3
 800e52c:	4a59      	ldr	r2, [pc, #356]	; (800e694 <UpdateSIGNALSNames+0x350>)
 800e52e:	4413      	add	r3, r2
 800e530:	4967      	ldr	r1, [pc, #412]	; (800e6d0 <UpdateSIGNALSNames+0x38c>)
 800e532:	461a      	mov	r2, r3
 800e534:	460b      	mov	r3, r1
 800e536:	cb03      	ldmia	r3!, {r0, r1}
 800e538:	6010      	str	r0, [r2, #0]
 800e53a:	6051      	str	r1, [r2, #4]
 800e53c:	8819      	ldrh	r1, [r3, #0]
 800e53e:	789b      	ldrb	r3, [r3, #2]
 800e540:	8111      	strh	r1, [r2, #8]
 800e542:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D2_HECR");
 800e544:	79fb      	ldrb	r3, [r7, #7]
 800e546:	1c5a      	adds	r2, r3, #1
 800e548:	71fa      	strb	r2, [r7, #7]
 800e54a:	461a      	mov	r2, r3
 800e54c:	4613      	mov	r3, r2
 800e54e:	009b      	lsls	r3, r3, #2
 800e550:	4413      	add	r3, r2
 800e552:	00db      	lsls	r3, r3, #3
 800e554:	4a4f      	ldr	r2, [pc, #316]	; (800e694 <UpdateSIGNALSNames+0x350>)
 800e556:	4413      	add	r3, r2
 800e558:	495e      	ldr	r1, [pc, #376]	; (800e6d4 <UpdateSIGNALSNames+0x390>)
 800e55a:	461a      	mov	r2, r3
 800e55c:	460b      	mov	r3, r1
 800e55e:	cb03      	ldmia	r3!, {r0, r1}
 800e560:	6010      	str	r0, [r2, #0]
 800e562:	6051      	str	r1, [r2, #4]
 800e564:	881b      	ldrh	r3, [r3, #0]
 800e566:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1DECR");
 800e568:	79fb      	ldrb	r3, [r7, #7]
 800e56a:	1c5a      	adds	r2, r3, #1
 800e56c:	71fa      	strb	r2, [r7, #7]
 800e56e:	461a      	mov	r2, r3
 800e570:	4613      	mov	r3, r2
 800e572:	009b      	lsls	r3, r3, #2
 800e574:	4413      	add	r3, r2
 800e576:	00db      	lsls	r3, r3, #3
 800e578:	4a46      	ldr	r2, [pc, #280]	; (800e694 <UpdateSIGNALSNames+0x350>)
 800e57a:	4413      	add	r3, r2
 800e57c:	4a56      	ldr	r2, [pc, #344]	; (800e6d8 <UpdateSIGNALSNames+0x394>)
 800e57e:	6810      	ldr	r0, [r2, #0]
 800e580:	6018      	str	r0, [r3, #0]
 800e582:	8891      	ldrh	r1, [r2, #4]
 800e584:	7992      	ldrb	r2, [r2, #6]
 800e586:	8099      	strh	r1, [r3, #4]
 800e588:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1HECR");
 800e58a:	79fb      	ldrb	r3, [r7, #7]
 800e58c:	1c5a      	adds	r2, r3, #1
 800e58e:	71fa      	strb	r2, [r7, #7]
 800e590:	461a      	mov	r2, r3
 800e592:	4613      	mov	r3, r2
 800e594:	009b      	lsls	r3, r3, #2
 800e596:	4413      	add	r3, r2
 800e598:	00db      	lsls	r3, r3, #3
 800e59a:	4a3e      	ldr	r2, [pc, #248]	; (800e694 <UpdateSIGNALSNames+0x350>)
 800e59c:	4413      	add	r3, r2
 800e59e:	4a4f      	ldr	r2, [pc, #316]	; (800e6dc <UpdateSIGNALSNames+0x398>)
 800e5a0:	6810      	ldr	r0, [r2, #0]
 800e5a2:	6018      	str	r0, [r3, #0]
 800e5a4:	8891      	ldrh	r1, [r2, #4]
 800e5a6:	7992      	ldrb	r2, [r2, #6]
 800e5a8:	8099      	strh	r1, [r3, #4]
 800e5aa:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1RECR");
 800e5ac:	79fb      	ldrb	r3, [r7, #7]
 800e5ae:	1c5a      	adds	r2, r3, #1
 800e5b0:	71fa      	strb	r2, [r7, #7]
 800e5b2:	461a      	mov	r2, r3
 800e5b4:	4613      	mov	r3, r2
 800e5b6:	009b      	lsls	r3, r3, #2
 800e5b8:	4413      	add	r3, r2
 800e5ba:	00db      	lsls	r3, r3, #3
 800e5bc:	4a35      	ldr	r2, [pc, #212]	; (800e694 <UpdateSIGNALSNames+0x350>)
 800e5be:	4413      	add	r3, r2
 800e5c0:	4a47      	ldr	r2, [pc, #284]	; (800e6e0 <UpdateSIGNALSNames+0x39c>)
 800e5c2:	6810      	ldr	r0, [r2, #0]
 800e5c4:	6018      	str	r0, [r3, #0]
 800e5c6:	8891      	ldrh	r1, [r2, #4]
 800e5c8:	7992      	ldrb	r2, [r2, #6]
 800e5ca:	8099      	strh	r1, [r3, #4]
 800e5cc:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1UECR");
 800e5ce:	79fb      	ldrb	r3, [r7, #7]
 800e5d0:	1c5a      	adds	r2, r3, #1
 800e5d2:	71fa      	strb	r2, [r7, #7]
 800e5d4:	461a      	mov	r2, r3
 800e5d6:	4613      	mov	r3, r2
 800e5d8:	009b      	lsls	r3, r3, #2
 800e5da:	4413      	add	r3, r2
 800e5dc:	00db      	lsls	r3, r3, #3
 800e5de:	4a2d      	ldr	r2, [pc, #180]	; (800e694 <UpdateSIGNALSNames+0x350>)
 800e5e0:	4413      	add	r3, r2
 800e5e2:	4a40      	ldr	r2, [pc, #256]	; (800e6e4 <UpdateSIGNALSNames+0x3a0>)
 800e5e4:	6810      	ldr	r0, [r2, #0]
 800e5e6:	6018      	str	r0, [r3, #0]
 800e5e8:	8891      	ldrh	r1, [r2, #4]
 800e5ea:	7992      	ldrb	r2, [r2, #6]
 800e5ec:	8099      	strh	r1, [r3, #4]
 800e5ee:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1A_COHECR");
 800e5f0:	79fb      	ldrb	r3, [r7, #7]
 800e5f2:	1c5a      	adds	r2, r3, #1
 800e5f4:	71fa      	strb	r2, [r7, #7]
 800e5f6:	461a      	mov	r2, r3
 800e5f8:	4613      	mov	r3, r2
 800e5fa:	009b      	lsls	r3, r3, #2
 800e5fc:	4413      	add	r3, r2
 800e5fe:	00db      	lsls	r3, r3, #3
 800e600:	4a24      	ldr	r2, [pc, #144]	; (800e694 <UpdateSIGNALSNames+0x350>)
 800e602:	4413      	add	r3, r2
 800e604:	4938      	ldr	r1, [pc, #224]	; (800e6e8 <UpdateSIGNALSNames+0x3a4>)
 800e606:	461a      	mov	r2, r3
 800e608:	460b      	mov	r3, r1
 800e60a:	cb03      	ldmia	r3!, {r0, r1}
 800e60c:	6010      	str	r0, [r2, #0]
 800e60e:	6051      	str	r1, [r2, #4]
 800e610:	8819      	ldrh	r1, [r3, #0]
 800e612:	789b      	ldrb	r3, [r3, #2]
 800e614:	8111      	strh	r1, [r2, #8]
 800e616:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S3DECR");
 800e618:	79fb      	ldrb	r3, [r7, #7]
 800e61a:	1c5a      	adds	r2, r3, #1
 800e61c:	71fa      	strb	r2, [r7, #7]
 800e61e:	461a      	mov	r2, r3
 800e620:	4613      	mov	r3, r2
 800e622:	009b      	lsls	r3, r3, #2
 800e624:	4413      	add	r3, r2
 800e626:	00db      	lsls	r3, r3, #3
 800e628:	4a1a      	ldr	r2, [pc, #104]	; (800e694 <UpdateSIGNALSNames+0x350>)
 800e62a:	4413      	add	r3, r2
 800e62c:	4a2f      	ldr	r2, [pc, #188]	; (800e6ec <UpdateSIGNALSNames+0x3a8>)
 800e62e:	6810      	ldr	r0, [r2, #0]
 800e630:	6018      	str	r0, [r3, #0]
 800e632:	8891      	ldrh	r1, [r2, #4]
 800e634:	7992      	ldrb	r2, [r2, #6]
 800e636:	8099      	strh	r1, [r3, #4]
 800e638:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S3HECR");
 800e63a:	79fb      	ldrb	r3, [r7, #7]
 800e63c:	1c5a      	adds	r2, r3, #1
 800e63e:	71fa      	strb	r2, [r7, #7]
 800e640:	461a      	mov	r2, r3
 800e642:	4613      	mov	r3, r2
 800e644:	009b      	lsls	r3, r3, #2
 800e646:	4413      	add	r3, r2
 800e648:	00db      	lsls	r3, r3, #3
 800e64a:	4a12      	ldr	r2, [pc, #72]	; (800e694 <UpdateSIGNALSNames+0x350>)
 800e64c:	4413      	add	r3, r2
 800e64e:	4a28      	ldr	r2, [pc, #160]	; (800e6f0 <UpdateSIGNALSNames+0x3ac>)
 800e650:	6810      	ldr	r0, [r2, #0]
 800e652:	6018      	str	r0, [r3, #0]
 800e654:	8891      	ldrh	r1, [r2, #4]
 800e656:	7992      	ldrb	r2, [r2, #6]
 800e658:	8099      	strh	r1, [r3, #4]
 800e65a:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S3RECR");
 800e65c:	79fb      	ldrb	r3, [r7, #7]
 800e65e:	1c5a      	adds	r2, r3, #1
 800e660:	71fa      	strb	r2, [r7, #7]
 800e662:	461a      	mov	r2, r3
 800e664:	4613      	mov	r3, r2
 800e666:	009b      	lsls	r3, r3, #2
 800e668:	4413      	add	r3, r2
 800e66a:	00db      	lsls	r3, r3, #3
 800e66c:	4a09      	ldr	r2, [pc, #36]	; (800e694 <UpdateSIGNALSNames+0x350>)
 800e66e:	4413      	add	r3, r2
 800e670:	4a20      	ldr	r2, [pc, #128]	; (800e6f4 <UpdateSIGNALSNames+0x3b0>)
 800e672:	6810      	ldr	r0, [r2, #0]
 800e674:	6018      	str	r0, [r3, #0]
 800e676:	8891      	ldrh	r1, [r2, #4]
 800e678:	7992      	ldrb	r2, [r2, #6]
 800e67a:	8099      	strh	r1, [r3, #4]
 800e67c:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S4HECR");
 800e67e:	79fb      	ldrb	r3, [r7, #7]
 800e680:	1c5a      	adds	r2, r3, #1
 800e682:	71fa      	strb	r2, [r7, #7]
 800e684:	461a      	mov	r2, r3
 800e686:	4613      	mov	r3, r2
 800e688:	009b      	lsls	r3, r3, #2
 800e68a:	4413      	add	r3, r2
 800e68c:	00db      	lsls	r3, r3, #3
 800e68e:	4a01      	ldr	r2, [pc, #4]	; (800e694 <UpdateSIGNALSNames+0x350>)
 800e690:	4413      	add	r3, r2
 800e692:	e031      	b.n	800e6f8 <UpdateSIGNALSNames+0x3b4>
 800e694:	20003d70 	.word	0x20003d70
 800e698:	080269b0 	.word	0x080269b0
 800e69c:	080269b8 	.word	0x080269b8
 800e6a0:	080269c0 	.word	0x080269c0
 800e6a4:	080269c8 	.word	0x080269c8
 800e6a8:	080269d0 	.word	0x080269d0
 800e6ac:	080269d8 	.word	0x080269d8
 800e6b0:	080269e0 	.word	0x080269e0
 800e6b4:	080269e8 	.word	0x080269e8
 800e6b8:	080269f0 	.word	0x080269f0
 800e6bc:	080269fc 	.word	0x080269fc
 800e6c0:	08026a04 	.word	0x08026a04
 800e6c4:	08026a10 	.word	0x08026a10
 800e6c8:	08026a1c 	.word	0x08026a1c
 800e6cc:	08026a28 	.word	0x08026a28
 800e6d0:	08026a34 	.word	0x08026a34
 800e6d4:	08026a40 	.word	0x08026a40
 800e6d8:	08026a4c 	.word	0x08026a4c
 800e6dc:	08026a54 	.word	0x08026a54
 800e6e0:	08026a5c 	.word	0x08026a5c
 800e6e4:	08026a64 	.word	0x08026a64
 800e6e8:	08026a6c 	.word	0x08026a6c
 800e6ec:	08026a78 	.word	0x08026a78
 800e6f0:	08026a80 	.word	0x08026a80
 800e6f4:	08026a88 	.word	0x08026a88
 800e6f8:	4acd      	ldr	r2, [pc, #820]	; (800ea30 <UpdateSIGNALSNames+0x6ec>)
 800e6fa:	6810      	ldr	r0, [r2, #0]
 800e6fc:	6018      	str	r0, [r3, #0]
 800e6fe:	8891      	ldrh	r1, [r2, #4]
 800e700:	7992      	ldrb	r2, [r2, #6]
 800e702:	8099      	strh	r1, [r3, #4]
 800e704:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S4RECR");
 800e706:	79fb      	ldrb	r3, [r7, #7]
 800e708:	1c5a      	adds	r2, r3, #1
 800e70a:	71fa      	strb	r2, [r7, #7]
 800e70c:	461a      	mov	r2, r3
 800e70e:	4613      	mov	r3, r2
 800e710:	009b      	lsls	r3, r3, #2
 800e712:	4413      	add	r3, r2
 800e714:	00db      	lsls	r3, r3, #3
 800e716:	4ac7      	ldr	r2, [pc, #796]	; (800ea34 <UpdateSIGNALSNames+0x6f0>)
 800e718:	4413      	add	r3, r2
 800e71a:	4ac7      	ldr	r2, [pc, #796]	; (800ea38 <UpdateSIGNALSNames+0x6f4>)
 800e71c:	6810      	ldr	r0, [r2, #0]
 800e71e:	6018      	str	r0, [r3, #0]
 800e720:	8891      	ldrh	r1, [r2, #4]
 800e722:	7992      	ldrb	r2, [r2, #6]
 800e724:	8099      	strh	r1, [r3, #4]
 800e726:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S6DECR");
 800e728:	79fb      	ldrb	r3, [r7, #7]
 800e72a:	1c5a      	adds	r2, r3, #1
 800e72c:	71fa      	strb	r2, [r7, #7]
 800e72e:	461a      	mov	r2, r3
 800e730:	4613      	mov	r3, r2
 800e732:	009b      	lsls	r3, r3, #2
 800e734:	4413      	add	r3, r2
 800e736:	00db      	lsls	r3, r3, #3
 800e738:	4abe      	ldr	r2, [pc, #760]	; (800ea34 <UpdateSIGNALSNames+0x6f0>)
 800e73a:	4413      	add	r3, r2
 800e73c:	4abf      	ldr	r2, [pc, #764]	; (800ea3c <UpdateSIGNALSNames+0x6f8>)
 800e73e:	6810      	ldr	r0, [r2, #0]
 800e740:	6018      	str	r0, [r3, #0]
 800e742:	8891      	ldrh	r1, [r2, #4]
 800e744:	7992      	ldrb	r2, [r2, #6]
 800e746:	8099      	strh	r1, [r3, #4]
 800e748:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S6RECR");
 800e74a:	79fb      	ldrb	r3, [r7, #7]
 800e74c:	1c5a      	adds	r2, r3, #1
 800e74e:	71fa      	strb	r2, [r7, #7]
 800e750:	461a      	mov	r2, r3
 800e752:	4613      	mov	r3, r2
 800e754:	009b      	lsls	r3, r3, #2
 800e756:	4413      	add	r3, r2
 800e758:	00db      	lsls	r3, r3, #3
 800e75a:	4ab6      	ldr	r2, [pc, #728]	; (800ea34 <UpdateSIGNALSNames+0x6f0>)
 800e75c:	4413      	add	r3, r2
 800e75e:	4ab8      	ldr	r2, [pc, #736]	; (800ea40 <UpdateSIGNALSNames+0x6fc>)
 800e760:	6810      	ldr	r0, [r2, #0]
 800e762:	6018      	str	r0, [r3, #0]
 800e764:	8891      	ldrh	r1, [r2, #4]
 800e766:	7992      	ldrb	r2, [r2, #6]
 800e768:	8099      	strh	r1, [r3, #4]
 800e76a:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S25DECR");
 800e76c:	79fb      	ldrb	r3, [r7, #7]
 800e76e:	1c5a      	adds	r2, r3, #1
 800e770:	71fa      	strb	r2, [r7, #7]
 800e772:	461a      	mov	r2, r3
 800e774:	4613      	mov	r3, r2
 800e776:	009b      	lsls	r3, r3, #2
 800e778:	4413      	add	r3, r2
 800e77a:	00db      	lsls	r3, r3, #3
 800e77c:	4aad      	ldr	r2, [pc, #692]	; (800ea34 <UpdateSIGNALSNames+0x6f0>)
 800e77e:	4413      	add	r3, r2
 800e780:	49b0      	ldr	r1, [pc, #704]	; (800ea44 <UpdateSIGNALSNames+0x700>)
 800e782:	461a      	mov	r2, r3
 800e784:	460b      	mov	r3, r1
 800e786:	cb03      	ldmia	r3!, {r0, r1}
 800e788:	6010      	str	r0, [r2, #0]
 800e78a:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S25RECR");
 800e78c:	79fb      	ldrb	r3, [r7, #7]
 800e78e:	1c5a      	adds	r2, r3, #1
 800e790:	71fa      	strb	r2, [r7, #7]
 800e792:	461a      	mov	r2, r3
 800e794:	4613      	mov	r3, r2
 800e796:	009b      	lsls	r3, r3, #2
 800e798:	4413      	add	r3, r2
 800e79a:	00db      	lsls	r3, r3, #3
 800e79c:	4aa5      	ldr	r2, [pc, #660]	; (800ea34 <UpdateSIGNALSNames+0x6f0>)
 800e79e:	4413      	add	r3, r2
 800e7a0:	49a9      	ldr	r1, [pc, #676]	; (800ea48 <UpdateSIGNALSNames+0x704>)
 800e7a2:	461a      	mov	r2, r3
 800e7a4:	460b      	mov	r3, r1
 800e7a6:	cb03      	ldmia	r3!, {r0, r1}
 800e7a8:	6010      	str	r0, [r2, #0]
 800e7aa:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S26HECR");
 800e7ac:	79fb      	ldrb	r3, [r7, #7]
 800e7ae:	1c5a      	adds	r2, r3, #1
 800e7b0:	71fa      	strb	r2, [r7, #7]
 800e7b2:	461a      	mov	r2, r3
 800e7b4:	4613      	mov	r3, r2
 800e7b6:	009b      	lsls	r3, r3, #2
 800e7b8:	4413      	add	r3, r2
 800e7ba:	00db      	lsls	r3, r3, #3
 800e7bc:	4a9d      	ldr	r2, [pc, #628]	; (800ea34 <UpdateSIGNALSNames+0x6f0>)
 800e7be:	4413      	add	r3, r2
 800e7c0:	49a2      	ldr	r1, [pc, #648]	; (800ea4c <UpdateSIGNALSNames+0x708>)
 800e7c2:	461a      	mov	r2, r3
 800e7c4:	460b      	mov	r3, r1
 800e7c6:	cb03      	ldmia	r3!, {r0, r1}
 800e7c8:	6010      	str	r0, [r2, #0]
 800e7ca:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S26RECR");
 800e7cc:	79fb      	ldrb	r3, [r7, #7]
 800e7ce:	1c5a      	adds	r2, r3, #1
 800e7d0:	71fa      	strb	r2, [r7, #7]
 800e7d2:	461a      	mov	r2, r3
 800e7d4:	4613      	mov	r3, r2
 800e7d6:	009b      	lsls	r3, r3, #2
 800e7d8:	4413      	add	r3, r2
 800e7da:	00db      	lsls	r3, r3, #3
 800e7dc:	4a95      	ldr	r2, [pc, #596]	; (800ea34 <UpdateSIGNALSNames+0x6f0>)
 800e7de:	4413      	add	r3, r2
 800e7e0:	499b      	ldr	r1, [pc, #620]	; (800ea50 <UpdateSIGNALSNames+0x70c>)
 800e7e2:	461a      	mov	r2, r3
 800e7e4:	460b      	mov	r3, r1
 800e7e6:	cb03      	ldmia	r3!, {r0, r1}
 800e7e8:	6010      	str	r0, [r2, #0]
 800e7ea:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S27HECR");
 800e7ec:	79fb      	ldrb	r3, [r7, #7]
 800e7ee:	1c5a      	adds	r2, r3, #1
 800e7f0:	71fa      	strb	r2, [r7, #7]
 800e7f2:	461a      	mov	r2, r3
 800e7f4:	4613      	mov	r3, r2
 800e7f6:	009b      	lsls	r3, r3, #2
 800e7f8:	4413      	add	r3, r2
 800e7fa:	00db      	lsls	r3, r3, #3
 800e7fc:	4a8d      	ldr	r2, [pc, #564]	; (800ea34 <UpdateSIGNALSNames+0x6f0>)
 800e7fe:	4413      	add	r3, r2
 800e800:	4994      	ldr	r1, [pc, #592]	; (800ea54 <UpdateSIGNALSNames+0x710>)
 800e802:	461a      	mov	r2, r3
 800e804:	460b      	mov	r3, r1
 800e806:	cb03      	ldmia	r3!, {r0, r1}
 800e808:	6010      	str	r0, [r2, #0]
 800e80a:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S27RECR");
 800e80c:	79fb      	ldrb	r3, [r7, #7]
 800e80e:	1c5a      	adds	r2, r3, #1
 800e810:	71fa      	strb	r2, [r7, #7]
 800e812:	461a      	mov	r2, r3
 800e814:	4613      	mov	r3, r2
 800e816:	009b      	lsls	r3, r3, #2
 800e818:	4413      	add	r3, r2
 800e81a:	00db      	lsls	r3, r3, #3
 800e81c:	4a85      	ldr	r2, [pc, #532]	; (800ea34 <UpdateSIGNALSNames+0x6f0>)
 800e81e:	4413      	add	r3, r2
 800e820:	498d      	ldr	r1, [pc, #564]	; (800ea58 <UpdateSIGNALSNames+0x714>)
 800e822:	461a      	mov	r2, r3
 800e824:	460b      	mov	r3, r1
 800e826:	cb03      	ldmia	r3!, {r0, r1}
 800e828:	6010      	str	r0, [r2, #0]
 800e82a:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S28DECR");
 800e82c:	79fb      	ldrb	r3, [r7, #7]
 800e82e:	1c5a      	adds	r2, r3, #1
 800e830:	71fa      	strb	r2, [r7, #7]
 800e832:	461a      	mov	r2, r3
 800e834:	4613      	mov	r3, r2
 800e836:	009b      	lsls	r3, r3, #2
 800e838:	4413      	add	r3, r2
 800e83a:	00db      	lsls	r3, r3, #3
 800e83c:	4a7d      	ldr	r2, [pc, #500]	; (800ea34 <UpdateSIGNALSNames+0x6f0>)
 800e83e:	4413      	add	r3, r2
 800e840:	4986      	ldr	r1, [pc, #536]	; (800ea5c <UpdateSIGNALSNames+0x718>)
 800e842:	461a      	mov	r2, r3
 800e844:	460b      	mov	r3, r1
 800e846:	cb03      	ldmia	r3!, {r0, r1}
 800e848:	6010      	str	r0, [r2, #0]
 800e84a:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S28HECR");
 800e84c:	79fb      	ldrb	r3, [r7, #7]
 800e84e:	1c5a      	adds	r2, r3, #1
 800e850:	71fa      	strb	r2, [r7, #7]
 800e852:	461a      	mov	r2, r3
 800e854:	4613      	mov	r3, r2
 800e856:	009b      	lsls	r3, r3, #2
 800e858:	4413      	add	r3, r2
 800e85a:	00db      	lsls	r3, r3, #3
 800e85c:	4a75      	ldr	r2, [pc, #468]	; (800ea34 <UpdateSIGNALSNames+0x6f0>)
 800e85e:	4413      	add	r3, r2
 800e860:	497f      	ldr	r1, [pc, #508]	; (800ea60 <UpdateSIGNALSNames+0x71c>)
 800e862:	461a      	mov	r2, r3
 800e864:	460b      	mov	r3, r1
 800e866:	cb03      	ldmia	r3!, {r0, r1}
 800e868:	6010      	str	r0, [r2, #0]
 800e86a:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S28RECR");
 800e86c:	79fb      	ldrb	r3, [r7, #7]
 800e86e:	1c5a      	adds	r2, r3, #1
 800e870:	71fa      	strb	r2, [r7, #7]
 800e872:	461a      	mov	r2, r3
 800e874:	4613      	mov	r3, r2
 800e876:	009b      	lsls	r3, r3, #2
 800e878:	4413      	add	r3, r2
 800e87a:	00db      	lsls	r3, r3, #3
 800e87c:	4a6d      	ldr	r2, [pc, #436]	; (800ea34 <UpdateSIGNALSNames+0x6f0>)
 800e87e:	4413      	add	r3, r2
 800e880:	4978      	ldr	r1, [pc, #480]	; (800ea64 <UpdateSIGNALSNames+0x720>)
 800e882:	461a      	mov	r2, r3
 800e884:	460b      	mov	r3, r1
 800e886:	cb03      	ldmia	r3!, {r0, r1}
 800e888:	6010      	str	r0, [r2, #0]
 800e88a:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30DECR");
 800e88c:	79fb      	ldrb	r3, [r7, #7]
 800e88e:	1c5a      	adds	r2, r3, #1
 800e890:	71fa      	strb	r2, [r7, #7]
 800e892:	461a      	mov	r2, r3
 800e894:	4613      	mov	r3, r2
 800e896:	009b      	lsls	r3, r3, #2
 800e898:	4413      	add	r3, r2
 800e89a:	00db      	lsls	r3, r3, #3
 800e89c:	4a65      	ldr	r2, [pc, #404]	; (800ea34 <UpdateSIGNALSNames+0x6f0>)
 800e89e:	4413      	add	r3, r2
 800e8a0:	4971      	ldr	r1, [pc, #452]	; (800ea68 <UpdateSIGNALSNames+0x724>)
 800e8a2:	461a      	mov	r2, r3
 800e8a4:	460b      	mov	r3, r1
 800e8a6:	cb03      	ldmia	r3!, {r0, r1}
 800e8a8:	6010      	str	r0, [r2, #0]
 800e8aa:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30HECR");
 800e8ac:	79fb      	ldrb	r3, [r7, #7]
 800e8ae:	1c5a      	adds	r2, r3, #1
 800e8b0:	71fa      	strb	r2, [r7, #7]
 800e8b2:	461a      	mov	r2, r3
 800e8b4:	4613      	mov	r3, r2
 800e8b6:	009b      	lsls	r3, r3, #2
 800e8b8:	4413      	add	r3, r2
 800e8ba:	00db      	lsls	r3, r3, #3
 800e8bc:	4a5d      	ldr	r2, [pc, #372]	; (800ea34 <UpdateSIGNALSNames+0x6f0>)
 800e8be:	4413      	add	r3, r2
 800e8c0:	496a      	ldr	r1, [pc, #424]	; (800ea6c <UpdateSIGNALSNames+0x728>)
 800e8c2:	461a      	mov	r2, r3
 800e8c4:	460b      	mov	r3, r1
 800e8c6:	cb03      	ldmia	r3!, {r0, r1}
 800e8c8:	6010      	str	r0, [r2, #0]
 800e8ca:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30RECR");
 800e8cc:	79fb      	ldrb	r3, [r7, #7]
 800e8ce:	1c5a      	adds	r2, r3, #1
 800e8d0:	71fa      	strb	r2, [r7, #7]
 800e8d2:	461a      	mov	r2, r3
 800e8d4:	4613      	mov	r3, r2
 800e8d6:	009b      	lsls	r3, r3, #2
 800e8d8:	4413      	add	r3, r2
 800e8da:	00db      	lsls	r3, r3, #3
 800e8dc:	4a55      	ldr	r2, [pc, #340]	; (800ea34 <UpdateSIGNALSNames+0x6f0>)
 800e8de:	4413      	add	r3, r2
 800e8e0:	4963      	ldr	r1, [pc, #396]	; (800ea70 <UpdateSIGNALSNames+0x72c>)
 800e8e2:	461a      	mov	r2, r3
 800e8e4:	460b      	mov	r3, r1
 800e8e6:	cb03      	ldmia	r3!, {r0, r1}
 800e8e8:	6010      	str	r0, [r2, #0]
 800e8ea:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30UECR");
 800e8ec:	79fb      	ldrb	r3, [r7, #7]
 800e8ee:	1c5a      	adds	r2, r3, #1
 800e8f0:	71fa      	strb	r2, [r7, #7]
 800e8f2:	461a      	mov	r2, r3
 800e8f4:	4613      	mov	r3, r2
 800e8f6:	009b      	lsls	r3, r3, #2
 800e8f8:	4413      	add	r3, r2
 800e8fa:	00db      	lsls	r3, r3, #3
 800e8fc:	4a4d      	ldr	r2, [pc, #308]	; (800ea34 <UpdateSIGNALSNames+0x6f0>)
 800e8fe:	4413      	add	r3, r2
 800e900:	495c      	ldr	r1, [pc, #368]	; (800ea74 <UpdateSIGNALSNames+0x730>)
 800e902:	461a      	mov	r2, r3
 800e904:	460b      	mov	r3, r1
 800e906:	cb03      	ldmia	r3!, {r0, r1}
 800e908:	6010      	str	r0, [r2, #0]
 800e90a:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30A_COHECR");
 800e90c:	79fb      	ldrb	r3, [r7, #7]
 800e90e:	1c5a      	adds	r2, r3, #1
 800e910:	71fa      	strb	r2, [r7, #7]
 800e912:	461a      	mov	r2, r3
 800e914:	4613      	mov	r3, r2
 800e916:	009b      	lsls	r3, r3, #2
 800e918:	4413      	add	r3, r2
 800e91a:	00db      	lsls	r3, r3, #3
 800e91c:	4a45      	ldr	r2, [pc, #276]	; (800ea34 <UpdateSIGNALSNames+0x6f0>)
 800e91e:	4413      	add	r3, r2
 800e920:	4a55      	ldr	r2, [pc, #340]	; (800ea78 <UpdateSIGNALSNames+0x734>)
 800e922:	461c      	mov	r4, r3
 800e924:	4613      	mov	r3, r2
 800e926:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e928:	6020      	str	r0, [r4, #0]
 800e92a:	6061      	str	r1, [r4, #4]
 800e92c:	60a2      	str	r2, [r4, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D2_DECR");
 800e92e:	79fb      	ldrb	r3, [r7, #7]
 800e930:	1c5a      	adds	r2, r3, #1
 800e932:	71fa      	strb	r2, [r7, #7]
 800e934:	461a      	mov	r2, r3
 800e936:	4613      	mov	r3, r2
 800e938:	009b      	lsls	r3, r3, #2
 800e93a:	4413      	add	r3, r2
 800e93c:	00db      	lsls	r3, r3, #3
 800e93e:	4a3d      	ldr	r2, [pc, #244]	; (800ea34 <UpdateSIGNALSNames+0x6f0>)
 800e940:	4413      	add	r3, r2
 800e942:	494e      	ldr	r1, [pc, #312]	; (800ea7c <UpdateSIGNALSNames+0x738>)
 800e944:	461a      	mov	r2, r3
 800e946:	460b      	mov	r3, r1
 800e948:	cb03      	ldmia	r3!, {r0, r1}
 800e94a:	6010      	str	r0, [r2, #0]
 800e94c:	6051      	str	r1, [r2, #4]
 800e94e:	8819      	ldrh	r1, [r3, #0]
 800e950:	789b      	ldrb	r3, [r3, #2]
 800e952:	8111      	strh	r1, [r2, #8]
 800e954:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D2_HHECR");
 800e956:	79fb      	ldrb	r3, [r7, #7]
 800e958:	1c5a      	adds	r2, r3, #1
 800e95a:	71fa      	strb	r2, [r7, #7]
 800e95c:	461a      	mov	r2, r3
 800e95e:	4613      	mov	r3, r2
 800e960:	009b      	lsls	r3, r3, #2
 800e962:	4413      	add	r3, r2
 800e964:	00db      	lsls	r3, r3, #3
 800e966:	4a33      	ldr	r2, [pc, #204]	; (800ea34 <UpdateSIGNALSNames+0x6f0>)
 800e968:	4413      	add	r3, r2
 800e96a:	4a45      	ldr	r2, [pc, #276]	; (800ea80 <UpdateSIGNALSNames+0x73c>)
 800e96c:	461c      	mov	r4, r3
 800e96e:	4613      	mov	r3, r2
 800e970:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e972:	6020      	str	r0, [r4, #0]
 800e974:	6061      	str	r1, [r4, #4]
 800e976:	60a2      	str	r2, [r4, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D2_HECR");
 800e978:	79fb      	ldrb	r3, [r7, #7]
 800e97a:	1c5a      	adds	r2, r3, #1
 800e97c:	71fa      	strb	r2, [r7, #7]
 800e97e:	461a      	mov	r2, r3
 800e980:	4613      	mov	r3, r2
 800e982:	009b      	lsls	r3, r3, #2
 800e984:	4413      	add	r3, r2
 800e986:	00db      	lsls	r3, r3, #3
 800e988:	4a2a      	ldr	r2, [pc, #168]	; (800ea34 <UpdateSIGNALSNames+0x6f0>)
 800e98a:	4413      	add	r3, r2
 800e98c:	493d      	ldr	r1, [pc, #244]	; (800ea84 <UpdateSIGNALSNames+0x740>)
 800e98e:	461a      	mov	r2, r3
 800e990:	460b      	mov	r3, r1
 800e992:	cb03      	ldmia	r3!, {r0, r1}
 800e994:	6010      	str	r0, [r2, #0]
 800e996:	6051      	str	r1, [r2, #4]
 800e998:	8819      	ldrh	r1, [r3, #0]
 800e99a:	789b      	ldrb	r3, [r3, #2]
 800e99c:	8111      	strh	r1, [r2, #8]
 800e99e:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D1_DECR");
 800e9a0:	79fb      	ldrb	r3, [r7, #7]
 800e9a2:	1c5a      	adds	r2, r3, #1
 800e9a4:	71fa      	strb	r2, [r7, #7]
 800e9a6:	461a      	mov	r2, r3
 800e9a8:	4613      	mov	r3, r2
 800e9aa:	009b      	lsls	r3, r3, #2
 800e9ac:	4413      	add	r3, r2
 800e9ae:	00db      	lsls	r3, r3, #3
 800e9b0:	4a20      	ldr	r2, [pc, #128]	; (800ea34 <UpdateSIGNALSNames+0x6f0>)
 800e9b2:	4413      	add	r3, r2
 800e9b4:	4934      	ldr	r1, [pc, #208]	; (800ea88 <UpdateSIGNALSNames+0x744>)
 800e9b6:	461a      	mov	r2, r3
 800e9b8:	460b      	mov	r3, r1
 800e9ba:	cb03      	ldmia	r3!, {r0, r1}
 800e9bc:	6010      	str	r0, [r2, #0]
 800e9be:	6051      	str	r1, [r2, #4]
 800e9c0:	8819      	ldrh	r1, [r3, #0]
 800e9c2:	789b      	ldrb	r3, [r3, #2]
 800e9c4:	8111      	strh	r1, [r2, #8]
 800e9c6:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D1_HHECR");
 800e9c8:	79fb      	ldrb	r3, [r7, #7]
 800e9ca:	1c5a      	adds	r2, r3, #1
 800e9cc:	71fa      	strb	r2, [r7, #7]
 800e9ce:	461a      	mov	r2, r3
 800e9d0:	4613      	mov	r3, r2
 800e9d2:	009b      	lsls	r3, r3, #2
 800e9d4:	4413      	add	r3, r2
 800e9d6:	00db      	lsls	r3, r3, #3
 800e9d8:	4a16      	ldr	r2, [pc, #88]	; (800ea34 <UpdateSIGNALSNames+0x6f0>)
 800e9da:	4413      	add	r3, r2
 800e9dc:	4a2b      	ldr	r2, [pc, #172]	; (800ea8c <UpdateSIGNALSNames+0x748>)
 800e9de:	461c      	mov	r4, r3
 800e9e0:	4613      	mov	r3, r2
 800e9e2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e9e4:	6020      	str	r0, [r4, #0]
 800e9e6:	6061      	str	r1, [r4, #4]
 800e9e8:	60a2      	str	r2, [r4, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D1_HECR");
 800e9ea:	79fb      	ldrb	r3, [r7, #7]
 800e9ec:	1c5a      	adds	r2, r3, #1
 800e9ee:	71fa      	strb	r2, [r7, #7]
 800e9f0:	461a      	mov	r2, r3
 800e9f2:	4613      	mov	r3, r2
 800e9f4:	009b      	lsls	r3, r3, #2
 800e9f6:	4413      	add	r3, r2
 800e9f8:	00db      	lsls	r3, r3, #3
 800e9fa:	4a0e      	ldr	r2, [pc, #56]	; (800ea34 <UpdateSIGNALSNames+0x6f0>)
 800e9fc:	4413      	add	r3, r2
 800e9fe:	4924      	ldr	r1, [pc, #144]	; (800ea90 <UpdateSIGNALSNames+0x74c>)
 800ea00:	461a      	mov	r2, r3
 800ea02:	460b      	mov	r3, r1
 800ea04:	cb03      	ldmia	r3!, {r0, r1}
 800ea06:	6010      	str	r0, [r2, #0]
 800ea08:	6051      	str	r1, [r2, #4]
 800ea0a:	8819      	ldrh	r1, [r3, #0]
 800ea0c:	789b      	ldrb	r3, [r3, #2]
 800ea0e:	8111      	strh	r1, [r2, #8]
 800ea10:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"11NWKR");
 800ea12:	79fb      	ldrb	r3, [r7, #7]
 800ea14:	1c5a      	adds	r2, r3, #1
 800ea16:	71fa      	strb	r2, [r7, #7]
 800ea18:	461a      	mov	r2, r3
 800ea1a:	4613      	mov	r3, r2
 800ea1c:	009b      	lsls	r3, r3, #2
 800ea1e:	4413      	add	r3, r2
 800ea20:	00db      	lsls	r3, r3, #3
 800ea22:	4a04      	ldr	r2, [pc, #16]	; (800ea34 <UpdateSIGNALSNames+0x6f0>)
 800ea24:	4413      	add	r3, r2
 800ea26:	4a1b      	ldr	r2, [pc, #108]	; (800ea94 <UpdateSIGNALSNames+0x750>)
 800ea28:	6810      	ldr	r0, [r2, #0]
 800ea2a:	6018      	str	r0, [r3, #0]
 800ea2c:	e034      	b.n	800ea98 <UpdateSIGNALSNames+0x754>
 800ea2e:	bf00      	nop
 800ea30:	08026a90 	.word	0x08026a90
 800ea34:	20003d70 	.word	0x20003d70
 800ea38:	08026a98 	.word	0x08026a98
 800ea3c:	08026aa0 	.word	0x08026aa0
 800ea40:	08026aa8 	.word	0x08026aa8
 800ea44:	08026ab0 	.word	0x08026ab0
 800ea48:	08026ab8 	.word	0x08026ab8
 800ea4c:	08026ac0 	.word	0x08026ac0
 800ea50:	08026ac8 	.word	0x08026ac8
 800ea54:	08026ad0 	.word	0x08026ad0
 800ea58:	08026ad8 	.word	0x08026ad8
 800ea5c:	08026ae0 	.word	0x08026ae0
 800ea60:	08026ae8 	.word	0x08026ae8
 800ea64:	08026af0 	.word	0x08026af0
 800ea68:	08026af8 	.word	0x08026af8
 800ea6c:	08026b00 	.word	0x08026b00
 800ea70:	08026b08 	.word	0x08026b08
 800ea74:	08026b10 	.word	0x08026b10
 800ea78:	08026b18 	.word	0x08026b18
 800ea7c:	08026b24 	.word	0x08026b24
 800ea80:	08026b30 	.word	0x08026b30
 800ea84:	08026b3c 	.word	0x08026b3c
 800ea88:	08026b48 	.word	0x08026b48
 800ea8c:	08026b54 	.word	0x08026b54
 800ea90:	08026b60 	.word	0x08026b60
 800ea94:	08026b6c 	.word	0x08026b6c
 800ea98:	8891      	ldrh	r1, [r2, #4]
 800ea9a:	7992      	ldrb	r2, [r2, #6]
 800ea9c:	8099      	strh	r1, [r3, #4]
 800ea9e:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"11RWKR");
 800eaa0:	79fb      	ldrb	r3, [r7, #7]
 800eaa2:	1c5a      	adds	r2, r3, #1
 800eaa4:	71fa      	strb	r2, [r7, #7]
 800eaa6:	461a      	mov	r2, r3
 800eaa8:	4613      	mov	r3, r2
 800eaaa:	009b      	lsls	r3, r3, #2
 800eaac:	4413      	add	r3, r2
 800eaae:	00db      	lsls	r3, r3, #3
 800eab0:	4a82      	ldr	r2, [pc, #520]	; (800ecbc <UpdateSIGNALSNames+0x978>)
 800eab2:	4413      	add	r3, r2
 800eab4:	4a82      	ldr	r2, [pc, #520]	; (800ecc0 <UpdateSIGNALSNames+0x97c>)
 800eab6:	6810      	ldr	r0, [r2, #0]
 800eab8:	6018      	str	r0, [r3, #0]
 800eaba:	8891      	ldrh	r1, [r2, #4]
 800eabc:	7992      	ldrb	r2, [r2, #6]
 800eabe:	8099      	strh	r1, [r3, #4]
 800eac0:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"12NWKR");
 800eac2:	79fb      	ldrb	r3, [r7, #7]
 800eac4:	1c5a      	adds	r2, r3, #1
 800eac6:	71fa      	strb	r2, [r7, #7]
 800eac8:	461a      	mov	r2, r3
 800eaca:	4613      	mov	r3, r2
 800eacc:	009b      	lsls	r3, r3, #2
 800eace:	4413      	add	r3, r2
 800ead0:	00db      	lsls	r3, r3, #3
 800ead2:	4a7a      	ldr	r2, [pc, #488]	; (800ecbc <UpdateSIGNALSNames+0x978>)
 800ead4:	4413      	add	r3, r2
 800ead6:	4a7b      	ldr	r2, [pc, #492]	; (800ecc4 <UpdateSIGNALSNames+0x980>)
 800ead8:	6810      	ldr	r0, [r2, #0]
 800eada:	6018      	str	r0, [r3, #0]
 800eadc:	8891      	ldrh	r1, [r2, #4]
 800eade:	7992      	ldrb	r2, [r2, #6]
 800eae0:	8099      	strh	r1, [r3, #4]
 800eae2:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"12RWKR");
 800eae4:	79fb      	ldrb	r3, [r7, #7]
 800eae6:	1c5a      	adds	r2, r3, #1
 800eae8:	71fa      	strb	r2, [r7, #7]
 800eaea:	461a      	mov	r2, r3
 800eaec:	4613      	mov	r3, r2
 800eaee:	009b      	lsls	r3, r3, #2
 800eaf0:	4413      	add	r3, r2
 800eaf2:	00db      	lsls	r3, r3, #3
 800eaf4:	4a71      	ldr	r2, [pc, #452]	; (800ecbc <UpdateSIGNALSNames+0x978>)
 800eaf6:	4413      	add	r3, r2
 800eaf8:	4a73      	ldr	r2, [pc, #460]	; (800ecc8 <UpdateSIGNALSNames+0x984>)
 800eafa:	6810      	ldr	r0, [r2, #0]
 800eafc:	6018      	str	r0, [r3, #0]
 800eafe:	8891      	ldrh	r1, [r2, #4]
 800eb00:	7992      	ldrb	r2, [r2, #6]
 800eb02:	8099      	strh	r1, [r3, #4]
 800eb04:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"13NWKR");
 800eb06:	79fb      	ldrb	r3, [r7, #7]
 800eb08:	1c5a      	adds	r2, r3, #1
 800eb0a:	71fa      	strb	r2, [r7, #7]
 800eb0c:	461a      	mov	r2, r3
 800eb0e:	4613      	mov	r3, r2
 800eb10:	009b      	lsls	r3, r3, #2
 800eb12:	4413      	add	r3, r2
 800eb14:	00db      	lsls	r3, r3, #3
 800eb16:	4a69      	ldr	r2, [pc, #420]	; (800ecbc <UpdateSIGNALSNames+0x978>)
 800eb18:	4413      	add	r3, r2
 800eb1a:	4a6c      	ldr	r2, [pc, #432]	; (800eccc <UpdateSIGNALSNames+0x988>)
 800eb1c:	6810      	ldr	r0, [r2, #0]
 800eb1e:	6018      	str	r0, [r3, #0]
 800eb20:	8891      	ldrh	r1, [r2, #4]
 800eb22:	7992      	ldrb	r2, [r2, #6]
 800eb24:	8099      	strh	r1, [r3, #4]
 800eb26:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"13RWKR");
 800eb28:	79fb      	ldrb	r3, [r7, #7]
 800eb2a:	1c5a      	adds	r2, r3, #1
 800eb2c:	71fa      	strb	r2, [r7, #7]
 800eb2e:	461a      	mov	r2, r3
 800eb30:	4613      	mov	r3, r2
 800eb32:	009b      	lsls	r3, r3, #2
 800eb34:	4413      	add	r3, r2
 800eb36:	00db      	lsls	r3, r3, #3
 800eb38:	4a60      	ldr	r2, [pc, #384]	; (800ecbc <UpdateSIGNALSNames+0x978>)
 800eb3a:	4413      	add	r3, r2
 800eb3c:	4a64      	ldr	r2, [pc, #400]	; (800ecd0 <UpdateSIGNALSNames+0x98c>)
 800eb3e:	6810      	ldr	r0, [r2, #0]
 800eb40:	6018      	str	r0, [r3, #0]
 800eb42:	8891      	ldrh	r1, [r2, #4]
 800eb44:	7992      	ldrb	r2, [r2, #6]
 800eb46:	8099      	strh	r1, [r3, #4]
 800eb48:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"18NWKR");
 800eb4a:	79fb      	ldrb	r3, [r7, #7]
 800eb4c:	1c5a      	adds	r2, r3, #1
 800eb4e:	71fa      	strb	r2, [r7, #7]
 800eb50:	461a      	mov	r2, r3
 800eb52:	4613      	mov	r3, r2
 800eb54:	009b      	lsls	r3, r3, #2
 800eb56:	4413      	add	r3, r2
 800eb58:	00db      	lsls	r3, r3, #3
 800eb5a:	4a58      	ldr	r2, [pc, #352]	; (800ecbc <UpdateSIGNALSNames+0x978>)
 800eb5c:	4413      	add	r3, r2
 800eb5e:	4a5d      	ldr	r2, [pc, #372]	; (800ecd4 <UpdateSIGNALSNames+0x990>)
 800eb60:	6810      	ldr	r0, [r2, #0]
 800eb62:	6018      	str	r0, [r3, #0]
 800eb64:	8891      	ldrh	r1, [r2, #4]
 800eb66:	7992      	ldrb	r2, [r2, #6]
 800eb68:	8099      	strh	r1, [r3, #4]
 800eb6a:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"18RWKR");
 800eb6c:	79fb      	ldrb	r3, [r7, #7]
 800eb6e:	1c5a      	adds	r2, r3, #1
 800eb70:	71fa      	strb	r2, [r7, #7]
 800eb72:	461a      	mov	r2, r3
 800eb74:	4613      	mov	r3, r2
 800eb76:	009b      	lsls	r3, r3, #2
 800eb78:	4413      	add	r3, r2
 800eb7a:	00db      	lsls	r3, r3, #3
 800eb7c:	4a4f      	ldr	r2, [pc, #316]	; (800ecbc <UpdateSIGNALSNames+0x978>)
 800eb7e:	4413      	add	r3, r2
 800eb80:	4a55      	ldr	r2, [pc, #340]	; (800ecd8 <UpdateSIGNALSNames+0x994>)
 800eb82:	6810      	ldr	r0, [r2, #0]
 800eb84:	6018      	str	r0, [r3, #0]
 800eb86:	8891      	ldrh	r1, [r2, #4]
 800eb88:	7992      	ldrb	r2, [r2, #6]
 800eb8a:	8099      	strh	r1, [r3, #4]
 800eb8c:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"19NWKR");
 800eb8e:	79fb      	ldrb	r3, [r7, #7]
 800eb90:	1c5a      	adds	r2, r3, #1
 800eb92:	71fa      	strb	r2, [r7, #7]
 800eb94:	461a      	mov	r2, r3
 800eb96:	4613      	mov	r3, r2
 800eb98:	009b      	lsls	r3, r3, #2
 800eb9a:	4413      	add	r3, r2
 800eb9c:	00db      	lsls	r3, r3, #3
 800eb9e:	4a47      	ldr	r2, [pc, #284]	; (800ecbc <UpdateSIGNALSNames+0x978>)
 800eba0:	4413      	add	r3, r2
 800eba2:	4a4e      	ldr	r2, [pc, #312]	; (800ecdc <UpdateSIGNALSNames+0x998>)
 800eba4:	6810      	ldr	r0, [r2, #0]
 800eba6:	6018      	str	r0, [r3, #0]
 800eba8:	8891      	ldrh	r1, [r2, #4]
 800ebaa:	7992      	ldrb	r2, [r2, #6]
 800ebac:	8099      	strh	r1, [r3, #4]
 800ebae:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"19RWKR");
 800ebb0:	79fb      	ldrb	r3, [r7, #7]
 800ebb2:	1c5a      	adds	r2, r3, #1
 800ebb4:	71fa      	strb	r2, [r7, #7]
 800ebb6:	461a      	mov	r2, r3
 800ebb8:	4613      	mov	r3, r2
 800ebba:	009b      	lsls	r3, r3, #2
 800ebbc:	4413      	add	r3, r2
 800ebbe:	00db      	lsls	r3, r3, #3
 800ebc0:	4a3e      	ldr	r2, [pc, #248]	; (800ecbc <UpdateSIGNALSNames+0x978>)
 800ebc2:	4413      	add	r3, r2
 800ebc4:	4a46      	ldr	r2, [pc, #280]	; (800ece0 <UpdateSIGNALSNames+0x99c>)
 800ebc6:	6810      	ldr	r0, [r2, #0]
 800ebc8:	6018      	str	r0, [r3, #0]
 800ebca:	8891      	ldrh	r1, [r2, #4]
 800ebcc:	7992      	ldrb	r2, [r2, #6]
 800ebce:	8099      	strh	r1, [r3, #4]
 800ebd0:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"20NWKR");
 800ebd2:	79fb      	ldrb	r3, [r7, #7]
 800ebd4:	1c5a      	adds	r2, r3, #1
 800ebd6:	71fa      	strb	r2, [r7, #7]
 800ebd8:	461a      	mov	r2, r3
 800ebda:	4613      	mov	r3, r2
 800ebdc:	009b      	lsls	r3, r3, #2
 800ebde:	4413      	add	r3, r2
 800ebe0:	00db      	lsls	r3, r3, #3
 800ebe2:	4a36      	ldr	r2, [pc, #216]	; (800ecbc <UpdateSIGNALSNames+0x978>)
 800ebe4:	4413      	add	r3, r2
 800ebe6:	4a3f      	ldr	r2, [pc, #252]	; (800ece4 <UpdateSIGNALSNames+0x9a0>)
 800ebe8:	6810      	ldr	r0, [r2, #0]
 800ebea:	6018      	str	r0, [r3, #0]
 800ebec:	8891      	ldrh	r1, [r2, #4]
 800ebee:	7992      	ldrb	r2, [r2, #6]
 800ebf0:	8099      	strh	r1, [r3, #4]
 800ebf2:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"20RWKR");
 800ebf4:	79fb      	ldrb	r3, [r7, #7]
 800ebf6:	1c5a      	adds	r2, r3, #1
 800ebf8:	71fa      	strb	r2, [r7, #7]
 800ebfa:	461a      	mov	r2, r3
 800ebfc:	4613      	mov	r3, r2
 800ebfe:	009b      	lsls	r3, r3, #2
 800ec00:	4413      	add	r3, r2
 800ec02:	00db      	lsls	r3, r3, #3
 800ec04:	4a2d      	ldr	r2, [pc, #180]	; (800ecbc <UpdateSIGNALSNames+0x978>)
 800ec06:	4413      	add	r3, r2
 800ec08:	4a37      	ldr	r2, [pc, #220]	; (800ece8 <UpdateSIGNALSNames+0x9a4>)
 800ec0a:	6810      	ldr	r0, [r2, #0]
 800ec0c:	6018      	str	r0, [r3, #0]
 800ec0e:	8891      	ldrh	r1, [r2, #4]
 800ec10:	7992      	ldrb	r2, [r2, #6]
 800ec12:	8099      	strh	r1, [r3, #4]
 800ec14:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"15KL_NWKR");
 800ec16:	79fb      	ldrb	r3, [r7, #7]
 800ec18:	1c5a      	adds	r2, r3, #1
 800ec1a:	71fa      	strb	r2, [r7, #7]
 800ec1c:	461a      	mov	r2, r3
 800ec1e:	4613      	mov	r3, r2
 800ec20:	009b      	lsls	r3, r3, #2
 800ec22:	4413      	add	r3, r2
 800ec24:	00db      	lsls	r3, r3, #3
 800ec26:	4a25      	ldr	r2, [pc, #148]	; (800ecbc <UpdateSIGNALSNames+0x978>)
 800ec28:	4413      	add	r3, r2
 800ec2a:	4930      	ldr	r1, [pc, #192]	; (800ecec <UpdateSIGNALSNames+0x9a8>)
 800ec2c:	461a      	mov	r2, r3
 800ec2e:	460b      	mov	r3, r1
 800ec30:	cb03      	ldmia	r3!, {r0, r1}
 800ec32:	6010      	str	r0, [r2, #0]
 800ec34:	6051      	str	r1, [r2, #4]
 800ec36:	881b      	ldrh	r3, [r3, #0]
 800ec38:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"22LXCR");
 800ec3a:	79fb      	ldrb	r3, [r7, #7]
 800ec3c:	1c5a      	adds	r2, r3, #1
 800ec3e:	71fa      	strb	r2, [r7, #7]
 800ec40:	461a      	mov	r2, r3
 800ec42:	4613      	mov	r3, r2
 800ec44:	009b      	lsls	r3, r3, #2
 800ec46:	4413      	add	r3, r2
 800ec48:	00db      	lsls	r3, r3, #3
 800ec4a:	4a1c      	ldr	r2, [pc, #112]	; (800ecbc <UpdateSIGNALSNames+0x978>)
 800ec4c:	4413      	add	r3, r2
 800ec4e:	4a28      	ldr	r2, [pc, #160]	; (800ecf0 <UpdateSIGNALSNames+0x9ac>)
 800ec50:	6810      	ldr	r0, [r2, #0]
 800ec52:	6018      	str	r0, [r3, #0]
 800ec54:	8891      	ldrh	r1, [r2, #4]
 800ec56:	7992      	ldrb	r2, [r2, #6]
 800ec58:	8099      	strh	r1, [r3, #4]
 800ec5a:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"BR_LCPR_STNA");
 800ec5c:	79fb      	ldrb	r3, [r7, #7]
 800ec5e:	1c5a      	adds	r2, r3, #1
 800ec60:	71fa      	strb	r2, [r7, #7]
 800ec62:	461a      	mov	r2, r3
 800ec64:	4613      	mov	r3, r2
 800ec66:	009b      	lsls	r3, r3, #2
 800ec68:	4413      	add	r3, r2
 800ec6a:	00db      	lsls	r3, r3, #3
 800ec6c:	4a13      	ldr	r2, [pc, #76]	; (800ecbc <UpdateSIGNALSNames+0x978>)
 800ec6e:	4413      	add	r3, r2
 800ec70:	4a20      	ldr	r2, [pc, #128]	; (800ecf4 <UpdateSIGNALSNames+0x9b0>)
 800ec72:	461c      	mov	r4, r3
 800ec74:	4613      	mov	r3, r2
 800ec76:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ec78:	6020      	str	r0, [r4, #0]
 800ec7a:	6061      	str	r1, [r4, #4]
 800ec7c:	60a2      	str	r2, [r4, #8]
 800ec7e:	781b      	ldrb	r3, [r3, #0]
 800ec80:	7323      	strb	r3, [r4, #12]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"BR_LCPR_STNC");
 800ec82:	79fb      	ldrb	r3, [r7, #7]
 800ec84:	1c5a      	adds	r2, r3, #1
 800ec86:	71fa      	strb	r2, [r7, #7]
 800ec88:	461a      	mov	r2, r3
 800ec8a:	4613      	mov	r3, r2
 800ec8c:	009b      	lsls	r3, r3, #2
 800ec8e:	4413      	add	r3, r2
 800ec90:	00db      	lsls	r3, r3, #3
 800ec92:	4a0a      	ldr	r2, [pc, #40]	; (800ecbc <UpdateSIGNALSNames+0x978>)
 800ec94:	4413      	add	r3, r2
 800ec96:	4a18      	ldr	r2, [pc, #96]	; (800ecf8 <UpdateSIGNALSNames+0x9b4>)
 800ec98:	461c      	mov	r4, r3
 800ec9a:	4613      	mov	r3, r2
 800ec9c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ec9e:	6020      	str	r0, [r4, #0]
 800eca0:	6061      	str	r1, [r4, #4]
 800eca2:	60a2      	str	r2, [r4, #8]
 800eca4:	781b      	ldrb	r3, [r3, #0]
 800eca6:	7323      	strb	r3, [r4, #12]
	TotalSigCount = Signals_Cnt;
 800eca8:	79fb      	ldrb	r3, [r7, #7]
 800ecaa:	b29a      	uxth	r2, r3
 800ecac:	4b13      	ldr	r3, [pc, #76]	; (800ecfc <UpdateSIGNALSNames+0x9b8>)
 800ecae:	801a      	strh	r2, [r3, #0]


}
 800ecb0:	bf00      	nop
 800ecb2:	3708      	adds	r7, #8
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	bc90      	pop	{r4, r7}
 800ecb8:	4770      	bx	lr
 800ecba:	bf00      	nop
 800ecbc:	20003d70 	.word	0x20003d70
 800ecc0:	08026b74 	.word	0x08026b74
 800ecc4:	08026b7c 	.word	0x08026b7c
 800ecc8:	08026b84 	.word	0x08026b84
 800eccc:	08026b8c 	.word	0x08026b8c
 800ecd0:	08026b94 	.word	0x08026b94
 800ecd4:	08026b9c 	.word	0x08026b9c
 800ecd8:	08026ba4 	.word	0x08026ba4
 800ecdc:	08026bac 	.word	0x08026bac
 800ece0:	08026bb4 	.word	0x08026bb4
 800ece4:	08026bbc 	.word	0x08026bbc
 800ece8:	08026bc4 	.word	0x08026bc4
 800ecec:	08026bcc 	.word	0x08026bcc
 800ecf0:	08026bd8 	.word	0x08026bd8
 800ecf4:	08026be0 	.word	0x08026be0
 800ecf8:	08026bf0 	.word	0x08026bf0
 800ecfc:	20004860 	.word	0x20004860

0800ed00 <print_self_DetailsSiemens>:

void print_self_DetailsSiemens(void)
{
 800ed00:	b5b0      	push	{r4, r5, r7, lr}
 800ed02:	b086      	sub	sp, #24
 800ed04:	af04      	add	r7, sp, #16

	printf("Station Name:%s\n",EI_data.STN_NAME);
 800ed06:	496f      	ldr	r1, [pc, #444]	; (800eec4 <print_self_DetailsSiemens+0x1c4>)
 800ed08:	486f      	ldr	r0, [pc, #444]	; (800eec8 <print_self_DetailsSiemens+0x1c8>)
 800ed0a:	f013 fef7 	bl	8022afc <iprintf>
	printf("No of IPS:%u\n",EI_data.Siemens_st.No_of_IP_s);
 800ed0e:	4b6f      	ldr	r3, [pc, #444]	; (800eecc <print_self_DetailsSiemens+0x1cc>)
 800ed10:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ed14:	4619      	mov	r1, r3
 800ed16:	486e      	ldr	r0, [pc, #440]	; (800eed0 <print_self_DetailsSiemens+0x1d0>)
 800ed18:	f013 fef0 	bl	8022afc <iprintf>
	printf("Self IP:%u.%u.%u.%u\n",EI_data.Siemens_st.Self_IP[CARD_INDEX][0],EI_data.Siemens_st.Self_IP[CARD_INDEX][1],EI_data.Siemens_st.Self_IP[CARD_INDEX][2],EI_data.Siemens_st.Self_IP[CARD_INDEX][3]);
 800ed1c:	4b6b      	ldr	r3, [pc, #428]	; (800eecc <print_self_DetailsSiemens+0x1cc>)
 800ed1e:	f893 32a5 	ldrb.w	r3, [r3, #677]	; 0x2a5
 800ed22:	4619      	mov	r1, r3
 800ed24:	4b69      	ldr	r3, [pc, #420]	; (800eecc <print_self_DetailsSiemens+0x1cc>)
 800ed26:	f893 32a6 	ldrb.w	r3, [r3, #678]	; 0x2a6
 800ed2a:	461a      	mov	r2, r3
 800ed2c:	4b67      	ldr	r3, [pc, #412]	; (800eecc <print_self_DetailsSiemens+0x1cc>)
 800ed2e:	f893 32a7 	ldrb.w	r3, [r3, #679]	; 0x2a7
 800ed32:	4618      	mov	r0, r3
 800ed34:	4b65      	ldr	r3, [pc, #404]	; (800eecc <print_self_DetailsSiemens+0x1cc>)
 800ed36:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800ed3a:	9300      	str	r3, [sp, #0]
 800ed3c:	4603      	mov	r3, r0
 800ed3e:	4865      	ldr	r0, [pc, #404]	; (800eed4 <print_self_DetailsSiemens+0x1d4>)
 800ed40:	f013 fedc 	bl	8022afc <iprintf>
	printf("Self MAC:%02X-%02X-%02X-%02X-%02X-%02X\n",EI_data.Siemens_st.Self_MAC[CARD_INDEX][0],EI_data.Siemens_st.Self_MAC[CARD_INDEX][1],EI_data.Siemens_st.Self_MAC[CARD_INDEX][2],EI_data.Siemens_st.Self_MAC[CARD_INDEX][3],EI_data.Siemens_st.Self_MAC[CARD_INDEX][4],EI_data.Siemens_st.Self_MAC[CARD_INDEX][5]);
 800ed44:	4b61      	ldr	r3, [pc, #388]	; (800eecc <print_self_DetailsSiemens+0x1cc>)
 800ed46:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	4b5f      	ldr	r3, [pc, #380]	; (800eecc <print_self_DetailsSiemens+0x1cc>)
 800ed4e:	f893 32ae 	ldrb.w	r3, [r3, #686]	; 0x2ae
 800ed52:	461c      	mov	r4, r3
 800ed54:	4b5d      	ldr	r3, [pc, #372]	; (800eecc <print_self_DetailsSiemens+0x1cc>)
 800ed56:	f893 32af 	ldrb.w	r3, [r3, #687]	; 0x2af
 800ed5a:	461d      	mov	r5, r3
 800ed5c:	4b5b      	ldr	r3, [pc, #364]	; (800eecc <print_self_DetailsSiemens+0x1cc>)
 800ed5e:	f893 32b0 	ldrb.w	r3, [r3, #688]	; 0x2b0
 800ed62:	461a      	mov	r2, r3
 800ed64:	4b59      	ldr	r3, [pc, #356]	; (800eecc <print_self_DetailsSiemens+0x1cc>)
 800ed66:	f893 32b1 	ldrb.w	r3, [r3, #689]	; 0x2b1
 800ed6a:	4619      	mov	r1, r3
 800ed6c:	4b57      	ldr	r3, [pc, #348]	; (800eecc <print_self_DetailsSiemens+0x1cc>)
 800ed6e:	f893 32b2 	ldrb.w	r3, [r3, #690]	; 0x2b2
 800ed72:	9302      	str	r3, [sp, #8]
 800ed74:	9101      	str	r1, [sp, #4]
 800ed76:	9200      	str	r2, [sp, #0]
 800ed78:	462b      	mov	r3, r5
 800ed7a:	4622      	mov	r2, r4
 800ed7c:	4601      	mov	r1, r0
 800ed7e:	4856      	ldr	r0, [pc, #344]	; (800eed8 <print_self_DetailsSiemens+0x1d8>)
 800ed80:	f013 febc 	bl	8022afc <iprintf>
	printf("Self Listening Port:%u\n",EI_data.Siemens_st.Self_Listening_Port[CARD_INDEX]);
 800ed84:	4b51      	ldr	r3, [pc, #324]	; (800eecc <print_self_DetailsSiemens+0x1cc>)
 800ed86:	f8b3 32da 	ldrh.w	r3, [r3, #730]	; 0x2da
 800ed8a:	4619      	mov	r1, r3
 800ed8c:	4853      	ldr	r0, [pc, #332]	; (800eedc <print_self_DetailsSiemens+0x1dc>)
 800ed8e:	f013 feb5 	bl	8022afc <iprintf>

	for(uint8_t i=0;i<EI_data.Siemens_st.No_of_IP_s;++i)
 800ed92:	2300      	movs	r3, #0
 800ed94:	71fb      	strb	r3, [r7, #7]
 800ed96:	e037      	b.n	800ee08 <print_self_DetailsSiemens+0x108>
	{
		printf("IP[%u]:%u.%u.%u.%u\n",i+1,EI_data.Siemens_st.Source_IP[CARD_INDEX][i][0],EI_data.Siemens_st.Source_IP[CARD_INDEX][i][1],EI_data.Siemens_st.Source_IP[CARD_INDEX][i][2],EI_data.Siemens_st.Source_IP[CARD_INDEX][i][3]);
 800ed98:	79fb      	ldrb	r3, [r7, #7]
 800ed9a:	1c59      	adds	r1, r3, #1
 800ed9c:	79fb      	ldrb	r3, [r7, #7]
 800ed9e:	4a4b      	ldr	r2, [pc, #300]	; (800eecc <print_self_DetailsSiemens+0x1cc>)
 800eda0:	33ae      	adds	r3, #174	; 0xae
 800eda2:	009b      	lsls	r3, r3, #2
 800eda4:	4413      	add	r3, r2
 800eda6:	785b      	ldrb	r3, [r3, #1]
 800eda8:	461c      	mov	r4, r3
 800edaa:	79fb      	ldrb	r3, [r7, #7]
 800edac:	4a47      	ldr	r2, [pc, #284]	; (800eecc <print_self_DetailsSiemens+0x1cc>)
 800edae:	009b      	lsls	r3, r3, #2
 800edb0:	4413      	add	r3, r2
 800edb2:	f893 32ba 	ldrb.w	r3, [r3, #698]	; 0x2ba
 800edb6:	461d      	mov	r5, r3
 800edb8:	79fb      	ldrb	r3, [r7, #7]
 800edba:	4a44      	ldr	r2, [pc, #272]	; (800eecc <print_self_DetailsSiemens+0x1cc>)
 800edbc:	009b      	lsls	r3, r3, #2
 800edbe:	4413      	add	r3, r2
 800edc0:	f893 32bb 	ldrb.w	r3, [r3, #699]	; 0x2bb
 800edc4:	4618      	mov	r0, r3
 800edc6:	79fb      	ldrb	r3, [r7, #7]
 800edc8:	4a40      	ldr	r2, [pc, #256]	; (800eecc <print_self_DetailsSiemens+0x1cc>)
 800edca:	009b      	lsls	r3, r3, #2
 800edcc:	4413      	add	r3, r2
 800edce:	f893 32bc 	ldrb.w	r3, [r3, #700]	; 0x2bc
 800edd2:	9301      	str	r3, [sp, #4]
 800edd4:	9000      	str	r0, [sp, #0]
 800edd6:	462b      	mov	r3, r5
 800edd8:	4622      	mov	r2, r4
 800edda:	4841      	ldr	r0, [pc, #260]	; (800eee0 <print_self_DetailsSiemens+0x1e0>)
 800eddc:	f013 fe8e 	bl	8022afc <iprintf>
		printf("Dest Port-TX:%u-RX:%u\n",EI_data.Siemens_st.PORTS[CARD_INDEX][i][TX_PORT],EI_data.Siemens_st.PORTS[CARD_INDEX][i][RX_PORT]);
 800ede0:	79fb      	ldrb	r3, [r7, #7]
 800ede2:	4a3a      	ldr	r2, [pc, #232]	; (800eecc <print_self_DetailsSiemens+0x1cc>)
 800ede4:	33b6      	adds	r3, #182	; 0xb6
 800ede6:	009b      	lsls	r3, r3, #2
 800ede8:	4413      	add	r3, r2
 800edea:	88db      	ldrh	r3, [r3, #6]
 800edec:	4619      	mov	r1, r3
 800edee:	79fb      	ldrb	r3, [r7, #7]
 800edf0:	4a36      	ldr	r2, [pc, #216]	; (800eecc <print_self_DetailsSiemens+0x1cc>)
 800edf2:	009b      	lsls	r3, r3, #2
 800edf4:	4413      	add	r3, r2
 800edf6:	f8b3 32e0 	ldrh.w	r3, [r3, #736]	; 0x2e0
 800edfa:	461a      	mov	r2, r3
 800edfc:	4839      	ldr	r0, [pc, #228]	; (800eee4 <print_self_DetailsSiemens+0x1e4>)
 800edfe:	f013 fe7d 	bl	8022afc <iprintf>
	for(uint8_t i=0;i<EI_data.Siemens_st.No_of_IP_s;++i)
 800ee02:	79fb      	ldrb	r3, [r7, #7]
 800ee04:	3301      	adds	r3, #1
 800ee06:	71fb      	strb	r3, [r7, #7]
 800ee08:	4b30      	ldr	r3, [pc, #192]	; (800eecc <print_self_DetailsSiemens+0x1cc>)
 800ee0a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ee0e:	79fa      	ldrb	r2, [r7, #7]
 800ee10:	429a      	cmp	r2, r3
 800ee12:	d3c1      	bcc.n	800ed98 <print_self_DetailsSiemens+0x98>
	}
	printf("DestSysType:%u\n",EI_data.Siemens_st.DestSysType);
 800ee14:	4b2d      	ldr	r3, [pc, #180]	; (800eecc <print_self_DetailsSiemens+0x1cc>)
 800ee16:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 800ee1a:	4619      	mov	r1, r3
 800ee1c:	4832      	ldr	r0, [pc, #200]	; (800eee8 <print_self_DetailsSiemens+0x1e8>)
 800ee1e:	f013 fe6d 	bl	8022afc <iprintf>
	printf("SourceSysType:%u\n",EI_data.Siemens_st.SourceSysType);
 800ee22:	4b2a      	ldr	r3, [pc, #168]	; (800eecc <print_self_DetailsSiemens+0x1cc>)
 800ee24:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
 800ee28:	4619      	mov	r1, r3
 800ee2a:	4830      	ldr	r0, [pc, #192]	; (800eeec <print_self_DetailsSiemens+0x1ec>)
 800ee2c:	f013 fe66 	bl	8022afc <iprintf>
	printf("SourceAddress:%lu\n",EI_data.Siemens_st.SourceAddress);
 800ee30:	4b26      	ldr	r3, [pc, #152]	; (800eecc <print_self_DetailsSiemens+0x1cc>)
 800ee32:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ee36:	4619      	mov	r1, r3
 800ee38:	482d      	ldr	r0, [pc, #180]	; (800eef0 <print_self_DetailsSiemens+0x1f0>)
 800ee3a:	f013 fe5f 	bl	8022afc <iprintf>
	printf("SourceAddress:%lu\n",EI_data.Siemens_st.DestAddress);
 800ee3e:	4b23      	ldr	r3, [pc, #140]	; (800eecc <print_self_DetailsSiemens+0x1cc>)
 800ee40:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 800ee44:	4619      	mov	r1, r3
 800ee46:	482a      	ldr	r0, [pc, #168]	; (800eef0 <print_self_DetailsSiemens+0x1f0>)
 800ee48:	f013 fe58 	bl	8022afc <iprintf>
	printf("DestPort:%u\n",EI_data.Siemens_st.DestPort);
 800ee4c:	4b1f      	ldr	r3, [pc, #124]	; (800eecc <print_self_DetailsSiemens+0x1cc>)
 800ee4e:	f893 32a3 	ldrb.w	r3, [r3, #675]	; 0x2a3
 800ee52:	4619      	mov	r1, r3
 800ee54:	4827      	ldr	r0, [pc, #156]	; (800eef4 <print_self_DetailsSiemens+0x1f4>)
 800ee56:	f013 fe51 	bl	8022afc <iprintf>
	printf("SourcePort:%u\n",EI_data.Siemens_st.SourcePort);
 800ee5a:	4b1c      	ldr	r3, [pc, #112]	; (800eecc <print_self_DetailsSiemens+0x1cc>)
 800ee5c:	f893 32a4 	ldrb.w	r3, [r3, #676]	; 0x2a4
 800ee60:	4619      	mov	r1, r3
 800ee62:	4825      	ldr	r0, [pc, #148]	; (800eef8 <print_self_DetailsSiemens+0x1f8>)
 800ee64:	f013 fe4a 	bl	8022afc <iprintf>
	printf("No of Inputs:%u\n",EI_data.Siemens_st.Booloutputs);
 800ee68:	4b18      	ldr	r3, [pc, #96]	; (800eecc <print_self_DetailsSiemens+0x1cc>)
 800ee6a:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800ee6e:	4619      	mov	r1, r3
 800ee70:	4822      	ldr	r0, [pc, #136]	; (800eefc <print_self_DetailsSiemens+0x1fc>)
 800ee72:	f013 fe43 	bl	8022afc <iprintf>

	printf("CAN_Xchange_Time:%lu\n",EI_data.Siemens_st.CAN_Xchange_Time);
 800ee76:	4b15      	ldr	r3, [pc, #84]	; (800eecc <print_self_DetailsSiemens+0x1cc>)
 800ee78:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 800ee7c:	4619      	mov	r1, r3
 800ee7e:	4820      	ldr	r0, [pc, #128]	; (800ef00 <print_self_DetailsSiemens+0x200>)
 800ee80:	f013 fe3c 	bl	8022afc <iprintf>
	printf("HEALTH_PACKET_TIME:%lu\n",EI_data.Siemens_st.HEALTH_PACKET_TIME);
 800ee84:	4b11      	ldr	r3, [pc, #68]	; (800eecc <print_self_DetailsSiemens+0x1cc>)
 800ee86:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800ee8a:	4619      	mov	r1, r3
 800ee8c:	481d      	ldr	r0, [pc, #116]	; (800ef04 <print_self_DetailsSiemens+0x204>)
 800ee8e:	f013 fe35 	bl	8022afc <iprintf>
	printf("COMM_FAILURE_TIME_OUT:%lu\n",EI_data.Siemens_st.COMM_FAILURE_TIME_OUT);
 800ee92:	4b0e      	ldr	r3, [pc, #56]	; (800eecc <print_self_DetailsSiemens+0x1cc>)
 800ee94:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 800ee98:	4619      	mov	r1, r3
 800ee9a:	481b      	ldr	r0, [pc, #108]	; (800ef08 <print_self_DetailsSiemens+0x208>)
 800ee9c:	f013 fe2e 	bl	8022afc <iprintf>
	printf("MIE_SIGNAL_SEND_CLK:%lu\n",EI_data.Siemens_st.MIE_SIGNAL_SEND_CLK);
 800eea0:	4b0a      	ldr	r3, [pc, #40]	; (800eecc <print_self_DetailsSiemens+0x1cc>)
 800eea2:	f8d3 3318 	ldr.w	r3, [r3, #792]	; 0x318
 800eea6:	4619      	mov	r1, r3
 800eea8:	4818      	ldr	r0, [pc, #96]	; (800ef0c <print_self_DetailsSiemens+0x20c>)
 800eeaa:	f013 fe27 	bl	8022afc <iprintf>
	printf("Max_NoRXTSUpdatedFailCount:%lu\n",EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount);
 800eeae:	4b07      	ldr	r3, [pc, #28]	; (800eecc <print_self_DetailsSiemens+0x1cc>)
 800eeb0:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800eeb4:	4619      	mov	r1, r3
 800eeb6:	4816      	ldr	r0, [pc, #88]	; (800ef10 <print_self_DetailsSiemens+0x210>)
 800eeb8:	f013 fe20 	bl	8022afc <iprintf>

}
 800eebc:	bf00      	nop
 800eebe:	3708      	adds	r7, #8
 800eec0:	46bd      	mov	sp, r7
 800eec2:	bdb0      	pop	{r4, r5, r7, pc}
 800eec4:	20000305 	.word	0x20000305
 800eec8:	08026c00 	.word	0x08026c00
 800eecc:	20000304 	.word	0x20000304
 800eed0:	08026c14 	.word	0x08026c14
 800eed4:	08026c24 	.word	0x08026c24
 800eed8:	08026c3c 	.word	0x08026c3c
 800eedc:	08026c64 	.word	0x08026c64
 800eee0:	08026c7c 	.word	0x08026c7c
 800eee4:	08026c90 	.word	0x08026c90
 800eee8:	08026ca8 	.word	0x08026ca8
 800eeec:	08026cb8 	.word	0x08026cb8
 800eef0:	08026ccc 	.word	0x08026ccc
 800eef4:	08026ce0 	.word	0x08026ce0
 800eef8:	08026cf0 	.word	0x08026cf0
 800eefc:	08026d00 	.word	0x08026d00
 800ef00:	08026d14 	.word	0x08026d14
 800ef04:	08026d2c 	.word	0x08026d2c
 800ef08:	08026d44 	.word	0x08026d44
 800ef0c:	08026d60 	.word	0x08026d60
 800ef10:	08026d7c 	.word	0x08026d7c

0800ef14 <HAL_Elaps_Ticks>:

#include "Headers.h"


uint32_t HAL_Elaps_Ticks(uint32_t Ticks)
{
 800ef14:	b580      	push	{r7, lr}
 800ef16:	b082      	sub	sp, #8
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	6078      	str	r0, [r7, #4]
	return abs( (HAL_GetTick()-Ticks) );
 800ef1c:	f006 fde4 	bl	8015ae8 <HAL_GetTick>
 800ef20:	4602      	mov	r2, r0
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	1ad3      	subs	r3, r2, r3
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	bfb8      	it	lt
 800ef2a:	425b      	neglt	r3, r3
}
 800ef2c:	4618      	mov	r0, r3
 800ef2e:	3708      	adds	r7, #8
 800ef30:	46bd      	mov	sp, r7
 800ef32:	bd80      	pop	{r7, pc}

0800ef34 <udpServer_init>:
struct udp_pcb *upcb;



void udpServer_init(void)
{
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b082      	sub	sp, #8
 800ef38:	af00      	add	r7, sp, #0

	ip_addr_t myIPADDR;
	err_t err = ERR_ABRT;
 800ef3a:	23f3      	movs	r3, #243	; 0xf3
 800ef3c:	71fb      	strb	r3, [r7, #7]

	upcb = udp_new();
 800ef3e:	f011 f8e7 	bl	8020110 <udp_new>
 800ef42:	4603      	mov	r3, r0
 800ef44:	4a7a      	ldr	r2, [pc, #488]	; (800f130 <udpServer_init+0x1fc>)
 800ef46:	6013      	str	r3, [r2, #0]

	switch(EI_data.ProtocolType)
 800ef48:	4b7a      	ldr	r3, [pc, #488]	; (800f134 <udpServer_init+0x200>)
 800ef4a:	781b      	ldrb	r3, [r3, #0]
 800ef4c:	2b01      	cmp	r3, #1
 800ef4e:	d002      	beq.n	800ef56 <udpServer_init+0x22>
 800ef50:	2b02      	cmp	r3, #2
 800ef52:	d074      	beq.n	800f03e <udpServer_init+0x10a>
			printf("N-OK\n");
			udp_remove(upcb);
		}
		break;
	default:
		return;
 800ef54:	e0e9      	b.n	800f12a <udpServer_init+0x1f6>
		IP_ADDR4(&myIPADDR, EI_data.Hitachi_st.Self_IP[CARD_INDEX][0], EI_data.Hitachi_st.Self_IP[CARD_INDEX][1], EI_data.Hitachi_st.Self_IP[CARD_INDEX][2], EI_data.Hitachi_st.Self_IP[CARD_INDEX][3]);
 800ef56:	4b77      	ldr	r3, [pc, #476]	; (800f134 <udpServer_init+0x200>)
 800ef58:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800ef5c:	061a      	lsls	r2, r3, #24
 800ef5e:	4b75      	ldr	r3, [pc, #468]	; (800f134 <udpServer_init+0x200>)
 800ef60:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ef64:	041b      	lsls	r3, r3, #16
 800ef66:	431a      	orrs	r2, r3
 800ef68:	4b72      	ldr	r3, [pc, #456]	; (800f134 <udpServer_init+0x200>)
 800ef6a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ef6e:	021b      	lsls	r3, r3, #8
 800ef70:	4313      	orrs	r3, r2
 800ef72:	4a70      	ldr	r2, [pc, #448]	; (800f134 <udpServer_init+0x200>)
 800ef74:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 800ef78:	4313      	orrs	r3, r2
 800ef7a:	061a      	lsls	r2, r3, #24
 800ef7c:	4b6d      	ldr	r3, [pc, #436]	; (800f134 <udpServer_init+0x200>)
 800ef7e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800ef82:	0619      	lsls	r1, r3, #24
 800ef84:	4b6b      	ldr	r3, [pc, #428]	; (800f134 <udpServer_init+0x200>)
 800ef86:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ef8a:	041b      	lsls	r3, r3, #16
 800ef8c:	4319      	orrs	r1, r3
 800ef8e:	4b69      	ldr	r3, [pc, #420]	; (800f134 <udpServer_init+0x200>)
 800ef90:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ef94:	021b      	lsls	r3, r3, #8
 800ef96:	430b      	orrs	r3, r1
 800ef98:	4966      	ldr	r1, [pc, #408]	; (800f134 <udpServer_init+0x200>)
 800ef9a:	f891 103a 	ldrb.w	r1, [r1, #58]	; 0x3a
 800ef9e:	430b      	orrs	r3, r1
 800efa0:	021b      	lsls	r3, r3, #8
 800efa2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800efa6:	431a      	orrs	r2, r3
 800efa8:	4b62      	ldr	r3, [pc, #392]	; (800f134 <udpServer_init+0x200>)
 800efaa:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800efae:	0619      	lsls	r1, r3, #24
 800efb0:	4b60      	ldr	r3, [pc, #384]	; (800f134 <udpServer_init+0x200>)
 800efb2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800efb6:	041b      	lsls	r3, r3, #16
 800efb8:	4319      	orrs	r1, r3
 800efba:	4b5e      	ldr	r3, [pc, #376]	; (800f134 <udpServer_init+0x200>)
 800efbc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800efc0:	021b      	lsls	r3, r3, #8
 800efc2:	430b      	orrs	r3, r1
 800efc4:	495b      	ldr	r1, [pc, #364]	; (800f134 <udpServer_init+0x200>)
 800efc6:	f891 103a 	ldrb.w	r1, [r1, #58]	; 0x3a
 800efca:	430b      	orrs	r3, r1
 800efcc:	0a1b      	lsrs	r3, r3, #8
 800efce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800efd2:	431a      	orrs	r2, r3
 800efd4:	4b57      	ldr	r3, [pc, #348]	; (800f134 <udpServer_init+0x200>)
 800efd6:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800efda:	0619      	lsls	r1, r3, #24
 800efdc:	4b55      	ldr	r3, [pc, #340]	; (800f134 <udpServer_init+0x200>)
 800efde:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800efe2:	041b      	lsls	r3, r3, #16
 800efe4:	4319      	orrs	r1, r3
 800efe6:	4b53      	ldr	r3, [pc, #332]	; (800f134 <udpServer_init+0x200>)
 800efe8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800efec:	021b      	lsls	r3, r3, #8
 800efee:	430b      	orrs	r3, r1
 800eff0:	4950      	ldr	r1, [pc, #320]	; (800f134 <udpServer_init+0x200>)
 800eff2:	f891 103a 	ldrb.w	r1, [r1, #58]	; 0x3a
 800eff6:	430b      	orrs	r3, r1
 800eff8:	0e1b      	lsrs	r3, r3, #24
 800effa:	4313      	orrs	r3, r2
 800effc:	603b      	str	r3, [r7, #0]
		err = udp_bind(upcb, &myIPADDR, EI_data.Hitachi_st.Self_Listening_Port[CARD_INDEX]);  // 7 is the server UDP port
 800effe:	4b4c      	ldr	r3, [pc, #304]	; (800f130 <udpServer_init+0x1fc>)
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	4a4c      	ldr	r2, [pc, #304]	; (800f134 <udpServer_init+0x200>)
 800f004:	f8b2 20f6 	ldrh.w	r2, [r2, #246]	; 0xf6
 800f008:	4639      	mov	r1, r7
 800f00a:	4618      	mov	r0, r3
 800f00c:	f010 ff96 	bl	801ff3c <udp_bind>
 800f010:	4603      	mov	r3, r0
 800f012:	71fb      	strb	r3, [r7, #7]
		if(err == ERR_OK)
 800f014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d107      	bne.n	800f02c <udpServer_init+0xf8>
			udp_recv(upcb, UDP_Receive_Callback, NULL);
 800f01c:	4b44      	ldr	r3, [pc, #272]	; (800f130 <udpServer_init+0x1fc>)
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	2200      	movs	r2, #0
 800f022:	4945      	ldr	r1, [pc, #276]	; (800f138 <udpServer_init+0x204>)
 800f024:	4618      	mov	r0, r3
 800f026:	f011 f811 	bl	802004c <udp_recv>
		break;
 800f02a:	e07c      	b.n	800f126 <udpServer_init+0x1f2>
			printf("N-OK\n");
 800f02c:	4843      	ldr	r0, [pc, #268]	; (800f13c <udpServer_init+0x208>)
 800f02e:	f013 fe01 	bl	8022c34 <puts>
			udp_remove(upcb);
 800f032:	4b3f      	ldr	r3, [pc, #252]	; (800f130 <udpServer_init+0x1fc>)
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	4618      	mov	r0, r3
 800f038:	f011 f828 	bl	802008c <udp_remove>
		break;
 800f03c:	e073      	b.n	800f126 <udpServer_init+0x1f2>
		IP_ADDR4(&myIPADDR, EI_data.Siemens_st.Self_IP[CARD_INDEX][0], EI_data.Siemens_st.Self_IP[CARD_INDEX][1], EI_data.Siemens_st.Self_IP[CARD_INDEX][2], EI_data.Siemens_st.Self_IP[CARD_INDEX][3]);
 800f03e:	4b3d      	ldr	r3, [pc, #244]	; (800f134 <udpServer_init+0x200>)
 800f040:	f893 32a5 	ldrb.w	r3, [r3, #677]	; 0x2a5
 800f044:	061a      	lsls	r2, r3, #24
 800f046:	4b3b      	ldr	r3, [pc, #236]	; (800f134 <udpServer_init+0x200>)
 800f048:	f893 32a6 	ldrb.w	r3, [r3, #678]	; 0x2a6
 800f04c:	041b      	lsls	r3, r3, #16
 800f04e:	431a      	orrs	r2, r3
 800f050:	4b38      	ldr	r3, [pc, #224]	; (800f134 <udpServer_init+0x200>)
 800f052:	f893 32a7 	ldrb.w	r3, [r3, #679]	; 0x2a7
 800f056:	021b      	lsls	r3, r3, #8
 800f058:	4313      	orrs	r3, r2
 800f05a:	4a36      	ldr	r2, [pc, #216]	; (800f134 <udpServer_init+0x200>)
 800f05c:	f892 22a8 	ldrb.w	r2, [r2, #680]	; 0x2a8
 800f060:	4313      	orrs	r3, r2
 800f062:	061a      	lsls	r2, r3, #24
 800f064:	4b33      	ldr	r3, [pc, #204]	; (800f134 <udpServer_init+0x200>)
 800f066:	f893 32a5 	ldrb.w	r3, [r3, #677]	; 0x2a5
 800f06a:	0619      	lsls	r1, r3, #24
 800f06c:	4b31      	ldr	r3, [pc, #196]	; (800f134 <udpServer_init+0x200>)
 800f06e:	f893 32a6 	ldrb.w	r3, [r3, #678]	; 0x2a6
 800f072:	041b      	lsls	r3, r3, #16
 800f074:	4319      	orrs	r1, r3
 800f076:	4b2f      	ldr	r3, [pc, #188]	; (800f134 <udpServer_init+0x200>)
 800f078:	f893 32a7 	ldrb.w	r3, [r3, #679]	; 0x2a7
 800f07c:	021b      	lsls	r3, r3, #8
 800f07e:	430b      	orrs	r3, r1
 800f080:	492c      	ldr	r1, [pc, #176]	; (800f134 <udpServer_init+0x200>)
 800f082:	f891 12a8 	ldrb.w	r1, [r1, #680]	; 0x2a8
 800f086:	430b      	orrs	r3, r1
 800f088:	021b      	lsls	r3, r3, #8
 800f08a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f08e:	431a      	orrs	r2, r3
 800f090:	4b28      	ldr	r3, [pc, #160]	; (800f134 <udpServer_init+0x200>)
 800f092:	f893 32a5 	ldrb.w	r3, [r3, #677]	; 0x2a5
 800f096:	0619      	lsls	r1, r3, #24
 800f098:	4b26      	ldr	r3, [pc, #152]	; (800f134 <udpServer_init+0x200>)
 800f09a:	f893 32a6 	ldrb.w	r3, [r3, #678]	; 0x2a6
 800f09e:	041b      	lsls	r3, r3, #16
 800f0a0:	4319      	orrs	r1, r3
 800f0a2:	4b24      	ldr	r3, [pc, #144]	; (800f134 <udpServer_init+0x200>)
 800f0a4:	f893 32a7 	ldrb.w	r3, [r3, #679]	; 0x2a7
 800f0a8:	021b      	lsls	r3, r3, #8
 800f0aa:	430b      	orrs	r3, r1
 800f0ac:	4921      	ldr	r1, [pc, #132]	; (800f134 <udpServer_init+0x200>)
 800f0ae:	f891 12a8 	ldrb.w	r1, [r1, #680]	; 0x2a8
 800f0b2:	430b      	orrs	r3, r1
 800f0b4:	0a1b      	lsrs	r3, r3, #8
 800f0b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f0ba:	431a      	orrs	r2, r3
 800f0bc:	4b1d      	ldr	r3, [pc, #116]	; (800f134 <udpServer_init+0x200>)
 800f0be:	f893 32a5 	ldrb.w	r3, [r3, #677]	; 0x2a5
 800f0c2:	0619      	lsls	r1, r3, #24
 800f0c4:	4b1b      	ldr	r3, [pc, #108]	; (800f134 <udpServer_init+0x200>)
 800f0c6:	f893 32a6 	ldrb.w	r3, [r3, #678]	; 0x2a6
 800f0ca:	041b      	lsls	r3, r3, #16
 800f0cc:	4319      	orrs	r1, r3
 800f0ce:	4b19      	ldr	r3, [pc, #100]	; (800f134 <udpServer_init+0x200>)
 800f0d0:	f893 32a7 	ldrb.w	r3, [r3, #679]	; 0x2a7
 800f0d4:	021b      	lsls	r3, r3, #8
 800f0d6:	430b      	orrs	r3, r1
 800f0d8:	4916      	ldr	r1, [pc, #88]	; (800f134 <udpServer_init+0x200>)
 800f0da:	f891 12a8 	ldrb.w	r1, [r1, #680]	; 0x2a8
 800f0de:	430b      	orrs	r3, r1
 800f0e0:	0e1b      	lsrs	r3, r3, #24
 800f0e2:	4313      	orrs	r3, r2
 800f0e4:	603b      	str	r3, [r7, #0]
		err = udp_bind(upcb, &myIPADDR, EI_data.Siemens_st.Self_Listening_Port[CARD_INDEX]);  // 7 is the server UDP port
 800f0e6:	4b12      	ldr	r3, [pc, #72]	; (800f130 <udpServer_init+0x1fc>)
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	4a12      	ldr	r2, [pc, #72]	; (800f134 <udpServer_init+0x200>)
 800f0ec:	f8b2 22da 	ldrh.w	r2, [r2, #730]	; 0x2da
 800f0f0:	4639      	mov	r1, r7
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	f010 ff22 	bl	801ff3c <udp_bind>
 800f0f8:	4603      	mov	r3, r0
 800f0fa:	71fb      	strb	r3, [r7, #7]
		if(err == ERR_OK)
 800f0fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f100:	2b00      	cmp	r3, #0
 800f102:	d107      	bne.n	800f114 <udpServer_init+0x1e0>
			udp_recv(upcb, UDP_Receive_Callback, NULL);
 800f104:	4b0a      	ldr	r3, [pc, #40]	; (800f130 <udpServer_init+0x1fc>)
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	2200      	movs	r2, #0
 800f10a:	490b      	ldr	r1, [pc, #44]	; (800f138 <udpServer_init+0x204>)
 800f10c:	4618      	mov	r0, r3
 800f10e:	f010 ff9d 	bl	802004c <udp_recv>
		break;
 800f112:	e007      	b.n	800f124 <udpServer_init+0x1f0>
			printf("N-OK\n");
 800f114:	4809      	ldr	r0, [pc, #36]	; (800f13c <udpServer_init+0x208>)
 800f116:	f013 fd8d 	bl	8022c34 <puts>
			udp_remove(upcb);
 800f11a:	4b05      	ldr	r3, [pc, #20]	; (800f130 <udpServer_init+0x1fc>)
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	4618      	mov	r0, r3
 800f120:	f010 ffb4 	bl	802008c <udp_remove>
		break;
 800f124:	bf00      	nop
	}

	udpClient_connect();
 800f126:	f000 f913 	bl	800f350 <udpClient_connect>
	//	//	{
	//	//		printf("N-OK\n");
	//	//		udp_remove(upcb);
	//	//	}
	//	//	udpClient_connect();
}
 800f12a:	3708      	adds	r7, #8
 800f12c:	46bd      	mov	sp, r7
 800f12e:	bd80      	pop	{r7, pc}
 800f130:	200052e0 	.word	0x200052e0
 800f134:	20000304 	.word	0x20000304
 800f138:	0800f141 	.word	0x0800f141
 800f13c:	08026d9c 	.word	0x08026d9c

0800f140 <UDP_Receive_Callback>:

void UDP_Receive_Callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800f140:	b580      	push	{r7, lr}
 800f142:	b086      	sub	sp, #24
 800f144:	af00      	add	r7, sp, #0
 800f146:	60f8      	str	r0, [r7, #12]
 800f148:	60b9      	str	r1, [r7, #8]
 800f14a:	607a      	str	r2, [r7, #4]
 800f14c:	603b      	str	r3, [r7, #0]
	uint8_t Traverser = 0;
 800f14e:	2300      	movs	r3, #0
 800f150:	75fb      	strb	r3, [r7, #23]
	uint16_t Length = 0;
 800f152:	2300      	movs	r3, #0
 800f154:	82bb      	strh	r3, [r7, #20]
	uint8_t IpMatched = 0;
 800f156:	2300      	movs	r3, #0
 800f158:	75bb      	strb	r3, [r7, #22]
#if INTR_SOURCE_DETECT
	uint16_t Src_adrr = 0;
	uint8_t Get_src[4] = {0,0},Modified_data[4] = {0,};
#endif

	Source_IP = *addr;
 800f15a:	4a72      	ldr	r2, [pc, #456]	; (800f324 <UDP_Receive_Callback+0x1e4>)
 800f15c:	683b      	ldr	r3, [r7, #0]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	6013      	str	r3, [r2, #0]
	Length = p->len;
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	895b      	ldrh	r3, [r3, #10]
 800f166:	82bb      	strh	r3, [r7, #20]
	switch(EI_data.ProtocolType)
 800f168:	4b6f      	ldr	r3, [pc, #444]	; (800f328 <UDP_Receive_Callback+0x1e8>)
 800f16a:	781b      	ldrb	r3, [r3, #0]
 800f16c:	2b01      	cmp	r3, #1
 800f16e:	d032      	beq.n	800f1d6 <UDP_Receive_Callback+0x96>
 800f170:	2b02      	cmp	r3, #2
 800f172:	d049      	beq.n	800f208 <UDP_Receive_Callback+0xc8>
 800f174:	e06d      	b.n	800f252 <UDP_Receive_Callback+0x112>
	{

	case HITACHI:
		for(;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
		{
			if( (Source_IP.addr) == (remote_ip[Traverser].addr) )
 800f176:	4b6b      	ldr	r3, [pc, #428]	; (800f324 <UDP_Receive_Callback+0x1e4>)
 800f178:	681a      	ldr	r2, [r3, #0]
 800f17a:	7dfb      	ldrb	r3, [r7, #23]
 800f17c:	496b      	ldr	r1, [pc, #428]	; (800f32c <UDP_Receive_Callback+0x1ec>)
 800f17e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800f182:	429a      	cmp	r2, r3
 800f184:	d124      	bne.n	800f1d0 <UDP_Receive_Callback+0x90>
			{
				if(IpMatched == 0)
 800f186:	7dbb      	ldrb	r3, [r7, #22]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d10d      	bne.n	800f1a8 <UDP_Receive_Callback+0x68>
				{
					if(Debug_flag == 1)
 800f18c:	4b68      	ldr	r3, [pc, #416]	; (800f330 <UDP_Receive_Callback+0x1f0>)
 800f18e:	781b      	ldrb	r3, [r3, #0]
 800f190:	2b01      	cmp	r3, #1
 800f192:	d107      	bne.n	800f1a4 <UDP_Receive_Callback+0x64>
					{
						printf("\nFromIP:%s\n",ipaddr_ntoa(addr));
 800f194:	6838      	ldr	r0, [r7, #0]
 800f196:	f012 fbb9 	bl	802190c <ip4addr_ntoa>
 800f19a:	4603      	mov	r3, r0
 800f19c:	4619      	mov	r1, r3
 800f19e:	4865      	ldr	r0, [pc, #404]	; (800f334 <UDP_Receive_Callback+0x1f4>)
 800f1a0:	f013 fcac 	bl	8022afc <iprintf>
					}
					IpMatched = 1;
 800f1a4:	2301      	movs	r3, #1
 800f1a6:	75bb      	strb	r3, [r7, #22]
				}
				Recv_IP_List[Traverser/2] = *addr;
 800f1a8:	7dfb      	ldrb	r3, [r7, #23]
 800f1aa:	085b      	lsrs	r3, r3, #1
 800f1ac:	b2db      	uxtb	r3, r3
 800f1ae:	4619      	mov	r1, r3
 800f1b0:	4a61      	ldr	r2, [pc, #388]	; (800f338 <UDP_Receive_Callback+0x1f8>)
 800f1b2:	683b      	ldr	r3, [r7, #0]
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				Recv_IP_Index[Traverser/2] = (Traverser%2) + 1;
 800f1ba:	7dfb      	ldrb	r3, [r7, #23]
 800f1bc:	f003 0301 	and.w	r3, r3, #1
 800f1c0:	b2db      	uxtb	r3, r3
 800f1c2:	7dfa      	ldrb	r2, [r7, #23]
 800f1c4:	0852      	lsrs	r2, r2, #1
 800f1c6:	b2d2      	uxtb	r2, r2
 800f1c8:	3301      	adds	r3, #1
 800f1ca:	b2d9      	uxtb	r1, r3
 800f1cc:	4b5b      	ldr	r3, [pc, #364]	; (800f33c <UDP_Receive_Callback+0x1fc>)
 800f1ce:	5499      	strb	r1, [r3, r2]
		for(;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 800f1d0:	7dfb      	ldrb	r3, [r7, #23]
 800f1d2:	3301      	adds	r3, #1
 800f1d4:	75fb      	strb	r3, [r7, #23]
 800f1d6:	4b54      	ldr	r3, [pc, #336]	; (800f328 <UDP_Receive_Callback+0x1e8>)
 800f1d8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800f1dc:	7dfa      	ldrb	r2, [r7, #23]
 800f1de:	429a      	cmp	r2, r3
 800f1e0:	d3c9      	bcc.n	800f176 <UDP_Receive_Callback+0x36>
				//break;
			}
		}
		if(Traverser>EI_data.Hitachi_st.No_of_IP_s)
 800f1e2:	4b51      	ldr	r3, [pc, #324]	; (800f328 <UDP_Receive_Callback+0x1e8>)
 800f1e4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800f1e8:	7dfa      	ldrb	r2, [r7, #23]
 800f1ea:	429a      	cmp	r2, r3
 800f1ec:	d935      	bls.n	800f25a <UDP_Receive_Callback+0x11a>
		{
			pbuf_free(p);
 800f1ee:	6878      	ldr	r0, [r7, #4]
 800f1f0:	f00f ff4c 	bl	801f08c <pbuf_free>
			printf("\nPacket Rejected-Unknown IP:%s !\nIndex:%u\n",ipaddr_ntoa(addr),Traverser);
 800f1f4:	6838      	ldr	r0, [r7, #0]
 800f1f6:	f012 fb89 	bl	802190c <ip4addr_ntoa>
 800f1fa:	4601      	mov	r1, r0
 800f1fc:	7dfb      	ldrb	r3, [r7, #23]
 800f1fe:	461a      	mov	r2, r3
 800f200:	484f      	ldr	r0, [pc, #316]	; (800f340 <UDP_Receive_Callback+0x200>)
 800f202:	f013 fc7b 	bl	8022afc <iprintf>
			return;
 800f206:	e08a      	b.n	800f31e <UDP_Receive_Callback+0x1de>
		}
		break;
	case SIEMENS:
		for(Traverser = 0;Traverser<EI_data.Siemens_st.No_of_IP_s;++Traverser)
 800f208:	2300      	movs	r3, #0
 800f20a:	75fb      	strb	r3, [r7, #23]
 800f20c:	e00a      	b.n	800f224 <UDP_Receive_Callback+0xe4>
		{
			if( (Source_IP.addr) == (remote_ip[Traverser].addr) )
 800f20e:	4b45      	ldr	r3, [pc, #276]	; (800f324 <UDP_Receive_Callback+0x1e4>)
 800f210:	681a      	ldr	r2, [r3, #0]
 800f212:	7dfb      	ldrb	r3, [r7, #23]
 800f214:	4945      	ldr	r1, [pc, #276]	; (800f32c <UDP_Receive_Callback+0x1ec>)
 800f216:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800f21a:	429a      	cmp	r2, r3
 800f21c:	d009      	beq.n	800f232 <UDP_Receive_Callback+0xf2>
		for(Traverser = 0;Traverser<EI_data.Siemens_st.No_of_IP_s;++Traverser)
 800f21e:	7dfb      	ldrb	r3, [r7, #23]
 800f220:	3301      	adds	r3, #1
 800f222:	75fb      	strb	r3, [r7, #23]
 800f224:	4b40      	ldr	r3, [pc, #256]	; (800f328 <UDP_Receive_Callback+0x1e8>)
 800f226:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800f22a:	7dfa      	ldrb	r2, [r7, #23]
 800f22c:	429a      	cmp	r2, r3
 800f22e:	d3ee      	bcc.n	800f20e <UDP_Receive_Callback+0xce>
 800f230:	e000      	b.n	800f234 <UDP_Receive_Callback+0xf4>
			{
				break;
 800f232:	bf00      	nop
			}
		}
		if(Traverser>EI_data.Siemens_st.No_of_IP_s)
 800f234:	4b3c      	ldr	r3, [pc, #240]	; (800f328 <UDP_Receive_Callback+0x1e8>)
 800f236:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800f23a:	7dfa      	ldrb	r2, [r7, #23]
 800f23c:	429a      	cmp	r2, r3
 800f23e:	d90e      	bls.n	800f25e <UDP_Receive_Callback+0x11e>
		{
			pbuf_free(p);
 800f240:	6878      	ldr	r0, [r7, #4]
 800f242:	f00f ff23 	bl	801f08c <pbuf_free>
			printf("\nPacket Rejected-Unknown IP!\nIndex:%u\n",Traverser);
 800f246:	7dfb      	ldrb	r3, [r7, #23]
 800f248:	4619      	mov	r1, r3
 800f24a:	483e      	ldr	r0, [pc, #248]	; (800f344 <UDP_Receive_Callback+0x204>)
 800f24c:	f013 fc56 	bl	8022afc <iprintf>
			return;
 800f250:	e065      	b.n	800f31e <UDP_Receive_Callback+0x1de>
		}
		break;
	default:
		pbuf_free(p);
 800f252:	6878      	ldr	r0, [r7, #4]
 800f254:	f00f ff1a 	bl	801f08c <pbuf_free>
		return;
 800f258:	e061      	b.n	800f31e <UDP_Receive_Callback+0x1de>
		break;
 800f25a:	bf00      	nop
 800f25c:	e000      	b.n	800f260 <UDP_Receive_Callback+0x120>
		break;
 800f25e:	bf00      	nop
	}

	switch(EI_data.ProtocolType)
 800f260:	4b31      	ldr	r3, [pc, #196]	; (800f328 <UDP_Receive_Callback+0x1e8>)
 800f262:	781b      	ldrb	r3, [r3, #0]
 800f264:	2b01      	cmp	r3, #1
 800f266:	d002      	beq.n	800f26e <UDP_Receive_Callback+0x12e>
 800f268:	2b02      	cmp	r3, #2
 800f26a:	d049      	beq.n	800f300 <UDP_Receive_Callback+0x1c0>
		Ethernet_Circle_buff_st.Write_end = Length;
		break;

	default:
		/* Do Nothing */
		break;
 800f26c:	e054      	b.n	800f318 <UDP_Receive_Callback+0x1d8>
		Interrupt_clock = HAL_GetTick();
 800f26e:	f006 fc3b 	bl	8015ae8 <HAL_GetTick>
 800f272:	4603      	mov	r3, r0
 800f274:	4a34      	ldr	r2, [pc, #208]	; (800f348 <UDP_Receive_Callback+0x208>)
 800f276:	6013      	str	r3, [r2, #0]
		if( (Ethernet_Circle_buff_st.Write_end + Length ) > ETH_MAX_SIZE)
 800f278:	4b34      	ldr	r3, [pc, #208]	; (800f34c <UDP_Receive_Callback+0x20c>)
 800f27a:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800f27e:	461a      	mov	r2, r3
 800f280:	8abb      	ldrh	r3, [r7, #20]
 800f282:	4413      	add	r3, r2
 800f284:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800f288:	dd24      	ble.n	800f2d4 <UDP_Receive_Callback+0x194>
			uint16_t Packets_to_copy_1 = (ETH_MAX_SIZE -Ethernet_Circle_buff_st.Write_end);
 800f28a:	4b30      	ldr	r3, [pc, #192]	; (800f34c <UDP_Receive_Callback+0x20c>)
 800f28c:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800f290:	f5c3 63c0 	rsb	r3, r3, #1536	; 0x600
 800f294:	827b      	strh	r3, [r7, #18]
			memcpy(&Ethernet_Circle_buff_st.Ethernet_Buffers[Ethernet_Circle_buff_st.Write_end],(char *)p->payload,Packets_to_copy_1);
 800f296:	4b2d      	ldr	r3, [pc, #180]	; (800f34c <UDP_Receive_Callback+0x20c>)
 800f298:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800f29c:	461a      	mov	r2, r3
 800f29e:	4b2b      	ldr	r3, [pc, #172]	; (800f34c <UDP_Receive_Callback+0x20c>)
 800f2a0:	18d0      	adds	r0, r2, r3
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	685b      	ldr	r3, [r3, #4]
 800f2a6:	8a7a      	ldrh	r2, [r7, #18]
 800f2a8:	4619      	mov	r1, r3
 800f2aa:	f013 fb17 	bl	80228dc <memcpy>
			memcpy(&Ethernet_Circle_buff_st.Ethernet_Buffers[0],&((char *)p->payload)[Packets_to_copy_1],(Length-Packets_to_copy_1));
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	685a      	ldr	r2, [r3, #4]
 800f2b2:	8a7b      	ldrh	r3, [r7, #18]
 800f2b4:	18d1      	adds	r1, r2, r3
 800f2b6:	8aba      	ldrh	r2, [r7, #20]
 800f2b8:	8a7b      	ldrh	r3, [r7, #18]
 800f2ba:	1ad3      	subs	r3, r2, r3
 800f2bc:	461a      	mov	r2, r3
 800f2be:	4823      	ldr	r0, [pc, #140]	; (800f34c <UDP_Receive_Callback+0x20c>)
 800f2c0:	f013 fb0c 	bl	80228dc <memcpy>
			Ethernet_Circle_buff_st.Write_end = (Length-Packets_to_copy_1);
 800f2c4:	8aba      	ldrh	r2, [r7, #20]
 800f2c6:	8a7b      	ldrh	r3, [r7, #18]
 800f2c8:	1ad3      	subs	r3, r2, r3
 800f2ca:	b29a      	uxth	r2, r3
 800f2cc:	4b1f      	ldr	r3, [pc, #124]	; (800f34c <UDP_Receive_Callback+0x20c>)
 800f2ce:	f8a3 2602 	strh.w	r2, [r3, #1538]	; 0x602
		break;
 800f2d2:	e021      	b.n	800f318 <UDP_Receive_Callback+0x1d8>
			memcpy(&Ethernet_Circle_buff_st.Ethernet_Buffers[Ethernet_Circle_buff_st.Write_end],(char *)p->payload,Length);
 800f2d4:	4b1d      	ldr	r3, [pc, #116]	; (800f34c <UDP_Receive_Callback+0x20c>)
 800f2d6:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800f2da:	461a      	mov	r2, r3
 800f2dc:	4b1b      	ldr	r3, [pc, #108]	; (800f34c <UDP_Receive_Callback+0x20c>)
 800f2de:	18d0      	adds	r0, r2, r3
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	685b      	ldr	r3, [r3, #4]
 800f2e4:	8aba      	ldrh	r2, [r7, #20]
 800f2e6:	4619      	mov	r1, r3
 800f2e8:	f013 faf8 	bl	80228dc <memcpy>
			Ethernet_Circle_buff_st.Write_end = (Ethernet_Circle_buff_st.Write_end + Length);
 800f2ec:	4b17      	ldr	r3, [pc, #92]	; (800f34c <UDP_Receive_Callback+0x20c>)
 800f2ee:	f8b3 2602 	ldrh.w	r2, [r3, #1538]	; 0x602
 800f2f2:	8abb      	ldrh	r3, [r7, #20]
 800f2f4:	4413      	add	r3, r2
 800f2f6:	b29a      	uxth	r2, r3
 800f2f8:	4b14      	ldr	r3, [pc, #80]	; (800f34c <UDP_Receive_Callback+0x20c>)
 800f2fa:	f8a3 2602 	strh.w	r2, [r3, #1538]	; 0x602
		break;
 800f2fe:	e00b      	b.n	800f318 <UDP_Receive_Callback+0x1d8>
		memcpy(&Ethernet_Circle_buff_st.Ethernet_Buffers,(char *)p->payload,Length);
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	685b      	ldr	r3, [r3, #4]
 800f304:	8aba      	ldrh	r2, [r7, #20]
 800f306:	4619      	mov	r1, r3
 800f308:	4810      	ldr	r0, [pc, #64]	; (800f34c <UDP_Receive_Callback+0x20c>)
 800f30a:	f013 fae7 	bl	80228dc <memcpy>
		Ethernet_Circle_buff_st.Write_end = Length;
 800f30e:	4a0f      	ldr	r2, [pc, #60]	; (800f34c <UDP_Receive_Callback+0x20c>)
 800f310:	8abb      	ldrh	r3, [r7, #20]
 800f312:	f8a2 3602 	strh.w	r3, [r2, #1538]	; 0x602
		break;
 800f316:	bf00      	nop
	}


	pbuf_free(p);
 800f318:	6878      	ldr	r0, [r7, #4]
 800f31a:	f00f feb7 	bl	801f08c <pbuf_free>
}
 800f31e:	3718      	adds	r7, #24
 800f320:	46bd      	mov	sp, r7
 800f322:	bd80      	pop	{r7, pc}
 800f324:	200052b4 	.word	0x200052b4
 800f328:	20000304 	.word	0x20000304
 800f32c:	20005264 	.word	0x20005264
 800f330:	20000645 	.word	0x20000645
 800f334:	08026da4 	.word	0x08026da4
 800f338:	20001064 	.word	0x20001064
 800f33c:	2000108c 	.word	0x2000108c
 800f340:	08026db0 	.word	0x08026db0
 800f344:	08026ddc 	.word	0x08026ddc
 800f348:	20000e48 	.word	0x20000e48
 800f34c:	20004c60 	.word	0x20004c60

0800f350 <udpClient_connect>:
void udpClient_connect(void)
{
 800f350:	b480      	push	{r7}
 800f352:	b083      	sub	sp, #12
 800f354:	af00      	add	r7, sp, #0
	err_t err;
	uint8_t Traverser = 0;
 800f356:	2300      	movs	r3, #0
 800f358:	71fb      	strb	r3, [r7, #7]

	switch(EI_data.ProtocolType)
 800f35a:	4ba6      	ldr	r3, [pc, #664]	; (800f5f4 <udpClient_connect+0x2a4>)
 800f35c:	781b      	ldrb	r3, [r3, #0]
 800f35e:	2b01      	cmp	r3, #1
 800f360:	d003      	beq.n	800f36a <udpClient_connect+0x1a>
 800f362:	2b02      	cmp	r3, #2
 800f364:	f000 80a1 	beq.w	800f4aa <udpClient_connect+0x15a>
			//			}
		}
		break;

	default:
		return;
 800f368:	e13f      	b.n	800f5ea <udpClient_connect+0x29a>
		for(Traverser = 0;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 800f36a:	2300      	movs	r3, #0
 800f36c:	71fb      	strb	r3, [r7, #7]
 800f36e:	e094      	b.n	800f49a <udpClient_connect+0x14a>
			IP_ADDR4(&remote_ip[Traverser], EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][0], EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][1], EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][2], EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][3]);
 800f370:	79fb      	ldrb	r3, [r7, #7]
 800f372:	4aa0      	ldr	r2, [pc, #640]	; (800f5f4 <udpClient_connect+0x2a4>)
 800f374:	3312      	adds	r3, #18
 800f376:	009b      	lsls	r3, r3, #2
 800f378:	4413      	add	r3, r2
 800f37a:	78db      	ldrb	r3, [r3, #3]
 800f37c:	061a      	lsls	r2, r3, #24
 800f37e:	79fb      	ldrb	r3, [r7, #7]
 800f380:	499c      	ldr	r1, [pc, #624]	; (800f5f4 <udpClient_connect+0x2a4>)
 800f382:	009b      	lsls	r3, r3, #2
 800f384:	440b      	add	r3, r1
 800f386:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800f38a:	041b      	lsls	r3, r3, #16
 800f38c:	431a      	orrs	r2, r3
 800f38e:	79fb      	ldrb	r3, [r7, #7]
 800f390:	4998      	ldr	r1, [pc, #608]	; (800f5f4 <udpClient_connect+0x2a4>)
 800f392:	009b      	lsls	r3, r3, #2
 800f394:	440b      	add	r3, r1
 800f396:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800f39a:	021b      	lsls	r3, r3, #8
 800f39c:	431a      	orrs	r2, r3
 800f39e:	79fb      	ldrb	r3, [r7, #7]
 800f3a0:	4994      	ldr	r1, [pc, #592]	; (800f5f4 <udpClient_connect+0x2a4>)
 800f3a2:	009b      	lsls	r3, r3, #2
 800f3a4:	440b      	add	r3, r1
 800f3a6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800f3aa:	4313      	orrs	r3, r2
 800f3ac:	061a      	lsls	r2, r3, #24
 800f3ae:	79fb      	ldrb	r3, [r7, #7]
 800f3b0:	4990      	ldr	r1, [pc, #576]	; (800f5f4 <udpClient_connect+0x2a4>)
 800f3b2:	3312      	adds	r3, #18
 800f3b4:	009b      	lsls	r3, r3, #2
 800f3b6:	440b      	add	r3, r1
 800f3b8:	78db      	ldrb	r3, [r3, #3]
 800f3ba:	0619      	lsls	r1, r3, #24
 800f3bc:	79fb      	ldrb	r3, [r7, #7]
 800f3be:	488d      	ldr	r0, [pc, #564]	; (800f5f4 <udpClient_connect+0x2a4>)
 800f3c0:	009b      	lsls	r3, r3, #2
 800f3c2:	4403      	add	r3, r0
 800f3c4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800f3c8:	041b      	lsls	r3, r3, #16
 800f3ca:	4319      	orrs	r1, r3
 800f3cc:	79fb      	ldrb	r3, [r7, #7]
 800f3ce:	4889      	ldr	r0, [pc, #548]	; (800f5f4 <udpClient_connect+0x2a4>)
 800f3d0:	009b      	lsls	r3, r3, #2
 800f3d2:	4403      	add	r3, r0
 800f3d4:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800f3d8:	021b      	lsls	r3, r3, #8
 800f3da:	4319      	orrs	r1, r3
 800f3dc:	79fb      	ldrb	r3, [r7, #7]
 800f3de:	4885      	ldr	r0, [pc, #532]	; (800f5f4 <udpClient_connect+0x2a4>)
 800f3e0:	009b      	lsls	r3, r3, #2
 800f3e2:	4403      	add	r3, r0
 800f3e4:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800f3e8:	430b      	orrs	r3, r1
 800f3ea:	021b      	lsls	r3, r3, #8
 800f3ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f3f0:	431a      	orrs	r2, r3
 800f3f2:	79fb      	ldrb	r3, [r7, #7]
 800f3f4:	497f      	ldr	r1, [pc, #508]	; (800f5f4 <udpClient_connect+0x2a4>)
 800f3f6:	3312      	adds	r3, #18
 800f3f8:	009b      	lsls	r3, r3, #2
 800f3fa:	440b      	add	r3, r1
 800f3fc:	78db      	ldrb	r3, [r3, #3]
 800f3fe:	0619      	lsls	r1, r3, #24
 800f400:	79fb      	ldrb	r3, [r7, #7]
 800f402:	487c      	ldr	r0, [pc, #496]	; (800f5f4 <udpClient_connect+0x2a4>)
 800f404:	009b      	lsls	r3, r3, #2
 800f406:	4403      	add	r3, r0
 800f408:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800f40c:	041b      	lsls	r3, r3, #16
 800f40e:	4319      	orrs	r1, r3
 800f410:	79fb      	ldrb	r3, [r7, #7]
 800f412:	4878      	ldr	r0, [pc, #480]	; (800f5f4 <udpClient_connect+0x2a4>)
 800f414:	009b      	lsls	r3, r3, #2
 800f416:	4403      	add	r3, r0
 800f418:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800f41c:	021b      	lsls	r3, r3, #8
 800f41e:	4319      	orrs	r1, r3
 800f420:	79fb      	ldrb	r3, [r7, #7]
 800f422:	4874      	ldr	r0, [pc, #464]	; (800f5f4 <udpClient_connect+0x2a4>)
 800f424:	009b      	lsls	r3, r3, #2
 800f426:	4403      	add	r3, r0
 800f428:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800f42c:	430b      	orrs	r3, r1
 800f42e:	0a1b      	lsrs	r3, r3, #8
 800f430:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f434:	ea42 0103 	orr.w	r1, r2, r3
 800f438:	79fb      	ldrb	r3, [r7, #7]
 800f43a:	4a6e      	ldr	r2, [pc, #440]	; (800f5f4 <udpClient_connect+0x2a4>)
 800f43c:	3312      	adds	r3, #18
 800f43e:	009b      	lsls	r3, r3, #2
 800f440:	4413      	add	r3, r2
 800f442:	78db      	ldrb	r3, [r3, #3]
 800f444:	061a      	lsls	r2, r3, #24
 800f446:	79fb      	ldrb	r3, [r7, #7]
 800f448:	486a      	ldr	r0, [pc, #424]	; (800f5f4 <udpClient_connect+0x2a4>)
 800f44a:	009b      	lsls	r3, r3, #2
 800f44c:	4403      	add	r3, r0
 800f44e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800f452:	041b      	lsls	r3, r3, #16
 800f454:	431a      	orrs	r2, r3
 800f456:	79fb      	ldrb	r3, [r7, #7]
 800f458:	4866      	ldr	r0, [pc, #408]	; (800f5f4 <udpClient_connect+0x2a4>)
 800f45a:	009b      	lsls	r3, r3, #2
 800f45c:	4403      	add	r3, r0
 800f45e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800f462:	021b      	lsls	r3, r3, #8
 800f464:	431a      	orrs	r2, r3
 800f466:	79fb      	ldrb	r3, [r7, #7]
 800f468:	4862      	ldr	r0, [pc, #392]	; (800f5f4 <udpClient_connect+0x2a4>)
 800f46a:	009b      	lsls	r3, r3, #2
 800f46c:	4403      	add	r3, r0
 800f46e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800f472:	4313      	orrs	r3, r2
 800f474:	0e1a      	lsrs	r2, r3, #24
 800f476:	79fb      	ldrb	r3, [r7, #7]
 800f478:	430a      	orrs	r2, r1
 800f47a:	495f      	ldr	r1, [pc, #380]	; (800f5f8 <udpClient_connect+0x2a8>)
 800f47c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			des_port[Traverser] = EI_data.Hitachi_st.PORTS[CARD_INDEX][Traverser][RX_PORT];
 800f480:	79fb      	ldrb	r3, [r7, #7]
 800f482:	79fa      	ldrb	r2, [r7, #7]
 800f484:	495b      	ldr	r1, [pc, #364]	; (800f5f4 <udpClient_connect+0x2a4>)
 800f486:	009b      	lsls	r3, r3, #2
 800f488:	440b      	add	r3, r1
 800f48a:	f8b3 10fc 	ldrh.w	r1, [r3, #252]	; 0xfc
 800f48e:	4b5b      	ldr	r3, [pc, #364]	; (800f5fc <udpClient_connect+0x2ac>)
 800f490:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for(Traverser = 0;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 800f494:	79fb      	ldrb	r3, [r7, #7]
 800f496:	3301      	adds	r3, #1
 800f498:	71fb      	strb	r3, [r7, #7]
 800f49a:	4b56      	ldr	r3, [pc, #344]	; (800f5f4 <udpClient_connect+0x2a4>)
 800f49c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800f4a0:	79fa      	ldrb	r2, [r7, #7]
 800f4a2:	429a      	cmp	r2, r3
 800f4a4:	f4ff af64 	bcc.w	800f370 <udpClient_connect+0x20>
		break;
 800f4a8:	e09f      	b.n	800f5ea <udpClient_connect+0x29a>
		for(Traverser = 0;Traverser<EI_data.Siemens_st.No_of_IP_s;++Traverser)
 800f4aa:	2300      	movs	r3, #0
 800f4ac:	71fb      	strb	r3, [r7, #7]
 800f4ae:	e094      	b.n	800f5da <udpClient_connect+0x28a>
			IP_ADDR4(&remote_ip[Traverser], EI_data.Siemens_st.Source_IP[CARD_INDEX][Traverser][0], EI_data.Siemens_st.Source_IP[CARD_INDEX][Traverser][1], EI_data.Siemens_st.Source_IP[CARD_INDEX][Traverser][2], EI_data.Siemens_st.Source_IP[CARD_INDEX][Traverser][3]);
 800f4b0:	79fb      	ldrb	r3, [r7, #7]
 800f4b2:	4a50      	ldr	r2, [pc, #320]	; (800f5f4 <udpClient_connect+0x2a4>)
 800f4b4:	33ae      	adds	r3, #174	; 0xae
 800f4b6:	009b      	lsls	r3, r3, #2
 800f4b8:	4413      	add	r3, r2
 800f4ba:	785b      	ldrb	r3, [r3, #1]
 800f4bc:	061a      	lsls	r2, r3, #24
 800f4be:	79fb      	ldrb	r3, [r7, #7]
 800f4c0:	494c      	ldr	r1, [pc, #304]	; (800f5f4 <udpClient_connect+0x2a4>)
 800f4c2:	009b      	lsls	r3, r3, #2
 800f4c4:	440b      	add	r3, r1
 800f4c6:	f893 32ba 	ldrb.w	r3, [r3, #698]	; 0x2ba
 800f4ca:	041b      	lsls	r3, r3, #16
 800f4cc:	431a      	orrs	r2, r3
 800f4ce:	79fb      	ldrb	r3, [r7, #7]
 800f4d0:	4948      	ldr	r1, [pc, #288]	; (800f5f4 <udpClient_connect+0x2a4>)
 800f4d2:	009b      	lsls	r3, r3, #2
 800f4d4:	440b      	add	r3, r1
 800f4d6:	f893 32bb 	ldrb.w	r3, [r3, #699]	; 0x2bb
 800f4da:	021b      	lsls	r3, r3, #8
 800f4dc:	431a      	orrs	r2, r3
 800f4de:	79fb      	ldrb	r3, [r7, #7]
 800f4e0:	4944      	ldr	r1, [pc, #272]	; (800f5f4 <udpClient_connect+0x2a4>)
 800f4e2:	009b      	lsls	r3, r3, #2
 800f4e4:	440b      	add	r3, r1
 800f4e6:	f893 32bc 	ldrb.w	r3, [r3, #700]	; 0x2bc
 800f4ea:	4313      	orrs	r3, r2
 800f4ec:	061a      	lsls	r2, r3, #24
 800f4ee:	79fb      	ldrb	r3, [r7, #7]
 800f4f0:	4940      	ldr	r1, [pc, #256]	; (800f5f4 <udpClient_connect+0x2a4>)
 800f4f2:	33ae      	adds	r3, #174	; 0xae
 800f4f4:	009b      	lsls	r3, r3, #2
 800f4f6:	440b      	add	r3, r1
 800f4f8:	785b      	ldrb	r3, [r3, #1]
 800f4fa:	0619      	lsls	r1, r3, #24
 800f4fc:	79fb      	ldrb	r3, [r7, #7]
 800f4fe:	483d      	ldr	r0, [pc, #244]	; (800f5f4 <udpClient_connect+0x2a4>)
 800f500:	009b      	lsls	r3, r3, #2
 800f502:	4403      	add	r3, r0
 800f504:	f893 32ba 	ldrb.w	r3, [r3, #698]	; 0x2ba
 800f508:	041b      	lsls	r3, r3, #16
 800f50a:	4319      	orrs	r1, r3
 800f50c:	79fb      	ldrb	r3, [r7, #7]
 800f50e:	4839      	ldr	r0, [pc, #228]	; (800f5f4 <udpClient_connect+0x2a4>)
 800f510:	009b      	lsls	r3, r3, #2
 800f512:	4403      	add	r3, r0
 800f514:	f893 32bb 	ldrb.w	r3, [r3, #699]	; 0x2bb
 800f518:	021b      	lsls	r3, r3, #8
 800f51a:	4319      	orrs	r1, r3
 800f51c:	79fb      	ldrb	r3, [r7, #7]
 800f51e:	4835      	ldr	r0, [pc, #212]	; (800f5f4 <udpClient_connect+0x2a4>)
 800f520:	009b      	lsls	r3, r3, #2
 800f522:	4403      	add	r3, r0
 800f524:	f893 32bc 	ldrb.w	r3, [r3, #700]	; 0x2bc
 800f528:	430b      	orrs	r3, r1
 800f52a:	021b      	lsls	r3, r3, #8
 800f52c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f530:	431a      	orrs	r2, r3
 800f532:	79fb      	ldrb	r3, [r7, #7]
 800f534:	492f      	ldr	r1, [pc, #188]	; (800f5f4 <udpClient_connect+0x2a4>)
 800f536:	33ae      	adds	r3, #174	; 0xae
 800f538:	009b      	lsls	r3, r3, #2
 800f53a:	440b      	add	r3, r1
 800f53c:	785b      	ldrb	r3, [r3, #1]
 800f53e:	0619      	lsls	r1, r3, #24
 800f540:	79fb      	ldrb	r3, [r7, #7]
 800f542:	482c      	ldr	r0, [pc, #176]	; (800f5f4 <udpClient_connect+0x2a4>)
 800f544:	009b      	lsls	r3, r3, #2
 800f546:	4403      	add	r3, r0
 800f548:	f893 32ba 	ldrb.w	r3, [r3, #698]	; 0x2ba
 800f54c:	041b      	lsls	r3, r3, #16
 800f54e:	4319      	orrs	r1, r3
 800f550:	79fb      	ldrb	r3, [r7, #7]
 800f552:	4828      	ldr	r0, [pc, #160]	; (800f5f4 <udpClient_connect+0x2a4>)
 800f554:	009b      	lsls	r3, r3, #2
 800f556:	4403      	add	r3, r0
 800f558:	f893 32bb 	ldrb.w	r3, [r3, #699]	; 0x2bb
 800f55c:	021b      	lsls	r3, r3, #8
 800f55e:	4319      	orrs	r1, r3
 800f560:	79fb      	ldrb	r3, [r7, #7]
 800f562:	4824      	ldr	r0, [pc, #144]	; (800f5f4 <udpClient_connect+0x2a4>)
 800f564:	009b      	lsls	r3, r3, #2
 800f566:	4403      	add	r3, r0
 800f568:	f893 32bc 	ldrb.w	r3, [r3, #700]	; 0x2bc
 800f56c:	430b      	orrs	r3, r1
 800f56e:	0a1b      	lsrs	r3, r3, #8
 800f570:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f574:	ea42 0103 	orr.w	r1, r2, r3
 800f578:	79fb      	ldrb	r3, [r7, #7]
 800f57a:	4a1e      	ldr	r2, [pc, #120]	; (800f5f4 <udpClient_connect+0x2a4>)
 800f57c:	33ae      	adds	r3, #174	; 0xae
 800f57e:	009b      	lsls	r3, r3, #2
 800f580:	4413      	add	r3, r2
 800f582:	785b      	ldrb	r3, [r3, #1]
 800f584:	061a      	lsls	r2, r3, #24
 800f586:	79fb      	ldrb	r3, [r7, #7]
 800f588:	481a      	ldr	r0, [pc, #104]	; (800f5f4 <udpClient_connect+0x2a4>)
 800f58a:	009b      	lsls	r3, r3, #2
 800f58c:	4403      	add	r3, r0
 800f58e:	f893 32ba 	ldrb.w	r3, [r3, #698]	; 0x2ba
 800f592:	041b      	lsls	r3, r3, #16
 800f594:	431a      	orrs	r2, r3
 800f596:	79fb      	ldrb	r3, [r7, #7]
 800f598:	4816      	ldr	r0, [pc, #88]	; (800f5f4 <udpClient_connect+0x2a4>)
 800f59a:	009b      	lsls	r3, r3, #2
 800f59c:	4403      	add	r3, r0
 800f59e:	f893 32bb 	ldrb.w	r3, [r3, #699]	; 0x2bb
 800f5a2:	021b      	lsls	r3, r3, #8
 800f5a4:	431a      	orrs	r2, r3
 800f5a6:	79fb      	ldrb	r3, [r7, #7]
 800f5a8:	4812      	ldr	r0, [pc, #72]	; (800f5f4 <udpClient_connect+0x2a4>)
 800f5aa:	009b      	lsls	r3, r3, #2
 800f5ac:	4403      	add	r3, r0
 800f5ae:	f893 32bc 	ldrb.w	r3, [r3, #700]	; 0x2bc
 800f5b2:	4313      	orrs	r3, r2
 800f5b4:	0e1a      	lsrs	r2, r3, #24
 800f5b6:	79fb      	ldrb	r3, [r7, #7]
 800f5b8:	430a      	orrs	r2, r1
 800f5ba:	490f      	ldr	r1, [pc, #60]	; (800f5f8 <udpClient_connect+0x2a8>)
 800f5bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			des_port[Traverser] = EI_data.Siemens_st.PORTS[CARD_INDEX][Traverser][RX_PORT];
 800f5c0:	79fb      	ldrb	r3, [r7, #7]
 800f5c2:	79fa      	ldrb	r2, [r7, #7]
 800f5c4:	490b      	ldr	r1, [pc, #44]	; (800f5f4 <udpClient_connect+0x2a4>)
 800f5c6:	009b      	lsls	r3, r3, #2
 800f5c8:	440b      	add	r3, r1
 800f5ca:	f8b3 12e0 	ldrh.w	r1, [r3, #736]	; 0x2e0
 800f5ce:	4b0b      	ldr	r3, [pc, #44]	; (800f5fc <udpClient_connect+0x2ac>)
 800f5d0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for(Traverser = 0;Traverser<EI_data.Siemens_st.No_of_IP_s;++Traverser)
 800f5d4:	79fb      	ldrb	r3, [r7, #7]
 800f5d6:	3301      	adds	r3, #1
 800f5d8:	71fb      	strb	r3, [r7, #7]
 800f5da:	4b06      	ldr	r3, [pc, #24]	; (800f5f4 <udpClient_connect+0x2a4>)
 800f5dc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800f5e0:	79fa      	ldrb	r2, [r7, #7]
 800f5e2:	429a      	cmp	r2, r3
 800f5e4:	f4ff af64 	bcc.w	800f4b0 <udpClient_connect+0x160>
		break;
 800f5e8:	bf00      	nop
	}
}
 800f5ea:	370c      	adds	r7, #12
 800f5ec:	46bd      	mov	sp, r7
 800f5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f2:	4770      	bx	lr
 800f5f4:	20000304 	.word	0x20000304
 800f5f8:	20005264 	.word	0x20005264
 800f5fc:	200052b8 	.word	0x200052b8

0800f600 <udpClient_send>:
void udpClient_send(uint8_t *data,uint8_t len,const ip_addr_t IP_addr)
{
 800f600:	b580      	push	{r7, lr}
 800f602:	b086      	sub	sp, #24
 800f604:	af00      	add	r7, sp, #0
 800f606:	60f8      	str	r0, [r7, #12]
 800f608:	460b      	mov	r3, r1
 800f60a:	607a      	str	r2, [r7, #4]
 800f60c:	72fb      	strb	r3, [r7, #11]
	struct pbuf *txBuf;
	err_t udp_sendto_error = 0;
 800f60e:	2300      	movs	r3, #0
 800f610:	75fb      	strb	r3, [r7, #23]
	txBuf = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
 800f612:	7afb      	ldrb	r3, [r7, #11]
 800f614:	b29b      	uxth	r3, r3
 800f616:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f61a:	4619      	mov	r1, r3
 800f61c:	2036      	movs	r0, #54	; 0x36
 800f61e:	f00f fa53 	bl	801eac8 <pbuf_alloc>
 800f622:	6138      	str	r0, [r7, #16]

	//	char *SendingIP = ipaddr_ntoa(&IP_addr);
	//
	//	printf("\nSent IP:%s\n",SendingIP);

	if (txBuf != NULL)
 800f624:	693b      	ldr	r3, [r7, #16]
 800f626:	2b00      	cmp	r3, #0
 800f628:	d01d      	beq.n	800f666 <udpClient_send+0x66>
	{
		pbuf_take(txBuf, data, len);
 800f62a:	7afb      	ldrb	r3, [r7, #11]
 800f62c:	b29b      	uxth	r3, r3
 800f62e:	461a      	mov	r2, r3
 800f630:	68f9      	ldr	r1, [r7, #12]
 800f632:	6938      	ldr	r0, [r7, #16]
 800f634:	f00f ff24 	bl	801f480 <pbuf_take>
		udp_sendto_error = udp_sendto(upcb, txBuf, &IP_addr,des_port[0]);
 800f638:	4b0d      	ldr	r3, [pc, #52]	; (800f670 <udpClient_send+0x70>)
 800f63a:	6818      	ldr	r0, [r3, #0]
 800f63c:	4b0d      	ldr	r3, [pc, #52]	; (800f674 <udpClient_send+0x74>)
 800f63e:	881b      	ldrh	r3, [r3, #0]
 800f640:	1d3a      	adds	r2, r7, #4
 800f642:	6939      	ldr	r1, [r7, #16]
 800f644:	f010 fac4 	bl	801fbd0 <udp_sendto>
 800f648:	4603      	mov	r3, r0
 800f64a:	75fb      	strb	r3, [r7, #23]
		if(udp_sendto_error != ERR_OK)
 800f64c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d005      	beq.n	800f660 <udpClient_send+0x60>
		{
			printf("Packet Sending Failed:%d\nTrying again\n",udp_sendto_error);
 800f654:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f658:	4619      	mov	r1, r3
 800f65a:	4807      	ldr	r0, [pc, #28]	; (800f678 <udpClient_send+0x78>)
 800f65c:	f013 fa4e 	bl	8022afc <iprintf>
		//				printf("\n------------------------------------Differnece :%lu\n",HAL_Elaps_Ticks(Interrupt_clock));
		//				printf("Packet Sent Success\n");
		//				break;
		//			}
		//		}
		pbuf_free(txBuf);
 800f660:	6938      	ldr	r0, [r7, #16]
 800f662:	f00f fd13 	bl	801f08c <pbuf_free>
	}
}
 800f666:	bf00      	nop
 800f668:	3718      	adds	r7, #24
 800f66a:	46bd      	mov	sp, r7
 800f66c:	bd80      	pop	{r7, pc}
 800f66e:	bf00      	nop
 800f670:	200052e0 	.word	0x200052e0
 800f674:	200052b8 	.word	0x200052b8
 800f678:	08026e04 	.word	0x08026e04

0800f67c <Is_There_EI_Data>:

uint8_t Is_There_EI_Data(void)
{
 800f67c:	b480      	push	{r7}
 800f67e:	af00      	add	r7, sp, #0
	if(Ethernet_Circle_buff_st.Read_end != Ethernet_Circle_buff_st.Write_end)
 800f680:	4b07      	ldr	r3, [pc, #28]	; (800f6a0 <Is_There_EI_Data+0x24>)
 800f682:	f8b3 2600 	ldrh.w	r2, [r3, #1536]	; 0x600
 800f686:	4b06      	ldr	r3, [pc, #24]	; (800f6a0 <Is_There_EI_Data+0x24>)
 800f688:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800f68c:	429a      	cmp	r2, r3
 800f68e:	d001      	beq.n	800f694 <Is_There_EI_Data+0x18>
	{
		return AVAILABLE;
 800f690:	2301      	movs	r3, #1
 800f692:	e000      	b.n	800f696 <Is_There_EI_Data+0x1a>
	}
	else
	{
		return NOT_AVAILABLE;
 800f694:	2300      	movs	r3, #0
	}
}
 800f696:	4618      	mov	r0, r3
 800f698:	46bd      	mov	sp, r7
 800f69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f69e:	4770      	bx	lr
 800f6a0:	20004c60 	.word	0x20004c60

0800f6a4 <Get_Eth_Byte>:

uint8_t Get_Eth_Byte(void)
{
 800f6a4:	b580      	push	{r7, lr}
 800f6a6:	b082      	sub	sp, #8
 800f6a8:	af00      	add	r7, sp, #0
	uint8_t Data = Ethernet_Circle_buff_st.Ethernet_Buffers[Ethernet_Circle_buff_st.Read_end++];
 800f6aa:	4b15      	ldr	r3, [pc, #84]	; (800f700 <Get_Eth_Byte+0x5c>)
 800f6ac:	f8b3 3600 	ldrh.w	r3, [r3, #1536]	; 0x600
 800f6b0:	1c5a      	adds	r2, r3, #1
 800f6b2:	b291      	uxth	r1, r2
 800f6b4:	4a12      	ldr	r2, [pc, #72]	; (800f700 <Get_Eth_Byte+0x5c>)
 800f6b6:	f8a2 1600 	strh.w	r1, [r2, #1536]	; 0x600
 800f6ba:	461a      	mov	r2, r3
 800f6bc:	4b10      	ldr	r3, [pc, #64]	; (800f700 <Get_Eth_Byte+0x5c>)
 800f6be:	5c9b      	ldrb	r3, [r3, r2]
 800f6c0:	71fb      	strb	r3, [r7, #7]
	if(Ethernet_Circle_buff_st.Read_end >= ETH_MAX_SIZE)
 800f6c2:	4b0f      	ldr	r3, [pc, #60]	; (800f700 <Get_Eth_Byte+0x5c>)
 800f6c4:	f8b3 3600 	ldrh.w	r3, [r3, #1536]	; 0x600
 800f6c8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800f6cc:	d313      	bcc.n	800f6f6 <Get_Eth_Byte+0x52>
	{
		Ethernet_Circle_buff_st.Read_end = 0;
 800f6ce:	4b0c      	ldr	r3, [pc, #48]	; (800f700 <Get_Eth_Byte+0x5c>)
 800f6d0:	2200      	movs	r2, #0
 800f6d2:	f8a3 2600 	strh.w	r2, [r3, #1536]	; 0x600
		if(Ethernet_Circle_buff_st.Write_end == ETH_MAX_SIZE)
 800f6d6:	4b0a      	ldr	r3, [pc, #40]	; (800f700 <Get_Eth_Byte+0x5c>)
 800f6d8:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800f6dc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800f6e0:	d109      	bne.n	800f6f6 <Get_Eth_Byte+0x52>
		{
			memset(Ethernet_Circle_buff_st.Ethernet_Buffers,0,ETH_MAX_SIZE);
 800f6e2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800f6e6:	2100      	movs	r1, #0
 800f6e8:	4805      	ldr	r0, [pc, #20]	; (800f700 <Get_Eth_Byte+0x5c>)
 800f6ea:	f013 f91f 	bl	802292c <memset>
			Ethernet_Circle_buff_st.Write_end = 0;
 800f6ee:	4b04      	ldr	r3, [pc, #16]	; (800f700 <Get_Eth_Byte+0x5c>)
 800f6f0:	2200      	movs	r2, #0
 800f6f2:	f8a3 2602 	strh.w	r2, [r3, #1538]	; 0x602
		}
	}
	return Data;
 800f6f6:	79fb      	ldrb	r3, [r7, #7]
}
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	3708      	adds	r7, #8
 800f6fc:	46bd      	mov	sp, r7
 800f6fe:	bd80      	pop	{r7, pc}
 800f700:	20004c60 	.word	0x20004c60

0800f704 <Udp_Send_SigInfo>:

void Udp_Send_SigInfo(uint8_t *data,uint8_t len,const ip_addr_t IP_addr)
{
 800f704:	b580      	push	{r7, lr}
 800f706:	b086      	sub	sp, #24
 800f708:	af00      	add	r7, sp, #0
 800f70a:	60f8      	str	r0, [r7, #12]
 800f70c:	460b      	mov	r3, r1
 800f70e:	607a      	str	r2, [r7, #4]
 800f710:	72fb      	strb	r3, [r7, #11]
	struct pbuf *txBuf;
	err_t udp_sendto_error = 0;
 800f712:	2300      	movs	r3, #0
 800f714:	75fb      	strb	r3, [r7, #23]
	txBuf = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
 800f716:	7afb      	ldrb	r3, [r7, #11]
 800f718:	b29b      	uxth	r3, r3
 800f71a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f71e:	4619      	mov	r1, r3
 800f720:	2036      	movs	r0, #54	; 0x36
 800f722:	f00f f9d1 	bl	801eac8 <pbuf_alloc>
 800f726:	6138      	str	r0, [r7, #16]

	if (txBuf != NULL)
 800f728:	693b      	ldr	r3, [r7, #16]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d01a      	beq.n	800f764 <Udp_Send_SigInfo+0x60>
	{
		pbuf_take(txBuf, data, len);
 800f72e:	7afb      	ldrb	r3, [r7, #11]
 800f730:	b29b      	uxth	r3, r3
 800f732:	461a      	mov	r2, r3
 800f734:	68f9      	ldr	r1, [r7, #12]
 800f736:	6938      	ldr	r0, [r7, #16]
 800f738:	f00f fea2 	bl	801f480 <pbuf_take>
		udp_sendto_error = udp_sendto(upcb, txBuf, &IP_addr,12345);
 800f73c:	4b0b      	ldr	r3, [pc, #44]	; (800f76c <Udp_Send_SigInfo+0x68>)
 800f73e:	6818      	ldr	r0, [r3, #0]
 800f740:	1d3a      	adds	r2, r7, #4
 800f742:	f243 0339 	movw	r3, #12345	; 0x3039
 800f746:	6939      	ldr	r1, [r7, #16]
 800f748:	f010 fa42 	bl	801fbd0 <udp_sendto>
 800f74c:	4603      	mov	r3, r0
 800f74e:	75fb      	strb	r3, [r7, #23]
		if(udp_sendto_error != ERR_OK)
 800f750:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f754:	2b00      	cmp	r3, #0
 800f756:	d002      	beq.n	800f75e <Udp_Send_SigInfo+0x5a>
		{
			printf("Packet Sent Failure\n");
 800f758:	4805      	ldr	r0, [pc, #20]	; (800f770 <Udp_Send_SigInfo+0x6c>)
 800f75a:	f013 fa6b 	bl	8022c34 <puts>
		}
		pbuf_free(txBuf);
 800f75e:	6938      	ldr	r0, [r7, #16]
 800f760:	f00f fc94 	bl	801f08c <pbuf_free>
	}
}
 800f764:	bf00      	nop
 800f766:	3718      	adds	r7, #24
 800f768:	46bd      	mov	sp, r7
 800f76a:	bd80      	pop	{r7, pc}
 800f76c:	200052e0 	.word	0x200052e0
 800f770:	08026e2c 	.word	0x08026e2c

0800f774 <MX_CAN2_Init>:
CAN_HandleTypeDef hcan2;
CAN_HandleTypeDef hcan3;

/* CAN2 init function */
void MX_CAN2_Init(void)
{
 800f774:	b580      	push	{r7, lr}
 800f776:	b094      	sub	sp, #80	; 0x50
 800f778:	af00      	add	r7, sp, #0
	/* USER CODE END CAN2_Init 0 */

	/* USER CODE BEGIN CAN2_Init 1 */

	/* USER CODE END CAN2_Init 1 */
	hcan2.Instance = CAN2;
 800f77a:	4b38      	ldr	r3, [pc, #224]	; (800f85c <MX_CAN2_Init+0xe8>)
 800f77c:	4a38      	ldr	r2, [pc, #224]	; (800f860 <MX_CAN2_Init+0xec>)
 800f77e:	601a      	str	r2, [r3, #0]
	hcan2.Init.Prescaler = 18;
 800f780:	4b36      	ldr	r3, [pc, #216]	; (800f85c <MX_CAN2_Init+0xe8>)
 800f782:	2212      	movs	r2, #18
 800f784:	605a      	str	r2, [r3, #4]
	hcan2.Init.Mode = CAN_MODE_NORMAL;
 800f786:	4b35      	ldr	r3, [pc, #212]	; (800f85c <MX_CAN2_Init+0xe8>)
 800f788:	2200      	movs	r2, #0
 800f78a:	609a      	str	r2, [r3, #8]
	hcan2.Init.SyncJumpWidth = CAN_SJW_4TQ;
 800f78c:	4b33      	ldr	r3, [pc, #204]	; (800f85c <MX_CAN2_Init+0xe8>)
 800f78e:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 800f792:	60da      	str	r2, [r3, #12]
	hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 800f794:	4b31      	ldr	r3, [pc, #196]	; (800f85c <MX_CAN2_Init+0xe8>)
 800f796:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800f79a:	611a      	str	r2, [r3, #16]
	hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 800f79c:	4b2f      	ldr	r3, [pc, #188]	; (800f85c <MX_CAN2_Init+0xe8>)
 800f79e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800f7a2:	615a      	str	r2, [r3, #20]
	hcan2.Init.TimeTriggeredMode = DISABLE;
 800f7a4:	4b2d      	ldr	r3, [pc, #180]	; (800f85c <MX_CAN2_Init+0xe8>)
 800f7a6:	2200      	movs	r2, #0
 800f7a8:	761a      	strb	r2, [r3, #24]
	hcan2.Init.AutoBusOff = DISABLE;
 800f7aa:	4b2c      	ldr	r3, [pc, #176]	; (800f85c <MX_CAN2_Init+0xe8>)
 800f7ac:	2200      	movs	r2, #0
 800f7ae:	765a      	strb	r2, [r3, #25]
	hcan2.Init.AutoWakeUp = DISABLE;
 800f7b0:	4b2a      	ldr	r3, [pc, #168]	; (800f85c <MX_CAN2_Init+0xe8>)
 800f7b2:	2200      	movs	r2, #0
 800f7b4:	769a      	strb	r2, [r3, #26]
	hcan2.Init.AutoRetransmission = ENABLE;
 800f7b6:	4b29      	ldr	r3, [pc, #164]	; (800f85c <MX_CAN2_Init+0xe8>)
 800f7b8:	2201      	movs	r2, #1
 800f7ba:	76da      	strb	r2, [r3, #27]
	hcan2.Init.ReceiveFifoLocked = DISABLE;
 800f7bc:	4b27      	ldr	r3, [pc, #156]	; (800f85c <MX_CAN2_Init+0xe8>)
 800f7be:	2200      	movs	r2, #0
 800f7c0:	771a      	strb	r2, [r3, #28]
	hcan2.Init.TransmitFifoPriority = DISABLE;
 800f7c2:	4b26      	ldr	r3, [pc, #152]	; (800f85c <MX_CAN2_Init+0xe8>)
 800f7c4:	2200      	movs	r2, #0
 800f7c6:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800f7c8:	4824      	ldr	r0, [pc, #144]	; (800f85c <MX_CAN2_Init+0xe8>)
 800f7ca:	f006 f9bd 	bl	8015b48 <HAL_CAN_Init>
 800f7ce:	4603      	mov	r3, r0
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d001      	beq.n	800f7d8 <MX_CAN2_Init+0x64>
	{
		Error_Handler();
 800f7d4:	f004 fbfc 	bl	8013fd0 <Error_Handler>

	HAL_CAN_ConfigFilter(&hcan2,&Can_FilterConfig2 );
#endif
	CAN_FilterTypeDef Can_FilterConfig3;
	/*____________for Testing________________*/
	Can_FilterConfig3.FilterActivation = CAN_FILTER_ENABLE ;
 800f7d8:	2301      	movs	r3, #1
 800f7da:	64bb      	str	r3, [r7, #72]	; 0x48
	Can_FilterConfig3.FilterBank = 4;
 800f7dc:	2304      	movs	r3, #4
 800f7de:	63fb      	str	r3, [r7, #60]	; 0x3c
	Can_FilterConfig3.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 800f7e0:	2301      	movs	r3, #1
 800f7e2:	63bb      	str	r3, [r7, #56]	; 0x38
	Can_FilterConfig3.FilterIdHigh = (GPS_TIME_PKT<<5);//CM_LPM_GPSINFO
 800f7e4:	f242 0360 	movw	r3, #8288	; 0x2060
 800f7e8:	62bb      	str	r3, [r7, #40]	; 0x28
	Can_FilterConfig3.FilterIdLow=0x0000;
 800f7ea:	2300      	movs	r3, #0
 800f7ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	Can_FilterConfig3.FilterMaskIdHigh= (GPS_TIME_PKT<<5);
 800f7ee:	f242 0360 	movw	r3, #8288	; 0x2060
 800f7f2:	633b      	str	r3, [r7, #48]	; 0x30
	Can_FilterConfig3.FilterMaskIdLow =0x0000;
 800f7f4:	2300      	movs	r3, #0
 800f7f6:	637b      	str	r3, [r7, #52]	; 0x34
	Can_FilterConfig3.FilterMode= CAN_FILTERMODE_IDLIST;
 800f7f8:	2301      	movs	r3, #1
 800f7fa:	643b      	str	r3, [r7, #64]	; 0x40
	Can_FilterConfig3.FilterScale = CAN_FILTERSCALE_32BIT;
 800f7fc:	2301      	movs	r3, #1
 800f7fe:	647b      	str	r3, [r7, #68]	; 0x44
	Can_FilterConfig3.SlaveStartFilterBank = 2;
 800f800:	2302      	movs	r3, #2
 800f802:	64fb      	str	r3, [r7, #76]	; 0x4c


	HAL_CAN_ConfigFilter(&hcan2,&Can_FilterConfig3 );
 800f804:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f808:	4619      	mov	r1, r3
 800f80a:	4814      	ldr	r0, [pc, #80]	; (800f85c <MX_CAN2_Init+0xe8>)
 800f80c:	f006 fae2 	bl	8015dd4 <HAL_CAN_ConfigFilter>

	CAN_FilterTypeDef Can_FilterConfig4;
	/*____________for Testing________________*/
	Can_FilterConfig4.FilterActivation = CAN_FILTER_ENABLE ;
 800f810:	2301      	movs	r3, #1
 800f812:	623b      	str	r3, [r7, #32]
	Can_FilterConfig4.FilterBank = 5;
 800f814:	2305      	movs	r3, #5
 800f816:	617b      	str	r3, [r7, #20]
	Can_FilterConfig4.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 800f818:	2301      	movs	r3, #1
 800f81a:	613b      	str	r3, [r7, #16]
	Can_FilterConfig4.FilterIdHigh = (GPS2_TIME_PKT<<5);//CM_LPM_GPSINFO
 800f81c:	f242 1320 	movw	r3, #8480	; 0x2120
 800f820:	603b      	str	r3, [r7, #0]
	Can_FilterConfig4.FilterIdLow=0x0000;
 800f822:	2300      	movs	r3, #0
 800f824:	607b      	str	r3, [r7, #4]
	Can_FilterConfig4.FilterMaskIdHigh= (GPS2_TIME_PKT<<5);
 800f826:	f242 1320 	movw	r3, #8480	; 0x2120
 800f82a:	60bb      	str	r3, [r7, #8]
	Can_FilterConfig4.FilterMaskIdLow =0x0000;
 800f82c:	2300      	movs	r3, #0
 800f82e:	60fb      	str	r3, [r7, #12]
	Can_FilterConfig4.FilterMode= CAN_FILTERMODE_IDLIST;
 800f830:	2301      	movs	r3, #1
 800f832:	61bb      	str	r3, [r7, #24]
	Can_FilterConfig4.FilterScale = CAN_FILTERSCALE_32BIT;
 800f834:	2301      	movs	r3, #1
 800f836:	61fb      	str	r3, [r7, #28]
	Can_FilterConfig4.SlaveStartFilterBank = 2;
 800f838:	2302      	movs	r3, #2
 800f83a:	627b      	str	r3, [r7, #36]	; 0x24


	HAL_CAN_ConfigFilter(&hcan2,&Can_FilterConfig4 );
 800f83c:	463b      	mov	r3, r7
 800f83e:	4619      	mov	r1, r3
 800f840:	4806      	ldr	r0, [pc, #24]	; (800f85c <MX_CAN2_Init+0xe8>)
 800f842:	f006 fac7 	bl	8015dd4 <HAL_CAN_ConfigFilter>

	/*_______________________for Testing___________	 */


	HAL_CAN_Start(&hcan2);
 800f846:	4805      	ldr	r0, [pc, #20]	; (800f85c <MX_CAN2_Init+0xe8>)
 800f848:	f006 fbb0 	bl	8015fac <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan2,CAN_IT_RX_FIFO1_MSG_PENDING);
 800f84c:	2110      	movs	r1, #16
 800f84e:	4803      	ldr	r0, [pc, #12]	; (800f85c <MX_CAN2_Init+0xe8>)
 800f850:	f006 fdf6 	bl	8016440 <HAL_CAN_ActivateNotification>

	/* USER CODE END CAN2_Init 2 */

}
 800f854:	bf00      	nop
 800f856:	3750      	adds	r7, #80	; 0x50
 800f858:	46bd      	mov	sp, r7
 800f85a:	bd80      	pop	{r7, pc}
 800f85c:	20009b98 	.word	0x20009b98
 800f860:	40006800 	.word	0x40006800

0800f864 <MX_CAN3_Init>:
/* CAN3 init function */
void MX_CAN3_Init(void)
{
 800f864:	b580      	push	{r7, lr}
 800f866:	b08a      	sub	sp, #40	; 0x28
 800f868:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN CAN3_Init 0 */

	hcan3.Instance = CAN3;
 800f86a:	4b34      	ldr	r3, [pc, #208]	; (800f93c <MX_CAN3_Init+0xd8>)
 800f86c:	4a34      	ldr	r2, [pc, #208]	; (800f940 <MX_CAN3_Init+0xdc>)
 800f86e:	601a      	str	r2, [r3, #0]
	hcan3.Init.Prescaler = 5;
 800f870:	4b32      	ldr	r3, [pc, #200]	; (800f93c <MX_CAN3_Init+0xd8>)
 800f872:	2205      	movs	r2, #5
 800f874:	605a      	str	r2, [r3, #4]
	hcan3.Init.Mode = CAN_MODE_NORMAL;
 800f876:	4b31      	ldr	r3, [pc, #196]	; (800f93c <MX_CAN3_Init+0xd8>)
 800f878:	2200      	movs	r2, #0
 800f87a:	609a      	str	r2, [r3, #8]
	hcan3.Init.SyncJumpWidth = CAN_SJW_4TQ;
 800f87c:	4b2f      	ldr	r3, [pc, #188]	; (800f93c <MX_CAN3_Init+0xd8>)
 800f87e:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 800f882:	60da      	str	r2, [r3, #12]
	hcan3.Init.TimeSeg1 = CAN_BS1_7TQ;
 800f884:	4b2d      	ldr	r3, [pc, #180]	; (800f93c <MX_CAN3_Init+0xd8>)
 800f886:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 800f88a:	611a      	str	r2, [r3, #16]
	hcan3.Init.TimeSeg2 = CAN_BS2_1TQ;
 800f88c:	4b2b      	ldr	r3, [pc, #172]	; (800f93c <MX_CAN3_Init+0xd8>)
 800f88e:	2200      	movs	r2, #0
 800f890:	615a      	str	r2, [r3, #20]
	/* USER CODE END CAN3_Init 0 */

	/* USER CODE BEGIN CAN3_Init 1 */

	/* USER CODE END CAN3_Init 1 */
	hcan3.Instance = CAN3;
 800f892:	4b2a      	ldr	r3, [pc, #168]	; (800f93c <MX_CAN3_Init+0xd8>)
 800f894:	4a2a      	ldr	r2, [pc, #168]	; (800f940 <MX_CAN3_Init+0xdc>)
 800f896:	601a      	str	r2, [r3, #0]
	hcan3.Init.Prescaler = 18;
 800f898:	4b28      	ldr	r3, [pc, #160]	; (800f93c <MX_CAN3_Init+0xd8>)
 800f89a:	2212      	movs	r2, #18
 800f89c:	605a      	str	r2, [r3, #4]
	hcan3.Init.Mode = CAN_MODE_NORMAL;
 800f89e:	4b27      	ldr	r3, [pc, #156]	; (800f93c <MX_CAN3_Init+0xd8>)
 800f8a0:	2200      	movs	r2, #0
 800f8a2:	609a      	str	r2, [r3, #8]
	hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800f8a4:	4b25      	ldr	r3, [pc, #148]	; (800f93c <MX_CAN3_Init+0xd8>)
 800f8a6:	2200      	movs	r2, #0
 800f8a8:	60da      	str	r2, [r3, #12]
	hcan3.Init.TimeSeg1 = CAN_BS1_2TQ;
 800f8aa:	4b24      	ldr	r3, [pc, #144]	; (800f93c <MX_CAN3_Init+0xd8>)
 800f8ac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800f8b0:	611a      	str	r2, [r3, #16]
	hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 800f8b2:	4b22      	ldr	r3, [pc, #136]	; (800f93c <MX_CAN3_Init+0xd8>)
 800f8b4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800f8b8:	615a      	str	r2, [r3, #20]
	hcan3.Init.TimeTriggeredMode = DISABLE;
 800f8ba:	4b20      	ldr	r3, [pc, #128]	; (800f93c <MX_CAN3_Init+0xd8>)
 800f8bc:	2200      	movs	r2, #0
 800f8be:	761a      	strb	r2, [r3, #24]
	hcan3.Init.AutoBusOff = DISABLE;
 800f8c0:	4b1e      	ldr	r3, [pc, #120]	; (800f93c <MX_CAN3_Init+0xd8>)
 800f8c2:	2200      	movs	r2, #0
 800f8c4:	765a      	strb	r2, [r3, #25]
	hcan3.Init.AutoWakeUp = DISABLE;
 800f8c6:	4b1d      	ldr	r3, [pc, #116]	; (800f93c <MX_CAN3_Init+0xd8>)
 800f8c8:	2200      	movs	r2, #0
 800f8ca:	769a      	strb	r2, [r3, #26]
	hcan3.Init.AutoRetransmission = ENABLE;
 800f8cc:	4b1b      	ldr	r3, [pc, #108]	; (800f93c <MX_CAN3_Init+0xd8>)
 800f8ce:	2201      	movs	r2, #1
 800f8d0:	76da      	strb	r2, [r3, #27]
	hcan3.Init.ReceiveFifoLocked = DISABLE;
 800f8d2:	4b1a      	ldr	r3, [pc, #104]	; (800f93c <MX_CAN3_Init+0xd8>)
 800f8d4:	2200      	movs	r2, #0
 800f8d6:	771a      	strb	r2, [r3, #28]
	hcan3.Init.TransmitFifoPriority = DISABLE;
 800f8d8:	4b18      	ldr	r3, [pc, #96]	; (800f93c <MX_CAN3_Init+0xd8>)
 800f8da:	2200      	movs	r2, #0
 800f8dc:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan3) != HAL_OK)
 800f8de:	4817      	ldr	r0, [pc, #92]	; (800f93c <MX_CAN3_Init+0xd8>)
 800f8e0:	f006 f932 	bl	8015b48 <HAL_CAN_Init>
 800f8e4:	4603      	mov	r3, r0
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d001      	beq.n	800f8ee <MX_CAN3_Init+0x8a>
	{
		Error_Handler();
 800f8ea:	f004 fb71 	bl	8013fd0 <Error_Handler>
	}
	/* USER CODE BEGIN CAN3_Init 2 */
	CAN_FilterTypeDef Can_FilterConfig3;
	Can_FilterConfig3.FilterActivation = CAN_FILTER_ENABLE ;
 800f8ee:	2301      	movs	r3, #1
 800f8f0:	623b      	str	r3, [r7, #32]
	Can_FilterConfig3.FilterBank = 1;
 800f8f2:	2301      	movs	r3, #1
 800f8f4:	617b      	str	r3, [r7, #20]
	Can_FilterConfig3.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	613b      	str	r3, [r7, #16]
	Can_FilterConfig3.FilterIdHigh = 0x200<<5;
 800f8fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f8fe:	603b      	str	r3, [r7, #0]
	Can_FilterConfig3.FilterIdLow=0x0000;
 800f900:	2300      	movs	r3, #0
 800f902:	607b      	str	r3, [r7, #4]
	Can_FilterConfig3.FilterMaskIdHigh=0x200<<5;
 800f904:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f908:	60bb      	str	r3, [r7, #8]
	Can_FilterConfig3.FilterMaskIdLow =0x0000;
 800f90a:	2300      	movs	r3, #0
 800f90c:	60fb      	str	r3, [r7, #12]
	Can_FilterConfig3.FilterMode= CAN_FILTERMODE_IDMASK;
 800f90e:	2300      	movs	r3, #0
 800f910:	61bb      	str	r3, [r7, #24]
	Can_FilterConfig3.FilterScale = CAN_FILTERSCALE_32BIT;
 800f912:	2301      	movs	r3, #1
 800f914:	61fb      	str	r3, [r7, #28]
	Can_FilterConfig3.SlaveStartFilterBank = 6;
 800f916:	2306      	movs	r3, #6
 800f918:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan3,&Can_FilterConfig3 );
 800f91a:	463b      	mov	r3, r7
 800f91c:	4619      	mov	r1, r3
 800f91e:	4807      	ldr	r0, [pc, #28]	; (800f93c <MX_CAN3_Init+0xd8>)
 800f920:	f006 fa58 	bl	8015dd4 <HAL_CAN_ConfigFilter>
	//
	HAL_CAN_Start(&hcan3);
 800f924:	4805      	ldr	r0, [pc, #20]	; (800f93c <MX_CAN3_Init+0xd8>)
 800f926:	f006 fb41 	bl	8015fac <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan3,CAN_IT_RX_FIFO0_MSG_PENDING);
 800f92a:	2102      	movs	r1, #2
 800f92c:	4803      	ldr	r0, [pc, #12]	; (800f93c <MX_CAN3_Init+0xd8>)
 800f92e:	f006 fd87 	bl	8016440 <HAL_CAN_ActivateNotification>
	/* USER CODE END CAN3_Init 2 */

}
 800f932:	bf00      	nop
 800f934:	3728      	adds	r7, #40	; 0x28
 800f936:	46bd      	mov	sp, r7
 800f938:	bd80      	pop	{r7, pc}
 800f93a:	bf00      	nop
 800f93c:	20009bfc 	.word	0x20009bfc
 800f940:	40003400 	.word	0x40003400

0800f944 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800f944:	b580      	push	{r7, lr}
 800f946:	b08c      	sub	sp, #48	; 0x30
 800f948:	af00      	add	r7, sp, #0
 800f94a:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f94c:	f107 031c 	add.w	r3, r7, #28
 800f950:	2200      	movs	r2, #0
 800f952:	601a      	str	r2, [r3, #0]
 800f954:	605a      	str	r2, [r3, #4]
 800f956:	609a      	str	r2, [r3, #8]
 800f958:	60da      	str	r2, [r3, #12]
 800f95a:	611a      	str	r2, [r3, #16]
	if(canHandle->Instance==CAN2)
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	4a44      	ldr	r2, [pc, #272]	; (800fa74 <HAL_CAN_MspInit+0x130>)
 800f962:	4293      	cmp	r3, r2
 800f964:	d144      	bne.n	800f9f0 <HAL_CAN_MspInit+0xac>
	{
		/* USER CODE BEGIN CAN2_MspInit 0 */

		/* USER CODE END CAN2_MspInit 0 */
		/* CAN2 clock enable */
		__HAL_RCC_CAN2_CLK_ENABLE();
 800f966:	4b44      	ldr	r3, [pc, #272]	; (800fa78 <HAL_CAN_MspInit+0x134>)
 800f968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f96a:	4a43      	ldr	r2, [pc, #268]	; (800fa78 <HAL_CAN_MspInit+0x134>)
 800f96c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f970:	6413      	str	r3, [r2, #64]	; 0x40
 800f972:	4b41      	ldr	r3, [pc, #260]	; (800fa78 <HAL_CAN_MspInit+0x134>)
 800f974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f976:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f97a:	61bb      	str	r3, [r7, #24]
 800f97c:	69bb      	ldr	r3, [r7, #24]
		__HAL_RCC_CAN1_CLK_ENABLE();
 800f97e:	4b3e      	ldr	r3, [pc, #248]	; (800fa78 <HAL_CAN_MspInit+0x134>)
 800f980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f982:	4a3d      	ldr	r2, [pc, #244]	; (800fa78 <HAL_CAN_MspInit+0x134>)
 800f984:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800f988:	6413      	str	r3, [r2, #64]	; 0x40
 800f98a:	4b3b      	ldr	r3, [pc, #236]	; (800fa78 <HAL_CAN_MspInit+0x134>)
 800f98c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f98e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f992:	617b      	str	r3, [r7, #20]
 800f994:	697b      	ldr	r3, [r7, #20]

		__HAL_RCC_GPIOB_CLK_ENABLE();
 800f996:	4b38      	ldr	r3, [pc, #224]	; (800fa78 <HAL_CAN_MspInit+0x134>)
 800f998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f99a:	4a37      	ldr	r2, [pc, #220]	; (800fa78 <HAL_CAN_MspInit+0x134>)
 800f99c:	f043 0302 	orr.w	r3, r3, #2
 800f9a0:	6313      	str	r3, [r2, #48]	; 0x30
 800f9a2:	4b35      	ldr	r3, [pc, #212]	; (800fa78 <HAL_CAN_MspInit+0x134>)
 800f9a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9a6:	f003 0302 	and.w	r3, r3, #2
 800f9aa:	613b      	str	r3, [r7, #16]
 800f9ac:	693b      	ldr	r3, [r7, #16]
		/**CAN2 GPIO Configuration
    PB5     ------> CAN2_RX
    PB6     ------> CAN2_TX
		 */
		GPIO_InitStruct.Pin = CAN2_RX_Pin|CAN2_TX_Pin;
 800f9ae:	2360      	movs	r3, #96	; 0x60
 800f9b0:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f9b2:	2302      	movs	r3, #2
 800f9b4:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f9b6:	2300      	movs	r3, #0
 800f9b8:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f9ba:	2303      	movs	r3, #3
 800f9bc:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800f9be:	2309      	movs	r3, #9
 800f9c0:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f9c2:	f107 031c 	add.w	r3, r7, #28
 800f9c6:	4619      	mov	r1, r3
 800f9c8:	482c      	ldr	r0, [pc, #176]	; (800fa7c <HAL_CAN_MspInit+0x138>)
 800f9ca:	f008 fb99 	bl	8018100 <HAL_GPIO_Init>

		/* CAN2 interrupt Init */
		HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 4, 0);
 800f9ce:	2200      	movs	r2, #0
 800f9d0:	2104      	movs	r1, #4
 800f9d2:	2040      	movs	r0, #64	; 0x40
 800f9d4:	f007 f869 	bl	8016aaa <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800f9d8:	2040      	movs	r0, #64	; 0x40
 800f9da:	f007 f882 	bl	8016ae2 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 4, 1);
 800f9de:	2201      	movs	r2, #1
 800f9e0:	2104      	movs	r1, #4
 800f9e2:	2041      	movs	r0, #65	; 0x41
 800f9e4:	f007 f861 	bl	8016aaa <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 800f9e8:	2041      	movs	r0, #65	; 0x41
 800f9ea:	f007 f87a 	bl	8016ae2 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(CAN3_RX1_IRQn);
		/* USER CODE BEGIN CAN3_MspInit 1 */

		/* USER CODE END CAN3_MspInit 1 */
	}
}
 800f9ee:	e03d      	b.n	800fa6c <HAL_CAN_MspInit+0x128>
	else if(canHandle->Instance==CAN3)
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	4a22      	ldr	r2, [pc, #136]	; (800fa80 <HAL_CAN_MspInit+0x13c>)
 800f9f6:	4293      	cmp	r3, r2
 800f9f8:	d138      	bne.n	800fa6c <HAL_CAN_MspInit+0x128>
		__HAL_RCC_CAN3_CLK_ENABLE();
 800f9fa:	4b1f      	ldr	r3, [pc, #124]	; (800fa78 <HAL_CAN_MspInit+0x134>)
 800f9fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9fe:	4a1e      	ldr	r2, [pc, #120]	; (800fa78 <HAL_CAN_MspInit+0x134>)
 800fa00:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800fa04:	6413      	str	r3, [r2, #64]	; 0x40
 800fa06:	4b1c      	ldr	r3, [pc, #112]	; (800fa78 <HAL_CAN_MspInit+0x134>)
 800fa08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fa0e:	60fb      	str	r3, [r7, #12]
 800fa10:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800fa12:	4b19      	ldr	r3, [pc, #100]	; (800fa78 <HAL_CAN_MspInit+0x134>)
 800fa14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa16:	4a18      	ldr	r2, [pc, #96]	; (800fa78 <HAL_CAN_MspInit+0x134>)
 800fa18:	f043 0301 	orr.w	r3, r3, #1
 800fa1c:	6313      	str	r3, [r2, #48]	; 0x30
 800fa1e:	4b16      	ldr	r3, [pc, #88]	; (800fa78 <HAL_CAN_MspInit+0x134>)
 800fa20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa22:	f003 0301 	and.w	r3, r3, #1
 800fa26:	60bb      	str	r3, [r7, #8]
 800fa28:	68bb      	ldr	r3, [r7, #8]
		GPIO_InitStruct.Pin = CAN3_RX_Pin|CAN3_TX_Pin;
 800fa2a:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 800fa2e:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fa30:	2302      	movs	r3, #2
 800fa32:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fa34:	2300      	movs	r3, #0
 800fa36:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fa38:	2303      	movs	r3, #3
 800fa3a:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 800fa3c:	230b      	movs	r3, #11
 800fa3e:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fa40:	f107 031c 	add.w	r3, r7, #28
 800fa44:	4619      	mov	r1, r3
 800fa46:	480f      	ldr	r0, [pc, #60]	; (800fa84 <HAL_CAN_MspInit+0x140>)
 800fa48:	f008 fb5a 	bl	8018100 <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(CAN3_RX0_IRQn, 0, 0);
 800fa4c:	2200      	movs	r2, #0
 800fa4e:	2100      	movs	r1, #0
 800fa50:	2069      	movs	r0, #105	; 0x69
 800fa52:	f007 f82a 	bl	8016aaa <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN3_RX0_IRQn);
 800fa56:	2069      	movs	r0, #105	; 0x69
 800fa58:	f007 f843 	bl	8016ae2 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN3_RX1_IRQn, 0, 0);
 800fa5c:	2200      	movs	r2, #0
 800fa5e:	2100      	movs	r1, #0
 800fa60:	206a      	movs	r0, #106	; 0x6a
 800fa62:	f007 f822 	bl	8016aaa <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN3_RX1_IRQn);
 800fa66:	206a      	movs	r0, #106	; 0x6a
 800fa68:	f007 f83b 	bl	8016ae2 <HAL_NVIC_EnableIRQ>
}
 800fa6c:	bf00      	nop
 800fa6e:	3730      	adds	r7, #48	; 0x30
 800fa70:	46bd      	mov	sp, r7
 800fa72:	bd80      	pop	{r7, pc}
 800fa74:	40006800 	.word	0x40006800
 800fa78:	40023800 	.word	0x40023800
 800fa7c:	40020400 	.word	0x40020400
 800fa80:	40003400 	.word	0x40003400
 800fa84:	40020000 	.word	0x40020000

0800fa88 <TransmitCanPkt>:
}

/* USER CODE BEGIN 1 */

void TransmitCanPkt(const enum enumCanId Ken_idetifier)
{
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	b084      	sub	sp, #16
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	4603      	mov	r3, r0
 800fa90:	80fb      	strh	r3, [r7, #6]
	void *pp_ptr;
	uint16_t Traverser = 0;
 800fa92:	2300      	movs	r3, #0
 800fa94:	81bb      	strh	r3, [r7, #12]
	uint16_t uc_size = 0;
 800fa96:	2300      	movs	r3, #0
 800fa98:	81fb      	strh	r3, [r7, #14]



	switch(EI_data.ProtocolType)
 800fa9a:	4ba6      	ldr	r3, [pc, #664]	; (800fd34 <TransmitCanPkt+0x2ac>)
 800fa9c:	781b      	ldrb	r3, [r3, #0]
 800fa9e:	2b03      	cmp	r3, #3
 800faa0:	f000 819a 	beq.w	800fdd8 <TransmitCanPkt+0x350>
 800faa4:	2b03      	cmp	r3, #3
 800faa6:	f300 823d 	bgt.w	800ff24 <TransmitCanPkt+0x49c>
 800faaa:	2b01      	cmp	r3, #1
 800faac:	d003      	beq.n	800fab6 <TransmitCanPkt+0x2e>
 800faae:	2b02      	cmp	r3, #2
 800fab0:	f000 80e5 	beq.w	800fc7e <TransmitCanPkt+0x1f6>
 800fab4:	e236      	b.n	800ff24 <TransmitCanPkt+0x49c>
	{

	case HITACHI:
	{
		/* _____________________________ HITACHI ________________________________________ */
		if( (CHECKFLAG(8,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800fab6:	4ba0      	ldr	r3, [pc, #640]	; (800fd38 <TransmitCanPkt+0x2b0>)
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	0a1b      	lsrs	r3, r3, #8
 800fabc:	f003 0301 	and.w	r3, r3, #1
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d003      	beq.n	800facc <TransmitCanPkt+0x44>
		{
			printf("Stopping CAN Transmission\n");
 800fac4:	489d      	ldr	r0, [pc, #628]	; (800fd3c <TransmitCanPkt+0x2b4>)
 800fac6:	f013 f8b5 	bl	8022c34 <puts>
			return;
 800faca:	e22b      	b.n	800ff24 <TransmitCanPkt+0x49c>
		}

		switch((int)Ken_idetifier)
 800facc:	88fb      	ldrh	r3, [r7, #6]
 800face:	f240 1219 	movw	r2, #281	; 0x119
 800fad2:	4293      	cmp	r3, r2
 800fad4:	d042      	beq.n	800fb5c <TransmitCanPkt+0xd4>
 800fad6:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 800fada:	f340 80ca 	ble.w	800fc72 <TransmitCanPkt+0x1ea>
 800fade:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800fae2:	f300 80c6 	bgt.w	800fc72 <TransmitCanPkt+0x1ea>
 800fae6:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 800faea:	f2c0 80c2 	blt.w	800fc72 <TransmitCanPkt+0x1ea>
 800faee:	f5a3 73f9 	sub.w	r3, r3, #498	; 0x1f2
 800faf2:	2b16      	cmp	r3, #22
 800faf4:	f200 80bd 	bhi.w	800fc72 <TransmitCanPkt+0x1ea>
 800faf8:	a201      	add	r2, pc, #4	; (adr r2, 800fb00 <TransmitCanPkt+0x78>)
 800fafa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fafe:	bf00      	nop
 800fb00:	0800fb95 	.word	0x0800fb95
 800fb04:	0800fb95 	.word	0x0800fb95
 800fb08:	0800fc4f 	.word	0x0800fc4f
 800fb0c:	0800fc73 	.word	0x0800fc73
 800fb10:	0800fc73 	.word	0x0800fc73
 800fb14:	0800fc73 	.word	0x0800fc73
 800fb18:	0800fc73 	.word	0x0800fc73
 800fb1c:	0800fc73 	.word	0x0800fc73
 800fb20:	0800fc73 	.word	0x0800fc73
 800fb24:	0800fc73 	.word	0x0800fc73
 800fb28:	0800fc73 	.word	0x0800fc73
 800fb2c:	0800fc73 	.word	0x0800fc73
 800fb30:	0800fc73 	.word	0x0800fc73
 800fb34:	0800fc73 	.word	0x0800fc73
 800fb38:	0800fc73 	.word	0x0800fc73
 800fb3c:	0800fbb9 	.word	0x0800fbb9
 800fb40:	0800fbb9 	.word	0x0800fbb9
 800fb44:	0800fbe3 	.word	0x0800fbe3
 800fb48:	0800fbe3 	.word	0x0800fbe3
 800fb4c:	0800fc07 	.word	0x0800fc07
 800fb50:	0800fc73 	.word	0x0800fc73
 800fb54:	0800fc2b 	.word	0x0800fc2b
 800fb58:	0800fc2b 	.word	0x0800fc2b
		{
		case EI_PROCESS_DATA:
			vEI_Transver_EI_To_MIE.ActualDataBytes = (EI_data.Hitachi_st.PeersCnt * MAX_OUTPUTS_PER_PEER);
 800fb5c:	4b75      	ldr	r3, [pc, #468]	; (800fd34 <TransmitCanPkt+0x2ac>)
 800fb5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800fb62:	b29b      	uxth	r3, r3
 800fb64:	011b      	lsls	r3, r3, #4
 800fb66:	b29a      	uxth	r2, r3
 800fb68:	4b75      	ldr	r3, [pc, #468]	; (800fd40 <TransmitCanPkt+0x2b8>)
 800fb6a:	801a      	strh	r2, [r3, #0]
			pp_ptr = &vEI_Transver_EI_To_MIE;
 800fb6c:	4b74      	ldr	r3, [pc, #464]	; (800fd40 <TransmitCanPkt+0x2b8>)
 800fb6e:	60bb      	str	r3, [r7, #8]
			uc_size =(vEI_Transver_EI_To_MIE.ActualDataBytes + sizeof(vEI_Transver_EI_To_MIE.ActualDataBytes)); /* +2 is by Considering */
 800fb70:	4b73      	ldr	r3, [pc, #460]	; (800fd40 <TransmitCanPkt+0x2b8>)
 800fb72:	881b      	ldrh	r3, [r3, #0]
 800fb74:	3302      	adds	r3, #2
 800fb76:	81fb      	strh	r3, [r7, #14]
			//uc_size = sizeof(EI_VITAL_DATA_TO_VITAL_COMPUTER_t);
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 800fb78:	89fb      	ldrh	r3, [r7, #14]
 800fb7a:	88fa      	ldrh	r2, [r7, #6]
 800fb7c:	4619      	mov	r1, r3
 800fb7e:	68b8      	ldr	r0, [r7, #8]
 800fb80:	f000 f9f2 	bl	800ff68 <sendCanPkts>
			if(Debug_flag == 1)
 800fb84:	4b6f      	ldr	r3, [pc, #444]	; (800fd44 <TransmitCanPkt+0x2bc>)
 800fb86:	781b      	ldrb	r3, [r3, #0]
 800fb88:	2b01      	cmp	r3, #1
 800fb8a:	d174      	bne.n	800fc76 <TransmitCanPkt+0x1ee>
			{
				printf("SENT SIGNAL DATA TO MIE\n");
 800fb8c:	486e      	ldr	r0, [pc, #440]	; (800fd48 <TransmitCanPkt+0x2c0>)
 800fb8e:	f013 f851 	bl	8022c34 <puts>
			}
			break;
 800fb92:	e070      	b.n	800fc76 <TransmitCanPkt+0x1ee>

		case EiPC_1_HEALTH:
		case EiPC_2_HEALTH:
			pp_ptr = &Hitachi_fault_logging_st;
 800fb94:	4b6d      	ldr	r3, [pc, #436]	; (800fd4c <TransmitCanPkt+0x2c4>)
 800fb96:	60bb      	str	r3, [r7, #8]
			uc_size = sizeof(HITACHI_FAULT_LOGGING_t);
 800fb98:	2316      	movs	r3, #22
 800fb9a:	81fb      	strh	r3, [r7, #14]
			if(Debug_flag == 1)
 800fb9c:	4b69      	ldr	r3, [pc, #420]	; (800fd44 <TransmitCanPkt+0x2bc>)
 800fb9e:	781b      	ldrb	r3, [r3, #0]
 800fba0:	2b01      	cmp	r3, #1
 800fba2:	d102      	bne.n	800fbaa <TransmitCanPkt+0x122>
			{
				printf("\nHealth 2 MIE\n");
 800fba4:	486a      	ldr	r0, [pc, #424]	; (800fd50 <TransmitCanPkt+0x2c8>)
 800fba6:	f013 f845 	bl	8022c34 <puts>
			}
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 800fbaa:	89fb      	ldrh	r3, [r7, #14]
 800fbac:	88fa      	ldrh	r2, [r7, #6]
 800fbae:	4619      	mov	r1, r3
 800fbb0:	68b8      	ldr	r0, [r7, #8]
 800fbb2:	f000 f9d9 	bl	800ff68 <sendCanPkts>
			break;
 800fbb6:	e061      	b.n	800fc7c <TransmitCanPkt+0x1f4>

		case EI_1_SELF_SHARING:
		case EI_2_SELF_SHARING:
			pp_ptr = &Temp_Tx_Ei_self_sharing_st;
 800fbb8:	4b66      	ldr	r3, [pc, #408]	; (800fd54 <TransmitCanPkt+0x2cc>)
 800fbba:	60bb      	str	r3, [r7, #8]
			uc_size = sizeof(EI_SELF_SHARING_t);
 800fbbc:	2318      	movs	r3, #24
 800fbbe:	81fb      	strh	r3, [r7, #14]
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 800fbc0:	89fb      	ldrh	r3, [r7, #14]
 800fbc2:	88fa      	ldrh	r2, [r7, #6]
 800fbc4:	4619      	mov	r1, r3
 800fbc6:	68b8      	ldr	r0, [r7, #8]
 800fbc8:	f000 f9ce 	bl	800ff68 <sendCanPkts>
			if(Debug_flag == 1)
 800fbcc:	4b5d      	ldr	r3, [pc, #372]	; (800fd44 <TransmitCanPkt+0x2bc>)
 800fbce:	781b      	ldrb	r3, [r3, #0]
 800fbd0:	2b01      	cmp	r3, #1
 800fbd2:	d152      	bne.n	800fc7a <TransmitCanPkt+0x1f2>
			{
				printf("Sent2_O:%u\n",Temp_Tx_Ei_self_sharing_st.Peer_Index);
 800fbd4:	4b5f      	ldr	r3, [pc, #380]	; (800fd54 <TransmitCanPkt+0x2cc>)
 800fbd6:	781b      	ldrb	r3, [r3, #0]
 800fbd8:	4619      	mov	r1, r3
 800fbda:	485f      	ldr	r0, [pc, #380]	; (800fd58 <TransmitCanPkt+0x2d0>)
 800fbdc:	f012 ff8e 	bl	8022afc <iprintf>
			}
			break;
 800fbe0:	e04b      	b.n	800fc7a <TransmitCanPkt+0x1f2>

		case SEND_VITAL_MSG_1:
		case SEND_VITAL_MSG_2:
			pp_ptr = &Tx_VITAL_MSG_CAN_st;
 800fbe2:	4b5e      	ldr	r3, [pc, #376]	; (800fd5c <TransmitCanPkt+0x2d4>)
 800fbe4:	60bb      	str	r3, [r7, #8]
			uc_size = sizeof(SEND_VITAL_MSG_2_OTH_t);
 800fbe6:	2346      	movs	r3, #70	; 0x46
 800fbe8:	81fb      	strh	r3, [r7, #14]
			if(Debug_flag == 1)
 800fbea:	4b56      	ldr	r3, [pc, #344]	; (800fd44 <TransmitCanPkt+0x2bc>)
 800fbec:	781b      	ldrb	r3, [r3, #0]
 800fbee:	2b01      	cmp	r3, #1
 800fbf0:	d102      	bne.n	800fbf8 <TransmitCanPkt+0x170>
			{
				printf("\nSending V-Message 2-O\n");
 800fbf2:	485b      	ldr	r0, [pc, #364]	; (800fd60 <TransmitCanPkt+0x2d8>)
 800fbf4:	f013 f81e 	bl	8022c34 <puts>
			}
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 800fbf8:	89fb      	ldrh	r3, [r7, #14]
 800fbfa:	88fa      	ldrh	r2, [r7, #6]
 800fbfc:	4619      	mov	r1, r3
 800fbfe:	68b8      	ldr	r0, [r7, #8]
 800fc00:	f000 f9b2 	bl	800ff68 <sendCanPkts>
			break;
 800fc04:	e03a      	b.n	800fc7c <TransmitCanPkt+0x1f4>

		case CAN_FAULT_INJECTION:
			pp_ptr = &Hitachi_fault_injection_st;
 800fc06:	4b4c      	ldr	r3, [pc, #304]	; (800fd38 <TransmitCanPkt+0x2b0>)
 800fc08:	60bb      	str	r3, [r7, #8]
			uc_size = sizeof(HITACHI_FAULT_INJECTION_t);
 800fc0a:	2308      	movs	r3, #8
 800fc0c:	81fb      	strh	r3, [r7, #14]
			if(Debug_flag == 1)
 800fc0e:	4b4d      	ldr	r3, [pc, #308]	; (800fd44 <TransmitCanPkt+0x2bc>)
 800fc10:	781b      	ldrb	r3, [r3, #0]
 800fc12:	2b01      	cmp	r3, #1
 800fc14:	d102      	bne.n	800fc1c <TransmitCanPkt+0x194>
			{
				printf("\nSending Fault Injection data 2-O\n");
 800fc16:	4853      	ldr	r0, [pc, #332]	; (800fd64 <TransmitCanPkt+0x2dc>)
 800fc18:	f013 f80c 	bl	8022c34 <puts>
			}
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 800fc1c:	89fb      	ldrh	r3, [r7, #14]
 800fc1e:	88fa      	ldrh	r2, [r7, #6]
 800fc20:	4619      	mov	r1, r3
 800fc22:	68b8      	ldr	r0, [r7, #8]
 800fc24:	f000 f9a0 	bl	800ff68 <sendCanPkts>
			break;
 800fc28:	e028      	b.n	800fc7c <TransmitCanPkt+0x1f4>

		case EIPC1_RELAYS_2_OTHER:
		case EIPC2_RELAYS_2_OTHER:
			pp_ptr = &Tx_Temp_Main_Relays_st;
 800fc2a:	4b4f      	ldr	r3, [pc, #316]	; (800fd68 <TransmitCanPkt+0x2e0>)
 800fc2c:	60bb      	str	r3, [r7, #8]
			uc_size = sizeof(RELAYS_t);
 800fc2e:	2314      	movs	r3, #20
 800fc30:	81fb      	strh	r3, [r7, #14]
			if(Debug_flag == 1)
 800fc32:	4b44      	ldr	r3, [pc, #272]	; (800fd44 <TransmitCanPkt+0x2bc>)
 800fc34:	781b      	ldrb	r3, [r3, #0]
 800fc36:	2b01      	cmp	r3, #1
 800fc38:	d102      	bne.n	800fc40 <TransmitCanPkt+0x1b8>
			{
				printf("Sending Relays-O\n");
 800fc3a:	484c      	ldr	r0, [pc, #304]	; (800fd6c <TransmitCanPkt+0x2e4>)
 800fc3c:	f012 fffa 	bl	8022c34 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 800fc40:	89fb      	ldrh	r3, [r7, #14]
 800fc42:	88fa      	ldrh	r2, [r7, #6]
 800fc44:	4619      	mov	r1, r3
 800fc46:	68b8      	ldr	r0, [r7, #8]
 800fc48:	f000 f98e 	bl	800ff68 <sendCanPkts>
			break;
 800fc4c:	e016      	b.n	800fc7c <TransmitCanPkt+0x1f4>


		case COMBINE_EiPC_HEALTH:
			pp_ptr = &Ei_health_2_mie_st;
 800fc4e:	4b48      	ldr	r3, [pc, #288]	; (800fd70 <TransmitCanPkt+0x2e8>)
 800fc50:	60bb      	str	r3, [r7, #8]
			uc_size = sizeof(EI_HEALTH_2_MIE_t);
 800fc52:	2304      	movs	r3, #4
 800fc54:	81fb      	strh	r3, [r7, #14]
			if(Debug_flag == 1)
 800fc56:	4b3b      	ldr	r3, [pc, #236]	; (800fd44 <TransmitCanPkt+0x2bc>)
 800fc58:	781b      	ldrb	r3, [r3, #0]
 800fc5a:	2b01      	cmp	r3, #1
 800fc5c:	d102      	bne.n	800fc64 <TransmitCanPkt+0x1dc>
			{
				printf("Sending Combine Health\n");
 800fc5e:	4845      	ldr	r0, [pc, #276]	; (800fd74 <TransmitCanPkt+0x2ec>)
 800fc60:	f012 ffe8 	bl	8022c34 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 800fc64:	89fb      	ldrh	r3, [r7, #14]
 800fc66:	88fa      	ldrh	r2, [r7, #6]
 800fc68:	4619      	mov	r1, r3
 800fc6a:	68b8      	ldr	r0, [r7, #8]
 800fc6c:	f000 f97c 	bl	800ff68 <sendCanPkts>
			break;
 800fc70:	e004      	b.n	800fc7c <TransmitCanPkt+0x1f4>



		default:
			break;
 800fc72:	bf00      	nop
 800fc74:	e156      	b.n	800ff24 <TransmitCanPkt+0x49c>
			break;
 800fc76:	bf00      	nop
 800fc78:	e154      	b.n	800ff24 <TransmitCanPkt+0x49c>
			break;
 800fc7a:	bf00      	nop

		} /* 	switch((int)Ken_idetifier) for HITACHI 	*/
		break; /* case HITACHI: break */
 800fc7c:	e152      	b.n	800ff24 <TransmitCanPkt+0x49c>
	/* _____________________________ HITACHI ________________________________________ */

	case SIEMENS:
	{
		/* _____________________________ SIEMENS ________________________________________ */
		switch((int)Ken_idetifier)
 800fc7e:	88fb      	ldrh	r3, [r7, #6]
 800fc80:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800fc84:	f300 814b 	bgt.w	800ff1e <TransmitCanPkt+0x496>
 800fc88:	f240 2207 	movw	r2, #519	; 0x207
 800fc8c:	4293      	cmp	r3, r2
 800fc8e:	da3d      	bge.n	800fd0c <TransmitCanPkt+0x284>
 800fc90:	f240 2205 	movw	r2, #517	; 0x205
 800fc94:	4293      	cmp	r3, r2
 800fc96:	f000 8090 	beq.w	800fdba <TransmitCanPkt+0x332>
 800fc9a:	f240 2205 	movw	r2, #517	; 0x205
 800fc9e:	4293      	cmp	r3, r2
 800fca0:	f300 813d 	bgt.w	800ff1e <TransmitCanPkt+0x496>
 800fca4:	f240 1219 	movw	r2, #281	; 0x119
 800fca8:	4293      	cmp	r3, r2
 800fcaa:	d009      	beq.n	800fcc0 <TransmitCanPkt+0x238>
 800fcac:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 800fcb0:	f340 8135 	ble.w	800ff1e <TransmitCanPkt+0x496>
 800fcb4:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 800fcb8:	2b01      	cmp	r3, #1
 800fcba:	f200 8130 	bhi.w	800ff1e <TransmitCanPkt+0x496>
 800fcbe:	e013      	b.n	800fce8 <TransmitCanPkt+0x260>
		{

		case EI_PROCESS_DATA:
			pp_ptr = &VitalData2MIE_st;
 800fcc0:	4b2d      	ldr	r3, [pc, #180]	; (800fd78 <TransmitCanPkt+0x2f0>)
 800fcc2:	60bb      	str	r3, [r7, #8]
			//				uc_size = sizeof(VITAL_DATA_t);
			uc_size =(VitalData2MIE_st.NoofDataBytes + sizeof(VitalData2MIE_st.NoofDataBytes)); /* +2 is by Considering */
 800fcc4:	4b2c      	ldr	r3, [pc, #176]	; (800fd78 <TransmitCanPkt+0x2f0>)
 800fcc6:	881b      	ldrh	r3, [r3, #0]
 800fcc8:	3302      	adds	r3, #2
 800fcca:	81fb      	strh	r3, [r7, #14]

			if(Debug_flag == 1)
 800fccc:	4b1d      	ldr	r3, [pc, #116]	; (800fd44 <TransmitCanPkt+0x2bc>)
 800fcce:	781b      	ldrb	r3, [r3, #0]
 800fcd0:	2b01      	cmp	r3, #1
 800fcd2:	d102      	bne.n	800fcda <TransmitCanPkt+0x252>
			{
				printf("Sending Signals 2 MIE\n");
 800fcd4:	4829      	ldr	r0, [pc, #164]	; (800fd7c <TransmitCanPkt+0x2f4>)
 800fcd6:	f012 ffad 	bl	8022c34 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 800fcda:	89fb      	ldrh	r3, [r7, #14]
 800fcdc:	88fa      	ldrh	r2, [r7, #6]
 800fcde:	4619      	mov	r1, r3
 800fce0:	68b8      	ldr	r0, [r7, #8]
 800fce2:	f000 f941 	bl	800ff68 <sendCanPkts>
			break;
 800fce6:	e076      	b.n	800fdd6 <TransmitCanPkt+0x34e>

		case EI_1_SELF_SHARING:
		case EI_2_SELF_SHARING:
			pp_ptr = &Tx_Siemens_self_sharing_st;
 800fce8:	4b25      	ldr	r3, [pc, #148]	; (800fd80 <TransmitCanPkt+0x2f8>)
 800fcea:	60bb      	str	r3, [r7, #8]
			uc_size = sizeof(SIEMENS_SELF_SHARING_t);
 800fcec:	2304      	movs	r3, #4
 800fcee:	81fb      	strh	r3, [r7, #14]
			if(Debug_flag == 1)
 800fcf0:	4b14      	ldr	r3, [pc, #80]	; (800fd44 <TransmitCanPkt+0x2bc>)
 800fcf2:	781b      	ldrb	r3, [r3, #0]
 800fcf4:	2b01      	cmp	r3, #1
 800fcf6:	d102      	bne.n	800fcfe <TransmitCanPkt+0x276>
			{
				printf("Sending Signals 2 MIE\n");
 800fcf8:	4820      	ldr	r0, [pc, #128]	; (800fd7c <TransmitCanPkt+0x2f4>)
 800fcfa:	f012 ff9b 	bl	8022c34 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 800fcfe:	89fb      	ldrh	r3, [r7, #14]
 800fd00:	88fa      	ldrh	r2, [r7, #6]
 800fd02:	4619      	mov	r1, r3
 800fd04:	68b8      	ldr	r0, [r7, #8]
 800fd06:	f000 f92f 	bl	800ff68 <sendCanPkts>
			break;
 800fd0a:	e064      	b.n	800fdd6 <TransmitCanPkt+0x34e>

		case EIPC1_RELAYS_2_OTHER:
		case EIPC2_RELAYS_2_OTHER:
			pp_ptr = &SiemensMain_Relays_st;
 800fd0c:	4b1d      	ldr	r3, [pc, #116]	; (800fd84 <TransmitCanPkt+0x2fc>)
 800fd0e:	60bb      	str	r3, [r7, #8]

			uc_size = (EI_data.Siemens_st.Booloutputs % 8);
 800fd10:	4b08      	ldr	r3, [pc, #32]	; (800fd34 <TransmitCanPkt+0x2ac>)
 800fd12:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800fd16:	f003 0307 	and.w	r3, r3, #7
 800fd1a:	81fb      	strh	r3, [r7, #14]
			if (uc_size != 0)
 800fd1c:	89fb      	ldrh	r3, [r7, #14]
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d032      	beq.n	800fd88 <TransmitCanPkt+0x300>
			{
				uc_size = ((EI_data.Siemens_st.Booloutputs / 8)) + 1; //	including 0th buffer
 800fd22:	4b04      	ldr	r3, [pc, #16]	; (800fd34 <TransmitCanPkt+0x2ac>)
 800fd24:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800fd28:	08db      	lsrs	r3, r3, #3
 800fd2a:	b29b      	uxth	r3, r3
 800fd2c:	3301      	adds	r3, #1
 800fd2e:	81fb      	strh	r3, [r7, #14]
 800fd30:	e02f      	b.n	800fd92 <TransmitCanPkt+0x30a>
 800fd32:	bf00      	nop
 800fd34:	20000304 	.word	0x20000304
 800fd38:	20001968 	.word	0x20001968
 800fd3c:	08026e40 	.word	0x08026e40
 800fd40:	200010f0 	.word	0x200010f0
 800fd44:	20000645 	.word	0x20000645
 800fd48:	08026e5c 	.word	0x08026e5c
 800fd4c:	20001970 	.word	0x20001970
 800fd50:	08026e74 	.word	0x08026e74
 800fd54:	20001860 	.word	0x20001860
 800fd58:	08026e84 	.word	0x08026e84
 800fd5c:	20001890 	.word	0x20001890
 800fd60:	08026e90 	.word	0x08026e90
 800fd64:	08026ea8 	.word	0x08026ea8
 800fd68:	2000201c 	.word	0x2000201c
 800fd6c:	08026ecc 	.word	0x08026ecc
 800fd70:	20000e3c 	.word	0x20000e3c
 800fd74:	08026ee0 	.word	0x08026ee0
 800fd78:	20003554 	.word	0x20003554
 800fd7c:	08026ef8 	.word	0x08026ef8
 800fd80:	2000352c 	.word	0x2000352c
 800fd84:	20003758 	.word	0x20003758
			}
			else
			{
				uc_size = (EI_data.Siemens_st.Booloutputs / 8);
 800fd88:	4b68      	ldr	r3, [pc, #416]	; (800ff2c <TransmitCanPkt+0x4a4>)
 800fd8a:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800fd8e:	08db      	lsrs	r3, r3, #3
 800fd90:	81fb      	strh	r3, [r7, #14]
			}

			SiemensMain_Relays_st.NoofDataBytes = uc_size;
 800fd92:	4a67      	ldr	r2, [pc, #412]	; (800ff30 <TransmitCanPkt+0x4a8>)
 800fd94:	89fb      	ldrh	r3, [r7, #14]
 800fd96:	8013      	strh	r3, [r2, #0]
			//				printf("NoofDataBytes:%u\n",SiemensMain_Relays_st.NoofDataBytes);
			uc_size = uc_size + ( (sizeof(SiemensMain_Relays_st.NoofDataBytes)) + (sizeof(SiemensMain_Relays_st.VitalCRC)) );
 800fd98:	89fb      	ldrh	r3, [r7, #14]
 800fd9a:	3304      	adds	r3, #4
 800fd9c:	81fb      	strh	r3, [r7, #14]
			//				printf("Relays2Other:%u\n",uc_size);
			if(Debug_flag == 1)
 800fd9e:	4b65      	ldr	r3, [pc, #404]	; (800ff34 <TransmitCanPkt+0x4ac>)
 800fda0:	781b      	ldrb	r3, [r3, #0]
 800fda2:	2b01      	cmp	r3, #1
 800fda4:	d102      	bne.n	800fdac <TransmitCanPkt+0x324>
			{
				printf("Sending Relays 2 Other\n");
 800fda6:	4864      	ldr	r0, [pc, #400]	; (800ff38 <TransmitCanPkt+0x4b0>)
 800fda8:	f012 ff44 	bl	8022c34 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 800fdac:	89fb      	ldrh	r3, [r7, #14]
 800fdae:	88fa      	ldrh	r2, [r7, #6]
 800fdb0:	4619      	mov	r1, r3
 800fdb2:	68b8      	ldr	r0, [r7, #8]
 800fdb4:	f000 f8d8 	bl	800ff68 <sendCanPkts>
			break;
 800fdb8:	e00d      	b.n	800fdd6 <TransmitCanPkt+0x34e>

		case CAN_FAULT_INJECTION:
			pp_ptr = &Siemens_fault_injection_st;
 800fdba:	4b60      	ldr	r3, [pc, #384]	; (800ff3c <TransmitCanPkt+0x4b4>)
 800fdbc:	60bb      	str	r3, [r7, #8]
			uc_size = sizeof(SIEMENS_FAULT_INJECTION_t);
 800fdbe:	2308      	movs	r3, #8
 800fdc0:	81fb      	strh	r3, [r7, #14]
			printf("\nSending Fault Injection data 2-O\n");
 800fdc2:	485f      	ldr	r0, [pc, #380]	; (800ff40 <TransmitCanPkt+0x4b8>)
 800fdc4:	f012 ff36 	bl	8022c34 <puts>
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 800fdc8:	89fb      	ldrh	r3, [r7, #14]
 800fdca:	88fa      	ldrh	r2, [r7, #6]
 800fdcc:	4619      	mov	r1, r3
 800fdce:	68b8      	ldr	r0, [r7, #8]
 800fdd0:	f000 f8ca 	bl	800ff68 <sendCanPkts>
			break;
 800fdd4:	bf00      	nop
		}
		break; /* case SIEMENS: break */
 800fdd6:	e0a2      	b.n	800ff1e <TransmitCanPkt+0x496>


	case MEDHA:
	{
		/* _____________________________ MEDHA ________________________________________ */
		switch((int)Ken_idetifier)
 800fdd8:	88fb      	ldrh	r3, [r7, #6]
 800fdda:	f240 1219 	movw	r2, #281	; 0x119
 800fdde:	4293      	cmp	r3, r2
 800fde0:	d042      	beq.n	800fe68 <TransmitCanPkt+0x3e0>
 800fde2:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 800fde6:	f340 809c 	ble.w	800ff22 <TransmitCanPkt+0x49a>
 800fdea:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800fdee:	f300 8098 	bgt.w	800ff22 <TransmitCanPkt+0x49a>
 800fdf2:	f5b3 7ff9 	cmp.w	r3, #498	; 0x1f2
 800fdf6:	f2c0 8094 	blt.w	800ff22 <TransmitCanPkt+0x49a>
 800fdfa:	f5a3 73f9 	sub.w	r3, r3, #498	; 0x1f2
 800fdfe:	2b16      	cmp	r3, #22
 800fe00:	f200 808f 	bhi.w	800ff22 <TransmitCanPkt+0x49a>
 800fe04:	a201      	add	r2, pc, #4	; (adr r2, 800fe0c <TransmitCanPkt+0x384>)
 800fe06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe0a:	bf00      	nop
 800fe0c:	0800feb7 	.word	0x0800feb7
 800fe10:	0800feb7 	.word	0x0800feb7
 800fe14:	0800ff23 	.word	0x0800ff23
 800fe18:	0800ff23 	.word	0x0800ff23
 800fe1c:	0800ff23 	.word	0x0800ff23
 800fe20:	0800ff23 	.word	0x0800ff23
 800fe24:	0800ff23 	.word	0x0800ff23
 800fe28:	0800ff23 	.word	0x0800ff23
 800fe2c:	0800ff23 	.word	0x0800ff23
 800fe30:	0800ff23 	.word	0x0800ff23
 800fe34:	0800ff23 	.word	0x0800ff23
 800fe38:	0800ff23 	.word	0x0800ff23
 800fe3c:	0800ff23 	.word	0x0800ff23
 800fe40:	0800ff23 	.word	0x0800ff23
 800fe44:	0800ff23 	.word	0x0800ff23
 800fe48:	0800fe95 	.word	0x0800fe95
 800fe4c:	0800fe95 	.word	0x0800fe95
 800fe50:	0800ff23 	.word	0x0800ff23
 800fe54:	0800ff23 	.word	0x0800ff23
 800fe58:	0800fedb 	.word	0x0800fedb
 800fe5c:	0800ff23 	.word	0x0800ff23
 800fe60:	0800fef7 	.word	0x0800fef7
 800fe64:	0800fef7 	.word	0x0800fef7
		{
		case EI_PROCESS_DATA:
			pp_ptr = &Medha_Relay_Sts_st;
 800fe68:	4b36      	ldr	r3, [pc, #216]	; (800ff44 <TransmitCanPkt+0x4bc>)
 800fe6a:	60bb      	str	r3, [r7, #8]
			uc_size = sizeof(MEDHA_RELAY_STS_t);
 800fe6c:	2330      	movs	r3, #48	; 0x30
 800fe6e:	81fb      	strh	r3, [r7, #14]
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 800fe70:	89fb      	ldrh	r3, [r7, #14]
 800fe72:	88fa      	ldrh	r2, [r7, #6]
 800fe74:	4619      	mov	r1, r3
 800fe76:	68b8      	ldr	r0, [r7, #8]
 800fe78:	f000 f876 	bl	800ff68 <sendCanPkts>
			if(Debug_flag == 1)
 800fe7c:	4b2d      	ldr	r3, [pc, #180]	; (800ff34 <TransmitCanPkt+0x4ac>)
 800fe7e:	781b      	ldrb	r3, [r3, #0]
 800fe80:	2b01      	cmp	r3, #1
 800fe82:	d14a      	bne.n	800ff1a <TransmitCanPkt+0x492>
			{
				printf("SENT MEDHA SIGNAL DATA TO MIE:%lu\n",HAL_GetTick());
 800fe84:	f005 fe30 	bl	8015ae8 <HAL_GetTick>
 800fe88:	4603      	mov	r3, r0
 800fe8a:	4619      	mov	r1, r3
 800fe8c:	482e      	ldr	r0, [pc, #184]	; (800ff48 <TransmitCanPkt+0x4c0>)
 800fe8e:	f012 fe35 	bl	8022afc <iprintf>
			}
			break;
 800fe92:	e042      	b.n	800ff1a <TransmitCanPkt+0x492>

		case EI_1_SELF_SHARING:
		case EI_2_SELF_SHARING:
			pp_ptr = &Medha_ei_self_sharing_TX_st;
 800fe94:	4b2d      	ldr	r3, [pc, #180]	; (800ff4c <TransmitCanPkt+0x4c4>)
 800fe96:	60bb      	str	r3, [r7, #8]
			uc_size = sizeof(MEDHA_EI_SELF_SHARING_t);
 800fe98:	2308      	movs	r3, #8
 800fe9a:	81fb      	strh	r3, [r7, #14]
			if(Debug_flag == 1)
 800fe9c:	4b25      	ldr	r3, [pc, #148]	; (800ff34 <TransmitCanPkt+0x4ac>)
 800fe9e:	781b      	ldrb	r3, [r3, #0]
 800fea0:	2b01      	cmp	r3, #1
 800fea2:	d102      	bne.n	800feaa <TransmitCanPkt+0x422>
			{
				printf("\nSending_2_O\n");
 800fea4:	482a      	ldr	r0, [pc, #168]	; (800ff50 <TransmitCanPkt+0x4c8>)
 800fea6:	f012 fec5 	bl	8022c34 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 800feaa:	89fb      	ldrh	r3, [r7, #14]
 800feac:	88fa      	ldrh	r2, [r7, #6]
 800feae:	4619      	mov	r1, r3
 800feb0:	68b8      	ldr	r0, [r7, #8]
 800feb2:	f000 f859 	bl	800ff68 <sendCanPkts>

		case EiPC_1_HEALTH:
		case EiPC_2_HEALTH:
			pp_ptr = &Hitachi_fault_logging_st;
 800feb6:	4b27      	ldr	r3, [pc, #156]	; (800ff54 <TransmitCanPkt+0x4cc>)
 800feb8:	60bb      	str	r3, [r7, #8]
			uc_size = sizeof(HITACHI_FAULT_LOGGING_t);
 800feba:	2316      	movs	r3, #22
 800febc:	81fb      	strh	r3, [r7, #14]
			if(Debug_flag == 1)
 800febe:	4b1d      	ldr	r3, [pc, #116]	; (800ff34 <TransmitCanPkt+0x4ac>)
 800fec0:	781b      	ldrb	r3, [r3, #0]
 800fec2:	2b01      	cmp	r3, #1
 800fec4:	d102      	bne.n	800fecc <TransmitCanPkt+0x444>
			{
				printf("\nHealth 2 MIE\n");
 800fec6:	4824      	ldr	r0, [pc, #144]	; (800ff58 <TransmitCanPkt+0x4d0>)
 800fec8:	f012 feb4 	bl	8022c34 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 800fecc:	89fb      	ldrh	r3, [r7, #14]
 800fece:	88fa      	ldrh	r2, [r7, #6]
 800fed0:	4619      	mov	r1, r3
 800fed2:	68b8      	ldr	r0, [r7, #8]
 800fed4:	f000 f848 	bl	800ff68 <sendCanPkts>
			break;
 800fed8:	e020      	b.n	800ff1c <TransmitCanPkt+0x494>

		case CAN_FAULT_INJECTION:
			pp_ptr = &Medha_Fault_Injection_st;
 800feda:	4b20      	ldr	r3, [pc, #128]	; (800ff5c <TransmitCanPkt+0x4d4>)
 800fedc:	60bb      	str	r3, [r7, #8]
			uc_size = sizeof(MEDHA_FAULT_INJECTION_t);
 800fede:	2304      	movs	r3, #4
 800fee0:	81fb      	strh	r3, [r7, #14]
			printf("\nSending Fault Injection data 2-O\n");
 800fee2:	4817      	ldr	r0, [pc, #92]	; (800ff40 <TransmitCanPkt+0x4b8>)
 800fee4:	f012 fea6 	bl	8022c34 <puts>
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 800fee8:	89fb      	ldrh	r3, [r7, #14]
 800feea:	88fa      	ldrh	r2, [r7, #6]
 800feec:	4619      	mov	r1, r3
 800feee:	68b8      	ldr	r0, [r7, #8]
 800fef0:	f000 f83a 	bl	800ff68 <sendCanPkts>
			break;
 800fef4:	e012      	b.n	800ff1c <TransmitCanPkt+0x494>

		case EIPC1_RELAYS_2_OTHER:
		case EIPC2_RELAYS_2_OTHER:
			pp_ptr = &Medha_Cur_Relay_Status_st;
 800fef6:	4b1a      	ldr	r3, [pc, #104]	; (800ff60 <TransmitCanPkt+0x4d8>)
 800fef8:	60bb      	str	r3, [r7, #8]
			uc_size = sizeof(MEDHA_CUR_RELAY_STS_t);
 800fefa:	2384      	movs	r3, #132	; 0x84
 800fefc:	81fb      	strh	r3, [r7, #14]
			if(Debug_flag == 1)
 800fefe:	4b0d      	ldr	r3, [pc, #52]	; (800ff34 <TransmitCanPkt+0x4ac>)
 800ff00:	781b      	ldrb	r3, [r3, #0]
 800ff02:	2b01      	cmp	r3, #1
 800ff04:	d102      	bne.n	800ff0c <TransmitCanPkt+0x484>
			{
				printf("\nRelay Data 2-O\n");
 800ff06:	4817      	ldr	r0, [pc, #92]	; (800ff64 <TransmitCanPkt+0x4dc>)
 800ff08:	f012 fe94 	bl	8022c34 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 800ff0c:	89fb      	ldrh	r3, [r7, #14]
 800ff0e:	88fa      	ldrh	r2, [r7, #6]
 800ff10:	4619      	mov	r1, r3
 800ff12:	68b8      	ldr	r0, [r7, #8]
 800ff14:	f000 f828 	bl	800ff68 <sendCanPkts>
			break;
 800ff18:	e000      	b.n	800ff1c <TransmitCanPkt+0x494>
			break;
 800ff1a:	bf00      	nop
		}

		break;
 800ff1c:	e001      	b.n	800ff22 <TransmitCanPkt+0x49a>
		break; /* case SIEMENS: break */
 800ff1e:	bf00      	nop
 800ff20:	e000      	b.n	800ff24 <TransmitCanPkt+0x49c>
		break;
 800ff22:	bf00      	nop
	}

	} /* 	switch(EI_data.ProtocolType) */

	UNUSED(Traverser);
}
 800ff24:	3710      	adds	r7, #16
 800ff26:	46bd      	mov	sp, r7
 800ff28:	bd80      	pop	{r7, pc}
 800ff2a:	bf00      	nop
 800ff2c:	20000304 	.word	0x20000304
 800ff30:	20003758 	.word	0x20003758
 800ff34:	20000645 	.word	0x20000645
 800ff38:	08026f10 	.word	0x08026f10
 800ff3c:	20003524 	.word	0x20003524
 800ff40:	08026ea8 	.word	0x08026ea8
 800ff44:	20002678 	.word	0x20002678
 800ff48:	08026f28 	.word	0x08026f28
 800ff4c:	200026b8 	.word	0x200026b8
 800ff50:	08026f4c 	.word	0x08026f4c
 800ff54:	20001970 	.word	0x20001970
 800ff58:	08026e74 	.word	0x08026e74
 800ff5c:	200026b4 	.word	0x200026b4
 800ff60:	200026d0 	.word	0x200026d0
 800ff64:	08026f5c 	.word	0x08026f5c

0800ff68 <sendCanPkts>:

void sendCanPkts(void *sptr, int size,enum enumCanId canId)
{
 800ff68:	b580      	push	{r7, lr}
 800ff6a:	b088      	sub	sp, #32
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	60f8      	str	r0, [r7, #12]
 800ff70:	60b9      	str	r1, [r7, #8]
 800ff72:	4613      	mov	r3, r2
 800ff74:	80fb      	strh	r3, [r7, #6]
	int32_t j = size,seqNo=0;
 800ff76:	68bb      	ldr	r3, [r7, #8]
 800ff78:	61fb      	str	r3, [r7, #28]
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	61bb      	str	r3, [r7, #24]
	char *cptr = sptr;
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	617b      	str	r3, [r7, #20]
	while(j > 0)
 800ff82:	e019      	b.n	800ffb8 <sendCanPkts+0x50>
	{
		//printf("J=%u\n",j);
		if(j < 7)
 800ff84:	69fb      	ldr	r3, [r7, #28]
 800ff86:	2b06      	cmp	r3, #6
 800ff88:	dc07      	bgt.n	800ff9a <sendCanPkts+0x32>
		{
			CAN_transmit(canId,cptr,j+1,seqNo);
 800ff8a:	88f8      	ldrh	r0, [r7, #6]
 800ff8c:	69fb      	ldr	r3, [r7, #28]
 800ff8e:	1c5a      	adds	r2, r3, #1
 800ff90:	69bb      	ldr	r3, [r7, #24]
 800ff92:	6979      	ldr	r1, [r7, #20]
 800ff94:	f000 f818 	bl	800ffc8 <CAN_transmit>
 800ff98:	e005      	b.n	800ffa6 <sendCanPkts+0x3e>
		}
		else
		{
			CAN_transmit(canId,cptr,8,seqNo);
 800ff9a:	88f8      	ldrh	r0, [r7, #6]
 800ff9c:	69bb      	ldr	r3, [r7, #24]
 800ff9e:	2208      	movs	r2, #8
 800ffa0:	6979      	ldr	r1, [r7, #20]
 800ffa2:	f000 f811 	bl	800ffc8 <CAN_transmit>
		}
		cptr += 7;
 800ffa6:	697b      	ldr	r3, [r7, #20]
 800ffa8:	3307      	adds	r3, #7
 800ffaa:	617b      	str	r3, [r7, #20]
		j-=7;
 800ffac:	69fb      	ldr	r3, [r7, #28]
 800ffae:	3b07      	subs	r3, #7
 800ffb0:	61fb      	str	r3, [r7, #28]
		seqNo++;
 800ffb2:	69bb      	ldr	r3, [r7, #24]
 800ffb4:	3301      	adds	r3, #1
 800ffb6:	61bb      	str	r3, [r7, #24]
	while(j > 0)
 800ffb8:	69fb      	ldr	r3, [r7, #28]
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	dce2      	bgt.n	800ff84 <sendCanPkts+0x1c>
	}
}
 800ffbe:	bf00      	nop
 800ffc0:	bf00      	nop
 800ffc2:	3720      	adds	r7, #32
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	bd80      	pop	{r7, pc}

0800ffc8 <CAN_transmit>:

void CAN_transmit (int can_id ,char* datPtr,int len,int seqNo)
{
 800ffc8:	b580      	push	{r7, lr}
 800ffca:	b088      	sub	sp, #32
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	60f8      	str	r0, [r7, #12]
 800ffd0:	60b9      	str	r1, [r7, #8]
 800ffd2:	607a      	str	r2, [r7, #4]
 800ffd4:	603b      	str	r3, [r7, #0]
	char i=0;
 800ffd6:	2300      	movs	r3, #0
 800ffd8:	77fb      	strb	r3, [r7, #31]
	uint32_t CAN_TxWaitClk = HAL_GetTick();
 800ffda:	f005 fd85 	bl	8015ae8 <HAL_GetTick>
 800ffde:	61b8      	str	r0, [r7, #24]

	//	CAN_TxMsg.id = can_id;
	TxData[0] = seqNo;
 800ffe0:	683b      	ldr	r3, [r7, #0]
 800ffe2:	b2da      	uxtb	r2, r3
 800ffe4:	4b4d      	ldr	r3, [pc, #308]	; (801011c <CAN_transmit+0x154>)
 800ffe6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < len-1; i++)
 800ffe8:	2300      	movs	r3, #0
 800ffea:	77fb      	strb	r3, [r7, #31]
 800ffec:	e00a      	b.n	8010004 <CAN_transmit+0x3c>
	{
		TxData[i+1] = *(datPtr+i);
 800ffee:	7ffb      	ldrb	r3, [r7, #31]
 800fff0:	68ba      	ldr	r2, [r7, #8]
 800fff2:	441a      	add	r2, r3
 800fff4:	7ffb      	ldrb	r3, [r7, #31]
 800fff6:	3301      	adds	r3, #1
 800fff8:	7811      	ldrb	r1, [r2, #0]
 800fffa:	4a48      	ldr	r2, [pc, #288]	; (801011c <CAN_transmit+0x154>)
 800fffc:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < len-1; i++)
 800fffe:	7ffb      	ldrb	r3, [r7, #31]
 8010000:	3301      	adds	r3, #1
 8010002:	77fb      	strb	r3, [r7, #31]
 8010004:	7ffa      	ldrb	r2, [r7, #31]
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	3b01      	subs	r3, #1
 801000a:	429a      	cmp	r2, r3
 801000c:	dbef      	blt.n	800ffee <CAN_transmit+0x26>
	}
	if(can_id < (0x200) )
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010014:	da3b      	bge.n	801008e <CAN_transmit+0xc6>
	{
		while(len!=0)
 8010016:	e036      	b.n	8010086 <CAN_transmit+0xbe>
		{
			/* transmit message to 3,4 nodes: CAN2*/
			TxHeader2.IDE = CAN_ID_STD;
 8010018:	4b41      	ldr	r3, [pc, #260]	; (8010120 <CAN_transmit+0x158>)
 801001a:	2200      	movs	r2, #0
 801001c:	609a      	str	r2, [r3, #8]
			TxHeader2.StdId=can_id;
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	4a3f      	ldr	r2, [pc, #252]	; (8010120 <CAN_transmit+0x158>)
 8010022:	6013      	str	r3, [r2, #0]
			TxHeader2.RTR=CAN_RTR_DATA;
 8010024:	4b3e      	ldr	r3, [pc, #248]	; (8010120 <CAN_transmit+0x158>)
 8010026:	2200      	movs	r2, #0
 8010028:	60da      	str	r2, [r3, #12]
			TxHeader2.DLC=len;
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	4a3c      	ldr	r2, [pc, #240]	; (8010120 <CAN_transmit+0x158>)
 801002e:	6113      	str	r3, [r2, #16]
			uint8_t txbuff=0;
 8010030:	2300      	movs	r3, #0
 8010032:	75bb      	strb	r3, [r7, #22]
			//				{
			//					printf("%02X ",TxData[i]);
			//				}
			//				printf("\n");
			//			}
			if((Error=HAL_CAN_AddTxMessage(&hcan2, &TxHeader2, TxData, &pTxMailbox2))!=HAL_OK)
 8010034:	4b3b      	ldr	r3, [pc, #236]	; (8010124 <CAN_transmit+0x15c>)
 8010036:	4a39      	ldr	r2, [pc, #228]	; (801011c <CAN_transmit+0x154>)
 8010038:	4939      	ldr	r1, [pc, #228]	; (8010120 <CAN_transmit+0x158>)
 801003a:	483b      	ldr	r0, [pc, #236]	; (8010128 <CAN_transmit+0x160>)
 801003c:	f005 fffa 	bl	8016034 <HAL_CAN_AddTxMessage>
 8010040:	4603      	mov	r3, r0
 8010042:	461a      	mov	r2, r3
 8010044:	4b39      	ldr	r3, [pc, #228]	; (801012c <CAN_transmit+0x164>)
 8010046:	701a      	strb	r2, [r3, #0]
 8010048:	4b38      	ldr	r3, [pc, #224]	; (801012c <CAN_transmit+0x164>)
 801004a:	781b      	ldrb	r3, [r3, #0]
 801004c:	2b00      	cmp	r3, #0
 801004e:	d00d      	beq.n	801006c <CAN_transmit+0xa4>
			{
				printf("CAN2 Tx Fail\n");
 8010050:	4837      	ldr	r0, [pc, #220]	; (8010130 <CAN_transmit+0x168>)
 8010052:	f012 fdef 	bl	8022c34 <puts>
				return;
 8010056:	e05e      	b.n	8010116 <CAN_transmit+0x14e>
				//				Error_Handler();
			}
			while( (txbuff=HAL_CAN_IsTxMessagePending(&hcan2, pTxMailbox2))>=1)
			{
				if(HAL_Elaps_Ticks(CAN_TxWaitClk) > 100)
 8010058:	69b8      	ldr	r0, [r7, #24]
 801005a:	f7fe ff5b 	bl	800ef14 <HAL_Elaps_Ticks>
 801005e:	4603      	mov	r3, r0
 8010060:	2b64      	cmp	r3, #100	; 0x64
 8010062:	d903      	bls.n	801006c <CAN_transmit+0xa4>
				{
					printf("CAN2 Tx Fail\n");
 8010064:	4832      	ldr	r0, [pc, #200]	; (8010130 <CAN_transmit+0x168>)
 8010066:	f012 fde5 	bl	8022c34 <puts>
					return;
 801006a:	e054      	b.n	8010116 <CAN_transmit+0x14e>
			while( (txbuff=HAL_CAN_IsTxMessagePending(&hcan2, pTxMailbox2))>=1)
 801006c:	4b2d      	ldr	r3, [pc, #180]	; (8010124 <CAN_transmit+0x15c>)
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	4619      	mov	r1, r3
 8010072:	482d      	ldr	r0, [pc, #180]	; (8010128 <CAN_transmit+0x160>)
 8010074:	f006 f8ae 	bl	80161d4 <HAL_CAN_IsTxMessagePending>
 8010078:	4603      	mov	r3, r0
 801007a:	75bb      	strb	r3, [r7, #22]
 801007c:	7dbb      	ldrb	r3, [r7, #22]
 801007e:	2b00      	cmp	r3, #0
 8010080:	d1ea      	bne.n	8010058 <CAN_transmit+0x90>
				}
			}

			len=0;
 8010082:	2300      	movs	r3, #0
 8010084:	607b      	str	r3, [r7, #4]
		while(len!=0)
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	2b00      	cmp	r3, #0
 801008a:	d1c5      	bne.n	8010018 <CAN_transmit+0x50>
 801008c:	e043      	b.n	8010116 <CAN_transmit+0x14e>
		}
	}
	else
	{

		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 801008e:	4929      	ldr	r1, [pc, #164]	; (8010134 <CAN_transmit+0x16c>)
 8010090:	4829      	ldr	r0, [pc, #164]	; (8010138 <CAN_transmit+0x170>)
 8010092:	f7f0 f8d5 	bl	8000240 <strcmp>
 8010096:	4603      	mov	r3, r0
 8010098:	2b00      	cmp	r3, #0
 801009a:	d03b      	beq.n	8010114 <CAN_transmit+0x14c>
		{
			return;
		}

		while(len!=0)
 801009c:	e036      	b.n	801010c <CAN_transmit+0x144>
		{
			/* transmit message to 3,4 nodes: CAN2*/
			TxHeader3.IDE = CAN_ID_STD;
 801009e:	4b27      	ldr	r3, [pc, #156]	; (801013c <CAN_transmit+0x174>)
 80100a0:	2200      	movs	r2, #0
 80100a2:	609a      	str	r2, [r3, #8]
			TxHeader3.StdId=can_id;
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	4a25      	ldr	r2, [pc, #148]	; (801013c <CAN_transmit+0x174>)
 80100a8:	6013      	str	r3, [r2, #0]
			TxHeader3.RTR=CAN_RTR_DATA;
 80100aa:	4b24      	ldr	r3, [pc, #144]	; (801013c <CAN_transmit+0x174>)
 80100ac:	2200      	movs	r2, #0
 80100ae:	60da      	str	r2, [r3, #12]
			TxHeader3.DLC=len;
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	4a22      	ldr	r2, [pc, #136]	; (801013c <CAN_transmit+0x174>)
 80100b4:	6113      	str	r3, [r2, #16]
			uint8_t txbuff=0;
 80100b6:	2300      	movs	r3, #0
 80100b8:	75fb      	strb	r3, [r7, #23]
			//				}
			//				printf("\n");
			//			}

			//printf("TxHeader1.DLC:%u\n",TxHeader1.DLC);
			if((Error=HAL_CAN_AddTxMessage(&hcan3, &TxHeader3, TxData, &pTxMailbox3))!=HAL_OK)
 80100ba:	4b21      	ldr	r3, [pc, #132]	; (8010140 <CAN_transmit+0x178>)
 80100bc:	4a17      	ldr	r2, [pc, #92]	; (801011c <CAN_transmit+0x154>)
 80100be:	491f      	ldr	r1, [pc, #124]	; (801013c <CAN_transmit+0x174>)
 80100c0:	4820      	ldr	r0, [pc, #128]	; (8010144 <CAN_transmit+0x17c>)
 80100c2:	f005 ffb7 	bl	8016034 <HAL_CAN_AddTxMessage>
 80100c6:	4603      	mov	r3, r0
 80100c8:	461a      	mov	r2, r3
 80100ca:	4b18      	ldr	r3, [pc, #96]	; (801012c <CAN_transmit+0x164>)
 80100cc:	701a      	strb	r2, [r3, #0]
 80100ce:	4b17      	ldr	r3, [pc, #92]	; (801012c <CAN_transmit+0x164>)
 80100d0:	781b      	ldrb	r3, [r3, #0]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d00d      	beq.n	80100f2 <CAN_transmit+0x12a>
			{
				printf("CAN3 Tx Fail\n");
 80100d6:	481c      	ldr	r0, [pc, #112]	; (8010148 <CAN_transmit+0x180>)
 80100d8:	f012 fdac 	bl	8022c34 <puts>
				return;
 80100dc:	e01b      	b.n	8010116 <CAN_transmit+0x14e>
				//				Error_Handler();
			}
			while( (txbuff=HAL_CAN_IsTxMessagePending(&hcan3, pTxMailbox3))>=1)
			{
				if(HAL_Elaps_Ticks(CAN_TxWaitClk) > 100)
 80100de:	69b8      	ldr	r0, [r7, #24]
 80100e0:	f7fe ff18 	bl	800ef14 <HAL_Elaps_Ticks>
 80100e4:	4603      	mov	r3, r0
 80100e6:	2b64      	cmp	r3, #100	; 0x64
 80100e8:	d903      	bls.n	80100f2 <CAN_transmit+0x12a>
				{
					printf("CAN3 Tx Fail\n");
 80100ea:	4817      	ldr	r0, [pc, #92]	; (8010148 <CAN_transmit+0x180>)
 80100ec:	f012 fda2 	bl	8022c34 <puts>
					return;
 80100f0:	e011      	b.n	8010116 <CAN_transmit+0x14e>
			while( (txbuff=HAL_CAN_IsTxMessagePending(&hcan3, pTxMailbox3))>=1)
 80100f2:	4b13      	ldr	r3, [pc, #76]	; (8010140 <CAN_transmit+0x178>)
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	4619      	mov	r1, r3
 80100f8:	4812      	ldr	r0, [pc, #72]	; (8010144 <CAN_transmit+0x17c>)
 80100fa:	f006 f86b 	bl	80161d4 <HAL_CAN_IsTxMessagePending>
 80100fe:	4603      	mov	r3, r0
 8010100:	75fb      	strb	r3, [r7, #23]
 8010102:	7dfb      	ldrb	r3, [r7, #23]
 8010104:	2b00      	cmp	r3, #0
 8010106:	d1ea      	bne.n	80100de <CAN_transmit+0x116>
				}
			}
			len=0;
 8010108:	2300      	movs	r3, #0
 801010a:	607b      	str	r3, [r7, #4]
		while(len!=0)
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	2b00      	cmp	r3, #0
 8010110:	d1c5      	bne.n	801009e <CAN_transmit+0xd6>
 8010112:	e000      	b.n	8010116 <CAN_transmit+0x14e>
			return;
 8010114:	bf00      	nop
		}
	}
}
 8010116:	3720      	adds	r7, #32
 8010118:	46bd      	mov	sp, r7
 801011a:	bd80      	pop	{r7, pc}
 801011c:	20009b8c 	.word	0x20009b8c
 8010120:	20009b0c 	.word	0x20009b0c
 8010124:	20009b3c 	.word	0x20009b3c
 8010128:	20009b98 	.word	0x20009b98
 801012c:	20009b94 	.word	0x20009b94
 8010130:	08026f6c 	.word	0x08026f6c
 8010134:	08026f7c 	.word	0x08026f7c
 8010138:	20000305 	.word	0x20000305
 801013c:	20009b24 	.word	0x20009b24
 8010140:	20009b40 	.word	0x20009b40
 8010144:	20009bfc 	.word	0x20009bfc
 8010148:	08026f88 	.word	0x08026f88

0801014c <HAL_CAN_RxFifo0MsgPendingCallback>:

/******************Function to be invoked when we get an interrupt on CAN1*****************/
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 801014c:	b580      	push	{r7, lr}
 801014e:	b082      	sub	sp, #8
 8010150:	af00      	add	r7, sp, #0
 8010152:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN3)
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	4a3e      	ldr	r2, [pc, #248]	; (8010254 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 801015a:	4293      	cmp	r3, r2
 801015c:	d175      	bne.n	801024a <HAL_CAN_RxFifo0MsgPendingCallback+0xfe>
	{
		//		printf("^");
		if(CANBUFFSIZE==canRead.In)
 801015e:	4b3e      	ldr	r3, [pc, #248]	; (8010258 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8010160:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010164:	881b      	ldrh	r3, [r3, #0]
 8010166:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801016a:	d104      	bne.n	8010176 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
		{
			canRead.In=0;
 801016c:	4b3a      	ldr	r3, [pc, #232]	; (8010258 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 801016e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010172:	2200      	movs	r2, #0
 8010174:	801a      	strh	r2, [r3, #0]
		}
		if (HAL_CAN_GetRxMessage(&hcan3,CAN_RX_FIFO0,&RxHeader2,RxData_can3) != HAL_OK)
 8010176:	4b39      	ldr	r3, [pc, #228]	; (801025c <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 8010178:	4a39      	ldr	r2, [pc, #228]	; (8010260 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 801017a:	2100      	movs	r1, #0
 801017c:	4839      	ldr	r0, [pc, #228]	; (8010264 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 801017e:	f006 f84d 	bl	801621c <HAL_CAN_GetRxMessage>
 8010182:	4603      	mov	r3, r0
 8010184:	2b00      	cmp	r3, #0
 8010186:	d001      	beq.n	801018c <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
		{
			Error_Handler();
 8010188:	f003 ff22 	bl	8013fd0 <Error_Handler>
		}
		(canRead.CAN_msg[canRead.In]).canPort=3;
 801018c:	4b32      	ldr	r3, [pc, #200]	; (8010258 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 801018e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010192:	881b      	ldrh	r3, [r3, #0]
 8010194:	4a30      	ldr	r2, [pc, #192]	; (8010258 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8010196:	011b      	lsls	r3, r3, #4
 8010198:	4413      	add	r3, r2
 801019a:	330f      	adds	r3, #15
 801019c:	2203      	movs	r2, #3
 801019e:	701a      	strb	r2, [r3, #0]
		(canRead.CAN_msg[canRead.In]).Dlc=RxHeader2.DLC;
 80101a0:	4b2f      	ldr	r3, [pc, #188]	; (8010260 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 80101a2:	691a      	ldr	r2, [r3, #16]
 80101a4:	4b2c      	ldr	r3, [pc, #176]	; (8010258 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 80101a6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80101aa:	881b      	ldrh	r3, [r3, #0]
 80101ac:	b2d1      	uxtb	r1, r2
 80101ae:	4a2a      	ldr	r2, [pc, #168]	; (8010258 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 80101b0:	011b      	lsls	r3, r3, #4
 80101b2:	4413      	add	r3, r2
 80101b4:	330c      	adds	r3, #12
 80101b6:	460a      	mov	r2, r1
 80101b8:	701a      	strb	r2, [r3, #0]
		(canRead.CAN_msg[canRead.In]).Ide=RxHeader2.IDE;
 80101ba:	4b29      	ldr	r3, [pc, #164]	; (8010260 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 80101bc:	689a      	ldr	r2, [r3, #8]
 80101be:	4b26      	ldr	r3, [pc, #152]	; (8010258 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 80101c0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80101c4:	881b      	ldrh	r3, [r3, #0]
 80101c6:	b2d1      	uxtb	r1, r2
 80101c8:	4a23      	ldr	r2, [pc, #140]	; (8010258 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 80101ca:	011b      	lsls	r3, r3, #4
 80101cc:	4413      	add	r3, r2
 80101ce:	330d      	adds	r3, #13
 80101d0:	460a      	mov	r2, r1
 80101d2:	701a      	strb	r2, [r3, #0]
		(canRead.CAN_msg[canRead.In]).Rtr=RxHeader2.RTR;
 80101d4:	4b22      	ldr	r3, [pc, #136]	; (8010260 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 80101d6:	68da      	ldr	r2, [r3, #12]
 80101d8:	4b1f      	ldr	r3, [pc, #124]	; (8010258 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 80101da:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80101de:	881b      	ldrh	r3, [r3, #0]
 80101e0:	b2d1      	uxtb	r1, r2
 80101e2:	4a1d      	ldr	r2, [pc, #116]	; (8010258 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 80101e4:	011b      	lsls	r3, r3, #4
 80101e6:	4413      	add	r3, r2
 80101e8:	330e      	adds	r3, #14
 80101ea:	460a      	mov	r2, r1
 80101ec:	701a      	strb	r2, [r3, #0]
		(canRead.CAN_msg[canRead.In]).StdId=RxHeader2.StdId;
 80101ee:	4b1a      	ldr	r3, [pc, #104]	; (8010258 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 80101f0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80101f4:	881b      	ldrh	r3, [r3, #0]
 80101f6:	4618      	mov	r0, r3
 80101f8:	4b19      	ldr	r3, [pc, #100]	; (8010260 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 80101fa:	681a      	ldr	r2, [r3, #0]
 80101fc:	4916      	ldr	r1, [pc, #88]	; (8010258 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 80101fe:	0103      	lsls	r3, r0, #4
 8010200:	440b      	add	r3, r1
 8010202:	601a      	str	r2, [r3, #0]
		//printf("stdid in Int_Handler=%x\n",RxHeader1.StdId);
		if((canRead.CAN_msg[canRead.In]).Rtr==CAN_RTR_DATA)
 8010204:	4b14      	ldr	r3, [pc, #80]	; (8010258 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8010206:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801020a:	881b      	ldrh	r3, [r3, #0]
 801020c:	4a12      	ldr	r2, [pc, #72]	; (8010258 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 801020e:	011b      	lsls	r3, r3, #4
 8010210:	4413      	add	r3, r2
 8010212:	330e      	adds	r3, #14
 8010214:	781b      	ldrb	r3, [r3, #0]
 8010216:	2b00      	cmp	r3, #0
 8010218:	d117      	bne.n	801024a <HAL_CAN_RxFifo0MsgPendingCallback+0xfe>
		{
			memcpy((canRead.CAN_msg[canRead.In]).data,RxData_can3,8);
 801021a:	4b0f      	ldr	r3, [pc, #60]	; (8010258 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 801021c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010220:	881b      	ldrh	r3, [r3, #0]
 8010222:	011b      	lsls	r3, r3, #4
 8010224:	4a0c      	ldr	r2, [pc, #48]	; (8010258 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8010226:	4413      	add	r3, r2
 8010228:	3304      	adds	r3, #4
 801022a:	490c      	ldr	r1, [pc, #48]	; (801025c <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 801022c:	461a      	mov	r2, r3
 801022e:	460b      	mov	r3, r1
 8010230:	cb03      	ldmia	r3!, {r0, r1}
 8010232:	6010      	str	r0, [r2, #0]
 8010234:	6051      	str	r1, [r2, #4]
			canRead.In++;
 8010236:	4b08      	ldr	r3, [pc, #32]	; (8010258 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8010238:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801023c:	881b      	ldrh	r3, [r3, #0]
 801023e:	3301      	adds	r3, #1
 8010240:	b29a      	uxth	r2, r3
 8010242:	4b05      	ldr	r3, [pc, #20]	; (8010258 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8010244:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010248:	801a      	strh	r2, [r3, #0]
		}
	}
}
 801024a:	bf00      	nop
 801024c:	3708      	adds	r7, #8
 801024e:	46bd      	mov	sp, r7
 8010250:	bd80      	pop	{r7, pc}
 8010252:	bf00      	nop
 8010254:	40003400 	.word	0x40003400
 8010258:	20005b08 	.word	0x20005b08
 801025c:	20009b84 	.word	0x20009b84
 8010260:	20009b60 	.word	0x20009b60
 8010264:	20009bfc 	.word	0x20009bfc

08010268 <HAL_CAN_RxFifo1MsgPendingCallback>:

/******************Function to be invoked when we get an interrupt on CAN2*****************/
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8010268:	b580      	push	{r7, lr}
 801026a:	b082      	sub	sp, #8
 801026c:	af00      	add	r7, sp, #0
 801026e:	6078      	str	r0, [r7, #4]
	//printf("Interrupt invoked for CAN2\n");
	if(CANBUFFSIZE==canRead.In)
 8010270:	4b42      	ldr	r3, [pc, #264]	; (801037c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8010272:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010276:	881b      	ldrh	r3, [r3, #0]
 8010278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801027c:	d104      	bne.n	8010288 <HAL_CAN_RxFifo1MsgPendingCallback+0x20>
		canRead.In=0;
 801027e:	4b3f      	ldr	r3, [pc, #252]	; (801037c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8010280:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010284:	2200      	movs	r2, #0
 8010286:	801a      	strh	r2, [r3, #0]
	if ((Error=HAL_CAN_GetRxMessage(&hcan2,CAN_RX_FIFO1,&RxHeader1,RxData_can2)) != HAL_OK)
 8010288:	4b3d      	ldr	r3, [pc, #244]	; (8010380 <HAL_CAN_RxFifo1MsgPendingCallback+0x118>)
 801028a:	4a3e      	ldr	r2, [pc, #248]	; (8010384 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 801028c:	2101      	movs	r1, #1
 801028e:	483e      	ldr	r0, [pc, #248]	; (8010388 <HAL_CAN_RxFifo1MsgPendingCallback+0x120>)
 8010290:	f005 ffc4 	bl	801621c <HAL_CAN_GetRxMessage>
 8010294:	4603      	mov	r3, r0
 8010296:	461a      	mov	r2, r3
 8010298:	4b3c      	ldr	r3, [pc, #240]	; (801038c <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 801029a:	701a      	strb	r2, [r3, #0]
 801029c:	4b3b      	ldr	r3, [pc, #236]	; (801038c <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 801029e:	781b      	ldrb	r3, [r3, #0]
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d007      	beq.n	80102b4 <HAL_CAN_RxFifo1MsgPendingCallback+0x4c>
	{
		printf("Error in CAN2 Reception Interrupt: %d\n",Error);
 80102a4:	4b39      	ldr	r3, [pc, #228]	; (801038c <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 80102a6:	781b      	ldrb	r3, [r3, #0]
 80102a8:	4619      	mov	r1, r3
 80102aa:	4839      	ldr	r0, [pc, #228]	; (8010390 <HAL_CAN_RxFifo1MsgPendingCallback+0x128>)
 80102ac:	f012 fc26 	bl	8022afc <iprintf>
		Error_Handler();
 80102b0:	f003 fe8e 	bl	8013fd0 <Error_Handler>
	}
	//	printf("RxHeader1.stdid=%lx \n",RxHeader1.StdId);

	(canRead.CAN_msg[canRead.In]).canPort=2;
 80102b4:	4b31      	ldr	r3, [pc, #196]	; (801037c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 80102b6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80102ba:	881b      	ldrh	r3, [r3, #0]
 80102bc:	4a2f      	ldr	r2, [pc, #188]	; (801037c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 80102be:	011b      	lsls	r3, r3, #4
 80102c0:	4413      	add	r3, r2
 80102c2:	330f      	adds	r3, #15
 80102c4:	2202      	movs	r2, #2
 80102c6:	701a      	strb	r2, [r3, #0]
	(canRead.CAN_msg[canRead.In]).Dlc=RxHeader1.DLC;
 80102c8:	4b2e      	ldr	r3, [pc, #184]	; (8010384 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 80102ca:	691a      	ldr	r2, [r3, #16]
 80102cc:	4b2b      	ldr	r3, [pc, #172]	; (801037c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 80102ce:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80102d2:	881b      	ldrh	r3, [r3, #0]
 80102d4:	b2d1      	uxtb	r1, r2
 80102d6:	4a29      	ldr	r2, [pc, #164]	; (801037c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 80102d8:	011b      	lsls	r3, r3, #4
 80102da:	4413      	add	r3, r2
 80102dc:	330c      	adds	r3, #12
 80102de:	460a      	mov	r2, r1
 80102e0:	701a      	strb	r2, [r3, #0]
	(canRead.CAN_msg[canRead.In]).Ide=RxHeader1.IDE;
 80102e2:	4b28      	ldr	r3, [pc, #160]	; (8010384 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 80102e4:	689a      	ldr	r2, [r3, #8]
 80102e6:	4b25      	ldr	r3, [pc, #148]	; (801037c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 80102e8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80102ec:	881b      	ldrh	r3, [r3, #0]
 80102ee:	b2d1      	uxtb	r1, r2
 80102f0:	4a22      	ldr	r2, [pc, #136]	; (801037c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 80102f2:	011b      	lsls	r3, r3, #4
 80102f4:	4413      	add	r3, r2
 80102f6:	330d      	adds	r3, #13
 80102f8:	460a      	mov	r2, r1
 80102fa:	701a      	strb	r2, [r3, #0]
	(canRead.CAN_msg[canRead.In]).Rtr=RxHeader1.RTR;
 80102fc:	4b21      	ldr	r3, [pc, #132]	; (8010384 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 80102fe:	68da      	ldr	r2, [r3, #12]
 8010300:	4b1e      	ldr	r3, [pc, #120]	; (801037c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8010302:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010306:	881b      	ldrh	r3, [r3, #0]
 8010308:	b2d1      	uxtb	r1, r2
 801030a:	4a1c      	ldr	r2, [pc, #112]	; (801037c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 801030c:	011b      	lsls	r3, r3, #4
 801030e:	4413      	add	r3, r2
 8010310:	330e      	adds	r3, #14
 8010312:	460a      	mov	r2, r1
 8010314:	701a      	strb	r2, [r3, #0]
	(canRead.CAN_msg[canRead.In]).StdId=RxHeader1.StdId;
 8010316:	4b19      	ldr	r3, [pc, #100]	; (801037c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8010318:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801031c:	881b      	ldrh	r3, [r3, #0]
 801031e:	4618      	mov	r0, r3
 8010320:	4b18      	ldr	r3, [pc, #96]	; (8010384 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 8010322:	681a      	ldr	r2, [r3, #0]
 8010324:	4915      	ldr	r1, [pc, #84]	; (801037c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8010326:	0103      	lsls	r3, r0, #4
 8010328:	440b      	add	r3, r1
 801032a:	601a      	str	r2, [r3, #0]

	if((canRead.CAN_msg[canRead.In]).Rtr==CAN_RTR_DATA){
 801032c:	4b13      	ldr	r3, [pc, #76]	; (801037c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 801032e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010332:	881b      	ldrh	r3, [r3, #0]
 8010334:	4a11      	ldr	r2, [pc, #68]	; (801037c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8010336:	011b      	lsls	r3, r3, #4
 8010338:	4413      	add	r3, r2
 801033a:	330e      	adds	r3, #14
 801033c:	781b      	ldrb	r3, [r3, #0]
 801033e:	2b00      	cmp	r3, #0
 8010340:	d117      	bne.n	8010372 <HAL_CAN_RxFifo1MsgPendingCallback+0x10a>
		//	printf("copying in to buffer on can2\n");
		memcpy((canRead.CAN_msg[canRead.In]).data,RxData_can2,8);
 8010342:	4b0e      	ldr	r3, [pc, #56]	; (801037c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8010344:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010348:	881b      	ldrh	r3, [r3, #0]
 801034a:	011b      	lsls	r3, r3, #4
 801034c:	4a0b      	ldr	r2, [pc, #44]	; (801037c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 801034e:	4413      	add	r3, r2
 8010350:	3304      	adds	r3, #4
 8010352:	490b      	ldr	r1, [pc, #44]	; (8010380 <HAL_CAN_RxFifo1MsgPendingCallback+0x118>)
 8010354:	461a      	mov	r2, r3
 8010356:	460b      	mov	r3, r1
 8010358:	cb03      	ldmia	r3!, {r0, r1}
 801035a:	6010      	str	r0, [r2, #0]
 801035c:	6051      	str	r1, [r2, #4]
		canRead.In++;
 801035e:	4b07      	ldr	r3, [pc, #28]	; (801037c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8010360:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010364:	881b      	ldrh	r3, [r3, #0]
 8010366:	3301      	adds	r3, #1
 8010368:	b29a      	uxth	r2, r3
 801036a:	4b04      	ldr	r3, [pc, #16]	; (801037c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 801036c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010370:	801a      	strh	r2, [r3, #0]
	}
}
 8010372:	bf00      	nop
 8010374:	3708      	adds	r7, #8
 8010376:	46bd      	mov	sp, r7
 8010378:	bd80      	pop	{r7, pc}
 801037a:	bf00      	nop
 801037c:	20005b08 	.word	0x20005b08
 8010380:	20009b7c 	.word	0x20009b7c
 8010384:	20009b44 	.word	0x20009b44
 8010388:	20009b98 	.word	0x20009b98
 801038c:	20009b94 	.word	0x20009b94
 8010390:	08026f98 	.word	0x08026f98

08010394 <canDataReady>:


unsigned char canDataReady()
{
 8010394:	b580      	push	{r7, lr}
 8010396:	b082      	sub	sp, #8
 8010398:	af00      	add	r7, sp, #0
	unsigned int ui_Read_CAN_index  = 0;
 801039a:	2300      	movs	r3, #0
 801039c:	607b      	str	r3, [r7, #4]

	if(canRead.In == canRead.Out)
 801039e:	4b27      	ldr	r3, [pc, #156]	; (801043c <canDataReady+0xa8>)
 80103a0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80103a4:	881a      	ldrh	r2, [r3, #0]
 80103a6:	4b25      	ldr	r3, [pc, #148]	; (801043c <canDataReady+0xa8>)
 80103a8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80103ac:	885b      	ldrh	r3, [r3, #2]
 80103ae:	429a      	cmp	r2, r3
 80103b0:	d101      	bne.n	80103b6 <canDataReady+0x22>
	{
		return 0;
 80103b2:	2300      	movs	r3, #0
 80103b4:	e03e      	b.n	8010434 <canDataReady+0xa0>
	}
	/* for removing duplicates in the buffer */
	for(ui_Read_CAN_index = (canRead.Out+1);ui_Read_CAN_index<canRead.In;ui_Read_CAN_index++)
 80103b6:	4b21      	ldr	r3, [pc, #132]	; (801043c <canDataReady+0xa8>)
 80103b8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80103bc:	885b      	ldrh	r3, [r3, #2]
 80103be:	3301      	adds	r3, #1
 80103c0:	607b      	str	r3, [r7, #4]
 80103c2:	e02e      	b.n	8010422 <canDataReady+0x8e>
	{
		if(0 == memcmp(&canRead.CAN_msg[canRead.Out],&canRead.CAN_msg[canRead.In],sizeof(CAN_msg)))
 80103c4:	4b1d      	ldr	r3, [pc, #116]	; (801043c <canDataReady+0xa8>)
 80103c6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80103ca:	885b      	ldrh	r3, [r3, #2]
 80103cc:	011b      	lsls	r3, r3, #4
 80103ce:	4a1b      	ldr	r2, [pc, #108]	; (801043c <canDataReady+0xa8>)
 80103d0:	1898      	adds	r0, r3, r2
 80103d2:	4b1a      	ldr	r3, [pc, #104]	; (801043c <canDataReady+0xa8>)
 80103d4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80103d8:	881b      	ldrh	r3, [r3, #0]
 80103da:	011b      	lsls	r3, r3, #4
 80103dc:	4a17      	ldr	r2, [pc, #92]	; (801043c <canDataReady+0xa8>)
 80103de:	4413      	add	r3, r2
 80103e0:	2210      	movs	r2, #16
 80103e2:	4619      	mov	r1, r3
 80103e4:	f012 fa6a 	bl	80228bc <memcmp>
 80103e8:	4603      	mov	r3, r0
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d116      	bne.n	801041c <canDataReady+0x88>
		{
			memset(&canRead.CAN_msg[canRead.Out],0,sizeof(CAN_msg));
 80103ee:	4b13      	ldr	r3, [pc, #76]	; (801043c <canDataReady+0xa8>)
 80103f0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80103f4:	885b      	ldrh	r3, [r3, #2]
 80103f6:	011b      	lsls	r3, r3, #4
 80103f8:	4a10      	ldr	r2, [pc, #64]	; (801043c <canDataReady+0xa8>)
 80103fa:	4413      	add	r3, r2
 80103fc:	2210      	movs	r2, #16
 80103fe:	2100      	movs	r1, #0
 8010400:	4618      	mov	r0, r3
 8010402:	f012 fa93 	bl	802292c <memset>
			canRead.Out++;
 8010406:	4b0d      	ldr	r3, [pc, #52]	; (801043c <canDataReady+0xa8>)
 8010408:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801040c:	885b      	ldrh	r3, [r3, #2]
 801040e:	3301      	adds	r3, #1
 8010410:	b29a      	uxth	r2, r3
 8010412:	4b0a      	ldr	r3, [pc, #40]	; (801043c <canDataReady+0xa8>)
 8010414:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010418:	805a      	strh	r2, [r3, #2]
			break;
 801041a:	e00a      	b.n	8010432 <canDataReady+0x9e>
	for(ui_Read_CAN_index = (canRead.Out+1);ui_Read_CAN_index<canRead.In;ui_Read_CAN_index++)
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	3301      	adds	r3, #1
 8010420:	607b      	str	r3, [r7, #4]
 8010422:	4b06      	ldr	r3, [pc, #24]	; (801043c <canDataReady+0xa8>)
 8010424:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010428:	881b      	ldrh	r3, [r3, #0]
 801042a:	461a      	mov	r2, r3
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	4293      	cmp	r3, r2
 8010430:	d3c8      	bcc.n	80103c4 <canDataReady+0x30>
		}
	}
	return 1;
 8010432:	2301      	movs	r3, #1
}
 8010434:	4618      	mov	r0, r3
 8010436:	3708      	adds	r7, #8
 8010438:	46bd      	mov	sp, r7
 801043a:	bd80      	pop	{r7, pc}
 801043c:	20005b08 	.word	0x20005b08

08010440 <readCanToStructs>:

void readCanToStructs(void)
{
 8010440:	b580      	push	{r7, lr}
 8010442:	b08e      	sub	sp, #56	; 0x38
 8010444:	af00      	add	r7, sp, #0
	unsigned char uc_seqNo,uc_Loop_Index = 0,uc_index = 0,uc_LocIndex = 0;
 8010446:	2300      	movs	r3, #0
 8010448:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801044c:	2300      	movs	r3, #0
 801044e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8010452:	2300      	movs	r3, #0
 8010454:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t *uc_pp_charPtr= 0;
 8010458:	2300      	movs	r3, #0
 801045a:	633b      	str	r3, [r7, #48]	; 0x30

	static uint16_t DataLength = 0;
	static uint16_t DataTraverser = 0;


	switch(EI_data.ProtocolType)
 801045c:	4bc0      	ldr	r3, [pc, #768]	; (8010760 <readCanToStructs+0x320>)
 801045e:	781b      	ldrb	r3, [r3, #0]
 8010460:	2b03      	cmp	r3, #3
 8010462:	f002 8640 	beq.w	80130e6 <readCanToStructs+0x2ca6>
 8010466:	2b03      	cmp	r3, #3
 8010468:	f302 8644 	bgt.w	80130f4 <readCanToStructs+0x2cb4>
 801046c:	2b01      	cmp	r3, #1
 801046e:	d004      	beq.n	801047a <readCanToStructs+0x3a>
 8010470:	2b02      	cmp	r3, #2
 8010472:	f001 87f4 	beq.w	801245e <readCanToStructs+0x201e>
		/* __________ MEDHA _________ */
	}
	break;

	default:
		break;
 8010476:	f002 be3d 	b.w	80130f4 <readCanToStructs+0x2cb4>
		if( (CHECKFLAG(7,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 801047a:	4bba      	ldr	r3, [pc, #744]	; (8010764 <readCanToStructs+0x324>)
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	09db      	lsrs	r3, r3, #7
 8010480:	f003 0301 	and.w	r3, r3, #1
 8010484:	2b00      	cmp	r3, #0
 8010486:	f042 8637 	bne.w	80130f8 <readCanToStructs+0x2cb8>
		while(canDataReady())
 801048a:	f001 b92f 	b.w	80116ec <readCanToStructs+0x12ac>
			uc_index = canRead.CAN_msg[canRead.Out].canPort-1;
 801048e:	4bb6      	ldr	r3, [pc, #728]	; (8010768 <readCanToStructs+0x328>)
 8010490:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010494:	885b      	ldrh	r3, [r3, #2]
 8010496:	4ab4      	ldr	r2, [pc, #720]	; (8010768 <readCanToStructs+0x328>)
 8010498:	011b      	lsls	r3, r3, #4
 801049a:	4413      	add	r3, r2
 801049c:	330f      	adds	r3, #15
 801049e:	781b      	ldrb	r3, [r3, #0]
 80104a0:	3b01      	subs	r3, #1
 80104a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			switch(canRead.CAN_msg[canRead.Out].StdId)
 80104a6:	4bb0      	ldr	r3, [pc, #704]	; (8010768 <readCanToStructs+0x328>)
 80104a8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80104ac:	885b      	ldrh	r3, [r3, #2]
 80104ae:	4aae      	ldr	r2, [pc, #696]	; (8010768 <readCanToStructs+0x328>)
 80104b0:	011b      	lsls	r3, r3, #4
 80104b2:	4413      	add	r3, r2
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 80104ba:	f201 80f4 	bhi.w	80116a6 <readCanToStructs+0x1266>
 80104be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80104c2:	d80a      	bhi.n	80104da <readCanToStructs+0x9a>
 80104c4:	f240 1203 	movw	r2, #259	; 0x103
 80104c8:	4293      	cmp	r3, r2
 80104ca:	d01f      	beq.n	801050c <readCanToStructs+0xcc>
 80104cc:	f240 1209 	movw	r2, #265	; 0x109
 80104d0:	4293      	cmp	r3, r2
 80104d2:	f000 80f1 	beq.w	80106b8 <readCanToStructs+0x278>
				break;
 80104d6:	f001 b8e6 	b.w	80116a6 <readCanToStructs+0x1266>
 80104da:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 80104de:	2b07      	cmp	r3, #7
 80104e0:	f201 80e1 	bhi.w	80116a6 <readCanToStructs+0x1266>
 80104e4:	a201      	add	r2, pc, #4	; (adr r2, 80104ec <readCanToStructs+0xac>)
 80104e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104ea:	bf00      	nop
 80104ec:	0801088d 	.word	0x0801088d
 80104f0:	08010a95 	.word	0x08010a95
 80104f4:	08010c6d 	.word	0x08010c6d
 80104f8:	08010e87 	.word	0x08010e87
 80104fc:	0801109d 	.word	0x0801109d
 8010500:	080116a7 	.word	0x080116a7
 8010504:	08011231 	.word	0x08011231
 8010508:	0801146b 	.word	0x0801146b
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 801050c:	4b97      	ldr	r3, [pc, #604]	; (801076c <readCanToStructs+0x32c>)
 801050e:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8010510:	4b95      	ldr	r3, [pc, #596]	; (8010768 <readCanToStructs+0x328>)
 8010512:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010516:	885b      	ldrh	r3, [r3, #2]
 8010518:	4a93      	ldr	r2, [pc, #588]	; (8010768 <readCanToStructs+0x328>)
 801051a:	011b      	lsls	r3, r3, #4
 801051c:	4413      	add	r3, r2
 801051e:	3304      	adds	r3, #4
 8010520:	781b      	ldrb	r3, [r3, #0]
 8010522:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8010526:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801052a:	2b00      	cmp	r3, #0
 801052c:	d110      	bne.n	8010550 <readCanToStructs+0x110>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 801052e:	2206      	movs	r2, #6
 8010530:	2100      	movs	r1, #0
 8010532:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010534:	f012 f9fa 	bl	802292c <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8010538:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801053c:	4a8c      	ldr	r2, [pc, #560]	; (8010770 <readCanToStructs+0x330>)
 801053e:	f240 4112 	movw	r1, #1042	; 0x412
 8010542:	fb01 f303 	mul.w	r3, r1, r3
 8010546:	4413      	add	r3, r2
 8010548:	f203 2307 	addw	r3, r3, #519	; 0x207
 801054c:	2200      	movs	r2, #0
 801054e:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS_TIME_PKT].expSeqNo)
 8010550:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010554:	4a86      	ldr	r2, [pc, #536]	; (8010770 <readCanToStructs+0x330>)
 8010556:	f240 4112 	movw	r1, #1042	; 0x412
 801055a:	fb01 f303 	mul.w	r3, r1, r3
 801055e:	4413      	add	r3, r2
 8010560:	f203 2307 	addw	r3, r3, #519	; 0x207
 8010564:	781b      	ldrb	r3, [r3, #0]
 8010566:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801056a:	429a      	cmp	r2, r3
 801056c:	d015      	beq.n	801059a <readCanToStructs+0x15a>
					printf("GPS Packet Seq no MisMatch\n");
 801056e:	4881      	ldr	r0, [pc, #516]	; (8010774 <readCanToStructs+0x334>)
 8010570:	f012 fb60 	bl	8022c34 <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8010574:	2206      	movs	r2, #6
 8010576:	2100      	movs	r1, #0
 8010578:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801057a:	f012 f9d7 	bl	802292c <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 801057e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010582:	4a7b      	ldr	r2, [pc, #492]	; (8010770 <readCanToStructs+0x330>)
 8010584:	f240 4112 	movw	r1, #1042	; 0x412
 8010588:	fb01 f303 	mul.w	r3, r1, r3
 801058c:	4413      	add	r3, r2
 801058e:	f203 2307 	addw	r3, r3, #519	; 0x207
 8010592:	2200      	movs	r2, #0
 8010594:	701a      	strb	r2, [r3, #0]
					break;
 8010596:	f001 b887 	b.w	80116a8 <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 801059a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801059e:	4613      	mov	r3, r2
 80105a0:	00db      	lsls	r3, r3, #3
 80105a2:	1a9b      	subs	r3, r3, r2
 80105a4:	461a      	mov	r2, r3
 80105a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105a8:	4413      	add	r3, r2
 80105aa:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80105ac:	2301      	movs	r3, #1
 80105ae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80105b2:	e016      	b.n	80105e2 <readCanToStructs+0x1a2>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80105b4:	4b6c      	ldr	r3, [pc, #432]	; (8010768 <readCanToStructs+0x328>)
 80105b6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80105ba:	885b      	ldrh	r3, [r3, #2]
 80105bc:	461a      	mov	r2, r3
 80105be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80105c2:	4969      	ldr	r1, [pc, #420]	; (8010768 <readCanToStructs+0x328>)
 80105c4:	0112      	lsls	r2, r2, #4
 80105c6:	440a      	add	r2, r1
 80105c8:	4413      	add	r3, r2
 80105ca:	3304      	adds	r3, #4
 80105cc:	781a      	ldrb	r2, [r3, #0]
 80105ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105d0:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80105d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105d4:	3301      	adds	r3, #1
 80105d6:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80105d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80105dc:	3301      	adds	r3, #1
 80105de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80105e2:	4b61      	ldr	r3, [pc, #388]	; (8010768 <readCanToStructs+0x328>)
 80105e4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80105e8:	885b      	ldrh	r3, [r3, #2]
 80105ea:	4a5f      	ldr	r2, [pc, #380]	; (8010768 <readCanToStructs+0x328>)
 80105ec:	011b      	lsls	r3, r3, #4
 80105ee:	4413      	add	r3, r2
 80105f0:	330c      	adds	r3, #12
 80105f2:	781b      	ldrb	r3, [r3, #0]
 80105f4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80105f8:	429a      	cmp	r2, r3
 80105fa:	d3db      	bcc.n	80105b4 <readCanToStructs+0x174>
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 80105fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010600:	4a5b      	ldr	r2, [pc, #364]	; (8010770 <readCanToStructs+0x330>)
 8010602:	f240 4112 	movw	r1, #1042	; 0x412
 8010606:	fb01 f303 	mul.w	r3, r1, r3
 801060a:	4413      	add	r3, r2
 801060c:	f203 2307 	addw	r3, r3, #519	; 0x207
 8010610:	781b      	ldrb	r3, [r3, #0]
 8010612:	461a      	mov	r2, r3
 8010614:	4613      	mov	r3, r2
 8010616:	00db      	lsls	r3, r3, #3
 8010618:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 801061a:	4b53      	ldr	r3, [pc, #332]	; (8010768 <readCanToStructs+0x328>)
 801061c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010620:	885b      	ldrh	r3, [r3, #2]
 8010622:	4951      	ldr	r1, [pc, #324]	; (8010768 <readCanToStructs+0x328>)
 8010624:	011b      	lsls	r3, r3, #4
 8010626:	440b      	add	r3, r1
 8010628:	330c      	adds	r3, #12
 801062a:	781b      	ldrb	r3, [r3, #0]
 801062c:	3b01      	subs	r3, #1
 801062e:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 8010630:	2b05      	cmp	r3, #5
 8010632:	d91c      	bls.n	801066e <readCanToStructs+0x22e>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 8010634:	4b50      	ldr	r3, [pc, #320]	; (8010778 <readCanToStructs+0x338>)
 8010636:	4a4d      	ldr	r2, [pc, #308]	; (801076c <readCanToStructs+0x32c>)
 8010638:	6811      	ldr	r1, [r2, #0]
 801063a:	6019      	str	r1, [r3, #0]
 801063c:	8892      	ldrh	r2, [r2, #4]
 801063e:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 8010640:	4b4e      	ldr	r3, [pc, #312]	; (801077c <readCanToStructs+0x33c>)
 8010642:	781b      	ldrb	r3, [r3, #0]
 8010644:	2b01      	cmp	r3, #1
 8010646:	d102      	bne.n	801064e <readCanToStructs+0x20e>
						printf("GPS_PACKET_RECEIVED\n");
 8010648:	484d      	ldr	r0, [pc, #308]	; (8010780 <readCanToStructs+0x340>)
 801064a:	f012 faf3 	bl	8022c34 <puts>
					Write_RTC();
 801064e:	f7fa ff33 	bl	800b4b8 <Write_RTC>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8010652:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010656:	4a46      	ldr	r2, [pc, #280]	; (8010770 <readCanToStructs+0x330>)
 8010658:	f240 4112 	movw	r1, #1042	; 0x412
 801065c:	fb01 f303 	mul.w	r3, r1, r3
 8010660:	4413      	add	r3, r2
 8010662:	f203 2307 	addw	r3, r3, #519	; 0x207
 8010666:	2200      	movs	r2, #0
 8010668:	701a      	strb	r2, [r3, #0]
				break;
 801066a:	f001 b81d 	b.w	80116a8 <readCanToStructs+0x1268>
					canStatus[uc_index][GPS_TIME_PKT].invalid = 1;
 801066e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010672:	4a3f      	ldr	r2, [pc, #252]	; (8010770 <readCanToStructs+0x330>)
 8010674:	f240 4112 	movw	r1, #1042	; 0x412
 8010678:	fb01 f303 	mul.w	r3, r1, r3
 801067c:	4413      	add	r3, r2
 801067e:	f203 2306 	addw	r3, r3, #518	; 0x206
 8010682:	2201      	movs	r2, #1
 8010684:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo++;
 8010686:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801068a:	4939      	ldr	r1, [pc, #228]	; (8010770 <readCanToStructs+0x330>)
 801068c:	f240 4212 	movw	r2, #1042	; 0x412
 8010690:	fb03 f202 	mul.w	r2, r3, r2
 8010694:	440a      	add	r2, r1
 8010696:	f202 2207 	addw	r2, r2, #519	; 0x207
 801069a:	7812      	ldrb	r2, [r2, #0]
 801069c:	3201      	adds	r2, #1
 801069e:	b2d0      	uxtb	r0, r2
 80106a0:	4a33      	ldr	r2, [pc, #204]	; (8010770 <readCanToStructs+0x330>)
 80106a2:	f240 4112 	movw	r1, #1042	; 0x412
 80106a6:	fb01 f303 	mul.w	r3, r1, r3
 80106aa:	4413      	add	r3, r2
 80106ac:	f203 2307 	addw	r3, r3, #519	; 0x207
 80106b0:	4602      	mov	r2, r0
 80106b2:	701a      	strb	r2, [r3, #0]
				break;
 80106b4:	f000 bff8 	b.w	80116a8 <readCanToStructs+0x1268>
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 80106b8:	4b2c      	ldr	r3, [pc, #176]	; (801076c <readCanToStructs+0x32c>)
 80106ba:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80106bc:	4b2a      	ldr	r3, [pc, #168]	; (8010768 <readCanToStructs+0x328>)
 80106be:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80106c2:	885b      	ldrh	r3, [r3, #2]
 80106c4:	4a28      	ldr	r2, [pc, #160]	; (8010768 <readCanToStructs+0x328>)
 80106c6:	011b      	lsls	r3, r3, #4
 80106c8:	4413      	add	r3, r2
 80106ca:	3304      	adds	r3, #4
 80106cc:	781b      	ldrb	r3, [r3, #0]
 80106ce:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 80106d2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d110      	bne.n	80106fc <readCanToStructs+0x2bc>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 80106da:	2206      	movs	r2, #6
 80106dc:	2100      	movs	r1, #0
 80106de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80106e0:	f012 f924 	bl	802292c <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 80106e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80106e8:	4a21      	ldr	r2, [pc, #132]	; (8010770 <readCanToStructs+0x330>)
 80106ea:	f240 4112 	movw	r1, #1042	; 0x412
 80106ee:	fb01 f303 	mul.w	r3, r1, r3
 80106f2:	4413      	add	r3, r2
 80106f4:	f203 2313 	addw	r3, r3, #531	; 0x213
 80106f8:	2200      	movs	r2, #0
 80106fa:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS2_TIME_PKT].expSeqNo)
 80106fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010700:	4a1b      	ldr	r2, [pc, #108]	; (8010770 <readCanToStructs+0x330>)
 8010702:	f240 4112 	movw	r1, #1042	; 0x412
 8010706:	fb01 f303 	mul.w	r3, r1, r3
 801070a:	4413      	add	r3, r2
 801070c:	f203 2313 	addw	r3, r3, #531	; 0x213
 8010710:	781b      	ldrb	r3, [r3, #0]
 8010712:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010716:	429a      	cmp	r2, r3
 8010718:	d015      	beq.n	8010746 <readCanToStructs+0x306>
					printf("GPS2 Packet Seq no MisMatch\n");
 801071a:	481a      	ldr	r0, [pc, #104]	; (8010784 <readCanToStructs+0x344>)
 801071c:	f012 fa8a 	bl	8022c34 <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8010720:	2206      	movs	r2, #6
 8010722:	2100      	movs	r1, #0
 8010724:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010726:	f012 f901 	bl	802292c <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 801072a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801072e:	4a10      	ldr	r2, [pc, #64]	; (8010770 <readCanToStructs+0x330>)
 8010730:	f240 4112 	movw	r1, #1042	; 0x412
 8010734:	fb01 f303 	mul.w	r3, r1, r3
 8010738:	4413      	add	r3, r2
 801073a:	f203 2313 	addw	r3, r3, #531	; 0x213
 801073e:	2200      	movs	r2, #0
 8010740:	701a      	strb	r2, [r3, #0]
					break;
 8010742:	f000 bfb1 	b.w	80116a8 <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 8010746:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801074a:	4613      	mov	r3, r2
 801074c:	00db      	lsls	r3, r3, #3
 801074e:	1a9b      	subs	r3, r3, r2
 8010750:	461a      	mov	r2, r3
 8010752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010754:	4413      	add	r3, r2
 8010756:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010758:	2301      	movs	r3, #1
 801075a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801075e:	e02a      	b.n	80107b6 <readCanToStructs+0x376>
 8010760:	20000304 	.word	0x20000304
 8010764:	20001968 	.word	0x20001968
 8010768:	20005b08 	.word	0x20005b08
 801076c:	2000288c 	.word	0x2000288c
 8010770:	200052e4 	.word	0x200052e4
 8010774:	08026fc0 	.word	0x08026fc0
 8010778:	20002884 	.word	0x20002884
 801077c:	20000645 	.word	0x20000645
 8010780:	08026fdc 	.word	0x08026fdc
 8010784:	08026ff0 	.word	0x08026ff0
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8010788:	4bb6      	ldr	r3, [pc, #728]	; (8010a64 <readCanToStructs+0x624>)
 801078a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801078e:	885b      	ldrh	r3, [r3, #2]
 8010790:	461a      	mov	r2, r3
 8010792:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010796:	49b3      	ldr	r1, [pc, #716]	; (8010a64 <readCanToStructs+0x624>)
 8010798:	0112      	lsls	r2, r2, #4
 801079a:	440a      	add	r2, r1
 801079c:	4413      	add	r3, r2
 801079e:	3304      	adds	r3, #4
 80107a0:	781a      	ldrb	r2, [r3, #0]
 80107a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107a4:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80107a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107a8:	3301      	adds	r3, #1
 80107aa:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80107ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80107b0:	3301      	adds	r3, #1
 80107b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80107b6:	4bab      	ldr	r3, [pc, #684]	; (8010a64 <readCanToStructs+0x624>)
 80107b8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80107bc:	885b      	ldrh	r3, [r3, #2]
 80107be:	4aa9      	ldr	r2, [pc, #676]	; (8010a64 <readCanToStructs+0x624>)
 80107c0:	011b      	lsls	r3, r3, #4
 80107c2:	4413      	add	r3, r2
 80107c4:	330c      	adds	r3, #12
 80107c6:	781b      	ldrb	r3, [r3, #0]
 80107c8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80107cc:	429a      	cmp	r2, r3
 80107ce:	d3db      	bcc.n	8010788 <readCanToStructs+0x348>
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 80107d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80107d4:	4aa4      	ldr	r2, [pc, #656]	; (8010a68 <readCanToStructs+0x628>)
 80107d6:	f240 4112 	movw	r1, #1042	; 0x412
 80107da:	fb01 f303 	mul.w	r3, r1, r3
 80107de:	4413      	add	r3, r2
 80107e0:	f203 2313 	addw	r3, r3, #531	; 0x213
 80107e4:	781b      	ldrb	r3, [r3, #0]
 80107e6:	461a      	mov	r2, r3
 80107e8:	4613      	mov	r3, r2
 80107ea:	00db      	lsls	r3, r3, #3
 80107ec:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 80107ee:	4b9d      	ldr	r3, [pc, #628]	; (8010a64 <readCanToStructs+0x624>)
 80107f0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80107f4:	885b      	ldrh	r3, [r3, #2]
 80107f6:	499b      	ldr	r1, [pc, #620]	; (8010a64 <readCanToStructs+0x624>)
 80107f8:	011b      	lsls	r3, r3, #4
 80107fa:	440b      	add	r3, r1
 80107fc:	330c      	adds	r3, #12
 80107fe:	781b      	ldrb	r3, [r3, #0]
 8010800:	3b01      	subs	r3, #1
 8010802:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 8010804:	2b05      	cmp	r3, #5
 8010806:	d91c      	bls.n	8010842 <readCanToStructs+0x402>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 8010808:	4b98      	ldr	r3, [pc, #608]	; (8010a6c <readCanToStructs+0x62c>)
 801080a:	4a99      	ldr	r2, [pc, #612]	; (8010a70 <readCanToStructs+0x630>)
 801080c:	6811      	ldr	r1, [r2, #0]
 801080e:	6019      	str	r1, [r3, #0]
 8010810:	8892      	ldrh	r2, [r2, #4]
 8010812:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 8010814:	4b97      	ldr	r3, [pc, #604]	; (8010a74 <readCanToStructs+0x634>)
 8010816:	781b      	ldrb	r3, [r3, #0]
 8010818:	2b01      	cmp	r3, #1
 801081a:	d102      	bne.n	8010822 <readCanToStructs+0x3e2>
						printf("GPS2_PACKET_RECEIVED\n");
 801081c:	4896      	ldr	r0, [pc, #600]	; (8010a78 <readCanToStructs+0x638>)
 801081e:	f012 fa09 	bl	8022c34 <puts>
					Write_RTC();
 8010822:	f7fa fe49 	bl	800b4b8 <Write_RTC>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 8010826:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801082a:	4a8f      	ldr	r2, [pc, #572]	; (8010a68 <readCanToStructs+0x628>)
 801082c:	f240 4112 	movw	r1, #1042	; 0x412
 8010830:	fb01 f303 	mul.w	r3, r1, r3
 8010834:	4413      	add	r3, r2
 8010836:	f203 2313 	addw	r3, r3, #531	; 0x213
 801083a:	2200      	movs	r2, #0
 801083c:	701a      	strb	r2, [r3, #0]
				break;
 801083e:	f000 bf33 	b.w	80116a8 <readCanToStructs+0x1268>
					canStatus[uc_index][GPS2_TIME_PKT].invalid = 1;
 8010842:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010846:	4a88      	ldr	r2, [pc, #544]	; (8010a68 <readCanToStructs+0x628>)
 8010848:	f240 4112 	movw	r1, #1042	; 0x412
 801084c:	fb01 f303 	mul.w	r3, r1, r3
 8010850:	4413      	add	r3, r2
 8010852:	f203 2312 	addw	r3, r3, #530	; 0x212
 8010856:	2201      	movs	r2, #1
 8010858:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo++;
 801085a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801085e:	4982      	ldr	r1, [pc, #520]	; (8010a68 <readCanToStructs+0x628>)
 8010860:	f240 4212 	movw	r2, #1042	; 0x412
 8010864:	fb03 f202 	mul.w	r2, r3, r2
 8010868:	440a      	add	r2, r1
 801086a:	f202 2213 	addw	r2, r2, #531	; 0x213
 801086e:	7812      	ldrb	r2, [r2, #0]
 8010870:	3201      	adds	r2, #1
 8010872:	b2d0      	uxtb	r0, r2
 8010874:	4a7c      	ldr	r2, [pc, #496]	; (8010a68 <readCanToStructs+0x628>)
 8010876:	f240 4112 	movw	r1, #1042	; 0x412
 801087a:	fb01 f303 	mul.w	r3, r1, r3
 801087e:	4413      	add	r3, r2
 8010880:	f203 2313 	addw	r3, r3, #531	; 0x213
 8010884:	4602      	mov	r2, r0
 8010886:	701a      	strb	r2, [r3, #0]
				break;
 8010888:	f000 bf0e 	b.w	80116a8 <readCanToStructs+0x1268>
				uc_pp_charPtr = (uint8_t *)&Temp_Rx_Ei_self_sharing_st;
 801088c:	4b7b      	ldr	r3, [pc, #492]	; (8010a7c <readCanToStructs+0x63c>)
 801088e:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8010890:	4b74      	ldr	r3, [pc, #464]	; (8010a64 <readCanToStructs+0x624>)
 8010892:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010896:	885b      	ldrh	r3, [r3, #2]
 8010898:	4a72      	ldr	r2, [pc, #456]	; (8010a64 <readCanToStructs+0x624>)
 801089a:	011b      	lsls	r3, r3, #4
 801089c:	4413      	add	r3, r2
 801089e:	3304      	adds	r3, #4
 80108a0:	781b      	ldrb	r3, [r3, #0]
 80108a2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 80108a6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d110      	bne.n	80108d0 <readCanToStructs+0x490>
					memset(uc_pp_charPtr,0,sizeof(EI_SELF_SHARING_t));
 80108ae:	2218      	movs	r2, #24
 80108b0:	2100      	movs	r1, #0
 80108b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80108b4:	f012 f83a 	bl	802292c <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 80108b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80108bc:	4a6a      	ldr	r2, [pc, #424]	; (8010a68 <readCanToStructs+0x628>)
 80108be:	f240 4112 	movw	r1, #1042	; 0x412
 80108c2:	fb01 f303 	mul.w	r3, r1, r3
 80108c6:	4413      	add	r3, r2
 80108c8:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80108cc:	2200      	movs	r2, #0
 80108ce:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo)
 80108d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80108d4:	4a64      	ldr	r2, [pc, #400]	; (8010a68 <readCanToStructs+0x628>)
 80108d6:	f240 4112 	movw	r1, #1042	; 0x412
 80108da:	fb01 f303 	mul.w	r3, r1, r3
 80108de:	4413      	add	r3, r2
 80108e0:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80108e4:	781b      	ldrb	r3, [r3, #0]
 80108e6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80108ea:	429a      	cmp	r2, r3
 80108ec:	d015      	beq.n	801091a <readCanToStructs+0x4da>
					printf("EI_1_SELF_SHARING Seq no MisMatch\n");
 80108ee:	4864      	ldr	r0, [pc, #400]	; (8010a80 <readCanToStructs+0x640>)
 80108f0:	f012 f9a0 	bl	8022c34 <puts>
					memset(uc_pp_charPtr,0,sizeof(EI_SELF_SHARING_t));
 80108f4:	2218      	movs	r2, #24
 80108f6:	2100      	movs	r1, #0
 80108f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80108fa:	f012 f817 	bl	802292c <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 80108fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010902:	4a59      	ldr	r2, [pc, #356]	; (8010a68 <readCanToStructs+0x628>)
 8010904:	f240 4112 	movw	r1, #1042	; 0x412
 8010908:	fb01 f303 	mul.w	r3, r1, r3
 801090c:	4413      	add	r3, r2
 801090e:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8010912:	2200      	movs	r2, #0
 8010914:	701a      	strb	r2, [r3, #0]
					break;
 8010916:	f000 bec7 	b.w	80116a8 <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 801091a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801091e:	4613      	mov	r3, r2
 8010920:	00db      	lsls	r3, r3, #3
 8010922:	1a9b      	subs	r3, r3, r2
 8010924:	461a      	mov	r2, r3
 8010926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010928:	4413      	add	r3, r2
 801092a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801092c:	2301      	movs	r3, #1
 801092e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010932:	e016      	b.n	8010962 <readCanToStructs+0x522>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8010934:	4b4b      	ldr	r3, [pc, #300]	; (8010a64 <readCanToStructs+0x624>)
 8010936:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801093a:	885b      	ldrh	r3, [r3, #2]
 801093c:	461a      	mov	r2, r3
 801093e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010942:	4948      	ldr	r1, [pc, #288]	; (8010a64 <readCanToStructs+0x624>)
 8010944:	0112      	lsls	r2, r2, #4
 8010946:	440a      	add	r2, r1
 8010948:	4413      	add	r3, r2
 801094a:	3304      	adds	r3, #4
 801094c:	781a      	ldrb	r2, [r3, #0]
 801094e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010950:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8010952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010954:	3301      	adds	r3, #1
 8010956:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010958:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801095c:	3301      	adds	r3, #1
 801095e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010962:	4b40      	ldr	r3, [pc, #256]	; (8010a64 <readCanToStructs+0x624>)
 8010964:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010968:	885b      	ldrh	r3, [r3, #2]
 801096a:	4a3e      	ldr	r2, [pc, #248]	; (8010a64 <readCanToStructs+0x624>)
 801096c:	011b      	lsls	r3, r3, #4
 801096e:	4413      	add	r3, r2
 8010970:	330c      	adds	r3, #12
 8010972:	781b      	ldrb	r3, [r3, #0]
 8010974:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8010978:	429a      	cmp	r2, r3
 801097a:	d3db      	bcc.n	8010934 <readCanToStructs+0x4f4>
				if((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7)
 801097c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010980:	4a39      	ldr	r2, [pc, #228]	; (8010a68 <readCanToStructs+0x628>)
 8010982:	f240 4112 	movw	r1, #1042	; 0x412
 8010986:	fb01 f303 	mul.w	r3, r1, r3
 801098a:	4413      	add	r3, r2
 801098c:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8010990:	781b      	ldrb	r3, [r3, #0]
 8010992:	461a      	mov	r2, r3
 8010994:	4613      	mov	r3, r2
 8010996:	00db      	lsls	r3, r3, #3
 8010998:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(EI_SELF_SHARING_t))
 801099a:	4b32      	ldr	r3, [pc, #200]	; (8010a64 <readCanToStructs+0x624>)
 801099c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80109a0:	885b      	ldrh	r3, [r3, #2]
 80109a2:	4930      	ldr	r1, [pc, #192]	; (8010a64 <readCanToStructs+0x624>)
 80109a4:	011b      	lsls	r3, r3, #4
 80109a6:	440b      	add	r3, r1
 80109a8:	330c      	adds	r3, #12
 80109aa:	781b      	ldrb	r3, [r3, #0]
 80109ac:	3b01      	subs	r3, #1
 80109ae:	4413      	add	r3, r2
				if((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7)
 80109b0:	2b17      	cmp	r3, #23
 80109b2:	d932      	bls.n	8010a1a <readCanToStructs+0x5da>
					memcpy(&Rx_Ei_self_sharing_st[Temp_Rx_Ei_self_sharing_st.Peer_Index],&Temp_Rx_Ei_self_sharing_st,sizeof(EI_SELF_SHARING_t));
 80109b4:	4b31      	ldr	r3, [pc, #196]	; (8010a7c <readCanToStructs+0x63c>)
 80109b6:	781b      	ldrb	r3, [r3, #0]
 80109b8:	461a      	mov	r2, r3
 80109ba:	4613      	mov	r3, r2
 80109bc:	005b      	lsls	r3, r3, #1
 80109be:	4413      	add	r3, r2
 80109c0:	00db      	lsls	r3, r3, #3
 80109c2:	4a30      	ldr	r2, [pc, #192]	; (8010a84 <readCanToStructs+0x644>)
 80109c4:	4413      	add	r3, r2
 80109c6:	2218      	movs	r2, #24
 80109c8:	492c      	ldr	r1, [pc, #176]	; (8010a7c <readCanToStructs+0x63c>)
 80109ca:	4618      	mov	r0, r3
 80109cc:	f011 ff86 	bl	80228dc <memcpy>
					if(Debug_flag == 1)
 80109d0:	4b28      	ldr	r3, [pc, #160]	; (8010a74 <readCanToStructs+0x634>)
 80109d2:	781b      	ldrb	r3, [r3, #0]
 80109d4:	2b01      	cmp	r3, #1
 80109d6:	d105      	bne.n	80109e4 <readCanToStructs+0x5a4>
						printf("O_Info1_RCV:%u\n",Temp_Rx_Ei_self_sharing_st.Peer_Index);
 80109d8:	4b28      	ldr	r3, [pc, #160]	; (8010a7c <readCanToStructs+0x63c>)
 80109da:	781b      	ldrb	r3, [r3, #0]
 80109dc:	4619      	mov	r1, r3
 80109de:	482a      	ldr	r0, [pc, #168]	; (8010a88 <readCanToStructs+0x648>)
 80109e0:	f012 f88c 	bl	8022afc <iprintf>
					Is_CAN_Exchange_happening = YES;
 80109e4:	4b29      	ldr	r3, [pc, #164]	; (8010a8c <readCanToStructs+0x64c>)
 80109e6:	2201      	movs	r2, #1
 80109e8:	701a      	strb	r2, [r3, #0]
					RCV_SELF_XCHG_CLK = HAL_GetTick();
 80109ea:	f005 f87d 	bl	8015ae8 <HAL_GetTick>
 80109ee:	4603      	mov	r3, r0
 80109f0:	4a27      	ldr	r2, [pc, #156]	; (8010a90 <readCanToStructs+0x650>)
 80109f2:	6013      	str	r3, [r2, #0]
					Check_Other_EiPC_Packet(Temp_Rx_Ei_self_sharing_st.Peer_Index);
 80109f4:	4b21      	ldr	r3, [pc, #132]	; (8010a7c <readCanToStructs+0x63c>)
 80109f6:	781b      	ldrb	r3, [r3, #0]
 80109f8:	4618      	mov	r0, r3
 80109fa:	f7f7 f9eb 	bl	8007dd4 <Check_Other_EiPC_Packet>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 80109fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010a02:	4a19      	ldr	r2, [pc, #100]	; (8010a68 <readCanToStructs+0x628>)
 8010a04:	f240 4112 	movw	r1, #1042	; 0x412
 8010a08:	fb01 f303 	mul.w	r3, r1, r3
 8010a0c:	4413      	add	r3, r2
 8010a0e:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8010a12:	2200      	movs	r2, #0
 8010a14:	701a      	strb	r2, [r3, #0]
				break;
 8010a16:	f000 be47 	b.w	80116a8 <readCanToStructs+0x1268>
					canStatus[uc_index][EI_1_SELF_SHARING].invalid = 1;
 8010a1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010a1e:	4a12      	ldr	r2, [pc, #72]	; (8010a68 <readCanToStructs+0x628>)
 8010a20:	f240 4112 	movw	r1, #1042	; 0x412
 8010a24:	fb01 f303 	mul.w	r3, r1, r3
 8010a28:	4413      	add	r3, r2
 8010a2a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010a2e:	2201      	movs	r2, #1
 8010a30:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo++;
 8010a32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010a36:	490c      	ldr	r1, [pc, #48]	; (8010a68 <readCanToStructs+0x628>)
 8010a38:	f240 4212 	movw	r2, #1042	; 0x412
 8010a3c:	fb03 f202 	mul.w	r2, r3, r2
 8010a40:	440a      	add	r2, r1
 8010a42:	f202 4203 	addw	r2, r2, #1027	; 0x403
 8010a46:	7812      	ldrb	r2, [r2, #0]
 8010a48:	3201      	adds	r2, #1
 8010a4a:	b2d0      	uxtb	r0, r2
 8010a4c:	4a06      	ldr	r2, [pc, #24]	; (8010a68 <readCanToStructs+0x628>)
 8010a4e:	f240 4112 	movw	r1, #1042	; 0x412
 8010a52:	fb01 f303 	mul.w	r3, r1, r3
 8010a56:	4413      	add	r3, r2
 8010a58:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8010a5c:	4602      	mov	r2, r0
 8010a5e:	701a      	strb	r2, [r3, #0]
				break;
 8010a60:	f000 be22 	b.w	80116a8 <readCanToStructs+0x1268>
 8010a64:	20005b08 	.word	0x20005b08
 8010a68:	200052e4 	.word	0x200052e4
 8010a6c:	20002884 	.word	0x20002884
 8010a70:	2000288c 	.word	0x2000288c
 8010a74:	20000645 	.word	0x20000645
 8010a78:	0802700c 	.word	0x0802700c
 8010a7c:	20001878 	.word	0x20001878
 8010a80:	08027024 	.word	0x08027024
 8010a84:	20001770 	.word	0x20001770
 8010a88:	08027048 	.word	0x08027048
 8010a8c:	20000108 	.word	0x20000108
 8010a90:	20000e4c 	.word	0x20000e4c
				uc_pp_charPtr = (uint8_t *)&Temp_Rx_Ei_self_sharing_st;
 8010a94:	4b9f      	ldr	r3, [pc, #636]	; (8010d14 <readCanToStructs+0x8d4>)
 8010a96:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8010a98:	4b9f      	ldr	r3, [pc, #636]	; (8010d18 <readCanToStructs+0x8d8>)
 8010a9a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010a9e:	885b      	ldrh	r3, [r3, #2]
 8010aa0:	4a9d      	ldr	r2, [pc, #628]	; (8010d18 <readCanToStructs+0x8d8>)
 8010aa2:	011b      	lsls	r3, r3, #4
 8010aa4:	4413      	add	r3, r2
 8010aa6:	3304      	adds	r3, #4
 8010aa8:	781b      	ldrb	r3, [r3, #0]
 8010aaa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8010aae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d110      	bne.n	8010ad8 <readCanToStructs+0x698>
					memset(uc_pp_charPtr,0,sizeof(EI_SELF_SHARING_t));
 8010ab6:	2218      	movs	r2, #24
 8010ab8:	2100      	movs	r1, #0
 8010aba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010abc:	f011 ff36 	bl	802292c <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8010ac0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010ac4:	4a95      	ldr	r2, [pc, #596]	; (8010d1c <readCanToStructs+0x8dc>)
 8010ac6:	f240 4112 	movw	r1, #1042	; 0x412
 8010aca:	fb01 f303 	mul.w	r3, r1, r3
 8010ace:	4413      	add	r3, r2
 8010ad0:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8010ad4:	2200      	movs	r2, #0
 8010ad6:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo)
 8010ad8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010adc:	4a8f      	ldr	r2, [pc, #572]	; (8010d1c <readCanToStructs+0x8dc>)
 8010ade:	f240 4112 	movw	r1, #1042	; 0x412
 8010ae2:	fb01 f303 	mul.w	r3, r1, r3
 8010ae6:	4413      	add	r3, r2
 8010ae8:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8010aec:	781b      	ldrb	r3, [r3, #0]
 8010aee:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010af2:	429a      	cmp	r2, r3
 8010af4:	d015      	beq.n	8010b22 <readCanToStructs+0x6e2>
					printf("EI_2_SELF_SHARING Seq no MisMatch\n");
 8010af6:	488a      	ldr	r0, [pc, #552]	; (8010d20 <readCanToStructs+0x8e0>)
 8010af8:	f012 f89c 	bl	8022c34 <puts>
					memset(uc_pp_charPtr,0,sizeof(EI_SELF_SHARING_t));
 8010afc:	2218      	movs	r2, #24
 8010afe:	2100      	movs	r1, #0
 8010b00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010b02:	f011 ff13 	bl	802292c <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8010b06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010b0a:	4a84      	ldr	r2, [pc, #528]	; (8010d1c <readCanToStructs+0x8dc>)
 8010b0c:	f240 4112 	movw	r1, #1042	; 0x412
 8010b10:	fb01 f303 	mul.w	r3, r1, r3
 8010b14:	4413      	add	r3, r2
 8010b16:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8010b1a:	2200      	movs	r2, #0
 8010b1c:	701a      	strb	r2, [r3, #0]
					break;
 8010b1e:	f000 bdc3 	b.w	80116a8 <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 8010b22:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010b26:	4613      	mov	r3, r2
 8010b28:	00db      	lsls	r3, r3, #3
 8010b2a:	1a9b      	subs	r3, r3, r2
 8010b2c:	461a      	mov	r2, r3
 8010b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b30:	4413      	add	r3, r2
 8010b32:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010b34:	2301      	movs	r3, #1
 8010b36:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010b3a:	e016      	b.n	8010b6a <readCanToStructs+0x72a>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8010b3c:	4b76      	ldr	r3, [pc, #472]	; (8010d18 <readCanToStructs+0x8d8>)
 8010b3e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010b42:	885b      	ldrh	r3, [r3, #2]
 8010b44:	461a      	mov	r2, r3
 8010b46:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010b4a:	4973      	ldr	r1, [pc, #460]	; (8010d18 <readCanToStructs+0x8d8>)
 8010b4c:	0112      	lsls	r2, r2, #4
 8010b4e:	440a      	add	r2, r1
 8010b50:	4413      	add	r3, r2
 8010b52:	3304      	adds	r3, #4
 8010b54:	781a      	ldrb	r2, [r3, #0]
 8010b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b58:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8010b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b5c:	3301      	adds	r3, #1
 8010b5e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010b60:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010b64:	3301      	adds	r3, #1
 8010b66:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010b6a:	4b6b      	ldr	r3, [pc, #428]	; (8010d18 <readCanToStructs+0x8d8>)
 8010b6c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010b70:	885b      	ldrh	r3, [r3, #2]
 8010b72:	4a69      	ldr	r2, [pc, #420]	; (8010d18 <readCanToStructs+0x8d8>)
 8010b74:	011b      	lsls	r3, r3, #4
 8010b76:	4413      	add	r3, r2
 8010b78:	330c      	adds	r3, #12
 8010b7a:	781b      	ldrb	r3, [r3, #0]
 8010b7c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8010b80:	429a      	cmp	r2, r3
 8010b82:	d3db      	bcc.n	8010b3c <readCanToStructs+0x6fc>
				if((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7)
 8010b84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010b88:	4a64      	ldr	r2, [pc, #400]	; (8010d1c <readCanToStructs+0x8dc>)
 8010b8a:	f240 4112 	movw	r1, #1042	; 0x412
 8010b8e:	fb01 f303 	mul.w	r3, r1, r3
 8010b92:	4413      	add	r3, r2
 8010b94:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8010b98:	781b      	ldrb	r3, [r3, #0]
 8010b9a:	461a      	mov	r2, r3
 8010b9c:	4613      	mov	r3, r2
 8010b9e:	00db      	lsls	r3, r3, #3
 8010ba0:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(EI_SELF_SHARING_t))
 8010ba2:	4b5d      	ldr	r3, [pc, #372]	; (8010d18 <readCanToStructs+0x8d8>)
 8010ba4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010ba8:	885b      	ldrh	r3, [r3, #2]
 8010baa:	495b      	ldr	r1, [pc, #364]	; (8010d18 <readCanToStructs+0x8d8>)
 8010bac:	011b      	lsls	r3, r3, #4
 8010bae:	440b      	add	r3, r1
 8010bb0:	330c      	adds	r3, #12
 8010bb2:	781b      	ldrb	r3, [r3, #0]
 8010bb4:	3b01      	subs	r3, #1
 8010bb6:	4413      	add	r3, r2
				if((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7)
 8010bb8:	2b17      	cmp	r3, #23
 8010bba:	d932      	bls.n	8010c22 <readCanToStructs+0x7e2>
					memcpy(&Rx_Ei_self_sharing_st[Temp_Rx_Ei_self_sharing_st.Peer_Index],&Temp_Rx_Ei_self_sharing_st,sizeof(EI_SELF_SHARING_t));
 8010bbc:	4b55      	ldr	r3, [pc, #340]	; (8010d14 <readCanToStructs+0x8d4>)
 8010bbe:	781b      	ldrb	r3, [r3, #0]
 8010bc0:	461a      	mov	r2, r3
 8010bc2:	4613      	mov	r3, r2
 8010bc4:	005b      	lsls	r3, r3, #1
 8010bc6:	4413      	add	r3, r2
 8010bc8:	00db      	lsls	r3, r3, #3
 8010bca:	4a56      	ldr	r2, [pc, #344]	; (8010d24 <readCanToStructs+0x8e4>)
 8010bcc:	4413      	add	r3, r2
 8010bce:	2218      	movs	r2, #24
 8010bd0:	4950      	ldr	r1, [pc, #320]	; (8010d14 <readCanToStructs+0x8d4>)
 8010bd2:	4618      	mov	r0, r3
 8010bd4:	f011 fe82 	bl	80228dc <memcpy>
					if(Debug_flag == 1)
 8010bd8:	4b53      	ldr	r3, [pc, #332]	; (8010d28 <readCanToStructs+0x8e8>)
 8010bda:	781b      	ldrb	r3, [r3, #0]
 8010bdc:	2b01      	cmp	r3, #1
 8010bde:	d105      	bne.n	8010bec <readCanToStructs+0x7ac>
						printf("O_Info2_RCV:%u\n",Temp_Rx_Ei_self_sharing_st.Peer_Index);
 8010be0:	4b4c      	ldr	r3, [pc, #304]	; (8010d14 <readCanToStructs+0x8d4>)
 8010be2:	781b      	ldrb	r3, [r3, #0]
 8010be4:	4619      	mov	r1, r3
 8010be6:	4851      	ldr	r0, [pc, #324]	; (8010d2c <readCanToStructs+0x8ec>)
 8010be8:	f011 ff88 	bl	8022afc <iprintf>
					RCV_SELF_XCHG_CLK = HAL_GetTick();
 8010bec:	f004 ff7c 	bl	8015ae8 <HAL_GetTick>
 8010bf0:	4603      	mov	r3, r0
 8010bf2:	4a4f      	ldr	r2, [pc, #316]	; (8010d30 <readCanToStructs+0x8f0>)
 8010bf4:	6013      	str	r3, [r2, #0]
					Is_CAN_Exchange_happening = YES;
 8010bf6:	4b4f      	ldr	r3, [pc, #316]	; (8010d34 <readCanToStructs+0x8f4>)
 8010bf8:	2201      	movs	r2, #1
 8010bfa:	701a      	strb	r2, [r3, #0]
					Check_Other_EiPC_Packet(Temp_Rx_Ei_self_sharing_st.Peer_Index);
 8010bfc:	4b45      	ldr	r3, [pc, #276]	; (8010d14 <readCanToStructs+0x8d4>)
 8010bfe:	781b      	ldrb	r3, [r3, #0]
 8010c00:	4618      	mov	r0, r3
 8010c02:	f7f7 f8e7 	bl	8007dd4 <Check_Other_EiPC_Packet>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8010c06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010c0a:	4a44      	ldr	r2, [pc, #272]	; (8010d1c <readCanToStructs+0x8dc>)
 8010c0c:	f240 4112 	movw	r1, #1042	; 0x412
 8010c10:	fb01 f303 	mul.w	r3, r1, r3
 8010c14:	4413      	add	r3, r2
 8010c16:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8010c1a:	2200      	movs	r2, #0
 8010c1c:	701a      	strb	r2, [r3, #0]
				break;
 8010c1e:	f000 bd43 	b.w	80116a8 <readCanToStructs+0x1268>
					canStatus[uc_index][EI_2_SELF_SHARING].invalid = 1;
 8010c22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010c26:	4a3d      	ldr	r2, [pc, #244]	; (8010d1c <readCanToStructs+0x8dc>)
 8010c28:	f240 4112 	movw	r1, #1042	; 0x412
 8010c2c:	fb01 f303 	mul.w	r3, r1, r3
 8010c30:	4413      	add	r3, r2
 8010c32:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8010c36:	2201      	movs	r2, #1
 8010c38:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo++;
 8010c3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010c3e:	4937      	ldr	r1, [pc, #220]	; (8010d1c <readCanToStructs+0x8dc>)
 8010c40:	f240 4212 	movw	r2, #1042	; 0x412
 8010c44:	fb03 f202 	mul.w	r2, r3, r2
 8010c48:	440a      	add	r2, r1
 8010c4a:	f202 4205 	addw	r2, r2, #1029	; 0x405
 8010c4e:	7812      	ldrb	r2, [r2, #0]
 8010c50:	3201      	adds	r2, #1
 8010c52:	b2d0      	uxtb	r0, r2
 8010c54:	4a31      	ldr	r2, [pc, #196]	; (8010d1c <readCanToStructs+0x8dc>)
 8010c56:	f240 4112 	movw	r1, #1042	; 0x412
 8010c5a:	fb01 f303 	mul.w	r3, r1, r3
 8010c5e:	4413      	add	r3, r2
 8010c60:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8010c64:	4602      	mov	r2, r0
 8010c66:	701a      	strb	r2, [r3, #0]
				break;
 8010c68:	f000 bd1e 	b.w	80116a8 <readCanToStructs+0x1268>
				uc_pp_charPtr = (uint8_t *)&Temp_Rx_VITAL_MSG_CAN_st;
 8010c6c:	4b32      	ldr	r3, [pc, #200]	; (8010d38 <readCanToStructs+0x8f8>)
 8010c6e:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8010c70:	4b29      	ldr	r3, [pc, #164]	; (8010d18 <readCanToStructs+0x8d8>)
 8010c72:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010c76:	885b      	ldrh	r3, [r3, #2]
 8010c78:	4a27      	ldr	r2, [pc, #156]	; (8010d18 <readCanToStructs+0x8d8>)
 8010c7a:	011b      	lsls	r3, r3, #4
 8010c7c:	4413      	add	r3, r2
 8010c7e:	3304      	adds	r3, #4
 8010c80:	781b      	ldrb	r3, [r3, #0]
 8010c82:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8010c86:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d110      	bne.n	8010cb0 <readCanToStructs+0x870>
					memset(uc_pp_charPtr,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8010c8e:	2246      	movs	r2, #70	; 0x46
 8010c90:	2100      	movs	r1, #0
 8010c92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010c94:	f011 fe4a 	bl	802292c <memset>
					canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo = 0;
 8010c98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010c9c:	4a1f      	ldr	r2, [pc, #124]	; (8010d1c <readCanToStructs+0x8dc>)
 8010c9e:	f240 4112 	movw	r1, #1042	; 0x412
 8010ca2:	fb01 f303 	mul.w	r3, r1, r3
 8010ca6:	4413      	add	r3, r2
 8010ca8:	f203 4307 	addw	r3, r3, #1031	; 0x407
 8010cac:	2200      	movs	r2, #0
 8010cae:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo)
 8010cb0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010cb4:	4a19      	ldr	r2, [pc, #100]	; (8010d1c <readCanToStructs+0x8dc>)
 8010cb6:	f240 4112 	movw	r1, #1042	; 0x412
 8010cba:	fb01 f303 	mul.w	r3, r1, r3
 8010cbe:	4413      	add	r3, r2
 8010cc0:	f203 4307 	addw	r3, r3, #1031	; 0x407
 8010cc4:	781b      	ldrb	r3, [r3, #0]
 8010cc6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010cca:	429a      	cmp	r2, r3
 8010ccc:	d015      	beq.n	8010cfa <readCanToStructs+0x8ba>
					printf("SEND_VITAL_MSG_1 Seq no MisMatch\n");
 8010cce:	481b      	ldr	r0, [pc, #108]	; (8010d3c <readCanToStructs+0x8fc>)
 8010cd0:	f011 ffb0 	bl	8022c34 <puts>
					memset(uc_pp_charPtr,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8010cd4:	2246      	movs	r2, #70	; 0x46
 8010cd6:	2100      	movs	r1, #0
 8010cd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010cda:	f011 fe27 	bl	802292c <memset>
					canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo = 0;
 8010cde:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010ce2:	4a0e      	ldr	r2, [pc, #56]	; (8010d1c <readCanToStructs+0x8dc>)
 8010ce4:	f240 4112 	movw	r1, #1042	; 0x412
 8010ce8:	fb01 f303 	mul.w	r3, r1, r3
 8010cec:	4413      	add	r3, r2
 8010cee:	f203 4307 	addw	r3, r3, #1031	; 0x407
 8010cf2:	2200      	movs	r2, #0
 8010cf4:	701a      	strb	r2, [r3, #0]
					break;
 8010cf6:	f000 bcd7 	b.w	80116a8 <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 8010cfa:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010cfe:	4613      	mov	r3, r2
 8010d00:	00db      	lsls	r3, r3, #3
 8010d02:	1a9b      	subs	r3, r3, r2
 8010d04:	461a      	mov	r2, r3
 8010d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d08:	4413      	add	r3, r2
 8010d0a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010d0c:	2301      	movs	r3, #1
 8010d0e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010d12:	e02c      	b.n	8010d6e <readCanToStructs+0x92e>
 8010d14:	20001878 	.word	0x20001878
 8010d18:	20005b08 	.word	0x20005b08
 8010d1c:	200052e4 	.word	0x200052e4
 8010d20:	08027058 	.word	0x08027058
 8010d24:	20001770 	.word	0x20001770
 8010d28:	20000645 	.word	0x20000645
 8010d2c:	0802707c 	.word	0x0802707c
 8010d30:	20000e4c 	.word	0x20000e4c
 8010d34:	20000108 	.word	0x20000108
 8010d38:	20001920 	.word	0x20001920
 8010d3c:	0802708c 	.word	0x0802708c
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8010d40:	4bb9      	ldr	r3, [pc, #740]	; (8011028 <readCanToStructs+0xbe8>)
 8010d42:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010d46:	885b      	ldrh	r3, [r3, #2]
 8010d48:	461a      	mov	r2, r3
 8010d4a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010d4e:	49b6      	ldr	r1, [pc, #728]	; (8011028 <readCanToStructs+0xbe8>)
 8010d50:	0112      	lsls	r2, r2, #4
 8010d52:	440a      	add	r2, r1
 8010d54:	4413      	add	r3, r2
 8010d56:	3304      	adds	r3, #4
 8010d58:	781a      	ldrb	r2, [r3, #0]
 8010d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d5c:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8010d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d60:	3301      	adds	r3, #1
 8010d62:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010d64:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010d68:	3301      	adds	r3, #1
 8010d6a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010d6e:	4bae      	ldr	r3, [pc, #696]	; (8011028 <readCanToStructs+0xbe8>)
 8010d70:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010d74:	885b      	ldrh	r3, [r3, #2]
 8010d76:	4aac      	ldr	r2, [pc, #688]	; (8011028 <readCanToStructs+0xbe8>)
 8010d78:	011b      	lsls	r3, r3, #4
 8010d7a:	4413      	add	r3, r2
 8010d7c:	330c      	adds	r3, #12
 8010d7e:	781b      	ldrb	r3, [r3, #0]
 8010d80:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8010d84:	429a      	cmp	r2, r3
 8010d86:	d3db      	bcc.n	8010d40 <readCanToStructs+0x900>
				if((((canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo) * 7)
 8010d88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010d8c:	4aa7      	ldr	r2, [pc, #668]	; (801102c <readCanToStructs+0xbec>)
 8010d8e:	f240 4112 	movw	r1, #1042	; 0x412
 8010d92:	fb01 f303 	mul.w	r3, r1, r3
 8010d96:	4413      	add	r3, r2
 8010d98:	f203 4307 	addw	r3, r3, #1031	; 0x407
 8010d9c:	781b      	ldrb	r3, [r3, #0]
 8010d9e:	461a      	mov	r2, r3
 8010da0:	4613      	mov	r3, r2
 8010da2:	00db      	lsls	r3, r3, #3
 8010da4:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SEND_VITAL_MSG_2_OTH_t))
 8010da6:	4ba0      	ldr	r3, [pc, #640]	; (8011028 <readCanToStructs+0xbe8>)
 8010da8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010dac:	885b      	ldrh	r3, [r3, #2]
 8010dae:	499e      	ldr	r1, [pc, #632]	; (8011028 <readCanToStructs+0xbe8>)
 8010db0:	011b      	lsls	r3, r3, #4
 8010db2:	440b      	add	r3, r1
 8010db4:	330c      	adds	r3, #12
 8010db6:	781b      	ldrb	r3, [r3, #0]
 8010db8:	3b01      	subs	r3, #1
 8010dba:	4413      	add	r3, r2
				if((((canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo) * 7)
 8010dbc:	2b45      	cmp	r3, #69	; 0x45
 8010dbe:	d93d      	bls.n	8010e3c <readCanToStructs+0x9fc>
					if(Debug_flag == 1)
 8010dc0:	4b9b      	ldr	r3, [pc, #620]	; (8011030 <readCanToStructs+0xbf0>)
 8010dc2:	781b      	ldrb	r3, [r3, #0]
 8010dc4:	2b01      	cmp	r3, #1
 8010dc6:	d102      	bne.n	8010dce <readCanToStructs+0x98e>
						printf("RCV V-Message-1\n");
 8010dc8:	489a      	ldr	r0, [pc, #616]	; (8011034 <readCanToStructs+0xbf4>)
 8010dca:	f011 ff33 	bl	8022c34 <puts>
					memset(&Rx_VITAL_MSG_CAN_st,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8010dce:	2246      	movs	r2, #70	; 0x46
 8010dd0:	2100      	movs	r1, #0
 8010dd2:	4899      	ldr	r0, [pc, #612]	; (8011038 <readCanToStructs+0xbf8>)
 8010dd4:	f011 fdaa 	bl	802292c <memset>
					memcpy(&Rx_VITAL_MSG_CAN_st,&Temp_Rx_VITAL_MSG_CAN_st,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8010dd8:	4a97      	ldr	r2, [pc, #604]	; (8011038 <readCanToStructs+0xbf8>)
 8010dda:	4b98      	ldr	r3, [pc, #608]	; (801103c <readCanToStructs+0xbfc>)
 8010ddc:	4610      	mov	r0, r2
 8010dde:	4619      	mov	r1, r3
 8010de0:	2346      	movs	r3, #70	; 0x46
 8010de2:	461a      	mov	r2, r3
 8010de4:	f011 fd7a 	bl	80228dc <memcpy>
					Is_CAN_Exchange_happening = YES;
 8010de8:	4b95      	ldr	r3, [pc, #596]	; (8011040 <readCanToStructs+0xc00>)
 8010dea:	2201      	movs	r2, #1
 8010dec:	701a      	strb	r2, [r3, #0]
					if(Tx_Ei_self_sharing_st[Rx_VITAL_MSG_CAN_st.Source_Peer_Index].IS_PRIMARY != RECEIVED)
 8010dee:	4b92      	ldr	r3, [pc, #584]	; (8011038 <readCanToStructs+0xbf8>)
 8010df0:	881b      	ldrh	r3, [r3, #0]
 8010df2:	4619      	mov	r1, r3
 8010df4:	4a93      	ldr	r2, [pc, #588]	; (8011044 <readCanToStructs+0xc04>)
 8010df6:	460b      	mov	r3, r1
 8010df8:	005b      	lsls	r3, r3, #1
 8010dfa:	440b      	add	r3, r1
 8010dfc:	00db      	lsls	r3, r3, #3
 8010dfe:	4413      	add	r3, r2
 8010e00:	3304      	adds	r3, #4
 8010e02:	781b      	ldrb	r3, [r3, #0]
 8010e04:	2b01      	cmp	r3, #1
 8010e06:	d00b      	beq.n	8010e20 <readCanToStructs+0x9e0>
						Vital_Msg_extr_from_CAN(Rx_VITAL_MSG_CAN_st.VITAL_MESSAGE,Rx_VITAL_MSG_CAN_st.Packet_Length,Rx_VITAL_MSG_CAN_st.Source_Peer_Index,Rx_VITAL_MSG_CAN_st.Dest_Peer_Index);
 8010e08:	4b8b      	ldr	r3, [pc, #556]	; (8011038 <readCanToStructs+0xbf8>)
 8010e0a:	889b      	ldrh	r3, [r3, #4]
 8010e0c:	b2d9      	uxtb	r1, r3
 8010e0e:	4b8a      	ldr	r3, [pc, #552]	; (8011038 <readCanToStructs+0xbf8>)
 8010e10:	881b      	ldrh	r3, [r3, #0]
 8010e12:	b2da      	uxtb	r2, r3
 8010e14:	4b88      	ldr	r3, [pc, #544]	; (8011038 <readCanToStructs+0xbf8>)
 8010e16:	885b      	ldrh	r3, [r3, #2]
 8010e18:	b2db      	uxtb	r3, r3
 8010e1a:	488b      	ldr	r0, [pc, #556]	; (8011048 <readCanToStructs+0xc08>)
 8010e1c:	f7f3 fc7e 	bl	800471c <Vital_Msg_extr_from_CAN>
					canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo = 0;
 8010e20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010e24:	4a81      	ldr	r2, [pc, #516]	; (801102c <readCanToStructs+0xbec>)
 8010e26:	f240 4112 	movw	r1, #1042	; 0x412
 8010e2a:	fb01 f303 	mul.w	r3, r1, r3
 8010e2e:	4413      	add	r3, r2
 8010e30:	f203 4307 	addw	r3, r3, #1031	; 0x407
 8010e34:	2200      	movs	r2, #0
 8010e36:	701a      	strb	r2, [r3, #0]
				break;
 8010e38:	f000 bc36 	b.w	80116a8 <readCanToStructs+0x1268>
					canStatus[uc_index][SEND_VITAL_MSG_1].invalid = 1;
 8010e3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010e40:	4a7a      	ldr	r2, [pc, #488]	; (801102c <readCanToStructs+0xbec>)
 8010e42:	f240 4112 	movw	r1, #1042	; 0x412
 8010e46:	fb01 f303 	mul.w	r3, r1, r3
 8010e4a:	4413      	add	r3, r2
 8010e4c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010e50:	2201      	movs	r2, #1
 8010e52:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo++;
 8010e54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010e58:	4974      	ldr	r1, [pc, #464]	; (801102c <readCanToStructs+0xbec>)
 8010e5a:	f240 4212 	movw	r2, #1042	; 0x412
 8010e5e:	fb03 f202 	mul.w	r2, r3, r2
 8010e62:	440a      	add	r2, r1
 8010e64:	f202 4207 	addw	r2, r2, #1031	; 0x407
 8010e68:	7812      	ldrb	r2, [r2, #0]
 8010e6a:	3201      	adds	r2, #1
 8010e6c:	b2d0      	uxtb	r0, r2
 8010e6e:	4a6f      	ldr	r2, [pc, #444]	; (801102c <readCanToStructs+0xbec>)
 8010e70:	f240 4112 	movw	r1, #1042	; 0x412
 8010e74:	fb01 f303 	mul.w	r3, r1, r3
 8010e78:	4413      	add	r3, r2
 8010e7a:	f203 4307 	addw	r3, r3, #1031	; 0x407
 8010e7e:	4602      	mov	r2, r0
 8010e80:	701a      	strb	r2, [r3, #0]
				break;
 8010e82:	f000 bc11 	b.w	80116a8 <readCanToStructs+0x1268>
				uc_pp_charPtr = (uint8_t *)&Temp_Rx_VITAL_MSG_CAN_st;
 8010e86:	4b6d      	ldr	r3, [pc, #436]	; (801103c <readCanToStructs+0xbfc>)
 8010e88:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8010e8a:	4b67      	ldr	r3, [pc, #412]	; (8011028 <readCanToStructs+0xbe8>)
 8010e8c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010e90:	885b      	ldrh	r3, [r3, #2]
 8010e92:	4a65      	ldr	r2, [pc, #404]	; (8011028 <readCanToStructs+0xbe8>)
 8010e94:	011b      	lsls	r3, r3, #4
 8010e96:	4413      	add	r3, r2
 8010e98:	3304      	adds	r3, #4
 8010e9a:	781b      	ldrb	r3, [r3, #0]
 8010e9c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8010ea0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d110      	bne.n	8010eca <readCanToStructs+0xa8a>
					memset(uc_pp_charPtr,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8010ea8:	2246      	movs	r2, #70	; 0x46
 8010eaa:	2100      	movs	r1, #0
 8010eac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010eae:	f011 fd3d 	bl	802292c <memset>
					canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo = 0;
 8010eb2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010eb6:	4a5d      	ldr	r2, [pc, #372]	; (801102c <readCanToStructs+0xbec>)
 8010eb8:	f240 4112 	movw	r1, #1042	; 0x412
 8010ebc:	fb01 f303 	mul.w	r3, r1, r3
 8010ec0:	4413      	add	r3, r2
 8010ec2:	f203 4309 	addw	r3, r3, #1033	; 0x409
 8010ec6:	2200      	movs	r2, #0
 8010ec8:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo)
 8010eca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010ece:	4a57      	ldr	r2, [pc, #348]	; (801102c <readCanToStructs+0xbec>)
 8010ed0:	f240 4112 	movw	r1, #1042	; 0x412
 8010ed4:	fb01 f303 	mul.w	r3, r1, r3
 8010ed8:	4413      	add	r3, r2
 8010eda:	f203 4309 	addw	r3, r3, #1033	; 0x409
 8010ede:	781b      	ldrb	r3, [r3, #0]
 8010ee0:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010ee4:	429a      	cmp	r2, r3
 8010ee6:	d014      	beq.n	8010f12 <readCanToStructs+0xad2>
					printf("SEND_VITAL_MSG_2 Seq no MisMatch\n");
 8010ee8:	4858      	ldr	r0, [pc, #352]	; (801104c <readCanToStructs+0xc0c>)
 8010eea:	f011 fea3 	bl	8022c34 <puts>
					memset(uc_pp_charPtr,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8010eee:	2246      	movs	r2, #70	; 0x46
 8010ef0:	2100      	movs	r1, #0
 8010ef2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010ef4:	f011 fd1a 	bl	802292c <memset>
					canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo = 0;
 8010ef8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010efc:	4a4b      	ldr	r2, [pc, #300]	; (801102c <readCanToStructs+0xbec>)
 8010efe:	f240 4112 	movw	r1, #1042	; 0x412
 8010f02:	fb01 f303 	mul.w	r3, r1, r3
 8010f06:	4413      	add	r3, r2
 8010f08:	f203 4309 	addw	r3, r3, #1033	; 0x409
 8010f0c:	2200      	movs	r2, #0
 8010f0e:	701a      	strb	r2, [r3, #0]
					break;
 8010f10:	e3ca      	b.n	80116a8 <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 8010f12:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010f16:	4613      	mov	r3, r2
 8010f18:	00db      	lsls	r3, r3, #3
 8010f1a:	1a9b      	subs	r3, r3, r2
 8010f1c:	461a      	mov	r2, r3
 8010f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f20:	4413      	add	r3, r2
 8010f22:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010f24:	2301      	movs	r3, #1
 8010f26:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010f2a:	e016      	b.n	8010f5a <readCanToStructs+0xb1a>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8010f2c:	4b3e      	ldr	r3, [pc, #248]	; (8011028 <readCanToStructs+0xbe8>)
 8010f2e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010f32:	885b      	ldrh	r3, [r3, #2]
 8010f34:	461a      	mov	r2, r3
 8010f36:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010f3a:	493b      	ldr	r1, [pc, #236]	; (8011028 <readCanToStructs+0xbe8>)
 8010f3c:	0112      	lsls	r2, r2, #4
 8010f3e:	440a      	add	r2, r1
 8010f40:	4413      	add	r3, r2
 8010f42:	3304      	adds	r3, #4
 8010f44:	781a      	ldrb	r2, [r3, #0]
 8010f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f48:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8010f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f4c:	3301      	adds	r3, #1
 8010f4e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010f50:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010f54:	3301      	adds	r3, #1
 8010f56:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010f5a:	4b33      	ldr	r3, [pc, #204]	; (8011028 <readCanToStructs+0xbe8>)
 8010f5c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010f60:	885b      	ldrh	r3, [r3, #2]
 8010f62:	4a31      	ldr	r2, [pc, #196]	; (8011028 <readCanToStructs+0xbe8>)
 8010f64:	011b      	lsls	r3, r3, #4
 8010f66:	4413      	add	r3, r2
 8010f68:	330c      	adds	r3, #12
 8010f6a:	781b      	ldrb	r3, [r3, #0]
 8010f6c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8010f70:	429a      	cmp	r2, r3
 8010f72:	d3db      	bcc.n	8010f2c <readCanToStructs+0xaec>
				if((((canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo) * 7)
 8010f74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010f78:	4a2c      	ldr	r2, [pc, #176]	; (801102c <readCanToStructs+0xbec>)
 8010f7a:	f240 4112 	movw	r1, #1042	; 0x412
 8010f7e:	fb01 f303 	mul.w	r3, r1, r3
 8010f82:	4413      	add	r3, r2
 8010f84:	f203 4309 	addw	r3, r3, #1033	; 0x409
 8010f88:	781b      	ldrb	r3, [r3, #0]
 8010f8a:	461a      	mov	r2, r3
 8010f8c:	4613      	mov	r3, r2
 8010f8e:	00db      	lsls	r3, r3, #3
 8010f90:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SEND_VITAL_MSG_2_OTH_t))
 8010f92:	4b25      	ldr	r3, [pc, #148]	; (8011028 <readCanToStructs+0xbe8>)
 8010f94:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010f98:	885b      	ldrh	r3, [r3, #2]
 8010f9a:	4923      	ldr	r1, [pc, #140]	; (8011028 <readCanToStructs+0xbe8>)
 8010f9c:	011b      	lsls	r3, r3, #4
 8010f9e:	440b      	add	r3, r1
 8010fa0:	330c      	adds	r3, #12
 8010fa2:	781b      	ldrb	r3, [r3, #0]
 8010fa4:	3b01      	subs	r3, #1
 8010fa6:	4413      	add	r3, r2
				if((((canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo) * 7)
 8010fa8:	2b45      	cmp	r3, #69	; 0x45
 8010faa:	d953      	bls.n	8011054 <readCanToStructs+0xc14>
					if(Debug_flag == 1)
 8010fac:	4b20      	ldr	r3, [pc, #128]	; (8011030 <readCanToStructs+0xbf0>)
 8010fae:	781b      	ldrb	r3, [r3, #0]
 8010fb0:	2b01      	cmp	r3, #1
 8010fb2:	d102      	bne.n	8010fba <readCanToStructs+0xb7a>
						printf("RCV V-Message-2\n");
 8010fb4:	4826      	ldr	r0, [pc, #152]	; (8011050 <readCanToStructs+0xc10>)
 8010fb6:	f011 fe3d 	bl	8022c34 <puts>
					memset(&Rx_VITAL_MSG_CAN_st,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8010fba:	2246      	movs	r2, #70	; 0x46
 8010fbc:	2100      	movs	r1, #0
 8010fbe:	481e      	ldr	r0, [pc, #120]	; (8011038 <readCanToStructs+0xbf8>)
 8010fc0:	f011 fcb4 	bl	802292c <memset>
					memcpy(&Rx_VITAL_MSG_CAN_st,&Temp_Rx_VITAL_MSG_CAN_st,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8010fc4:	4a1c      	ldr	r2, [pc, #112]	; (8011038 <readCanToStructs+0xbf8>)
 8010fc6:	4b1d      	ldr	r3, [pc, #116]	; (801103c <readCanToStructs+0xbfc>)
 8010fc8:	4610      	mov	r0, r2
 8010fca:	4619      	mov	r1, r3
 8010fcc:	2346      	movs	r3, #70	; 0x46
 8010fce:	461a      	mov	r2, r3
 8010fd0:	f011 fc84 	bl	80228dc <memcpy>
					Is_CAN_Exchange_happening = YES;
 8010fd4:	4b1a      	ldr	r3, [pc, #104]	; (8011040 <readCanToStructs+0xc00>)
 8010fd6:	2201      	movs	r2, #1
 8010fd8:	701a      	strb	r2, [r3, #0]
					if(Tx_Ei_self_sharing_st[Rx_VITAL_MSG_CAN_st.Source_Peer_Index].EI_Receiving_Status != 1)
 8010fda:	4b17      	ldr	r3, [pc, #92]	; (8011038 <readCanToStructs+0xbf8>)
 8010fdc:	881b      	ldrh	r3, [r3, #0]
 8010fde:	4619      	mov	r1, r3
 8010fe0:	4a18      	ldr	r2, [pc, #96]	; (8011044 <readCanToStructs+0xc04>)
 8010fe2:	460b      	mov	r3, r1
 8010fe4:	005b      	lsls	r3, r3, #1
 8010fe6:	440b      	add	r3, r1
 8010fe8:	00db      	lsls	r3, r3, #3
 8010fea:	4413      	add	r3, r2
 8010fec:	3303      	adds	r3, #3
 8010fee:	781b      	ldrb	r3, [r3, #0]
 8010ff0:	2b01      	cmp	r3, #1
 8010ff2:	d00b      	beq.n	801100c <readCanToStructs+0xbcc>
						Vital_Msg_extr_from_CAN(Rx_VITAL_MSG_CAN_st.VITAL_MESSAGE,Rx_VITAL_MSG_CAN_st.Packet_Length,Rx_VITAL_MSG_CAN_st.Source_Peer_Index,Rx_VITAL_MSG_CAN_st.Dest_Peer_Index);
 8010ff4:	4b10      	ldr	r3, [pc, #64]	; (8011038 <readCanToStructs+0xbf8>)
 8010ff6:	889b      	ldrh	r3, [r3, #4]
 8010ff8:	b2d9      	uxtb	r1, r3
 8010ffa:	4b0f      	ldr	r3, [pc, #60]	; (8011038 <readCanToStructs+0xbf8>)
 8010ffc:	881b      	ldrh	r3, [r3, #0]
 8010ffe:	b2da      	uxtb	r2, r3
 8011000:	4b0d      	ldr	r3, [pc, #52]	; (8011038 <readCanToStructs+0xbf8>)
 8011002:	885b      	ldrh	r3, [r3, #2]
 8011004:	b2db      	uxtb	r3, r3
 8011006:	4810      	ldr	r0, [pc, #64]	; (8011048 <readCanToStructs+0xc08>)
 8011008:	f7f3 fb88 	bl	800471c <Vital_Msg_extr_from_CAN>
					canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo = 0;
 801100c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011010:	4a06      	ldr	r2, [pc, #24]	; (801102c <readCanToStructs+0xbec>)
 8011012:	f240 4112 	movw	r1, #1042	; 0x412
 8011016:	fb01 f303 	mul.w	r3, r1, r3
 801101a:	4413      	add	r3, r2
 801101c:	f203 4309 	addw	r3, r3, #1033	; 0x409
 8011020:	2200      	movs	r2, #0
 8011022:	701a      	strb	r2, [r3, #0]
				break;
 8011024:	e340      	b.n	80116a8 <readCanToStructs+0x1268>
 8011026:	bf00      	nop
 8011028:	20005b08 	.word	0x20005b08
 801102c:	200052e4 	.word	0x200052e4
 8011030:	20000645 	.word	0x20000645
 8011034:	080270b0 	.word	0x080270b0
 8011038:	200018d8 	.word	0x200018d8
 801103c:	20001920 	.word	0x20001920
 8011040:	20000108 	.word	0x20000108
 8011044:	20001680 	.word	0x20001680
 8011048:	200018de 	.word	0x200018de
 801104c:	080270c0 	.word	0x080270c0
 8011050:	080270e4 	.word	0x080270e4
					canStatus[uc_index][SEND_VITAL_MSG_2].invalid = 1;
 8011054:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011058:	4a9f      	ldr	r2, [pc, #636]	; (80112d8 <readCanToStructs+0xe98>)
 801105a:	f240 4112 	movw	r1, #1042	; 0x412
 801105e:	fb01 f303 	mul.w	r3, r1, r3
 8011062:	4413      	add	r3, r2
 8011064:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8011068:	2201      	movs	r2, #1
 801106a:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo++;
 801106c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011070:	4999      	ldr	r1, [pc, #612]	; (80112d8 <readCanToStructs+0xe98>)
 8011072:	f240 4212 	movw	r2, #1042	; 0x412
 8011076:	fb03 f202 	mul.w	r2, r3, r2
 801107a:	440a      	add	r2, r1
 801107c:	f202 4209 	addw	r2, r2, #1033	; 0x409
 8011080:	7812      	ldrb	r2, [r2, #0]
 8011082:	3201      	adds	r2, #1
 8011084:	b2d0      	uxtb	r0, r2
 8011086:	4a94      	ldr	r2, [pc, #592]	; (80112d8 <readCanToStructs+0xe98>)
 8011088:	f240 4112 	movw	r1, #1042	; 0x412
 801108c:	fb01 f303 	mul.w	r3, r1, r3
 8011090:	4413      	add	r3, r2
 8011092:	f203 4309 	addw	r3, r3, #1033	; 0x409
 8011096:	4602      	mov	r2, r0
 8011098:	701a      	strb	r2, [r3, #0]
				break;
 801109a:	e305      	b.n	80116a8 <readCanToStructs+0x1268>
				uc_pp_charPtr = (uint8_t *)&Hitachi_fault_injection_st;
 801109c:	4b8f      	ldr	r3, [pc, #572]	; (80112dc <readCanToStructs+0xe9c>)
 801109e:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80110a0:	4b8f      	ldr	r3, [pc, #572]	; (80112e0 <readCanToStructs+0xea0>)
 80110a2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80110a6:	885b      	ldrh	r3, [r3, #2]
 80110a8:	4a8d      	ldr	r2, [pc, #564]	; (80112e0 <readCanToStructs+0xea0>)
 80110aa:	011b      	lsls	r3, r3, #4
 80110ac:	4413      	add	r3, r2
 80110ae:	3304      	adds	r3, #4
 80110b0:	781b      	ldrb	r3, [r3, #0]
 80110b2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 80110b6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d110      	bne.n	80110e0 <readCanToStructs+0xca0>
					memset(uc_pp_charPtr,0,sizeof(HITACHI_FAULT_INJECTION_t));
 80110be:	2208      	movs	r2, #8
 80110c0:	2100      	movs	r1, #0
 80110c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80110c4:	f011 fc32 	bl	802292c <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 80110c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80110cc:	4a82      	ldr	r2, [pc, #520]	; (80112d8 <readCanToStructs+0xe98>)
 80110ce:	f240 4112 	movw	r1, #1042	; 0x412
 80110d2:	fb01 f303 	mul.w	r3, r1, r3
 80110d6:	4413      	add	r3, r2
 80110d8:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 80110dc:	2200      	movs	r2, #0
 80110de:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo)
 80110e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80110e4:	4a7c      	ldr	r2, [pc, #496]	; (80112d8 <readCanToStructs+0xe98>)
 80110e6:	f240 4112 	movw	r1, #1042	; 0x412
 80110ea:	fb01 f303 	mul.w	r3, r1, r3
 80110ee:	4413      	add	r3, r2
 80110f0:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 80110f4:	781b      	ldrb	r3, [r3, #0]
 80110f6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80110fa:	429a      	cmp	r2, r3
 80110fc:	d014      	beq.n	8011128 <readCanToStructs+0xce8>
					printf("FAULT_INJECTION Seq no MisMatch\n");
 80110fe:	4879      	ldr	r0, [pc, #484]	; (80112e4 <readCanToStructs+0xea4>)
 8011100:	f011 fd98 	bl	8022c34 <puts>
					memset(uc_pp_charPtr,0,sizeof(HITACHI_FAULT_INJECTION_t));
 8011104:	2208      	movs	r2, #8
 8011106:	2100      	movs	r1, #0
 8011108:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801110a:	f011 fc0f 	bl	802292c <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 801110e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011112:	4a71      	ldr	r2, [pc, #452]	; (80112d8 <readCanToStructs+0xe98>)
 8011114:	f240 4112 	movw	r1, #1042	; 0x412
 8011118:	fb01 f303 	mul.w	r3, r1, r3
 801111c:	4413      	add	r3, r2
 801111e:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8011122:	2200      	movs	r2, #0
 8011124:	701a      	strb	r2, [r3, #0]
					break;
 8011126:	e2bf      	b.n	80116a8 <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 8011128:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801112c:	4613      	mov	r3, r2
 801112e:	00db      	lsls	r3, r3, #3
 8011130:	1a9b      	subs	r3, r3, r2
 8011132:	461a      	mov	r2, r3
 8011134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011136:	4413      	add	r3, r2
 8011138:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801113a:	2301      	movs	r3, #1
 801113c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011140:	e016      	b.n	8011170 <readCanToStructs+0xd30>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8011142:	4b67      	ldr	r3, [pc, #412]	; (80112e0 <readCanToStructs+0xea0>)
 8011144:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011148:	885b      	ldrh	r3, [r3, #2]
 801114a:	461a      	mov	r2, r3
 801114c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011150:	4963      	ldr	r1, [pc, #396]	; (80112e0 <readCanToStructs+0xea0>)
 8011152:	0112      	lsls	r2, r2, #4
 8011154:	440a      	add	r2, r1
 8011156:	4413      	add	r3, r2
 8011158:	3304      	adds	r3, #4
 801115a:	781a      	ldrb	r2, [r3, #0]
 801115c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801115e:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8011160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011162:	3301      	adds	r3, #1
 8011164:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011166:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801116a:	3301      	adds	r3, #1
 801116c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011170:	4b5b      	ldr	r3, [pc, #364]	; (80112e0 <readCanToStructs+0xea0>)
 8011172:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011176:	885b      	ldrh	r3, [r3, #2]
 8011178:	4a59      	ldr	r2, [pc, #356]	; (80112e0 <readCanToStructs+0xea0>)
 801117a:	011b      	lsls	r3, r3, #4
 801117c:	4413      	add	r3, r2
 801117e:	330c      	adds	r3, #12
 8011180:	781b      	ldrb	r3, [r3, #0]
 8011182:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011186:	429a      	cmp	r2, r3
 8011188:	d3db      	bcc.n	8011142 <readCanToStructs+0xd02>
				if((((canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(HITACHI_FAULT_INJECTION_t))
 801118a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801118e:	4a52      	ldr	r2, [pc, #328]	; (80112d8 <readCanToStructs+0xe98>)
 8011190:	f240 4112 	movw	r1, #1042	; 0x412
 8011194:	fb01 f303 	mul.w	r3, r1, r3
 8011198:	4413      	add	r3, r2
 801119a:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 801119e:	781b      	ldrb	r3, [r3, #0]
 80111a0:	461a      	mov	r2, r3
 80111a2:	4613      	mov	r3, r2
 80111a4:	00db      	lsls	r3, r3, #3
 80111a6:	1a9a      	subs	r2, r3, r2
 80111a8:	4b4d      	ldr	r3, [pc, #308]	; (80112e0 <readCanToStructs+0xea0>)
 80111aa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80111ae:	885b      	ldrh	r3, [r3, #2]
 80111b0:	494b      	ldr	r1, [pc, #300]	; (80112e0 <readCanToStructs+0xea0>)
 80111b2:	011b      	lsls	r3, r3, #4
 80111b4:	440b      	add	r3, r1
 80111b6:	330c      	adds	r3, #12
 80111b8:	781b      	ldrb	r3, [r3, #0]
 80111ba:	3b01      	subs	r3, #1
 80111bc:	4413      	add	r3, r2
 80111be:	2b07      	cmp	r3, #7
 80111c0:	d912      	bls.n	80111e8 <readCanToStructs+0xda8>
					printf("Received Fault Injection Data\n");
 80111c2:	4849      	ldr	r0, [pc, #292]	; (80112e8 <readCanToStructs+0xea8>)
 80111c4:	f011 fd36 	bl	8022c34 <puts>
					Is_CAN_Exchange_happening = YES;
 80111c8:	4b48      	ldr	r3, [pc, #288]	; (80112ec <readCanToStructs+0xeac>)
 80111ca:	2201      	movs	r2, #1
 80111cc:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 80111ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80111d2:	4a41      	ldr	r2, [pc, #260]	; (80112d8 <readCanToStructs+0xe98>)
 80111d4:	f240 4112 	movw	r1, #1042	; 0x412
 80111d8:	fb01 f303 	mul.w	r3, r1, r3
 80111dc:	4413      	add	r3, r2
 80111de:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 80111e2:	2200      	movs	r2, #0
 80111e4:	701a      	strb	r2, [r3, #0]
				break;
 80111e6:	e25f      	b.n	80116a8 <readCanToStructs+0x1268>
					canStatus[uc_index][CAN_FAULT_INJECTION].invalid = 1;
 80111e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80111ec:	4a3a      	ldr	r2, [pc, #232]	; (80112d8 <readCanToStructs+0xe98>)
 80111ee:	f240 4112 	movw	r1, #1042	; 0x412
 80111f2:	fb01 f303 	mul.w	r3, r1, r3
 80111f6:	4413      	add	r3, r2
 80111f8:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 80111fc:	2201      	movs	r2, #1
 80111fe:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo++;
 8011200:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011204:	4934      	ldr	r1, [pc, #208]	; (80112d8 <readCanToStructs+0xe98>)
 8011206:	f240 4212 	movw	r2, #1042	; 0x412
 801120a:	fb03 f202 	mul.w	r2, r3, r2
 801120e:	440a      	add	r2, r1
 8011210:	f202 420b 	addw	r2, r2, #1035	; 0x40b
 8011214:	7812      	ldrb	r2, [r2, #0]
 8011216:	3201      	adds	r2, #1
 8011218:	b2d0      	uxtb	r0, r2
 801121a:	4a2f      	ldr	r2, [pc, #188]	; (80112d8 <readCanToStructs+0xe98>)
 801121c:	f240 4112 	movw	r1, #1042	; 0x412
 8011220:	fb01 f303 	mul.w	r3, r1, r3
 8011224:	4413      	add	r3, r2
 8011226:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 801122a:	4602      	mov	r2, r0
 801122c:	701a      	strb	r2, [r3, #0]
				break;
 801122e:	e23b      	b.n	80116a8 <readCanToStructs+0x1268>
				uc_pp_charPtr = (uint8_t *)&Rx_Temp_Main_Relays_st;
 8011230:	4b2f      	ldr	r3, [pc, #188]	; (80112f0 <readCanToStructs+0xeb0>)
 8011232:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8011234:	4b2a      	ldr	r3, [pc, #168]	; (80112e0 <readCanToStructs+0xea0>)
 8011236:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801123a:	885b      	ldrh	r3, [r3, #2]
 801123c:	4a28      	ldr	r2, [pc, #160]	; (80112e0 <readCanToStructs+0xea0>)
 801123e:	011b      	lsls	r3, r3, #4
 8011240:	4413      	add	r3, r2
 8011242:	3304      	adds	r3, #4
 8011244:	781b      	ldrb	r3, [r3, #0]
 8011246:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 801124a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801124e:	2b00      	cmp	r3, #0
 8011250:	d110      	bne.n	8011274 <readCanToStructs+0xe34>
					memset(uc_pp_charPtr,0,sizeof(RELAYS_t));
 8011252:	2214      	movs	r2, #20
 8011254:	2100      	movs	r1, #0
 8011256:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011258:	f011 fb68 	bl	802292c <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 801125c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011260:	4a1d      	ldr	r2, [pc, #116]	; (80112d8 <readCanToStructs+0xe98>)
 8011262:	f240 4112 	movw	r1, #1042	; 0x412
 8011266:	fb01 f303 	mul.w	r3, r1, r3
 801126a:	4413      	add	r3, r2
 801126c:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8011270:	2200      	movs	r2, #0
 8011272:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo)
 8011274:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011278:	4a17      	ldr	r2, [pc, #92]	; (80112d8 <readCanToStructs+0xe98>)
 801127a:	f240 4112 	movw	r1, #1042	; 0x412
 801127e:	fb01 f303 	mul.w	r3, r1, r3
 8011282:	4413      	add	r3, r2
 8011284:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8011288:	781b      	ldrb	r3, [r3, #0]
 801128a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801128e:	429a      	cmp	r2, r3
 8011290:	d014      	beq.n	80112bc <readCanToStructs+0xe7c>
					printf("EIPC1RELAYS Seq no MisMatch\n");
 8011292:	4818      	ldr	r0, [pc, #96]	; (80112f4 <readCanToStructs+0xeb4>)
 8011294:	f011 fcce 	bl	8022c34 <puts>
					memset(uc_pp_charPtr,0,sizeof(RELAYS_t));
 8011298:	2214      	movs	r2, #20
 801129a:	2100      	movs	r1, #0
 801129c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801129e:	f011 fb45 	bl	802292c <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 80112a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80112a6:	4a0c      	ldr	r2, [pc, #48]	; (80112d8 <readCanToStructs+0xe98>)
 80112a8:	f240 4112 	movw	r1, #1042	; 0x412
 80112ac:	fb01 f303 	mul.w	r3, r1, r3
 80112b0:	4413      	add	r3, r2
 80112b2:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80112b6:	2200      	movs	r2, #0
 80112b8:	701a      	strb	r2, [r3, #0]
					break;
 80112ba:	e1f5      	b.n	80116a8 <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 80112bc:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80112c0:	4613      	mov	r3, r2
 80112c2:	00db      	lsls	r3, r3, #3
 80112c4:	1a9b      	subs	r3, r3, r2
 80112c6:	461a      	mov	r2, r3
 80112c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112ca:	4413      	add	r3, r2
 80112cc:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80112ce:	2301      	movs	r3, #1
 80112d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80112d4:	e027      	b.n	8011326 <readCanToStructs+0xee6>
 80112d6:	bf00      	nop
 80112d8:	200052e4 	.word	0x200052e4
 80112dc:	20001968 	.word	0x20001968
 80112e0:	20005b08 	.word	0x20005b08
 80112e4:	080270f4 	.word	0x080270f4
 80112e8:	08027114 	.word	0x08027114
 80112ec:	20000108 	.word	0x20000108
 80112f0:	20002030 	.word	0x20002030
 80112f4:	08027134 	.word	0x08027134
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80112f8:	4bb9      	ldr	r3, [pc, #740]	; (80115e0 <readCanToStructs+0x11a0>)
 80112fa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80112fe:	885b      	ldrh	r3, [r3, #2]
 8011300:	461a      	mov	r2, r3
 8011302:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011306:	49b6      	ldr	r1, [pc, #728]	; (80115e0 <readCanToStructs+0x11a0>)
 8011308:	0112      	lsls	r2, r2, #4
 801130a:	440a      	add	r2, r1
 801130c:	4413      	add	r3, r2
 801130e:	3304      	adds	r3, #4
 8011310:	781a      	ldrb	r2, [r3, #0]
 8011312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011314:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8011316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011318:	3301      	adds	r3, #1
 801131a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801131c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011320:	3301      	adds	r3, #1
 8011322:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011326:	4bae      	ldr	r3, [pc, #696]	; (80115e0 <readCanToStructs+0x11a0>)
 8011328:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801132c:	885b      	ldrh	r3, [r3, #2]
 801132e:	4aac      	ldr	r2, [pc, #688]	; (80115e0 <readCanToStructs+0x11a0>)
 8011330:	011b      	lsls	r3, r3, #4
 8011332:	4413      	add	r3, r2
 8011334:	330c      	adds	r3, #12
 8011336:	781b      	ldrb	r3, [r3, #0]
 8011338:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801133c:	429a      	cmp	r2, r3
 801133e:	d3db      	bcc.n	80112f8 <readCanToStructs+0xeb8>
				if((((canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(RELAYS_t))
 8011340:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011344:	4aa7      	ldr	r2, [pc, #668]	; (80115e4 <readCanToStructs+0x11a4>)
 8011346:	f240 4112 	movw	r1, #1042	; 0x412
 801134a:	fb01 f303 	mul.w	r3, r1, r3
 801134e:	4413      	add	r3, r2
 8011350:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8011354:	781b      	ldrb	r3, [r3, #0]
 8011356:	461a      	mov	r2, r3
 8011358:	4613      	mov	r3, r2
 801135a:	00db      	lsls	r3, r3, #3
 801135c:	1a9a      	subs	r2, r3, r2
 801135e:	4ba0      	ldr	r3, [pc, #640]	; (80115e0 <readCanToStructs+0x11a0>)
 8011360:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011364:	885b      	ldrh	r3, [r3, #2]
 8011366:	499e      	ldr	r1, [pc, #632]	; (80115e0 <readCanToStructs+0x11a0>)
 8011368:	011b      	lsls	r3, r3, #4
 801136a:	440b      	add	r3, r1
 801136c:	330c      	adds	r3, #12
 801136e:	781b      	ldrb	r3, [r3, #0]
 8011370:	3b01      	subs	r3, #1
 8011372:	4413      	add	r3, r2
 8011374:	2b13      	cmp	r3, #19
 8011376:	d954      	bls.n	8011422 <readCanToStructs+0xfe2>
					uint16_t CRC16 = 0;
 8011378:	2300      	movs	r3, #0
 801137a:	853b      	strh	r3, [r7, #40]	; 0x28
					uint8_t Buff[40] = {0,};
 801137c:	2300      	movs	r3, #0
 801137e:	603b      	str	r3, [r7, #0]
 8011380:	1d3b      	adds	r3, r7, #4
 8011382:	2224      	movs	r2, #36	; 0x24
 8011384:	2100      	movs	r1, #0
 8011386:	4618      	mov	r0, r3
 8011388:	f011 fad0 	bl	802292c <memset>
					memcpy(Buff,&Rx_Temp_Main_Relays_st,sizeof(Rx_Temp_Main_Relays_st));
 801138c:	463b      	mov	r3, r7
 801138e:	2214      	movs	r2, #20
 8011390:	4995      	ldr	r1, [pc, #596]	; (80115e8 <readCanToStructs+0x11a8>)
 8011392:	4618      	mov	r0, r3
 8011394:	f011 faa2 	bl	80228dc <memcpy>
					CRC16 = GetCRC16(0,Buff, sizeof(Rx_Temp_Main_Relays_st));
 8011398:	463b      	mov	r3, r7
 801139a:	2214      	movs	r2, #20
 801139c:	4619      	mov	r1, r3
 801139e:	2000      	movs	r0, #0
 80113a0:	f001 ff10 	bl	80131c4 <GetCRC16>
 80113a4:	4603      	mov	r3, r0
 80113a6:	853b      	strh	r3, [r7, #40]	; 0x28
					if(CRC16 == 0)
 80113a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d10c      	bne.n	80113c8 <readCanToStructs+0xf88>
						canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 80113ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80113b2:	4a8c      	ldr	r2, [pc, #560]	; (80115e4 <readCanToStructs+0x11a4>)
 80113b4:	f240 4112 	movw	r1, #1042	; 0x412
 80113b8:	fb01 f303 	mul.w	r3, r1, r3
 80113bc:	4413      	add	r3, r2
 80113be:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80113c2:	2200      	movs	r2, #0
 80113c4:	701a      	strb	r2, [r3, #0]
				break;
 80113c6:	e16f      	b.n	80116a8 <readCanToStructs+0x1268>
						if(Debug_flag == 1)
 80113c8:	4b88      	ldr	r3, [pc, #544]	; (80115ec <readCanToStructs+0x11ac>)
 80113ca:	781b      	ldrb	r3, [r3, #0]
 80113cc:	2b01      	cmp	r3, #1
 80113ce:	d10a      	bne.n	80113e6 <readCanToStructs+0xfa6>
							printf("Rcv Relays1-O:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Rx_Temp_Main_Relays_st.Peer_Index]);
 80113d0:	4b85      	ldr	r3, [pc, #532]	; (80115e8 <readCanToStructs+0x11a8>)
 80113d2:	781b      	ldrb	r3, [r3, #0]
 80113d4:	4a86      	ldr	r2, [pc, #536]	; (80115f0 <readCanToStructs+0x11b0>)
 80113d6:	3366      	adds	r3, #102	; 0x66
 80113d8:	009b      	lsls	r3, r3, #2
 80113da:	4413      	add	r3, r2
 80113dc:	685b      	ldr	r3, [r3, #4]
 80113de:	4619      	mov	r1, r3
 80113e0:	4884      	ldr	r0, [pc, #528]	; (80115f4 <readCanToStructs+0x11b4>)
 80113e2:	f011 fb8b 	bl	8022afc <iprintf>
						memcpy(&OtherCard_Relays_st[Rx_Temp_Main_Relays_st.Peer_Index],&Rx_Temp_Main_Relays_st,sizeof(RELAYS_t));
 80113e6:	4b80      	ldr	r3, [pc, #512]	; (80115e8 <readCanToStructs+0x11a8>)
 80113e8:	781b      	ldrb	r3, [r3, #0]
 80113ea:	461a      	mov	r2, r3
 80113ec:	4613      	mov	r3, r2
 80113ee:	009b      	lsls	r3, r3, #2
 80113f0:	4413      	add	r3, r2
 80113f2:	009b      	lsls	r3, r3, #2
 80113f4:	4a80      	ldr	r2, [pc, #512]	; (80115f8 <readCanToStructs+0x11b8>)
 80113f6:	4413      	add	r3, r2
 80113f8:	2214      	movs	r2, #20
 80113fa:	497b      	ldr	r1, [pc, #492]	; (80115e8 <readCanToStructs+0x11a8>)
 80113fc:	4618      	mov	r0, r3
 80113fe:	f011 fa6d 	bl	80228dc <memcpy>
						Is_CAN_Exchange_happening = YES;
 8011402:	4b7e      	ldr	r3, [pc, #504]	; (80115fc <readCanToStructs+0x11bc>)
 8011404:	2201      	movs	r2, #1
 8011406:	701a      	strb	r2, [r3, #0]
						canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8011408:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801140c:	4a75      	ldr	r2, [pc, #468]	; (80115e4 <readCanToStructs+0x11a4>)
 801140e:	f240 4112 	movw	r1, #1042	; 0x412
 8011412:	fb01 f303 	mul.w	r3, r1, r3
 8011416:	4413      	add	r3, r2
 8011418:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 801141c:	2200      	movs	r2, #0
 801141e:	701a      	strb	r2, [r3, #0]
				break;
 8011420:	e142      	b.n	80116a8 <readCanToStructs+0x1268>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].invalid = 1;
 8011422:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011426:	4a6f      	ldr	r2, [pc, #444]	; (80115e4 <readCanToStructs+0x11a4>)
 8011428:	f240 4112 	movw	r1, #1042	; 0x412
 801142c:	fb01 f303 	mul.w	r3, r1, r3
 8011430:	4413      	add	r3, r2
 8011432:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8011436:	2201      	movs	r2, #1
 8011438:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo++;
 801143a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801143e:	4969      	ldr	r1, [pc, #420]	; (80115e4 <readCanToStructs+0x11a4>)
 8011440:	f240 4212 	movw	r2, #1042	; 0x412
 8011444:	fb03 f202 	mul.w	r2, r3, r2
 8011448:	440a      	add	r2, r1
 801144a:	f202 420f 	addw	r2, r2, #1039	; 0x40f
 801144e:	7812      	ldrb	r2, [r2, #0]
 8011450:	3201      	adds	r2, #1
 8011452:	b2d0      	uxtb	r0, r2
 8011454:	4a63      	ldr	r2, [pc, #396]	; (80115e4 <readCanToStructs+0x11a4>)
 8011456:	f240 4112 	movw	r1, #1042	; 0x412
 801145a:	fb01 f303 	mul.w	r3, r1, r3
 801145e:	4413      	add	r3, r2
 8011460:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8011464:	4602      	mov	r2, r0
 8011466:	701a      	strb	r2, [r3, #0]
				break;
 8011468:	e11e      	b.n	80116a8 <readCanToStructs+0x1268>
				uc_pp_charPtr = (uint8_t *)&Rx_Temp_Main_Relays_st;
 801146a:	4b5f      	ldr	r3, [pc, #380]	; (80115e8 <readCanToStructs+0x11a8>)
 801146c:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 801146e:	4b5c      	ldr	r3, [pc, #368]	; (80115e0 <readCanToStructs+0x11a0>)
 8011470:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011474:	885b      	ldrh	r3, [r3, #2]
 8011476:	4a5a      	ldr	r2, [pc, #360]	; (80115e0 <readCanToStructs+0x11a0>)
 8011478:	011b      	lsls	r3, r3, #4
 801147a:	4413      	add	r3, r2
 801147c:	3304      	adds	r3, #4
 801147e:	781b      	ldrb	r3, [r3, #0]
 8011480:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8011484:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011488:	2b00      	cmp	r3, #0
 801148a:	d110      	bne.n	80114ae <readCanToStructs+0x106e>
					memset(uc_pp_charPtr,0,sizeof(RELAYS_t));
 801148c:	2214      	movs	r2, #20
 801148e:	2100      	movs	r1, #0
 8011490:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011492:	f011 fa4b 	bl	802292c <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8011496:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801149a:	4a52      	ldr	r2, [pc, #328]	; (80115e4 <readCanToStructs+0x11a4>)
 801149c:	f240 4112 	movw	r1, #1042	; 0x412
 80114a0:	fb01 f303 	mul.w	r3, r1, r3
 80114a4:	4413      	add	r3, r2
 80114a6:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80114aa:	2200      	movs	r2, #0
 80114ac:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo)
 80114ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80114b2:	4a4c      	ldr	r2, [pc, #304]	; (80115e4 <readCanToStructs+0x11a4>)
 80114b4:	f240 4112 	movw	r1, #1042	; 0x412
 80114b8:	fb01 f303 	mul.w	r3, r1, r3
 80114bc:	4413      	add	r3, r2
 80114be:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80114c2:	781b      	ldrb	r3, [r3, #0]
 80114c4:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80114c8:	429a      	cmp	r2, r3
 80114ca:	d014      	beq.n	80114f6 <readCanToStructs+0x10b6>
					printf("EIPC2 RELAYS Seq no MisMatch\n");
 80114cc:	484c      	ldr	r0, [pc, #304]	; (8011600 <readCanToStructs+0x11c0>)
 80114ce:	f011 fbb1 	bl	8022c34 <puts>
					memset(uc_pp_charPtr,0,sizeof(RELAYS_t));
 80114d2:	2214      	movs	r2, #20
 80114d4:	2100      	movs	r1, #0
 80114d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80114d8:	f011 fa28 	bl	802292c <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 80114dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80114e0:	4a40      	ldr	r2, [pc, #256]	; (80115e4 <readCanToStructs+0x11a4>)
 80114e2:	f240 4112 	movw	r1, #1042	; 0x412
 80114e6:	fb01 f303 	mul.w	r3, r1, r3
 80114ea:	4413      	add	r3, r2
 80114ec:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80114f0:	2200      	movs	r2, #0
 80114f2:	701a      	strb	r2, [r3, #0]
					break;
 80114f4:	e0d8      	b.n	80116a8 <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 80114f6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80114fa:	4613      	mov	r3, r2
 80114fc:	00db      	lsls	r3, r3, #3
 80114fe:	1a9b      	subs	r3, r3, r2
 8011500:	461a      	mov	r2, r3
 8011502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011504:	4413      	add	r3, r2
 8011506:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011508:	2301      	movs	r3, #1
 801150a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801150e:	e016      	b.n	801153e <readCanToStructs+0x10fe>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8011510:	4b33      	ldr	r3, [pc, #204]	; (80115e0 <readCanToStructs+0x11a0>)
 8011512:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011516:	885b      	ldrh	r3, [r3, #2]
 8011518:	461a      	mov	r2, r3
 801151a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801151e:	4930      	ldr	r1, [pc, #192]	; (80115e0 <readCanToStructs+0x11a0>)
 8011520:	0112      	lsls	r2, r2, #4
 8011522:	440a      	add	r2, r1
 8011524:	4413      	add	r3, r2
 8011526:	3304      	adds	r3, #4
 8011528:	781a      	ldrb	r2, [r3, #0]
 801152a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801152c:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801152e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011530:	3301      	adds	r3, #1
 8011532:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011534:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011538:	3301      	adds	r3, #1
 801153a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801153e:	4b28      	ldr	r3, [pc, #160]	; (80115e0 <readCanToStructs+0x11a0>)
 8011540:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011544:	885b      	ldrh	r3, [r3, #2]
 8011546:	4a26      	ldr	r2, [pc, #152]	; (80115e0 <readCanToStructs+0x11a0>)
 8011548:	011b      	lsls	r3, r3, #4
 801154a:	4413      	add	r3, r2
 801154c:	330c      	adds	r3, #12
 801154e:	781b      	ldrb	r3, [r3, #0]
 8011550:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011554:	429a      	cmp	r2, r3
 8011556:	d3db      	bcc.n	8011510 <readCanToStructs+0x10d0>
				if((((canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(RELAYS_t))
 8011558:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801155c:	4a21      	ldr	r2, [pc, #132]	; (80115e4 <readCanToStructs+0x11a4>)
 801155e:	f240 4112 	movw	r1, #1042	; 0x412
 8011562:	fb01 f303 	mul.w	r3, r1, r3
 8011566:	4413      	add	r3, r2
 8011568:	f203 4311 	addw	r3, r3, #1041	; 0x411
 801156c:	781b      	ldrb	r3, [r3, #0]
 801156e:	461a      	mov	r2, r3
 8011570:	4613      	mov	r3, r2
 8011572:	00db      	lsls	r3, r3, #3
 8011574:	1a9a      	subs	r2, r3, r2
 8011576:	4b1a      	ldr	r3, [pc, #104]	; (80115e0 <readCanToStructs+0x11a0>)
 8011578:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801157c:	885b      	ldrh	r3, [r3, #2]
 801157e:	4918      	ldr	r1, [pc, #96]	; (80115e0 <readCanToStructs+0x11a0>)
 8011580:	011b      	lsls	r3, r3, #4
 8011582:	440b      	add	r3, r1
 8011584:	330c      	adds	r3, #12
 8011586:	781b      	ldrb	r3, [r3, #0]
 8011588:	3b01      	subs	r3, #1
 801158a:	4413      	add	r3, r2
 801158c:	2b13      	cmp	r3, #19
 801158e:	d966      	bls.n	801165e <readCanToStructs+0x121e>
					uint16_t CRC16 = 0;
 8011590:	2300      	movs	r3, #0
 8011592:	857b      	strh	r3, [r7, #42]	; 0x2a
					uint8_t Buff[40] = {0,};
 8011594:	2300      	movs	r3, #0
 8011596:	603b      	str	r3, [r7, #0]
 8011598:	1d3b      	adds	r3, r7, #4
 801159a:	2224      	movs	r2, #36	; 0x24
 801159c:	2100      	movs	r1, #0
 801159e:	4618      	mov	r0, r3
 80115a0:	f011 f9c4 	bl	802292c <memset>
					memcpy(Buff,&Rx_Temp_Main_Relays_st,sizeof(Rx_Temp_Main_Relays_st));
 80115a4:	463b      	mov	r3, r7
 80115a6:	2214      	movs	r2, #20
 80115a8:	490f      	ldr	r1, [pc, #60]	; (80115e8 <readCanToStructs+0x11a8>)
 80115aa:	4618      	mov	r0, r3
 80115ac:	f011 f996 	bl	80228dc <memcpy>
					CRC16 = GetCRC16(0,Buff, sizeof(Rx_Temp_Main_Relays_st));
 80115b0:	463b      	mov	r3, r7
 80115b2:	2214      	movs	r2, #20
 80115b4:	4619      	mov	r1, r3
 80115b6:	2000      	movs	r0, #0
 80115b8:	f001 fe04 	bl	80131c4 <GetCRC16>
 80115bc:	4603      	mov	r3, r0
 80115be:	857b      	strh	r3, [r7, #42]	; 0x2a
					if(CRC16 == 0)
 80115c0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d11e      	bne.n	8011604 <readCanToStructs+0x11c4>
						canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 80115c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80115ca:	4a06      	ldr	r2, [pc, #24]	; (80115e4 <readCanToStructs+0x11a4>)
 80115cc:	f240 4112 	movw	r1, #1042	; 0x412
 80115d0:	fb01 f303 	mul.w	r3, r1, r3
 80115d4:	4413      	add	r3, r2
 80115d6:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80115da:	2200      	movs	r2, #0
 80115dc:	701a      	strb	r2, [r3, #0]
				break;
 80115de:	e063      	b.n	80116a8 <readCanToStructs+0x1268>
 80115e0:	20005b08 	.word	0x20005b08
 80115e4:	200052e4 	.word	0x200052e4
 80115e8:	20002030 	.word	0x20002030
 80115ec:	20000645 	.word	0x20000645
 80115f0:	20000304 	.word	0x20000304
 80115f4:	08027150 	.word	0x08027150
 80115f8:	20001f54 	.word	0x20001f54
 80115fc:	20000108 	.word	0x20000108
 8011600:	08027164 	.word	0x08027164
						if(Debug_flag == 1)
 8011604:	4bc7      	ldr	r3, [pc, #796]	; (8011924 <readCanToStructs+0x14e4>)
 8011606:	781b      	ldrb	r3, [r3, #0]
 8011608:	2b01      	cmp	r3, #1
 801160a:	d10a      	bne.n	8011622 <readCanToStructs+0x11e2>
							printf("Rcv Relays2-O:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Rx_Temp_Main_Relays_st.Peer_Index]);
 801160c:	4bc6      	ldr	r3, [pc, #792]	; (8011928 <readCanToStructs+0x14e8>)
 801160e:	781b      	ldrb	r3, [r3, #0]
 8011610:	4ac6      	ldr	r2, [pc, #792]	; (801192c <readCanToStructs+0x14ec>)
 8011612:	3366      	adds	r3, #102	; 0x66
 8011614:	009b      	lsls	r3, r3, #2
 8011616:	4413      	add	r3, r2
 8011618:	685b      	ldr	r3, [r3, #4]
 801161a:	4619      	mov	r1, r3
 801161c:	48c4      	ldr	r0, [pc, #784]	; (8011930 <readCanToStructs+0x14f0>)
 801161e:	f011 fa6d 	bl	8022afc <iprintf>
						memcpy(&OtherCard_Relays_st[Rx_Temp_Main_Relays_st.Peer_Index],&Rx_Temp_Main_Relays_st,sizeof(RELAYS_t));
 8011622:	4bc1      	ldr	r3, [pc, #772]	; (8011928 <readCanToStructs+0x14e8>)
 8011624:	781b      	ldrb	r3, [r3, #0]
 8011626:	461a      	mov	r2, r3
 8011628:	4613      	mov	r3, r2
 801162a:	009b      	lsls	r3, r3, #2
 801162c:	4413      	add	r3, r2
 801162e:	009b      	lsls	r3, r3, #2
 8011630:	4ac0      	ldr	r2, [pc, #768]	; (8011934 <readCanToStructs+0x14f4>)
 8011632:	4413      	add	r3, r2
 8011634:	2214      	movs	r2, #20
 8011636:	49bc      	ldr	r1, [pc, #752]	; (8011928 <readCanToStructs+0x14e8>)
 8011638:	4618      	mov	r0, r3
 801163a:	f011 f94f 	bl	80228dc <memcpy>
						Is_CAN_Exchange_happening = YES;
 801163e:	4bbe      	ldr	r3, [pc, #760]	; (8011938 <readCanToStructs+0x14f8>)
 8011640:	2201      	movs	r2, #1
 8011642:	701a      	strb	r2, [r3, #0]
						canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8011644:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011648:	4abc      	ldr	r2, [pc, #752]	; (801193c <readCanToStructs+0x14fc>)
 801164a:	f240 4112 	movw	r1, #1042	; 0x412
 801164e:	fb01 f303 	mul.w	r3, r1, r3
 8011652:	4413      	add	r3, r2
 8011654:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8011658:	2200      	movs	r2, #0
 801165a:	701a      	strb	r2, [r3, #0]
				break;
 801165c:	e024      	b.n	80116a8 <readCanToStructs+0x1268>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].invalid = 1;
 801165e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011662:	4ab6      	ldr	r2, [pc, #728]	; (801193c <readCanToStructs+0x14fc>)
 8011664:	f240 4112 	movw	r1, #1042	; 0x412
 8011668:	fb01 f303 	mul.w	r3, r1, r3
 801166c:	4413      	add	r3, r2
 801166e:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8011672:	2201      	movs	r2, #1
 8011674:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo++;
 8011676:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801167a:	49b0      	ldr	r1, [pc, #704]	; (801193c <readCanToStructs+0x14fc>)
 801167c:	f240 4212 	movw	r2, #1042	; 0x412
 8011680:	fb03 f202 	mul.w	r2, r3, r2
 8011684:	440a      	add	r2, r1
 8011686:	f202 4211 	addw	r2, r2, #1041	; 0x411
 801168a:	7812      	ldrb	r2, [r2, #0]
 801168c:	3201      	adds	r2, #1
 801168e:	b2d0      	uxtb	r0, r2
 8011690:	4aaa      	ldr	r2, [pc, #680]	; (801193c <readCanToStructs+0x14fc>)
 8011692:	f240 4112 	movw	r1, #1042	; 0x412
 8011696:	fb01 f303 	mul.w	r3, r1, r3
 801169a:	4413      	add	r3, r2
 801169c:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80116a0:	4602      	mov	r2, r0
 80116a2:	701a      	strb	r2, [r3, #0]
				break;
 80116a4:	e000      	b.n	80116a8 <readCanToStructs+0x1268>
				break;
 80116a6:	bf00      	nop
			memset(&canRead.CAN_msg[canRead.Out],0,sizeof(CAN_msg));
 80116a8:	4ba5      	ldr	r3, [pc, #660]	; (8011940 <readCanToStructs+0x1500>)
 80116aa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80116ae:	885b      	ldrh	r3, [r3, #2]
 80116b0:	011b      	lsls	r3, r3, #4
 80116b2:	4aa3      	ldr	r2, [pc, #652]	; (8011940 <readCanToStructs+0x1500>)
 80116b4:	4413      	add	r3, r2
 80116b6:	2210      	movs	r2, #16
 80116b8:	2100      	movs	r1, #0
 80116ba:	4618      	mov	r0, r3
 80116bc:	f011 f936 	bl	802292c <memset>
			canRead.Out++;
 80116c0:	4b9f      	ldr	r3, [pc, #636]	; (8011940 <readCanToStructs+0x1500>)
 80116c2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80116c6:	885b      	ldrh	r3, [r3, #2]
 80116c8:	3301      	adds	r3, #1
 80116ca:	b29a      	uxth	r2, r3
 80116cc:	4b9c      	ldr	r3, [pc, #624]	; (8011940 <readCanToStructs+0x1500>)
 80116ce:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80116d2:	805a      	strh	r2, [r3, #2]
			if(CANBUFFSIZE == canRead.Out)
 80116d4:	4b9a      	ldr	r3, [pc, #616]	; (8011940 <readCanToStructs+0x1500>)
 80116d6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80116da:	885b      	ldrh	r3, [r3, #2]
 80116dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80116e0:	d104      	bne.n	80116ec <readCanToStructs+0x12ac>
				canRead.Out = 0;
 80116e2:	4b97      	ldr	r3, [pc, #604]	; (8011940 <readCanToStructs+0x1500>)
 80116e4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80116e8:	2200      	movs	r2, #0
 80116ea:	805a      	strh	r2, [r3, #2]
		while(canDataReady())
 80116ec:	f7fe fe52 	bl	8010394 <canDataReady>
 80116f0:	4603      	mov	r3, r0
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	f47e aecb 	bne.w	801048e <readCanToStructs+0x4e>
	break;
 80116f8:	f001 bcff 	b.w	80130fa <readCanToStructs+0x2cba>
			uc_index = canRead.CAN_msg[canRead.Out].canPort-1;
 80116fc:	4b90      	ldr	r3, [pc, #576]	; (8011940 <readCanToStructs+0x1500>)
 80116fe:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011702:	885b      	ldrh	r3, [r3, #2]
 8011704:	4a8e      	ldr	r2, [pc, #568]	; (8011940 <readCanToStructs+0x1500>)
 8011706:	011b      	lsls	r3, r3, #4
 8011708:	4413      	add	r3, r2
 801170a:	330f      	adds	r3, #15
 801170c:	781b      	ldrb	r3, [r3, #0]
 801170e:	3b01      	subs	r3, #1
 8011710:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			switch(canRead.CAN_msg[canRead.Out].StdId)
 8011714:	4b8a      	ldr	r3, [pc, #552]	; (8011940 <readCanToStructs+0x1500>)
 8011716:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801171a:	885b      	ldrh	r3, [r3, #2]
 801171c:	4a88      	ldr	r2, [pc, #544]	; (8011940 <readCanToStructs+0x1500>)
 801171e:	011b      	lsls	r3, r3, #4
 8011720:	4413      	add	r3, r2
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 8011728:	f200 8672 	bhi.w	8012410 <readCanToStructs+0x1fd0>
 801172c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011730:	d80a      	bhi.n	8011748 <readCanToStructs+0x1308>
 8011732:	f240 1203 	movw	r2, #259	; 0x103
 8011736:	4293      	cmp	r3, r2
 8011738:	d01e      	beq.n	8011778 <readCanToStructs+0x1338>
 801173a:	f240 1209 	movw	r2, #265	; 0x109
 801173e:	4293      	cmp	r3, r2
 8011740:	f000 8108 	beq.w	8011954 <readCanToStructs+0x1514>
				break;
 8011744:	f000 be64 	b.w	8012410 <readCanToStructs+0x1fd0>
 8011748:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 801174c:	2b07      	cmp	r3, #7
 801174e:	f200 865f 	bhi.w	8012410 <readCanToStructs+0x1fd0>
 8011752:	a201      	add	r2, pc, #4	; (adr r2, 8011758 <readCanToStructs+0x1318>)
 8011754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011758:	08011b01 	.word	0x08011b01
 801175c:	08011ce5 	.word	0x08011ce5
 8011760:	08012411 	.word	0x08012411
 8011764:	08012411 	.word	0x08012411
 8011768:	08012273 	.word	0x08012273
 801176c:	08012411 	.word	0x08012411
 8011770:	08011e95 	.word	0x08011e95
 8011774:	08012087 	.word	0x08012087
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 8011778:	4b72      	ldr	r3, [pc, #456]	; (8011944 <readCanToStructs+0x1504>)
 801177a:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 801177c:	4b70      	ldr	r3, [pc, #448]	; (8011940 <readCanToStructs+0x1500>)
 801177e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011782:	885b      	ldrh	r3, [r3, #2]
 8011784:	4a6e      	ldr	r2, [pc, #440]	; (8011940 <readCanToStructs+0x1500>)
 8011786:	011b      	lsls	r3, r3, #4
 8011788:	4413      	add	r3, r2
 801178a:	3304      	adds	r3, #4
 801178c:	781b      	ldrb	r3, [r3, #0]
 801178e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8011792:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011796:	2b00      	cmp	r3, #0
 8011798:	d110      	bne.n	80117bc <readCanToStructs+0x137c>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 801179a:	2206      	movs	r2, #6
 801179c:	2100      	movs	r1, #0
 801179e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80117a0:	f011 f8c4 	bl	802292c <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 80117a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80117a8:	4a64      	ldr	r2, [pc, #400]	; (801193c <readCanToStructs+0x14fc>)
 80117aa:	f240 4112 	movw	r1, #1042	; 0x412
 80117ae:	fb01 f303 	mul.w	r3, r1, r3
 80117b2:	4413      	add	r3, r2
 80117b4:	f203 2307 	addw	r3, r3, #519	; 0x207
 80117b8:	2200      	movs	r2, #0
 80117ba:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS_TIME_PKT].expSeqNo)
 80117bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80117c0:	4a5e      	ldr	r2, [pc, #376]	; (801193c <readCanToStructs+0x14fc>)
 80117c2:	f240 4112 	movw	r1, #1042	; 0x412
 80117c6:	fb01 f303 	mul.w	r3, r1, r3
 80117ca:	4413      	add	r3, r2
 80117cc:	f203 2307 	addw	r3, r3, #519	; 0x207
 80117d0:	781b      	ldrb	r3, [r3, #0]
 80117d2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80117d6:	429a      	cmp	r2, r3
 80117d8:	d015      	beq.n	8011806 <readCanToStructs+0x13c6>
					printf("GPS Packet Seq no MisMatch\n");
 80117da:	485b      	ldr	r0, [pc, #364]	; (8011948 <readCanToStructs+0x1508>)
 80117dc:	f011 fa2a 	bl	8022c34 <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 80117e0:	2206      	movs	r2, #6
 80117e2:	2100      	movs	r1, #0
 80117e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80117e6:	f011 f8a1 	bl	802292c <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 80117ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80117ee:	4a53      	ldr	r2, [pc, #332]	; (801193c <readCanToStructs+0x14fc>)
 80117f0:	f240 4112 	movw	r1, #1042	; 0x412
 80117f4:	fb01 f303 	mul.w	r3, r1, r3
 80117f8:	4413      	add	r3, r2
 80117fa:	f203 2307 	addw	r3, r3, #519	; 0x207
 80117fe:	2200      	movs	r2, #0
 8011800:	701a      	strb	r2, [r3, #0]
					break;
 8011802:	f000 be0a 	b.w	801241a <readCanToStructs+0x1fda>
				uc_pp_charPtr += (7 * uc_seqNo);
 8011806:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801180a:	4613      	mov	r3, r2
 801180c:	00db      	lsls	r3, r3, #3
 801180e:	1a9b      	subs	r3, r3, r2
 8011810:	461a      	mov	r2, r3
 8011812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011814:	4413      	add	r3, r2
 8011816:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011818:	2301      	movs	r3, #1
 801181a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801181e:	e016      	b.n	801184e <readCanToStructs+0x140e>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8011820:	4b47      	ldr	r3, [pc, #284]	; (8011940 <readCanToStructs+0x1500>)
 8011822:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011826:	885b      	ldrh	r3, [r3, #2]
 8011828:	461a      	mov	r2, r3
 801182a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801182e:	4944      	ldr	r1, [pc, #272]	; (8011940 <readCanToStructs+0x1500>)
 8011830:	0112      	lsls	r2, r2, #4
 8011832:	440a      	add	r2, r1
 8011834:	4413      	add	r3, r2
 8011836:	3304      	adds	r3, #4
 8011838:	781a      	ldrb	r2, [r3, #0]
 801183a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801183c:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801183e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011840:	3301      	adds	r3, #1
 8011842:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011844:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011848:	3301      	adds	r3, #1
 801184a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801184e:	4b3c      	ldr	r3, [pc, #240]	; (8011940 <readCanToStructs+0x1500>)
 8011850:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011854:	885b      	ldrh	r3, [r3, #2]
 8011856:	4a3a      	ldr	r2, [pc, #232]	; (8011940 <readCanToStructs+0x1500>)
 8011858:	011b      	lsls	r3, r3, #4
 801185a:	4413      	add	r3, r2
 801185c:	330c      	adds	r3, #12
 801185e:	781b      	ldrb	r3, [r3, #0]
 8011860:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011864:	429a      	cmp	r2, r3
 8011866:	d3db      	bcc.n	8011820 <readCanToStructs+0x13e0>
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 8011868:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801186c:	4a33      	ldr	r2, [pc, #204]	; (801193c <readCanToStructs+0x14fc>)
 801186e:	f240 4112 	movw	r1, #1042	; 0x412
 8011872:	fb01 f303 	mul.w	r3, r1, r3
 8011876:	4413      	add	r3, r2
 8011878:	f203 2307 	addw	r3, r3, #519	; 0x207
 801187c:	781b      	ldrb	r3, [r3, #0]
 801187e:	461a      	mov	r2, r3
 8011880:	4613      	mov	r3, r2
 8011882:	00db      	lsls	r3, r3, #3
 8011884:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 8011886:	4b2e      	ldr	r3, [pc, #184]	; (8011940 <readCanToStructs+0x1500>)
 8011888:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801188c:	885b      	ldrh	r3, [r3, #2]
 801188e:	492c      	ldr	r1, [pc, #176]	; (8011940 <readCanToStructs+0x1500>)
 8011890:	011b      	lsls	r3, r3, #4
 8011892:	440b      	add	r3, r1
 8011894:	330c      	adds	r3, #12
 8011896:	781b      	ldrb	r3, [r3, #0]
 8011898:	3b01      	subs	r3, #1
 801189a:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 801189c:	2b05      	cmp	r3, #5
 801189e:	d91c      	bls.n	80118da <readCanToStructs+0x149a>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 80118a0:	4b2a      	ldr	r3, [pc, #168]	; (801194c <readCanToStructs+0x150c>)
 80118a2:	4a28      	ldr	r2, [pc, #160]	; (8011944 <readCanToStructs+0x1504>)
 80118a4:	6811      	ldr	r1, [r2, #0]
 80118a6:	6019      	str	r1, [r3, #0]
 80118a8:	8892      	ldrh	r2, [r2, #4]
 80118aa:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 80118ac:	4b1d      	ldr	r3, [pc, #116]	; (8011924 <readCanToStructs+0x14e4>)
 80118ae:	781b      	ldrb	r3, [r3, #0]
 80118b0:	2b01      	cmp	r3, #1
 80118b2:	d102      	bne.n	80118ba <readCanToStructs+0x147a>
						printf("GPS_PACKET_RECEIVED\n");
 80118b4:	4826      	ldr	r0, [pc, #152]	; (8011950 <readCanToStructs+0x1510>)
 80118b6:	f011 f9bd 	bl	8022c34 <puts>
					Write_RTC();
 80118ba:	f7f9 fdfd 	bl	800b4b8 <Write_RTC>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 80118be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80118c2:	4a1e      	ldr	r2, [pc, #120]	; (801193c <readCanToStructs+0x14fc>)
 80118c4:	f240 4112 	movw	r1, #1042	; 0x412
 80118c8:	fb01 f303 	mul.w	r3, r1, r3
 80118cc:	4413      	add	r3, r2
 80118ce:	f203 2307 	addw	r3, r3, #519	; 0x207
 80118d2:	2200      	movs	r2, #0
 80118d4:	701a      	strb	r2, [r3, #0]
				break;
 80118d6:	f000 bda0 	b.w	801241a <readCanToStructs+0x1fda>
					canStatus[uc_index][GPS_TIME_PKT].invalid = 1;
 80118da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80118de:	4a17      	ldr	r2, [pc, #92]	; (801193c <readCanToStructs+0x14fc>)
 80118e0:	f240 4112 	movw	r1, #1042	; 0x412
 80118e4:	fb01 f303 	mul.w	r3, r1, r3
 80118e8:	4413      	add	r3, r2
 80118ea:	f203 2306 	addw	r3, r3, #518	; 0x206
 80118ee:	2201      	movs	r2, #1
 80118f0:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo++;
 80118f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80118f6:	4911      	ldr	r1, [pc, #68]	; (801193c <readCanToStructs+0x14fc>)
 80118f8:	f240 4212 	movw	r2, #1042	; 0x412
 80118fc:	fb03 f202 	mul.w	r2, r3, r2
 8011900:	440a      	add	r2, r1
 8011902:	f202 2207 	addw	r2, r2, #519	; 0x207
 8011906:	7812      	ldrb	r2, [r2, #0]
 8011908:	3201      	adds	r2, #1
 801190a:	b2d0      	uxtb	r0, r2
 801190c:	4a0b      	ldr	r2, [pc, #44]	; (801193c <readCanToStructs+0x14fc>)
 801190e:	f240 4112 	movw	r1, #1042	; 0x412
 8011912:	fb01 f303 	mul.w	r3, r1, r3
 8011916:	4413      	add	r3, r2
 8011918:	f203 2307 	addw	r3, r3, #519	; 0x207
 801191c:	4602      	mov	r2, r0
 801191e:	701a      	strb	r2, [r3, #0]
				break;
 8011920:	f000 bd7b 	b.w	801241a <readCanToStructs+0x1fda>
 8011924:	20000645 	.word	0x20000645
 8011928:	20002030 	.word	0x20002030
 801192c:	20000304 	.word	0x20000304
 8011930:	08027184 	.word	0x08027184
 8011934:	20001f54 	.word	0x20001f54
 8011938:	20000108 	.word	0x20000108
 801193c:	200052e4 	.word	0x200052e4
 8011940:	20005b08 	.word	0x20005b08
 8011944:	2000288c 	.word	0x2000288c
 8011948:	08026fc0 	.word	0x08026fc0
 801194c:	20002884 	.word	0x20002884
 8011950:	08026fdc 	.word	0x08026fdc
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 8011954:	4bc5      	ldr	r3, [pc, #788]	; (8011c6c <readCanToStructs+0x182c>)
 8011956:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8011958:	4bc5      	ldr	r3, [pc, #788]	; (8011c70 <readCanToStructs+0x1830>)
 801195a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801195e:	885b      	ldrh	r3, [r3, #2]
 8011960:	4ac3      	ldr	r2, [pc, #780]	; (8011c70 <readCanToStructs+0x1830>)
 8011962:	011b      	lsls	r3, r3, #4
 8011964:	4413      	add	r3, r2
 8011966:	3304      	adds	r3, #4
 8011968:	781b      	ldrb	r3, [r3, #0]
 801196a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 801196e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011972:	2b00      	cmp	r3, #0
 8011974:	d110      	bne.n	8011998 <readCanToStructs+0x1558>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8011976:	2206      	movs	r2, #6
 8011978:	2100      	movs	r1, #0
 801197a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801197c:	f010 ffd6 	bl	802292c <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 8011980:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011984:	4abb      	ldr	r2, [pc, #748]	; (8011c74 <readCanToStructs+0x1834>)
 8011986:	f240 4112 	movw	r1, #1042	; 0x412
 801198a:	fb01 f303 	mul.w	r3, r1, r3
 801198e:	4413      	add	r3, r2
 8011990:	f203 2313 	addw	r3, r3, #531	; 0x213
 8011994:	2200      	movs	r2, #0
 8011996:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS2_TIME_PKT].expSeqNo)
 8011998:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801199c:	4ab5      	ldr	r2, [pc, #724]	; (8011c74 <readCanToStructs+0x1834>)
 801199e:	f240 4112 	movw	r1, #1042	; 0x412
 80119a2:	fb01 f303 	mul.w	r3, r1, r3
 80119a6:	4413      	add	r3, r2
 80119a8:	f203 2313 	addw	r3, r3, #531	; 0x213
 80119ac:	781b      	ldrb	r3, [r3, #0]
 80119ae:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80119b2:	429a      	cmp	r2, r3
 80119b4:	d015      	beq.n	80119e2 <readCanToStructs+0x15a2>
					printf("GPS2 Packet Seq no MisMatch\n");
 80119b6:	48b0      	ldr	r0, [pc, #704]	; (8011c78 <readCanToStructs+0x1838>)
 80119b8:	f011 f93c 	bl	8022c34 <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 80119bc:	2206      	movs	r2, #6
 80119be:	2100      	movs	r1, #0
 80119c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80119c2:	f010 ffb3 	bl	802292c <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 80119c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80119ca:	4aaa      	ldr	r2, [pc, #680]	; (8011c74 <readCanToStructs+0x1834>)
 80119cc:	f240 4112 	movw	r1, #1042	; 0x412
 80119d0:	fb01 f303 	mul.w	r3, r1, r3
 80119d4:	4413      	add	r3, r2
 80119d6:	f203 2313 	addw	r3, r3, #531	; 0x213
 80119da:	2200      	movs	r2, #0
 80119dc:	701a      	strb	r2, [r3, #0]
					break;
 80119de:	f000 bd1c 	b.w	801241a <readCanToStructs+0x1fda>
				uc_pp_charPtr += (7 * uc_seqNo);
 80119e2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80119e6:	4613      	mov	r3, r2
 80119e8:	00db      	lsls	r3, r3, #3
 80119ea:	1a9b      	subs	r3, r3, r2
 80119ec:	461a      	mov	r2, r3
 80119ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119f0:	4413      	add	r3, r2
 80119f2:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80119f4:	2301      	movs	r3, #1
 80119f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80119fa:	e016      	b.n	8011a2a <readCanToStructs+0x15ea>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80119fc:	4b9c      	ldr	r3, [pc, #624]	; (8011c70 <readCanToStructs+0x1830>)
 80119fe:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011a02:	885b      	ldrh	r3, [r3, #2]
 8011a04:	461a      	mov	r2, r3
 8011a06:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011a0a:	4999      	ldr	r1, [pc, #612]	; (8011c70 <readCanToStructs+0x1830>)
 8011a0c:	0112      	lsls	r2, r2, #4
 8011a0e:	440a      	add	r2, r1
 8011a10:	4413      	add	r3, r2
 8011a12:	3304      	adds	r3, #4
 8011a14:	781a      	ldrb	r2, [r3, #0]
 8011a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a18:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8011a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a1c:	3301      	adds	r3, #1
 8011a1e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011a20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011a24:	3301      	adds	r3, #1
 8011a26:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011a2a:	4b91      	ldr	r3, [pc, #580]	; (8011c70 <readCanToStructs+0x1830>)
 8011a2c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011a30:	885b      	ldrh	r3, [r3, #2]
 8011a32:	4a8f      	ldr	r2, [pc, #572]	; (8011c70 <readCanToStructs+0x1830>)
 8011a34:	011b      	lsls	r3, r3, #4
 8011a36:	4413      	add	r3, r2
 8011a38:	330c      	adds	r3, #12
 8011a3a:	781b      	ldrb	r3, [r3, #0]
 8011a3c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011a40:	429a      	cmp	r2, r3
 8011a42:	d3db      	bcc.n	80119fc <readCanToStructs+0x15bc>
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 8011a44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011a48:	4a8a      	ldr	r2, [pc, #552]	; (8011c74 <readCanToStructs+0x1834>)
 8011a4a:	f240 4112 	movw	r1, #1042	; 0x412
 8011a4e:	fb01 f303 	mul.w	r3, r1, r3
 8011a52:	4413      	add	r3, r2
 8011a54:	f203 2313 	addw	r3, r3, #531	; 0x213
 8011a58:	781b      	ldrb	r3, [r3, #0]
 8011a5a:	461a      	mov	r2, r3
 8011a5c:	4613      	mov	r3, r2
 8011a5e:	00db      	lsls	r3, r3, #3
 8011a60:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 8011a62:	4b83      	ldr	r3, [pc, #524]	; (8011c70 <readCanToStructs+0x1830>)
 8011a64:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011a68:	885b      	ldrh	r3, [r3, #2]
 8011a6a:	4981      	ldr	r1, [pc, #516]	; (8011c70 <readCanToStructs+0x1830>)
 8011a6c:	011b      	lsls	r3, r3, #4
 8011a6e:	440b      	add	r3, r1
 8011a70:	330c      	adds	r3, #12
 8011a72:	781b      	ldrb	r3, [r3, #0]
 8011a74:	3b01      	subs	r3, #1
 8011a76:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 8011a78:	2b05      	cmp	r3, #5
 8011a7a:	d91c      	bls.n	8011ab6 <readCanToStructs+0x1676>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 8011a7c:	4b7f      	ldr	r3, [pc, #508]	; (8011c7c <readCanToStructs+0x183c>)
 8011a7e:	4a7b      	ldr	r2, [pc, #492]	; (8011c6c <readCanToStructs+0x182c>)
 8011a80:	6811      	ldr	r1, [r2, #0]
 8011a82:	6019      	str	r1, [r3, #0]
 8011a84:	8892      	ldrh	r2, [r2, #4]
 8011a86:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 8011a88:	4b7d      	ldr	r3, [pc, #500]	; (8011c80 <readCanToStructs+0x1840>)
 8011a8a:	781b      	ldrb	r3, [r3, #0]
 8011a8c:	2b01      	cmp	r3, #1
 8011a8e:	d102      	bne.n	8011a96 <readCanToStructs+0x1656>
						printf("GPS2_PACKET_RECEIVED\n");
 8011a90:	487c      	ldr	r0, [pc, #496]	; (8011c84 <readCanToStructs+0x1844>)
 8011a92:	f011 f8cf 	bl	8022c34 <puts>
					Write_RTC();
 8011a96:	f7f9 fd0f 	bl	800b4b8 <Write_RTC>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 8011a9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011a9e:	4a75      	ldr	r2, [pc, #468]	; (8011c74 <readCanToStructs+0x1834>)
 8011aa0:	f240 4112 	movw	r1, #1042	; 0x412
 8011aa4:	fb01 f303 	mul.w	r3, r1, r3
 8011aa8:	4413      	add	r3, r2
 8011aaa:	f203 2313 	addw	r3, r3, #531	; 0x213
 8011aae:	2200      	movs	r2, #0
 8011ab0:	701a      	strb	r2, [r3, #0]
				break;
 8011ab2:	f000 bcb2 	b.w	801241a <readCanToStructs+0x1fda>
					canStatus[uc_index][GPS2_TIME_PKT].invalid = 1;
 8011ab6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011aba:	4a6e      	ldr	r2, [pc, #440]	; (8011c74 <readCanToStructs+0x1834>)
 8011abc:	f240 4112 	movw	r1, #1042	; 0x412
 8011ac0:	fb01 f303 	mul.w	r3, r1, r3
 8011ac4:	4413      	add	r3, r2
 8011ac6:	f203 2312 	addw	r3, r3, #530	; 0x212
 8011aca:	2201      	movs	r2, #1
 8011acc:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo++;
 8011ace:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011ad2:	4968      	ldr	r1, [pc, #416]	; (8011c74 <readCanToStructs+0x1834>)
 8011ad4:	f240 4212 	movw	r2, #1042	; 0x412
 8011ad8:	fb03 f202 	mul.w	r2, r3, r2
 8011adc:	440a      	add	r2, r1
 8011ade:	f202 2213 	addw	r2, r2, #531	; 0x213
 8011ae2:	7812      	ldrb	r2, [r2, #0]
 8011ae4:	3201      	adds	r2, #1
 8011ae6:	b2d0      	uxtb	r0, r2
 8011ae8:	4a62      	ldr	r2, [pc, #392]	; (8011c74 <readCanToStructs+0x1834>)
 8011aea:	f240 4112 	movw	r1, #1042	; 0x412
 8011aee:	fb01 f303 	mul.w	r3, r1, r3
 8011af2:	4413      	add	r3, r2
 8011af4:	f203 2313 	addw	r3, r3, #531	; 0x213
 8011af8:	4602      	mov	r2, r0
 8011afa:	701a      	strb	r2, [r3, #0]
				break;
 8011afc:	f000 bc8d 	b.w	801241a <readCanToStructs+0x1fda>
				uc_pp_charPtr = (uint8_t *)&Temp_Siemens_self_sharing_st;
 8011b00:	4b61      	ldr	r3, [pc, #388]	; (8011c88 <readCanToStructs+0x1848>)
 8011b02:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8011b04:	4b5a      	ldr	r3, [pc, #360]	; (8011c70 <readCanToStructs+0x1830>)
 8011b06:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011b0a:	885b      	ldrh	r3, [r3, #2]
 8011b0c:	4a58      	ldr	r2, [pc, #352]	; (8011c70 <readCanToStructs+0x1830>)
 8011b0e:	011b      	lsls	r3, r3, #4
 8011b10:	4413      	add	r3, r2
 8011b12:	3304      	adds	r3, #4
 8011b14:	781b      	ldrb	r3, [r3, #0]
 8011b16:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8011b1a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d110      	bne.n	8011b44 <readCanToStructs+0x1704>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_SELF_SHARING_t));
 8011b22:	2204      	movs	r2, #4
 8011b24:	2100      	movs	r1, #0
 8011b26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011b28:	f010 ff00 	bl	802292c <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 8011b2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011b30:	4a50      	ldr	r2, [pc, #320]	; (8011c74 <readCanToStructs+0x1834>)
 8011b32:	f240 4112 	movw	r1, #1042	; 0x412
 8011b36:	fb01 f303 	mul.w	r3, r1, r3
 8011b3a:	4413      	add	r3, r2
 8011b3c:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8011b40:	2200      	movs	r2, #0
 8011b42:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo)
 8011b44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011b48:	4a4a      	ldr	r2, [pc, #296]	; (8011c74 <readCanToStructs+0x1834>)
 8011b4a:	f240 4112 	movw	r1, #1042	; 0x412
 8011b4e:	fb01 f303 	mul.w	r3, r1, r3
 8011b52:	4413      	add	r3, r2
 8011b54:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8011b58:	781b      	ldrb	r3, [r3, #0]
 8011b5a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011b5e:	429a      	cmp	r2, r3
 8011b60:	d015      	beq.n	8011b8e <readCanToStructs+0x174e>
					printf("EI_1_SELF_SHARING Seq no MisMatch\n");
 8011b62:	484a      	ldr	r0, [pc, #296]	; (8011c8c <readCanToStructs+0x184c>)
 8011b64:	f011 f866 	bl	8022c34 <puts>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_SELF_SHARING_t));
 8011b68:	2204      	movs	r2, #4
 8011b6a:	2100      	movs	r1, #0
 8011b6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011b6e:	f010 fedd 	bl	802292c <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 8011b72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011b76:	4a3f      	ldr	r2, [pc, #252]	; (8011c74 <readCanToStructs+0x1834>)
 8011b78:	f240 4112 	movw	r1, #1042	; 0x412
 8011b7c:	fb01 f303 	mul.w	r3, r1, r3
 8011b80:	4413      	add	r3, r2
 8011b82:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8011b86:	2200      	movs	r2, #0
 8011b88:	701a      	strb	r2, [r3, #0]
					break;
 8011b8a:	f000 bc46 	b.w	801241a <readCanToStructs+0x1fda>
				uc_pp_charPtr += (7 * uc_seqNo);
 8011b8e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011b92:	4613      	mov	r3, r2
 8011b94:	00db      	lsls	r3, r3, #3
 8011b96:	1a9b      	subs	r3, r3, r2
 8011b98:	461a      	mov	r2, r3
 8011b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b9c:	4413      	add	r3, r2
 8011b9e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011ba0:	2301      	movs	r3, #1
 8011ba2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011ba6:	e016      	b.n	8011bd6 <readCanToStructs+0x1796>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8011ba8:	4b31      	ldr	r3, [pc, #196]	; (8011c70 <readCanToStructs+0x1830>)
 8011baa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011bae:	885b      	ldrh	r3, [r3, #2]
 8011bb0:	461a      	mov	r2, r3
 8011bb2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011bb6:	492e      	ldr	r1, [pc, #184]	; (8011c70 <readCanToStructs+0x1830>)
 8011bb8:	0112      	lsls	r2, r2, #4
 8011bba:	440a      	add	r2, r1
 8011bbc:	4413      	add	r3, r2
 8011bbe:	3304      	adds	r3, #4
 8011bc0:	781a      	ldrb	r2, [r3, #0]
 8011bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bc4:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8011bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bc8:	3301      	adds	r3, #1
 8011bca:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011bcc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011bd0:	3301      	adds	r3, #1
 8011bd2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011bd6:	4b26      	ldr	r3, [pc, #152]	; (8011c70 <readCanToStructs+0x1830>)
 8011bd8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011bdc:	885b      	ldrh	r3, [r3, #2]
 8011bde:	4a24      	ldr	r2, [pc, #144]	; (8011c70 <readCanToStructs+0x1830>)
 8011be0:	011b      	lsls	r3, r3, #4
 8011be2:	4413      	add	r3, r2
 8011be4:	330c      	adds	r3, #12
 8011be6:	781b      	ldrb	r3, [r3, #0]
 8011be8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011bec:	429a      	cmp	r2, r3
 8011bee:	d3db      	bcc.n	8011ba8 <readCanToStructs+0x1768>
				if((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7)
 8011bf0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011bf4:	4a1f      	ldr	r2, [pc, #124]	; (8011c74 <readCanToStructs+0x1834>)
 8011bf6:	f240 4112 	movw	r1, #1042	; 0x412
 8011bfa:	fb01 f303 	mul.w	r3, r1, r3
 8011bfe:	4413      	add	r3, r2
 8011c00:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8011c04:	781b      	ldrb	r3, [r3, #0]
 8011c06:	461a      	mov	r2, r3
 8011c08:	4613      	mov	r3, r2
 8011c0a:	00db      	lsls	r3, r3, #3
 8011c0c:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SIEMENS_SELF_SHARING_t))
 8011c0e:	4b18      	ldr	r3, [pc, #96]	; (8011c70 <readCanToStructs+0x1830>)
 8011c10:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011c14:	885b      	ldrh	r3, [r3, #2]
 8011c16:	4916      	ldr	r1, [pc, #88]	; (8011c70 <readCanToStructs+0x1830>)
 8011c18:	011b      	lsls	r3, r3, #4
 8011c1a:	440b      	add	r3, r1
 8011c1c:	330c      	adds	r3, #12
 8011c1e:	781b      	ldrb	r3, [r3, #0]
 8011c20:	3b01      	subs	r3, #1
 8011c22:	4413      	add	r3, r2
				if((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7)
 8011c24:	2b03      	cmp	r3, #3
 8011c26:	d939      	bls.n	8011c9c <readCanToStructs+0x185c>
 8011c28:	4b17      	ldr	r3, [pc, #92]	; (8011c88 <readCanToStructs+0x1848>)
 8011c2a:	681b      	ldr	r3, [r3, #0]
 8011c2c:	461a      	mov	r2, r3
					memcpy(&Rx_Siemens_self_sharing_st,&Temp_Siemens_self_sharing_st,sizeof(SIEMENS_SELF_SHARING_t));
 8011c2e:	4b18      	ldr	r3, [pc, #96]	; (8011c90 <readCanToStructs+0x1850>)
 8011c30:	601a      	str	r2, [r3, #0]
					if(Debug_flag == 1)
 8011c32:	4b13      	ldr	r3, [pc, #76]	; (8011c80 <readCanToStructs+0x1840>)
 8011c34:	781b      	ldrb	r3, [r3, #0]
 8011c36:	2b01      	cmp	r3, #1
 8011c38:	d102      	bne.n	8011c40 <readCanToStructs+0x1800>
						printf("O_Info1_RCV\n");
 8011c3a:	4816      	ldr	r0, [pc, #88]	; (8011c94 <readCanToStructs+0x1854>)
 8011c3c:	f010 fffa 	bl	8022c34 <puts>
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 8011c40:	4b15      	ldr	r3, [pc, #84]	; (8011c98 <readCanToStructs+0x1858>)
 8011c42:	2201      	movs	r2, #1
 8011c44:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 8011c46:	f003 ff4f 	bl	8015ae8 <HAL_GetTick>
 8011c4a:	4603      	mov	r3, r0
 8011c4c:	4a12      	ldr	r2, [pc, #72]	; (8011c98 <readCanToStructs+0x1858>)
 8011c4e:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 8011c50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011c54:	4a07      	ldr	r2, [pc, #28]	; (8011c74 <readCanToStructs+0x1834>)
 8011c56:	f240 4112 	movw	r1, #1042	; 0x412
 8011c5a:	fb01 f303 	mul.w	r3, r1, r3
 8011c5e:	4413      	add	r3, r2
 8011c60:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8011c64:	2200      	movs	r2, #0
 8011c66:	701a      	strb	r2, [r3, #0]
				break;
 8011c68:	e3d7      	b.n	801241a <readCanToStructs+0x1fda>
 8011c6a:	bf00      	nop
 8011c6c:	2000288c 	.word	0x2000288c
 8011c70:	20005b08 	.word	0x20005b08
 8011c74:	200052e4 	.word	0x200052e4
 8011c78:	08026ff0 	.word	0x08026ff0
 8011c7c:	20002884 	.word	0x20002884
 8011c80:	20000645 	.word	0x20000645
 8011c84:	0802700c 	.word	0x0802700c
 8011c88:	20003534 	.word	0x20003534
 8011c8c:	08027024 	.word	0x08027024
 8011c90:	20003530 	.word	0x20003530
 8011c94:	08027198 	.word	0x08027198
 8011c98:	20003538 	.word	0x20003538
					canStatus[uc_index][EI_1_SELF_SHARING].invalid = 1;
 8011c9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011ca0:	4a98      	ldr	r2, [pc, #608]	; (8011f04 <readCanToStructs+0x1ac4>)
 8011ca2:	f240 4112 	movw	r1, #1042	; 0x412
 8011ca6:	fb01 f303 	mul.w	r3, r1, r3
 8011caa:	4413      	add	r3, r2
 8011cac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011cb0:	2201      	movs	r2, #1
 8011cb2:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo++;
 8011cb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011cb8:	4992      	ldr	r1, [pc, #584]	; (8011f04 <readCanToStructs+0x1ac4>)
 8011cba:	f240 4212 	movw	r2, #1042	; 0x412
 8011cbe:	fb03 f202 	mul.w	r2, r3, r2
 8011cc2:	440a      	add	r2, r1
 8011cc4:	f202 4203 	addw	r2, r2, #1027	; 0x403
 8011cc8:	7812      	ldrb	r2, [r2, #0]
 8011cca:	3201      	adds	r2, #1
 8011ccc:	b2d0      	uxtb	r0, r2
 8011cce:	4a8d      	ldr	r2, [pc, #564]	; (8011f04 <readCanToStructs+0x1ac4>)
 8011cd0:	f240 4112 	movw	r1, #1042	; 0x412
 8011cd4:	fb01 f303 	mul.w	r3, r1, r3
 8011cd8:	4413      	add	r3, r2
 8011cda:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8011cde:	4602      	mov	r2, r0
 8011ce0:	701a      	strb	r2, [r3, #0]
				break;
 8011ce2:	e39a      	b.n	801241a <readCanToStructs+0x1fda>
				uc_pp_charPtr = (uint8_t *)&Temp_Siemens_self_sharing_st;
 8011ce4:	4b88      	ldr	r3, [pc, #544]	; (8011f08 <readCanToStructs+0x1ac8>)
 8011ce6:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8011ce8:	4b88      	ldr	r3, [pc, #544]	; (8011f0c <readCanToStructs+0x1acc>)
 8011cea:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011cee:	885b      	ldrh	r3, [r3, #2]
 8011cf0:	4a86      	ldr	r2, [pc, #536]	; (8011f0c <readCanToStructs+0x1acc>)
 8011cf2:	011b      	lsls	r3, r3, #4
 8011cf4:	4413      	add	r3, r2
 8011cf6:	3304      	adds	r3, #4
 8011cf8:	781b      	ldrb	r3, [r3, #0]
 8011cfa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8011cfe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d110      	bne.n	8011d28 <readCanToStructs+0x18e8>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_SELF_SHARING_t));
 8011d06:	2204      	movs	r2, #4
 8011d08:	2100      	movs	r1, #0
 8011d0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011d0c:	f010 fe0e 	bl	802292c <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8011d10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011d14:	4a7b      	ldr	r2, [pc, #492]	; (8011f04 <readCanToStructs+0x1ac4>)
 8011d16:	f240 4112 	movw	r1, #1042	; 0x412
 8011d1a:	fb01 f303 	mul.w	r3, r1, r3
 8011d1e:	4413      	add	r3, r2
 8011d20:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8011d24:	2200      	movs	r2, #0
 8011d26:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo)
 8011d28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011d2c:	4a75      	ldr	r2, [pc, #468]	; (8011f04 <readCanToStructs+0x1ac4>)
 8011d2e:	f240 4112 	movw	r1, #1042	; 0x412
 8011d32:	fb01 f303 	mul.w	r3, r1, r3
 8011d36:	4413      	add	r3, r2
 8011d38:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8011d3c:	781b      	ldrb	r3, [r3, #0]
 8011d3e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011d42:	429a      	cmp	r2, r3
 8011d44:	d014      	beq.n	8011d70 <readCanToStructs+0x1930>
					printf("EI_2_SELF_SHARING Seq no MisMatch\n");
 8011d46:	4872      	ldr	r0, [pc, #456]	; (8011f10 <readCanToStructs+0x1ad0>)
 8011d48:	f010 ff74 	bl	8022c34 <puts>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_SELF_SHARING_t));
 8011d4c:	2204      	movs	r2, #4
 8011d4e:	2100      	movs	r1, #0
 8011d50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011d52:	f010 fdeb 	bl	802292c <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8011d56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011d5a:	4a6a      	ldr	r2, [pc, #424]	; (8011f04 <readCanToStructs+0x1ac4>)
 8011d5c:	f240 4112 	movw	r1, #1042	; 0x412
 8011d60:	fb01 f303 	mul.w	r3, r1, r3
 8011d64:	4413      	add	r3, r2
 8011d66:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8011d6a:	2200      	movs	r2, #0
 8011d6c:	701a      	strb	r2, [r3, #0]
					break;
 8011d6e:	e354      	b.n	801241a <readCanToStructs+0x1fda>
				uc_pp_charPtr += (7 * uc_seqNo);
 8011d70:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011d74:	4613      	mov	r3, r2
 8011d76:	00db      	lsls	r3, r3, #3
 8011d78:	1a9b      	subs	r3, r3, r2
 8011d7a:	461a      	mov	r2, r3
 8011d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d7e:	4413      	add	r3, r2
 8011d80:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011d82:	2301      	movs	r3, #1
 8011d84:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011d88:	e016      	b.n	8011db8 <readCanToStructs+0x1978>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8011d8a:	4b60      	ldr	r3, [pc, #384]	; (8011f0c <readCanToStructs+0x1acc>)
 8011d8c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011d90:	885b      	ldrh	r3, [r3, #2]
 8011d92:	461a      	mov	r2, r3
 8011d94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011d98:	495c      	ldr	r1, [pc, #368]	; (8011f0c <readCanToStructs+0x1acc>)
 8011d9a:	0112      	lsls	r2, r2, #4
 8011d9c:	440a      	add	r2, r1
 8011d9e:	4413      	add	r3, r2
 8011da0:	3304      	adds	r3, #4
 8011da2:	781a      	ldrb	r2, [r3, #0]
 8011da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011da6:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8011da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011daa:	3301      	adds	r3, #1
 8011dac:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011dae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011db2:	3301      	adds	r3, #1
 8011db4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011db8:	4b54      	ldr	r3, [pc, #336]	; (8011f0c <readCanToStructs+0x1acc>)
 8011dba:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011dbe:	885b      	ldrh	r3, [r3, #2]
 8011dc0:	4a52      	ldr	r2, [pc, #328]	; (8011f0c <readCanToStructs+0x1acc>)
 8011dc2:	011b      	lsls	r3, r3, #4
 8011dc4:	4413      	add	r3, r2
 8011dc6:	330c      	adds	r3, #12
 8011dc8:	781b      	ldrb	r3, [r3, #0]
 8011dca:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011dce:	429a      	cmp	r2, r3
 8011dd0:	d3db      	bcc.n	8011d8a <readCanToStructs+0x194a>
				if((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7)
 8011dd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011dd6:	4a4b      	ldr	r2, [pc, #300]	; (8011f04 <readCanToStructs+0x1ac4>)
 8011dd8:	f240 4112 	movw	r1, #1042	; 0x412
 8011ddc:	fb01 f303 	mul.w	r3, r1, r3
 8011de0:	4413      	add	r3, r2
 8011de2:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8011de6:	781b      	ldrb	r3, [r3, #0]
 8011de8:	461a      	mov	r2, r3
 8011dea:	4613      	mov	r3, r2
 8011dec:	00db      	lsls	r3, r3, #3
 8011dee:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SIEMENS_SELF_SHARING_t))
 8011df0:	4b46      	ldr	r3, [pc, #280]	; (8011f0c <readCanToStructs+0x1acc>)
 8011df2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011df6:	885b      	ldrh	r3, [r3, #2]
 8011df8:	4944      	ldr	r1, [pc, #272]	; (8011f0c <readCanToStructs+0x1acc>)
 8011dfa:	011b      	lsls	r3, r3, #4
 8011dfc:	440b      	add	r3, r1
 8011dfe:	330c      	adds	r3, #12
 8011e00:	781b      	ldrb	r3, [r3, #0]
 8011e02:	3b01      	subs	r3, #1
 8011e04:	4413      	add	r3, r2
				if((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7)
 8011e06:	2b03      	cmp	r3, #3
 8011e08:	d920      	bls.n	8011e4c <readCanToStructs+0x1a0c>
 8011e0a:	4b3f      	ldr	r3, [pc, #252]	; (8011f08 <readCanToStructs+0x1ac8>)
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	461a      	mov	r2, r3
					memcpy(&Rx_Siemens_self_sharing_st,&Temp_Siemens_self_sharing_st,sizeof(SIEMENS_SELF_SHARING_t));
 8011e10:	4b40      	ldr	r3, [pc, #256]	; (8011f14 <readCanToStructs+0x1ad4>)
 8011e12:	601a      	str	r2, [r3, #0]
					if(Debug_flag == 1)
 8011e14:	4b40      	ldr	r3, [pc, #256]	; (8011f18 <readCanToStructs+0x1ad8>)
 8011e16:	781b      	ldrb	r3, [r3, #0]
 8011e18:	2b01      	cmp	r3, #1
 8011e1a:	d102      	bne.n	8011e22 <readCanToStructs+0x19e2>
						printf("O_Info2_RCV\n");
 8011e1c:	483f      	ldr	r0, [pc, #252]	; (8011f1c <readCanToStructs+0x1adc>)
 8011e1e:	f010 ff09 	bl	8022c34 <puts>
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 8011e22:	4b3f      	ldr	r3, [pc, #252]	; (8011f20 <readCanToStructs+0x1ae0>)
 8011e24:	2201      	movs	r2, #1
 8011e26:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 8011e28:	f003 fe5e 	bl	8015ae8 <HAL_GetTick>
 8011e2c:	4603      	mov	r3, r0
 8011e2e:	4a3c      	ldr	r2, [pc, #240]	; (8011f20 <readCanToStructs+0x1ae0>)
 8011e30:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8011e32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011e36:	4a33      	ldr	r2, [pc, #204]	; (8011f04 <readCanToStructs+0x1ac4>)
 8011e38:	f240 4112 	movw	r1, #1042	; 0x412
 8011e3c:	fb01 f303 	mul.w	r3, r1, r3
 8011e40:	4413      	add	r3, r2
 8011e42:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8011e46:	2200      	movs	r2, #0
 8011e48:	701a      	strb	r2, [r3, #0]
				break;
 8011e4a:	e2e6      	b.n	801241a <readCanToStructs+0x1fda>
					canStatus[uc_index][EI_2_SELF_SHARING].invalid = 1;
 8011e4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011e50:	4a2c      	ldr	r2, [pc, #176]	; (8011f04 <readCanToStructs+0x1ac4>)
 8011e52:	f240 4112 	movw	r1, #1042	; 0x412
 8011e56:	fb01 f303 	mul.w	r3, r1, r3
 8011e5a:	4413      	add	r3, r2
 8011e5c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8011e60:	2201      	movs	r2, #1
 8011e62:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo++;
 8011e64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011e68:	4926      	ldr	r1, [pc, #152]	; (8011f04 <readCanToStructs+0x1ac4>)
 8011e6a:	f240 4212 	movw	r2, #1042	; 0x412
 8011e6e:	fb03 f202 	mul.w	r2, r3, r2
 8011e72:	440a      	add	r2, r1
 8011e74:	f202 4205 	addw	r2, r2, #1029	; 0x405
 8011e78:	7812      	ldrb	r2, [r2, #0]
 8011e7a:	3201      	adds	r2, #1
 8011e7c:	b2d0      	uxtb	r0, r2
 8011e7e:	4a21      	ldr	r2, [pc, #132]	; (8011f04 <readCanToStructs+0x1ac4>)
 8011e80:	f240 4112 	movw	r1, #1042	; 0x412
 8011e84:	fb01 f303 	mul.w	r3, r1, r3
 8011e88:	4413      	add	r3, r2
 8011e8a:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8011e8e:	4602      	mov	r2, r0
 8011e90:	701a      	strb	r2, [r3, #0]
				break;
 8011e92:	e2c2      	b.n	801241a <readCanToStructs+0x1fda>
				uc_pp_charPtr = (uint8_t *)&TempSiemensRx_OtherRelays_st;
 8011e94:	4b23      	ldr	r3, [pc, #140]	; (8011f24 <readCanToStructs+0x1ae4>)
 8011e96:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8011e98:	4b1c      	ldr	r3, [pc, #112]	; (8011f0c <readCanToStructs+0x1acc>)
 8011e9a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011e9e:	885b      	ldrh	r3, [r3, #2]
 8011ea0:	4a1a      	ldr	r2, [pc, #104]	; (8011f0c <readCanToStructs+0x1acc>)
 8011ea2:	011b      	lsls	r3, r3, #4
 8011ea4:	4413      	add	r3, r2
 8011ea6:	3304      	adds	r3, #4
 8011ea8:	781b      	ldrb	r3, [r3, #0]
 8011eaa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo != 0)
 8011eae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d005      	beq.n	8011ec2 <readCanToStructs+0x1a82>
					uc_pp_charPtr = uc_pp_charPtr + DataTraverser;
 8011eb6:	4b1c      	ldr	r3, [pc, #112]	; (8011f28 <readCanToStructs+0x1ae8>)
 8011eb8:	881b      	ldrh	r3, [r3, #0]
 8011eba:	461a      	mov	r2, r3
 8011ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ebe:	4413      	add	r3, r2
 8011ec0:	633b      	str	r3, [r7, #48]	; 0x30
				if(uc_seqNo==0)
 8011ec2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d117      	bne.n	8011efa <readCanToStructs+0x1aba>
					memset(uc_pp_charPtr,0,sizeof(VITAL_DATA_SHARING_t));
 8011eca:	f44f 7201 	mov.w	r2, #516	; 0x204
 8011ece:	2100      	movs	r1, #0
 8011ed0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011ed2:	f010 fd2b 	bl	802292c <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8011ed6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011eda:	4a0a      	ldr	r2, [pc, #40]	; (8011f04 <readCanToStructs+0x1ac4>)
 8011edc:	f240 4112 	movw	r1, #1042	; 0x412
 8011ee0:	fb01 f303 	mul.w	r3, r1, r3
 8011ee4:	4413      	add	r3, r2
 8011ee6:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8011eea:	2200      	movs	r2, #0
 8011eec:	701a      	strb	r2, [r3, #0]
					DataTraverser = 0;
 8011eee:	4b0e      	ldr	r3, [pc, #56]	; (8011f28 <readCanToStructs+0x1ae8>)
 8011ef0:	2200      	movs	r2, #0
 8011ef2:	801a      	strh	r2, [r3, #0]
					DataLength= 0;
 8011ef4:	4b0d      	ldr	r3, [pc, #52]	; (8011f2c <readCanToStructs+0x1aec>)
 8011ef6:	2200      	movs	r2, #0
 8011ef8:	801a      	strh	r2, [r3, #0]
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011efa:	2301      	movs	r3, #1
 8011efc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011f00:	e033      	b.n	8011f6a <readCanToStructs+0x1b2a>
 8011f02:	bf00      	nop
 8011f04:	200052e4 	.word	0x200052e4
 8011f08:	20003534 	.word	0x20003534
 8011f0c:	20005b08 	.word	0x20005b08
 8011f10:	08027058 	.word	0x08027058
 8011f14:	20003530 	.word	0x20003530
 8011f18:	20000645 	.word	0x20000645
 8011f1c:	080271a4 	.word	0x080271a4
 8011f20:	20003538 	.word	0x20003538
 8011f24:	20003b60 	.word	0x20003b60
 8011f28:	20009c60 	.word	0x20009c60
 8011f2c:	20009c62 	.word	0x20009c62
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8011f30:	4ba0      	ldr	r3, [pc, #640]	; (80121b4 <readCanToStructs+0x1d74>)
 8011f32:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011f36:	885b      	ldrh	r3, [r3, #2]
 8011f38:	461a      	mov	r2, r3
 8011f3a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011f3e:	499d      	ldr	r1, [pc, #628]	; (80121b4 <readCanToStructs+0x1d74>)
 8011f40:	0112      	lsls	r2, r2, #4
 8011f42:	440a      	add	r2, r1
 8011f44:	4413      	add	r3, r2
 8011f46:	3304      	adds	r3, #4
 8011f48:	781a      	ldrb	r2, [r3, #0]
 8011f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f4c:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8011f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f50:	3301      	adds	r3, #1
 8011f52:	633b      	str	r3, [r7, #48]	; 0x30
					DataTraverser++;
 8011f54:	4b98      	ldr	r3, [pc, #608]	; (80121b8 <readCanToStructs+0x1d78>)
 8011f56:	881b      	ldrh	r3, [r3, #0]
 8011f58:	3301      	adds	r3, #1
 8011f5a:	b29a      	uxth	r2, r3
 8011f5c:	4b96      	ldr	r3, [pc, #600]	; (80121b8 <readCanToStructs+0x1d78>)
 8011f5e:	801a      	strh	r2, [r3, #0]
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011f60:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011f64:	3301      	adds	r3, #1
 8011f66:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011f6a:	4b92      	ldr	r3, [pc, #584]	; (80121b4 <readCanToStructs+0x1d74>)
 8011f6c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011f70:	885b      	ldrh	r3, [r3, #2]
 8011f72:	4a90      	ldr	r2, [pc, #576]	; (80121b4 <readCanToStructs+0x1d74>)
 8011f74:	011b      	lsls	r3, r3, #4
 8011f76:	4413      	add	r3, r2
 8011f78:	330c      	adds	r3, #12
 8011f7a:	781b      	ldrb	r3, [r3, #0]
 8011f7c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011f80:	429a      	cmp	r2, r3
 8011f82:	d3d5      	bcc.n	8011f30 <readCanToStructs+0x1af0>
				if(uc_seqNo != canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo)
 8011f84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011f88:	4a8c      	ldr	r2, [pc, #560]	; (80121bc <readCanToStructs+0x1d7c>)
 8011f8a:	f240 4112 	movw	r1, #1042	; 0x412
 8011f8e:	fb01 f303 	mul.w	r3, r1, r3
 8011f92:	4413      	add	r3, r2
 8011f94:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8011f98:	781b      	ldrb	r3, [r3, #0]
 8011f9a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011f9e:	429a      	cmp	r2, r3
 8011fa0:	d026      	beq.n	8011ff0 <readCanToStructs+0x1bb0>
					printf("EIPC1_RELAYS_2_OTHER Seq no MisMatch:%u:%u\n",uc_seqNo,canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo);
 8011fa2:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8011fa6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011faa:	4a84      	ldr	r2, [pc, #528]	; (80121bc <readCanToStructs+0x1d7c>)
 8011fac:	f240 4012 	movw	r0, #1042	; 0x412
 8011fb0:	fb00 f303 	mul.w	r3, r0, r3
 8011fb4:	4413      	add	r3, r2
 8011fb6:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8011fba:	781b      	ldrb	r3, [r3, #0]
 8011fbc:	461a      	mov	r2, r3
 8011fbe:	4880      	ldr	r0, [pc, #512]	; (80121c0 <readCanToStructs+0x1d80>)
 8011fc0:	f010 fd9c 	bl	8022afc <iprintf>
					memset(uc_pp_charPtr,0,sizeof(VITAL_DATA_SHARING_t));
 8011fc4:	f44f 7201 	mov.w	r2, #516	; 0x204
 8011fc8:	2100      	movs	r1, #0
 8011fca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011fcc:	f010 fcae 	bl	802292c <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8011fd0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011fd4:	4a79      	ldr	r2, [pc, #484]	; (80121bc <readCanToStructs+0x1d7c>)
 8011fd6:	f240 4112 	movw	r1, #1042	; 0x412
 8011fda:	fb01 f303 	mul.w	r3, r1, r3
 8011fde:	4413      	add	r3, r2
 8011fe0:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8011fe4:	2200      	movs	r2, #0
 8011fe6:	701a      	strb	r2, [r3, #0]
					DataTraverser = 0;
 8011fe8:	4b73      	ldr	r3, [pc, #460]	; (80121b8 <readCanToStructs+0x1d78>)
 8011fea:	2200      	movs	r2, #0
 8011fec:	801a      	strh	r2, [r3, #0]
					break;
 8011fee:	e214      	b.n	801241a <readCanToStructs+0x1fda>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo++;
 8011ff0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011ff4:	4971      	ldr	r1, [pc, #452]	; (80121bc <readCanToStructs+0x1d7c>)
 8011ff6:	f240 4212 	movw	r2, #1042	; 0x412
 8011ffa:	fb03 f202 	mul.w	r2, r3, r2
 8011ffe:	440a      	add	r2, r1
 8012000:	f202 420f 	addw	r2, r2, #1039	; 0x40f
 8012004:	7812      	ldrb	r2, [r2, #0]
 8012006:	3201      	adds	r2, #1
 8012008:	b2d0      	uxtb	r0, r2
 801200a:	4a6c      	ldr	r2, [pc, #432]	; (80121bc <readCanToStructs+0x1d7c>)
 801200c:	f240 4112 	movw	r1, #1042	; 0x412
 8012010:	fb01 f303 	mul.w	r3, r1, r3
 8012014:	4413      	add	r3, r2
 8012016:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 801201a:	4602      	mov	r2, r0
 801201c:	701a      	strb	r2, [r3, #0]
				DataLength = ( (TempSiemensRx_OtherRelays_st.NoofDataBytes) + ((sizeof(TempSiemensRx_OtherRelays_st.NoofDataBytes))+ (sizeof(TempSiemensRx_OtherRelays_st.VitalCRC))));
 801201e:	4b69      	ldr	r3, [pc, #420]	; (80121c4 <readCanToStructs+0x1d84>)
 8012020:	881b      	ldrh	r3, [r3, #0]
 8012022:	3304      	adds	r3, #4
 8012024:	b29a      	uxth	r2, r3
 8012026:	4b68      	ldr	r3, [pc, #416]	; (80121c8 <readCanToStructs+0x1d88>)
 8012028:	801a      	strh	r2, [r3, #0]
				if(DataTraverser >= DataLength)
 801202a:	4b63      	ldr	r3, [pc, #396]	; (80121b8 <readCanToStructs+0x1d78>)
 801202c:	881a      	ldrh	r2, [r3, #0]
 801202e:	4b66      	ldr	r3, [pc, #408]	; (80121c8 <readCanToStructs+0x1d88>)
 8012030:	881b      	ldrh	r3, [r3, #0]
 8012032:	429a      	cmp	r2, r3
 8012034:	f0c0 81ee 	bcc.w	8012414 <readCanToStructs+0x1fd4>
					printf("EI1 Relay Info Received\n");
 8012038:	4864      	ldr	r0, [pc, #400]	; (80121cc <readCanToStructs+0x1d8c>)
 801203a:	f010 fdfb 	bl	8022c34 <puts>
					memcpy(&Siemens_OtherRelays_st,&TempSiemensRx_OtherRelays_st,sizeof(TempSiemensRx_OtherRelays_st));
 801203e:	4a64      	ldr	r2, [pc, #400]	; (80121d0 <readCanToStructs+0x1d90>)
 8012040:	4b60      	ldr	r3, [pc, #384]	; (80121c4 <readCanToStructs+0x1d84>)
 8012042:	4610      	mov	r0, r2
 8012044:	4619      	mov	r1, r3
 8012046:	f44f 7301 	mov.w	r3, #516	; 0x204
 801204a:	461a      	mov	r2, r3
 801204c:	f010 fc46 	bl	80228dc <memcpy>
					DataTraverser = 0;
 8012050:	4b59      	ldr	r3, [pc, #356]	; (80121b8 <readCanToStructs+0x1d78>)
 8012052:	2200      	movs	r2, #0
 8012054:	801a      	strh	r2, [r3, #0]
					DataLength = 0;
 8012056:	4b5c      	ldr	r3, [pc, #368]	; (80121c8 <readCanToStructs+0x1d88>)
 8012058:	2200      	movs	r2, #0
 801205a:	801a      	strh	r2, [r3, #0]
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 801205c:	4b5d      	ldr	r3, [pc, #372]	; (80121d4 <readCanToStructs+0x1d94>)
 801205e:	2201      	movs	r2, #1
 8012060:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 8012062:	f003 fd41 	bl	8015ae8 <HAL_GetTick>
 8012066:	4603      	mov	r3, r0
 8012068:	4a5a      	ldr	r2, [pc, #360]	; (80121d4 <readCanToStructs+0x1d94>)
 801206a:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 801206c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012070:	4a52      	ldr	r2, [pc, #328]	; (80121bc <readCanToStructs+0x1d7c>)
 8012072:	f240 4112 	movw	r1, #1042	; 0x412
 8012076:	fb01 f303 	mul.w	r3, r1, r3
 801207a:	4413      	add	r3, r2
 801207c:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8012080:	2200      	movs	r2, #0
 8012082:	701a      	strb	r2, [r3, #0]
				break;
 8012084:	e1c6      	b.n	8012414 <readCanToStructs+0x1fd4>
				uc_pp_charPtr = (uint8_t *)&TempSiemensRx_OtherRelays_st;
 8012086:	4b4f      	ldr	r3, [pc, #316]	; (80121c4 <readCanToStructs+0x1d84>)
 8012088:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 801208a:	4b4a      	ldr	r3, [pc, #296]	; (80121b4 <readCanToStructs+0x1d74>)
 801208c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012090:	885b      	ldrh	r3, [r3, #2]
 8012092:	4a48      	ldr	r2, [pc, #288]	; (80121b4 <readCanToStructs+0x1d74>)
 8012094:	011b      	lsls	r3, r3, #4
 8012096:	4413      	add	r3, r2
 8012098:	3304      	adds	r3, #4
 801209a:	781b      	ldrb	r3, [r3, #0]
 801209c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo != 0)
 80120a0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d005      	beq.n	80120b4 <readCanToStructs+0x1c74>
					uc_pp_charPtr = uc_pp_charPtr + DataTraverser;
 80120a8:	4b43      	ldr	r3, [pc, #268]	; (80121b8 <readCanToStructs+0x1d78>)
 80120aa:	881b      	ldrh	r3, [r3, #0]
 80120ac:	461a      	mov	r2, r3
 80120ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120b0:	4413      	add	r3, r2
 80120b2:	633b      	str	r3, [r7, #48]	; 0x30
				if(uc_seqNo==0)
 80120b4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d117      	bne.n	80120ec <readCanToStructs+0x1cac>
					memset(uc_pp_charPtr,0,sizeof(VITAL_DATA_SHARING_t));
 80120bc:	f44f 7201 	mov.w	r2, #516	; 0x204
 80120c0:	2100      	movs	r1, #0
 80120c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80120c4:	f010 fc32 	bl	802292c <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 80120c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80120cc:	4a3b      	ldr	r2, [pc, #236]	; (80121bc <readCanToStructs+0x1d7c>)
 80120ce:	f240 4112 	movw	r1, #1042	; 0x412
 80120d2:	fb01 f303 	mul.w	r3, r1, r3
 80120d6:	4413      	add	r3, r2
 80120d8:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80120dc:	2200      	movs	r2, #0
 80120de:	701a      	strb	r2, [r3, #0]
					DataTraverser = 0;
 80120e0:	4b35      	ldr	r3, [pc, #212]	; (80121b8 <readCanToStructs+0x1d78>)
 80120e2:	2200      	movs	r2, #0
 80120e4:	801a      	strh	r2, [r3, #0]
					DataLength= 0;
 80120e6:	4b38      	ldr	r3, [pc, #224]	; (80121c8 <readCanToStructs+0x1d88>)
 80120e8:	2200      	movs	r2, #0
 80120ea:	801a      	strh	r2, [r3, #0]
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80120ec:	2301      	movs	r3, #1
 80120ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80120f2:	e01c      	b.n	801212e <readCanToStructs+0x1cee>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80120f4:	4b2f      	ldr	r3, [pc, #188]	; (80121b4 <readCanToStructs+0x1d74>)
 80120f6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80120fa:	885b      	ldrh	r3, [r3, #2]
 80120fc:	461a      	mov	r2, r3
 80120fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012102:	492c      	ldr	r1, [pc, #176]	; (80121b4 <readCanToStructs+0x1d74>)
 8012104:	0112      	lsls	r2, r2, #4
 8012106:	440a      	add	r2, r1
 8012108:	4413      	add	r3, r2
 801210a:	3304      	adds	r3, #4
 801210c:	781a      	ldrb	r2, [r3, #0]
 801210e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012110:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8012112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012114:	3301      	adds	r3, #1
 8012116:	633b      	str	r3, [r7, #48]	; 0x30
					DataTraverser++;
 8012118:	4b27      	ldr	r3, [pc, #156]	; (80121b8 <readCanToStructs+0x1d78>)
 801211a:	881b      	ldrh	r3, [r3, #0]
 801211c:	3301      	adds	r3, #1
 801211e:	b29a      	uxth	r2, r3
 8012120:	4b25      	ldr	r3, [pc, #148]	; (80121b8 <readCanToStructs+0x1d78>)
 8012122:	801a      	strh	r2, [r3, #0]
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012124:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012128:	3301      	adds	r3, #1
 801212a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801212e:	4b21      	ldr	r3, [pc, #132]	; (80121b4 <readCanToStructs+0x1d74>)
 8012130:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012134:	885b      	ldrh	r3, [r3, #2]
 8012136:	4a1f      	ldr	r2, [pc, #124]	; (80121b4 <readCanToStructs+0x1d74>)
 8012138:	011b      	lsls	r3, r3, #4
 801213a:	4413      	add	r3, r2
 801213c:	330c      	adds	r3, #12
 801213e:	781b      	ldrb	r3, [r3, #0]
 8012140:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012144:	429a      	cmp	r2, r3
 8012146:	d3d5      	bcc.n	80120f4 <readCanToStructs+0x1cb4>
				if(uc_seqNo != canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo)
 8012148:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801214c:	4a1b      	ldr	r2, [pc, #108]	; (80121bc <readCanToStructs+0x1d7c>)
 801214e:	f240 4112 	movw	r1, #1042	; 0x412
 8012152:	fb01 f303 	mul.w	r3, r1, r3
 8012156:	4413      	add	r3, r2
 8012158:	f203 4311 	addw	r3, r3, #1041	; 0x411
 801215c:	781b      	ldrb	r3, [r3, #0]
 801215e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012162:	429a      	cmp	r2, r3
 8012164:	d03a      	beq.n	80121dc <readCanToStructs+0x1d9c>
					printf("EIPC2_RELAYS_2_OTHER Seq no MisMatch:%u:%u\n",uc_seqNo,canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo);
 8012166:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 801216a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801216e:	4a13      	ldr	r2, [pc, #76]	; (80121bc <readCanToStructs+0x1d7c>)
 8012170:	f240 4012 	movw	r0, #1042	; 0x412
 8012174:	fb00 f303 	mul.w	r3, r0, r3
 8012178:	4413      	add	r3, r2
 801217a:	f203 4311 	addw	r3, r3, #1041	; 0x411
 801217e:	781b      	ldrb	r3, [r3, #0]
 8012180:	461a      	mov	r2, r3
 8012182:	4815      	ldr	r0, [pc, #84]	; (80121d8 <readCanToStructs+0x1d98>)
 8012184:	f010 fcba 	bl	8022afc <iprintf>
					memset(uc_pp_charPtr,0,sizeof(VITAL_DATA_SHARING_t));
 8012188:	f44f 7201 	mov.w	r2, #516	; 0x204
 801218c:	2100      	movs	r1, #0
 801218e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012190:	f010 fbcc 	bl	802292c <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8012194:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012198:	4a08      	ldr	r2, [pc, #32]	; (80121bc <readCanToStructs+0x1d7c>)
 801219a:	f240 4112 	movw	r1, #1042	; 0x412
 801219e:	fb01 f303 	mul.w	r3, r1, r3
 80121a2:	4413      	add	r3, r2
 80121a4:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80121a8:	2200      	movs	r2, #0
 80121aa:	701a      	strb	r2, [r3, #0]
					DataTraverser = 0;
 80121ac:	4b02      	ldr	r3, [pc, #8]	; (80121b8 <readCanToStructs+0x1d78>)
 80121ae:	2200      	movs	r2, #0
 80121b0:	801a      	strh	r2, [r3, #0]
					break;
 80121b2:	e132      	b.n	801241a <readCanToStructs+0x1fda>
 80121b4:	20005b08 	.word	0x20005b08
 80121b8:	20009c60 	.word	0x20009c60
 80121bc:	200052e4 	.word	0x200052e4
 80121c0:	080271b0 	.word	0x080271b0
 80121c4:	20003b60 	.word	0x20003b60
 80121c8:	20009c62 	.word	0x20009c62
 80121cc:	080271dc 	.word	0x080271dc
 80121d0:	2000395c 	.word	0x2000395c
 80121d4:	20003538 	.word	0x20003538
 80121d8:	080271f4 	.word	0x080271f4
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo++;
 80121dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80121e0:	49c2      	ldr	r1, [pc, #776]	; (80124ec <readCanToStructs+0x20ac>)
 80121e2:	f240 4212 	movw	r2, #1042	; 0x412
 80121e6:	fb03 f202 	mul.w	r2, r3, r2
 80121ea:	440a      	add	r2, r1
 80121ec:	f202 4211 	addw	r2, r2, #1041	; 0x411
 80121f0:	7812      	ldrb	r2, [r2, #0]
 80121f2:	3201      	adds	r2, #1
 80121f4:	b2d0      	uxtb	r0, r2
 80121f6:	4abd      	ldr	r2, [pc, #756]	; (80124ec <readCanToStructs+0x20ac>)
 80121f8:	f240 4112 	movw	r1, #1042	; 0x412
 80121fc:	fb01 f303 	mul.w	r3, r1, r3
 8012200:	4413      	add	r3, r2
 8012202:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8012206:	4602      	mov	r2, r0
 8012208:	701a      	strb	r2, [r3, #0]
				DataLength = ( (TempSiemensRx_OtherRelays_st.NoofDataBytes) + ((sizeof(TempSiemensRx_OtherRelays_st.NoofDataBytes))+ (sizeof(TempSiemensRx_OtherRelays_st.VitalCRC))));
 801220a:	4bb9      	ldr	r3, [pc, #740]	; (80124f0 <readCanToStructs+0x20b0>)
 801220c:	881b      	ldrh	r3, [r3, #0]
 801220e:	3304      	adds	r3, #4
 8012210:	b29a      	uxth	r2, r3
 8012212:	4bb8      	ldr	r3, [pc, #736]	; (80124f4 <readCanToStructs+0x20b4>)
 8012214:	801a      	strh	r2, [r3, #0]
				if(DataTraverser >= DataLength)
 8012216:	4bb8      	ldr	r3, [pc, #736]	; (80124f8 <readCanToStructs+0x20b8>)
 8012218:	881a      	ldrh	r2, [r3, #0]
 801221a:	4bb6      	ldr	r3, [pc, #728]	; (80124f4 <readCanToStructs+0x20b4>)
 801221c:	881b      	ldrh	r3, [r3, #0]
 801221e:	429a      	cmp	r2, r3
 8012220:	f0c0 80fa 	bcc.w	8012418 <readCanToStructs+0x1fd8>
					printf("EI2 Relay Info Received\n");
 8012224:	48b5      	ldr	r0, [pc, #724]	; (80124fc <readCanToStructs+0x20bc>)
 8012226:	f010 fd05 	bl	8022c34 <puts>
					memcpy(&Siemens_OtherRelays_st,&TempSiemensRx_OtherRelays_st,sizeof(TempSiemensRx_OtherRelays_st));
 801222a:	4ab5      	ldr	r2, [pc, #724]	; (8012500 <readCanToStructs+0x20c0>)
 801222c:	4bb0      	ldr	r3, [pc, #704]	; (80124f0 <readCanToStructs+0x20b0>)
 801222e:	4610      	mov	r0, r2
 8012230:	4619      	mov	r1, r3
 8012232:	f44f 7301 	mov.w	r3, #516	; 0x204
 8012236:	461a      	mov	r2, r3
 8012238:	f010 fb50 	bl	80228dc <memcpy>
					DataTraverser = 0;
 801223c:	4bae      	ldr	r3, [pc, #696]	; (80124f8 <readCanToStructs+0x20b8>)
 801223e:	2200      	movs	r2, #0
 8012240:	801a      	strh	r2, [r3, #0]
					DataLength = 0;
 8012242:	4bac      	ldr	r3, [pc, #688]	; (80124f4 <readCanToStructs+0x20b4>)
 8012244:	2200      	movs	r2, #0
 8012246:	801a      	strh	r2, [r3, #0]
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 8012248:	4bae      	ldr	r3, [pc, #696]	; (8012504 <readCanToStructs+0x20c4>)
 801224a:	2201      	movs	r2, #1
 801224c:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 801224e:	f003 fc4b 	bl	8015ae8 <HAL_GetTick>
 8012252:	4603      	mov	r3, r0
 8012254:	4aab      	ldr	r2, [pc, #684]	; (8012504 <readCanToStructs+0x20c4>)
 8012256:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8012258:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801225c:	4aa3      	ldr	r2, [pc, #652]	; (80124ec <readCanToStructs+0x20ac>)
 801225e:	f240 4112 	movw	r1, #1042	; 0x412
 8012262:	fb01 f303 	mul.w	r3, r1, r3
 8012266:	4413      	add	r3, r2
 8012268:	f203 4311 	addw	r3, r3, #1041	; 0x411
 801226c:	2200      	movs	r2, #0
 801226e:	701a      	strb	r2, [r3, #0]
				break;
 8012270:	e0d2      	b.n	8012418 <readCanToStructs+0x1fd8>
				uc_pp_charPtr = (uint8_t *)&Siemens_fault_injection_st;
 8012272:	4ba5      	ldr	r3, [pc, #660]	; (8012508 <readCanToStructs+0x20c8>)
 8012274:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8012276:	4ba5      	ldr	r3, [pc, #660]	; (801250c <readCanToStructs+0x20cc>)
 8012278:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801227c:	885b      	ldrh	r3, [r3, #2]
 801227e:	4aa3      	ldr	r2, [pc, #652]	; (801250c <readCanToStructs+0x20cc>)
 8012280:	011b      	lsls	r3, r3, #4
 8012282:	4413      	add	r3, r2
 8012284:	3304      	adds	r3, #4
 8012286:	781b      	ldrb	r3, [r3, #0]
 8012288:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 801228c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012290:	2b00      	cmp	r3, #0
 8012292:	d110      	bne.n	80122b6 <readCanToStructs+0x1e76>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_FAULT_INJECTION_t));
 8012294:	2208      	movs	r2, #8
 8012296:	2100      	movs	r1, #0
 8012298:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801229a:	f010 fb47 	bl	802292c <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 801229e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80122a2:	4a92      	ldr	r2, [pc, #584]	; (80124ec <readCanToStructs+0x20ac>)
 80122a4:	f240 4112 	movw	r1, #1042	; 0x412
 80122a8:	fb01 f303 	mul.w	r3, r1, r3
 80122ac:	4413      	add	r3, r2
 80122ae:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 80122b2:	2200      	movs	r2, #0
 80122b4:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo)
 80122b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80122ba:	4a8c      	ldr	r2, [pc, #560]	; (80124ec <readCanToStructs+0x20ac>)
 80122bc:	f240 4112 	movw	r1, #1042	; 0x412
 80122c0:	fb01 f303 	mul.w	r3, r1, r3
 80122c4:	4413      	add	r3, r2
 80122c6:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 80122ca:	781b      	ldrb	r3, [r3, #0]
 80122cc:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80122d0:	429a      	cmp	r2, r3
 80122d2:	d014      	beq.n	80122fe <readCanToStructs+0x1ebe>
					printf("FAULT_INJECTION Seq no MisMatch\n");
 80122d4:	488e      	ldr	r0, [pc, #568]	; (8012510 <readCanToStructs+0x20d0>)
 80122d6:	f010 fcad 	bl	8022c34 <puts>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_FAULT_INJECTION_t));
 80122da:	2208      	movs	r2, #8
 80122dc:	2100      	movs	r1, #0
 80122de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80122e0:	f010 fb24 	bl	802292c <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 80122e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80122e8:	4a80      	ldr	r2, [pc, #512]	; (80124ec <readCanToStructs+0x20ac>)
 80122ea:	f240 4112 	movw	r1, #1042	; 0x412
 80122ee:	fb01 f303 	mul.w	r3, r1, r3
 80122f2:	4413      	add	r3, r2
 80122f4:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 80122f8:	2200      	movs	r2, #0
 80122fa:	701a      	strb	r2, [r3, #0]
					break;
 80122fc:	e08d      	b.n	801241a <readCanToStructs+0x1fda>
				uc_pp_charPtr += (7 * uc_seqNo);
 80122fe:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012302:	4613      	mov	r3, r2
 8012304:	00db      	lsls	r3, r3, #3
 8012306:	1a9b      	subs	r3, r3, r2
 8012308:	461a      	mov	r2, r3
 801230a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801230c:	4413      	add	r3, r2
 801230e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012310:	2301      	movs	r3, #1
 8012312:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012316:	e016      	b.n	8012346 <readCanToStructs+0x1f06>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8012318:	4b7c      	ldr	r3, [pc, #496]	; (801250c <readCanToStructs+0x20cc>)
 801231a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801231e:	885b      	ldrh	r3, [r3, #2]
 8012320:	461a      	mov	r2, r3
 8012322:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012326:	4979      	ldr	r1, [pc, #484]	; (801250c <readCanToStructs+0x20cc>)
 8012328:	0112      	lsls	r2, r2, #4
 801232a:	440a      	add	r2, r1
 801232c:	4413      	add	r3, r2
 801232e:	3304      	adds	r3, #4
 8012330:	781a      	ldrb	r2, [r3, #0]
 8012332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012334:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8012336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012338:	3301      	adds	r3, #1
 801233a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801233c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012340:	3301      	adds	r3, #1
 8012342:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012346:	4b71      	ldr	r3, [pc, #452]	; (801250c <readCanToStructs+0x20cc>)
 8012348:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801234c:	885b      	ldrh	r3, [r3, #2]
 801234e:	4a6f      	ldr	r2, [pc, #444]	; (801250c <readCanToStructs+0x20cc>)
 8012350:	011b      	lsls	r3, r3, #4
 8012352:	4413      	add	r3, r2
 8012354:	330c      	adds	r3, #12
 8012356:	781b      	ldrb	r3, [r3, #0]
 8012358:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801235c:	429a      	cmp	r2, r3
 801235e:	d3db      	bcc.n	8012318 <readCanToStructs+0x1ed8>
				if((((canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SIEMENS_FAULT_INJECTION_t))
 8012360:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012364:	4a61      	ldr	r2, [pc, #388]	; (80124ec <readCanToStructs+0x20ac>)
 8012366:	f240 4112 	movw	r1, #1042	; 0x412
 801236a:	fb01 f303 	mul.w	r3, r1, r3
 801236e:	4413      	add	r3, r2
 8012370:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8012374:	781b      	ldrb	r3, [r3, #0]
 8012376:	461a      	mov	r2, r3
 8012378:	4613      	mov	r3, r2
 801237a:	00db      	lsls	r3, r3, #3
 801237c:	1a9a      	subs	r2, r3, r2
 801237e:	4b63      	ldr	r3, [pc, #396]	; (801250c <readCanToStructs+0x20cc>)
 8012380:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012384:	885b      	ldrh	r3, [r3, #2]
 8012386:	4961      	ldr	r1, [pc, #388]	; (801250c <readCanToStructs+0x20cc>)
 8012388:	011b      	lsls	r3, r3, #4
 801238a:	440b      	add	r3, r1
 801238c:	330c      	adds	r3, #12
 801238e:	781b      	ldrb	r3, [r3, #0]
 8012390:	3b01      	subs	r3, #1
 8012392:	4413      	add	r3, r2
 8012394:	2b07      	cmp	r3, #7
 8012396:	d917      	bls.n	80123c8 <readCanToStructs+0x1f88>
					printf("Received Fault Injection Data\n");
 8012398:	485e      	ldr	r0, [pc, #376]	; (8012514 <readCanToStructs+0x20d4>)
 801239a:	f010 fc4b 	bl	8022c34 <puts>
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 801239e:	4b59      	ldr	r3, [pc, #356]	; (8012504 <readCanToStructs+0x20c4>)
 80123a0:	2201      	movs	r2, #1
 80123a2:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 80123a4:	f003 fba0 	bl	8015ae8 <HAL_GetTick>
 80123a8:	4603      	mov	r3, r0
 80123aa:	4a56      	ldr	r2, [pc, #344]	; (8012504 <readCanToStructs+0x20c4>)
 80123ac:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 80123ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80123b2:	4a4e      	ldr	r2, [pc, #312]	; (80124ec <readCanToStructs+0x20ac>)
 80123b4:	f240 4112 	movw	r1, #1042	; 0x412
 80123b8:	fb01 f303 	mul.w	r3, r1, r3
 80123bc:	4413      	add	r3, r2
 80123be:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 80123c2:	2200      	movs	r2, #0
 80123c4:	701a      	strb	r2, [r3, #0]
				break;
 80123c6:	e028      	b.n	801241a <readCanToStructs+0x1fda>
					canStatus[uc_index][CAN_FAULT_INJECTION].invalid = 1;
 80123c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80123cc:	4a47      	ldr	r2, [pc, #284]	; (80124ec <readCanToStructs+0x20ac>)
 80123ce:	f240 4112 	movw	r1, #1042	; 0x412
 80123d2:	fb01 f303 	mul.w	r3, r1, r3
 80123d6:	4413      	add	r3, r2
 80123d8:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 80123dc:	2201      	movs	r2, #1
 80123de:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo++;
 80123e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80123e4:	4941      	ldr	r1, [pc, #260]	; (80124ec <readCanToStructs+0x20ac>)
 80123e6:	f240 4212 	movw	r2, #1042	; 0x412
 80123ea:	fb03 f202 	mul.w	r2, r3, r2
 80123ee:	440a      	add	r2, r1
 80123f0:	f202 420b 	addw	r2, r2, #1035	; 0x40b
 80123f4:	7812      	ldrb	r2, [r2, #0]
 80123f6:	3201      	adds	r2, #1
 80123f8:	b2d0      	uxtb	r0, r2
 80123fa:	4a3c      	ldr	r2, [pc, #240]	; (80124ec <readCanToStructs+0x20ac>)
 80123fc:	f240 4112 	movw	r1, #1042	; 0x412
 8012400:	fb01 f303 	mul.w	r3, r1, r3
 8012404:	4413      	add	r3, r2
 8012406:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 801240a:	4602      	mov	r2, r0
 801240c:	701a      	strb	r2, [r3, #0]
				break;
 801240e:	e004      	b.n	801241a <readCanToStructs+0x1fda>
				break;
 8012410:	bf00      	nop
 8012412:	e002      	b.n	801241a <readCanToStructs+0x1fda>
				break;
 8012414:	bf00      	nop
 8012416:	e000      	b.n	801241a <readCanToStructs+0x1fda>
				break;
 8012418:	bf00      	nop
			memset(&canRead.CAN_msg[canRead.Out],0,sizeof(CAN_msg));
 801241a:	4b3c      	ldr	r3, [pc, #240]	; (801250c <readCanToStructs+0x20cc>)
 801241c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012420:	885b      	ldrh	r3, [r3, #2]
 8012422:	011b      	lsls	r3, r3, #4
 8012424:	4a39      	ldr	r2, [pc, #228]	; (801250c <readCanToStructs+0x20cc>)
 8012426:	4413      	add	r3, r2
 8012428:	2210      	movs	r2, #16
 801242a:	2100      	movs	r1, #0
 801242c:	4618      	mov	r0, r3
 801242e:	f010 fa7d 	bl	802292c <memset>
			canRead.Out++;
 8012432:	4b36      	ldr	r3, [pc, #216]	; (801250c <readCanToStructs+0x20cc>)
 8012434:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012438:	885b      	ldrh	r3, [r3, #2]
 801243a:	3301      	adds	r3, #1
 801243c:	b29a      	uxth	r2, r3
 801243e:	4b33      	ldr	r3, [pc, #204]	; (801250c <readCanToStructs+0x20cc>)
 8012440:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012444:	805a      	strh	r2, [r3, #2]
			if(CANBUFFSIZE == canRead.Out)
 8012446:	4b31      	ldr	r3, [pc, #196]	; (801250c <readCanToStructs+0x20cc>)
 8012448:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801244c:	885b      	ldrh	r3, [r3, #2]
 801244e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012452:	d104      	bne.n	801245e <readCanToStructs+0x201e>
				canRead.Out = 0;
 8012454:	4b2d      	ldr	r3, [pc, #180]	; (801250c <readCanToStructs+0x20cc>)
 8012456:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801245a:	2200      	movs	r2, #0
 801245c:	805a      	strh	r2, [r3, #2]
		while(canDataReady())
 801245e:	f7fd ff99 	bl	8010394 <canDataReady>
 8012462:	4603      	mov	r3, r0
 8012464:	2b00      	cmp	r3, #0
 8012466:	f47f a949 	bne.w	80116fc <readCanToStructs+0x12bc>
	break;
 801246a:	f000 be46 	b.w	80130fa <readCanToStructs+0x2cba>
			uc_index = canRead.CAN_msg[canRead.Out].canPort-1;
 801246e:	4b27      	ldr	r3, [pc, #156]	; (801250c <readCanToStructs+0x20cc>)
 8012470:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012474:	885b      	ldrh	r3, [r3, #2]
 8012476:	4a25      	ldr	r2, [pc, #148]	; (801250c <readCanToStructs+0x20cc>)
 8012478:	011b      	lsls	r3, r3, #4
 801247a:	4413      	add	r3, r2
 801247c:	330f      	adds	r3, #15
 801247e:	781b      	ldrb	r3, [r3, #0]
 8012480:	3b01      	subs	r3, #1
 8012482:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			switch(canRead.CAN_msg[canRead.Out].StdId)
 8012486:	4b21      	ldr	r3, [pc, #132]	; (801250c <readCanToStructs+0x20cc>)
 8012488:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801248c:	885b      	ldrh	r3, [r3, #2]
 801248e:	4a1f      	ldr	r2, [pc, #124]	; (801250c <readCanToStructs+0x20cc>)
 8012490:	011b      	lsls	r3, r3, #4
 8012492:	4413      	add	r3, r2
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 801249a:	f200 8624 	bhi.w	80130e6 <readCanToStructs+0x2ca6>
 801249e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80124a2:	d80a      	bhi.n	80124ba <readCanToStructs+0x207a>
 80124a4:	f240 1203 	movw	r2, #259	; 0x103
 80124a8:	4293      	cmp	r3, r2
 80124aa:	d035      	beq.n	8012518 <readCanToStructs+0x20d8>
 80124ac:	f240 1209 	movw	r2, #265	; 0x109
 80124b0:	4293      	cmp	r3, r2
 80124b2:	f000 8107 	beq.w	80126c4 <readCanToStructs+0x2284>
 80124b6:	f000 be16 	b.w	80130e6 <readCanToStructs+0x2ca6>
 80124ba:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 80124be:	2b07      	cmp	r3, #7
 80124c0:	f200 8611 	bhi.w	80130e6 <readCanToStructs+0x2ca6>
 80124c4:	a201      	add	r2, pc, #4	; (adr r2, 80124cc <readCanToStructs+0x208c>)
 80124c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80124ca:	bf00      	nop
 80124cc:	08012897 	.word	0x08012897
 80124d0:	08012a41 	.word	0x08012a41
 80124d4:	080130e7 	.word	0x080130e7
 80124d8:	080130e7 	.word	0x080130e7
 80124dc:	08012c0d 	.word	0x08012c0d
 80124e0:	080130e7 	.word	0x080130e7
 80124e4:	08012d95 	.word	0x08012d95
 80124e8:	08012f53 	.word	0x08012f53
 80124ec:	200052e4 	.word	0x200052e4
 80124f0:	20003b60 	.word	0x20003b60
 80124f4:	20009c62 	.word	0x20009c62
 80124f8:	20009c60 	.word	0x20009c60
 80124fc:	08027220 	.word	0x08027220
 8012500:	2000395c 	.word	0x2000395c
 8012504:	20003538 	.word	0x20003538
 8012508:	20003524 	.word	0x20003524
 801250c:	20005b08 	.word	0x20005b08
 8012510:	080270f4 	.word	0x080270f4
 8012514:	08027114 	.word	0x08027114
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 8012518:	4bc3      	ldr	r3, [pc, #780]	; (8012828 <readCanToStructs+0x23e8>)
 801251a:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 801251c:	4bc3      	ldr	r3, [pc, #780]	; (801282c <readCanToStructs+0x23ec>)
 801251e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012522:	885b      	ldrh	r3, [r3, #2]
 8012524:	4ac1      	ldr	r2, [pc, #772]	; (801282c <readCanToStructs+0x23ec>)
 8012526:	011b      	lsls	r3, r3, #4
 8012528:	4413      	add	r3, r2
 801252a:	3304      	adds	r3, #4
 801252c:	781b      	ldrb	r3, [r3, #0]
 801252e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8012532:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012536:	2b00      	cmp	r3, #0
 8012538:	d110      	bne.n	801255c <readCanToStructs+0x211c>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 801253a:	2206      	movs	r2, #6
 801253c:	2100      	movs	r1, #0
 801253e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012540:	f010 f9f4 	bl	802292c <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8012544:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012548:	4ab9      	ldr	r2, [pc, #740]	; (8012830 <readCanToStructs+0x23f0>)
 801254a:	f240 4112 	movw	r1, #1042	; 0x412
 801254e:	fb01 f303 	mul.w	r3, r1, r3
 8012552:	4413      	add	r3, r2
 8012554:	f203 2307 	addw	r3, r3, #519	; 0x207
 8012558:	2200      	movs	r2, #0
 801255a:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS_TIME_PKT].expSeqNo)
 801255c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012560:	4ab3      	ldr	r2, [pc, #716]	; (8012830 <readCanToStructs+0x23f0>)
 8012562:	f240 4112 	movw	r1, #1042	; 0x412
 8012566:	fb01 f303 	mul.w	r3, r1, r3
 801256a:	4413      	add	r3, r2
 801256c:	f203 2307 	addw	r3, r3, #519	; 0x207
 8012570:	781b      	ldrb	r3, [r3, #0]
 8012572:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012576:	429a      	cmp	r2, r3
 8012578:	d015      	beq.n	80125a6 <readCanToStructs+0x2166>
					printf("GPS Packet Seq no MisMatch\n");
 801257a:	48ae      	ldr	r0, [pc, #696]	; (8012834 <readCanToStructs+0x23f4>)
 801257c:	f010 fb5a 	bl	8022c34 <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8012580:	2206      	movs	r2, #6
 8012582:	2100      	movs	r1, #0
 8012584:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012586:	f010 f9d1 	bl	802292c <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 801258a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801258e:	4aa8      	ldr	r2, [pc, #672]	; (8012830 <readCanToStructs+0x23f0>)
 8012590:	f240 4112 	movw	r1, #1042	; 0x412
 8012594:	fb01 f303 	mul.w	r3, r1, r3
 8012598:	4413      	add	r3, r2
 801259a:	f203 2307 	addw	r3, r3, #519	; 0x207
 801259e:	2200      	movs	r2, #0
 80125a0:	701a      	strb	r2, [r3, #0]
					break;
 80125a2:	f000 bda0 	b.w	80130e6 <readCanToStructs+0x2ca6>
				uc_pp_charPtr += (7 * uc_seqNo);
 80125a6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80125aa:	4613      	mov	r3, r2
 80125ac:	00db      	lsls	r3, r3, #3
 80125ae:	1a9b      	subs	r3, r3, r2
 80125b0:	461a      	mov	r2, r3
 80125b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125b4:	4413      	add	r3, r2
 80125b6:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80125b8:	2301      	movs	r3, #1
 80125ba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80125be:	e016      	b.n	80125ee <readCanToStructs+0x21ae>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80125c0:	4b9a      	ldr	r3, [pc, #616]	; (801282c <readCanToStructs+0x23ec>)
 80125c2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80125c6:	885b      	ldrh	r3, [r3, #2]
 80125c8:	461a      	mov	r2, r3
 80125ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80125ce:	4997      	ldr	r1, [pc, #604]	; (801282c <readCanToStructs+0x23ec>)
 80125d0:	0112      	lsls	r2, r2, #4
 80125d2:	440a      	add	r2, r1
 80125d4:	4413      	add	r3, r2
 80125d6:	3304      	adds	r3, #4
 80125d8:	781a      	ldrb	r2, [r3, #0]
 80125da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125dc:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80125de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125e0:	3301      	adds	r3, #1
 80125e2:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80125e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80125e8:	3301      	adds	r3, #1
 80125ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80125ee:	4b8f      	ldr	r3, [pc, #572]	; (801282c <readCanToStructs+0x23ec>)
 80125f0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80125f4:	885b      	ldrh	r3, [r3, #2]
 80125f6:	4a8d      	ldr	r2, [pc, #564]	; (801282c <readCanToStructs+0x23ec>)
 80125f8:	011b      	lsls	r3, r3, #4
 80125fa:	4413      	add	r3, r2
 80125fc:	330c      	adds	r3, #12
 80125fe:	781b      	ldrb	r3, [r3, #0]
 8012600:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012604:	429a      	cmp	r2, r3
 8012606:	d3db      	bcc.n	80125c0 <readCanToStructs+0x2180>
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 8012608:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801260c:	4a88      	ldr	r2, [pc, #544]	; (8012830 <readCanToStructs+0x23f0>)
 801260e:	f240 4112 	movw	r1, #1042	; 0x412
 8012612:	fb01 f303 	mul.w	r3, r1, r3
 8012616:	4413      	add	r3, r2
 8012618:	f203 2307 	addw	r3, r3, #519	; 0x207
 801261c:	781b      	ldrb	r3, [r3, #0]
 801261e:	461a      	mov	r2, r3
 8012620:	4613      	mov	r3, r2
 8012622:	00db      	lsls	r3, r3, #3
 8012624:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 8012626:	4b81      	ldr	r3, [pc, #516]	; (801282c <readCanToStructs+0x23ec>)
 8012628:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801262c:	885b      	ldrh	r3, [r3, #2]
 801262e:	497f      	ldr	r1, [pc, #508]	; (801282c <readCanToStructs+0x23ec>)
 8012630:	011b      	lsls	r3, r3, #4
 8012632:	440b      	add	r3, r1
 8012634:	330c      	adds	r3, #12
 8012636:	781b      	ldrb	r3, [r3, #0]
 8012638:	3b01      	subs	r3, #1
 801263a:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 801263c:	2b05      	cmp	r3, #5
 801263e:	d91c      	bls.n	801267a <readCanToStructs+0x223a>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 8012640:	4b7d      	ldr	r3, [pc, #500]	; (8012838 <readCanToStructs+0x23f8>)
 8012642:	4a79      	ldr	r2, [pc, #484]	; (8012828 <readCanToStructs+0x23e8>)
 8012644:	6811      	ldr	r1, [r2, #0]
 8012646:	6019      	str	r1, [r3, #0]
 8012648:	8892      	ldrh	r2, [r2, #4]
 801264a:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 801264c:	4b7b      	ldr	r3, [pc, #492]	; (801283c <readCanToStructs+0x23fc>)
 801264e:	781b      	ldrb	r3, [r3, #0]
 8012650:	2b01      	cmp	r3, #1
 8012652:	d102      	bne.n	801265a <readCanToStructs+0x221a>
						printf("GPS_PACKET_RECEIVED\n");
 8012654:	487a      	ldr	r0, [pc, #488]	; (8012840 <readCanToStructs+0x2400>)
 8012656:	f010 faed 	bl	8022c34 <puts>
					Write_RTC();
 801265a:	f7f8 ff2d 	bl	800b4b8 <Write_RTC>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 801265e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012662:	4a73      	ldr	r2, [pc, #460]	; (8012830 <readCanToStructs+0x23f0>)
 8012664:	f240 4112 	movw	r1, #1042	; 0x412
 8012668:	fb01 f303 	mul.w	r3, r1, r3
 801266c:	4413      	add	r3, r2
 801266e:	f203 2307 	addw	r3, r3, #519	; 0x207
 8012672:	2200      	movs	r2, #0
 8012674:	701a      	strb	r2, [r3, #0]
 8012676:	f000 bd36 	b.w	80130e6 <readCanToStructs+0x2ca6>
					canStatus[uc_index][GPS_TIME_PKT].invalid = 1;
 801267a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801267e:	4a6c      	ldr	r2, [pc, #432]	; (8012830 <readCanToStructs+0x23f0>)
 8012680:	f240 4112 	movw	r1, #1042	; 0x412
 8012684:	fb01 f303 	mul.w	r3, r1, r3
 8012688:	4413      	add	r3, r2
 801268a:	f203 2306 	addw	r3, r3, #518	; 0x206
 801268e:	2201      	movs	r2, #1
 8012690:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo++;
 8012692:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012696:	4966      	ldr	r1, [pc, #408]	; (8012830 <readCanToStructs+0x23f0>)
 8012698:	f240 4212 	movw	r2, #1042	; 0x412
 801269c:	fb03 f202 	mul.w	r2, r3, r2
 80126a0:	440a      	add	r2, r1
 80126a2:	f202 2207 	addw	r2, r2, #519	; 0x207
 80126a6:	7812      	ldrb	r2, [r2, #0]
 80126a8:	3201      	adds	r2, #1
 80126aa:	b2d0      	uxtb	r0, r2
 80126ac:	4a60      	ldr	r2, [pc, #384]	; (8012830 <readCanToStructs+0x23f0>)
 80126ae:	f240 4112 	movw	r1, #1042	; 0x412
 80126b2:	fb01 f303 	mul.w	r3, r1, r3
 80126b6:	4413      	add	r3, r2
 80126b8:	f203 2307 	addw	r3, r3, #519	; 0x207
 80126bc:	4602      	mov	r2, r0
 80126be:	701a      	strb	r2, [r3, #0]
				break;
 80126c0:	f000 bd11 	b.w	80130e6 <readCanToStructs+0x2ca6>
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 80126c4:	4b58      	ldr	r3, [pc, #352]	; (8012828 <readCanToStructs+0x23e8>)
 80126c6:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80126c8:	4b58      	ldr	r3, [pc, #352]	; (801282c <readCanToStructs+0x23ec>)
 80126ca:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80126ce:	885b      	ldrh	r3, [r3, #2]
 80126d0:	4a56      	ldr	r2, [pc, #344]	; (801282c <readCanToStructs+0x23ec>)
 80126d2:	011b      	lsls	r3, r3, #4
 80126d4:	4413      	add	r3, r2
 80126d6:	3304      	adds	r3, #4
 80126d8:	781b      	ldrb	r3, [r3, #0]
 80126da:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 80126de:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d110      	bne.n	8012708 <readCanToStructs+0x22c8>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 80126e6:	2206      	movs	r2, #6
 80126e8:	2100      	movs	r1, #0
 80126ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80126ec:	f010 f91e 	bl	802292c <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 80126f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80126f4:	4a4e      	ldr	r2, [pc, #312]	; (8012830 <readCanToStructs+0x23f0>)
 80126f6:	f240 4112 	movw	r1, #1042	; 0x412
 80126fa:	fb01 f303 	mul.w	r3, r1, r3
 80126fe:	4413      	add	r3, r2
 8012700:	f203 2313 	addw	r3, r3, #531	; 0x213
 8012704:	2200      	movs	r2, #0
 8012706:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS2_TIME_PKT].expSeqNo)
 8012708:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801270c:	4a48      	ldr	r2, [pc, #288]	; (8012830 <readCanToStructs+0x23f0>)
 801270e:	f240 4112 	movw	r1, #1042	; 0x412
 8012712:	fb01 f303 	mul.w	r3, r1, r3
 8012716:	4413      	add	r3, r2
 8012718:	f203 2313 	addw	r3, r3, #531	; 0x213
 801271c:	781b      	ldrb	r3, [r3, #0]
 801271e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012722:	429a      	cmp	r2, r3
 8012724:	d015      	beq.n	8012752 <readCanToStructs+0x2312>
					printf("GPS2 Packet Seq no MisMatch\n");
 8012726:	4847      	ldr	r0, [pc, #284]	; (8012844 <readCanToStructs+0x2404>)
 8012728:	f010 fa84 	bl	8022c34 <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 801272c:	2206      	movs	r2, #6
 801272e:	2100      	movs	r1, #0
 8012730:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012732:	f010 f8fb 	bl	802292c <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 8012736:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801273a:	4a3d      	ldr	r2, [pc, #244]	; (8012830 <readCanToStructs+0x23f0>)
 801273c:	f240 4112 	movw	r1, #1042	; 0x412
 8012740:	fb01 f303 	mul.w	r3, r1, r3
 8012744:	4413      	add	r3, r2
 8012746:	f203 2313 	addw	r3, r3, #531	; 0x213
 801274a:	2200      	movs	r2, #0
 801274c:	701a      	strb	r2, [r3, #0]
					break;
 801274e:	f000 bcca 	b.w	80130e6 <readCanToStructs+0x2ca6>
				uc_pp_charPtr += (7 * uc_seqNo);
 8012752:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012756:	4613      	mov	r3, r2
 8012758:	00db      	lsls	r3, r3, #3
 801275a:	1a9b      	subs	r3, r3, r2
 801275c:	461a      	mov	r2, r3
 801275e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012760:	4413      	add	r3, r2
 8012762:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012764:	2301      	movs	r3, #1
 8012766:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801276a:	e016      	b.n	801279a <readCanToStructs+0x235a>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 801276c:	4b2f      	ldr	r3, [pc, #188]	; (801282c <readCanToStructs+0x23ec>)
 801276e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012772:	885b      	ldrh	r3, [r3, #2]
 8012774:	461a      	mov	r2, r3
 8012776:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801277a:	492c      	ldr	r1, [pc, #176]	; (801282c <readCanToStructs+0x23ec>)
 801277c:	0112      	lsls	r2, r2, #4
 801277e:	440a      	add	r2, r1
 8012780:	4413      	add	r3, r2
 8012782:	3304      	adds	r3, #4
 8012784:	781a      	ldrb	r2, [r3, #0]
 8012786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012788:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801278a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801278c:	3301      	adds	r3, #1
 801278e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012790:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012794:	3301      	adds	r3, #1
 8012796:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801279a:	4b24      	ldr	r3, [pc, #144]	; (801282c <readCanToStructs+0x23ec>)
 801279c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80127a0:	885b      	ldrh	r3, [r3, #2]
 80127a2:	4a22      	ldr	r2, [pc, #136]	; (801282c <readCanToStructs+0x23ec>)
 80127a4:	011b      	lsls	r3, r3, #4
 80127a6:	4413      	add	r3, r2
 80127a8:	330c      	adds	r3, #12
 80127aa:	781b      	ldrb	r3, [r3, #0]
 80127ac:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80127b0:	429a      	cmp	r2, r3
 80127b2:	d3db      	bcc.n	801276c <readCanToStructs+0x232c>
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 80127b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80127b8:	4a1d      	ldr	r2, [pc, #116]	; (8012830 <readCanToStructs+0x23f0>)
 80127ba:	f240 4112 	movw	r1, #1042	; 0x412
 80127be:	fb01 f303 	mul.w	r3, r1, r3
 80127c2:	4413      	add	r3, r2
 80127c4:	f203 2313 	addw	r3, r3, #531	; 0x213
 80127c8:	781b      	ldrb	r3, [r3, #0]
 80127ca:	461a      	mov	r2, r3
 80127cc:	4613      	mov	r3, r2
 80127ce:	00db      	lsls	r3, r3, #3
 80127d0:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 80127d2:	4b16      	ldr	r3, [pc, #88]	; (801282c <readCanToStructs+0x23ec>)
 80127d4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80127d8:	885b      	ldrh	r3, [r3, #2]
 80127da:	4914      	ldr	r1, [pc, #80]	; (801282c <readCanToStructs+0x23ec>)
 80127dc:	011b      	lsls	r3, r3, #4
 80127de:	440b      	add	r3, r1
 80127e0:	330c      	adds	r3, #12
 80127e2:	781b      	ldrb	r3, [r3, #0]
 80127e4:	3b01      	subs	r3, #1
 80127e6:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 80127e8:	2b05      	cmp	r3, #5
 80127ea:	d92f      	bls.n	801284c <readCanToStructs+0x240c>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 80127ec:	4b12      	ldr	r3, [pc, #72]	; (8012838 <readCanToStructs+0x23f8>)
 80127ee:	4a0e      	ldr	r2, [pc, #56]	; (8012828 <readCanToStructs+0x23e8>)
 80127f0:	6811      	ldr	r1, [r2, #0]
 80127f2:	6019      	str	r1, [r3, #0]
 80127f4:	8892      	ldrh	r2, [r2, #4]
 80127f6:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 80127f8:	4b10      	ldr	r3, [pc, #64]	; (801283c <readCanToStructs+0x23fc>)
 80127fa:	781b      	ldrb	r3, [r3, #0]
 80127fc:	2b01      	cmp	r3, #1
 80127fe:	d102      	bne.n	8012806 <readCanToStructs+0x23c6>
						printf("GPS2_PACKET_RECEIVED\n");
 8012800:	4811      	ldr	r0, [pc, #68]	; (8012848 <readCanToStructs+0x2408>)
 8012802:	f010 fa17 	bl	8022c34 <puts>
					Write_RTC();
 8012806:	f7f8 fe57 	bl	800b4b8 <Write_RTC>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 801280a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801280e:	4a08      	ldr	r2, [pc, #32]	; (8012830 <readCanToStructs+0x23f0>)
 8012810:	f240 4112 	movw	r1, #1042	; 0x412
 8012814:	fb01 f303 	mul.w	r3, r1, r3
 8012818:	4413      	add	r3, r2
 801281a:	f203 2313 	addw	r3, r3, #531	; 0x213
 801281e:	2200      	movs	r2, #0
 8012820:	701a      	strb	r2, [r3, #0]
 8012822:	f000 bc60 	b.w	80130e6 <readCanToStructs+0x2ca6>
 8012826:	bf00      	nop
 8012828:	2000288c 	.word	0x2000288c
 801282c:	20005b08 	.word	0x20005b08
 8012830:	200052e4 	.word	0x200052e4
 8012834:	08026fc0 	.word	0x08026fc0
 8012838:	20002884 	.word	0x20002884
 801283c:	20000645 	.word	0x20000645
 8012840:	08026fdc 	.word	0x08026fdc
 8012844:	08026ff0 	.word	0x08026ff0
 8012848:	0802700c 	.word	0x0802700c
					canStatus[uc_index][GPS2_TIME_PKT].invalid = 1;
 801284c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012850:	4aa5      	ldr	r2, [pc, #660]	; (8012ae8 <readCanToStructs+0x26a8>)
 8012852:	f240 4112 	movw	r1, #1042	; 0x412
 8012856:	fb01 f303 	mul.w	r3, r1, r3
 801285a:	4413      	add	r3, r2
 801285c:	f203 2312 	addw	r3, r3, #530	; 0x212
 8012860:	2201      	movs	r2, #1
 8012862:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo++;
 8012864:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012868:	499f      	ldr	r1, [pc, #636]	; (8012ae8 <readCanToStructs+0x26a8>)
 801286a:	f240 4212 	movw	r2, #1042	; 0x412
 801286e:	fb03 f202 	mul.w	r2, r3, r2
 8012872:	440a      	add	r2, r1
 8012874:	f202 2213 	addw	r2, r2, #531	; 0x213
 8012878:	7812      	ldrb	r2, [r2, #0]
 801287a:	3201      	adds	r2, #1
 801287c:	b2d0      	uxtb	r0, r2
 801287e:	4a9a      	ldr	r2, [pc, #616]	; (8012ae8 <readCanToStructs+0x26a8>)
 8012880:	f240 4112 	movw	r1, #1042	; 0x412
 8012884:	fb01 f303 	mul.w	r3, r1, r3
 8012888:	4413      	add	r3, r2
 801288a:	f203 2313 	addw	r3, r3, #531	; 0x213
 801288e:	4602      	mov	r2, r0
 8012890:	701a      	strb	r2, [r3, #0]
				break;
 8012892:	f000 bc28 	b.w	80130e6 <readCanToStructs+0x2ca6>
				uc_pp_charPtr = (uint8_t *)&Medha_ei_self_sharing_Temp_st;
 8012896:	4b95      	ldr	r3, [pc, #596]	; (8012aec <readCanToStructs+0x26ac>)
 8012898:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 801289a:	4b95      	ldr	r3, [pc, #596]	; (8012af0 <readCanToStructs+0x26b0>)
 801289c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80128a0:	885b      	ldrh	r3, [r3, #2]
 80128a2:	4a93      	ldr	r2, [pc, #588]	; (8012af0 <readCanToStructs+0x26b0>)
 80128a4:	011b      	lsls	r3, r3, #4
 80128a6:	4413      	add	r3, r2
 80128a8:	3304      	adds	r3, #4
 80128aa:	781b      	ldrb	r3, [r3, #0]
 80128ac:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 80128b0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d110      	bne.n	80128da <readCanToStructs+0x249a>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_EI_SELF_SHARING_t));
 80128b8:	2208      	movs	r2, #8
 80128ba:	2100      	movs	r1, #0
 80128bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80128be:	f010 f835 	bl	802292c <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 80128c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80128c6:	4a88      	ldr	r2, [pc, #544]	; (8012ae8 <readCanToStructs+0x26a8>)
 80128c8:	f240 4112 	movw	r1, #1042	; 0x412
 80128cc:	fb01 f303 	mul.w	r3, r1, r3
 80128d0:	4413      	add	r3, r2
 80128d2:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80128d6:	2200      	movs	r2, #0
 80128d8:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo)
 80128da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80128de:	4a82      	ldr	r2, [pc, #520]	; (8012ae8 <readCanToStructs+0x26a8>)
 80128e0:	f240 4112 	movw	r1, #1042	; 0x412
 80128e4:	fb01 f303 	mul.w	r3, r1, r3
 80128e8:	4413      	add	r3, r2
 80128ea:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80128ee:	781b      	ldrb	r3, [r3, #0]
 80128f0:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80128f4:	429a      	cmp	r2, r3
 80128f6:	d014      	beq.n	8012922 <readCanToStructs+0x24e2>
					printf("Seq No Mismatch for EI_1_SELF_SHARING\n");
 80128f8:	487e      	ldr	r0, [pc, #504]	; (8012af4 <readCanToStructs+0x26b4>)
 80128fa:	f010 f99b 	bl	8022c34 <puts>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_EI_SELF_SHARING_t));
 80128fe:	2208      	movs	r2, #8
 8012900:	2100      	movs	r1, #0
 8012902:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012904:	f010 f812 	bl	802292c <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 8012908:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801290c:	4a76      	ldr	r2, [pc, #472]	; (8012ae8 <readCanToStructs+0x26a8>)
 801290e:	f240 4112 	movw	r1, #1042	; 0x412
 8012912:	fb01 f303 	mul.w	r3, r1, r3
 8012916:	4413      	add	r3, r2
 8012918:	f203 4303 	addw	r3, r3, #1027	; 0x403
 801291c:	2200      	movs	r2, #0
 801291e:	701a      	strb	r2, [r3, #0]
					break;
 8012920:	e3e1      	b.n	80130e6 <readCanToStructs+0x2ca6>
				uc_pp_charPtr += (7 * uc_seqNo);
 8012922:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012926:	4613      	mov	r3, r2
 8012928:	00db      	lsls	r3, r3, #3
 801292a:	1a9b      	subs	r3, r3, r2
 801292c:	461a      	mov	r2, r3
 801292e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012930:	4413      	add	r3, r2
 8012932:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012934:	2301      	movs	r3, #1
 8012936:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801293a:	e016      	b.n	801296a <readCanToStructs+0x252a>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 801293c:	4b6c      	ldr	r3, [pc, #432]	; (8012af0 <readCanToStructs+0x26b0>)
 801293e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012942:	885b      	ldrh	r3, [r3, #2]
 8012944:	461a      	mov	r2, r3
 8012946:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801294a:	4969      	ldr	r1, [pc, #420]	; (8012af0 <readCanToStructs+0x26b0>)
 801294c:	0112      	lsls	r2, r2, #4
 801294e:	440a      	add	r2, r1
 8012950:	4413      	add	r3, r2
 8012952:	3304      	adds	r3, #4
 8012954:	781a      	ldrb	r2, [r3, #0]
 8012956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012958:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801295a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801295c:	3301      	adds	r3, #1
 801295e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012960:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012964:	3301      	adds	r3, #1
 8012966:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801296a:	4b61      	ldr	r3, [pc, #388]	; (8012af0 <readCanToStructs+0x26b0>)
 801296c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012970:	885b      	ldrh	r3, [r3, #2]
 8012972:	4a5f      	ldr	r2, [pc, #380]	; (8012af0 <readCanToStructs+0x26b0>)
 8012974:	011b      	lsls	r3, r3, #4
 8012976:	4413      	add	r3, r2
 8012978:	330c      	adds	r3, #12
 801297a:	781b      	ldrb	r3, [r3, #0]
 801297c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012980:	429a      	cmp	r2, r3
 8012982:	d3db      	bcc.n	801293c <readCanToStructs+0x24fc>
				if ((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_EI_SELF_SHARING_t))
 8012984:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012988:	4a57      	ldr	r2, [pc, #348]	; (8012ae8 <readCanToStructs+0x26a8>)
 801298a:	f240 4112 	movw	r1, #1042	; 0x412
 801298e:	fb01 f303 	mul.w	r3, r1, r3
 8012992:	4413      	add	r3, r2
 8012994:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8012998:	781b      	ldrb	r3, [r3, #0]
 801299a:	461a      	mov	r2, r3
 801299c:	4613      	mov	r3, r2
 801299e:	00db      	lsls	r3, r3, #3
 80129a0:	1a9a      	subs	r2, r3, r2
 80129a2:	4b53      	ldr	r3, [pc, #332]	; (8012af0 <readCanToStructs+0x26b0>)
 80129a4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80129a8:	885b      	ldrh	r3, [r3, #2]
 80129aa:	4951      	ldr	r1, [pc, #324]	; (8012af0 <readCanToStructs+0x26b0>)
 80129ac:	011b      	lsls	r3, r3, #4
 80129ae:	440b      	add	r3, r1
 80129b0:	330c      	adds	r3, #12
 80129b2:	781b      	ldrb	r3, [r3, #0]
 80129b4:	3b01      	subs	r3, #1
 80129b6:	4413      	add	r3, r2
 80129b8:	2b07      	cmp	r3, #7
 80129ba:	d91d      	bls.n	80129f8 <readCanToStructs+0x25b8>
					printf("\nRCV OTH_INFO1\n");
 80129bc:	484e      	ldr	r0, [pc, #312]	; (8012af8 <readCanToStructs+0x26b8>)
 80129be:	f010 f939 	bl	8022c34 <puts>
					memcpy(&Medha_ei_self_sharing_RX_st, &Medha_ei_self_sharing_Temp_st, sizeof(MEDHA_EI_SELF_SHARING_t));
 80129c2:	4b4e      	ldr	r3, [pc, #312]	; (8012afc <readCanToStructs+0x26bc>)
 80129c4:	4a49      	ldr	r2, [pc, #292]	; (8012aec <readCanToStructs+0x26ac>)
 80129c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80129ca:	e883 0003 	stmia.w	r3, {r0, r1}
					Medha_CAN_Xchanging_Happening = YES;
 80129ce:	4b4c      	ldr	r3, [pc, #304]	; (8012b00 <readCanToStructs+0x26c0>)
 80129d0:	2201      	movs	r2, #1
 80129d2:	701a      	strb	r2, [r3, #0]
					Last_Received_Medha_Self_sharing = HAL_GetTick();
 80129d4:	f003 f888 	bl	8015ae8 <HAL_GetTick>
 80129d8:	4603      	mov	r3, r0
 80129da:	4a4a      	ldr	r2, [pc, #296]	; (8012b04 <readCanToStructs+0x26c4>)
 80129dc:	6013      	str	r3, [r2, #0]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 80129de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80129e2:	4a41      	ldr	r2, [pc, #260]	; (8012ae8 <readCanToStructs+0x26a8>)
 80129e4:	f240 4112 	movw	r1, #1042	; 0x412
 80129e8:	fb01 f303 	mul.w	r3, r1, r3
 80129ec:	4413      	add	r3, r2
 80129ee:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80129f2:	2200      	movs	r2, #0
 80129f4:	701a      	strb	r2, [r3, #0]
 80129f6:	e376      	b.n	80130e6 <readCanToStructs+0x2ca6>
					canStatus[uc_index][EI_1_SELF_SHARING].invalid = 1;
 80129f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80129fc:	4a3a      	ldr	r2, [pc, #232]	; (8012ae8 <readCanToStructs+0x26a8>)
 80129fe:	f240 4112 	movw	r1, #1042	; 0x412
 8012a02:	fb01 f303 	mul.w	r3, r1, r3
 8012a06:	4413      	add	r3, r2
 8012a08:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012a0c:	2201      	movs	r2, #1
 8012a0e:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo++;
 8012a10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012a14:	4934      	ldr	r1, [pc, #208]	; (8012ae8 <readCanToStructs+0x26a8>)
 8012a16:	f240 4212 	movw	r2, #1042	; 0x412
 8012a1a:	fb03 f202 	mul.w	r2, r3, r2
 8012a1e:	440a      	add	r2, r1
 8012a20:	f202 4203 	addw	r2, r2, #1027	; 0x403
 8012a24:	7812      	ldrb	r2, [r2, #0]
 8012a26:	3201      	adds	r2, #1
 8012a28:	b2d0      	uxtb	r0, r2
 8012a2a:	4a2f      	ldr	r2, [pc, #188]	; (8012ae8 <readCanToStructs+0x26a8>)
 8012a2c:	f240 4112 	movw	r1, #1042	; 0x412
 8012a30:	fb01 f303 	mul.w	r3, r1, r3
 8012a34:	4413      	add	r3, r2
 8012a36:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8012a3a:	4602      	mov	r2, r0
 8012a3c:	701a      	strb	r2, [r3, #0]
				break;
 8012a3e:	e352      	b.n	80130e6 <readCanToStructs+0x2ca6>
				uc_pp_charPtr = (uint8_t *)&Medha_ei_self_sharing_Temp_st;
 8012a40:	4b2a      	ldr	r3, [pc, #168]	; (8012aec <readCanToStructs+0x26ac>)
 8012a42:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8012a44:	4b2a      	ldr	r3, [pc, #168]	; (8012af0 <readCanToStructs+0x26b0>)
 8012a46:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012a4a:	885b      	ldrh	r3, [r3, #2]
 8012a4c:	4a28      	ldr	r2, [pc, #160]	; (8012af0 <readCanToStructs+0x26b0>)
 8012a4e:	011b      	lsls	r3, r3, #4
 8012a50:	4413      	add	r3, r2
 8012a52:	3304      	adds	r3, #4
 8012a54:	781b      	ldrb	r3, [r3, #0]
 8012a56:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 8012a5a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	d110      	bne.n	8012a84 <readCanToStructs+0x2644>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_EI_SELF_SHARING_t));
 8012a62:	2208      	movs	r2, #8
 8012a64:	2100      	movs	r1, #0
 8012a66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012a68:	f00f ff60 	bl	802292c <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8012a6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012a70:	4a1d      	ldr	r2, [pc, #116]	; (8012ae8 <readCanToStructs+0x26a8>)
 8012a72:	f240 4112 	movw	r1, #1042	; 0x412
 8012a76:	fb01 f303 	mul.w	r3, r1, r3
 8012a7a:	4413      	add	r3, r2
 8012a7c:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8012a80:	2200      	movs	r2, #0
 8012a82:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo)
 8012a84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012a88:	4a17      	ldr	r2, [pc, #92]	; (8012ae8 <readCanToStructs+0x26a8>)
 8012a8a:	f240 4112 	movw	r1, #1042	; 0x412
 8012a8e:	fb01 f303 	mul.w	r3, r1, r3
 8012a92:	4413      	add	r3, r2
 8012a94:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8012a98:	781b      	ldrb	r3, [r3, #0]
 8012a9a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012a9e:	429a      	cmp	r2, r3
 8012aa0:	d014      	beq.n	8012acc <readCanToStructs+0x268c>
					printf("Seq No Mismatch for EI_1_SELF_SHARING\n");
 8012aa2:	4814      	ldr	r0, [pc, #80]	; (8012af4 <readCanToStructs+0x26b4>)
 8012aa4:	f010 f8c6 	bl	8022c34 <puts>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_EI_SELF_SHARING_t));
 8012aa8:	2208      	movs	r2, #8
 8012aaa:	2100      	movs	r1, #0
 8012aac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012aae:	f00f ff3d 	bl	802292c <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8012ab2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012ab6:	4a0c      	ldr	r2, [pc, #48]	; (8012ae8 <readCanToStructs+0x26a8>)
 8012ab8:	f240 4112 	movw	r1, #1042	; 0x412
 8012abc:	fb01 f303 	mul.w	r3, r1, r3
 8012ac0:	4413      	add	r3, r2
 8012ac2:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8012ac6:	2200      	movs	r2, #0
 8012ac8:	701a      	strb	r2, [r3, #0]
					break;
 8012aca:	e30c      	b.n	80130e6 <readCanToStructs+0x2ca6>
				uc_pp_charPtr += (7 * uc_seqNo);
 8012acc:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012ad0:	4613      	mov	r3, r2
 8012ad2:	00db      	lsls	r3, r3, #3
 8012ad4:	1a9b      	subs	r3, r3, r2
 8012ad6:	461a      	mov	r2, r3
 8012ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ada:	4413      	add	r3, r2
 8012adc:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012ade:	2301      	movs	r3, #1
 8012ae0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012ae4:	e027      	b.n	8012b36 <readCanToStructs+0x26f6>
 8012ae6:	bf00      	nop
 8012ae8:	200052e4 	.word	0x200052e4
 8012aec:	200026c8 	.word	0x200026c8
 8012af0:	20005b08 	.word	0x20005b08
 8012af4:	08027238 	.word	0x08027238
 8012af8:	08027260 	.word	0x08027260
 8012afc:	200026c0 	.word	0x200026c0
 8012b00:	20002160 	.word	0x20002160
 8012b04:	20002164 	.word	0x20002164
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8012b08:	4bc4      	ldr	r3, [pc, #784]	; (8012e1c <readCanToStructs+0x29dc>)
 8012b0a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012b0e:	885b      	ldrh	r3, [r3, #2]
 8012b10:	461a      	mov	r2, r3
 8012b12:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012b16:	49c1      	ldr	r1, [pc, #772]	; (8012e1c <readCanToStructs+0x29dc>)
 8012b18:	0112      	lsls	r2, r2, #4
 8012b1a:	440a      	add	r2, r1
 8012b1c:	4413      	add	r3, r2
 8012b1e:	3304      	adds	r3, #4
 8012b20:	781a      	ldrb	r2, [r3, #0]
 8012b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b24:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8012b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b28:	3301      	adds	r3, #1
 8012b2a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012b2c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012b30:	3301      	adds	r3, #1
 8012b32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012b36:	4bb9      	ldr	r3, [pc, #740]	; (8012e1c <readCanToStructs+0x29dc>)
 8012b38:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012b3c:	885b      	ldrh	r3, [r3, #2]
 8012b3e:	4ab7      	ldr	r2, [pc, #732]	; (8012e1c <readCanToStructs+0x29dc>)
 8012b40:	011b      	lsls	r3, r3, #4
 8012b42:	4413      	add	r3, r2
 8012b44:	330c      	adds	r3, #12
 8012b46:	781b      	ldrb	r3, [r3, #0]
 8012b48:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012b4c:	429a      	cmp	r2, r3
 8012b4e:	d3db      	bcc.n	8012b08 <readCanToStructs+0x26c8>
				if ((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_EI_SELF_SHARING_t))
 8012b50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012b54:	4ab2      	ldr	r2, [pc, #712]	; (8012e20 <readCanToStructs+0x29e0>)
 8012b56:	f240 4112 	movw	r1, #1042	; 0x412
 8012b5a:	fb01 f303 	mul.w	r3, r1, r3
 8012b5e:	4413      	add	r3, r2
 8012b60:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8012b64:	781b      	ldrb	r3, [r3, #0]
 8012b66:	461a      	mov	r2, r3
 8012b68:	4613      	mov	r3, r2
 8012b6a:	00db      	lsls	r3, r3, #3
 8012b6c:	1a9a      	subs	r2, r3, r2
 8012b6e:	4bab      	ldr	r3, [pc, #684]	; (8012e1c <readCanToStructs+0x29dc>)
 8012b70:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012b74:	885b      	ldrh	r3, [r3, #2]
 8012b76:	49a9      	ldr	r1, [pc, #676]	; (8012e1c <readCanToStructs+0x29dc>)
 8012b78:	011b      	lsls	r3, r3, #4
 8012b7a:	440b      	add	r3, r1
 8012b7c:	330c      	adds	r3, #12
 8012b7e:	781b      	ldrb	r3, [r3, #0]
 8012b80:	3b01      	subs	r3, #1
 8012b82:	4413      	add	r3, r2
 8012b84:	2b07      	cmp	r3, #7
 8012b86:	d91d      	bls.n	8012bc4 <readCanToStructs+0x2784>
					printf("\nRCV OTH_INFO2\n");
 8012b88:	48a6      	ldr	r0, [pc, #664]	; (8012e24 <readCanToStructs+0x29e4>)
 8012b8a:	f010 f853 	bl	8022c34 <puts>
					memcpy(&Medha_ei_self_sharing_RX_st, &Medha_ei_self_sharing_Temp_st, sizeof(MEDHA_EI_SELF_SHARING_t));
 8012b8e:	4ba6      	ldr	r3, [pc, #664]	; (8012e28 <readCanToStructs+0x29e8>)
 8012b90:	4aa6      	ldr	r2, [pc, #664]	; (8012e2c <readCanToStructs+0x29ec>)
 8012b92:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012b96:	e883 0003 	stmia.w	r3, {r0, r1}
					Medha_CAN_Xchanging_Happening = YES;
 8012b9a:	4ba5      	ldr	r3, [pc, #660]	; (8012e30 <readCanToStructs+0x29f0>)
 8012b9c:	2201      	movs	r2, #1
 8012b9e:	701a      	strb	r2, [r3, #0]
					Last_Received_Medha_Self_sharing = HAL_GetTick();
 8012ba0:	f002 ffa2 	bl	8015ae8 <HAL_GetTick>
 8012ba4:	4603      	mov	r3, r0
 8012ba6:	4aa3      	ldr	r2, [pc, #652]	; (8012e34 <readCanToStructs+0x29f4>)
 8012ba8:	6013      	str	r3, [r2, #0]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8012baa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012bae:	4a9c      	ldr	r2, [pc, #624]	; (8012e20 <readCanToStructs+0x29e0>)
 8012bb0:	f240 4112 	movw	r1, #1042	; 0x412
 8012bb4:	fb01 f303 	mul.w	r3, r1, r3
 8012bb8:	4413      	add	r3, r2
 8012bba:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8012bbe:	2200      	movs	r2, #0
 8012bc0:	701a      	strb	r2, [r3, #0]
 8012bc2:	e290      	b.n	80130e6 <readCanToStructs+0x2ca6>
					canStatus[uc_index][EI_2_SELF_SHARING].invalid = 1;
 8012bc4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012bc8:	4a95      	ldr	r2, [pc, #596]	; (8012e20 <readCanToStructs+0x29e0>)
 8012bca:	f240 4112 	movw	r1, #1042	; 0x412
 8012bce:	fb01 f303 	mul.w	r3, r1, r3
 8012bd2:	4413      	add	r3, r2
 8012bd4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8012bd8:	2201      	movs	r2, #1
 8012bda:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo++;
 8012bdc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012be0:	498f      	ldr	r1, [pc, #572]	; (8012e20 <readCanToStructs+0x29e0>)
 8012be2:	f240 4212 	movw	r2, #1042	; 0x412
 8012be6:	fb03 f202 	mul.w	r2, r3, r2
 8012bea:	440a      	add	r2, r1
 8012bec:	f202 4205 	addw	r2, r2, #1029	; 0x405
 8012bf0:	7812      	ldrb	r2, [r2, #0]
 8012bf2:	3201      	adds	r2, #1
 8012bf4:	b2d0      	uxtb	r0, r2
 8012bf6:	4a8a      	ldr	r2, [pc, #552]	; (8012e20 <readCanToStructs+0x29e0>)
 8012bf8:	f240 4112 	movw	r1, #1042	; 0x412
 8012bfc:	fb01 f303 	mul.w	r3, r1, r3
 8012c00:	4413      	add	r3, r2
 8012c02:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8012c06:	4602      	mov	r2, r0
 8012c08:	701a      	strb	r2, [r3, #0]
				break;
 8012c0a:	e26c      	b.n	80130e6 <readCanToStructs+0x2ca6>
				uc_pp_charPtr = (uint8_t *)&Medha_Fault_Injection_st;
 8012c0c:	4b8a      	ldr	r3, [pc, #552]	; (8012e38 <readCanToStructs+0x29f8>)
 8012c0e:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8012c10:	4b82      	ldr	r3, [pc, #520]	; (8012e1c <readCanToStructs+0x29dc>)
 8012c12:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012c16:	885b      	ldrh	r3, [r3, #2]
 8012c18:	4a80      	ldr	r2, [pc, #512]	; (8012e1c <readCanToStructs+0x29dc>)
 8012c1a:	011b      	lsls	r3, r3, #4
 8012c1c:	4413      	add	r3, r2
 8012c1e:	3304      	adds	r3, #4
 8012c20:	781b      	ldrb	r3, [r3, #0]
 8012c22:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 8012c26:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	d110      	bne.n	8012c50 <readCanToStructs+0x2810>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_FAULT_INJECTION_t));
 8012c2e:	2204      	movs	r2, #4
 8012c30:	2100      	movs	r1, #0
 8012c32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012c34:	f00f fe7a 	bl	802292c <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8012c38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012c3c:	4a78      	ldr	r2, [pc, #480]	; (8012e20 <readCanToStructs+0x29e0>)
 8012c3e:	f240 4112 	movw	r1, #1042	; 0x412
 8012c42:	fb01 f303 	mul.w	r3, r1, r3
 8012c46:	4413      	add	r3, r2
 8012c48:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8012c4c:	2200      	movs	r2, #0
 8012c4e:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo)
 8012c50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012c54:	4a72      	ldr	r2, [pc, #456]	; (8012e20 <readCanToStructs+0x29e0>)
 8012c56:	f240 4112 	movw	r1, #1042	; 0x412
 8012c5a:	fb01 f303 	mul.w	r3, r1, r3
 8012c5e:	4413      	add	r3, r2
 8012c60:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8012c64:	781b      	ldrb	r3, [r3, #0]
 8012c66:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012c6a:	429a      	cmp	r2, r3
 8012c6c:	d011      	beq.n	8012c92 <readCanToStructs+0x2852>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_FAULT_INJECTION_t));
 8012c6e:	2204      	movs	r2, #4
 8012c70:	2100      	movs	r1, #0
 8012c72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012c74:	f00f fe5a 	bl	802292c <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8012c78:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012c7c:	4a68      	ldr	r2, [pc, #416]	; (8012e20 <readCanToStructs+0x29e0>)
 8012c7e:	f240 4112 	movw	r1, #1042	; 0x412
 8012c82:	fb01 f303 	mul.w	r3, r1, r3
 8012c86:	4413      	add	r3, r2
 8012c88:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8012c8c:	2200      	movs	r2, #0
 8012c8e:	701a      	strb	r2, [r3, #0]
					break;
 8012c90:	e229      	b.n	80130e6 <readCanToStructs+0x2ca6>
				uc_pp_charPtr += (7 * uc_seqNo);
 8012c92:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012c96:	4613      	mov	r3, r2
 8012c98:	00db      	lsls	r3, r3, #3
 8012c9a:	1a9b      	subs	r3, r3, r2
 8012c9c:	461a      	mov	r2, r3
 8012c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ca0:	4413      	add	r3, r2
 8012ca2:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012ca4:	2301      	movs	r3, #1
 8012ca6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012caa:	e016      	b.n	8012cda <readCanToStructs+0x289a>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8012cac:	4b5b      	ldr	r3, [pc, #364]	; (8012e1c <readCanToStructs+0x29dc>)
 8012cae:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012cb2:	885b      	ldrh	r3, [r3, #2]
 8012cb4:	461a      	mov	r2, r3
 8012cb6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012cba:	4958      	ldr	r1, [pc, #352]	; (8012e1c <readCanToStructs+0x29dc>)
 8012cbc:	0112      	lsls	r2, r2, #4
 8012cbe:	440a      	add	r2, r1
 8012cc0:	4413      	add	r3, r2
 8012cc2:	3304      	adds	r3, #4
 8012cc4:	781a      	ldrb	r2, [r3, #0]
 8012cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cc8:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8012cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ccc:	3301      	adds	r3, #1
 8012cce:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012cd0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012cd4:	3301      	adds	r3, #1
 8012cd6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012cda:	4b50      	ldr	r3, [pc, #320]	; (8012e1c <readCanToStructs+0x29dc>)
 8012cdc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012ce0:	885b      	ldrh	r3, [r3, #2]
 8012ce2:	4a4e      	ldr	r2, [pc, #312]	; (8012e1c <readCanToStructs+0x29dc>)
 8012ce4:	011b      	lsls	r3, r3, #4
 8012ce6:	4413      	add	r3, r2
 8012ce8:	330c      	adds	r3, #12
 8012cea:	781b      	ldrb	r3, [r3, #0]
 8012cec:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012cf0:	429a      	cmp	r2, r3
 8012cf2:	d3db      	bcc.n	8012cac <readCanToStructs+0x286c>
				if ((((canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_FAULT_INJECTION_t))
 8012cf4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012cf8:	4a49      	ldr	r2, [pc, #292]	; (8012e20 <readCanToStructs+0x29e0>)
 8012cfa:	f240 4112 	movw	r1, #1042	; 0x412
 8012cfe:	fb01 f303 	mul.w	r3, r1, r3
 8012d02:	4413      	add	r3, r2
 8012d04:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8012d08:	781b      	ldrb	r3, [r3, #0]
 8012d0a:	461a      	mov	r2, r3
 8012d0c:	4613      	mov	r3, r2
 8012d0e:	00db      	lsls	r3, r3, #3
 8012d10:	1a9a      	subs	r2, r3, r2
 8012d12:	4b42      	ldr	r3, [pc, #264]	; (8012e1c <readCanToStructs+0x29dc>)
 8012d14:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012d18:	885b      	ldrh	r3, [r3, #2]
 8012d1a:	4940      	ldr	r1, [pc, #256]	; (8012e1c <readCanToStructs+0x29dc>)
 8012d1c:	011b      	lsls	r3, r3, #4
 8012d1e:	440b      	add	r3, r1
 8012d20:	330c      	adds	r3, #12
 8012d22:	781b      	ldrb	r3, [r3, #0]
 8012d24:	3b01      	subs	r3, #1
 8012d26:	4413      	add	r3, r2
 8012d28:	2b03      	cmp	r3, #3
 8012d2a:	d90f      	bls.n	8012d4c <readCanToStructs+0x290c>
					printf("Received CAN_FAULT_INJECTION\n");
 8012d2c:	4843      	ldr	r0, [pc, #268]	; (8012e3c <readCanToStructs+0x29fc>)
 8012d2e:	f00f ff81 	bl	8022c34 <puts>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8012d32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012d36:	4a3a      	ldr	r2, [pc, #232]	; (8012e20 <readCanToStructs+0x29e0>)
 8012d38:	f240 4112 	movw	r1, #1042	; 0x412
 8012d3c:	fb01 f303 	mul.w	r3, r1, r3
 8012d40:	4413      	add	r3, r2
 8012d42:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8012d46:	2200      	movs	r2, #0
 8012d48:	701a      	strb	r2, [r3, #0]
 8012d4a:	e1cc      	b.n	80130e6 <readCanToStructs+0x2ca6>
					canStatus[uc_index][CAN_FAULT_INJECTION].invalid = 1;
 8012d4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012d50:	4a33      	ldr	r2, [pc, #204]	; (8012e20 <readCanToStructs+0x29e0>)
 8012d52:	f240 4112 	movw	r1, #1042	; 0x412
 8012d56:	fb01 f303 	mul.w	r3, r1, r3
 8012d5a:	4413      	add	r3, r2
 8012d5c:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8012d60:	2201      	movs	r2, #1
 8012d62:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo++;
 8012d64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012d68:	492d      	ldr	r1, [pc, #180]	; (8012e20 <readCanToStructs+0x29e0>)
 8012d6a:	f240 4212 	movw	r2, #1042	; 0x412
 8012d6e:	fb03 f202 	mul.w	r2, r3, r2
 8012d72:	440a      	add	r2, r1
 8012d74:	f202 420b 	addw	r2, r2, #1035	; 0x40b
 8012d78:	7812      	ldrb	r2, [r2, #0]
 8012d7a:	3201      	adds	r2, #1
 8012d7c:	b2d0      	uxtb	r0, r2
 8012d7e:	4a28      	ldr	r2, [pc, #160]	; (8012e20 <readCanToStructs+0x29e0>)
 8012d80:	f240 4112 	movw	r1, #1042	; 0x412
 8012d84:	fb01 f303 	mul.w	r3, r1, r3
 8012d88:	4413      	add	r3, r2
 8012d8a:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8012d8e:	4602      	mov	r2, r0
 8012d90:	701a      	strb	r2, [r3, #0]
				break;
 8012d92:	e1a8      	b.n	80130e6 <readCanToStructs+0x2ca6>
				uc_pp_charPtr = (uint8_t *)&Medha_CAN_Relay_Status_st;
 8012d94:	4b2a      	ldr	r3, [pc, #168]	; (8012e40 <readCanToStructs+0x2a00>)
 8012d96:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8012d98:	4b20      	ldr	r3, [pc, #128]	; (8012e1c <readCanToStructs+0x29dc>)
 8012d9a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012d9e:	885b      	ldrh	r3, [r3, #2]
 8012da0:	4a1e      	ldr	r2, [pc, #120]	; (8012e1c <readCanToStructs+0x29dc>)
 8012da2:	011b      	lsls	r3, r3, #4
 8012da4:	4413      	add	r3, r2
 8012da6:	3304      	adds	r3, #4
 8012da8:	781b      	ldrb	r3, [r3, #0]
 8012daa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 8012dae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d110      	bne.n	8012dd8 <readCanToStructs+0x2998>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_CUR_RELAY_STS_t));
 8012db6:	2284      	movs	r2, #132	; 0x84
 8012db8:	2100      	movs	r1, #0
 8012dba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012dbc:	f00f fdb6 	bl	802292c <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8012dc0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012dc4:	4a16      	ldr	r2, [pc, #88]	; (8012e20 <readCanToStructs+0x29e0>)
 8012dc6:	f240 4112 	movw	r1, #1042	; 0x412
 8012dca:	fb01 f303 	mul.w	r3, r1, r3
 8012dce:	4413      	add	r3, r2
 8012dd0:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8012dd4:	2200      	movs	r2, #0
 8012dd6:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo)
 8012dd8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012ddc:	4a10      	ldr	r2, [pc, #64]	; (8012e20 <readCanToStructs+0x29e0>)
 8012dde:	f240 4112 	movw	r1, #1042	; 0x412
 8012de2:	fb01 f303 	mul.w	r3, r1, r3
 8012de6:	4413      	add	r3, r2
 8012de8:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8012dec:	781b      	ldrb	r3, [r3, #0]
 8012dee:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012df2:	429a      	cmp	r2, r3
 8012df4:	d026      	beq.n	8012e44 <readCanToStructs+0x2a04>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_CUR_RELAY_STS_t));
 8012df6:	2284      	movs	r2, #132	; 0x84
 8012df8:	2100      	movs	r1, #0
 8012dfa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012dfc:	f00f fd96 	bl	802292c <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8012e00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012e04:	4a06      	ldr	r2, [pc, #24]	; (8012e20 <readCanToStructs+0x29e0>)
 8012e06:	f240 4112 	movw	r1, #1042	; 0x412
 8012e0a:	fb01 f303 	mul.w	r3, r1, r3
 8012e0e:	4413      	add	r3, r2
 8012e10:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8012e14:	2200      	movs	r2, #0
 8012e16:	701a      	strb	r2, [r3, #0]
					break;
 8012e18:	e165      	b.n	80130e6 <readCanToStructs+0x2ca6>
 8012e1a:	bf00      	nop
 8012e1c:	20005b08 	.word	0x20005b08
 8012e20:	200052e4 	.word	0x200052e4
 8012e24:	08027270 	.word	0x08027270
 8012e28:	200026c0 	.word	0x200026c0
 8012e2c:	200026c8 	.word	0x200026c8
 8012e30:	20002160 	.word	0x20002160
 8012e34:	20002164 	.word	0x20002164
 8012e38:	200026b4 	.word	0x200026b4
 8012e3c:	08027280 	.word	0x08027280
 8012e40:	20002754 	.word	0x20002754
				uc_pp_charPtr += (7 * uc_seqNo);
 8012e44:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012e48:	4613      	mov	r3, r2
 8012e4a:	00db      	lsls	r3, r3, #3
 8012e4c:	1a9b      	subs	r3, r3, r2
 8012e4e:	461a      	mov	r2, r3
 8012e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e52:	4413      	add	r3, r2
 8012e54:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012e56:	2301      	movs	r3, #1
 8012e58:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012e5c:	e016      	b.n	8012e8c <readCanToStructs+0x2a4c>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8012e5e:	4ba8      	ldr	r3, [pc, #672]	; (8013100 <readCanToStructs+0x2cc0>)
 8012e60:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012e64:	885b      	ldrh	r3, [r3, #2]
 8012e66:	461a      	mov	r2, r3
 8012e68:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012e6c:	49a4      	ldr	r1, [pc, #656]	; (8013100 <readCanToStructs+0x2cc0>)
 8012e6e:	0112      	lsls	r2, r2, #4
 8012e70:	440a      	add	r2, r1
 8012e72:	4413      	add	r3, r2
 8012e74:	3304      	adds	r3, #4
 8012e76:	781a      	ldrb	r2, [r3, #0]
 8012e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e7a:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8012e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e7e:	3301      	adds	r3, #1
 8012e80:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012e82:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012e86:	3301      	adds	r3, #1
 8012e88:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012e8c:	4b9c      	ldr	r3, [pc, #624]	; (8013100 <readCanToStructs+0x2cc0>)
 8012e8e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012e92:	885b      	ldrh	r3, [r3, #2]
 8012e94:	4a9a      	ldr	r2, [pc, #616]	; (8013100 <readCanToStructs+0x2cc0>)
 8012e96:	011b      	lsls	r3, r3, #4
 8012e98:	4413      	add	r3, r2
 8012e9a:	330c      	adds	r3, #12
 8012e9c:	781b      	ldrb	r3, [r3, #0]
 8012e9e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012ea2:	429a      	cmp	r2, r3
 8012ea4:	d3db      	bcc.n	8012e5e <readCanToStructs+0x2a1e>
				if ((((canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_CUR_RELAY_STS_t))
 8012ea6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012eaa:	4a96      	ldr	r2, [pc, #600]	; (8013104 <readCanToStructs+0x2cc4>)
 8012eac:	f240 4112 	movw	r1, #1042	; 0x412
 8012eb0:	fb01 f303 	mul.w	r3, r1, r3
 8012eb4:	4413      	add	r3, r2
 8012eb6:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8012eba:	781b      	ldrb	r3, [r3, #0]
 8012ebc:	461a      	mov	r2, r3
 8012ebe:	4613      	mov	r3, r2
 8012ec0:	00db      	lsls	r3, r3, #3
 8012ec2:	1a9a      	subs	r2, r3, r2
 8012ec4:	4b8e      	ldr	r3, [pc, #568]	; (8013100 <readCanToStructs+0x2cc0>)
 8012ec6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012eca:	885b      	ldrh	r3, [r3, #2]
 8012ecc:	498c      	ldr	r1, [pc, #560]	; (8013100 <readCanToStructs+0x2cc0>)
 8012ece:	011b      	lsls	r3, r3, #4
 8012ed0:	440b      	add	r3, r1
 8012ed2:	330c      	adds	r3, #12
 8012ed4:	781b      	ldrb	r3, [r3, #0]
 8012ed6:	3b01      	subs	r3, #1
 8012ed8:	4413      	add	r3, r2
 8012eda:	2b83      	cmp	r3, #131	; 0x83
 8012edc:	d915      	bls.n	8012f0a <readCanToStructs+0x2aca>
					printf("\nRCV EIPC1_RELAYS_2_OTHER\n");
 8012ede:	488a      	ldr	r0, [pc, #552]	; (8013108 <readCanToStructs+0x2cc8>)
 8012ee0:	f00f fea8 	bl	8022c34 <puts>
					Received_CAN_Relay_Status = YES;
 8012ee4:	4b89      	ldr	r3, [pc, #548]	; (801310c <readCanToStructs+0x2ccc>)
 8012ee6:	2201      	movs	r2, #1
 8012ee8:	701a      	strb	r2, [r3, #0]
					Medha_CAN_Xchanging_Happening = YES;
 8012eea:	4b89      	ldr	r3, [pc, #548]	; (8013110 <readCanToStructs+0x2cd0>)
 8012eec:	2201      	movs	r2, #1
 8012eee:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8012ef0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012ef4:	4a83      	ldr	r2, [pc, #524]	; (8013104 <readCanToStructs+0x2cc4>)
 8012ef6:	f240 4112 	movw	r1, #1042	; 0x412
 8012efa:	fb01 f303 	mul.w	r3, r1, r3
 8012efe:	4413      	add	r3, r2
 8012f00:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8012f04:	2200      	movs	r2, #0
 8012f06:	701a      	strb	r2, [r3, #0]
 8012f08:	e0ed      	b.n	80130e6 <readCanToStructs+0x2ca6>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].invalid = 1;
 8012f0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012f0e:	4a7d      	ldr	r2, [pc, #500]	; (8013104 <readCanToStructs+0x2cc4>)
 8012f10:	f240 4112 	movw	r1, #1042	; 0x412
 8012f14:	fb01 f303 	mul.w	r3, r1, r3
 8012f18:	4413      	add	r3, r2
 8012f1a:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8012f1e:	2201      	movs	r2, #1
 8012f20:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo++;
 8012f22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012f26:	4977      	ldr	r1, [pc, #476]	; (8013104 <readCanToStructs+0x2cc4>)
 8012f28:	f240 4212 	movw	r2, #1042	; 0x412
 8012f2c:	fb03 f202 	mul.w	r2, r3, r2
 8012f30:	440a      	add	r2, r1
 8012f32:	f202 420f 	addw	r2, r2, #1039	; 0x40f
 8012f36:	7812      	ldrb	r2, [r2, #0]
 8012f38:	3201      	adds	r2, #1
 8012f3a:	b2d0      	uxtb	r0, r2
 8012f3c:	4a71      	ldr	r2, [pc, #452]	; (8013104 <readCanToStructs+0x2cc4>)
 8012f3e:	f240 4112 	movw	r1, #1042	; 0x412
 8012f42:	fb01 f303 	mul.w	r3, r1, r3
 8012f46:	4413      	add	r3, r2
 8012f48:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8012f4c:	4602      	mov	r2, r0
 8012f4e:	701a      	strb	r2, [r3, #0]
				break;
 8012f50:	e0c9      	b.n	80130e6 <readCanToStructs+0x2ca6>
				uc_pp_charPtr = (uint8_t *)&Medha_CAN_Relay_Status_st;
 8012f52:	4b70      	ldr	r3, [pc, #448]	; (8013114 <readCanToStructs+0x2cd4>)
 8012f54:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8012f56:	4b6a      	ldr	r3, [pc, #424]	; (8013100 <readCanToStructs+0x2cc0>)
 8012f58:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012f5c:	885b      	ldrh	r3, [r3, #2]
 8012f5e:	4a68      	ldr	r2, [pc, #416]	; (8013100 <readCanToStructs+0x2cc0>)
 8012f60:	011b      	lsls	r3, r3, #4
 8012f62:	4413      	add	r3, r2
 8012f64:	3304      	adds	r3, #4
 8012f66:	781b      	ldrb	r3, [r3, #0]
 8012f68:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 8012f6c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d110      	bne.n	8012f96 <readCanToStructs+0x2b56>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_CUR_RELAY_STS_t));
 8012f74:	2284      	movs	r2, #132	; 0x84
 8012f76:	2100      	movs	r1, #0
 8012f78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012f7a:	f00f fcd7 	bl	802292c <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8012f7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012f82:	4a60      	ldr	r2, [pc, #384]	; (8013104 <readCanToStructs+0x2cc4>)
 8012f84:	f240 4112 	movw	r1, #1042	; 0x412
 8012f88:	fb01 f303 	mul.w	r3, r1, r3
 8012f8c:	4413      	add	r3, r2
 8012f8e:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8012f92:	2200      	movs	r2, #0
 8012f94:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo)
 8012f96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012f9a:	4a5a      	ldr	r2, [pc, #360]	; (8013104 <readCanToStructs+0x2cc4>)
 8012f9c:	f240 4112 	movw	r1, #1042	; 0x412
 8012fa0:	fb01 f303 	mul.w	r3, r1, r3
 8012fa4:	4413      	add	r3, r2
 8012fa6:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8012faa:	781b      	ldrb	r3, [r3, #0]
 8012fac:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012fb0:	429a      	cmp	r2, r3
 8012fb2:	d011      	beq.n	8012fd8 <readCanToStructs+0x2b98>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_CUR_RELAY_STS_t));
 8012fb4:	2284      	movs	r2, #132	; 0x84
 8012fb6:	2100      	movs	r1, #0
 8012fb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012fba:	f00f fcb7 	bl	802292c <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8012fbe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012fc2:	4a50      	ldr	r2, [pc, #320]	; (8013104 <readCanToStructs+0x2cc4>)
 8012fc4:	f240 4112 	movw	r1, #1042	; 0x412
 8012fc8:	fb01 f303 	mul.w	r3, r1, r3
 8012fcc:	4413      	add	r3, r2
 8012fce:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8012fd2:	2200      	movs	r2, #0
 8012fd4:	701a      	strb	r2, [r3, #0]
					break;
 8012fd6:	e086      	b.n	80130e6 <readCanToStructs+0x2ca6>
				uc_pp_charPtr += (7 * uc_seqNo);
 8012fd8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012fdc:	4613      	mov	r3, r2
 8012fde:	00db      	lsls	r3, r3, #3
 8012fe0:	1a9b      	subs	r3, r3, r2
 8012fe2:	461a      	mov	r2, r3
 8012fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fe6:	4413      	add	r3, r2
 8012fe8:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012fea:	2301      	movs	r3, #1
 8012fec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012ff0:	e016      	b.n	8013020 <readCanToStructs+0x2be0>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8012ff2:	4b43      	ldr	r3, [pc, #268]	; (8013100 <readCanToStructs+0x2cc0>)
 8012ff4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012ff8:	885b      	ldrh	r3, [r3, #2]
 8012ffa:	461a      	mov	r2, r3
 8012ffc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013000:	493f      	ldr	r1, [pc, #252]	; (8013100 <readCanToStructs+0x2cc0>)
 8013002:	0112      	lsls	r2, r2, #4
 8013004:	440a      	add	r2, r1
 8013006:	4413      	add	r3, r2
 8013008:	3304      	adds	r3, #4
 801300a:	781a      	ldrb	r2, [r3, #0]
 801300c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801300e:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8013010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013012:	3301      	adds	r3, #1
 8013014:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013016:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801301a:	3301      	adds	r3, #1
 801301c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013020:	4b37      	ldr	r3, [pc, #220]	; (8013100 <readCanToStructs+0x2cc0>)
 8013022:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013026:	885b      	ldrh	r3, [r3, #2]
 8013028:	4a35      	ldr	r2, [pc, #212]	; (8013100 <readCanToStructs+0x2cc0>)
 801302a:	011b      	lsls	r3, r3, #4
 801302c:	4413      	add	r3, r2
 801302e:	330c      	adds	r3, #12
 8013030:	781b      	ldrb	r3, [r3, #0]
 8013032:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013036:	429a      	cmp	r2, r3
 8013038:	d3db      	bcc.n	8012ff2 <readCanToStructs+0x2bb2>
				if ((((canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_CUR_RELAY_STS_t))
 801303a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801303e:	4a31      	ldr	r2, [pc, #196]	; (8013104 <readCanToStructs+0x2cc4>)
 8013040:	f240 4112 	movw	r1, #1042	; 0x412
 8013044:	fb01 f303 	mul.w	r3, r1, r3
 8013048:	4413      	add	r3, r2
 801304a:	f203 4311 	addw	r3, r3, #1041	; 0x411
 801304e:	781b      	ldrb	r3, [r3, #0]
 8013050:	461a      	mov	r2, r3
 8013052:	4613      	mov	r3, r2
 8013054:	00db      	lsls	r3, r3, #3
 8013056:	1a9a      	subs	r2, r3, r2
 8013058:	4b29      	ldr	r3, [pc, #164]	; (8013100 <readCanToStructs+0x2cc0>)
 801305a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801305e:	885b      	ldrh	r3, [r3, #2]
 8013060:	4927      	ldr	r1, [pc, #156]	; (8013100 <readCanToStructs+0x2cc0>)
 8013062:	011b      	lsls	r3, r3, #4
 8013064:	440b      	add	r3, r1
 8013066:	330c      	adds	r3, #12
 8013068:	781b      	ldrb	r3, [r3, #0]
 801306a:	3b01      	subs	r3, #1
 801306c:	4413      	add	r3, r2
 801306e:	2b83      	cmp	r3, #131	; 0x83
 8013070:	d915      	bls.n	801309e <readCanToStructs+0x2c5e>
					printf("\nRCV RELAY_DATA_EI2\n");
 8013072:	4829      	ldr	r0, [pc, #164]	; (8013118 <readCanToStructs+0x2cd8>)
 8013074:	f00f fdde 	bl	8022c34 <puts>
					Medha_CAN_Xchanging_Happening = YES;
 8013078:	4b25      	ldr	r3, [pc, #148]	; (8013110 <readCanToStructs+0x2cd0>)
 801307a:	2201      	movs	r2, #1
 801307c:	701a      	strb	r2, [r3, #0]
					Received_CAN_Relay_Status = YES;
 801307e:	4b23      	ldr	r3, [pc, #140]	; (801310c <readCanToStructs+0x2ccc>)
 8013080:	2201      	movs	r2, #1
 8013082:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8013084:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013088:	4a1e      	ldr	r2, [pc, #120]	; (8013104 <readCanToStructs+0x2cc4>)
 801308a:	f240 4112 	movw	r1, #1042	; 0x412
 801308e:	fb01 f303 	mul.w	r3, r1, r3
 8013092:	4413      	add	r3, r2
 8013094:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8013098:	2200      	movs	r2, #0
 801309a:	701a      	strb	r2, [r3, #0]
 801309c:	e022      	b.n	80130e4 <readCanToStructs+0x2ca4>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].invalid = 1;
 801309e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80130a2:	4a18      	ldr	r2, [pc, #96]	; (8013104 <readCanToStructs+0x2cc4>)
 80130a4:	f240 4112 	movw	r1, #1042	; 0x412
 80130a8:	fb01 f303 	mul.w	r3, r1, r3
 80130ac:	4413      	add	r3, r2
 80130ae:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 80130b2:	2201      	movs	r2, #1
 80130b4:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo++;
 80130b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80130ba:	4912      	ldr	r1, [pc, #72]	; (8013104 <readCanToStructs+0x2cc4>)
 80130bc:	f240 4212 	movw	r2, #1042	; 0x412
 80130c0:	fb03 f202 	mul.w	r2, r3, r2
 80130c4:	440a      	add	r2, r1
 80130c6:	f202 4211 	addw	r2, r2, #1041	; 0x411
 80130ca:	7812      	ldrb	r2, [r2, #0]
 80130cc:	3201      	adds	r2, #1
 80130ce:	b2d0      	uxtb	r0, r2
 80130d0:	4a0c      	ldr	r2, [pc, #48]	; (8013104 <readCanToStructs+0x2cc4>)
 80130d2:	f240 4112 	movw	r1, #1042	; 0x412
 80130d6:	fb01 f303 	mul.w	r3, r1, r3
 80130da:	4413      	add	r3, r2
 80130dc:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80130e0:	4602      	mov	r2, r0
 80130e2:	701a      	strb	r2, [r3, #0]
				break;
 80130e4:	bf00      	nop
		while(canDataReady())
 80130e6:	f7fd f955 	bl	8010394 <canDataReady>
 80130ea:	4603      	mov	r3, r0
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	f47f a9be 	bne.w	801246e <readCanToStructs+0x202e>
	break;
 80130f2:	e002      	b.n	80130fa <readCanToStructs+0x2cba>
		break;
 80130f4:	bf00      	nop
 80130f6:	e000      	b.n	80130fa <readCanToStructs+0x2cba>
			return;
 80130f8:	bf00      	nop
		/* Protocol Type */
	}
	UNUSED(uc_Loop_Index);
	UNUSED(uc_LocIndex);
}
 80130fa:	3738      	adds	r7, #56	; 0x38
 80130fc:	46bd      	mov	sp, r7
 80130fe:	bd80      	pop	{r7, pc}
 8013100:	20005b08 	.word	0x20005b08
 8013104:	200052e4 	.word	0x200052e4
 8013108:	080272a0 	.word	0x080272a0
 801310c:	20002161 	.word	0x20002161
 8013110:	20002160 	.word	0x20002160
 8013114:	20002754 	.word	0x20002754
 8013118:	080272bc 	.word	0x080272bc

0801311c <CheckCRC>:
}

/* USER CODE BEGIN 1 */

short int CheckCRC(unsigned char *pcMsg,short int iCount)
{
 801311c:	b580      	push	{r7, lr}
 801311e:	b084      	sub	sp, #16
 8013120:	af00      	add	r7, sp, #0
 8013122:	6078      	str	r0, [r7, #4]
 8013124:	460b      	mov	r3, r1
 8013126:	807b      	strh	r3, [r7, #2]
	static unsigned short int uiCrc,k = 0;
	short int retVal = 0;
 8013128:	2300      	movs	r3, #0
 801312a:	81fb      	strh	r3, [r7, #14]
	{
		printf("[%03u]:%02X ",i,pcMsg[i]);
	}
#endif

	uiCrc = GetCRC16( 0, pcMsg,iCount);
 801312c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013130:	461a      	mov	r2, r3
 8013132:	6879      	ldr	r1, [r7, #4]
 8013134:	2000      	movs	r0, #0
 8013136:	f000 f845 	bl	80131c4 <GetCRC16>
 801313a:	4603      	mov	r3, r0
 801313c:	461a      	mov	r2, r3
 801313e:	4b1d      	ldr	r3, [pc, #116]	; (80131b4 <CheckCRC+0x98>)
 8013140:	801a      	strh	r2, [r3, #0]
	k = (unsigned short int ) (pcMsg[iCount] & 0xff);
 8013142:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013146:	687a      	ldr	r2, [r7, #4]
 8013148:	4413      	add	r3, r2
 801314a:	781b      	ldrb	r3, [r3, #0]
 801314c:	b29a      	uxth	r2, r3
 801314e:	4b1a      	ldr	r3, [pc, #104]	; (80131b8 <CheckCRC+0x9c>)
 8013150:	801a      	strh	r2, [r3, #0]
	k = (unsigned short int ) (k<<8);
 8013152:	4b19      	ldr	r3, [pc, #100]	; (80131b8 <CheckCRC+0x9c>)
 8013154:	881b      	ldrh	r3, [r3, #0]
 8013156:	021b      	lsls	r3, r3, #8
 8013158:	b29a      	uxth	r2, r3
 801315a:	4b17      	ldr	r3, [pc, #92]	; (80131b8 <CheckCRC+0x9c>)
 801315c:	801a      	strh	r2, [r3, #0]
	k |= pcMsg[iCount+1] & 0xff;
 801315e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013162:	3301      	adds	r3, #1
 8013164:	687a      	ldr	r2, [r7, #4]
 8013166:	4413      	add	r3, r2
 8013168:	781b      	ldrb	r3, [r3, #0]
 801316a:	b29a      	uxth	r2, r3
 801316c:	4b12      	ldr	r3, [pc, #72]	; (80131b8 <CheckCRC+0x9c>)
 801316e:	881b      	ldrh	r3, [r3, #0]
 8013170:	4313      	orrs	r3, r2
 8013172:	b29a      	uxth	r2, r3
 8013174:	4b10      	ldr	r3, [pc, #64]	; (80131b8 <CheckCRC+0x9c>)
 8013176:	801a      	strh	r2, [r3, #0]

	if(k == uiCrc)
 8013178:	4b0f      	ldr	r3, [pc, #60]	; (80131b8 <CheckCRC+0x9c>)
 801317a:	881a      	ldrh	r2, [r3, #0]
 801317c:	4b0d      	ldr	r3, [pc, #52]	; (80131b4 <CheckCRC+0x98>)
 801317e:	881b      	ldrh	r3, [r3, #0]
 8013180:	429a      	cmp	r2, r3
 8013182:	d105      	bne.n	8013190 <CheckCRC+0x74>
	{
		retVal = 1;
 8013184:	2301      	movs	r3, #1
 8013186:	81fb      	strh	r3, [r7, #14]
		return k;
 8013188:	4b0b      	ldr	r3, [pc, #44]	; (80131b8 <CheckCRC+0x9c>)
 801318a:	881b      	ldrh	r3, [r3, #0]
 801318c:	b21b      	sxth	r3, r3
 801318e:	e00d      	b.n	80131ac <CheckCRC+0x90>
	}
	printf("\nCalculated CRC:%04x\n",uiCrc);
 8013190:	4b08      	ldr	r3, [pc, #32]	; (80131b4 <CheckCRC+0x98>)
 8013192:	881b      	ldrh	r3, [r3, #0]
 8013194:	4619      	mov	r1, r3
 8013196:	4809      	ldr	r0, [pc, #36]	; (80131bc <CheckCRC+0xa0>)
 8013198:	f00f fcb0 	bl	8022afc <iprintf>
	printf("\nExtracted CRC :%04x\n",k);
 801319c:	4b06      	ldr	r3, [pc, #24]	; (80131b8 <CheckCRC+0x9c>)
 801319e:	881b      	ldrh	r3, [r3, #0]
 80131a0:	4619      	mov	r1, r3
 80131a2:	4807      	ldr	r0, [pc, #28]	; (80131c0 <CheckCRC+0xa4>)
 80131a4:	f00f fcaa 	bl	8022afc <iprintf>
	return retVal;
 80131a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80131ac:	4618      	mov	r0, r3
 80131ae:	3710      	adds	r7, #16
 80131b0:	46bd      	mov	sp, r7
 80131b2:	bd80      	pop	{r7, pc}
 80131b4:	20009c64 	.word	0x20009c64
 80131b8:	20009c66 	.word	0x20009c66
 80131bc:	080272d0 	.word	0x080272d0
 80131c0:	080272e8 	.word	0x080272e8

080131c4 <GetCRC16>:

unsigned short int GetCRC16 (short int iStart,unsigned char *pcPtr, short int iNum)
{
 80131c4:	b480      	push	{r7}
 80131c6:	b085      	sub	sp, #20
 80131c8:	af00      	add	r7, sp, #0
 80131ca:	4603      	mov	r3, r0
 80131cc:	6039      	str	r1, [r7, #0]
 80131ce:	80fb      	strh	r3, [r7, #6]
 80131d0:	4613      	mov	r3, r2
 80131d2:	80bb      	strh	r3, [r7, #4]
	unsigned short int uiCrc = (unsigned short int ) iStart;
 80131d4:	88fb      	ldrh	r3, [r7, #6]
 80131d6:	81fb      	strh	r3, [r7, #14]
	short int r;

	/* while there is more data to process */
	while (iNum-- > 0)
 80131d8:	e038      	b.n	801324c <GetCRC16+0x88>
	{
		/* compute checksum of lower four bits of *pcPtr */
		r = ulCrc16Table[uiCrc & 0xF];
 80131da:	89fb      	ldrh	r3, [r7, #14]
 80131dc:	f003 030f 	and.w	r3, r3, #15
 80131e0:	4a22      	ldr	r2, [pc, #136]	; (801326c <GetCRC16+0xa8>)
 80131e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80131e6:	81bb      	strh	r3, [r7, #12]
		uiCrc = (unsigned short int) ((uiCrc >> 4) & 0x0FFF);
 80131e8:	89fb      	ldrh	r3, [r7, #14]
 80131ea:	091b      	lsrs	r3, r3, #4
 80131ec:	81fb      	strh	r3, [r7, #14]
		uiCrc = (unsigned short int) (uiCrc ^ r ^ ulCrc16Table[*pcPtr & 0xF]);
 80131ee:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80131f2:	89bb      	ldrh	r3, [r7, #12]
 80131f4:	4053      	eors	r3, r2
 80131f6:	b21a      	sxth	r2, r3
 80131f8:	683b      	ldr	r3, [r7, #0]
 80131fa:	781b      	ldrb	r3, [r3, #0]
 80131fc:	f003 030f 	and.w	r3, r3, #15
 8013200:	491a      	ldr	r1, [pc, #104]	; (801326c <GetCRC16+0xa8>)
 8013202:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8013206:	b21b      	sxth	r3, r3
 8013208:	4053      	eors	r3, r2
 801320a:	b21b      	sxth	r3, r3
 801320c:	81fb      	strh	r3, [r7, #14]

		/* now compute checksum of upper four bits of *pcPtr */
		r = ulCrc16Table[uiCrc & 0xF];
 801320e:	89fb      	ldrh	r3, [r7, #14]
 8013210:	f003 030f 	and.w	r3, r3, #15
 8013214:	4a15      	ldr	r2, [pc, #84]	; (801326c <GetCRC16+0xa8>)
 8013216:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801321a:	81bb      	strh	r3, [r7, #12]
		uiCrc =(unsigned short int) ((uiCrc >> 4) & 0x0FFF);
 801321c:	89fb      	ldrh	r3, [r7, #14]
 801321e:	091b      	lsrs	r3, r3, #4
 8013220:	81fb      	strh	r3, [r7, #14]
		uiCrc =(unsigned short int) (uiCrc ^ r ^ ulCrc16Table[(*pcPtr >> 4) & 0xF]);
 8013222:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8013226:	89bb      	ldrh	r3, [r7, #12]
 8013228:	4053      	eors	r3, r2
 801322a:	b21a      	sxth	r2, r3
 801322c:	683b      	ldr	r3, [r7, #0]
 801322e:	781b      	ldrb	r3, [r3, #0]
 8013230:	091b      	lsrs	r3, r3, #4
 8013232:	b2db      	uxtb	r3, r3
 8013234:	f003 030f 	and.w	r3, r3, #15
 8013238:	490c      	ldr	r1, [pc, #48]	; (801326c <GetCRC16+0xa8>)
 801323a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801323e:	b21b      	sxth	r3, r3
 8013240:	4053      	eors	r3, r2
 8013242:	b21b      	sxth	r3, r3
 8013244:	81fb      	strh	r3, [r7, #14]

		/* next... */
		pcPtr++;
 8013246:	683b      	ldr	r3, [r7, #0]
 8013248:	3301      	adds	r3, #1
 801324a:	603b      	str	r3, [r7, #0]
	while (iNum-- > 0)
 801324c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8013250:	b29a      	uxth	r2, r3
 8013252:	3a01      	subs	r2, #1
 8013254:	b292      	uxth	r2, r2
 8013256:	80ba      	strh	r2, [r7, #4]
 8013258:	2b00      	cmp	r3, #0
 801325a:	dcbe      	bgt.n	80131da <GetCRC16+0x16>
	}
	return(uiCrc);
 801325c:	89fb      	ldrh	r3, [r7, #14]
}
 801325e:	4618      	mov	r0, r3
 8013260:	3714      	adds	r7, #20
 8013262:	46bd      	mov	sp, r7
 8013264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013268:	4770      	bx	lr
 801326a:	bf00      	nop
 801326c:	08029198 	.word	0x08029198

08013270 <ComputeCRC>:

unsigned short int ComputeCRC(unsigned char *uc_pp_pcMsg, const short int Ksi_iCount)
{
 8013270:	b580      	push	{r7, lr}
 8013272:	b082      	sub	sp, #8
 8013274:	af00      	add	r7, sp, #0
 8013276:	6078      	str	r0, [r7, #4]
 8013278:	460b      	mov	r3, r1
 801327a:	807b      	strh	r3, [r7, #2]
	static unsigned short int Susi_uiCrc = 0,Susi_CalculateCRC = 0;
	Susi_uiCrc = GetCRC16( 0, uc_pp_pcMsg, Ksi_iCount);
 801327c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013280:	461a      	mov	r2, r3
 8013282:	6879      	ldr	r1, [r7, #4]
 8013284:	2000      	movs	r0, #0
 8013286:	f7ff ff9d 	bl	80131c4 <GetCRC16>
 801328a:	4603      	mov	r3, r0
 801328c:	461a      	mov	r2, r3
 801328e:	4b11      	ldr	r3, [pc, #68]	; (80132d4 <ComputeCRC+0x64>)
 8013290:	801a      	strh	r2, [r3, #0]
	Susi_CalculateCRC=Susi_uiCrc;
 8013292:	4b10      	ldr	r3, [pc, #64]	; (80132d4 <ComputeCRC+0x64>)
 8013294:	881a      	ldrh	r2, [r3, #0]
 8013296:	4b10      	ldr	r3, [pc, #64]	; (80132d8 <ComputeCRC+0x68>)
 8013298:	801a      	strh	r2, [r3, #0]

	uc_pp_pcMsg[Ksi_iCount+1] = (char) (Susi_uiCrc & 0x00ff);
 801329a:	4b0e      	ldr	r3, [pc, #56]	; (80132d4 <ComputeCRC+0x64>)
 801329c:	8819      	ldrh	r1, [r3, #0]
 801329e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80132a2:	3301      	adds	r3, #1
 80132a4:	687a      	ldr	r2, [r7, #4]
 80132a6:	4413      	add	r3, r2
 80132a8:	b2ca      	uxtb	r2, r1
 80132aa:	701a      	strb	r2, [r3, #0]
	Susi_uiCrc =(unsigned short int) (Susi_uiCrc >> 8);
 80132ac:	4b09      	ldr	r3, [pc, #36]	; (80132d4 <ComputeCRC+0x64>)
 80132ae:	881b      	ldrh	r3, [r3, #0]
 80132b0:	0a1b      	lsrs	r3, r3, #8
 80132b2:	b29a      	uxth	r2, r3
 80132b4:	4b07      	ldr	r3, [pc, #28]	; (80132d4 <ComputeCRC+0x64>)
 80132b6:	801a      	strh	r2, [r3, #0]
	uc_pp_pcMsg[Ksi_iCount] = (char) (Susi_uiCrc & 0x00ff);
 80132b8:	4b06      	ldr	r3, [pc, #24]	; (80132d4 <ComputeCRC+0x64>)
 80132ba:	8819      	ldrh	r1, [r3, #0]
 80132bc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80132c0:	687a      	ldr	r2, [r7, #4]
 80132c2:	4413      	add	r3, r2
 80132c4:	b2ca      	uxtb	r2, r1
 80132c6:	701a      	strb	r2, [r3, #0]


	return Susi_CalculateCRC;
 80132c8:	4b03      	ldr	r3, [pc, #12]	; (80132d8 <ComputeCRC+0x68>)
 80132ca:	881b      	ldrh	r3, [r3, #0]
}
 80132cc:	4618      	mov	r0, r3
 80132ce:	3708      	adds	r7, #8
 80132d0:	46bd      	mov	sp, r7
 80132d2:	bd80      	pop	{r7, pc}
 80132d4:	20009c68 	.word	0x20009c68
 80132d8:	20009c6a 	.word	0x20009c6a

080132dc <ReverseCRCPolynomial>:


/*____________________________ANSALDO_CRC__________________________*/

unsigned int ReverseCRCPolynomial(unsigned int polynomial)
{
 80132dc:	b480      	push	{r7}
 80132de:	b087      	sub	sp, #28
 80132e0:	af00      	add	r7, sp, #0
 80132e2:	6078      	str	r0, [r7, #4]
	unsigned int RevPol = 0;
 80132e4:	2300      	movs	r3, #0
 80132e6:	617b      	str	r3, [r7, #20]
	unsigned int TempPol = 0;
 80132e8:	2300      	movs	r3, #0
 80132ea:	613b      	str	r3, [r7, #16]
	unsigned int Temp = 0;
 80132ec:	2300      	movs	r3, #0
 80132ee:	60bb      	str	r3, [r7, #8]
	int i;

	TempPol = polynomial << 1; // Remove MSB by shifting one position
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	005b      	lsls	r3, r3, #1
 80132f4:	613b      	str	r3, [r7, #16]

	for (i = 0; i < 32; i++)
 80132f6:	2300      	movs	r3, #0
 80132f8:	60fb      	str	r3, [r7, #12]
 80132fa:	e012      	b.n	8013322 <ReverseCRCPolynomial+0x46>
	{

		Temp = (TempPol & 1);
 80132fc:	693b      	ldr	r3, [r7, #16]
 80132fe:	f003 0301 	and.w	r3, r3, #1
 8013302:	60bb      	str	r3, [r7, #8]
		RevPol = RevPol | (Temp << (31 - i));
 8013304:	68fb      	ldr	r3, [r7, #12]
 8013306:	f1c3 031f 	rsb	r3, r3, #31
 801330a:	68ba      	ldr	r2, [r7, #8]
 801330c:	fa02 f303 	lsl.w	r3, r2, r3
 8013310:	697a      	ldr	r2, [r7, #20]
 8013312:	4313      	orrs	r3, r2
 8013314:	617b      	str	r3, [r7, #20]
		TempPol = TempPol >> 1;
 8013316:	693b      	ldr	r3, [r7, #16]
 8013318:	085b      	lsrs	r3, r3, #1
 801331a:	613b      	str	r3, [r7, #16]
	for (i = 0; i < 32; i++)
 801331c:	68fb      	ldr	r3, [r7, #12]
 801331e:	3301      	adds	r3, #1
 8013320:	60fb      	str	r3, [r7, #12]
 8013322:	68fb      	ldr	r3, [r7, #12]
 8013324:	2b1f      	cmp	r3, #31
 8013326:	dde9      	ble.n	80132fc <ReverseCRCPolynomial+0x20>
	}

	return (RevPol);
 8013328:	697b      	ldr	r3, [r7, #20]
}
 801332a:	4618      	mov	r0, r3
 801332c:	371c      	adds	r7, #28
 801332e:	46bd      	mov	sp, r7
 8013330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013334:	4770      	bx	lr
	...

08013338 <CalculateDirectReverseCrc>:

unsigned int CalculateDirectReverseCrc(unsigned char *Arr, unsigned short int Listsize)
{
 8013338:	b580      	push	{r7, lr}
 801333a:	b088      	sub	sp, #32
 801333c:	af00      	add	r7, sp, #0
 801333e:	6078      	str	r0, [r7, #4]
 8013340:	460b      	mov	r3, r1
 8013342:	807b      	strh	r3, [r7, #2]
	int Crc = 0;
 8013344:	2300      	movs	r3, #0
 8013346:	61fb      	str	r3, [r7, #28]
	unsigned int RPoly = 0;
 8013348:	2300      	movs	r3, #0
 801334a:	617b      	str	r3, [r7, #20]
	int converted = 0;
 801334c:	2300      	movs	r3, #0
 801334e:	613b      	str	r3, [r7, #16]
	int i=0;
 8013350:	2300      	movs	r3, #0
 8013352:	61bb      	str	r3, [r7, #24]
	unsigned int polynomial = 0xD20D8A81;
 8013354:	4b26      	ldr	r3, [pc, #152]	; (80133f0 <CalculateDirectReverseCrc+0xb8>)
 8013356:	60fb      	str	r3, [r7, #12]

	//printf("Arr[0]=0x%x\n",Arr[0]);
	//printf("Arr[%d]=0x%x\n",Listsize,Arr[Listsize]);
	RPoly = ReverseCRCPolynomial(polynomial);
 8013358:	68f8      	ldr	r0, [r7, #12]
 801335a:	f7ff ffbf 	bl	80132dc <ReverseCRCPolynomial>
 801335e:	6178      	str	r0, [r7, #20]

	for (i = 0; i < Listsize; i++)
 8013360:	2300      	movs	r3, #0
 8013362:	61bb      	str	r3, [r7, #24]
 8013364:	e00d      	b.n	8013382 <CalculateDirectReverseCrc+0x4a>
	{
		//	printf("ARR[%d]=0x%x|",i,Arr[i]);
		Crc = AnsoldoCrc(Crc, Arr[i], RPoly);
 8013366:	69f8      	ldr	r0, [r7, #28]
 8013368:	69bb      	ldr	r3, [r7, #24]
 801336a:	687a      	ldr	r2, [r7, #4]
 801336c:	4413      	add	r3, r2
 801336e:	781b      	ldrb	r3, [r3, #0]
 8013370:	697a      	ldr	r2, [r7, #20]
 8013372:	4619      	mov	r1, r3
 8013374:	f000 f844 	bl	8013400 <AnsoldoCrc>
 8013378:	4603      	mov	r3, r0
 801337a:	61fb      	str	r3, [r7, #28]
	for (i = 0; i < Listsize; i++)
 801337c:	69bb      	ldr	r3, [r7, #24]
 801337e:	3301      	adds	r3, #1
 8013380:	61bb      	str	r3, [r7, #24]
 8013382:	887b      	ldrh	r3, [r7, #2]
 8013384:	69ba      	ldr	r2, [r7, #24]
 8013386:	429a      	cmp	r2, r3
 8013388:	dbed      	blt.n	8013366 <CalculateDirectReverseCrc+0x2e>
	}
	/*____________________REVERSE CRC____________________*/
	//printf("Before Calculated crc:0x%x\n", Crc);
	converted |= ((0xff & Crc) << 24);
 801338a:	69fb      	ldr	r3, [r7, #28]
 801338c:	061b      	lsls	r3, r3, #24
 801338e:	693a      	ldr	r2, [r7, #16]
 8013390:	4313      	orrs	r3, r2
 8013392:	613b      	str	r3, [r7, #16]
	converted |= (((0xff << 8) & Crc) << 8);
 8013394:	69fb      	ldr	r3, [r7, #28]
 8013396:	021b      	lsls	r3, r3, #8
 8013398:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801339c:	693a      	ldr	r2, [r7, #16]
 801339e:	4313      	orrs	r3, r2
 80133a0:	613b      	str	r3, [r7, #16]
	converted |= (((0xff << 16) & Crc) >> 8);
 80133a2:	69fb      	ldr	r3, [r7, #28]
 80133a4:	121b      	asrs	r3, r3, #8
 80133a6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80133aa:	693a      	ldr	r2, [r7, #16]
 80133ac:	4313      	orrs	r3, r2
 80133ae:	613b      	str	r3, [r7, #16]
	converted |= (((0xffu << 24) & Crc) >> 24); //Appended u to avoid warning out of range
 80133b0:	69fb      	ldr	r3, [r7, #28]
 80133b2:	0e1a      	lsrs	r2, r3, #24
 80133b4:	693b      	ldr	r3, [r7, #16]
 80133b6:	4313      	orrs	r3, r2
 80133b8:	613b      	str	r3, [r7, #16]
	/*____________________REVERSE CRC____________________*/
	//printf("After Calculated crc:0x%x\n", converted);

	if(Rx_Seq_failure == 1)
 80133ba:	4b0e      	ldr	r3, [pc, #56]	; (80133f4 <CalculateDirectReverseCrc+0xbc>)
 80133bc:	781b      	ldrb	r3, [r3, #0]
 80133be:	2b01      	cmp	r3, #1
 80133c0:	d110      	bne.n	80133e4 <CalculateDirectReverseCrc+0xac>
	{
		return (converted+(HAL_RNG_GetRandomNumber(&hrng) % 10) + 1);
 80133c2:	480d      	ldr	r0, [pc, #52]	; (80133f8 <CalculateDirectReverseCrc+0xc0>)
 80133c4:	f007 f842 	bl	801a44c <HAL_RNG_GetRandomNumber>
 80133c8:	4601      	mov	r1, r0
 80133ca:	4b0c      	ldr	r3, [pc, #48]	; (80133fc <CalculateDirectReverseCrc+0xc4>)
 80133cc:	fba3 2301 	umull	r2, r3, r3, r1
 80133d0:	08da      	lsrs	r2, r3, #3
 80133d2:	4613      	mov	r3, r2
 80133d4:	009b      	lsls	r3, r3, #2
 80133d6:	4413      	add	r3, r2
 80133d8:	005b      	lsls	r3, r3, #1
 80133da:	1aca      	subs	r2, r1, r3
 80133dc:	693b      	ldr	r3, [r7, #16]
 80133de:	4413      	add	r3, r2
 80133e0:	3301      	adds	r3, #1
 80133e2:	e000      	b.n	80133e6 <CalculateDirectReverseCrc+0xae>
	}

	return converted;
 80133e4:	693b      	ldr	r3, [r7, #16]
}
 80133e6:	4618      	mov	r0, r3
 80133e8:	3720      	adds	r7, #32
 80133ea:	46bd      	mov	sp, r7
 80133ec:	bd80      	pop	{r7, pc}
 80133ee:	bf00      	nop
 80133f0:	d20d8a81 	.word	0xd20d8a81
 80133f4:	20000e44 	.word	0x20000e44
 80133f8:	20009d2c 	.word	0x20009d2c
 80133fc:	cccccccd 	.word	0xcccccccd

08013400 <AnsoldoCrc>:

unsigned int AnsoldoCrc(unsigned int Crc, unsigned char InputData, unsigned int Rpoly)
{
 8013400:	b480      	push	{r7}
 8013402:	b08b      	sub	sp, #44	; 0x2c
 8013404:	af00      	add	r7, sp, #0
 8013406:	60f8      	str	r0, [r7, #12]
 8013408:	460b      	mov	r3, r1
 801340a:	607a      	str	r2, [r7, #4]
 801340c:	72fb      	strb	r3, [r7, #11]
	unsigned char i;
	unsigned int xorvalue; /* XOR of bit of data and EDC values */
	unsigned int CrcLsb;   /* Bit 0 of EDC value / uint DataLsb; / Bit 0 of data byte */
	unsigned int DataLsb;
	unsigned int databyte;				/* Current shifted value of data byte */
	databyte = (unsigned int)InputData; /* translated from char to int format */
 801340e:	7afb      	ldrb	r3, [r7, #11]
 8013410:	623b      	str	r3, [r7, #32]

	for (i = 1; i <= 8; i++)
 8013412:	2301      	movs	r3, #1
 8013414:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013418:	e01d      	b.n	8013456 <AnsoldoCrc+0x56>
	{
		CrcLsb = Crc & 1;		/* get LSB of CRC Value */
 801341a:	68fb      	ldr	r3, [r7, #12]
 801341c:	f003 0301 	and.w	r3, r3, #1
 8013420:	61fb      	str	r3, [r7, #28]
		DataLsb = databyte & 1; /*get LSB of Data */
 8013422:	6a3b      	ldr	r3, [r7, #32]
 8013424:	f003 0301 	and.w	r3, r3, #1
 8013428:	61bb      	str	r3, [r7, #24]
		/*byte of current bits left in data */
		Crc >>= 1; /* shift CRC by one bit */
 801342a:	68fb      	ldr	r3, [r7, #12]
 801342c:	085b      	lsrs	r3, r3, #1
 801342e:	60fb      	str	r3, [r7, #12]
		xorvalue = CrcLsb ^ DataLsb;
 8013430:	69fa      	ldr	r2, [r7, #28]
 8013432:	69bb      	ldr	r3, [r7, #24]
 8013434:	4053      	eors	r3, r2
 8013436:	617b      	str	r3, [r7, #20]

		if (xorvalue == 1)
 8013438:	697b      	ldr	r3, [r7, #20]
 801343a:	2b01      	cmp	r3, #1
 801343c:	d103      	bne.n	8013446 <AnsoldoCrc+0x46>
		{
			Crc ^= Rpoly; /* XOR not zero then xor in poly */
 801343e:	68fa      	ldr	r2, [r7, #12]
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	4053      	eors	r3, r2
 8013444:	60fb      	str	r3, [r7, #12]
		}
		databyte >>= 1; /* Shift data byte*/
 8013446:	6a3b      	ldr	r3, [r7, #32]
 8013448:	085b      	lsrs	r3, r3, #1
 801344a:	623b      	str	r3, [r7, #32]
	for (i = 1; i <= 8; i++)
 801344c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013450:	3301      	adds	r3, #1
 8013452:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013456:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801345a:	2b08      	cmp	r3, #8
 801345c:	d9dd      	bls.n	801341a <AnsoldoCrc+0x1a>
	}
	return (Crc);
 801345e:	68fb      	ldr	r3, [r7, #12]
}
 8013460:	4618      	mov	r0, r3
 8013462:	372c      	adds	r7, #44	; 0x2c
 8013464:	46bd      	mov	sp, r7
 8013466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801346a:	4770      	bx	lr

0801346c <MX_GPIO_Init>:
        * EXTI
     PD0   ------> CAN1_RX
     PD1   ------> CAN1_TX
*/
void MX_GPIO_Init(void)
{
 801346c:	b580      	push	{r7, lr}
 801346e:	b090      	sub	sp, #64	; 0x40
 8013470:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013472:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013476:	2200      	movs	r2, #0
 8013478:	601a      	str	r2, [r3, #0]
 801347a:	605a      	str	r2, [r3, #4]
 801347c:	609a      	str	r2, [r3, #8]
 801347e:	60da      	str	r2, [r3, #12]
 8013480:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8013482:	4bb2      	ldr	r3, [pc, #712]	; (801374c <MX_GPIO_Init+0x2e0>)
 8013484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013486:	4ab1      	ldr	r2, [pc, #708]	; (801374c <MX_GPIO_Init+0x2e0>)
 8013488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801348c:	6313      	str	r3, [r2, #48]	; 0x30
 801348e:	4baf      	ldr	r3, [pc, #700]	; (801374c <MX_GPIO_Init+0x2e0>)
 8013490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013496:	62bb      	str	r3, [r7, #40]	; 0x28
 8013498:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOF_CLK_ENABLE();
 801349a:	4bac      	ldr	r3, [pc, #688]	; (801374c <MX_GPIO_Init+0x2e0>)
 801349c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801349e:	4aab      	ldr	r2, [pc, #684]	; (801374c <MX_GPIO_Init+0x2e0>)
 80134a0:	f043 0320 	orr.w	r3, r3, #32
 80134a4:	6313      	str	r3, [r2, #48]	; 0x30
 80134a6:	4ba9      	ldr	r3, [pc, #676]	; (801374c <MX_GPIO_Init+0x2e0>)
 80134a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80134aa:	f003 0320 	and.w	r3, r3, #32
 80134ae:	627b      	str	r3, [r7, #36]	; 0x24
 80134b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80134b2:	4ba6      	ldr	r3, [pc, #664]	; (801374c <MX_GPIO_Init+0x2e0>)
 80134b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80134b6:	4aa5      	ldr	r2, [pc, #660]	; (801374c <MX_GPIO_Init+0x2e0>)
 80134b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80134bc:	6313      	str	r3, [r2, #48]	; 0x30
 80134be:	4ba3      	ldr	r3, [pc, #652]	; (801374c <MX_GPIO_Init+0x2e0>)
 80134c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80134c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80134c6:	623b      	str	r3, [r7, #32]
 80134c8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80134ca:	4ba0      	ldr	r3, [pc, #640]	; (801374c <MX_GPIO_Init+0x2e0>)
 80134cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80134ce:	4a9f      	ldr	r2, [pc, #636]	; (801374c <MX_GPIO_Init+0x2e0>)
 80134d0:	f043 0304 	orr.w	r3, r3, #4
 80134d4:	6313      	str	r3, [r2, #48]	; 0x30
 80134d6:	4b9d      	ldr	r3, [pc, #628]	; (801374c <MX_GPIO_Init+0x2e0>)
 80134d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80134da:	f003 0304 	and.w	r3, r3, #4
 80134de:	61fb      	str	r3, [r7, #28]
 80134e0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80134e2:	4b9a      	ldr	r3, [pc, #616]	; (801374c <MX_GPIO_Init+0x2e0>)
 80134e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80134e6:	4a99      	ldr	r2, [pc, #612]	; (801374c <MX_GPIO_Init+0x2e0>)
 80134e8:	f043 0301 	orr.w	r3, r3, #1
 80134ec:	6313      	str	r3, [r2, #48]	; 0x30
 80134ee:	4b97      	ldr	r3, [pc, #604]	; (801374c <MX_GPIO_Init+0x2e0>)
 80134f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80134f2:	f003 0301 	and.w	r3, r3, #1
 80134f6:	61bb      	str	r3, [r7, #24]
 80134f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80134fa:	4b94      	ldr	r3, [pc, #592]	; (801374c <MX_GPIO_Init+0x2e0>)
 80134fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80134fe:	4a93      	ldr	r2, [pc, #588]	; (801374c <MX_GPIO_Init+0x2e0>)
 8013500:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013504:	6313      	str	r3, [r2, #48]	; 0x30
 8013506:	4b91      	ldr	r3, [pc, #580]	; (801374c <MX_GPIO_Init+0x2e0>)
 8013508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801350a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801350e:	617b      	str	r3, [r7, #20]
 8013510:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8013512:	4b8e      	ldr	r3, [pc, #568]	; (801374c <MX_GPIO_Init+0x2e0>)
 8013514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013516:	4a8d      	ldr	r2, [pc, #564]	; (801374c <MX_GPIO_Init+0x2e0>)
 8013518:	f043 0310 	orr.w	r3, r3, #16
 801351c:	6313      	str	r3, [r2, #48]	; 0x30
 801351e:	4b8b      	ldr	r3, [pc, #556]	; (801374c <MX_GPIO_Init+0x2e0>)
 8013520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013522:	f003 0310 	and.w	r3, r3, #16
 8013526:	613b      	str	r3, [r7, #16]
 8013528:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 801352a:	4b88      	ldr	r3, [pc, #544]	; (801374c <MX_GPIO_Init+0x2e0>)
 801352c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801352e:	4a87      	ldr	r2, [pc, #540]	; (801374c <MX_GPIO_Init+0x2e0>)
 8013530:	f043 0302 	orr.w	r3, r3, #2
 8013534:	6313      	str	r3, [r2, #48]	; 0x30
 8013536:	4b85      	ldr	r3, [pc, #532]	; (801374c <MX_GPIO_Init+0x2e0>)
 8013538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801353a:	f003 0302 	and.w	r3, r3, #2
 801353e:	60fb      	str	r3, [r7, #12]
 8013540:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8013542:	4b82      	ldr	r3, [pc, #520]	; (801374c <MX_GPIO_Init+0x2e0>)
 8013544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013546:	4a81      	ldr	r2, [pc, #516]	; (801374c <MX_GPIO_Init+0x2e0>)
 8013548:	f043 0308 	orr.w	r3, r3, #8
 801354c:	6313      	str	r3, [r2, #48]	; 0x30
 801354e:	4b7f      	ldr	r3, [pc, #508]	; (801374c <MX_GPIO_Init+0x2e0>)
 8013550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013552:	f003 0308 	and.w	r3, r3, #8
 8013556:	60bb      	str	r3, [r7, #8]
 8013558:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 801355a:	4b7c      	ldr	r3, [pc, #496]	; (801374c <MX_GPIO_Init+0x2e0>)
 801355c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801355e:	4a7b      	ldr	r2, [pc, #492]	; (801374c <MX_GPIO_Init+0x2e0>)
 8013560:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8013564:	6313      	str	r3, [r2, #48]	; 0x30
 8013566:	4b79      	ldr	r3, [pc, #484]	; (801374c <MX_GPIO_Init+0x2e0>)
 8013568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801356a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801356e:	607b      	str	r3, [r7, #4]
 8013570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8013572:	4b76      	ldr	r3, [pc, #472]	; (801374c <MX_GPIO_Init+0x2e0>)
 8013574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013576:	4a75      	ldr	r2, [pc, #468]	; (801374c <MX_GPIO_Init+0x2e0>)
 8013578:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801357c:	6313      	str	r3, [r2, #48]	; 0x30
 801357e:	4b73      	ldr	r3, [pc, #460]	; (801374c <MX_GPIO_Init+0x2e0>)
 8013580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013582:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013586:	603b      	str	r3, [r7, #0]
 8013588:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, OP5_Pin|OP8_Pin, GPIO_PIN_RESET);
 801358a:	2200      	movs	r2, #0
 801358c:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 8013590:	486f      	ldr	r0, [pc, #444]	; (8013750 <MX_GPIO_Init+0x2e4>)
 8013592:	f004 ff79 	bl	8018488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, OP1_Pin|OP4_Pin, GPIO_PIN_RESET);
 8013596:	2200      	movs	r2, #0
 8013598:	f44f 6184 	mov.w	r1, #1056	; 0x420
 801359c:	486d      	ldr	r0, [pc, #436]	; (8013754 <MX_GPIO_Init+0x2e8>)
 801359e:	f004 ff73 	bl	8018488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, OP7_Pin|S1_LED_Pin|S2_LED_Pin|OP9_Pin, GPIO_PIN_RESET);
 80135a2:	2200      	movs	r2, #0
 80135a4:	f240 7104 	movw	r1, #1796	; 0x704
 80135a8:	486b      	ldr	r0, [pc, #428]	; (8013758 <MX_GPIO_Init+0x2ec>)
 80135aa:	f004 ff6d 	bl	8018488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS4_GPIO_Port, CS4_Pin, GPIO_PIN_SET);
 80135ae:	2201      	movs	r2, #1
 80135b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80135b4:	4869      	ldr	r0, [pc, #420]	; (801375c <MX_GPIO_Init+0x2f0>)
 80135b6:	f004 ff67 	bl	8018488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OP3_Pin|OP6_Pin, GPIO_PIN_RESET);
 80135ba:	2200      	movs	r2, #0
 80135bc:	f241 0104 	movw	r1, #4100	; 0x1004
 80135c0:	4867      	ldr	r0, [pc, #412]	; (8013760 <MX_GPIO_Init+0x2f4>)
 80135c2:	f004 ff61 	bl	8018488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_RESET_GPIO_Port, SPI_RESET_Pin, GPIO_PIN_SET);
 80135c6:	2201      	movs	r2, #1
 80135c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80135cc:	4865      	ldr	r0, [pc, #404]	; (8013764 <MX_GPIO_Init+0x2f8>)
 80135ce:	f004 ff5b 	bl	8018488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OP2_GPIO_Port, OP2_Pin, GPIO_PIN_RESET);
 80135d2:	2200      	movs	r2, #0
 80135d4:	2108      	movs	r1, #8
 80135d6:	4864      	ldr	r0, [pc, #400]	; (8013768 <MX_GPIO_Init+0x2fc>)
 80135d8:	f004 ff56 	bl	8018488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CS2_Pin|CS3_Pin, GPIO_PIN_SET);
 80135dc:	2201      	movs	r2, #1
 80135de:	2160      	movs	r1, #96	; 0x60
 80135e0:	4861      	ldr	r0, [pc, #388]	; (8013768 <MX_GPIO_Init+0x2fc>)
 80135e2:	f004 ff51 	bl	8018488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, RS_485_RE_Pin|WDT_FEED_Pin, GPIO_PIN_RESET);
 80135e6:	2200      	movs	r2, #0
 80135e8:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 80135ec:	485f      	ldr	r0, [pc, #380]	; (801376c <MX_GPIO_Init+0x300>)
 80135ee:	f004 ff4b 	bl	8018488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS_485_DE_GPIO_Port, RS_485_DE_Pin, GPIO_PIN_SET);
 80135f2:	2201      	movs	r2, #1
 80135f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80135f8:	485c      	ldr	r0, [pc, #368]	; (801376c <MX_GPIO_Init+0x300>)
 80135fa:	f004 ff45 	bl	8018488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 80135fe:	2201      	movs	r2, #1
 8013600:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8013604:	4856      	ldr	r0, [pc, #344]	; (8013760 <MX_GPIO_Init+0x2f4>)
 8013606:	f004 ff3f 	bl	8018488 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = OP5_Pin|OP8_Pin;
 801360a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 801360e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013610:	2301      	movs	r3, #1
 8013612:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013614:	2300      	movs	r3, #0
 8013616:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013618:	2303      	movs	r3, #3
 801361a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 801361c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013620:	4619      	mov	r1, r3
 8013622:	484b      	ldr	r0, [pc, #300]	; (8013750 <MX_GPIO_Init+0x2e4>)
 8013624:	f004 fd6c 	bl	8018100 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = IP5_Pin|IP6_Pin;
 8013628:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 801362c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801362e:	2300      	movs	r3, #0
 8013630:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013632:	2300      	movs	r3, #0
 8013634:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8013636:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801363a:	4619      	mov	r1, r3
 801363c:	4844      	ldr	r0, [pc, #272]	; (8013750 <MX_GPIO_Init+0x2e4>)
 801363e:	f004 fd5f 	bl	8018100 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = OP1_Pin|OP4_Pin;
 8013642:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8013646:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013648:	2301      	movs	r3, #1
 801364a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801364c:	2300      	movs	r3, #0
 801364e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013650:	2303      	movs	r3, #3
 8013652:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8013654:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013658:	4619      	mov	r1, r3
 801365a:	483e      	ldr	r0, [pc, #248]	; (8013754 <MX_GPIO_Init+0x2e8>)
 801365c:	f004 fd50 	bl	8018100 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IP7_Pin;
 8013660:	2304      	movs	r3, #4
 8013662:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8013664:	2300      	movs	r3, #0
 8013666:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013668:	2300      	movs	r3, #0
 801366a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IP7_GPIO_Port, &GPIO_InitStruct);
 801366c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013670:	4619      	mov	r1, r3
 8013672:	483c      	ldr	r0, [pc, #240]	; (8013764 <MX_GPIO_Init+0x2f8>)
 8013674:	f004 fd44 	bl	8018100 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = OP7_Pin|S1_LED_Pin|S2_LED_Pin|OP9_Pin;
 8013678:	f240 7304 	movw	r3, #1796	; 0x704
 801367c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801367e:	2301      	movs	r3, #1
 8013680:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013682:	2300      	movs	r3, #0
 8013684:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013686:	2303      	movs	r3, #3
 8013688:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 801368a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801368e:	4619      	mov	r1, r3
 8013690:	4831      	ldr	r0, [pc, #196]	; (8013758 <MX_GPIO_Init+0x2ec>)
 8013692:	f004 fd35 	bl	8018100 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = EX_INT0_Pin|EX_INT1_Pin;
 8013696:	2303      	movs	r3, #3
 8013698:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 801369a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 801369e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80136a0:	2300      	movs	r3, #0
 80136a2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80136a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80136a8:	4619      	mov	r1, r3
 80136aa:	482d      	ldr	r0, [pc, #180]	; (8013760 <MX_GPIO_Init+0x2f4>)
 80136ac:	f004 fd28 	bl	8018100 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IP8_Pin;
 80136b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80136b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80136b6:	2300      	movs	r3, #0
 80136b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80136ba:	2300      	movs	r3, #0
 80136bc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IP8_GPIO_Port, &GPIO_InitStruct);
 80136be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80136c2:	4619      	mov	r1, r3
 80136c4:	4825      	ldr	r0, [pc, #148]	; (801375c <MX_GPIO_Init+0x2f0>)
 80136c6:	f004 fd1b 	bl	8018100 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS4_Pin;
 80136ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80136ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80136d0:	2301      	movs	r3, #1
 80136d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80136d4:	2300      	movs	r3, #0
 80136d6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80136d8:	2303      	movs	r3, #3
 80136da:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(CS4_GPIO_Port, &GPIO_InitStruct);
 80136dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80136e0:	4619      	mov	r1, r3
 80136e2:	481e      	ldr	r0, [pc, #120]	; (801375c <MX_GPIO_Init+0x2f0>)
 80136e4:	f004 fd0c 	bl	8018100 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = IP1_Pin|IP2_Pin;
 80136e8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80136ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80136ee:	2300      	movs	r3, #0
 80136f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80136f2:	2300      	movs	r3, #0
 80136f4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80136f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80136fa:	4619      	mov	r1, r3
 80136fc:	481a      	ldr	r0, [pc, #104]	; (8013768 <MX_GPIO_Init+0x2fc>)
 80136fe:	f004 fcff 	bl	8018100 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = OP3_Pin|CS1_Pin|OP6_Pin;
 8013702:	f241 4304 	movw	r3, #5124	; 0x1404
 8013706:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013708:	2301      	movs	r3, #1
 801370a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801370c:	2300      	movs	r3, #0
 801370e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013710:	2303      	movs	r3, #3
 8013712:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8013714:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013718:	4619      	mov	r1, r3
 801371a:	4811      	ldr	r0, [pc, #68]	; (8013760 <MX_GPIO_Init+0x2f4>)
 801371c:	f004 fcf0 	bl	8018100 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IP10_Pin;
 8013720:	2308      	movs	r3, #8
 8013722:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8013724:	2300      	movs	r3, #0
 8013726:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013728:	2300      	movs	r3, #0
 801372a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IP10_GPIO_Port, &GPIO_InitStruct);
 801372c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013730:	4619      	mov	r1, r3
 8013732:	480b      	ldr	r0, [pc, #44]	; (8013760 <MX_GPIO_Init+0x2f4>)
 8013734:	f004 fce4 	bl	8018100 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_RESET_Pin;
 8013738:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801373c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801373e:	2301      	movs	r3, #1
 8013740:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013742:	2300      	movs	r3, #0
 8013744:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013746:	2300      	movs	r3, #0
 8013748:	63bb      	str	r3, [r7, #56]	; 0x38
 801374a:	e011      	b.n	8013770 <MX_GPIO_Init+0x304>
 801374c:	40023800 	.word	0x40023800
 8013750:	40022000 	.word	0x40022000
 8013754:	40021400 	.word	0x40021400
 8013758:	40021c00 	.word	0x40021c00
 801375c:	40021000 	.word	0x40021000
 8013760:	40021800 	.word	0x40021800
 8013764:	40020800 	.word	0x40020800
 8013768:	40020c00 	.word	0x40020c00
 801376c:	40022400 	.word	0x40022400
  HAL_GPIO_Init(SPI_RESET_GPIO_Port, &GPIO_InitStruct);
 8013770:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013774:	4619      	mov	r1, r3
 8013776:	4836      	ldr	r0, [pc, #216]	; (8013850 <MX_GPIO_Init+0x3e4>)
 8013778:	f004 fcc2 	bl	8018100 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = CAN1_RX_Pin|CAN1_TX_Pin;
 801377c:	2303      	movs	r3, #3
 801377e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013780:	2302      	movs	r3, #2
 8013782:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013784:	2300      	movs	r3, #0
 8013786:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013788:	2303      	movs	r3, #3
 801378a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 801378c:	2309      	movs	r3, #9
 801378e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8013790:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013794:	4619      	mov	r1, r3
 8013796:	482f      	ldr	r0, [pc, #188]	; (8013854 <MX_GPIO_Init+0x3e8>)
 8013798:	f004 fcb2 	bl	8018100 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = OP2_Pin|CS2_Pin|CS3_Pin;
 801379c:	2368      	movs	r3, #104	; 0x68
 801379e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80137a0:	2301      	movs	r3, #1
 80137a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80137a4:	2300      	movs	r3, #0
 80137a6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80137a8:	2303      	movs	r3, #3
 80137aa:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80137ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80137b0:	4619      	mov	r1, r3
 80137b2:	4828      	ldr	r0, [pc, #160]	; (8013854 <MX_GPIO_Init+0x3e8>)
 80137b4:	f004 fca4 	bl	8018100 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IP9_Pin;
 80137b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80137bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80137be:	2300      	movs	r3, #0
 80137c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80137c2:	2300      	movs	r3, #0
 80137c4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IP9_GPIO_Port, &GPIO_InitStruct);
 80137c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80137ca:	4619      	mov	r1, r3
 80137cc:	4822      	ldr	r0, [pc, #136]	; (8013858 <MX_GPIO_Init+0x3ec>)
 80137ce:	f004 fc97 	bl	8018100 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin */
  GPIO_InitStruct.Pin = RS_485_RE_Pin|RS_485_DE_Pin;
 80137d2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80137d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80137d8:	2301      	movs	r3, #1
 80137da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80137dc:	2300      	movs	r3, #0
 80137de:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80137e0:	2300      	movs	r3, #0
 80137e2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80137e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80137e8:	4619      	mov	r1, r3
 80137ea:	481b      	ldr	r0, [pc, #108]	; (8013858 <MX_GPIO_Init+0x3ec>)
 80137ec:	f004 fc88 	bl	8018100 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WDT_FEED_Pin;
 80137f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80137f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80137f6:	2301      	movs	r3, #1
 80137f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80137fa:	2300      	movs	r3, #0
 80137fc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80137fe:	2303      	movs	r3, #3
 8013800:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(WDT_FEED_GPIO_Port, &GPIO_InitStruct);
 8013802:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013806:	4619      	mov	r1, r3
 8013808:	4813      	ldr	r0, [pc, #76]	; (8013858 <MX_GPIO_Init+0x3ec>)
 801380a:	f004 fc79 	bl	8018100 <HAL_GPIO_Init>

  /*Configure GPIO pins : PKPin PKPin */
  GPIO_InitStruct.Pin = IP3_Pin|IP4_Pin;
 801380e:	2318      	movs	r3, #24
 8013810:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8013812:	2300      	movs	r3, #0
 8013814:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013816:	2300      	movs	r3, #0
 8013818:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 801381a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801381e:	4619      	mov	r1, r3
 8013820:	480e      	ldr	r0, [pc, #56]	; (801385c <MX_GPIO_Init+0x3f0>)
 8013822:	f004 fc6d 	bl	8018100 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8013826:	2200      	movs	r2, #0
 8013828:	2101      	movs	r1, #1
 801382a:	2006      	movs	r0, #6
 801382c:	f003 f93d 	bl	8016aaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8013830:	2006      	movs	r0, #6
 8013832:	f003 f956 	bl	8016ae2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 1);
 8013836:	2201      	movs	r2, #1
 8013838:	2101      	movs	r1, #1
 801383a:	2007      	movs	r0, #7
 801383c:	f003 f935 	bl	8016aaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8013840:	2007      	movs	r0, #7
 8013842:	f003 f94e 	bl	8016ae2 <HAL_NVIC_EnableIRQ>

}
 8013846:	bf00      	nop
 8013848:	3740      	adds	r7, #64	; 0x40
 801384a:	46bd      	mov	sp, r7
 801384c:	bd80      	pop	{r7, pc}
 801384e:	bf00      	nop
 8013850:	40020800 	.word	0x40020800
 8013854:	40020c00 	.word	0x40020c00
 8013858:	40022400 	.word	0x40022400
 801385c:	40022800 	.word	0x40022800

08013860 <Feed_wdt>:

/* USER CODE BEGIN 2 */

void Feed_wdt(void)
{
 8013860:	b580      	push	{r7, lr}
 8013862:	af00      	add	r7, sp, #0
	static uint32_t FEED_CLK = 0;

	if(HAL_Elaps_Ticks(FEED_CLK) >=300)
 8013864:	4b0a      	ldr	r3, [pc, #40]	; (8013890 <Feed_wdt+0x30>)
 8013866:	681b      	ldr	r3, [r3, #0]
 8013868:	4618      	mov	r0, r3
 801386a:	f7fb fb53 	bl	800ef14 <HAL_Elaps_Ticks>
 801386e:	4603      	mov	r3, r0
 8013870:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8013874:	d309      	bcc.n	801388a <Feed_wdt+0x2a>
	{
		HAL_GPIO_TogglePin(WDT_FEED_GPIO_Port, WDT_FEED_Pin);
 8013876:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801387a:	4806      	ldr	r0, [pc, #24]	; (8013894 <Feed_wdt+0x34>)
 801387c:	f004 fe1d 	bl	80184ba <HAL_GPIO_TogglePin>
		FEED_CLK = HAL_GetTick();
 8013880:	f002 f932 	bl	8015ae8 <HAL_GetTick>
 8013884:	4603      	mov	r3, r0
 8013886:	4a02      	ldr	r2, [pc, #8]	; (8013890 <Feed_wdt+0x30>)
 8013888:	6013      	str	r3, [r2, #0]
	}

}
 801388a:	bf00      	nop
 801388c:	bd80      	pop	{r7, pc}
 801388e:	bf00      	nop
 8013890:	20009c6c 	.word	0x20009c6c
 8013894:	40022400 	.word	0x40022400

08013898 <Blink_S2>:
		S1_FEED = HAL_GetTick();
	}
}

void Blink_S2(void)
{
 8013898:	b580      	push	{r7, lr}
 801389a:	af00      	add	r7, sp, #0
	static uint32_t S2_FEED = 0;

	if(HAL_Elaps_Ticks(S2_FEED) > 100)
 801389c:	4b09      	ldr	r3, [pc, #36]	; (80138c4 <Blink_S2+0x2c>)
 801389e:	681b      	ldr	r3, [r3, #0]
 80138a0:	4618      	mov	r0, r3
 80138a2:	f7fb fb37 	bl	800ef14 <HAL_Elaps_Ticks>
 80138a6:	4603      	mov	r3, r0
 80138a8:	2b64      	cmp	r3, #100	; 0x64
 80138aa:	d909      	bls.n	80138c0 <Blink_S2+0x28>
	{
		HAL_GPIO_TogglePin(S2_LED_GPIO_Port, S2_LED_Pin);
 80138ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80138b0:	4805      	ldr	r0, [pc, #20]	; (80138c8 <Blink_S2+0x30>)
 80138b2:	f004 fe02 	bl	80184ba <HAL_GPIO_TogglePin>
		S2_FEED = HAL_GetTick();
 80138b6:	f002 f917 	bl	8015ae8 <HAL_GetTick>
 80138ba:	4603      	mov	r3, r0
 80138bc:	4a01      	ldr	r2, [pc, #4]	; (80138c4 <Blink_S2+0x2c>)
 80138be:	6013      	str	r3, [r2, #0]
	}
}
 80138c0:	bf00      	nop
 80138c2:	bd80      	pop	{r7, pc}
 80138c4:	20009c70 	.word	0x20009c70
 80138c8:	40021c00 	.word	0x40021c00

080138cc <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80138cc:	b580      	push	{r7, lr}
 80138ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80138d0:	4b1b      	ldr	r3, [pc, #108]	; (8013940 <MX_I2C1_Init+0x74>)
 80138d2:	4a1c      	ldr	r2, [pc, #112]	; (8013944 <MX_I2C1_Init+0x78>)
 80138d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0xC0000E12;
 80138d6:	4b1a      	ldr	r3, [pc, #104]	; (8013940 <MX_I2C1_Init+0x74>)
 80138d8:	4a1b      	ldr	r2, [pc, #108]	; (8013948 <MX_I2C1_Init+0x7c>)
 80138da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80138dc:	4b18      	ldr	r3, [pc, #96]	; (8013940 <MX_I2C1_Init+0x74>)
 80138de:	2200      	movs	r2, #0
 80138e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80138e2:	4b17      	ldr	r3, [pc, #92]	; (8013940 <MX_I2C1_Init+0x74>)
 80138e4:	2201      	movs	r2, #1
 80138e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80138e8:	4b15      	ldr	r3, [pc, #84]	; (8013940 <MX_I2C1_Init+0x74>)
 80138ea:	2200      	movs	r2, #0
 80138ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80138ee:	4b14      	ldr	r3, [pc, #80]	; (8013940 <MX_I2C1_Init+0x74>)
 80138f0:	2200      	movs	r2, #0
 80138f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80138f4:	4b12      	ldr	r3, [pc, #72]	; (8013940 <MX_I2C1_Init+0x74>)
 80138f6:	2200      	movs	r2, #0
 80138f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80138fa:	4b11      	ldr	r3, [pc, #68]	; (8013940 <MX_I2C1_Init+0x74>)
 80138fc:	2200      	movs	r2, #0
 80138fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8013900:	4b0f      	ldr	r3, [pc, #60]	; (8013940 <MX_I2C1_Init+0x74>)
 8013902:	2200      	movs	r2, #0
 8013904:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8013906:	480e      	ldr	r0, [pc, #56]	; (8013940 <MX_I2C1_Init+0x74>)
 8013908:	f004 fe16 	bl	8018538 <HAL_I2C_Init>
 801390c:	4603      	mov	r3, r0
 801390e:	2b00      	cmp	r3, #0
 8013910:	d001      	beq.n	8013916 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8013912:	f000 fb5d 	bl	8013fd0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8013916:	2100      	movs	r1, #0
 8013918:	4809      	ldr	r0, [pc, #36]	; (8013940 <MX_I2C1_Init+0x74>)
 801391a:	f005 fb65 	bl	8018fe8 <HAL_I2CEx_ConfigAnalogFilter>
 801391e:	4603      	mov	r3, r0
 8013920:	2b00      	cmp	r3, #0
 8013922:	d001      	beq.n	8013928 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8013924:	f000 fb54 	bl	8013fd0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8013928:	2100      	movs	r1, #0
 801392a:	4805      	ldr	r0, [pc, #20]	; (8013940 <MX_I2C1_Init+0x74>)
 801392c:	f005 fba7 	bl	801907e <HAL_I2CEx_ConfigDigitalFilter>
 8013930:	4603      	mov	r3, r0
 8013932:	2b00      	cmp	r3, #0
 8013934:	d001      	beq.n	801393a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8013936:	f000 fb4b 	bl	8013fd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 801393a:	bf00      	nop
 801393c:	bd80      	pop	{r7, pc}
 801393e:	bf00      	nop
 8013940:	20009c74 	.word	0x20009c74
 8013944:	40005400 	.word	0x40005400
 8013948:	c0000e12 	.word	0xc0000e12

0801394c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 801394c:	b580      	push	{r7, lr}
 801394e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8013950:	4b1b      	ldr	r3, [pc, #108]	; (80139c0 <MX_I2C2_Init+0x74>)
 8013952:	4a1c      	ldr	r2, [pc, #112]	; (80139c4 <MX_I2C2_Init+0x78>)
 8013954:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0xC0000E12;
 8013956:	4b1a      	ldr	r3, [pc, #104]	; (80139c0 <MX_I2C2_Init+0x74>)
 8013958:	4a1b      	ldr	r2, [pc, #108]	; (80139c8 <MX_I2C2_Init+0x7c>)
 801395a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 801395c:	4b18      	ldr	r3, [pc, #96]	; (80139c0 <MX_I2C2_Init+0x74>)
 801395e:	2200      	movs	r2, #0
 8013960:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8013962:	4b17      	ldr	r3, [pc, #92]	; (80139c0 <MX_I2C2_Init+0x74>)
 8013964:	2201      	movs	r2, #1
 8013966:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8013968:	4b15      	ldr	r3, [pc, #84]	; (80139c0 <MX_I2C2_Init+0x74>)
 801396a:	2200      	movs	r2, #0
 801396c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 801396e:	4b14      	ldr	r3, [pc, #80]	; (80139c0 <MX_I2C2_Init+0x74>)
 8013970:	2200      	movs	r2, #0
 8013972:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8013974:	4b12      	ldr	r3, [pc, #72]	; (80139c0 <MX_I2C2_Init+0x74>)
 8013976:	2200      	movs	r2, #0
 8013978:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 801397a:	4b11      	ldr	r3, [pc, #68]	; (80139c0 <MX_I2C2_Init+0x74>)
 801397c:	2200      	movs	r2, #0
 801397e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8013980:	4b0f      	ldr	r3, [pc, #60]	; (80139c0 <MX_I2C2_Init+0x74>)
 8013982:	2200      	movs	r2, #0
 8013984:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8013986:	480e      	ldr	r0, [pc, #56]	; (80139c0 <MX_I2C2_Init+0x74>)
 8013988:	f004 fdd6 	bl	8018538 <HAL_I2C_Init>
 801398c:	4603      	mov	r3, r0
 801398e:	2b00      	cmp	r3, #0
 8013990:	d001      	beq.n	8013996 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8013992:	f000 fb1d 	bl	8013fd0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8013996:	2100      	movs	r1, #0
 8013998:	4809      	ldr	r0, [pc, #36]	; (80139c0 <MX_I2C2_Init+0x74>)
 801399a:	f005 fb25 	bl	8018fe8 <HAL_I2CEx_ConfigAnalogFilter>
 801399e:	4603      	mov	r3, r0
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	d001      	beq.n	80139a8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80139a4:	f000 fb14 	bl	8013fd0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80139a8:	2100      	movs	r1, #0
 80139aa:	4805      	ldr	r0, [pc, #20]	; (80139c0 <MX_I2C2_Init+0x74>)
 80139ac:	f005 fb67 	bl	801907e <HAL_I2CEx_ConfigDigitalFilter>
 80139b0:	4603      	mov	r3, r0
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d001      	beq.n	80139ba <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80139b6:	f000 fb0b 	bl	8013fd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80139ba:	bf00      	nop
 80139bc:	bd80      	pop	{r7, pc}
 80139be:	bf00      	nop
 80139c0:	20009cc8 	.word	0x20009cc8
 80139c4:	40005800 	.word	0x40005800
 80139c8:	c0000e12 	.word	0xc0000e12

080139cc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80139cc:	b580      	push	{r7, lr}
 80139ce:	b0b0      	sub	sp, #192	; 0xc0
 80139d0:	af00      	add	r7, sp, #0
 80139d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80139d4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80139d8:	2200      	movs	r2, #0
 80139da:	601a      	str	r2, [r3, #0]
 80139dc:	605a      	str	r2, [r3, #4]
 80139de:	609a      	str	r2, [r3, #8]
 80139e0:	60da      	str	r2, [r3, #12]
 80139e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80139e4:	f107 031c 	add.w	r3, r7, #28
 80139e8:	2290      	movs	r2, #144	; 0x90
 80139ea:	2100      	movs	r1, #0
 80139ec:	4618      	mov	r0, r3
 80139ee:	f00e ff9d 	bl	802292c <memset>
  if(i2cHandle->Instance==I2C1)
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	681b      	ldr	r3, [r3, #0]
 80139f6:	4a44      	ldr	r2, [pc, #272]	; (8013b08 <HAL_I2C_MspInit+0x13c>)
 80139f8:	4293      	cmp	r3, r2
 80139fa:	d13e      	bne.n	8013a7a <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80139fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8013a00:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8013a02:	2300      	movs	r3, #0
 8013a04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8013a08:	f107 031c 	add.w	r3, r7, #28
 8013a0c:	4618      	mov	r0, r3
 8013a0e:	f006 f875 	bl	8019afc <HAL_RCCEx_PeriphCLKConfig>
 8013a12:	4603      	mov	r3, r0
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	d001      	beq.n	8013a1c <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8013a18:	f000 fada 	bl	8013fd0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8013a1c:	4b3b      	ldr	r3, [pc, #236]	; (8013b0c <HAL_I2C_MspInit+0x140>)
 8013a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a20:	4a3a      	ldr	r2, [pc, #232]	; (8013b0c <HAL_I2C_MspInit+0x140>)
 8013a22:	f043 0302 	orr.w	r3, r3, #2
 8013a26:	6313      	str	r3, [r2, #48]	; 0x30
 8013a28:	4b38      	ldr	r3, [pc, #224]	; (8013b0c <HAL_I2C_MspInit+0x140>)
 8013a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a2c:	f003 0302 	and.w	r3, r3, #2
 8013a30:	61bb      	str	r3, [r7, #24]
 8013a32:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = I2C1_SDA_Pin|I2C1_SCL_Pin;
 8013a34:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8013a38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8013a3c:	2312      	movs	r3, #18
 8013a3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013a42:	2300      	movs	r3, #0
 8013a44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013a48:	2303      	movs	r3, #3
 8013a4a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8013a4e:	2304      	movs	r3, #4
 8013a50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8013a54:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8013a58:	4619      	mov	r1, r3
 8013a5a:	482d      	ldr	r0, [pc, #180]	; (8013b10 <HAL_I2C_MspInit+0x144>)
 8013a5c:	f004 fb50 	bl	8018100 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8013a60:	4b2a      	ldr	r3, [pc, #168]	; (8013b0c <HAL_I2C_MspInit+0x140>)
 8013a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a64:	4a29      	ldr	r2, [pc, #164]	; (8013b0c <HAL_I2C_MspInit+0x140>)
 8013a66:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013a6a:	6413      	str	r3, [r2, #64]	; 0x40
 8013a6c:	4b27      	ldr	r3, [pc, #156]	; (8013b0c <HAL_I2C_MspInit+0x140>)
 8013a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013a74:	617b      	str	r3, [r7, #20]
 8013a76:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8013a78:	e041      	b.n	8013afe <HAL_I2C_MspInit+0x132>
  else if(i2cHandle->Instance==I2C2)
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	681b      	ldr	r3, [r3, #0]
 8013a7e:	4a25      	ldr	r2, [pc, #148]	; (8013b14 <HAL_I2C_MspInit+0x148>)
 8013a80:	4293      	cmp	r3, r2
 8013a82:	d13c      	bne.n	8013afe <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8013a84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013a88:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8013a8a:	2300      	movs	r3, #0
 8013a8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8013a90:	f107 031c 	add.w	r3, r7, #28
 8013a94:	4618      	mov	r0, r3
 8013a96:	f006 f831 	bl	8019afc <HAL_RCCEx_PeriphCLKConfig>
 8013a9a:	4603      	mov	r3, r0
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	d001      	beq.n	8013aa4 <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 8013aa0:	f000 fa96 	bl	8013fd0 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8013aa4:	4b19      	ldr	r3, [pc, #100]	; (8013b0c <HAL_I2C_MspInit+0x140>)
 8013aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013aa8:	4a18      	ldr	r2, [pc, #96]	; (8013b0c <HAL_I2C_MspInit+0x140>)
 8013aaa:	f043 0320 	orr.w	r3, r3, #32
 8013aae:	6313      	str	r3, [r2, #48]	; 0x30
 8013ab0:	4b16      	ldr	r3, [pc, #88]	; (8013b0c <HAL_I2C_MspInit+0x140>)
 8013ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013ab4:	f003 0320 	and.w	r3, r3, #32
 8013ab8:	613b      	str	r3, [r7, #16]
 8013aba:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SDA_Pin|I2C2_SCL_Pin;
 8013abc:	2303      	movs	r3, #3
 8013abe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8013ac2:	2312      	movs	r3, #18
 8013ac4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013ac8:	2300      	movs	r3, #0
 8013aca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013ace:	2303      	movs	r3, #3
 8013ad0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8013ad4:	2304      	movs	r3, #4
 8013ad6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8013ada:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8013ade:	4619      	mov	r1, r3
 8013ae0:	480d      	ldr	r0, [pc, #52]	; (8013b18 <HAL_I2C_MspInit+0x14c>)
 8013ae2:	f004 fb0d 	bl	8018100 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8013ae6:	4b09      	ldr	r3, [pc, #36]	; (8013b0c <HAL_I2C_MspInit+0x140>)
 8013ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013aea:	4a08      	ldr	r2, [pc, #32]	; (8013b0c <HAL_I2C_MspInit+0x140>)
 8013aec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8013af0:	6413      	str	r3, [r2, #64]	; 0x40
 8013af2:	4b06      	ldr	r3, [pc, #24]	; (8013b0c <HAL_I2C_MspInit+0x140>)
 8013af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013afa:	60fb      	str	r3, [r7, #12]
 8013afc:	68fb      	ldr	r3, [r7, #12]
}
 8013afe:	bf00      	nop
 8013b00:	37c0      	adds	r7, #192	; 0xc0
 8013b02:	46bd      	mov	sp, r7
 8013b04:	bd80      	pop	{r7, pc}
 8013b06:	bf00      	nop
 8013b08:	40005400 	.word	0x40005400
 8013b0c:	40023800 	.word	0x40023800
 8013b10:	40020400 	.word	0x40020400
 8013b14:	40005800 	.word	0x40005800
 8013b18:	40021400 	.word	0x40021400

08013b1c <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8013b1c:	b580      	push	{r7, lr}
 8013b1e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8013b20:	4b0b      	ldr	r3, [pc, #44]	; (8013b50 <MX_IWDG_Init+0x34>)
 8013b22:	4a0c      	ldr	r2, [pc, #48]	; (8013b54 <MX_IWDG_Init+0x38>)
 8013b24:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 8013b26:	4b0a      	ldr	r3, [pc, #40]	; (8013b50 <MX_IWDG_Init+0x34>)
 8013b28:	2203      	movs	r2, #3
 8013b2a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8013b2c:	4b08      	ldr	r3, [pc, #32]	; (8013b50 <MX_IWDG_Init+0x34>)
 8013b2e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8013b32:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 3000;
 8013b34:	4b06      	ldr	r3, [pc, #24]	; (8013b50 <MX_IWDG_Init+0x34>)
 8013b36:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8013b3a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8013b3c:	4804      	ldr	r0, [pc, #16]	; (8013b50 <MX_IWDG_Init+0x34>)
 8013b3e:	f005 faea 	bl	8019116 <HAL_IWDG_Init>
 8013b42:	4603      	mov	r3, r0
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d001      	beq.n	8013b4c <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8013b48:	f000 fa42 	bl	8013fd0 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8013b4c:	bf00      	nop
 8013b4e:	bd80      	pop	{r7, pc}
 8013b50:	20009d1c 	.word	0x20009d1c
 8013b54:	40003000 	.word	0x40003000

08013b58 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8013b58:	b480      	push	{r7}
 8013b5a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8013b5c:	f3bf 8f4f 	dsb	sy
}
 8013b60:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8013b62:	f3bf 8f6f 	isb	sy
}
 8013b66:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8013b68:	4b0d      	ldr	r3, [pc, #52]	; (8013ba0 <SCB_EnableICache+0x48>)
 8013b6a:	2200      	movs	r2, #0
 8013b6c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8013b70:	f3bf 8f4f 	dsb	sy
}
 8013b74:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8013b76:	f3bf 8f6f 	isb	sy
}
 8013b7a:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8013b7c:	4b08      	ldr	r3, [pc, #32]	; (8013ba0 <SCB_EnableICache+0x48>)
 8013b7e:	695b      	ldr	r3, [r3, #20]
 8013b80:	4a07      	ldr	r2, [pc, #28]	; (8013ba0 <SCB_EnableICache+0x48>)
 8013b82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013b86:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8013b88:	f3bf 8f4f 	dsb	sy
}
 8013b8c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8013b8e:	f3bf 8f6f 	isb	sy
}
 8013b92:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8013b94:	bf00      	nop
 8013b96:	46bd      	mov	sp, r7
 8013b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b9c:	4770      	bx	lr
 8013b9e:	bf00      	nop
 8013ba0:	e000ed00 	.word	0xe000ed00

08013ba4 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8013ba4:	b480      	push	{r7}
 8013ba6:	b085      	sub	sp, #20
 8013ba8:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8013baa:	4b1f      	ldr	r3, [pc, #124]	; (8013c28 <SCB_EnableDCache+0x84>)
 8013bac:	2200      	movs	r2, #0
 8013bae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8013bb2:	f3bf 8f4f 	dsb	sy
}
 8013bb6:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8013bb8:	4b1b      	ldr	r3, [pc, #108]	; (8013c28 <SCB_EnableDCache+0x84>)
 8013bba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013bbe:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	0b5b      	lsrs	r3, r3, #13
 8013bc4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8013bc8:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	08db      	lsrs	r3, r3, #3
 8013bce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8013bd2:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8013bd4:	68fb      	ldr	r3, [r7, #12]
 8013bd6:	015a      	lsls	r2, r3, #5
 8013bd8:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8013bdc:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8013bde:	68ba      	ldr	r2, [r7, #8]
 8013be0:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8013be2:	4911      	ldr	r1, [pc, #68]	; (8013c28 <SCB_EnableDCache+0x84>)
 8013be4:	4313      	orrs	r3, r2
 8013be6:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8013bea:	68bb      	ldr	r3, [r7, #8]
 8013bec:	1e5a      	subs	r2, r3, #1
 8013bee:	60ba      	str	r2, [r7, #8]
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d1ef      	bne.n	8013bd4 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8013bf4:	68fb      	ldr	r3, [r7, #12]
 8013bf6:	1e5a      	subs	r2, r3, #1
 8013bf8:	60fa      	str	r2, [r7, #12]
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d1e5      	bne.n	8013bca <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8013bfe:	f3bf 8f4f 	dsb	sy
}
 8013c02:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8013c04:	4b08      	ldr	r3, [pc, #32]	; (8013c28 <SCB_EnableDCache+0x84>)
 8013c06:	695b      	ldr	r3, [r3, #20]
 8013c08:	4a07      	ldr	r2, [pc, #28]	; (8013c28 <SCB_EnableDCache+0x84>)
 8013c0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013c0e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8013c10:	f3bf 8f4f 	dsb	sy
}
 8013c14:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8013c16:	f3bf 8f6f 	isb	sy
}
 8013c1a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8013c1c:	bf00      	nop
 8013c1e:	3714      	adds	r7, #20
 8013c20:	46bd      	mov	sp, r7
 8013c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c26:	4770      	bx	lr
 8013c28:	e000ed00 	.word	0xe000ed00

08013c2c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8013c2c:	b580      	push	{r7, lr}
 8013c2e:	b082      	sub	sp, #8
 8013c30:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	char *ptr= NULL;
 8013c32:	2300      	movs	r3, #0
 8013c34:	607b      	str	r3, [r7, #4]
	/* USER CODE END 1 */

	/* MPU Configuration--------------------------------------------------------*/
	MPU_Config();
 8013c36:	f000 f99f 	bl	8013f78 <MPU_Config>

	/* Enable I-Cache---------------------------------------------------------*/
	SCB_EnableICache();
 8013c3a:	f7ff ff8d 	bl	8013b58 <SCB_EnableICache>

	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();
 8013c3e:	f7ff ffb1 	bl	8013ba4 <SCB_EnableDCache>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8013c42:	f001 fef1 	bl	8015a28 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8013c46:	f000 f8d1 	bl	8013dec <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	ptr = reset_cause_get_name(reset_cause_get());
 8013c4a:	f7f5 fb75 	bl	8009338 <reset_cause_get>
 8013c4e:	4603      	mov	r3, r0
 8013c50:	4618      	mov	r0, r3
 8013c52:	f7f5 fbc3 	bl	80093dc <reset_cause_get_name>
 8013c56:	6078      	str	r0, [r7, #4]
	MX_RNG_Init();
	MX_CAN3_Init();
	/* USER CODE BEGIN 2 */
#endif

	MX_GPIO_Init();
 8013c58:	f7ff fc08 	bl	801346c <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8013c5c:	f001 f90a 	bl	8014e74 <MX_USART1_UART_Init>
	Get_Slot();
 8013c60:	f7ec ff34 	bl	8000acc <Get_Slot>
	MX_CAN2_Init();
 8013c64:	f7fb fd86 	bl	800f774 <MX_CAN2_Init>
	MX_CAN3_Init();
 8013c68:	f7fb fdfc 	bl	800f864 <MX_CAN3_Init>
	MX_I2C1_Init();
 8013c6c:	f7ff fe2e 	bl	80138cc <MX_I2C1_Init>
	MX_I2C2_Init();
 8013c70:	f7ff fe6c 	bl	801394c <MX_I2C2_Init>
	MX_SPI1_Init();
 8013c74:	f000 fa10 	bl	8014098 <MX_SPI1_Init>
	Get_Config();
 8013c78:	f000 fd7a 	bl	8014770 <Get_Config>
	MX_RNG_Init();
 8013c7c:	f000 f9ae 	bl	8013fdc <MX_RNG_Init>
	memset(&Hitachi_fault_injection_st,0,sizeof(HITACHI_FAULT_INJECTION_t));
 8013c80:	2208      	movs	r2, #8
 8013c82:	2100      	movs	r1, #0
 8013c84:	484c      	ldr	r0, [pc, #304]	; (8013db8 <main+0x18c>)
 8013c86:	f00e fe51 	bl	802292c <memset>
	HAL_Delay(250);
 8013c8a:	20fa      	movs	r0, #250	; 0xfa
 8013c8c:	f001 ff38 	bl	8015b00 <HAL_Delay>
	printf("\b\b\b\b\b\b\b\b\b\b");
 8013c90:	484a      	ldr	r0, [pc, #296]	; (8013dbc <main+0x190>)
 8013c92:	f00e ff33 	bl	8022afc <iprintf>
	printf("\n___________________________________ EiPC Start ____________________________\n");
 8013c96:	484a      	ldr	r0, [pc, #296]	; (8013dc0 <main+0x194>)
 8013c98:	f00e ffcc 	bl	8022c34 <puts>
	printf("\r\r\r\nLast Reset Reason:%s\n",ptr);
 8013c9c:	6879      	ldr	r1, [r7, #4]
 8013c9e:	4849      	ldr	r0, [pc, #292]	; (8013dc4 <main+0x198>)
 8013ca0:	f00e ff2c 	bl	8022afc <iprintf>
	Get_Build_Details();
 8013ca4:	f000 f90c 	bl	8013ec0 <Get_Build_Details>
	switch(EI_data.ProtocolType)
 8013ca8:	4b47      	ldr	r3, [pc, #284]	; (8013dc8 <main+0x19c>)
 8013caa:	781b      	ldrb	r3, [r3, #0]
 8013cac:	3b01      	subs	r3, #1
 8013cae:	2b03      	cmp	r3, #3
 8013cb0:	d85f      	bhi.n	8013d72 <main+0x146>
 8013cb2:	a201      	add	r2, pc, #4	; (adr r2, 8013cb8 <main+0x8c>)
 8013cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013cb8:	08013cc9 	.word	0x08013cc9
 8013cbc:	08013d1b 	.word	0x08013d1b
 8013cc0:	08013d43 	.word	0x08013d43
 8013cc4:	08013d7b 	.word	0x08013d7b
	{
	case HITACHI:
		printf("Protocol Selected is HITACHI\n");
 8013cc8:	4840      	ldr	r0, [pc, #256]	; (8013dcc <main+0x1a0>)
 8013cca:	f00e ffb3 	bl	8022c34 <puts>
		printf("Initializing Ethernet Please Wait...!!\n");
 8013cce:	4840      	ldr	r0, [pc, #256]	; (8013dd0 <main+0x1a4>)
 8013cd0:	f00e ffb0 	bl	8022c34 <puts>
		MX_LWIP_Init();
 8013cd4:	f009 f832 	bl	801cd3c <MX_LWIP_Init>
		udpServer_init();
 8013cd8:	f7fb f92c 	bl	800ef34 <udpServer_init>
		printf("Initializing Ethernet Done\n");
 8013cdc:	483d      	ldr	r0, [pc, #244]	; (8013dd4 <main+0x1a8>)
 8013cde:	f00e ffa9 	bl	8022c34 <puts>
		if((EI_data.Hitachi_st.EnableSerialPort == 1) && (EI_data.Hitachi_st.BaudRate > 0) )
 8013ce2:	4b39      	ldr	r3, [pc, #228]	; (8013dc8 <main+0x19c>)
 8013ce4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8013ce8:	2b01      	cmp	r3, #1
 8013cea:	d111      	bne.n	8013d10 <main+0xe4>
 8013cec:	4b36      	ldr	r3, [pc, #216]	; (8013dc8 <main+0x19c>)
 8013cee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	d00c      	beq.n	8013d10 <main+0xe4>
		{
			printf("Initializing UART with Baudrate:%lu\n",EI_data.Hitachi_st.BaudRate);
 8013cf6:	4b34      	ldr	r3, [pc, #208]	; (8013dc8 <main+0x19c>)
 8013cf8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013cfc:	4619      	mov	r1, r3
 8013cfe:	4836      	ldr	r0, [pc, #216]	; (8013dd8 <main+0x1ac>)
 8013d00:	f00e fefc 	bl	8022afc <iprintf>
			UART4_Init(EI_data.Hitachi_st.BaudRate);
 8013d04:	4b30      	ldr	r3, [pc, #192]	; (8013dc8 <main+0x19c>)
 8013d06:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013d0a:	4618      	mov	r0, r3
 8013d0c:	f001 fa60 	bl	80151d0 <UART4_Init>
		}
		print_self_Details();
 8013d10:	f7f4 fe02 	bl	8008918 <print_self_Details>
		Update_HitachiCommands();
 8013d14:	f7ec fdc6 	bl	80008a4 <Update_HitachiCommands>
		break;
 8013d18:	e030      	b.n	8013d7c <main+0x150>
	case SIEMENS:
		printf("Protocol Selected is SIEMENS\n");
 8013d1a:	4830      	ldr	r0, [pc, #192]	; (8013ddc <main+0x1b0>)
 8013d1c:	f00e ff8a 	bl	8022c34 <puts>
		printf("Initializing Ethernet Please Wait...!!\n");
 8013d20:	482b      	ldr	r0, [pc, #172]	; (8013dd0 <main+0x1a4>)
 8013d22:	f00e ff87 	bl	8022c34 <puts>
		MX_LWIP_Init();
 8013d26:	f009 f809 	bl	801cd3c <MX_LWIP_Init>
		udpServer_init();
 8013d2a:	f7fb f903 	bl	800ef34 <udpServer_init>
		printf("Initializing Ethernet Done\n");
 8013d2e:	4829      	ldr	r0, [pc, #164]	; (8013dd4 <main+0x1a8>)
 8013d30:	f00e ff80 	bl	8022c34 <puts>
		print_self_DetailsSiemens();
 8013d34:	f7fa ffe4 	bl	800ed00 <print_self_DetailsSiemens>
		Update_SiemensCommands();
 8013d38:	f7f9 fcee 	bl	800d718 <Update_SiemensCommands>
		UpdateSIGNALSNames();
 8013d3c:	f7fa fb02 	bl	800e344 <UpdateSIGNALSNames>
		break;
 8013d40:	e01c      	b.n	8013d7c <main+0x150>

	case MEDHA:
		printf("Protocol Selected is MEDHA\n");
 8013d42:	4827      	ldr	r0, [pc, #156]	; (8013de0 <main+0x1b4>)
 8013d44:	f00e ff76 	bl	8022c34 <puts>
		if(EI_data.Medha_Prms_st.BaudRate > 0)
 8013d48:	4b1f      	ldr	r3, [pc, #124]	; (8013dc8 <main+0x19c>)
 8013d4a:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 8013d4e:	2b00      	cmp	r3, #0
 8013d50:	d006      	beq.n	8013d60 <main+0x134>
		{
			UART4_Init(EI_data.Medha_Prms_st.BaudRate);
 8013d52:	4b1d      	ldr	r3, [pc, #116]	; (8013dc8 <main+0x19c>)
 8013d54:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 8013d58:	4618      	mov	r0, r3
 8013d5a:	f001 fa39 	bl	80151d0 <UART4_Init>
 8013d5e:	e003      	b.n	8013d68 <main+0x13c>
		}
		else
		{
			UART4_Init(115200);
 8013d60:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8013d64:	f001 fa34 	bl	80151d0 <UART4_Init>
		}
		Update_MedhaCommands();
 8013d68:	f7f6 ff9c 	bl	800aca4 <Update_MedhaCommands>
		Print_Medha_Self_Details();
 8013d6c:	f7f6 fd5a 	bl	800a824 <Print_Medha_Self_Details>
		break;
 8013d70:	e004      	b.n	8013d7c <main+0x150>

	case KYOSAN:
		break;

	default:
		printf("Please Select Protocol Type\n");
 8013d72:	481c      	ldr	r0, [pc, #112]	; (8013de4 <main+0x1b8>)
 8013d74:	f00e ff5e 	bl	8022c34 <puts>
		while(1);
 8013d78:	e7fe      	b.n	8013d78 <main+0x14c>
		break;
 8013d7a:	bf00      	nop
	}


	printf("Initialization Success\n");
 8013d7c:	481a      	ldr	r0, [pc, #104]	; (8013de8 <main+0x1bc>)
 8013d7e:	f00e ff59 	bl	8022c34 <puts>
	//	printf("start Ticks:%lu",Ticks);
	MX_IWDG_Init();
 8013d82:	f7ff fecb 	bl	8013b1c <MX_IWDG_Init>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1)
	{
		switch(EI_data.ProtocolType)
 8013d86:	4b10      	ldr	r3, [pc, #64]	; (8013dc8 <main+0x19c>)
 8013d88:	781b      	ldrb	r3, [r3, #0]
 8013d8a:	2b03      	cmp	r3, #3
 8013d8c:	d00c      	beq.n	8013da8 <main+0x17c>
 8013d8e:	2b03      	cmp	r3, #3
 8013d90:	dc0d      	bgt.n	8013dae <main+0x182>
 8013d92:	2b01      	cmp	r3, #1
 8013d94:	d002      	beq.n	8013d9c <main+0x170>
 8013d96:	2b02      	cmp	r3, #2
 8013d98:	d003      	beq.n	8013da2 <main+0x176>
 8013d9a:	e008      	b.n	8013dae <main+0x182>
		{
		case HITACHI:
			Process_HitachiEI();
 8013d9c:	f7f5 fa8c 	bl	80092b8 <Process_HitachiEI>
			break;
 8013da0:	e009      	b.n	8013db6 <main+0x18a>

		case SIEMENS:
			Process_SiemensEI();
 8013da2:	f7f7 fca5 	bl	800b6f0 <Process_SiemensEI>
			break;
 8013da6:	e006      	b.n	8013db6 <main+0x18a>

		case MEDHA:
			Process_Medha_EI();
 8013da8:	f7f5 fb68 	bl	800947c <Process_Medha_EI>
			break;
 8013dac:	e003      	b.n	8013db6 <main+0x18a>

		default:
			printf("Please Select Protocol Type\n");
 8013dae:	480d      	ldr	r0, [pc, #52]	; (8013de4 <main+0x1b8>)
 8013db0:	f00e ff40 	bl	8022c34 <puts>
			while(1);
 8013db4:	e7fe      	b.n	8013db4 <main+0x188>
		switch(EI_data.ProtocolType)
 8013db6:	e7e6      	b.n	8013d86 <main+0x15a>
 8013db8:	20001968 	.word	0x20001968
 8013dbc:	08027300 	.word	0x08027300
 8013dc0:	0802730c 	.word	0x0802730c
 8013dc4:	0802735c 	.word	0x0802735c
 8013dc8:	20000304 	.word	0x20000304
 8013dcc:	08027378 	.word	0x08027378
 8013dd0:	08027398 	.word	0x08027398
 8013dd4:	080273c0 	.word	0x080273c0
 8013dd8:	080273dc 	.word	0x080273dc
 8013ddc:	08027404 	.word	0x08027404
 8013de0:	08027424 	.word	0x08027424
 8013de4:	08027440 	.word	0x08027440
 8013de8:	0802745c 	.word	0x0802745c

08013dec <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8013dec:	b580      	push	{r7, lr}
 8013dee:	b094      	sub	sp, #80	; 0x50
 8013df0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8013df2:	f107 031c 	add.w	r3, r7, #28
 8013df6:	2234      	movs	r2, #52	; 0x34
 8013df8:	2100      	movs	r1, #0
 8013dfa:	4618      	mov	r0, r3
 8013dfc:	f00e fd96 	bl	802292c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8013e00:	f107 0308 	add.w	r3, r7, #8
 8013e04:	2200      	movs	r2, #0
 8013e06:	601a      	str	r2, [r3, #0]
 8013e08:	605a      	str	r2, [r3, #4]
 8013e0a:	609a      	str	r2, [r3, #8]
 8013e0c:	60da      	str	r2, [r3, #12]
 8013e0e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8013e10:	4b29      	ldr	r3, [pc, #164]	; (8013eb8 <SystemClock_Config+0xcc>)
 8013e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e14:	4a28      	ldr	r2, [pc, #160]	; (8013eb8 <SystemClock_Config+0xcc>)
 8013e16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013e1a:	6413      	str	r3, [r2, #64]	; 0x40
 8013e1c:	4b26      	ldr	r3, [pc, #152]	; (8013eb8 <SystemClock_Config+0xcc>)
 8013e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013e24:	607b      	str	r3, [r7, #4]
 8013e26:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8013e28:	4b24      	ldr	r3, [pc, #144]	; (8013ebc <SystemClock_Config+0xd0>)
 8013e2a:	681b      	ldr	r3, [r3, #0]
 8013e2c:	4a23      	ldr	r2, [pc, #140]	; (8013ebc <SystemClock_Config+0xd0>)
 8013e2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8013e32:	6013      	str	r3, [r2, #0]
 8013e34:	4b21      	ldr	r3, [pc, #132]	; (8013ebc <SystemClock_Config+0xd0>)
 8013e36:	681b      	ldr	r3, [r3, #0]
 8013e38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8013e3c:	603b      	str	r3, [r7, #0]
 8013e3e:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8013e40:	2309      	movs	r3, #9
 8013e42:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8013e44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8013e48:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8013e4a:	2301      	movs	r3, #1
 8013e4c:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8013e4e:	2302      	movs	r3, #2
 8013e50:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8013e52:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8013e56:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 6;
 8013e58:	2306      	movs	r3, #6
 8013e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 8013e5c:	23b4      	movs	r3, #180	; 0xb4
 8013e5e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8013e60:	2302      	movs	r3, #2
 8013e62:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 8;
 8013e64:	2308      	movs	r3, #8
 8013e66:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8013e68:	2302      	movs	r3, #2
 8013e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8013e6c:	f107 031c 	add.w	r3, r7, #28
 8013e70:	4618      	mov	r0, r3
 8013e72:	f005 f9af 	bl	80191d4 <HAL_RCC_OscConfig>
 8013e76:	4603      	mov	r3, r0
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	d001      	beq.n	8013e80 <SystemClock_Config+0x94>
	{
		Error_Handler();
 8013e7c:	f000 f8a8 	bl	8013fd0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8013e80:	230f      	movs	r3, #15
 8013e82:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8013e84:	2302      	movs	r3, #2
 8013e86:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8013e88:	2300      	movs	r3, #0
 8013e8a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8013e8c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8013e90:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8013e92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013e96:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8013e98:	f107 0308 	add.w	r3, r7, #8
 8013e9c:	2105      	movs	r1, #5
 8013e9e:	4618      	mov	r0, r3
 8013ea0:	f005 fc46 	bl	8019730 <HAL_RCC_ClockConfig>
 8013ea4:	4603      	mov	r3, r0
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d001      	beq.n	8013eae <SystemClock_Config+0xc2>
	{
		Error_Handler();
 8013eaa:	f000 f891 	bl	8013fd0 <Error_Handler>
	}
}
 8013eae:	bf00      	nop
 8013eb0:	3750      	adds	r7, #80	; 0x50
 8013eb2:	46bd      	mov	sp, r7
 8013eb4:	bd80      	pop	{r7, pc}
 8013eb6:	bf00      	nop
 8013eb8:	40023800 	.word	0x40023800
 8013ebc:	40007000 	.word	0x40007000

08013ec0 <Get_Build_Details>:

/* USER CODE BEGIN 4 */
void Get_Build_Details(void)
{
 8013ec0:	b580      	push	{r7, lr}
 8013ec2:	b08e      	sub	sp, #56	; 0x38
 8013ec4:	af00      	add	r7, sp, #0
	uint8_t CRC_Array[50] = {0,};
 8013ec6:	2300      	movs	r3, #0
 8013ec8:	607b      	str	r3, [r7, #4]
 8013eca:	f107 0308 	add.w	r3, r7, #8
 8013ece:	222e      	movs	r2, #46	; 0x2e
 8013ed0:	2100      	movs	r1, #0
 8013ed2:	4618      	mov	r0, r3
 8013ed4:	f00e fd2a 	bl	802292c <memset>
	printf("\n_____________________________________________\n");
 8013ed8:	481d      	ldr	r0, [pc, #116]	; (8013f50 <Get_Build_Details+0x90>)
 8013eda:	f00e feab 	bl	8022c34 <puts>
	printf("Build Date:%s\n",__DATE__);
 8013ede:	491d      	ldr	r1, [pc, #116]	; (8013f54 <Get_Build_Details+0x94>)
 8013ee0:	481d      	ldr	r0, [pc, #116]	; (8013f58 <Get_Build_Details+0x98>)
 8013ee2:	f00e fe0b 	bl	8022afc <iprintf>
	printf("Build Time:%s\n",__TIME__);
 8013ee6:	491d      	ldr	r1, [pc, #116]	; (8013f5c <Get_Build_Details+0x9c>)
 8013ee8:	481d      	ldr	r0, [pc, #116]	; (8013f60 <Get_Build_Details+0xa0>)
 8013eea:	f00e fe07 	bl	8022afc <iprintf>
	strcpy((char *)CRC_Array,(const char *)__DATE__);
 8013eee:	1d3b      	adds	r3, r7, #4
 8013ef0:	4a18      	ldr	r2, [pc, #96]	; (8013f54 <Get_Build_Details+0x94>)
 8013ef2:	ca07      	ldmia	r2, {r0, r1, r2}
 8013ef4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	strcat((char *)CRC_Array,(const char *)__TIME__);
 8013ef8:	1d3b      	adds	r3, r7, #4
 8013efa:	4618      	mov	r0, r3
 8013efc:	f7ec f9aa 	bl	8000254 <strlen>
 8013f00:	4603      	mov	r3, r0
 8013f02:	461a      	mov	r2, r3
 8013f04:	1d3b      	adds	r3, r7, #4
 8013f06:	4413      	add	r3, r2
 8013f08:	4914      	ldr	r1, [pc, #80]	; (8013f5c <Get_Build_Details+0x9c>)
 8013f0a:	461a      	mov	r2, r3
 8013f0c:	460b      	mov	r3, r1
 8013f0e:	cb03      	ldmia	r3!, {r0, r1}
 8013f10:	6010      	str	r0, [r2, #0]
 8013f12:	6051      	str	r1, [r2, #4]
 8013f14:	781b      	ldrb	r3, [r3, #0]
 8013f16:	7213      	strb	r3, [r2, #8]
	Build_CRC = GetCRC16(0, CRC_Array, strlen((const char *)CRC_Array));
 8013f18:	1d3b      	adds	r3, r7, #4
 8013f1a:	4618      	mov	r0, r3
 8013f1c:	f7ec f99a 	bl	8000254 <strlen>
 8013f20:	4603      	mov	r3, r0
 8013f22:	b21a      	sxth	r2, r3
 8013f24:	1d3b      	adds	r3, r7, #4
 8013f26:	4619      	mov	r1, r3
 8013f28:	2000      	movs	r0, #0
 8013f2a:	f7ff f94b 	bl	80131c4 <GetCRC16>
 8013f2e:	4603      	mov	r3, r0
 8013f30:	461a      	mov	r2, r3
 8013f32:	4b0c      	ldr	r3, [pc, #48]	; (8013f64 <Get_Build_Details+0xa4>)
 8013f34:	801a      	strh	r2, [r3, #0]
	printf("Build Name:%s_VERSION:%s\n",__BUILD_NAME__,__BUILD_VERSION__);
 8013f36:	4a0c      	ldr	r2, [pc, #48]	; (8013f68 <Get_Build_Details+0xa8>)
 8013f38:	490c      	ldr	r1, [pc, #48]	; (8013f6c <Get_Build_Details+0xac>)
 8013f3a:	480d      	ldr	r0, [pc, #52]	; (8013f70 <Get_Build_Details+0xb0>)
 8013f3c:	f00e fdde 	bl	8022afc <iprintf>
	printf("_____________________________________________\n");
 8013f40:	480c      	ldr	r0, [pc, #48]	; (8013f74 <Get_Build_Details+0xb4>)
 8013f42:	f00e fe77 	bl	8022c34 <puts>

}
 8013f46:	bf00      	nop
 8013f48:	3738      	adds	r7, #56	; 0x38
 8013f4a:	46bd      	mov	sp, r7
 8013f4c:	bd80      	pop	{r7, pc}
 8013f4e:	bf00      	nop
 8013f50:	08027474 	.word	0x08027474
 8013f54:	080274a4 	.word	0x080274a4
 8013f58:	080274b0 	.word	0x080274b0
 8013f5c:	080274c0 	.word	0x080274c0
 8013f60:	080274cc 	.word	0x080274cc
 8013f64:	20009d50 	.word	0x20009d50
 8013f68:	080274dc 	.word	0x080274dc
 8013f6c:	080274e4 	.word	0x080274e4
 8013f70:	080274fc 	.word	0x080274fc
 8013f74:	08027518 	.word	0x08027518

08013f78 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8013f78:	b580      	push	{r7, lr}
 8013f7a:	b084      	sub	sp, #16
 8013f7c:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8013f7e:	463b      	mov	r3, r7
 8013f80:	2200      	movs	r2, #0
 8013f82:	601a      	str	r2, [r3, #0]
 8013f84:	605a      	str	r2, [r3, #4]
 8013f86:	609a      	str	r2, [r3, #8]
 8013f88:	60da      	str	r2, [r3, #12]

	/* Disables the MPU */
	HAL_MPU_Disable();
 8013f8a:	f002 fdc5 	bl	8016b18 <HAL_MPU_Disable>

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8013f8e:	2301      	movs	r3, #1
 8013f90:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8013f92:	2300      	movs	r3, #0
 8013f94:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x0;
 8013f96:	2300      	movs	r3, #0
 8013f98:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8013f9a:	231f      	movs	r3, #31
 8013f9c:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x87;
 8013f9e:	2387      	movs	r3, #135	; 0x87
 8013fa0:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8013fa2:	2300      	movs	r3, #0
 8013fa4:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8013fa6:	2300      	movs	r3, #0
 8013fa8:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8013faa:	2301      	movs	r3, #1
 8013fac:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8013fae:	2301      	movs	r3, #1
 8013fb0:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8013fb2:	2300      	movs	r3, #0
 8013fb4:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8013fb6:	2300      	movs	r3, #0
 8013fb8:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8013fba:	463b      	mov	r3, r7
 8013fbc:	4618      	mov	r0, r3
 8013fbe:	f002 fde3 	bl	8016b88 <HAL_MPU_ConfigRegion>
	/* Enables the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8013fc2:	2004      	movs	r0, #4
 8013fc4:	f002 fdc0 	bl	8016b48 <HAL_MPU_Enable>

}
 8013fc8:	bf00      	nop
 8013fca:	3710      	adds	r7, #16
 8013fcc:	46bd      	mov	sp, r7
 8013fce:	bd80      	pop	{r7, pc}

08013fd0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8013fd0:	b480      	push	{r7}
 8013fd2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8013fd4:	b672      	cpsid	i
}
 8013fd6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8013fd8:	e7fe      	b.n	8013fd8 <Error_Handler+0x8>
	...

08013fdc <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8013fdc:	b580      	push	{r7, lr}
 8013fde:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8013fe0:	4b06      	ldr	r3, [pc, #24]	; (8013ffc <MX_RNG_Init+0x20>)
 8013fe2:	4a07      	ldr	r2, [pc, #28]	; (8014000 <MX_RNG_Init+0x24>)
 8013fe4:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8013fe6:	4805      	ldr	r0, [pc, #20]	; (8013ffc <MX_RNG_Init+0x20>)
 8013fe8:	f006 f9b0 	bl	801a34c <HAL_RNG_Init>
 8013fec:	4603      	mov	r3, r0
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d001      	beq.n	8013ff6 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8013ff2:	f7ff ffed 	bl	8013fd0 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8013ff6:	bf00      	nop
 8013ff8:	bd80      	pop	{r7, pc}
 8013ffa:	bf00      	nop
 8013ffc:	20009d2c 	.word	0x20009d2c
 8014000:	50060800 	.word	0x50060800

08014004 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8014004:	b580      	push	{r7, lr}
 8014006:	b0a8      	sub	sp, #160	; 0xa0
 8014008:	af00      	add	r7, sp, #0
 801400a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801400c:	f107 0310 	add.w	r3, r7, #16
 8014010:	2290      	movs	r2, #144	; 0x90
 8014012:	2100      	movs	r1, #0
 8014014:	4618      	mov	r0, r3
 8014016:	f00e fc89 	bl	802292c <memset>
  if(rngHandle->Instance==RNG)
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	681b      	ldr	r3, [r3, #0]
 801401e:	4a11      	ldr	r2, [pc, #68]	; (8014064 <HAL_RNG_MspInit+0x60>)
 8014020:	4293      	cmp	r3, r2
 8014022:	d11b      	bne.n	801405c <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8014024:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8014028:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 801402a:	2300      	movs	r3, #0
 801402c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8014030:	f107 0310 	add.w	r3, r7, #16
 8014034:	4618      	mov	r0, r3
 8014036:	f005 fd61 	bl	8019afc <HAL_RCCEx_PeriphCLKConfig>
 801403a:	4603      	mov	r3, r0
 801403c:	2b00      	cmp	r3, #0
 801403e:	d001      	beq.n	8014044 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8014040:	f7ff ffc6 	bl	8013fd0 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8014044:	4b08      	ldr	r3, [pc, #32]	; (8014068 <HAL_RNG_MspInit+0x64>)
 8014046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014048:	4a07      	ldr	r2, [pc, #28]	; (8014068 <HAL_RNG_MspInit+0x64>)
 801404a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801404e:	6353      	str	r3, [r2, #52]	; 0x34
 8014050:	4b05      	ldr	r3, [pc, #20]	; (8014068 <HAL_RNG_MspInit+0x64>)
 8014052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014058:	60fb      	str	r3, [r7, #12]
 801405a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 801405c:	bf00      	nop
 801405e:	37a0      	adds	r7, #160	; 0xa0
 8014060:	46bd      	mov	sp, r7
 8014062:	bd80      	pop	{r7, pc}
 8014064:	50060800 	.word	0x50060800
 8014068:	40023800 	.word	0x40023800

0801406c <__NVIC_SystemReset>:
{
 801406c:	b480      	push	{r7}
 801406e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8014070:	f3bf 8f4f 	dsb	sy
}
 8014074:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8014076:	4b06      	ldr	r3, [pc, #24]	; (8014090 <__NVIC_SystemReset+0x24>)
 8014078:	68db      	ldr	r3, [r3, #12]
 801407a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 801407e:	4904      	ldr	r1, [pc, #16]	; (8014090 <__NVIC_SystemReset+0x24>)
 8014080:	4b04      	ldr	r3, [pc, #16]	; (8014094 <__NVIC_SystemReset+0x28>)
 8014082:	4313      	orrs	r3, r2
 8014084:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8014086:	f3bf 8f4f 	dsb	sy
}
 801408a:	bf00      	nop
    __NOP();
 801408c:	bf00      	nop
 801408e:	e7fd      	b.n	801408c <__NVIC_SystemReset+0x20>
 8014090:	e000ed00 	.word	0xe000ed00
 8014094:	05fa0004 	.word	0x05fa0004

08014098 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8014098:	b580      	push	{r7, lr}
 801409a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 801409c:	4b1b      	ldr	r3, [pc, #108]	; (801410c <MX_SPI1_Init+0x74>)
 801409e:	4a1c      	ldr	r2, [pc, #112]	; (8014110 <MX_SPI1_Init+0x78>)
 80140a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80140a2:	4b1a      	ldr	r3, [pc, #104]	; (801410c <MX_SPI1_Init+0x74>)
 80140a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80140a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80140aa:	4b18      	ldr	r3, [pc, #96]	; (801410c <MX_SPI1_Init+0x74>)
 80140ac:	2200      	movs	r2, #0
 80140ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80140b0:	4b16      	ldr	r3, [pc, #88]	; (801410c <MX_SPI1_Init+0x74>)
 80140b2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80140b6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80140b8:	4b14      	ldr	r3, [pc, #80]	; (801410c <MX_SPI1_Init+0x74>)
 80140ba:	2200      	movs	r2, #0
 80140bc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80140be:	4b13      	ldr	r3, [pc, #76]	; (801410c <MX_SPI1_Init+0x74>)
 80140c0:	2200      	movs	r2, #0
 80140c2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80140c4:	4b11      	ldr	r3, [pc, #68]	; (801410c <MX_SPI1_Init+0x74>)
 80140c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80140ca:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80140cc:	4b0f      	ldr	r3, [pc, #60]	; (801410c <MX_SPI1_Init+0x74>)
 80140ce:	2208      	movs	r2, #8
 80140d0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80140d2:	4b0e      	ldr	r3, [pc, #56]	; (801410c <MX_SPI1_Init+0x74>)
 80140d4:	2200      	movs	r2, #0
 80140d6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80140d8:	4b0c      	ldr	r3, [pc, #48]	; (801410c <MX_SPI1_Init+0x74>)
 80140da:	2200      	movs	r2, #0
 80140dc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80140de:	4b0b      	ldr	r3, [pc, #44]	; (801410c <MX_SPI1_Init+0x74>)
 80140e0:	2200      	movs	r2, #0
 80140e2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80140e4:	4b09      	ldr	r3, [pc, #36]	; (801410c <MX_SPI1_Init+0x74>)
 80140e6:	2207      	movs	r2, #7
 80140e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80140ea:	4b08      	ldr	r3, [pc, #32]	; (801410c <MX_SPI1_Init+0x74>)
 80140ec:	2200      	movs	r2, #0
 80140ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80140f0:	4b06      	ldr	r3, [pc, #24]	; (801410c <MX_SPI1_Init+0x74>)
 80140f2:	2208      	movs	r2, #8
 80140f4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80140f6:	4805      	ldr	r0, [pc, #20]	; (801410c <MX_SPI1_Init+0x74>)
 80140f8:	f006 f9bd 	bl	801a476 <HAL_SPI_Init>
 80140fc:	4603      	mov	r3, r0
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d001      	beq.n	8014106 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8014102:	f7ff ff65 	bl	8013fd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8014106:	bf00      	nop
 8014108:	bd80      	pop	{r7, pc}
 801410a:	bf00      	nop
 801410c:	20009d54 	.word	0x20009d54
 8014110:	40013000 	.word	0x40013000

08014114 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8014114:	b580      	push	{r7, lr}
 8014116:	b08c      	sub	sp, #48	; 0x30
 8014118:	af00      	add	r7, sp, #0
 801411a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801411c:	f107 031c 	add.w	r3, r7, #28
 8014120:	2200      	movs	r2, #0
 8014122:	601a      	str	r2, [r3, #0]
 8014124:	605a      	str	r2, [r3, #4]
 8014126:	609a      	str	r2, [r3, #8]
 8014128:	60da      	str	r2, [r3, #12]
 801412a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	681b      	ldr	r3, [r3, #0]
 8014130:	4a33      	ldr	r2, [pc, #204]	; (8014200 <HAL_SPI_MspInit+0xec>)
 8014132:	4293      	cmp	r3, r2
 8014134:	d160      	bne.n	80141f8 <HAL_SPI_MspInit+0xe4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8014136:	4b33      	ldr	r3, [pc, #204]	; (8014204 <HAL_SPI_MspInit+0xf0>)
 8014138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801413a:	4a32      	ldr	r2, [pc, #200]	; (8014204 <HAL_SPI_MspInit+0xf0>)
 801413c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8014140:	6453      	str	r3, [r2, #68]	; 0x44
 8014142:	4b30      	ldr	r3, [pc, #192]	; (8014204 <HAL_SPI_MspInit+0xf0>)
 8014144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014146:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801414a:	61bb      	str	r3, [r7, #24]
 801414c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801414e:	4b2d      	ldr	r3, [pc, #180]	; (8014204 <HAL_SPI_MspInit+0xf0>)
 8014150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014152:	4a2c      	ldr	r2, [pc, #176]	; (8014204 <HAL_SPI_MspInit+0xf0>)
 8014154:	f043 0301 	orr.w	r3, r3, #1
 8014158:	6313      	str	r3, [r2, #48]	; 0x30
 801415a:	4b2a      	ldr	r3, [pc, #168]	; (8014204 <HAL_SPI_MspInit+0xf0>)
 801415c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801415e:	f003 0301 	and.w	r3, r3, #1
 8014162:	617b      	str	r3, [r7, #20]
 8014164:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8014166:	4b27      	ldr	r3, [pc, #156]	; (8014204 <HAL_SPI_MspInit+0xf0>)
 8014168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801416a:	4a26      	ldr	r2, [pc, #152]	; (8014204 <HAL_SPI_MspInit+0xf0>)
 801416c:	f043 0308 	orr.w	r3, r3, #8
 8014170:	6313      	str	r3, [r2, #48]	; 0x30
 8014172:	4b24      	ldr	r3, [pc, #144]	; (8014204 <HAL_SPI_MspInit+0xf0>)
 8014174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014176:	f003 0308 	and.w	r3, r3, #8
 801417a:	613b      	str	r3, [r7, #16]
 801417c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 801417e:	4b21      	ldr	r3, [pc, #132]	; (8014204 <HAL_SPI_MspInit+0xf0>)
 8014180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014182:	4a20      	ldr	r2, [pc, #128]	; (8014204 <HAL_SPI_MspInit+0xf0>)
 8014184:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014188:	6313      	str	r3, [r2, #48]	; 0x30
 801418a:	4b1e      	ldr	r3, [pc, #120]	; (8014204 <HAL_SPI_MspInit+0xf0>)
 801418c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801418e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014192:	60fb      	str	r3, [r7, #12]
 8014194:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin;
 8014196:	2320      	movs	r3, #32
 8014198:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801419a:	2302      	movs	r3, #2
 801419c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801419e:	2300      	movs	r3, #0
 80141a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80141a2:	2303      	movs	r3, #3
 80141a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80141a6:	2305      	movs	r3, #5
 80141a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPI1_SCK_GPIO_Port, &GPIO_InitStruct);
 80141aa:	f107 031c 	add.w	r3, r7, #28
 80141ae:	4619      	mov	r1, r3
 80141b0:	4815      	ldr	r0, [pc, #84]	; (8014208 <HAL_SPI_MspInit+0xf4>)
 80141b2:	f003 ffa5 	bl	8018100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MOSI_Pin;
 80141b6:	2380      	movs	r3, #128	; 0x80
 80141b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80141ba:	2302      	movs	r3, #2
 80141bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80141be:	2300      	movs	r3, #0
 80141c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80141c2:	2303      	movs	r3, #3
 80141c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80141c6:	2305      	movs	r3, #5
 80141c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPI1_MOSI_GPIO_Port, &GPIO_InitStruct);
 80141ca:	f107 031c 	add.w	r3, r7, #28
 80141ce:	4619      	mov	r1, r3
 80141d0:	480e      	ldr	r0, [pc, #56]	; (801420c <HAL_SPI_MspInit+0xf8>)
 80141d2:	f003 ff95 	bl	8018100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MISO_Pin;
 80141d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80141da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80141dc:	2302      	movs	r3, #2
 80141de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80141e0:	2300      	movs	r3, #0
 80141e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80141e4:	2303      	movs	r3, #3
 80141e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80141e8:	2305      	movs	r3, #5
 80141ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPI1_MISO_GPIO_Port, &GPIO_InitStruct);
 80141ec:	f107 031c 	add.w	r3, r7, #28
 80141f0:	4619      	mov	r1, r3
 80141f2:	4807      	ldr	r0, [pc, #28]	; (8014210 <HAL_SPI_MspInit+0xfc>)
 80141f4:	f003 ff84 	bl	8018100 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80141f8:	bf00      	nop
 80141fa:	3730      	adds	r7, #48	; 0x30
 80141fc:	46bd      	mov	sp, r7
 80141fe:	bd80      	pop	{r7, pc}
 8014200:	40013000 	.word	0x40013000
 8014204:	40023800 	.word	0x40023800
 8014208:	40020000 	.word	0x40020000
 801420c:	40020c00 	.word	0x40020c00
 8014210:	40021800 	.word	0x40021800

08014214 <SPI_WriteInFlash>:

	SPI_WriteInFlash(uc_ChipSel,Ul_MemAddr,us_Size,pp_DataPtr);
}

uint8_t  SPI_WriteInFlash(uint8_t Chip,uint32_t Ul_Address,uint16_t uc_Len,uint8_t *uc_pp_Buff)
{
 8014214:	b580      	push	{r7, lr}
 8014216:	b086      	sub	sp, #24
 8014218:	af00      	add	r7, sp, #0
 801421a:	60b9      	str	r1, [r7, #8]
 801421c:	607b      	str	r3, [r7, #4]
 801421e:	4603      	mov	r3, r0
 8014220:	73fb      	strb	r3, [r7, #15]
 8014222:	4613      	mov	r3, r2
 8014224:	81bb      	strh	r3, [r7, #12]

	uint8_t Return_Value=0;
 8014226:	2300      	movs	r3, #0
 8014228:	75fb      	strb	r3, [r7, #23]
	switch(Chip)
 801422a:	7bfb      	ldrb	r3, [r7, #15]
 801422c:	3b01      	subs	r3, #1
 801422e:	2b03      	cmp	r3, #3
 8014230:	d828      	bhi.n	8014284 <SPI_WriteInFlash+0x70>
 8014232:	a201      	add	r2, pc, #4	; (adr r2, 8014238 <SPI_WriteInFlash+0x24>)
 8014234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014238:	08014249 	.word	0x08014249
 801423c:	08014259 	.word	0x08014259
 8014240:	08014267 	.word	0x08014267
 8014244:	08014275 	.word	0x08014275
	{
	case CHIP1://To select FLASH1
		CHIP_Port = CS1_GPIO_Port;
 8014248:	4b75      	ldr	r3, [pc, #468]	; (8014420 <SPI_WriteInFlash+0x20c>)
 801424a:	4a76      	ldr	r2, [pc, #472]	; (8014424 <SPI_WriteInFlash+0x210>)
 801424c:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS1_Pin;
 801424e:	4b76      	ldr	r3, [pc, #472]	; (8014428 <SPI_WriteInFlash+0x214>)
 8014250:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014254:	601a      	str	r2, [r3, #0]
		break;
 8014256:	e018      	b.n	801428a <SPI_WriteInFlash+0x76>
	case CHIP2://To select FLASH2
		CHIP_Port = CS2_GPIO_Port;
 8014258:	4b71      	ldr	r3, [pc, #452]	; (8014420 <SPI_WriteInFlash+0x20c>)
 801425a:	4a74      	ldr	r2, [pc, #464]	; (801442c <SPI_WriteInFlash+0x218>)
 801425c:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS2_Pin;
 801425e:	4b72      	ldr	r3, [pc, #456]	; (8014428 <SPI_WriteInFlash+0x214>)
 8014260:	2220      	movs	r2, #32
 8014262:	601a      	str	r2, [r3, #0]
		break;
 8014264:	e011      	b.n	801428a <SPI_WriteInFlash+0x76>
	case CHIP3://To select FLASH3
		CHIP_Port = CS3_GPIO_Port;
 8014266:	4b6e      	ldr	r3, [pc, #440]	; (8014420 <SPI_WriteInFlash+0x20c>)
 8014268:	4a70      	ldr	r2, [pc, #448]	; (801442c <SPI_WriteInFlash+0x218>)
 801426a:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS3_Pin;
 801426c:	4b6e      	ldr	r3, [pc, #440]	; (8014428 <SPI_WriteInFlash+0x214>)
 801426e:	2240      	movs	r2, #64	; 0x40
 8014270:	601a      	str	r2, [r3, #0]
		break;
 8014272:	e00a      	b.n	801428a <SPI_WriteInFlash+0x76>
	case CHIP4://To select FLASH4
		CHIP_Port = CS4_GPIO_Port;
 8014274:	4b6a      	ldr	r3, [pc, #424]	; (8014420 <SPI_WriteInFlash+0x20c>)
 8014276:	4a6e      	ldr	r2, [pc, #440]	; (8014430 <SPI_WriteInFlash+0x21c>)
 8014278:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS4_Pin;
 801427a:	4b6b      	ldr	r3, [pc, #428]	; (8014428 <SPI_WriteInFlash+0x214>)
 801427c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8014280:	601a      	str	r2, [r3, #0]
		break;
 8014282:	e002      	b.n	801428a <SPI_WriteInFlash+0x76>
	default:printf("Wrong Chip selection\n");
 8014284:	486b      	ldr	r0, [pc, #428]	; (8014434 <SPI_WriteInFlash+0x220>)
 8014286:	f00e fcd5 	bl	8022c34 <puts>
	}
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 801428a:	4b65      	ldr	r3, [pc, #404]	; (8014420 <SPI_WriteInFlash+0x20c>)
 801428c:	681b      	ldr	r3, [r3, #0]
 801428e:	4a66      	ldr	r2, [pc, #408]	; (8014428 <SPI_WriteInFlash+0x214>)
 8014290:	6812      	ldr	r2, [r2, #0]
 8014292:	b291      	uxth	r1, r2
 8014294:	2201      	movs	r2, #1
 8014296:	4618      	mov	r0, r3
 8014298:	f004 f8f6 	bl	8018488 <HAL_GPIO_WritePin>





	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 801429c:	4b60      	ldr	r3, [pc, #384]	; (8014420 <SPI_WriteInFlash+0x20c>)
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	4a61      	ldr	r2, [pc, #388]	; (8014428 <SPI_WriteInFlash+0x214>)
 80142a2:	6812      	ldr	r2, [r2, #0]
 80142a4:	b291      	uxth	r1, r2
 80142a6:	2200      	movs	r2, #0
 80142a8:	4618      	mov	r0, r3
 80142aa:	f004 f8ed 	bl	8018488 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_WREN, 1, 100);/* write enable=0x06 */
 80142ae:	2364      	movs	r3, #100	; 0x64
 80142b0:	2201      	movs	r2, #1
 80142b2:	4961      	ldr	r1, [pc, #388]	; (8014438 <SPI_WriteInFlash+0x224>)
 80142b4:	4861      	ldr	r0, [pc, #388]	; (801443c <SPI_WriteInFlash+0x228>)
 80142b6:	f006 f989 	bl	801a5cc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 80142ba:	4b59      	ldr	r3, [pc, #356]	; (8014420 <SPI_WriteInFlash+0x20c>)
 80142bc:	681b      	ldr	r3, [r3, #0]
 80142be:	4a5a      	ldr	r2, [pc, #360]	; (8014428 <SPI_WriteInFlash+0x214>)
 80142c0:	6812      	ldr	r2, [r2, #0]
 80142c2:	b291      	uxth	r1, r2
 80142c4:	2201      	movs	r2, #1
 80142c6:	4618      	mov	r0, r3
 80142c8:	f004 f8de 	bl	8018488 <HAL_GPIO_WritePin>

	while (1)
	{
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 80142cc:	4b54      	ldr	r3, [pc, #336]	; (8014420 <SPI_WriteInFlash+0x20c>)
 80142ce:	681b      	ldr	r3, [r3, #0]
 80142d0:	4a55      	ldr	r2, [pc, #340]	; (8014428 <SPI_WriteInFlash+0x214>)
 80142d2:	6812      	ldr	r2, [r2, #0]
 80142d4:	b291      	uxth	r1, r2
 80142d6:	2200      	movs	r2, #0
 80142d8:	4618      	mov	r0, r3
 80142da:	f004 f8d5 	bl	8018488 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_RDSR, sizeof(EEPROM_RDSR), 100);/* check status to see if write enabled is latched=0x05 */
 80142de:	2364      	movs	r3, #100	; 0x64
 80142e0:	2201      	movs	r2, #1
 80142e2:	4957      	ldr	r1, [pc, #348]	; (8014440 <SPI_WriteInFlash+0x22c>)
 80142e4:	4855      	ldr	r0, [pc, #340]	; (801443c <SPI_WriteInFlash+0x228>)
 80142e6:	f006 f971 	bl	801a5cc <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 80142ea:	2364      	movs	r3, #100	; 0x64
 80142ec:	2201      	movs	r2, #1
 80142ee:	4955      	ldr	r1, [pc, #340]	; (8014444 <SPI_WriteInFlash+0x230>)
 80142f0:	4852      	ldr	r0, [pc, #328]	; (801443c <SPI_WriteInFlash+0x228>)
 80142f2:	f006 fad9 	bl	801a8a8 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 80142f6:	4b4a      	ldr	r3, [pc, #296]	; (8014420 <SPI_WriteInFlash+0x20c>)
 80142f8:	681b      	ldr	r3, [r3, #0]
 80142fa:	4a4b      	ldr	r2, [pc, #300]	; (8014428 <SPI_WriteInFlash+0x214>)
 80142fc:	6812      	ldr	r2, [r2, #0]
 80142fe:	b291      	uxth	r1, r2
 8014300:	2201      	movs	r2, #1
 8014302:	4618      	mov	r0, r3
 8014304:	f004 f8c0 	bl	8018488 <HAL_GPIO_WritePin>
		if ( (SPI_RX_Data & 0x02) == 0x02 )	/* bit 0 is ready, bit 1 is write enable */
 8014308:	4b4e      	ldr	r3, [pc, #312]	; (8014444 <SPI_WriteInFlash+0x230>)
 801430a:	781b      	ldrb	r3, [r3, #0]
 801430c:	f003 0302 	and.w	r3, r3, #2
 8014310:	2b00      	cmp	r3, #0
 8014312:	d103      	bne.n	801431c <SPI_WriteInFlash+0x108>
			break;
		}
		else
		{

			printf("\n Write enable not latched.......");
 8014314:	484c      	ldr	r0, [pc, #304]	; (8014448 <SPI_WriteInFlash+0x234>)
 8014316:	f00e fbf1 	bl	8022afc <iprintf>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 801431a:	e7d7      	b.n	80142cc <SPI_WriteInFlash+0xb8>
			break;
 801431c:	bf00      	nop
		}
	}

	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 801431e:	4b40      	ldr	r3, [pc, #256]	; (8014420 <SPI_WriteInFlash+0x20c>)
 8014320:	681b      	ldr	r3, [r3, #0]
 8014322:	4a41      	ldr	r2, [pc, #260]	; (8014428 <SPI_WriteInFlash+0x214>)
 8014324:	6812      	ldr	r2, [r2, #0]
 8014326:	b291      	uxth	r1, r2
 8014328:	2200      	movs	r2, #0
 801432a:	4618      	mov	r0, r3
 801432c:	f004 f8ac 	bl	8018488 <HAL_GPIO_WritePin>
	spi_cmd[0]=EEPROM_WRITE;/* Write command 0x02 */
 8014330:	2202      	movs	r2, #2
 8014332:	4b46      	ldr	r3, [pc, #280]	; (801444c <SPI_WriteInFlash+0x238>)
 8014334:	701a      	strb	r2, [r3, #0]
	spi_cmd[1]=Ul_Address>>16;/* Read address offset is 0x000000 */
 8014336:	68bb      	ldr	r3, [r7, #8]
 8014338:	0c1b      	lsrs	r3, r3, #16
 801433a:	b2da      	uxtb	r2, r3
 801433c:	4b43      	ldr	r3, [pc, #268]	; (801444c <SPI_WriteInFlash+0x238>)
 801433e:	705a      	strb	r2, [r3, #1]
	spi_cmd[2]=Ul_Address>>8;
 8014340:	68bb      	ldr	r3, [r7, #8]
 8014342:	0a1b      	lsrs	r3, r3, #8
 8014344:	b2da      	uxtb	r2, r3
 8014346:	4b41      	ldr	r3, [pc, #260]	; (801444c <SPI_WriteInFlash+0x238>)
 8014348:	709a      	strb	r2, [r3, #2]
	spi_cmd[3]=Ul_Address;
 801434a:	68bb      	ldr	r3, [r7, #8]
 801434c:	b2da      	uxtb	r2, r3
 801434e:	4b3f      	ldr	r3, [pc, #252]	; (801444c <SPI_WriteInFlash+0x238>)
 8014350:	70da      	strb	r2, [r3, #3]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 4, 100);
 8014352:	2364      	movs	r3, #100	; 0x64
 8014354:	2204      	movs	r2, #4
 8014356:	493d      	ldr	r1, [pc, #244]	; (801444c <SPI_WriteInFlash+0x238>)
 8014358:	4838      	ldr	r0, [pc, #224]	; (801443c <SPI_WriteInFlash+0x228>)
 801435a:	f006 f937 	bl	801a5cc <HAL_SPI_Transmit>

	HAL_SPI_Transmit(&hspi1, uc_pp_Buff,uc_Len , 1000);
 801435e:	89ba      	ldrh	r2, [r7, #12]
 8014360:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014364:	6879      	ldr	r1, [r7, #4]
 8014366:	4835      	ldr	r0, [pc, #212]	; (801443c <SPI_WriteInFlash+0x228>)
 8014368:	f006 f930 	bl	801a5cc <HAL_SPI_Transmit>
	//		}
	//		printf("[%03lu]:%c ",ulAddress,uc_pp_Buff[ulAddress]);
	//	}


	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 801436c:	4b2c      	ldr	r3, [pc, #176]	; (8014420 <SPI_WriteInFlash+0x20c>)
 801436e:	681b      	ldr	r3, [r3, #0]
 8014370:	4a2d      	ldr	r2, [pc, #180]	; (8014428 <SPI_WriteInFlash+0x214>)
 8014372:	6812      	ldr	r2, [r2, #0]
 8014374:	b291      	uxth	r1, r2
 8014376:	2201      	movs	r2, #1
 8014378:	4618      	mov	r0, r3
 801437a:	f004 f885 	bl	8018488 <HAL_GPIO_WritePin>

	while (1)
	{
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 801437e:	4b28      	ldr	r3, [pc, #160]	; (8014420 <SPI_WriteInFlash+0x20c>)
 8014380:	681b      	ldr	r3, [r3, #0]
 8014382:	4a29      	ldr	r2, [pc, #164]	; (8014428 <SPI_WriteInFlash+0x214>)
 8014384:	6812      	ldr	r2, [r2, #0]
 8014386:	b291      	uxth	r1, r2
 8014388:	2200      	movs	r2, #0
 801438a:	4618      	mov	r0, r3
 801438c:	f004 f87c 	bl	8018488 <HAL_GPIO_WritePin>
		spi_cmd[0]=EEPROM_RDSR;/* check status to see if write cycle is done or not */
 8014390:	2205      	movs	r2, #5
 8014392:	4b2e      	ldr	r3, [pc, #184]	; (801444c <SPI_WriteInFlash+0x238>)
 8014394:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 1, 100);
 8014396:	2364      	movs	r3, #100	; 0x64
 8014398:	2201      	movs	r2, #1
 801439a:	492c      	ldr	r1, [pc, #176]	; (801444c <SPI_WriteInFlash+0x238>)
 801439c:	4827      	ldr	r0, [pc, #156]	; (801443c <SPI_WriteInFlash+0x228>)
 801439e:	f006 f915 	bl	801a5cc <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 80143a2:	2364      	movs	r3, #100	; 0x64
 80143a4:	2201      	movs	r2, #1
 80143a6:	4927      	ldr	r1, [pc, #156]	; (8014444 <SPI_WriteInFlash+0x230>)
 80143a8:	4824      	ldr	r0, [pc, #144]	; (801443c <SPI_WriteInFlash+0x228>)
 80143aa:	f006 fa7d 	bl	801a8a8 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 80143ae:	4b1c      	ldr	r3, [pc, #112]	; (8014420 <SPI_WriteInFlash+0x20c>)
 80143b0:	681b      	ldr	r3, [r3, #0]
 80143b2:	4a1d      	ldr	r2, [pc, #116]	; (8014428 <SPI_WriteInFlash+0x214>)
 80143b4:	6812      	ldr	r2, [r2, #0]
 80143b6:	b291      	uxth	r1, r2
 80143b8:	2201      	movs	r2, #1
 80143ba:	4618      	mov	r0, r3
 80143bc:	f004 f864 	bl	8018488 <HAL_GPIO_WritePin>
		if((SPI_RX_Data & 0x01) == 0x00 )	/* bit 0 to 0 is ready */
 80143c0:	4b20      	ldr	r3, [pc, #128]	; (8014444 <SPI_WriteInFlash+0x230>)
 80143c2:	781b      	ldrb	r3, [r3, #0]
 80143c4:	f003 0301 	and.w	r3, r3, #1
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d1d8      	bne.n	801437e <SPI_WriteInFlash+0x16a>
		{
			Return_Value=1;
 80143cc:	2301      	movs	r3, #1
 80143ce:	75fb      	strb	r3, [r7, #23]
			//int	ui_test = 1;
			//printf("ui_test in write flash=%d\n",ui_test);
			break;
 80143d0:	bf00      	nop
		{
			;//DisplayString("\nDevice is busy in Erasing.....",DisPort);
		}
	}
	/*Write Disable*/
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 80143d2:	4b13      	ldr	r3, [pc, #76]	; (8014420 <SPI_WriteInFlash+0x20c>)
 80143d4:	681b      	ldr	r3, [r3, #0]
 80143d6:	4a14      	ldr	r2, [pc, #80]	; (8014428 <SPI_WriteInFlash+0x214>)
 80143d8:	6812      	ldr	r2, [r2, #0]
 80143da:	b291      	uxth	r1, r2
 80143dc:	2200      	movs	r2, #0
 80143de:	4618      	mov	r0, r3
 80143e0:	f004 f852 	bl	8018488 <HAL_GPIO_WritePin>
	spi_cmd[0]=EEPROM_WRDI;/* write disable */
 80143e4:	2204      	movs	r2, #4
 80143e6:	4b19      	ldr	r3, [pc, #100]	; (801444c <SPI_WriteInFlash+0x238>)
 80143e8:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 1, 100);
 80143ea:	2364      	movs	r3, #100	; 0x64
 80143ec:	2201      	movs	r2, #1
 80143ee:	4917      	ldr	r1, [pc, #92]	; (801444c <SPI_WriteInFlash+0x238>)
 80143f0:	4812      	ldr	r0, [pc, #72]	; (801443c <SPI_WriteInFlash+0x228>)
 80143f2:	f006 f8eb 	bl	801a5cc <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 80143f6:	2364      	movs	r3, #100	; 0x64
 80143f8:	2201      	movs	r2, #1
 80143fa:	4912      	ldr	r1, [pc, #72]	; (8014444 <SPI_WriteInFlash+0x230>)
 80143fc:	480f      	ldr	r0, [pc, #60]	; (801443c <SPI_WriteInFlash+0x228>)
 80143fe:	f006 fa53 	bl	801a8a8 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8014402:	4b07      	ldr	r3, [pc, #28]	; (8014420 <SPI_WriteInFlash+0x20c>)
 8014404:	681b      	ldr	r3, [r3, #0]
 8014406:	4a08      	ldr	r2, [pc, #32]	; (8014428 <SPI_WriteInFlash+0x214>)
 8014408:	6812      	ldr	r2, [r2, #0]
 801440a:	b291      	uxth	r1, r2
 801440c:	2201      	movs	r2, #1
 801440e:	4618      	mov	r0, r3
 8014410:	f004 f83a 	bl	8018488 <HAL_GPIO_WritePin>

	return Return_Value;
 8014414:	7dfb      	ldrb	r3, [r7, #23]
}
 8014416:	4618      	mov	r0, r3
 8014418:	3718      	adds	r7, #24
 801441a:	46bd      	mov	sp, r7
 801441c:	bd80      	pop	{r7, pc}
 801441e:	bf00      	nop
 8014420:	20009d48 	.word	0x20009d48
 8014424:	40021800 	.word	0x40021800
 8014428:	20009d4c 	.word	0x20009d4c
 801442c:	40020c00 	.word	0x40020c00
 8014430:	40021000 	.word	0x40021000
 8014434:	08027548 	.word	0x08027548
 8014438:	080291b8 	.word	0x080291b8
 801443c:	20009d54 	.word	0x20009d54
 8014440:	080291b9 	.word	0x080291b9
 8014444:	20009d44 	.word	0x20009d44
 8014448:	08027560 	.word	0x08027560
 801444c:	20009d40 	.word	0x20009d40

08014450 <SPI_MemoryEraseBySector>:


int SPI_MemoryEraseBySector(uint8_t Chip,uint32_t Ul_Address){
 8014450:	b580      	push	{r7, lr}
 8014452:	b084      	sub	sp, #16
 8014454:	af00      	add	r7, sp, #0
 8014456:	4603      	mov	r3, r0
 8014458:	6039      	str	r1, [r7, #0]
 801445a:	71fb      	strb	r3, [r7, #7]

	int	Flash_Erase=0;
 801445c:	2300      	movs	r3, #0
 801445e:	60fb      	str	r3, [r7, #12]

	switch(Chip)
 8014460:	79fb      	ldrb	r3, [r7, #7]
 8014462:	3b01      	subs	r3, #1
 8014464:	2b03      	cmp	r3, #3
 8014466:	d829      	bhi.n	80144bc <SPI_MemoryEraseBySector+0x6c>
 8014468:	a201      	add	r2, pc, #4	; (adr r2, 8014470 <SPI_MemoryEraseBySector+0x20>)
 801446a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801446e:	bf00      	nop
 8014470:	08014481 	.word	0x08014481
 8014474:	08014491 	.word	0x08014491
 8014478:	0801449f 	.word	0x0801449f
 801447c:	080144ad 	.word	0x080144ad
	{
	case CHIP1:
		CHIP_Port = CS1_GPIO_Port;
 8014480:	4b6d      	ldr	r3, [pc, #436]	; (8014638 <SPI_MemoryEraseBySector+0x1e8>)
 8014482:	4a6e      	ldr	r2, [pc, #440]	; (801463c <SPI_MemoryEraseBySector+0x1ec>)
 8014484:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS1_Pin;
 8014486:	4b6e      	ldr	r3, [pc, #440]	; (8014640 <SPI_MemoryEraseBySector+0x1f0>)
 8014488:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801448c:	601a      	str	r2, [r3, #0]
		break;
 801448e:	e018      	b.n	80144c2 <SPI_MemoryEraseBySector+0x72>
	case CHIP2:
		CHIP_Port = CS2_GPIO_Port;
 8014490:	4b69      	ldr	r3, [pc, #420]	; (8014638 <SPI_MemoryEraseBySector+0x1e8>)
 8014492:	4a6c      	ldr	r2, [pc, #432]	; (8014644 <SPI_MemoryEraseBySector+0x1f4>)
 8014494:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS2_Pin;
 8014496:	4b6a      	ldr	r3, [pc, #424]	; (8014640 <SPI_MemoryEraseBySector+0x1f0>)
 8014498:	2220      	movs	r2, #32
 801449a:	601a      	str	r2, [r3, #0]
		break;
 801449c:	e011      	b.n	80144c2 <SPI_MemoryEraseBySector+0x72>
	case CHIP3:
		CHIP_Port = CS3_GPIO_Port;
 801449e:	4b66      	ldr	r3, [pc, #408]	; (8014638 <SPI_MemoryEraseBySector+0x1e8>)
 80144a0:	4a68      	ldr	r2, [pc, #416]	; (8014644 <SPI_MemoryEraseBySector+0x1f4>)
 80144a2:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS3_Pin;
 80144a4:	4b66      	ldr	r3, [pc, #408]	; (8014640 <SPI_MemoryEraseBySector+0x1f0>)
 80144a6:	2240      	movs	r2, #64	; 0x40
 80144a8:	601a      	str	r2, [r3, #0]
		break;
 80144aa:	e00a      	b.n	80144c2 <SPI_MemoryEraseBySector+0x72>
	case CHIP4:
		CHIP_Port = CS4_GPIO_Port;
 80144ac:	4b62      	ldr	r3, [pc, #392]	; (8014638 <SPI_MemoryEraseBySector+0x1e8>)
 80144ae:	4a66      	ldr	r2, [pc, #408]	; (8014648 <SPI_MemoryEraseBySector+0x1f8>)
 80144b0:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS4_Pin;
 80144b2:	4b63      	ldr	r3, [pc, #396]	; (8014640 <SPI_MemoryEraseBySector+0x1f0>)
 80144b4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80144b8:	601a      	str	r2, [r3, #0]
		break;
 80144ba:	e002      	b.n	80144c2 <SPI_MemoryEraseBySector+0x72>
	default:printf("Wrong Chip selection\n");
 80144bc:	4863      	ldr	r0, [pc, #396]	; (801464c <SPI_MemoryEraseBySector+0x1fc>)
 80144be:	f00e fbb9 	bl	8022c34 <puts>
	}


	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 80144c2:	4b5d      	ldr	r3, [pc, #372]	; (8014638 <SPI_MemoryEraseBySector+0x1e8>)
 80144c4:	681b      	ldr	r3, [r3, #0]
 80144c6:	4a5e      	ldr	r2, [pc, #376]	; (8014640 <SPI_MemoryEraseBySector+0x1f0>)
 80144c8:	6812      	ldr	r2, [r2, #0]
 80144ca:	b291      	uxth	r1, r2
 80144cc:	2200      	movs	r2, #0
 80144ce:	4618      	mov	r0, r3
 80144d0:	f003 ffda 	bl	8018488 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_WREN, 1, 100);/* write enable */
 80144d4:	2364      	movs	r3, #100	; 0x64
 80144d6:	2201      	movs	r2, #1
 80144d8:	495d      	ldr	r1, [pc, #372]	; (8014650 <SPI_MemoryEraseBySector+0x200>)
 80144da:	485e      	ldr	r0, [pc, #376]	; (8014654 <SPI_MemoryEraseBySector+0x204>)
 80144dc:	f006 f876 	bl	801a5cc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 80144e0:	4b55      	ldr	r3, [pc, #340]	; (8014638 <SPI_MemoryEraseBySector+0x1e8>)
 80144e2:	681b      	ldr	r3, [r3, #0]
 80144e4:	4a56      	ldr	r2, [pc, #344]	; (8014640 <SPI_MemoryEraseBySector+0x1f0>)
 80144e6:	6812      	ldr	r2, [r2, #0]
 80144e8:	b291      	uxth	r1, r2
 80144ea:	2201      	movs	r2, #1
 80144ec:	4618      	mov	r0, r3
 80144ee:	f003 ffcb 	bl	8018488 <HAL_GPIO_WritePin>

	while (1)
	{

		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 80144f2:	4b51      	ldr	r3, [pc, #324]	; (8014638 <SPI_MemoryEraseBySector+0x1e8>)
 80144f4:	681b      	ldr	r3, [r3, #0]
 80144f6:	4a52      	ldr	r2, [pc, #328]	; (8014640 <SPI_MemoryEraseBySector+0x1f0>)
 80144f8:	6812      	ldr	r2, [r2, #0]
 80144fa:	b291      	uxth	r1, r2
 80144fc:	2200      	movs	r2, #0
 80144fe:	4618      	mov	r0, r3
 8014500:	f003 ffc2 	bl	8018488 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_RDSR, sizeof(EEPROM_RDSR), 100);
 8014504:	2364      	movs	r3, #100	; 0x64
 8014506:	2201      	movs	r2, #1
 8014508:	4953      	ldr	r1, [pc, #332]	; (8014658 <SPI_MemoryEraseBySector+0x208>)
 801450a:	4852      	ldr	r0, [pc, #328]	; (8014654 <SPI_MemoryEraseBySector+0x204>)
 801450c:	f006 f85e 	bl	801a5cc <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 8014510:	2364      	movs	r3, #100	; 0x64
 8014512:	2201      	movs	r2, #1
 8014514:	4951      	ldr	r1, [pc, #324]	; (801465c <SPI_MemoryEraseBySector+0x20c>)
 8014516:	484f      	ldr	r0, [pc, #316]	; (8014654 <SPI_MemoryEraseBySector+0x204>)
 8014518:	f006 f9c6 	bl	801a8a8 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 801451c:	4b46      	ldr	r3, [pc, #280]	; (8014638 <SPI_MemoryEraseBySector+0x1e8>)
 801451e:	681b      	ldr	r3, [r3, #0]
 8014520:	4a47      	ldr	r2, [pc, #284]	; (8014640 <SPI_MemoryEraseBySector+0x1f0>)
 8014522:	6812      	ldr	r2, [r2, #0]
 8014524:	b291      	uxth	r1, r2
 8014526:	2201      	movs	r2, #1
 8014528:	4618      	mov	r0, r3
 801452a:	f003 ffad 	bl	8018488 <HAL_GPIO_WritePin>
		if ( (SPI_RX_Data & 0x02) == 0x02 )	/* bit 0 is ready, bit 1 is write enable */
 801452e:	4b4b      	ldr	r3, [pc, #300]	; (801465c <SPI_MemoryEraseBySector+0x20c>)
 8014530:	781b      	ldrb	r3, [r3, #0]
 8014532:	f003 0302 	and.w	r3, r3, #2
 8014536:	2b00      	cmp	r3, #0
 8014538:	d103      	bne.n	8014542 <SPI_MemoryEraseBySector+0xf2>
			break;
		}
		else
		{

			printf("\n Write enable not latched in erase mode.......");
 801453a:	4849      	ldr	r0, [pc, #292]	; (8014660 <SPI_MemoryEraseBySector+0x210>)
 801453c:	f00e fade 	bl	8022afc <iprintf>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8014540:	e7d7      	b.n	80144f2 <SPI_MemoryEraseBySector+0xa2>
			break;
 8014542:	bf00      	nop
		}
	}
	//printf("\nMemory Erase operation started");

	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8014544:	4b3c      	ldr	r3, [pc, #240]	; (8014638 <SPI_MemoryEraseBySector+0x1e8>)
 8014546:	681b      	ldr	r3, [r3, #0]
 8014548:	4a3d      	ldr	r2, [pc, #244]	; (8014640 <SPI_MemoryEraseBySector+0x1f0>)
 801454a:	6812      	ldr	r2, [r2, #0]
 801454c:	b291      	uxth	r1, r2
 801454e:	2200      	movs	r2, #0
 8014550:	4618      	mov	r0, r3
 8014552:	f003 ff99 	bl	8018488 <HAL_GPIO_WritePin>
	spi_cmd[0]=0x20;/* Bluck Erase command is 0xC7, low 256 bytes only */
 8014556:	4b43      	ldr	r3, [pc, #268]	; (8014664 <SPI_MemoryEraseBySector+0x214>)
 8014558:	2220      	movs	r2, #32
 801455a:	701a      	strb	r2, [r3, #0]
	spi_cmd[1]=Ul_Address>>16;
 801455c:	683b      	ldr	r3, [r7, #0]
 801455e:	0c1b      	lsrs	r3, r3, #16
 8014560:	b2da      	uxtb	r2, r3
 8014562:	4b40      	ldr	r3, [pc, #256]	; (8014664 <SPI_MemoryEraseBySector+0x214>)
 8014564:	705a      	strb	r2, [r3, #1]
	spi_cmd[2]=Ul_Address>>8;
 8014566:	683b      	ldr	r3, [r7, #0]
 8014568:	0a1b      	lsrs	r3, r3, #8
 801456a:	b2da      	uxtb	r2, r3
 801456c:	4b3d      	ldr	r3, [pc, #244]	; (8014664 <SPI_MemoryEraseBySector+0x214>)
 801456e:	709a      	strb	r2, [r3, #2]
	spi_cmd[3]=Ul_Address;
 8014570:	683b      	ldr	r3, [r7, #0]
 8014572:	b2da      	uxtb	r2, r3
 8014574:	4b3b      	ldr	r3, [pc, #236]	; (8014664 <SPI_MemoryEraseBySector+0x214>)
 8014576:	70da      	strb	r2, [r3, #3]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 4, 100);
 8014578:	2364      	movs	r3, #100	; 0x64
 801457a:	2204      	movs	r2, #4
 801457c:	4939      	ldr	r1, [pc, #228]	; (8014664 <SPI_MemoryEraseBySector+0x214>)
 801457e:	4835      	ldr	r0, [pc, #212]	; (8014654 <SPI_MemoryEraseBySector+0x204>)
 8014580:	f006 f824 	bl	801a5cc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8014584:	4b2c      	ldr	r3, [pc, #176]	; (8014638 <SPI_MemoryEraseBySector+0x1e8>)
 8014586:	681b      	ldr	r3, [r3, #0]
 8014588:	4a2d      	ldr	r2, [pc, #180]	; (8014640 <SPI_MemoryEraseBySector+0x1f0>)
 801458a:	6812      	ldr	r2, [r2, #0]
 801458c:	b291      	uxth	r1, r2
 801458e:	2201      	movs	r2, #1
 8014590:	4618      	mov	r0, r3
 8014592:	f003 ff79 	bl	8018488 <HAL_GPIO_WritePin>

	while (1)
	{
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8014596:	4b28      	ldr	r3, [pc, #160]	; (8014638 <SPI_MemoryEraseBySector+0x1e8>)
 8014598:	681b      	ldr	r3, [r3, #0]
 801459a:	4a29      	ldr	r2, [pc, #164]	; (8014640 <SPI_MemoryEraseBySector+0x1f0>)
 801459c:	6812      	ldr	r2, [r2, #0]
 801459e:	b291      	uxth	r1, r2
 80145a0:	2200      	movs	r2, #0
 80145a2:	4618      	mov	r0, r3
 80145a4:	f003 ff70 	bl	8018488 <HAL_GPIO_WritePin>
		spi_cmd[0]=EEPROM_RDSR;/* check status to see if write cycle is done or not */
 80145a8:	2205      	movs	r2, #5
 80145aa:	4b2e      	ldr	r3, [pc, #184]	; (8014664 <SPI_MemoryEraseBySector+0x214>)
 80145ac:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 1, 100);
 80145ae:	2364      	movs	r3, #100	; 0x64
 80145b0:	2201      	movs	r2, #1
 80145b2:	492c      	ldr	r1, [pc, #176]	; (8014664 <SPI_MemoryEraseBySector+0x214>)
 80145b4:	4827      	ldr	r0, [pc, #156]	; (8014654 <SPI_MemoryEraseBySector+0x204>)
 80145b6:	f006 f809 	bl	801a5cc <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 80145ba:	2364      	movs	r3, #100	; 0x64
 80145bc:	2201      	movs	r2, #1
 80145be:	4927      	ldr	r1, [pc, #156]	; (801465c <SPI_MemoryEraseBySector+0x20c>)
 80145c0:	4824      	ldr	r0, [pc, #144]	; (8014654 <SPI_MemoryEraseBySector+0x204>)
 80145c2:	f006 f971 	bl	801a8a8 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 80145c6:	4b1c      	ldr	r3, [pc, #112]	; (8014638 <SPI_MemoryEraseBySector+0x1e8>)
 80145c8:	681b      	ldr	r3, [r3, #0]
 80145ca:	4a1d      	ldr	r2, [pc, #116]	; (8014640 <SPI_MemoryEraseBySector+0x1f0>)
 80145cc:	6812      	ldr	r2, [r2, #0]
 80145ce:	b291      	uxth	r1, r2
 80145d0:	2201      	movs	r2, #1
 80145d2:	4618      	mov	r0, r3
 80145d4:	f003 ff58 	bl	8018488 <HAL_GPIO_WritePin>

		if((SPI_RX_Data & 0x01) == 0x00 )	/* bit 0 to 0 is ready */
 80145d8:	4b20      	ldr	r3, [pc, #128]	; (801465c <SPI_MemoryEraseBySector+0x20c>)
 80145da:	781b      	ldrb	r3, [r3, #0]
 80145dc:	f003 0301 	and.w	r3, r3, #1
 80145e0:	2b00      	cmp	r3, #0
 80145e2:	d1d8      	bne.n	8014596 <SPI_MemoryEraseBySector+0x146>
		{
			Flash_Erase = 1;
 80145e4:	2301      	movs	r3, #1
 80145e6:	60fb      	str	r3, [r7, #12]
			//printf("\nui_test in earse=%d",Flash_Erase);
			break;
 80145e8:	bf00      	nop
		{
			;//DisplayString("\nDevice is busy in Erasing.....",DisPort);
		}
	}
	/*Write Disable*/
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 80145ea:	4b13      	ldr	r3, [pc, #76]	; (8014638 <SPI_MemoryEraseBySector+0x1e8>)
 80145ec:	681b      	ldr	r3, [r3, #0]
 80145ee:	4a14      	ldr	r2, [pc, #80]	; (8014640 <SPI_MemoryEraseBySector+0x1f0>)
 80145f0:	6812      	ldr	r2, [r2, #0]
 80145f2:	b291      	uxth	r1, r2
 80145f4:	2200      	movs	r2, #0
 80145f6:	4618      	mov	r0, r3
 80145f8:	f003 ff46 	bl	8018488 <HAL_GPIO_WritePin>
	spi_cmd[0]=EEPROM_WRDI;/* write disable */
 80145fc:	2204      	movs	r2, #4
 80145fe:	4b19      	ldr	r3, [pc, #100]	; (8014664 <SPI_MemoryEraseBySector+0x214>)
 8014600:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 1, 100);
 8014602:	2364      	movs	r3, #100	; 0x64
 8014604:	2201      	movs	r2, #1
 8014606:	4917      	ldr	r1, [pc, #92]	; (8014664 <SPI_MemoryEraseBySector+0x214>)
 8014608:	4812      	ldr	r0, [pc, #72]	; (8014654 <SPI_MemoryEraseBySector+0x204>)
 801460a:	f005 ffdf 	bl	801a5cc <HAL_SPI_Transmit>

	HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 801460e:	2364      	movs	r3, #100	; 0x64
 8014610:	2201      	movs	r2, #1
 8014612:	4912      	ldr	r1, [pc, #72]	; (801465c <SPI_MemoryEraseBySector+0x20c>)
 8014614:	480f      	ldr	r0, [pc, #60]	; (8014654 <SPI_MemoryEraseBySector+0x204>)
 8014616:	f006 f947 	bl	801a8a8 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 801461a:	4b07      	ldr	r3, [pc, #28]	; (8014638 <SPI_MemoryEraseBySector+0x1e8>)
 801461c:	681b      	ldr	r3, [r3, #0]
 801461e:	4a08      	ldr	r2, [pc, #32]	; (8014640 <SPI_MemoryEraseBySector+0x1f0>)
 8014620:	6812      	ldr	r2, [r2, #0]
 8014622:	b291      	uxth	r1, r2
 8014624:	2201      	movs	r2, #1
 8014626:	4618      	mov	r0, r3
 8014628:	f003 ff2e 	bl	8018488 <HAL_GPIO_WritePin>
	return Flash_Erase;
 801462c:	68fb      	ldr	r3, [r7, #12]

}
 801462e:	4618      	mov	r0, r3
 8014630:	3710      	adds	r7, #16
 8014632:	46bd      	mov	sp, r7
 8014634:	bd80      	pop	{r7, pc}
 8014636:	bf00      	nop
 8014638:	20009d48 	.word	0x20009d48
 801463c:	40021800 	.word	0x40021800
 8014640:	20009d4c 	.word	0x20009d4c
 8014644:	40020c00 	.word	0x40020c00
 8014648:	40021000 	.word	0x40021000
 801464c:	08027548 	.word	0x08027548
 8014650:	080291b8 	.word	0x080291b8
 8014654:	20009d54 	.word	0x20009d54
 8014658:	080291b9 	.word	0x080291b9
 801465c:	20009d44 	.word	0x20009d44
 8014660:	08027584 	.word	0x08027584
 8014664:	20009d40 	.word	0x20009d40

08014668 <SPI_ReadFromFlash>:
}



void SPI_ReadFromFlash(uint8_t Chip,uint32_t Ul_Address,uint16_t uc_Len,uint8_t *uc_pp_Buff)
{
 8014668:	b580      	push	{r7, lr}
 801466a:	b084      	sub	sp, #16
 801466c:	af00      	add	r7, sp, #0
 801466e:	60b9      	str	r1, [r7, #8]
 8014670:	607b      	str	r3, [r7, #4]
 8014672:	4603      	mov	r3, r0
 8014674:	73fb      	strb	r3, [r7, #15]
 8014676:	4613      	mov	r3, r2
 8014678:	81bb      	strh	r3, [r7, #12]
	switch(Chip)
 801467a:	7bfb      	ldrb	r3, [r7, #15]
 801467c:	3b01      	subs	r3, #1
 801467e:	2b03      	cmp	r3, #3
 8014680:	d828      	bhi.n	80146d4 <SPI_ReadFromFlash+0x6c>
 8014682:	a201      	add	r2, pc, #4	; (adr r2, 8014688 <SPI_ReadFromFlash+0x20>)
 8014684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014688:	08014699 	.word	0x08014699
 801468c:	080146a9 	.word	0x080146a9
 8014690:	080146b7 	.word	0x080146b7
 8014694:	080146c5 	.word	0x080146c5
	{
	case CHIP1:
		CHIP_Port = CS1_GPIO_Port;
 8014698:	4b2d      	ldr	r3, [pc, #180]	; (8014750 <SPI_ReadFromFlash+0xe8>)
 801469a:	4a2e      	ldr	r2, [pc, #184]	; (8014754 <SPI_ReadFromFlash+0xec>)
 801469c:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS1_Pin;
 801469e:	4b2e      	ldr	r3, [pc, #184]	; (8014758 <SPI_ReadFromFlash+0xf0>)
 80146a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80146a4:	601a      	str	r2, [r3, #0]
		break;
 80146a6:	e018      	b.n	80146da <SPI_ReadFromFlash+0x72>
	case CHIP2:
		CHIP_Port = CS2_GPIO_Port;
 80146a8:	4b29      	ldr	r3, [pc, #164]	; (8014750 <SPI_ReadFromFlash+0xe8>)
 80146aa:	4a2c      	ldr	r2, [pc, #176]	; (801475c <SPI_ReadFromFlash+0xf4>)
 80146ac:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS2_Pin;
 80146ae:	4b2a      	ldr	r3, [pc, #168]	; (8014758 <SPI_ReadFromFlash+0xf0>)
 80146b0:	2220      	movs	r2, #32
 80146b2:	601a      	str	r2, [r3, #0]
		break;
 80146b4:	e011      	b.n	80146da <SPI_ReadFromFlash+0x72>
	case CHIP3:
		CHIP_Port = CS3_GPIO_Port;
 80146b6:	4b26      	ldr	r3, [pc, #152]	; (8014750 <SPI_ReadFromFlash+0xe8>)
 80146b8:	4a28      	ldr	r2, [pc, #160]	; (801475c <SPI_ReadFromFlash+0xf4>)
 80146ba:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS3_Pin;
 80146bc:	4b26      	ldr	r3, [pc, #152]	; (8014758 <SPI_ReadFromFlash+0xf0>)
 80146be:	2240      	movs	r2, #64	; 0x40
 80146c0:	601a      	str	r2, [r3, #0]
		break;
 80146c2:	e00a      	b.n	80146da <SPI_ReadFromFlash+0x72>
	case CHIP4:
		CHIP_Port = CS4_GPIO_Port;
 80146c4:	4b22      	ldr	r3, [pc, #136]	; (8014750 <SPI_ReadFromFlash+0xe8>)
 80146c6:	4a26      	ldr	r2, [pc, #152]	; (8014760 <SPI_ReadFromFlash+0xf8>)
 80146c8:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS4_Pin;
 80146ca:	4b23      	ldr	r3, [pc, #140]	; (8014758 <SPI_ReadFromFlash+0xf0>)
 80146cc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80146d0:	601a      	str	r2, [r3, #0]
		break;
 80146d2:	e002      	b.n	80146da <SPI_ReadFromFlash+0x72>
	default:printf("Wrong Chip selection\n");
 80146d4:	4823      	ldr	r0, [pc, #140]	; (8014764 <SPI_ReadFromFlash+0xfc>)
 80146d6:	f00e faad 	bl	8022c34 <puts>
	}

	memset(uc_pp_Buff,0,uc_Len);
 80146da:	89bb      	ldrh	r3, [r7, #12]
 80146dc:	461a      	mov	r2, r3
 80146de:	2100      	movs	r1, #0
 80146e0:	6878      	ldr	r0, [r7, #4]
 80146e2:	f00e f923 	bl	802292c <memset>



	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 80146e6:	4b1a      	ldr	r3, [pc, #104]	; (8014750 <SPI_ReadFromFlash+0xe8>)
 80146e8:	681b      	ldr	r3, [r3, #0]
 80146ea:	4a1b      	ldr	r2, [pc, #108]	; (8014758 <SPI_ReadFromFlash+0xf0>)
 80146ec:	6812      	ldr	r2, [r2, #0]
 80146ee:	b291      	uxth	r1, r2
 80146f0:	2200      	movs	r2, #0
 80146f2:	4618      	mov	r0, r3
 80146f4:	f003 fec8 	bl	8018488 <HAL_GPIO_WritePin>
	spi_cmd[0]=EEPROM_READ;/* Read command is 0x03, low 256 bytes only */
 80146f8:	2203      	movs	r2, #3
 80146fa:	4b1b      	ldr	r3, [pc, #108]	; (8014768 <SPI_ReadFromFlash+0x100>)
 80146fc:	701a      	strb	r2, [r3, #0]
	spi_cmd[1]=Ul_Address>>16;
 80146fe:	68bb      	ldr	r3, [r7, #8]
 8014700:	0c1b      	lsrs	r3, r3, #16
 8014702:	b2da      	uxtb	r2, r3
 8014704:	4b18      	ldr	r3, [pc, #96]	; (8014768 <SPI_ReadFromFlash+0x100>)
 8014706:	705a      	strb	r2, [r3, #1]
	spi_cmd[2]=Ul_Address>>8;
 8014708:	68bb      	ldr	r3, [r7, #8]
 801470a:	0a1b      	lsrs	r3, r3, #8
 801470c:	b2da      	uxtb	r2, r3
 801470e:	4b16      	ldr	r3, [pc, #88]	; (8014768 <SPI_ReadFromFlash+0x100>)
 8014710:	709a      	strb	r2, [r3, #2]
	spi_cmd[3]=Ul_Address;
 8014712:	68bb      	ldr	r3, [r7, #8]
 8014714:	b2da      	uxtb	r2, r3
 8014716:	4b14      	ldr	r3, [pc, #80]	; (8014768 <SPI_ReadFromFlash+0x100>)
 8014718:	70da      	strb	r2, [r3, #3]


	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 4, 100);
 801471a:	2364      	movs	r3, #100	; 0x64
 801471c:	2204      	movs	r2, #4
 801471e:	4912      	ldr	r1, [pc, #72]	; (8014768 <SPI_ReadFromFlash+0x100>)
 8014720:	4812      	ldr	r0, [pc, #72]	; (801476c <SPI_ReadFromFlash+0x104>)
 8014722:	f005 ff53 	bl	801a5cc <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, uc_pp_Buff, uc_Len, 1000);
 8014726:	89ba      	ldrh	r2, [r7, #12]
 8014728:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801472c:	6879      	ldr	r1, [r7, #4]
 801472e:	480f      	ldr	r0, [pc, #60]	; (801476c <SPI_ReadFromFlash+0x104>)
 8014730:	f006 f8ba 	bl	801a8a8 <HAL_SPI_Receive>
	//		}
	//		printf("[%03lu]:%c ",ulAddress,uc_pp_Buff[ulAddress]);
	//	}


	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8014734:	4b06      	ldr	r3, [pc, #24]	; (8014750 <SPI_ReadFromFlash+0xe8>)
 8014736:	681b      	ldr	r3, [r3, #0]
 8014738:	4a07      	ldr	r2, [pc, #28]	; (8014758 <SPI_ReadFromFlash+0xf0>)
 801473a:	6812      	ldr	r2, [r2, #0]
 801473c:	b291      	uxth	r1, r2
 801473e:	2201      	movs	r2, #1
 8014740:	4618      	mov	r0, r3
 8014742:	f003 fea1 	bl	8018488 <HAL_GPIO_WritePin>

}
 8014746:	bf00      	nop
 8014748:	3710      	adds	r7, #16
 801474a:	46bd      	mov	sp, r7
 801474c:	bd80      	pop	{r7, pc}
 801474e:	bf00      	nop
 8014750:	20009d48 	.word	0x20009d48
 8014754:	40021800 	.word	0x40021800
 8014758:	20009d4c 	.word	0x20009d4c
 801475c:	40020c00 	.word	0x40020c00
 8014760:	40021000 	.word	0x40021000
 8014764:	08027548 	.word	0x08027548
 8014768:	20009d40 	.word	0x20009d40
 801476c:	20009d54 	.word	0x20009d54

08014770 <Get_Config>:




void Get_Config(void)
{
 8014770:	b580      	push	{r7, lr}
 8014772:	b084      	sub	sp, #16
 8014774:	af00      	add	r7, sp, #0
	uint32_t uc_times = 0;
 8014776:	2300      	movs	r3, #0
 8014778:	60fb      	str	r3, [r7, #12]
	//	unsigned char uc_SspIndex =0;//,uc_Block_Index = 0;


	size_t SIZE = (sizeof(EI_t))+6;
 801477a:	f240 3346 	movw	r3, #838	; 0x346
 801477e:	607b      	str	r3, [r7, #4]
	size_t SIZE_VAR  = SIZE;
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	60bb      	str	r3, [r7, #8]
	return;
#endif

#endif

	for(uc_times = 0; uc_times < SIZE; uc_times+=32)
 8014784:	2300      	movs	r3, #0
 8014786:	60fb      	str	r3, [r7, #12]
 8014788:	e01d      	b.n	80147c6 <Get_Config+0x56>
	{
		HAL_Delay(20);
 801478a:	2014      	movs	r0, #20
 801478c:	f001 f9b8 	bl	8015b00 <HAL_Delay>
		if(SIZE_VAR <32)
 8014790:	68bb      	ldr	r3, [r7, #8]
 8014792:	2b1f      	cmp	r3, #31
 8014794:	d809      	bhi.n	80147aa <Get_Config+0x3a>
		{
			SPI_ReadFromFlash(1, uc_times, SIZE_VAR, Config_Buff+uc_times);
 8014796:	68bb      	ldr	r3, [r7, #8]
 8014798:	b29a      	uxth	r2, r3
 801479a:	68fb      	ldr	r3, [r7, #12]
 801479c:	492c      	ldr	r1, [pc, #176]	; (8014850 <Get_Config+0xe0>)
 801479e:	440b      	add	r3, r1
 80147a0:	68f9      	ldr	r1, [r7, #12]
 80147a2:	2001      	movs	r0, #1
 80147a4:	f7ff ff60 	bl	8014668 <SPI_ReadFromFlash>
 80147a8:	e00a      	b.n	80147c0 <Get_Config+0x50>
		}
		else
		{
			SPI_ReadFromFlash(1, uc_times, 32, Config_Buff+uc_times);
 80147aa:	68fb      	ldr	r3, [r7, #12]
 80147ac:	4a28      	ldr	r2, [pc, #160]	; (8014850 <Get_Config+0xe0>)
 80147ae:	4413      	add	r3, r2
 80147b0:	2220      	movs	r2, #32
 80147b2:	68f9      	ldr	r1, [r7, #12]
 80147b4:	2001      	movs	r0, #1
 80147b6:	f7ff ff57 	bl	8014668 <SPI_ReadFromFlash>
			SIZE_VAR-=32;
 80147ba:	68bb      	ldr	r3, [r7, #8]
 80147bc:	3b20      	subs	r3, #32
 80147be:	60bb      	str	r3, [r7, #8]
	for(uc_times = 0; uc_times < SIZE; uc_times+=32)
 80147c0:	68fb      	ldr	r3, [r7, #12]
 80147c2:	3320      	adds	r3, #32
 80147c4:	60fb      	str	r3, [r7, #12]
 80147c6:	68fa      	ldr	r2, [r7, #12]
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	429a      	cmp	r2, r3
 80147cc:	d3dd      	bcc.n	801478a <Get_Config+0x1a>
		}
	}
	if(CheckCRC(Config_Buff, (sizeof(EI_t)+4)))
 80147ce:	f44f 7151 	mov.w	r1, #836	; 0x344
 80147d2:	481f      	ldr	r0, [pc, #124]	; (8014850 <Get_Config+0xe0>)
 80147d4:	f7fe fca2 	bl	801311c <CheckCRC>
 80147d8:	4603      	mov	r3, r0
 80147da:	2b00      	cmp	r3, #0
 80147dc:	d013      	beq.n	8014806 <Get_Config+0x96>
	{
		/* CRC OK From the Flash */
		//EI_Config_ptr = &EI_data+4;
		//memcpy(EI_Config_ptr,&Config_Buff[4],sizeof(EI_t));
		memcpy(&EI_data,&Config_Buff[4],sizeof(EI_t));
 80147de:	f44f 7250 	mov.w	r2, #832	; 0x340
 80147e2:	491c      	ldr	r1, [pc, #112]	; (8014854 <Get_Config+0xe4>)
 80147e4:	481c      	ldr	r0, [pc, #112]	; (8014858 <Get_Config+0xe8>)
 80147e6:	f00e f879 	bl	80228dc <memcpy>
		EI_Dat_CRC = ExtractBits(0, 16,&Config_Buff[(sizeof(EI_t)+4)]);
 80147ea:	4a1c      	ldr	r2, [pc, #112]	; (801485c <Get_Config+0xec>)
 80147ec:	2110      	movs	r1, #16
 80147ee:	2000      	movs	r0, #0
 80147f0:	f7eb ff10 	bl	8000614 <ExtractBits>
 80147f4:	4603      	mov	r3, r0
 80147f6:	b29a      	uxth	r2, r3
 80147f8:	4b19      	ldr	r3, [pc, #100]	; (8014860 <Get_Config+0xf0>)
 80147fa:	801a      	strh	r2, [r3, #0]
		while(1)
		{
			Data_Processing();
		}
	}
	if( 0 == UpdateFlag )
 80147fc:	4b19      	ldr	r3, [pc, #100]	; (8014864 <Get_Config+0xf4>)
 80147fe:	781b      	ldrb	r3, [r3, #0]
 8014800:	2b00      	cmp	r3, #0
 8014802:	d121      	bne.n	8014848 <Get_Config+0xd8>
 8014804:	e01e      	b.n	8014844 <Get_Config+0xd4>
		printf("\n EI Configuration CRC from Flash:%u\n",(sizeof(EI_t)+4));
 8014806:	f44f 7151 	mov.w	r1, #836	; 0x344
 801480a:	4817      	ldr	r0, [pc, #92]	; (8014868 <Get_Config+0xf8>)
 801480c:	f00e f976 	bl	8022afc <iprintf>
		EI_Config_ptr = (EI_t *)&Config_Buff[4];
 8014810:	4b16      	ldr	r3, [pc, #88]	; (801486c <Get_Config+0xfc>)
 8014812:	4a10      	ldr	r2, [pc, #64]	; (8014854 <Get_Config+0xe4>)
 8014814:	601a      	str	r2, [r3, #0]
		printf("\nCRC READ:[%x][%x]\n",Config_Buff[sizeof(EI_t)+3],Config_Buff[sizeof(EI_t)+4]);
 8014816:	4b0e      	ldr	r3, [pc, #56]	; (8014850 <Get_Config+0xe0>)
 8014818:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 801481c:	4619      	mov	r1, r3
 801481e:	4b0c      	ldr	r3, [pc, #48]	; (8014850 <Get_Config+0xe0>)
 8014820:	f893 3344 	ldrb.w	r3, [r3, #836]	; 0x344
 8014824:	461a      	mov	r2, r3
 8014826:	4812      	ldr	r0, [pc, #72]	; (8014870 <Get_Config+0x100>)
 8014828:	f00e f968 	bl	8022afc <iprintf>
		printf("\nCheck for CRC:");
 801482c:	4811      	ldr	r0, [pc, #68]	; (8014874 <Get_Config+0x104>)
 801482e:	f00e f965 	bl	8022afc <iprintf>
		gucFlagUpdate =3;
 8014832:	4b11      	ldr	r3, [pc, #68]	; (8014878 <Get_Config+0x108>)
 8014834:	2203      	movs	r2, #3
 8014836:	701a      	strb	r2, [r3, #0]
		printf("\n*************PLEASE LOAD EI DATS USING APPLICATION************\n");
 8014838:	4810      	ldr	r0, [pc, #64]	; (801487c <Get_Config+0x10c>)
 801483a:	f00e f9fb 	bl	8022c34 <puts>
			Data_Processing();
 801483e:	f000 f81f 	bl	8014880 <Data_Processing>
 8014842:	e7fc      	b.n	801483e <Get_Config+0xce>
	{
		readCanToStructs();
 8014844:	f7fb fdfc 	bl	8010440 <readCanToStructs>
	}
}
 8014848:	bf00      	nop
 801484a:	3710      	adds	r7, #16
 801484c:	46bd      	mov	sp, r7
 801484e:	bd80      	pop	{r7, pc}
 8014850:	20000648 	.word	0x20000648
 8014854:	2000064c 	.word	0x2000064c
 8014858:	20000304 	.word	0x20000304
 801485c:	2000098c 	.word	0x2000098c
 8014860:	20009d52 	.word	0x20009d52
 8014864:	20000a4b 	.word	0x20000a4b
 8014868:	080275b4 	.word	0x080275b4
 801486c:	20000300 	.word	0x20000300
 8014870:	080275dc 	.word	0x080275dc
 8014874:	080275f0 	.word	0x080275f0
 8014878:	20000a49 	.word	0x20000a49
 801487c:	08027600 	.word	0x08027600

08014880 <Data_Processing>:


void Data_Processing(void)
{
 8014880:	b580      	push	{r7, lr}
 8014882:	af00      	add	r7, sp, #0
	switch(gucFlagUpdate)
 8014884:	4b0b      	ldr	r3, [pc, #44]	; (80148b4 <Data_Processing+0x34>)
 8014886:	781b      	ldrb	r3, [r3, #0]
 8014888:	2b03      	cmp	r3, #3
 801488a:	d10e      	bne.n	80148aa <Data_Processing+0x2a>
	{
	case 3:
		gucUpdateFlag = CheckForRqst(ISP_PORT);
 801488c:	2000      	movs	r0, #0
 801488e:	f7f6 fb2d 	bl	800aeec <CheckForRqst>
 8014892:	4603      	mov	r3, r0
 8014894:	461a      	mov	r2, r3
 8014896:	4b08      	ldr	r3, [pc, #32]	; (80148b8 <Data_Processing+0x38>)
 8014898:	701a      	strb	r2, [r3, #0]
		if(1 == gucUpdateFlag)
 801489a:	4b07      	ldr	r3, [pc, #28]	; (80148b8 <Data_Processing+0x38>)
 801489c:	781b      	ldrb	r3, [r3, #0]
 801489e:	2b01      	cmp	r3, #1
 80148a0:	d105      	bne.n	80148ae <Data_Processing+0x2e>
		{
			AutoLoadDat(ISP_PORT); //
 80148a2:	2000      	movs	r0, #0
 80148a4:	f000 f80a 	bl	80148bc <AutoLoadDat>
		}
		break;
 80148a8:	e001      	b.n	80148ae <Data_Processing+0x2e>
	default:
		break;
 80148aa:	bf00      	nop
 80148ac:	e000      	b.n	80148b0 <Data_Processing+0x30>
		break;
 80148ae:	bf00      	nop
	}
}
 80148b0:	bf00      	nop
 80148b2:	bd80      	pop	{r7, pc}
 80148b4:	20000a49 	.word	0x20000a49
 80148b8:	20000a4a 	.word	0x20000a4a

080148bc <AutoLoadDat>:

void AutoLoadDat(unsigned char uc_port)
{
 80148bc:	b580      	push	{r7, lr}
 80148be:	b084      	sub	sp, #16
 80148c0:	af00      	add	r7, sp, #0
 80148c2:	4603      	mov	r3, r0
 80148c4:	71fb      	strb	r3, [r7, #7]
	unsigned char AckCount=0, NoOfBytes;
 80148c6:	2300      	movs	r3, #0
 80148c8:	73fb      	strb	r3, [r7, #15]
	while(1)
	{
		NoOfBytes=ReadAndFormConfig(uc_port,Config_Buff,1024);
 80148ca:	79fb      	ldrb	r3, [r7, #7]
 80148cc:	b29b      	uxth	r3, r3
 80148ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80148d2:	4934      	ldr	r1, [pc, #208]	; (80149a4 <AutoLoadDat+0xe8>)
 80148d4:	4618      	mov	r0, r3
 80148d6:	f7f6 fcb1 	bl	800b23c <ReadAndFormConfig>
 80148da:	4603      	mov	r3, r0
 80148dc:	73bb      	strb	r3, [r7, #14]
		HAL_IWDG_Refresh(&hiwdg);
 80148de:	4832      	ldr	r0, [pc, #200]	; (80149a8 <AutoLoadDat+0xec>)
 80148e0:	f004 fc68 	bl	80191b4 <HAL_IWDG_Refresh>

		//SpoiWDTReload();
		//CommWatchDogStrobe();
		if ( NoOfBytes > 1)
 80148e4:	7bbb      	ldrb	r3, [r7, #14]
 80148e6:	2b01      	cmp	r3, #1
 80148e8:	d921      	bls.n	801492e <AutoLoadDat+0x72>
		{
			gucUpdateFlag = 0;
 80148ea:	4b30      	ldr	r3, [pc, #192]	; (80149ac <AutoLoadDat+0xf0>)
 80148ec:	2200      	movs	r2, #0
 80148ee:	701a      	strb	r2, [r3, #0]
			if(!((Config_Buff[1] == ((DATLOADING>>8)&0XFF)) && (Config_Buff[2] == (DATLOADING & 0XFF)) && (Config_Buff[3] == DATCONFRMTION)))
 80148f0:	4b2c      	ldr	r3, [pc, #176]	; (80149a4 <AutoLoadDat+0xe8>)
 80148f2:	785b      	ldrb	r3, [r3, #1]
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	d107      	bne.n	8014908 <AutoLoadDat+0x4c>
 80148f8:	4b2a      	ldr	r3, [pc, #168]	; (80149a4 <AutoLoadDat+0xe8>)
 80148fa:	789b      	ldrb	r3, [r3, #2]
 80148fc:	2b01      	cmp	r3, #1
 80148fe:	d103      	bne.n	8014908 <AutoLoadDat+0x4c>
 8014900:	4b28      	ldr	r3, [pc, #160]	; (80149a4 <AutoLoadDat+0xe8>)
 8014902:	78db      	ldrb	r3, [r3, #3]
 8014904:	2b04      	cmp	r3, #4
 8014906:	d003      	beq.n	8014910 <AutoLoadDat+0x54>
			{
				printf("\nReceived Request Again\n");
 8014908:	4829      	ldr	r0, [pc, #164]	; (80149b0 <AutoLoadDat+0xf4>)
 801490a:	f00e f993 	bl	8022c34 <puts>
				return;
 801490e:	e046      	b.n	801499e <AutoLoadDat+0xe2>
			}
			EI_Config_ptr = (EI_t *)&Config_Buff[4];
 8014910:	4b28      	ldr	r3, [pc, #160]	; (80149b4 <AutoLoadDat+0xf8>)
 8014912:	4a29      	ldr	r2, [pc, #164]	; (80149b8 <AutoLoadDat+0xfc>)
 8014914:	601a      	str	r2, [r3, #0]
			saveConfig();
 8014916:	f000 f85b 	bl	80149d0 <saveConfig>
			gucFlagCheck =1;
 801491a:	4b28      	ldr	r3, [pc, #160]	; (80149bc <AutoLoadDat+0x100>)
 801491c:	2201      	movs	r2, #1
 801491e:	701a      	strb	r2, [r3, #0]
			ConfigFlag = 1;
 8014920:	4b27      	ldr	r3, [pc, #156]	; (80149c0 <AutoLoadDat+0x104>)
 8014922:	2201      	movs	r2, #1
 8014924:	701a      	strb	r2, [r3, #0]
			printf("\nData Received\n");
 8014926:	4827      	ldr	r0, [pc, #156]	; (80149c4 <AutoLoadDat+0x108>)
 8014928:	f00e f984 	bl	8022c34 <puts>
			break;
 801492c:	e037      	b.n	801499e <AutoLoadDat+0xe2>
		}
		else if(1 == NoOfBytes)
 801492e:	7bbb      	ldrb	r3, [r7, #14]
 8014930:	2b01      	cmp	r3, #1
 8014932:	d11b      	bne.n	801496c <AutoLoadDat+0xb0>
		{
			if(3 == AckCount)
 8014934:	7bfb      	ldrb	r3, [r7, #15]
 8014936:	2b03      	cmp	r3, #3
 8014938:	d109      	bne.n	801494e <AutoLoadDat+0x92>
			{
				gucUpdateFlag = 0;
 801493a:	4b1c      	ldr	r3, [pc, #112]	; (80149ac <AutoLoadDat+0xf0>)
 801493c:	2200      	movs	r2, #0
 801493e:	701a      	strb	r2, [r3, #0]
				SendAck(uc_port, DATLOADING, CRCNOK);
 8014940:	79fb      	ldrb	r3, [r7, #7]
 8014942:	2203      	movs	r2, #3
 8014944:	2101      	movs	r1, #1
 8014946:	4618      	mov	r0, r3
 8014948:	f7f6 fc2c 	bl	800b1a4 <SendAck>
				break;
 801494c:	e027      	b.n	801499e <AutoLoadDat+0xe2>
			}
			SendAck(uc_port, DATLOADING, ACKOK);
 801494e:	79fb      	ldrb	r3, [r7, #7]
 8014950:	2202      	movs	r2, #2
 8014952:	2101      	movs	r1, #1
 8014954:	4618      	mov	r0, r3
 8014956:	f7f6 fc25 	bl	800b1a4 <SendAck>
			gucReqstCurTim = HAL_GetTick();
 801495a:	f001 f8c5 	bl	8015ae8 <HAL_GetTick>
 801495e:	4603      	mov	r3, r0
 8014960:	4a19      	ldr	r2, [pc, #100]	; (80149c8 <AutoLoadDat+0x10c>)
 8014962:	6013      	str	r3, [r2, #0]
			AckCount++;
 8014964:	7bfb      	ldrb	r3, [r7, #15]
 8014966:	3301      	adds	r3, #1
 8014968:	73fb      	strb	r3, [r7, #15]
 801496a:	e7ae      	b.n	80148ca <AutoLoadDat+0xe>
		}
		else
		{
			if( (labs(HAL_GetTick() - gucReqstCurTim) > (WAITFORDAT * 1000)) )
 801496c:	f001 f8bc 	bl	8015ae8 <HAL_GetTick>
 8014970:	4602      	mov	r2, r0
 8014972:	4b15      	ldr	r3, [pc, #84]	; (80149c8 <AutoLoadDat+0x10c>)
 8014974:	681b      	ldr	r3, [r3, #0]
 8014976:	1ad3      	subs	r3, r2, r3
 8014978:	2b00      	cmp	r3, #0
 801497a:	bfb8      	it	lt
 801497c:	425b      	neglt	r3, r3
 801497e:	f247 5230 	movw	r2, #30000	; 0x7530
 8014982:	4293      	cmp	r3, r2
 8014984:	dda1      	ble.n	80148ca <AutoLoadDat+0xe>
			{
				gucUpdateFlag = 0;
 8014986:	4b09      	ldr	r3, [pc, #36]	; (80149ac <AutoLoadDat+0xf0>)
 8014988:	2200      	movs	r2, #0
 801498a:	701a      	strb	r2, [r3, #0]
				printf("\nNo Data recieved to Update\n");
 801498c:	480f      	ldr	r0, [pc, #60]	; (80149cc <AutoLoadDat+0x110>)
 801498e:	f00e f951 	bl	8022c34 <puts>
				SendAck(uc_port, DATLOADING, NODATA);
 8014992:	79fb      	ldrb	r3, [r7, #7]
 8014994:	2205      	movs	r2, #5
 8014996:	2101      	movs	r1, #1
 8014998:	4618      	mov	r0, r3
 801499a:	f7f6 fc03 	bl	800b1a4 <SendAck>
				break;
			}
		}
	}
}
 801499e:	3710      	adds	r7, #16
 80149a0:	46bd      	mov	sp, r7
 80149a2:	bd80      	pop	{r7, pc}
 80149a4:	20000648 	.word	0x20000648
 80149a8:	20009d1c 	.word	0x20009d1c
 80149ac:	20000a4a 	.word	0x20000a4a
 80149b0:	08027640 	.word	0x08027640
 80149b4:	20000300 	.word	0x20000300
 80149b8:	2000064c 	.word	0x2000064c
 80149bc:	20009d3c 	.word	0x20009d3c
 80149c0:	20009d3d 	.word	0x20009d3d
 80149c4:	08027658 	.word	0x08027658
 80149c8:	20000a4c 	.word	0x20000a4c
 80149cc:	08027668 	.word	0x08027668

080149d0 <saveConfig>:

unsigned char saveConfig(void)
{
 80149d0:	b580      	push	{r7, lr}
 80149d2:	b084      	sub	sp, #16
 80149d4:	af00      	add	r7, sp, #0
	uint32_t ulAddress = 0;
 80149d6:	2300      	movs	r3, #0
 80149d8:	60fb      	str	r3, [r7, #12]

	printf("\nSaveConfig\n");
 80149da:	4825      	ldr	r0, [pc, #148]	; (8014a70 <saveConfig+0xa0>)
 80149dc:	f00e f92a 	bl	8022c34 <puts>
	for(ulAddress=0;ulAddress<6;ulAddress++)
 80149e0:	2300      	movs	r3, #0
 80149e2:	60fb      	str	r3, [r7, #12]
 80149e4:	e011      	b.n	8014a0a <saveConfig+0x3a>
	{
		if(SPI_MemoryEraseBySector(1,(4096*ulAddress)))/*memory erase before writing*/
 80149e6:	68fb      	ldr	r3, [r7, #12]
 80149e8:	031b      	lsls	r3, r3, #12
 80149ea:	4619      	mov	r1, r3
 80149ec:	2001      	movs	r0, #1
 80149ee:	f7ff fd2f 	bl	8014450 <SPI_MemoryEraseBySector>
 80149f2:	4603      	mov	r3, r0
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	d005      	beq.n	8014a04 <saveConfig+0x34>
		{
			HAL_IWDG_Refresh(&hiwdg);
 80149f8:	481e      	ldr	r0, [pc, #120]	; (8014a74 <saveConfig+0xa4>)
 80149fa:	f004 fbdb 	bl	80191b4 <HAL_IWDG_Refresh>
			printf("FLASH ERASE SUCCESS\n");
 80149fe:	481e      	ldr	r0, [pc, #120]	; (8014a78 <saveConfig+0xa8>)
 8014a00:	f00e f918 	bl	8022c34 <puts>
	for(ulAddress=0;ulAddress<6;ulAddress++)
 8014a04:	68fb      	ldr	r3, [r7, #12]
 8014a06:	3301      	adds	r3, #1
 8014a08:	60fb      	str	r3, [r7, #12]
 8014a0a:	68fb      	ldr	r3, [r7, #12]
 8014a0c:	2b05      	cmp	r3, #5
 8014a0e:	d9ea      	bls.n	80149e6 <saveConfig+0x16>
		}
	}
	size_t SIZE = (sizeof(EI_t)+7);
 8014a10:	f240 3347 	movw	r3, #839	; 0x347
 8014a14:	607b      	str	r3, [r7, #4]
	size_t SIZE_VAR  = SIZE;
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	60bb      	str	r3, [r7, #8]

	for(ulAddress = 0; ulAddress < SIZE; ulAddress+=32)
 8014a1a:	2300      	movs	r3, #0
 8014a1c:	60fb      	str	r3, [r7, #12]
 8014a1e:	e01d      	b.n	8014a5c <saveConfig+0x8c>
	{
		HAL_IWDG_Refresh(&hiwdg);
 8014a20:	4814      	ldr	r0, [pc, #80]	; (8014a74 <saveConfig+0xa4>)
 8014a22:	f004 fbc7 	bl	80191b4 <HAL_IWDG_Refresh>
		if(SIZE_VAR <32)
 8014a26:	68bb      	ldr	r3, [r7, #8]
 8014a28:	2b1f      	cmp	r3, #31
 8014a2a:	d809      	bhi.n	8014a40 <saveConfig+0x70>
		{
			SPI_WriteInFlash(1, ulAddress, SIZE_VAR, Config_Buff+ulAddress);
 8014a2c:	68bb      	ldr	r3, [r7, #8]
 8014a2e:	b29a      	uxth	r2, r3
 8014a30:	68fb      	ldr	r3, [r7, #12]
 8014a32:	4912      	ldr	r1, [pc, #72]	; (8014a7c <saveConfig+0xac>)
 8014a34:	440b      	add	r3, r1
 8014a36:	68f9      	ldr	r1, [r7, #12]
 8014a38:	2001      	movs	r0, #1
 8014a3a:	f7ff fbeb 	bl	8014214 <SPI_WriteInFlash>
 8014a3e:	e00a      	b.n	8014a56 <saveConfig+0x86>
		}
		else
		{
			SPI_WriteInFlash(1, ulAddress, 32, Config_Buff+ulAddress);
 8014a40:	68fb      	ldr	r3, [r7, #12]
 8014a42:	4a0e      	ldr	r2, [pc, #56]	; (8014a7c <saveConfig+0xac>)
 8014a44:	4413      	add	r3, r2
 8014a46:	2220      	movs	r2, #32
 8014a48:	68f9      	ldr	r1, [r7, #12]
 8014a4a:	2001      	movs	r0, #1
 8014a4c:	f7ff fbe2 	bl	8014214 <SPI_WriteInFlash>
			SIZE_VAR-=32;
 8014a50:	68bb      	ldr	r3, [r7, #8]
 8014a52:	3b20      	subs	r3, #32
 8014a54:	60bb      	str	r3, [r7, #8]
	for(ulAddress = 0; ulAddress < SIZE; ulAddress+=32)
 8014a56:	68fb      	ldr	r3, [r7, #12]
 8014a58:	3320      	adds	r3, #32
 8014a5a:	60fb      	str	r3, [r7, #12]
 8014a5c:	68fa      	ldr	r2, [r7, #12]
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	429a      	cmp	r2, r3
 8014a62:	d3dd      	bcc.n	8014a20 <saveConfig+0x50>
		}
	}

	printf("\nCFG written successfully");
 8014a64:	4806      	ldr	r0, [pc, #24]	; (8014a80 <saveConfig+0xb0>)
 8014a66:	f00e f849 	bl	8022afc <iprintf>
	//		if((i%8)==0)
	//		{
	//			printf("\n");
	//		}
	//	}
	NVIC_SystemReset();
 8014a6a:	f7ff faff 	bl	801406c <__NVIC_SystemReset>
 8014a6e:	bf00      	nop
 8014a70:	08027684 	.word	0x08027684
 8014a74:	20009d1c 	.word	0x20009d1c
 8014a78:	08027690 	.word	0x08027690
 8014a7c:	20000648 	.word	0x20000648
 8014a80:	080276a4 	.word	0x080276a4

08014a84 <Print_BuildDat_Details>:
	return 1;
}


void Print_BuildDat_Details(void)
{
 8014a84:	b580      	push	{r7, lr}
 8014a86:	af00      	add	r7, sp, #0
	if(Debug_flag == 0)
 8014a88:	4b14      	ldr	r3, [pc, #80]	; (8014adc <Print_BuildDat_Details+0x58>)
 8014a8a:	781b      	ldrb	r3, [r3, #0]
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	d022      	beq.n	8014ad6 <Print_BuildDat_Details+0x52>
	{
		return;
	}
	static uint32_t PrintClk = 0;
	if(HAL_Elaps_Ticks(PrintClk) >= TEN_SEC)
 8014a90:	4b13      	ldr	r3, [pc, #76]	; (8014ae0 <Print_BuildDat_Details+0x5c>)
 8014a92:	681b      	ldr	r3, [r3, #0]
 8014a94:	4618      	mov	r0, r3
 8014a96:	f7fa fa3d 	bl	800ef14 <HAL_Elaps_Ticks>
 8014a9a:	4603      	mov	r3, r0
 8014a9c:	f242 720f 	movw	r2, #9999	; 0x270f
 8014aa0:	4293      	cmp	r3, r2
 8014aa2:	d919      	bls.n	8014ad8 <Print_BuildDat_Details+0x54>
	{
		//		strcpy((char *)EI_data.STN_NAME,"IRISET");
		printf("\n__________________BUILD DETAILS__________________\n");
 8014aa4:	480f      	ldr	r0, [pc, #60]	; (8014ae4 <Print_BuildDat_Details+0x60>)
 8014aa6:	f00e f8c5 	bl	8022c34 <puts>
		printf("STATION NAME:%s|",EI_data.STN_NAME);
 8014aaa:	490f      	ldr	r1, [pc, #60]	; (8014ae8 <Print_BuildDat_Details+0x64>)
 8014aac:	480f      	ldr	r0, [pc, #60]	; (8014aec <Print_BuildDat_Details+0x68>)
 8014aae:	f00e f825 	bl	8022afc <iprintf>
		printf("APP CRC:0X%04X|",EI_Dat_CRC);
 8014ab2:	4b0f      	ldr	r3, [pc, #60]	; (8014af0 <Print_BuildDat_Details+0x6c>)
 8014ab4:	881b      	ldrh	r3, [r3, #0]
 8014ab6:	4619      	mov	r1, r3
 8014ab8:	480e      	ldr	r0, [pc, #56]	; (8014af4 <Print_BuildDat_Details+0x70>)
 8014aba:	f00e f81f 	bl	8022afc <iprintf>
		printf("EXE CRC:0X%04X\n\n",Build_CRC);
 8014abe:	4b0e      	ldr	r3, [pc, #56]	; (8014af8 <Print_BuildDat_Details+0x74>)
 8014ac0:	881b      	ldrh	r3, [r3, #0]
 8014ac2:	4619      	mov	r1, r3
 8014ac4:	480d      	ldr	r0, [pc, #52]	; (8014afc <Print_BuildDat_Details+0x78>)
 8014ac6:	f00e f819 	bl	8022afc <iprintf>
		//printf("*********************************************************\n");

		PrintClk = HAL_GetTick();
 8014aca:	f001 f80d 	bl	8015ae8 <HAL_GetTick>
 8014ace:	4603      	mov	r3, r0
 8014ad0:	4a03      	ldr	r2, [pc, #12]	; (8014ae0 <Print_BuildDat_Details+0x5c>)
 8014ad2:	6013      	str	r3, [r2, #0]
 8014ad4:	e000      	b.n	8014ad8 <Print_BuildDat_Details+0x54>
		return;
 8014ad6:	bf00      	nop
	}
}
 8014ad8:	bd80      	pop	{r7, pc}
 8014ada:	bf00      	nop
 8014adc:	20000645 	.word	0x20000645
 8014ae0:	20009db8 	.word	0x20009db8
 8014ae4:	080276c0 	.word	0x080276c0
 8014ae8:	20000305 	.word	0x20000305
 8014aec:	080276f4 	.word	0x080276f4
 8014af0:	20009d52 	.word	0x20009d52
 8014af4:	08027708 	.word	0x08027708
 8014af8:	20009d50 	.word	0x20009d50
 8014afc:	08027718 	.word	0x08027718

08014b00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8014b00:	b580      	push	{r7, lr}
 8014b02:	b082      	sub	sp, #8
 8014b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8014b06:	4b0f      	ldr	r3, [pc, #60]	; (8014b44 <HAL_MspInit+0x44>)
 8014b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014b0a:	4a0e      	ldr	r2, [pc, #56]	; (8014b44 <HAL_MspInit+0x44>)
 8014b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014b10:	6413      	str	r3, [r2, #64]	; 0x40
 8014b12:	4b0c      	ldr	r3, [pc, #48]	; (8014b44 <HAL_MspInit+0x44>)
 8014b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014b1a:	607b      	str	r3, [r7, #4]
 8014b1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8014b1e:	4b09      	ldr	r3, [pc, #36]	; (8014b44 <HAL_MspInit+0x44>)
 8014b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014b22:	4a08      	ldr	r2, [pc, #32]	; (8014b44 <HAL_MspInit+0x44>)
 8014b24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8014b28:	6453      	str	r3, [r2, #68]	; 0x44
 8014b2a:	4b06      	ldr	r3, [pc, #24]	; (8014b44 <HAL_MspInit+0x44>)
 8014b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014b2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014b32:	603b      	str	r3, [r7, #0]
 8014b34:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8014b36:	2004      	movs	r0, #4
 8014b38:	f001 ffac 	bl	8016a94 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8014b3c:	bf00      	nop
 8014b3e:	3708      	adds	r7, #8
 8014b40:	46bd      	mov	sp, r7
 8014b42:	bd80      	pop	{r7, pc}
 8014b44:	40023800 	.word	0x40023800

08014b48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8014b48:	b480      	push	{r7}
 8014b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8014b4c:	e7fe      	b.n	8014b4c <NMI_Handler+0x4>

08014b4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8014b4e:	b480      	push	{r7}
 8014b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8014b52:	e7fe      	b.n	8014b52 <HardFault_Handler+0x4>

08014b54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8014b54:	b480      	push	{r7}
 8014b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8014b58:	e7fe      	b.n	8014b58 <MemManage_Handler+0x4>

08014b5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8014b5a:	b480      	push	{r7}
 8014b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8014b5e:	e7fe      	b.n	8014b5e <BusFault_Handler+0x4>

08014b60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8014b60:	b480      	push	{r7}
 8014b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8014b64:	e7fe      	b.n	8014b64 <UsageFault_Handler+0x4>

08014b66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8014b66:	b480      	push	{r7}
 8014b68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8014b6a:	bf00      	nop
 8014b6c:	46bd      	mov	sp, r7
 8014b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b72:	4770      	bx	lr

08014b74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8014b74:	b480      	push	{r7}
 8014b76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8014b78:	bf00      	nop
 8014b7a:	46bd      	mov	sp, r7
 8014b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b80:	4770      	bx	lr

08014b82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8014b82:	b480      	push	{r7}
 8014b84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8014b86:	bf00      	nop
 8014b88:	46bd      	mov	sp, r7
 8014b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b8e:	4770      	bx	lr

08014b90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8014b90:	b580      	push	{r7, lr}
 8014b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8014b94:	f000 ff94 	bl	8015ac0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8014b98:	bf00      	nop
 8014b9a:	bd80      	pop	{r7, pc}

08014b9c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8014b9c:	b580      	push	{r7, lr}
 8014b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EX_INT0_Pin);
 8014ba0:	2001      	movs	r0, #1
 8014ba2:	f003 fca5 	bl	80184f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8014ba6:	bf00      	nop
 8014ba8:	bd80      	pop	{r7, pc}

08014baa <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8014baa:	b580      	push	{r7, lr}
 8014bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EX_INT1_Pin);
 8014bae:	2002      	movs	r0, #2
 8014bb0:	f003 fc9e 	bl	80184f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8014bb4:	bf00      	nop
 8014bb6:	bd80      	pop	{r7, pc}

08014bb8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8014bb8:	b580      	push	{r7, lr}
 8014bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8014bbc:	4802      	ldr	r0, [pc, #8]	; (8014bc8 <TIM4_IRQHandler+0x10>)
 8014bbe:	f006 fbbb 	bl	801b338 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8014bc2:	bf00      	nop
 8014bc4:	bd80      	pop	{r7, pc}
 8014bc6:	bf00      	nop
 8014bc8:	20009dc0 	.word	0x20009dc0

08014bcc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8014bcc:	b580      	push	{r7, lr}
 8014bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8014bd0:	4802      	ldr	r0, [pc, #8]	; (8014bdc <USART1_IRQHandler+0x10>)
 8014bd2:	f006 fdd5 	bl	801b780 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8014bd6:	bf00      	nop
 8014bd8:	bd80      	pop	{r7, pc}
 8014bda:	bf00      	nop
 8014bdc:	2000bcf4 	.word	0x2000bcf4

08014be0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8014be0:	b580      	push	{r7, lr}
 8014be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8014be4:	4802      	ldr	r0, [pc, #8]	; (8014bf0 <TIM5_IRQHandler+0x10>)
 8014be6:	f006 fba7 	bl	801b338 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8014bea:	bf00      	nop
 8014bec:	bd80      	pop	{r7, pc}
 8014bee:	bf00      	nop
 8014bf0:	20009e7c 	.word	0x20009e7c

08014bf4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8014bf4:	b580      	push	{r7, lr}
 8014bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8014bf8:	4802      	ldr	r0, [pc, #8]	; (8014c04 <UART4_IRQHandler+0x10>)
 8014bfa:	f006 fdc1 	bl	801b780 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8014bfe:	bf00      	nop
 8014c00:	bd80      	pop	{r7, pc}
 8014c02:	bf00      	nop
 8014c04:	2000bacc 	.word	0x2000bacc

08014c08 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8014c08:	b580      	push	{r7, lr}
 8014c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8014c0c:	4802      	ldr	r0, [pc, #8]	; (8014c18 <UART5_IRQHandler+0x10>)
 8014c0e:	f006 fdb7 	bl	801b780 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8014c12:	bf00      	nop
 8014c14:	bd80      	pop	{r7, pc}
 8014c16:	bf00      	nop
 8014c18:	2000bb84 	.word	0x2000bb84

08014c1c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8014c1c:	b580      	push	{r7, lr}
 8014c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8014c20:	4802      	ldr	r0, [pc, #8]	; (8014c2c <TIM6_DAC_IRQHandler+0x10>)
 8014c22:	f006 fb89 	bl	801b338 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8014c26:	bf00      	nop
 8014c28:	bd80      	pop	{r7, pc}
 8014c2a:	bf00      	nop
 8014c2c:	20009f38 	.word	0x20009f38

08014c30 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8014c30:	b580      	push	{r7, lr}
 8014c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8014c34:	4802      	ldr	r0, [pc, #8]	; (8014c40 <TIM7_IRQHandler+0x10>)
 8014c36:	f006 fb7f 	bl	801b338 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8014c3a:	bf00      	nop
 8014c3c:	bd80      	pop	{r7, pc}
 8014c3e:	bf00      	nop
 8014c40:	20009ff4 	.word	0x20009ff4

08014c44 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8014c44:	b580      	push	{r7, lr}
 8014c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8014c48:	4802      	ldr	r0, [pc, #8]	; (8014c54 <ETH_IRQHandler+0x10>)
 8014c4a:	f002 fb73 	bl	8017334 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8014c4e:	bf00      	nop
 8014c50:	bd80      	pop	{r7, pc}
 8014c52:	bf00      	nop
 8014c54:	20010708 	.word	0x20010708

08014c58 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8014c58:	b580      	push	{r7, lr}
 8014c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8014c5c:	4802      	ldr	r0, [pc, #8]	; (8014c68 <CAN2_RX0_IRQHandler+0x10>)
 8014c5e:	f001 fc15 	bl	801648c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8014c62:	bf00      	nop
 8014c64:	bd80      	pop	{r7, pc}
 8014c66:	bf00      	nop
 8014c68:	20009b98 	.word	0x20009b98

08014c6c <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8014c6c:	b580      	push	{r7, lr}
 8014c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8014c70:	4802      	ldr	r0, [pc, #8]	; (8014c7c <CAN2_RX1_IRQHandler+0x10>)
 8014c72:	f001 fc0b 	bl	801648c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8014c76:	bf00      	nop
 8014c78:	bd80      	pop	{r7, pc}
 8014c7a:	bf00      	nop
 8014c7c:	20009b98 	.word	0x20009b98

08014c80 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8014c80:	b580      	push	{r7, lr}
 8014c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8014c84:	4802      	ldr	r0, [pc, #8]	; (8014c90 <UART7_IRQHandler+0x10>)
 8014c86:	f006 fd7b 	bl	801b780 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8014c8a:	bf00      	nop
 8014c8c:	bd80      	pop	{r7, pc}
 8014c8e:	bf00      	nop
 8014c90:	2000bc3c 	.word	0x2000bc3c

08014c94 <CAN3_RX0_IRQHandler>:

/**
  * @brief This function handles CAN3 RX0 interrupt.
  */
void CAN3_RX0_IRQHandler(void)
{
 8014c94:	b580      	push	{r7, lr}
 8014c96:	af00      	add	r7, sp, #0
	}
#endif

#if 1
  /* USER CODE END CAN3_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 8014c98:	4802      	ldr	r0, [pc, #8]	; (8014ca4 <CAN3_RX0_IRQHandler+0x10>)
 8014c9a:	f001 fbf7 	bl	801648c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_RX0_IRQn 1 */
#endif
  /* USER CODE END CAN3_RX0_IRQn 1 */
}
 8014c9e:	bf00      	nop
 8014ca0:	bd80      	pop	{r7, pc}
 8014ca2:	bf00      	nop
 8014ca4:	20009bfc 	.word	0x20009bfc

08014ca8 <CAN3_RX1_IRQHandler>:

/**
  * @brief This function handles CAN3 RX1 interrupt.
  */
void CAN3_RX1_IRQHandler(void)
{
 8014ca8:	b580      	push	{r7, lr}
 8014caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN3_RX1_IRQn 0 */

  /* USER CODE END CAN3_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 8014cac:	4802      	ldr	r0, [pc, #8]	; (8014cb8 <CAN3_RX1_IRQHandler+0x10>)
 8014cae:	f001 fbed 	bl	801648c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_RX1_IRQn 1 */

  /* USER CODE END CAN3_RX1_IRQn 1 */
}
 8014cb2:	bf00      	nop
 8014cb4:	bd80      	pop	{r7, pc}
 8014cb6:	bf00      	nop
 8014cb8:	20009bfc 	.word	0x20009bfc

08014cbc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8014cbc:	b480      	push	{r7}
 8014cbe:	af00      	add	r7, sp, #0
	return 1;
 8014cc0:	2301      	movs	r3, #1
}
 8014cc2:	4618      	mov	r0, r3
 8014cc4:	46bd      	mov	sp, r7
 8014cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cca:	4770      	bx	lr

08014ccc <_kill>:

int _kill(int pid, int sig)
{
 8014ccc:	b480      	push	{r7}
 8014cce:	b083      	sub	sp, #12
 8014cd0:	af00      	add	r7, sp, #0
 8014cd2:	6078      	str	r0, [r7, #4]
 8014cd4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8014cd6:	4b05      	ldr	r3, [pc, #20]	; (8014cec <_kill+0x20>)
 8014cd8:	2216      	movs	r2, #22
 8014cda:	601a      	str	r2, [r3, #0]
	return -1;
 8014cdc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014ce0:	4618      	mov	r0, r3
 8014ce2:	370c      	adds	r7, #12
 8014ce4:	46bd      	mov	sp, r7
 8014ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cea:	4770      	bx	lr
 8014cec:	2001434c 	.word	0x2001434c

08014cf0 <_exit>:

void _exit (int status)
{
 8014cf0:	b580      	push	{r7, lr}
 8014cf2:	b082      	sub	sp, #8
 8014cf4:	af00      	add	r7, sp, #0
 8014cf6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8014cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8014cfc:	6878      	ldr	r0, [r7, #4]
 8014cfe:	f7ff ffe5 	bl	8014ccc <_kill>
	while (1) {}		/* Make sure we hang here */
 8014d02:	e7fe      	b.n	8014d02 <_exit+0x12>

08014d04 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8014d04:	b580      	push	{r7, lr}
 8014d06:	b086      	sub	sp, #24
 8014d08:	af00      	add	r7, sp, #0
 8014d0a:	60f8      	str	r0, [r7, #12]
 8014d0c:	60b9      	str	r1, [r7, #8]
 8014d0e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8014d10:	2300      	movs	r3, #0
 8014d12:	617b      	str	r3, [r7, #20]
 8014d14:	e00a      	b.n	8014d2c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8014d16:	f3af 8000 	nop.w
 8014d1a:	4601      	mov	r1, r0
 8014d1c:	68bb      	ldr	r3, [r7, #8]
 8014d1e:	1c5a      	adds	r2, r3, #1
 8014d20:	60ba      	str	r2, [r7, #8]
 8014d22:	b2ca      	uxtb	r2, r1
 8014d24:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8014d26:	697b      	ldr	r3, [r7, #20]
 8014d28:	3301      	adds	r3, #1
 8014d2a:	617b      	str	r3, [r7, #20]
 8014d2c:	697a      	ldr	r2, [r7, #20]
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	429a      	cmp	r2, r3
 8014d32:	dbf0      	blt.n	8014d16 <_read+0x12>
	}

return len;
 8014d34:	687b      	ldr	r3, [r7, #4]
}
 8014d36:	4618      	mov	r0, r3
 8014d38:	3718      	adds	r7, #24
 8014d3a:	46bd      	mov	sp, r7
 8014d3c:	bd80      	pop	{r7, pc}

08014d3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8014d3e:	b580      	push	{r7, lr}
 8014d40:	b086      	sub	sp, #24
 8014d42:	af00      	add	r7, sp, #0
 8014d44:	60f8      	str	r0, [r7, #12]
 8014d46:	60b9      	str	r1, [r7, #8]
 8014d48:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8014d4a:	2300      	movs	r3, #0
 8014d4c:	617b      	str	r3, [r7, #20]
 8014d4e:	e009      	b.n	8014d64 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8014d50:	68bb      	ldr	r3, [r7, #8]
 8014d52:	1c5a      	adds	r2, r3, #1
 8014d54:	60ba      	str	r2, [r7, #8]
 8014d56:	781b      	ldrb	r3, [r3, #0]
 8014d58:	4618      	mov	r0, r3
 8014d5a:	f7eb fe9b 	bl	8000a94 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8014d5e:	697b      	ldr	r3, [r7, #20]
 8014d60:	3301      	adds	r3, #1
 8014d62:	617b      	str	r3, [r7, #20]
 8014d64:	697a      	ldr	r2, [r7, #20]
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	429a      	cmp	r2, r3
 8014d6a:	dbf1      	blt.n	8014d50 <_write+0x12>
	}
	return len;
 8014d6c:	687b      	ldr	r3, [r7, #4]
}
 8014d6e:	4618      	mov	r0, r3
 8014d70:	3718      	adds	r7, #24
 8014d72:	46bd      	mov	sp, r7
 8014d74:	bd80      	pop	{r7, pc}

08014d76 <_close>:

int _close(int file)
{
 8014d76:	b480      	push	{r7}
 8014d78:	b083      	sub	sp, #12
 8014d7a:	af00      	add	r7, sp, #0
 8014d7c:	6078      	str	r0, [r7, #4]
	return -1;
 8014d7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014d82:	4618      	mov	r0, r3
 8014d84:	370c      	adds	r7, #12
 8014d86:	46bd      	mov	sp, r7
 8014d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d8c:	4770      	bx	lr

08014d8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8014d8e:	b480      	push	{r7}
 8014d90:	b083      	sub	sp, #12
 8014d92:	af00      	add	r7, sp, #0
 8014d94:	6078      	str	r0, [r7, #4]
 8014d96:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8014d98:	683b      	ldr	r3, [r7, #0]
 8014d9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8014d9e:	605a      	str	r2, [r3, #4]
	return 0;
 8014da0:	2300      	movs	r3, #0
}
 8014da2:	4618      	mov	r0, r3
 8014da4:	370c      	adds	r7, #12
 8014da6:	46bd      	mov	sp, r7
 8014da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dac:	4770      	bx	lr

08014dae <_isatty>:

int _isatty(int file)
{
 8014dae:	b480      	push	{r7}
 8014db0:	b083      	sub	sp, #12
 8014db2:	af00      	add	r7, sp, #0
 8014db4:	6078      	str	r0, [r7, #4]
	return 1;
 8014db6:	2301      	movs	r3, #1
}
 8014db8:	4618      	mov	r0, r3
 8014dba:	370c      	adds	r7, #12
 8014dbc:	46bd      	mov	sp, r7
 8014dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dc2:	4770      	bx	lr

08014dc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8014dc4:	b480      	push	{r7}
 8014dc6:	b085      	sub	sp, #20
 8014dc8:	af00      	add	r7, sp, #0
 8014dca:	60f8      	str	r0, [r7, #12]
 8014dcc:	60b9      	str	r1, [r7, #8]
 8014dce:	607a      	str	r2, [r7, #4]
	return 0;
 8014dd0:	2300      	movs	r3, #0
}
 8014dd2:	4618      	mov	r0, r3
 8014dd4:	3714      	adds	r7, #20
 8014dd6:	46bd      	mov	sp, r7
 8014dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ddc:	4770      	bx	lr
	...

08014de0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8014de0:	b480      	push	{r7}
 8014de2:	b087      	sub	sp, #28
 8014de4:	af00      	add	r7, sp, #0
 8014de6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8014de8:	4a14      	ldr	r2, [pc, #80]	; (8014e3c <_sbrk+0x5c>)
 8014dea:	4b15      	ldr	r3, [pc, #84]	; (8014e40 <_sbrk+0x60>)
 8014dec:	1ad3      	subs	r3, r2, r3
 8014dee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8014df0:	697b      	ldr	r3, [r7, #20]
 8014df2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8014df4:	4b13      	ldr	r3, [pc, #76]	; (8014e44 <_sbrk+0x64>)
 8014df6:	681b      	ldr	r3, [r3, #0]
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	d102      	bne.n	8014e02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8014dfc:	4b11      	ldr	r3, [pc, #68]	; (8014e44 <_sbrk+0x64>)
 8014dfe:	4a12      	ldr	r2, [pc, #72]	; (8014e48 <_sbrk+0x68>)
 8014e00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8014e02:	4b10      	ldr	r3, [pc, #64]	; (8014e44 <_sbrk+0x64>)
 8014e04:	681a      	ldr	r2, [r3, #0]
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	4413      	add	r3, r2
 8014e0a:	693a      	ldr	r2, [r7, #16]
 8014e0c:	429a      	cmp	r2, r3
 8014e0e:	d205      	bcs.n	8014e1c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8014e10:	4b0e      	ldr	r3, [pc, #56]	; (8014e4c <_sbrk+0x6c>)
 8014e12:	220c      	movs	r2, #12
 8014e14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8014e16:	f04f 33ff 	mov.w	r3, #4294967295
 8014e1a:	e009      	b.n	8014e30 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8014e1c:	4b09      	ldr	r3, [pc, #36]	; (8014e44 <_sbrk+0x64>)
 8014e1e:	681b      	ldr	r3, [r3, #0]
 8014e20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8014e22:	4b08      	ldr	r3, [pc, #32]	; (8014e44 <_sbrk+0x64>)
 8014e24:	681a      	ldr	r2, [r3, #0]
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	4413      	add	r3, r2
 8014e2a:	4a06      	ldr	r2, [pc, #24]	; (8014e44 <_sbrk+0x64>)
 8014e2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8014e2e:	68fb      	ldr	r3, [r7, #12]
}
 8014e30:	4618      	mov	r0, r3
 8014e32:	371c      	adds	r7, #28
 8014e34:	46bd      	mov	sp, r7
 8014e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e3a:	4770      	bx	lr
 8014e3c:	20080000 	.word	0x20080000
 8014e40:	00000400 	.word	0x00000400
 8014e44:	20009dbc 	.word	0x20009dbc
 8014e48:	20014358 	.word	0x20014358
 8014e4c:	2001434c 	.word	0x2001434c

08014e50 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8014e50:	b480      	push	{r7}
 8014e52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8014e54:	4b06      	ldr	r3, [pc, #24]	; (8014e70 <SystemInit+0x20>)
 8014e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014e5a:	4a05      	ldr	r2, [pc, #20]	; (8014e70 <SystemInit+0x20>)
 8014e5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014e60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8014e64:	bf00      	nop
 8014e66:	46bd      	mov	sp, r7
 8014e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e6c:	4770      	bx	lr
 8014e6e:	bf00      	nop
 8014e70:	e000ed00 	.word	0xe000ed00

08014e74 <MX_USART1_UART_Init>:

}
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8014e74:	b580      	push	{r7, lr}
 8014e76:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8014e78:	4b16      	ldr	r3, [pc, #88]	; (8014ed4 <MX_USART1_UART_Init+0x60>)
 8014e7a:	4a17      	ldr	r2, [pc, #92]	; (8014ed8 <MX_USART1_UART_Init+0x64>)
 8014e7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8014e7e:	4b15      	ldr	r3, [pc, #84]	; (8014ed4 <MX_USART1_UART_Init+0x60>)
 8014e80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8014e84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8014e86:	4b13      	ldr	r3, [pc, #76]	; (8014ed4 <MX_USART1_UART_Init+0x60>)
 8014e88:	2200      	movs	r2, #0
 8014e8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8014e8c:	4b11      	ldr	r3, [pc, #68]	; (8014ed4 <MX_USART1_UART_Init+0x60>)
 8014e8e:	2200      	movs	r2, #0
 8014e90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8014e92:	4b10      	ldr	r3, [pc, #64]	; (8014ed4 <MX_USART1_UART_Init+0x60>)
 8014e94:	2200      	movs	r2, #0
 8014e96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8014e98:	4b0e      	ldr	r3, [pc, #56]	; (8014ed4 <MX_USART1_UART_Init+0x60>)
 8014e9a:	220c      	movs	r2, #12
 8014e9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8014e9e:	4b0d      	ldr	r3, [pc, #52]	; (8014ed4 <MX_USART1_UART_Init+0x60>)
 8014ea0:	2200      	movs	r2, #0
 8014ea2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8014ea4:	4b0b      	ldr	r3, [pc, #44]	; (8014ed4 <MX_USART1_UART_Init+0x60>)
 8014ea6:	2200      	movs	r2, #0
 8014ea8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8014eaa:	4b0a      	ldr	r3, [pc, #40]	; (8014ed4 <MX_USART1_UART_Init+0x60>)
 8014eac:	2200      	movs	r2, #0
 8014eae:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8014eb0:	4b08      	ldr	r3, [pc, #32]	; (8014ed4 <MX_USART1_UART_Init+0x60>)
 8014eb2:	2200      	movs	r2, #0
 8014eb4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8014eb6:	4807      	ldr	r0, [pc, #28]	; (8014ed4 <MX_USART1_UART_Init+0x60>)
 8014eb8:	f006 fb80 	bl	801b5bc <HAL_UART_Init>
 8014ebc:	4603      	mov	r3, r0
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	d001      	beq.n	8014ec6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8014ec2:	f7ff f885 	bl	8013fd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, ISP_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8014ec6:	2280      	movs	r2, #128	; 0x80
 8014ec8:	4904      	ldr	r1, [pc, #16]	; (8014edc <MX_USART1_UART_Init+0x68>)
 8014eca:	4802      	ldr	r0, [pc, #8]	; (8014ed4 <MX_USART1_UART_Init+0x60>)
 8014ecc:	f007 fee2 	bl	801cc94 <HAL_UARTEx_ReceiveToIdle_IT>
  /* USER CODE END USART1_Init 2 */

}
 8014ed0:	bf00      	nop
 8014ed2:	bd80      	pop	{r7, pc}
 8014ed4:	2000bcf4 	.word	0x2000bcf4
 8014ed8:	40011000 	.word	0x40011000
 8014edc:	2000b8cc 	.word	0x2000b8cc

08014ee0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8014ee0:	b580      	push	{r7, lr}
 8014ee2:	b0b4      	sub	sp, #208	; 0xd0
 8014ee4:	af00      	add	r7, sp, #0
 8014ee6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014ee8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8014eec:	2200      	movs	r2, #0
 8014eee:	601a      	str	r2, [r3, #0]
 8014ef0:	605a      	str	r2, [r3, #4]
 8014ef2:	609a      	str	r2, [r3, #8]
 8014ef4:	60da      	str	r2, [r3, #12]
 8014ef6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8014ef8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014efc:	2290      	movs	r2, #144	; 0x90
 8014efe:	2100      	movs	r1, #0
 8014f00:	4618      	mov	r0, r3
 8014f02:	f00d fd13 	bl	802292c <memset>
  if(uartHandle->Instance==UART4)
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	681b      	ldr	r3, [r3, #0]
 8014f0a:	4aa7      	ldr	r2, [pc, #668]	; (80151a8 <HAL_UART_MspInit+0x2c8>)
 8014f0c:	4293      	cmp	r3, r2
 8014f0e:	d145      	bne.n	8014f9c <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8014f10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014f14:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8014f16:	2300      	movs	r3, #0
 8014f18:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8014f1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014f1e:	4618      	mov	r0, r3
 8014f20:	f004 fdec 	bl	8019afc <HAL_RCCEx_PeriphCLKConfig>
 8014f24:	4603      	mov	r3, r0
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	d001      	beq.n	8014f2e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8014f2a:	f7ff f851 	bl	8013fd0 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8014f2e:	4b9f      	ldr	r3, [pc, #636]	; (80151ac <HAL_UART_MspInit+0x2cc>)
 8014f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014f32:	4a9e      	ldr	r2, [pc, #632]	; (80151ac <HAL_UART_MspInit+0x2cc>)
 8014f34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014f38:	6413      	str	r3, [r2, #64]	; 0x40
 8014f3a:	4b9c      	ldr	r3, [pc, #624]	; (80151ac <HAL_UART_MspInit+0x2cc>)
 8014f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014f3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8014f42:	62bb      	str	r3, [r7, #40]	; 0x28
 8014f44:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8014f46:	4b99      	ldr	r3, [pc, #612]	; (80151ac <HAL_UART_MspInit+0x2cc>)
 8014f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f4a:	4a98      	ldr	r2, [pc, #608]	; (80151ac <HAL_UART_MspInit+0x2cc>)
 8014f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014f50:	6313      	str	r3, [r2, #48]	; 0x30
 8014f52:	4b96      	ldr	r3, [pc, #600]	; (80151ac <HAL_UART_MspInit+0x2cc>)
 8014f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014f5a:	627b      	str	r3, [r7, #36]	; 0x24
 8014f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PH13     ------> UART4_TX
    PH14     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_TX_Pin|UART4_RX_Pin;
 8014f5e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8014f62:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014f66:	2302      	movs	r3, #2
 8014f68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014f6c:	2300      	movs	r3, #0
 8014f6e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014f72:	2303      	movs	r3, #3
 8014f74:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8014f78:	2308      	movs	r3, #8
 8014f7a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8014f7e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8014f82:	4619      	mov	r1, r3
 8014f84:	488a      	ldr	r0, [pc, #552]	; (80151b0 <HAL_UART_MspInit+0x2d0>)
 8014f86:	f003 f8bb 	bl	8018100 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8014f8a:	2200      	movs	r2, #0
 8014f8c:	2105      	movs	r1, #5
 8014f8e:	2034      	movs	r0, #52	; 0x34
 8014f90:	f001 fd8b 	bl	8016aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8014f94:	2034      	movs	r0, #52	; 0x34
 8014f96:	f001 fda4 	bl	8016ae2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8014f9a:	e100      	b.n	801519e <HAL_UART_MspInit+0x2be>
  else if(uartHandle->Instance==UART5)
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	681b      	ldr	r3, [r3, #0]
 8014fa0:	4a84      	ldr	r2, [pc, #528]	; (80151b4 <HAL_UART_MspInit+0x2d4>)
 8014fa2:	4293      	cmp	r3, r2
 8014fa4:	d167      	bne.n	8015076 <HAL_UART_MspInit+0x196>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8014fa6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014faa:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8014fac:	2300      	movs	r3, #0
 8014fae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8014fb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014fb6:	4618      	mov	r0, r3
 8014fb8:	f004 fda0 	bl	8019afc <HAL_RCCEx_PeriphCLKConfig>
 8014fbc:	4603      	mov	r3, r0
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	d001      	beq.n	8014fc6 <HAL_UART_MspInit+0xe6>
      Error_Handler();
 8014fc2:	f7ff f805 	bl	8013fd0 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8014fc6:	4b79      	ldr	r3, [pc, #484]	; (80151ac <HAL_UART_MspInit+0x2cc>)
 8014fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014fca:	4a78      	ldr	r2, [pc, #480]	; (80151ac <HAL_UART_MspInit+0x2cc>)
 8014fcc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8014fd2:	4b76      	ldr	r3, [pc, #472]	; (80151ac <HAL_UART_MspInit+0x2cc>)
 8014fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014fd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8014fda:	623b      	str	r3, [r7, #32]
 8014fdc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8014fde:	4b73      	ldr	r3, [pc, #460]	; (80151ac <HAL_UART_MspInit+0x2cc>)
 8014fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014fe2:	4a72      	ldr	r2, [pc, #456]	; (80151ac <HAL_UART_MspInit+0x2cc>)
 8014fe4:	f043 0308 	orr.w	r3, r3, #8
 8014fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8014fea:	4b70      	ldr	r3, [pc, #448]	; (80151ac <HAL_UART_MspInit+0x2cc>)
 8014fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014fee:	f003 0308 	and.w	r3, r3, #8
 8014ff2:	61fb      	str	r3, [r7, #28]
 8014ff4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8014ff6:	4b6d      	ldr	r3, [pc, #436]	; (80151ac <HAL_UART_MspInit+0x2cc>)
 8014ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014ffa:	4a6c      	ldr	r2, [pc, #432]	; (80151ac <HAL_UART_MspInit+0x2cc>)
 8014ffc:	f043 0302 	orr.w	r3, r3, #2
 8015000:	6313      	str	r3, [r2, #48]	; 0x30
 8015002:	4b6a      	ldr	r3, [pc, #424]	; (80151ac <HAL_UART_MspInit+0x2cc>)
 8015004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015006:	f003 0302 	and.w	r3, r3, #2
 801500a:	61bb      	str	r3, [r7, #24]
 801500c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = UART5_RX_Pin;
 801500e:	2304      	movs	r3, #4
 8015010:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015014:	2302      	movs	r3, #2
 8015016:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801501a:	2300      	movs	r3, #0
 801501c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015020:	2303      	movs	r3, #3
 8015022:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8015026:	2308      	movs	r3, #8
 8015028:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(UART5_RX_GPIO_Port, &GPIO_InitStruct);
 801502c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8015030:	4619      	mov	r1, r3
 8015032:	4861      	ldr	r0, [pc, #388]	; (80151b8 <HAL_UART_MspInit+0x2d8>)
 8015034:	f003 f864 	bl	8018100 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART5_TX_Pin;
 8015038:	f44f 7300 	mov.w	r3, #512	; 0x200
 801503c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015040:	2302      	movs	r3, #2
 8015042:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015046:	2300      	movs	r3, #0
 8015048:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801504c:	2303      	movs	r3, #3
 801504e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART5;
 8015052:	2307      	movs	r3, #7
 8015054:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(UART5_TX_GPIO_Port, &GPIO_InitStruct);
 8015058:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801505c:	4619      	mov	r1, r3
 801505e:	4857      	ldr	r0, [pc, #348]	; (80151bc <HAL_UART_MspInit+0x2dc>)
 8015060:	f003 f84e 	bl	8018100 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8015064:	2200      	movs	r2, #0
 8015066:	2105      	movs	r1, #5
 8015068:	2035      	movs	r0, #53	; 0x35
 801506a:	f001 fd1e 	bl	8016aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 801506e:	2035      	movs	r0, #53	; 0x35
 8015070:	f001 fd37 	bl	8016ae2 <HAL_NVIC_EnableIRQ>
}
 8015074:	e093      	b.n	801519e <HAL_UART_MspInit+0x2be>
  else if(uartHandle->Instance==UART7)
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	681b      	ldr	r3, [r3, #0]
 801507a:	4a51      	ldr	r2, [pc, #324]	; (80151c0 <HAL_UART_MspInit+0x2e0>)
 801507c:	4293      	cmp	r3, r2
 801507e:	d145      	bne.n	801510c <HAL_UART_MspInit+0x22c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8015080:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8015084:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8015086:	2300      	movs	r3, #0
 8015088:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801508c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015090:	4618      	mov	r0, r3
 8015092:	f004 fd33 	bl	8019afc <HAL_RCCEx_PeriphCLKConfig>
 8015096:	4603      	mov	r3, r0
 8015098:	2b00      	cmp	r3, #0
 801509a:	d001      	beq.n	80150a0 <HAL_UART_MspInit+0x1c0>
      Error_Handler();
 801509c:	f7fe ff98 	bl	8013fd0 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 80150a0:	4b42      	ldr	r3, [pc, #264]	; (80151ac <HAL_UART_MspInit+0x2cc>)
 80150a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80150a4:	4a41      	ldr	r2, [pc, #260]	; (80151ac <HAL_UART_MspInit+0x2cc>)
 80150a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80150aa:	6413      	str	r3, [r2, #64]	; 0x40
 80150ac:	4b3f      	ldr	r3, [pc, #252]	; (80151ac <HAL_UART_MspInit+0x2cc>)
 80150ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80150b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80150b4:	617b      	str	r3, [r7, #20]
 80150b6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80150b8:	4b3c      	ldr	r3, [pc, #240]	; (80151ac <HAL_UART_MspInit+0x2cc>)
 80150ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80150bc:	4a3b      	ldr	r2, [pc, #236]	; (80151ac <HAL_UART_MspInit+0x2cc>)
 80150be:	f043 0320 	orr.w	r3, r3, #32
 80150c2:	6313      	str	r3, [r2, #48]	; 0x30
 80150c4:	4b39      	ldr	r3, [pc, #228]	; (80151ac <HAL_UART_MspInit+0x2cc>)
 80150c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80150c8:	f003 0320 	and.w	r3, r3, #32
 80150cc:	613b      	str	r3, [r7, #16]
 80150ce:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = UART7_RX_Pin|UART7_TX_Pin;
 80150d0:	23c0      	movs	r3, #192	; 0xc0
 80150d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80150d6:	2302      	movs	r3, #2
 80150d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80150dc:	2300      	movs	r3, #0
 80150de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80150e2:	2303      	movs	r3, #3
 80150e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80150e8:	2308      	movs	r3, #8
 80150ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80150ee:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80150f2:	4619      	mov	r1, r3
 80150f4:	4833      	ldr	r0, [pc, #204]	; (80151c4 <HAL_UART_MspInit+0x2e4>)
 80150f6:	f003 f803 	bl	8018100 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 80150fa:	2200      	movs	r2, #0
 80150fc:	2105      	movs	r1, #5
 80150fe:	2052      	movs	r0, #82	; 0x52
 8015100:	f001 fcd3 	bl	8016aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8015104:	2052      	movs	r0, #82	; 0x52
 8015106:	f001 fcec 	bl	8016ae2 <HAL_NVIC_EnableIRQ>
}
 801510a:	e048      	b.n	801519e <HAL_UART_MspInit+0x2be>
  else if(uartHandle->Instance==USART1)
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	681b      	ldr	r3, [r3, #0]
 8015110:	4a2d      	ldr	r2, [pc, #180]	; (80151c8 <HAL_UART_MspInit+0x2e8>)
 8015112:	4293      	cmp	r3, r2
 8015114:	d143      	bne.n	801519e <HAL_UART_MspInit+0x2be>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8015116:	2340      	movs	r3, #64	; 0x40
 8015118:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 801511a:	2300      	movs	r3, #0
 801511c:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801511e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015122:	4618      	mov	r0, r3
 8015124:	f004 fcea 	bl	8019afc <HAL_RCCEx_PeriphCLKConfig>
 8015128:	4603      	mov	r3, r0
 801512a:	2b00      	cmp	r3, #0
 801512c:	d001      	beq.n	8015132 <HAL_UART_MspInit+0x252>
      Error_Handler();
 801512e:	f7fe ff4f 	bl	8013fd0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8015132:	4b1e      	ldr	r3, [pc, #120]	; (80151ac <HAL_UART_MspInit+0x2cc>)
 8015134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015136:	4a1d      	ldr	r2, [pc, #116]	; (80151ac <HAL_UART_MspInit+0x2cc>)
 8015138:	f043 0310 	orr.w	r3, r3, #16
 801513c:	6453      	str	r3, [r2, #68]	; 0x44
 801513e:	4b1b      	ldr	r3, [pc, #108]	; (80151ac <HAL_UART_MspInit+0x2cc>)
 8015140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015142:	f003 0310 	and.w	r3, r3, #16
 8015146:	60fb      	str	r3, [r7, #12]
 8015148:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801514a:	4b18      	ldr	r3, [pc, #96]	; (80151ac <HAL_UART_MspInit+0x2cc>)
 801514c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801514e:	4a17      	ldr	r2, [pc, #92]	; (80151ac <HAL_UART_MspInit+0x2cc>)
 8015150:	f043 0301 	orr.w	r3, r3, #1
 8015154:	6313      	str	r3, [r2, #48]	; 0x30
 8015156:	4b15      	ldr	r3, [pc, #84]	; (80151ac <HAL_UART_MspInit+0x2cc>)
 8015158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801515a:	f003 0301 	and.w	r3, r3, #1
 801515e:	60bb      	str	r3, [r7, #8]
 8015160:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8015162:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8015166:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801516a:	2302      	movs	r3, #2
 801516c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015170:	2300      	movs	r3, #0
 8015172:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015176:	2303      	movs	r3, #3
 8015178:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 801517c:	2307      	movs	r3, #7
 801517e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015182:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8015186:	4619      	mov	r1, r3
 8015188:	4810      	ldr	r0, [pc, #64]	; (80151cc <HAL_UART_MspInit+0x2ec>)
 801518a:	f002 ffb9 	bl	8018100 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 7, 0);
 801518e:	2200      	movs	r2, #0
 8015190:	2107      	movs	r1, #7
 8015192:	2025      	movs	r0, #37	; 0x25
 8015194:	f001 fc89 	bl	8016aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8015198:	2025      	movs	r0, #37	; 0x25
 801519a:	f001 fca2 	bl	8016ae2 <HAL_NVIC_EnableIRQ>
}
 801519e:	bf00      	nop
 80151a0:	37d0      	adds	r7, #208	; 0xd0
 80151a2:	46bd      	mov	sp, r7
 80151a4:	bd80      	pop	{r7, pc}
 80151a6:	bf00      	nop
 80151a8:	40004c00 	.word	0x40004c00
 80151ac:	40023800 	.word	0x40023800
 80151b0:	40021c00 	.word	0x40021c00
 80151b4:	40005000 	.word	0x40005000
 80151b8:	40020c00 	.word	0x40020c00
 80151bc:	40020400 	.word	0x40020400
 80151c0:	40007800 	.word	0x40007800
 80151c4:	40021400 	.word	0x40021400
 80151c8:	40011000 	.word	0x40011000
 80151cc:	40020000 	.word	0x40020000

080151d0 <UART4_Init>:
}

/* USER CODE BEGIN 1 */

void UART4_Init(uint32_t BaudRate)
{
 80151d0:	b580      	push	{r7, lr}
 80151d2:	b082      	sub	sp, #8
 80151d4:	af00      	add	r7, sp, #0
 80151d6:	6078      	str	r0, [r7, #4]
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 80151d8:	4b17      	ldr	r3, [pc, #92]	; (8015238 <UART4_Init+0x68>)
 80151da:	4a18      	ldr	r2, [pc, #96]	; (801523c <UART4_Init+0x6c>)
 80151dc:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = BaudRate;
 80151de:	4a16      	ldr	r2, [pc, #88]	; (8015238 <UART4_Init+0x68>)
 80151e0:	687b      	ldr	r3, [r7, #4]
 80151e2:	6053      	str	r3, [r2, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80151e4:	4b14      	ldr	r3, [pc, #80]	; (8015238 <UART4_Init+0x68>)
 80151e6:	2200      	movs	r2, #0
 80151e8:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 80151ea:	4b13      	ldr	r3, [pc, #76]	; (8015238 <UART4_Init+0x68>)
 80151ec:	2200      	movs	r2, #0
 80151ee:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 80151f0:	4b11      	ldr	r3, [pc, #68]	; (8015238 <UART4_Init+0x68>)
 80151f2:	2200      	movs	r2, #0
 80151f4:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 80151f6:	4b10      	ldr	r3, [pc, #64]	; (8015238 <UART4_Init+0x68>)
 80151f8:	220c      	movs	r2, #12
 80151fa:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80151fc:	4b0e      	ldr	r3, [pc, #56]	; (8015238 <UART4_Init+0x68>)
 80151fe:	2200      	movs	r2, #0
 8015200:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8015202:	4b0d      	ldr	r3, [pc, #52]	; (8015238 <UART4_Init+0x68>)
 8015204:	2200      	movs	r2, #0
 8015206:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8015208:	4b0b      	ldr	r3, [pc, #44]	; (8015238 <UART4_Init+0x68>)
 801520a:	2200      	movs	r2, #0
 801520c:	621a      	str	r2, [r3, #32]
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 801520e:	4b0a      	ldr	r3, [pc, #40]	; (8015238 <UART4_Init+0x68>)
 8015210:	2200      	movs	r2, #0
 8015212:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart4) != HAL_OK)
 8015214:	4808      	ldr	r0, [pc, #32]	; (8015238 <UART4_Init+0x68>)
 8015216:	f006 f9d1 	bl	801b5bc <HAL_UART_Init>
 801521a:	4603      	mov	r3, r0
 801521c:	2b00      	cmp	r3, #0
 801521e:	d001      	beq.n	8015224 <UART4_Init+0x54>
	{
		Error_Handler();
 8015220:	f7fe fed6 	bl	8013fd0 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */
	HAL_UARTEx_ReceiveToIdle_IT(&huart4, PORT3_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8015224:	2280      	movs	r2, #128	; 0x80
 8015226:	4906      	ldr	r1, [pc, #24]	; (8015240 <UART4_Init+0x70>)
 8015228:	4803      	ldr	r0, [pc, #12]	; (8015238 <UART4_Init+0x68>)
 801522a:	f007 fd33 	bl	801cc94 <HAL_UARTEx_ReceiveToIdle_IT>
	/* USER CODE END UART4_Init 2 */

}
 801522e:	bf00      	nop
 8015230:	3708      	adds	r7, #8
 8015232:	46bd      	mov	sp, r7
 8015234:	bd80      	pop	{r7, pc}
 8015236:	bf00      	nop
 8015238:	2000bacc 	.word	0x2000bacc
 801523c:	40004c00 	.word	0x40004c00
 8015240:	2000ba4c 	.word	0x2000ba4c

08015244 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8015244:	b580      	push	{r7, lr}
 8015246:	b084      	sub	sp, #16
 8015248:	af00      	add	r7, sp, #0
 801524a:	6078      	str	r0, [r7, #4]
 801524c:	460b      	mov	r3, r1
 801524e:	807b      	strh	r3, [r7, #2]
	if(huart->Instance == USART1)
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	681b      	ldr	r3, [r3, #0]
 8015254:	4a60      	ldr	r2, [pc, #384]	; (80153d8 <HAL_UARTEx_RxEventCallback+0x194>)
 8015256:	4293      	cmp	r3, r2
 8015258:	d129      	bne.n	80152ae <HAL_UARTEx_RxEventCallback+0x6a>
	{
		HAL_UARTEx_ReceiveToIdle_IT(&huart1, ISP_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 801525a:	2280      	movs	r2, #128	; 0x80
 801525c:	495f      	ldr	r1, [pc, #380]	; (80153dc <HAL_UARTEx_RxEventCallback+0x198>)
 801525e:	4860      	ldr	r0, [pc, #384]	; (80153e0 <HAL_UARTEx_RxEventCallback+0x19c>)
 8015260:	f007 fd18 	bl	801cc94 <HAL_UARTEx_ReceiveToIdle_IT>
		for(uint16_t i=0;i<Size;++i)
 8015264:	2300      	movs	r3, #0
 8015266:	81fb      	strh	r3, [r7, #14]
 8015268:	e017      	b.n	801529a <HAL_UARTEx_RxEventCallback+0x56>
		{
			ISP_UART_BUFF[ISP_PORT].CIR_BUFF[ISP_UART_BUFF[ISP_PORT].Write_End++] = ISP_PORT_RX_BUF[i];
 801526a:	89fa      	ldrh	r2, [r7, #14]
 801526c:	4b5d      	ldr	r3, [pc, #372]	; (80153e4 <HAL_UARTEx_RxEventCallback+0x1a0>)
 801526e:	881b      	ldrh	r3, [r3, #0]
 8015270:	1c59      	adds	r1, r3, #1
 8015272:	b288      	uxth	r0, r1
 8015274:	495b      	ldr	r1, [pc, #364]	; (80153e4 <HAL_UARTEx_RxEventCallback+0x1a0>)
 8015276:	8008      	strh	r0, [r1, #0]
 8015278:	4619      	mov	r1, r3
 801527a:	4b58      	ldr	r3, [pc, #352]	; (80153dc <HAL_UARTEx_RxEventCallback+0x198>)
 801527c:	5c9a      	ldrb	r2, [r3, r2]
 801527e:	4b59      	ldr	r3, [pc, #356]	; (80153e4 <HAL_UARTEx_RxEventCallback+0x1a0>)
 8015280:	440b      	add	r3, r1
 8015282:	711a      	strb	r2, [r3, #4]
			if(ISP_UART_BUFF[ISP_PORT].Write_End >= ISP_UART_BUFF_SIZE)
 8015284:	4b57      	ldr	r3, [pc, #348]	; (80153e4 <HAL_UARTEx_RxEventCallback+0x1a0>)
 8015286:	881b      	ldrh	r3, [r3, #0]
 8015288:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801528c:	d302      	bcc.n	8015294 <HAL_UARTEx_RxEventCallback+0x50>
			{
				ISP_UART_BUFF[ISP_PORT].Write_End = 0;
 801528e:	4b55      	ldr	r3, [pc, #340]	; (80153e4 <HAL_UARTEx_RxEventCallback+0x1a0>)
 8015290:	2200      	movs	r2, #0
 8015292:	801a      	strh	r2, [r3, #0]
		for(uint16_t i=0;i<Size;++i)
 8015294:	89fb      	ldrh	r3, [r7, #14]
 8015296:	3301      	adds	r3, #1
 8015298:	81fb      	strh	r3, [r7, #14]
 801529a:	89fa      	ldrh	r2, [r7, #14]
 801529c:	887b      	ldrh	r3, [r7, #2]
 801529e:	429a      	cmp	r2, r3
 80152a0:	d3e3      	bcc.n	801526a <HAL_UARTEx_RxEventCallback+0x26>
			}
		}
		Isp_Intr_Clk = HAL_GetTick();
 80152a2:	f000 fc21 	bl	8015ae8 <HAL_GetTick>
 80152a6:	4603      	mov	r3, r0
 80152a8:	4a4f      	ldr	r2, [pc, #316]	; (80153e8 <HAL_UARTEx_RxEventCallback+0x1a4>)
 80152aa:	6013      	str	r3, [r2, #0]
				UART_BUFFS[THREE_PORT].Write_End = 0;
			}
		}
		UART4_Intr_Clk = HAL_GetTick();
	}
}
 80152ac:	e090      	b.n	80153d0 <HAL_UARTEx_RxEventCallback+0x18c>
	else if(huart->Instance == UART5)
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	681b      	ldr	r3, [r3, #0]
 80152b2:	4a4e      	ldr	r2, [pc, #312]	; (80153ec <HAL_UARTEx_RxEventCallback+0x1a8>)
 80152b4:	4293      	cmp	r3, r2
 80152b6:	d129      	bne.n	801530c <HAL_UARTEx_RxEventCallback+0xc8>
		HAL_UARTEx_ReceiveToIdle_IT(&huart5, PORT1_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 80152b8:	2280      	movs	r2, #128	; 0x80
 80152ba:	494d      	ldr	r1, [pc, #308]	; (80153f0 <HAL_UARTEx_RxEventCallback+0x1ac>)
 80152bc:	484d      	ldr	r0, [pc, #308]	; (80153f4 <HAL_UARTEx_RxEventCallback+0x1b0>)
 80152be:	f007 fce9 	bl	801cc94 <HAL_UARTEx_ReceiveToIdle_IT>
		for(uint16_t i=0;i<Size;++i)
 80152c2:	2300      	movs	r3, #0
 80152c4:	81bb      	strh	r3, [r7, #12]
 80152c6:	e01c      	b.n	8015302 <HAL_UARTEx_RxEventCallback+0xbe>
			UART_BUFFS[ONE_PORT].CIR_BUFF[UART_BUFFS[ONE_PORT].Write_End++] = PORT1_PORT_RX_BUF[i];
 80152c8:	89ba      	ldrh	r2, [r7, #12]
 80152ca:	4b4b      	ldr	r3, [pc, #300]	; (80153f8 <HAL_UARTEx_RxEventCallback+0x1b4>)
 80152cc:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 80152d0:	1c59      	adds	r1, r3, #1
 80152d2:	b288      	uxth	r0, r1
 80152d4:	4948      	ldr	r1, [pc, #288]	; (80153f8 <HAL_UARTEx_RxEventCallback+0x1b4>)
 80152d6:	f8a1 0404 	strh.w	r0, [r1, #1028]	; 0x404
 80152da:	4619      	mov	r1, r3
 80152dc:	4b44      	ldr	r3, [pc, #272]	; (80153f0 <HAL_UARTEx_RxEventCallback+0x1ac>)
 80152de:	5c9a      	ldrb	r2, [r3, r2]
 80152e0:	4b45      	ldr	r3, [pc, #276]	; (80153f8 <HAL_UARTEx_RxEventCallback+0x1b4>)
 80152e2:	440b      	add	r3, r1
 80152e4:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
			if(UART_BUFFS[ONE_PORT].Write_End >= UART_BUFF_SIZE)
 80152e8:	4b43      	ldr	r3, [pc, #268]	; (80153f8 <HAL_UARTEx_RxEventCallback+0x1b4>)
 80152ea:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 80152ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80152f2:	d303      	bcc.n	80152fc <HAL_UARTEx_RxEventCallback+0xb8>
				UART_BUFFS[ONE_PORT].Write_End = 0;
 80152f4:	4b40      	ldr	r3, [pc, #256]	; (80153f8 <HAL_UARTEx_RxEventCallback+0x1b4>)
 80152f6:	2200      	movs	r2, #0
 80152f8:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
		for(uint16_t i=0;i<Size;++i)
 80152fc:	89bb      	ldrh	r3, [r7, #12]
 80152fe:	3301      	adds	r3, #1
 8015300:	81bb      	strh	r3, [r7, #12]
 8015302:	89ba      	ldrh	r2, [r7, #12]
 8015304:	887b      	ldrh	r3, [r7, #2]
 8015306:	429a      	cmp	r2, r3
 8015308:	d3de      	bcc.n	80152c8 <HAL_UARTEx_RxEventCallback+0x84>
}
 801530a:	e061      	b.n	80153d0 <HAL_UARTEx_RxEventCallback+0x18c>
	else if(huart->Instance == UART7)
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	681b      	ldr	r3, [r3, #0]
 8015310:	4a3a      	ldr	r2, [pc, #232]	; (80153fc <HAL_UARTEx_RxEventCallback+0x1b8>)
 8015312:	4293      	cmp	r3, r2
 8015314:	d129      	bne.n	801536a <HAL_UARTEx_RxEventCallback+0x126>
		HAL_UARTEx_ReceiveToIdle_IT(&huart7, PORT2_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8015316:	2280      	movs	r2, #128	; 0x80
 8015318:	4939      	ldr	r1, [pc, #228]	; (8015400 <HAL_UARTEx_RxEventCallback+0x1bc>)
 801531a:	483a      	ldr	r0, [pc, #232]	; (8015404 <HAL_UARTEx_RxEventCallback+0x1c0>)
 801531c:	f007 fcba 	bl	801cc94 <HAL_UARTEx_ReceiveToIdle_IT>
		for(uint16_t i=0;i<Size;++i)
 8015320:	2300      	movs	r3, #0
 8015322:	817b      	strh	r3, [r7, #10]
 8015324:	e01c      	b.n	8015360 <HAL_UARTEx_RxEventCallback+0x11c>
			UART_BUFFS[TWO_PORT].CIR_BUFF[UART_BUFFS[TWO_PORT].Write_End++] = PORT2_PORT_RX_BUF[i];
 8015326:	897a      	ldrh	r2, [r7, #10]
 8015328:	4b33      	ldr	r3, [pc, #204]	; (80153f8 <HAL_UARTEx_RxEventCallback+0x1b4>)
 801532a:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	; 0x808
 801532e:	1c59      	adds	r1, r3, #1
 8015330:	b288      	uxth	r0, r1
 8015332:	4931      	ldr	r1, [pc, #196]	; (80153f8 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8015334:	f8a1 0808 	strh.w	r0, [r1, #2056]	; 0x808
 8015338:	4619      	mov	r1, r3
 801533a:	4b31      	ldr	r3, [pc, #196]	; (8015400 <HAL_UARTEx_RxEventCallback+0x1bc>)
 801533c:	5c9a      	ldrb	r2, [r3, r2]
 801533e:	4b2e      	ldr	r3, [pc, #184]	; (80153f8 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8015340:	440b      	add	r3, r1
 8015342:	f883 280c 	strb.w	r2, [r3, #2060]	; 0x80c
			if(UART_BUFFS[TWO_PORT].Write_End >= UART_BUFF_SIZE)
 8015346:	4b2c      	ldr	r3, [pc, #176]	; (80153f8 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8015348:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	; 0x808
 801534c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015350:	d303      	bcc.n	801535a <HAL_UARTEx_RxEventCallback+0x116>
				UART_BUFFS[TWO_PORT].Write_End = 0;
 8015352:	4b29      	ldr	r3, [pc, #164]	; (80153f8 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8015354:	2200      	movs	r2, #0
 8015356:	f8a3 2808 	strh.w	r2, [r3, #2056]	; 0x808
		for(uint16_t i=0;i<Size;++i)
 801535a:	897b      	ldrh	r3, [r7, #10]
 801535c:	3301      	adds	r3, #1
 801535e:	817b      	strh	r3, [r7, #10]
 8015360:	897a      	ldrh	r2, [r7, #10]
 8015362:	887b      	ldrh	r3, [r7, #2]
 8015364:	429a      	cmp	r2, r3
 8015366:	d3de      	bcc.n	8015326 <HAL_UARTEx_RxEventCallback+0xe2>
}
 8015368:	e032      	b.n	80153d0 <HAL_UARTEx_RxEventCallback+0x18c>
	else if(huart->Instance == UART4)
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	681b      	ldr	r3, [r3, #0]
 801536e:	4a26      	ldr	r2, [pc, #152]	; (8015408 <HAL_UARTEx_RxEventCallback+0x1c4>)
 8015370:	4293      	cmp	r3, r2
 8015372:	d12d      	bne.n	80153d0 <HAL_UARTEx_RxEventCallback+0x18c>
		HAL_UARTEx_ReceiveToIdle_IT(&huart4, PORT3_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8015374:	2280      	movs	r2, #128	; 0x80
 8015376:	4925      	ldr	r1, [pc, #148]	; (801540c <HAL_UARTEx_RxEventCallback+0x1c8>)
 8015378:	4825      	ldr	r0, [pc, #148]	; (8015410 <HAL_UARTEx_RxEventCallback+0x1cc>)
 801537a:	f007 fc8b 	bl	801cc94 <HAL_UARTEx_ReceiveToIdle_IT>
		for(uint16_t i=0;i<Size;++i)
 801537e:	2300      	movs	r3, #0
 8015380:	813b      	strh	r3, [r7, #8]
 8015382:	e01c      	b.n	80153be <HAL_UARTEx_RxEventCallback+0x17a>
			UART_BUFFS[THREE_PORT].CIR_BUFF[UART_BUFFS[THREE_PORT].Write_End++] = PORT3_PORT_RX_BUF[i];
 8015384:	893a      	ldrh	r2, [r7, #8]
 8015386:	4b1c      	ldr	r3, [pc, #112]	; (80153f8 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8015388:	f8b3 3c0c 	ldrh.w	r3, [r3, #3084]	; 0xc0c
 801538c:	1c59      	adds	r1, r3, #1
 801538e:	b288      	uxth	r0, r1
 8015390:	4919      	ldr	r1, [pc, #100]	; (80153f8 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8015392:	f8a1 0c0c 	strh.w	r0, [r1, #3084]	; 0xc0c
 8015396:	4619      	mov	r1, r3
 8015398:	4b1c      	ldr	r3, [pc, #112]	; (801540c <HAL_UARTEx_RxEventCallback+0x1c8>)
 801539a:	5c9a      	ldrb	r2, [r3, r2]
 801539c:	4b16      	ldr	r3, [pc, #88]	; (80153f8 <HAL_UARTEx_RxEventCallback+0x1b4>)
 801539e:	440b      	add	r3, r1
 80153a0:	f883 2c10 	strb.w	r2, [r3, #3088]	; 0xc10
			if(UART_BUFFS[THREE_PORT].Write_End >= UART_BUFF_SIZE)
 80153a4:	4b14      	ldr	r3, [pc, #80]	; (80153f8 <HAL_UARTEx_RxEventCallback+0x1b4>)
 80153a6:	f8b3 3c0c 	ldrh.w	r3, [r3, #3084]	; 0xc0c
 80153aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80153ae:	d303      	bcc.n	80153b8 <HAL_UARTEx_RxEventCallback+0x174>
				UART_BUFFS[THREE_PORT].Write_End = 0;
 80153b0:	4b11      	ldr	r3, [pc, #68]	; (80153f8 <HAL_UARTEx_RxEventCallback+0x1b4>)
 80153b2:	2200      	movs	r2, #0
 80153b4:	f8a3 2c0c 	strh.w	r2, [r3, #3084]	; 0xc0c
		for(uint16_t i=0;i<Size;++i)
 80153b8:	893b      	ldrh	r3, [r7, #8]
 80153ba:	3301      	adds	r3, #1
 80153bc:	813b      	strh	r3, [r7, #8]
 80153be:	893a      	ldrh	r2, [r7, #8]
 80153c0:	887b      	ldrh	r3, [r7, #2]
 80153c2:	429a      	cmp	r2, r3
 80153c4:	d3de      	bcc.n	8015384 <HAL_UARTEx_RxEventCallback+0x140>
		UART4_Intr_Clk = HAL_GetTick();
 80153c6:	f000 fb8f 	bl	8015ae8 <HAL_GetTick>
 80153ca:	4603      	mov	r3, r0
 80153cc:	4a11      	ldr	r2, [pc, #68]	; (8015414 <HAL_UARTEx_RxEventCallback+0x1d0>)
 80153ce:	6013      	str	r3, [r2, #0]
}
 80153d0:	bf00      	nop
 80153d2:	3710      	adds	r7, #16
 80153d4:	46bd      	mov	sp, r7
 80153d6:	bd80      	pop	{r7, pc}
 80153d8:	40011000 	.word	0x40011000
 80153dc:	2000b8cc 	.word	0x2000b8cc
 80153e0:	2000bcf4 	.word	0x2000bcf4
 80153e4:	2000b0c8 	.word	0x2000b0c8
 80153e8:	2000a0b4 	.word	0x2000a0b4
 80153ec:	40005000 	.word	0x40005000
 80153f0:	2000b94c 	.word	0x2000b94c
 80153f4:	2000bb84 	.word	0x2000bb84
 80153f8:	2000a0b8 	.word	0x2000a0b8
 80153fc:	40007800 	.word	0x40007800
 8015400:	2000b9cc 	.word	0x2000b9cc
 8015404:	2000bc3c 	.word	0x2000bc3c
 8015408:	40004c00 	.word	0x40004c00
 801540c:	2000ba4c 	.word	0x2000ba4c
 8015410:	2000bacc 	.word	0x2000bacc
 8015414:	2000a0b0 	.word	0x2000a0b0

08015418 <Com_DataReady>:



uint8_t Com_DataReady(uint8_t com_num)
{
 8015418:	b480      	push	{r7}
 801541a:	b085      	sub	sp, #20
 801541c:	af00      	add	r7, sp, #0
 801541e:	4603      	mov	r3, r0
 8015420:	71fb      	strb	r3, [r7, #7]
	uint8_t IS_DATA_AVAILABLE = NO;
 8015422:	2300      	movs	r3, #0
 8015424:	73fb      	strb	r3, [r7, #15]
	if(com_num == ISP_PORT)
 8015426:	79fb      	ldrb	r3, [r7, #7]
 8015428:	2b00      	cmp	r3, #0
 801542a:	d115      	bne.n	8015458 <Com_DataReady+0x40>
	{
		if(ISP_UART_BUFF[com_num].Write_End != ISP_UART_BUFF[com_num].Read_End)
 801542c:	79fa      	ldrb	r2, [r7, #7]
 801542e:	4918      	ldr	r1, [pc, #96]	; (8015490 <Com_DataReady+0x78>)
 8015430:	4613      	mov	r3, r2
 8015432:	025b      	lsls	r3, r3, #9
 8015434:	4413      	add	r3, r2
 8015436:	009b      	lsls	r3, r3, #2
 8015438:	440b      	add	r3, r1
 801543a:	8819      	ldrh	r1, [r3, #0]
 801543c:	79fa      	ldrb	r2, [r7, #7]
 801543e:	4814      	ldr	r0, [pc, #80]	; (8015490 <Com_DataReady+0x78>)
 8015440:	4613      	mov	r3, r2
 8015442:	025b      	lsls	r3, r3, #9
 8015444:	4413      	add	r3, r2
 8015446:	009b      	lsls	r3, r3, #2
 8015448:	4403      	add	r3, r0
 801544a:	3302      	adds	r3, #2
 801544c:	881b      	ldrh	r3, [r3, #0]
 801544e:	4299      	cmp	r1, r3
 8015450:	d017      	beq.n	8015482 <Com_DataReady+0x6a>
		{
			IS_DATA_AVAILABLE = YES;
 8015452:	2301      	movs	r3, #1
 8015454:	73fb      	strb	r3, [r7, #15]
 8015456:	e014      	b.n	8015482 <Com_DataReady+0x6a>
		}
	}
	else
	{
		if (UART_BUFFS[com_num].Write_End != UART_BUFFS[com_num].Read_End)
 8015458:	79fa      	ldrb	r2, [r7, #7]
 801545a:	490e      	ldr	r1, [pc, #56]	; (8015494 <Com_DataReady+0x7c>)
 801545c:	4613      	mov	r3, r2
 801545e:	021b      	lsls	r3, r3, #8
 8015460:	4413      	add	r3, r2
 8015462:	009b      	lsls	r3, r3, #2
 8015464:	440b      	add	r3, r1
 8015466:	8819      	ldrh	r1, [r3, #0]
 8015468:	79fa      	ldrb	r2, [r7, #7]
 801546a:	480a      	ldr	r0, [pc, #40]	; (8015494 <Com_DataReady+0x7c>)
 801546c:	4613      	mov	r3, r2
 801546e:	021b      	lsls	r3, r3, #8
 8015470:	4413      	add	r3, r2
 8015472:	009b      	lsls	r3, r3, #2
 8015474:	4403      	add	r3, r0
 8015476:	3302      	adds	r3, #2
 8015478:	881b      	ldrh	r3, [r3, #0]
 801547a:	4299      	cmp	r1, r3
 801547c:	d001      	beq.n	8015482 <Com_DataReady+0x6a>
		{
			IS_DATA_AVAILABLE = YES;
 801547e:	2301      	movs	r3, #1
 8015480:	73fb      	strb	r3, [r7, #15]
		}
	}
	return IS_DATA_AVAILABLE;
 8015482:	7bfb      	ldrb	r3, [r7, #15]
}
 8015484:	4618      	mov	r0, r3
 8015486:	3714      	adds	r7, #20
 8015488:	46bd      	mov	sp, r7
 801548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801548e:	4770      	bx	lr
 8015490:	2000b0c8 	.word	0x2000b0c8
 8015494:	2000a0b8 	.word	0x2000a0b8

08015498 <Com_Get_Byte>:


uint8_t Com_Get_Byte(uint8_t com_num)
{
 8015498:	b4b0      	push	{r4, r5, r7}
 801549a:	b085      	sub	sp, #20
 801549c:	af00      	add	r7, sp, #0
 801549e:	4603      	mov	r3, r0
 80154a0:	71fb      	strb	r3, [r7, #7]
	uint8_t Return_data = 0;
 80154a2:	2300      	movs	r3, #0
 80154a4:	73fb      	strb	r3, [r7, #15]


	if(com_num == 0)
 80154a6:	79fb      	ldrb	r3, [r7, #7]
 80154a8:	2b00      	cmp	r3, #0
 80154aa:	d135      	bne.n	8015518 <Com_Get_Byte+0x80>
	{
		Return_data = ISP_UART_BUFF[com_num].CIR_BUFF[ISP_UART_BUFF[com_num].Read_End++];
 80154ac:	79f9      	ldrb	r1, [r7, #7]
 80154ae:	79fa      	ldrb	r2, [r7, #7]
 80154b0:	4837      	ldr	r0, [pc, #220]	; (8015590 <Com_Get_Byte+0xf8>)
 80154b2:	4613      	mov	r3, r2
 80154b4:	025b      	lsls	r3, r3, #9
 80154b6:	4413      	add	r3, r2
 80154b8:	009b      	lsls	r3, r3, #2
 80154ba:	4403      	add	r3, r0
 80154bc:	3302      	adds	r3, #2
 80154be:	8818      	ldrh	r0, [r3, #0]
 80154c0:	1c43      	adds	r3, r0, #1
 80154c2:	b29d      	uxth	r5, r3
 80154c4:	4c32      	ldr	r4, [pc, #200]	; (8015590 <Com_Get_Byte+0xf8>)
 80154c6:	4613      	mov	r3, r2
 80154c8:	025b      	lsls	r3, r3, #9
 80154ca:	4413      	add	r3, r2
 80154cc:	009b      	lsls	r3, r3, #2
 80154ce:	4423      	add	r3, r4
 80154d0:	3302      	adds	r3, #2
 80154d2:	462a      	mov	r2, r5
 80154d4:	801a      	strh	r2, [r3, #0]
 80154d6:	4a2e      	ldr	r2, [pc, #184]	; (8015590 <Com_Get_Byte+0xf8>)
 80154d8:	460b      	mov	r3, r1
 80154da:	025b      	lsls	r3, r3, #9
 80154dc:	440b      	add	r3, r1
 80154de:	009b      	lsls	r3, r3, #2
 80154e0:	4413      	add	r3, r2
 80154e2:	4403      	add	r3, r0
 80154e4:	3304      	adds	r3, #4
 80154e6:	781b      	ldrb	r3, [r3, #0]
 80154e8:	73fb      	strb	r3, [r7, #15]
		if ( ISP_UART_BUFF[com_num].Read_End >= ISP_UART_BUFF_SIZE)
 80154ea:	79fa      	ldrb	r2, [r7, #7]
 80154ec:	4928      	ldr	r1, [pc, #160]	; (8015590 <Com_Get_Byte+0xf8>)
 80154ee:	4613      	mov	r3, r2
 80154f0:	025b      	lsls	r3, r3, #9
 80154f2:	4413      	add	r3, r2
 80154f4:	009b      	lsls	r3, r3, #2
 80154f6:	440b      	add	r3, r1
 80154f8:	3302      	adds	r3, #2
 80154fa:	881b      	ldrh	r3, [r3, #0]
 80154fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015500:	d33f      	bcc.n	8015582 <Com_Get_Byte+0xea>
		{
			ISP_UART_BUFF[com_num].Read_End = 0;
 8015502:	79fa      	ldrb	r2, [r7, #7]
 8015504:	4922      	ldr	r1, [pc, #136]	; (8015590 <Com_Get_Byte+0xf8>)
 8015506:	4613      	mov	r3, r2
 8015508:	025b      	lsls	r3, r3, #9
 801550a:	4413      	add	r3, r2
 801550c:	009b      	lsls	r3, r3, #2
 801550e:	440b      	add	r3, r1
 8015510:	3302      	adds	r3, #2
 8015512:	2200      	movs	r2, #0
 8015514:	801a      	strh	r2, [r3, #0]
 8015516:	e034      	b.n	8015582 <Com_Get_Byte+0xea>
		}
	}
	else
	{
		Return_data = UART_BUFFS[com_num].CIR_BUFF[UART_BUFFS[com_num].Read_End++];
 8015518:	79f9      	ldrb	r1, [r7, #7]
 801551a:	79fa      	ldrb	r2, [r7, #7]
 801551c:	481d      	ldr	r0, [pc, #116]	; (8015594 <Com_Get_Byte+0xfc>)
 801551e:	4613      	mov	r3, r2
 8015520:	021b      	lsls	r3, r3, #8
 8015522:	4413      	add	r3, r2
 8015524:	009b      	lsls	r3, r3, #2
 8015526:	4403      	add	r3, r0
 8015528:	3302      	adds	r3, #2
 801552a:	8818      	ldrh	r0, [r3, #0]
 801552c:	1c43      	adds	r3, r0, #1
 801552e:	b29d      	uxth	r5, r3
 8015530:	4c18      	ldr	r4, [pc, #96]	; (8015594 <Com_Get_Byte+0xfc>)
 8015532:	4613      	mov	r3, r2
 8015534:	021b      	lsls	r3, r3, #8
 8015536:	4413      	add	r3, r2
 8015538:	009b      	lsls	r3, r3, #2
 801553a:	4423      	add	r3, r4
 801553c:	3302      	adds	r3, #2
 801553e:	462a      	mov	r2, r5
 8015540:	801a      	strh	r2, [r3, #0]
 8015542:	4a14      	ldr	r2, [pc, #80]	; (8015594 <Com_Get_Byte+0xfc>)
 8015544:	460b      	mov	r3, r1
 8015546:	021b      	lsls	r3, r3, #8
 8015548:	440b      	add	r3, r1
 801554a:	009b      	lsls	r3, r3, #2
 801554c:	4413      	add	r3, r2
 801554e:	4403      	add	r3, r0
 8015550:	3304      	adds	r3, #4
 8015552:	781b      	ldrb	r3, [r3, #0]
 8015554:	73fb      	strb	r3, [r7, #15]
		if ( UART_BUFFS[com_num].Read_End >= UART_BUFF_SIZE)
 8015556:	79fa      	ldrb	r2, [r7, #7]
 8015558:	490e      	ldr	r1, [pc, #56]	; (8015594 <Com_Get_Byte+0xfc>)
 801555a:	4613      	mov	r3, r2
 801555c:	021b      	lsls	r3, r3, #8
 801555e:	4413      	add	r3, r2
 8015560:	009b      	lsls	r3, r3, #2
 8015562:	440b      	add	r3, r1
 8015564:	3302      	adds	r3, #2
 8015566:	881b      	ldrh	r3, [r3, #0]
 8015568:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801556c:	d309      	bcc.n	8015582 <Com_Get_Byte+0xea>
		{
			UART_BUFFS[com_num].Read_End = 0;
 801556e:	79fa      	ldrb	r2, [r7, #7]
 8015570:	4908      	ldr	r1, [pc, #32]	; (8015594 <Com_Get_Byte+0xfc>)
 8015572:	4613      	mov	r3, r2
 8015574:	021b      	lsls	r3, r3, #8
 8015576:	4413      	add	r3, r2
 8015578:	009b      	lsls	r3, r3, #2
 801557a:	440b      	add	r3, r1
 801557c:	3302      	adds	r3, #2
 801557e:	2200      	movs	r2, #0
 8015580:	801a      	strh	r2, [r3, #0]
		}
	}
	return Return_data;
 8015582:	7bfb      	ldrb	r3, [r7, #15]
}
 8015584:	4618      	mov	r0, r3
 8015586:	3714      	adds	r7, #20
 8015588:	46bd      	mov	sp, r7
 801558a:	bcb0      	pop	{r4, r5, r7}
 801558c:	4770      	bx	lr
 801558e:	bf00      	nop
 8015590:	2000b0c8 	.word	0x2000b0c8
 8015594:	2000a0b8 	.word	0x2000a0b8

08015598 <CommTransmitMessage>:


void CommTransmitMessage(uint8_t com_num,uint8_t *sc_pp_Message,unsigned short int us_MaxTansmitBytes)
{
 8015598:	b580      	push	{r7, lr}
 801559a:	b084      	sub	sp, #16
 801559c:	af00      	add	r7, sp, #0
 801559e:	4603      	mov	r3, r0
 80155a0:	6039      	str	r1, [r7, #0]
 80155a2:	71fb      	strb	r3, [r7, #7]
 80155a4:	4613      	mov	r3, r2
 80155a6:	80bb      	strh	r3, [r7, #4]
	unsigned short int us_LoopVar = ZERO;
 80155a8:	2300      	movs	r3, #0
 80155aa:	81fb      	strh	r3, [r7, #14]


	/* Transmit the packet based on the randomization number
	 */
	for(us_LoopVar = ZERO; us_LoopVar <= us_MaxTansmitBytes; us_LoopVar++)
 80155ac:	2300      	movs	r3, #0
 80155ae:	81fb      	strh	r3, [r7, #14]
 80155b0:	e03a      	b.n	8015628 <CommTransmitMessage+0x90>
	{
		if (  (ZERO != us_LoopVar)&&(START_OF_MESSAGE == sc_pp_Message[us_LoopVar]))
 80155b2:	89fb      	ldrh	r3, [r7, #14]
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	d00a      	beq.n	80155ce <CommTransmitMessage+0x36>
 80155b8:	89fb      	ldrh	r3, [r7, #14]
 80155ba:	683a      	ldr	r2, [r7, #0]
 80155bc:	4413      	add	r3, r2
 80155be:	781b      	ldrb	r3, [r3, #0]
 80155c0:	2b24      	cmp	r3, #36	; 0x24
 80155c2:	d104      	bne.n	80155ce <CommTransmitMessage+0x36>
		{
			Com_SendByte(com_num,DLE);
 80155c4:	79fb      	ldrb	r3, [r7, #7]
 80155c6:	2105      	movs	r1, #5
 80155c8:	4618      	mov	r0, r3
 80155ca:	f000 f835 	bl	8015638 <Com_SendByte>
		}
		if (  (us_LoopVar >= ONE)&& (us_LoopVar < us_MaxTansmitBytes)&& (DLE == sc_pp_Message[us_LoopVar] ))
 80155ce:	89fb      	ldrh	r3, [r7, #14]
 80155d0:	2b00      	cmp	r3, #0
 80155d2:	d00e      	beq.n	80155f2 <CommTransmitMessage+0x5a>
 80155d4:	89fa      	ldrh	r2, [r7, #14]
 80155d6:	88bb      	ldrh	r3, [r7, #4]
 80155d8:	429a      	cmp	r2, r3
 80155da:	d20a      	bcs.n	80155f2 <CommTransmitMessage+0x5a>
 80155dc:	89fb      	ldrh	r3, [r7, #14]
 80155de:	683a      	ldr	r2, [r7, #0]
 80155e0:	4413      	add	r3, r2
 80155e2:	781b      	ldrb	r3, [r3, #0]
 80155e4:	2b05      	cmp	r3, #5
 80155e6:	d104      	bne.n	80155f2 <CommTransmitMessage+0x5a>
		{
			Com_SendByte(com_num,DLE);
 80155e8:	79fb      	ldrb	r3, [r7, #7]
 80155ea:	2105      	movs	r1, #5
 80155ec:	4618      	mov	r0, r3
 80155ee:	f000 f823 	bl	8015638 <Com_SendByte>
		}
		if (  (END_OF_MESSAGE == sc_pp_Message[us_LoopVar])&& (us_LoopVar != us_MaxTansmitBytes))
 80155f2:	89fb      	ldrh	r3, [r7, #14]
 80155f4:	683a      	ldr	r2, [r7, #0]
 80155f6:	4413      	add	r3, r2
 80155f8:	781b      	ldrb	r3, [r3, #0]
 80155fa:	2b26      	cmp	r3, #38	; 0x26
 80155fc:	d108      	bne.n	8015610 <CommTransmitMessage+0x78>
 80155fe:	89fa      	ldrh	r2, [r7, #14]
 8015600:	88bb      	ldrh	r3, [r7, #4]
 8015602:	429a      	cmp	r2, r3
 8015604:	d004      	beq.n	8015610 <CommTransmitMessage+0x78>
		{
			//printf("\n Sent END_OF_MESSAGE");
			Com_SendByte(com_num,DLE);
 8015606:	79fb      	ldrb	r3, [r7, #7]
 8015608:	2105      	movs	r1, #5
 801560a:	4618      	mov	r0, r3
 801560c:	f000 f814 	bl	8015638 <Com_SendByte>
		}
		Com_SendByte(com_num, sc_pp_Message[us_LoopVar]);
 8015610:	89fb      	ldrh	r3, [r7, #14]
 8015612:	683a      	ldr	r2, [r7, #0]
 8015614:	4413      	add	r3, r2
 8015616:	781a      	ldrb	r2, [r3, #0]
 8015618:	79fb      	ldrb	r3, [r7, #7]
 801561a:	4611      	mov	r1, r2
 801561c:	4618      	mov	r0, r3
 801561e:	f000 f80b 	bl	8015638 <Com_SendByte>
	for(us_LoopVar = ZERO; us_LoopVar <= us_MaxTansmitBytes; us_LoopVar++)
 8015622:	89fb      	ldrh	r3, [r7, #14]
 8015624:	3301      	adds	r3, #1
 8015626:	81fb      	strh	r3, [r7, #14]
 8015628:	89fa      	ldrh	r2, [r7, #14]
 801562a:	88bb      	ldrh	r3, [r7, #4]
 801562c:	429a      	cmp	r2, r3
 801562e:	d9c0      	bls.n	80155b2 <CommTransmitMessage+0x1a>
	}

	return;
 8015630:	bf00      	nop
}
 8015632:	3710      	adds	r7, #16
 8015634:	46bd      	mov	sp, r7
 8015636:	bd80      	pop	{r7, pc}

08015638 <Com_SendByte>:

void Com_SendByte(uint8_t com_num, uint8_t uc_Data)
{
 8015638:	b580      	push	{r7, lr}
 801563a:	b084      	sub	sp, #16
 801563c:	af00      	add	r7, sp, #0
 801563e:	4603      	mov	r3, r0
 8015640:	460a      	mov	r2, r1
 8015642:	71fb      	strb	r3, [r7, #7]
 8015644:	4613      	mov	r3, r2
 8015646:	71bb      	strb	r3, [r7, #6]
	uint8_t *ptr = &uc_Data;
 8015648:	1dbb      	adds	r3, r7, #6
 801564a:	60fb      	str	r3, [r7, #12]
	if(com_num == ISP_PORT)
 801564c:	79fb      	ldrb	r3, [r7, #7]
 801564e:	2b00      	cmp	r3, #0
 8015650:	d107      	bne.n	8015662 <Com_SendByte+0x2a>
	{
		HAL_UART_Transmit(&ISP_COM,(const uint8_t *) ptr, 1, 0xffff);
 8015652:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015656:	2201      	movs	r2, #1
 8015658:	68f9      	ldr	r1, [r7, #12]
 801565a:	4816      	ldr	r0, [pc, #88]	; (80156b4 <Com_SendByte+0x7c>)
 801565c:	f006 f80c 	bl	801b678 <HAL_UART_Transmit>
 8015660:	e01f      	b.n	80156a2 <Com_SendByte+0x6a>
	}
	else if(com_num == ONE_PORT)
 8015662:	79fb      	ldrb	r3, [r7, #7]
 8015664:	2b01      	cmp	r3, #1
 8015666:	d107      	bne.n	8015678 <Com_SendByte+0x40>
	{
		HAL_UART_Transmit(&PORT1_COM,(const uint8_t *) ptr, 1, 0xffff);
 8015668:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801566c:	2201      	movs	r2, #1
 801566e:	68f9      	ldr	r1, [r7, #12]
 8015670:	4811      	ldr	r0, [pc, #68]	; (80156b8 <Com_SendByte+0x80>)
 8015672:	f006 f801 	bl	801b678 <HAL_UART_Transmit>
 8015676:	e014      	b.n	80156a2 <Com_SendByte+0x6a>
	}
	else if(com_num == TWO_PORT)
 8015678:	79fb      	ldrb	r3, [r7, #7]
 801567a:	2b02      	cmp	r3, #2
 801567c:	d107      	bne.n	801568e <Com_SendByte+0x56>
	{
		HAL_UART_Transmit(&PORT2_COM,(const uint8_t *) ptr, 1, 0xffff);
 801567e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015682:	2201      	movs	r2, #1
 8015684:	68f9      	ldr	r1, [r7, #12]
 8015686:	480d      	ldr	r0, [pc, #52]	; (80156bc <Com_SendByte+0x84>)
 8015688:	f005 fff6 	bl	801b678 <HAL_UART_Transmit>
 801568c:	e009      	b.n	80156a2 <Com_SendByte+0x6a>
	}
	else if(com_num == THREE_PORT)
 801568e:	79fb      	ldrb	r3, [r7, #7]
 8015690:	2b03      	cmp	r3, #3
 8015692:	d106      	bne.n	80156a2 <Com_SendByte+0x6a>
	{
		HAL_UART_Transmit(&PORT3_COM,(const uint8_t *) ptr, 1, 0xffff);
 8015694:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015698:	2201      	movs	r2, #1
 801569a:	68f9      	ldr	r1, [r7, #12]
 801569c:	4808      	ldr	r0, [pc, #32]	; (80156c0 <Com_SendByte+0x88>)
 801569e:	f005 ffeb 	bl	801b678 <HAL_UART_Transmit>
	}

	ptr=NULL;
 80156a2:	2300      	movs	r3, #0
 80156a4:	60fb      	str	r3, [r7, #12]
	free(ptr);
 80156a6:	68f8      	ldr	r0, [r7, #12]
 80156a8:	f00d f900 	bl	80228ac <free>
}
 80156ac:	bf00      	nop
 80156ae:	3710      	adds	r7, #16
 80156b0:	46bd      	mov	sp, r7
 80156b2:	bd80      	pop	{r7, pc}
 80156b4:	2000bcf4 	.word	0x2000bcf4
 80156b8:	2000bb84 	.word	0x2000bb84
 80156bc:	2000bc3c 	.word	0x2000bc3c
 80156c0:	2000bacc 	.word	0x2000bacc

080156c4 <Enable_UART_Interrupts>:

void Enable_UART_Interrupts(void)
{
 80156c4:	b580      	push	{r7, lr}
 80156c6:	af00      	add	r7, sp, #0
	 * following calls are made in Interrupt (HAL_UARTEx_RxEventCallback) and it is Only happening when inserted in LOCO,RIU bin's
	 * so that's why calling HAL_UARTEx_ReceiveToIdle_IT functions explicitly.
	 *
	 */

	HAL_UARTEx_ReceiveToIdle_IT(&huart1, ISP_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 80156c8:	2280      	movs	r2, #128	; 0x80
 80156ca:	490a      	ldr	r1, [pc, #40]	; (80156f4 <Enable_UART_Interrupts+0x30>)
 80156cc:	480a      	ldr	r0, [pc, #40]	; (80156f8 <Enable_UART_Interrupts+0x34>)
 80156ce:	f007 fae1 	bl	801cc94 <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_UARTEx_ReceiveToIdle_IT(&huart5, PORT1_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 80156d2:	2280      	movs	r2, #128	; 0x80
 80156d4:	4909      	ldr	r1, [pc, #36]	; (80156fc <Enable_UART_Interrupts+0x38>)
 80156d6:	480a      	ldr	r0, [pc, #40]	; (8015700 <Enable_UART_Interrupts+0x3c>)
 80156d8:	f007 fadc 	bl	801cc94 <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_UARTEx_ReceiveToIdle_IT(&huart7, PORT2_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 80156dc:	2280      	movs	r2, #128	; 0x80
 80156de:	4909      	ldr	r1, [pc, #36]	; (8015704 <Enable_UART_Interrupts+0x40>)
 80156e0:	4809      	ldr	r0, [pc, #36]	; (8015708 <Enable_UART_Interrupts+0x44>)
 80156e2:	f007 fad7 	bl	801cc94 <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_UARTEx_ReceiveToIdle_IT(&huart4, PORT3_PORT_RX_BUF , UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 80156e6:	2280      	movs	r2, #128	; 0x80
 80156e8:	4908      	ldr	r1, [pc, #32]	; (801570c <Enable_UART_Interrupts+0x48>)
 80156ea:	4809      	ldr	r0, [pc, #36]	; (8015710 <Enable_UART_Interrupts+0x4c>)
 80156ec:	f007 fad2 	bl	801cc94 <HAL_UARTEx_ReceiveToIdle_IT>
}
 80156f0:	bf00      	nop
 80156f2:	bd80      	pop	{r7, pc}
 80156f4:	2000b8cc 	.word	0x2000b8cc
 80156f8:	2000bcf4 	.word	0x2000bcf4
 80156fc:	2000b94c 	.word	0x2000b94c
 8015700:	2000bb84 	.word	0x2000bb84
 8015704:	2000b9cc 	.word	0x2000b9cc
 8015708:	2000bc3c 	.word	0x2000bc3c
 801570c:	2000ba4c 	.word	0x2000ba4c
 8015710:	2000bacc 	.word	0x2000bacc

08015714 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8015714:	f8df d034 	ldr.w	sp, [pc, #52]	; 801574c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8015718:	480d      	ldr	r0, [pc, #52]	; (8015750 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 801571a:	490e      	ldr	r1, [pc, #56]	; (8015754 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 801571c:	4a0e      	ldr	r2, [pc, #56]	; (8015758 <LoopFillZerobss+0x1e>)
  movs r3, #0
 801571e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8015720:	e002      	b.n	8015728 <LoopCopyDataInit>

08015722 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8015722:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8015724:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8015726:	3304      	adds	r3, #4

08015728 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8015728:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801572a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 801572c:	d3f9      	bcc.n	8015722 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801572e:	4a0b      	ldr	r2, [pc, #44]	; (801575c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8015730:	4c0b      	ldr	r4, [pc, #44]	; (8015760 <LoopFillZerobss+0x26>)
  movs r3, #0
 8015732:	2300      	movs	r3, #0
  b LoopFillZerobss
 8015734:	e001      	b.n	801573a <LoopFillZerobss>

08015736 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8015736:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8015738:	3204      	adds	r2, #4

0801573a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801573a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 801573c:	d3fb      	bcc.n	8015736 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 801573e:	f7ff fb87 	bl	8014e50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8015742:	f00d f887 	bl	8022854 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8015746:	f7fe fa71 	bl	8013c2c <main>
  bx  lr    
 801574a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 801574c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8015750:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8015754:	200001a4 	.word	0x200001a4
  ldr r2, =_sidata
 8015758:	080293bc 	.word	0x080293bc
  ldr r2, =_sbss
 801575c:	200002e4 	.word	0x200002e4
  ldr r4, =_ebss
 8015760:	20014354 	.word	0x20014354

08015764 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8015764:	e7fe      	b.n	8015764 <ADC_IRQHandler>

08015766 <DP83848_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ERROR if missing mandatory function
  */
int32_t  DP83848_RegisterBusIO(dp83848_Object_t *pObj, dp83848_IOCtx_t *ioctx)
{
 8015766:	b480      	push	{r7}
 8015768:	b083      	sub	sp, #12
 801576a:	af00      	add	r7, sp, #0
 801576c:	6078      	str	r0, [r7, #4]
 801576e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	2b00      	cmp	r3, #0
 8015774:	d00b      	beq.n	801578e <DP83848_RegisterBusIO+0x28>
 8015776:	683b      	ldr	r3, [r7, #0]
 8015778:	68db      	ldr	r3, [r3, #12]
 801577a:	2b00      	cmp	r3, #0
 801577c:	d007      	beq.n	801578e <DP83848_RegisterBusIO+0x28>
 801577e:	683b      	ldr	r3, [r7, #0]
 8015780:	689b      	ldr	r3, [r3, #8]
 8015782:	2b00      	cmp	r3, #0
 8015784:	d003      	beq.n	801578e <DP83848_RegisterBusIO+0x28>
 8015786:	683b      	ldr	r3, [r7, #0]
 8015788:	691b      	ldr	r3, [r3, #16]
 801578a:	2b00      	cmp	r3, #0
 801578c:	d102      	bne.n	8015794 <DP83848_RegisterBusIO+0x2e>
  {
    return DP83848_STATUS_ERROR;
 801578e:	f04f 33ff 	mov.w	r3, #4294967295
 8015792:	e014      	b.n	80157be <DP83848_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8015794:	683b      	ldr	r3, [r7, #0]
 8015796:	681a      	ldr	r2, [r3, #0]
 8015798:	687b      	ldr	r3, [r7, #4]
 801579a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 801579c:	683b      	ldr	r3, [r7, #0]
 801579e:	685a      	ldr	r2, [r3, #4]
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80157a4:	683b      	ldr	r3, [r7, #0]
 80157a6:	68da      	ldr	r2, [r3, #12]
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80157ac:	683b      	ldr	r3, [r7, #0]
 80157ae:	689a      	ldr	r2, [r3, #8]
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80157b4:	683b      	ldr	r3, [r7, #0]
 80157b6:	691a      	ldr	r2, [r3, #16]
 80157b8:	687b      	ldr	r3, [r7, #4]
 80157ba:	619a      	str	r2, [r3, #24]

  return DP83848_STATUS_OK;
 80157bc:	2300      	movs	r3, #0
}
 80157be:	4618      	mov	r0, r3
 80157c0:	370c      	adds	r7, #12
 80157c2:	46bd      	mov	sp, r7
 80157c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157c8:	4770      	bx	lr

080157ca <DP83848_Init>:
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  *         DP83848_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t DP83848_Init(dp83848_Object_t *pObj)
 {
 80157ca:	b580      	push	{r7, lr}
 80157cc:	b086      	sub	sp, #24
 80157ce:	af00      	add	r7, sp, #0
 80157d0:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80157d2:	2300      	movs	r3, #0
 80157d4:	60fb      	str	r3, [r7, #12]
 80157d6:	2300      	movs	r3, #0
 80157d8:	60bb      	str	r3, [r7, #8]
 80157da:	2300      	movs	r3, #0
 80157dc:	617b      	str	r3, [r7, #20]
   int32_t status = DP83848_STATUS_OK;
 80157de:	2300      	movs	r3, #0
 80157e0:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	685b      	ldr	r3, [r3, #4]
 80157e6:	2b00      	cmp	r3, #0
 80157e8:	d17c      	bne.n	80158e4 <DP83848_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	689b      	ldr	r3, [r3, #8]
 80157ee:	2b00      	cmp	r3, #0
 80157f0:	d002      	beq.n	80157f8 <DP83848_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80157f2:	687b      	ldr	r3, [r7, #4]
 80157f4:	689b      	ldr	r3, [r3, #8]
 80157f6:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = DP83848_MAX_DEV_ADDR + 1;
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	2220      	movs	r2, #32
 80157fc:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 80157fe:	2300      	movs	r3, #0
 8015800:	617b      	str	r3, [r7, #20]
 8015802:	e01c      	b.n	801583e <DP83848_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, DP83848_SMR, &regvalue) < 0)
 8015804:	687b      	ldr	r3, [r7, #4]
 8015806:	695b      	ldr	r3, [r3, #20]
 8015808:	f107 0208 	add.w	r2, r7, #8
 801580c:	2119      	movs	r1, #25
 801580e:	6978      	ldr	r0, [r7, #20]
 8015810:	4798      	blx	r3
 8015812:	4603      	mov	r3, r0
 8015814:	2b00      	cmp	r3, #0
 8015816:	da03      	bge.n	8015820 <DP83848_Init+0x56>
       {
         status = DP83848_STATUS_READ_ERROR;
 8015818:	f06f 0304 	mvn.w	r3, #4
 801581c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 801581e:	e00b      	b.n	8015838 <DP83848_Init+0x6e>
       }

       if((regvalue & DP83848_SMR_PHY_ADDR) == addr)
 8015820:	68bb      	ldr	r3, [r7, #8]
 8015822:	f003 031f 	and.w	r3, r3, #31
 8015826:	697a      	ldr	r2, [r7, #20]
 8015828:	429a      	cmp	r2, r3
 801582a:	d105      	bne.n	8015838 <DP83848_Init+0x6e>
       {
         pObj->DevAddr = addr;
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	697a      	ldr	r2, [r7, #20]
 8015830:	601a      	str	r2, [r3, #0]
         status = DP83848_STATUS_OK;
 8015832:	2300      	movs	r3, #0
 8015834:	613b      	str	r3, [r7, #16]
         break;
 8015836:	e005      	b.n	8015844 <DP83848_Init+0x7a>
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8015838:	697b      	ldr	r3, [r7, #20]
 801583a:	3301      	adds	r3, #1
 801583c:	617b      	str	r3, [r7, #20]
 801583e:	697b      	ldr	r3, [r7, #20]
 8015840:	2b1f      	cmp	r3, #31
 8015842:	d9df      	bls.n	8015804 <DP83848_Init+0x3a>
       }
     }

     if(pObj->DevAddr > DP83848_MAX_DEV_ADDR)
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	681b      	ldr	r3, [r3, #0]
 8015848:	2b1f      	cmp	r3, #31
 801584a:	d902      	bls.n	8015852 <DP83848_Init+0x88>
     {
       status = DP83848_STATUS_ADDRESS_ERROR;
 801584c:	f06f 0302 	mvn.w	r3, #2
 8015850:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == DP83848_STATUS_OK)
 8015852:	693b      	ldr	r3, [r7, #16]
 8015854:	2b00      	cmp	r3, #0
 8015856:	d145      	bne.n	80158e4 <DP83848_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, DP83848_BCR, DP83848_BCR_SOFT_RESET) >= 0)
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	691b      	ldr	r3, [r3, #16]
 801585c:	687a      	ldr	r2, [r7, #4]
 801585e:	6810      	ldr	r0, [r2, #0]
 8015860:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8015864:	2100      	movs	r1, #0
 8015866:	4798      	blx	r3
 8015868:	4603      	mov	r3, r0
 801586a:	2b00      	cmp	r3, #0
 801586c:	db37      	blt.n	80158de <DP83848_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) >= 0)
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	695b      	ldr	r3, [r3, #20]
 8015872:	687a      	ldr	r2, [r7, #4]
 8015874:	6810      	ldr	r0, [r2, #0]
 8015876:	f107 0208 	add.w	r2, r7, #8
 801587a:	2100      	movs	r1, #0
 801587c:	4798      	blx	r3
 801587e:	4603      	mov	r3, r0
 8015880:	2b00      	cmp	r3, #0
 8015882:	db28      	blt.n	80158d6 <DP83848_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	699b      	ldr	r3, [r3, #24]
 8015888:	4798      	blx	r3
 801588a:	4603      	mov	r3, r0
 801588c:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occured  */
           while(regvalue & DP83848_BCR_SOFT_RESET)
 801588e:	e01c      	b.n	80158ca <DP83848_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= DP83848_SW_RESET_TO)
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	699b      	ldr	r3, [r3, #24]
 8015894:	4798      	blx	r3
 8015896:	4603      	mov	r3, r0
 8015898:	461a      	mov	r2, r3
 801589a:	68fb      	ldr	r3, [r7, #12]
 801589c:	1ad3      	subs	r3, r2, r3
 801589e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80158a2:	d80e      	bhi.n	80158c2 <DP83848_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) < 0)
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	695b      	ldr	r3, [r3, #20]
 80158a8:	687a      	ldr	r2, [r7, #4]
 80158aa:	6810      	ldr	r0, [r2, #0]
 80158ac:	f107 0208 	add.w	r2, r7, #8
 80158b0:	2100      	movs	r1, #0
 80158b2:	4798      	blx	r3
 80158b4:	4603      	mov	r3, r0
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	da07      	bge.n	80158ca <DP83848_Init+0x100>
               {
                 status = DP83848_STATUS_READ_ERROR;
 80158ba:	f06f 0304 	mvn.w	r3, #4
 80158be:	613b      	str	r3, [r7, #16]
                 break;
 80158c0:	e010      	b.n	80158e4 <DP83848_Init+0x11a>
               }
             }
             else
             {
               status = DP83848_STATUS_RESET_TIMEOUT;
 80158c2:	f06f 0301 	mvn.w	r3, #1
 80158c6:	613b      	str	r3, [r7, #16]
               break;
 80158c8:	e00c      	b.n	80158e4 <DP83848_Init+0x11a>
           while(regvalue & DP83848_BCR_SOFT_RESET)
 80158ca:	68bb      	ldr	r3, [r7, #8]
 80158cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	d1dd      	bne.n	8015890 <DP83848_Init+0xc6>
 80158d4:	e006      	b.n	80158e4 <DP83848_Init+0x11a>
             }
           }
         }
         else
         {
           status = DP83848_STATUS_READ_ERROR;
 80158d6:	f06f 0304 	mvn.w	r3, #4
 80158da:	613b      	str	r3, [r7, #16]
 80158dc:	e002      	b.n	80158e4 <DP83848_Init+0x11a>
         }
       }
       else
       {
         status = DP83848_STATUS_WRITE_ERROR;
 80158de:	f06f 0303 	mvn.w	r3, #3
 80158e2:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == DP83848_STATUS_OK)
 80158e4:	693b      	ldr	r3, [r7, #16]
 80158e6:	2b00      	cmp	r3, #0
 80158e8:	d112      	bne.n	8015910 <DP83848_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80158ea:	687b      	ldr	r3, [r7, #4]
 80158ec:	699b      	ldr	r3, [r3, #24]
 80158ee:	4798      	blx	r3
 80158f0:	4603      	mov	r3, r0
 80158f2:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= DP83848_INIT_TO)
 80158f4:	bf00      	nop
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	699b      	ldr	r3, [r3, #24]
 80158fa:	4798      	blx	r3
 80158fc:	4603      	mov	r3, r0
 80158fe:	461a      	mov	r2, r3
 8015900:	68fb      	ldr	r3, [r7, #12]
 8015902:	1ad3      	subs	r3, r2, r3
 8015904:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8015908:	d9f5      	bls.n	80158f6 <DP83848_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 801590a:	687b      	ldr	r3, [r7, #4]
 801590c:	2201      	movs	r2, #1
 801590e:	605a      	str	r2, [r3, #4]
   }

   return status;
 8015910:	693b      	ldr	r3, [r7, #16]
 }
 8015912:	4618      	mov	r0, r3
 8015914:	3718      	adds	r7, #24
 8015916:	46bd      	mov	sp, r7
 8015918:	bd80      	pop	{r7, pc}

0801591a <DP83848_GetLinkState>:
  *         DP83848_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  */
int32_t DP83848_GetLinkState(dp83848_Object_t *pObj)
{
 801591a:	b580      	push	{r7, lr}
 801591c:	b084      	sub	sp, #16
 801591e:	af00      	add	r7, sp, #0
 8015920:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8015922:	2300      	movs	r3, #0
 8015924:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8015926:	687b      	ldr	r3, [r7, #4]
 8015928:	695b      	ldr	r3, [r3, #20]
 801592a:	687a      	ldr	r2, [r7, #4]
 801592c:	6810      	ldr	r0, [r2, #0]
 801592e:	f107 020c 	add.w	r2, r7, #12
 8015932:	2101      	movs	r1, #1
 8015934:	4798      	blx	r3
 8015936:	4603      	mov	r3, r0
 8015938:	2b00      	cmp	r3, #0
 801593a:	da02      	bge.n	8015942 <DP83848_GetLinkState+0x28>
  {
    return DP83848_STATUS_READ_ERROR;
 801593c:	f06f 0304 	mvn.w	r3, #4
 8015940:	e06e      	b.n	8015a20 <DP83848_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	695b      	ldr	r3, [r3, #20]
 8015946:	687a      	ldr	r2, [r7, #4]
 8015948:	6810      	ldr	r0, [r2, #0]
 801594a:	f107 020c 	add.w	r2, r7, #12
 801594e:	2101      	movs	r1, #1
 8015950:	4798      	blx	r3
 8015952:	4603      	mov	r3, r0
 8015954:	2b00      	cmp	r3, #0
 8015956:	da02      	bge.n	801595e <DP83848_GetLinkState+0x44>
  {
    return DP83848_STATUS_READ_ERROR;
 8015958:	f06f 0304 	mvn.w	r3, #4
 801595c:	e060      	b.n	8015a20 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BSR_LINK_STATUS) == 0)
 801595e:	68fb      	ldr	r3, [r7, #12]
 8015960:	f003 0304 	and.w	r3, r3, #4
 8015964:	2b00      	cmp	r3, #0
 8015966:	d101      	bne.n	801596c <DP83848_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return DP83848_STATUS_LINK_DOWN;
 8015968:	2301      	movs	r3, #1
 801596a:	e059      	b.n	8015a20 <DP83848_GetLinkState+0x106>
  }

  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &readval) < 0)
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	695b      	ldr	r3, [r3, #20]
 8015970:	687a      	ldr	r2, [r7, #4]
 8015972:	6810      	ldr	r0, [r2, #0]
 8015974:	f107 020c 	add.w	r2, r7, #12
 8015978:	2100      	movs	r1, #0
 801597a:	4798      	blx	r3
 801597c:	4603      	mov	r3, r0
 801597e:	2b00      	cmp	r3, #0
 8015980:	da02      	bge.n	8015988 <DP83848_GetLinkState+0x6e>
  {
    return DP83848_STATUS_READ_ERROR;
 8015982:	f06f 0304 	mvn.w	r3, #4
 8015986:	e04b      	b.n	8015a20 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BCR_AUTONEGO_EN) != DP83848_BCR_AUTONEGO_EN)
 8015988:	68fb      	ldr	r3, [r7, #12]
 801598a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801598e:	2b00      	cmp	r3, #0
 8015990:	d11b      	bne.n	80159ca <DP83848_GetLinkState+0xb0>
  {
    if(((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT) && ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE))
 8015992:	68fb      	ldr	r3, [r7, #12]
 8015994:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015998:	2b00      	cmp	r3, #0
 801599a:	d006      	beq.n	80159aa <DP83848_GetLinkState+0x90>
 801599c:	68fb      	ldr	r3, [r7, #12]
 801599e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	d001      	beq.n	80159aa <DP83848_GetLinkState+0x90>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 80159a6:	2302      	movs	r3, #2
 80159a8:	e03a      	b.n	8015a20 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT)
 80159aa:	68fb      	ldr	r3, [r7, #12]
 80159ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80159b0:	2b00      	cmp	r3, #0
 80159b2:	d001      	beq.n	80159b8 <DP83848_GetLinkState+0x9e>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 80159b4:	2303      	movs	r3, #3
 80159b6:	e033      	b.n	8015a20 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE)
 80159b8:	68fb      	ldr	r3, [r7, #12]
 80159ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80159be:	2b00      	cmp	r3, #0
 80159c0:	d001      	beq.n	80159c6 <DP83848_GetLinkState+0xac>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 80159c2:	2304      	movs	r3, #4
 80159c4:	e02c      	b.n	8015a20 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 80159c6:	2305      	movs	r3, #5
 80159c8:	e02a      	b.n	8015a20 <DP83848_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_PHYSCSR, &readval) < 0)
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	695b      	ldr	r3, [r3, #20]
 80159ce:	687a      	ldr	r2, [r7, #4]
 80159d0:	6810      	ldr	r0, [r2, #0]
 80159d2:	f107 020c 	add.w	r2, r7, #12
 80159d6:	2110      	movs	r1, #16
 80159d8:	4798      	blx	r3
 80159da:	4603      	mov	r3, r0
 80159dc:	2b00      	cmp	r3, #0
 80159de:	da02      	bge.n	80159e6 <DP83848_GetLinkState+0xcc>
    {
      return DP83848_STATUS_READ_ERROR;
 80159e0:	f06f 0304 	mvn.w	r3, #4
 80159e4:	e01c      	b.n	8015a20 <DP83848_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & DP83848_PHYSCSR_AUTONEGO_DONE) == 0)
 80159e6:	68fb      	ldr	r3, [r7, #12]
 80159e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80159ec:	2b00      	cmp	r3, #0
 80159ee:	d101      	bne.n	80159f4 <DP83848_GetLinkState+0xda>
    {
      return DP83848_STATUS_AUTONEGO_NOTDONE;
 80159f0:	2306      	movs	r3, #6
 80159f2:	e015      	b.n	8015a20 <DP83848_GetLinkState+0x106>
    }

    if((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_FD)
 80159f4:	68fb      	ldr	r3, [r7, #12]
 80159f6:	f003 0306 	and.w	r3, r3, #6
 80159fa:	2b04      	cmp	r3, #4
 80159fc:	d101      	bne.n	8015a02 <DP83848_GetLinkState+0xe8>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 80159fe:	2302      	movs	r3, #2
 8015a00:	e00e      	b.n	8015a20 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_HD)
 8015a02:	68fb      	ldr	r3, [r7, #12]
 8015a04:	f003 0306 	and.w	r3, r3, #6
 8015a08:	2b00      	cmp	r3, #0
 8015a0a:	d101      	bne.n	8015a10 <DP83848_GetLinkState+0xf6>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8015a0c:	2303      	movs	r3, #3
 8015a0e:	e007      	b.n	8015a20 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_10BT_FD)
 8015a10:	68fb      	ldr	r3, [r7, #12]
 8015a12:	f003 0306 	and.w	r3, r3, #6
 8015a16:	2b06      	cmp	r3, #6
 8015a18:	d101      	bne.n	8015a1e <DP83848_GetLinkState+0x104>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 8015a1a:	2304      	movs	r3, #4
 8015a1c:	e000      	b.n	8015a20 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8015a1e:	2305      	movs	r3, #5
    }
  }
}
 8015a20:	4618      	mov	r0, r3
 8015a22:	3710      	adds	r7, #16
 8015a24:	46bd      	mov	sp, r7
 8015a26:	bd80      	pop	{r7, pc}

08015a28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8015a28:	b580      	push	{r7, lr}
 8015a2a:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCELERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 8015a2c:	4b0b      	ldr	r3, [pc, #44]	; (8015a5c <HAL_Init+0x34>)
 8015a2e:	681b      	ldr	r3, [r3, #0]
 8015a30:	4a0a      	ldr	r2, [pc, #40]	; (8015a5c <HAL_Init+0x34>)
 8015a32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8015a36:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8015a38:	4b08      	ldr	r3, [pc, #32]	; (8015a5c <HAL_Init+0x34>)
 8015a3a:	681b      	ldr	r3, [r3, #0]
 8015a3c:	4a07      	ldr	r2, [pc, #28]	; (8015a5c <HAL_Init+0x34>)
 8015a3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015a42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8015a44:	2003      	movs	r0, #3
 8015a46:	f001 f825 	bl	8016a94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8015a4a:	2007      	movs	r0, #7
 8015a4c:	f000 f808 	bl	8015a60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8015a50:	f7ff f856 	bl	8014b00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8015a54:	2300      	movs	r3, #0
}
 8015a56:	4618      	mov	r0, r3
 8015a58:	bd80      	pop	{r7, pc}
 8015a5a:	bf00      	nop
 8015a5c:	40023c00 	.word	0x40023c00

08015a60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8015a60:	b580      	push	{r7, lr}
 8015a62:	b082      	sub	sp, #8
 8015a64:	af00      	add	r7, sp, #0
 8015a66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8015a68:	4b12      	ldr	r3, [pc, #72]	; (8015ab4 <HAL_InitTick+0x54>)
 8015a6a:	681a      	ldr	r2, [r3, #0]
 8015a6c:	4b12      	ldr	r3, [pc, #72]	; (8015ab8 <HAL_InitTick+0x58>)
 8015a6e:	781b      	ldrb	r3, [r3, #0]
 8015a70:	4619      	mov	r1, r3
 8015a72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015a76:	fbb3 f3f1 	udiv	r3, r3, r1
 8015a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8015a7e:	4618      	mov	r0, r3
 8015a80:	f001 f83d 	bl	8016afe <HAL_SYSTICK_Config>
 8015a84:	4603      	mov	r3, r0
 8015a86:	2b00      	cmp	r3, #0
 8015a88:	d001      	beq.n	8015a8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8015a8a:	2301      	movs	r3, #1
 8015a8c:	e00e      	b.n	8015aac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	2b0f      	cmp	r3, #15
 8015a92:	d80a      	bhi.n	8015aaa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8015a94:	2200      	movs	r2, #0
 8015a96:	6879      	ldr	r1, [r7, #4]
 8015a98:	f04f 30ff 	mov.w	r0, #4294967295
 8015a9c:	f001 f805 	bl	8016aaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8015aa0:	4a06      	ldr	r2, [pc, #24]	; (8015abc <HAL_InitTick+0x5c>)
 8015aa2:	687b      	ldr	r3, [r7, #4]
 8015aa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8015aa6:	2300      	movs	r3, #0
 8015aa8:	e000      	b.n	8015aac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8015aaa:	2301      	movs	r3, #1
}
 8015aac:	4618      	mov	r0, r3
 8015aae:	3708      	adds	r7, #8
 8015ab0:	46bd      	mov	sp, r7
 8015ab2:	bd80      	pop	{r7, pc}
 8015ab4:	2000011c 	.word	0x2000011c
 8015ab8:	20000124 	.word	0x20000124
 8015abc:	20000120 	.word	0x20000120

08015ac0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8015ac0:	b480      	push	{r7}
 8015ac2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8015ac4:	4b06      	ldr	r3, [pc, #24]	; (8015ae0 <HAL_IncTick+0x20>)
 8015ac6:	781b      	ldrb	r3, [r3, #0]
 8015ac8:	461a      	mov	r2, r3
 8015aca:	4b06      	ldr	r3, [pc, #24]	; (8015ae4 <HAL_IncTick+0x24>)
 8015acc:	681b      	ldr	r3, [r3, #0]
 8015ace:	4413      	add	r3, r2
 8015ad0:	4a04      	ldr	r2, [pc, #16]	; (8015ae4 <HAL_IncTick+0x24>)
 8015ad2:	6013      	str	r3, [r2, #0]
}
 8015ad4:	bf00      	nop
 8015ad6:	46bd      	mov	sp, r7
 8015ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015adc:	4770      	bx	lr
 8015ade:	bf00      	nop
 8015ae0:	20000124 	.word	0x20000124
 8015ae4:	2000bdac 	.word	0x2000bdac

08015ae8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8015ae8:	b480      	push	{r7}
 8015aea:	af00      	add	r7, sp, #0
  return uwTick;
 8015aec:	4b03      	ldr	r3, [pc, #12]	; (8015afc <HAL_GetTick+0x14>)
 8015aee:	681b      	ldr	r3, [r3, #0]
}
 8015af0:	4618      	mov	r0, r3
 8015af2:	46bd      	mov	sp, r7
 8015af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015af8:	4770      	bx	lr
 8015afa:	bf00      	nop
 8015afc:	2000bdac 	.word	0x2000bdac

08015b00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8015b00:	b580      	push	{r7, lr}
 8015b02:	b084      	sub	sp, #16
 8015b04:	af00      	add	r7, sp, #0
 8015b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8015b08:	f7ff ffee 	bl	8015ae8 <HAL_GetTick>
 8015b0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8015b12:	68fb      	ldr	r3, [r7, #12]
 8015b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b18:	d005      	beq.n	8015b26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8015b1a:	4b0a      	ldr	r3, [pc, #40]	; (8015b44 <HAL_Delay+0x44>)
 8015b1c:	781b      	ldrb	r3, [r3, #0]
 8015b1e:	461a      	mov	r2, r3
 8015b20:	68fb      	ldr	r3, [r7, #12]
 8015b22:	4413      	add	r3, r2
 8015b24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8015b26:	bf00      	nop
 8015b28:	f7ff ffde 	bl	8015ae8 <HAL_GetTick>
 8015b2c:	4602      	mov	r2, r0
 8015b2e:	68bb      	ldr	r3, [r7, #8]
 8015b30:	1ad3      	subs	r3, r2, r3
 8015b32:	68fa      	ldr	r2, [r7, #12]
 8015b34:	429a      	cmp	r2, r3
 8015b36:	d8f7      	bhi.n	8015b28 <HAL_Delay+0x28>
  {
  }
}
 8015b38:	bf00      	nop
 8015b3a:	bf00      	nop
 8015b3c:	3710      	adds	r7, #16
 8015b3e:	46bd      	mov	sp, r7
 8015b40:	bd80      	pop	{r7, pc}
 8015b42:	bf00      	nop
 8015b44:	20000124 	.word	0x20000124

08015b48 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8015b48:	b580      	push	{r7, lr}
 8015b4a:	b084      	sub	sp, #16
 8015b4c:	af00      	add	r7, sp, #0
 8015b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8015b50:	687b      	ldr	r3, [r7, #4]
 8015b52:	2b00      	cmp	r3, #0
 8015b54:	d101      	bne.n	8015b5a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8015b56:	2301      	movs	r3, #1
 8015b58:	e11c      	b.n	8015d94 <HAL_CAN_Init+0x24c>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 8015b5a:	687b      	ldr	r3, [r7, #4]
 8015b5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015b60:	b2db      	uxtb	r3, r3
 8015b62:	2b00      	cmp	r3, #0
 8015b64:	d131      	bne.n	8015bca <HAL_CAN_Init+0x82>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	4a8c      	ldr	r2, [pc, #560]	; (8015d9c <HAL_CAN_Init+0x254>)
 8015b6a:	641a      	str	r2, [r3, #64]	; 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	4a8c      	ldr	r2, [pc, #560]	; (8015da0 <HAL_CAN_Init+0x258>)
 8015b70:	645a      	str	r2, [r3, #68]	; 0x44
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	4a8b      	ldr	r2, [pc, #556]	; (8015da4 <HAL_CAN_Init+0x25c>)
 8015b76:	649a      	str	r2, [r3, #72]	; 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	4a8b      	ldr	r2, [pc, #556]	; (8015da8 <HAL_CAN_Init+0x260>)
 8015b7c:	64da      	str	r2, [r3, #76]	; 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	4a8a      	ldr	r2, [pc, #552]	; (8015dac <HAL_CAN_Init+0x264>)
 8015b82:	629a      	str	r2, [r3, #40]	; 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	4a8a      	ldr	r2, [pc, #552]	; (8015db0 <HAL_CAN_Init+0x268>)
 8015b88:	62da      	str	r2, [r3, #44]	; 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	4a89      	ldr	r2, [pc, #548]	; (8015db4 <HAL_CAN_Init+0x26c>)
 8015b8e:	631a      	str	r2, [r3, #48]	; 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 8015b90:	687b      	ldr	r3, [r7, #4]
 8015b92:	4a89      	ldr	r2, [pc, #548]	; (8015db8 <HAL_CAN_Init+0x270>)
 8015b94:	635a      	str	r2, [r3, #52]	; 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	4a88      	ldr	r2, [pc, #544]	; (8015dbc <HAL_CAN_Init+0x274>)
 8015b9a:	639a      	str	r2, [r3, #56]	; 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 8015b9c:	687b      	ldr	r3, [r7, #4]
 8015b9e:	4a88      	ldr	r2, [pc, #544]	; (8015dc0 <HAL_CAN_Init+0x278>)
 8015ba0:	63da      	str	r2, [r3, #60]	; 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 8015ba2:	687b      	ldr	r3, [r7, #4]
 8015ba4:	4a87      	ldr	r2, [pc, #540]	; (8015dc4 <HAL_CAN_Init+0x27c>)
 8015ba6:	651a      	str	r2, [r3, #80]	; 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	4a87      	ldr	r2, [pc, #540]	; (8015dc8 <HAL_CAN_Init+0x280>)
 8015bac:	655a      	str	r2, [r3, #84]	; 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	4a86      	ldr	r2, [pc, #536]	; (8015dcc <HAL_CAN_Init+0x284>)
 8015bb2:	659a      	str	r2, [r3, #88]	; 0x58

    if (hcan->MspInitCallback == NULL)
 8015bb4:	687b      	ldr	r3, [r7, #4]
 8015bb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	d102      	bne.n	8015bc2 <HAL_CAN_Init+0x7a>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	4a84      	ldr	r2, [pc, #528]	; (8015dd0 <HAL_CAN_Init+0x288>)
 8015bc0:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015bc6:	6878      	ldr	r0, [r7, #4]
 8015bc8:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	681b      	ldr	r3, [r3, #0]
 8015bce:	681a      	ldr	r2, [r3, #0]
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	681b      	ldr	r3, [r3, #0]
 8015bd4:	f042 0201 	orr.w	r2, r2, #1
 8015bd8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8015bda:	f7ff ff85 	bl	8015ae8 <HAL_GetTick>
 8015bde:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8015be0:	e012      	b.n	8015c08 <HAL_CAN_Init+0xc0>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8015be2:	f7ff ff81 	bl	8015ae8 <HAL_GetTick>
 8015be6:	4602      	mov	r2, r0
 8015be8:	68fb      	ldr	r3, [r7, #12]
 8015bea:	1ad3      	subs	r3, r2, r3
 8015bec:	2b0a      	cmp	r3, #10
 8015bee:	d90b      	bls.n	8015c08 <HAL_CAN_Init+0xc0>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015bf4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	2205      	movs	r2, #5
 8015c00:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8015c04:	2301      	movs	r3, #1
 8015c06:	e0c5      	b.n	8015d94 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	681b      	ldr	r3, [r3, #0]
 8015c0c:	685b      	ldr	r3, [r3, #4]
 8015c0e:	f003 0301 	and.w	r3, r3, #1
 8015c12:	2b00      	cmp	r3, #0
 8015c14:	d0e5      	beq.n	8015be2 <HAL_CAN_Init+0x9a>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	681b      	ldr	r3, [r3, #0]
 8015c1a:	681a      	ldr	r2, [r3, #0]
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	681b      	ldr	r3, [r3, #0]
 8015c20:	f022 0202 	bic.w	r2, r2, #2
 8015c24:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8015c26:	f7ff ff5f 	bl	8015ae8 <HAL_GetTick>
 8015c2a:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8015c2c:	e012      	b.n	8015c54 <HAL_CAN_Init+0x10c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8015c2e:	f7ff ff5b 	bl	8015ae8 <HAL_GetTick>
 8015c32:	4602      	mov	r2, r0
 8015c34:	68fb      	ldr	r3, [r7, #12]
 8015c36:	1ad3      	subs	r3, r2, r3
 8015c38:	2b0a      	cmp	r3, #10
 8015c3a:	d90b      	bls.n	8015c54 <HAL_CAN_Init+0x10c>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c40:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	2205      	movs	r2, #5
 8015c4c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8015c50:	2301      	movs	r3, #1
 8015c52:	e09f      	b.n	8015d94 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	681b      	ldr	r3, [r3, #0]
 8015c58:	685b      	ldr	r3, [r3, #4]
 8015c5a:	f003 0302 	and.w	r3, r3, #2
 8015c5e:	2b00      	cmp	r3, #0
 8015c60:	d1e5      	bne.n	8015c2e <HAL_CAN_Init+0xe6>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	7e1b      	ldrb	r3, [r3, #24]
 8015c66:	2b01      	cmp	r3, #1
 8015c68:	d108      	bne.n	8015c7c <HAL_CAN_Init+0x134>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	681b      	ldr	r3, [r3, #0]
 8015c6e:	681a      	ldr	r2, [r3, #0]
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	681b      	ldr	r3, [r3, #0]
 8015c74:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8015c78:	601a      	str	r2, [r3, #0]
 8015c7a:	e007      	b.n	8015c8c <HAL_CAN_Init+0x144>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	681b      	ldr	r3, [r3, #0]
 8015c80:	681a      	ldr	r2, [r3, #0]
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	681b      	ldr	r3, [r3, #0]
 8015c86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8015c8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8015c8c:	687b      	ldr	r3, [r7, #4]
 8015c8e:	7e5b      	ldrb	r3, [r3, #25]
 8015c90:	2b01      	cmp	r3, #1
 8015c92:	d108      	bne.n	8015ca6 <HAL_CAN_Init+0x15e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	681b      	ldr	r3, [r3, #0]
 8015c98:	681a      	ldr	r2, [r3, #0]
 8015c9a:	687b      	ldr	r3, [r7, #4]
 8015c9c:	681b      	ldr	r3, [r3, #0]
 8015c9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015ca2:	601a      	str	r2, [r3, #0]
 8015ca4:	e007      	b.n	8015cb6 <HAL_CAN_Init+0x16e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	681b      	ldr	r3, [r3, #0]
 8015caa:	681a      	ldr	r2, [r3, #0]
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	681b      	ldr	r3, [r3, #0]
 8015cb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8015cb4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8015cb6:	687b      	ldr	r3, [r7, #4]
 8015cb8:	7e9b      	ldrb	r3, [r3, #26]
 8015cba:	2b01      	cmp	r3, #1
 8015cbc:	d108      	bne.n	8015cd0 <HAL_CAN_Init+0x188>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	681b      	ldr	r3, [r3, #0]
 8015cc2:	681a      	ldr	r2, [r3, #0]
 8015cc4:	687b      	ldr	r3, [r7, #4]
 8015cc6:	681b      	ldr	r3, [r3, #0]
 8015cc8:	f042 0220 	orr.w	r2, r2, #32
 8015ccc:	601a      	str	r2, [r3, #0]
 8015cce:	e007      	b.n	8015ce0 <HAL_CAN_Init+0x198>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	681b      	ldr	r3, [r3, #0]
 8015cd4:	681a      	ldr	r2, [r3, #0]
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	681b      	ldr	r3, [r3, #0]
 8015cda:	f022 0220 	bic.w	r2, r2, #32
 8015cde:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8015ce0:	687b      	ldr	r3, [r7, #4]
 8015ce2:	7edb      	ldrb	r3, [r3, #27]
 8015ce4:	2b01      	cmp	r3, #1
 8015ce6:	d108      	bne.n	8015cfa <HAL_CAN_Init+0x1b2>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	681b      	ldr	r3, [r3, #0]
 8015cec:	681a      	ldr	r2, [r3, #0]
 8015cee:	687b      	ldr	r3, [r7, #4]
 8015cf0:	681b      	ldr	r3, [r3, #0]
 8015cf2:	f022 0210 	bic.w	r2, r2, #16
 8015cf6:	601a      	str	r2, [r3, #0]
 8015cf8:	e007      	b.n	8015d0a <HAL_CAN_Init+0x1c2>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	681b      	ldr	r3, [r3, #0]
 8015cfe:	681a      	ldr	r2, [r3, #0]
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	681b      	ldr	r3, [r3, #0]
 8015d04:	f042 0210 	orr.w	r2, r2, #16
 8015d08:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	7f1b      	ldrb	r3, [r3, #28]
 8015d0e:	2b01      	cmp	r3, #1
 8015d10:	d108      	bne.n	8015d24 <HAL_CAN_Init+0x1dc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8015d12:	687b      	ldr	r3, [r7, #4]
 8015d14:	681b      	ldr	r3, [r3, #0]
 8015d16:	681a      	ldr	r2, [r3, #0]
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	681b      	ldr	r3, [r3, #0]
 8015d1c:	f042 0208 	orr.w	r2, r2, #8
 8015d20:	601a      	str	r2, [r3, #0]
 8015d22:	e007      	b.n	8015d34 <HAL_CAN_Init+0x1ec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8015d24:	687b      	ldr	r3, [r7, #4]
 8015d26:	681b      	ldr	r3, [r3, #0]
 8015d28:	681a      	ldr	r2, [r3, #0]
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	681b      	ldr	r3, [r3, #0]
 8015d2e:	f022 0208 	bic.w	r2, r2, #8
 8015d32:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8015d34:	687b      	ldr	r3, [r7, #4]
 8015d36:	7f5b      	ldrb	r3, [r3, #29]
 8015d38:	2b01      	cmp	r3, #1
 8015d3a:	d108      	bne.n	8015d4e <HAL_CAN_Init+0x206>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8015d3c:	687b      	ldr	r3, [r7, #4]
 8015d3e:	681b      	ldr	r3, [r3, #0]
 8015d40:	681a      	ldr	r2, [r3, #0]
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	681b      	ldr	r3, [r3, #0]
 8015d46:	f042 0204 	orr.w	r2, r2, #4
 8015d4a:	601a      	str	r2, [r3, #0]
 8015d4c:	e007      	b.n	8015d5e <HAL_CAN_Init+0x216>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8015d4e:	687b      	ldr	r3, [r7, #4]
 8015d50:	681b      	ldr	r3, [r3, #0]
 8015d52:	681a      	ldr	r2, [r3, #0]
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	681b      	ldr	r3, [r3, #0]
 8015d58:	f022 0204 	bic.w	r2, r2, #4
 8015d5c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	689a      	ldr	r2, [r3, #8]
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	68db      	ldr	r3, [r3, #12]
 8015d66:	431a      	orrs	r2, r3
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	691b      	ldr	r3, [r3, #16]
 8015d6c:	431a      	orrs	r2, r3
 8015d6e:	687b      	ldr	r3, [r7, #4]
 8015d70:	695b      	ldr	r3, [r3, #20]
 8015d72:	ea42 0103 	orr.w	r1, r2, r3
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	685b      	ldr	r3, [r3, #4]
 8015d7a:	1e5a      	subs	r2, r3, #1
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	681b      	ldr	r3, [r3, #0]
 8015d80:	430a      	orrs	r2, r1
 8015d82:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	2200      	movs	r2, #0
 8015d88:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	2201      	movs	r2, #1
 8015d8e:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8015d92:	2300      	movs	r3, #0
}
 8015d94:	4618      	mov	r0, r3
 8015d96:	3710      	adds	r7, #16
 8015d98:	46bd      	mov	sp, r7
 8015d9a:	bd80      	pop	{r7, pc}
 8015d9c:	0801014d 	.word	0x0801014d
 8015da0:	0801688f 	.word	0x0801688f
 8015da4:	08010269 	.word	0x08010269
 8015da8:	080168a3 	.word	0x080168a3
 8015dac:	08016817 	.word	0x08016817
 8015db0:	0801682b 	.word	0x0801682b
 8015db4:	0801683f 	.word	0x0801683f
 8015db8:	08016853 	.word	0x08016853
 8015dbc:	08016867 	.word	0x08016867
 8015dc0:	0801687b 	.word	0x0801687b
 8015dc4:	080168b7 	.word	0x080168b7
 8015dc8:	080168cb 	.word	0x080168cb
 8015dcc:	080168df 	.word	0x080168df
 8015dd0:	0800f945 	.word	0x0800f945

08015dd4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8015dd4:	b480      	push	{r7}
 8015dd6:	b087      	sub	sp, #28
 8015dd8:	af00      	add	r7, sp, #0
 8015dda:	6078      	str	r0, [r7, #4]
 8015ddc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8015dde:	687b      	ldr	r3, [r7, #4]
 8015de0:	681b      	ldr	r3, [r3, #0]
 8015de2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8015de4:	687b      	ldr	r3, [r7, #4]
 8015de6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015dea:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8015dec:	7cfb      	ldrb	r3, [r7, #19]
 8015dee:	2b01      	cmp	r3, #1
 8015df0:	d003      	beq.n	8015dfa <HAL_CAN_ConfigFilter+0x26>
 8015df2:	7cfb      	ldrb	r3, [r7, #19]
 8015df4:	2b02      	cmp	r3, #2
 8015df6:	f040 80c7 	bne.w	8015f88 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	681b      	ldr	r3, [r3, #0]
 8015dfe:	4a69      	ldr	r2, [pc, #420]	; (8015fa4 <HAL_CAN_ConfigFilter+0x1d0>)
 8015e00:	4293      	cmp	r3, r2
 8015e02:	d001      	beq.n	8015e08 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8015e04:	4b68      	ldr	r3, [pc, #416]	; (8015fa8 <HAL_CAN_ConfigFilter+0x1d4>)
 8015e06:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8015e08:	697b      	ldr	r3, [r7, #20]
 8015e0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8015e0e:	f043 0201 	orr.w	r2, r3, #1
 8015e12:	697b      	ldr	r3, [r7, #20]
 8015e14:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8015e18:	697b      	ldr	r3, [r7, #20]
 8015e1a:	4a63      	ldr	r2, [pc, #396]	; (8015fa8 <HAL_CAN_ConfigFilter+0x1d4>)
 8015e1c:	4293      	cmp	r3, r2
 8015e1e:	d111      	bne.n	8015e44 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8015e20:	697b      	ldr	r3, [r7, #20]
 8015e22:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8015e26:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8015e2a:	697b      	ldr	r3, [r7, #20]
 8015e2c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8015e30:	697b      	ldr	r3, [r7, #20]
 8015e32:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8015e36:	683b      	ldr	r3, [r7, #0]
 8015e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e3a:	021b      	lsls	r3, r3, #8
 8015e3c:	431a      	orrs	r2, r3
 8015e3e:	697b      	ldr	r3, [r7, #20]
 8015e40:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8015e44:	683b      	ldr	r3, [r7, #0]
 8015e46:	695b      	ldr	r3, [r3, #20]
 8015e48:	f003 031f 	and.w	r3, r3, #31
 8015e4c:	2201      	movs	r2, #1
 8015e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8015e52:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8015e54:	697b      	ldr	r3, [r7, #20]
 8015e56:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8015e5a:	68fb      	ldr	r3, [r7, #12]
 8015e5c:	43db      	mvns	r3, r3
 8015e5e:	401a      	ands	r2, r3
 8015e60:	697b      	ldr	r3, [r7, #20]
 8015e62:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8015e66:	683b      	ldr	r3, [r7, #0]
 8015e68:	69db      	ldr	r3, [r3, #28]
 8015e6a:	2b00      	cmp	r3, #0
 8015e6c:	d123      	bne.n	8015eb6 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8015e6e:	697b      	ldr	r3, [r7, #20]
 8015e70:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8015e74:	68fb      	ldr	r3, [r7, #12]
 8015e76:	43db      	mvns	r3, r3
 8015e78:	401a      	ands	r2, r3
 8015e7a:	697b      	ldr	r3, [r7, #20]
 8015e7c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8015e80:	683b      	ldr	r3, [r7, #0]
 8015e82:	68db      	ldr	r3, [r3, #12]
 8015e84:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8015e86:	683b      	ldr	r3, [r7, #0]
 8015e88:	685b      	ldr	r3, [r3, #4]
 8015e8a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8015e8c:	683a      	ldr	r2, [r7, #0]
 8015e8e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8015e90:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8015e92:	697b      	ldr	r3, [r7, #20]
 8015e94:	3248      	adds	r2, #72	; 0x48
 8015e96:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8015e9a:	683b      	ldr	r3, [r7, #0]
 8015e9c:	689b      	ldr	r3, [r3, #8]
 8015e9e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8015ea0:	683b      	ldr	r3, [r7, #0]
 8015ea2:	681b      	ldr	r3, [r3, #0]
 8015ea4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8015ea6:	683b      	ldr	r3, [r7, #0]
 8015ea8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8015eaa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8015eac:	6979      	ldr	r1, [r7, #20]
 8015eae:	3348      	adds	r3, #72	; 0x48
 8015eb0:	00db      	lsls	r3, r3, #3
 8015eb2:	440b      	add	r3, r1
 8015eb4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8015eb6:	683b      	ldr	r3, [r7, #0]
 8015eb8:	69db      	ldr	r3, [r3, #28]
 8015eba:	2b01      	cmp	r3, #1
 8015ebc:	d122      	bne.n	8015f04 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8015ebe:	697b      	ldr	r3, [r7, #20]
 8015ec0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8015ec4:	68fb      	ldr	r3, [r7, #12]
 8015ec6:	431a      	orrs	r2, r3
 8015ec8:	697b      	ldr	r3, [r7, #20]
 8015eca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8015ece:	683b      	ldr	r3, [r7, #0]
 8015ed0:	681b      	ldr	r3, [r3, #0]
 8015ed2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8015ed4:	683b      	ldr	r3, [r7, #0]
 8015ed6:	685b      	ldr	r3, [r3, #4]
 8015ed8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8015eda:	683a      	ldr	r2, [r7, #0]
 8015edc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8015ede:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8015ee0:	697b      	ldr	r3, [r7, #20]
 8015ee2:	3248      	adds	r2, #72	; 0x48
 8015ee4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8015ee8:	683b      	ldr	r3, [r7, #0]
 8015eea:	689b      	ldr	r3, [r3, #8]
 8015eec:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8015eee:	683b      	ldr	r3, [r7, #0]
 8015ef0:	68db      	ldr	r3, [r3, #12]
 8015ef2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8015ef4:	683b      	ldr	r3, [r7, #0]
 8015ef6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8015ef8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8015efa:	6979      	ldr	r1, [r7, #20]
 8015efc:	3348      	adds	r3, #72	; 0x48
 8015efe:	00db      	lsls	r3, r3, #3
 8015f00:	440b      	add	r3, r1
 8015f02:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8015f04:	683b      	ldr	r3, [r7, #0]
 8015f06:	699b      	ldr	r3, [r3, #24]
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	d109      	bne.n	8015f20 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8015f0c:	697b      	ldr	r3, [r7, #20]
 8015f0e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8015f12:	68fb      	ldr	r3, [r7, #12]
 8015f14:	43db      	mvns	r3, r3
 8015f16:	401a      	ands	r2, r3
 8015f18:	697b      	ldr	r3, [r7, #20]
 8015f1a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8015f1e:	e007      	b.n	8015f30 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8015f20:	697b      	ldr	r3, [r7, #20]
 8015f22:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8015f26:	68fb      	ldr	r3, [r7, #12]
 8015f28:	431a      	orrs	r2, r3
 8015f2a:	697b      	ldr	r3, [r7, #20]
 8015f2c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8015f30:	683b      	ldr	r3, [r7, #0]
 8015f32:	691b      	ldr	r3, [r3, #16]
 8015f34:	2b00      	cmp	r3, #0
 8015f36:	d109      	bne.n	8015f4c <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8015f38:	697b      	ldr	r3, [r7, #20]
 8015f3a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8015f3e:	68fb      	ldr	r3, [r7, #12]
 8015f40:	43db      	mvns	r3, r3
 8015f42:	401a      	ands	r2, r3
 8015f44:	697b      	ldr	r3, [r7, #20]
 8015f46:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8015f4a:	e007      	b.n	8015f5c <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8015f4c:	697b      	ldr	r3, [r7, #20]
 8015f4e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8015f52:	68fb      	ldr	r3, [r7, #12]
 8015f54:	431a      	orrs	r2, r3
 8015f56:	697b      	ldr	r3, [r7, #20]
 8015f58:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8015f5c:	683b      	ldr	r3, [r7, #0]
 8015f5e:	6a1b      	ldr	r3, [r3, #32]
 8015f60:	2b01      	cmp	r3, #1
 8015f62:	d107      	bne.n	8015f74 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8015f64:	697b      	ldr	r3, [r7, #20]
 8015f66:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8015f6a:	68fb      	ldr	r3, [r7, #12]
 8015f6c:	431a      	orrs	r2, r3
 8015f6e:	697b      	ldr	r3, [r7, #20]
 8015f70:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8015f74:	697b      	ldr	r3, [r7, #20]
 8015f76:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8015f7a:	f023 0201 	bic.w	r2, r3, #1
 8015f7e:	697b      	ldr	r3, [r7, #20]
 8015f80:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8015f84:	2300      	movs	r3, #0
 8015f86:	e006      	b.n	8015f96 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8015f88:	687b      	ldr	r3, [r7, #4]
 8015f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f8c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8015f94:	2301      	movs	r3, #1
  }
}
 8015f96:	4618      	mov	r0, r3
 8015f98:	371c      	adds	r7, #28
 8015f9a:	46bd      	mov	sp, r7
 8015f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fa0:	4770      	bx	lr
 8015fa2:	bf00      	nop
 8015fa4:	40003400 	.word	0x40003400
 8015fa8:	40006400 	.word	0x40006400

08015fac <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8015fac:	b580      	push	{r7, lr}
 8015fae:	b084      	sub	sp, #16
 8015fb0:	af00      	add	r7, sp, #0
 8015fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015fba:	b2db      	uxtb	r3, r3
 8015fbc:	2b01      	cmp	r3, #1
 8015fbe:	d12e      	bne.n	801601e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	2202      	movs	r2, #2
 8015fc4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	681b      	ldr	r3, [r3, #0]
 8015fcc:	681a      	ldr	r2, [r3, #0]
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	681b      	ldr	r3, [r3, #0]
 8015fd2:	f022 0201 	bic.w	r2, r2, #1
 8015fd6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8015fd8:	f7ff fd86 	bl	8015ae8 <HAL_GetTick>
 8015fdc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8015fde:	e012      	b.n	8016006 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8015fe0:	f7ff fd82 	bl	8015ae8 <HAL_GetTick>
 8015fe4:	4602      	mov	r2, r0
 8015fe6:	68fb      	ldr	r3, [r7, #12]
 8015fe8:	1ad3      	subs	r3, r2, r3
 8015fea:	2b0a      	cmp	r3, #10
 8015fec:	d90b      	bls.n	8016006 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ff2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8015ff6:	687b      	ldr	r3, [r7, #4]
 8015ff8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	2205      	movs	r2, #5
 8015ffe:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8016002:	2301      	movs	r3, #1
 8016004:	e012      	b.n	801602c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8016006:	687b      	ldr	r3, [r7, #4]
 8016008:	681b      	ldr	r3, [r3, #0]
 801600a:	685b      	ldr	r3, [r3, #4]
 801600c:	f003 0301 	and.w	r3, r3, #1
 8016010:	2b00      	cmp	r3, #0
 8016012:	d1e5      	bne.n	8015fe0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	2200      	movs	r2, #0
 8016018:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 801601a:	2300      	movs	r3, #0
 801601c:	e006      	b.n	801602c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 801601e:	687b      	ldr	r3, [r7, #4]
 8016020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016022:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 801602a:	2301      	movs	r3, #1
  }
}
 801602c:	4618      	mov	r0, r3
 801602e:	3710      	adds	r7, #16
 8016030:	46bd      	mov	sp, r7
 8016032:	bd80      	pop	{r7, pc}

08016034 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8016034:	b480      	push	{r7}
 8016036:	b089      	sub	sp, #36	; 0x24
 8016038:	af00      	add	r7, sp, #0
 801603a:	60f8      	str	r0, [r7, #12]
 801603c:	60b9      	str	r1, [r7, #8]
 801603e:	607a      	str	r2, [r7, #4]
 8016040:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8016042:	68fb      	ldr	r3, [r7, #12]
 8016044:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016048:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 801604a:	68fb      	ldr	r3, [r7, #12]
 801604c:	681b      	ldr	r3, [r3, #0]
 801604e:	689b      	ldr	r3, [r3, #8]
 8016050:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8016052:	7ffb      	ldrb	r3, [r7, #31]
 8016054:	2b01      	cmp	r3, #1
 8016056:	d003      	beq.n	8016060 <HAL_CAN_AddTxMessage+0x2c>
 8016058:	7ffb      	ldrb	r3, [r7, #31]
 801605a:	2b02      	cmp	r3, #2
 801605c:	f040 80ad 	bne.w	80161ba <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8016060:	69bb      	ldr	r3, [r7, #24]
 8016062:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8016066:	2b00      	cmp	r3, #0
 8016068:	d10a      	bne.n	8016080 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 801606a:	69bb      	ldr	r3, [r7, #24]
 801606c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8016070:	2b00      	cmp	r3, #0
 8016072:	d105      	bne.n	8016080 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8016074:	69bb      	ldr	r3, [r7, #24]
 8016076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 801607a:	2b00      	cmp	r3, #0
 801607c:	f000 8095 	beq.w	80161aa <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8016080:	69bb      	ldr	r3, [r7, #24]
 8016082:	0e1b      	lsrs	r3, r3, #24
 8016084:	f003 0303 	and.w	r3, r3, #3
 8016088:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 801608a:	2201      	movs	r2, #1
 801608c:	697b      	ldr	r3, [r7, #20]
 801608e:	409a      	lsls	r2, r3
 8016090:	683b      	ldr	r3, [r7, #0]
 8016092:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8016094:	68bb      	ldr	r3, [r7, #8]
 8016096:	689b      	ldr	r3, [r3, #8]
 8016098:	2b00      	cmp	r3, #0
 801609a:	d10d      	bne.n	80160b8 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 801609c:	68bb      	ldr	r3, [r7, #8]
 801609e:	681b      	ldr	r3, [r3, #0]
 80160a0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80160a2:	68bb      	ldr	r3, [r7, #8]
 80160a4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80160a6:	68f9      	ldr	r1, [r7, #12]
 80160a8:	6809      	ldr	r1, [r1, #0]
 80160aa:	431a      	orrs	r2, r3
 80160ac:	697b      	ldr	r3, [r7, #20]
 80160ae:	3318      	adds	r3, #24
 80160b0:	011b      	lsls	r3, r3, #4
 80160b2:	440b      	add	r3, r1
 80160b4:	601a      	str	r2, [r3, #0]
 80160b6:	e00f      	b.n	80160d8 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80160b8:	68bb      	ldr	r3, [r7, #8]
 80160ba:	685b      	ldr	r3, [r3, #4]
 80160bc:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80160be:	68bb      	ldr	r3, [r7, #8]
 80160c0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80160c2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80160c4:	68bb      	ldr	r3, [r7, #8]
 80160c6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80160c8:	68f9      	ldr	r1, [r7, #12]
 80160ca:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80160cc:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80160ce:	697b      	ldr	r3, [r7, #20]
 80160d0:	3318      	adds	r3, #24
 80160d2:	011b      	lsls	r3, r3, #4
 80160d4:	440b      	add	r3, r1
 80160d6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80160d8:	68fb      	ldr	r3, [r7, #12]
 80160da:	6819      	ldr	r1, [r3, #0]
 80160dc:	68bb      	ldr	r3, [r7, #8]
 80160de:	691a      	ldr	r2, [r3, #16]
 80160e0:	697b      	ldr	r3, [r7, #20]
 80160e2:	3318      	adds	r3, #24
 80160e4:	011b      	lsls	r3, r3, #4
 80160e6:	440b      	add	r3, r1
 80160e8:	3304      	adds	r3, #4
 80160ea:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80160ec:	68bb      	ldr	r3, [r7, #8]
 80160ee:	7d1b      	ldrb	r3, [r3, #20]
 80160f0:	2b01      	cmp	r3, #1
 80160f2:	d111      	bne.n	8016118 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80160f4:	68fb      	ldr	r3, [r7, #12]
 80160f6:	681a      	ldr	r2, [r3, #0]
 80160f8:	697b      	ldr	r3, [r7, #20]
 80160fa:	3318      	adds	r3, #24
 80160fc:	011b      	lsls	r3, r3, #4
 80160fe:	4413      	add	r3, r2
 8016100:	3304      	adds	r3, #4
 8016102:	681b      	ldr	r3, [r3, #0]
 8016104:	68fa      	ldr	r2, [r7, #12]
 8016106:	6811      	ldr	r1, [r2, #0]
 8016108:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801610c:	697b      	ldr	r3, [r7, #20]
 801610e:	3318      	adds	r3, #24
 8016110:	011b      	lsls	r3, r3, #4
 8016112:	440b      	add	r3, r1
 8016114:	3304      	adds	r3, #4
 8016116:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8016118:	687b      	ldr	r3, [r7, #4]
 801611a:	3307      	adds	r3, #7
 801611c:	781b      	ldrb	r3, [r3, #0]
 801611e:	061a      	lsls	r2, r3, #24
 8016120:	687b      	ldr	r3, [r7, #4]
 8016122:	3306      	adds	r3, #6
 8016124:	781b      	ldrb	r3, [r3, #0]
 8016126:	041b      	lsls	r3, r3, #16
 8016128:	431a      	orrs	r2, r3
 801612a:	687b      	ldr	r3, [r7, #4]
 801612c:	3305      	adds	r3, #5
 801612e:	781b      	ldrb	r3, [r3, #0]
 8016130:	021b      	lsls	r3, r3, #8
 8016132:	4313      	orrs	r3, r2
 8016134:	687a      	ldr	r2, [r7, #4]
 8016136:	3204      	adds	r2, #4
 8016138:	7812      	ldrb	r2, [r2, #0]
 801613a:	4610      	mov	r0, r2
 801613c:	68fa      	ldr	r2, [r7, #12]
 801613e:	6811      	ldr	r1, [r2, #0]
 8016140:	ea43 0200 	orr.w	r2, r3, r0
 8016144:	697b      	ldr	r3, [r7, #20]
 8016146:	011b      	lsls	r3, r3, #4
 8016148:	440b      	add	r3, r1
 801614a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 801614e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8016150:	687b      	ldr	r3, [r7, #4]
 8016152:	3303      	adds	r3, #3
 8016154:	781b      	ldrb	r3, [r3, #0]
 8016156:	061a      	lsls	r2, r3, #24
 8016158:	687b      	ldr	r3, [r7, #4]
 801615a:	3302      	adds	r3, #2
 801615c:	781b      	ldrb	r3, [r3, #0]
 801615e:	041b      	lsls	r3, r3, #16
 8016160:	431a      	orrs	r2, r3
 8016162:	687b      	ldr	r3, [r7, #4]
 8016164:	3301      	adds	r3, #1
 8016166:	781b      	ldrb	r3, [r3, #0]
 8016168:	021b      	lsls	r3, r3, #8
 801616a:	4313      	orrs	r3, r2
 801616c:	687a      	ldr	r2, [r7, #4]
 801616e:	7812      	ldrb	r2, [r2, #0]
 8016170:	4610      	mov	r0, r2
 8016172:	68fa      	ldr	r2, [r7, #12]
 8016174:	6811      	ldr	r1, [r2, #0]
 8016176:	ea43 0200 	orr.w	r2, r3, r0
 801617a:	697b      	ldr	r3, [r7, #20]
 801617c:	011b      	lsls	r3, r3, #4
 801617e:	440b      	add	r3, r1
 8016180:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8016184:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8016186:	68fb      	ldr	r3, [r7, #12]
 8016188:	681a      	ldr	r2, [r3, #0]
 801618a:	697b      	ldr	r3, [r7, #20]
 801618c:	3318      	adds	r3, #24
 801618e:	011b      	lsls	r3, r3, #4
 8016190:	4413      	add	r3, r2
 8016192:	681b      	ldr	r3, [r3, #0]
 8016194:	68fa      	ldr	r2, [r7, #12]
 8016196:	6811      	ldr	r1, [r2, #0]
 8016198:	f043 0201 	orr.w	r2, r3, #1
 801619c:	697b      	ldr	r3, [r7, #20]
 801619e:	3318      	adds	r3, #24
 80161a0:	011b      	lsls	r3, r3, #4
 80161a2:	440b      	add	r3, r1
 80161a4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80161a6:	2300      	movs	r3, #0
 80161a8:	e00e      	b.n	80161c8 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80161aa:	68fb      	ldr	r3, [r7, #12]
 80161ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161ae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80161b2:	68fb      	ldr	r3, [r7, #12]
 80161b4:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80161b6:	2301      	movs	r3, #1
 80161b8:	e006      	b.n	80161c8 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80161ba:	68fb      	ldr	r3, [r7, #12]
 80161bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161be:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80161c2:	68fb      	ldr	r3, [r7, #12]
 80161c4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80161c6:	2301      	movs	r3, #1
  }
}
 80161c8:	4618      	mov	r0, r3
 80161ca:	3724      	adds	r7, #36	; 0x24
 80161cc:	46bd      	mov	sp, r7
 80161ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161d2:	4770      	bx	lr

080161d4 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 80161d4:	b480      	push	{r7}
 80161d6:	b085      	sub	sp, #20
 80161d8:	af00      	add	r7, sp, #0
 80161da:	6078      	str	r0, [r7, #4]
 80161dc:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 80161de:	2300      	movs	r3, #0
 80161e0:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80161e2:	687b      	ldr	r3, [r7, #4]
 80161e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80161e8:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 80161ea:	7afb      	ldrb	r3, [r7, #11]
 80161ec:	2b01      	cmp	r3, #1
 80161ee:	d002      	beq.n	80161f6 <HAL_CAN_IsTxMessagePending+0x22>
 80161f0:	7afb      	ldrb	r3, [r7, #11]
 80161f2:	2b02      	cmp	r3, #2
 80161f4:	d10b      	bne.n	801620e <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	681b      	ldr	r3, [r3, #0]
 80161fa:	689a      	ldr	r2, [r3, #8]
 80161fc:	683b      	ldr	r3, [r7, #0]
 80161fe:	069b      	lsls	r3, r3, #26
 8016200:	401a      	ands	r2, r3
 8016202:	683b      	ldr	r3, [r7, #0]
 8016204:	069b      	lsls	r3, r3, #26
 8016206:	429a      	cmp	r2, r3
 8016208:	d001      	beq.n	801620e <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 801620a:	2301      	movs	r3, #1
 801620c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 801620e:	68fb      	ldr	r3, [r7, #12]
}
 8016210:	4618      	mov	r0, r3
 8016212:	3714      	adds	r7, #20
 8016214:	46bd      	mov	sp, r7
 8016216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801621a:	4770      	bx	lr

0801621c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 801621c:	b480      	push	{r7}
 801621e:	b087      	sub	sp, #28
 8016220:	af00      	add	r7, sp, #0
 8016222:	60f8      	str	r0, [r7, #12]
 8016224:	60b9      	str	r1, [r7, #8]
 8016226:	607a      	str	r2, [r7, #4]
 8016228:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 801622a:	68fb      	ldr	r3, [r7, #12]
 801622c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016230:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8016232:	7dfb      	ldrb	r3, [r7, #23]
 8016234:	2b01      	cmp	r3, #1
 8016236:	d003      	beq.n	8016240 <HAL_CAN_GetRxMessage+0x24>
 8016238:	7dfb      	ldrb	r3, [r7, #23]
 801623a:	2b02      	cmp	r3, #2
 801623c:	f040 80f3 	bne.w	8016426 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8016240:	68bb      	ldr	r3, [r7, #8]
 8016242:	2b00      	cmp	r3, #0
 8016244:	d10e      	bne.n	8016264 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8016246:	68fb      	ldr	r3, [r7, #12]
 8016248:	681b      	ldr	r3, [r3, #0]
 801624a:	68db      	ldr	r3, [r3, #12]
 801624c:	f003 0303 	and.w	r3, r3, #3
 8016250:	2b00      	cmp	r3, #0
 8016252:	d116      	bne.n	8016282 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8016254:	68fb      	ldr	r3, [r7, #12]
 8016256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016258:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801625c:	68fb      	ldr	r3, [r7, #12]
 801625e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8016260:	2301      	movs	r3, #1
 8016262:	e0e7      	b.n	8016434 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8016264:	68fb      	ldr	r3, [r7, #12]
 8016266:	681b      	ldr	r3, [r3, #0]
 8016268:	691b      	ldr	r3, [r3, #16]
 801626a:	f003 0303 	and.w	r3, r3, #3
 801626e:	2b00      	cmp	r3, #0
 8016270:	d107      	bne.n	8016282 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8016272:	68fb      	ldr	r3, [r7, #12]
 8016274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016276:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801627a:	68fb      	ldr	r3, [r7, #12]
 801627c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 801627e:	2301      	movs	r3, #1
 8016280:	e0d8      	b.n	8016434 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8016282:	68fb      	ldr	r3, [r7, #12]
 8016284:	681a      	ldr	r2, [r3, #0]
 8016286:	68bb      	ldr	r3, [r7, #8]
 8016288:	331b      	adds	r3, #27
 801628a:	011b      	lsls	r3, r3, #4
 801628c:	4413      	add	r3, r2
 801628e:	681b      	ldr	r3, [r3, #0]
 8016290:	f003 0204 	and.w	r2, r3, #4
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8016298:	687b      	ldr	r3, [r7, #4]
 801629a:	689b      	ldr	r3, [r3, #8]
 801629c:	2b00      	cmp	r3, #0
 801629e:	d10c      	bne.n	80162ba <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80162a0:	68fb      	ldr	r3, [r7, #12]
 80162a2:	681a      	ldr	r2, [r3, #0]
 80162a4:	68bb      	ldr	r3, [r7, #8]
 80162a6:	331b      	adds	r3, #27
 80162a8:	011b      	lsls	r3, r3, #4
 80162aa:	4413      	add	r3, r2
 80162ac:	681b      	ldr	r3, [r3, #0]
 80162ae:	0d5b      	lsrs	r3, r3, #21
 80162b0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	601a      	str	r2, [r3, #0]
 80162b8:	e00b      	b.n	80162d2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80162ba:	68fb      	ldr	r3, [r7, #12]
 80162bc:	681a      	ldr	r2, [r3, #0]
 80162be:	68bb      	ldr	r3, [r7, #8]
 80162c0:	331b      	adds	r3, #27
 80162c2:	011b      	lsls	r3, r3, #4
 80162c4:	4413      	add	r3, r2
 80162c6:	681b      	ldr	r3, [r3, #0]
 80162c8:	08db      	lsrs	r3, r3, #3
 80162ca:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80162ce:	687b      	ldr	r3, [r7, #4]
 80162d0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80162d2:	68fb      	ldr	r3, [r7, #12]
 80162d4:	681a      	ldr	r2, [r3, #0]
 80162d6:	68bb      	ldr	r3, [r7, #8]
 80162d8:	331b      	adds	r3, #27
 80162da:	011b      	lsls	r3, r3, #4
 80162dc:	4413      	add	r3, r2
 80162de:	681b      	ldr	r3, [r3, #0]
 80162e0:	f003 0202 	and.w	r2, r3, #2
 80162e4:	687b      	ldr	r3, [r7, #4]
 80162e6:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80162e8:	68fb      	ldr	r3, [r7, #12]
 80162ea:	681a      	ldr	r2, [r3, #0]
 80162ec:	68bb      	ldr	r3, [r7, #8]
 80162ee:	331b      	adds	r3, #27
 80162f0:	011b      	lsls	r3, r3, #4
 80162f2:	4413      	add	r3, r2
 80162f4:	3304      	adds	r3, #4
 80162f6:	681b      	ldr	r3, [r3, #0]
 80162f8:	f003 020f 	and.w	r2, r3, #15
 80162fc:	687b      	ldr	r3, [r7, #4]
 80162fe:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8016300:	68fb      	ldr	r3, [r7, #12]
 8016302:	681a      	ldr	r2, [r3, #0]
 8016304:	68bb      	ldr	r3, [r7, #8]
 8016306:	331b      	adds	r3, #27
 8016308:	011b      	lsls	r3, r3, #4
 801630a:	4413      	add	r3, r2
 801630c:	3304      	adds	r3, #4
 801630e:	681b      	ldr	r3, [r3, #0]
 8016310:	0a1b      	lsrs	r3, r3, #8
 8016312:	b2da      	uxtb	r2, r3
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8016318:	68fb      	ldr	r3, [r7, #12]
 801631a:	681a      	ldr	r2, [r3, #0]
 801631c:	68bb      	ldr	r3, [r7, #8]
 801631e:	331b      	adds	r3, #27
 8016320:	011b      	lsls	r3, r3, #4
 8016322:	4413      	add	r3, r2
 8016324:	3304      	adds	r3, #4
 8016326:	681b      	ldr	r3, [r3, #0]
 8016328:	0c1b      	lsrs	r3, r3, #16
 801632a:	b29a      	uxth	r2, r3
 801632c:	687b      	ldr	r3, [r7, #4]
 801632e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8016330:	68fb      	ldr	r3, [r7, #12]
 8016332:	681a      	ldr	r2, [r3, #0]
 8016334:	68bb      	ldr	r3, [r7, #8]
 8016336:	011b      	lsls	r3, r3, #4
 8016338:	4413      	add	r3, r2
 801633a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 801633e:	681b      	ldr	r3, [r3, #0]
 8016340:	b2da      	uxtb	r2, r3
 8016342:	683b      	ldr	r3, [r7, #0]
 8016344:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8016346:	68fb      	ldr	r3, [r7, #12]
 8016348:	681a      	ldr	r2, [r3, #0]
 801634a:	68bb      	ldr	r3, [r7, #8]
 801634c:	011b      	lsls	r3, r3, #4
 801634e:	4413      	add	r3, r2
 8016350:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8016354:	681b      	ldr	r3, [r3, #0]
 8016356:	0a1a      	lsrs	r2, r3, #8
 8016358:	683b      	ldr	r3, [r7, #0]
 801635a:	3301      	adds	r3, #1
 801635c:	b2d2      	uxtb	r2, r2
 801635e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8016360:	68fb      	ldr	r3, [r7, #12]
 8016362:	681a      	ldr	r2, [r3, #0]
 8016364:	68bb      	ldr	r3, [r7, #8]
 8016366:	011b      	lsls	r3, r3, #4
 8016368:	4413      	add	r3, r2
 801636a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 801636e:	681b      	ldr	r3, [r3, #0]
 8016370:	0c1a      	lsrs	r2, r3, #16
 8016372:	683b      	ldr	r3, [r7, #0]
 8016374:	3302      	adds	r3, #2
 8016376:	b2d2      	uxtb	r2, r2
 8016378:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 801637a:	68fb      	ldr	r3, [r7, #12]
 801637c:	681a      	ldr	r2, [r3, #0]
 801637e:	68bb      	ldr	r3, [r7, #8]
 8016380:	011b      	lsls	r3, r3, #4
 8016382:	4413      	add	r3, r2
 8016384:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8016388:	681b      	ldr	r3, [r3, #0]
 801638a:	0e1a      	lsrs	r2, r3, #24
 801638c:	683b      	ldr	r3, [r7, #0]
 801638e:	3303      	adds	r3, #3
 8016390:	b2d2      	uxtb	r2, r2
 8016392:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8016394:	68fb      	ldr	r3, [r7, #12]
 8016396:	681a      	ldr	r2, [r3, #0]
 8016398:	68bb      	ldr	r3, [r7, #8]
 801639a:	011b      	lsls	r3, r3, #4
 801639c:	4413      	add	r3, r2
 801639e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80163a2:	681a      	ldr	r2, [r3, #0]
 80163a4:	683b      	ldr	r3, [r7, #0]
 80163a6:	3304      	adds	r3, #4
 80163a8:	b2d2      	uxtb	r2, r2
 80163aa:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80163ac:	68fb      	ldr	r3, [r7, #12]
 80163ae:	681a      	ldr	r2, [r3, #0]
 80163b0:	68bb      	ldr	r3, [r7, #8]
 80163b2:	011b      	lsls	r3, r3, #4
 80163b4:	4413      	add	r3, r2
 80163b6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80163ba:	681b      	ldr	r3, [r3, #0]
 80163bc:	0a1a      	lsrs	r2, r3, #8
 80163be:	683b      	ldr	r3, [r7, #0]
 80163c0:	3305      	adds	r3, #5
 80163c2:	b2d2      	uxtb	r2, r2
 80163c4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80163c6:	68fb      	ldr	r3, [r7, #12]
 80163c8:	681a      	ldr	r2, [r3, #0]
 80163ca:	68bb      	ldr	r3, [r7, #8]
 80163cc:	011b      	lsls	r3, r3, #4
 80163ce:	4413      	add	r3, r2
 80163d0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80163d4:	681b      	ldr	r3, [r3, #0]
 80163d6:	0c1a      	lsrs	r2, r3, #16
 80163d8:	683b      	ldr	r3, [r7, #0]
 80163da:	3306      	adds	r3, #6
 80163dc:	b2d2      	uxtb	r2, r2
 80163de:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80163e0:	68fb      	ldr	r3, [r7, #12]
 80163e2:	681a      	ldr	r2, [r3, #0]
 80163e4:	68bb      	ldr	r3, [r7, #8]
 80163e6:	011b      	lsls	r3, r3, #4
 80163e8:	4413      	add	r3, r2
 80163ea:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80163ee:	681b      	ldr	r3, [r3, #0]
 80163f0:	0e1a      	lsrs	r2, r3, #24
 80163f2:	683b      	ldr	r3, [r7, #0]
 80163f4:	3307      	adds	r3, #7
 80163f6:	b2d2      	uxtb	r2, r2
 80163f8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80163fa:	68bb      	ldr	r3, [r7, #8]
 80163fc:	2b00      	cmp	r3, #0
 80163fe:	d108      	bne.n	8016412 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8016400:	68fb      	ldr	r3, [r7, #12]
 8016402:	681b      	ldr	r3, [r3, #0]
 8016404:	68da      	ldr	r2, [r3, #12]
 8016406:	68fb      	ldr	r3, [r7, #12]
 8016408:	681b      	ldr	r3, [r3, #0]
 801640a:	f042 0220 	orr.w	r2, r2, #32
 801640e:	60da      	str	r2, [r3, #12]
 8016410:	e007      	b.n	8016422 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8016412:	68fb      	ldr	r3, [r7, #12]
 8016414:	681b      	ldr	r3, [r3, #0]
 8016416:	691a      	ldr	r2, [r3, #16]
 8016418:	68fb      	ldr	r3, [r7, #12]
 801641a:	681b      	ldr	r3, [r3, #0]
 801641c:	f042 0220 	orr.w	r2, r2, #32
 8016420:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8016422:	2300      	movs	r3, #0
 8016424:	e006      	b.n	8016434 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8016426:	68fb      	ldr	r3, [r7, #12]
 8016428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801642a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 801642e:	68fb      	ldr	r3, [r7, #12]
 8016430:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8016432:	2301      	movs	r3, #1
  }
}
 8016434:	4618      	mov	r0, r3
 8016436:	371c      	adds	r7, #28
 8016438:	46bd      	mov	sp, r7
 801643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801643e:	4770      	bx	lr

08016440 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8016440:	b480      	push	{r7}
 8016442:	b085      	sub	sp, #20
 8016444:	af00      	add	r7, sp, #0
 8016446:	6078      	str	r0, [r7, #4]
 8016448:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 801644a:	687b      	ldr	r3, [r7, #4]
 801644c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016450:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8016452:	7bfb      	ldrb	r3, [r7, #15]
 8016454:	2b01      	cmp	r3, #1
 8016456:	d002      	beq.n	801645e <HAL_CAN_ActivateNotification+0x1e>
 8016458:	7bfb      	ldrb	r3, [r7, #15]
 801645a:	2b02      	cmp	r3, #2
 801645c:	d109      	bne.n	8016472 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 801645e:	687b      	ldr	r3, [r7, #4]
 8016460:	681b      	ldr	r3, [r3, #0]
 8016462:	6959      	ldr	r1, [r3, #20]
 8016464:	687b      	ldr	r3, [r7, #4]
 8016466:	681b      	ldr	r3, [r3, #0]
 8016468:	683a      	ldr	r2, [r7, #0]
 801646a:	430a      	orrs	r2, r1
 801646c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 801646e:	2300      	movs	r3, #0
 8016470:	e006      	b.n	8016480 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8016472:	687b      	ldr	r3, [r7, #4]
 8016474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016476:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 801647e:	2301      	movs	r3, #1
  }
}
 8016480:	4618      	mov	r0, r3
 8016482:	3714      	adds	r7, #20
 8016484:	46bd      	mov	sp, r7
 8016486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801648a:	4770      	bx	lr

0801648c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 801648c:	b580      	push	{r7, lr}
 801648e:	b08a      	sub	sp, #40	; 0x28
 8016490:	af00      	add	r7, sp, #0
 8016492:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8016494:	2300      	movs	r3, #0
 8016496:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8016498:	687b      	ldr	r3, [r7, #4]
 801649a:	681b      	ldr	r3, [r3, #0]
 801649c:	695b      	ldr	r3, [r3, #20]
 801649e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80164a0:	687b      	ldr	r3, [r7, #4]
 80164a2:	681b      	ldr	r3, [r3, #0]
 80164a4:	685b      	ldr	r3, [r3, #4]
 80164a6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	681b      	ldr	r3, [r3, #0]
 80164ac:	689b      	ldr	r3, [r3, #8]
 80164ae:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80164b0:	687b      	ldr	r3, [r7, #4]
 80164b2:	681b      	ldr	r3, [r3, #0]
 80164b4:	68db      	ldr	r3, [r3, #12]
 80164b6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	681b      	ldr	r3, [r3, #0]
 80164bc:	691b      	ldr	r3, [r3, #16]
 80164be:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80164c0:	687b      	ldr	r3, [r7, #4]
 80164c2:	681b      	ldr	r3, [r3, #0]
 80164c4:	699b      	ldr	r3, [r3, #24]
 80164c6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80164c8:	6a3b      	ldr	r3, [r7, #32]
 80164ca:	f003 0301 	and.w	r3, r3, #1
 80164ce:	2b00      	cmp	r3, #0
 80164d0:	f000 8083 	beq.w	80165da <HAL_CAN_IRQHandler+0x14e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80164d4:	69bb      	ldr	r3, [r7, #24]
 80164d6:	f003 0301 	and.w	r3, r3, #1
 80164da:	2b00      	cmp	r3, #0
 80164dc:	d025      	beq.n	801652a <HAL_CAN_IRQHandler+0x9e>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80164de:	687b      	ldr	r3, [r7, #4]
 80164e0:	681b      	ldr	r3, [r3, #0]
 80164e2:	2201      	movs	r2, #1
 80164e4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80164e6:	69bb      	ldr	r3, [r7, #24]
 80164e8:	f003 0302 	and.w	r3, r3, #2
 80164ec:	2b00      	cmp	r3, #0
 80164ee:	d004      	beq.n	80164fa <HAL_CAN_IRQHandler+0x6e>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 80164f0:	687b      	ldr	r3, [r7, #4]
 80164f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80164f4:	6878      	ldr	r0, [r7, #4]
 80164f6:	4798      	blx	r3
 80164f8:	e017      	b.n	801652a <HAL_CAN_IRQHandler+0x9e>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80164fa:	69bb      	ldr	r3, [r7, #24]
 80164fc:	f003 0304 	and.w	r3, r3, #4
 8016500:	2b00      	cmp	r3, #0
 8016502:	d004      	beq.n	801650e <HAL_CAN_IRQHandler+0x82>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8016504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016506:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801650a:	627b      	str	r3, [r7, #36]	; 0x24
 801650c:	e00d      	b.n	801652a <HAL_CAN_IRQHandler+0x9e>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 801650e:	69bb      	ldr	r3, [r7, #24]
 8016510:	f003 0308 	and.w	r3, r3, #8
 8016514:	2b00      	cmp	r3, #0
 8016516:	d004      	beq.n	8016522 <HAL_CAN_IRQHandler+0x96>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8016518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801651a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801651e:	627b      	str	r3, [r7, #36]	; 0x24
 8016520:	e003      	b.n	801652a <HAL_CAN_IRQHandler+0x9e>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 8016522:	687b      	ldr	r3, [r7, #4]
 8016524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016526:	6878      	ldr	r0, [r7, #4]
 8016528:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 801652a:	69bb      	ldr	r3, [r7, #24]
 801652c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016530:	2b00      	cmp	r3, #0
 8016532:	d026      	beq.n	8016582 <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8016534:	687b      	ldr	r3, [r7, #4]
 8016536:	681b      	ldr	r3, [r3, #0]
 8016538:	f44f 7280 	mov.w	r2, #256	; 0x100
 801653c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 801653e:	69bb      	ldr	r3, [r7, #24]
 8016540:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8016544:	2b00      	cmp	r3, #0
 8016546:	d004      	beq.n	8016552 <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801654c:	6878      	ldr	r0, [r7, #4]
 801654e:	4798      	blx	r3
 8016550:	e017      	b.n	8016582 <HAL_CAN_IRQHandler+0xf6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8016552:	69bb      	ldr	r3, [r7, #24]
 8016554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8016558:	2b00      	cmp	r3, #0
 801655a:	d004      	beq.n	8016566 <HAL_CAN_IRQHandler+0xda>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 801655c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801655e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016562:	627b      	str	r3, [r7, #36]	; 0x24
 8016564:	e00d      	b.n	8016582 <HAL_CAN_IRQHandler+0xf6>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8016566:	69bb      	ldr	r3, [r7, #24]
 8016568:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801656c:	2b00      	cmp	r3, #0
 801656e:	d004      	beq.n	801657a <HAL_CAN_IRQHandler+0xee>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8016570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016572:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8016576:	627b      	str	r3, [r7, #36]	; 0x24
 8016578:	e003      	b.n	8016582 <HAL_CAN_IRQHandler+0xf6>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801657e:	6878      	ldr	r0, [r7, #4]
 8016580:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8016582:	69bb      	ldr	r3, [r7, #24]
 8016584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8016588:	2b00      	cmp	r3, #0
 801658a:	d026      	beq.n	80165da <HAL_CAN_IRQHandler+0x14e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 801658c:	687b      	ldr	r3, [r7, #4]
 801658e:	681b      	ldr	r3, [r3, #0]
 8016590:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8016594:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8016596:	69bb      	ldr	r3, [r7, #24]
 8016598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801659c:	2b00      	cmp	r3, #0
 801659e:	d004      	beq.n	80165aa <HAL_CAN_IRQHandler+0x11e>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80165a4:	6878      	ldr	r0, [r7, #4]
 80165a6:	4798      	blx	r3
 80165a8:	e017      	b.n	80165da <HAL_CAN_IRQHandler+0x14e>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80165aa:	69bb      	ldr	r3, [r7, #24]
 80165ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80165b0:	2b00      	cmp	r3, #0
 80165b2:	d004      	beq.n	80165be <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80165b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80165ba:	627b      	str	r3, [r7, #36]	; 0x24
 80165bc:	e00d      	b.n	80165da <HAL_CAN_IRQHandler+0x14e>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80165be:	69bb      	ldr	r3, [r7, #24]
 80165c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80165c4:	2b00      	cmp	r3, #0
 80165c6:	d004      	beq.n	80165d2 <HAL_CAN_IRQHandler+0x146>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80165c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80165ce:	627b      	str	r3, [r7, #36]	; 0x24
 80165d0:	e003      	b.n	80165da <HAL_CAN_IRQHandler+0x14e>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80165d6:	6878      	ldr	r0, [r7, #4]
 80165d8:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80165da:	6a3b      	ldr	r3, [r7, #32]
 80165dc:	f003 0308 	and.w	r3, r3, #8
 80165e0:	2b00      	cmp	r3, #0
 80165e2:	d00c      	beq.n	80165fe <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80165e4:	697b      	ldr	r3, [r7, #20]
 80165e6:	f003 0310 	and.w	r3, r3, #16
 80165ea:	2b00      	cmp	r3, #0
 80165ec:	d007      	beq.n	80165fe <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80165ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80165f4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80165f6:	687b      	ldr	r3, [r7, #4]
 80165f8:	681b      	ldr	r3, [r3, #0]
 80165fa:	2210      	movs	r2, #16
 80165fc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80165fe:	6a3b      	ldr	r3, [r7, #32]
 8016600:	f003 0304 	and.w	r3, r3, #4
 8016604:	2b00      	cmp	r3, #0
 8016606:	d00c      	beq.n	8016622 <HAL_CAN_IRQHandler+0x196>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8016608:	697b      	ldr	r3, [r7, #20]
 801660a:	f003 0308 	and.w	r3, r3, #8
 801660e:	2b00      	cmp	r3, #0
 8016610:	d007      	beq.n	8016622 <HAL_CAN_IRQHandler+0x196>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8016612:	687b      	ldr	r3, [r7, #4]
 8016614:	681b      	ldr	r3, [r3, #0]
 8016616:	2208      	movs	r2, #8
 8016618:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 801661a:	687b      	ldr	r3, [r7, #4]
 801661c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801661e:	6878      	ldr	r0, [r7, #4]
 8016620:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8016622:	6a3b      	ldr	r3, [r7, #32]
 8016624:	f003 0302 	and.w	r3, r3, #2
 8016628:	2b00      	cmp	r3, #0
 801662a:	d00a      	beq.n	8016642 <HAL_CAN_IRQHandler+0x1b6>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	681b      	ldr	r3, [r3, #0]
 8016630:	68db      	ldr	r3, [r3, #12]
 8016632:	f003 0303 	and.w	r3, r3, #3
 8016636:	2b00      	cmp	r3, #0
 8016638:	d003      	beq.n	8016642 <HAL_CAN_IRQHandler+0x1b6>
    {
      /* Receive FIFO 0 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801663e:	6878      	ldr	r0, [r7, #4]
 8016640:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8016642:	6a3b      	ldr	r3, [r7, #32]
 8016644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016648:	2b00      	cmp	r3, #0
 801664a:	d00c      	beq.n	8016666 <HAL_CAN_IRQHandler+0x1da>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 801664c:	693b      	ldr	r3, [r7, #16]
 801664e:	f003 0310 	and.w	r3, r3, #16
 8016652:	2b00      	cmp	r3, #0
 8016654:	d007      	beq.n	8016666 <HAL_CAN_IRQHandler+0x1da>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8016656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016658:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801665c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 801665e:	687b      	ldr	r3, [r7, #4]
 8016660:	681b      	ldr	r3, [r3, #0]
 8016662:	2210      	movs	r2, #16
 8016664:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8016666:	6a3b      	ldr	r3, [r7, #32]
 8016668:	f003 0320 	and.w	r3, r3, #32
 801666c:	2b00      	cmp	r3, #0
 801666e:	d00c      	beq.n	801668a <HAL_CAN_IRQHandler+0x1fe>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8016670:	693b      	ldr	r3, [r7, #16]
 8016672:	f003 0308 	and.w	r3, r3, #8
 8016676:	2b00      	cmp	r3, #0
 8016678:	d007      	beq.n	801668a <HAL_CAN_IRQHandler+0x1fe>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 801667a:	687b      	ldr	r3, [r7, #4]
 801667c:	681b      	ldr	r3, [r3, #0]
 801667e:	2208      	movs	r2, #8
 8016680:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 8016682:	687b      	ldr	r3, [r7, #4]
 8016684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016686:	6878      	ldr	r0, [r7, #4]
 8016688:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 801668a:	6a3b      	ldr	r3, [r7, #32]
 801668c:	f003 0310 	and.w	r3, r3, #16
 8016690:	2b00      	cmp	r3, #0
 8016692:	d00a      	beq.n	80166aa <HAL_CAN_IRQHandler+0x21e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8016694:	687b      	ldr	r3, [r7, #4]
 8016696:	681b      	ldr	r3, [r3, #0]
 8016698:	691b      	ldr	r3, [r3, #16]
 801669a:	f003 0303 	and.w	r3, r3, #3
 801669e:	2b00      	cmp	r3, #0
 80166a0:	d003      	beq.n	80166aa <HAL_CAN_IRQHandler+0x21e>
    {
      /* Receive FIFO 1 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80166a6:	6878      	ldr	r0, [r7, #4]
 80166a8:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80166aa:	6a3b      	ldr	r3, [r7, #32]
 80166ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80166b0:	2b00      	cmp	r3, #0
 80166b2:	d00c      	beq.n	80166ce <HAL_CAN_IRQHandler+0x242>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80166b4:	69fb      	ldr	r3, [r7, #28]
 80166b6:	f003 0310 	and.w	r3, r3, #16
 80166ba:	2b00      	cmp	r3, #0
 80166bc:	d007      	beq.n	80166ce <HAL_CAN_IRQHandler+0x242>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80166be:	687b      	ldr	r3, [r7, #4]
 80166c0:	681b      	ldr	r3, [r3, #0]
 80166c2:	2210      	movs	r2, #16
 80166c4:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 80166c6:	687b      	ldr	r3, [r7, #4]
 80166c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80166ca:	6878      	ldr	r0, [r7, #4]
 80166cc:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80166ce:	6a3b      	ldr	r3, [r7, #32]
 80166d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80166d4:	2b00      	cmp	r3, #0
 80166d6:	d00c      	beq.n	80166f2 <HAL_CAN_IRQHandler+0x266>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80166d8:	69fb      	ldr	r3, [r7, #28]
 80166da:	f003 0308 	and.w	r3, r3, #8
 80166de:	2b00      	cmp	r3, #0
 80166e0:	d007      	beq.n	80166f2 <HAL_CAN_IRQHandler+0x266>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80166e2:	687b      	ldr	r3, [r7, #4]
 80166e4:	681b      	ldr	r3, [r3, #0]
 80166e6:	2208      	movs	r2, #8
 80166e8:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80166ee:	6878      	ldr	r0, [r7, #4]
 80166f0:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80166f2:	6a3b      	ldr	r3, [r7, #32]
 80166f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80166f8:	2b00      	cmp	r3, #0
 80166fa:	d07b      	beq.n	80167f4 <HAL_CAN_IRQHandler+0x368>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80166fc:	69fb      	ldr	r3, [r7, #28]
 80166fe:	f003 0304 	and.w	r3, r3, #4
 8016702:	2b00      	cmp	r3, #0
 8016704:	d072      	beq.n	80167ec <HAL_CAN_IRQHandler+0x360>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8016706:	6a3b      	ldr	r3, [r7, #32]
 8016708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801670c:	2b00      	cmp	r3, #0
 801670e:	d008      	beq.n	8016722 <HAL_CAN_IRQHandler+0x296>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8016710:	68fb      	ldr	r3, [r7, #12]
 8016712:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8016716:	2b00      	cmp	r3, #0
 8016718:	d003      	beq.n	8016722 <HAL_CAN_IRQHandler+0x296>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 801671a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801671c:	f043 0301 	orr.w	r3, r3, #1
 8016720:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8016722:	6a3b      	ldr	r3, [r7, #32]
 8016724:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8016728:	2b00      	cmp	r3, #0
 801672a:	d008      	beq.n	801673e <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 801672c:	68fb      	ldr	r3, [r7, #12]
 801672e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8016732:	2b00      	cmp	r3, #0
 8016734:	d003      	beq.n	801673e <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8016736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016738:	f043 0302 	orr.w	r3, r3, #2
 801673c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 801673e:	6a3b      	ldr	r3, [r7, #32]
 8016740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8016744:	2b00      	cmp	r3, #0
 8016746:	d008      	beq.n	801675a <HAL_CAN_IRQHandler+0x2ce>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8016748:	68fb      	ldr	r3, [r7, #12]
 801674a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 801674e:	2b00      	cmp	r3, #0
 8016750:	d003      	beq.n	801675a <HAL_CAN_IRQHandler+0x2ce>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8016752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016754:	f043 0304 	orr.w	r3, r3, #4
 8016758:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 801675a:	6a3b      	ldr	r3, [r7, #32]
 801675c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016760:	2b00      	cmp	r3, #0
 8016762:	d043      	beq.n	80167ec <HAL_CAN_IRQHandler+0x360>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8016764:	68fb      	ldr	r3, [r7, #12]
 8016766:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 801676a:	2b00      	cmp	r3, #0
 801676c:	d03e      	beq.n	80167ec <HAL_CAN_IRQHandler+0x360>
      {
        switch (esrflags & CAN_ESR_LEC)
 801676e:	68fb      	ldr	r3, [r7, #12]
 8016770:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8016774:	2b60      	cmp	r3, #96	; 0x60
 8016776:	d02b      	beq.n	80167d0 <HAL_CAN_IRQHandler+0x344>
 8016778:	2b60      	cmp	r3, #96	; 0x60
 801677a:	d82e      	bhi.n	80167da <HAL_CAN_IRQHandler+0x34e>
 801677c:	2b50      	cmp	r3, #80	; 0x50
 801677e:	d022      	beq.n	80167c6 <HAL_CAN_IRQHandler+0x33a>
 8016780:	2b50      	cmp	r3, #80	; 0x50
 8016782:	d82a      	bhi.n	80167da <HAL_CAN_IRQHandler+0x34e>
 8016784:	2b40      	cmp	r3, #64	; 0x40
 8016786:	d019      	beq.n	80167bc <HAL_CAN_IRQHandler+0x330>
 8016788:	2b40      	cmp	r3, #64	; 0x40
 801678a:	d826      	bhi.n	80167da <HAL_CAN_IRQHandler+0x34e>
 801678c:	2b30      	cmp	r3, #48	; 0x30
 801678e:	d010      	beq.n	80167b2 <HAL_CAN_IRQHandler+0x326>
 8016790:	2b30      	cmp	r3, #48	; 0x30
 8016792:	d822      	bhi.n	80167da <HAL_CAN_IRQHandler+0x34e>
 8016794:	2b10      	cmp	r3, #16
 8016796:	d002      	beq.n	801679e <HAL_CAN_IRQHandler+0x312>
 8016798:	2b20      	cmp	r3, #32
 801679a:	d005      	beq.n	80167a8 <HAL_CAN_IRQHandler+0x31c>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 801679c:	e01d      	b.n	80167da <HAL_CAN_IRQHandler+0x34e>
            errorcode |= HAL_CAN_ERROR_STF;
 801679e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167a0:	f043 0308 	orr.w	r3, r3, #8
 80167a4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80167a6:	e019      	b.n	80167dc <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_FOR;
 80167a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167aa:	f043 0310 	orr.w	r3, r3, #16
 80167ae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80167b0:	e014      	b.n	80167dc <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_ACK;
 80167b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167b4:	f043 0320 	orr.w	r3, r3, #32
 80167b8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80167ba:	e00f      	b.n	80167dc <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BR;
 80167bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80167c2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80167c4:	e00a      	b.n	80167dc <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BD;
 80167c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80167cc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80167ce:	e005      	b.n	80167dc <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_CRC;
 80167d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80167d6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80167d8:	e000      	b.n	80167dc <HAL_CAN_IRQHandler+0x350>
            break;
 80167da:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80167dc:	687b      	ldr	r3, [r7, #4]
 80167de:	681b      	ldr	r3, [r3, #0]
 80167e0:	699a      	ldr	r2, [r3, #24]
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	681b      	ldr	r3, [r3, #0]
 80167e6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80167ea:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80167ec:	687b      	ldr	r3, [r7, #4]
 80167ee:	681b      	ldr	r3, [r3, #0]
 80167f0:	2204      	movs	r2, #4
 80167f2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80167f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167f6:	2b00      	cmp	r3, #0
 80167f8:	d009      	beq.n	801680e <HAL_CAN_IRQHandler+0x382>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80167fa:	687b      	ldr	r3, [r7, #4]
 80167fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80167fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016800:	431a      	orrs	r2, r3
 8016802:	687b      	ldr	r3, [r7, #4]
 8016804:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 8016806:	687b      	ldr	r3, [r7, #4]
 8016808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801680a:	6878      	ldr	r0, [r7, #4]
 801680c:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 801680e:	bf00      	nop
 8016810:	3728      	adds	r7, #40	; 0x28
 8016812:	46bd      	mov	sp, r7
 8016814:	bd80      	pop	{r7, pc}

08016816 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8016816:	b480      	push	{r7}
 8016818:	b083      	sub	sp, #12
 801681a:	af00      	add	r7, sp, #0
 801681c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 801681e:	bf00      	nop
 8016820:	370c      	adds	r7, #12
 8016822:	46bd      	mov	sp, r7
 8016824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016828:	4770      	bx	lr

0801682a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 801682a:	b480      	push	{r7}
 801682c:	b083      	sub	sp, #12
 801682e:	af00      	add	r7, sp, #0
 8016830:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8016832:	bf00      	nop
 8016834:	370c      	adds	r7, #12
 8016836:	46bd      	mov	sp, r7
 8016838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801683c:	4770      	bx	lr

0801683e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 801683e:	b480      	push	{r7}
 8016840:	b083      	sub	sp, #12
 8016842:	af00      	add	r7, sp, #0
 8016844:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8016846:	bf00      	nop
 8016848:	370c      	adds	r7, #12
 801684a:	46bd      	mov	sp, r7
 801684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016850:	4770      	bx	lr

08016852 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8016852:	b480      	push	{r7}
 8016854:	b083      	sub	sp, #12
 8016856:	af00      	add	r7, sp, #0
 8016858:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 801685a:	bf00      	nop
 801685c:	370c      	adds	r7, #12
 801685e:	46bd      	mov	sp, r7
 8016860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016864:	4770      	bx	lr

08016866 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8016866:	b480      	push	{r7}
 8016868:	b083      	sub	sp, #12
 801686a:	af00      	add	r7, sp, #0
 801686c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 801686e:	bf00      	nop
 8016870:	370c      	adds	r7, #12
 8016872:	46bd      	mov	sp, r7
 8016874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016878:	4770      	bx	lr

0801687a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 801687a:	b480      	push	{r7}
 801687c:	b083      	sub	sp, #12
 801687e:	af00      	add	r7, sp, #0
 8016880:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8016882:	bf00      	nop
 8016884:	370c      	adds	r7, #12
 8016886:	46bd      	mov	sp, r7
 8016888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801688c:	4770      	bx	lr

0801688e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 801688e:	b480      	push	{r7}
 8016890:	b083      	sub	sp, #12
 8016892:	af00      	add	r7, sp, #0
 8016894:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8016896:	bf00      	nop
 8016898:	370c      	adds	r7, #12
 801689a:	46bd      	mov	sp, r7
 801689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168a0:	4770      	bx	lr

080168a2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80168a2:	b480      	push	{r7}
 80168a4:	b083      	sub	sp, #12
 80168a6:	af00      	add	r7, sp, #0
 80168a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80168aa:	bf00      	nop
 80168ac:	370c      	adds	r7, #12
 80168ae:	46bd      	mov	sp, r7
 80168b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168b4:	4770      	bx	lr

080168b6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80168b6:	b480      	push	{r7}
 80168b8:	b083      	sub	sp, #12
 80168ba:	af00      	add	r7, sp, #0
 80168bc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80168be:	bf00      	nop
 80168c0:	370c      	adds	r7, #12
 80168c2:	46bd      	mov	sp, r7
 80168c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168c8:	4770      	bx	lr

080168ca <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80168ca:	b480      	push	{r7}
 80168cc:	b083      	sub	sp, #12
 80168ce:	af00      	add	r7, sp, #0
 80168d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80168d2:	bf00      	nop
 80168d4:	370c      	adds	r7, #12
 80168d6:	46bd      	mov	sp, r7
 80168d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168dc:	4770      	bx	lr

080168de <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80168de:	b480      	push	{r7}
 80168e0:	b083      	sub	sp, #12
 80168e2:	af00      	add	r7, sp, #0
 80168e4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80168e6:	bf00      	nop
 80168e8:	370c      	adds	r7, #12
 80168ea:	46bd      	mov	sp, r7
 80168ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168f0:	4770      	bx	lr
	...

080168f4 <__NVIC_SetPriorityGrouping>:
{
 80168f4:	b480      	push	{r7}
 80168f6:	b085      	sub	sp, #20
 80168f8:	af00      	add	r7, sp, #0
 80168fa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	f003 0307 	and.w	r3, r3, #7
 8016902:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8016904:	4b0b      	ldr	r3, [pc, #44]	; (8016934 <__NVIC_SetPriorityGrouping+0x40>)
 8016906:	68db      	ldr	r3, [r3, #12]
 8016908:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801690a:	68ba      	ldr	r2, [r7, #8]
 801690c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8016910:	4013      	ands	r3, r2
 8016912:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8016914:	68fb      	ldr	r3, [r7, #12]
 8016916:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8016918:	68bb      	ldr	r3, [r7, #8]
 801691a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 801691c:	4b06      	ldr	r3, [pc, #24]	; (8016938 <__NVIC_SetPriorityGrouping+0x44>)
 801691e:	4313      	orrs	r3, r2
 8016920:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8016922:	4a04      	ldr	r2, [pc, #16]	; (8016934 <__NVIC_SetPriorityGrouping+0x40>)
 8016924:	68bb      	ldr	r3, [r7, #8]
 8016926:	60d3      	str	r3, [r2, #12]
}
 8016928:	bf00      	nop
 801692a:	3714      	adds	r7, #20
 801692c:	46bd      	mov	sp, r7
 801692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016932:	4770      	bx	lr
 8016934:	e000ed00 	.word	0xe000ed00
 8016938:	05fa0000 	.word	0x05fa0000

0801693c <__NVIC_GetPriorityGrouping>:
{
 801693c:	b480      	push	{r7}
 801693e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8016940:	4b04      	ldr	r3, [pc, #16]	; (8016954 <__NVIC_GetPriorityGrouping+0x18>)
 8016942:	68db      	ldr	r3, [r3, #12]
 8016944:	0a1b      	lsrs	r3, r3, #8
 8016946:	f003 0307 	and.w	r3, r3, #7
}
 801694a:	4618      	mov	r0, r3
 801694c:	46bd      	mov	sp, r7
 801694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016952:	4770      	bx	lr
 8016954:	e000ed00 	.word	0xe000ed00

08016958 <__NVIC_EnableIRQ>:
{
 8016958:	b480      	push	{r7}
 801695a:	b083      	sub	sp, #12
 801695c:	af00      	add	r7, sp, #0
 801695e:	4603      	mov	r3, r0
 8016960:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016966:	2b00      	cmp	r3, #0
 8016968:	db0b      	blt.n	8016982 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801696a:	79fb      	ldrb	r3, [r7, #7]
 801696c:	f003 021f 	and.w	r2, r3, #31
 8016970:	4907      	ldr	r1, [pc, #28]	; (8016990 <__NVIC_EnableIRQ+0x38>)
 8016972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016976:	095b      	lsrs	r3, r3, #5
 8016978:	2001      	movs	r0, #1
 801697a:	fa00 f202 	lsl.w	r2, r0, r2
 801697e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8016982:	bf00      	nop
 8016984:	370c      	adds	r7, #12
 8016986:	46bd      	mov	sp, r7
 8016988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801698c:	4770      	bx	lr
 801698e:	bf00      	nop
 8016990:	e000e100 	.word	0xe000e100

08016994 <__NVIC_SetPriority>:
{
 8016994:	b480      	push	{r7}
 8016996:	b083      	sub	sp, #12
 8016998:	af00      	add	r7, sp, #0
 801699a:	4603      	mov	r3, r0
 801699c:	6039      	str	r1, [r7, #0]
 801699e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80169a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80169a4:	2b00      	cmp	r3, #0
 80169a6:	db0a      	blt.n	80169be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80169a8:	683b      	ldr	r3, [r7, #0]
 80169aa:	b2da      	uxtb	r2, r3
 80169ac:	490c      	ldr	r1, [pc, #48]	; (80169e0 <__NVIC_SetPriority+0x4c>)
 80169ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80169b2:	0112      	lsls	r2, r2, #4
 80169b4:	b2d2      	uxtb	r2, r2
 80169b6:	440b      	add	r3, r1
 80169b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80169bc:	e00a      	b.n	80169d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80169be:	683b      	ldr	r3, [r7, #0]
 80169c0:	b2da      	uxtb	r2, r3
 80169c2:	4908      	ldr	r1, [pc, #32]	; (80169e4 <__NVIC_SetPriority+0x50>)
 80169c4:	79fb      	ldrb	r3, [r7, #7]
 80169c6:	f003 030f 	and.w	r3, r3, #15
 80169ca:	3b04      	subs	r3, #4
 80169cc:	0112      	lsls	r2, r2, #4
 80169ce:	b2d2      	uxtb	r2, r2
 80169d0:	440b      	add	r3, r1
 80169d2:	761a      	strb	r2, [r3, #24]
}
 80169d4:	bf00      	nop
 80169d6:	370c      	adds	r7, #12
 80169d8:	46bd      	mov	sp, r7
 80169da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169de:	4770      	bx	lr
 80169e0:	e000e100 	.word	0xe000e100
 80169e4:	e000ed00 	.word	0xe000ed00

080169e8 <NVIC_EncodePriority>:
{
 80169e8:	b480      	push	{r7}
 80169ea:	b089      	sub	sp, #36	; 0x24
 80169ec:	af00      	add	r7, sp, #0
 80169ee:	60f8      	str	r0, [r7, #12]
 80169f0:	60b9      	str	r1, [r7, #8]
 80169f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80169f4:	68fb      	ldr	r3, [r7, #12]
 80169f6:	f003 0307 	and.w	r3, r3, #7
 80169fa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80169fc:	69fb      	ldr	r3, [r7, #28]
 80169fe:	f1c3 0307 	rsb	r3, r3, #7
 8016a02:	2b04      	cmp	r3, #4
 8016a04:	bf28      	it	cs
 8016a06:	2304      	movcs	r3, #4
 8016a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8016a0a:	69fb      	ldr	r3, [r7, #28]
 8016a0c:	3304      	adds	r3, #4
 8016a0e:	2b06      	cmp	r3, #6
 8016a10:	d902      	bls.n	8016a18 <NVIC_EncodePriority+0x30>
 8016a12:	69fb      	ldr	r3, [r7, #28]
 8016a14:	3b03      	subs	r3, #3
 8016a16:	e000      	b.n	8016a1a <NVIC_EncodePriority+0x32>
 8016a18:	2300      	movs	r3, #0
 8016a1a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8016a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8016a20:	69bb      	ldr	r3, [r7, #24]
 8016a22:	fa02 f303 	lsl.w	r3, r2, r3
 8016a26:	43da      	mvns	r2, r3
 8016a28:	68bb      	ldr	r3, [r7, #8]
 8016a2a:	401a      	ands	r2, r3
 8016a2c:	697b      	ldr	r3, [r7, #20]
 8016a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8016a30:	f04f 31ff 	mov.w	r1, #4294967295
 8016a34:	697b      	ldr	r3, [r7, #20]
 8016a36:	fa01 f303 	lsl.w	r3, r1, r3
 8016a3a:	43d9      	mvns	r1, r3
 8016a3c:	687b      	ldr	r3, [r7, #4]
 8016a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8016a40:	4313      	orrs	r3, r2
}
 8016a42:	4618      	mov	r0, r3
 8016a44:	3724      	adds	r7, #36	; 0x24
 8016a46:	46bd      	mov	sp, r7
 8016a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a4c:	4770      	bx	lr
	...

08016a50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8016a50:	b580      	push	{r7, lr}
 8016a52:	b082      	sub	sp, #8
 8016a54:	af00      	add	r7, sp, #0
 8016a56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	3b01      	subs	r3, #1
 8016a5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8016a60:	d301      	bcc.n	8016a66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8016a62:	2301      	movs	r3, #1
 8016a64:	e00f      	b.n	8016a86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8016a66:	4a0a      	ldr	r2, [pc, #40]	; (8016a90 <SysTick_Config+0x40>)
 8016a68:	687b      	ldr	r3, [r7, #4]
 8016a6a:	3b01      	subs	r3, #1
 8016a6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8016a6e:	210f      	movs	r1, #15
 8016a70:	f04f 30ff 	mov.w	r0, #4294967295
 8016a74:	f7ff ff8e 	bl	8016994 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8016a78:	4b05      	ldr	r3, [pc, #20]	; (8016a90 <SysTick_Config+0x40>)
 8016a7a:	2200      	movs	r2, #0
 8016a7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8016a7e:	4b04      	ldr	r3, [pc, #16]	; (8016a90 <SysTick_Config+0x40>)
 8016a80:	2207      	movs	r2, #7
 8016a82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8016a84:	2300      	movs	r3, #0
}
 8016a86:	4618      	mov	r0, r3
 8016a88:	3708      	adds	r7, #8
 8016a8a:	46bd      	mov	sp, r7
 8016a8c:	bd80      	pop	{r7, pc}
 8016a8e:	bf00      	nop
 8016a90:	e000e010 	.word	0xe000e010

08016a94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8016a94:	b580      	push	{r7, lr}
 8016a96:	b082      	sub	sp, #8
 8016a98:	af00      	add	r7, sp, #0
 8016a9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8016a9c:	6878      	ldr	r0, [r7, #4]
 8016a9e:	f7ff ff29 	bl	80168f4 <__NVIC_SetPriorityGrouping>
}
 8016aa2:	bf00      	nop
 8016aa4:	3708      	adds	r7, #8
 8016aa6:	46bd      	mov	sp, r7
 8016aa8:	bd80      	pop	{r7, pc}

08016aaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8016aaa:	b580      	push	{r7, lr}
 8016aac:	b086      	sub	sp, #24
 8016aae:	af00      	add	r7, sp, #0
 8016ab0:	4603      	mov	r3, r0
 8016ab2:	60b9      	str	r1, [r7, #8]
 8016ab4:	607a      	str	r2, [r7, #4]
 8016ab6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8016ab8:	2300      	movs	r3, #0
 8016aba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8016abc:	f7ff ff3e 	bl	801693c <__NVIC_GetPriorityGrouping>
 8016ac0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8016ac2:	687a      	ldr	r2, [r7, #4]
 8016ac4:	68b9      	ldr	r1, [r7, #8]
 8016ac6:	6978      	ldr	r0, [r7, #20]
 8016ac8:	f7ff ff8e 	bl	80169e8 <NVIC_EncodePriority>
 8016acc:	4602      	mov	r2, r0
 8016ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016ad2:	4611      	mov	r1, r2
 8016ad4:	4618      	mov	r0, r3
 8016ad6:	f7ff ff5d 	bl	8016994 <__NVIC_SetPriority>
}
 8016ada:	bf00      	nop
 8016adc:	3718      	adds	r7, #24
 8016ade:	46bd      	mov	sp, r7
 8016ae0:	bd80      	pop	{r7, pc}

08016ae2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8016ae2:	b580      	push	{r7, lr}
 8016ae4:	b082      	sub	sp, #8
 8016ae6:	af00      	add	r7, sp, #0
 8016ae8:	4603      	mov	r3, r0
 8016aea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8016aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016af0:	4618      	mov	r0, r3
 8016af2:	f7ff ff31 	bl	8016958 <__NVIC_EnableIRQ>
}
 8016af6:	bf00      	nop
 8016af8:	3708      	adds	r7, #8
 8016afa:	46bd      	mov	sp, r7
 8016afc:	bd80      	pop	{r7, pc}

08016afe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8016afe:	b580      	push	{r7, lr}
 8016b00:	b082      	sub	sp, #8
 8016b02:	af00      	add	r7, sp, #0
 8016b04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8016b06:	6878      	ldr	r0, [r7, #4]
 8016b08:	f7ff ffa2 	bl	8016a50 <SysTick_Config>
 8016b0c:	4603      	mov	r3, r0
}
 8016b0e:	4618      	mov	r0, r3
 8016b10:	3708      	adds	r7, #8
 8016b12:	46bd      	mov	sp, r7
 8016b14:	bd80      	pop	{r7, pc}
	...

08016b18 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8016b18:	b480      	push	{r7}
 8016b1a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8016b1c:	f3bf 8f5f 	dmb	sy
}
 8016b20:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8016b22:	4b07      	ldr	r3, [pc, #28]	; (8016b40 <HAL_MPU_Disable+0x28>)
 8016b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b26:	4a06      	ldr	r2, [pc, #24]	; (8016b40 <HAL_MPU_Disable+0x28>)
 8016b28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8016b2c:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8016b2e:	4b05      	ldr	r3, [pc, #20]	; (8016b44 <HAL_MPU_Disable+0x2c>)
 8016b30:	2200      	movs	r2, #0
 8016b32:	605a      	str	r2, [r3, #4]
}
 8016b34:	bf00      	nop
 8016b36:	46bd      	mov	sp, r7
 8016b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b3c:	4770      	bx	lr
 8016b3e:	bf00      	nop
 8016b40:	e000ed00 	.word	0xe000ed00
 8016b44:	e000ed90 	.word	0xe000ed90

08016b48 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8016b48:	b480      	push	{r7}
 8016b4a:	b083      	sub	sp, #12
 8016b4c:	af00      	add	r7, sp, #0
 8016b4e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8016b50:	4a0b      	ldr	r2, [pc, #44]	; (8016b80 <HAL_MPU_Enable+0x38>)
 8016b52:	687b      	ldr	r3, [r7, #4]
 8016b54:	f043 0301 	orr.w	r3, r3, #1
 8016b58:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8016b5a:	4b0a      	ldr	r3, [pc, #40]	; (8016b84 <HAL_MPU_Enable+0x3c>)
 8016b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b5e:	4a09      	ldr	r2, [pc, #36]	; (8016b84 <HAL_MPU_Enable+0x3c>)
 8016b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8016b64:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8016b66:	f3bf 8f4f 	dsb	sy
}
 8016b6a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8016b6c:	f3bf 8f6f 	isb	sy
}
 8016b70:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8016b72:	bf00      	nop
 8016b74:	370c      	adds	r7, #12
 8016b76:	46bd      	mov	sp, r7
 8016b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b7c:	4770      	bx	lr
 8016b7e:	bf00      	nop
 8016b80:	e000ed90 	.word	0xe000ed90
 8016b84:	e000ed00 	.word	0xe000ed00

08016b88 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8016b88:	b480      	push	{r7}
 8016b8a:	b083      	sub	sp, #12
 8016b8c:	af00      	add	r7, sp, #0
 8016b8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8016b90:	687b      	ldr	r3, [r7, #4]
 8016b92:	785a      	ldrb	r2, [r3, #1]
 8016b94:	4b1d      	ldr	r3, [pc, #116]	; (8016c0c <HAL_MPU_ConfigRegion+0x84>)
 8016b96:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8016b98:	687b      	ldr	r3, [r7, #4]
 8016b9a:	781b      	ldrb	r3, [r3, #0]
 8016b9c:	2b00      	cmp	r3, #0
 8016b9e:	d029      	beq.n	8016bf4 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8016ba0:	4a1a      	ldr	r2, [pc, #104]	; (8016c0c <HAL_MPU_ConfigRegion+0x84>)
 8016ba2:	687b      	ldr	r3, [r7, #4]
 8016ba4:	685b      	ldr	r3, [r3, #4]
 8016ba6:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8016ba8:	687b      	ldr	r3, [r7, #4]
 8016baa:	7b1b      	ldrb	r3, [r3, #12]
 8016bac:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8016bae:	687b      	ldr	r3, [r7, #4]
 8016bb0:	7adb      	ldrb	r3, [r3, #11]
 8016bb2:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8016bb4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8016bb6:	687b      	ldr	r3, [r7, #4]
 8016bb8:	7a9b      	ldrb	r3, [r3, #10]
 8016bba:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8016bbc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8016bbe:	687b      	ldr	r3, [r7, #4]
 8016bc0:	7b5b      	ldrb	r3, [r3, #13]
 8016bc2:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8016bc4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8016bc6:	687b      	ldr	r3, [r7, #4]
 8016bc8:	7b9b      	ldrb	r3, [r3, #14]
 8016bca:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8016bcc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8016bce:	687b      	ldr	r3, [r7, #4]
 8016bd0:	7bdb      	ldrb	r3, [r3, #15]
 8016bd2:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8016bd4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8016bd6:	687b      	ldr	r3, [r7, #4]
 8016bd8:	7a5b      	ldrb	r3, [r3, #9]
 8016bda:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8016bdc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8016bde:	687b      	ldr	r3, [r7, #4]
 8016be0:	7a1b      	ldrb	r3, [r3, #8]
 8016be2:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8016be4:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8016be6:	687a      	ldr	r2, [r7, #4]
 8016be8:	7812      	ldrb	r2, [r2, #0]
 8016bea:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8016bec:	4a07      	ldr	r2, [pc, #28]	; (8016c0c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8016bee:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8016bf0:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8016bf2:	e005      	b.n	8016c00 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8016bf4:	4b05      	ldr	r3, [pc, #20]	; (8016c0c <HAL_MPU_ConfigRegion+0x84>)
 8016bf6:	2200      	movs	r2, #0
 8016bf8:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8016bfa:	4b04      	ldr	r3, [pc, #16]	; (8016c0c <HAL_MPU_ConfigRegion+0x84>)
 8016bfc:	2200      	movs	r2, #0
 8016bfe:	611a      	str	r2, [r3, #16]
}
 8016c00:	bf00      	nop
 8016c02:	370c      	adds	r7, #12
 8016c04:	46bd      	mov	sp, r7
 8016c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c0a:	4770      	bx	lr
 8016c0c:	e000ed90 	.word	0xe000ed90

08016c10 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8016c10:	b580      	push	{r7, lr}
 8016c12:	b084      	sub	sp, #16
 8016c14:	af00      	add	r7, sp, #0
 8016c16:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8016c18:	687b      	ldr	r3, [r7, #4]
 8016c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016c1c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8016c1e:	f7fe ff63 	bl	8015ae8 <HAL_GetTick>
 8016c22:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016c2a:	b2db      	uxtb	r3, r3
 8016c2c:	2b02      	cmp	r3, #2
 8016c2e:	d008      	beq.n	8016c42 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8016c30:	687b      	ldr	r3, [r7, #4]
 8016c32:	2280      	movs	r2, #128	; 0x80
 8016c34:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8016c36:	687b      	ldr	r3, [r7, #4]
 8016c38:	2200      	movs	r2, #0
 8016c3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8016c3e:	2301      	movs	r3, #1
 8016c40:	e052      	b.n	8016ce8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8016c42:	687b      	ldr	r3, [r7, #4]
 8016c44:	681b      	ldr	r3, [r3, #0]
 8016c46:	681a      	ldr	r2, [r3, #0]
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	681b      	ldr	r3, [r3, #0]
 8016c4c:	f022 0216 	bic.w	r2, r2, #22
 8016c50:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8016c52:	687b      	ldr	r3, [r7, #4]
 8016c54:	681b      	ldr	r3, [r3, #0]
 8016c56:	695a      	ldr	r2, [r3, #20]
 8016c58:	687b      	ldr	r3, [r7, #4]
 8016c5a:	681b      	ldr	r3, [r3, #0]
 8016c5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016c60:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8016c62:	687b      	ldr	r3, [r7, #4]
 8016c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016c66:	2b00      	cmp	r3, #0
 8016c68:	d103      	bne.n	8016c72 <HAL_DMA_Abort+0x62>
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016c6e:	2b00      	cmp	r3, #0
 8016c70:	d007      	beq.n	8016c82 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8016c72:	687b      	ldr	r3, [r7, #4]
 8016c74:	681b      	ldr	r3, [r3, #0]
 8016c76:	681a      	ldr	r2, [r3, #0]
 8016c78:	687b      	ldr	r3, [r7, #4]
 8016c7a:	681b      	ldr	r3, [r3, #0]
 8016c7c:	f022 0208 	bic.w	r2, r2, #8
 8016c80:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8016c82:	687b      	ldr	r3, [r7, #4]
 8016c84:	681b      	ldr	r3, [r3, #0]
 8016c86:	681a      	ldr	r2, [r3, #0]
 8016c88:	687b      	ldr	r3, [r7, #4]
 8016c8a:	681b      	ldr	r3, [r3, #0]
 8016c8c:	f022 0201 	bic.w	r2, r2, #1
 8016c90:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8016c92:	e013      	b.n	8016cbc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8016c94:	f7fe ff28 	bl	8015ae8 <HAL_GetTick>
 8016c98:	4602      	mov	r2, r0
 8016c9a:	68bb      	ldr	r3, [r7, #8]
 8016c9c:	1ad3      	subs	r3, r2, r3
 8016c9e:	2b05      	cmp	r3, #5
 8016ca0:	d90c      	bls.n	8016cbc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8016ca2:	687b      	ldr	r3, [r7, #4]
 8016ca4:	2220      	movs	r2, #32
 8016ca6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8016ca8:	687b      	ldr	r3, [r7, #4]
 8016caa:	2203      	movs	r2, #3
 8016cac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	2200      	movs	r2, #0
 8016cb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8016cb8:	2303      	movs	r3, #3
 8016cba:	e015      	b.n	8016ce8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8016cbc:	687b      	ldr	r3, [r7, #4]
 8016cbe:	681b      	ldr	r3, [r3, #0]
 8016cc0:	681b      	ldr	r3, [r3, #0]
 8016cc2:	f003 0301 	and.w	r3, r3, #1
 8016cc6:	2b00      	cmp	r3, #0
 8016cc8:	d1e4      	bne.n	8016c94 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8016cca:	687b      	ldr	r3, [r7, #4]
 8016ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016cce:	223f      	movs	r2, #63	; 0x3f
 8016cd0:	409a      	lsls	r2, r3
 8016cd2:	68fb      	ldr	r3, [r7, #12]
 8016cd4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8016cd6:	687b      	ldr	r3, [r7, #4]
 8016cd8:	2201      	movs	r2, #1
 8016cda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8016cde:	687b      	ldr	r3, [r7, #4]
 8016ce0:	2200      	movs	r2, #0
 8016ce2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8016ce6:	2300      	movs	r3, #0
}
 8016ce8:	4618      	mov	r0, r3
 8016cea:	3710      	adds	r7, #16
 8016cec:	46bd      	mov	sp, r7
 8016cee:	bd80      	pop	{r7, pc}

08016cf0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8016cf0:	b480      	push	{r7}
 8016cf2:	b083      	sub	sp, #12
 8016cf4:	af00      	add	r7, sp, #0
 8016cf6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8016cf8:	687b      	ldr	r3, [r7, #4]
 8016cfa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016cfe:	b2db      	uxtb	r3, r3
 8016d00:	2b02      	cmp	r3, #2
 8016d02:	d004      	beq.n	8016d0e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	2280      	movs	r2, #128	; 0x80
 8016d08:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8016d0a:	2301      	movs	r3, #1
 8016d0c:	e00c      	b.n	8016d28 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	2205      	movs	r2, #5
 8016d12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8016d16:	687b      	ldr	r3, [r7, #4]
 8016d18:	681b      	ldr	r3, [r3, #0]
 8016d1a:	681a      	ldr	r2, [r3, #0]
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	681b      	ldr	r3, [r3, #0]
 8016d20:	f022 0201 	bic.w	r2, r2, #1
 8016d24:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8016d26:	2300      	movs	r3, #0
}
 8016d28:	4618      	mov	r0, r3
 8016d2a:	370c      	adds	r7, #12
 8016d2c:	46bd      	mov	sp, r7
 8016d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d32:	4770      	bx	lr

08016d34 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8016d34:	b580      	push	{r7, lr}
 8016d36:	b084      	sub	sp, #16
 8016d38:	af00      	add	r7, sp, #0
 8016d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8016d3c:	687b      	ldr	r3, [r7, #4]
 8016d3e:	2b00      	cmp	r3, #0
 8016d40:	d101      	bne.n	8016d46 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8016d42:	2301      	movs	r3, #1
 8016d44:	e06a      	b.n	8016e1c <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8016d46:	687b      	ldr	r3, [r7, #4]
 8016d48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016d4c:	2b00      	cmp	r3, #0
 8016d4e:	d106      	bne.n	8016d5e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8016d50:	687b      	ldr	r3, [r7, #4]
 8016d52:	2223      	movs	r2, #35	; 0x23
 8016d54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8016d58:	6878      	ldr	r0, [r7, #4]
 8016d5a:	f006 fbaf 	bl	801d4bc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8016d5e:	4b31      	ldr	r3, [pc, #196]	; (8016e24 <HAL_ETH_Init+0xf0>)
 8016d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016d62:	4a30      	ldr	r2, [pc, #192]	; (8016e24 <HAL_ETH_Init+0xf0>)
 8016d64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8016d68:	6453      	str	r3, [r2, #68]	; 0x44
 8016d6a:	4b2e      	ldr	r3, [pc, #184]	; (8016e24 <HAL_ETH_Init+0xf0>)
 8016d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016d6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8016d72:	60bb      	str	r3, [r7, #8]
 8016d74:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8016d76:	4b2c      	ldr	r3, [pc, #176]	; (8016e28 <HAL_ETH_Init+0xf4>)
 8016d78:	685b      	ldr	r3, [r3, #4]
 8016d7a:	4a2b      	ldr	r2, [pc, #172]	; (8016e28 <HAL_ETH_Init+0xf4>)
 8016d7c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8016d80:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8016d82:	4b29      	ldr	r3, [pc, #164]	; (8016e28 <HAL_ETH_Init+0xf4>)
 8016d84:	685a      	ldr	r2, [r3, #4]
 8016d86:	687b      	ldr	r3, [r7, #4]
 8016d88:	689b      	ldr	r3, [r3, #8]
 8016d8a:	4927      	ldr	r1, [pc, #156]	; (8016e28 <HAL_ETH_Init+0xf4>)
 8016d8c:	4313      	orrs	r3, r2
 8016d8e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8016d90:	4b25      	ldr	r3, [pc, #148]	; (8016e28 <HAL_ETH_Init+0xf4>)
 8016d92:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	681b      	ldr	r3, [r3, #0]
 8016d98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016d9c:	681b      	ldr	r3, [r3, #0]
 8016d9e:	687a      	ldr	r2, [r7, #4]
 8016da0:	6812      	ldr	r2, [r2, #0]
 8016da2:	f043 0301 	orr.w	r3, r3, #1
 8016da6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8016daa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8016dac:	f7fe fe9c 	bl	8015ae8 <HAL_GetTick>
 8016db0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8016db2:	e011      	b.n	8016dd8 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8016db4:	f7fe fe98 	bl	8015ae8 <HAL_GetTick>
 8016db8:	4602      	mov	r2, r0
 8016dba:	68fb      	ldr	r3, [r7, #12]
 8016dbc:	1ad3      	subs	r3, r2, r3
 8016dbe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8016dc2:	d909      	bls.n	8016dd8 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8016dc4:	687b      	ldr	r3, [r7, #4]
 8016dc6:	2204      	movs	r2, #4
 8016dc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	22e0      	movs	r2, #224	; 0xe0
 8016dd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8016dd4:	2301      	movs	r3, #1
 8016dd6:	e021      	b.n	8016e1c <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8016dd8:	687b      	ldr	r3, [r7, #4]
 8016dda:	681b      	ldr	r3, [r3, #0]
 8016ddc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016de0:	681b      	ldr	r3, [r3, #0]
 8016de2:	f003 0301 	and.w	r3, r3, #1
 8016de6:	2b00      	cmp	r3, #0
 8016de8:	d1e4      	bne.n	8016db4 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8016dea:	6878      	ldr	r0, [r7, #4]
 8016dec:	f000 fee4 	bl	8017bb8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8016df0:	6878      	ldr	r0, [r7, #4]
 8016df2:	f000 ff8b 	bl	8017d0c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8016df6:	6878      	ldr	r0, [r7, #4]
 8016df8:	f000 ffe1 	bl	8017dbe <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8016dfc:	687b      	ldr	r3, [r7, #4]
 8016dfe:	685b      	ldr	r3, [r3, #4]
 8016e00:	461a      	mov	r2, r3
 8016e02:	2100      	movs	r1, #0
 8016e04:	6878      	ldr	r0, [r7, #4]
 8016e06:	f000 ff49 	bl	8017c9c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8016e0a:	687b      	ldr	r3, [r7, #4]
 8016e0c:	2200      	movs	r2, #0
 8016e0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8016e12:	687b      	ldr	r3, [r7, #4]
 8016e14:	2210      	movs	r2, #16
 8016e16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8016e1a:	2300      	movs	r3, #0
}
 8016e1c:	4618      	mov	r0, r3
 8016e1e:	3710      	adds	r7, #16
 8016e20:	46bd      	mov	sp, r7
 8016e22:	bd80      	pop	{r7, pc}
 8016e24:	40023800 	.word	0x40023800
 8016e28:	40013800 	.word	0x40013800

08016e2c <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8016e2c:	b580      	push	{r7, lr}
 8016e2e:	b084      	sub	sp, #16
 8016e30:	af00      	add	r7, sp, #0
 8016e32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8016e34:	687b      	ldr	r3, [r7, #4]
 8016e36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016e3a:	2b10      	cmp	r3, #16
 8016e3c:	d150      	bne.n	8016ee0 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8016e3e:	687b      	ldr	r3, [r7, #4]
 8016e40:	2223      	movs	r2, #35	; 0x23
 8016e42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8016e46:	687b      	ldr	r3, [r7, #4]
 8016e48:	2204      	movs	r2, #4
 8016e4a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8016e4c:	6878      	ldr	r0, [r7, #4]
 8016e4e:	f000 f9fd 	bl	801724c <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8016e52:	687b      	ldr	r3, [r7, #4]
 8016e54:	681b      	ldr	r3, [r3, #0]
 8016e56:	681a      	ldr	r2, [r3, #0]
 8016e58:	687b      	ldr	r3, [r7, #4]
 8016e5a:	681b      	ldr	r3, [r3, #0]
 8016e5c:	f042 0208 	orr.w	r2, r2, #8
 8016e60:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8016e62:	687b      	ldr	r3, [r7, #4]
 8016e64:	681b      	ldr	r3, [r3, #0]
 8016e66:	681b      	ldr	r3, [r3, #0]
 8016e68:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8016e6a:	2001      	movs	r0, #1
 8016e6c:	f7fe fe48 	bl	8015b00 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8016e70:	687b      	ldr	r3, [r7, #4]
 8016e72:	681b      	ldr	r3, [r3, #0]
 8016e74:	68fa      	ldr	r2, [r7, #12]
 8016e76:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8016e78:	687b      	ldr	r3, [r7, #4]
 8016e7a:	681b      	ldr	r3, [r3, #0]
 8016e7c:	681a      	ldr	r2, [r3, #0]
 8016e7e:	687b      	ldr	r3, [r7, #4]
 8016e80:	681b      	ldr	r3, [r3, #0]
 8016e82:	f042 0204 	orr.w	r2, r2, #4
 8016e86:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8016e88:	687b      	ldr	r3, [r7, #4]
 8016e8a:	681b      	ldr	r3, [r3, #0]
 8016e8c:	681b      	ldr	r3, [r3, #0]
 8016e8e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8016e90:	2001      	movs	r0, #1
 8016e92:	f7fe fe35 	bl	8015b00 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8016e96:	687b      	ldr	r3, [r7, #4]
 8016e98:	681b      	ldr	r3, [r3, #0]
 8016e9a:	68fa      	ldr	r2, [r7, #12]
 8016e9c:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8016e9e:	6878      	ldr	r0, [r7, #4]
 8016ea0:	f000 fd2a 	bl	80178f8 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8016ea4:	687b      	ldr	r3, [r7, #4]
 8016ea6:	681b      	ldr	r3, [r3, #0]
 8016ea8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016eac:	699b      	ldr	r3, [r3, #24]
 8016eae:	687a      	ldr	r2, [r7, #4]
 8016eb0:	6812      	ldr	r2, [r2, #0]
 8016eb2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016eb6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8016eba:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8016ebc:	687b      	ldr	r3, [r7, #4]
 8016ebe:	681b      	ldr	r3, [r3, #0]
 8016ec0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016ec4:	699b      	ldr	r3, [r3, #24]
 8016ec6:	687a      	ldr	r2, [r7, #4]
 8016ec8:	6812      	ldr	r2, [r2, #0]
 8016eca:	f043 0302 	orr.w	r3, r3, #2
 8016ece:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8016ed2:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8016ed4:	687b      	ldr	r3, [r7, #4]
 8016ed6:	2223      	movs	r2, #35	; 0x23
 8016ed8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8016edc:	2300      	movs	r3, #0
 8016ede:	e000      	b.n	8016ee2 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8016ee0:	2301      	movs	r3, #1
  }
}
 8016ee2:	4618      	mov	r0, r3
 8016ee4:	3710      	adds	r7, #16
 8016ee6:	46bd      	mov	sp, r7
 8016ee8:	bd80      	pop	{r7, pc}

08016eea <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8016eea:	b580      	push	{r7, lr}
 8016eec:	b084      	sub	sp, #16
 8016eee:	af00      	add	r7, sp, #0
 8016ef0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8016ef2:	687b      	ldr	r3, [r7, #4]
 8016ef4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016ef8:	2b23      	cmp	r3, #35	; 0x23
 8016efa:	d14a      	bne.n	8016f92 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8016efc:	687b      	ldr	r3, [r7, #4]
 8016efe:	2223      	movs	r2, #35	; 0x23
 8016f00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8016f04:	687b      	ldr	r3, [r7, #4]
 8016f06:	681b      	ldr	r3, [r3, #0]
 8016f08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016f0c:	699b      	ldr	r3, [r3, #24]
 8016f0e:	687a      	ldr	r2, [r7, #4]
 8016f10:	6812      	ldr	r2, [r2, #0]
 8016f12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8016f16:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8016f1a:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8016f1c:	687b      	ldr	r3, [r7, #4]
 8016f1e:	681b      	ldr	r3, [r3, #0]
 8016f20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016f24:	699b      	ldr	r3, [r3, #24]
 8016f26:	687a      	ldr	r2, [r7, #4]
 8016f28:	6812      	ldr	r2, [r2, #0]
 8016f2a:	f023 0302 	bic.w	r3, r3, #2
 8016f2e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8016f32:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8016f34:	687b      	ldr	r3, [r7, #4]
 8016f36:	681b      	ldr	r3, [r3, #0]
 8016f38:	681a      	ldr	r2, [r3, #0]
 8016f3a:	687b      	ldr	r3, [r7, #4]
 8016f3c:	681b      	ldr	r3, [r3, #0]
 8016f3e:	f022 0204 	bic.w	r2, r2, #4
 8016f42:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8016f44:	687b      	ldr	r3, [r7, #4]
 8016f46:	681b      	ldr	r3, [r3, #0]
 8016f48:	681b      	ldr	r3, [r3, #0]
 8016f4a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8016f4c:	2001      	movs	r0, #1
 8016f4e:	f7fe fdd7 	bl	8015b00 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8016f52:	687b      	ldr	r3, [r7, #4]
 8016f54:	681b      	ldr	r3, [r3, #0]
 8016f56:	68fa      	ldr	r2, [r7, #12]
 8016f58:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8016f5a:	6878      	ldr	r0, [r7, #4]
 8016f5c:	f000 fccc 	bl	80178f8 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8016f60:	687b      	ldr	r3, [r7, #4]
 8016f62:	681b      	ldr	r3, [r3, #0]
 8016f64:	681a      	ldr	r2, [r3, #0]
 8016f66:	687b      	ldr	r3, [r7, #4]
 8016f68:	681b      	ldr	r3, [r3, #0]
 8016f6a:	f022 0208 	bic.w	r2, r2, #8
 8016f6e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8016f70:	687b      	ldr	r3, [r7, #4]
 8016f72:	681b      	ldr	r3, [r3, #0]
 8016f74:	681b      	ldr	r3, [r3, #0]
 8016f76:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8016f78:	2001      	movs	r0, #1
 8016f7a:	f7fe fdc1 	bl	8015b00 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8016f7e:	687b      	ldr	r3, [r7, #4]
 8016f80:	681b      	ldr	r3, [r3, #0]
 8016f82:	68fa      	ldr	r2, [r7, #12]
 8016f84:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8016f86:	687b      	ldr	r3, [r7, #4]
 8016f88:	2210      	movs	r2, #16
 8016f8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8016f8e:	2300      	movs	r3, #0
 8016f90:	e000      	b.n	8016f94 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8016f92:	2301      	movs	r3, #1
  }
}
 8016f94:	4618      	mov	r0, r3
 8016f96:	3710      	adds	r7, #16
 8016f98:	46bd      	mov	sp, r7
 8016f9a:	bd80      	pop	{r7, pc}

08016f9c <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8016f9c:	b580      	push	{r7, lr}
 8016f9e:	b086      	sub	sp, #24
 8016fa0:	af00      	add	r7, sp, #0
 8016fa2:	60f8      	str	r0, [r7, #12]
 8016fa4:	60b9      	str	r1, [r7, #8]
 8016fa6:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8016fa8:	68bb      	ldr	r3, [r7, #8]
 8016faa:	2b00      	cmp	r3, #0
 8016fac:	d109      	bne.n	8016fc2 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8016fae:	68fb      	ldr	r3, [r7, #12]
 8016fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016fb4:	f043 0201 	orr.w	r2, r3, #1
 8016fb8:	68fb      	ldr	r3, [r7, #12]
 8016fba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8016fbe:	2301      	movs	r3, #1
 8016fc0:	e07c      	b.n	80170bc <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8016fc2:	68fb      	ldr	r3, [r7, #12]
 8016fc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016fc8:	2b23      	cmp	r3, #35	; 0x23
 8016fca:	d176      	bne.n	80170ba <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8016fcc:	2200      	movs	r2, #0
 8016fce:	68b9      	ldr	r1, [r7, #8]
 8016fd0:	68f8      	ldr	r0, [r7, #12]
 8016fd2:	f000 ff61 	bl	8017e98 <ETH_Prepare_Tx_Descriptors>
 8016fd6:	4603      	mov	r3, r0
 8016fd8:	2b00      	cmp	r3, #0
 8016fda:	d009      	beq.n	8016ff0 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8016fdc:	68fb      	ldr	r3, [r7, #12]
 8016fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016fe2:	f043 0202 	orr.w	r2, r3, #2
 8016fe6:	68fb      	ldr	r3, [r7, #12]
 8016fe8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8016fec:	2301      	movs	r3, #1
 8016fee:	e065      	b.n	80170bc <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 8016ff0:	f3bf 8f4f 	dsb	sy
}
 8016ff4:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8016ff6:	68fb      	ldr	r3, [r7, #12]
 8016ff8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016ffa:	68fb      	ldr	r3, [r7, #12]
 8016ffc:	3206      	adds	r2, #6
 8016ffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017002:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8017004:	68fb      	ldr	r3, [r7, #12]
 8017006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017008:	1c5a      	adds	r2, r3, #1
 801700a:	68fb      	ldr	r3, [r7, #12]
 801700c:	629a      	str	r2, [r3, #40]	; 0x28
 801700e:	68fb      	ldr	r3, [r7, #12]
 8017010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017012:	2b03      	cmp	r3, #3
 8017014:	d904      	bls.n	8017020 <HAL_ETH_Transmit+0x84>
 8017016:	68fb      	ldr	r3, [r7, #12]
 8017018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801701a:	1f1a      	subs	r2, r3, #4
 801701c:	68fb      	ldr	r3, [r7, #12]
 801701e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8017020:	68fb      	ldr	r3, [r7, #12]
 8017022:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8017024:	68fb      	ldr	r3, [r7, #12]
 8017026:	681a      	ldr	r2, [r3, #0]
 8017028:	68fb      	ldr	r3, [r7, #12]
 801702a:	3106      	adds	r1, #6
 801702c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017030:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8017034:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8017036:	f7fe fd57 	bl	8015ae8 <HAL_GetTick>
 801703a:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 801703c:	e037      	b.n	80170ae <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 801703e:	68fb      	ldr	r3, [r7, #12]
 8017040:	681b      	ldr	r3, [r3, #0]
 8017042:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017046:	695b      	ldr	r3, [r3, #20]
 8017048:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801704c:	2b00      	cmp	r3, #0
 801704e:	d011      	beq.n	8017074 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8017050:	68fb      	ldr	r3, [r7, #12]
 8017052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017056:	f043 0208 	orr.w	r2, r3, #8
 801705a:	68fb      	ldr	r3, [r7, #12]
 801705c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8017060:	68fb      	ldr	r3, [r7, #12]
 8017062:	681b      	ldr	r3, [r3, #0]
 8017064:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017068:	695a      	ldr	r2, [r3, #20]
 801706a:	68fb      	ldr	r3, [r7, #12]
 801706c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8017070:	2301      	movs	r3, #1
 8017072:	e023      	b.n	80170bc <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8017074:	687b      	ldr	r3, [r7, #4]
 8017076:	f1b3 3fff 	cmp.w	r3, #4294967295
 801707a:	d018      	beq.n	80170ae <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 801707c:	f7fe fd34 	bl	8015ae8 <HAL_GetTick>
 8017080:	4602      	mov	r2, r0
 8017082:	693b      	ldr	r3, [r7, #16]
 8017084:	1ad3      	subs	r3, r2, r3
 8017086:	687a      	ldr	r2, [r7, #4]
 8017088:	429a      	cmp	r2, r3
 801708a:	d302      	bcc.n	8017092 <HAL_ETH_Transmit+0xf6>
 801708c:	687b      	ldr	r3, [r7, #4]
 801708e:	2b00      	cmp	r3, #0
 8017090:	d10d      	bne.n	80170ae <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8017092:	68fb      	ldr	r3, [r7, #12]
 8017094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017098:	f043 0204 	orr.w	r2, r3, #4
 801709c:	68fb      	ldr	r3, [r7, #12]
 801709e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80170a2:	697b      	ldr	r3, [r7, #20]
 80170a4:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80170a8:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80170aa:	2301      	movs	r3, #1
 80170ac:	e006      	b.n	80170bc <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80170ae:	697b      	ldr	r3, [r7, #20]
 80170b0:	681b      	ldr	r3, [r3, #0]
 80170b2:	2b00      	cmp	r3, #0
 80170b4:	dbc3      	blt.n	801703e <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80170b6:	2300      	movs	r3, #0
 80170b8:	e000      	b.n	80170bc <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 80170ba:	2301      	movs	r3, #1
  }
}
 80170bc:	4618      	mov	r0, r3
 80170be:	3718      	adds	r7, #24
 80170c0:	46bd      	mov	sp, r7
 80170c2:	bd80      	pop	{r7, pc}

080170c4 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80170c4:	b580      	push	{r7, lr}
 80170c6:	b088      	sub	sp, #32
 80170c8:	af00      	add	r7, sp, #0
 80170ca:	6078      	str	r0, [r7, #4]
 80170cc:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80170ce:	2300      	movs	r3, #0
 80170d0:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80170d2:	2300      	movs	r3, #0
 80170d4:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 80170d6:	683b      	ldr	r3, [r7, #0]
 80170d8:	2b00      	cmp	r3, #0
 80170da:	d109      	bne.n	80170f0 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80170dc:	687b      	ldr	r3, [r7, #4]
 80170de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80170e2:	f043 0201 	orr.w	r2, r3, #1
 80170e6:	687b      	ldr	r3, [r7, #4]
 80170e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80170ec:	2301      	movs	r3, #1
 80170ee:	e0a8      	b.n	8017242 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80170f0:	687b      	ldr	r3, [r7, #4]
 80170f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80170f6:	2b23      	cmp	r3, #35	; 0x23
 80170f8:	d001      	beq.n	80170fe <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80170fa:	2301      	movs	r3, #1
 80170fc:	e0a1      	b.n	8017242 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80170fe:	687b      	ldr	r3, [r7, #4]
 8017100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017102:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8017104:	687b      	ldr	r3, [r7, #4]
 8017106:	69fa      	ldr	r2, [r7, #28]
 8017108:	3212      	adds	r2, #18
 801710a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801710e:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8017110:	687b      	ldr	r3, [r7, #4]
 8017112:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017114:	f1c3 0304 	rsb	r3, r3, #4
 8017118:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 801711a:	e06a      	b.n	80171f2 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 801711c:	69bb      	ldr	r3, [r7, #24]
 801711e:	681b      	ldr	r3, [r3, #0]
 8017120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017124:	2b00      	cmp	r3, #0
 8017126:	d007      	beq.n	8017138 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8017128:	69bb      	ldr	r3, [r7, #24]
 801712a:	699a      	ldr	r2, [r3, #24]
 801712c:	687b      	ldr	r3, [r7, #4]
 801712e:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8017130:	69bb      	ldr	r3, [r7, #24]
 8017132:	69da      	ldr	r2, [r3, #28]
 8017134:	687b      	ldr	r3, [r7, #4]
 8017136:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8017138:	69bb      	ldr	r3, [r7, #24]
 801713a:	681b      	ldr	r3, [r3, #0]
 801713c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8017140:	2b00      	cmp	r3, #0
 8017142:	d103      	bne.n	801714c <HAL_ETH_ReadData+0x88>
 8017144:	687b      	ldr	r3, [r7, #4]
 8017146:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017148:	2b00      	cmp	r3, #0
 801714a:	d040      	beq.n	80171ce <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 801714c:	69bb      	ldr	r3, [r7, #24]
 801714e:	681b      	ldr	r3, [r3, #0]
 8017150:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8017154:	2b00      	cmp	r3, #0
 8017156:	d005      	beq.n	8017164 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8017158:	687b      	ldr	r3, [r7, #4]
 801715a:	2200      	movs	r2, #0
 801715c:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 801715e:	687b      	ldr	r3, [r7, #4]
 8017160:	2200      	movs	r2, #0
 8017162:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8017164:	687b      	ldr	r3, [r7, #4]
 8017166:	695b      	ldr	r3, [r3, #20]
 8017168:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 801716a:	69bb      	ldr	r3, [r7, #24]
 801716c:	681b      	ldr	r3, [r3, #0]
 801716e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017172:	2b00      	cmp	r3, #0
 8017174:	d00c      	beq.n	8017190 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8017176:	69bb      	ldr	r3, [r7, #24]
 8017178:	681b      	ldr	r3, [r3, #0]
 801717a:	0c1b      	lsrs	r3, r3, #16
 801717c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8017180:	3b04      	subs	r3, #4
 8017182:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8017184:	69bb      	ldr	r3, [r7, #24]
 8017186:	681a      	ldr	r2, [r3, #0]
 8017188:	687b      	ldr	r3, [r7, #4]
 801718a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 801718c:	2301      	movs	r3, #1
 801718e:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8017190:	69bb      	ldr	r3, [r7, #24]
 8017192:	689a      	ldr	r2, [r3, #8]
 8017194:	69bb      	ldr	r3, [r7, #24]
 8017196:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8017198:	687b      	ldr	r3, [r7, #4]
 801719a:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 801719e:	687b      	ldr	r3, [r7, #4]
 80171a0:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80171a4:	69bb      	ldr	r3, [r7, #24]
 80171a6:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80171a8:	461a      	mov	r2, r3
 80171aa:	693b      	ldr	r3, [r7, #16]
 80171ac:	b29b      	uxth	r3, r3
 80171ae:	f006 fb4f 	bl	801d850 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80171b2:	687b      	ldr	r3, [r7, #4]
 80171b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80171b6:	1c5a      	adds	r2, r3, #1
 80171b8:	687b      	ldr	r3, [r7, #4]
 80171ba:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80171bc:	687b      	ldr	r3, [r7, #4]
 80171be:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80171c0:	693b      	ldr	r3, [r7, #16]
 80171c2:	441a      	add	r2, r3
 80171c4:	687b      	ldr	r3, [r7, #4]
 80171c6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80171c8:	69bb      	ldr	r3, [r7, #24]
 80171ca:	2200      	movs	r2, #0
 80171cc:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80171ce:	69fb      	ldr	r3, [r7, #28]
 80171d0:	3301      	adds	r3, #1
 80171d2:	61fb      	str	r3, [r7, #28]
 80171d4:	69fb      	ldr	r3, [r7, #28]
 80171d6:	2b03      	cmp	r3, #3
 80171d8:	d902      	bls.n	80171e0 <HAL_ETH_ReadData+0x11c>
 80171da:	69fb      	ldr	r3, [r7, #28]
 80171dc:	3b04      	subs	r3, #4
 80171de:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80171e0:	687b      	ldr	r3, [r7, #4]
 80171e2:	69fa      	ldr	r2, [r7, #28]
 80171e4:	3212      	adds	r2, #18
 80171e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80171ea:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80171ec:	697b      	ldr	r3, [r7, #20]
 80171ee:	3301      	adds	r3, #1
 80171f0:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80171f2:	69bb      	ldr	r3, [r7, #24]
 80171f4:	681b      	ldr	r3, [r3, #0]
 80171f6:	2b00      	cmp	r3, #0
 80171f8:	db06      	blt.n	8017208 <HAL_ETH_ReadData+0x144>
 80171fa:	697a      	ldr	r2, [r7, #20]
 80171fc:	68bb      	ldr	r3, [r7, #8]
 80171fe:	429a      	cmp	r2, r3
 8017200:	d202      	bcs.n	8017208 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8017202:	7bfb      	ldrb	r3, [r7, #15]
 8017204:	2b00      	cmp	r3, #0
 8017206:	d089      	beq.n	801711c <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8017208:	687b      	ldr	r3, [r7, #4]
 801720a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801720c:	697b      	ldr	r3, [r7, #20]
 801720e:	441a      	add	r2, r3
 8017210:	687b      	ldr	r3, [r7, #4]
 8017212:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017218:	2b00      	cmp	r3, #0
 801721a:	d002      	beq.n	8017222 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 801721c:	6878      	ldr	r0, [r7, #4]
 801721e:	f000 f815 	bl	801724c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8017222:	687b      	ldr	r3, [r7, #4]
 8017224:	69fa      	ldr	r2, [r7, #28]
 8017226:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8017228:	7bfb      	ldrb	r3, [r7, #15]
 801722a:	2b01      	cmp	r3, #1
 801722c:	d108      	bne.n	8017240 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 801722e:	687b      	ldr	r3, [r7, #4]
 8017230:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8017232:	683b      	ldr	r3, [r7, #0]
 8017234:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8017236:	687b      	ldr	r3, [r7, #4]
 8017238:	2200      	movs	r2, #0
 801723a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 801723c:	2300      	movs	r3, #0
 801723e:	e000      	b.n	8017242 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8017240:	2301      	movs	r3, #1
}
 8017242:	4618      	mov	r0, r3
 8017244:	3720      	adds	r7, #32
 8017246:	46bd      	mov	sp, r7
 8017248:	bd80      	pop	{r7, pc}
	...

0801724c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 801724c:	b580      	push	{r7, lr}
 801724e:	b088      	sub	sp, #32
 8017250:	af00      	add	r7, sp, #0
 8017252:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8017254:	2300      	movs	r3, #0
 8017256:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8017258:	2301      	movs	r3, #1
 801725a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 801725c:	687b      	ldr	r3, [r7, #4]
 801725e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017260:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8017262:	687b      	ldr	r3, [r7, #4]
 8017264:	69fa      	ldr	r2, [r7, #28]
 8017266:	3212      	adds	r2, #18
 8017268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801726c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 801726e:	687b      	ldr	r3, [r7, #4]
 8017270:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017272:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8017274:	e040      	b.n	80172f8 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8017276:	697b      	ldr	r3, [r7, #20]
 8017278:	6a1b      	ldr	r3, [r3, #32]
 801727a:	2b00      	cmp	r3, #0
 801727c:	d112      	bne.n	80172a4 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 801727e:	f107 030c 	add.w	r3, r7, #12
 8017282:	4618      	mov	r0, r3
 8017284:	f006 fab4 	bl	801d7f0 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8017288:	68fb      	ldr	r3, [r7, #12]
 801728a:	2b00      	cmp	r3, #0
 801728c:	d102      	bne.n	8017294 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 801728e:	2300      	movs	r3, #0
 8017290:	74fb      	strb	r3, [r7, #19]
 8017292:	e007      	b.n	80172a4 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8017294:	68fb      	ldr	r3, [r7, #12]
 8017296:	461a      	mov	r2, r3
 8017298:	697b      	ldr	r3, [r7, #20]
 801729a:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 801729c:	68fb      	ldr	r3, [r7, #12]
 801729e:	461a      	mov	r2, r3
 80172a0:	697b      	ldr	r3, [r7, #20]
 80172a2:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80172a4:	7cfb      	ldrb	r3, [r7, #19]
 80172a6:	2b00      	cmp	r3, #0
 80172a8:	d026      	beq.n	80172f8 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 80172aa:	687b      	ldr	r3, [r7, #4]
 80172ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80172ae:	2b00      	cmp	r3, #0
 80172b0:	d103      	bne.n	80172ba <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80172b2:	697b      	ldr	r3, [r7, #20]
 80172b4:	4a1e      	ldr	r2, [pc, #120]	; (8017330 <ETH_UpdateDescriptor+0xe4>)
 80172b6:	605a      	str	r2, [r3, #4]
 80172b8:	e003      	b.n	80172c2 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80172ba:	697b      	ldr	r3, [r7, #20]
 80172bc:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80172c0:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dmb 0xF":::"memory");
 80172c2:	f3bf 8f5f 	dmb	sy
}
 80172c6:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80172c8:	697b      	ldr	r3, [r7, #20]
 80172ca:	681b      	ldr	r3, [r3, #0]
 80172cc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80172d0:	697b      	ldr	r3, [r7, #20]
 80172d2:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80172d4:	69fb      	ldr	r3, [r7, #28]
 80172d6:	3301      	adds	r3, #1
 80172d8:	61fb      	str	r3, [r7, #28]
 80172da:	69fb      	ldr	r3, [r7, #28]
 80172dc:	2b03      	cmp	r3, #3
 80172de:	d902      	bls.n	80172e6 <ETH_UpdateDescriptor+0x9a>
 80172e0:	69fb      	ldr	r3, [r7, #28]
 80172e2:	3b04      	subs	r3, #4
 80172e4:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80172e6:	687b      	ldr	r3, [r7, #4]
 80172e8:	69fa      	ldr	r2, [r7, #28]
 80172ea:	3212      	adds	r2, #18
 80172ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80172f0:	617b      	str	r3, [r7, #20]
      desccount--;
 80172f2:	69bb      	ldr	r3, [r7, #24]
 80172f4:	3b01      	subs	r3, #1
 80172f6:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80172f8:	69bb      	ldr	r3, [r7, #24]
 80172fa:	2b00      	cmp	r3, #0
 80172fc:	d002      	beq.n	8017304 <ETH_UpdateDescriptor+0xb8>
 80172fe:	7cfb      	ldrb	r3, [r7, #19]
 8017300:	2b00      	cmp	r3, #0
 8017302:	d1b8      	bne.n	8017276 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8017304:	687b      	ldr	r3, [r7, #4]
 8017306:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017308:	69ba      	ldr	r2, [r7, #24]
 801730a:	429a      	cmp	r2, r3
 801730c:	d00c      	beq.n	8017328 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 801730e:	687b      	ldr	r3, [r7, #4]
 8017310:	681b      	ldr	r3, [r3, #0]
 8017312:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017316:	461a      	mov	r2, r3
 8017318:	2300      	movs	r3, #0
 801731a:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 801731c:	687b      	ldr	r3, [r7, #4]
 801731e:	69fa      	ldr	r2, [r7, #28]
 8017320:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8017322:	687b      	ldr	r3, [r7, #4]
 8017324:	69ba      	ldr	r2, [r7, #24]
 8017326:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8017328:	bf00      	nop
 801732a:	3720      	adds	r7, #32
 801732c:	46bd      	mov	sp, r7
 801732e:	bd80      	pop	{r7, pc}
 8017330:	800045f8 	.word	0x800045f8

08017334 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8017334:	b580      	push	{r7, lr}
 8017336:	b082      	sub	sp, #8
 8017338:	af00      	add	r7, sp, #0
 801733a:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	681b      	ldr	r3, [r3, #0]
 8017340:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017344:	695b      	ldr	r3, [r3, #20]
 8017346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801734a:	2b40      	cmp	r3, #64	; 0x40
 801734c:	d112      	bne.n	8017374 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 801734e:	687b      	ldr	r3, [r7, #4]
 8017350:	681b      	ldr	r3, [r3, #0]
 8017352:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017356:	69db      	ldr	r3, [r3, #28]
 8017358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801735c:	2b40      	cmp	r3, #64	; 0x40
 801735e:	d109      	bne.n	8017374 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8017360:	687b      	ldr	r3, [r7, #4]
 8017362:	681b      	ldr	r3, [r3, #0]
 8017364:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017368:	461a      	mov	r2, r3
 801736a:	4b50      	ldr	r3, [pc, #320]	; (80174ac <HAL_ETH_IRQHandler+0x178>)
 801736c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 801736e:	6878      	ldr	r0, [r7, #4]
 8017370:	f000 f8ac 	bl	80174cc <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8017374:	687b      	ldr	r3, [r7, #4]
 8017376:	681b      	ldr	r3, [r3, #0]
 8017378:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801737c:	695b      	ldr	r3, [r3, #20]
 801737e:	f003 0301 	and.w	r3, r3, #1
 8017382:	2b01      	cmp	r3, #1
 8017384:	d113      	bne.n	80173ae <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8017386:	687b      	ldr	r3, [r7, #4]
 8017388:	681b      	ldr	r3, [r3, #0]
 801738a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801738e:	69db      	ldr	r3, [r3, #28]
 8017390:	f003 0301 	and.w	r3, r3, #1
 8017394:	2b01      	cmp	r3, #1
 8017396:	d10a      	bne.n	80173ae <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8017398:	687b      	ldr	r3, [r7, #4]
 801739a:	681b      	ldr	r3, [r3, #0]
 801739c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80173a0:	461a      	mov	r2, r3
 80173a2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80173a6:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80173a8:	6878      	ldr	r0, [r7, #4]
 80173aa:	f000 f885 	bl	80174b8 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 80173ae:	687b      	ldr	r3, [r7, #4]
 80173b0:	681b      	ldr	r3, [r3, #0]
 80173b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80173b6:	695b      	ldr	r3, [r3, #20]
 80173b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80173bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80173c0:	d14c      	bne.n	801745c <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 80173c2:	687b      	ldr	r3, [r7, #4]
 80173c4:	681b      	ldr	r3, [r3, #0]
 80173c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80173ca:	69db      	ldr	r3, [r3, #28]
 80173cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80173d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80173d4:	d142      	bne.n	801745c <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80173d6:	687b      	ldr	r3, [r7, #4]
 80173d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80173dc:	f043 0208 	orr.w	r2, r3, #8
 80173e0:	687b      	ldr	r3, [r7, #4]
 80173e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 80173e6:	687b      	ldr	r3, [r7, #4]
 80173e8:	681b      	ldr	r3, [r3, #0]
 80173ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80173ee:	695b      	ldr	r3, [r3, #20]
 80173f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80173f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80173f8:	d11a      	bne.n	8017430 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 80173fa:	687b      	ldr	r3, [r7, #4]
 80173fc:	681b      	ldr	r3, [r3, #0]
 80173fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017402:	695a      	ldr	r2, [r3, #20]
 8017404:	4b2a      	ldr	r3, [pc, #168]	; (80174b0 <HAL_ETH_IRQHandler+0x17c>)
 8017406:	4013      	ands	r3, r2
 8017408:	687a      	ldr	r2, [r7, #4]
 801740a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 801740e:	687b      	ldr	r3, [r7, #4]
 8017410:	681b      	ldr	r3, [r3, #0]
 8017412:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017416:	69db      	ldr	r3, [r3, #28]
 8017418:	687a      	ldr	r2, [r7, #4]
 801741a:	6812      	ldr	r2, [r2, #0]
 801741c:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8017420:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8017424:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8017426:	687b      	ldr	r3, [r7, #4]
 8017428:	22e0      	movs	r2, #224	; 0xe0
 801742a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 801742e:	e012      	b.n	8017456 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8017430:	687b      	ldr	r3, [r7, #4]
 8017432:	681b      	ldr	r3, [r3, #0]
 8017434:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017438:	695a      	ldr	r2, [r3, #20]
 801743a:	f248 6380 	movw	r3, #34432	; 0x8680
 801743e:	4013      	ands	r3, r2
 8017440:	687a      	ldr	r2, [r7, #4]
 8017442:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8017446:	687b      	ldr	r3, [r7, #4]
 8017448:	681b      	ldr	r3, [r3, #0]
 801744a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801744e:	461a      	mov	r2, r3
 8017450:	f248 6380 	movw	r3, #34432	; 0x8680
 8017454:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8017456:	6878      	ldr	r0, [r7, #4]
 8017458:	f000 f842 	bl	80174e0 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 801745c:	687b      	ldr	r3, [r7, #4]
 801745e:	681b      	ldr	r3, [r3, #0]
 8017460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017462:	f003 0308 	and.w	r3, r3, #8
 8017466:	2b08      	cmp	r3, #8
 8017468:	d10e      	bne.n	8017488 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 801746a:	687b      	ldr	r3, [r7, #4]
 801746c:	681b      	ldr	r3, [r3, #0]
 801746e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017470:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8017474:	687b      	ldr	r3, [r7, #4]
 8017476:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 801747a:	6878      	ldr	r0, [r7, #4]
 801747c:	f000 f83a 	bl	80174f4 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8017480:	687b      	ldr	r3, [r7, #4]
 8017482:	2200      	movs	r2, #0
 8017484:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8017488:	4b0a      	ldr	r3, [pc, #40]	; (80174b4 <HAL_ETH_IRQHandler+0x180>)
 801748a:	695b      	ldr	r3, [r3, #20]
 801748c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8017490:	2b00      	cmp	r3, #0
 8017492:	d006      	beq.n	80174a2 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8017494:	4b07      	ldr	r3, [pc, #28]	; (80174b4 <HAL_ETH_IRQHandler+0x180>)
 8017496:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801749a:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 801749c:	6878      	ldr	r0, [r7, #4]
 801749e:	f000 f833 	bl	8017508 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80174a2:	bf00      	nop
 80174a4:	3708      	adds	r7, #8
 80174a6:	46bd      	mov	sp, r7
 80174a8:	bd80      	pop	{r7, pc}
 80174aa:	bf00      	nop
 80174ac:	00010040 	.word	0x00010040
 80174b0:	007e2000 	.word	0x007e2000
 80174b4:	40013c00 	.word	0x40013c00

080174b8 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80174b8:	b480      	push	{r7}
 80174ba:	b083      	sub	sp, #12
 80174bc:	af00      	add	r7, sp, #0
 80174be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 80174c0:	bf00      	nop
 80174c2:	370c      	adds	r7, #12
 80174c4:	46bd      	mov	sp, r7
 80174c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174ca:	4770      	bx	lr

080174cc <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80174cc:	b480      	push	{r7}
 80174ce:	b083      	sub	sp, #12
 80174d0:	af00      	add	r7, sp, #0
 80174d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 80174d4:	bf00      	nop
 80174d6:	370c      	adds	r7, #12
 80174d8:	46bd      	mov	sp, r7
 80174da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174de:	4770      	bx	lr

080174e0 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80174e0:	b480      	push	{r7}
 80174e2:	b083      	sub	sp, #12
 80174e4:	af00      	add	r7, sp, #0
 80174e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 80174e8:	bf00      	nop
 80174ea:	370c      	adds	r7, #12
 80174ec:	46bd      	mov	sp, r7
 80174ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174f2:	4770      	bx	lr

080174f4 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80174f4:	b480      	push	{r7}
 80174f6:	b083      	sub	sp, #12
 80174f8:	af00      	add	r7, sp, #0
 80174fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80174fc:	bf00      	nop
 80174fe:	370c      	adds	r7, #12
 8017500:	46bd      	mov	sp, r7
 8017502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017506:	4770      	bx	lr

08017508 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8017508:	b480      	push	{r7}
 801750a:	b083      	sub	sp, #12
 801750c:	af00      	add	r7, sp, #0
 801750e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8017510:	bf00      	nop
 8017512:	370c      	adds	r7, #12
 8017514:	46bd      	mov	sp, r7
 8017516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801751a:	4770      	bx	lr

0801751c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 801751c:	b580      	push	{r7, lr}
 801751e:	b086      	sub	sp, #24
 8017520:	af00      	add	r7, sp, #0
 8017522:	60f8      	str	r0, [r7, #12]
 8017524:	60b9      	str	r1, [r7, #8]
 8017526:	607a      	str	r2, [r7, #4]
 8017528:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 801752a:	68fb      	ldr	r3, [r7, #12]
 801752c:	681b      	ldr	r3, [r3, #0]
 801752e:	691b      	ldr	r3, [r3, #16]
 8017530:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8017532:	697b      	ldr	r3, [r7, #20]
 8017534:	f003 031c 	and.w	r3, r3, #28
 8017538:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 801753a:	68bb      	ldr	r3, [r7, #8]
 801753c:	02db      	lsls	r3, r3, #11
 801753e:	b29b      	uxth	r3, r3
 8017540:	697a      	ldr	r2, [r7, #20]
 8017542:	4313      	orrs	r3, r2
 8017544:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8017546:	687b      	ldr	r3, [r7, #4]
 8017548:	019b      	lsls	r3, r3, #6
 801754a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 801754e:	697a      	ldr	r2, [r7, #20]
 8017550:	4313      	orrs	r3, r2
 8017552:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8017554:	697b      	ldr	r3, [r7, #20]
 8017556:	f023 0302 	bic.w	r3, r3, #2
 801755a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 801755c:	697b      	ldr	r3, [r7, #20]
 801755e:	f043 0301 	orr.w	r3, r3, #1
 8017562:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8017564:	68fb      	ldr	r3, [r7, #12]
 8017566:	681b      	ldr	r3, [r3, #0]
 8017568:	697a      	ldr	r2, [r7, #20]
 801756a:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 801756c:	f7fe fabc 	bl	8015ae8 <HAL_GetTick>
 8017570:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8017572:	e00d      	b.n	8017590 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8017574:	f7fe fab8 	bl	8015ae8 <HAL_GetTick>
 8017578:	4602      	mov	r2, r0
 801757a:	693b      	ldr	r3, [r7, #16]
 801757c:	1ad3      	subs	r3, r2, r3
 801757e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017582:	d301      	bcc.n	8017588 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8017584:	2301      	movs	r3, #1
 8017586:	e010      	b.n	80175aa <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8017588:	68fb      	ldr	r3, [r7, #12]
 801758a:	681b      	ldr	r3, [r3, #0]
 801758c:	691b      	ldr	r3, [r3, #16]
 801758e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8017590:	697b      	ldr	r3, [r7, #20]
 8017592:	f003 0301 	and.w	r3, r3, #1
 8017596:	2b00      	cmp	r3, #0
 8017598:	d1ec      	bne.n	8017574 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 801759a:	68fb      	ldr	r3, [r7, #12]
 801759c:	681b      	ldr	r3, [r3, #0]
 801759e:	695b      	ldr	r3, [r3, #20]
 80175a0:	b29b      	uxth	r3, r3
 80175a2:	461a      	mov	r2, r3
 80175a4:	683b      	ldr	r3, [r7, #0]
 80175a6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80175a8:	2300      	movs	r3, #0
}
 80175aa:	4618      	mov	r0, r3
 80175ac:	3718      	adds	r7, #24
 80175ae:	46bd      	mov	sp, r7
 80175b0:	bd80      	pop	{r7, pc}

080175b2 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80175b2:	b580      	push	{r7, lr}
 80175b4:	b086      	sub	sp, #24
 80175b6:	af00      	add	r7, sp, #0
 80175b8:	60f8      	str	r0, [r7, #12]
 80175ba:	60b9      	str	r1, [r7, #8]
 80175bc:	607a      	str	r2, [r7, #4]
 80175be:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80175c0:	68fb      	ldr	r3, [r7, #12]
 80175c2:	681b      	ldr	r3, [r3, #0]
 80175c4:	691b      	ldr	r3, [r3, #16]
 80175c6:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80175c8:	697b      	ldr	r3, [r7, #20]
 80175ca:	f003 031c 	and.w	r3, r3, #28
 80175ce:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80175d0:	68bb      	ldr	r3, [r7, #8]
 80175d2:	02db      	lsls	r3, r3, #11
 80175d4:	b29b      	uxth	r3, r3
 80175d6:	697a      	ldr	r2, [r7, #20]
 80175d8:	4313      	orrs	r3, r2
 80175da:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80175dc:	687b      	ldr	r3, [r7, #4]
 80175de:	019b      	lsls	r3, r3, #6
 80175e0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80175e4:	697a      	ldr	r2, [r7, #20]
 80175e6:	4313      	orrs	r3, r2
 80175e8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80175ea:	697b      	ldr	r3, [r7, #20]
 80175ec:	f043 0302 	orr.w	r3, r3, #2
 80175f0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80175f2:	697b      	ldr	r3, [r7, #20]
 80175f4:	f043 0301 	orr.w	r3, r3, #1
 80175f8:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80175fa:	683b      	ldr	r3, [r7, #0]
 80175fc:	b29a      	uxth	r2, r3
 80175fe:	68fb      	ldr	r3, [r7, #12]
 8017600:	681b      	ldr	r3, [r3, #0]
 8017602:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8017604:	68fb      	ldr	r3, [r7, #12]
 8017606:	681b      	ldr	r3, [r3, #0]
 8017608:	697a      	ldr	r2, [r7, #20]
 801760a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 801760c:	f7fe fa6c 	bl	8015ae8 <HAL_GetTick>
 8017610:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8017612:	e00d      	b.n	8017630 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8017614:	f7fe fa68 	bl	8015ae8 <HAL_GetTick>
 8017618:	4602      	mov	r2, r0
 801761a:	693b      	ldr	r3, [r7, #16]
 801761c:	1ad3      	subs	r3, r2, r3
 801761e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017622:	d301      	bcc.n	8017628 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8017624:	2301      	movs	r3, #1
 8017626:	e009      	b.n	801763c <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8017628:	68fb      	ldr	r3, [r7, #12]
 801762a:	681b      	ldr	r3, [r3, #0]
 801762c:	691b      	ldr	r3, [r3, #16]
 801762e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8017630:	697b      	ldr	r3, [r7, #20]
 8017632:	f003 0301 	and.w	r3, r3, #1
 8017636:	2b00      	cmp	r3, #0
 8017638:	d1ec      	bne.n	8017614 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 801763a:	2300      	movs	r3, #0
}
 801763c:	4618      	mov	r0, r3
 801763e:	3718      	adds	r7, #24
 8017640:	46bd      	mov	sp, r7
 8017642:	bd80      	pop	{r7, pc}

08017644 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8017644:	b480      	push	{r7}
 8017646:	b083      	sub	sp, #12
 8017648:	af00      	add	r7, sp, #0
 801764a:	6078      	str	r0, [r7, #4]
 801764c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 801764e:	683b      	ldr	r3, [r7, #0]
 8017650:	2b00      	cmp	r3, #0
 8017652:	d101      	bne.n	8017658 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8017654:	2301      	movs	r3, #1
 8017656:	e0d9      	b.n	801780c <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8017658:	687b      	ldr	r3, [r7, #4]
 801765a:	681b      	ldr	r3, [r3, #0]
 801765c:	681b      	ldr	r3, [r3, #0]
 801765e:	f003 0310 	and.w	r3, r3, #16
 8017662:	2b00      	cmp	r3, #0
 8017664:	bf14      	ite	ne
 8017666:	2301      	movne	r3, #1
 8017668:	2300      	moveq	r3, #0
 801766a:	b2db      	uxtb	r3, r3
 801766c:	461a      	mov	r2, r3
 801766e:	683b      	ldr	r3, [r7, #0]
 8017670:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8017674:	687b      	ldr	r3, [r7, #4]
 8017676:	681b      	ldr	r3, [r3, #0]
 8017678:	681b      	ldr	r3, [r3, #0]
 801767a:	f003 0260 	and.w	r2, r3, #96	; 0x60
 801767e:	683b      	ldr	r3, [r7, #0]
 8017680:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8017682:	687b      	ldr	r3, [r7, #4]
 8017684:	681b      	ldr	r3, [r3, #0]
 8017686:	681b      	ldr	r3, [r3, #0]
 8017688:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801768c:	2b00      	cmp	r3, #0
 801768e:	bf0c      	ite	eq
 8017690:	2301      	moveq	r3, #1
 8017692:	2300      	movne	r3, #0
 8017694:	b2db      	uxtb	r3, r3
 8017696:	461a      	mov	r2, r3
 8017698:	683b      	ldr	r3, [r7, #0]
 801769a:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 801769e:	687b      	ldr	r3, [r7, #4]
 80176a0:	681b      	ldr	r3, [r3, #0]
 80176a2:	681b      	ldr	r3, [r3, #0]
 80176a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 80176a8:	2b00      	cmp	r3, #0
 80176aa:	bf14      	ite	ne
 80176ac:	2301      	movne	r3, #1
 80176ae:	2300      	moveq	r3, #0
 80176b0:	b2db      	uxtb	r3, r3
 80176b2:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80176b4:	683b      	ldr	r3, [r7, #0]
 80176b6:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80176b8:	687b      	ldr	r3, [r7, #4]
 80176ba:	681b      	ldr	r3, [r3, #0]
 80176bc:	681b      	ldr	r3, [r3, #0]
 80176be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80176c2:	2b00      	cmp	r3, #0
 80176c4:	bf0c      	ite	eq
 80176c6:	2301      	moveq	r3, #1
 80176c8:	2300      	movne	r3, #0
 80176ca:	b2db      	uxtb	r3, r3
 80176cc:	461a      	mov	r2, r3
 80176ce:	683b      	ldr	r3, [r7, #0]
 80176d0:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80176d2:	687b      	ldr	r3, [r7, #4]
 80176d4:	681b      	ldr	r3, [r3, #0]
 80176d6:	681b      	ldr	r3, [r3, #0]
 80176d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80176dc:	2b00      	cmp	r3, #0
 80176de:	bf14      	ite	ne
 80176e0:	2301      	movne	r3, #1
 80176e2:	2300      	moveq	r3, #0
 80176e4:	b2db      	uxtb	r3, r3
 80176e6:	461a      	mov	r2, r3
 80176e8:	683b      	ldr	r3, [r7, #0]
 80176ea:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80176ec:	687b      	ldr	r3, [r7, #4]
 80176ee:	681b      	ldr	r3, [r3, #0]
 80176f0:	681b      	ldr	r3, [r3, #0]
 80176f2:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 80176f6:	683b      	ldr	r3, [r7, #0]
 80176f8:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80176fa:	687b      	ldr	r3, [r7, #4]
 80176fc:	681b      	ldr	r3, [r3, #0]
 80176fe:	681b      	ldr	r3, [r3, #0]
 8017700:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8017704:	683b      	ldr	r3, [r7, #0]
 8017706:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8017708:	687b      	ldr	r3, [r7, #4]
 801770a:	681b      	ldr	r3, [r3, #0]
 801770c:	681b      	ldr	r3, [r3, #0]
 801770e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8017712:	2b00      	cmp	r3, #0
 8017714:	bf0c      	ite	eq
 8017716:	2301      	moveq	r3, #1
 8017718:	2300      	movne	r3, #0
 801771a:	b2db      	uxtb	r3, r3
 801771c:	461a      	mov	r2, r3
 801771e:	683b      	ldr	r3, [r7, #0]
 8017720:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8017722:	687b      	ldr	r3, [r7, #4]
 8017724:	681b      	ldr	r3, [r3, #0]
 8017726:	681b      	ldr	r3, [r3, #0]
 8017728:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801772c:	2b00      	cmp	r3, #0
 801772e:	bf0c      	ite	eq
 8017730:	2301      	moveq	r3, #1
 8017732:	2300      	movne	r3, #0
 8017734:	b2db      	uxtb	r3, r3
 8017736:	461a      	mov	r2, r3
 8017738:	683b      	ldr	r3, [r7, #0]
 801773a:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 801773c:	687b      	ldr	r3, [r7, #4]
 801773e:	681b      	ldr	r3, [r3, #0]
 8017740:	681b      	ldr	r3, [r3, #0]
 8017742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017746:	2b00      	cmp	r3, #0
 8017748:	bf14      	ite	ne
 801774a:	2301      	movne	r3, #1
 801774c:	2300      	moveq	r3, #0
 801774e:	b2db      	uxtb	r3, r3
 8017750:	461a      	mov	r2, r3
 8017752:	683b      	ldr	r3, [r7, #0]
 8017754:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8017756:	687b      	ldr	r3, [r7, #4]
 8017758:	681b      	ldr	r3, [r3, #0]
 801775a:	681b      	ldr	r3, [r3, #0]
 801775c:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8017760:	683b      	ldr	r3, [r7, #0]
 8017762:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8017764:	687b      	ldr	r3, [r7, #4]
 8017766:	681b      	ldr	r3, [r3, #0]
 8017768:	681b      	ldr	r3, [r3, #0]
 801776a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801776e:	2b00      	cmp	r3, #0
 8017770:	bf14      	ite	ne
 8017772:	2301      	movne	r3, #1
 8017774:	2300      	moveq	r3, #0
 8017776:	b2db      	uxtb	r3, r3
 8017778:	461a      	mov	r2, r3
 801777a:	683b      	ldr	r3, [r7, #0]
 801777c:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 801777e:	687b      	ldr	r3, [r7, #4]
 8017780:	681b      	ldr	r3, [r3, #0]
 8017782:	699b      	ldr	r3, [r3, #24]
 8017784:	f003 0302 	and.w	r3, r3, #2
 8017788:	2b00      	cmp	r3, #0
 801778a:	bf14      	ite	ne
 801778c:	2301      	movne	r3, #1
 801778e:	2300      	moveq	r3, #0
 8017790:	b2db      	uxtb	r3, r3
 8017792:	461a      	mov	r2, r3
 8017794:	683b      	ldr	r3, [r7, #0]
 8017796:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 801779a:	687b      	ldr	r3, [r7, #4]
 801779c:	681b      	ldr	r3, [r3, #0]
 801779e:	699b      	ldr	r3, [r3, #24]
 80177a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80177a4:	2b00      	cmp	r3, #0
 80177a6:	bf0c      	ite	eq
 80177a8:	2301      	moveq	r3, #1
 80177aa:	2300      	movne	r3, #0
 80177ac:	b2db      	uxtb	r3, r3
 80177ae:	461a      	mov	r2, r3
 80177b0:	683b      	ldr	r3, [r7, #0]
 80177b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80177b6:	687b      	ldr	r3, [r7, #4]
 80177b8:	681b      	ldr	r3, [r3, #0]
 80177ba:	699b      	ldr	r3, [r3, #24]
 80177bc:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80177c0:	683b      	ldr	r3, [r7, #0]
 80177c2:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80177c4:	687b      	ldr	r3, [r7, #4]
 80177c6:	681b      	ldr	r3, [r3, #0]
 80177c8:	699b      	ldr	r3, [r3, #24]
 80177ca:	0c1b      	lsrs	r3, r3, #16
 80177cc:	b29a      	uxth	r2, r3
 80177ce:	683b      	ldr	r3, [r7, #0]
 80177d0:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80177d2:	687b      	ldr	r3, [r7, #4]
 80177d4:	681b      	ldr	r3, [r3, #0]
 80177d6:	699b      	ldr	r3, [r3, #24]
 80177d8:	f003 0304 	and.w	r3, r3, #4
 80177dc:	2b00      	cmp	r3, #0
 80177de:	bf14      	ite	ne
 80177e0:	2301      	movne	r3, #1
 80177e2:	2300      	moveq	r3, #0
 80177e4:	b2db      	uxtb	r3, r3
 80177e6:	461a      	mov	r2, r3
 80177e8:	683b      	ldr	r3, [r7, #0]
 80177ea:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80177ee:	687b      	ldr	r3, [r7, #4]
 80177f0:	681b      	ldr	r3, [r3, #0]
 80177f2:	699b      	ldr	r3, [r3, #24]
 80177f4:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80177f8:	2b00      	cmp	r3, #0
 80177fa:	bf14      	ite	ne
 80177fc:	2301      	movne	r3, #1
 80177fe:	2300      	moveq	r3, #0
 8017800:	b2db      	uxtb	r3, r3
 8017802:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8017804:	683b      	ldr	r3, [r7, #0]
 8017806:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 801780a:	2300      	movs	r3, #0
}
 801780c:	4618      	mov	r0, r3
 801780e:	370c      	adds	r7, #12
 8017810:	46bd      	mov	sp, r7
 8017812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017816:	4770      	bx	lr

08017818 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8017818:	b580      	push	{r7, lr}
 801781a:	b082      	sub	sp, #8
 801781c:	af00      	add	r7, sp, #0
 801781e:	6078      	str	r0, [r7, #4]
 8017820:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8017822:	683b      	ldr	r3, [r7, #0]
 8017824:	2b00      	cmp	r3, #0
 8017826:	d101      	bne.n	801782c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8017828:	2301      	movs	r3, #1
 801782a:	e00b      	b.n	8017844 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 801782c:	687b      	ldr	r3, [r7, #4]
 801782e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8017832:	2b10      	cmp	r3, #16
 8017834:	d105      	bne.n	8017842 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8017836:	6839      	ldr	r1, [r7, #0]
 8017838:	6878      	ldr	r0, [r7, #4]
 801783a:	f000 f883 	bl	8017944 <ETH_SetMACConfig>

    return HAL_OK;
 801783e:	2300      	movs	r3, #0
 8017840:	e000      	b.n	8017844 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8017842:	2301      	movs	r3, #1
  }
}
 8017844:	4618      	mov	r0, r3
 8017846:	3708      	adds	r7, #8
 8017848:	46bd      	mov	sp, r7
 801784a:	bd80      	pop	{r7, pc}

0801784c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 801784c:	b580      	push	{r7, lr}
 801784e:	b084      	sub	sp, #16
 8017850:	af00      	add	r7, sp, #0
 8017852:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8017854:	687b      	ldr	r3, [r7, #4]
 8017856:	681b      	ldr	r3, [r3, #0]
 8017858:	691b      	ldr	r3, [r3, #16]
 801785a:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 801785c:	68fb      	ldr	r3, [r7, #12]
 801785e:	f023 031c 	bic.w	r3, r3, #28
 8017862:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8017864:	f002 f916 	bl	8019a94 <HAL_RCC_GetHCLKFreq>
 8017868:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 801786a:	68bb      	ldr	r3, [r7, #8]
 801786c:	4a1d      	ldr	r2, [pc, #116]	; (80178e4 <HAL_ETH_SetMDIOClockRange+0x98>)
 801786e:	4293      	cmp	r3, r2
 8017870:	d908      	bls.n	8017884 <HAL_ETH_SetMDIOClockRange+0x38>
 8017872:	68bb      	ldr	r3, [r7, #8]
 8017874:	4a1c      	ldr	r2, [pc, #112]	; (80178e8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8017876:	4293      	cmp	r3, r2
 8017878:	d804      	bhi.n	8017884 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 801787a:	68fb      	ldr	r3, [r7, #12]
 801787c:	f043 0308 	orr.w	r3, r3, #8
 8017880:	60fb      	str	r3, [r7, #12]
 8017882:	e027      	b.n	80178d4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8017884:	68bb      	ldr	r3, [r7, #8]
 8017886:	4a18      	ldr	r2, [pc, #96]	; (80178e8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8017888:	4293      	cmp	r3, r2
 801788a:	d908      	bls.n	801789e <HAL_ETH_SetMDIOClockRange+0x52>
 801788c:	68bb      	ldr	r3, [r7, #8]
 801788e:	4a17      	ldr	r2, [pc, #92]	; (80178ec <HAL_ETH_SetMDIOClockRange+0xa0>)
 8017890:	4293      	cmp	r3, r2
 8017892:	d204      	bcs.n	801789e <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8017894:	68fb      	ldr	r3, [r7, #12]
 8017896:	f043 030c 	orr.w	r3, r3, #12
 801789a:	60fb      	str	r3, [r7, #12]
 801789c:	e01a      	b.n	80178d4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 801789e:	68bb      	ldr	r3, [r7, #8]
 80178a0:	4a12      	ldr	r2, [pc, #72]	; (80178ec <HAL_ETH_SetMDIOClockRange+0xa0>)
 80178a2:	4293      	cmp	r3, r2
 80178a4:	d303      	bcc.n	80178ae <HAL_ETH_SetMDIOClockRange+0x62>
 80178a6:	68bb      	ldr	r3, [r7, #8]
 80178a8:	4a11      	ldr	r2, [pc, #68]	; (80178f0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80178aa:	4293      	cmp	r3, r2
 80178ac:	d911      	bls.n	80178d2 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80178ae:	68bb      	ldr	r3, [r7, #8]
 80178b0:	4a0f      	ldr	r2, [pc, #60]	; (80178f0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80178b2:	4293      	cmp	r3, r2
 80178b4:	d908      	bls.n	80178c8 <HAL_ETH_SetMDIOClockRange+0x7c>
 80178b6:	68bb      	ldr	r3, [r7, #8]
 80178b8:	4a0e      	ldr	r2, [pc, #56]	; (80178f4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80178ba:	4293      	cmp	r3, r2
 80178bc:	d804      	bhi.n	80178c8 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80178be:	68fb      	ldr	r3, [r7, #12]
 80178c0:	f043 0304 	orr.w	r3, r3, #4
 80178c4:	60fb      	str	r3, [r7, #12]
 80178c6:	e005      	b.n	80178d4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80178c8:	68fb      	ldr	r3, [r7, #12]
 80178ca:	f043 0310 	orr.w	r3, r3, #16
 80178ce:	60fb      	str	r3, [r7, #12]
 80178d0:	e000      	b.n	80178d4 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80178d2:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80178d4:	687b      	ldr	r3, [r7, #4]
 80178d6:	681b      	ldr	r3, [r3, #0]
 80178d8:	68fa      	ldr	r2, [r7, #12]
 80178da:	611a      	str	r2, [r3, #16]
}
 80178dc:	bf00      	nop
 80178de:	3710      	adds	r7, #16
 80178e0:	46bd      	mov	sp, r7
 80178e2:	bd80      	pop	{r7, pc}
 80178e4:	01312cff 	.word	0x01312cff
 80178e8:	02160ebf 	.word	0x02160ebf
 80178ec:	03938700 	.word	0x03938700
 80178f0:	05f5e0ff 	.word	0x05f5e0ff
 80178f4:	08f0d17f 	.word	0x08f0d17f

080178f8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80178f8:	b580      	push	{r7, lr}
 80178fa:	b084      	sub	sp, #16
 80178fc:	af00      	add	r7, sp, #0
 80178fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8017900:	2300      	movs	r3, #0
 8017902:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8017904:	687b      	ldr	r3, [r7, #4]
 8017906:	681b      	ldr	r3, [r3, #0]
 8017908:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801790c:	699b      	ldr	r3, [r3, #24]
 801790e:	687a      	ldr	r2, [r7, #4]
 8017910:	6812      	ldr	r2, [r2, #0]
 8017912:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017916:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801791a:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 801791c:	687b      	ldr	r3, [r7, #4]
 801791e:	681b      	ldr	r3, [r3, #0]
 8017920:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017924:	699b      	ldr	r3, [r3, #24]
 8017926:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8017928:	2001      	movs	r0, #1
 801792a:	f7fe f8e9 	bl	8015b00 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 801792e:	687b      	ldr	r3, [r7, #4]
 8017930:	681a      	ldr	r2, [r3, #0]
 8017932:	68fb      	ldr	r3, [r7, #12]
 8017934:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8017938:	6193      	str	r3, [r2, #24]
}
 801793a:	bf00      	nop
 801793c:	3710      	adds	r7, #16
 801793e:	46bd      	mov	sp, r7
 8017940:	bd80      	pop	{r7, pc}
	...

08017944 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8017944:	b580      	push	{r7, lr}
 8017946:	b084      	sub	sp, #16
 8017948:	af00      	add	r7, sp, #0
 801794a:	6078      	str	r0, [r7, #4]
 801794c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 801794e:	687b      	ldr	r3, [r7, #4]
 8017950:	681b      	ldr	r3, [r3, #0]
 8017952:	681b      	ldr	r3, [r3, #0]
 8017954:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8017956:	68fa      	ldr	r2, [r7, #12]
 8017958:	4b51      	ldr	r3, [pc, #324]	; (8017aa0 <ETH_SetMACConfig+0x15c>)
 801795a:	4013      	ands	r3, r2
 801795c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 801795e:	683b      	ldr	r3, [r7, #0]
 8017960:	7c1b      	ldrb	r3, [r3, #16]
 8017962:	2b00      	cmp	r3, #0
 8017964:	d102      	bne.n	801796c <ETH_SetMACConfig+0x28>
 8017966:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 801796a:	e000      	b.n	801796e <ETH_SetMACConfig+0x2a>
 801796c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 801796e:	683b      	ldr	r3, [r7, #0]
 8017970:	7c5b      	ldrb	r3, [r3, #17]
 8017972:	2b00      	cmp	r3, #0
 8017974:	d102      	bne.n	801797c <ETH_SetMACConfig+0x38>
 8017976:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801797a:	e000      	b.n	801797e <ETH_SetMACConfig+0x3a>
 801797c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 801797e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8017980:	683b      	ldr	r3, [r7, #0]
 8017982:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8017984:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8017986:	683b      	ldr	r3, [r7, #0]
 8017988:	7fdb      	ldrb	r3, [r3, #31]
 801798a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 801798c:	431a      	orrs	r2, r3
                        macconf->Speed |
 801798e:	683b      	ldr	r3, [r7, #0]
 8017990:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8017992:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8017994:	683a      	ldr	r2, [r7, #0]
 8017996:	7f92      	ldrb	r2, [r2, #30]
 8017998:	2a00      	cmp	r2, #0
 801799a:	d102      	bne.n	80179a2 <ETH_SetMACConfig+0x5e>
 801799c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80179a0:	e000      	b.n	80179a4 <ETH_SetMACConfig+0x60>
 80179a2:	2200      	movs	r2, #0
                        macconf->Speed |
 80179a4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80179a6:	683b      	ldr	r3, [r7, #0]
 80179a8:	7f1b      	ldrb	r3, [r3, #28]
 80179aa:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80179ac:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80179ae:	683b      	ldr	r3, [r7, #0]
 80179b0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80179b2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80179b4:	683b      	ldr	r3, [r7, #0]
 80179b6:	791b      	ldrb	r3, [r3, #4]
 80179b8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80179ba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80179bc:	683a      	ldr	r2, [r7, #0]
 80179be:	f892 2020 	ldrb.w	r2, [r2, #32]
 80179c2:	2a00      	cmp	r2, #0
 80179c4:	d102      	bne.n	80179cc <ETH_SetMACConfig+0x88>
 80179c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80179ca:	e000      	b.n	80179ce <ETH_SetMACConfig+0x8a>
 80179cc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80179ce:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80179d0:	683b      	ldr	r3, [r7, #0]
 80179d2:	7bdb      	ldrb	r3, [r3, #15]
 80179d4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80179d6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80179d8:	683b      	ldr	r3, [r7, #0]
 80179da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80179dc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80179de:	683b      	ldr	r3, [r7, #0]
 80179e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80179e4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80179e6:	4313      	orrs	r3, r2
 80179e8:	68fa      	ldr	r2, [r7, #12]
 80179ea:	4313      	orrs	r3, r2
 80179ec:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80179ee:	687b      	ldr	r3, [r7, #4]
 80179f0:	681b      	ldr	r3, [r3, #0]
 80179f2:	68fa      	ldr	r2, [r7, #12]
 80179f4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80179f6:	687b      	ldr	r3, [r7, #4]
 80179f8:	681b      	ldr	r3, [r3, #0]
 80179fa:	681b      	ldr	r3, [r3, #0]
 80179fc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80179fe:	2001      	movs	r0, #1
 8017a00:	f7fe f87e 	bl	8015b00 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8017a04:	687b      	ldr	r3, [r7, #4]
 8017a06:	681b      	ldr	r3, [r3, #0]
 8017a08:	68fa      	ldr	r2, [r7, #12]
 8017a0a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8017a0c:	687b      	ldr	r3, [r7, #4]
 8017a0e:	681b      	ldr	r3, [r3, #0]
 8017a10:	699b      	ldr	r3, [r3, #24]
 8017a12:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8017a14:	68fa      	ldr	r2, [r7, #12]
 8017a16:	f64f 7341 	movw	r3, #65345	; 0xff41
 8017a1a:	4013      	ands	r3, r2
 8017a1c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8017a1e:	683b      	ldr	r3, [r7, #0]
 8017a20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017a22:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8017a24:	683a      	ldr	r2, [r7, #0]
 8017a26:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8017a2a:	2a00      	cmp	r2, #0
 8017a2c:	d101      	bne.n	8017a32 <ETH_SetMACConfig+0xee>
 8017a2e:	2280      	movs	r2, #128	; 0x80
 8017a30:	e000      	b.n	8017a34 <ETH_SetMACConfig+0xf0>
 8017a32:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8017a34:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8017a36:	683b      	ldr	r3, [r7, #0]
 8017a38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8017a3a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8017a3c:	683a      	ldr	r2, [r7, #0]
 8017a3e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8017a42:	2a01      	cmp	r2, #1
 8017a44:	d101      	bne.n	8017a4a <ETH_SetMACConfig+0x106>
 8017a46:	2208      	movs	r2, #8
 8017a48:	e000      	b.n	8017a4c <ETH_SetMACConfig+0x108>
 8017a4a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8017a4c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8017a4e:	683a      	ldr	r2, [r7, #0]
 8017a50:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8017a54:	2a01      	cmp	r2, #1
 8017a56:	d101      	bne.n	8017a5c <ETH_SetMACConfig+0x118>
 8017a58:	2204      	movs	r2, #4
 8017a5a:	e000      	b.n	8017a5e <ETH_SetMACConfig+0x11a>
 8017a5c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8017a5e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8017a60:	683a      	ldr	r2, [r7, #0]
 8017a62:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8017a66:	2a01      	cmp	r2, #1
 8017a68:	d101      	bne.n	8017a6e <ETH_SetMACConfig+0x12a>
 8017a6a:	2202      	movs	r2, #2
 8017a6c:	e000      	b.n	8017a70 <ETH_SetMACConfig+0x12c>
 8017a6e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8017a70:	4313      	orrs	r3, r2
 8017a72:	68fa      	ldr	r2, [r7, #12]
 8017a74:	4313      	orrs	r3, r2
 8017a76:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8017a78:	687b      	ldr	r3, [r7, #4]
 8017a7a:	681b      	ldr	r3, [r3, #0]
 8017a7c:	68fa      	ldr	r2, [r7, #12]
 8017a7e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8017a80:	687b      	ldr	r3, [r7, #4]
 8017a82:	681b      	ldr	r3, [r3, #0]
 8017a84:	699b      	ldr	r3, [r3, #24]
 8017a86:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8017a88:	2001      	movs	r0, #1
 8017a8a:	f7fe f839 	bl	8015b00 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8017a8e:	687b      	ldr	r3, [r7, #4]
 8017a90:	681b      	ldr	r3, [r3, #0]
 8017a92:	68fa      	ldr	r2, [r7, #12]
 8017a94:	619a      	str	r2, [r3, #24]
}
 8017a96:	bf00      	nop
 8017a98:	3710      	adds	r7, #16
 8017a9a:	46bd      	mov	sp, r7
 8017a9c:	bd80      	pop	{r7, pc}
 8017a9e:	bf00      	nop
 8017aa0:	ff20810f 	.word	0xff20810f

08017aa4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8017aa4:	b580      	push	{r7, lr}
 8017aa6:	b084      	sub	sp, #16
 8017aa8:	af00      	add	r7, sp, #0
 8017aaa:	6078      	str	r0, [r7, #4]
 8017aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8017aae:	687b      	ldr	r3, [r7, #4]
 8017ab0:	681b      	ldr	r3, [r3, #0]
 8017ab2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017ab6:	699b      	ldr	r3, [r3, #24]
 8017ab8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8017aba:	68fa      	ldr	r2, [r7, #12]
 8017abc:	4b3d      	ldr	r3, [pc, #244]	; (8017bb4 <ETH_SetDMAConfig+0x110>)
 8017abe:	4013      	ands	r3, r2
 8017ac0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8017ac2:	683b      	ldr	r3, [r7, #0]
 8017ac4:	7b1b      	ldrb	r3, [r3, #12]
 8017ac6:	2b00      	cmp	r3, #0
 8017ac8:	d102      	bne.n	8017ad0 <ETH_SetDMAConfig+0x2c>
 8017aca:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8017ace:	e000      	b.n	8017ad2 <ETH_SetDMAConfig+0x2e>
 8017ad0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8017ad2:	683b      	ldr	r3, [r7, #0]
 8017ad4:	7b5b      	ldrb	r3, [r3, #13]
 8017ad6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8017ad8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8017ada:	683a      	ldr	r2, [r7, #0]
 8017adc:	7f52      	ldrb	r2, [r2, #29]
 8017ade:	2a00      	cmp	r2, #0
 8017ae0:	d102      	bne.n	8017ae8 <ETH_SetDMAConfig+0x44>
 8017ae2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8017ae6:	e000      	b.n	8017aea <ETH_SetDMAConfig+0x46>
 8017ae8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8017aea:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8017aec:	683b      	ldr	r3, [r7, #0]
 8017aee:	7b9b      	ldrb	r3, [r3, #14]
 8017af0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8017af2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8017af4:	683b      	ldr	r3, [r7, #0]
 8017af6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8017af8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8017afa:	683b      	ldr	r3, [r7, #0]
 8017afc:	7f1b      	ldrb	r3, [r3, #28]
 8017afe:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8017b00:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8017b02:	683b      	ldr	r3, [r7, #0]
 8017b04:	7f9b      	ldrb	r3, [r3, #30]
 8017b06:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8017b08:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8017b0a:	683b      	ldr	r3, [r7, #0]
 8017b0c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8017b0e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8017b10:	683b      	ldr	r3, [r7, #0]
 8017b12:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017b16:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8017b18:	4313      	orrs	r3, r2
 8017b1a:	68fa      	ldr	r2, [r7, #12]
 8017b1c:	4313      	orrs	r3, r2
 8017b1e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8017b20:	687b      	ldr	r3, [r7, #4]
 8017b22:	681b      	ldr	r3, [r3, #0]
 8017b24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017b28:	461a      	mov	r2, r3
 8017b2a:	68fb      	ldr	r3, [r7, #12]
 8017b2c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8017b2e:	687b      	ldr	r3, [r7, #4]
 8017b30:	681b      	ldr	r3, [r3, #0]
 8017b32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017b36:	699b      	ldr	r3, [r3, #24]
 8017b38:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8017b3a:	2001      	movs	r0, #1
 8017b3c:	f7fd ffe0 	bl	8015b00 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8017b40:	687b      	ldr	r3, [r7, #4]
 8017b42:	681b      	ldr	r3, [r3, #0]
 8017b44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017b48:	461a      	mov	r2, r3
 8017b4a:	68fb      	ldr	r3, [r7, #12]
 8017b4c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8017b4e:	683b      	ldr	r3, [r7, #0]
 8017b50:	791b      	ldrb	r3, [r3, #4]
 8017b52:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8017b54:	683b      	ldr	r3, [r7, #0]
 8017b56:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8017b58:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8017b5a:	683b      	ldr	r3, [r7, #0]
 8017b5c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8017b5e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8017b60:	683b      	ldr	r3, [r7, #0]
 8017b62:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8017b64:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8017b66:	683b      	ldr	r3, [r7, #0]
 8017b68:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8017b6c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8017b6e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8017b70:	683b      	ldr	r3, [r7, #0]
 8017b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017b74:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8017b76:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8017b78:	683b      	ldr	r3, [r7, #0]
 8017b7a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8017b7c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8017b7e:	687a      	ldr	r2, [r7, #4]
 8017b80:	6812      	ldr	r2, [r2, #0]
 8017b82:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8017b86:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8017b8a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8017b8c:	687b      	ldr	r3, [r7, #4]
 8017b8e:	681b      	ldr	r3, [r3, #0]
 8017b90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017b94:	681b      	ldr	r3, [r3, #0]
 8017b96:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8017b98:	2001      	movs	r0, #1
 8017b9a:	f7fd ffb1 	bl	8015b00 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8017b9e:	687b      	ldr	r3, [r7, #4]
 8017ba0:	681b      	ldr	r3, [r3, #0]
 8017ba2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017ba6:	461a      	mov	r2, r3
 8017ba8:	68fb      	ldr	r3, [r7, #12]
 8017baa:	6013      	str	r3, [r2, #0]
}
 8017bac:	bf00      	nop
 8017bae:	3710      	adds	r7, #16
 8017bb0:	46bd      	mov	sp, r7
 8017bb2:	bd80      	pop	{r7, pc}
 8017bb4:	f8de3f23 	.word	0xf8de3f23

08017bb8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8017bb8:	b580      	push	{r7, lr}
 8017bba:	b0a6      	sub	sp, #152	; 0x98
 8017bbc:	af00      	add	r7, sp, #0
 8017bbe:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8017bc0:	2301      	movs	r3, #1
 8017bc2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8017bc6:	2301      	movs	r3, #1
 8017bc8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8017bcc:	2300      	movs	r3, #0
 8017bce:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8017bd0:	2300      	movs	r3, #0
 8017bd2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8017bd6:	2301      	movs	r3, #1
 8017bd8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8017bdc:	2300      	movs	r3, #0
 8017bde:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8017be2:	2301      	movs	r3, #1
 8017be4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8017be8:	2300      	movs	r3, #0
 8017bea:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8017bee:	2300      	movs	r3, #0
 8017bf0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8017bf4:	2300      	movs	r3, #0
 8017bf6:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8017bf8:	2300      	movs	r3, #0
 8017bfa:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8017bfe:	2300      	movs	r3, #0
 8017c00:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8017c02:	2300      	movs	r3, #0
 8017c04:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8017c08:	2300      	movs	r3, #0
 8017c0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8017c0e:	2300      	movs	r3, #0
 8017c10:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8017c14:	2300      	movs	r3, #0
 8017c16:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8017c1a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8017c1e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8017c20:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017c24:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8017c26:	2300      	movs	r3, #0
 8017c28:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8017c2c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8017c30:	4619      	mov	r1, r3
 8017c32:	6878      	ldr	r0, [r7, #4]
 8017c34:	f7ff fe86 	bl	8017944 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8017c38:	2301      	movs	r3, #1
 8017c3a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8017c3c:	2301      	movs	r3, #1
 8017c3e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8017c40:	2301      	movs	r3, #1
 8017c42:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8017c46:	2301      	movs	r3, #1
 8017c48:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8017c4a:	2300      	movs	r3, #0
 8017c4c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8017c4e:	2300      	movs	r3, #0
 8017c50:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8017c54:	2300      	movs	r3, #0
 8017c56:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8017c5a:	2300      	movs	r3, #0
 8017c5c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8017c5e:	2301      	movs	r3, #1
 8017c60:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8017c64:	2301      	movs	r3, #1
 8017c66:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8017c68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8017c6c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8017c6e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8017c72:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8017c74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8017c78:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8017c7a:	2301      	movs	r3, #1
 8017c7c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8017c80:	2300      	movs	r3, #0
 8017c82:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8017c84:	2300      	movs	r3, #0
 8017c86:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8017c88:	f107 0308 	add.w	r3, r7, #8
 8017c8c:	4619      	mov	r1, r3
 8017c8e:	6878      	ldr	r0, [r7, #4]
 8017c90:	f7ff ff08 	bl	8017aa4 <ETH_SetDMAConfig>
}
 8017c94:	bf00      	nop
 8017c96:	3798      	adds	r7, #152	; 0x98
 8017c98:	46bd      	mov	sp, r7
 8017c9a:	bd80      	pop	{r7, pc}

08017c9c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8017c9c:	b480      	push	{r7}
 8017c9e:	b087      	sub	sp, #28
 8017ca0:	af00      	add	r7, sp, #0
 8017ca2:	60f8      	str	r0, [r7, #12]
 8017ca4:	60b9      	str	r1, [r7, #8]
 8017ca6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8017ca8:	687b      	ldr	r3, [r7, #4]
 8017caa:	3305      	adds	r3, #5
 8017cac:	781b      	ldrb	r3, [r3, #0]
 8017cae:	021b      	lsls	r3, r3, #8
 8017cb0:	687a      	ldr	r2, [r7, #4]
 8017cb2:	3204      	adds	r2, #4
 8017cb4:	7812      	ldrb	r2, [r2, #0]
 8017cb6:	4313      	orrs	r3, r2
 8017cb8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8017cba:	68ba      	ldr	r2, [r7, #8]
 8017cbc:	4b11      	ldr	r3, [pc, #68]	; (8017d04 <ETH_MACAddressConfig+0x68>)
 8017cbe:	4413      	add	r3, r2
 8017cc0:	461a      	mov	r2, r3
 8017cc2:	697b      	ldr	r3, [r7, #20]
 8017cc4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8017cc6:	687b      	ldr	r3, [r7, #4]
 8017cc8:	3303      	adds	r3, #3
 8017cca:	781b      	ldrb	r3, [r3, #0]
 8017ccc:	061a      	lsls	r2, r3, #24
 8017cce:	687b      	ldr	r3, [r7, #4]
 8017cd0:	3302      	adds	r3, #2
 8017cd2:	781b      	ldrb	r3, [r3, #0]
 8017cd4:	041b      	lsls	r3, r3, #16
 8017cd6:	431a      	orrs	r2, r3
 8017cd8:	687b      	ldr	r3, [r7, #4]
 8017cda:	3301      	adds	r3, #1
 8017cdc:	781b      	ldrb	r3, [r3, #0]
 8017cde:	021b      	lsls	r3, r3, #8
 8017ce0:	4313      	orrs	r3, r2
 8017ce2:	687a      	ldr	r2, [r7, #4]
 8017ce4:	7812      	ldrb	r2, [r2, #0]
 8017ce6:	4313      	orrs	r3, r2
 8017ce8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8017cea:	68ba      	ldr	r2, [r7, #8]
 8017cec:	4b06      	ldr	r3, [pc, #24]	; (8017d08 <ETH_MACAddressConfig+0x6c>)
 8017cee:	4413      	add	r3, r2
 8017cf0:	461a      	mov	r2, r3
 8017cf2:	697b      	ldr	r3, [r7, #20]
 8017cf4:	6013      	str	r3, [r2, #0]
}
 8017cf6:	bf00      	nop
 8017cf8:	371c      	adds	r7, #28
 8017cfa:	46bd      	mov	sp, r7
 8017cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d00:	4770      	bx	lr
 8017d02:	bf00      	nop
 8017d04:	40028040 	.word	0x40028040
 8017d08:	40028044 	.word	0x40028044

08017d0c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8017d0c:	b480      	push	{r7}
 8017d0e:	b085      	sub	sp, #20
 8017d10:	af00      	add	r7, sp, #0
 8017d12:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8017d14:	2300      	movs	r3, #0
 8017d16:	60fb      	str	r3, [r7, #12]
 8017d18:	e03e      	b.n	8017d98 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8017d1a:	687b      	ldr	r3, [r7, #4]
 8017d1c:	68d9      	ldr	r1, [r3, #12]
 8017d1e:	68fa      	ldr	r2, [r7, #12]
 8017d20:	4613      	mov	r3, r2
 8017d22:	009b      	lsls	r3, r3, #2
 8017d24:	4413      	add	r3, r2
 8017d26:	00db      	lsls	r3, r3, #3
 8017d28:	440b      	add	r3, r1
 8017d2a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8017d2c:	68bb      	ldr	r3, [r7, #8]
 8017d2e:	2200      	movs	r2, #0
 8017d30:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8017d32:	68bb      	ldr	r3, [r7, #8]
 8017d34:	2200      	movs	r2, #0
 8017d36:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8017d38:	68bb      	ldr	r3, [r7, #8]
 8017d3a:	2200      	movs	r2, #0
 8017d3c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8017d3e:	68bb      	ldr	r3, [r7, #8]
 8017d40:	2200      	movs	r2, #0
 8017d42:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8017d44:	68b9      	ldr	r1, [r7, #8]
 8017d46:	687b      	ldr	r3, [r7, #4]
 8017d48:	68fa      	ldr	r2, [r7, #12]
 8017d4a:	3206      	adds	r2, #6
 8017d4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8017d50:	68bb      	ldr	r3, [r7, #8]
 8017d52:	681b      	ldr	r3, [r3, #0]
 8017d54:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8017d58:	68bb      	ldr	r3, [r7, #8]
 8017d5a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8017d5c:	68fb      	ldr	r3, [r7, #12]
 8017d5e:	2b02      	cmp	r3, #2
 8017d60:	d80c      	bhi.n	8017d7c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8017d62:	687b      	ldr	r3, [r7, #4]
 8017d64:	68d9      	ldr	r1, [r3, #12]
 8017d66:	68fb      	ldr	r3, [r7, #12]
 8017d68:	1c5a      	adds	r2, r3, #1
 8017d6a:	4613      	mov	r3, r2
 8017d6c:	009b      	lsls	r3, r3, #2
 8017d6e:	4413      	add	r3, r2
 8017d70:	00db      	lsls	r3, r3, #3
 8017d72:	440b      	add	r3, r1
 8017d74:	461a      	mov	r2, r3
 8017d76:	68bb      	ldr	r3, [r7, #8]
 8017d78:	60da      	str	r2, [r3, #12]
 8017d7a:	e004      	b.n	8017d86 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8017d7c:	687b      	ldr	r3, [r7, #4]
 8017d7e:	68db      	ldr	r3, [r3, #12]
 8017d80:	461a      	mov	r2, r3
 8017d82:	68bb      	ldr	r3, [r7, #8]
 8017d84:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8017d86:	68bb      	ldr	r3, [r7, #8]
 8017d88:	681b      	ldr	r3, [r3, #0]
 8017d8a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8017d8e:	68bb      	ldr	r3, [r7, #8]
 8017d90:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8017d92:	68fb      	ldr	r3, [r7, #12]
 8017d94:	3301      	adds	r3, #1
 8017d96:	60fb      	str	r3, [r7, #12]
 8017d98:	68fb      	ldr	r3, [r7, #12]
 8017d9a:	2b03      	cmp	r3, #3
 8017d9c:	d9bd      	bls.n	8017d1a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8017d9e:	687b      	ldr	r3, [r7, #4]
 8017da0:	2200      	movs	r2, #0
 8017da2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8017da4:	687b      	ldr	r3, [r7, #4]
 8017da6:	68da      	ldr	r2, [r3, #12]
 8017da8:	687b      	ldr	r3, [r7, #4]
 8017daa:	681b      	ldr	r3, [r3, #0]
 8017dac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017db0:	611a      	str	r2, [r3, #16]
}
 8017db2:	bf00      	nop
 8017db4:	3714      	adds	r7, #20
 8017db6:	46bd      	mov	sp, r7
 8017db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dbc:	4770      	bx	lr

08017dbe <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8017dbe:	b480      	push	{r7}
 8017dc0:	b085      	sub	sp, #20
 8017dc2:	af00      	add	r7, sp, #0
 8017dc4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8017dc6:	2300      	movs	r3, #0
 8017dc8:	60fb      	str	r3, [r7, #12]
 8017dca:	e046      	b.n	8017e5a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8017dcc:	687b      	ldr	r3, [r7, #4]
 8017dce:	6919      	ldr	r1, [r3, #16]
 8017dd0:	68fa      	ldr	r2, [r7, #12]
 8017dd2:	4613      	mov	r3, r2
 8017dd4:	009b      	lsls	r3, r3, #2
 8017dd6:	4413      	add	r3, r2
 8017dd8:	00db      	lsls	r3, r3, #3
 8017dda:	440b      	add	r3, r1
 8017ddc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8017dde:	68bb      	ldr	r3, [r7, #8]
 8017de0:	2200      	movs	r2, #0
 8017de2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8017de4:	68bb      	ldr	r3, [r7, #8]
 8017de6:	2200      	movs	r2, #0
 8017de8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8017dea:	68bb      	ldr	r3, [r7, #8]
 8017dec:	2200      	movs	r2, #0
 8017dee:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8017df0:	68bb      	ldr	r3, [r7, #8]
 8017df2:	2200      	movs	r2, #0
 8017df4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8017df6:	68bb      	ldr	r3, [r7, #8]
 8017df8:	2200      	movs	r2, #0
 8017dfa:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8017dfc:	68bb      	ldr	r3, [r7, #8]
 8017dfe:	2200      	movs	r2, #0
 8017e00:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8017e02:	68bb      	ldr	r3, [r7, #8]
 8017e04:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8017e08:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8017e0a:	68bb      	ldr	r3, [r7, #8]
 8017e0c:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8017e10:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8017e12:	68bb      	ldr	r3, [r7, #8]
 8017e14:	685b      	ldr	r3, [r3, #4]
 8017e16:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8017e1a:	68bb      	ldr	r3, [r7, #8]
 8017e1c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8017e1e:	68b9      	ldr	r1, [r7, #8]
 8017e20:	687b      	ldr	r3, [r7, #4]
 8017e22:	68fa      	ldr	r2, [r7, #12]
 8017e24:	3212      	adds	r2, #18
 8017e26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8017e2a:	68fb      	ldr	r3, [r7, #12]
 8017e2c:	2b02      	cmp	r3, #2
 8017e2e:	d80c      	bhi.n	8017e4a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8017e30:	687b      	ldr	r3, [r7, #4]
 8017e32:	6919      	ldr	r1, [r3, #16]
 8017e34:	68fb      	ldr	r3, [r7, #12]
 8017e36:	1c5a      	adds	r2, r3, #1
 8017e38:	4613      	mov	r3, r2
 8017e3a:	009b      	lsls	r3, r3, #2
 8017e3c:	4413      	add	r3, r2
 8017e3e:	00db      	lsls	r3, r3, #3
 8017e40:	440b      	add	r3, r1
 8017e42:	461a      	mov	r2, r3
 8017e44:	68bb      	ldr	r3, [r7, #8]
 8017e46:	60da      	str	r2, [r3, #12]
 8017e48:	e004      	b.n	8017e54 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8017e4a:	687b      	ldr	r3, [r7, #4]
 8017e4c:	691b      	ldr	r3, [r3, #16]
 8017e4e:	461a      	mov	r2, r3
 8017e50:	68bb      	ldr	r3, [r7, #8]
 8017e52:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8017e54:	68fb      	ldr	r3, [r7, #12]
 8017e56:	3301      	adds	r3, #1
 8017e58:	60fb      	str	r3, [r7, #12]
 8017e5a:	68fb      	ldr	r3, [r7, #12]
 8017e5c:	2b03      	cmp	r3, #3
 8017e5e:	d9b5      	bls.n	8017dcc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8017e60:	687b      	ldr	r3, [r7, #4]
 8017e62:	2200      	movs	r2, #0
 8017e64:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8017e66:	687b      	ldr	r3, [r7, #4]
 8017e68:	2200      	movs	r2, #0
 8017e6a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8017e6c:	687b      	ldr	r3, [r7, #4]
 8017e6e:	2200      	movs	r2, #0
 8017e70:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8017e72:	687b      	ldr	r3, [r7, #4]
 8017e74:	2200      	movs	r2, #0
 8017e76:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8017e78:	687b      	ldr	r3, [r7, #4]
 8017e7a:	2200      	movs	r2, #0
 8017e7c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8017e7e:	687b      	ldr	r3, [r7, #4]
 8017e80:	691a      	ldr	r2, [r3, #16]
 8017e82:	687b      	ldr	r3, [r7, #4]
 8017e84:	681b      	ldr	r3, [r3, #0]
 8017e86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017e8a:	60da      	str	r2, [r3, #12]
}
 8017e8c:	bf00      	nop
 8017e8e:	3714      	adds	r7, #20
 8017e90:	46bd      	mov	sp, r7
 8017e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e96:	4770      	bx	lr

08017e98 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8017e98:	b480      	push	{r7}
 8017e9a:	b08d      	sub	sp, #52	; 0x34
 8017e9c:	af00      	add	r7, sp, #0
 8017e9e:	60f8      	str	r0, [r7, #12]
 8017ea0:	60b9      	str	r1, [r7, #8]
 8017ea2:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8017ea4:	68fb      	ldr	r3, [r7, #12]
 8017ea6:	3318      	adds	r3, #24
 8017ea8:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8017eaa:	697b      	ldr	r3, [r7, #20]
 8017eac:	691b      	ldr	r3, [r3, #16]
 8017eae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8017eb0:	697b      	ldr	r3, [r7, #20]
 8017eb2:	691b      	ldr	r3, [r3, #16]
 8017eb4:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8017eb6:	2300      	movs	r3, #0
 8017eb8:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8017eba:	697b      	ldr	r3, [r7, #20]
 8017ebc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017ebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017ec2:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8017ec4:	68bb      	ldr	r3, [r7, #8]
 8017ec6:	689b      	ldr	r3, [r3, #8]
 8017ec8:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8017eca:	2300      	movs	r3, #0
 8017ecc:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8017ece:	6a3b      	ldr	r3, [r7, #32]
 8017ed0:	681b      	ldr	r3, [r3, #0]
 8017ed2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8017ed6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8017eda:	d007      	beq.n	8017eec <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8017edc:	697a      	ldr	r2, [r7, #20]
 8017ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ee0:	3304      	adds	r3, #4
 8017ee2:	009b      	lsls	r3, r3, #2
 8017ee4:	4413      	add	r3, r2
 8017ee6:	685b      	ldr	r3, [r3, #4]
 8017ee8:	2b00      	cmp	r3, #0
 8017eea:	d001      	beq.n	8017ef0 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8017eec:	2302      	movs	r3, #2
 8017eee:	e0ff      	b.n	80180f0 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8017ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ef2:	3301      	adds	r3, #1
 8017ef4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8017ef6:	69fb      	ldr	r3, [r7, #28]
 8017ef8:	681b      	ldr	r3, [r3, #0]
 8017efa:	461a      	mov	r2, r3
 8017efc:	6a3b      	ldr	r3, [r7, #32]
 8017efe:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8017f00:	6a3b      	ldr	r3, [r7, #32]
 8017f02:	685a      	ldr	r2, [r3, #4]
 8017f04:	4b7d      	ldr	r3, [pc, #500]	; (80180fc <ETH_Prepare_Tx_Descriptors+0x264>)
 8017f06:	4013      	ands	r3, r2
 8017f08:	69fa      	ldr	r2, [r7, #28]
 8017f0a:	6852      	ldr	r2, [r2, #4]
 8017f0c:	431a      	orrs	r2, r3
 8017f0e:	6a3b      	ldr	r3, [r7, #32]
 8017f10:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8017f12:	68bb      	ldr	r3, [r7, #8]
 8017f14:	681b      	ldr	r3, [r3, #0]
 8017f16:	f003 0301 	and.w	r3, r3, #1
 8017f1a:	2b00      	cmp	r3, #0
 8017f1c:	d008      	beq.n	8017f30 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8017f1e:	6a3b      	ldr	r3, [r7, #32]
 8017f20:	681b      	ldr	r3, [r3, #0]
 8017f22:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8017f26:	68bb      	ldr	r3, [r7, #8]
 8017f28:	695b      	ldr	r3, [r3, #20]
 8017f2a:	431a      	orrs	r2, r3
 8017f2c:	6a3b      	ldr	r3, [r7, #32]
 8017f2e:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8017f30:	68bb      	ldr	r3, [r7, #8]
 8017f32:	681b      	ldr	r3, [r3, #0]
 8017f34:	f003 0320 	and.w	r3, r3, #32
 8017f38:	2b00      	cmp	r3, #0
 8017f3a:	d008      	beq.n	8017f4e <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8017f3c:	6a3b      	ldr	r3, [r7, #32]
 8017f3e:	681b      	ldr	r3, [r3, #0]
 8017f40:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8017f44:	68bb      	ldr	r3, [r7, #8]
 8017f46:	691b      	ldr	r3, [r3, #16]
 8017f48:	431a      	orrs	r2, r3
 8017f4a:	6a3b      	ldr	r3, [r7, #32]
 8017f4c:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8017f4e:	68bb      	ldr	r3, [r7, #8]
 8017f50:	681b      	ldr	r3, [r3, #0]
 8017f52:	f003 0304 	and.w	r3, r3, #4
 8017f56:	2b00      	cmp	r3, #0
 8017f58:	d005      	beq.n	8017f66 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8017f5a:	6a3b      	ldr	r3, [r7, #32]
 8017f5c:	681b      	ldr	r3, [r3, #0]
 8017f5e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8017f62:	6a3b      	ldr	r3, [r7, #32]
 8017f64:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8017f66:	6a3b      	ldr	r3, [r7, #32]
 8017f68:	681b      	ldr	r3, [r3, #0]
 8017f6a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8017f6e:	6a3b      	ldr	r3, [r7, #32]
 8017f70:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8017f72:	f3bf 8f5f 	dmb	sy
}
 8017f76:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8017f78:	6a3b      	ldr	r3, [r7, #32]
 8017f7a:	681b      	ldr	r3, [r3, #0]
 8017f7c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8017f80:	6a3b      	ldr	r3, [r7, #32]
 8017f82:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8017f84:	e082      	b.n	801808c <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8017f86:	6a3b      	ldr	r3, [r7, #32]
 8017f88:	681b      	ldr	r3, [r3, #0]
 8017f8a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8017f8e:	6a3b      	ldr	r3, [r7, #32]
 8017f90:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8017f92:	687b      	ldr	r3, [r7, #4]
 8017f94:	2b00      	cmp	r3, #0
 8017f96:	d006      	beq.n	8017fa6 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8017f98:	6a3b      	ldr	r3, [r7, #32]
 8017f9a:	681b      	ldr	r3, [r3, #0]
 8017f9c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8017fa0:	6a3b      	ldr	r3, [r7, #32]
 8017fa2:	601a      	str	r2, [r3, #0]
 8017fa4:	e005      	b.n	8017fb2 <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8017fa6:	6a3b      	ldr	r3, [r7, #32]
 8017fa8:	681b      	ldr	r3, [r3, #0]
 8017faa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8017fae:	6a3b      	ldr	r3, [r7, #32]
 8017fb0:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8017fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fb4:	3301      	adds	r3, #1
 8017fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fba:	2b03      	cmp	r3, #3
 8017fbc:	d902      	bls.n	8017fc4 <ETH_Prepare_Tx_Descriptors+0x12c>
 8017fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fc0:	3b04      	subs	r3, #4
 8017fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8017fc4:	697b      	ldr	r3, [r7, #20]
 8017fc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017fcc:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8017fce:	6a3b      	ldr	r3, [r7, #32]
 8017fd0:	681b      	ldr	r3, [r3, #0]
 8017fd2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8017fd6:	6a3b      	ldr	r3, [r7, #32]
 8017fd8:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8017fda:	6a3b      	ldr	r3, [r7, #32]
 8017fdc:	681b      	ldr	r3, [r3, #0]
 8017fde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8017fe2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8017fe6:	d007      	beq.n	8017ff8 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8017fe8:	697a      	ldr	r2, [r7, #20]
 8017fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fec:	3304      	adds	r3, #4
 8017fee:	009b      	lsls	r3, r3, #2
 8017ff0:	4413      	add	r3, r2
 8017ff2:	685b      	ldr	r3, [r3, #4]
 8017ff4:	2b00      	cmp	r3, #0
 8017ff6:	d029      	beq.n	801804c <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8017ff8:	693b      	ldr	r3, [r7, #16]
 8017ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8017ffc:	697b      	ldr	r3, [r7, #20]
 8017ffe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018004:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8018006:	2300      	movs	r3, #0
 8018008:	62bb      	str	r3, [r7, #40]	; 0x28
 801800a:	e019      	b.n	8018040 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 801800c:	f3bf 8f5f 	dmb	sy
}
 8018010:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8018012:	6a3b      	ldr	r3, [r7, #32]
 8018014:	681b      	ldr	r3, [r3, #0]
 8018016:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801801a:	6a3b      	ldr	r3, [r7, #32]
 801801c:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 801801e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018020:	3301      	adds	r3, #1
 8018022:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018026:	2b03      	cmp	r3, #3
 8018028:	d902      	bls.n	8018030 <ETH_Prepare_Tx_Descriptors+0x198>
 801802a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801802c:	3b04      	subs	r3, #4
 801802e:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8018030:	697b      	ldr	r3, [r7, #20]
 8018032:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018038:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 801803a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801803c:	3301      	adds	r3, #1
 801803e:	62bb      	str	r3, [r7, #40]	; 0x28
 8018040:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018044:	429a      	cmp	r2, r3
 8018046:	d3e1      	bcc.n	801800c <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8018048:	2302      	movs	r3, #2
 801804a:	e051      	b.n	80180f0 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 801804c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801804e:	3301      	adds	r3, #1
 8018050:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8018052:	69fb      	ldr	r3, [r7, #28]
 8018054:	689b      	ldr	r3, [r3, #8]
 8018056:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8018058:	69fb      	ldr	r3, [r7, #28]
 801805a:	681b      	ldr	r3, [r3, #0]
 801805c:	461a      	mov	r2, r3
 801805e:	6a3b      	ldr	r3, [r7, #32]
 8018060:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8018062:	6a3b      	ldr	r3, [r7, #32]
 8018064:	685a      	ldr	r2, [r3, #4]
 8018066:	4b25      	ldr	r3, [pc, #148]	; (80180fc <ETH_Prepare_Tx_Descriptors+0x264>)
 8018068:	4013      	ands	r3, r2
 801806a:	69fa      	ldr	r2, [r7, #28]
 801806c:	6852      	ldr	r2, [r2, #4]
 801806e:	431a      	orrs	r2, r3
 8018070:	6a3b      	ldr	r3, [r7, #32]
 8018072:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8018074:	69bb      	ldr	r3, [r7, #24]
 8018076:	3301      	adds	r3, #1
 8018078:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 801807a:	f3bf 8f5f 	dmb	sy
}
 801807e:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8018080:	6a3b      	ldr	r3, [r7, #32]
 8018082:	681b      	ldr	r3, [r3, #0]
 8018084:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8018088:	6a3b      	ldr	r3, [r7, #32]
 801808a:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 801808c:	69fb      	ldr	r3, [r7, #28]
 801808e:	689b      	ldr	r3, [r3, #8]
 8018090:	2b00      	cmp	r3, #0
 8018092:	f47f af78 	bne.w	8017f86 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 8018096:	687b      	ldr	r3, [r7, #4]
 8018098:	2b00      	cmp	r3, #0
 801809a:	d006      	beq.n	80180aa <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 801809c:	6a3b      	ldr	r3, [r7, #32]
 801809e:	681b      	ldr	r3, [r3, #0]
 80180a0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80180a4:	6a3b      	ldr	r3, [r7, #32]
 80180a6:	601a      	str	r2, [r3, #0]
 80180a8:	e005      	b.n	80180b6 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80180aa:	6a3b      	ldr	r3, [r7, #32]
 80180ac:	681b      	ldr	r3, [r3, #0]
 80180ae:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80180b2:	6a3b      	ldr	r3, [r7, #32]
 80180b4:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80180b6:	6a3b      	ldr	r3, [r7, #32]
 80180b8:	681b      	ldr	r3, [r3, #0]
 80180ba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80180be:	6a3b      	ldr	r3, [r7, #32]
 80180c0:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80180c2:	697b      	ldr	r3, [r7, #20]
 80180c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80180c6:	6979      	ldr	r1, [r7, #20]
 80180c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180ca:	3304      	adds	r3, #4
 80180cc:	009b      	lsls	r3, r3, #2
 80180ce:	440b      	add	r3, r1
 80180d0:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80180d2:	697b      	ldr	r3, [r7, #20]
 80180d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80180d6:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80180d8:	b672      	cpsid	i
}
 80180da:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80180dc:	697b      	ldr	r3, [r7, #20]
 80180de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80180e0:	69bb      	ldr	r3, [r7, #24]
 80180e2:	4413      	add	r3, r2
 80180e4:	1c5a      	adds	r2, r3, #1
 80180e6:	697b      	ldr	r3, [r7, #20]
 80180e8:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80180ea:	b662      	cpsie	i
}
 80180ec:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80180ee:	2300      	movs	r3, #0
}
 80180f0:	4618      	mov	r0, r3
 80180f2:	3734      	adds	r7, #52	; 0x34
 80180f4:	46bd      	mov	sp, r7
 80180f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180fa:	4770      	bx	lr
 80180fc:	ffffe000 	.word	0xffffe000

08018100 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8018100:	b480      	push	{r7}
 8018102:	b089      	sub	sp, #36	; 0x24
 8018104:	af00      	add	r7, sp, #0
 8018106:	6078      	str	r0, [r7, #4]
 8018108:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 801810a:	2300      	movs	r3, #0
 801810c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 801810e:	2300      	movs	r3, #0
 8018110:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8018112:	2300      	movs	r3, #0
 8018114:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8018116:	2300      	movs	r3, #0
 8018118:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 801811a:	2300      	movs	r3, #0
 801811c:	61fb      	str	r3, [r7, #28]
 801811e:	e175      	b.n	801840c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8018120:	2201      	movs	r2, #1
 8018122:	69fb      	ldr	r3, [r7, #28]
 8018124:	fa02 f303 	lsl.w	r3, r2, r3
 8018128:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801812a:	683b      	ldr	r3, [r7, #0]
 801812c:	681b      	ldr	r3, [r3, #0]
 801812e:	697a      	ldr	r2, [r7, #20]
 8018130:	4013      	ands	r3, r2
 8018132:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8018134:	693a      	ldr	r2, [r7, #16]
 8018136:	697b      	ldr	r3, [r7, #20]
 8018138:	429a      	cmp	r2, r3
 801813a:	f040 8164 	bne.w	8018406 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801813e:	683b      	ldr	r3, [r7, #0]
 8018140:	685b      	ldr	r3, [r3, #4]
 8018142:	f003 0303 	and.w	r3, r3, #3
 8018146:	2b01      	cmp	r3, #1
 8018148:	d005      	beq.n	8018156 <HAL_GPIO_Init+0x56>
 801814a:	683b      	ldr	r3, [r7, #0]
 801814c:	685b      	ldr	r3, [r3, #4]
 801814e:	f003 0303 	and.w	r3, r3, #3
 8018152:	2b02      	cmp	r3, #2
 8018154:	d130      	bne.n	80181b8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8018156:	687b      	ldr	r3, [r7, #4]
 8018158:	689b      	ldr	r3, [r3, #8]
 801815a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 801815c:	69fb      	ldr	r3, [r7, #28]
 801815e:	005b      	lsls	r3, r3, #1
 8018160:	2203      	movs	r2, #3
 8018162:	fa02 f303 	lsl.w	r3, r2, r3
 8018166:	43db      	mvns	r3, r3
 8018168:	69ba      	ldr	r2, [r7, #24]
 801816a:	4013      	ands	r3, r2
 801816c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 801816e:	683b      	ldr	r3, [r7, #0]
 8018170:	68da      	ldr	r2, [r3, #12]
 8018172:	69fb      	ldr	r3, [r7, #28]
 8018174:	005b      	lsls	r3, r3, #1
 8018176:	fa02 f303 	lsl.w	r3, r2, r3
 801817a:	69ba      	ldr	r2, [r7, #24]
 801817c:	4313      	orrs	r3, r2
 801817e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8018180:	687b      	ldr	r3, [r7, #4]
 8018182:	69ba      	ldr	r2, [r7, #24]
 8018184:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8018186:	687b      	ldr	r3, [r7, #4]
 8018188:	685b      	ldr	r3, [r3, #4]
 801818a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 801818c:	2201      	movs	r2, #1
 801818e:	69fb      	ldr	r3, [r7, #28]
 8018190:	fa02 f303 	lsl.w	r3, r2, r3
 8018194:	43db      	mvns	r3, r3
 8018196:	69ba      	ldr	r2, [r7, #24]
 8018198:	4013      	ands	r3, r2
 801819a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801819c:	683b      	ldr	r3, [r7, #0]
 801819e:	685b      	ldr	r3, [r3, #4]
 80181a0:	091b      	lsrs	r3, r3, #4
 80181a2:	f003 0201 	and.w	r2, r3, #1
 80181a6:	69fb      	ldr	r3, [r7, #28]
 80181a8:	fa02 f303 	lsl.w	r3, r2, r3
 80181ac:	69ba      	ldr	r2, [r7, #24]
 80181ae:	4313      	orrs	r3, r2
 80181b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80181b2:	687b      	ldr	r3, [r7, #4]
 80181b4:	69ba      	ldr	r2, [r7, #24]
 80181b6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80181b8:	683b      	ldr	r3, [r7, #0]
 80181ba:	685b      	ldr	r3, [r3, #4]
 80181bc:	f003 0303 	and.w	r3, r3, #3
 80181c0:	2b03      	cmp	r3, #3
 80181c2:	d017      	beq.n	80181f4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80181c4:	687b      	ldr	r3, [r7, #4]
 80181c6:	68db      	ldr	r3, [r3, #12]
 80181c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80181ca:	69fb      	ldr	r3, [r7, #28]
 80181cc:	005b      	lsls	r3, r3, #1
 80181ce:	2203      	movs	r2, #3
 80181d0:	fa02 f303 	lsl.w	r3, r2, r3
 80181d4:	43db      	mvns	r3, r3
 80181d6:	69ba      	ldr	r2, [r7, #24]
 80181d8:	4013      	ands	r3, r2
 80181da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80181dc:	683b      	ldr	r3, [r7, #0]
 80181de:	689a      	ldr	r2, [r3, #8]
 80181e0:	69fb      	ldr	r3, [r7, #28]
 80181e2:	005b      	lsls	r3, r3, #1
 80181e4:	fa02 f303 	lsl.w	r3, r2, r3
 80181e8:	69ba      	ldr	r2, [r7, #24]
 80181ea:	4313      	orrs	r3, r2
 80181ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80181ee:	687b      	ldr	r3, [r7, #4]
 80181f0:	69ba      	ldr	r2, [r7, #24]
 80181f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80181f4:	683b      	ldr	r3, [r7, #0]
 80181f6:	685b      	ldr	r3, [r3, #4]
 80181f8:	f003 0303 	and.w	r3, r3, #3
 80181fc:	2b02      	cmp	r3, #2
 80181fe:	d123      	bne.n	8018248 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8018200:	69fb      	ldr	r3, [r7, #28]
 8018202:	08da      	lsrs	r2, r3, #3
 8018204:	687b      	ldr	r3, [r7, #4]
 8018206:	3208      	adds	r2, #8
 8018208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801820c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 801820e:	69fb      	ldr	r3, [r7, #28]
 8018210:	f003 0307 	and.w	r3, r3, #7
 8018214:	009b      	lsls	r3, r3, #2
 8018216:	220f      	movs	r2, #15
 8018218:	fa02 f303 	lsl.w	r3, r2, r3
 801821c:	43db      	mvns	r3, r3
 801821e:	69ba      	ldr	r2, [r7, #24]
 8018220:	4013      	ands	r3, r2
 8018222:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8018224:	683b      	ldr	r3, [r7, #0]
 8018226:	691a      	ldr	r2, [r3, #16]
 8018228:	69fb      	ldr	r3, [r7, #28]
 801822a:	f003 0307 	and.w	r3, r3, #7
 801822e:	009b      	lsls	r3, r3, #2
 8018230:	fa02 f303 	lsl.w	r3, r2, r3
 8018234:	69ba      	ldr	r2, [r7, #24]
 8018236:	4313      	orrs	r3, r2
 8018238:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 801823a:	69fb      	ldr	r3, [r7, #28]
 801823c:	08da      	lsrs	r2, r3, #3
 801823e:	687b      	ldr	r3, [r7, #4]
 8018240:	3208      	adds	r2, #8
 8018242:	69b9      	ldr	r1, [r7, #24]
 8018244:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8018248:	687b      	ldr	r3, [r7, #4]
 801824a:	681b      	ldr	r3, [r3, #0]
 801824c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 801824e:	69fb      	ldr	r3, [r7, #28]
 8018250:	005b      	lsls	r3, r3, #1
 8018252:	2203      	movs	r2, #3
 8018254:	fa02 f303 	lsl.w	r3, r2, r3
 8018258:	43db      	mvns	r3, r3
 801825a:	69ba      	ldr	r2, [r7, #24]
 801825c:	4013      	ands	r3, r2
 801825e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8018260:	683b      	ldr	r3, [r7, #0]
 8018262:	685b      	ldr	r3, [r3, #4]
 8018264:	f003 0203 	and.w	r2, r3, #3
 8018268:	69fb      	ldr	r3, [r7, #28]
 801826a:	005b      	lsls	r3, r3, #1
 801826c:	fa02 f303 	lsl.w	r3, r2, r3
 8018270:	69ba      	ldr	r2, [r7, #24]
 8018272:	4313      	orrs	r3, r2
 8018274:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8018276:	687b      	ldr	r3, [r7, #4]
 8018278:	69ba      	ldr	r2, [r7, #24]
 801827a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 801827c:	683b      	ldr	r3, [r7, #0]
 801827e:	685b      	ldr	r3, [r3, #4]
 8018280:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8018284:	2b00      	cmp	r3, #0
 8018286:	f000 80be 	beq.w	8018406 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801828a:	4b66      	ldr	r3, [pc, #408]	; (8018424 <HAL_GPIO_Init+0x324>)
 801828c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801828e:	4a65      	ldr	r2, [pc, #404]	; (8018424 <HAL_GPIO_Init+0x324>)
 8018290:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8018294:	6453      	str	r3, [r2, #68]	; 0x44
 8018296:	4b63      	ldr	r3, [pc, #396]	; (8018424 <HAL_GPIO_Init+0x324>)
 8018298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801829a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801829e:	60fb      	str	r3, [r7, #12]
 80182a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80182a2:	4a61      	ldr	r2, [pc, #388]	; (8018428 <HAL_GPIO_Init+0x328>)
 80182a4:	69fb      	ldr	r3, [r7, #28]
 80182a6:	089b      	lsrs	r3, r3, #2
 80182a8:	3302      	adds	r3, #2
 80182aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80182ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80182b0:	69fb      	ldr	r3, [r7, #28]
 80182b2:	f003 0303 	and.w	r3, r3, #3
 80182b6:	009b      	lsls	r3, r3, #2
 80182b8:	220f      	movs	r2, #15
 80182ba:	fa02 f303 	lsl.w	r3, r2, r3
 80182be:	43db      	mvns	r3, r3
 80182c0:	69ba      	ldr	r2, [r7, #24]
 80182c2:	4013      	ands	r3, r2
 80182c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80182c6:	687b      	ldr	r3, [r7, #4]
 80182c8:	4a58      	ldr	r2, [pc, #352]	; (801842c <HAL_GPIO_Init+0x32c>)
 80182ca:	4293      	cmp	r3, r2
 80182cc:	d037      	beq.n	801833e <HAL_GPIO_Init+0x23e>
 80182ce:	687b      	ldr	r3, [r7, #4]
 80182d0:	4a57      	ldr	r2, [pc, #348]	; (8018430 <HAL_GPIO_Init+0x330>)
 80182d2:	4293      	cmp	r3, r2
 80182d4:	d031      	beq.n	801833a <HAL_GPIO_Init+0x23a>
 80182d6:	687b      	ldr	r3, [r7, #4]
 80182d8:	4a56      	ldr	r2, [pc, #344]	; (8018434 <HAL_GPIO_Init+0x334>)
 80182da:	4293      	cmp	r3, r2
 80182dc:	d02b      	beq.n	8018336 <HAL_GPIO_Init+0x236>
 80182de:	687b      	ldr	r3, [r7, #4]
 80182e0:	4a55      	ldr	r2, [pc, #340]	; (8018438 <HAL_GPIO_Init+0x338>)
 80182e2:	4293      	cmp	r3, r2
 80182e4:	d025      	beq.n	8018332 <HAL_GPIO_Init+0x232>
 80182e6:	687b      	ldr	r3, [r7, #4]
 80182e8:	4a54      	ldr	r2, [pc, #336]	; (801843c <HAL_GPIO_Init+0x33c>)
 80182ea:	4293      	cmp	r3, r2
 80182ec:	d01f      	beq.n	801832e <HAL_GPIO_Init+0x22e>
 80182ee:	687b      	ldr	r3, [r7, #4]
 80182f0:	4a53      	ldr	r2, [pc, #332]	; (8018440 <HAL_GPIO_Init+0x340>)
 80182f2:	4293      	cmp	r3, r2
 80182f4:	d019      	beq.n	801832a <HAL_GPIO_Init+0x22a>
 80182f6:	687b      	ldr	r3, [r7, #4]
 80182f8:	4a52      	ldr	r2, [pc, #328]	; (8018444 <HAL_GPIO_Init+0x344>)
 80182fa:	4293      	cmp	r3, r2
 80182fc:	d013      	beq.n	8018326 <HAL_GPIO_Init+0x226>
 80182fe:	687b      	ldr	r3, [r7, #4]
 8018300:	4a51      	ldr	r2, [pc, #324]	; (8018448 <HAL_GPIO_Init+0x348>)
 8018302:	4293      	cmp	r3, r2
 8018304:	d00d      	beq.n	8018322 <HAL_GPIO_Init+0x222>
 8018306:	687b      	ldr	r3, [r7, #4]
 8018308:	4a50      	ldr	r2, [pc, #320]	; (801844c <HAL_GPIO_Init+0x34c>)
 801830a:	4293      	cmp	r3, r2
 801830c:	d007      	beq.n	801831e <HAL_GPIO_Init+0x21e>
 801830e:	687b      	ldr	r3, [r7, #4]
 8018310:	4a4f      	ldr	r2, [pc, #316]	; (8018450 <HAL_GPIO_Init+0x350>)
 8018312:	4293      	cmp	r3, r2
 8018314:	d101      	bne.n	801831a <HAL_GPIO_Init+0x21a>
 8018316:	2309      	movs	r3, #9
 8018318:	e012      	b.n	8018340 <HAL_GPIO_Init+0x240>
 801831a:	230a      	movs	r3, #10
 801831c:	e010      	b.n	8018340 <HAL_GPIO_Init+0x240>
 801831e:	2308      	movs	r3, #8
 8018320:	e00e      	b.n	8018340 <HAL_GPIO_Init+0x240>
 8018322:	2307      	movs	r3, #7
 8018324:	e00c      	b.n	8018340 <HAL_GPIO_Init+0x240>
 8018326:	2306      	movs	r3, #6
 8018328:	e00a      	b.n	8018340 <HAL_GPIO_Init+0x240>
 801832a:	2305      	movs	r3, #5
 801832c:	e008      	b.n	8018340 <HAL_GPIO_Init+0x240>
 801832e:	2304      	movs	r3, #4
 8018330:	e006      	b.n	8018340 <HAL_GPIO_Init+0x240>
 8018332:	2303      	movs	r3, #3
 8018334:	e004      	b.n	8018340 <HAL_GPIO_Init+0x240>
 8018336:	2302      	movs	r3, #2
 8018338:	e002      	b.n	8018340 <HAL_GPIO_Init+0x240>
 801833a:	2301      	movs	r3, #1
 801833c:	e000      	b.n	8018340 <HAL_GPIO_Init+0x240>
 801833e:	2300      	movs	r3, #0
 8018340:	69fa      	ldr	r2, [r7, #28]
 8018342:	f002 0203 	and.w	r2, r2, #3
 8018346:	0092      	lsls	r2, r2, #2
 8018348:	4093      	lsls	r3, r2
 801834a:	69ba      	ldr	r2, [r7, #24]
 801834c:	4313      	orrs	r3, r2
 801834e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8018350:	4935      	ldr	r1, [pc, #212]	; (8018428 <HAL_GPIO_Init+0x328>)
 8018352:	69fb      	ldr	r3, [r7, #28]
 8018354:	089b      	lsrs	r3, r3, #2
 8018356:	3302      	adds	r3, #2
 8018358:	69ba      	ldr	r2, [r7, #24]
 801835a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801835e:	4b3d      	ldr	r3, [pc, #244]	; (8018454 <HAL_GPIO_Init+0x354>)
 8018360:	689b      	ldr	r3, [r3, #8]
 8018362:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8018364:	693b      	ldr	r3, [r7, #16]
 8018366:	43db      	mvns	r3, r3
 8018368:	69ba      	ldr	r2, [r7, #24]
 801836a:	4013      	ands	r3, r2
 801836c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 801836e:	683b      	ldr	r3, [r7, #0]
 8018370:	685b      	ldr	r3, [r3, #4]
 8018372:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8018376:	2b00      	cmp	r3, #0
 8018378:	d003      	beq.n	8018382 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 801837a:	69ba      	ldr	r2, [r7, #24]
 801837c:	693b      	ldr	r3, [r7, #16]
 801837e:	4313      	orrs	r3, r2
 8018380:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8018382:	4a34      	ldr	r2, [pc, #208]	; (8018454 <HAL_GPIO_Init+0x354>)
 8018384:	69bb      	ldr	r3, [r7, #24]
 8018386:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8018388:	4b32      	ldr	r3, [pc, #200]	; (8018454 <HAL_GPIO_Init+0x354>)
 801838a:	68db      	ldr	r3, [r3, #12]
 801838c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801838e:	693b      	ldr	r3, [r7, #16]
 8018390:	43db      	mvns	r3, r3
 8018392:	69ba      	ldr	r2, [r7, #24]
 8018394:	4013      	ands	r3, r2
 8018396:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8018398:	683b      	ldr	r3, [r7, #0]
 801839a:	685b      	ldr	r3, [r3, #4]
 801839c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80183a0:	2b00      	cmp	r3, #0
 80183a2:	d003      	beq.n	80183ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80183a4:	69ba      	ldr	r2, [r7, #24]
 80183a6:	693b      	ldr	r3, [r7, #16]
 80183a8:	4313      	orrs	r3, r2
 80183aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80183ac:	4a29      	ldr	r2, [pc, #164]	; (8018454 <HAL_GPIO_Init+0x354>)
 80183ae:	69bb      	ldr	r3, [r7, #24]
 80183b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80183b2:	4b28      	ldr	r3, [pc, #160]	; (8018454 <HAL_GPIO_Init+0x354>)
 80183b4:	685b      	ldr	r3, [r3, #4]
 80183b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80183b8:	693b      	ldr	r3, [r7, #16]
 80183ba:	43db      	mvns	r3, r3
 80183bc:	69ba      	ldr	r2, [r7, #24]
 80183be:	4013      	ands	r3, r2
 80183c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80183c2:	683b      	ldr	r3, [r7, #0]
 80183c4:	685b      	ldr	r3, [r3, #4]
 80183c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80183ca:	2b00      	cmp	r3, #0
 80183cc:	d003      	beq.n	80183d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80183ce:	69ba      	ldr	r2, [r7, #24]
 80183d0:	693b      	ldr	r3, [r7, #16]
 80183d2:	4313      	orrs	r3, r2
 80183d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80183d6:	4a1f      	ldr	r2, [pc, #124]	; (8018454 <HAL_GPIO_Init+0x354>)
 80183d8:	69bb      	ldr	r3, [r7, #24]
 80183da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80183dc:	4b1d      	ldr	r3, [pc, #116]	; (8018454 <HAL_GPIO_Init+0x354>)
 80183de:	681b      	ldr	r3, [r3, #0]
 80183e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80183e2:	693b      	ldr	r3, [r7, #16]
 80183e4:	43db      	mvns	r3, r3
 80183e6:	69ba      	ldr	r2, [r7, #24]
 80183e8:	4013      	ands	r3, r2
 80183ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80183ec:	683b      	ldr	r3, [r7, #0]
 80183ee:	685b      	ldr	r3, [r3, #4]
 80183f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80183f4:	2b00      	cmp	r3, #0
 80183f6:	d003      	beq.n	8018400 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80183f8:	69ba      	ldr	r2, [r7, #24]
 80183fa:	693b      	ldr	r3, [r7, #16]
 80183fc:	4313      	orrs	r3, r2
 80183fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8018400:	4a14      	ldr	r2, [pc, #80]	; (8018454 <HAL_GPIO_Init+0x354>)
 8018402:	69bb      	ldr	r3, [r7, #24]
 8018404:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8018406:	69fb      	ldr	r3, [r7, #28]
 8018408:	3301      	adds	r3, #1
 801840a:	61fb      	str	r3, [r7, #28]
 801840c:	69fb      	ldr	r3, [r7, #28]
 801840e:	2b0f      	cmp	r3, #15
 8018410:	f67f ae86 	bls.w	8018120 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8018414:	bf00      	nop
 8018416:	bf00      	nop
 8018418:	3724      	adds	r7, #36	; 0x24
 801841a:	46bd      	mov	sp, r7
 801841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018420:	4770      	bx	lr
 8018422:	bf00      	nop
 8018424:	40023800 	.word	0x40023800
 8018428:	40013800 	.word	0x40013800
 801842c:	40020000 	.word	0x40020000
 8018430:	40020400 	.word	0x40020400
 8018434:	40020800 	.word	0x40020800
 8018438:	40020c00 	.word	0x40020c00
 801843c:	40021000 	.word	0x40021000
 8018440:	40021400 	.word	0x40021400
 8018444:	40021800 	.word	0x40021800
 8018448:	40021c00 	.word	0x40021c00
 801844c:	40022000 	.word	0x40022000
 8018450:	40022400 	.word	0x40022400
 8018454:	40013c00 	.word	0x40013c00

08018458 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8018458:	b480      	push	{r7}
 801845a:	b085      	sub	sp, #20
 801845c:	af00      	add	r7, sp, #0
 801845e:	6078      	str	r0, [r7, #4]
 8018460:	460b      	mov	r3, r1
 8018462:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8018464:	687b      	ldr	r3, [r7, #4]
 8018466:	691a      	ldr	r2, [r3, #16]
 8018468:	887b      	ldrh	r3, [r7, #2]
 801846a:	4013      	ands	r3, r2
 801846c:	2b00      	cmp	r3, #0
 801846e:	d002      	beq.n	8018476 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8018470:	2301      	movs	r3, #1
 8018472:	73fb      	strb	r3, [r7, #15]
 8018474:	e001      	b.n	801847a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8018476:	2300      	movs	r3, #0
 8018478:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801847a:	7bfb      	ldrb	r3, [r7, #15]
}
 801847c:	4618      	mov	r0, r3
 801847e:	3714      	adds	r7, #20
 8018480:	46bd      	mov	sp, r7
 8018482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018486:	4770      	bx	lr

08018488 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8018488:	b480      	push	{r7}
 801848a:	b083      	sub	sp, #12
 801848c:	af00      	add	r7, sp, #0
 801848e:	6078      	str	r0, [r7, #4]
 8018490:	460b      	mov	r3, r1
 8018492:	807b      	strh	r3, [r7, #2]
 8018494:	4613      	mov	r3, r2
 8018496:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8018498:	787b      	ldrb	r3, [r7, #1]
 801849a:	2b00      	cmp	r3, #0
 801849c:	d003      	beq.n	80184a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801849e:	887a      	ldrh	r2, [r7, #2]
 80184a0:	687b      	ldr	r3, [r7, #4]
 80184a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80184a4:	e003      	b.n	80184ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80184a6:	887b      	ldrh	r3, [r7, #2]
 80184a8:	041a      	lsls	r2, r3, #16
 80184aa:	687b      	ldr	r3, [r7, #4]
 80184ac:	619a      	str	r2, [r3, #24]
}
 80184ae:	bf00      	nop
 80184b0:	370c      	adds	r7, #12
 80184b2:	46bd      	mov	sp, r7
 80184b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184b8:	4770      	bx	lr

080184ba <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80184ba:	b480      	push	{r7}
 80184bc:	b085      	sub	sp, #20
 80184be:	af00      	add	r7, sp, #0
 80184c0:	6078      	str	r0, [r7, #4]
 80184c2:	460b      	mov	r3, r1
 80184c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80184c6:	687b      	ldr	r3, [r7, #4]
 80184c8:	695b      	ldr	r3, [r3, #20]
 80184ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80184cc:	887a      	ldrh	r2, [r7, #2]
 80184ce:	68fb      	ldr	r3, [r7, #12]
 80184d0:	4013      	ands	r3, r2
 80184d2:	041a      	lsls	r2, r3, #16
 80184d4:	68fb      	ldr	r3, [r7, #12]
 80184d6:	43d9      	mvns	r1, r3
 80184d8:	887b      	ldrh	r3, [r7, #2]
 80184da:	400b      	ands	r3, r1
 80184dc:	431a      	orrs	r2, r3
 80184de:	687b      	ldr	r3, [r7, #4]
 80184e0:	619a      	str	r2, [r3, #24]
}
 80184e2:	bf00      	nop
 80184e4:	3714      	adds	r7, #20
 80184e6:	46bd      	mov	sp, r7
 80184e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184ec:	4770      	bx	lr
	...

080184f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80184f0:	b580      	push	{r7, lr}
 80184f2:	b082      	sub	sp, #8
 80184f4:	af00      	add	r7, sp, #0
 80184f6:	4603      	mov	r3, r0
 80184f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80184fa:	4b08      	ldr	r3, [pc, #32]	; (801851c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80184fc:	695a      	ldr	r2, [r3, #20]
 80184fe:	88fb      	ldrh	r3, [r7, #6]
 8018500:	4013      	ands	r3, r2
 8018502:	2b00      	cmp	r3, #0
 8018504:	d006      	beq.n	8018514 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8018506:	4a05      	ldr	r2, [pc, #20]	; (801851c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8018508:	88fb      	ldrh	r3, [r7, #6]
 801850a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 801850c:	88fb      	ldrh	r3, [r7, #6]
 801850e:	4618      	mov	r0, r3
 8018510:	f000 f806 	bl	8018520 <HAL_GPIO_EXTI_Callback>
  }
}
 8018514:	bf00      	nop
 8018516:	3708      	adds	r7, #8
 8018518:	46bd      	mov	sp, r7
 801851a:	bd80      	pop	{r7, pc}
 801851c:	40013c00 	.word	0x40013c00

08018520 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8018520:	b480      	push	{r7}
 8018522:	b083      	sub	sp, #12
 8018524:	af00      	add	r7, sp, #0
 8018526:	4603      	mov	r3, r0
 8018528:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 801852a:	bf00      	nop
 801852c:	370c      	adds	r7, #12
 801852e:	46bd      	mov	sp, r7
 8018530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018534:	4770      	bx	lr
	...

08018538 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8018538:	b580      	push	{r7, lr}
 801853a:	b082      	sub	sp, #8
 801853c:	af00      	add	r7, sp, #0
 801853e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8018540:	687b      	ldr	r3, [r7, #4]
 8018542:	2b00      	cmp	r3, #0
 8018544:	d101      	bne.n	801854a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8018546:	2301      	movs	r3, #1
 8018548:	e07f      	b.n	801864a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801854a:	687b      	ldr	r3, [r7, #4]
 801854c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8018550:	b2db      	uxtb	r3, r3
 8018552:	2b00      	cmp	r3, #0
 8018554:	d106      	bne.n	8018564 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8018556:	687b      	ldr	r3, [r7, #4]
 8018558:	2200      	movs	r2, #0
 801855a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 801855e:	6878      	ldr	r0, [r7, #4]
 8018560:	f7fb fa34 	bl	80139cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8018564:	687b      	ldr	r3, [r7, #4]
 8018566:	2224      	movs	r2, #36	; 0x24
 8018568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801856c:	687b      	ldr	r3, [r7, #4]
 801856e:	681b      	ldr	r3, [r3, #0]
 8018570:	681a      	ldr	r2, [r3, #0]
 8018572:	687b      	ldr	r3, [r7, #4]
 8018574:	681b      	ldr	r3, [r3, #0]
 8018576:	f022 0201 	bic.w	r2, r2, #1
 801857a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 801857c:	687b      	ldr	r3, [r7, #4]
 801857e:	685a      	ldr	r2, [r3, #4]
 8018580:	687b      	ldr	r3, [r7, #4]
 8018582:	681b      	ldr	r3, [r3, #0]
 8018584:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8018588:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 801858a:	687b      	ldr	r3, [r7, #4]
 801858c:	681b      	ldr	r3, [r3, #0]
 801858e:	689a      	ldr	r2, [r3, #8]
 8018590:	687b      	ldr	r3, [r7, #4]
 8018592:	681b      	ldr	r3, [r3, #0]
 8018594:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8018598:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801859a:	687b      	ldr	r3, [r7, #4]
 801859c:	68db      	ldr	r3, [r3, #12]
 801859e:	2b01      	cmp	r3, #1
 80185a0:	d107      	bne.n	80185b2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80185a2:	687b      	ldr	r3, [r7, #4]
 80185a4:	689a      	ldr	r2, [r3, #8]
 80185a6:	687b      	ldr	r3, [r7, #4]
 80185a8:	681b      	ldr	r3, [r3, #0]
 80185aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80185ae:	609a      	str	r2, [r3, #8]
 80185b0:	e006      	b.n	80185c0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80185b2:	687b      	ldr	r3, [r7, #4]
 80185b4:	689a      	ldr	r2, [r3, #8]
 80185b6:	687b      	ldr	r3, [r7, #4]
 80185b8:	681b      	ldr	r3, [r3, #0]
 80185ba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80185be:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80185c0:	687b      	ldr	r3, [r7, #4]
 80185c2:	68db      	ldr	r3, [r3, #12]
 80185c4:	2b02      	cmp	r3, #2
 80185c6:	d104      	bne.n	80185d2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80185c8:	687b      	ldr	r3, [r7, #4]
 80185ca:	681b      	ldr	r3, [r3, #0]
 80185cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80185d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80185d2:	687b      	ldr	r3, [r7, #4]
 80185d4:	681b      	ldr	r3, [r3, #0]
 80185d6:	6859      	ldr	r1, [r3, #4]
 80185d8:	687b      	ldr	r3, [r7, #4]
 80185da:	681a      	ldr	r2, [r3, #0]
 80185dc:	4b1d      	ldr	r3, [pc, #116]	; (8018654 <HAL_I2C_Init+0x11c>)
 80185de:	430b      	orrs	r3, r1
 80185e0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80185e2:	687b      	ldr	r3, [r7, #4]
 80185e4:	681b      	ldr	r3, [r3, #0]
 80185e6:	68da      	ldr	r2, [r3, #12]
 80185e8:	687b      	ldr	r3, [r7, #4]
 80185ea:	681b      	ldr	r3, [r3, #0]
 80185ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80185f0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80185f2:	687b      	ldr	r3, [r7, #4]
 80185f4:	691a      	ldr	r2, [r3, #16]
 80185f6:	687b      	ldr	r3, [r7, #4]
 80185f8:	695b      	ldr	r3, [r3, #20]
 80185fa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80185fe:	687b      	ldr	r3, [r7, #4]
 8018600:	699b      	ldr	r3, [r3, #24]
 8018602:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8018604:	687b      	ldr	r3, [r7, #4]
 8018606:	681b      	ldr	r3, [r3, #0]
 8018608:	430a      	orrs	r2, r1
 801860a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 801860c:	687b      	ldr	r3, [r7, #4]
 801860e:	69d9      	ldr	r1, [r3, #28]
 8018610:	687b      	ldr	r3, [r7, #4]
 8018612:	6a1a      	ldr	r2, [r3, #32]
 8018614:	687b      	ldr	r3, [r7, #4]
 8018616:	681b      	ldr	r3, [r3, #0]
 8018618:	430a      	orrs	r2, r1
 801861a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 801861c:	687b      	ldr	r3, [r7, #4]
 801861e:	681b      	ldr	r3, [r3, #0]
 8018620:	681a      	ldr	r2, [r3, #0]
 8018622:	687b      	ldr	r3, [r7, #4]
 8018624:	681b      	ldr	r3, [r3, #0]
 8018626:	f042 0201 	orr.w	r2, r2, #1
 801862a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801862c:	687b      	ldr	r3, [r7, #4]
 801862e:	2200      	movs	r2, #0
 8018630:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8018632:	687b      	ldr	r3, [r7, #4]
 8018634:	2220      	movs	r2, #32
 8018636:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 801863a:	687b      	ldr	r3, [r7, #4]
 801863c:	2200      	movs	r2, #0
 801863e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8018640:	687b      	ldr	r3, [r7, #4]
 8018642:	2200      	movs	r2, #0
 8018644:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8018648:	2300      	movs	r3, #0
}
 801864a:	4618      	mov	r0, r3
 801864c:	3708      	adds	r7, #8
 801864e:	46bd      	mov	sp, r7
 8018650:	bd80      	pop	{r7, pc}
 8018652:	bf00      	nop
 8018654:	02008000 	.word	0x02008000

08018658 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8018658:	b580      	push	{r7, lr}
 801865a:	b088      	sub	sp, #32
 801865c:	af02      	add	r7, sp, #8
 801865e:	60f8      	str	r0, [r7, #12]
 8018660:	4608      	mov	r0, r1
 8018662:	4611      	mov	r1, r2
 8018664:	461a      	mov	r2, r3
 8018666:	4603      	mov	r3, r0
 8018668:	817b      	strh	r3, [r7, #10]
 801866a:	460b      	mov	r3, r1
 801866c:	813b      	strh	r3, [r7, #8]
 801866e:	4613      	mov	r3, r2
 8018670:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8018672:	68fb      	ldr	r3, [r7, #12]
 8018674:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8018678:	b2db      	uxtb	r3, r3
 801867a:	2b20      	cmp	r3, #32
 801867c:	f040 80f9 	bne.w	8018872 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8018680:	6a3b      	ldr	r3, [r7, #32]
 8018682:	2b00      	cmp	r3, #0
 8018684:	d002      	beq.n	801868c <HAL_I2C_Mem_Write+0x34>
 8018686:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018688:	2b00      	cmp	r3, #0
 801868a:	d105      	bne.n	8018698 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 801868c:	68fb      	ldr	r3, [r7, #12]
 801868e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018692:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8018694:	2301      	movs	r3, #1
 8018696:	e0ed      	b.n	8018874 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8018698:	68fb      	ldr	r3, [r7, #12]
 801869a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801869e:	2b01      	cmp	r3, #1
 80186a0:	d101      	bne.n	80186a6 <HAL_I2C_Mem_Write+0x4e>
 80186a2:	2302      	movs	r3, #2
 80186a4:	e0e6      	b.n	8018874 <HAL_I2C_Mem_Write+0x21c>
 80186a6:	68fb      	ldr	r3, [r7, #12]
 80186a8:	2201      	movs	r2, #1
 80186aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80186ae:	f7fd fa1b 	bl	8015ae8 <HAL_GetTick>
 80186b2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80186b4:	697b      	ldr	r3, [r7, #20]
 80186b6:	9300      	str	r3, [sp, #0]
 80186b8:	2319      	movs	r3, #25
 80186ba:	2201      	movs	r2, #1
 80186bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80186c0:	68f8      	ldr	r0, [r7, #12]
 80186c2:	f000 fac3 	bl	8018c4c <I2C_WaitOnFlagUntilTimeout>
 80186c6:	4603      	mov	r3, r0
 80186c8:	2b00      	cmp	r3, #0
 80186ca:	d001      	beq.n	80186d0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80186cc:	2301      	movs	r3, #1
 80186ce:	e0d1      	b.n	8018874 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80186d0:	68fb      	ldr	r3, [r7, #12]
 80186d2:	2221      	movs	r2, #33	; 0x21
 80186d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80186d8:	68fb      	ldr	r3, [r7, #12]
 80186da:	2240      	movs	r2, #64	; 0x40
 80186dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80186e0:	68fb      	ldr	r3, [r7, #12]
 80186e2:	2200      	movs	r2, #0
 80186e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80186e6:	68fb      	ldr	r3, [r7, #12]
 80186e8:	6a3a      	ldr	r2, [r7, #32]
 80186ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80186ec:	68fb      	ldr	r3, [r7, #12]
 80186ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80186f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80186f2:	68fb      	ldr	r3, [r7, #12]
 80186f4:	2200      	movs	r2, #0
 80186f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80186f8:	88f8      	ldrh	r0, [r7, #6]
 80186fa:	893a      	ldrh	r2, [r7, #8]
 80186fc:	8979      	ldrh	r1, [r7, #10]
 80186fe:	697b      	ldr	r3, [r7, #20]
 8018700:	9301      	str	r3, [sp, #4]
 8018702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018704:	9300      	str	r3, [sp, #0]
 8018706:	4603      	mov	r3, r0
 8018708:	68f8      	ldr	r0, [r7, #12]
 801870a:	f000 f9d3 	bl	8018ab4 <I2C_RequestMemoryWrite>
 801870e:	4603      	mov	r3, r0
 8018710:	2b00      	cmp	r3, #0
 8018712:	d005      	beq.n	8018720 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8018714:	68fb      	ldr	r3, [r7, #12]
 8018716:	2200      	movs	r2, #0
 8018718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 801871c:	2301      	movs	r3, #1
 801871e:	e0a9      	b.n	8018874 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8018720:	68fb      	ldr	r3, [r7, #12]
 8018722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018724:	b29b      	uxth	r3, r3
 8018726:	2bff      	cmp	r3, #255	; 0xff
 8018728:	d90e      	bls.n	8018748 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801872a:	68fb      	ldr	r3, [r7, #12]
 801872c:	22ff      	movs	r2, #255	; 0xff
 801872e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8018730:	68fb      	ldr	r3, [r7, #12]
 8018732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018734:	b2da      	uxtb	r2, r3
 8018736:	8979      	ldrh	r1, [r7, #10]
 8018738:	2300      	movs	r3, #0
 801873a:	9300      	str	r3, [sp, #0]
 801873c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8018740:	68f8      	ldr	r0, [r7, #12]
 8018742:	f000 fc1f 	bl	8018f84 <I2C_TransferConfig>
 8018746:	e00f      	b.n	8018768 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8018748:	68fb      	ldr	r3, [r7, #12]
 801874a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801874c:	b29a      	uxth	r2, r3
 801874e:	68fb      	ldr	r3, [r7, #12]
 8018750:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8018752:	68fb      	ldr	r3, [r7, #12]
 8018754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018756:	b2da      	uxtb	r2, r3
 8018758:	8979      	ldrh	r1, [r7, #10]
 801875a:	2300      	movs	r3, #0
 801875c:	9300      	str	r3, [sp, #0]
 801875e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8018762:	68f8      	ldr	r0, [r7, #12]
 8018764:	f000 fc0e 	bl	8018f84 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8018768:	697a      	ldr	r2, [r7, #20]
 801876a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801876c:	68f8      	ldr	r0, [r7, #12]
 801876e:	f000 faad 	bl	8018ccc <I2C_WaitOnTXISFlagUntilTimeout>
 8018772:	4603      	mov	r3, r0
 8018774:	2b00      	cmp	r3, #0
 8018776:	d001      	beq.n	801877c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8018778:	2301      	movs	r3, #1
 801877a:	e07b      	b.n	8018874 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 801877c:	68fb      	ldr	r3, [r7, #12]
 801877e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018780:	781a      	ldrb	r2, [r3, #0]
 8018782:	68fb      	ldr	r3, [r7, #12]
 8018784:	681b      	ldr	r3, [r3, #0]
 8018786:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8018788:	68fb      	ldr	r3, [r7, #12]
 801878a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801878c:	1c5a      	adds	r2, r3, #1
 801878e:	68fb      	ldr	r3, [r7, #12]
 8018790:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8018792:	68fb      	ldr	r3, [r7, #12]
 8018794:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018796:	b29b      	uxth	r3, r3
 8018798:	3b01      	subs	r3, #1
 801879a:	b29a      	uxth	r2, r3
 801879c:	68fb      	ldr	r3, [r7, #12]
 801879e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80187a0:	68fb      	ldr	r3, [r7, #12]
 80187a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80187a4:	3b01      	subs	r3, #1
 80187a6:	b29a      	uxth	r2, r3
 80187a8:	68fb      	ldr	r3, [r7, #12]
 80187aa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80187ac:	68fb      	ldr	r3, [r7, #12]
 80187ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80187b0:	b29b      	uxth	r3, r3
 80187b2:	2b00      	cmp	r3, #0
 80187b4:	d034      	beq.n	8018820 <HAL_I2C_Mem_Write+0x1c8>
 80187b6:	68fb      	ldr	r3, [r7, #12]
 80187b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80187ba:	2b00      	cmp	r3, #0
 80187bc:	d130      	bne.n	8018820 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80187be:	697b      	ldr	r3, [r7, #20]
 80187c0:	9300      	str	r3, [sp, #0]
 80187c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187c4:	2200      	movs	r2, #0
 80187c6:	2180      	movs	r1, #128	; 0x80
 80187c8:	68f8      	ldr	r0, [r7, #12]
 80187ca:	f000 fa3f 	bl	8018c4c <I2C_WaitOnFlagUntilTimeout>
 80187ce:	4603      	mov	r3, r0
 80187d0:	2b00      	cmp	r3, #0
 80187d2:	d001      	beq.n	80187d8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80187d4:	2301      	movs	r3, #1
 80187d6:	e04d      	b.n	8018874 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80187d8:	68fb      	ldr	r3, [r7, #12]
 80187da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80187dc:	b29b      	uxth	r3, r3
 80187de:	2bff      	cmp	r3, #255	; 0xff
 80187e0:	d90e      	bls.n	8018800 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80187e2:	68fb      	ldr	r3, [r7, #12]
 80187e4:	22ff      	movs	r2, #255	; 0xff
 80187e6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80187e8:	68fb      	ldr	r3, [r7, #12]
 80187ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80187ec:	b2da      	uxtb	r2, r3
 80187ee:	8979      	ldrh	r1, [r7, #10]
 80187f0:	2300      	movs	r3, #0
 80187f2:	9300      	str	r3, [sp, #0]
 80187f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80187f8:	68f8      	ldr	r0, [r7, #12]
 80187fa:	f000 fbc3 	bl	8018f84 <I2C_TransferConfig>
 80187fe:	e00f      	b.n	8018820 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8018800:	68fb      	ldr	r3, [r7, #12]
 8018802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018804:	b29a      	uxth	r2, r3
 8018806:	68fb      	ldr	r3, [r7, #12]
 8018808:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801880a:	68fb      	ldr	r3, [r7, #12]
 801880c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801880e:	b2da      	uxtb	r2, r3
 8018810:	8979      	ldrh	r1, [r7, #10]
 8018812:	2300      	movs	r3, #0
 8018814:	9300      	str	r3, [sp, #0]
 8018816:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801881a:	68f8      	ldr	r0, [r7, #12]
 801881c:	f000 fbb2 	bl	8018f84 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8018820:	68fb      	ldr	r3, [r7, #12]
 8018822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018824:	b29b      	uxth	r3, r3
 8018826:	2b00      	cmp	r3, #0
 8018828:	d19e      	bne.n	8018768 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801882a:	697a      	ldr	r2, [r7, #20]
 801882c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801882e:	68f8      	ldr	r0, [r7, #12]
 8018830:	f000 fa8c 	bl	8018d4c <I2C_WaitOnSTOPFlagUntilTimeout>
 8018834:	4603      	mov	r3, r0
 8018836:	2b00      	cmp	r3, #0
 8018838:	d001      	beq.n	801883e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 801883a:	2301      	movs	r3, #1
 801883c:	e01a      	b.n	8018874 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801883e:	68fb      	ldr	r3, [r7, #12]
 8018840:	681b      	ldr	r3, [r3, #0]
 8018842:	2220      	movs	r2, #32
 8018844:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8018846:	68fb      	ldr	r3, [r7, #12]
 8018848:	681b      	ldr	r3, [r3, #0]
 801884a:	6859      	ldr	r1, [r3, #4]
 801884c:	68fb      	ldr	r3, [r7, #12]
 801884e:	681a      	ldr	r2, [r3, #0]
 8018850:	4b0a      	ldr	r3, [pc, #40]	; (801887c <HAL_I2C_Mem_Write+0x224>)
 8018852:	400b      	ands	r3, r1
 8018854:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8018856:	68fb      	ldr	r3, [r7, #12]
 8018858:	2220      	movs	r2, #32
 801885a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801885e:	68fb      	ldr	r3, [r7, #12]
 8018860:	2200      	movs	r2, #0
 8018862:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018866:	68fb      	ldr	r3, [r7, #12]
 8018868:	2200      	movs	r2, #0
 801886a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801886e:	2300      	movs	r3, #0
 8018870:	e000      	b.n	8018874 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8018872:	2302      	movs	r3, #2
  }
}
 8018874:	4618      	mov	r0, r3
 8018876:	3718      	adds	r7, #24
 8018878:	46bd      	mov	sp, r7
 801887a:	bd80      	pop	{r7, pc}
 801887c:	fe00e800 	.word	0xfe00e800

08018880 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8018880:	b580      	push	{r7, lr}
 8018882:	b088      	sub	sp, #32
 8018884:	af02      	add	r7, sp, #8
 8018886:	60f8      	str	r0, [r7, #12]
 8018888:	4608      	mov	r0, r1
 801888a:	4611      	mov	r1, r2
 801888c:	461a      	mov	r2, r3
 801888e:	4603      	mov	r3, r0
 8018890:	817b      	strh	r3, [r7, #10]
 8018892:	460b      	mov	r3, r1
 8018894:	813b      	strh	r3, [r7, #8]
 8018896:	4613      	mov	r3, r2
 8018898:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801889a:	68fb      	ldr	r3, [r7, #12]
 801889c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80188a0:	b2db      	uxtb	r3, r3
 80188a2:	2b20      	cmp	r3, #32
 80188a4:	f040 80fd 	bne.w	8018aa2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80188a8:	6a3b      	ldr	r3, [r7, #32]
 80188aa:	2b00      	cmp	r3, #0
 80188ac:	d002      	beq.n	80188b4 <HAL_I2C_Mem_Read+0x34>
 80188ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80188b0:	2b00      	cmp	r3, #0
 80188b2:	d105      	bne.n	80188c0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80188b4:	68fb      	ldr	r3, [r7, #12]
 80188b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80188ba:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80188bc:	2301      	movs	r3, #1
 80188be:	e0f1      	b.n	8018aa4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80188c0:	68fb      	ldr	r3, [r7, #12]
 80188c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80188c6:	2b01      	cmp	r3, #1
 80188c8:	d101      	bne.n	80188ce <HAL_I2C_Mem_Read+0x4e>
 80188ca:	2302      	movs	r3, #2
 80188cc:	e0ea      	b.n	8018aa4 <HAL_I2C_Mem_Read+0x224>
 80188ce:	68fb      	ldr	r3, [r7, #12]
 80188d0:	2201      	movs	r2, #1
 80188d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80188d6:	f7fd f907 	bl	8015ae8 <HAL_GetTick>
 80188da:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80188dc:	697b      	ldr	r3, [r7, #20]
 80188de:	9300      	str	r3, [sp, #0]
 80188e0:	2319      	movs	r3, #25
 80188e2:	2201      	movs	r2, #1
 80188e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80188e8:	68f8      	ldr	r0, [r7, #12]
 80188ea:	f000 f9af 	bl	8018c4c <I2C_WaitOnFlagUntilTimeout>
 80188ee:	4603      	mov	r3, r0
 80188f0:	2b00      	cmp	r3, #0
 80188f2:	d001      	beq.n	80188f8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80188f4:	2301      	movs	r3, #1
 80188f6:	e0d5      	b.n	8018aa4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80188f8:	68fb      	ldr	r3, [r7, #12]
 80188fa:	2222      	movs	r2, #34	; 0x22
 80188fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8018900:	68fb      	ldr	r3, [r7, #12]
 8018902:	2240      	movs	r2, #64	; 0x40
 8018904:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8018908:	68fb      	ldr	r3, [r7, #12]
 801890a:	2200      	movs	r2, #0
 801890c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801890e:	68fb      	ldr	r3, [r7, #12]
 8018910:	6a3a      	ldr	r2, [r7, #32]
 8018912:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8018914:	68fb      	ldr	r3, [r7, #12]
 8018916:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018918:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 801891a:	68fb      	ldr	r3, [r7, #12]
 801891c:	2200      	movs	r2, #0
 801891e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8018920:	88f8      	ldrh	r0, [r7, #6]
 8018922:	893a      	ldrh	r2, [r7, #8]
 8018924:	8979      	ldrh	r1, [r7, #10]
 8018926:	697b      	ldr	r3, [r7, #20]
 8018928:	9301      	str	r3, [sp, #4]
 801892a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801892c:	9300      	str	r3, [sp, #0]
 801892e:	4603      	mov	r3, r0
 8018930:	68f8      	ldr	r0, [r7, #12]
 8018932:	f000 f913 	bl	8018b5c <I2C_RequestMemoryRead>
 8018936:	4603      	mov	r3, r0
 8018938:	2b00      	cmp	r3, #0
 801893a:	d005      	beq.n	8018948 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801893c:	68fb      	ldr	r3, [r7, #12]
 801893e:	2200      	movs	r2, #0
 8018940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8018944:	2301      	movs	r3, #1
 8018946:	e0ad      	b.n	8018aa4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8018948:	68fb      	ldr	r3, [r7, #12]
 801894a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801894c:	b29b      	uxth	r3, r3
 801894e:	2bff      	cmp	r3, #255	; 0xff
 8018950:	d90e      	bls.n	8018970 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8018952:	68fb      	ldr	r3, [r7, #12]
 8018954:	22ff      	movs	r2, #255	; 0xff
 8018956:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8018958:	68fb      	ldr	r3, [r7, #12]
 801895a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801895c:	b2da      	uxtb	r2, r3
 801895e:	8979      	ldrh	r1, [r7, #10]
 8018960:	4b52      	ldr	r3, [pc, #328]	; (8018aac <HAL_I2C_Mem_Read+0x22c>)
 8018962:	9300      	str	r3, [sp, #0]
 8018964:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8018968:	68f8      	ldr	r0, [r7, #12]
 801896a:	f000 fb0b 	bl	8018f84 <I2C_TransferConfig>
 801896e:	e00f      	b.n	8018990 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8018970:	68fb      	ldr	r3, [r7, #12]
 8018972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018974:	b29a      	uxth	r2, r3
 8018976:	68fb      	ldr	r3, [r7, #12]
 8018978:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801897a:	68fb      	ldr	r3, [r7, #12]
 801897c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801897e:	b2da      	uxtb	r2, r3
 8018980:	8979      	ldrh	r1, [r7, #10]
 8018982:	4b4a      	ldr	r3, [pc, #296]	; (8018aac <HAL_I2C_Mem_Read+0x22c>)
 8018984:	9300      	str	r3, [sp, #0]
 8018986:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801898a:	68f8      	ldr	r0, [r7, #12]
 801898c:	f000 fafa 	bl	8018f84 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8018990:	697b      	ldr	r3, [r7, #20]
 8018992:	9300      	str	r3, [sp, #0]
 8018994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018996:	2200      	movs	r2, #0
 8018998:	2104      	movs	r1, #4
 801899a:	68f8      	ldr	r0, [r7, #12]
 801899c:	f000 f956 	bl	8018c4c <I2C_WaitOnFlagUntilTimeout>
 80189a0:	4603      	mov	r3, r0
 80189a2:	2b00      	cmp	r3, #0
 80189a4:	d001      	beq.n	80189aa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80189a6:	2301      	movs	r3, #1
 80189a8:	e07c      	b.n	8018aa4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80189aa:	68fb      	ldr	r3, [r7, #12]
 80189ac:	681b      	ldr	r3, [r3, #0]
 80189ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80189b0:	68fb      	ldr	r3, [r7, #12]
 80189b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189b4:	b2d2      	uxtb	r2, r2
 80189b6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80189b8:	68fb      	ldr	r3, [r7, #12]
 80189ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189bc:	1c5a      	adds	r2, r3, #1
 80189be:	68fb      	ldr	r3, [r7, #12]
 80189c0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80189c2:	68fb      	ldr	r3, [r7, #12]
 80189c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80189c6:	3b01      	subs	r3, #1
 80189c8:	b29a      	uxth	r2, r3
 80189ca:	68fb      	ldr	r3, [r7, #12]
 80189cc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80189ce:	68fb      	ldr	r3, [r7, #12]
 80189d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80189d2:	b29b      	uxth	r3, r3
 80189d4:	3b01      	subs	r3, #1
 80189d6:	b29a      	uxth	r2, r3
 80189d8:	68fb      	ldr	r3, [r7, #12]
 80189da:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80189dc:	68fb      	ldr	r3, [r7, #12]
 80189de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80189e0:	b29b      	uxth	r3, r3
 80189e2:	2b00      	cmp	r3, #0
 80189e4:	d034      	beq.n	8018a50 <HAL_I2C_Mem_Read+0x1d0>
 80189e6:	68fb      	ldr	r3, [r7, #12]
 80189e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80189ea:	2b00      	cmp	r3, #0
 80189ec:	d130      	bne.n	8018a50 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80189ee:	697b      	ldr	r3, [r7, #20]
 80189f0:	9300      	str	r3, [sp, #0]
 80189f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189f4:	2200      	movs	r2, #0
 80189f6:	2180      	movs	r1, #128	; 0x80
 80189f8:	68f8      	ldr	r0, [r7, #12]
 80189fa:	f000 f927 	bl	8018c4c <I2C_WaitOnFlagUntilTimeout>
 80189fe:	4603      	mov	r3, r0
 8018a00:	2b00      	cmp	r3, #0
 8018a02:	d001      	beq.n	8018a08 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8018a04:	2301      	movs	r3, #1
 8018a06:	e04d      	b.n	8018aa4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8018a08:	68fb      	ldr	r3, [r7, #12]
 8018a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018a0c:	b29b      	uxth	r3, r3
 8018a0e:	2bff      	cmp	r3, #255	; 0xff
 8018a10:	d90e      	bls.n	8018a30 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8018a12:	68fb      	ldr	r3, [r7, #12]
 8018a14:	22ff      	movs	r2, #255	; 0xff
 8018a16:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8018a18:	68fb      	ldr	r3, [r7, #12]
 8018a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018a1c:	b2da      	uxtb	r2, r3
 8018a1e:	8979      	ldrh	r1, [r7, #10]
 8018a20:	2300      	movs	r3, #0
 8018a22:	9300      	str	r3, [sp, #0]
 8018a24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8018a28:	68f8      	ldr	r0, [r7, #12]
 8018a2a:	f000 faab 	bl	8018f84 <I2C_TransferConfig>
 8018a2e:	e00f      	b.n	8018a50 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8018a30:	68fb      	ldr	r3, [r7, #12]
 8018a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018a34:	b29a      	uxth	r2, r3
 8018a36:	68fb      	ldr	r3, [r7, #12]
 8018a38:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8018a3a:	68fb      	ldr	r3, [r7, #12]
 8018a3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018a3e:	b2da      	uxtb	r2, r3
 8018a40:	8979      	ldrh	r1, [r7, #10]
 8018a42:	2300      	movs	r3, #0
 8018a44:	9300      	str	r3, [sp, #0]
 8018a46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8018a4a:	68f8      	ldr	r0, [r7, #12]
 8018a4c:	f000 fa9a 	bl	8018f84 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8018a50:	68fb      	ldr	r3, [r7, #12]
 8018a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018a54:	b29b      	uxth	r3, r3
 8018a56:	2b00      	cmp	r3, #0
 8018a58:	d19a      	bne.n	8018990 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8018a5a:	697a      	ldr	r2, [r7, #20]
 8018a5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018a5e:	68f8      	ldr	r0, [r7, #12]
 8018a60:	f000 f974 	bl	8018d4c <I2C_WaitOnSTOPFlagUntilTimeout>
 8018a64:	4603      	mov	r3, r0
 8018a66:	2b00      	cmp	r3, #0
 8018a68:	d001      	beq.n	8018a6e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8018a6a:	2301      	movs	r3, #1
 8018a6c:	e01a      	b.n	8018aa4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8018a6e:	68fb      	ldr	r3, [r7, #12]
 8018a70:	681b      	ldr	r3, [r3, #0]
 8018a72:	2220      	movs	r2, #32
 8018a74:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8018a76:	68fb      	ldr	r3, [r7, #12]
 8018a78:	681b      	ldr	r3, [r3, #0]
 8018a7a:	6859      	ldr	r1, [r3, #4]
 8018a7c:	68fb      	ldr	r3, [r7, #12]
 8018a7e:	681a      	ldr	r2, [r3, #0]
 8018a80:	4b0b      	ldr	r3, [pc, #44]	; (8018ab0 <HAL_I2C_Mem_Read+0x230>)
 8018a82:	400b      	ands	r3, r1
 8018a84:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8018a86:	68fb      	ldr	r3, [r7, #12]
 8018a88:	2220      	movs	r2, #32
 8018a8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8018a8e:	68fb      	ldr	r3, [r7, #12]
 8018a90:	2200      	movs	r2, #0
 8018a92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018a96:	68fb      	ldr	r3, [r7, #12]
 8018a98:	2200      	movs	r2, #0
 8018a9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8018a9e:	2300      	movs	r3, #0
 8018aa0:	e000      	b.n	8018aa4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8018aa2:	2302      	movs	r3, #2
  }
}
 8018aa4:	4618      	mov	r0, r3
 8018aa6:	3718      	adds	r7, #24
 8018aa8:	46bd      	mov	sp, r7
 8018aaa:	bd80      	pop	{r7, pc}
 8018aac:	80002400 	.word	0x80002400
 8018ab0:	fe00e800 	.word	0xfe00e800

08018ab4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8018ab4:	b580      	push	{r7, lr}
 8018ab6:	b086      	sub	sp, #24
 8018ab8:	af02      	add	r7, sp, #8
 8018aba:	60f8      	str	r0, [r7, #12]
 8018abc:	4608      	mov	r0, r1
 8018abe:	4611      	mov	r1, r2
 8018ac0:	461a      	mov	r2, r3
 8018ac2:	4603      	mov	r3, r0
 8018ac4:	817b      	strh	r3, [r7, #10]
 8018ac6:	460b      	mov	r3, r1
 8018ac8:	813b      	strh	r3, [r7, #8]
 8018aca:	4613      	mov	r3, r2
 8018acc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8018ace:	88fb      	ldrh	r3, [r7, #6]
 8018ad0:	b2da      	uxtb	r2, r3
 8018ad2:	8979      	ldrh	r1, [r7, #10]
 8018ad4:	4b20      	ldr	r3, [pc, #128]	; (8018b58 <I2C_RequestMemoryWrite+0xa4>)
 8018ad6:	9300      	str	r3, [sp, #0]
 8018ad8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8018adc:	68f8      	ldr	r0, [r7, #12]
 8018ade:	f000 fa51 	bl	8018f84 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8018ae2:	69fa      	ldr	r2, [r7, #28]
 8018ae4:	69b9      	ldr	r1, [r7, #24]
 8018ae6:	68f8      	ldr	r0, [r7, #12]
 8018ae8:	f000 f8f0 	bl	8018ccc <I2C_WaitOnTXISFlagUntilTimeout>
 8018aec:	4603      	mov	r3, r0
 8018aee:	2b00      	cmp	r3, #0
 8018af0:	d001      	beq.n	8018af6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8018af2:	2301      	movs	r3, #1
 8018af4:	e02c      	b.n	8018b50 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8018af6:	88fb      	ldrh	r3, [r7, #6]
 8018af8:	2b01      	cmp	r3, #1
 8018afa:	d105      	bne.n	8018b08 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8018afc:	893b      	ldrh	r3, [r7, #8]
 8018afe:	b2da      	uxtb	r2, r3
 8018b00:	68fb      	ldr	r3, [r7, #12]
 8018b02:	681b      	ldr	r3, [r3, #0]
 8018b04:	629a      	str	r2, [r3, #40]	; 0x28
 8018b06:	e015      	b.n	8018b34 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8018b08:	893b      	ldrh	r3, [r7, #8]
 8018b0a:	0a1b      	lsrs	r3, r3, #8
 8018b0c:	b29b      	uxth	r3, r3
 8018b0e:	b2da      	uxtb	r2, r3
 8018b10:	68fb      	ldr	r3, [r7, #12]
 8018b12:	681b      	ldr	r3, [r3, #0]
 8018b14:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8018b16:	69fa      	ldr	r2, [r7, #28]
 8018b18:	69b9      	ldr	r1, [r7, #24]
 8018b1a:	68f8      	ldr	r0, [r7, #12]
 8018b1c:	f000 f8d6 	bl	8018ccc <I2C_WaitOnTXISFlagUntilTimeout>
 8018b20:	4603      	mov	r3, r0
 8018b22:	2b00      	cmp	r3, #0
 8018b24:	d001      	beq.n	8018b2a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8018b26:	2301      	movs	r3, #1
 8018b28:	e012      	b.n	8018b50 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8018b2a:	893b      	ldrh	r3, [r7, #8]
 8018b2c:	b2da      	uxtb	r2, r3
 8018b2e:	68fb      	ldr	r3, [r7, #12]
 8018b30:	681b      	ldr	r3, [r3, #0]
 8018b32:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8018b34:	69fb      	ldr	r3, [r7, #28]
 8018b36:	9300      	str	r3, [sp, #0]
 8018b38:	69bb      	ldr	r3, [r7, #24]
 8018b3a:	2200      	movs	r2, #0
 8018b3c:	2180      	movs	r1, #128	; 0x80
 8018b3e:	68f8      	ldr	r0, [r7, #12]
 8018b40:	f000 f884 	bl	8018c4c <I2C_WaitOnFlagUntilTimeout>
 8018b44:	4603      	mov	r3, r0
 8018b46:	2b00      	cmp	r3, #0
 8018b48:	d001      	beq.n	8018b4e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8018b4a:	2301      	movs	r3, #1
 8018b4c:	e000      	b.n	8018b50 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8018b4e:	2300      	movs	r3, #0
}
 8018b50:	4618      	mov	r0, r3
 8018b52:	3710      	adds	r7, #16
 8018b54:	46bd      	mov	sp, r7
 8018b56:	bd80      	pop	{r7, pc}
 8018b58:	80002000 	.word	0x80002000

08018b5c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8018b5c:	b580      	push	{r7, lr}
 8018b5e:	b086      	sub	sp, #24
 8018b60:	af02      	add	r7, sp, #8
 8018b62:	60f8      	str	r0, [r7, #12]
 8018b64:	4608      	mov	r0, r1
 8018b66:	4611      	mov	r1, r2
 8018b68:	461a      	mov	r2, r3
 8018b6a:	4603      	mov	r3, r0
 8018b6c:	817b      	strh	r3, [r7, #10]
 8018b6e:	460b      	mov	r3, r1
 8018b70:	813b      	strh	r3, [r7, #8]
 8018b72:	4613      	mov	r3, r2
 8018b74:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8018b76:	88fb      	ldrh	r3, [r7, #6]
 8018b78:	b2da      	uxtb	r2, r3
 8018b7a:	8979      	ldrh	r1, [r7, #10]
 8018b7c:	4b20      	ldr	r3, [pc, #128]	; (8018c00 <I2C_RequestMemoryRead+0xa4>)
 8018b7e:	9300      	str	r3, [sp, #0]
 8018b80:	2300      	movs	r3, #0
 8018b82:	68f8      	ldr	r0, [r7, #12]
 8018b84:	f000 f9fe 	bl	8018f84 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8018b88:	69fa      	ldr	r2, [r7, #28]
 8018b8a:	69b9      	ldr	r1, [r7, #24]
 8018b8c:	68f8      	ldr	r0, [r7, #12]
 8018b8e:	f000 f89d 	bl	8018ccc <I2C_WaitOnTXISFlagUntilTimeout>
 8018b92:	4603      	mov	r3, r0
 8018b94:	2b00      	cmp	r3, #0
 8018b96:	d001      	beq.n	8018b9c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8018b98:	2301      	movs	r3, #1
 8018b9a:	e02c      	b.n	8018bf6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8018b9c:	88fb      	ldrh	r3, [r7, #6]
 8018b9e:	2b01      	cmp	r3, #1
 8018ba0:	d105      	bne.n	8018bae <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8018ba2:	893b      	ldrh	r3, [r7, #8]
 8018ba4:	b2da      	uxtb	r2, r3
 8018ba6:	68fb      	ldr	r3, [r7, #12]
 8018ba8:	681b      	ldr	r3, [r3, #0]
 8018baa:	629a      	str	r2, [r3, #40]	; 0x28
 8018bac:	e015      	b.n	8018bda <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8018bae:	893b      	ldrh	r3, [r7, #8]
 8018bb0:	0a1b      	lsrs	r3, r3, #8
 8018bb2:	b29b      	uxth	r3, r3
 8018bb4:	b2da      	uxtb	r2, r3
 8018bb6:	68fb      	ldr	r3, [r7, #12]
 8018bb8:	681b      	ldr	r3, [r3, #0]
 8018bba:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8018bbc:	69fa      	ldr	r2, [r7, #28]
 8018bbe:	69b9      	ldr	r1, [r7, #24]
 8018bc0:	68f8      	ldr	r0, [r7, #12]
 8018bc2:	f000 f883 	bl	8018ccc <I2C_WaitOnTXISFlagUntilTimeout>
 8018bc6:	4603      	mov	r3, r0
 8018bc8:	2b00      	cmp	r3, #0
 8018bca:	d001      	beq.n	8018bd0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8018bcc:	2301      	movs	r3, #1
 8018bce:	e012      	b.n	8018bf6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8018bd0:	893b      	ldrh	r3, [r7, #8]
 8018bd2:	b2da      	uxtb	r2, r3
 8018bd4:	68fb      	ldr	r3, [r7, #12]
 8018bd6:	681b      	ldr	r3, [r3, #0]
 8018bd8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8018bda:	69fb      	ldr	r3, [r7, #28]
 8018bdc:	9300      	str	r3, [sp, #0]
 8018bde:	69bb      	ldr	r3, [r7, #24]
 8018be0:	2200      	movs	r2, #0
 8018be2:	2140      	movs	r1, #64	; 0x40
 8018be4:	68f8      	ldr	r0, [r7, #12]
 8018be6:	f000 f831 	bl	8018c4c <I2C_WaitOnFlagUntilTimeout>
 8018bea:	4603      	mov	r3, r0
 8018bec:	2b00      	cmp	r3, #0
 8018bee:	d001      	beq.n	8018bf4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8018bf0:	2301      	movs	r3, #1
 8018bf2:	e000      	b.n	8018bf6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8018bf4:	2300      	movs	r3, #0
}
 8018bf6:	4618      	mov	r0, r3
 8018bf8:	3710      	adds	r7, #16
 8018bfa:	46bd      	mov	sp, r7
 8018bfc:	bd80      	pop	{r7, pc}
 8018bfe:	bf00      	nop
 8018c00:	80002000 	.word	0x80002000

08018c04 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8018c04:	b480      	push	{r7}
 8018c06:	b083      	sub	sp, #12
 8018c08:	af00      	add	r7, sp, #0
 8018c0a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8018c0c:	687b      	ldr	r3, [r7, #4]
 8018c0e:	681b      	ldr	r3, [r3, #0]
 8018c10:	699b      	ldr	r3, [r3, #24]
 8018c12:	f003 0302 	and.w	r3, r3, #2
 8018c16:	2b02      	cmp	r3, #2
 8018c18:	d103      	bne.n	8018c22 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8018c1a:	687b      	ldr	r3, [r7, #4]
 8018c1c:	681b      	ldr	r3, [r3, #0]
 8018c1e:	2200      	movs	r2, #0
 8018c20:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8018c22:	687b      	ldr	r3, [r7, #4]
 8018c24:	681b      	ldr	r3, [r3, #0]
 8018c26:	699b      	ldr	r3, [r3, #24]
 8018c28:	f003 0301 	and.w	r3, r3, #1
 8018c2c:	2b01      	cmp	r3, #1
 8018c2e:	d007      	beq.n	8018c40 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8018c30:	687b      	ldr	r3, [r7, #4]
 8018c32:	681b      	ldr	r3, [r3, #0]
 8018c34:	699a      	ldr	r2, [r3, #24]
 8018c36:	687b      	ldr	r3, [r7, #4]
 8018c38:	681b      	ldr	r3, [r3, #0]
 8018c3a:	f042 0201 	orr.w	r2, r2, #1
 8018c3e:	619a      	str	r2, [r3, #24]
  }
}
 8018c40:	bf00      	nop
 8018c42:	370c      	adds	r7, #12
 8018c44:	46bd      	mov	sp, r7
 8018c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c4a:	4770      	bx	lr

08018c4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8018c4c:	b580      	push	{r7, lr}
 8018c4e:	b084      	sub	sp, #16
 8018c50:	af00      	add	r7, sp, #0
 8018c52:	60f8      	str	r0, [r7, #12]
 8018c54:	60b9      	str	r1, [r7, #8]
 8018c56:	603b      	str	r3, [r7, #0]
 8018c58:	4613      	mov	r3, r2
 8018c5a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8018c5c:	e022      	b.n	8018ca4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8018c5e:	683b      	ldr	r3, [r7, #0]
 8018c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018c64:	d01e      	beq.n	8018ca4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8018c66:	f7fc ff3f 	bl	8015ae8 <HAL_GetTick>
 8018c6a:	4602      	mov	r2, r0
 8018c6c:	69bb      	ldr	r3, [r7, #24]
 8018c6e:	1ad3      	subs	r3, r2, r3
 8018c70:	683a      	ldr	r2, [r7, #0]
 8018c72:	429a      	cmp	r2, r3
 8018c74:	d302      	bcc.n	8018c7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8018c76:	683b      	ldr	r3, [r7, #0]
 8018c78:	2b00      	cmp	r3, #0
 8018c7a:	d113      	bne.n	8018ca4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8018c7c:	68fb      	ldr	r3, [r7, #12]
 8018c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018c80:	f043 0220 	orr.w	r2, r3, #32
 8018c84:	68fb      	ldr	r3, [r7, #12]
 8018c86:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8018c88:	68fb      	ldr	r3, [r7, #12]
 8018c8a:	2220      	movs	r2, #32
 8018c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8018c90:	68fb      	ldr	r3, [r7, #12]
 8018c92:	2200      	movs	r2, #0
 8018c94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8018c98:	68fb      	ldr	r3, [r7, #12]
 8018c9a:	2200      	movs	r2, #0
 8018c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8018ca0:	2301      	movs	r3, #1
 8018ca2:	e00f      	b.n	8018cc4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8018ca4:	68fb      	ldr	r3, [r7, #12]
 8018ca6:	681b      	ldr	r3, [r3, #0]
 8018ca8:	699a      	ldr	r2, [r3, #24]
 8018caa:	68bb      	ldr	r3, [r7, #8]
 8018cac:	4013      	ands	r3, r2
 8018cae:	68ba      	ldr	r2, [r7, #8]
 8018cb0:	429a      	cmp	r2, r3
 8018cb2:	bf0c      	ite	eq
 8018cb4:	2301      	moveq	r3, #1
 8018cb6:	2300      	movne	r3, #0
 8018cb8:	b2db      	uxtb	r3, r3
 8018cba:	461a      	mov	r2, r3
 8018cbc:	79fb      	ldrb	r3, [r7, #7]
 8018cbe:	429a      	cmp	r2, r3
 8018cc0:	d0cd      	beq.n	8018c5e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8018cc2:	2300      	movs	r3, #0
}
 8018cc4:	4618      	mov	r0, r3
 8018cc6:	3710      	adds	r7, #16
 8018cc8:	46bd      	mov	sp, r7
 8018cca:	bd80      	pop	{r7, pc}

08018ccc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8018ccc:	b580      	push	{r7, lr}
 8018cce:	b084      	sub	sp, #16
 8018cd0:	af00      	add	r7, sp, #0
 8018cd2:	60f8      	str	r0, [r7, #12]
 8018cd4:	60b9      	str	r1, [r7, #8]
 8018cd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8018cd8:	e02c      	b.n	8018d34 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8018cda:	687a      	ldr	r2, [r7, #4]
 8018cdc:	68b9      	ldr	r1, [r7, #8]
 8018cde:	68f8      	ldr	r0, [r7, #12]
 8018ce0:	f000 f870 	bl	8018dc4 <I2C_IsErrorOccurred>
 8018ce4:	4603      	mov	r3, r0
 8018ce6:	2b00      	cmp	r3, #0
 8018ce8:	d001      	beq.n	8018cee <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8018cea:	2301      	movs	r3, #1
 8018cec:	e02a      	b.n	8018d44 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8018cee:	68bb      	ldr	r3, [r7, #8]
 8018cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018cf4:	d01e      	beq.n	8018d34 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8018cf6:	f7fc fef7 	bl	8015ae8 <HAL_GetTick>
 8018cfa:	4602      	mov	r2, r0
 8018cfc:	687b      	ldr	r3, [r7, #4]
 8018cfe:	1ad3      	subs	r3, r2, r3
 8018d00:	68ba      	ldr	r2, [r7, #8]
 8018d02:	429a      	cmp	r2, r3
 8018d04:	d302      	bcc.n	8018d0c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8018d06:	68bb      	ldr	r3, [r7, #8]
 8018d08:	2b00      	cmp	r3, #0
 8018d0a:	d113      	bne.n	8018d34 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8018d0c:	68fb      	ldr	r3, [r7, #12]
 8018d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018d10:	f043 0220 	orr.w	r2, r3, #32
 8018d14:	68fb      	ldr	r3, [r7, #12]
 8018d16:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8018d18:	68fb      	ldr	r3, [r7, #12]
 8018d1a:	2220      	movs	r2, #32
 8018d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8018d20:	68fb      	ldr	r3, [r7, #12]
 8018d22:	2200      	movs	r2, #0
 8018d24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8018d28:	68fb      	ldr	r3, [r7, #12]
 8018d2a:	2200      	movs	r2, #0
 8018d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8018d30:	2301      	movs	r3, #1
 8018d32:	e007      	b.n	8018d44 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8018d34:	68fb      	ldr	r3, [r7, #12]
 8018d36:	681b      	ldr	r3, [r3, #0]
 8018d38:	699b      	ldr	r3, [r3, #24]
 8018d3a:	f003 0302 	and.w	r3, r3, #2
 8018d3e:	2b02      	cmp	r3, #2
 8018d40:	d1cb      	bne.n	8018cda <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8018d42:	2300      	movs	r3, #0
}
 8018d44:	4618      	mov	r0, r3
 8018d46:	3710      	adds	r7, #16
 8018d48:	46bd      	mov	sp, r7
 8018d4a:	bd80      	pop	{r7, pc}

08018d4c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8018d4c:	b580      	push	{r7, lr}
 8018d4e:	b084      	sub	sp, #16
 8018d50:	af00      	add	r7, sp, #0
 8018d52:	60f8      	str	r0, [r7, #12]
 8018d54:	60b9      	str	r1, [r7, #8]
 8018d56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8018d58:	e028      	b.n	8018dac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8018d5a:	687a      	ldr	r2, [r7, #4]
 8018d5c:	68b9      	ldr	r1, [r7, #8]
 8018d5e:	68f8      	ldr	r0, [r7, #12]
 8018d60:	f000 f830 	bl	8018dc4 <I2C_IsErrorOccurred>
 8018d64:	4603      	mov	r3, r0
 8018d66:	2b00      	cmp	r3, #0
 8018d68:	d001      	beq.n	8018d6e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8018d6a:	2301      	movs	r3, #1
 8018d6c:	e026      	b.n	8018dbc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8018d6e:	f7fc febb 	bl	8015ae8 <HAL_GetTick>
 8018d72:	4602      	mov	r2, r0
 8018d74:	687b      	ldr	r3, [r7, #4]
 8018d76:	1ad3      	subs	r3, r2, r3
 8018d78:	68ba      	ldr	r2, [r7, #8]
 8018d7a:	429a      	cmp	r2, r3
 8018d7c:	d302      	bcc.n	8018d84 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8018d7e:	68bb      	ldr	r3, [r7, #8]
 8018d80:	2b00      	cmp	r3, #0
 8018d82:	d113      	bne.n	8018dac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8018d84:	68fb      	ldr	r3, [r7, #12]
 8018d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018d88:	f043 0220 	orr.w	r2, r3, #32
 8018d8c:	68fb      	ldr	r3, [r7, #12]
 8018d8e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8018d90:	68fb      	ldr	r3, [r7, #12]
 8018d92:	2220      	movs	r2, #32
 8018d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8018d98:	68fb      	ldr	r3, [r7, #12]
 8018d9a:	2200      	movs	r2, #0
 8018d9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8018da0:	68fb      	ldr	r3, [r7, #12]
 8018da2:	2200      	movs	r2, #0
 8018da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8018da8:	2301      	movs	r3, #1
 8018daa:	e007      	b.n	8018dbc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8018dac:	68fb      	ldr	r3, [r7, #12]
 8018dae:	681b      	ldr	r3, [r3, #0]
 8018db0:	699b      	ldr	r3, [r3, #24]
 8018db2:	f003 0320 	and.w	r3, r3, #32
 8018db6:	2b20      	cmp	r3, #32
 8018db8:	d1cf      	bne.n	8018d5a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8018dba:	2300      	movs	r3, #0
}
 8018dbc:	4618      	mov	r0, r3
 8018dbe:	3710      	adds	r7, #16
 8018dc0:	46bd      	mov	sp, r7
 8018dc2:	bd80      	pop	{r7, pc}

08018dc4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8018dc4:	b580      	push	{r7, lr}
 8018dc6:	b08a      	sub	sp, #40	; 0x28
 8018dc8:	af00      	add	r7, sp, #0
 8018dca:	60f8      	str	r0, [r7, #12]
 8018dcc:	60b9      	str	r1, [r7, #8]
 8018dce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8018dd0:	2300      	movs	r3, #0
 8018dd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8018dd6:	68fb      	ldr	r3, [r7, #12]
 8018dd8:	681b      	ldr	r3, [r3, #0]
 8018dda:	699b      	ldr	r3, [r3, #24]
 8018ddc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8018dde:	2300      	movs	r3, #0
 8018de0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8018de2:	687b      	ldr	r3, [r7, #4]
 8018de4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8018de6:	69bb      	ldr	r3, [r7, #24]
 8018de8:	f003 0310 	and.w	r3, r3, #16
 8018dec:	2b00      	cmp	r3, #0
 8018dee:	d068      	beq.n	8018ec2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8018df0:	68fb      	ldr	r3, [r7, #12]
 8018df2:	681b      	ldr	r3, [r3, #0]
 8018df4:	2210      	movs	r2, #16
 8018df6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8018df8:	e049      	b.n	8018e8e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8018dfa:	68bb      	ldr	r3, [r7, #8]
 8018dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018e00:	d045      	beq.n	8018e8e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8018e02:	f7fc fe71 	bl	8015ae8 <HAL_GetTick>
 8018e06:	4602      	mov	r2, r0
 8018e08:	69fb      	ldr	r3, [r7, #28]
 8018e0a:	1ad3      	subs	r3, r2, r3
 8018e0c:	68ba      	ldr	r2, [r7, #8]
 8018e0e:	429a      	cmp	r2, r3
 8018e10:	d302      	bcc.n	8018e18 <I2C_IsErrorOccurred+0x54>
 8018e12:	68bb      	ldr	r3, [r7, #8]
 8018e14:	2b00      	cmp	r3, #0
 8018e16:	d13a      	bne.n	8018e8e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8018e18:	68fb      	ldr	r3, [r7, #12]
 8018e1a:	681b      	ldr	r3, [r3, #0]
 8018e1c:	685b      	ldr	r3, [r3, #4]
 8018e1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8018e22:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8018e24:	68fb      	ldr	r3, [r7, #12]
 8018e26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018e2a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8018e2c:	68fb      	ldr	r3, [r7, #12]
 8018e2e:	681b      	ldr	r3, [r3, #0]
 8018e30:	699b      	ldr	r3, [r3, #24]
 8018e32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8018e36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8018e3a:	d121      	bne.n	8018e80 <I2C_IsErrorOccurred+0xbc>
 8018e3c:	697b      	ldr	r3, [r7, #20]
 8018e3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8018e42:	d01d      	beq.n	8018e80 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8018e44:	7cfb      	ldrb	r3, [r7, #19]
 8018e46:	2b20      	cmp	r3, #32
 8018e48:	d01a      	beq.n	8018e80 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8018e4a:	68fb      	ldr	r3, [r7, #12]
 8018e4c:	681b      	ldr	r3, [r3, #0]
 8018e4e:	685a      	ldr	r2, [r3, #4]
 8018e50:	68fb      	ldr	r3, [r7, #12]
 8018e52:	681b      	ldr	r3, [r3, #0]
 8018e54:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8018e58:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8018e5a:	f7fc fe45 	bl	8015ae8 <HAL_GetTick>
 8018e5e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8018e60:	e00e      	b.n	8018e80 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8018e62:	f7fc fe41 	bl	8015ae8 <HAL_GetTick>
 8018e66:	4602      	mov	r2, r0
 8018e68:	69fb      	ldr	r3, [r7, #28]
 8018e6a:	1ad3      	subs	r3, r2, r3
 8018e6c:	2b19      	cmp	r3, #25
 8018e6e:	d907      	bls.n	8018e80 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8018e70:	6a3b      	ldr	r3, [r7, #32]
 8018e72:	f043 0320 	orr.w	r3, r3, #32
 8018e76:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8018e78:	2301      	movs	r3, #1
 8018e7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8018e7e:	e006      	b.n	8018e8e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8018e80:	68fb      	ldr	r3, [r7, #12]
 8018e82:	681b      	ldr	r3, [r3, #0]
 8018e84:	699b      	ldr	r3, [r3, #24]
 8018e86:	f003 0320 	and.w	r3, r3, #32
 8018e8a:	2b20      	cmp	r3, #32
 8018e8c:	d1e9      	bne.n	8018e62 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8018e8e:	68fb      	ldr	r3, [r7, #12]
 8018e90:	681b      	ldr	r3, [r3, #0]
 8018e92:	699b      	ldr	r3, [r3, #24]
 8018e94:	f003 0320 	and.w	r3, r3, #32
 8018e98:	2b20      	cmp	r3, #32
 8018e9a:	d003      	beq.n	8018ea4 <I2C_IsErrorOccurred+0xe0>
 8018e9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018ea0:	2b00      	cmp	r3, #0
 8018ea2:	d0aa      	beq.n	8018dfa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8018ea4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018ea8:	2b00      	cmp	r3, #0
 8018eaa:	d103      	bne.n	8018eb4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8018eac:	68fb      	ldr	r3, [r7, #12]
 8018eae:	681b      	ldr	r3, [r3, #0]
 8018eb0:	2220      	movs	r2, #32
 8018eb2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8018eb4:	6a3b      	ldr	r3, [r7, #32]
 8018eb6:	f043 0304 	orr.w	r3, r3, #4
 8018eba:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8018ebc:	2301      	movs	r3, #1
 8018ebe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8018ec2:	68fb      	ldr	r3, [r7, #12]
 8018ec4:	681b      	ldr	r3, [r3, #0]
 8018ec6:	699b      	ldr	r3, [r3, #24]
 8018ec8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8018eca:	69bb      	ldr	r3, [r7, #24]
 8018ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018ed0:	2b00      	cmp	r3, #0
 8018ed2:	d00b      	beq.n	8018eec <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8018ed4:	6a3b      	ldr	r3, [r7, #32]
 8018ed6:	f043 0301 	orr.w	r3, r3, #1
 8018eda:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8018edc:	68fb      	ldr	r3, [r7, #12]
 8018ede:	681b      	ldr	r3, [r3, #0]
 8018ee0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8018ee4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8018ee6:	2301      	movs	r3, #1
 8018ee8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8018eec:	69bb      	ldr	r3, [r7, #24]
 8018eee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8018ef2:	2b00      	cmp	r3, #0
 8018ef4:	d00b      	beq.n	8018f0e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8018ef6:	6a3b      	ldr	r3, [r7, #32]
 8018ef8:	f043 0308 	orr.w	r3, r3, #8
 8018efc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8018efe:	68fb      	ldr	r3, [r7, #12]
 8018f00:	681b      	ldr	r3, [r3, #0]
 8018f02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8018f06:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8018f08:	2301      	movs	r3, #1
 8018f0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8018f0e:	69bb      	ldr	r3, [r7, #24]
 8018f10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8018f14:	2b00      	cmp	r3, #0
 8018f16:	d00b      	beq.n	8018f30 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8018f18:	6a3b      	ldr	r3, [r7, #32]
 8018f1a:	f043 0302 	orr.w	r3, r3, #2
 8018f1e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8018f20:	68fb      	ldr	r3, [r7, #12]
 8018f22:	681b      	ldr	r3, [r3, #0]
 8018f24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018f28:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8018f2a:	2301      	movs	r3, #1
 8018f2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8018f30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018f34:	2b00      	cmp	r3, #0
 8018f36:	d01c      	beq.n	8018f72 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8018f38:	68f8      	ldr	r0, [r7, #12]
 8018f3a:	f7ff fe63 	bl	8018c04 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8018f3e:	68fb      	ldr	r3, [r7, #12]
 8018f40:	681b      	ldr	r3, [r3, #0]
 8018f42:	6859      	ldr	r1, [r3, #4]
 8018f44:	68fb      	ldr	r3, [r7, #12]
 8018f46:	681a      	ldr	r2, [r3, #0]
 8018f48:	4b0d      	ldr	r3, [pc, #52]	; (8018f80 <I2C_IsErrorOccurred+0x1bc>)
 8018f4a:	400b      	ands	r3, r1
 8018f4c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8018f4e:	68fb      	ldr	r3, [r7, #12]
 8018f50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8018f52:	6a3b      	ldr	r3, [r7, #32]
 8018f54:	431a      	orrs	r2, r3
 8018f56:	68fb      	ldr	r3, [r7, #12]
 8018f58:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8018f5a:	68fb      	ldr	r3, [r7, #12]
 8018f5c:	2220      	movs	r2, #32
 8018f5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8018f62:	68fb      	ldr	r3, [r7, #12]
 8018f64:	2200      	movs	r2, #0
 8018f66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018f6a:	68fb      	ldr	r3, [r7, #12]
 8018f6c:	2200      	movs	r2, #0
 8018f6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8018f72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8018f76:	4618      	mov	r0, r3
 8018f78:	3728      	adds	r7, #40	; 0x28
 8018f7a:	46bd      	mov	sp, r7
 8018f7c:	bd80      	pop	{r7, pc}
 8018f7e:	bf00      	nop
 8018f80:	fe00e800 	.word	0xfe00e800

08018f84 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8018f84:	b480      	push	{r7}
 8018f86:	b087      	sub	sp, #28
 8018f88:	af00      	add	r7, sp, #0
 8018f8a:	60f8      	str	r0, [r7, #12]
 8018f8c:	607b      	str	r3, [r7, #4]
 8018f8e:	460b      	mov	r3, r1
 8018f90:	817b      	strh	r3, [r7, #10]
 8018f92:	4613      	mov	r3, r2
 8018f94:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8018f96:	897b      	ldrh	r3, [r7, #10]
 8018f98:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8018f9c:	7a7b      	ldrb	r3, [r7, #9]
 8018f9e:	041b      	lsls	r3, r3, #16
 8018fa0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8018fa4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8018fa6:	687b      	ldr	r3, [r7, #4]
 8018fa8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8018faa:	6a3b      	ldr	r3, [r7, #32]
 8018fac:	4313      	orrs	r3, r2
 8018fae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018fb2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8018fb4:	68fb      	ldr	r3, [r7, #12]
 8018fb6:	681b      	ldr	r3, [r3, #0]
 8018fb8:	685a      	ldr	r2, [r3, #4]
 8018fba:	6a3b      	ldr	r3, [r7, #32]
 8018fbc:	0d5b      	lsrs	r3, r3, #21
 8018fbe:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8018fc2:	4b08      	ldr	r3, [pc, #32]	; (8018fe4 <I2C_TransferConfig+0x60>)
 8018fc4:	430b      	orrs	r3, r1
 8018fc6:	43db      	mvns	r3, r3
 8018fc8:	ea02 0103 	and.w	r1, r2, r3
 8018fcc:	68fb      	ldr	r3, [r7, #12]
 8018fce:	681b      	ldr	r3, [r3, #0]
 8018fd0:	697a      	ldr	r2, [r7, #20]
 8018fd2:	430a      	orrs	r2, r1
 8018fd4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8018fd6:	bf00      	nop
 8018fd8:	371c      	adds	r7, #28
 8018fda:	46bd      	mov	sp, r7
 8018fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fe0:	4770      	bx	lr
 8018fe2:	bf00      	nop
 8018fe4:	03ff63ff 	.word	0x03ff63ff

08018fe8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8018fe8:	b480      	push	{r7}
 8018fea:	b083      	sub	sp, #12
 8018fec:	af00      	add	r7, sp, #0
 8018fee:	6078      	str	r0, [r7, #4]
 8018ff0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8018ff2:	687b      	ldr	r3, [r7, #4]
 8018ff4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8018ff8:	b2db      	uxtb	r3, r3
 8018ffa:	2b20      	cmp	r3, #32
 8018ffc:	d138      	bne.n	8019070 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8018ffe:	687b      	ldr	r3, [r7, #4]
 8019000:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8019004:	2b01      	cmp	r3, #1
 8019006:	d101      	bne.n	801900c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8019008:	2302      	movs	r3, #2
 801900a:	e032      	b.n	8019072 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 801900c:	687b      	ldr	r3, [r7, #4]
 801900e:	2201      	movs	r2, #1
 8019010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8019014:	687b      	ldr	r3, [r7, #4]
 8019016:	2224      	movs	r2, #36	; 0x24
 8019018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801901c:	687b      	ldr	r3, [r7, #4]
 801901e:	681b      	ldr	r3, [r3, #0]
 8019020:	681a      	ldr	r2, [r3, #0]
 8019022:	687b      	ldr	r3, [r7, #4]
 8019024:	681b      	ldr	r3, [r3, #0]
 8019026:	f022 0201 	bic.w	r2, r2, #1
 801902a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 801902c:	687b      	ldr	r3, [r7, #4]
 801902e:	681b      	ldr	r3, [r3, #0]
 8019030:	681a      	ldr	r2, [r3, #0]
 8019032:	687b      	ldr	r3, [r7, #4]
 8019034:	681b      	ldr	r3, [r3, #0]
 8019036:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801903a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 801903c:	687b      	ldr	r3, [r7, #4]
 801903e:	681b      	ldr	r3, [r3, #0]
 8019040:	6819      	ldr	r1, [r3, #0]
 8019042:	687b      	ldr	r3, [r7, #4]
 8019044:	681b      	ldr	r3, [r3, #0]
 8019046:	683a      	ldr	r2, [r7, #0]
 8019048:	430a      	orrs	r2, r1
 801904a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801904c:	687b      	ldr	r3, [r7, #4]
 801904e:	681b      	ldr	r3, [r3, #0]
 8019050:	681a      	ldr	r2, [r3, #0]
 8019052:	687b      	ldr	r3, [r7, #4]
 8019054:	681b      	ldr	r3, [r3, #0]
 8019056:	f042 0201 	orr.w	r2, r2, #1
 801905a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801905c:	687b      	ldr	r3, [r7, #4]
 801905e:	2220      	movs	r2, #32
 8019060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8019064:	687b      	ldr	r3, [r7, #4]
 8019066:	2200      	movs	r2, #0
 8019068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801906c:	2300      	movs	r3, #0
 801906e:	e000      	b.n	8019072 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8019070:	2302      	movs	r3, #2
  }
}
 8019072:	4618      	mov	r0, r3
 8019074:	370c      	adds	r7, #12
 8019076:	46bd      	mov	sp, r7
 8019078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801907c:	4770      	bx	lr

0801907e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 801907e:	b480      	push	{r7}
 8019080:	b085      	sub	sp, #20
 8019082:	af00      	add	r7, sp, #0
 8019084:	6078      	str	r0, [r7, #4]
 8019086:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8019088:	687b      	ldr	r3, [r7, #4]
 801908a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801908e:	b2db      	uxtb	r3, r3
 8019090:	2b20      	cmp	r3, #32
 8019092:	d139      	bne.n	8019108 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8019094:	687b      	ldr	r3, [r7, #4]
 8019096:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801909a:	2b01      	cmp	r3, #1
 801909c:	d101      	bne.n	80190a2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 801909e:	2302      	movs	r3, #2
 80190a0:	e033      	b.n	801910a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80190a2:	687b      	ldr	r3, [r7, #4]
 80190a4:	2201      	movs	r2, #1
 80190a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80190aa:	687b      	ldr	r3, [r7, #4]
 80190ac:	2224      	movs	r2, #36	; 0x24
 80190ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80190b2:	687b      	ldr	r3, [r7, #4]
 80190b4:	681b      	ldr	r3, [r3, #0]
 80190b6:	681a      	ldr	r2, [r3, #0]
 80190b8:	687b      	ldr	r3, [r7, #4]
 80190ba:	681b      	ldr	r3, [r3, #0]
 80190bc:	f022 0201 	bic.w	r2, r2, #1
 80190c0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80190c2:	687b      	ldr	r3, [r7, #4]
 80190c4:	681b      	ldr	r3, [r3, #0]
 80190c6:	681b      	ldr	r3, [r3, #0]
 80190c8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80190ca:	68fb      	ldr	r3, [r7, #12]
 80190cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80190d0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80190d2:	683b      	ldr	r3, [r7, #0]
 80190d4:	021b      	lsls	r3, r3, #8
 80190d6:	68fa      	ldr	r2, [r7, #12]
 80190d8:	4313      	orrs	r3, r2
 80190da:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80190dc:	687b      	ldr	r3, [r7, #4]
 80190de:	681b      	ldr	r3, [r3, #0]
 80190e0:	68fa      	ldr	r2, [r7, #12]
 80190e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80190e4:	687b      	ldr	r3, [r7, #4]
 80190e6:	681b      	ldr	r3, [r3, #0]
 80190e8:	681a      	ldr	r2, [r3, #0]
 80190ea:	687b      	ldr	r3, [r7, #4]
 80190ec:	681b      	ldr	r3, [r3, #0]
 80190ee:	f042 0201 	orr.w	r2, r2, #1
 80190f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80190f4:	687b      	ldr	r3, [r7, #4]
 80190f6:	2220      	movs	r2, #32
 80190f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80190fc:	687b      	ldr	r3, [r7, #4]
 80190fe:	2200      	movs	r2, #0
 8019100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8019104:	2300      	movs	r3, #0
 8019106:	e000      	b.n	801910a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8019108:	2302      	movs	r3, #2
  }
}
 801910a:	4618      	mov	r0, r3
 801910c:	3714      	adds	r7, #20
 801910e:	46bd      	mov	sp, r7
 8019110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019114:	4770      	bx	lr

08019116 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8019116:	b580      	push	{r7, lr}
 8019118:	b084      	sub	sp, #16
 801911a:	af00      	add	r7, sp, #0
 801911c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 801911e:	687b      	ldr	r3, [r7, #4]
 8019120:	2b00      	cmp	r3, #0
 8019122:	d101      	bne.n	8019128 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8019124:	2301      	movs	r3, #1
 8019126:	e041      	b.n	80191ac <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8019128:	687b      	ldr	r3, [r7, #4]
 801912a:	681b      	ldr	r3, [r3, #0]
 801912c:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8019130:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8019132:	687b      	ldr	r3, [r7, #4]
 8019134:	681b      	ldr	r3, [r3, #0]
 8019136:	f245 5255 	movw	r2, #21845	; 0x5555
 801913a:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 801913c:	687b      	ldr	r3, [r7, #4]
 801913e:	681b      	ldr	r3, [r3, #0]
 8019140:	687a      	ldr	r2, [r7, #4]
 8019142:	6852      	ldr	r2, [r2, #4]
 8019144:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8019146:	687b      	ldr	r3, [r7, #4]
 8019148:	681b      	ldr	r3, [r3, #0]
 801914a:	687a      	ldr	r2, [r7, #4]
 801914c:	6892      	ldr	r2, [r2, #8]
 801914e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8019150:	f7fc fcca 	bl	8015ae8 <HAL_GetTick>
 8019154:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8019156:	e00f      	b.n	8019178 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8019158:	f7fc fcc6 	bl	8015ae8 <HAL_GetTick>
 801915c:	4602      	mov	r2, r0
 801915e:	68fb      	ldr	r3, [r7, #12]
 8019160:	1ad3      	subs	r3, r2, r3
 8019162:	2b31      	cmp	r3, #49	; 0x31
 8019164:	d908      	bls.n	8019178 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8019166:	687b      	ldr	r3, [r7, #4]
 8019168:	681b      	ldr	r3, [r3, #0]
 801916a:	68db      	ldr	r3, [r3, #12]
 801916c:	f003 0307 	and.w	r3, r3, #7
 8019170:	2b00      	cmp	r3, #0
 8019172:	d001      	beq.n	8019178 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8019174:	2303      	movs	r3, #3
 8019176:	e019      	b.n	80191ac <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8019178:	687b      	ldr	r3, [r7, #4]
 801917a:	681b      	ldr	r3, [r3, #0]
 801917c:	68db      	ldr	r3, [r3, #12]
 801917e:	f003 0307 	and.w	r3, r3, #7
 8019182:	2b00      	cmp	r3, #0
 8019184:	d1e8      	bne.n	8019158 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8019186:	687b      	ldr	r3, [r7, #4]
 8019188:	681b      	ldr	r3, [r3, #0]
 801918a:	691a      	ldr	r2, [r3, #16]
 801918c:	687b      	ldr	r3, [r7, #4]
 801918e:	68db      	ldr	r3, [r3, #12]
 8019190:	429a      	cmp	r2, r3
 8019192:	d005      	beq.n	80191a0 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8019194:	687b      	ldr	r3, [r7, #4]
 8019196:	681b      	ldr	r3, [r3, #0]
 8019198:	687a      	ldr	r2, [r7, #4]
 801919a:	68d2      	ldr	r2, [r2, #12]
 801919c:	611a      	str	r2, [r3, #16]
 801919e:	e004      	b.n	80191aa <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80191a0:	687b      	ldr	r3, [r7, #4]
 80191a2:	681b      	ldr	r3, [r3, #0]
 80191a4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80191a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80191aa:	2300      	movs	r3, #0
}
 80191ac:	4618      	mov	r0, r3
 80191ae:	3710      	adds	r7, #16
 80191b0:	46bd      	mov	sp, r7
 80191b2:	bd80      	pop	{r7, pc}

080191b4 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80191b4:	b480      	push	{r7}
 80191b6:	b083      	sub	sp, #12
 80191b8:	af00      	add	r7, sp, #0
 80191ba:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80191bc:	687b      	ldr	r3, [r7, #4]
 80191be:	681b      	ldr	r3, [r3, #0]
 80191c0:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80191c4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80191c6:	2300      	movs	r3, #0
}
 80191c8:	4618      	mov	r0, r3
 80191ca:	370c      	adds	r7, #12
 80191cc:	46bd      	mov	sp, r7
 80191ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191d2:	4770      	bx	lr

080191d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80191d4:	b580      	push	{r7, lr}
 80191d6:	b086      	sub	sp, #24
 80191d8:	af00      	add	r7, sp, #0
 80191da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80191dc:	2300      	movs	r3, #0
 80191de:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80191e0:	687b      	ldr	r3, [r7, #4]
 80191e2:	2b00      	cmp	r3, #0
 80191e4:	d101      	bne.n	80191ea <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80191e6:	2301      	movs	r3, #1
 80191e8:	e29b      	b.n	8019722 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80191ea:	687b      	ldr	r3, [r7, #4]
 80191ec:	681b      	ldr	r3, [r3, #0]
 80191ee:	f003 0301 	and.w	r3, r3, #1
 80191f2:	2b00      	cmp	r3, #0
 80191f4:	f000 8087 	beq.w	8019306 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80191f8:	4b96      	ldr	r3, [pc, #600]	; (8019454 <HAL_RCC_OscConfig+0x280>)
 80191fa:	689b      	ldr	r3, [r3, #8]
 80191fc:	f003 030c 	and.w	r3, r3, #12
 8019200:	2b04      	cmp	r3, #4
 8019202:	d00c      	beq.n	801921e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8019204:	4b93      	ldr	r3, [pc, #588]	; (8019454 <HAL_RCC_OscConfig+0x280>)
 8019206:	689b      	ldr	r3, [r3, #8]
 8019208:	f003 030c 	and.w	r3, r3, #12
 801920c:	2b08      	cmp	r3, #8
 801920e:	d112      	bne.n	8019236 <HAL_RCC_OscConfig+0x62>
 8019210:	4b90      	ldr	r3, [pc, #576]	; (8019454 <HAL_RCC_OscConfig+0x280>)
 8019212:	685b      	ldr	r3, [r3, #4]
 8019214:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8019218:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801921c:	d10b      	bne.n	8019236 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801921e:	4b8d      	ldr	r3, [pc, #564]	; (8019454 <HAL_RCC_OscConfig+0x280>)
 8019220:	681b      	ldr	r3, [r3, #0]
 8019222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8019226:	2b00      	cmp	r3, #0
 8019228:	d06c      	beq.n	8019304 <HAL_RCC_OscConfig+0x130>
 801922a:	687b      	ldr	r3, [r7, #4]
 801922c:	685b      	ldr	r3, [r3, #4]
 801922e:	2b00      	cmp	r3, #0
 8019230:	d168      	bne.n	8019304 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8019232:	2301      	movs	r3, #1
 8019234:	e275      	b.n	8019722 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8019236:	687b      	ldr	r3, [r7, #4]
 8019238:	685b      	ldr	r3, [r3, #4]
 801923a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801923e:	d106      	bne.n	801924e <HAL_RCC_OscConfig+0x7a>
 8019240:	4b84      	ldr	r3, [pc, #528]	; (8019454 <HAL_RCC_OscConfig+0x280>)
 8019242:	681b      	ldr	r3, [r3, #0]
 8019244:	4a83      	ldr	r2, [pc, #524]	; (8019454 <HAL_RCC_OscConfig+0x280>)
 8019246:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801924a:	6013      	str	r3, [r2, #0]
 801924c:	e02e      	b.n	80192ac <HAL_RCC_OscConfig+0xd8>
 801924e:	687b      	ldr	r3, [r7, #4]
 8019250:	685b      	ldr	r3, [r3, #4]
 8019252:	2b00      	cmp	r3, #0
 8019254:	d10c      	bne.n	8019270 <HAL_RCC_OscConfig+0x9c>
 8019256:	4b7f      	ldr	r3, [pc, #508]	; (8019454 <HAL_RCC_OscConfig+0x280>)
 8019258:	681b      	ldr	r3, [r3, #0]
 801925a:	4a7e      	ldr	r2, [pc, #504]	; (8019454 <HAL_RCC_OscConfig+0x280>)
 801925c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8019260:	6013      	str	r3, [r2, #0]
 8019262:	4b7c      	ldr	r3, [pc, #496]	; (8019454 <HAL_RCC_OscConfig+0x280>)
 8019264:	681b      	ldr	r3, [r3, #0]
 8019266:	4a7b      	ldr	r2, [pc, #492]	; (8019454 <HAL_RCC_OscConfig+0x280>)
 8019268:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801926c:	6013      	str	r3, [r2, #0]
 801926e:	e01d      	b.n	80192ac <HAL_RCC_OscConfig+0xd8>
 8019270:	687b      	ldr	r3, [r7, #4]
 8019272:	685b      	ldr	r3, [r3, #4]
 8019274:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8019278:	d10c      	bne.n	8019294 <HAL_RCC_OscConfig+0xc0>
 801927a:	4b76      	ldr	r3, [pc, #472]	; (8019454 <HAL_RCC_OscConfig+0x280>)
 801927c:	681b      	ldr	r3, [r3, #0]
 801927e:	4a75      	ldr	r2, [pc, #468]	; (8019454 <HAL_RCC_OscConfig+0x280>)
 8019280:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8019284:	6013      	str	r3, [r2, #0]
 8019286:	4b73      	ldr	r3, [pc, #460]	; (8019454 <HAL_RCC_OscConfig+0x280>)
 8019288:	681b      	ldr	r3, [r3, #0]
 801928a:	4a72      	ldr	r2, [pc, #456]	; (8019454 <HAL_RCC_OscConfig+0x280>)
 801928c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8019290:	6013      	str	r3, [r2, #0]
 8019292:	e00b      	b.n	80192ac <HAL_RCC_OscConfig+0xd8>
 8019294:	4b6f      	ldr	r3, [pc, #444]	; (8019454 <HAL_RCC_OscConfig+0x280>)
 8019296:	681b      	ldr	r3, [r3, #0]
 8019298:	4a6e      	ldr	r2, [pc, #440]	; (8019454 <HAL_RCC_OscConfig+0x280>)
 801929a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801929e:	6013      	str	r3, [r2, #0]
 80192a0:	4b6c      	ldr	r3, [pc, #432]	; (8019454 <HAL_RCC_OscConfig+0x280>)
 80192a2:	681b      	ldr	r3, [r3, #0]
 80192a4:	4a6b      	ldr	r2, [pc, #428]	; (8019454 <HAL_RCC_OscConfig+0x280>)
 80192a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80192aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80192ac:	687b      	ldr	r3, [r7, #4]
 80192ae:	685b      	ldr	r3, [r3, #4]
 80192b0:	2b00      	cmp	r3, #0
 80192b2:	d013      	beq.n	80192dc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80192b4:	f7fc fc18 	bl	8015ae8 <HAL_GetTick>
 80192b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80192ba:	e008      	b.n	80192ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80192bc:	f7fc fc14 	bl	8015ae8 <HAL_GetTick>
 80192c0:	4602      	mov	r2, r0
 80192c2:	693b      	ldr	r3, [r7, #16]
 80192c4:	1ad3      	subs	r3, r2, r3
 80192c6:	2b64      	cmp	r3, #100	; 0x64
 80192c8:	d901      	bls.n	80192ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80192ca:	2303      	movs	r3, #3
 80192cc:	e229      	b.n	8019722 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80192ce:	4b61      	ldr	r3, [pc, #388]	; (8019454 <HAL_RCC_OscConfig+0x280>)
 80192d0:	681b      	ldr	r3, [r3, #0]
 80192d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80192d6:	2b00      	cmp	r3, #0
 80192d8:	d0f0      	beq.n	80192bc <HAL_RCC_OscConfig+0xe8>
 80192da:	e014      	b.n	8019306 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80192dc:	f7fc fc04 	bl	8015ae8 <HAL_GetTick>
 80192e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80192e2:	e008      	b.n	80192f6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80192e4:	f7fc fc00 	bl	8015ae8 <HAL_GetTick>
 80192e8:	4602      	mov	r2, r0
 80192ea:	693b      	ldr	r3, [r7, #16]
 80192ec:	1ad3      	subs	r3, r2, r3
 80192ee:	2b64      	cmp	r3, #100	; 0x64
 80192f0:	d901      	bls.n	80192f6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80192f2:	2303      	movs	r3, #3
 80192f4:	e215      	b.n	8019722 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80192f6:	4b57      	ldr	r3, [pc, #348]	; (8019454 <HAL_RCC_OscConfig+0x280>)
 80192f8:	681b      	ldr	r3, [r3, #0]
 80192fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80192fe:	2b00      	cmp	r3, #0
 8019300:	d1f0      	bne.n	80192e4 <HAL_RCC_OscConfig+0x110>
 8019302:	e000      	b.n	8019306 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8019304:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8019306:	687b      	ldr	r3, [r7, #4]
 8019308:	681b      	ldr	r3, [r3, #0]
 801930a:	f003 0302 	and.w	r3, r3, #2
 801930e:	2b00      	cmp	r3, #0
 8019310:	d069      	beq.n	80193e6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8019312:	4b50      	ldr	r3, [pc, #320]	; (8019454 <HAL_RCC_OscConfig+0x280>)
 8019314:	689b      	ldr	r3, [r3, #8]
 8019316:	f003 030c 	and.w	r3, r3, #12
 801931a:	2b00      	cmp	r3, #0
 801931c:	d00b      	beq.n	8019336 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801931e:	4b4d      	ldr	r3, [pc, #308]	; (8019454 <HAL_RCC_OscConfig+0x280>)
 8019320:	689b      	ldr	r3, [r3, #8]
 8019322:	f003 030c 	and.w	r3, r3, #12
 8019326:	2b08      	cmp	r3, #8
 8019328:	d11c      	bne.n	8019364 <HAL_RCC_OscConfig+0x190>
 801932a:	4b4a      	ldr	r3, [pc, #296]	; (8019454 <HAL_RCC_OscConfig+0x280>)
 801932c:	685b      	ldr	r3, [r3, #4]
 801932e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8019332:	2b00      	cmp	r3, #0
 8019334:	d116      	bne.n	8019364 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8019336:	4b47      	ldr	r3, [pc, #284]	; (8019454 <HAL_RCC_OscConfig+0x280>)
 8019338:	681b      	ldr	r3, [r3, #0]
 801933a:	f003 0302 	and.w	r3, r3, #2
 801933e:	2b00      	cmp	r3, #0
 8019340:	d005      	beq.n	801934e <HAL_RCC_OscConfig+0x17a>
 8019342:	687b      	ldr	r3, [r7, #4]
 8019344:	68db      	ldr	r3, [r3, #12]
 8019346:	2b01      	cmp	r3, #1
 8019348:	d001      	beq.n	801934e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 801934a:	2301      	movs	r3, #1
 801934c:	e1e9      	b.n	8019722 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801934e:	4b41      	ldr	r3, [pc, #260]	; (8019454 <HAL_RCC_OscConfig+0x280>)
 8019350:	681b      	ldr	r3, [r3, #0]
 8019352:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8019356:	687b      	ldr	r3, [r7, #4]
 8019358:	691b      	ldr	r3, [r3, #16]
 801935a:	00db      	lsls	r3, r3, #3
 801935c:	493d      	ldr	r1, [pc, #244]	; (8019454 <HAL_RCC_OscConfig+0x280>)
 801935e:	4313      	orrs	r3, r2
 8019360:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8019362:	e040      	b.n	80193e6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8019364:	687b      	ldr	r3, [r7, #4]
 8019366:	68db      	ldr	r3, [r3, #12]
 8019368:	2b00      	cmp	r3, #0
 801936a:	d023      	beq.n	80193b4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801936c:	4b39      	ldr	r3, [pc, #228]	; (8019454 <HAL_RCC_OscConfig+0x280>)
 801936e:	681b      	ldr	r3, [r3, #0]
 8019370:	4a38      	ldr	r2, [pc, #224]	; (8019454 <HAL_RCC_OscConfig+0x280>)
 8019372:	f043 0301 	orr.w	r3, r3, #1
 8019376:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8019378:	f7fc fbb6 	bl	8015ae8 <HAL_GetTick>
 801937c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801937e:	e008      	b.n	8019392 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8019380:	f7fc fbb2 	bl	8015ae8 <HAL_GetTick>
 8019384:	4602      	mov	r2, r0
 8019386:	693b      	ldr	r3, [r7, #16]
 8019388:	1ad3      	subs	r3, r2, r3
 801938a:	2b02      	cmp	r3, #2
 801938c:	d901      	bls.n	8019392 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 801938e:	2303      	movs	r3, #3
 8019390:	e1c7      	b.n	8019722 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8019392:	4b30      	ldr	r3, [pc, #192]	; (8019454 <HAL_RCC_OscConfig+0x280>)
 8019394:	681b      	ldr	r3, [r3, #0]
 8019396:	f003 0302 	and.w	r3, r3, #2
 801939a:	2b00      	cmp	r3, #0
 801939c:	d0f0      	beq.n	8019380 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801939e:	4b2d      	ldr	r3, [pc, #180]	; (8019454 <HAL_RCC_OscConfig+0x280>)
 80193a0:	681b      	ldr	r3, [r3, #0]
 80193a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80193a6:	687b      	ldr	r3, [r7, #4]
 80193a8:	691b      	ldr	r3, [r3, #16]
 80193aa:	00db      	lsls	r3, r3, #3
 80193ac:	4929      	ldr	r1, [pc, #164]	; (8019454 <HAL_RCC_OscConfig+0x280>)
 80193ae:	4313      	orrs	r3, r2
 80193b0:	600b      	str	r3, [r1, #0]
 80193b2:	e018      	b.n	80193e6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80193b4:	4b27      	ldr	r3, [pc, #156]	; (8019454 <HAL_RCC_OscConfig+0x280>)
 80193b6:	681b      	ldr	r3, [r3, #0]
 80193b8:	4a26      	ldr	r2, [pc, #152]	; (8019454 <HAL_RCC_OscConfig+0x280>)
 80193ba:	f023 0301 	bic.w	r3, r3, #1
 80193be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80193c0:	f7fc fb92 	bl	8015ae8 <HAL_GetTick>
 80193c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80193c6:	e008      	b.n	80193da <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80193c8:	f7fc fb8e 	bl	8015ae8 <HAL_GetTick>
 80193cc:	4602      	mov	r2, r0
 80193ce:	693b      	ldr	r3, [r7, #16]
 80193d0:	1ad3      	subs	r3, r2, r3
 80193d2:	2b02      	cmp	r3, #2
 80193d4:	d901      	bls.n	80193da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80193d6:	2303      	movs	r3, #3
 80193d8:	e1a3      	b.n	8019722 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80193da:	4b1e      	ldr	r3, [pc, #120]	; (8019454 <HAL_RCC_OscConfig+0x280>)
 80193dc:	681b      	ldr	r3, [r3, #0]
 80193de:	f003 0302 	and.w	r3, r3, #2
 80193e2:	2b00      	cmp	r3, #0
 80193e4:	d1f0      	bne.n	80193c8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80193e6:	687b      	ldr	r3, [r7, #4]
 80193e8:	681b      	ldr	r3, [r3, #0]
 80193ea:	f003 0308 	and.w	r3, r3, #8
 80193ee:	2b00      	cmp	r3, #0
 80193f0:	d038      	beq.n	8019464 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80193f2:	687b      	ldr	r3, [r7, #4]
 80193f4:	695b      	ldr	r3, [r3, #20]
 80193f6:	2b00      	cmp	r3, #0
 80193f8:	d019      	beq.n	801942e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80193fa:	4b16      	ldr	r3, [pc, #88]	; (8019454 <HAL_RCC_OscConfig+0x280>)
 80193fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80193fe:	4a15      	ldr	r2, [pc, #84]	; (8019454 <HAL_RCC_OscConfig+0x280>)
 8019400:	f043 0301 	orr.w	r3, r3, #1
 8019404:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8019406:	f7fc fb6f 	bl	8015ae8 <HAL_GetTick>
 801940a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801940c:	e008      	b.n	8019420 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801940e:	f7fc fb6b 	bl	8015ae8 <HAL_GetTick>
 8019412:	4602      	mov	r2, r0
 8019414:	693b      	ldr	r3, [r7, #16]
 8019416:	1ad3      	subs	r3, r2, r3
 8019418:	2b02      	cmp	r3, #2
 801941a:	d901      	bls.n	8019420 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 801941c:	2303      	movs	r3, #3
 801941e:	e180      	b.n	8019722 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8019420:	4b0c      	ldr	r3, [pc, #48]	; (8019454 <HAL_RCC_OscConfig+0x280>)
 8019422:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019424:	f003 0302 	and.w	r3, r3, #2
 8019428:	2b00      	cmp	r3, #0
 801942a:	d0f0      	beq.n	801940e <HAL_RCC_OscConfig+0x23a>
 801942c:	e01a      	b.n	8019464 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801942e:	4b09      	ldr	r3, [pc, #36]	; (8019454 <HAL_RCC_OscConfig+0x280>)
 8019430:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019432:	4a08      	ldr	r2, [pc, #32]	; (8019454 <HAL_RCC_OscConfig+0x280>)
 8019434:	f023 0301 	bic.w	r3, r3, #1
 8019438:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801943a:	f7fc fb55 	bl	8015ae8 <HAL_GetTick>
 801943e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8019440:	e00a      	b.n	8019458 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8019442:	f7fc fb51 	bl	8015ae8 <HAL_GetTick>
 8019446:	4602      	mov	r2, r0
 8019448:	693b      	ldr	r3, [r7, #16]
 801944a:	1ad3      	subs	r3, r2, r3
 801944c:	2b02      	cmp	r3, #2
 801944e:	d903      	bls.n	8019458 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8019450:	2303      	movs	r3, #3
 8019452:	e166      	b.n	8019722 <HAL_RCC_OscConfig+0x54e>
 8019454:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8019458:	4b92      	ldr	r3, [pc, #584]	; (80196a4 <HAL_RCC_OscConfig+0x4d0>)
 801945a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801945c:	f003 0302 	and.w	r3, r3, #2
 8019460:	2b00      	cmp	r3, #0
 8019462:	d1ee      	bne.n	8019442 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8019464:	687b      	ldr	r3, [r7, #4]
 8019466:	681b      	ldr	r3, [r3, #0]
 8019468:	f003 0304 	and.w	r3, r3, #4
 801946c:	2b00      	cmp	r3, #0
 801946e:	f000 80a4 	beq.w	80195ba <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8019472:	4b8c      	ldr	r3, [pc, #560]	; (80196a4 <HAL_RCC_OscConfig+0x4d0>)
 8019474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801947a:	2b00      	cmp	r3, #0
 801947c:	d10d      	bne.n	801949a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 801947e:	4b89      	ldr	r3, [pc, #548]	; (80196a4 <HAL_RCC_OscConfig+0x4d0>)
 8019480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019482:	4a88      	ldr	r2, [pc, #544]	; (80196a4 <HAL_RCC_OscConfig+0x4d0>)
 8019484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8019488:	6413      	str	r3, [r2, #64]	; 0x40
 801948a:	4b86      	ldr	r3, [pc, #536]	; (80196a4 <HAL_RCC_OscConfig+0x4d0>)
 801948c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801948e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8019492:	60bb      	str	r3, [r7, #8]
 8019494:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8019496:	2301      	movs	r3, #1
 8019498:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801949a:	4b83      	ldr	r3, [pc, #524]	; (80196a8 <HAL_RCC_OscConfig+0x4d4>)
 801949c:	681b      	ldr	r3, [r3, #0]
 801949e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80194a2:	2b00      	cmp	r3, #0
 80194a4:	d118      	bne.n	80194d8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80194a6:	4b80      	ldr	r3, [pc, #512]	; (80196a8 <HAL_RCC_OscConfig+0x4d4>)
 80194a8:	681b      	ldr	r3, [r3, #0]
 80194aa:	4a7f      	ldr	r2, [pc, #508]	; (80196a8 <HAL_RCC_OscConfig+0x4d4>)
 80194ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80194b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80194b2:	f7fc fb19 	bl	8015ae8 <HAL_GetTick>
 80194b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80194b8:	e008      	b.n	80194cc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80194ba:	f7fc fb15 	bl	8015ae8 <HAL_GetTick>
 80194be:	4602      	mov	r2, r0
 80194c0:	693b      	ldr	r3, [r7, #16]
 80194c2:	1ad3      	subs	r3, r2, r3
 80194c4:	2b64      	cmp	r3, #100	; 0x64
 80194c6:	d901      	bls.n	80194cc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80194c8:	2303      	movs	r3, #3
 80194ca:	e12a      	b.n	8019722 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80194cc:	4b76      	ldr	r3, [pc, #472]	; (80196a8 <HAL_RCC_OscConfig+0x4d4>)
 80194ce:	681b      	ldr	r3, [r3, #0]
 80194d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80194d4:	2b00      	cmp	r3, #0
 80194d6:	d0f0      	beq.n	80194ba <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80194d8:	687b      	ldr	r3, [r7, #4]
 80194da:	689b      	ldr	r3, [r3, #8]
 80194dc:	2b01      	cmp	r3, #1
 80194de:	d106      	bne.n	80194ee <HAL_RCC_OscConfig+0x31a>
 80194e0:	4b70      	ldr	r3, [pc, #448]	; (80196a4 <HAL_RCC_OscConfig+0x4d0>)
 80194e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80194e4:	4a6f      	ldr	r2, [pc, #444]	; (80196a4 <HAL_RCC_OscConfig+0x4d0>)
 80194e6:	f043 0301 	orr.w	r3, r3, #1
 80194ea:	6713      	str	r3, [r2, #112]	; 0x70
 80194ec:	e02d      	b.n	801954a <HAL_RCC_OscConfig+0x376>
 80194ee:	687b      	ldr	r3, [r7, #4]
 80194f0:	689b      	ldr	r3, [r3, #8]
 80194f2:	2b00      	cmp	r3, #0
 80194f4:	d10c      	bne.n	8019510 <HAL_RCC_OscConfig+0x33c>
 80194f6:	4b6b      	ldr	r3, [pc, #428]	; (80196a4 <HAL_RCC_OscConfig+0x4d0>)
 80194f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80194fa:	4a6a      	ldr	r2, [pc, #424]	; (80196a4 <HAL_RCC_OscConfig+0x4d0>)
 80194fc:	f023 0301 	bic.w	r3, r3, #1
 8019500:	6713      	str	r3, [r2, #112]	; 0x70
 8019502:	4b68      	ldr	r3, [pc, #416]	; (80196a4 <HAL_RCC_OscConfig+0x4d0>)
 8019504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019506:	4a67      	ldr	r2, [pc, #412]	; (80196a4 <HAL_RCC_OscConfig+0x4d0>)
 8019508:	f023 0304 	bic.w	r3, r3, #4
 801950c:	6713      	str	r3, [r2, #112]	; 0x70
 801950e:	e01c      	b.n	801954a <HAL_RCC_OscConfig+0x376>
 8019510:	687b      	ldr	r3, [r7, #4]
 8019512:	689b      	ldr	r3, [r3, #8]
 8019514:	2b05      	cmp	r3, #5
 8019516:	d10c      	bne.n	8019532 <HAL_RCC_OscConfig+0x35e>
 8019518:	4b62      	ldr	r3, [pc, #392]	; (80196a4 <HAL_RCC_OscConfig+0x4d0>)
 801951a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801951c:	4a61      	ldr	r2, [pc, #388]	; (80196a4 <HAL_RCC_OscConfig+0x4d0>)
 801951e:	f043 0304 	orr.w	r3, r3, #4
 8019522:	6713      	str	r3, [r2, #112]	; 0x70
 8019524:	4b5f      	ldr	r3, [pc, #380]	; (80196a4 <HAL_RCC_OscConfig+0x4d0>)
 8019526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019528:	4a5e      	ldr	r2, [pc, #376]	; (80196a4 <HAL_RCC_OscConfig+0x4d0>)
 801952a:	f043 0301 	orr.w	r3, r3, #1
 801952e:	6713      	str	r3, [r2, #112]	; 0x70
 8019530:	e00b      	b.n	801954a <HAL_RCC_OscConfig+0x376>
 8019532:	4b5c      	ldr	r3, [pc, #368]	; (80196a4 <HAL_RCC_OscConfig+0x4d0>)
 8019534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019536:	4a5b      	ldr	r2, [pc, #364]	; (80196a4 <HAL_RCC_OscConfig+0x4d0>)
 8019538:	f023 0301 	bic.w	r3, r3, #1
 801953c:	6713      	str	r3, [r2, #112]	; 0x70
 801953e:	4b59      	ldr	r3, [pc, #356]	; (80196a4 <HAL_RCC_OscConfig+0x4d0>)
 8019540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019542:	4a58      	ldr	r2, [pc, #352]	; (80196a4 <HAL_RCC_OscConfig+0x4d0>)
 8019544:	f023 0304 	bic.w	r3, r3, #4
 8019548:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801954a:	687b      	ldr	r3, [r7, #4]
 801954c:	689b      	ldr	r3, [r3, #8]
 801954e:	2b00      	cmp	r3, #0
 8019550:	d015      	beq.n	801957e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8019552:	f7fc fac9 	bl	8015ae8 <HAL_GetTick>
 8019556:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8019558:	e00a      	b.n	8019570 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801955a:	f7fc fac5 	bl	8015ae8 <HAL_GetTick>
 801955e:	4602      	mov	r2, r0
 8019560:	693b      	ldr	r3, [r7, #16]
 8019562:	1ad3      	subs	r3, r2, r3
 8019564:	f241 3288 	movw	r2, #5000	; 0x1388
 8019568:	4293      	cmp	r3, r2
 801956a:	d901      	bls.n	8019570 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 801956c:	2303      	movs	r3, #3
 801956e:	e0d8      	b.n	8019722 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8019570:	4b4c      	ldr	r3, [pc, #304]	; (80196a4 <HAL_RCC_OscConfig+0x4d0>)
 8019572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019574:	f003 0302 	and.w	r3, r3, #2
 8019578:	2b00      	cmp	r3, #0
 801957a:	d0ee      	beq.n	801955a <HAL_RCC_OscConfig+0x386>
 801957c:	e014      	b.n	80195a8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801957e:	f7fc fab3 	bl	8015ae8 <HAL_GetTick>
 8019582:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8019584:	e00a      	b.n	801959c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8019586:	f7fc faaf 	bl	8015ae8 <HAL_GetTick>
 801958a:	4602      	mov	r2, r0
 801958c:	693b      	ldr	r3, [r7, #16]
 801958e:	1ad3      	subs	r3, r2, r3
 8019590:	f241 3288 	movw	r2, #5000	; 0x1388
 8019594:	4293      	cmp	r3, r2
 8019596:	d901      	bls.n	801959c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8019598:	2303      	movs	r3, #3
 801959a:	e0c2      	b.n	8019722 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801959c:	4b41      	ldr	r3, [pc, #260]	; (80196a4 <HAL_RCC_OscConfig+0x4d0>)
 801959e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80195a0:	f003 0302 	and.w	r3, r3, #2
 80195a4:	2b00      	cmp	r3, #0
 80195a6:	d1ee      	bne.n	8019586 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80195a8:	7dfb      	ldrb	r3, [r7, #23]
 80195aa:	2b01      	cmp	r3, #1
 80195ac:	d105      	bne.n	80195ba <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80195ae:	4b3d      	ldr	r3, [pc, #244]	; (80196a4 <HAL_RCC_OscConfig+0x4d0>)
 80195b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80195b2:	4a3c      	ldr	r2, [pc, #240]	; (80196a4 <HAL_RCC_OscConfig+0x4d0>)
 80195b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80195b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80195ba:	687b      	ldr	r3, [r7, #4]
 80195bc:	699b      	ldr	r3, [r3, #24]
 80195be:	2b00      	cmp	r3, #0
 80195c0:	f000 80ae 	beq.w	8019720 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80195c4:	4b37      	ldr	r3, [pc, #220]	; (80196a4 <HAL_RCC_OscConfig+0x4d0>)
 80195c6:	689b      	ldr	r3, [r3, #8]
 80195c8:	f003 030c 	and.w	r3, r3, #12
 80195cc:	2b08      	cmp	r3, #8
 80195ce:	d06d      	beq.n	80196ac <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80195d0:	687b      	ldr	r3, [r7, #4]
 80195d2:	699b      	ldr	r3, [r3, #24]
 80195d4:	2b02      	cmp	r3, #2
 80195d6:	d14b      	bne.n	8019670 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80195d8:	4b32      	ldr	r3, [pc, #200]	; (80196a4 <HAL_RCC_OscConfig+0x4d0>)
 80195da:	681b      	ldr	r3, [r3, #0]
 80195dc:	4a31      	ldr	r2, [pc, #196]	; (80196a4 <HAL_RCC_OscConfig+0x4d0>)
 80195de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80195e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80195e4:	f7fc fa80 	bl	8015ae8 <HAL_GetTick>
 80195e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80195ea:	e008      	b.n	80195fe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80195ec:	f7fc fa7c 	bl	8015ae8 <HAL_GetTick>
 80195f0:	4602      	mov	r2, r0
 80195f2:	693b      	ldr	r3, [r7, #16]
 80195f4:	1ad3      	subs	r3, r2, r3
 80195f6:	2b02      	cmp	r3, #2
 80195f8:	d901      	bls.n	80195fe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80195fa:	2303      	movs	r3, #3
 80195fc:	e091      	b.n	8019722 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80195fe:	4b29      	ldr	r3, [pc, #164]	; (80196a4 <HAL_RCC_OscConfig+0x4d0>)
 8019600:	681b      	ldr	r3, [r3, #0]
 8019602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019606:	2b00      	cmp	r3, #0
 8019608:	d1f0      	bne.n	80195ec <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801960a:	687b      	ldr	r3, [r7, #4]
 801960c:	69da      	ldr	r2, [r3, #28]
 801960e:	687b      	ldr	r3, [r7, #4]
 8019610:	6a1b      	ldr	r3, [r3, #32]
 8019612:	431a      	orrs	r2, r3
 8019614:	687b      	ldr	r3, [r7, #4]
 8019616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019618:	019b      	lsls	r3, r3, #6
 801961a:	431a      	orrs	r2, r3
 801961c:	687b      	ldr	r3, [r7, #4]
 801961e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019620:	085b      	lsrs	r3, r3, #1
 8019622:	3b01      	subs	r3, #1
 8019624:	041b      	lsls	r3, r3, #16
 8019626:	431a      	orrs	r2, r3
 8019628:	687b      	ldr	r3, [r7, #4]
 801962a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801962c:	061b      	lsls	r3, r3, #24
 801962e:	431a      	orrs	r2, r3
 8019630:	687b      	ldr	r3, [r7, #4]
 8019632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019634:	071b      	lsls	r3, r3, #28
 8019636:	491b      	ldr	r1, [pc, #108]	; (80196a4 <HAL_RCC_OscConfig+0x4d0>)
 8019638:	4313      	orrs	r3, r2
 801963a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801963c:	4b19      	ldr	r3, [pc, #100]	; (80196a4 <HAL_RCC_OscConfig+0x4d0>)
 801963e:	681b      	ldr	r3, [r3, #0]
 8019640:	4a18      	ldr	r2, [pc, #96]	; (80196a4 <HAL_RCC_OscConfig+0x4d0>)
 8019642:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8019646:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8019648:	f7fc fa4e 	bl	8015ae8 <HAL_GetTick>
 801964c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801964e:	e008      	b.n	8019662 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8019650:	f7fc fa4a 	bl	8015ae8 <HAL_GetTick>
 8019654:	4602      	mov	r2, r0
 8019656:	693b      	ldr	r3, [r7, #16]
 8019658:	1ad3      	subs	r3, r2, r3
 801965a:	2b02      	cmp	r3, #2
 801965c:	d901      	bls.n	8019662 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 801965e:	2303      	movs	r3, #3
 8019660:	e05f      	b.n	8019722 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8019662:	4b10      	ldr	r3, [pc, #64]	; (80196a4 <HAL_RCC_OscConfig+0x4d0>)
 8019664:	681b      	ldr	r3, [r3, #0]
 8019666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801966a:	2b00      	cmp	r3, #0
 801966c:	d0f0      	beq.n	8019650 <HAL_RCC_OscConfig+0x47c>
 801966e:	e057      	b.n	8019720 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8019670:	4b0c      	ldr	r3, [pc, #48]	; (80196a4 <HAL_RCC_OscConfig+0x4d0>)
 8019672:	681b      	ldr	r3, [r3, #0]
 8019674:	4a0b      	ldr	r2, [pc, #44]	; (80196a4 <HAL_RCC_OscConfig+0x4d0>)
 8019676:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801967a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801967c:	f7fc fa34 	bl	8015ae8 <HAL_GetTick>
 8019680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8019682:	e008      	b.n	8019696 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8019684:	f7fc fa30 	bl	8015ae8 <HAL_GetTick>
 8019688:	4602      	mov	r2, r0
 801968a:	693b      	ldr	r3, [r7, #16]
 801968c:	1ad3      	subs	r3, r2, r3
 801968e:	2b02      	cmp	r3, #2
 8019690:	d901      	bls.n	8019696 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8019692:	2303      	movs	r3, #3
 8019694:	e045      	b.n	8019722 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8019696:	4b03      	ldr	r3, [pc, #12]	; (80196a4 <HAL_RCC_OscConfig+0x4d0>)
 8019698:	681b      	ldr	r3, [r3, #0]
 801969a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801969e:	2b00      	cmp	r3, #0
 80196a0:	d1f0      	bne.n	8019684 <HAL_RCC_OscConfig+0x4b0>
 80196a2:	e03d      	b.n	8019720 <HAL_RCC_OscConfig+0x54c>
 80196a4:	40023800 	.word	0x40023800
 80196a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80196ac:	4b1f      	ldr	r3, [pc, #124]	; (801972c <HAL_RCC_OscConfig+0x558>)
 80196ae:	685b      	ldr	r3, [r3, #4]
 80196b0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80196b2:	687b      	ldr	r3, [r7, #4]
 80196b4:	699b      	ldr	r3, [r3, #24]
 80196b6:	2b01      	cmp	r3, #1
 80196b8:	d030      	beq.n	801971c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80196ba:	68fb      	ldr	r3, [r7, #12]
 80196bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80196c0:	687b      	ldr	r3, [r7, #4]
 80196c2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80196c4:	429a      	cmp	r2, r3
 80196c6:	d129      	bne.n	801971c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80196c8:	68fb      	ldr	r3, [r7, #12]
 80196ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80196ce:	687b      	ldr	r3, [r7, #4]
 80196d0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80196d2:	429a      	cmp	r2, r3
 80196d4:	d122      	bne.n	801971c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80196d6:	68fa      	ldr	r2, [r7, #12]
 80196d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80196dc:	4013      	ands	r3, r2
 80196de:	687a      	ldr	r2, [r7, #4]
 80196e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80196e2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80196e4:	4293      	cmp	r3, r2
 80196e6:	d119      	bne.n	801971c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80196e8:	68fb      	ldr	r3, [r7, #12]
 80196ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80196ee:	687b      	ldr	r3, [r7, #4]
 80196f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80196f2:	085b      	lsrs	r3, r3, #1
 80196f4:	3b01      	subs	r3, #1
 80196f6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80196f8:	429a      	cmp	r2, r3
 80196fa:	d10f      	bne.n	801971c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80196fc:	68fb      	ldr	r3, [r7, #12]
 80196fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8019702:	687b      	ldr	r3, [r7, #4]
 8019704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019706:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8019708:	429a      	cmp	r2, r3
 801970a:	d107      	bne.n	801971c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 801970c:	68fb      	ldr	r3, [r7, #12]
 801970e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8019712:	687b      	ldr	r3, [r7, #4]
 8019714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019716:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8019718:	429a      	cmp	r2, r3
 801971a:	d001      	beq.n	8019720 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 801971c:	2301      	movs	r3, #1
 801971e:	e000      	b.n	8019722 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8019720:	2300      	movs	r3, #0
}
 8019722:	4618      	mov	r0, r3
 8019724:	3718      	adds	r7, #24
 8019726:	46bd      	mov	sp, r7
 8019728:	bd80      	pop	{r7, pc}
 801972a:	bf00      	nop
 801972c:	40023800 	.word	0x40023800

08019730 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8019730:	b580      	push	{r7, lr}
 8019732:	b084      	sub	sp, #16
 8019734:	af00      	add	r7, sp, #0
 8019736:	6078      	str	r0, [r7, #4]
 8019738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 801973a:	2300      	movs	r3, #0
 801973c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801973e:	687b      	ldr	r3, [r7, #4]
 8019740:	2b00      	cmp	r3, #0
 8019742:	d101      	bne.n	8019748 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8019744:	2301      	movs	r3, #1
 8019746:	e0d0      	b.n	80198ea <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8019748:	4b6a      	ldr	r3, [pc, #424]	; (80198f4 <HAL_RCC_ClockConfig+0x1c4>)
 801974a:	681b      	ldr	r3, [r3, #0]
 801974c:	f003 030f 	and.w	r3, r3, #15
 8019750:	683a      	ldr	r2, [r7, #0]
 8019752:	429a      	cmp	r2, r3
 8019754:	d910      	bls.n	8019778 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8019756:	4b67      	ldr	r3, [pc, #412]	; (80198f4 <HAL_RCC_ClockConfig+0x1c4>)
 8019758:	681b      	ldr	r3, [r3, #0]
 801975a:	f023 020f 	bic.w	r2, r3, #15
 801975e:	4965      	ldr	r1, [pc, #404]	; (80198f4 <HAL_RCC_ClockConfig+0x1c4>)
 8019760:	683b      	ldr	r3, [r7, #0]
 8019762:	4313      	orrs	r3, r2
 8019764:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8019766:	4b63      	ldr	r3, [pc, #396]	; (80198f4 <HAL_RCC_ClockConfig+0x1c4>)
 8019768:	681b      	ldr	r3, [r3, #0]
 801976a:	f003 030f 	and.w	r3, r3, #15
 801976e:	683a      	ldr	r2, [r7, #0]
 8019770:	429a      	cmp	r2, r3
 8019772:	d001      	beq.n	8019778 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8019774:	2301      	movs	r3, #1
 8019776:	e0b8      	b.n	80198ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8019778:	687b      	ldr	r3, [r7, #4]
 801977a:	681b      	ldr	r3, [r3, #0]
 801977c:	f003 0302 	and.w	r3, r3, #2
 8019780:	2b00      	cmp	r3, #0
 8019782:	d020      	beq.n	80197c6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8019784:	687b      	ldr	r3, [r7, #4]
 8019786:	681b      	ldr	r3, [r3, #0]
 8019788:	f003 0304 	and.w	r3, r3, #4
 801978c:	2b00      	cmp	r3, #0
 801978e:	d005      	beq.n	801979c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8019790:	4b59      	ldr	r3, [pc, #356]	; (80198f8 <HAL_RCC_ClockConfig+0x1c8>)
 8019792:	689b      	ldr	r3, [r3, #8]
 8019794:	4a58      	ldr	r2, [pc, #352]	; (80198f8 <HAL_RCC_ClockConfig+0x1c8>)
 8019796:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801979a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801979c:	687b      	ldr	r3, [r7, #4]
 801979e:	681b      	ldr	r3, [r3, #0]
 80197a0:	f003 0308 	and.w	r3, r3, #8
 80197a4:	2b00      	cmp	r3, #0
 80197a6:	d005      	beq.n	80197b4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80197a8:	4b53      	ldr	r3, [pc, #332]	; (80198f8 <HAL_RCC_ClockConfig+0x1c8>)
 80197aa:	689b      	ldr	r3, [r3, #8]
 80197ac:	4a52      	ldr	r2, [pc, #328]	; (80198f8 <HAL_RCC_ClockConfig+0x1c8>)
 80197ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80197b2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80197b4:	4b50      	ldr	r3, [pc, #320]	; (80198f8 <HAL_RCC_ClockConfig+0x1c8>)
 80197b6:	689b      	ldr	r3, [r3, #8]
 80197b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80197bc:	687b      	ldr	r3, [r7, #4]
 80197be:	689b      	ldr	r3, [r3, #8]
 80197c0:	494d      	ldr	r1, [pc, #308]	; (80198f8 <HAL_RCC_ClockConfig+0x1c8>)
 80197c2:	4313      	orrs	r3, r2
 80197c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80197c6:	687b      	ldr	r3, [r7, #4]
 80197c8:	681b      	ldr	r3, [r3, #0]
 80197ca:	f003 0301 	and.w	r3, r3, #1
 80197ce:	2b00      	cmp	r3, #0
 80197d0:	d040      	beq.n	8019854 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80197d2:	687b      	ldr	r3, [r7, #4]
 80197d4:	685b      	ldr	r3, [r3, #4]
 80197d6:	2b01      	cmp	r3, #1
 80197d8:	d107      	bne.n	80197ea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80197da:	4b47      	ldr	r3, [pc, #284]	; (80198f8 <HAL_RCC_ClockConfig+0x1c8>)
 80197dc:	681b      	ldr	r3, [r3, #0]
 80197de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80197e2:	2b00      	cmp	r3, #0
 80197e4:	d115      	bne.n	8019812 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80197e6:	2301      	movs	r3, #1
 80197e8:	e07f      	b.n	80198ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80197ea:	687b      	ldr	r3, [r7, #4]
 80197ec:	685b      	ldr	r3, [r3, #4]
 80197ee:	2b02      	cmp	r3, #2
 80197f0:	d107      	bne.n	8019802 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80197f2:	4b41      	ldr	r3, [pc, #260]	; (80198f8 <HAL_RCC_ClockConfig+0x1c8>)
 80197f4:	681b      	ldr	r3, [r3, #0]
 80197f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80197fa:	2b00      	cmp	r3, #0
 80197fc:	d109      	bne.n	8019812 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80197fe:	2301      	movs	r3, #1
 8019800:	e073      	b.n	80198ea <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8019802:	4b3d      	ldr	r3, [pc, #244]	; (80198f8 <HAL_RCC_ClockConfig+0x1c8>)
 8019804:	681b      	ldr	r3, [r3, #0]
 8019806:	f003 0302 	and.w	r3, r3, #2
 801980a:	2b00      	cmp	r3, #0
 801980c:	d101      	bne.n	8019812 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 801980e:	2301      	movs	r3, #1
 8019810:	e06b      	b.n	80198ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8019812:	4b39      	ldr	r3, [pc, #228]	; (80198f8 <HAL_RCC_ClockConfig+0x1c8>)
 8019814:	689b      	ldr	r3, [r3, #8]
 8019816:	f023 0203 	bic.w	r2, r3, #3
 801981a:	687b      	ldr	r3, [r7, #4]
 801981c:	685b      	ldr	r3, [r3, #4]
 801981e:	4936      	ldr	r1, [pc, #216]	; (80198f8 <HAL_RCC_ClockConfig+0x1c8>)
 8019820:	4313      	orrs	r3, r2
 8019822:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8019824:	f7fc f960 	bl	8015ae8 <HAL_GetTick>
 8019828:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801982a:	e00a      	b.n	8019842 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801982c:	f7fc f95c 	bl	8015ae8 <HAL_GetTick>
 8019830:	4602      	mov	r2, r0
 8019832:	68fb      	ldr	r3, [r7, #12]
 8019834:	1ad3      	subs	r3, r2, r3
 8019836:	f241 3288 	movw	r2, #5000	; 0x1388
 801983a:	4293      	cmp	r3, r2
 801983c:	d901      	bls.n	8019842 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 801983e:	2303      	movs	r3, #3
 8019840:	e053      	b.n	80198ea <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8019842:	4b2d      	ldr	r3, [pc, #180]	; (80198f8 <HAL_RCC_ClockConfig+0x1c8>)
 8019844:	689b      	ldr	r3, [r3, #8]
 8019846:	f003 020c 	and.w	r2, r3, #12
 801984a:	687b      	ldr	r3, [r7, #4]
 801984c:	685b      	ldr	r3, [r3, #4]
 801984e:	009b      	lsls	r3, r3, #2
 8019850:	429a      	cmp	r2, r3
 8019852:	d1eb      	bne.n	801982c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8019854:	4b27      	ldr	r3, [pc, #156]	; (80198f4 <HAL_RCC_ClockConfig+0x1c4>)
 8019856:	681b      	ldr	r3, [r3, #0]
 8019858:	f003 030f 	and.w	r3, r3, #15
 801985c:	683a      	ldr	r2, [r7, #0]
 801985e:	429a      	cmp	r2, r3
 8019860:	d210      	bcs.n	8019884 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8019862:	4b24      	ldr	r3, [pc, #144]	; (80198f4 <HAL_RCC_ClockConfig+0x1c4>)
 8019864:	681b      	ldr	r3, [r3, #0]
 8019866:	f023 020f 	bic.w	r2, r3, #15
 801986a:	4922      	ldr	r1, [pc, #136]	; (80198f4 <HAL_RCC_ClockConfig+0x1c4>)
 801986c:	683b      	ldr	r3, [r7, #0]
 801986e:	4313      	orrs	r3, r2
 8019870:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8019872:	4b20      	ldr	r3, [pc, #128]	; (80198f4 <HAL_RCC_ClockConfig+0x1c4>)
 8019874:	681b      	ldr	r3, [r3, #0]
 8019876:	f003 030f 	and.w	r3, r3, #15
 801987a:	683a      	ldr	r2, [r7, #0]
 801987c:	429a      	cmp	r2, r3
 801987e:	d001      	beq.n	8019884 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8019880:	2301      	movs	r3, #1
 8019882:	e032      	b.n	80198ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8019884:	687b      	ldr	r3, [r7, #4]
 8019886:	681b      	ldr	r3, [r3, #0]
 8019888:	f003 0304 	and.w	r3, r3, #4
 801988c:	2b00      	cmp	r3, #0
 801988e:	d008      	beq.n	80198a2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8019890:	4b19      	ldr	r3, [pc, #100]	; (80198f8 <HAL_RCC_ClockConfig+0x1c8>)
 8019892:	689b      	ldr	r3, [r3, #8]
 8019894:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8019898:	687b      	ldr	r3, [r7, #4]
 801989a:	68db      	ldr	r3, [r3, #12]
 801989c:	4916      	ldr	r1, [pc, #88]	; (80198f8 <HAL_RCC_ClockConfig+0x1c8>)
 801989e:	4313      	orrs	r3, r2
 80198a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80198a2:	687b      	ldr	r3, [r7, #4]
 80198a4:	681b      	ldr	r3, [r3, #0]
 80198a6:	f003 0308 	and.w	r3, r3, #8
 80198aa:	2b00      	cmp	r3, #0
 80198ac:	d009      	beq.n	80198c2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80198ae:	4b12      	ldr	r3, [pc, #72]	; (80198f8 <HAL_RCC_ClockConfig+0x1c8>)
 80198b0:	689b      	ldr	r3, [r3, #8]
 80198b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80198b6:	687b      	ldr	r3, [r7, #4]
 80198b8:	691b      	ldr	r3, [r3, #16]
 80198ba:	00db      	lsls	r3, r3, #3
 80198bc:	490e      	ldr	r1, [pc, #56]	; (80198f8 <HAL_RCC_ClockConfig+0x1c8>)
 80198be:	4313      	orrs	r3, r2
 80198c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80198c2:	f000 f821 	bl	8019908 <HAL_RCC_GetSysClockFreq>
 80198c6:	4602      	mov	r2, r0
 80198c8:	4b0b      	ldr	r3, [pc, #44]	; (80198f8 <HAL_RCC_ClockConfig+0x1c8>)
 80198ca:	689b      	ldr	r3, [r3, #8]
 80198cc:	091b      	lsrs	r3, r3, #4
 80198ce:	f003 030f 	and.w	r3, r3, #15
 80198d2:	490a      	ldr	r1, [pc, #40]	; (80198fc <HAL_RCC_ClockConfig+0x1cc>)
 80198d4:	5ccb      	ldrb	r3, [r1, r3]
 80198d6:	fa22 f303 	lsr.w	r3, r2, r3
 80198da:	4a09      	ldr	r2, [pc, #36]	; (8019900 <HAL_RCC_ClockConfig+0x1d0>)
 80198dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80198de:	4b09      	ldr	r3, [pc, #36]	; (8019904 <HAL_RCC_ClockConfig+0x1d4>)
 80198e0:	681b      	ldr	r3, [r3, #0]
 80198e2:	4618      	mov	r0, r3
 80198e4:	f7fc f8bc 	bl	8015a60 <HAL_InitTick>

  return HAL_OK;
 80198e8:	2300      	movs	r3, #0
}
 80198ea:	4618      	mov	r0, r3
 80198ec:	3710      	adds	r7, #16
 80198ee:	46bd      	mov	sp, r7
 80198f0:	bd80      	pop	{r7, pc}
 80198f2:	bf00      	nop
 80198f4:	40023c00 	.word	0x40023c00
 80198f8:	40023800 	.word	0x40023800
 80198fc:	080291bc 	.word	0x080291bc
 8019900:	2000011c 	.word	0x2000011c
 8019904:	20000120 	.word	0x20000120

08019908 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8019908:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801990c:	b090      	sub	sp, #64	; 0x40
 801990e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8019910:	2300      	movs	r3, #0
 8019912:	637b      	str	r3, [r7, #52]	; 0x34
 8019914:	2300      	movs	r3, #0
 8019916:	63fb      	str	r3, [r7, #60]	; 0x3c
 8019918:	2300      	movs	r3, #0
 801991a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 801991c:	2300      	movs	r3, #0
 801991e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8019920:	4b59      	ldr	r3, [pc, #356]	; (8019a88 <HAL_RCC_GetSysClockFreq+0x180>)
 8019922:	689b      	ldr	r3, [r3, #8]
 8019924:	f003 030c 	and.w	r3, r3, #12
 8019928:	2b08      	cmp	r3, #8
 801992a:	d00d      	beq.n	8019948 <HAL_RCC_GetSysClockFreq+0x40>
 801992c:	2b08      	cmp	r3, #8
 801992e:	f200 80a1 	bhi.w	8019a74 <HAL_RCC_GetSysClockFreq+0x16c>
 8019932:	2b00      	cmp	r3, #0
 8019934:	d002      	beq.n	801993c <HAL_RCC_GetSysClockFreq+0x34>
 8019936:	2b04      	cmp	r3, #4
 8019938:	d003      	beq.n	8019942 <HAL_RCC_GetSysClockFreq+0x3a>
 801993a:	e09b      	b.n	8019a74 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 801993c:	4b53      	ldr	r3, [pc, #332]	; (8019a8c <HAL_RCC_GetSysClockFreq+0x184>)
 801993e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8019940:	e09b      	b.n	8019a7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8019942:	4b53      	ldr	r3, [pc, #332]	; (8019a90 <HAL_RCC_GetSysClockFreq+0x188>)
 8019944:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8019946:	e098      	b.n	8019a7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8019948:	4b4f      	ldr	r3, [pc, #316]	; (8019a88 <HAL_RCC_GetSysClockFreq+0x180>)
 801994a:	685b      	ldr	r3, [r3, #4]
 801994c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019950:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8019952:	4b4d      	ldr	r3, [pc, #308]	; (8019a88 <HAL_RCC_GetSysClockFreq+0x180>)
 8019954:	685b      	ldr	r3, [r3, #4]
 8019956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801995a:	2b00      	cmp	r3, #0
 801995c:	d028      	beq.n	80199b0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801995e:	4b4a      	ldr	r3, [pc, #296]	; (8019a88 <HAL_RCC_GetSysClockFreq+0x180>)
 8019960:	685b      	ldr	r3, [r3, #4]
 8019962:	099b      	lsrs	r3, r3, #6
 8019964:	2200      	movs	r2, #0
 8019966:	623b      	str	r3, [r7, #32]
 8019968:	627a      	str	r2, [r7, #36]	; 0x24
 801996a:	6a3b      	ldr	r3, [r7, #32]
 801996c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8019970:	2100      	movs	r1, #0
 8019972:	4b47      	ldr	r3, [pc, #284]	; (8019a90 <HAL_RCC_GetSysClockFreq+0x188>)
 8019974:	fb03 f201 	mul.w	r2, r3, r1
 8019978:	2300      	movs	r3, #0
 801997a:	fb00 f303 	mul.w	r3, r0, r3
 801997e:	4413      	add	r3, r2
 8019980:	4a43      	ldr	r2, [pc, #268]	; (8019a90 <HAL_RCC_GetSysClockFreq+0x188>)
 8019982:	fba0 1202 	umull	r1, r2, r0, r2
 8019986:	62fa      	str	r2, [r7, #44]	; 0x2c
 8019988:	460a      	mov	r2, r1
 801998a:	62ba      	str	r2, [r7, #40]	; 0x28
 801998c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801998e:	4413      	add	r3, r2
 8019990:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019994:	2200      	movs	r2, #0
 8019996:	61bb      	str	r3, [r7, #24]
 8019998:	61fa      	str	r2, [r7, #28]
 801999a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801999e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80199a2:	f7e6 fcb5 	bl	8000310 <__aeabi_uldivmod>
 80199a6:	4602      	mov	r2, r0
 80199a8:	460b      	mov	r3, r1
 80199aa:	4613      	mov	r3, r2
 80199ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80199ae:	e053      	b.n	8019a58 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80199b0:	4b35      	ldr	r3, [pc, #212]	; (8019a88 <HAL_RCC_GetSysClockFreq+0x180>)
 80199b2:	685b      	ldr	r3, [r3, #4]
 80199b4:	099b      	lsrs	r3, r3, #6
 80199b6:	2200      	movs	r2, #0
 80199b8:	613b      	str	r3, [r7, #16]
 80199ba:	617a      	str	r2, [r7, #20]
 80199bc:	693b      	ldr	r3, [r7, #16]
 80199be:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80199c2:	f04f 0b00 	mov.w	fp, #0
 80199c6:	4652      	mov	r2, sl
 80199c8:	465b      	mov	r3, fp
 80199ca:	f04f 0000 	mov.w	r0, #0
 80199ce:	f04f 0100 	mov.w	r1, #0
 80199d2:	0159      	lsls	r1, r3, #5
 80199d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80199d8:	0150      	lsls	r0, r2, #5
 80199da:	4602      	mov	r2, r0
 80199dc:	460b      	mov	r3, r1
 80199de:	ebb2 080a 	subs.w	r8, r2, sl
 80199e2:	eb63 090b 	sbc.w	r9, r3, fp
 80199e6:	f04f 0200 	mov.w	r2, #0
 80199ea:	f04f 0300 	mov.w	r3, #0
 80199ee:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80199f2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80199f6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80199fa:	ebb2 0408 	subs.w	r4, r2, r8
 80199fe:	eb63 0509 	sbc.w	r5, r3, r9
 8019a02:	f04f 0200 	mov.w	r2, #0
 8019a06:	f04f 0300 	mov.w	r3, #0
 8019a0a:	00eb      	lsls	r3, r5, #3
 8019a0c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8019a10:	00e2      	lsls	r2, r4, #3
 8019a12:	4614      	mov	r4, r2
 8019a14:	461d      	mov	r5, r3
 8019a16:	eb14 030a 	adds.w	r3, r4, sl
 8019a1a:	603b      	str	r3, [r7, #0]
 8019a1c:	eb45 030b 	adc.w	r3, r5, fp
 8019a20:	607b      	str	r3, [r7, #4]
 8019a22:	f04f 0200 	mov.w	r2, #0
 8019a26:	f04f 0300 	mov.w	r3, #0
 8019a2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8019a2e:	4629      	mov	r1, r5
 8019a30:	028b      	lsls	r3, r1, #10
 8019a32:	4621      	mov	r1, r4
 8019a34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8019a38:	4621      	mov	r1, r4
 8019a3a:	028a      	lsls	r2, r1, #10
 8019a3c:	4610      	mov	r0, r2
 8019a3e:	4619      	mov	r1, r3
 8019a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019a42:	2200      	movs	r2, #0
 8019a44:	60bb      	str	r3, [r7, #8]
 8019a46:	60fa      	str	r2, [r7, #12]
 8019a48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8019a4c:	f7e6 fc60 	bl	8000310 <__aeabi_uldivmod>
 8019a50:	4602      	mov	r2, r0
 8019a52:	460b      	mov	r3, r1
 8019a54:	4613      	mov	r3, r2
 8019a56:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8019a58:	4b0b      	ldr	r3, [pc, #44]	; (8019a88 <HAL_RCC_GetSysClockFreq+0x180>)
 8019a5a:	685b      	ldr	r3, [r3, #4]
 8019a5c:	0c1b      	lsrs	r3, r3, #16
 8019a5e:	f003 0303 	and.w	r3, r3, #3
 8019a62:	3301      	adds	r3, #1
 8019a64:	005b      	lsls	r3, r3, #1
 8019a66:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8019a68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8019a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8019a70:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8019a72:	e002      	b.n	8019a7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8019a74:	4b05      	ldr	r3, [pc, #20]	; (8019a8c <HAL_RCC_GetSysClockFreq+0x184>)
 8019a76:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8019a78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8019a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8019a7c:	4618      	mov	r0, r3
 8019a7e:	3740      	adds	r7, #64	; 0x40
 8019a80:	46bd      	mov	sp, r7
 8019a82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8019a86:	bf00      	nop
 8019a88:	40023800 	.word	0x40023800
 8019a8c:	00f42400 	.word	0x00f42400
 8019a90:	00b71b00 	.word	0x00b71b00

08019a94 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8019a94:	b480      	push	{r7}
 8019a96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8019a98:	4b03      	ldr	r3, [pc, #12]	; (8019aa8 <HAL_RCC_GetHCLKFreq+0x14>)
 8019a9a:	681b      	ldr	r3, [r3, #0]
}
 8019a9c:	4618      	mov	r0, r3
 8019a9e:	46bd      	mov	sp, r7
 8019aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019aa4:	4770      	bx	lr
 8019aa6:	bf00      	nop
 8019aa8:	2000011c 	.word	0x2000011c

08019aac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8019aac:	b580      	push	{r7, lr}
 8019aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8019ab0:	f7ff fff0 	bl	8019a94 <HAL_RCC_GetHCLKFreq>
 8019ab4:	4602      	mov	r2, r0
 8019ab6:	4b05      	ldr	r3, [pc, #20]	; (8019acc <HAL_RCC_GetPCLK1Freq+0x20>)
 8019ab8:	689b      	ldr	r3, [r3, #8]
 8019aba:	0a9b      	lsrs	r3, r3, #10
 8019abc:	f003 0307 	and.w	r3, r3, #7
 8019ac0:	4903      	ldr	r1, [pc, #12]	; (8019ad0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8019ac2:	5ccb      	ldrb	r3, [r1, r3]
 8019ac4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8019ac8:	4618      	mov	r0, r3
 8019aca:	bd80      	pop	{r7, pc}
 8019acc:	40023800 	.word	0x40023800
 8019ad0:	080291cc 	.word	0x080291cc

08019ad4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8019ad4:	b580      	push	{r7, lr}
 8019ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8019ad8:	f7ff ffdc 	bl	8019a94 <HAL_RCC_GetHCLKFreq>
 8019adc:	4602      	mov	r2, r0
 8019ade:	4b05      	ldr	r3, [pc, #20]	; (8019af4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8019ae0:	689b      	ldr	r3, [r3, #8]
 8019ae2:	0b5b      	lsrs	r3, r3, #13
 8019ae4:	f003 0307 	and.w	r3, r3, #7
 8019ae8:	4903      	ldr	r1, [pc, #12]	; (8019af8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8019aea:	5ccb      	ldrb	r3, [r1, r3]
 8019aec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8019af0:	4618      	mov	r0, r3
 8019af2:	bd80      	pop	{r7, pc}
 8019af4:	40023800 	.word	0x40023800
 8019af8:	080291cc 	.word	0x080291cc

08019afc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8019afc:	b580      	push	{r7, lr}
 8019afe:	b088      	sub	sp, #32
 8019b00:	af00      	add	r7, sp, #0
 8019b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8019b04:	2300      	movs	r3, #0
 8019b06:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8019b08:	2300      	movs	r3, #0
 8019b0a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8019b0c:	2300      	movs	r3, #0
 8019b0e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8019b10:	2300      	movs	r3, #0
 8019b12:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8019b14:	2300      	movs	r3, #0
 8019b16:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8019b18:	687b      	ldr	r3, [r7, #4]
 8019b1a:	681b      	ldr	r3, [r3, #0]
 8019b1c:	f003 0301 	and.w	r3, r3, #1
 8019b20:	2b00      	cmp	r3, #0
 8019b22:	d012      	beq.n	8019b4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8019b24:	4b69      	ldr	r3, [pc, #420]	; (8019ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019b26:	689b      	ldr	r3, [r3, #8]
 8019b28:	4a68      	ldr	r2, [pc, #416]	; (8019ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019b2a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8019b2e:	6093      	str	r3, [r2, #8]
 8019b30:	4b66      	ldr	r3, [pc, #408]	; (8019ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019b32:	689a      	ldr	r2, [r3, #8]
 8019b34:	687b      	ldr	r3, [r7, #4]
 8019b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019b38:	4964      	ldr	r1, [pc, #400]	; (8019ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019b3a:	4313      	orrs	r3, r2
 8019b3c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8019b3e:	687b      	ldr	r3, [r7, #4]
 8019b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019b42:	2b00      	cmp	r3, #0
 8019b44:	d101      	bne.n	8019b4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8019b46:	2301      	movs	r3, #1
 8019b48:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8019b4a:	687b      	ldr	r3, [r7, #4]
 8019b4c:	681b      	ldr	r3, [r3, #0]
 8019b4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8019b52:	2b00      	cmp	r3, #0
 8019b54:	d017      	beq.n	8019b86 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8019b56:	4b5d      	ldr	r3, [pc, #372]	; (8019ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019b58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019b5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8019b60:	687b      	ldr	r3, [r7, #4]
 8019b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019b64:	4959      	ldr	r1, [pc, #356]	; (8019ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019b66:	4313      	orrs	r3, r2
 8019b68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8019b6c:	687b      	ldr	r3, [r7, #4]
 8019b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019b70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8019b74:	d101      	bne.n	8019b7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8019b76:	2301      	movs	r3, #1
 8019b78:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8019b7a:	687b      	ldr	r3, [r7, #4]
 8019b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019b7e:	2b00      	cmp	r3, #0
 8019b80:	d101      	bne.n	8019b86 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8019b82:	2301      	movs	r3, #1
 8019b84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8019b86:	687b      	ldr	r3, [r7, #4]
 8019b88:	681b      	ldr	r3, [r3, #0]
 8019b8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8019b8e:	2b00      	cmp	r3, #0
 8019b90:	d017      	beq.n	8019bc2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8019b92:	4b4e      	ldr	r3, [pc, #312]	; (8019ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019b94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019b98:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8019b9c:	687b      	ldr	r3, [r7, #4]
 8019b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019ba0:	494a      	ldr	r1, [pc, #296]	; (8019ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019ba2:	4313      	orrs	r3, r2
 8019ba4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8019ba8:	687b      	ldr	r3, [r7, #4]
 8019baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019bac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8019bb0:	d101      	bne.n	8019bb6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8019bb2:	2301      	movs	r3, #1
 8019bb4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8019bb6:	687b      	ldr	r3, [r7, #4]
 8019bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019bba:	2b00      	cmp	r3, #0
 8019bbc:	d101      	bne.n	8019bc2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8019bbe:	2301      	movs	r3, #1
 8019bc0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8019bc2:	687b      	ldr	r3, [r7, #4]
 8019bc4:	681b      	ldr	r3, [r3, #0]
 8019bc6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8019bca:	2b00      	cmp	r3, #0
 8019bcc:	d001      	beq.n	8019bd2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8019bce:	2301      	movs	r3, #1
 8019bd0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8019bd2:	687b      	ldr	r3, [r7, #4]
 8019bd4:	681b      	ldr	r3, [r3, #0]
 8019bd6:	f003 0320 	and.w	r3, r3, #32
 8019bda:	2b00      	cmp	r3, #0
 8019bdc:	f000 808b 	beq.w	8019cf6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8019be0:	4b3a      	ldr	r3, [pc, #232]	; (8019ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019be4:	4a39      	ldr	r2, [pc, #228]	; (8019ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019be6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8019bea:	6413      	str	r3, [r2, #64]	; 0x40
 8019bec:	4b37      	ldr	r3, [pc, #220]	; (8019ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8019bf4:	60bb      	str	r3, [r7, #8]
 8019bf6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8019bf8:	4b35      	ldr	r3, [pc, #212]	; (8019cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8019bfa:	681b      	ldr	r3, [r3, #0]
 8019bfc:	4a34      	ldr	r2, [pc, #208]	; (8019cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8019bfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8019c02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8019c04:	f7fb ff70 	bl	8015ae8 <HAL_GetTick>
 8019c08:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8019c0a:	e008      	b.n	8019c1e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8019c0c:	f7fb ff6c 	bl	8015ae8 <HAL_GetTick>
 8019c10:	4602      	mov	r2, r0
 8019c12:	697b      	ldr	r3, [r7, #20]
 8019c14:	1ad3      	subs	r3, r2, r3
 8019c16:	2b64      	cmp	r3, #100	; 0x64
 8019c18:	d901      	bls.n	8019c1e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8019c1a:	2303      	movs	r3, #3
 8019c1c:	e38f      	b.n	801a33e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8019c1e:	4b2c      	ldr	r3, [pc, #176]	; (8019cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8019c20:	681b      	ldr	r3, [r3, #0]
 8019c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019c26:	2b00      	cmp	r3, #0
 8019c28:	d0f0      	beq.n	8019c0c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8019c2a:	4b28      	ldr	r3, [pc, #160]	; (8019ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019c2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8019c32:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8019c34:	693b      	ldr	r3, [r7, #16]
 8019c36:	2b00      	cmp	r3, #0
 8019c38:	d035      	beq.n	8019ca6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8019c3a:	687b      	ldr	r3, [r7, #4]
 8019c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019c3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8019c42:	693a      	ldr	r2, [r7, #16]
 8019c44:	429a      	cmp	r2, r3
 8019c46:	d02e      	beq.n	8019ca6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8019c48:	4b20      	ldr	r3, [pc, #128]	; (8019ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019c4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8019c50:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8019c52:	4b1e      	ldr	r3, [pc, #120]	; (8019ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019c56:	4a1d      	ldr	r2, [pc, #116]	; (8019ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8019c5c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8019c5e:	4b1b      	ldr	r3, [pc, #108]	; (8019ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019c62:	4a1a      	ldr	r2, [pc, #104]	; (8019ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019c64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8019c68:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8019c6a:	4a18      	ldr	r2, [pc, #96]	; (8019ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019c6c:	693b      	ldr	r3, [r7, #16]
 8019c6e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8019c70:	4b16      	ldr	r3, [pc, #88]	; (8019ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019c74:	f003 0301 	and.w	r3, r3, #1
 8019c78:	2b01      	cmp	r3, #1
 8019c7a:	d114      	bne.n	8019ca6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8019c7c:	f7fb ff34 	bl	8015ae8 <HAL_GetTick>
 8019c80:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8019c82:	e00a      	b.n	8019c9a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8019c84:	f7fb ff30 	bl	8015ae8 <HAL_GetTick>
 8019c88:	4602      	mov	r2, r0
 8019c8a:	697b      	ldr	r3, [r7, #20]
 8019c8c:	1ad3      	subs	r3, r2, r3
 8019c8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8019c92:	4293      	cmp	r3, r2
 8019c94:	d901      	bls.n	8019c9a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8019c96:	2303      	movs	r3, #3
 8019c98:	e351      	b.n	801a33e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8019c9a:	4b0c      	ldr	r3, [pc, #48]	; (8019ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019c9e:	f003 0302 	and.w	r3, r3, #2
 8019ca2:	2b00      	cmp	r3, #0
 8019ca4:	d0ee      	beq.n	8019c84 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8019ca6:	687b      	ldr	r3, [r7, #4]
 8019ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019caa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8019cae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8019cb2:	d111      	bne.n	8019cd8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8019cb4:	4b05      	ldr	r3, [pc, #20]	; (8019ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019cb6:	689b      	ldr	r3, [r3, #8]
 8019cb8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8019cbc:	687b      	ldr	r3, [r7, #4]
 8019cbe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8019cc0:	4b04      	ldr	r3, [pc, #16]	; (8019cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8019cc2:	400b      	ands	r3, r1
 8019cc4:	4901      	ldr	r1, [pc, #4]	; (8019ccc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019cc6:	4313      	orrs	r3, r2
 8019cc8:	608b      	str	r3, [r1, #8]
 8019cca:	e00b      	b.n	8019ce4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8019ccc:	40023800 	.word	0x40023800
 8019cd0:	40007000 	.word	0x40007000
 8019cd4:	0ffffcff 	.word	0x0ffffcff
 8019cd8:	4bac      	ldr	r3, [pc, #688]	; (8019f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019cda:	689b      	ldr	r3, [r3, #8]
 8019cdc:	4aab      	ldr	r2, [pc, #684]	; (8019f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019cde:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8019ce2:	6093      	str	r3, [r2, #8]
 8019ce4:	4ba9      	ldr	r3, [pc, #676]	; (8019f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019ce6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8019ce8:	687b      	ldr	r3, [r7, #4]
 8019cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019cec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8019cf0:	49a6      	ldr	r1, [pc, #664]	; (8019f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019cf2:	4313      	orrs	r3, r2
 8019cf4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8019cf6:	687b      	ldr	r3, [r7, #4]
 8019cf8:	681b      	ldr	r3, [r3, #0]
 8019cfa:	f003 0310 	and.w	r3, r3, #16
 8019cfe:	2b00      	cmp	r3, #0
 8019d00:	d010      	beq.n	8019d24 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8019d02:	4ba2      	ldr	r3, [pc, #648]	; (8019f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019d04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019d08:	4aa0      	ldr	r2, [pc, #640]	; (8019f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019d0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8019d0e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8019d12:	4b9e      	ldr	r3, [pc, #632]	; (8019f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019d14:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8019d18:	687b      	ldr	r3, [r7, #4]
 8019d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019d1c:	499b      	ldr	r1, [pc, #620]	; (8019f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019d1e:	4313      	orrs	r3, r2
 8019d20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8019d24:	687b      	ldr	r3, [r7, #4]
 8019d26:	681b      	ldr	r3, [r3, #0]
 8019d28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8019d2c:	2b00      	cmp	r3, #0
 8019d2e:	d00a      	beq.n	8019d46 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8019d30:	4b96      	ldr	r3, [pc, #600]	; (8019f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019d36:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8019d3a:	687b      	ldr	r3, [r7, #4]
 8019d3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8019d3e:	4993      	ldr	r1, [pc, #588]	; (8019f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019d40:	4313      	orrs	r3, r2
 8019d42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8019d46:	687b      	ldr	r3, [r7, #4]
 8019d48:	681b      	ldr	r3, [r3, #0]
 8019d4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8019d4e:	2b00      	cmp	r3, #0
 8019d50:	d00a      	beq.n	8019d68 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8019d52:	4b8e      	ldr	r3, [pc, #568]	; (8019f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019d58:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8019d5c:	687b      	ldr	r3, [r7, #4]
 8019d5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8019d60:	498a      	ldr	r1, [pc, #552]	; (8019f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019d62:	4313      	orrs	r3, r2
 8019d64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8019d68:	687b      	ldr	r3, [r7, #4]
 8019d6a:	681b      	ldr	r3, [r3, #0]
 8019d6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8019d70:	2b00      	cmp	r3, #0
 8019d72:	d00a      	beq.n	8019d8a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8019d74:	4b85      	ldr	r3, [pc, #532]	; (8019f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019d7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8019d7e:	687b      	ldr	r3, [r7, #4]
 8019d80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019d82:	4982      	ldr	r1, [pc, #520]	; (8019f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019d84:	4313      	orrs	r3, r2
 8019d86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8019d8a:	687b      	ldr	r3, [r7, #4]
 8019d8c:	681b      	ldr	r3, [r3, #0]
 8019d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8019d92:	2b00      	cmp	r3, #0
 8019d94:	d00a      	beq.n	8019dac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8019d96:	4b7d      	ldr	r3, [pc, #500]	; (8019f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019d9c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8019da0:	687b      	ldr	r3, [r7, #4]
 8019da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019da4:	4979      	ldr	r1, [pc, #484]	; (8019f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019da6:	4313      	orrs	r3, r2
 8019da8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8019dac:	687b      	ldr	r3, [r7, #4]
 8019dae:	681b      	ldr	r3, [r3, #0]
 8019db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019db4:	2b00      	cmp	r3, #0
 8019db6:	d00a      	beq.n	8019dce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8019db8:	4b74      	ldr	r3, [pc, #464]	; (8019f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019dbe:	f023 0203 	bic.w	r2, r3, #3
 8019dc2:	687b      	ldr	r3, [r7, #4]
 8019dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019dc6:	4971      	ldr	r1, [pc, #452]	; (8019f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019dc8:	4313      	orrs	r3, r2
 8019dca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8019dce:	687b      	ldr	r3, [r7, #4]
 8019dd0:	681b      	ldr	r3, [r3, #0]
 8019dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019dd6:	2b00      	cmp	r3, #0
 8019dd8:	d00a      	beq.n	8019df0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8019dda:	4b6c      	ldr	r3, [pc, #432]	; (8019f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019de0:	f023 020c 	bic.w	r2, r3, #12
 8019de4:	687b      	ldr	r3, [r7, #4]
 8019de6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019de8:	4968      	ldr	r1, [pc, #416]	; (8019f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019dea:	4313      	orrs	r3, r2
 8019dec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8019df0:	687b      	ldr	r3, [r7, #4]
 8019df2:	681b      	ldr	r3, [r3, #0]
 8019df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019df8:	2b00      	cmp	r3, #0
 8019dfa:	d00a      	beq.n	8019e12 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8019dfc:	4b63      	ldr	r3, [pc, #396]	; (8019f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019e02:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8019e06:	687b      	ldr	r3, [r7, #4]
 8019e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019e0a:	4960      	ldr	r1, [pc, #384]	; (8019f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019e0c:	4313      	orrs	r3, r2
 8019e0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8019e12:	687b      	ldr	r3, [r7, #4]
 8019e14:	681b      	ldr	r3, [r3, #0]
 8019e16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8019e1a:	2b00      	cmp	r3, #0
 8019e1c:	d00a      	beq.n	8019e34 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8019e1e:	4b5b      	ldr	r3, [pc, #364]	; (8019f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019e24:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8019e28:	687b      	ldr	r3, [r7, #4]
 8019e2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019e2c:	4957      	ldr	r1, [pc, #348]	; (8019f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019e2e:	4313      	orrs	r3, r2
 8019e30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8019e34:	687b      	ldr	r3, [r7, #4]
 8019e36:	681b      	ldr	r3, [r3, #0]
 8019e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8019e3c:	2b00      	cmp	r3, #0
 8019e3e:	d00a      	beq.n	8019e56 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8019e40:	4b52      	ldr	r3, [pc, #328]	; (8019f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019e46:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8019e4a:	687b      	ldr	r3, [r7, #4]
 8019e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019e4e:	494f      	ldr	r1, [pc, #316]	; (8019f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019e50:	4313      	orrs	r3, r2
 8019e52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8019e56:	687b      	ldr	r3, [r7, #4]
 8019e58:	681b      	ldr	r3, [r3, #0]
 8019e5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019e5e:	2b00      	cmp	r3, #0
 8019e60:	d00a      	beq.n	8019e78 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8019e62:	4b4a      	ldr	r3, [pc, #296]	; (8019f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019e68:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8019e6c:	687b      	ldr	r3, [r7, #4]
 8019e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019e70:	4946      	ldr	r1, [pc, #280]	; (8019f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019e72:	4313      	orrs	r3, r2
 8019e74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8019e78:	687b      	ldr	r3, [r7, #4]
 8019e7a:	681b      	ldr	r3, [r3, #0]
 8019e7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8019e80:	2b00      	cmp	r3, #0
 8019e82:	d00a      	beq.n	8019e9a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8019e84:	4b41      	ldr	r3, [pc, #260]	; (8019f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019e8a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8019e8e:	687b      	ldr	r3, [r7, #4]
 8019e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019e92:	493e      	ldr	r1, [pc, #248]	; (8019f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019e94:	4313      	orrs	r3, r2
 8019e96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8019e9a:	687b      	ldr	r3, [r7, #4]
 8019e9c:	681b      	ldr	r3, [r3, #0]
 8019e9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8019ea2:	2b00      	cmp	r3, #0
 8019ea4:	d00a      	beq.n	8019ebc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8019ea6:	4b39      	ldr	r3, [pc, #228]	; (8019f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019eac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8019eb0:	687b      	ldr	r3, [r7, #4]
 8019eb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019eb4:	4935      	ldr	r1, [pc, #212]	; (8019f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019eb6:	4313      	orrs	r3, r2
 8019eb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8019ebc:	687b      	ldr	r3, [r7, #4]
 8019ebe:	681b      	ldr	r3, [r3, #0]
 8019ec0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8019ec4:	2b00      	cmp	r3, #0
 8019ec6:	d00a      	beq.n	8019ede <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8019ec8:	4b30      	ldr	r3, [pc, #192]	; (8019f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019ece:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8019ed2:	687b      	ldr	r3, [r7, #4]
 8019ed4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8019ed6:	492d      	ldr	r1, [pc, #180]	; (8019f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019ed8:	4313      	orrs	r3, r2
 8019eda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8019ede:	687b      	ldr	r3, [r7, #4]
 8019ee0:	681b      	ldr	r3, [r3, #0]
 8019ee2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8019ee6:	2b00      	cmp	r3, #0
 8019ee8:	d011      	beq.n	8019f0e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8019eea:	4b28      	ldr	r3, [pc, #160]	; (8019f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019ef0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8019ef4:	687b      	ldr	r3, [r7, #4]
 8019ef6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019ef8:	4924      	ldr	r1, [pc, #144]	; (8019f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019efa:	4313      	orrs	r3, r2
 8019efc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8019f00:	687b      	ldr	r3, [r7, #4]
 8019f02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019f04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8019f08:	d101      	bne.n	8019f0e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8019f0a:	2301      	movs	r3, #1
 8019f0c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8019f0e:	687b      	ldr	r3, [r7, #4]
 8019f10:	681b      	ldr	r3, [r3, #0]
 8019f12:	f003 0308 	and.w	r3, r3, #8
 8019f16:	2b00      	cmp	r3, #0
 8019f18:	d001      	beq.n	8019f1e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8019f1a:	2301      	movs	r3, #1
 8019f1c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8019f1e:	687b      	ldr	r3, [r7, #4]
 8019f20:	681b      	ldr	r3, [r3, #0]
 8019f22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8019f26:	2b00      	cmp	r3, #0
 8019f28:	d00a      	beq.n	8019f40 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8019f2a:	4b18      	ldr	r3, [pc, #96]	; (8019f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019f30:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8019f34:	687b      	ldr	r3, [r7, #4]
 8019f36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019f38:	4914      	ldr	r1, [pc, #80]	; (8019f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019f3a:	4313      	orrs	r3, r2
 8019f3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8019f40:	687b      	ldr	r3, [r7, #4]
 8019f42:	681b      	ldr	r3, [r3, #0]
 8019f44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8019f48:	2b00      	cmp	r3, #0
 8019f4a:	d00b      	beq.n	8019f64 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8019f4c:	4b0f      	ldr	r3, [pc, #60]	; (8019f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019f52:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8019f56:	687b      	ldr	r3, [r7, #4]
 8019f58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8019f5c:	490b      	ldr	r1, [pc, #44]	; (8019f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019f5e:	4313      	orrs	r3, r2
 8019f60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8019f64:	687b      	ldr	r3, [r7, #4]
 8019f66:	681b      	ldr	r3, [r3, #0]
 8019f68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8019f6c:	2b00      	cmp	r3, #0
 8019f6e:	d00f      	beq.n	8019f90 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8019f70:	4b06      	ldr	r3, [pc, #24]	; (8019f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019f76:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8019f7a:	687b      	ldr	r3, [r7, #4]
 8019f7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019f80:	4902      	ldr	r1, [pc, #8]	; (8019f8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019f82:	4313      	orrs	r3, r2
 8019f84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8019f88:	e002      	b.n	8019f90 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8019f8a:	bf00      	nop
 8019f8c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8019f90:	687b      	ldr	r3, [r7, #4]
 8019f92:	681b      	ldr	r3, [r3, #0]
 8019f94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8019f98:	2b00      	cmp	r3, #0
 8019f9a:	d00b      	beq.n	8019fb4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8019f9c:	4b8a      	ldr	r3, [pc, #552]	; (801a1c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019f9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019fa2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8019fa6:	687b      	ldr	r3, [r7, #4]
 8019fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019fac:	4986      	ldr	r1, [pc, #536]	; (801a1c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019fae:	4313      	orrs	r3, r2
 8019fb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8019fb4:	687b      	ldr	r3, [r7, #4]
 8019fb6:	681b      	ldr	r3, [r3, #0]
 8019fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8019fbc:	2b00      	cmp	r3, #0
 8019fbe:	d00b      	beq.n	8019fd8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8019fc0:	4b81      	ldr	r3, [pc, #516]	; (801a1c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019fc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019fc6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8019fca:	687b      	ldr	r3, [r7, #4]
 8019fcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019fd0:	497d      	ldr	r1, [pc, #500]	; (801a1c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019fd2:	4313      	orrs	r3, r2
 8019fd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8019fd8:	69fb      	ldr	r3, [r7, #28]
 8019fda:	2b01      	cmp	r3, #1
 8019fdc:	d006      	beq.n	8019fec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8019fde:	687b      	ldr	r3, [r7, #4]
 8019fe0:	681b      	ldr	r3, [r3, #0]
 8019fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019fe6:	2b00      	cmp	r3, #0
 8019fe8:	f000 80d6 	beq.w	801a198 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8019fec:	4b76      	ldr	r3, [pc, #472]	; (801a1c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019fee:	681b      	ldr	r3, [r3, #0]
 8019ff0:	4a75      	ldr	r2, [pc, #468]	; (801a1c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019ff2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8019ff6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8019ff8:	f7fb fd76 	bl	8015ae8 <HAL_GetTick>
 8019ffc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8019ffe:	e008      	b.n	801a012 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 801a000:	f7fb fd72 	bl	8015ae8 <HAL_GetTick>
 801a004:	4602      	mov	r2, r0
 801a006:	697b      	ldr	r3, [r7, #20]
 801a008:	1ad3      	subs	r3, r2, r3
 801a00a:	2b64      	cmp	r3, #100	; 0x64
 801a00c:	d901      	bls.n	801a012 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801a00e:	2303      	movs	r3, #3
 801a010:	e195      	b.n	801a33e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801a012:	4b6d      	ldr	r3, [pc, #436]	; (801a1c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801a014:	681b      	ldr	r3, [r3, #0]
 801a016:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801a01a:	2b00      	cmp	r3, #0
 801a01c:	d1f0      	bne.n	801a000 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 801a01e:	687b      	ldr	r3, [r7, #4]
 801a020:	681b      	ldr	r3, [r3, #0]
 801a022:	f003 0301 	and.w	r3, r3, #1
 801a026:	2b00      	cmp	r3, #0
 801a028:	d021      	beq.n	801a06e <HAL_RCCEx_PeriphCLKConfig+0x572>
 801a02a:	687b      	ldr	r3, [r7, #4]
 801a02c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a02e:	2b00      	cmp	r3, #0
 801a030:	d11d      	bne.n	801a06e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 801a032:	4b65      	ldr	r3, [pc, #404]	; (801a1c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801a034:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801a038:	0c1b      	lsrs	r3, r3, #16
 801a03a:	f003 0303 	and.w	r3, r3, #3
 801a03e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 801a040:	4b61      	ldr	r3, [pc, #388]	; (801a1c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801a042:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801a046:	0e1b      	lsrs	r3, r3, #24
 801a048:	f003 030f 	and.w	r3, r3, #15
 801a04c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 801a04e:	687b      	ldr	r3, [r7, #4]
 801a050:	685b      	ldr	r3, [r3, #4]
 801a052:	019a      	lsls	r2, r3, #6
 801a054:	693b      	ldr	r3, [r7, #16]
 801a056:	041b      	lsls	r3, r3, #16
 801a058:	431a      	orrs	r2, r3
 801a05a:	68fb      	ldr	r3, [r7, #12]
 801a05c:	061b      	lsls	r3, r3, #24
 801a05e:	431a      	orrs	r2, r3
 801a060:	687b      	ldr	r3, [r7, #4]
 801a062:	689b      	ldr	r3, [r3, #8]
 801a064:	071b      	lsls	r3, r3, #28
 801a066:	4958      	ldr	r1, [pc, #352]	; (801a1c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801a068:	4313      	orrs	r3, r2
 801a06a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 801a06e:	687b      	ldr	r3, [r7, #4]
 801a070:	681b      	ldr	r3, [r3, #0]
 801a072:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801a076:	2b00      	cmp	r3, #0
 801a078:	d004      	beq.n	801a084 <HAL_RCCEx_PeriphCLKConfig+0x588>
 801a07a:	687b      	ldr	r3, [r7, #4]
 801a07c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a07e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801a082:	d00a      	beq.n	801a09a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 801a084:	687b      	ldr	r3, [r7, #4]
 801a086:	681b      	ldr	r3, [r3, #0]
 801a088:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 801a08c:	2b00      	cmp	r3, #0
 801a08e:	d02e      	beq.n	801a0ee <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 801a090:	687b      	ldr	r3, [r7, #4]
 801a092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a094:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801a098:	d129      	bne.n	801a0ee <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 801a09a:	4b4b      	ldr	r3, [pc, #300]	; (801a1c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801a09c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801a0a0:	0c1b      	lsrs	r3, r3, #16
 801a0a2:	f003 0303 	and.w	r3, r3, #3
 801a0a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 801a0a8:	4b47      	ldr	r3, [pc, #284]	; (801a1c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801a0aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801a0ae:	0f1b      	lsrs	r3, r3, #28
 801a0b0:	f003 0307 	and.w	r3, r3, #7
 801a0b4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 801a0b6:	687b      	ldr	r3, [r7, #4]
 801a0b8:	685b      	ldr	r3, [r3, #4]
 801a0ba:	019a      	lsls	r2, r3, #6
 801a0bc:	693b      	ldr	r3, [r7, #16]
 801a0be:	041b      	lsls	r3, r3, #16
 801a0c0:	431a      	orrs	r2, r3
 801a0c2:	687b      	ldr	r3, [r7, #4]
 801a0c4:	68db      	ldr	r3, [r3, #12]
 801a0c6:	061b      	lsls	r3, r3, #24
 801a0c8:	431a      	orrs	r2, r3
 801a0ca:	68fb      	ldr	r3, [r7, #12]
 801a0cc:	071b      	lsls	r3, r3, #28
 801a0ce:	493e      	ldr	r1, [pc, #248]	; (801a1c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801a0d0:	4313      	orrs	r3, r2
 801a0d2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 801a0d6:	4b3c      	ldr	r3, [pc, #240]	; (801a1c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801a0d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801a0dc:	f023 021f 	bic.w	r2, r3, #31
 801a0e0:	687b      	ldr	r3, [r7, #4]
 801a0e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a0e4:	3b01      	subs	r3, #1
 801a0e6:	4938      	ldr	r1, [pc, #224]	; (801a1c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801a0e8:	4313      	orrs	r3, r2
 801a0ea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801a0ee:	687b      	ldr	r3, [r7, #4]
 801a0f0:	681b      	ldr	r3, [r3, #0]
 801a0f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801a0f6:	2b00      	cmp	r3, #0
 801a0f8:	d01d      	beq.n	801a136 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 801a0fa:	4b33      	ldr	r3, [pc, #204]	; (801a1c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801a0fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801a100:	0e1b      	lsrs	r3, r3, #24
 801a102:	f003 030f 	and.w	r3, r3, #15
 801a106:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 801a108:	4b2f      	ldr	r3, [pc, #188]	; (801a1c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801a10a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801a10e:	0f1b      	lsrs	r3, r3, #28
 801a110:	f003 0307 	and.w	r3, r3, #7
 801a114:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 801a116:	687b      	ldr	r3, [r7, #4]
 801a118:	685b      	ldr	r3, [r3, #4]
 801a11a:	019a      	lsls	r2, r3, #6
 801a11c:	687b      	ldr	r3, [r7, #4]
 801a11e:	691b      	ldr	r3, [r3, #16]
 801a120:	041b      	lsls	r3, r3, #16
 801a122:	431a      	orrs	r2, r3
 801a124:	693b      	ldr	r3, [r7, #16]
 801a126:	061b      	lsls	r3, r3, #24
 801a128:	431a      	orrs	r2, r3
 801a12a:	68fb      	ldr	r3, [r7, #12]
 801a12c:	071b      	lsls	r3, r3, #28
 801a12e:	4926      	ldr	r1, [pc, #152]	; (801a1c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801a130:	4313      	orrs	r3, r2
 801a132:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 801a136:	687b      	ldr	r3, [r7, #4]
 801a138:	681b      	ldr	r3, [r3, #0]
 801a13a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a13e:	2b00      	cmp	r3, #0
 801a140:	d011      	beq.n	801a166 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 801a142:	687b      	ldr	r3, [r7, #4]
 801a144:	685b      	ldr	r3, [r3, #4]
 801a146:	019a      	lsls	r2, r3, #6
 801a148:	687b      	ldr	r3, [r7, #4]
 801a14a:	691b      	ldr	r3, [r3, #16]
 801a14c:	041b      	lsls	r3, r3, #16
 801a14e:	431a      	orrs	r2, r3
 801a150:	687b      	ldr	r3, [r7, #4]
 801a152:	68db      	ldr	r3, [r3, #12]
 801a154:	061b      	lsls	r3, r3, #24
 801a156:	431a      	orrs	r2, r3
 801a158:	687b      	ldr	r3, [r7, #4]
 801a15a:	689b      	ldr	r3, [r3, #8]
 801a15c:	071b      	lsls	r3, r3, #28
 801a15e:	491a      	ldr	r1, [pc, #104]	; (801a1c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801a160:	4313      	orrs	r3, r2
 801a162:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 801a166:	4b18      	ldr	r3, [pc, #96]	; (801a1c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801a168:	681b      	ldr	r3, [r3, #0]
 801a16a:	4a17      	ldr	r2, [pc, #92]	; (801a1c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801a16c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801a170:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801a172:	f7fb fcb9 	bl	8015ae8 <HAL_GetTick>
 801a176:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801a178:	e008      	b.n	801a18c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 801a17a:	f7fb fcb5 	bl	8015ae8 <HAL_GetTick>
 801a17e:	4602      	mov	r2, r0
 801a180:	697b      	ldr	r3, [r7, #20]
 801a182:	1ad3      	subs	r3, r2, r3
 801a184:	2b64      	cmp	r3, #100	; 0x64
 801a186:	d901      	bls.n	801a18c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801a188:	2303      	movs	r3, #3
 801a18a:	e0d8      	b.n	801a33e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801a18c:	4b0e      	ldr	r3, [pc, #56]	; (801a1c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801a18e:	681b      	ldr	r3, [r3, #0]
 801a190:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801a194:	2b00      	cmp	r3, #0
 801a196:	d0f0      	beq.n	801a17a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 801a198:	69bb      	ldr	r3, [r7, #24]
 801a19a:	2b01      	cmp	r3, #1
 801a19c:	f040 80ce 	bne.w	801a33c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 801a1a0:	4b09      	ldr	r3, [pc, #36]	; (801a1c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801a1a2:	681b      	ldr	r3, [r3, #0]
 801a1a4:	4a08      	ldr	r2, [pc, #32]	; (801a1c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801a1a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801a1aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801a1ac:	f7fb fc9c 	bl	8015ae8 <HAL_GetTick>
 801a1b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 801a1b2:	e00b      	b.n	801a1cc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 801a1b4:	f7fb fc98 	bl	8015ae8 <HAL_GetTick>
 801a1b8:	4602      	mov	r2, r0
 801a1ba:	697b      	ldr	r3, [r7, #20]
 801a1bc:	1ad3      	subs	r3, r2, r3
 801a1be:	2b64      	cmp	r3, #100	; 0x64
 801a1c0:	d904      	bls.n	801a1cc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801a1c2:	2303      	movs	r3, #3
 801a1c4:	e0bb      	b.n	801a33e <HAL_RCCEx_PeriphCLKConfig+0x842>
 801a1c6:	bf00      	nop
 801a1c8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 801a1cc:	4b5e      	ldr	r3, [pc, #376]	; (801a348 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801a1ce:	681b      	ldr	r3, [r3, #0]
 801a1d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801a1d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801a1d8:	d0ec      	beq.n	801a1b4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 801a1da:	687b      	ldr	r3, [r7, #4]
 801a1dc:	681b      	ldr	r3, [r3, #0]
 801a1de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801a1e2:	2b00      	cmp	r3, #0
 801a1e4:	d003      	beq.n	801a1ee <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 801a1e6:	687b      	ldr	r3, [r7, #4]
 801a1e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a1ea:	2b00      	cmp	r3, #0
 801a1ec:	d009      	beq.n	801a202 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 801a1ee:	687b      	ldr	r3, [r7, #4]
 801a1f0:	681b      	ldr	r3, [r3, #0]
 801a1f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 801a1f6:	2b00      	cmp	r3, #0
 801a1f8:	d02e      	beq.n	801a258 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 801a1fa:	687b      	ldr	r3, [r7, #4]
 801a1fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a1fe:	2b00      	cmp	r3, #0
 801a200:	d12a      	bne.n	801a258 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 801a202:	4b51      	ldr	r3, [pc, #324]	; (801a348 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801a204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801a208:	0c1b      	lsrs	r3, r3, #16
 801a20a:	f003 0303 	and.w	r3, r3, #3
 801a20e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 801a210:	4b4d      	ldr	r3, [pc, #308]	; (801a348 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801a212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801a216:	0f1b      	lsrs	r3, r3, #28
 801a218:	f003 0307 	and.w	r3, r3, #7
 801a21c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 801a21e:	687b      	ldr	r3, [r7, #4]
 801a220:	695b      	ldr	r3, [r3, #20]
 801a222:	019a      	lsls	r2, r3, #6
 801a224:	693b      	ldr	r3, [r7, #16]
 801a226:	041b      	lsls	r3, r3, #16
 801a228:	431a      	orrs	r2, r3
 801a22a:	687b      	ldr	r3, [r7, #4]
 801a22c:	699b      	ldr	r3, [r3, #24]
 801a22e:	061b      	lsls	r3, r3, #24
 801a230:	431a      	orrs	r2, r3
 801a232:	68fb      	ldr	r3, [r7, #12]
 801a234:	071b      	lsls	r3, r3, #28
 801a236:	4944      	ldr	r1, [pc, #272]	; (801a348 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801a238:	4313      	orrs	r3, r2
 801a23a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 801a23e:	4b42      	ldr	r3, [pc, #264]	; (801a348 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801a240:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801a244:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 801a248:	687b      	ldr	r3, [r7, #4]
 801a24a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a24c:	3b01      	subs	r3, #1
 801a24e:	021b      	lsls	r3, r3, #8
 801a250:	493d      	ldr	r1, [pc, #244]	; (801a348 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801a252:	4313      	orrs	r3, r2
 801a254:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 801a258:	687b      	ldr	r3, [r7, #4]
 801a25a:	681b      	ldr	r3, [r3, #0]
 801a25c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801a260:	2b00      	cmp	r3, #0
 801a262:	d022      	beq.n	801a2aa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 801a264:	687b      	ldr	r3, [r7, #4]
 801a266:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801a268:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801a26c:	d11d      	bne.n	801a2aa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 801a26e:	4b36      	ldr	r3, [pc, #216]	; (801a348 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801a270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801a274:	0e1b      	lsrs	r3, r3, #24
 801a276:	f003 030f 	and.w	r3, r3, #15
 801a27a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 801a27c:	4b32      	ldr	r3, [pc, #200]	; (801a348 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801a27e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801a282:	0f1b      	lsrs	r3, r3, #28
 801a284:	f003 0307 	and.w	r3, r3, #7
 801a288:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 801a28a:	687b      	ldr	r3, [r7, #4]
 801a28c:	695b      	ldr	r3, [r3, #20]
 801a28e:	019a      	lsls	r2, r3, #6
 801a290:	687b      	ldr	r3, [r7, #4]
 801a292:	6a1b      	ldr	r3, [r3, #32]
 801a294:	041b      	lsls	r3, r3, #16
 801a296:	431a      	orrs	r2, r3
 801a298:	693b      	ldr	r3, [r7, #16]
 801a29a:	061b      	lsls	r3, r3, #24
 801a29c:	431a      	orrs	r2, r3
 801a29e:	68fb      	ldr	r3, [r7, #12]
 801a2a0:	071b      	lsls	r3, r3, #28
 801a2a2:	4929      	ldr	r1, [pc, #164]	; (801a348 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801a2a4:	4313      	orrs	r3, r2
 801a2a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 801a2aa:	687b      	ldr	r3, [r7, #4]
 801a2ac:	681b      	ldr	r3, [r3, #0]
 801a2ae:	f003 0308 	and.w	r3, r3, #8
 801a2b2:	2b00      	cmp	r3, #0
 801a2b4:	d028      	beq.n	801a308 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 801a2b6:	4b24      	ldr	r3, [pc, #144]	; (801a348 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801a2b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801a2bc:	0e1b      	lsrs	r3, r3, #24
 801a2be:	f003 030f 	and.w	r3, r3, #15
 801a2c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 801a2c4:	4b20      	ldr	r3, [pc, #128]	; (801a348 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801a2c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801a2ca:	0c1b      	lsrs	r3, r3, #16
 801a2cc:	f003 0303 	and.w	r3, r3, #3
 801a2d0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 801a2d2:	687b      	ldr	r3, [r7, #4]
 801a2d4:	695b      	ldr	r3, [r3, #20]
 801a2d6:	019a      	lsls	r2, r3, #6
 801a2d8:	68fb      	ldr	r3, [r7, #12]
 801a2da:	041b      	lsls	r3, r3, #16
 801a2dc:	431a      	orrs	r2, r3
 801a2de:	693b      	ldr	r3, [r7, #16]
 801a2e0:	061b      	lsls	r3, r3, #24
 801a2e2:	431a      	orrs	r2, r3
 801a2e4:	687b      	ldr	r3, [r7, #4]
 801a2e6:	69db      	ldr	r3, [r3, #28]
 801a2e8:	071b      	lsls	r3, r3, #28
 801a2ea:	4917      	ldr	r1, [pc, #92]	; (801a348 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801a2ec:	4313      	orrs	r3, r2
 801a2ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 801a2f2:	4b15      	ldr	r3, [pc, #84]	; (801a348 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801a2f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801a2f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801a2fc:	687b      	ldr	r3, [r7, #4]
 801a2fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a300:	4911      	ldr	r1, [pc, #68]	; (801a348 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801a302:	4313      	orrs	r3, r2
 801a304:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 801a308:	4b0f      	ldr	r3, [pc, #60]	; (801a348 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801a30a:	681b      	ldr	r3, [r3, #0]
 801a30c:	4a0e      	ldr	r2, [pc, #56]	; (801a348 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801a30e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801a312:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801a314:	f7fb fbe8 	bl	8015ae8 <HAL_GetTick>
 801a318:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 801a31a:	e008      	b.n	801a32e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 801a31c:	f7fb fbe4 	bl	8015ae8 <HAL_GetTick>
 801a320:	4602      	mov	r2, r0
 801a322:	697b      	ldr	r3, [r7, #20]
 801a324:	1ad3      	subs	r3, r2, r3
 801a326:	2b64      	cmp	r3, #100	; 0x64
 801a328:	d901      	bls.n	801a32e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801a32a:	2303      	movs	r3, #3
 801a32c:	e007      	b.n	801a33e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 801a32e:	4b06      	ldr	r3, [pc, #24]	; (801a348 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801a330:	681b      	ldr	r3, [r3, #0]
 801a332:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801a336:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801a33a:	d1ef      	bne.n	801a31c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 801a33c:	2300      	movs	r3, #0
}
 801a33e:	4618      	mov	r0, r3
 801a340:	3720      	adds	r7, #32
 801a342:	46bd      	mov	sp, r7
 801a344:	bd80      	pop	{r7, pc}
 801a346:	bf00      	nop
 801a348:	40023800 	.word	0x40023800

0801a34c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 801a34c:	b580      	push	{r7, lr}
 801a34e:	b082      	sub	sp, #8
 801a350:	af00      	add	r7, sp, #0
 801a352:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 801a354:	687b      	ldr	r3, [r7, #4]
 801a356:	2b00      	cmp	r3, #0
 801a358:	d101      	bne.n	801a35e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 801a35a:	2301      	movs	r3, #1
 801a35c:	e01c      	b.n	801a398 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 801a35e:	687b      	ldr	r3, [r7, #4]
 801a360:	795b      	ldrb	r3, [r3, #5]
 801a362:	b2db      	uxtb	r3, r3
 801a364:	2b00      	cmp	r3, #0
 801a366:	d105      	bne.n	801a374 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 801a368:	687b      	ldr	r3, [r7, #4]
 801a36a:	2200      	movs	r2, #0
 801a36c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 801a36e:	6878      	ldr	r0, [r7, #4]
 801a370:	f7f9 fe48 	bl	8014004 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 801a374:	687b      	ldr	r3, [r7, #4]
 801a376:	2202      	movs	r2, #2
 801a378:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 801a37a:	687b      	ldr	r3, [r7, #4]
 801a37c:	681b      	ldr	r3, [r3, #0]
 801a37e:	681a      	ldr	r2, [r3, #0]
 801a380:	687b      	ldr	r3, [r7, #4]
 801a382:	681b      	ldr	r3, [r3, #0]
 801a384:	f042 0204 	orr.w	r2, r2, #4
 801a388:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 801a38a:	687b      	ldr	r3, [r7, #4]
 801a38c:	2201      	movs	r2, #1
 801a38e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 801a390:	687b      	ldr	r3, [r7, #4]
 801a392:	2200      	movs	r2, #0
 801a394:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 801a396:	2300      	movs	r3, #0
}
 801a398:	4618      	mov	r0, r3
 801a39a:	3708      	adds	r7, #8
 801a39c:	46bd      	mov	sp, r7
 801a39e:	bd80      	pop	{r7, pc}

0801a3a0 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 801a3a0:	b580      	push	{r7, lr}
 801a3a2:	b084      	sub	sp, #16
 801a3a4:	af00      	add	r7, sp, #0
 801a3a6:	6078      	str	r0, [r7, #4]
 801a3a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801a3aa:	2300      	movs	r3, #0
 801a3ac:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 801a3ae:	687b      	ldr	r3, [r7, #4]
 801a3b0:	791b      	ldrb	r3, [r3, #4]
 801a3b2:	2b01      	cmp	r3, #1
 801a3b4:	d101      	bne.n	801a3ba <HAL_RNG_GenerateRandomNumber+0x1a>
 801a3b6:	2302      	movs	r3, #2
 801a3b8:	e044      	b.n	801a444 <HAL_RNG_GenerateRandomNumber+0xa4>
 801a3ba:	687b      	ldr	r3, [r7, #4]
 801a3bc:	2201      	movs	r2, #1
 801a3be:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 801a3c0:	687b      	ldr	r3, [r7, #4]
 801a3c2:	795b      	ldrb	r3, [r3, #5]
 801a3c4:	b2db      	uxtb	r3, r3
 801a3c6:	2b01      	cmp	r3, #1
 801a3c8:	d133      	bne.n	801a432 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 801a3ca:	687b      	ldr	r3, [r7, #4]
 801a3cc:	2202      	movs	r2, #2
 801a3ce:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 801a3d0:	f7fb fb8a 	bl	8015ae8 <HAL_GetTick>
 801a3d4:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 801a3d6:	e018      	b.n	801a40a <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 801a3d8:	f7fb fb86 	bl	8015ae8 <HAL_GetTick>
 801a3dc:	4602      	mov	r2, r0
 801a3de:	68bb      	ldr	r3, [r7, #8]
 801a3e0:	1ad3      	subs	r3, r2, r3
 801a3e2:	2b02      	cmp	r3, #2
 801a3e4:	d911      	bls.n	801a40a <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 801a3e6:	687b      	ldr	r3, [r7, #4]
 801a3e8:	681b      	ldr	r3, [r3, #0]
 801a3ea:	685b      	ldr	r3, [r3, #4]
 801a3ec:	f003 0301 	and.w	r3, r3, #1
 801a3f0:	2b01      	cmp	r3, #1
 801a3f2:	d00a      	beq.n	801a40a <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 801a3f4:	687b      	ldr	r3, [r7, #4]
 801a3f6:	2201      	movs	r2, #1
 801a3f8:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 801a3fa:	687b      	ldr	r3, [r7, #4]
 801a3fc:	2202      	movs	r2, #2
 801a3fe:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 801a400:	687b      	ldr	r3, [r7, #4]
 801a402:	2200      	movs	r2, #0
 801a404:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 801a406:	2301      	movs	r3, #1
 801a408:	e01c      	b.n	801a444 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 801a40a:	687b      	ldr	r3, [r7, #4]
 801a40c:	681b      	ldr	r3, [r3, #0]
 801a40e:	685b      	ldr	r3, [r3, #4]
 801a410:	f003 0301 	and.w	r3, r3, #1
 801a414:	2b01      	cmp	r3, #1
 801a416:	d1df      	bne.n	801a3d8 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 801a418:	687b      	ldr	r3, [r7, #4]
 801a41a:	681b      	ldr	r3, [r3, #0]
 801a41c:	689a      	ldr	r2, [r3, #8]
 801a41e:	687b      	ldr	r3, [r7, #4]
 801a420:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 801a422:	687b      	ldr	r3, [r7, #4]
 801a424:	68da      	ldr	r2, [r3, #12]
 801a426:	683b      	ldr	r3, [r7, #0]
 801a428:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 801a42a:	687b      	ldr	r3, [r7, #4]
 801a42c:	2201      	movs	r2, #1
 801a42e:	715a      	strb	r2, [r3, #5]
 801a430:	e004      	b.n	801a43c <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 801a432:	687b      	ldr	r3, [r7, #4]
 801a434:	2204      	movs	r2, #4
 801a436:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 801a438:	2301      	movs	r3, #1
 801a43a:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 801a43c:	687b      	ldr	r3, [r7, #4]
 801a43e:	2200      	movs	r2, #0
 801a440:	711a      	strb	r2, [r3, #4]

  return status;
 801a442:	7bfb      	ldrb	r3, [r7, #15]
}
 801a444:	4618      	mov	r0, r3
 801a446:	3710      	adds	r7, #16
 801a448:	46bd      	mov	sp, r7
 801a44a:	bd80      	pop	{r7, pc}

0801a44c <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 801a44c:	b580      	push	{r7, lr}
 801a44e:	b082      	sub	sp, #8
 801a450:	af00      	add	r7, sp, #0
 801a452:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 801a454:	687b      	ldr	r3, [r7, #4]
 801a456:	330c      	adds	r3, #12
 801a458:	4619      	mov	r1, r3
 801a45a:	6878      	ldr	r0, [r7, #4]
 801a45c:	f7ff ffa0 	bl	801a3a0 <HAL_RNG_GenerateRandomNumber>
 801a460:	4603      	mov	r3, r0
 801a462:	2b00      	cmp	r3, #0
 801a464:	d102      	bne.n	801a46c <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 801a466:	687b      	ldr	r3, [r7, #4]
 801a468:	68db      	ldr	r3, [r3, #12]
 801a46a:	e000      	b.n	801a46e <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 801a46c:	2300      	movs	r3, #0
  }
}
 801a46e:	4618      	mov	r0, r3
 801a470:	3708      	adds	r7, #8
 801a472:	46bd      	mov	sp, r7
 801a474:	bd80      	pop	{r7, pc}

0801a476 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801a476:	b580      	push	{r7, lr}
 801a478:	b084      	sub	sp, #16
 801a47a:	af00      	add	r7, sp, #0
 801a47c:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801a47e:	687b      	ldr	r3, [r7, #4]
 801a480:	2b00      	cmp	r3, #0
 801a482:	d101      	bne.n	801a488 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801a484:	2301      	movs	r3, #1
 801a486:	e09d      	b.n	801a5c4 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801a488:	687b      	ldr	r3, [r7, #4]
 801a48a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a48c:	2b00      	cmp	r3, #0
 801a48e:	d108      	bne.n	801a4a2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801a490:	687b      	ldr	r3, [r7, #4]
 801a492:	685b      	ldr	r3, [r3, #4]
 801a494:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801a498:	d009      	beq.n	801a4ae <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801a49a:	687b      	ldr	r3, [r7, #4]
 801a49c:	2200      	movs	r2, #0
 801a49e:	61da      	str	r2, [r3, #28]
 801a4a0:	e005      	b.n	801a4ae <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801a4a2:	687b      	ldr	r3, [r7, #4]
 801a4a4:	2200      	movs	r2, #0
 801a4a6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801a4a8:	687b      	ldr	r3, [r7, #4]
 801a4aa:	2200      	movs	r2, #0
 801a4ac:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801a4ae:	687b      	ldr	r3, [r7, #4]
 801a4b0:	2200      	movs	r2, #0
 801a4b2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801a4b4:	687b      	ldr	r3, [r7, #4]
 801a4b6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801a4ba:	b2db      	uxtb	r3, r3
 801a4bc:	2b00      	cmp	r3, #0
 801a4be:	d106      	bne.n	801a4ce <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801a4c0:	687b      	ldr	r3, [r7, #4]
 801a4c2:	2200      	movs	r2, #0
 801a4c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801a4c8:	6878      	ldr	r0, [r7, #4]
 801a4ca:	f7f9 fe23 	bl	8014114 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801a4ce:	687b      	ldr	r3, [r7, #4]
 801a4d0:	2202      	movs	r2, #2
 801a4d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801a4d6:	687b      	ldr	r3, [r7, #4]
 801a4d8:	681b      	ldr	r3, [r3, #0]
 801a4da:	681a      	ldr	r2, [r3, #0]
 801a4dc:	687b      	ldr	r3, [r7, #4]
 801a4de:	681b      	ldr	r3, [r3, #0]
 801a4e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801a4e4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801a4e6:	687b      	ldr	r3, [r7, #4]
 801a4e8:	68db      	ldr	r3, [r3, #12]
 801a4ea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801a4ee:	d902      	bls.n	801a4f6 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 801a4f0:	2300      	movs	r3, #0
 801a4f2:	60fb      	str	r3, [r7, #12]
 801a4f4:	e002      	b.n	801a4fc <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 801a4f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a4fa:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 801a4fc:	687b      	ldr	r3, [r7, #4]
 801a4fe:	68db      	ldr	r3, [r3, #12]
 801a500:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 801a504:	d007      	beq.n	801a516 <HAL_SPI_Init+0xa0>
 801a506:	687b      	ldr	r3, [r7, #4]
 801a508:	68db      	ldr	r3, [r3, #12]
 801a50a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801a50e:	d002      	beq.n	801a516 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801a510:	687b      	ldr	r3, [r7, #4]
 801a512:	2200      	movs	r2, #0
 801a514:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801a516:	687b      	ldr	r3, [r7, #4]
 801a518:	685b      	ldr	r3, [r3, #4]
 801a51a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 801a51e:	687b      	ldr	r3, [r7, #4]
 801a520:	689b      	ldr	r3, [r3, #8]
 801a522:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 801a526:	431a      	orrs	r2, r3
 801a528:	687b      	ldr	r3, [r7, #4]
 801a52a:	691b      	ldr	r3, [r3, #16]
 801a52c:	f003 0302 	and.w	r3, r3, #2
 801a530:	431a      	orrs	r2, r3
 801a532:	687b      	ldr	r3, [r7, #4]
 801a534:	695b      	ldr	r3, [r3, #20]
 801a536:	f003 0301 	and.w	r3, r3, #1
 801a53a:	431a      	orrs	r2, r3
 801a53c:	687b      	ldr	r3, [r7, #4]
 801a53e:	699b      	ldr	r3, [r3, #24]
 801a540:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801a544:	431a      	orrs	r2, r3
 801a546:	687b      	ldr	r3, [r7, #4]
 801a548:	69db      	ldr	r3, [r3, #28]
 801a54a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801a54e:	431a      	orrs	r2, r3
 801a550:	687b      	ldr	r3, [r7, #4]
 801a552:	6a1b      	ldr	r3, [r3, #32]
 801a554:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a558:	ea42 0103 	orr.w	r1, r2, r3
 801a55c:	687b      	ldr	r3, [r7, #4]
 801a55e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a560:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 801a564:	687b      	ldr	r3, [r7, #4]
 801a566:	681b      	ldr	r3, [r3, #0]
 801a568:	430a      	orrs	r2, r1
 801a56a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 801a56c:	687b      	ldr	r3, [r7, #4]
 801a56e:	699b      	ldr	r3, [r3, #24]
 801a570:	0c1b      	lsrs	r3, r3, #16
 801a572:	f003 0204 	and.w	r2, r3, #4
 801a576:	687b      	ldr	r3, [r7, #4]
 801a578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a57a:	f003 0310 	and.w	r3, r3, #16
 801a57e:	431a      	orrs	r2, r3
 801a580:	687b      	ldr	r3, [r7, #4]
 801a582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a584:	f003 0308 	and.w	r3, r3, #8
 801a588:	431a      	orrs	r2, r3
 801a58a:	687b      	ldr	r3, [r7, #4]
 801a58c:	68db      	ldr	r3, [r3, #12]
 801a58e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801a592:	ea42 0103 	orr.w	r1, r2, r3
 801a596:	68fb      	ldr	r3, [r7, #12]
 801a598:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 801a59c:	687b      	ldr	r3, [r7, #4]
 801a59e:	681b      	ldr	r3, [r3, #0]
 801a5a0:	430a      	orrs	r2, r1
 801a5a2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801a5a4:	687b      	ldr	r3, [r7, #4]
 801a5a6:	681b      	ldr	r3, [r3, #0]
 801a5a8:	69da      	ldr	r2, [r3, #28]
 801a5aa:	687b      	ldr	r3, [r7, #4]
 801a5ac:	681b      	ldr	r3, [r3, #0]
 801a5ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801a5b2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801a5b4:	687b      	ldr	r3, [r7, #4]
 801a5b6:	2200      	movs	r2, #0
 801a5b8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 801a5ba:	687b      	ldr	r3, [r7, #4]
 801a5bc:	2201      	movs	r2, #1
 801a5be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 801a5c2:	2300      	movs	r3, #0
}
 801a5c4:	4618      	mov	r0, r3
 801a5c6:	3710      	adds	r7, #16
 801a5c8:	46bd      	mov	sp, r7
 801a5ca:	bd80      	pop	{r7, pc}

0801a5cc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801a5cc:	b580      	push	{r7, lr}
 801a5ce:	b088      	sub	sp, #32
 801a5d0:	af00      	add	r7, sp, #0
 801a5d2:	60f8      	str	r0, [r7, #12]
 801a5d4:	60b9      	str	r1, [r7, #8]
 801a5d6:	603b      	str	r3, [r7, #0]
 801a5d8:	4613      	mov	r3, r2
 801a5da:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801a5dc:	2300      	movs	r3, #0
 801a5de:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801a5e0:	68fb      	ldr	r3, [r7, #12]
 801a5e2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801a5e6:	2b01      	cmp	r3, #1
 801a5e8:	d101      	bne.n	801a5ee <HAL_SPI_Transmit+0x22>
 801a5ea:	2302      	movs	r3, #2
 801a5ec:	e158      	b.n	801a8a0 <HAL_SPI_Transmit+0x2d4>
 801a5ee:	68fb      	ldr	r3, [r7, #12]
 801a5f0:	2201      	movs	r2, #1
 801a5f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801a5f6:	f7fb fa77 	bl	8015ae8 <HAL_GetTick>
 801a5fa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 801a5fc:	88fb      	ldrh	r3, [r7, #6]
 801a5fe:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 801a600:	68fb      	ldr	r3, [r7, #12]
 801a602:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801a606:	b2db      	uxtb	r3, r3
 801a608:	2b01      	cmp	r3, #1
 801a60a:	d002      	beq.n	801a612 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 801a60c:	2302      	movs	r3, #2
 801a60e:	77fb      	strb	r3, [r7, #31]
    goto error;
 801a610:	e13d      	b.n	801a88e <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 801a612:	68bb      	ldr	r3, [r7, #8]
 801a614:	2b00      	cmp	r3, #0
 801a616:	d002      	beq.n	801a61e <HAL_SPI_Transmit+0x52>
 801a618:	88fb      	ldrh	r3, [r7, #6]
 801a61a:	2b00      	cmp	r3, #0
 801a61c:	d102      	bne.n	801a624 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 801a61e:	2301      	movs	r3, #1
 801a620:	77fb      	strb	r3, [r7, #31]
    goto error;
 801a622:	e134      	b.n	801a88e <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801a624:	68fb      	ldr	r3, [r7, #12]
 801a626:	2203      	movs	r2, #3
 801a628:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801a62c:	68fb      	ldr	r3, [r7, #12]
 801a62e:	2200      	movs	r2, #0
 801a630:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801a632:	68fb      	ldr	r3, [r7, #12]
 801a634:	68ba      	ldr	r2, [r7, #8]
 801a636:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 801a638:	68fb      	ldr	r3, [r7, #12]
 801a63a:	88fa      	ldrh	r2, [r7, #6]
 801a63c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 801a63e:	68fb      	ldr	r3, [r7, #12]
 801a640:	88fa      	ldrh	r2, [r7, #6]
 801a642:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801a644:	68fb      	ldr	r3, [r7, #12]
 801a646:	2200      	movs	r2, #0
 801a648:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 801a64a:	68fb      	ldr	r3, [r7, #12]
 801a64c:	2200      	movs	r2, #0
 801a64e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 801a652:	68fb      	ldr	r3, [r7, #12]
 801a654:	2200      	movs	r2, #0
 801a656:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 801a65a:	68fb      	ldr	r3, [r7, #12]
 801a65c:	2200      	movs	r2, #0
 801a65e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 801a660:	68fb      	ldr	r3, [r7, #12]
 801a662:	2200      	movs	r2, #0
 801a664:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801a666:	68fb      	ldr	r3, [r7, #12]
 801a668:	689b      	ldr	r3, [r3, #8]
 801a66a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801a66e:	d10f      	bne.n	801a690 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801a670:	68fb      	ldr	r3, [r7, #12]
 801a672:	681b      	ldr	r3, [r3, #0]
 801a674:	681a      	ldr	r2, [r3, #0]
 801a676:	68fb      	ldr	r3, [r7, #12]
 801a678:	681b      	ldr	r3, [r3, #0]
 801a67a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801a67e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801a680:	68fb      	ldr	r3, [r7, #12]
 801a682:	681b      	ldr	r3, [r3, #0]
 801a684:	681a      	ldr	r2, [r3, #0]
 801a686:	68fb      	ldr	r3, [r7, #12]
 801a688:	681b      	ldr	r3, [r3, #0]
 801a68a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801a68e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801a690:	68fb      	ldr	r3, [r7, #12]
 801a692:	681b      	ldr	r3, [r3, #0]
 801a694:	681b      	ldr	r3, [r3, #0]
 801a696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a69a:	2b40      	cmp	r3, #64	; 0x40
 801a69c:	d007      	beq.n	801a6ae <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801a69e:	68fb      	ldr	r3, [r7, #12]
 801a6a0:	681b      	ldr	r3, [r3, #0]
 801a6a2:	681a      	ldr	r2, [r3, #0]
 801a6a4:	68fb      	ldr	r3, [r7, #12]
 801a6a6:	681b      	ldr	r3, [r3, #0]
 801a6a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801a6ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801a6ae:	68fb      	ldr	r3, [r7, #12]
 801a6b0:	68db      	ldr	r3, [r3, #12]
 801a6b2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801a6b6:	d94b      	bls.n	801a750 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801a6b8:	68fb      	ldr	r3, [r7, #12]
 801a6ba:	685b      	ldr	r3, [r3, #4]
 801a6bc:	2b00      	cmp	r3, #0
 801a6be:	d002      	beq.n	801a6c6 <HAL_SPI_Transmit+0xfa>
 801a6c0:	8afb      	ldrh	r3, [r7, #22]
 801a6c2:	2b01      	cmp	r3, #1
 801a6c4:	d13e      	bne.n	801a744 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801a6c6:	68fb      	ldr	r3, [r7, #12]
 801a6c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a6ca:	881a      	ldrh	r2, [r3, #0]
 801a6cc:	68fb      	ldr	r3, [r7, #12]
 801a6ce:	681b      	ldr	r3, [r3, #0]
 801a6d0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801a6d2:	68fb      	ldr	r3, [r7, #12]
 801a6d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a6d6:	1c9a      	adds	r2, r3, #2
 801a6d8:	68fb      	ldr	r3, [r7, #12]
 801a6da:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801a6dc:	68fb      	ldr	r3, [r7, #12]
 801a6de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a6e0:	b29b      	uxth	r3, r3
 801a6e2:	3b01      	subs	r3, #1
 801a6e4:	b29a      	uxth	r2, r3
 801a6e6:	68fb      	ldr	r3, [r7, #12]
 801a6e8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 801a6ea:	e02b      	b.n	801a744 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801a6ec:	68fb      	ldr	r3, [r7, #12]
 801a6ee:	681b      	ldr	r3, [r3, #0]
 801a6f0:	689b      	ldr	r3, [r3, #8]
 801a6f2:	f003 0302 	and.w	r3, r3, #2
 801a6f6:	2b02      	cmp	r3, #2
 801a6f8:	d112      	bne.n	801a720 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801a6fa:	68fb      	ldr	r3, [r7, #12]
 801a6fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a6fe:	881a      	ldrh	r2, [r3, #0]
 801a700:	68fb      	ldr	r3, [r7, #12]
 801a702:	681b      	ldr	r3, [r3, #0]
 801a704:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801a706:	68fb      	ldr	r3, [r7, #12]
 801a708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a70a:	1c9a      	adds	r2, r3, #2
 801a70c:	68fb      	ldr	r3, [r7, #12]
 801a70e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801a710:	68fb      	ldr	r3, [r7, #12]
 801a712:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a714:	b29b      	uxth	r3, r3
 801a716:	3b01      	subs	r3, #1
 801a718:	b29a      	uxth	r2, r3
 801a71a:	68fb      	ldr	r3, [r7, #12]
 801a71c:	87da      	strh	r2, [r3, #62]	; 0x3e
 801a71e:	e011      	b.n	801a744 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801a720:	f7fb f9e2 	bl	8015ae8 <HAL_GetTick>
 801a724:	4602      	mov	r2, r0
 801a726:	69bb      	ldr	r3, [r7, #24]
 801a728:	1ad3      	subs	r3, r2, r3
 801a72a:	683a      	ldr	r2, [r7, #0]
 801a72c:	429a      	cmp	r2, r3
 801a72e:	d803      	bhi.n	801a738 <HAL_SPI_Transmit+0x16c>
 801a730:	683b      	ldr	r3, [r7, #0]
 801a732:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a736:	d102      	bne.n	801a73e <HAL_SPI_Transmit+0x172>
 801a738:	683b      	ldr	r3, [r7, #0]
 801a73a:	2b00      	cmp	r3, #0
 801a73c:	d102      	bne.n	801a744 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 801a73e:	2303      	movs	r3, #3
 801a740:	77fb      	strb	r3, [r7, #31]
          goto error;
 801a742:	e0a4      	b.n	801a88e <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801a744:	68fb      	ldr	r3, [r7, #12]
 801a746:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a748:	b29b      	uxth	r3, r3
 801a74a:	2b00      	cmp	r3, #0
 801a74c:	d1ce      	bne.n	801a6ec <HAL_SPI_Transmit+0x120>
 801a74e:	e07c      	b.n	801a84a <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801a750:	68fb      	ldr	r3, [r7, #12]
 801a752:	685b      	ldr	r3, [r3, #4]
 801a754:	2b00      	cmp	r3, #0
 801a756:	d002      	beq.n	801a75e <HAL_SPI_Transmit+0x192>
 801a758:	8afb      	ldrh	r3, [r7, #22]
 801a75a:	2b01      	cmp	r3, #1
 801a75c:	d170      	bne.n	801a840 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 801a75e:	68fb      	ldr	r3, [r7, #12]
 801a760:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a762:	b29b      	uxth	r3, r3
 801a764:	2b01      	cmp	r3, #1
 801a766:	d912      	bls.n	801a78e <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801a768:	68fb      	ldr	r3, [r7, #12]
 801a76a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a76c:	881a      	ldrh	r2, [r3, #0]
 801a76e:	68fb      	ldr	r3, [r7, #12]
 801a770:	681b      	ldr	r3, [r3, #0]
 801a772:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801a774:	68fb      	ldr	r3, [r7, #12]
 801a776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a778:	1c9a      	adds	r2, r3, #2
 801a77a:	68fb      	ldr	r3, [r7, #12]
 801a77c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801a77e:	68fb      	ldr	r3, [r7, #12]
 801a780:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a782:	b29b      	uxth	r3, r3
 801a784:	3b02      	subs	r3, #2
 801a786:	b29a      	uxth	r2, r3
 801a788:	68fb      	ldr	r3, [r7, #12]
 801a78a:	87da      	strh	r2, [r3, #62]	; 0x3e
 801a78c:	e058      	b.n	801a840 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801a78e:	68fb      	ldr	r3, [r7, #12]
 801a790:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a792:	68fb      	ldr	r3, [r7, #12]
 801a794:	681b      	ldr	r3, [r3, #0]
 801a796:	330c      	adds	r3, #12
 801a798:	7812      	ldrb	r2, [r2, #0]
 801a79a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 801a79c:	68fb      	ldr	r3, [r7, #12]
 801a79e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a7a0:	1c5a      	adds	r2, r3, #1
 801a7a2:	68fb      	ldr	r3, [r7, #12]
 801a7a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801a7a6:	68fb      	ldr	r3, [r7, #12]
 801a7a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a7aa:	b29b      	uxth	r3, r3
 801a7ac:	3b01      	subs	r3, #1
 801a7ae:	b29a      	uxth	r2, r3
 801a7b0:	68fb      	ldr	r3, [r7, #12]
 801a7b2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 801a7b4:	e044      	b.n	801a840 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801a7b6:	68fb      	ldr	r3, [r7, #12]
 801a7b8:	681b      	ldr	r3, [r3, #0]
 801a7ba:	689b      	ldr	r3, [r3, #8]
 801a7bc:	f003 0302 	and.w	r3, r3, #2
 801a7c0:	2b02      	cmp	r3, #2
 801a7c2:	d12b      	bne.n	801a81c <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 801a7c4:	68fb      	ldr	r3, [r7, #12]
 801a7c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a7c8:	b29b      	uxth	r3, r3
 801a7ca:	2b01      	cmp	r3, #1
 801a7cc:	d912      	bls.n	801a7f4 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801a7ce:	68fb      	ldr	r3, [r7, #12]
 801a7d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a7d2:	881a      	ldrh	r2, [r3, #0]
 801a7d4:	68fb      	ldr	r3, [r7, #12]
 801a7d6:	681b      	ldr	r3, [r3, #0]
 801a7d8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801a7da:	68fb      	ldr	r3, [r7, #12]
 801a7dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a7de:	1c9a      	adds	r2, r3, #2
 801a7e0:	68fb      	ldr	r3, [r7, #12]
 801a7e2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801a7e4:	68fb      	ldr	r3, [r7, #12]
 801a7e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a7e8:	b29b      	uxth	r3, r3
 801a7ea:	3b02      	subs	r3, #2
 801a7ec:	b29a      	uxth	r2, r3
 801a7ee:	68fb      	ldr	r3, [r7, #12]
 801a7f0:	87da      	strh	r2, [r3, #62]	; 0x3e
 801a7f2:	e025      	b.n	801a840 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801a7f4:	68fb      	ldr	r3, [r7, #12]
 801a7f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a7f8:	68fb      	ldr	r3, [r7, #12]
 801a7fa:	681b      	ldr	r3, [r3, #0]
 801a7fc:	330c      	adds	r3, #12
 801a7fe:	7812      	ldrb	r2, [r2, #0]
 801a800:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801a802:	68fb      	ldr	r3, [r7, #12]
 801a804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a806:	1c5a      	adds	r2, r3, #1
 801a808:	68fb      	ldr	r3, [r7, #12]
 801a80a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801a80c:	68fb      	ldr	r3, [r7, #12]
 801a80e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a810:	b29b      	uxth	r3, r3
 801a812:	3b01      	subs	r3, #1
 801a814:	b29a      	uxth	r2, r3
 801a816:	68fb      	ldr	r3, [r7, #12]
 801a818:	87da      	strh	r2, [r3, #62]	; 0x3e
 801a81a:	e011      	b.n	801a840 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801a81c:	f7fb f964 	bl	8015ae8 <HAL_GetTick>
 801a820:	4602      	mov	r2, r0
 801a822:	69bb      	ldr	r3, [r7, #24]
 801a824:	1ad3      	subs	r3, r2, r3
 801a826:	683a      	ldr	r2, [r7, #0]
 801a828:	429a      	cmp	r2, r3
 801a82a:	d803      	bhi.n	801a834 <HAL_SPI_Transmit+0x268>
 801a82c:	683b      	ldr	r3, [r7, #0]
 801a82e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a832:	d102      	bne.n	801a83a <HAL_SPI_Transmit+0x26e>
 801a834:	683b      	ldr	r3, [r7, #0]
 801a836:	2b00      	cmp	r3, #0
 801a838:	d102      	bne.n	801a840 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 801a83a:	2303      	movs	r3, #3
 801a83c:	77fb      	strb	r3, [r7, #31]
          goto error;
 801a83e:	e026      	b.n	801a88e <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801a840:	68fb      	ldr	r3, [r7, #12]
 801a842:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a844:	b29b      	uxth	r3, r3
 801a846:	2b00      	cmp	r3, #0
 801a848:	d1b5      	bne.n	801a7b6 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801a84a:	69ba      	ldr	r2, [r7, #24]
 801a84c:	6839      	ldr	r1, [r7, #0]
 801a84e:	68f8      	ldr	r0, [r7, #12]
 801a850:	f000 fd08 	bl	801b264 <SPI_EndRxTxTransaction>
 801a854:	4603      	mov	r3, r0
 801a856:	2b00      	cmp	r3, #0
 801a858:	d002      	beq.n	801a860 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801a85a:	68fb      	ldr	r3, [r7, #12]
 801a85c:	2220      	movs	r2, #32
 801a85e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801a860:	68fb      	ldr	r3, [r7, #12]
 801a862:	689b      	ldr	r3, [r3, #8]
 801a864:	2b00      	cmp	r3, #0
 801a866:	d10a      	bne.n	801a87e <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801a868:	2300      	movs	r3, #0
 801a86a:	613b      	str	r3, [r7, #16]
 801a86c:	68fb      	ldr	r3, [r7, #12]
 801a86e:	681b      	ldr	r3, [r3, #0]
 801a870:	68db      	ldr	r3, [r3, #12]
 801a872:	613b      	str	r3, [r7, #16]
 801a874:	68fb      	ldr	r3, [r7, #12]
 801a876:	681b      	ldr	r3, [r3, #0]
 801a878:	689b      	ldr	r3, [r3, #8]
 801a87a:	613b      	str	r3, [r7, #16]
 801a87c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801a87e:	68fb      	ldr	r3, [r7, #12]
 801a880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a882:	2b00      	cmp	r3, #0
 801a884:	d002      	beq.n	801a88c <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 801a886:	2301      	movs	r3, #1
 801a888:	77fb      	strb	r3, [r7, #31]
 801a88a:	e000      	b.n	801a88e <HAL_SPI_Transmit+0x2c2>
  }

error:
 801a88c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801a88e:	68fb      	ldr	r3, [r7, #12]
 801a890:	2201      	movs	r2, #1
 801a892:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801a896:	68fb      	ldr	r3, [r7, #12]
 801a898:	2200      	movs	r2, #0
 801a89a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801a89e:	7ffb      	ldrb	r3, [r7, #31]
}
 801a8a0:	4618      	mov	r0, r3
 801a8a2:	3720      	adds	r7, #32
 801a8a4:	46bd      	mov	sp, r7
 801a8a6:	bd80      	pop	{r7, pc}

0801a8a8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801a8a8:	b580      	push	{r7, lr}
 801a8aa:	b088      	sub	sp, #32
 801a8ac:	af02      	add	r7, sp, #8
 801a8ae:	60f8      	str	r0, [r7, #12]
 801a8b0:	60b9      	str	r1, [r7, #8]
 801a8b2:	603b      	str	r3, [r7, #0]
 801a8b4:	4613      	mov	r3, r2
 801a8b6:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801a8b8:	2300      	movs	r3, #0
 801a8ba:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801a8bc:	68fb      	ldr	r3, [r7, #12]
 801a8be:	685b      	ldr	r3, [r3, #4]
 801a8c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801a8c4:	d112      	bne.n	801a8ec <HAL_SPI_Receive+0x44>
 801a8c6:	68fb      	ldr	r3, [r7, #12]
 801a8c8:	689b      	ldr	r3, [r3, #8]
 801a8ca:	2b00      	cmp	r3, #0
 801a8cc:	d10e      	bne.n	801a8ec <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801a8ce:	68fb      	ldr	r3, [r7, #12]
 801a8d0:	2204      	movs	r2, #4
 801a8d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 801a8d6:	88fa      	ldrh	r2, [r7, #6]
 801a8d8:	683b      	ldr	r3, [r7, #0]
 801a8da:	9300      	str	r3, [sp, #0]
 801a8dc:	4613      	mov	r3, r2
 801a8de:	68ba      	ldr	r2, [r7, #8]
 801a8e0:	68b9      	ldr	r1, [r7, #8]
 801a8e2:	68f8      	ldr	r0, [r7, #12]
 801a8e4:	f000 f910 	bl	801ab08 <HAL_SPI_TransmitReceive>
 801a8e8:	4603      	mov	r3, r0
 801a8ea:	e109      	b.n	801ab00 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801a8ec:	68fb      	ldr	r3, [r7, #12]
 801a8ee:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801a8f2:	2b01      	cmp	r3, #1
 801a8f4:	d101      	bne.n	801a8fa <HAL_SPI_Receive+0x52>
 801a8f6:	2302      	movs	r3, #2
 801a8f8:	e102      	b.n	801ab00 <HAL_SPI_Receive+0x258>
 801a8fa:	68fb      	ldr	r3, [r7, #12]
 801a8fc:	2201      	movs	r2, #1
 801a8fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801a902:	f7fb f8f1 	bl	8015ae8 <HAL_GetTick>
 801a906:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 801a908:	68fb      	ldr	r3, [r7, #12]
 801a90a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801a90e:	b2db      	uxtb	r3, r3
 801a910:	2b01      	cmp	r3, #1
 801a912:	d002      	beq.n	801a91a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 801a914:	2302      	movs	r3, #2
 801a916:	75fb      	strb	r3, [r7, #23]
    goto error;
 801a918:	e0e9      	b.n	801aaee <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 801a91a:	68bb      	ldr	r3, [r7, #8]
 801a91c:	2b00      	cmp	r3, #0
 801a91e:	d002      	beq.n	801a926 <HAL_SPI_Receive+0x7e>
 801a920:	88fb      	ldrh	r3, [r7, #6]
 801a922:	2b00      	cmp	r3, #0
 801a924:	d102      	bne.n	801a92c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 801a926:	2301      	movs	r3, #1
 801a928:	75fb      	strb	r3, [r7, #23]
    goto error;
 801a92a:	e0e0      	b.n	801aaee <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801a92c:	68fb      	ldr	r3, [r7, #12]
 801a92e:	2204      	movs	r2, #4
 801a930:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801a934:	68fb      	ldr	r3, [r7, #12]
 801a936:	2200      	movs	r2, #0
 801a938:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801a93a:	68fb      	ldr	r3, [r7, #12]
 801a93c:	68ba      	ldr	r2, [r7, #8]
 801a93e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 801a940:	68fb      	ldr	r3, [r7, #12]
 801a942:	88fa      	ldrh	r2, [r7, #6]
 801a944:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 801a948:	68fb      	ldr	r3, [r7, #12]
 801a94a:	88fa      	ldrh	r2, [r7, #6]
 801a94c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801a950:	68fb      	ldr	r3, [r7, #12]
 801a952:	2200      	movs	r2, #0
 801a954:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 801a956:	68fb      	ldr	r3, [r7, #12]
 801a958:	2200      	movs	r2, #0
 801a95a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 801a95c:	68fb      	ldr	r3, [r7, #12]
 801a95e:	2200      	movs	r2, #0
 801a960:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 801a962:	68fb      	ldr	r3, [r7, #12]
 801a964:	2200      	movs	r2, #0
 801a966:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801a968:	68fb      	ldr	r3, [r7, #12]
 801a96a:	2200      	movs	r2, #0
 801a96c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801a96e:	68fb      	ldr	r3, [r7, #12]
 801a970:	68db      	ldr	r3, [r3, #12]
 801a972:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801a976:	d908      	bls.n	801a98a <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801a978:	68fb      	ldr	r3, [r7, #12]
 801a97a:	681b      	ldr	r3, [r3, #0]
 801a97c:	685a      	ldr	r2, [r3, #4]
 801a97e:	68fb      	ldr	r3, [r7, #12]
 801a980:	681b      	ldr	r3, [r3, #0]
 801a982:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801a986:	605a      	str	r2, [r3, #4]
 801a988:	e007      	b.n	801a99a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801a98a:	68fb      	ldr	r3, [r7, #12]
 801a98c:	681b      	ldr	r3, [r3, #0]
 801a98e:	685a      	ldr	r2, [r3, #4]
 801a990:	68fb      	ldr	r3, [r7, #12]
 801a992:	681b      	ldr	r3, [r3, #0]
 801a994:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801a998:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801a99a:	68fb      	ldr	r3, [r7, #12]
 801a99c:	689b      	ldr	r3, [r3, #8]
 801a99e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801a9a2:	d10f      	bne.n	801a9c4 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801a9a4:	68fb      	ldr	r3, [r7, #12]
 801a9a6:	681b      	ldr	r3, [r3, #0]
 801a9a8:	681a      	ldr	r2, [r3, #0]
 801a9aa:	68fb      	ldr	r3, [r7, #12]
 801a9ac:	681b      	ldr	r3, [r3, #0]
 801a9ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801a9b2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 801a9b4:	68fb      	ldr	r3, [r7, #12]
 801a9b6:	681b      	ldr	r3, [r3, #0]
 801a9b8:	681a      	ldr	r2, [r3, #0]
 801a9ba:	68fb      	ldr	r3, [r7, #12]
 801a9bc:	681b      	ldr	r3, [r3, #0]
 801a9be:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801a9c2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801a9c4:	68fb      	ldr	r3, [r7, #12]
 801a9c6:	681b      	ldr	r3, [r3, #0]
 801a9c8:	681b      	ldr	r3, [r3, #0]
 801a9ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a9ce:	2b40      	cmp	r3, #64	; 0x40
 801a9d0:	d007      	beq.n	801a9e2 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801a9d2:	68fb      	ldr	r3, [r7, #12]
 801a9d4:	681b      	ldr	r3, [r3, #0]
 801a9d6:	681a      	ldr	r2, [r3, #0]
 801a9d8:	68fb      	ldr	r3, [r7, #12]
 801a9da:	681b      	ldr	r3, [r3, #0]
 801a9dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801a9e0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 801a9e2:	68fb      	ldr	r3, [r7, #12]
 801a9e4:	68db      	ldr	r3, [r3, #12]
 801a9e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801a9ea:	d867      	bhi.n	801aabc <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 801a9ec:	e030      	b.n	801aa50 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801a9ee:	68fb      	ldr	r3, [r7, #12]
 801a9f0:	681b      	ldr	r3, [r3, #0]
 801a9f2:	689b      	ldr	r3, [r3, #8]
 801a9f4:	f003 0301 	and.w	r3, r3, #1
 801a9f8:	2b01      	cmp	r3, #1
 801a9fa:	d117      	bne.n	801aa2c <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801a9fc:	68fb      	ldr	r3, [r7, #12]
 801a9fe:	681b      	ldr	r3, [r3, #0]
 801aa00:	f103 020c 	add.w	r2, r3, #12
 801aa04:	68fb      	ldr	r3, [r7, #12]
 801aa06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801aa08:	7812      	ldrb	r2, [r2, #0]
 801aa0a:	b2d2      	uxtb	r2, r2
 801aa0c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801aa0e:	68fb      	ldr	r3, [r7, #12]
 801aa10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801aa12:	1c5a      	adds	r2, r3, #1
 801aa14:	68fb      	ldr	r3, [r7, #12]
 801aa16:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801aa18:	68fb      	ldr	r3, [r7, #12]
 801aa1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801aa1e:	b29b      	uxth	r3, r3
 801aa20:	3b01      	subs	r3, #1
 801aa22:	b29a      	uxth	r2, r3
 801aa24:	68fb      	ldr	r3, [r7, #12]
 801aa26:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801aa2a:	e011      	b.n	801aa50 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801aa2c:	f7fb f85c 	bl	8015ae8 <HAL_GetTick>
 801aa30:	4602      	mov	r2, r0
 801aa32:	693b      	ldr	r3, [r7, #16]
 801aa34:	1ad3      	subs	r3, r2, r3
 801aa36:	683a      	ldr	r2, [r7, #0]
 801aa38:	429a      	cmp	r2, r3
 801aa3a:	d803      	bhi.n	801aa44 <HAL_SPI_Receive+0x19c>
 801aa3c:	683b      	ldr	r3, [r7, #0]
 801aa3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801aa42:	d102      	bne.n	801aa4a <HAL_SPI_Receive+0x1a2>
 801aa44:	683b      	ldr	r3, [r7, #0]
 801aa46:	2b00      	cmp	r3, #0
 801aa48:	d102      	bne.n	801aa50 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 801aa4a:	2303      	movs	r3, #3
 801aa4c:	75fb      	strb	r3, [r7, #23]
          goto error;
 801aa4e:	e04e      	b.n	801aaee <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 801aa50:	68fb      	ldr	r3, [r7, #12]
 801aa52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801aa56:	b29b      	uxth	r3, r3
 801aa58:	2b00      	cmp	r3, #0
 801aa5a:	d1c8      	bne.n	801a9ee <HAL_SPI_Receive+0x146>
 801aa5c:	e034      	b.n	801aac8 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801aa5e:	68fb      	ldr	r3, [r7, #12]
 801aa60:	681b      	ldr	r3, [r3, #0]
 801aa62:	689b      	ldr	r3, [r3, #8]
 801aa64:	f003 0301 	and.w	r3, r3, #1
 801aa68:	2b01      	cmp	r3, #1
 801aa6a:	d115      	bne.n	801aa98 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801aa6c:	68fb      	ldr	r3, [r7, #12]
 801aa6e:	681b      	ldr	r3, [r3, #0]
 801aa70:	68da      	ldr	r2, [r3, #12]
 801aa72:	68fb      	ldr	r3, [r7, #12]
 801aa74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801aa76:	b292      	uxth	r2, r2
 801aa78:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801aa7a:	68fb      	ldr	r3, [r7, #12]
 801aa7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801aa7e:	1c9a      	adds	r2, r3, #2
 801aa80:	68fb      	ldr	r3, [r7, #12]
 801aa82:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801aa84:	68fb      	ldr	r3, [r7, #12]
 801aa86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801aa8a:	b29b      	uxth	r3, r3
 801aa8c:	3b01      	subs	r3, #1
 801aa8e:	b29a      	uxth	r2, r3
 801aa90:	68fb      	ldr	r3, [r7, #12]
 801aa92:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801aa96:	e011      	b.n	801aabc <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801aa98:	f7fb f826 	bl	8015ae8 <HAL_GetTick>
 801aa9c:	4602      	mov	r2, r0
 801aa9e:	693b      	ldr	r3, [r7, #16]
 801aaa0:	1ad3      	subs	r3, r2, r3
 801aaa2:	683a      	ldr	r2, [r7, #0]
 801aaa4:	429a      	cmp	r2, r3
 801aaa6:	d803      	bhi.n	801aab0 <HAL_SPI_Receive+0x208>
 801aaa8:	683b      	ldr	r3, [r7, #0]
 801aaaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 801aaae:	d102      	bne.n	801aab6 <HAL_SPI_Receive+0x20e>
 801aab0:	683b      	ldr	r3, [r7, #0]
 801aab2:	2b00      	cmp	r3, #0
 801aab4:	d102      	bne.n	801aabc <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 801aab6:	2303      	movs	r3, #3
 801aab8:	75fb      	strb	r3, [r7, #23]
          goto error;
 801aaba:	e018      	b.n	801aaee <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 801aabc:	68fb      	ldr	r3, [r7, #12]
 801aabe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801aac2:	b29b      	uxth	r3, r3
 801aac4:	2b00      	cmp	r3, #0
 801aac6:	d1ca      	bne.n	801aa5e <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801aac8:	693a      	ldr	r2, [r7, #16]
 801aaca:	6839      	ldr	r1, [r7, #0]
 801aacc:	68f8      	ldr	r0, [r7, #12]
 801aace:	f000 fb4d 	bl	801b16c <SPI_EndRxTransaction>
 801aad2:	4603      	mov	r3, r0
 801aad4:	2b00      	cmp	r3, #0
 801aad6:	d002      	beq.n	801aade <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801aad8:	68fb      	ldr	r3, [r7, #12]
 801aada:	2220      	movs	r2, #32
 801aadc:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801aade:	68fb      	ldr	r3, [r7, #12]
 801aae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801aae2:	2b00      	cmp	r3, #0
 801aae4:	d002      	beq.n	801aaec <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 801aae6:	2301      	movs	r3, #1
 801aae8:	75fb      	strb	r3, [r7, #23]
 801aaea:	e000      	b.n	801aaee <HAL_SPI_Receive+0x246>
  }

error :
 801aaec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801aaee:	68fb      	ldr	r3, [r7, #12]
 801aaf0:	2201      	movs	r2, #1
 801aaf2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801aaf6:	68fb      	ldr	r3, [r7, #12]
 801aaf8:	2200      	movs	r2, #0
 801aafa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801aafe:	7dfb      	ldrb	r3, [r7, #23]
}
 801ab00:	4618      	mov	r0, r3
 801ab02:	3718      	adds	r7, #24
 801ab04:	46bd      	mov	sp, r7
 801ab06:	bd80      	pop	{r7, pc}

0801ab08 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 801ab08:	b580      	push	{r7, lr}
 801ab0a:	b08a      	sub	sp, #40	; 0x28
 801ab0c:	af00      	add	r7, sp, #0
 801ab0e:	60f8      	str	r0, [r7, #12]
 801ab10:	60b9      	str	r1, [r7, #8]
 801ab12:	607a      	str	r2, [r7, #4]
 801ab14:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801ab16:	2301      	movs	r3, #1
 801ab18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 801ab1a:	2300      	movs	r3, #0
 801ab1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801ab20:	68fb      	ldr	r3, [r7, #12]
 801ab22:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801ab26:	2b01      	cmp	r3, #1
 801ab28:	d101      	bne.n	801ab2e <HAL_SPI_TransmitReceive+0x26>
 801ab2a:	2302      	movs	r3, #2
 801ab2c:	e1fb      	b.n	801af26 <HAL_SPI_TransmitReceive+0x41e>
 801ab2e:	68fb      	ldr	r3, [r7, #12]
 801ab30:	2201      	movs	r2, #1
 801ab32:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801ab36:	f7fa ffd7 	bl	8015ae8 <HAL_GetTick>
 801ab3a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801ab3c:	68fb      	ldr	r3, [r7, #12]
 801ab3e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801ab42:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 801ab44:	68fb      	ldr	r3, [r7, #12]
 801ab46:	685b      	ldr	r3, [r3, #4]
 801ab48:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 801ab4a:	887b      	ldrh	r3, [r7, #2]
 801ab4c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 801ab4e:	887b      	ldrh	r3, [r7, #2]
 801ab50:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801ab52:	7efb      	ldrb	r3, [r7, #27]
 801ab54:	2b01      	cmp	r3, #1
 801ab56:	d00e      	beq.n	801ab76 <HAL_SPI_TransmitReceive+0x6e>
 801ab58:	697b      	ldr	r3, [r7, #20]
 801ab5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801ab5e:	d106      	bne.n	801ab6e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801ab60:	68fb      	ldr	r3, [r7, #12]
 801ab62:	689b      	ldr	r3, [r3, #8]
 801ab64:	2b00      	cmp	r3, #0
 801ab66:	d102      	bne.n	801ab6e <HAL_SPI_TransmitReceive+0x66>
 801ab68:	7efb      	ldrb	r3, [r7, #27]
 801ab6a:	2b04      	cmp	r3, #4
 801ab6c:	d003      	beq.n	801ab76 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 801ab6e:	2302      	movs	r3, #2
 801ab70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801ab74:	e1cd      	b.n	801af12 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801ab76:	68bb      	ldr	r3, [r7, #8]
 801ab78:	2b00      	cmp	r3, #0
 801ab7a:	d005      	beq.n	801ab88 <HAL_SPI_TransmitReceive+0x80>
 801ab7c:	687b      	ldr	r3, [r7, #4]
 801ab7e:	2b00      	cmp	r3, #0
 801ab80:	d002      	beq.n	801ab88 <HAL_SPI_TransmitReceive+0x80>
 801ab82:	887b      	ldrh	r3, [r7, #2]
 801ab84:	2b00      	cmp	r3, #0
 801ab86:	d103      	bne.n	801ab90 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 801ab88:	2301      	movs	r3, #1
 801ab8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801ab8e:	e1c0      	b.n	801af12 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801ab90:	68fb      	ldr	r3, [r7, #12]
 801ab92:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801ab96:	b2db      	uxtb	r3, r3
 801ab98:	2b04      	cmp	r3, #4
 801ab9a:	d003      	beq.n	801aba4 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801ab9c:	68fb      	ldr	r3, [r7, #12]
 801ab9e:	2205      	movs	r2, #5
 801aba0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801aba4:	68fb      	ldr	r3, [r7, #12]
 801aba6:	2200      	movs	r2, #0
 801aba8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801abaa:	68fb      	ldr	r3, [r7, #12]
 801abac:	687a      	ldr	r2, [r7, #4]
 801abae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 801abb0:	68fb      	ldr	r3, [r7, #12]
 801abb2:	887a      	ldrh	r2, [r7, #2]
 801abb4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 801abb8:	68fb      	ldr	r3, [r7, #12]
 801abba:	887a      	ldrh	r2, [r7, #2]
 801abbc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801abc0:	68fb      	ldr	r3, [r7, #12]
 801abc2:	68ba      	ldr	r2, [r7, #8]
 801abc4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 801abc6:	68fb      	ldr	r3, [r7, #12]
 801abc8:	887a      	ldrh	r2, [r7, #2]
 801abca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 801abcc:	68fb      	ldr	r3, [r7, #12]
 801abce:	887a      	ldrh	r2, [r7, #2]
 801abd0:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801abd2:	68fb      	ldr	r3, [r7, #12]
 801abd4:	2200      	movs	r2, #0
 801abd6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801abd8:	68fb      	ldr	r3, [r7, #12]
 801abda:	2200      	movs	r2, #0
 801abdc:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 801abde:	68fb      	ldr	r3, [r7, #12]
 801abe0:	68db      	ldr	r3, [r3, #12]
 801abe2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801abe6:	d802      	bhi.n	801abee <HAL_SPI_TransmitReceive+0xe6>
 801abe8:	8a3b      	ldrh	r3, [r7, #16]
 801abea:	2b01      	cmp	r3, #1
 801abec:	d908      	bls.n	801ac00 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801abee:	68fb      	ldr	r3, [r7, #12]
 801abf0:	681b      	ldr	r3, [r3, #0]
 801abf2:	685a      	ldr	r2, [r3, #4]
 801abf4:	68fb      	ldr	r3, [r7, #12]
 801abf6:	681b      	ldr	r3, [r3, #0]
 801abf8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801abfc:	605a      	str	r2, [r3, #4]
 801abfe:	e007      	b.n	801ac10 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801ac00:	68fb      	ldr	r3, [r7, #12]
 801ac02:	681b      	ldr	r3, [r3, #0]
 801ac04:	685a      	ldr	r2, [r3, #4]
 801ac06:	68fb      	ldr	r3, [r7, #12]
 801ac08:	681b      	ldr	r3, [r3, #0]
 801ac0a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801ac0e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801ac10:	68fb      	ldr	r3, [r7, #12]
 801ac12:	681b      	ldr	r3, [r3, #0]
 801ac14:	681b      	ldr	r3, [r3, #0]
 801ac16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ac1a:	2b40      	cmp	r3, #64	; 0x40
 801ac1c:	d007      	beq.n	801ac2e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801ac1e:	68fb      	ldr	r3, [r7, #12]
 801ac20:	681b      	ldr	r3, [r3, #0]
 801ac22:	681a      	ldr	r2, [r3, #0]
 801ac24:	68fb      	ldr	r3, [r7, #12]
 801ac26:	681b      	ldr	r3, [r3, #0]
 801ac28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801ac2c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801ac2e:	68fb      	ldr	r3, [r7, #12]
 801ac30:	68db      	ldr	r3, [r3, #12]
 801ac32:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801ac36:	d97c      	bls.n	801ad32 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801ac38:	68fb      	ldr	r3, [r7, #12]
 801ac3a:	685b      	ldr	r3, [r3, #4]
 801ac3c:	2b00      	cmp	r3, #0
 801ac3e:	d002      	beq.n	801ac46 <HAL_SPI_TransmitReceive+0x13e>
 801ac40:	8a7b      	ldrh	r3, [r7, #18]
 801ac42:	2b01      	cmp	r3, #1
 801ac44:	d169      	bne.n	801ad1a <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801ac46:	68fb      	ldr	r3, [r7, #12]
 801ac48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ac4a:	881a      	ldrh	r2, [r3, #0]
 801ac4c:	68fb      	ldr	r3, [r7, #12]
 801ac4e:	681b      	ldr	r3, [r3, #0]
 801ac50:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801ac52:	68fb      	ldr	r3, [r7, #12]
 801ac54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ac56:	1c9a      	adds	r2, r3, #2
 801ac58:	68fb      	ldr	r3, [r7, #12]
 801ac5a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801ac5c:	68fb      	ldr	r3, [r7, #12]
 801ac5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801ac60:	b29b      	uxth	r3, r3
 801ac62:	3b01      	subs	r3, #1
 801ac64:	b29a      	uxth	r2, r3
 801ac66:	68fb      	ldr	r3, [r7, #12]
 801ac68:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801ac6a:	e056      	b.n	801ad1a <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801ac6c:	68fb      	ldr	r3, [r7, #12]
 801ac6e:	681b      	ldr	r3, [r3, #0]
 801ac70:	689b      	ldr	r3, [r3, #8]
 801ac72:	f003 0302 	and.w	r3, r3, #2
 801ac76:	2b02      	cmp	r3, #2
 801ac78:	d11b      	bne.n	801acb2 <HAL_SPI_TransmitReceive+0x1aa>
 801ac7a:	68fb      	ldr	r3, [r7, #12]
 801ac7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801ac7e:	b29b      	uxth	r3, r3
 801ac80:	2b00      	cmp	r3, #0
 801ac82:	d016      	beq.n	801acb2 <HAL_SPI_TransmitReceive+0x1aa>
 801ac84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac86:	2b01      	cmp	r3, #1
 801ac88:	d113      	bne.n	801acb2 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801ac8a:	68fb      	ldr	r3, [r7, #12]
 801ac8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ac8e:	881a      	ldrh	r2, [r3, #0]
 801ac90:	68fb      	ldr	r3, [r7, #12]
 801ac92:	681b      	ldr	r3, [r3, #0]
 801ac94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801ac96:	68fb      	ldr	r3, [r7, #12]
 801ac98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ac9a:	1c9a      	adds	r2, r3, #2
 801ac9c:	68fb      	ldr	r3, [r7, #12]
 801ac9e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801aca0:	68fb      	ldr	r3, [r7, #12]
 801aca2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801aca4:	b29b      	uxth	r3, r3
 801aca6:	3b01      	subs	r3, #1
 801aca8:	b29a      	uxth	r2, r3
 801acaa:	68fb      	ldr	r3, [r7, #12]
 801acac:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801acae:	2300      	movs	r3, #0
 801acb0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801acb2:	68fb      	ldr	r3, [r7, #12]
 801acb4:	681b      	ldr	r3, [r3, #0]
 801acb6:	689b      	ldr	r3, [r3, #8]
 801acb8:	f003 0301 	and.w	r3, r3, #1
 801acbc:	2b01      	cmp	r3, #1
 801acbe:	d11c      	bne.n	801acfa <HAL_SPI_TransmitReceive+0x1f2>
 801acc0:	68fb      	ldr	r3, [r7, #12]
 801acc2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801acc6:	b29b      	uxth	r3, r3
 801acc8:	2b00      	cmp	r3, #0
 801acca:	d016      	beq.n	801acfa <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801accc:	68fb      	ldr	r3, [r7, #12]
 801acce:	681b      	ldr	r3, [r3, #0]
 801acd0:	68da      	ldr	r2, [r3, #12]
 801acd2:	68fb      	ldr	r3, [r7, #12]
 801acd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801acd6:	b292      	uxth	r2, r2
 801acd8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801acda:	68fb      	ldr	r3, [r7, #12]
 801acdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801acde:	1c9a      	adds	r2, r3, #2
 801ace0:	68fb      	ldr	r3, [r7, #12]
 801ace2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801ace4:	68fb      	ldr	r3, [r7, #12]
 801ace6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801acea:	b29b      	uxth	r3, r3
 801acec:	3b01      	subs	r3, #1
 801acee:	b29a      	uxth	r2, r3
 801acf0:	68fb      	ldr	r3, [r7, #12]
 801acf2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801acf6:	2301      	movs	r3, #1
 801acf8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801acfa:	f7fa fef5 	bl	8015ae8 <HAL_GetTick>
 801acfe:	4602      	mov	r2, r0
 801ad00:	69fb      	ldr	r3, [r7, #28]
 801ad02:	1ad3      	subs	r3, r2, r3
 801ad04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ad06:	429a      	cmp	r2, r3
 801ad08:	d807      	bhi.n	801ad1a <HAL_SPI_TransmitReceive+0x212>
 801ad0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ad10:	d003      	beq.n	801ad1a <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 801ad12:	2303      	movs	r3, #3
 801ad14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 801ad18:	e0fb      	b.n	801af12 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801ad1a:	68fb      	ldr	r3, [r7, #12]
 801ad1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801ad1e:	b29b      	uxth	r3, r3
 801ad20:	2b00      	cmp	r3, #0
 801ad22:	d1a3      	bne.n	801ac6c <HAL_SPI_TransmitReceive+0x164>
 801ad24:	68fb      	ldr	r3, [r7, #12]
 801ad26:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801ad2a:	b29b      	uxth	r3, r3
 801ad2c:	2b00      	cmp	r3, #0
 801ad2e:	d19d      	bne.n	801ac6c <HAL_SPI_TransmitReceive+0x164>
 801ad30:	e0df      	b.n	801aef2 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801ad32:	68fb      	ldr	r3, [r7, #12]
 801ad34:	685b      	ldr	r3, [r3, #4]
 801ad36:	2b00      	cmp	r3, #0
 801ad38:	d003      	beq.n	801ad42 <HAL_SPI_TransmitReceive+0x23a>
 801ad3a:	8a7b      	ldrh	r3, [r7, #18]
 801ad3c:	2b01      	cmp	r3, #1
 801ad3e:	f040 80cb 	bne.w	801aed8 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 801ad42:	68fb      	ldr	r3, [r7, #12]
 801ad44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801ad46:	b29b      	uxth	r3, r3
 801ad48:	2b01      	cmp	r3, #1
 801ad4a:	d912      	bls.n	801ad72 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801ad4c:	68fb      	ldr	r3, [r7, #12]
 801ad4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ad50:	881a      	ldrh	r2, [r3, #0]
 801ad52:	68fb      	ldr	r3, [r7, #12]
 801ad54:	681b      	ldr	r3, [r3, #0]
 801ad56:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801ad58:	68fb      	ldr	r3, [r7, #12]
 801ad5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ad5c:	1c9a      	adds	r2, r3, #2
 801ad5e:	68fb      	ldr	r3, [r7, #12]
 801ad60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801ad62:	68fb      	ldr	r3, [r7, #12]
 801ad64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801ad66:	b29b      	uxth	r3, r3
 801ad68:	3b02      	subs	r3, #2
 801ad6a:	b29a      	uxth	r2, r3
 801ad6c:	68fb      	ldr	r3, [r7, #12]
 801ad6e:	87da      	strh	r2, [r3, #62]	; 0x3e
 801ad70:	e0b2      	b.n	801aed8 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801ad72:	68fb      	ldr	r3, [r7, #12]
 801ad74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801ad76:	68fb      	ldr	r3, [r7, #12]
 801ad78:	681b      	ldr	r3, [r3, #0]
 801ad7a:	330c      	adds	r3, #12
 801ad7c:	7812      	ldrb	r2, [r2, #0]
 801ad7e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801ad80:	68fb      	ldr	r3, [r7, #12]
 801ad82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ad84:	1c5a      	adds	r2, r3, #1
 801ad86:	68fb      	ldr	r3, [r7, #12]
 801ad88:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801ad8a:	68fb      	ldr	r3, [r7, #12]
 801ad8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801ad8e:	b29b      	uxth	r3, r3
 801ad90:	3b01      	subs	r3, #1
 801ad92:	b29a      	uxth	r2, r3
 801ad94:	68fb      	ldr	r3, [r7, #12]
 801ad96:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801ad98:	e09e      	b.n	801aed8 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801ad9a:	68fb      	ldr	r3, [r7, #12]
 801ad9c:	681b      	ldr	r3, [r3, #0]
 801ad9e:	689b      	ldr	r3, [r3, #8]
 801ada0:	f003 0302 	and.w	r3, r3, #2
 801ada4:	2b02      	cmp	r3, #2
 801ada6:	d134      	bne.n	801ae12 <HAL_SPI_TransmitReceive+0x30a>
 801ada8:	68fb      	ldr	r3, [r7, #12]
 801adaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801adac:	b29b      	uxth	r3, r3
 801adae:	2b00      	cmp	r3, #0
 801adb0:	d02f      	beq.n	801ae12 <HAL_SPI_TransmitReceive+0x30a>
 801adb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801adb4:	2b01      	cmp	r3, #1
 801adb6:	d12c      	bne.n	801ae12 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 801adb8:	68fb      	ldr	r3, [r7, #12]
 801adba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801adbc:	b29b      	uxth	r3, r3
 801adbe:	2b01      	cmp	r3, #1
 801adc0:	d912      	bls.n	801ade8 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801adc2:	68fb      	ldr	r3, [r7, #12]
 801adc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801adc6:	881a      	ldrh	r2, [r3, #0]
 801adc8:	68fb      	ldr	r3, [r7, #12]
 801adca:	681b      	ldr	r3, [r3, #0]
 801adcc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801adce:	68fb      	ldr	r3, [r7, #12]
 801add0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801add2:	1c9a      	adds	r2, r3, #2
 801add4:	68fb      	ldr	r3, [r7, #12]
 801add6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801add8:	68fb      	ldr	r3, [r7, #12]
 801adda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801addc:	b29b      	uxth	r3, r3
 801adde:	3b02      	subs	r3, #2
 801ade0:	b29a      	uxth	r2, r3
 801ade2:	68fb      	ldr	r3, [r7, #12]
 801ade4:	87da      	strh	r2, [r3, #62]	; 0x3e
 801ade6:	e012      	b.n	801ae0e <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801ade8:	68fb      	ldr	r3, [r7, #12]
 801adea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801adec:	68fb      	ldr	r3, [r7, #12]
 801adee:	681b      	ldr	r3, [r3, #0]
 801adf0:	330c      	adds	r3, #12
 801adf2:	7812      	ldrb	r2, [r2, #0]
 801adf4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801adf6:	68fb      	ldr	r3, [r7, #12]
 801adf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801adfa:	1c5a      	adds	r2, r3, #1
 801adfc:	68fb      	ldr	r3, [r7, #12]
 801adfe:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801ae00:	68fb      	ldr	r3, [r7, #12]
 801ae02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801ae04:	b29b      	uxth	r3, r3
 801ae06:	3b01      	subs	r3, #1
 801ae08:	b29a      	uxth	r2, r3
 801ae0a:	68fb      	ldr	r3, [r7, #12]
 801ae0c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801ae0e:	2300      	movs	r3, #0
 801ae10:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801ae12:	68fb      	ldr	r3, [r7, #12]
 801ae14:	681b      	ldr	r3, [r3, #0]
 801ae16:	689b      	ldr	r3, [r3, #8]
 801ae18:	f003 0301 	and.w	r3, r3, #1
 801ae1c:	2b01      	cmp	r3, #1
 801ae1e:	d148      	bne.n	801aeb2 <HAL_SPI_TransmitReceive+0x3aa>
 801ae20:	68fb      	ldr	r3, [r7, #12]
 801ae22:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801ae26:	b29b      	uxth	r3, r3
 801ae28:	2b00      	cmp	r3, #0
 801ae2a:	d042      	beq.n	801aeb2 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 801ae2c:	68fb      	ldr	r3, [r7, #12]
 801ae2e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801ae32:	b29b      	uxth	r3, r3
 801ae34:	2b01      	cmp	r3, #1
 801ae36:	d923      	bls.n	801ae80 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801ae38:	68fb      	ldr	r3, [r7, #12]
 801ae3a:	681b      	ldr	r3, [r3, #0]
 801ae3c:	68da      	ldr	r2, [r3, #12]
 801ae3e:	68fb      	ldr	r3, [r7, #12]
 801ae40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ae42:	b292      	uxth	r2, r2
 801ae44:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801ae46:	68fb      	ldr	r3, [r7, #12]
 801ae48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ae4a:	1c9a      	adds	r2, r3, #2
 801ae4c:	68fb      	ldr	r3, [r7, #12]
 801ae4e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 801ae50:	68fb      	ldr	r3, [r7, #12]
 801ae52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801ae56:	b29b      	uxth	r3, r3
 801ae58:	3b02      	subs	r3, #2
 801ae5a:	b29a      	uxth	r2, r3
 801ae5c:	68fb      	ldr	r3, [r7, #12]
 801ae5e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 801ae62:	68fb      	ldr	r3, [r7, #12]
 801ae64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801ae68:	b29b      	uxth	r3, r3
 801ae6a:	2b01      	cmp	r3, #1
 801ae6c:	d81f      	bhi.n	801aeae <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801ae6e:	68fb      	ldr	r3, [r7, #12]
 801ae70:	681b      	ldr	r3, [r3, #0]
 801ae72:	685a      	ldr	r2, [r3, #4]
 801ae74:	68fb      	ldr	r3, [r7, #12]
 801ae76:	681b      	ldr	r3, [r3, #0]
 801ae78:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801ae7c:	605a      	str	r2, [r3, #4]
 801ae7e:	e016      	b.n	801aeae <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801ae80:	68fb      	ldr	r3, [r7, #12]
 801ae82:	681b      	ldr	r3, [r3, #0]
 801ae84:	f103 020c 	add.w	r2, r3, #12
 801ae88:	68fb      	ldr	r3, [r7, #12]
 801ae8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ae8c:	7812      	ldrb	r2, [r2, #0]
 801ae8e:	b2d2      	uxtb	r2, r2
 801ae90:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 801ae92:	68fb      	ldr	r3, [r7, #12]
 801ae94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ae96:	1c5a      	adds	r2, r3, #1
 801ae98:	68fb      	ldr	r3, [r7, #12]
 801ae9a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 801ae9c:	68fb      	ldr	r3, [r7, #12]
 801ae9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801aea2:	b29b      	uxth	r3, r3
 801aea4:	3b01      	subs	r3, #1
 801aea6:	b29a      	uxth	r2, r3
 801aea8:	68fb      	ldr	r3, [r7, #12]
 801aeaa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801aeae:	2301      	movs	r3, #1
 801aeb0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801aeb2:	f7fa fe19 	bl	8015ae8 <HAL_GetTick>
 801aeb6:	4602      	mov	r2, r0
 801aeb8:	69fb      	ldr	r3, [r7, #28]
 801aeba:	1ad3      	subs	r3, r2, r3
 801aebc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801aebe:	429a      	cmp	r2, r3
 801aec0:	d803      	bhi.n	801aeca <HAL_SPI_TransmitReceive+0x3c2>
 801aec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801aec8:	d102      	bne.n	801aed0 <HAL_SPI_TransmitReceive+0x3c8>
 801aeca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aecc:	2b00      	cmp	r3, #0
 801aece:	d103      	bne.n	801aed8 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 801aed0:	2303      	movs	r3, #3
 801aed2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 801aed6:	e01c      	b.n	801af12 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801aed8:	68fb      	ldr	r3, [r7, #12]
 801aeda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801aedc:	b29b      	uxth	r3, r3
 801aede:	2b00      	cmp	r3, #0
 801aee0:	f47f af5b 	bne.w	801ad9a <HAL_SPI_TransmitReceive+0x292>
 801aee4:	68fb      	ldr	r3, [r7, #12]
 801aee6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801aeea:	b29b      	uxth	r3, r3
 801aeec:	2b00      	cmp	r3, #0
 801aeee:	f47f af54 	bne.w	801ad9a <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801aef2:	69fa      	ldr	r2, [r7, #28]
 801aef4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801aef6:	68f8      	ldr	r0, [r7, #12]
 801aef8:	f000 f9b4 	bl	801b264 <SPI_EndRxTxTransaction>
 801aefc:	4603      	mov	r3, r0
 801aefe:	2b00      	cmp	r3, #0
 801af00:	d006      	beq.n	801af10 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 801af02:	2301      	movs	r3, #1
 801af04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801af08:	68fb      	ldr	r3, [r7, #12]
 801af0a:	2220      	movs	r2, #32
 801af0c:	661a      	str	r2, [r3, #96]	; 0x60
 801af0e:	e000      	b.n	801af12 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 801af10:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801af12:	68fb      	ldr	r3, [r7, #12]
 801af14:	2201      	movs	r2, #1
 801af16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801af1a:	68fb      	ldr	r3, [r7, #12]
 801af1c:	2200      	movs	r2, #0
 801af1e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801af22:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 801af26:	4618      	mov	r0, r3
 801af28:	3728      	adds	r7, #40	; 0x28
 801af2a:	46bd      	mov	sp, r7
 801af2c:	bd80      	pop	{r7, pc}
	...

0801af30 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801af30:	b580      	push	{r7, lr}
 801af32:	b088      	sub	sp, #32
 801af34:	af00      	add	r7, sp, #0
 801af36:	60f8      	str	r0, [r7, #12]
 801af38:	60b9      	str	r1, [r7, #8]
 801af3a:	603b      	str	r3, [r7, #0]
 801af3c:	4613      	mov	r3, r2
 801af3e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801af40:	f7fa fdd2 	bl	8015ae8 <HAL_GetTick>
 801af44:	4602      	mov	r2, r0
 801af46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801af48:	1a9b      	subs	r3, r3, r2
 801af4a:	683a      	ldr	r2, [r7, #0]
 801af4c:	4413      	add	r3, r2
 801af4e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 801af50:	f7fa fdca 	bl	8015ae8 <HAL_GetTick>
 801af54:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801af56:	4b39      	ldr	r3, [pc, #228]	; (801b03c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 801af58:	681b      	ldr	r3, [r3, #0]
 801af5a:	015b      	lsls	r3, r3, #5
 801af5c:	0d1b      	lsrs	r3, r3, #20
 801af5e:	69fa      	ldr	r2, [r7, #28]
 801af60:	fb02 f303 	mul.w	r3, r2, r3
 801af64:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801af66:	e054      	b.n	801b012 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 801af68:	683b      	ldr	r3, [r7, #0]
 801af6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801af6e:	d050      	beq.n	801b012 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801af70:	f7fa fdba 	bl	8015ae8 <HAL_GetTick>
 801af74:	4602      	mov	r2, r0
 801af76:	69bb      	ldr	r3, [r7, #24]
 801af78:	1ad3      	subs	r3, r2, r3
 801af7a:	69fa      	ldr	r2, [r7, #28]
 801af7c:	429a      	cmp	r2, r3
 801af7e:	d902      	bls.n	801af86 <SPI_WaitFlagStateUntilTimeout+0x56>
 801af80:	69fb      	ldr	r3, [r7, #28]
 801af82:	2b00      	cmp	r3, #0
 801af84:	d13d      	bne.n	801b002 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801af86:	68fb      	ldr	r3, [r7, #12]
 801af88:	681b      	ldr	r3, [r3, #0]
 801af8a:	685a      	ldr	r2, [r3, #4]
 801af8c:	68fb      	ldr	r3, [r7, #12]
 801af8e:	681b      	ldr	r3, [r3, #0]
 801af90:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801af94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801af96:	68fb      	ldr	r3, [r7, #12]
 801af98:	685b      	ldr	r3, [r3, #4]
 801af9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801af9e:	d111      	bne.n	801afc4 <SPI_WaitFlagStateUntilTimeout+0x94>
 801afa0:	68fb      	ldr	r3, [r7, #12]
 801afa2:	689b      	ldr	r3, [r3, #8]
 801afa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801afa8:	d004      	beq.n	801afb4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801afaa:	68fb      	ldr	r3, [r7, #12]
 801afac:	689b      	ldr	r3, [r3, #8]
 801afae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801afb2:	d107      	bne.n	801afc4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801afb4:	68fb      	ldr	r3, [r7, #12]
 801afb6:	681b      	ldr	r3, [r3, #0]
 801afb8:	681a      	ldr	r2, [r3, #0]
 801afba:	68fb      	ldr	r3, [r7, #12]
 801afbc:	681b      	ldr	r3, [r3, #0]
 801afbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801afc2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801afc4:	68fb      	ldr	r3, [r7, #12]
 801afc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801afc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801afcc:	d10f      	bne.n	801afee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801afce:	68fb      	ldr	r3, [r7, #12]
 801afd0:	681b      	ldr	r3, [r3, #0]
 801afd2:	681a      	ldr	r2, [r3, #0]
 801afd4:	68fb      	ldr	r3, [r7, #12]
 801afd6:	681b      	ldr	r3, [r3, #0]
 801afd8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801afdc:	601a      	str	r2, [r3, #0]
 801afde:	68fb      	ldr	r3, [r7, #12]
 801afe0:	681b      	ldr	r3, [r3, #0]
 801afe2:	681a      	ldr	r2, [r3, #0]
 801afe4:	68fb      	ldr	r3, [r7, #12]
 801afe6:	681b      	ldr	r3, [r3, #0]
 801afe8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801afec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801afee:	68fb      	ldr	r3, [r7, #12]
 801aff0:	2201      	movs	r2, #1
 801aff2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801aff6:	68fb      	ldr	r3, [r7, #12]
 801aff8:	2200      	movs	r2, #0
 801affa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801affe:	2303      	movs	r3, #3
 801b000:	e017      	b.n	801b032 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801b002:	697b      	ldr	r3, [r7, #20]
 801b004:	2b00      	cmp	r3, #0
 801b006:	d101      	bne.n	801b00c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 801b008:	2300      	movs	r3, #0
 801b00a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 801b00c:	697b      	ldr	r3, [r7, #20]
 801b00e:	3b01      	subs	r3, #1
 801b010:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801b012:	68fb      	ldr	r3, [r7, #12]
 801b014:	681b      	ldr	r3, [r3, #0]
 801b016:	689a      	ldr	r2, [r3, #8]
 801b018:	68bb      	ldr	r3, [r7, #8]
 801b01a:	4013      	ands	r3, r2
 801b01c:	68ba      	ldr	r2, [r7, #8]
 801b01e:	429a      	cmp	r2, r3
 801b020:	bf0c      	ite	eq
 801b022:	2301      	moveq	r3, #1
 801b024:	2300      	movne	r3, #0
 801b026:	b2db      	uxtb	r3, r3
 801b028:	461a      	mov	r2, r3
 801b02a:	79fb      	ldrb	r3, [r7, #7]
 801b02c:	429a      	cmp	r2, r3
 801b02e:	d19b      	bne.n	801af68 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 801b030:	2300      	movs	r3, #0
}
 801b032:	4618      	mov	r0, r3
 801b034:	3720      	adds	r7, #32
 801b036:	46bd      	mov	sp, r7
 801b038:	bd80      	pop	{r7, pc}
 801b03a:	bf00      	nop
 801b03c:	2000011c 	.word	0x2000011c

0801b040 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801b040:	b580      	push	{r7, lr}
 801b042:	b08a      	sub	sp, #40	; 0x28
 801b044:	af00      	add	r7, sp, #0
 801b046:	60f8      	str	r0, [r7, #12]
 801b048:	60b9      	str	r1, [r7, #8]
 801b04a:	607a      	str	r2, [r7, #4]
 801b04c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 801b04e:	2300      	movs	r3, #0
 801b050:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 801b052:	f7fa fd49 	bl	8015ae8 <HAL_GetTick>
 801b056:	4602      	mov	r2, r0
 801b058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b05a:	1a9b      	subs	r3, r3, r2
 801b05c:	683a      	ldr	r2, [r7, #0]
 801b05e:	4413      	add	r3, r2
 801b060:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 801b062:	f7fa fd41 	bl	8015ae8 <HAL_GetTick>
 801b066:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 801b068:	68fb      	ldr	r3, [r7, #12]
 801b06a:	681b      	ldr	r3, [r3, #0]
 801b06c:	330c      	adds	r3, #12
 801b06e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 801b070:	4b3d      	ldr	r3, [pc, #244]	; (801b168 <SPI_WaitFifoStateUntilTimeout+0x128>)
 801b072:	681a      	ldr	r2, [r3, #0]
 801b074:	4613      	mov	r3, r2
 801b076:	009b      	lsls	r3, r3, #2
 801b078:	4413      	add	r3, r2
 801b07a:	00da      	lsls	r2, r3, #3
 801b07c:	1ad3      	subs	r3, r2, r3
 801b07e:	0d1b      	lsrs	r3, r3, #20
 801b080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b082:	fb02 f303 	mul.w	r3, r2, r3
 801b086:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 801b088:	e060      	b.n	801b14c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 801b08a:	68bb      	ldr	r3, [r7, #8]
 801b08c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 801b090:	d107      	bne.n	801b0a2 <SPI_WaitFifoStateUntilTimeout+0x62>
 801b092:	687b      	ldr	r3, [r7, #4]
 801b094:	2b00      	cmp	r3, #0
 801b096:	d104      	bne.n	801b0a2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 801b098:	69fb      	ldr	r3, [r7, #28]
 801b09a:	781b      	ldrb	r3, [r3, #0]
 801b09c:	b2db      	uxtb	r3, r3
 801b09e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 801b0a0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 801b0a2:	683b      	ldr	r3, [r7, #0]
 801b0a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b0a8:	d050      	beq.n	801b14c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801b0aa:	f7fa fd1d 	bl	8015ae8 <HAL_GetTick>
 801b0ae:	4602      	mov	r2, r0
 801b0b0:	6a3b      	ldr	r3, [r7, #32]
 801b0b2:	1ad3      	subs	r3, r2, r3
 801b0b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b0b6:	429a      	cmp	r2, r3
 801b0b8:	d902      	bls.n	801b0c0 <SPI_WaitFifoStateUntilTimeout+0x80>
 801b0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b0bc:	2b00      	cmp	r3, #0
 801b0be:	d13d      	bne.n	801b13c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801b0c0:	68fb      	ldr	r3, [r7, #12]
 801b0c2:	681b      	ldr	r3, [r3, #0]
 801b0c4:	685a      	ldr	r2, [r3, #4]
 801b0c6:	68fb      	ldr	r3, [r7, #12]
 801b0c8:	681b      	ldr	r3, [r3, #0]
 801b0ca:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801b0ce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801b0d0:	68fb      	ldr	r3, [r7, #12]
 801b0d2:	685b      	ldr	r3, [r3, #4]
 801b0d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801b0d8:	d111      	bne.n	801b0fe <SPI_WaitFifoStateUntilTimeout+0xbe>
 801b0da:	68fb      	ldr	r3, [r7, #12]
 801b0dc:	689b      	ldr	r3, [r3, #8]
 801b0de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801b0e2:	d004      	beq.n	801b0ee <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801b0e4:	68fb      	ldr	r3, [r7, #12]
 801b0e6:	689b      	ldr	r3, [r3, #8]
 801b0e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801b0ec:	d107      	bne.n	801b0fe <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801b0ee:	68fb      	ldr	r3, [r7, #12]
 801b0f0:	681b      	ldr	r3, [r3, #0]
 801b0f2:	681a      	ldr	r2, [r3, #0]
 801b0f4:	68fb      	ldr	r3, [r7, #12]
 801b0f6:	681b      	ldr	r3, [r3, #0]
 801b0f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801b0fc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801b0fe:	68fb      	ldr	r3, [r7, #12]
 801b100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b102:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801b106:	d10f      	bne.n	801b128 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 801b108:	68fb      	ldr	r3, [r7, #12]
 801b10a:	681b      	ldr	r3, [r3, #0]
 801b10c:	681a      	ldr	r2, [r3, #0]
 801b10e:	68fb      	ldr	r3, [r7, #12]
 801b110:	681b      	ldr	r3, [r3, #0]
 801b112:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801b116:	601a      	str	r2, [r3, #0]
 801b118:	68fb      	ldr	r3, [r7, #12]
 801b11a:	681b      	ldr	r3, [r3, #0]
 801b11c:	681a      	ldr	r2, [r3, #0]
 801b11e:	68fb      	ldr	r3, [r7, #12]
 801b120:	681b      	ldr	r3, [r3, #0]
 801b122:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801b126:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801b128:	68fb      	ldr	r3, [r7, #12]
 801b12a:	2201      	movs	r2, #1
 801b12c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801b130:	68fb      	ldr	r3, [r7, #12]
 801b132:	2200      	movs	r2, #0
 801b134:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801b138:	2303      	movs	r3, #3
 801b13a:	e010      	b.n	801b15e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801b13c:	69bb      	ldr	r3, [r7, #24]
 801b13e:	2b00      	cmp	r3, #0
 801b140:	d101      	bne.n	801b146 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 801b142:	2300      	movs	r3, #0
 801b144:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 801b146:	69bb      	ldr	r3, [r7, #24]
 801b148:	3b01      	subs	r3, #1
 801b14a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 801b14c:	68fb      	ldr	r3, [r7, #12]
 801b14e:	681b      	ldr	r3, [r3, #0]
 801b150:	689a      	ldr	r2, [r3, #8]
 801b152:	68bb      	ldr	r3, [r7, #8]
 801b154:	4013      	ands	r3, r2
 801b156:	687a      	ldr	r2, [r7, #4]
 801b158:	429a      	cmp	r2, r3
 801b15a:	d196      	bne.n	801b08a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 801b15c:	2300      	movs	r3, #0
}
 801b15e:	4618      	mov	r0, r3
 801b160:	3728      	adds	r7, #40	; 0x28
 801b162:	46bd      	mov	sp, r7
 801b164:	bd80      	pop	{r7, pc}
 801b166:	bf00      	nop
 801b168:	2000011c 	.word	0x2000011c

0801b16c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 801b16c:	b580      	push	{r7, lr}
 801b16e:	b088      	sub	sp, #32
 801b170:	af02      	add	r7, sp, #8
 801b172:	60f8      	str	r0, [r7, #12]
 801b174:	60b9      	str	r1, [r7, #8]
 801b176:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801b178:	68fb      	ldr	r3, [r7, #12]
 801b17a:	685b      	ldr	r3, [r3, #4]
 801b17c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801b180:	d111      	bne.n	801b1a6 <SPI_EndRxTransaction+0x3a>
 801b182:	68fb      	ldr	r3, [r7, #12]
 801b184:	689b      	ldr	r3, [r3, #8]
 801b186:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801b18a:	d004      	beq.n	801b196 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801b18c:	68fb      	ldr	r3, [r7, #12]
 801b18e:	689b      	ldr	r3, [r3, #8]
 801b190:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801b194:	d107      	bne.n	801b1a6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801b196:	68fb      	ldr	r3, [r7, #12]
 801b198:	681b      	ldr	r3, [r3, #0]
 801b19a:	681a      	ldr	r2, [r3, #0]
 801b19c:	68fb      	ldr	r3, [r7, #12]
 801b19e:	681b      	ldr	r3, [r3, #0]
 801b1a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801b1a4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801b1a6:	68fb      	ldr	r3, [r7, #12]
 801b1a8:	685b      	ldr	r3, [r3, #4]
 801b1aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801b1ae:	d112      	bne.n	801b1d6 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801b1b0:	687b      	ldr	r3, [r7, #4]
 801b1b2:	9300      	str	r3, [sp, #0]
 801b1b4:	68bb      	ldr	r3, [r7, #8]
 801b1b6:	2200      	movs	r2, #0
 801b1b8:	2180      	movs	r1, #128	; 0x80
 801b1ba:	68f8      	ldr	r0, [r7, #12]
 801b1bc:	f7ff feb8 	bl	801af30 <SPI_WaitFlagStateUntilTimeout>
 801b1c0:	4603      	mov	r3, r0
 801b1c2:	2b00      	cmp	r3, #0
 801b1c4:	d021      	beq.n	801b20a <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801b1c6:	68fb      	ldr	r3, [r7, #12]
 801b1c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b1ca:	f043 0220 	orr.w	r2, r3, #32
 801b1ce:	68fb      	ldr	r3, [r7, #12]
 801b1d0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 801b1d2:	2303      	movs	r3, #3
 801b1d4:	e03d      	b.n	801b252 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801b1d6:	4b21      	ldr	r3, [pc, #132]	; (801b25c <SPI_EndRxTransaction+0xf0>)
 801b1d8:	681b      	ldr	r3, [r3, #0]
 801b1da:	4a21      	ldr	r2, [pc, #132]	; (801b260 <SPI_EndRxTransaction+0xf4>)
 801b1dc:	fba2 2303 	umull	r2, r3, r2, r3
 801b1e0:	0d5b      	lsrs	r3, r3, #21
 801b1e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801b1e6:	fb02 f303 	mul.w	r3, r2, r3
 801b1ea:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 801b1ec:	697b      	ldr	r3, [r7, #20]
 801b1ee:	2b00      	cmp	r3, #0
 801b1f0:	d00a      	beq.n	801b208 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 801b1f2:	697b      	ldr	r3, [r7, #20]
 801b1f4:	3b01      	subs	r3, #1
 801b1f6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801b1f8:	68fb      	ldr	r3, [r7, #12]
 801b1fa:	681b      	ldr	r3, [r3, #0]
 801b1fc:	689b      	ldr	r3, [r3, #8]
 801b1fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b202:	2b80      	cmp	r3, #128	; 0x80
 801b204:	d0f2      	beq.n	801b1ec <SPI_EndRxTransaction+0x80>
 801b206:	e000      	b.n	801b20a <SPI_EndRxTransaction+0x9e>
        break;
 801b208:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801b20a:	68fb      	ldr	r3, [r7, #12]
 801b20c:	685b      	ldr	r3, [r3, #4]
 801b20e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801b212:	d11d      	bne.n	801b250 <SPI_EndRxTransaction+0xe4>
 801b214:	68fb      	ldr	r3, [r7, #12]
 801b216:	689b      	ldr	r3, [r3, #8]
 801b218:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801b21c:	d004      	beq.n	801b228 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801b21e:	68fb      	ldr	r3, [r7, #12]
 801b220:	689b      	ldr	r3, [r3, #8]
 801b222:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801b226:	d113      	bne.n	801b250 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801b228:	687b      	ldr	r3, [r7, #4]
 801b22a:	9300      	str	r3, [sp, #0]
 801b22c:	68bb      	ldr	r3, [r7, #8]
 801b22e:	2200      	movs	r2, #0
 801b230:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801b234:	68f8      	ldr	r0, [r7, #12]
 801b236:	f7ff ff03 	bl	801b040 <SPI_WaitFifoStateUntilTimeout>
 801b23a:	4603      	mov	r3, r0
 801b23c:	2b00      	cmp	r3, #0
 801b23e:	d007      	beq.n	801b250 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801b240:	68fb      	ldr	r3, [r7, #12]
 801b242:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b244:	f043 0220 	orr.w	r2, r3, #32
 801b248:	68fb      	ldr	r3, [r7, #12]
 801b24a:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 801b24c:	2303      	movs	r3, #3
 801b24e:	e000      	b.n	801b252 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 801b250:	2300      	movs	r3, #0
}
 801b252:	4618      	mov	r0, r3
 801b254:	3718      	adds	r7, #24
 801b256:	46bd      	mov	sp, r7
 801b258:	bd80      	pop	{r7, pc}
 801b25a:	bf00      	nop
 801b25c:	2000011c 	.word	0x2000011c
 801b260:	165e9f81 	.word	0x165e9f81

0801b264 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801b264:	b580      	push	{r7, lr}
 801b266:	b088      	sub	sp, #32
 801b268:	af02      	add	r7, sp, #8
 801b26a:	60f8      	str	r0, [r7, #12]
 801b26c:	60b9      	str	r1, [r7, #8]
 801b26e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801b270:	687b      	ldr	r3, [r7, #4]
 801b272:	9300      	str	r3, [sp, #0]
 801b274:	68bb      	ldr	r3, [r7, #8]
 801b276:	2200      	movs	r2, #0
 801b278:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 801b27c:	68f8      	ldr	r0, [r7, #12]
 801b27e:	f7ff fedf 	bl	801b040 <SPI_WaitFifoStateUntilTimeout>
 801b282:	4603      	mov	r3, r0
 801b284:	2b00      	cmp	r3, #0
 801b286:	d007      	beq.n	801b298 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801b288:	68fb      	ldr	r3, [r7, #12]
 801b28a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b28c:	f043 0220 	orr.w	r2, r3, #32
 801b290:	68fb      	ldr	r3, [r7, #12]
 801b292:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801b294:	2303      	movs	r3, #3
 801b296:	e046      	b.n	801b326 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801b298:	4b25      	ldr	r3, [pc, #148]	; (801b330 <SPI_EndRxTxTransaction+0xcc>)
 801b29a:	681b      	ldr	r3, [r3, #0]
 801b29c:	4a25      	ldr	r2, [pc, #148]	; (801b334 <SPI_EndRxTxTransaction+0xd0>)
 801b29e:	fba2 2303 	umull	r2, r3, r2, r3
 801b2a2:	0d5b      	lsrs	r3, r3, #21
 801b2a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801b2a8:	fb02 f303 	mul.w	r3, r2, r3
 801b2ac:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801b2ae:	68fb      	ldr	r3, [r7, #12]
 801b2b0:	685b      	ldr	r3, [r3, #4]
 801b2b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801b2b6:	d112      	bne.n	801b2de <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801b2b8:	687b      	ldr	r3, [r7, #4]
 801b2ba:	9300      	str	r3, [sp, #0]
 801b2bc:	68bb      	ldr	r3, [r7, #8]
 801b2be:	2200      	movs	r2, #0
 801b2c0:	2180      	movs	r1, #128	; 0x80
 801b2c2:	68f8      	ldr	r0, [r7, #12]
 801b2c4:	f7ff fe34 	bl	801af30 <SPI_WaitFlagStateUntilTimeout>
 801b2c8:	4603      	mov	r3, r0
 801b2ca:	2b00      	cmp	r3, #0
 801b2cc:	d016      	beq.n	801b2fc <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801b2ce:	68fb      	ldr	r3, [r7, #12]
 801b2d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b2d2:	f043 0220 	orr.w	r2, r3, #32
 801b2d6:	68fb      	ldr	r3, [r7, #12]
 801b2d8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 801b2da:	2303      	movs	r3, #3
 801b2dc:	e023      	b.n	801b326 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 801b2de:	697b      	ldr	r3, [r7, #20]
 801b2e0:	2b00      	cmp	r3, #0
 801b2e2:	d00a      	beq.n	801b2fa <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 801b2e4:	697b      	ldr	r3, [r7, #20]
 801b2e6:	3b01      	subs	r3, #1
 801b2e8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801b2ea:	68fb      	ldr	r3, [r7, #12]
 801b2ec:	681b      	ldr	r3, [r3, #0]
 801b2ee:	689b      	ldr	r3, [r3, #8]
 801b2f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b2f4:	2b80      	cmp	r3, #128	; 0x80
 801b2f6:	d0f2      	beq.n	801b2de <SPI_EndRxTxTransaction+0x7a>
 801b2f8:	e000      	b.n	801b2fc <SPI_EndRxTxTransaction+0x98>
        break;
 801b2fa:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801b2fc:	687b      	ldr	r3, [r7, #4]
 801b2fe:	9300      	str	r3, [sp, #0]
 801b300:	68bb      	ldr	r3, [r7, #8]
 801b302:	2200      	movs	r2, #0
 801b304:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801b308:	68f8      	ldr	r0, [r7, #12]
 801b30a:	f7ff fe99 	bl	801b040 <SPI_WaitFifoStateUntilTimeout>
 801b30e:	4603      	mov	r3, r0
 801b310:	2b00      	cmp	r3, #0
 801b312:	d007      	beq.n	801b324 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801b314:	68fb      	ldr	r3, [r7, #12]
 801b316:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b318:	f043 0220 	orr.w	r2, r3, #32
 801b31c:	68fb      	ldr	r3, [r7, #12]
 801b31e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801b320:	2303      	movs	r3, #3
 801b322:	e000      	b.n	801b326 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 801b324:	2300      	movs	r3, #0
}
 801b326:	4618      	mov	r0, r3
 801b328:	3718      	adds	r7, #24
 801b32a:	46bd      	mov	sp, r7
 801b32c:	bd80      	pop	{r7, pc}
 801b32e:	bf00      	nop
 801b330:	2000011c 	.word	0x2000011c
 801b334:	165e9f81 	.word	0x165e9f81

0801b338 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801b338:	b580      	push	{r7, lr}
 801b33a:	b082      	sub	sp, #8
 801b33c:	af00      	add	r7, sp, #0
 801b33e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801b340:	687b      	ldr	r3, [r7, #4]
 801b342:	681b      	ldr	r3, [r3, #0]
 801b344:	691b      	ldr	r3, [r3, #16]
 801b346:	f003 0302 	and.w	r3, r3, #2
 801b34a:	2b02      	cmp	r3, #2
 801b34c:	d128      	bne.n	801b3a0 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801b34e:	687b      	ldr	r3, [r7, #4]
 801b350:	681b      	ldr	r3, [r3, #0]
 801b352:	68db      	ldr	r3, [r3, #12]
 801b354:	f003 0302 	and.w	r3, r3, #2
 801b358:	2b02      	cmp	r3, #2
 801b35a:	d121      	bne.n	801b3a0 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801b35c:	687b      	ldr	r3, [r7, #4]
 801b35e:	681b      	ldr	r3, [r3, #0]
 801b360:	f06f 0202 	mvn.w	r2, #2
 801b364:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801b366:	687b      	ldr	r3, [r7, #4]
 801b368:	2201      	movs	r2, #1
 801b36a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801b36c:	687b      	ldr	r3, [r7, #4]
 801b36e:	681b      	ldr	r3, [r3, #0]
 801b370:	699b      	ldr	r3, [r3, #24]
 801b372:	f003 0303 	and.w	r3, r3, #3
 801b376:	2b00      	cmp	r3, #0
 801b378:	d005      	beq.n	801b386 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 801b37a:	687b      	ldr	r3, [r7, #4]
 801b37c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b380:	6878      	ldr	r0, [r7, #4]
 801b382:	4798      	blx	r3
 801b384:	e009      	b.n	801b39a <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 801b386:	687b      	ldr	r3, [r7, #4]
 801b388:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801b38c:	6878      	ldr	r0, [r7, #4]
 801b38e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 801b390:	687b      	ldr	r3, [r7, #4]
 801b392:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801b396:	6878      	ldr	r0, [r7, #4]
 801b398:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801b39a:	687b      	ldr	r3, [r7, #4]
 801b39c:	2200      	movs	r2, #0
 801b39e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801b3a0:	687b      	ldr	r3, [r7, #4]
 801b3a2:	681b      	ldr	r3, [r3, #0]
 801b3a4:	691b      	ldr	r3, [r3, #16]
 801b3a6:	f003 0304 	and.w	r3, r3, #4
 801b3aa:	2b04      	cmp	r3, #4
 801b3ac:	d128      	bne.n	801b400 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801b3ae:	687b      	ldr	r3, [r7, #4]
 801b3b0:	681b      	ldr	r3, [r3, #0]
 801b3b2:	68db      	ldr	r3, [r3, #12]
 801b3b4:	f003 0304 	and.w	r3, r3, #4
 801b3b8:	2b04      	cmp	r3, #4
 801b3ba:	d121      	bne.n	801b400 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801b3bc:	687b      	ldr	r3, [r7, #4]
 801b3be:	681b      	ldr	r3, [r3, #0]
 801b3c0:	f06f 0204 	mvn.w	r2, #4
 801b3c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801b3c6:	687b      	ldr	r3, [r7, #4]
 801b3c8:	2202      	movs	r2, #2
 801b3ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801b3cc:	687b      	ldr	r3, [r7, #4]
 801b3ce:	681b      	ldr	r3, [r3, #0]
 801b3d0:	699b      	ldr	r3, [r3, #24]
 801b3d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801b3d6:	2b00      	cmp	r3, #0
 801b3d8:	d005      	beq.n	801b3e6 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 801b3da:	687b      	ldr	r3, [r7, #4]
 801b3dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b3e0:	6878      	ldr	r0, [r7, #4]
 801b3e2:	4798      	blx	r3
 801b3e4:	e009      	b.n	801b3fa <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 801b3e6:	687b      	ldr	r3, [r7, #4]
 801b3e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801b3ec:	6878      	ldr	r0, [r7, #4]
 801b3ee:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 801b3f0:	687b      	ldr	r3, [r7, #4]
 801b3f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801b3f6:	6878      	ldr	r0, [r7, #4]
 801b3f8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801b3fa:	687b      	ldr	r3, [r7, #4]
 801b3fc:	2200      	movs	r2, #0
 801b3fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801b400:	687b      	ldr	r3, [r7, #4]
 801b402:	681b      	ldr	r3, [r3, #0]
 801b404:	691b      	ldr	r3, [r3, #16]
 801b406:	f003 0308 	and.w	r3, r3, #8
 801b40a:	2b08      	cmp	r3, #8
 801b40c:	d128      	bne.n	801b460 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801b40e:	687b      	ldr	r3, [r7, #4]
 801b410:	681b      	ldr	r3, [r3, #0]
 801b412:	68db      	ldr	r3, [r3, #12]
 801b414:	f003 0308 	and.w	r3, r3, #8
 801b418:	2b08      	cmp	r3, #8
 801b41a:	d121      	bne.n	801b460 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801b41c:	687b      	ldr	r3, [r7, #4]
 801b41e:	681b      	ldr	r3, [r3, #0]
 801b420:	f06f 0208 	mvn.w	r2, #8
 801b424:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801b426:	687b      	ldr	r3, [r7, #4]
 801b428:	2204      	movs	r2, #4
 801b42a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801b42c:	687b      	ldr	r3, [r7, #4]
 801b42e:	681b      	ldr	r3, [r3, #0]
 801b430:	69db      	ldr	r3, [r3, #28]
 801b432:	f003 0303 	and.w	r3, r3, #3
 801b436:	2b00      	cmp	r3, #0
 801b438:	d005      	beq.n	801b446 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 801b43a:	687b      	ldr	r3, [r7, #4]
 801b43c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b440:	6878      	ldr	r0, [r7, #4]
 801b442:	4798      	blx	r3
 801b444:	e009      	b.n	801b45a <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 801b446:	687b      	ldr	r3, [r7, #4]
 801b448:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801b44c:	6878      	ldr	r0, [r7, #4]
 801b44e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 801b450:	687b      	ldr	r3, [r7, #4]
 801b452:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801b456:	6878      	ldr	r0, [r7, #4]
 801b458:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801b45a:	687b      	ldr	r3, [r7, #4]
 801b45c:	2200      	movs	r2, #0
 801b45e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801b460:	687b      	ldr	r3, [r7, #4]
 801b462:	681b      	ldr	r3, [r3, #0]
 801b464:	691b      	ldr	r3, [r3, #16]
 801b466:	f003 0310 	and.w	r3, r3, #16
 801b46a:	2b10      	cmp	r3, #16
 801b46c:	d128      	bne.n	801b4c0 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801b46e:	687b      	ldr	r3, [r7, #4]
 801b470:	681b      	ldr	r3, [r3, #0]
 801b472:	68db      	ldr	r3, [r3, #12]
 801b474:	f003 0310 	and.w	r3, r3, #16
 801b478:	2b10      	cmp	r3, #16
 801b47a:	d121      	bne.n	801b4c0 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801b47c:	687b      	ldr	r3, [r7, #4]
 801b47e:	681b      	ldr	r3, [r3, #0]
 801b480:	f06f 0210 	mvn.w	r2, #16
 801b484:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801b486:	687b      	ldr	r3, [r7, #4]
 801b488:	2208      	movs	r2, #8
 801b48a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801b48c:	687b      	ldr	r3, [r7, #4]
 801b48e:	681b      	ldr	r3, [r3, #0]
 801b490:	69db      	ldr	r3, [r3, #28]
 801b492:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801b496:	2b00      	cmp	r3, #0
 801b498:	d005      	beq.n	801b4a6 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 801b49a:	687b      	ldr	r3, [r7, #4]
 801b49c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b4a0:	6878      	ldr	r0, [r7, #4]
 801b4a2:	4798      	blx	r3
 801b4a4:	e009      	b.n	801b4ba <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 801b4a6:	687b      	ldr	r3, [r7, #4]
 801b4a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801b4ac:	6878      	ldr	r0, [r7, #4]
 801b4ae:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 801b4b0:	687b      	ldr	r3, [r7, #4]
 801b4b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801b4b6:	6878      	ldr	r0, [r7, #4]
 801b4b8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801b4ba:	687b      	ldr	r3, [r7, #4]
 801b4bc:	2200      	movs	r2, #0
 801b4be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801b4c0:	687b      	ldr	r3, [r7, #4]
 801b4c2:	681b      	ldr	r3, [r3, #0]
 801b4c4:	691b      	ldr	r3, [r3, #16]
 801b4c6:	f003 0301 	and.w	r3, r3, #1
 801b4ca:	2b01      	cmp	r3, #1
 801b4cc:	d110      	bne.n	801b4f0 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801b4ce:	687b      	ldr	r3, [r7, #4]
 801b4d0:	681b      	ldr	r3, [r3, #0]
 801b4d2:	68db      	ldr	r3, [r3, #12]
 801b4d4:	f003 0301 	and.w	r3, r3, #1
 801b4d8:	2b01      	cmp	r3, #1
 801b4da:	d109      	bne.n	801b4f0 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801b4dc:	687b      	ldr	r3, [r7, #4]
 801b4de:	681b      	ldr	r3, [r3, #0]
 801b4e0:	f06f 0201 	mvn.w	r2, #1
 801b4e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 801b4e6:	687b      	ldr	r3, [r7, #4]
 801b4e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b4ec:	6878      	ldr	r0, [r7, #4]
 801b4ee:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801b4f0:	687b      	ldr	r3, [r7, #4]
 801b4f2:	681b      	ldr	r3, [r3, #0]
 801b4f4:	691b      	ldr	r3, [r3, #16]
 801b4f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b4fa:	2b80      	cmp	r3, #128	; 0x80
 801b4fc:	d110      	bne.n	801b520 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801b4fe:	687b      	ldr	r3, [r7, #4]
 801b500:	681b      	ldr	r3, [r3, #0]
 801b502:	68db      	ldr	r3, [r3, #12]
 801b504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b508:	2b80      	cmp	r3, #128	; 0x80
 801b50a:	d109      	bne.n	801b520 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801b50c:	687b      	ldr	r3, [r7, #4]
 801b50e:	681b      	ldr	r3, [r3, #0]
 801b510:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801b514:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 801b516:	687b      	ldr	r3, [r7, #4]
 801b518:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801b51c:	6878      	ldr	r0, [r7, #4]
 801b51e:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801b520:	687b      	ldr	r3, [r7, #4]
 801b522:	681b      	ldr	r3, [r3, #0]
 801b524:	691b      	ldr	r3, [r3, #16]
 801b526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b52a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b52e:	d110      	bne.n	801b552 <HAL_TIM_IRQHandler+0x21a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801b530:	687b      	ldr	r3, [r7, #4]
 801b532:	681b      	ldr	r3, [r3, #0]
 801b534:	68db      	ldr	r3, [r3, #12]
 801b536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b53a:	2b80      	cmp	r3, #128	; 0x80
 801b53c:	d109      	bne.n	801b552 <HAL_TIM_IRQHandler+0x21a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801b53e:	687b      	ldr	r3, [r7, #4]
 801b540:	681b      	ldr	r3, [r3, #0]
 801b542:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801b546:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 801b548:	687b      	ldr	r3, [r7, #4]
 801b54a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801b54e:	6878      	ldr	r0, [r7, #4]
 801b550:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801b552:	687b      	ldr	r3, [r7, #4]
 801b554:	681b      	ldr	r3, [r3, #0]
 801b556:	691b      	ldr	r3, [r3, #16]
 801b558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b55c:	2b40      	cmp	r3, #64	; 0x40
 801b55e:	d110      	bne.n	801b582 <HAL_TIM_IRQHandler+0x24a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801b560:	687b      	ldr	r3, [r7, #4]
 801b562:	681b      	ldr	r3, [r3, #0]
 801b564:	68db      	ldr	r3, [r3, #12]
 801b566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b56a:	2b40      	cmp	r3, #64	; 0x40
 801b56c:	d109      	bne.n	801b582 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801b56e:	687b      	ldr	r3, [r7, #4]
 801b570:	681b      	ldr	r3, [r3, #0]
 801b572:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801b576:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 801b578:	687b      	ldr	r3, [r7, #4]
 801b57a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b57e:	6878      	ldr	r0, [r7, #4]
 801b580:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801b582:	687b      	ldr	r3, [r7, #4]
 801b584:	681b      	ldr	r3, [r3, #0]
 801b586:	691b      	ldr	r3, [r3, #16]
 801b588:	f003 0320 	and.w	r3, r3, #32
 801b58c:	2b20      	cmp	r3, #32
 801b58e:	d110      	bne.n	801b5b2 <HAL_TIM_IRQHandler+0x27a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801b590:	687b      	ldr	r3, [r7, #4]
 801b592:	681b      	ldr	r3, [r3, #0]
 801b594:	68db      	ldr	r3, [r3, #12]
 801b596:	f003 0320 	and.w	r3, r3, #32
 801b59a:	2b20      	cmp	r3, #32
 801b59c:	d109      	bne.n	801b5b2 <HAL_TIM_IRQHandler+0x27a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801b59e:	687b      	ldr	r3, [r7, #4]
 801b5a0:	681b      	ldr	r3, [r3, #0]
 801b5a2:	f06f 0220 	mvn.w	r2, #32
 801b5a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 801b5a8:	687b      	ldr	r3, [r7, #4]
 801b5aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801b5ae:	6878      	ldr	r0, [r7, #4]
 801b5b0:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801b5b2:	bf00      	nop
 801b5b4:	3708      	adds	r7, #8
 801b5b6:	46bd      	mov	sp, r7
 801b5b8:	bd80      	pop	{r7, pc}
	...

0801b5bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801b5bc:	b580      	push	{r7, lr}
 801b5be:	b082      	sub	sp, #8
 801b5c0:	af00      	add	r7, sp, #0
 801b5c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801b5c4:	687b      	ldr	r3, [r7, #4]
 801b5c6:	2b00      	cmp	r3, #0
 801b5c8:	d101      	bne.n	801b5ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801b5ca:	2301      	movs	r3, #1
 801b5cc:	e04e      	b.n	801b66c <HAL_UART_Init+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801b5ce:	687b      	ldr	r3, [r7, #4]
 801b5d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b5d2:	2b00      	cmp	r3, #0
 801b5d4:	d114      	bne.n	801b600 <HAL_UART_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801b5d6:	687b      	ldr	r3, [r7, #4]
 801b5d8:	2200      	movs	r2, #0
 801b5da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 801b5de:	6878      	ldr	r0, [r7, #4]
 801b5e0:	f000 fc1c 	bl	801be1c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 801b5e4:	687b      	ldr	r3, [r7, #4]
 801b5e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801b5ea:	2b00      	cmp	r3, #0
 801b5ec:	d103      	bne.n	801b5f6 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 801b5ee:	687b      	ldr	r3, [r7, #4]
 801b5f0:	4a20      	ldr	r2, [pc, #128]	; (801b674 <HAL_UART_Init+0xb8>)
 801b5f2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 801b5f6:	687b      	ldr	r3, [r7, #4]
 801b5f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801b5fc:	6878      	ldr	r0, [r7, #4]
 801b5fe:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801b600:	687b      	ldr	r3, [r7, #4]
 801b602:	2224      	movs	r2, #36	; 0x24
 801b604:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 801b606:	687b      	ldr	r3, [r7, #4]
 801b608:	681b      	ldr	r3, [r3, #0]
 801b60a:	681a      	ldr	r2, [r3, #0]
 801b60c:	687b      	ldr	r3, [r7, #4]
 801b60e:	681b      	ldr	r3, [r3, #0]
 801b610:	f022 0201 	bic.w	r2, r2, #1
 801b614:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801b616:	6878      	ldr	r0, [r7, #4]
 801b618:	f000 fc46 	bl	801bea8 <UART_SetConfig>
 801b61c:	4603      	mov	r3, r0
 801b61e:	2b01      	cmp	r3, #1
 801b620:	d101      	bne.n	801b626 <HAL_UART_Init+0x6a>
  {
    return HAL_ERROR;
 801b622:	2301      	movs	r3, #1
 801b624:	e022      	b.n	801b66c <HAL_UART_Init+0xb0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801b626:	687b      	ldr	r3, [r7, #4]
 801b628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b62a:	2b00      	cmp	r3, #0
 801b62c:	d002      	beq.n	801b634 <HAL_UART_Init+0x78>
  {
    UART_AdvFeatureConfig(huart);
 801b62e:	6878      	ldr	r0, [r7, #4]
 801b630:	f000 fe9e 	bl	801c370 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801b634:	687b      	ldr	r3, [r7, #4]
 801b636:	681b      	ldr	r3, [r3, #0]
 801b638:	685a      	ldr	r2, [r3, #4]
 801b63a:	687b      	ldr	r3, [r7, #4]
 801b63c:	681b      	ldr	r3, [r3, #0]
 801b63e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801b642:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801b644:	687b      	ldr	r3, [r7, #4]
 801b646:	681b      	ldr	r3, [r3, #0]
 801b648:	689a      	ldr	r2, [r3, #8]
 801b64a:	687b      	ldr	r3, [r7, #4]
 801b64c:	681b      	ldr	r3, [r3, #0]
 801b64e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801b652:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801b654:	687b      	ldr	r3, [r7, #4]
 801b656:	681b      	ldr	r3, [r3, #0]
 801b658:	681a      	ldr	r2, [r3, #0]
 801b65a:	687b      	ldr	r3, [r7, #4]
 801b65c:	681b      	ldr	r3, [r3, #0]
 801b65e:	f042 0201 	orr.w	r2, r2, #1
 801b662:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801b664:	6878      	ldr	r0, [r7, #4]
 801b666:	f000 ff25 	bl	801c4b4 <UART_CheckIdleState>
 801b66a:	4603      	mov	r3, r0
}
 801b66c:	4618      	mov	r0, r3
 801b66e:	3708      	adds	r7, #8
 801b670:	46bd      	mov	sp, r7
 801b672:	bd80      	pop	{r7, pc}
 801b674:	08014ee1 	.word	0x08014ee1

0801b678 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801b678:	b580      	push	{r7, lr}
 801b67a:	b08a      	sub	sp, #40	; 0x28
 801b67c:	af02      	add	r7, sp, #8
 801b67e:	60f8      	str	r0, [r7, #12]
 801b680:	60b9      	str	r1, [r7, #8]
 801b682:	603b      	str	r3, [r7, #0]
 801b684:	4613      	mov	r3, r2
 801b686:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801b688:	68fb      	ldr	r3, [r7, #12]
 801b68a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b68c:	2b20      	cmp	r3, #32
 801b68e:	d171      	bne.n	801b774 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 801b690:	68bb      	ldr	r3, [r7, #8]
 801b692:	2b00      	cmp	r3, #0
 801b694:	d002      	beq.n	801b69c <HAL_UART_Transmit+0x24>
 801b696:	88fb      	ldrh	r3, [r7, #6]
 801b698:	2b00      	cmp	r3, #0
 801b69a:	d101      	bne.n	801b6a0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 801b69c:	2301      	movs	r3, #1
 801b69e:	e06a      	b.n	801b776 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801b6a0:	68fb      	ldr	r3, [r7, #12]
 801b6a2:	2200      	movs	r2, #0
 801b6a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801b6a8:	68fb      	ldr	r3, [r7, #12]
 801b6aa:	2221      	movs	r2, #33	; 0x21
 801b6ac:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801b6ae:	f7fa fa1b 	bl	8015ae8 <HAL_GetTick>
 801b6b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801b6b4:	68fb      	ldr	r3, [r7, #12]
 801b6b6:	88fa      	ldrh	r2, [r7, #6]
 801b6b8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 801b6bc:	68fb      	ldr	r3, [r7, #12]
 801b6be:	88fa      	ldrh	r2, [r7, #6]
 801b6c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801b6c4:	68fb      	ldr	r3, [r7, #12]
 801b6c6:	689b      	ldr	r3, [r3, #8]
 801b6c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801b6cc:	d108      	bne.n	801b6e0 <HAL_UART_Transmit+0x68>
 801b6ce:	68fb      	ldr	r3, [r7, #12]
 801b6d0:	691b      	ldr	r3, [r3, #16]
 801b6d2:	2b00      	cmp	r3, #0
 801b6d4:	d104      	bne.n	801b6e0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 801b6d6:	2300      	movs	r3, #0
 801b6d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801b6da:	68bb      	ldr	r3, [r7, #8]
 801b6dc:	61bb      	str	r3, [r7, #24]
 801b6de:	e003      	b.n	801b6e8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 801b6e0:	68bb      	ldr	r3, [r7, #8]
 801b6e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801b6e4:	2300      	movs	r3, #0
 801b6e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801b6e8:	e02c      	b.n	801b744 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801b6ea:	683b      	ldr	r3, [r7, #0]
 801b6ec:	9300      	str	r3, [sp, #0]
 801b6ee:	697b      	ldr	r3, [r7, #20]
 801b6f0:	2200      	movs	r2, #0
 801b6f2:	2180      	movs	r1, #128	; 0x80
 801b6f4:	68f8      	ldr	r0, [r7, #12]
 801b6f6:	f000 ff2a 	bl	801c54e <UART_WaitOnFlagUntilTimeout>
 801b6fa:	4603      	mov	r3, r0
 801b6fc:	2b00      	cmp	r3, #0
 801b6fe:	d001      	beq.n	801b704 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 801b700:	2303      	movs	r3, #3
 801b702:	e038      	b.n	801b776 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 801b704:	69fb      	ldr	r3, [r7, #28]
 801b706:	2b00      	cmp	r3, #0
 801b708:	d10b      	bne.n	801b722 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801b70a:	69bb      	ldr	r3, [r7, #24]
 801b70c:	881b      	ldrh	r3, [r3, #0]
 801b70e:	461a      	mov	r2, r3
 801b710:	68fb      	ldr	r3, [r7, #12]
 801b712:	681b      	ldr	r3, [r3, #0]
 801b714:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801b718:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801b71a:	69bb      	ldr	r3, [r7, #24]
 801b71c:	3302      	adds	r3, #2
 801b71e:	61bb      	str	r3, [r7, #24]
 801b720:	e007      	b.n	801b732 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801b722:	69fb      	ldr	r3, [r7, #28]
 801b724:	781a      	ldrb	r2, [r3, #0]
 801b726:	68fb      	ldr	r3, [r7, #12]
 801b728:	681b      	ldr	r3, [r3, #0]
 801b72a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801b72c:	69fb      	ldr	r3, [r7, #28]
 801b72e:	3301      	adds	r3, #1
 801b730:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801b732:	68fb      	ldr	r3, [r7, #12]
 801b734:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 801b738:	b29b      	uxth	r3, r3
 801b73a:	3b01      	subs	r3, #1
 801b73c:	b29a      	uxth	r2, r3
 801b73e:	68fb      	ldr	r3, [r7, #12]
 801b740:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 801b744:	68fb      	ldr	r3, [r7, #12]
 801b746:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 801b74a:	b29b      	uxth	r3, r3
 801b74c:	2b00      	cmp	r3, #0
 801b74e:	d1cc      	bne.n	801b6ea <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801b750:	683b      	ldr	r3, [r7, #0]
 801b752:	9300      	str	r3, [sp, #0]
 801b754:	697b      	ldr	r3, [r7, #20]
 801b756:	2200      	movs	r2, #0
 801b758:	2140      	movs	r1, #64	; 0x40
 801b75a:	68f8      	ldr	r0, [r7, #12]
 801b75c:	f000 fef7 	bl	801c54e <UART_WaitOnFlagUntilTimeout>
 801b760:	4603      	mov	r3, r0
 801b762:	2b00      	cmp	r3, #0
 801b764:	d001      	beq.n	801b76a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 801b766:	2303      	movs	r3, #3
 801b768:	e005      	b.n	801b776 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801b76a:	68fb      	ldr	r3, [r7, #12]
 801b76c:	2220      	movs	r2, #32
 801b76e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 801b770:	2300      	movs	r3, #0
 801b772:	e000      	b.n	801b776 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 801b774:	2302      	movs	r3, #2
  }
}
 801b776:	4618      	mov	r0, r3
 801b778:	3720      	adds	r7, #32
 801b77a:	46bd      	mov	sp, r7
 801b77c:	bd80      	pop	{r7, pc}
	...

0801b780 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801b780:	b580      	push	{r7, lr}
 801b782:	b0ba      	sub	sp, #232	; 0xe8
 801b784:	af00      	add	r7, sp, #0
 801b786:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801b788:	687b      	ldr	r3, [r7, #4]
 801b78a:	681b      	ldr	r3, [r3, #0]
 801b78c:	69db      	ldr	r3, [r3, #28]
 801b78e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801b792:	687b      	ldr	r3, [r7, #4]
 801b794:	681b      	ldr	r3, [r3, #0]
 801b796:	681b      	ldr	r3, [r3, #0]
 801b798:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801b79c:	687b      	ldr	r3, [r7, #4]
 801b79e:	681b      	ldr	r3, [r3, #0]
 801b7a0:	689b      	ldr	r3, [r3, #8]
 801b7a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801b7a6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801b7aa:	f640 030f 	movw	r3, #2063	; 0x80f
 801b7ae:	4013      	ands	r3, r2
 801b7b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 801b7b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801b7b8:	2b00      	cmp	r3, #0
 801b7ba:	d115      	bne.n	801b7e8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 801b7bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b7c0:	f003 0320 	and.w	r3, r3, #32
 801b7c4:	2b00      	cmp	r3, #0
 801b7c6:	d00f      	beq.n	801b7e8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801b7c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b7cc:	f003 0320 	and.w	r3, r3, #32
 801b7d0:	2b00      	cmp	r3, #0
 801b7d2:	d009      	beq.n	801b7e8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 801b7d4:	687b      	ldr	r3, [r7, #4]
 801b7d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801b7d8:	2b00      	cmp	r3, #0
 801b7da:	f000 82b8 	beq.w	801bd4e <HAL_UART_IRQHandler+0x5ce>
      {
        huart->RxISR(huart);
 801b7de:	687b      	ldr	r3, [r7, #4]
 801b7e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801b7e2:	6878      	ldr	r0, [r7, #4]
 801b7e4:	4798      	blx	r3
      }
      return;
 801b7e6:	e2b2      	b.n	801bd4e <HAL_UART_IRQHandler+0x5ce>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801b7e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801b7ec:	2b00      	cmp	r3, #0
 801b7ee:	f000 811d 	beq.w	801ba2c <HAL_UART_IRQHandler+0x2ac>
      && (((cr3its & USART_CR3_EIE) != 0U)
 801b7f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801b7f6:	f003 0301 	and.w	r3, r3, #1
 801b7fa:	2b00      	cmp	r3, #0
 801b7fc:	d106      	bne.n	801b80c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801b7fe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801b802:	4b88      	ldr	r3, [pc, #544]	; (801ba24 <HAL_UART_IRQHandler+0x2a4>)
 801b804:	4013      	ands	r3, r2
 801b806:	2b00      	cmp	r3, #0
 801b808:	f000 8110 	beq.w	801ba2c <HAL_UART_IRQHandler+0x2ac>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801b80c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b810:	f003 0301 	and.w	r3, r3, #1
 801b814:	2b00      	cmp	r3, #0
 801b816:	d011      	beq.n	801b83c <HAL_UART_IRQHandler+0xbc>
 801b818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b81c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b820:	2b00      	cmp	r3, #0
 801b822:	d00b      	beq.n	801b83c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801b824:	687b      	ldr	r3, [r7, #4]
 801b826:	681b      	ldr	r3, [r3, #0]
 801b828:	2201      	movs	r2, #1
 801b82a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801b82c:	687b      	ldr	r3, [r7, #4]
 801b82e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b832:	f043 0201 	orr.w	r2, r3, #1
 801b836:	687b      	ldr	r3, [r7, #4]
 801b838:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801b83c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b840:	f003 0302 	and.w	r3, r3, #2
 801b844:	2b00      	cmp	r3, #0
 801b846:	d011      	beq.n	801b86c <HAL_UART_IRQHandler+0xec>
 801b848:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801b84c:	f003 0301 	and.w	r3, r3, #1
 801b850:	2b00      	cmp	r3, #0
 801b852:	d00b      	beq.n	801b86c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801b854:	687b      	ldr	r3, [r7, #4]
 801b856:	681b      	ldr	r3, [r3, #0]
 801b858:	2202      	movs	r2, #2
 801b85a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801b85c:	687b      	ldr	r3, [r7, #4]
 801b85e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b862:	f043 0204 	orr.w	r2, r3, #4
 801b866:	687b      	ldr	r3, [r7, #4]
 801b868:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801b86c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b870:	f003 0304 	and.w	r3, r3, #4
 801b874:	2b00      	cmp	r3, #0
 801b876:	d011      	beq.n	801b89c <HAL_UART_IRQHandler+0x11c>
 801b878:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801b87c:	f003 0301 	and.w	r3, r3, #1
 801b880:	2b00      	cmp	r3, #0
 801b882:	d00b      	beq.n	801b89c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801b884:	687b      	ldr	r3, [r7, #4]
 801b886:	681b      	ldr	r3, [r3, #0]
 801b888:	2204      	movs	r2, #4
 801b88a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801b88c:	687b      	ldr	r3, [r7, #4]
 801b88e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b892:	f043 0202 	orr.w	r2, r3, #2
 801b896:	687b      	ldr	r3, [r7, #4]
 801b898:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801b89c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b8a0:	f003 0308 	and.w	r3, r3, #8
 801b8a4:	2b00      	cmp	r3, #0
 801b8a6:	d017      	beq.n	801b8d8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801b8a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b8ac:	f003 0320 	and.w	r3, r3, #32
 801b8b0:	2b00      	cmp	r3, #0
 801b8b2:	d105      	bne.n	801b8c0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 801b8b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801b8b8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801b8bc:	2b00      	cmp	r3, #0
 801b8be:	d00b      	beq.n	801b8d8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801b8c0:	687b      	ldr	r3, [r7, #4]
 801b8c2:	681b      	ldr	r3, [r3, #0]
 801b8c4:	2208      	movs	r2, #8
 801b8c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801b8c8:	687b      	ldr	r3, [r7, #4]
 801b8ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b8ce:	f043 0208 	orr.w	r2, r3, #8
 801b8d2:	687b      	ldr	r3, [r7, #4]
 801b8d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801b8d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b8dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801b8e0:	2b00      	cmp	r3, #0
 801b8e2:	d012      	beq.n	801b90a <HAL_UART_IRQHandler+0x18a>
 801b8e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b8e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801b8ec:	2b00      	cmp	r3, #0
 801b8ee:	d00c      	beq.n	801b90a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801b8f0:	687b      	ldr	r3, [r7, #4]
 801b8f2:	681b      	ldr	r3, [r3, #0]
 801b8f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801b8f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801b8fa:	687b      	ldr	r3, [r7, #4]
 801b8fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b900:	f043 0220 	orr.w	r2, r3, #32
 801b904:	687b      	ldr	r3, [r7, #4]
 801b906:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801b90a:	687b      	ldr	r3, [r7, #4]
 801b90c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b910:	2b00      	cmp	r3, #0
 801b912:	f000 821e 	beq.w	801bd52 <HAL_UART_IRQHandler+0x5d2>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 801b916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b91a:	f003 0320 	and.w	r3, r3, #32
 801b91e:	2b00      	cmp	r3, #0
 801b920:	d00d      	beq.n	801b93e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801b922:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b926:	f003 0320 	and.w	r3, r3, #32
 801b92a:	2b00      	cmp	r3, #0
 801b92c:	d007      	beq.n	801b93e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 801b92e:	687b      	ldr	r3, [r7, #4]
 801b930:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801b932:	2b00      	cmp	r3, #0
 801b934:	d003      	beq.n	801b93e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 801b936:	687b      	ldr	r3, [r7, #4]
 801b938:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801b93a:	6878      	ldr	r0, [r7, #4]
 801b93c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801b93e:	687b      	ldr	r3, [r7, #4]
 801b940:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b944:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801b948:	687b      	ldr	r3, [r7, #4]
 801b94a:	681b      	ldr	r3, [r3, #0]
 801b94c:	689b      	ldr	r3, [r3, #8]
 801b94e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b952:	2b40      	cmp	r3, #64	; 0x40
 801b954:	d005      	beq.n	801b962 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801b956:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801b95a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801b95e:	2b00      	cmp	r3, #0
 801b960:	d053      	beq.n	801ba0a <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801b962:	6878      	ldr	r0, [r7, #4]
 801b964:	f000 ff80 	bl	801c868 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b968:	687b      	ldr	r3, [r7, #4]
 801b96a:	681b      	ldr	r3, [r3, #0]
 801b96c:	689b      	ldr	r3, [r3, #8]
 801b96e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b972:	2b40      	cmp	r3, #64	; 0x40
 801b974:	d143      	bne.n	801b9fe <HAL_UART_IRQHandler+0x27e>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801b976:	687b      	ldr	r3, [r7, #4]
 801b978:	681b      	ldr	r3, [r3, #0]
 801b97a:	3308      	adds	r3, #8
 801b97c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b980:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b984:	e853 3f00 	ldrex	r3, [r3]
 801b988:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 801b98c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801b990:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801b994:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801b998:	687b      	ldr	r3, [r7, #4]
 801b99a:	681b      	ldr	r3, [r3, #0]
 801b99c:	3308      	adds	r3, #8
 801b99e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801b9a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801b9a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b9aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801b9ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801b9b2:	e841 2300 	strex	r3, r2, [r1]
 801b9b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801b9ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801b9be:	2b00      	cmp	r3, #0
 801b9c0:	d1d9      	bne.n	801b976 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801b9c2:	687b      	ldr	r3, [r7, #4]
 801b9c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b9c6:	2b00      	cmp	r3, #0
 801b9c8:	d013      	beq.n	801b9f2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801b9ca:	687b      	ldr	r3, [r7, #4]
 801b9cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b9ce:	4a16      	ldr	r2, [pc, #88]	; (801ba28 <HAL_UART_IRQHandler+0x2a8>)
 801b9d0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801b9d2:	687b      	ldr	r3, [r7, #4]
 801b9d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b9d6:	4618      	mov	r0, r3
 801b9d8:	f7fb f98a 	bl	8016cf0 <HAL_DMA_Abort_IT>
 801b9dc:	4603      	mov	r3, r0
 801b9de:	2b00      	cmp	r3, #0
 801b9e0:	d01d      	beq.n	801ba1e <HAL_UART_IRQHandler+0x29e>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801b9e2:	687b      	ldr	r3, [r7, #4]
 801b9e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b9e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b9e8:	687a      	ldr	r2, [r7, #4]
 801b9ea:	6f52      	ldr	r2, [r2, #116]	; 0x74
 801b9ec:	4610      	mov	r0, r2
 801b9ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b9f0:	e015      	b.n	801ba1e <HAL_UART_IRQHandler+0x29e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 801b9f2:	687b      	ldr	r3, [r7, #4]
 801b9f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801b9f8:	6878      	ldr	r0, [r7, #4]
 801b9fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b9fc:	e00f      	b.n	801ba1e <HAL_UART_IRQHandler+0x29e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 801b9fe:	687b      	ldr	r3, [r7, #4]
 801ba00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801ba04:	6878      	ldr	r0, [r7, #4]
 801ba06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801ba08:	e009      	b.n	801ba1e <HAL_UART_IRQHandler+0x29e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 801ba0a:	687b      	ldr	r3, [r7, #4]
 801ba0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801ba10:	6878      	ldr	r0, [r7, #4]
 801ba12:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801ba14:	687b      	ldr	r3, [r7, #4]
 801ba16:	2200      	movs	r2, #0
 801ba18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 801ba1c:	e199      	b.n	801bd52 <HAL_UART_IRQHandler+0x5d2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801ba1e:	bf00      	nop
    return;
 801ba20:	e197      	b.n	801bd52 <HAL_UART_IRQHandler+0x5d2>
 801ba22:	bf00      	nop
 801ba24:	04000120 	.word	0x04000120
 801ba28:	0801c931 	.word	0x0801c931

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801ba2c:	687b      	ldr	r3, [r7, #4]
 801ba2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ba30:	2b01      	cmp	r3, #1
 801ba32:	f040 8150 	bne.w	801bcd6 <HAL_UART_IRQHandler+0x556>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801ba36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801ba3a:	f003 0310 	and.w	r3, r3, #16
 801ba3e:	2b00      	cmp	r3, #0
 801ba40:	f000 8149 	beq.w	801bcd6 <HAL_UART_IRQHandler+0x556>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801ba44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801ba48:	f003 0310 	and.w	r3, r3, #16
 801ba4c:	2b00      	cmp	r3, #0
 801ba4e:	f000 8142 	beq.w	801bcd6 <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801ba52:	687b      	ldr	r3, [r7, #4]
 801ba54:	681b      	ldr	r3, [r3, #0]
 801ba56:	2210      	movs	r2, #16
 801ba58:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801ba5a:	687b      	ldr	r3, [r7, #4]
 801ba5c:	681b      	ldr	r3, [r3, #0]
 801ba5e:	689b      	ldr	r3, [r3, #8]
 801ba60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ba64:	2b40      	cmp	r3, #64	; 0x40
 801ba66:	f040 80b8 	bne.w	801bbda <HAL_UART_IRQHandler+0x45a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801ba6a:	687b      	ldr	r3, [r7, #4]
 801ba6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ba6e:	681b      	ldr	r3, [r3, #0]
 801ba70:	685b      	ldr	r3, [r3, #4]
 801ba72:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 801ba76:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 801ba7a:	2b00      	cmp	r3, #0
 801ba7c:	f000 816b 	beq.w	801bd56 <HAL_UART_IRQHandler+0x5d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801ba80:	687b      	ldr	r3, [r7, #4]
 801ba82:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801ba86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801ba8a:	429a      	cmp	r2, r3
 801ba8c:	f080 8163 	bcs.w	801bd56 <HAL_UART_IRQHandler+0x5d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801ba90:	687b      	ldr	r3, [r7, #4]
 801ba92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801ba96:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 801ba9a:	687b      	ldr	r3, [r7, #4]
 801ba9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ba9e:	69db      	ldr	r3, [r3, #28]
 801baa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801baa4:	f000 8086 	beq.w	801bbb4 <HAL_UART_IRQHandler+0x434>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801baa8:	687b      	ldr	r3, [r7, #4]
 801baaa:	681b      	ldr	r3, [r3, #0]
 801baac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bab0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801bab4:	e853 3f00 	ldrex	r3, [r3]
 801bab8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 801babc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801bac0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801bac4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801bac8:	687b      	ldr	r3, [r7, #4]
 801baca:	681b      	ldr	r3, [r3, #0]
 801bacc:	461a      	mov	r2, r3
 801bace:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801bad2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801bad6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bada:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801bade:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801bae2:	e841 2300 	strex	r3, r2, [r1]
 801bae6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801baea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801baee:	2b00      	cmp	r3, #0
 801baf0:	d1da      	bne.n	801baa8 <HAL_UART_IRQHandler+0x328>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801baf2:	687b      	ldr	r3, [r7, #4]
 801baf4:	681b      	ldr	r3, [r3, #0]
 801baf6:	3308      	adds	r3, #8
 801baf8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bafa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801bafc:	e853 3f00 	ldrex	r3, [r3]
 801bb00:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801bb02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801bb04:	f023 0301 	bic.w	r3, r3, #1
 801bb08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801bb0c:	687b      	ldr	r3, [r7, #4]
 801bb0e:	681b      	ldr	r3, [r3, #0]
 801bb10:	3308      	adds	r3, #8
 801bb12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801bb16:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801bb1a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bb1c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801bb1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801bb22:	e841 2300 	strex	r3, r2, [r1]
 801bb26:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801bb28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801bb2a:	2b00      	cmp	r3, #0
 801bb2c:	d1e1      	bne.n	801baf2 <HAL_UART_IRQHandler+0x372>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801bb2e:	687b      	ldr	r3, [r7, #4]
 801bb30:	681b      	ldr	r3, [r3, #0]
 801bb32:	3308      	adds	r3, #8
 801bb34:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bb36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801bb38:	e853 3f00 	ldrex	r3, [r3]
 801bb3c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801bb3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801bb40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801bb44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801bb48:	687b      	ldr	r3, [r7, #4]
 801bb4a:	681b      	ldr	r3, [r3, #0]
 801bb4c:	3308      	adds	r3, #8
 801bb4e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801bb52:	66fa      	str	r2, [r7, #108]	; 0x6c
 801bb54:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bb56:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801bb58:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801bb5a:	e841 2300 	strex	r3, r2, [r1]
 801bb5e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801bb60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801bb62:	2b00      	cmp	r3, #0
 801bb64:	d1e3      	bne.n	801bb2e <HAL_UART_IRQHandler+0x3ae>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801bb66:	687b      	ldr	r3, [r7, #4]
 801bb68:	2220      	movs	r2, #32
 801bb6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801bb6e:	687b      	ldr	r3, [r7, #4]
 801bb70:	2200      	movs	r2, #0
 801bb72:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801bb74:	687b      	ldr	r3, [r7, #4]
 801bb76:	681b      	ldr	r3, [r3, #0]
 801bb78:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bb7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bb7c:	e853 3f00 	ldrex	r3, [r3]
 801bb80:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801bb82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801bb84:	f023 0310 	bic.w	r3, r3, #16
 801bb88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801bb8c:	687b      	ldr	r3, [r7, #4]
 801bb8e:	681b      	ldr	r3, [r3, #0]
 801bb90:	461a      	mov	r2, r3
 801bb92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801bb96:	65bb      	str	r3, [r7, #88]	; 0x58
 801bb98:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bb9a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801bb9c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801bb9e:	e841 2300 	strex	r3, r2, [r1]
 801bba2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801bba4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bba6:	2b00      	cmp	r3, #0
 801bba8:	d1e4      	bne.n	801bb74 <HAL_UART_IRQHandler+0x3f4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801bbaa:	687b      	ldr	r3, [r7, #4]
 801bbac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801bbae:	4618      	mov	r0, r3
 801bbb0:	f7fb f82e 	bl	8016c10 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801bbb4:	687b      	ldr	r3, [r7, #4]
 801bbb6:	2202      	movs	r2, #2
 801bbb8:	665a      	str	r2, [r3, #100]	; 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801bbba:	687b      	ldr	r3, [r7, #4]
 801bbbc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801bbc0:	687a      	ldr	r2, [r7, #4]
 801bbc2:	f8b2 1058 	ldrh.w	r1, [r2, #88]	; 0x58
 801bbc6:	687a      	ldr	r2, [r7, #4]
 801bbc8:	f8b2 205a 	ldrh.w	r2, [r2, #90]	; 0x5a
 801bbcc:	b292      	uxth	r2, r2
 801bbce:	1a8a      	subs	r2, r1, r2
 801bbd0:	b292      	uxth	r2, r2
 801bbd2:	4611      	mov	r1, r2
 801bbd4:	6878      	ldr	r0, [r7, #4]
 801bbd6:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801bbd8:	e0bd      	b.n	801bd56 <HAL_UART_IRQHandler+0x5d6>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801bbda:	687b      	ldr	r3, [r7, #4]
 801bbdc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 801bbe0:	687b      	ldr	r3, [r7, #4]
 801bbe2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801bbe6:	b29b      	uxth	r3, r3
 801bbe8:	1ad3      	subs	r3, r2, r3
 801bbea:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 801bbee:	687b      	ldr	r3, [r7, #4]
 801bbf0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801bbf4:	b29b      	uxth	r3, r3
 801bbf6:	2b00      	cmp	r3, #0
 801bbf8:	f000 80af 	beq.w	801bd5a <HAL_UART_IRQHandler+0x5da>
          && (nb_rx_data > 0U))
 801bbfc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801bc00:	2b00      	cmp	r3, #0
 801bc02:	f000 80aa 	beq.w	801bd5a <HAL_UART_IRQHandler+0x5da>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801bc06:	687b      	ldr	r3, [r7, #4]
 801bc08:	681b      	ldr	r3, [r3, #0]
 801bc0a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bc0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bc0e:	e853 3f00 	ldrex	r3, [r3]
 801bc12:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801bc14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801bc16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801bc1a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801bc1e:	687b      	ldr	r3, [r7, #4]
 801bc20:	681b      	ldr	r3, [r3, #0]
 801bc22:	461a      	mov	r2, r3
 801bc24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801bc28:	647b      	str	r3, [r7, #68]	; 0x44
 801bc2a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bc2c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801bc2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801bc30:	e841 2300 	strex	r3, r2, [r1]
 801bc34:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801bc36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bc38:	2b00      	cmp	r3, #0
 801bc3a:	d1e4      	bne.n	801bc06 <HAL_UART_IRQHandler+0x486>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801bc3c:	687b      	ldr	r3, [r7, #4]
 801bc3e:	681b      	ldr	r3, [r3, #0]
 801bc40:	3308      	adds	r3, #8
 801bc42:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bc44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc46:	e853 3f00 	ldrex	r3, [r3]
 801bc4a:	623b      	str	r3, [r7, #32]
   return(result);
 801bc4c:	6a3b      	ldr	r3, [r7, #32]
 801bc4e:	f023 0301 	bic.w	r3, r3, #1
 801bc52:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801bc56:	687b      	ldr	r3, [r7, #4]
 801bc58:	681b      	ldr	r3, [r3, #0]
 801bc5a:	3308      	adds	r3, #8
 801bc5c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801bc60:	633a      	str	r2, [r7, #48]	; 0x30
 801bc62:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bc64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801bc66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801bc68:	e841 2300 	strex	r3, r2, [r1]
 801bc6c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801bc6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bc70:	2b00      	cmp	r3, #0
 801bc72:	d1e3      	bne.n	801bc3c <HAL_UART_IRQHandler+0x4bc>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801bc74:	687b      	ldr	r3, [r7, #4]
 801bc76:	2220      	movs	r2, #32
 801bc78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801bc7c:	687b      	ldr	r3, [r7, #4]
 801bc7e:	2200      	movs	r2, #0
 801bc80:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801bc82:	687b      	ldr	r3, [r7, #4]
 801bc84:	2200      	movs	r2, #0
 801bc86:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801bc88:	687b      	ldr	r3, [r7, #4]
 801bc8a:	681b      	ldr	r3, [r3, #0]
 801bc8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bc8e:	693b      	ldr	r3, [r7, #16]
 801bc90:	e853 3f00 	ldrex	r3, [r3]
 801bc94:	60fb      	str	r3, [r7, #12]
   return(result);
 801bc96:	68fb      	ldr	r3, [r7, #12]
 801bc98:	f023 0310 	bic.w	r3, r3, #16
 801bc9c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801bca0:	687b      	ldr	r3, [r7, #4]
 801bca2:	681b      	ldr	r3, [r3, #0]
 801bca4:	461a      	mov	r2, r3
 801bca6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801bcaa:	61fb      	str	r3, [r7, #28]
 801bcac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bcae:	69b9      	ldr	r1, [r7, #24]
 801bcb0:	69fa      	ldr	r2, [r7, #28]
 801bcb2:	e841 2300 	strex	r3, r2, [r1]
 801bcb6:	617b      	str	r3, [r7, #20]
   return(result);
 801bcb8:	697b      	ldr	r3, [r7, #20]
 801bcba:	2b00      	cmp	r3, #0
 801bcbc:	d1e4      	bne.n	801bc88 <HAL_UART_IRQHandler+0x508>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801bcbe:	687b      	ldr	r3, [r7, #4]
 801bcc0:	2202      	movs	r2, #2
 801bcc2:	665a      	str	r2, [r3, #100]	; 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 801bcc4:	687b      	ldr	r3, [r7, #4]
 801bcc6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801bcca:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 801bcce:	4611      	mov	r1, r2
 801bcd0:	6878      	ldr	r0, [r7, #4]
 801bcd2:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801bcd4:	e041      	b.n	801bd5a <HAL_UART_IRQHandler+0x5da>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801bcd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bcda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801bcde:	2b00      	cmp	r3, #0
 801bce0:	d010      	beq.n	801bd04 <HAL_UART_IRQHandler+0x584>
 801bce2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801bce6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801bcea:	2b00      	cmp	r3, #0
 801bcec:	d00a      	beq.n	801bd04 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801bcee:	687b      	ldr	r3, [r7, #4]
 801bcf0:	681b      	ldr	r3, [r3, #0]
 801bcf2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801bcf6:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 801bcf8:	687b      	ldr	r3, [r7, #4]
 801bcfa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801bcfe:	6878      	ldr	r0, [r7, #4]
 801bd00:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801bd02:	e02d      	b.n	801bd60 <HAL_UART_IRQHandler+0x5e0>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 801bd04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bd08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801bd0c:	2b00      	cmp	r3, #0
 801bd0e:	d00e      	beq.n	801bd2e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 801bd10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801bd14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801bd18:	2b00      	cmp	r3, #0
 801bd1a:	d008      	beq.n	801bd2e <HAL_UART_IRQHandler+0x5ae>
  {
    if (huart->TxISR != NULL)
 801bd1c:	687b      	ldr	r3, [r7, #4]
 801bd1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bd20:	2b00      	cmp	r3, #0
 801bd22:	d01c      	beq.n	801bd5e <HAL_UART_IRQHandler+0x5de>
    {
      huart->TxISR(huart);
 801bd24:	687b      	ldr	r3, [r7, #4]
 801bd26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bd28:	6878      	ldr	r0, [r7, #4]
 801bd2a:	4798      	blx	r3
    }
    return;
 801bd2c:	e017      	b.n	801bd5e <HAL_UART_IRQHandler+0x5de>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801bd2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801bd32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bd36:	2b00      	cmp	r3, #0
 801bd38:	d012      	beq.n	801bd60 <HAL_UART_IRQHandler+0x5e0>
 801bd3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801bd3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bd42:	2b00      	cmp	r3, #0
 801bd44:	d00c      	beq.n	801bd60 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 801bd46:	6878      	ldr	r0, [r7, #4]
 801bd48:	f000 fe0a 	bl	801c960 <UART_EndTransmit_IT>
    return;
 801bd4c:	e008      	b.n	801bd60 <HAL_UART_IRQHandler+0x5e0>
      return;
 801bd4e:	bf00      	nop
 801bd50:	e006      	b.n	801bd60 <HAL_UART_IRQHandler+0x5e0>
    return;
 801bd52:	bf00      	nop
 801bd54:	e004      	b.n	801bd60 <HAL_UART_IRQHandler+0x5e0>
      return;
 801bd56:	bf00      	nop
 801bd58:	e002      	b.n	801bd60 <HAL_UART_IRQHandler+0x5e0>
      return;
 801bd5a:	bf00      	nop
 801bd5c:	e000      	b.n	801bd60 <HAL_UART_IRQHandler+0x5e0>
    return;
 801bd5e:	bf00      	nop
  }

}
 801bd60:	37e8      	adds	r7, #232	; 0xe8
 801bd62:	46bd      	mov	sp, r7
 801bd64:	bd80      	pop	{r7, pc}
 801bd66:	bf00      	nop

0801bd68 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801bd68:	b480      	push	{r7}
 801bd6a:	b083      	sub	sp, #12
 801bd6c:	af00      	add	r7, sp, #0
 801bd6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801bd70:	bf00      	nop
 801bd72:	370c      	adds	r7, #12
 801bd74:	46bd      	mov	sp, r7
 801bd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd7a:	4770      	bx	lr

0801bd7c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801bd7c:	b480      	push	{r7}
 801bd7e:	b083      	sub	sp, #12
 801bd80:	af00      	add	r7, sp, #0
 801bd82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 801bd84:	bf00      	nop
 801bd86:	370c      	adds	r7, #12
 801bd88:	46bd      	mov	sp, r7
 801bd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd8e:	4770      	bx	lr

0801bd90 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 801bd90:	b480      	push	{r7}
 801bd92:	b083      	sub	sp, #12
 801bd94:	af00      	add	r7, sp, #0
 801bd96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 801bd98:	bf00      	nop
 801bd9a:	370c      	adds	r7, #12
 801bd9c:	46bd      	mov	sp, r7
 801bd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bda2:	4770      	bx	lr

0801bda4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801bda4:	b480      	push	{r7}
 801bda6:	b083      	sub	sp, #12
 801bda8:	af00      	add	r7, sp, #0
 801bdaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801bdac:	bf00      	nop
 801bdae:	370c      	adds	r7, #12
 801bdb0:	46bd      	mov	sp, r7
 801bdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdb6:	4770      	bx	lr

0801bdb8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801bdb8:	b480      	push	{r7}
 801bdba:	b083      	sub	sp, #12
 801bdbc:	af00      	add	r7, sp, #0
 801bdbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801bdc0:	bf00      	nop
 801bdc2:	370c      	adds	r7, #12
 801bdc4:	46bd      	mov	sp, r7
 801bdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdca:	4770      	bx	lr

0801bdcc <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 801bdcc:	b480      	push	{r7}
 801bdce:	b083      	sub	sp, #12
 801bdd0:	af00      	add	r7, sp, #0
 801bdd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 801bdd4:	bf00      	nop
 801bdd6:	370c      	adds	r7, #12
 801bdd8:	46bd      	mov	sp, r7
 801bdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdde:	4770      	bx	lr

0801bde0 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 801bde0:	b480      	push	{r7}
 801bde2:	b083      	sub	sp, #12
 801bde4:	af00      	add	r7, sp, #0
 801bde6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 801bde8:	bf00      	nop
 801bdea:	370c      	adds	r7, #12
 801bdec:	46bd      	mov	sp, r7
 801bdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdf2:	4770      	bx	lr

0801bdf4 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 801bdf4:	b480      	push	{r7}
 801bdf6:	b083      	sub	sp, #12
 801bdf8:	af00      	add	r7, sp, #0
 801bdfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 801bdfc:	bf00      	nop
 801bdfe:	370c      	adds	r7, #12
 801be00:	46bd      	mov	sp, r7
 801be02:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be06:	4770      	bx	lr

0801be08 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801be08:	b480      	push	{r7}
 801be0a:	b083      	sub	sp, #12
 801be0c:	af00      	add	r7, sp, #0
 801be0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801be10:	bf00      	nop
 801be12:	370c      	adds	r7, #12
 801be14:	46bd      	mov	sp, r7
 801be16:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be1a:	4770      	bx	lr

0801be1c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 801be1c:	b480      	push	{r7}
 801be1e:	b083      	sub	sp, #12
 801be20:	af00      	add	r7, sp, #0
 801be22:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 801be24:	687b      	ldr	r3, [r7, #4]
 801be26:	4a16      	ldr	r2, [pc, #88]	; (801be80 <UART_InitCallbacksToDefault+0x64>)
 801be28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 801be2c:	687b      	ldr	r3, [r7, #4]
 801be2e:	4a15      	ldr	r2, [pc, #84]	; (801be84 <UART_InitCallbacksToDefault+0x68>)
 801be30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 801be34:	687b      	ldr	r3, [r7, #4]
 801be36:	4a14      	ldr	r2, [pc, #80]	; (801be88 <UART_InitCallbacksToDefault+0x6c>)
 801be38:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 801be3c:	687b      	ldr	r3, [r7, #4]
 801be3e:	4a13      	ldr	r2, [pc, #76]	; (801be8c <UART_InitCallbacksToDefault+0x70>)
 801be40:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 801be44:	687b      	ldr	r3, [r7, #4]
 801be46:	4a12      	ldr	r2, [pc, #72]	; (801be90 <UART_InitCallbacksToDefault+0x74>)
 801be48:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 801be4c:	687b      	ldr	r3, [r7, #4]
 801be4e:	4a11      	ldr	r2, [pc, #68]	; (801be94 <UART_InitCallbacksToDefault+0x78>)
 801be50:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 801be54:	687b      	ldr	r3, [r7, #4]
 801be56:	4a10      	ldr	r2, [pc, #64]	; (801be98 <UART_InitCallbacksToDefault+0x7c>)
 801be58:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 801be5c:	687b      	ldr	r3, [r7, #4]
 801be5e:	4a0f      	ldr	r2, [pc, #60]	; (801be9c <UART_InitCallbacksToDefault+0x80>)
 801be60:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 801be64:	687b      	ldr	r3, [r7, #4]
 801be66:	4a0e      	ldr	r2, [pc, #56]	; (801bea0 <UART_InitCallbacksToDefault+0x84>)
 801be68:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 801be6c:	687b      	ldr	r3, [r7, #4]
 801be6e:	4a0d      	ldr	r2, [pc, #52]	; (801bea4 <UART_InitCallbacksToDefault+0x88>)
 801be70:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

}
 801be74:	bf00      	nop
 801be76:	370c      	adds	r7, #12
 801be78:	46bd      	mov	sp, r7
 801be7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be7e:	4770      	bx	lr
 801be80:	0801bd7d 	.word	0x0801bd7d
 801be84:	0801bd69 	.word	0x0801bd69
 801be88:	0801bda5 	.word	0x0801bda5
 801be8c:	0801bd91 	.word	0x0801bd91
 801be90:	0801bdb9 	.word	0x0801bdb9
 801be94:	0801bdcd 	.word	0x0801bdcd
 801be98:	0801bde1 	.word	0x0801bde1
 801be9c:	0801bdf5 	.word	0x0801bdf5
 801bea0:	0801be09 	.word	0x0801be09
 801bea4:	08015245 	.word	0x08015245

0801bea8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801bea8:	b580      	push	{r7, lr}
 801beaa:	b088      	sub	sp, #32
 801beac:	af00      	add	r7, sp, #0
 801beae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801beb0:	2300      	movs	r3, #0
 801beb2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801beb4:	687b      	ldr	r3, [r7, #4]
 801beb6:	689a      	ldr	r2, [r3, #8]
 801beb8:	687b      	ldr	r3, [r7, #4]
 801beba:	691b      	ldr	r3, [r3, #16]
 801bebc:	431a      	orrs	r2, r3
 801bebe:	687b      	ldr	r3, [r7, #4]
 801bec0:	695b      	ldr	r3, [r3, #20]
 801bec2:	431a      	orrs	r2, r3
 801bec4:	687b      	ldr	r3, [r7, #4]
 801bec6:	69db      	ldr	r3, [r3, #28]
 801bec8:	4313      	orrs	r3, r2
 801beca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801becc:	687b      	ldr	r3, [r7, #4]
 801bece:	681b      	ldr	r3, [r3, #0]
 801bed0:	681a      	ldr	r2, [r3, #0]
 801bed2:	4ba6      	ldr	r3, [pc, #664]	; (801c16c <UART_SetConfig+0x2c4>)
 801bed4:	4013      	ands	r3, r2
 801bed6:	687a      	ldr	r2, [r7, #4]
 801bed8:	6812      	ldr	r2, [r2, #0]
 801beda:	6979      	ldr	r1, [r7, #20]
 801bedc:	430b      	orrs	r3, r1
 801bede:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801bee0:	687b      	ldr	r3, [r7, #4]
 801bee2:	681b      	ldr	r3, [r3, #0]
 801bee4:	685b      	ldr	r3, [r3, #4]
 801bee6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801beea:	687b      	ldr	r3, [r7, #4]
 801beec:	68da      	ldr	r2, [r3, #12]
 801beee:	687b      	ldr	r3, [r7, #4]
 801bef0:	681b      	ldr	r3, [r3, #0]
 801bef2:	430a      	orrs	r2, r1
 801bef4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801bef6:	687b      	ldr	r3, [r7, #4]
 801bef8:	699b      	ldr	r3, [r3, #24]
 801befa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 801befc:	687b      	ldr	r3, [r7, #4]
 801befe:	6a1b      	ldr	r3, [r3, #32]
 801bf00:	697a      	ldr	r2, [r7, #20]
 801bf02:	4313      	orrs	r3, r2
 801bf04:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801bf06:	687b      	ldr	r3, [r7, #4]
 801bf08:	681b      	ldr	r3, [r3, #0]
 801bf0a:	689b      	ldr	r3, [r3, #8]
 801bf0c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 801bf10:	687b      	ldr	r3, [r7, #4]
 801bf12:	681b      	ldr	r3, [r3, #0]
 801bf14:	697a      	ldr	r2, [r7, #20]
 801bf16:	430a      	orrs	r2, r1
 801bf18:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801bf1a:	687b      	ldr	r3, [r7, #4]
 801bf1c:	681b      	ldr	r3, [r3, #0]
 801bf1e:	4a94      	ldr	r2, [pc, #592]	; (801c170 <UART_SetConfig+0x2c8>)
 801bf20:	4293      	cmp	r3, r2
 801bf22:	d120      	bne.n	801bf66 <UART_SetConfig+0xbe>
 801bf24:	4b93      	ldr	r3, [pc, #588]	; (801c174 <UART_SetConfig+0x2cc>)
 801bf26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bf2a:	f003 0303 	and.w	r3, r3, #3
 801bf2e:	2b03      	cmp	r3, #3
 801bf30:	d816      	bhi.n	801bf60 <UART_SetConfig+0xb8>
 801bf32:	a201      	add	r2, pc, #4	; (adr r2, 801bf38 <UART_SetConfig+0x90>)
 801bf34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bf38:	0801bf49 	.word	0x0801bf49
 801bf3c:	0801bf55 	.word	0x0801bf55
 801bf40:	0801bf4f 	.word	0x0801bf4f
 801bf44:	0801bf5b 	.word	0x0801bf5b
 801bf48:	2301      	movs	r3, #1
 801bf4a:	77fb      	strb	r3, [r7, #31]
 801bf4c:	e150      	b.n	801c1f0 <UART_SetConfig+0x348>
 801bf4e:	2302      	movs	r3, #2
 801bf50:	77fb      	strb	r3, [r7, #31]
 801bf52:	e14d      	b.n	801c1f0 <UART_SetConfig+0x348>
 801bf54:	2304      	movs	r3, #4
 801bf56:	77fb      	strb	r3, [r7, #31]
 801bf58:	e14a      	b.n	801c1f0 <UART_SetConfig+0x348>
 801bf5a:	2308      	movs	r3, #8
 801bf5c:	77fb      	strb	r3, [r7, #31]
 801bf5e:	e147      	b.n	801c1f0 <UART_SetConfig+0x348>
 801bf60:	2310      	movs	r3, #16
 801bf62:	77fb      	strb	r3, [r7, #31]
 801bf64:	e144      	b.n	801c1f0 <UART_SetConfig+0x348>
 801bf66:	687b      	ldr	r3, [r7, #4]
 801bf68:	681b      	ldr	r3, [r3, #0]
 801bf6a:	4a83      	ldr	r2, [pc, #524]	; (801c178 <UART_SetConfig+0x2d0>)
 801bf6c:	4293      	cmp	r3, r2
 801bf6e:	d132      	bne.n	801bfd6 <UART_SetConfig+0x12e>
 801bf70:	4b80      	ldr	r3, [pc, #512]	; (801c174 <UART_SetConfig+0x2cc>)
 801bf72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bf76:	f003 030c 	and.w	r3, r3, #12
 801bf7a:	2b0c      	cmp	r3, #12
 801bf7c:	d828      	bhi.n	801bfd0 <UART_SetConfig+0x128>
 801bf7e:	a201      	add	r2, pc, #4	; (adr r2, 801bf84 <UART_SetConfig+0xdc>)
 801bf80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bf84:	0801bfb9 	.word	0x0801bfb9
 801bf88:	0801bfd1 	.word	0x0801bfd1
 801bf8c:	0801bfd1 	.word	0x0801bfd1
 801bf90:	0801bfd1 	.word	0x0801bfd1
 801bf94:	0801bfc5 	.word	0x0801bfc5
 801bf98:	0801bfd1 	.word	0x0801bfd1
 801bf9c:	0801bfd1 	.word	0x0801bfd1
 801bfa0:	0801bfd1 	.word	0x0801bfd1
 801bfa4:	0801bfbf 	.word	0x0801bfbf
 801bfa8:	0801bfd1 	.word	0x0801bfd1
 801bfac:	0801bfd1 	.word	0x0801bfd1
 801bfb0:	0801bfd1 	.word	0x0801bfd1
 801bfb4:	0801bfcb 	.word	0x0801bfcb
 801bfb8:	2300      	movs	r3, #0
 801bfba:	77fb      	strb	r3, [r7, #31]
 801bfbc:	e118      	b.n	801c1f0 <UART_SetConfig+0x348>
 801bfbe:	2302      	movs	r3, #2
 801bfc0:	77fb      	strb	r3, [r7, #31]
 801bfc2:	e115      	b.n	801c1f0 <UART_SetConfig+0x348>
 801bfc4:	2304      	movs	r3, #4
 801bfc6:	77fb      	strb	r3, [r7, #31]
 801bfc8:	e112      	b.n	801c1f0 <UART_SetConfig+0x348>
 801bfca:	2308      	movs	r3, #8
 801bfcc:	77fb      	strb	r3, [r7, #31]
 801bfce:	e10f      	b.n	801c1f0 <UART_SetConfig+0x348>
 801bfd0:	2310      	movs	r3, #16
 801bfd2:	77fb      	strb	r3, [r7, #31]
 801bfd4:	e10c      	b.n	801c1f0 <UART_SetConfig+0x348>
 801bfd6:	687b      	ldr	r3, [r7, #4]
 801bfd8:	681b      	ldr	r3, [r3, #0]
 801bfda:	4a68      	ldr	r2, [pc, #416]	; (801c17c <UART_SetConfig+0x2d4>)
 801bfdc:	4293      	cmp	r3, r2
 801bfde:	d120      	bne.n	801c022 <UART_SetConfig+0x17a>
 801bfe0:	4b64      	ldr	r3, [pc, #400]	; (801c174 <UART_SetConfig+0x2cc>)
 801bfe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bfe6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801bfea:	2b30      	cmp	r3, #48	; 0x30
 801bfec:	d013      	beq.n	801c016 <UART_SetConfig+0x16e>
 801bfee:	2b30      	cmp	r3, #48	; 0x30
 801bff0:	d814      	bhi.n	801c01c <UART_SetConfig+0x174>
 801bff2:	2b20      	cmp	r3, #32
 801bff4:	d009      	beq.n	801c00a <UART_SetConfig+0x162>
 801bff6:	2b20      	cmp	r3, #32
 801bff8:	d810      	bhi.n	801c01c <UART_SetConfig+0x174>
 801bffa:	2b00      	cmp	r3, #0
 801bffc:	d002      	beq.n	801c004 <UART_SetConfig+0x15c>
 801bffe:	2b10      	cmp	r3, #16
 801c000:	d006      	beq.n	801c010 <UART_SetConfig+0x168>
 801c002:	e00b      	b.n	801c01c <UART_SetConfig+0x174>
 801c004:	2300      	movs	r3, #0
 801c006:	77fb      	strb	r3, [r7, #31]
 801c008:	e0f2      	b.n	801c1f0 <UART_SetConfig+0x348>
 801c00a:	2302      	movs	r3, #2
 801c00c:	77fb      	strb	r3, [r7, #31]
 801c00e:	e0ef      	b.n	801c1f0 <UART_SetConfig+0x348>
 801c010:	2304      	movs	r3, #4
 801c012:	77fb      	strb	r3, [r7, #31]
 801c014:	e0ec      	b.n	801c1f0 <UART_SetConfig+0x348>
 801c016:	2308      	movs	r3, #8
 801c018:	77fb      	strb	r3, [r7, #31]
 801c01a:	e0e9      	b.n	801c1f0 <UART_SetConfig+0x348>
 801c01c:	2310      	movs	r3, #16
 801c01e:	77fb      	strb	r3, [r7, #31]
 801c020:	e0e6      	b.n	801c1f0 <UART_SetConfig+0x348>
 801c022:	687b      	ldr	r3, [r7, #4]
 801c024:	681b      	ldr	r3, [r3, #0]
 801c026:	4a56      	ldr	r2, [pc, #344]	; (801c180 <UART_SetConfig+0x2d8>)
 801c028:	4293      	cmp	r3, r2
 801c02a:	d120      	bne.n	801c06e <UART_SetConfig+0x1c6>
 801c02c:	4b51      	ldr	r3, [pc, #324]	; (801c174 <UART_SetConfig+0x2cc>)
 801c02e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c032:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801c036:	2bc0      	cmp	r3, #192	; 0xc0
 801c038:	d013      	beq.n	801c062 <UART_SetConfig+0x1ba>
 801c03a:	2bc0      	cmp	r3, #192	; 0xc0
 801c03c:	d814      	bhi.n	801c068 <UART_SetConfig+0x1c0>
 801c03e:	2b80      	cmp	r3, #128	; 0x80
 801c040:	d009      	beq.n	801c056 <UART_SetConfig+0x1ae>
 801c042:	2b80      	cmp	r3, #128	; 0x80
 801c044:	d810      	bhi.n	801c068 <UART_SetConfig+0x1c0>
 801c046:	2b00      	cmp	r3, #0
 801c048:	d002      	beq.n	801c050 <UART_SetConfig+0x1a8>
 801c04a:	2b40      	cmp	r3, #64	; 0x40
 801c04c:	d006      	beq.n	801c05c <UART_SetConfig+0x1b4>
 801c04e:	e00b      	b.n	801c068 <UART_SetConfig+0x1c0>
 801c050:	2300      	movs	r3, #0
 801c052:	77fb      	strb	r3, [r7, #31]
 801c054:	e0cc      	b.n	801c1f0 <UART_SetConfig+0x348>
 801c056:	2302      	movs	r3, #2
 801c058:	77fb      	strb	r3, [r7, #31]
 801c05a:	e0c9      	b.n	801c1f0 <UART_SetConfig+0x348>
 801c05c:	2304      	movs	r3, #4
 801c05e:	77fb      	strb	r3, [r7, #31]
 801c060:	e0c6      	b.n	801c1f0 <UART_SetConfig+0x348>
 801c062:	2308      	movs	r3, #8
 801c064:	77fb      	strb	r3, [r7, #31]
 801c066:	e0c3      	b.n	801c1f0 <UART_SetConfig+0x348>
 801c068:	2310      	movs	r3, #16
 801c06a:	77fb      	strb	r3, [r7, #31]
 801c06c:	e0c0      	b.n	801c1f0 <UART_SetConfig+0x348>
 801c06e:	687b      	ldr	r3, [r7, #4]
 801c070:	681b      	ldr	r3, [r3, #0]
 801c072:	4a44      	ldr	r2, [pc, #272]	; (801c184 <UART_SetConfig+0x2dc>)
 801c074:	4293      	cmp	r3, r2
 801c076:	d125      	bne.n	801c0c4 <UART_SetConfig+0x21c>
 801c078:	4b3e      	ldr	r3, [pc, #248]	; (801c174 <UART_SetConfig+0x2cc>)
 801c07a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c07e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801c082:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801c086:	d017      	beq.n	801c0b8 <UART_SetConfig+0x210>
 801c088:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801c08c:	d817      	bhi.n	801c0be <UART_SetConfig+0x216>
 801c08e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c092:	d00b      	beq.n	801c0ac <UART_SetConfig+0x204>
 801c094:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c098:	d811      	bhi.n	801c0be <UART_SetConfig+0x216>
 801c09a:	2b00      	cmp	r3, #0
 801c09c:	d003      	beq.n	801c0a6 <UART_SetConfig+0x1fe>
 801c09e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801c0a2:	d006      	beq.n	801c0b2 <UART_SetConfig+0x20a>
 801c0a4:	e00b      	b.n	801c0be <UART_SetConfig+0x216>
 801c0a6:	2300      	movs	r3, #0
 801c0a8:	77fb      	strb	r3, [r7, #31]
 801c0aa:	e0a1      	b.n	801c1f0 <UART_SetConfig+0x348>
 801c0ac:	2302      	movs	r3, #2
 801c0ae:	77fb      	strb	r3, [r7, #31]
 801c0b0:	e09e      	b.n	801c1f0 <UART_SetConfig+0x348>
 801c0b2:	2304      	movs	r3, #4
 801c0b4:	77fb      	strb	r3, [r7, #31]
 801c0b6:	e09b      	b.n	801c1f0 <UART_SetConfig+0x348>
 801c0b8:	2308      	movs	r3, #8
 801c0ba:	77fb      	strb	r3, [r7, #31]
 801c0bc:	e098      	b.n	801c1f0 <UART_SetConfig+0x348>
 801c0be:	2310      	movs	r3, #16
 801c0c0:	77fb      	strb	r3, [r7, #31]
 801c0c2:	e095      	b.n	801c1f0 <UART_SetConfig+0x348>
 801c0c4:	687b      	ldr	r3, [r7, #4]
 801c0c6:	681b      	ldr	r3, [r3, #0]
 801c0c8:	4a2f      	ldr	r2, [pc, #188]	; (801c188 <UART_SetConfig+0x2e0>)
 801c0ca:	4293      	cmp	r3, r2
 801c0cc:	d125      	bne.n	801c11a <UART_SetConfig+0x272>
 801c0ce:	4b29      	ldr	r3, [pc, #164]	; (801c174 <UART_SetConfig+0x2cc>)
 801c0d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c0d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 801c0d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801c0dc:	d017      	beq.n	801c10e <UART_SetConfig+0x266>
 801c0de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801c0e2:	d817      	bhi.n	801c114 <UART_SetConfig+0x26c>
 801c0e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801c0e8:	d00b      	beq.n	801c102 <UART_SetConfig+0x25a>
 801c0ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801c0ee:	d811      	bhi.n	801c114 <UART_SetConfig+0x26c>
 801c0f0:	2b00      	cmp	r3, #0
 801c0f2:	d003      	beq.n	801c0fc <UART_SetConfig+0x254>
 801c0f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c0f8:	d006      	beq.n	801c108 <UART_SetConfig+0x260>
 801c0fa:	e00b      	b.n	801c114 <UART_SetConfig+0x26c>
 801c0fc:	2301      	movs	r3, #1
 801c0fe:	77fb      	strb	r3, [r7, #31]
 801c100:	e076      	b.n	801c1f0 <UART_SetConfig+0x348>
 801c102:	2302      	movs	r3, #2
 801c104:	77fb      	strb	r3, [r7, #31]
 801c106:	e073      	b.n	801c1f0 <UART_SetConfig+0x348>
 801c108:	2304      	movs	r3, #4
 801c10a:	77fb      	strb	r3, [r7, #31]
 801c10c:	e070      	b.n	801c1f0 <UART_SetConfig+0x348>
 801c10e:	2308      	movs	r3, #8
 801c110:	77fb      	strb	r3, [r7, #31]
 801c112:	e06d      	b.n	801c1f0 <UART_SetConfig+0x348>
 801c114:	2310      	movs	r3, #16
 801c116:	77fb      	strb	r3, [r7, #31]
 801c118:	e06a      	b.n	801c1f0 <UART_SetConfig+0x348>
 801c11a:	687b      	ldr	r3, [r7, #4]
 801c11c:	681b      	ldr	r3, [r3, #0]
 801c11e:	4a1b      	ldr	r2, [pc, #108]	; (801c18c <UART_SetConfig+0x2e4>)
 801c120:	4293      	cmp	r3, r2
 801c122:	d138      	bne.n	801c196 <UART_SetConfig+0x2ee>
 801c124:	4b13      	ldr	r3, [pc, #76]	; (801c174 <UART_SetConfig+0x2cc>)
 801c126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c12a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 801c12e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801c132:	d017      	beq.n	801c164 <UART_SetConfig+0x2bc>
 801c134:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801c138:	d82a      	bhi.n	801c190 <UART_SetConfig+0x2e8>
 801c13a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801c13e:	d00b      	beq.n	801c158 <UART_SetConfig+0x2b0>
 801c140:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801c144:	d824      	bhi.n	801c190 <UART_SetConfig+0x2e8>
 801c146:	2b00      	cmp	r3, #0
 801c148:	d003      	beq.n	801c152 <UART_SetConfig+0x2aa>
 801c14a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c14e:	d006      	beq.n	801c15e <UART_SetConfig+0x2b6>
 801c150:	e01e      	b.n	801c190 <UART_SetConfig+0x2e8>
 801c152:	2300      	movs	r3, #0
 801c154:	77fb      	strb	r3, [r7, #31]
 801c156:	e04b      	b.n	801c1f0 <UART_SetConfig+0x348>
 801c158:	2302      	movs	r3, #2
 801c15a:	77fb      	strb	r3, [r7, #31]
 801c15c:	e048      	b.n	801c1f0 <UART_SetConfig+0x348>
 801c15e:	2304      	movs	r3, #4
 801c160:	77fb      	strb	r3, [r7, #31]
 801c162:	e045      	b.n	801c1f0 <UART_SetConfig+0x348>
 801c164:	2308      	movs	r3, #8
 801c166:	77fb      	strb	r3, [r7, #31]
 801c168:	e042      	b.n	801c1f0 <UART_SetConfig+0x348>
 801c16a:	bf00      	nop
 801c16c:	efff69f3 	.word	0xefff69f3
 801c170:	40011000 	.word	0x40011000
 801c174:	40023800 	.word	0x40023800
 801c178:	40004400 	.word	0x40004400
 801c17c:	40004800 	.word	0x40004800
 801c180:	40004c00 	.word	0x40004c00
 801c184:	40005000 	.word	0x40005000
 801c188:	40011400 	.word	0x40011400
 801c18c:	40007800 	.word	0x40007800
 801c190:	2310      	movs	r3, #16
 801c192:	77fb      	strb	r3, [r7, #31]
 801c194:	e02c      	b.n	801c1f0 <UART_SetConfig+0x348>
 801c196:	687b      	ldr	r3, [r7, #4]
 801c198:	681b      	ldr	r3, [r3, #0]
 801c19a:	4a72      	ldr	r2, [pc, #456]	; (801c364 <UART_SetConfig+0x4bc>)
 801c19c:	4293      	cmp	r3, r2
 801c19e:	d125      	bne.n	801c1ec <UART_SetConfig+0x344>
 801c1a0:	4b71      	ldr	r3, [pc, #452]	; (801c368 <UART_SetConfig+0x4c0>)
 801c1a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c1a6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801c1aa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 801c1ae:	d017      	beq.n	801c1e0 <UART_SetConfig+0x338>
 801c1b0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 801c1b4:	d817      	bhi.n	801c1e6 <UART_SetConfig+0x33e>
 801c1b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c1ba:	d00b      	beq.n	801c1d4 <UART_SetConfig+0x32c>
 801c1bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c1c0:	d811      	bhi.n	801c1e6 <UART_SetConfig+0x33e>
 801c1c2:	2b00      	cmp	r3, #0
 801c1c4:	d003      	beq.n	801c1ce <UART_SetConfig+0x326>
 801c1c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801c1ca:	d006      	beq.n	801c1da <UART_SetConfig+0x332>
 801c1cc:	e00b      	b.n	801c1e6 <UART_SetConfig+0x33e>
 801c1ce:	2300      	movs	r3, #0
 801c1d0:	77fb      	strb	r3, [r7, #31]
 801c1d2:	e00d      	b.n	801c1f0 <UART_SetConfig+0x348>
 801c1d4:	2302      	movs	r3, #2
 801c1d6:	77fb      	strb	r3, [r7, #31]
 801c1d8:	e00a      	b.n	801c1f0 <UART_SetConfig+0x348>
 801c1da:	2304      	movs	r3, #4
 801c1dc:	77fb      	strb	r3, [r7, #31]
 801c1de:	e007      	b.n	801c1f0 <UART_SetConfig+0x348>
 801c1e0:	2308      	movs	r3, #8
 801c1e2:	77fb      	strb	r3, [r7, #31]
 801c1e4:	e004      	b.n	801c1f0 <UART_SetConfig+0x348>
 801c1e6:	2310      	movs	r3, #16
 801c1e8:	77fb      	strb	r3, [r7, #31]
 801c1ea:	e001      	b.n	801c1f0 <UART_SetConfig+0x348>
 801c1ec:	2310      	movs	r3, #16
 801c1ee:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801c1f0:	687b      	ldr	r3, [r7, #4]
 801c1f2:	69db      	ldr	r3, [r3, #28]
 801c1f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c1f8:	d15b      	bne.n	801c2b2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 801c1fa:	7ffb      	ldrb	r3, [r7, #31]
 801c1fc:	2b08      	cmp	r3, #8
 801c1fe:	d828      	bhi.n	801c252 <UART_SetConfig+0x3aa>
 801c200:	a201      	add	r2, pc, #4	; (adr r2, 801c208 <UART_SetConfig+0x360>)
 801c202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c206:	bf00      	nop
 801c208:	0801c22d 	.word	0x0801c22d
 801c20c:	0801c235 	.word	0x0801c235
 801c210:	0801c23d 	.word	0x0801c23d
 801c214:	0801c253 	.word	0x0801c253
 801c218:	0801c243 	.word	0x0801c243
 801c21c:	0801c253 	.word	0x0801c253
 801c220:	0801c253 	.word	0x0801c253
 801c224:	0801c253 	.word	0x0801c253
 801c228:	0801c24b 	.word	0x0801c24b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801c22c:	f7fd fc3e 	bl	8019aac <HAL_RCC_GetPCLK1Freq>
 801c230:	61b8      	str	r0, [r7, #24]
        break;
 801c232:	e013      	b.n	801c25c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801c234:	f7fd fc4e 	bl	8019ad4 <HAL_RCC_GetPCLK2Freq>
 801c238:	61b8      	str	r0, [r7, #24]
        break;
 801c23a:	e00f      	b.n	801c25c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801c23c:	4b4b      	ldr	r3, [pc, #300]	; (801c36c <UART_SetConfig+0x4c4>)
 801c23e:	61bb      	str	r3, [r7, #24]
        break;
 801c240:	e00c      	b.n	801c25c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801c242:	f7fd fb61 	bl	8019908 <HAL_RCC_GetSysClockFreq>
 801c246:	61b8      	str	r0, [r7, #24]
        break;
 801c248:	e008      	b.n	801c25c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801c24a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801c24e:	61bb      	str	r3, [r7, #24]
        break;
 801c250:	e004      	b.n	801c25c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 801c252:	2300      	movs	r3, #0
 801c254:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 801c256:	2301      	movs	r3, #1
 801c258:	77bb      	strb	r3, [r7, #30]
        break;
 801c25a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801c25c:	69bb      	ldr	r3, [r7, #24]
 801c25e:	2b00      	cmp	r3, #0
 801c260:	d074      	beq.n	801c34c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801c262:	69bb      	ldr	r3, [r7, #24]
 801c264:	005a      	lsls	r2, r3, #1
 801c266:	687b      	ldr	r3, [r7, #4]
 801c268:	685b      	ldr	r3, [r3, #4]
 801c26a:	085b      	lsrs	r3, r3, #1
 801c26c:	441a      	add	r2, r3
 801c26e:	687b      	ldr	r3, [r7, #4]
 801c270:	685b      	ldr	r3, [r3, #4]
 801c272:	fbb2 f3f3 	udiv	r3, r2, r3
 801c276:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801c278:	693b      	ldr	r3, [r7, #16]
 801c27a:	2b0f      	cmp	r3, #15
 801c27c:	d916      	bls.n	801c2ac <UART_SetConfig+0x404>
 801c27e:	693b      	ldr	r3, [r7, #16]
 801c280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c284:	d212      	bcs.n	801c2ac <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801c286:	693b      	ldr	r3, [r7, #16]
 801c288:	b29b      	uxth	r3, r3
 801c28a:	f023 030f 	bic.w	r3, r3, #15
 801c28e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801c290:	693b      	ldr	r3, [r7, #16]
 801c292:	085b      	lsrs	r3, r3, #1
 801c294:	b29b      	uxth	r3, r3
 801c296:	f003 0307 	and.w	r3, r3, #7
 801c29a:	b29a      	uxth	r2, r3
 801c29c:	89fb      	ldrh	r3, [r7, #14]
 801c29e:	4313      	orrs	r3, r2
 801c2a0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 801c2a2:	687b      	ldr	r3, [r7, #4]
 801c2a4:	681b      	ldr	r3, [r3, #0]
 801c2a6:	89fa      	ldrh	r2, [r7, #14]
 801c2a8:	60da      	str	r2, [r3, #12]
 801c2aa:	e04f      	b.n	801c34c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 801c2ac:	2301      	movs	r3, #1
 801c2ae:	77bb      	strb	r3, [r7, #30]
 801c2b0:	e04c      	b.n	801c34c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 801c2b2:	7ffb      	ldrb	r3, [r7, #31]
 801c2b4:	2b08      	cmp	r3, #8
 801c2b6:	d828      	bhi.n	801c30a <UART_SetConfig+0x462>
 801c2b8:	a201      	add	r2, pc, #4	; (adr r2, 801c2c0 <UART_SetConfig+0x418>)
 801c2ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c2be:	bf00      	nop
 801c2c0:	0801c2e5 	.word	0x0801c2e5
 801c2c4:	0801c2ed 	.word	0x0801c2ed
 801c2c8:	0801c2f5 	.word	0x0801c2f5
 801c2cc:	0801c30b 	.word	0x0801c30b
 801c2d0:	0801c2fb 	.word	0x0801c2fb
 801c2d4:	0801c30b 	.word	0x0801c30b
 801c2d8:	0801c30b 	.word	0x0801c30b
 801c2dc:	0801c30b 	.word	0x0801c30b
 801c2e0:	0801c303 	.word	0x0801c303
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801c2e4:	f7fd fbe2 	bl	8019aac <HAL_RCC_GetPCLK1Freq>
 801c2e8:	61b8      	str	r0, [r7, #24]
        break;
 801c2ea:	e013      	b.n	801c314 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801c2ec:	f7fd fbf2 	bl	8019ad4 <HAL_RCC_GetPCLK2Freq>
 801c2f0:	61b8      	str	r0, [r7, #24]
        break;
 801c2f2:	e00f      	b.n	801c314 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801c2f4:	4b1d      	ldr	r3, [pc, #116]	; (801c36c <UART_SetConfig+0x4c4>)
 801c2f6:	61bb      	str	r3, [r7, #24]
        break;
 801c2f8:	e00c      	b.n	801c314 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801c2fa:	f7fd fb05 	bl	8019908 <HAL_RCC_GetSysClockFreq>
 801c2fe:	61b8      	str	r0, [r7, #24]
        break;
 801c300:	e008      	b.n	801c314 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801c302:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801c306:	61bb      	str	r3, [r7, #24]
        break;
 801c308:	e004      	b.n	801c314 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 801c30a:	2300      	movs	r3, #0
 801c30c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 801c30e:	2301      	movs	r3, #1
 801c310:	77bb      	strb	r3, [r7, #30]
        break;
 801c312:	bf00      	nop
    }

    if (pclk != 0U)
 801c314:	69bb      	ldr	r3, [r7, #24]
 801c316:	2b00      	cmp	r3, #0
 801c318:	d018      	beq.n	801c34c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801c31a:	687b      	ldr	r3, [r7, #4]
 801c31c:	685b      	ldr	r3, [r3, #4]
 801c31e:	085a      	lsrs	r2, r3, #1
 801c320:	69bb      	ldr	r3, [r7, #24]
 801c322:	441a      	add	r2, r3
 801c324:	687b      	ldr	r3, [r7, #4]
 801c326:	685b      	ldr	r3, [r3, #4]
 801c328:	fbb2 f3f3 	udiv	r3, r2, r3
 801c32c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801c32e:	693b      	ldr	r3, [r7, #16]
 801c330:	2b0f      	cmp	r3, #15
 801c332:	d909      	bls.n	801c348 <UART_SetConfig+0x4a0>
 801c334:	693b      	ldr	r3, [r7, #16]
 801c336:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c33a:	d205      	bcs.n	801c348 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801c33c:	693b      	ldr	r3, [r7, #16]
 801c33e:	b29a      	uxth	r2, r3
 801c340:	687b      	ldr	r3, [r7, #4]
 801c342:	681b      	ldr	r3, [r3, #0]
 801c344:	60da      	str	r2, [r3, #12]
 801c346:	e001      	b.n	801c34c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 801c348:	2301      	movs	r3, #1
 801c34a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801c34c:	687b      	ldr	r3, [r7, #4]
 801c34e:	2200      	movs	r2, #0
 801c350:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 801c352:	687b      	ldr	r3, [r7, #4]
 801c354:	2200      	movs	r2, #0
 801c356:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 801c358:	7fbb      	ldrb	r3, [r7, #30]
}
 801c35a:	4618      	mov	r0, r3
 801c35c:	3720      	adds	r7, #32
 801c35e:	46bd      	mov	sp, r7
 801c360:	bd80      	pop	{r7, pc}
 801c362:	bf00      	nop
 801c364:	40007c00 	.word	0x40007c00
 801c368:	40023800 	.word	0x40023800
 801c36c:	00f42400 	.word	0x00f42400

0801c370 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801c370:	b480      	push	{r7}
 801c372:	b083      	sub	sp, #12
 801c374:	af00      	add	r7, sp, #0
 801c376:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801c378:	687b      	ldr	r3, [r7, #4]
 801c37a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c37c:	f003 0301 	and.w	r3, r3, #1
 801c380:	2b00      	cmp	r3, #0
 801c382:	d00a      	beq.n	801c39a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801c384:	687b      	ldr	r3, [r7, #4]
 801c386:	681b      	ldr	r3, [r3, #0]
 801c388:	685b      	ldr	r3, [r3, #4]
 801c38a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801c38e:	687b      	ldr	r3, [r7, #4]
 801c390:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801c392:	687b      	ldr	r3, [r7, #4]
 801c394:	681b      	ldr	r3, [r3, #0]
 801c396:	430a      	orrs	r2, r1
 801c398:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801c39a:	687b      	ldr	r3, [r7, #4]
 801c39c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c39e:	f003 0302 	and.w	r3, r3, #2
 801c3a2:	2b00      	cmp	r3, #0
 801c3a4:	d00a      	beq.n	801c3bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801c3a6:	687b      	ldr	r3, [r7, #4]
 801c3a8:	681b      	ldr	r3, [r3, #0]
 801c3aa:	685b      	ldr	r3, [r3, #4]
 801c3ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801c3b0:	687b      	ldr	r3, [r7, #4]
 801c3b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c3b4:	687b      	ldr	r3, [r7, #4]
 801c3b6:	681b      	ldr	r3, [r3, #0]
 801c3b8:	430a      	orrs	r2, r1
 801c3ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801c3bc:	687b      	ldr	r3, [r7, #4]
 801c3be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c3c0:	f003 0304 	and.w	r3, r3, #4
 801c3c4:	2b00      	cmp	r3, #0
 801c3c6:	d00a      	beq.n	801c3de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801c3c8:	687b      	ldr	r3, [r7, #4]
 801c3ca:	681b      	ldr	r3, [r3, #0]
 801c3cc:	685b      	ldr	r3, [r3, #4]
 801c3ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801c3d2:	687b      	ldr	r3, [r7, #4]
 801c3d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801c3d6:	687b      	ldr	r3, [r7, #4]
 801c3d8:	681b      	ldr	r3, [r3, #0]
 801c3da:	430a      	orrs	r2, r1
 801c3dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801c3de:	687b      	ldr	r3, [r7, #4]
 801c3e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c3e2:	f003 0308 	and.w	r3, r3, #8
 801c3e6:	2b00      	cmp	r3, #0
 801c3e8:	d00a      	beq.n	801c400 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801c3ea:	687b      	ldr	r3, [r7, #4]
 801c3ec:	681b      	ldr	r3, [r3, #0]
 801c3ee:	685b      	ldr	r3, [r3, #4]
 801c3f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801c3f4:	687b      	ldr	r3, [r7, #4]
 801c3f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801c3f8:	687b      	ldr	r3, [r7, #4]
 801c3fa:	681b      	ldr	r3, [r3, #0]
 801c3fc:	430a      	orrs	r2, r1
 801c3fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801c400:	687b      	ldr	r3, [r7, #4]
 801c402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c404:	f003 0310 	and.w	r3, r3, #16
 801c408:	2b00      	cmp	r3, #0
 801c40a:	d00a      	beq.n	801c422 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801c40c:	687b      	ldr	r3, [r7, #4]
 801c40e:	681b      	ldr	r3, [r3, #0]
 801c410:	689b      	ldr	r3, [r3, #8]
 801c412:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801c416:	687b      	ldr	r3, [r7, #4]
 801c418:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801c41a:	687b      	ldr	r3, [r7, #4]
 801c41c:	681b      	ldr	r3, [r3, #0]
 801c41e:	430a      	orrs	r2, r1
 801c420:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801c422:	687b      	ldr	r3, [r7, #4]
 801c424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c426:	f003 0320 	and.w	r3, r3, #32
 801c42a:	2b00      	cmp	r3, #0
 801c42c:	d00a      	beq.n	801c444 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801c42e:	687b      	ldr	r3, [r7, #4]
 801c430:	681b      	ldr	r3, [r3, #0]
 801c432:	689b      	ldr	r3, [r3, #8]
 801c434:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801c438:	687b      	ldr	r3, [r7, #4]
 801c43a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801c43c:	687b      	ldr	r3, [r7, #4]
 801c43e:	681b      	ldr	r3, [r3, #0]
 801c440:	430a      	orrs	r2, r1
 801c442:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801c444:	687b      	ldr	r3, [r7, #4]
 801c446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c44c:	2b00      	cmp	r3, #0
 801c44e:	d01a      	beq.n	801c486 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801c450:	687b      	ldr	r3, [r7, #4]
 801c452:	681b      	ldr	r3, [r3, #0]
 801c454:	685b      	ldr	r3, [r3, #4]
 801c456:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801c45a:	687b      	ldr	r3, [r7, #4]
 801c45c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801c45e:	687b      	ldr	r3, [r7, #4]
 801c460:	681b      	ldr	r3, [r3, #0]
 801c462:	430a      	orrs	r2, r1
 801c464:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801c466:	687b      	ldr	r3, [r7, #4]
 801c468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c46a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801c46e:	d10a      	bne.n	801c486 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801c470:	687b      	ldr	r3, [r7, #4]
 801c472:	681b      	ldr	r3, [r3, #0]
 801c474:	685b      	ldr	r3, [r3, #4]
 801c476:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801c47a:	687b      	ldr	r3, [r7, #4]
 801c47c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801c47e:	687b      	ldr	r3, [r7, #4]
 801c480:	681b      	ldr	r3, [r3, #0]
 801c482:	430a      	orrs	r2, r1
 801c484:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801c486:	687b      	ldr	r3, [r7, #4]
 801c488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c48a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c48e:	2b00      	cmp	r3, #0
 801c490:	d00a      	beq.n	801c4a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801c492:	687b      	ldr	r3, [r7, #4]
 801c494:	681b      	ldr	r3, [r3, #0]
 801c496:	685b      	ldr	r3, [r3, #4]
 801c498:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801c49c:	687b      	ldr	r3, [r7, #4]
 801c49e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801c4a0:	687b      	ldr	r3, [r7, #4]
 801c4a2:	681b      	ldr	r3, [r3, #0]
 801c4a4:	430a      	orrs	r2, r1
 801c4a6:	605a      	str	r2, [r3, #4]
  }
}
 801c4a8:	bf00      	nop
 801c4aa:	370c      	adds	r7, #12
 801c4ac:	46bd      	mov	sp, r7
 801c4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c4b2:	4770      	bx	lr

0801c4b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801c4b4:	b580      	push	{r7, lr}
 801c4b6:	b086      	sub	sp, #24
 801c4b8:	af02      	add	r7, sp, #8
 801c4ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801c4bc:	687b      	ldr	r3, [r7, #4]
 801c4be:	2200      	movs	r2, #0
 801c4c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801c4c4:	f7f9 fb10 	bl	8015ae8 <HAL_GetTick>
 801c4c8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801c4ca:	687b      	ldr	r3, [r7, #4]
 801c4cc:	681b      	ldr	r3, [r3, #0]
 801c4ce:	681b      	ldr	r3, [r3, #0]
 801c4d0:	f003 0308 	and.w	r3, r3, #8
 801c4d4:	2b08      	cmp	r3, #8
 801c4d6:	d10e      	bne.n	801c4f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801c4d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801c4dc:	9300      	str	r3, [sp, #0]
 801c4de:	68fb      	ldr	r3, [r7, #12]
 801c4e0:	2200      	movs	r2, #0
 801c4e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801c4e6:	6878      	ldr	r0, [r7, #4]
 801c4e8:	f000 f831 	bl	801c54e <UART_WaitOnFlagUntilTimeout>
 801c4ec:	4603      	mov	r3, r0
 801c4ee:	2b00      	cmp	r3, #0
 801c4f0:	d001      	beq.n	801c4f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801c4f2:	2303      	movs	r3, #3
 801c4f4:	e027      	b.n	801c546 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801c4f6:	687b      	ldr	r3, [r7, #4]
 801c4f8:	681b      	ldr	r3, [r3, #0]
 801c4fa:	681b      	ldr	r3, [r3, #0]
 801c4fc:	f003 0304 	and.w	r3, r3, #4
 801c500:	2b04      	cmp	r3, #4
 801c502:	d10e      	bne.n	801c522 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801c504:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801c508:	9300      	str	r3, [sp, #0]
 801c50a:	68fb      	ldr	r3, [r7, #12]
 801c50c:	2200      	movs	r2, #0
 801c50e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801c512:	6878      	ldr	r0, [r7, #4]
 801c514:	f000 f81b 	bl	801c54e <UART_WaitOnFlagUntilTimeout>
 801c518:	4603      	mov	r3, r0
 801c51a:	2b00      	cmp	r3, #0
 801c51c:	d001      	beq.n	801c522 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801c51e:	2303      	movs	r3, #3
 801c520:	e011      	b.n	801c546 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801c522:	687b      	ldr	r3, [r7, #4]
 801c524:	2220      	movs	r2, #32
 801c526:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 801c528:	687b      	ldr	r3, [r7, #4]
 801c52a:	2220      	movs	r2, #32
 801c52c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c530:	687b      	ldr	r3, [r7, #4]
 801c532:	2200      	movs	r2, #0
 801c534:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801c536:	687b      	ldr	r3, [r7, #4]
 801c538:	2200      	movs	r2, #0
 801c53a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 801c53c:	687b      	ldr	r3, [r7, #4]
 801c53e:	2200      	movs	r2, #0
 801c540:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 801c544:	2300      	movs	r3, #0
}
 801c546:	4618      	mov	r0, r3
 801c548:	3710      	adds	r7, #16
 801c54a:	46bd      	mov	sp, r7
 801c54c:	bd80      	pop	{r7, pc}

0801c54e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801c54e:	b580      	push	{r7, lr}
 801c550:	b09c      	sub	sp, #112	; 0x70
 801c552:	af00      	add	r7, sp, #0
 801c554:	60f8      	str	r0, [r7, #12]
 801c556:	60b9      	str	r1, [r7, #8]
 801c558:	603b      	str	r3, [r7, #0]
 801c55a:	4613      	mov	r3, r2
 801c55c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801c55e:	e0a7      	b.n	801c6b0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801c560:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801c562:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c566:	f000 80a3 	beq.w	801c6b0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801c56a:	f7f9 fabd 	bl	8015ae8 <HAL_GetTick>
 801c56e:	4602      	mov	r2, r0
 801c570:	683b      	ldr	r3, [r7, #0]
 801c572:	1ad3      	subs	r3, r2, r3
 801c574:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801c576:	429a      	cmp	r2, r3
 801c578:	d302      	bcc.n	801c580 <UART_WaitOnFlagUntilTimeout+0x32>
 801c57a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801c57c:	2b00      	cmp	r3, #0
 801c57e:	d13f      	bne.n	801c600 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801c580:	68fb      	ldr	r3, [r7, #12]
 801c582:	681b      	ldr	r3, [r3, #0]
 801c584:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c586:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c588:	e853 3f00 	ldrex	r3, [r3]
 801c58c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801c58e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c590:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801c594:	667b      	str	r3, [r7, #100]	; 0x64
 801c596:	68fb      	ldr	r3, [r7, #12]
 801c598:	681b      	ldr	r3, [r3, #0]
 801c59a:	461a      	mov	r2, r3
 801c59c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c59e:	65fb      	str	r3, [r7, #92]	; 0x5c
 801c5a0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c5a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801c5a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801c5a6:	e841 2300 	strex	r3, r2, [r1]
 801c5aa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801c5ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c5ae:	2b00      	cmp	r3, #0
 801c5b0:	d1e6      	bne.n	801c580 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c5b2:	68fb      	ldr	r3, [r7, #12]
 801c5b4:	681b      	ldr	r3, [r3, #0]
 801c5b6:	3308      	adds	r3, #8
 801c5b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c5ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c5bc:	e853 3f00 	ldrex	r3, [r3]
 801c5c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801c5c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c5c4:	f023 0301 	bic.w	r3, r3, #1
 801c5c8:	663b      	str	r3, [r7, #96]	; 0x60
 801c5ca:	68fb      	ldr	r3, [r7, #12]
 801c5cc:	681b      	ldr	r3, [r3, #0]
 801c5ce:	3308      	adds	r3, #8
 801c5d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801c5d2:	64ba      	str	r2, [r7, #72]	; 0x48
 801c5d4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c5d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801c5d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c5da:	e841 2300 	strex	r3, r2, [r1]
 801c5de:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801c5e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c5e2:	2b00      	cmp	r3, #0
 801c5e4:	d1e5      	bne.n	801c5b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 801c5e6:	68fb      	ldr	r3, [r7, #12]
 801c5e8:	2220      	movs	r2, #32
 801c5ea:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 801c5ec:	68fb      	ldr	r3, [r7, #12]
 801c5ee:	2220      	movs	r2, #32
 801c5f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 801c5f4:	68fb      	ldr	r3, [r7, #12]
 801c5f6:	2200      	movs	r2, #0
 801c5f8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 801c5fc:	2303      	movs	r3, #3
 801c5fe:	e068      	b.n	801c6d2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801c600:	68fb      	ldr	r3, [r7, #12]
 801c602:	681b      	ldr	r3, [r3, #0]
 801c604:	681b      	ldr	r3, [r3, #0]
 801c606:	f003 0304 	and.w	r3, r3, #4
 801c60a:	2b00      	cmp	r3, #0
 801c60c:	d050      	beq.n	801c6b0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801c60e:	68fb      	ldr	r3, [r7, #12]
 801c610:	681b      	ldr	r3, [r3, #0]
 801c612:	69db      	ldr	r3, [r3, #28]
 801c614:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801c618:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801c61c:	d148      	bne.n	801c6b0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801c61e:	68fb      	ldr	r3, [r7, #12]
 801c620:	681b      	ldr	r3, [r3, #0]
 801c622:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801c626:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801c628:	68fb      	ldr	r3, [r7, #12]
 801c62a:	681b      	ldr	r3, [r3, #0]
 801c62c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c62e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c630:	e853 3f00 	ldrex	r3, [r3]
 801c634:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801c636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c638:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801c63c:	66fb      	str	r3, [r7, #108]	; 0x6c
 801c63e:	68fb      	ldr	r3, [r7, #12]
 801c640:	681b      	ldr	r3, [r3, #0]
 801c642:	461a      	mov	r2, r3
 801c644:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c646:	637b      	str	r3, [r7, #52]	; 0x34
 801c648:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c64a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801c64c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c64e:	e841 2300 	strex	r3, r2, [r1]
 801c652:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801c654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c656:	2b00      	cmp	r3, #0
 801c658:	d1e6      	bne.n	801c628 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c65a:	68fb      	ldr	r3, [r7, #12]
 801c65c:	681b      	ldr	r3, [r3, #0]
 801c65e:	3308      	adds	r3, #8
 801c660:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c662:	697b      	ldr	r3, [r7, #20]
 801c664:	e853 3f00 	ldrex	r3, [r3]
 801c668:	613b      	str	r3, [r7, #16]
   return(result);
 801c66a:	693b      	ldr	r3, [r7, #16]
 801c66c:	f023 0301 	bic.w	r3, r3, #1
 801c670:	66bb      	str	r3, [r7, #104]	; 0x68
 801c672:	68fb      	ldr	r3, [r7, #12]
 801c674:	681b      	ldr	r3, [r3, #0]
 801c676:	3308      	adds	r3, #8
 801c678:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801c67a:	623a      	str	r2, [r7, #32]
 801c67c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c67e:	69f9      	ldr	r1, [r7, #28]
 801c680:	6a3a      	ldr	r2, [r7, #32]
 801c682:	e841 2300 	strex	r3, r2, [r1]
 801c686:	61bb      	str	r3, [r7, #24]
   return(result);
 801c688:	69bb      	ldr	r3, [r7, #24]
 801c68a:	2b00      	cmp	r3, #0
 801c68c:	d1e5      	bne.n	801c65a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 801c68e:	68fb      	ldr	r3, [r7, #12]
 801c690:	2220      	movs	r2, #32
 801c692:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 801c694:	68fb      	ldr	r3, [r7, #12]
 801c696:	2220      	movs	r2, #32
 801c698:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801c69c:	68fb      	ldr	r3, [r7, #12]
 801c69e:	2220      	movs	r2, #32
 801c6a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801c6a4:	68fb      	ldr	r3, [r7, #12]
 801c6a6:	2200      	movs	r2, #0
 801c6a8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 801c6ac:	2303      	movs	r3, #3
 801c6ae:	e010      	b.n	801c6d2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801c6b0:	68fb      	ldr	r3, [r7, #12]
 801c6b2:	681b      	ldr	r3, [r3, #0]
 801c6b4:	69da      	ldr	r2, [r3, #28]
 801c6b6:	68bb      	ldr	r3, [r7, #8]
 801c6b8:	4013      	ands	r3, r2
 801c6ba:	68ba      	ldr	r2, [r7, #8]
 801c6bc:	429a      	cmp	r2, r3
 801c6be:	bf0c      	ite	eq
 801c6c0:	2301      	moveq	r3, #1
 801c6c2:	2300      	movne	r3, #0
 801c6c4:	b2db      	uxtb	r3, r3
 801c6c6:	461a      	mov	r2, r3
 801c6c8:	79fb      	ldrb	r3, [r7, #7]
 801c6ca:	429a      	cmp	r2, r3
 801c6cc:	f43f af48 	beq.w	801c560 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801c6d0:	2300      	movs	r3, #0
}
 801c6d2:	4618      	mov	r0, r3
 801c6d4:	3770      	adds	r7, #112	; 0x70
 801c6d6:	46bd      	mov	sp, r7
 801c6d8:	bd80      	pop	{r7, pc}
	...

0801c6dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801c6dc:	b480      	push	{r7}
 801c6de:	b097      	sub	sp, #92	; 0x5c
 801c6e0:	af00      	add	r7, sp, #0
 801c6e2:	60f8      	str	r0, [r7, #12]
 801c6e4:	60b9      	str	r1, [r7, #8]
 801c6e6:	4613      	mov	r3, r2
 801c6e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801c6ea:	68fb      	ldr	r3, [r7, #12]
 801c6ec:	68ba      	ldr	r2, [r7, #8]
 801c6ee:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 801c6f0:	68fb      	ldr	r3, [r7, #12]
 801c6f2:	88fa      	ldrh	r2, [r7, #6]
 801c6f4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 801c6f8:	68fb      	ldr	r3, [r7, #12]
 801c6fa:	88fa      	ldrh	r2, [r7, #6]
 801c6fc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 801c700:	68fb      	ldr	r3, [r7, #12]
 801c702:	2200      	movs	r2, #0
 801c704:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801c706:	68fb      	ldr	r3, [r7, #12]
 801c708:	689b      	ldr	r3, [r3, #8]
 801c70a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c70e:	d10e      	bne.n	801c72e <UART_Start_Receive_IT+0x52>
 801c710:	68fb      	ldr	r3, [r7, #12]
 801c712:	691b      	ldr	r3, [r3, #16]
 801c714:	2b00      	cmp	r3, #0
 801c716:	d105      	bne.n	801c724 <UART_Start_Receive_IT+0x48>
 801c718:	68fb      	ldr	r3, [r7, #12]
 801c71a:	f240 12ff 	movw	r2, #511	; 0x1ff
 801c71e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801c722:	e02d      	b.n	801c780 <UART_Start_Receive_IT+0xa4>
 801c724:	68fb      	ldr	r3, [r7, #12]
 801c726:	22ff      	movs	r2, #255	; 0xff
 801c728:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801c72c:	e028      	b.n	801c780 <UART_Start_Receive_IT+0xa4>
 801c72e:	68fb      	ldr	r3, [r7, #12]
 801c730:	689b      	ldr	r3, [r3, #8]
 801c732:	2b00      	cmp	r3, #0
 801c734:	d10d      	bne.n	801c752 <UART_Start_Receive_IT+0x76>
 801c736:	68fb      	ldr	r3, [r7, #12]
 801c738:	691b      	ldr	r3, [r3, #16]
 801c73a:	2b00      	cmp	r3, #0
 801c73c:	d104      	bne.n	801c748 <UART_Start_Receive_IT+0x6c>
 801c73e:	68fb      	ldr	r3, [r7, #12]
 801c740:	22ff      	movs	r2, #255	; 0xff
 801c742:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801c746:	e01b      	b.n	801c780 <UART_Start_Receive_IT+0xa4>
 801c748:	68fb      	ldr	r3, [r7, #12]
 801c74a:	227f      	movs	r2, #127	; 0x7f
 801c74c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801c750:	e016      	b.n	801c780 <UART_Start_Receive_IT+0xa4>
 801c752:	68fb      	ldr	r3, [r7, #12]
 801c754:	689b      	ldr	r3, [r3, #8]
 801c756:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801c75a:	d10d      	bne.n	801c778 <UART_Start_Receive_IT+0x9c>
 801c75c:	68fb      	ldr	r3, [r7, #12]
 801c75e:	691b      	ldr	r3, [r3, #16]
 801c760:	2b00      	cmp	r3, #0
 801c762:	d104      	bne.n	801c76e <UART_Start_Receive_IT+0x92>
 801c764:	68fb      	ldr	r3, [r7, #12]
 801c766:	227f      	movs	r2, #127	; 0x7f
 801c768:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801c76c:	e008      	b.n	801c780 <UART_Start_Receive_IT+0xa4>
 801c76e:	68fb      	ldr	r3, [r7, #12]
 801c770:	223f      	movs	r2, #63	; 0x3f
 801c772:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801c776:	e003      	b.n	801c780 <UART_Start_Receive_IT+0xa4>
 801c778:	68fb      	ldr	r3, [r7, #12]
 801c77a:	2200      	movs	r2, #0
 801c77c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801c780:	68fb      	ldr	r3, [r7, #12]
 801c782:	2200      	movs	r2, #0
 801c784:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801c788:	68fb      	ldr	r3, [r7, #12]
 801c78a:	2222      	movs	r2, #34	; 0x22
 801c78c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c790:	68fb      	ldr	r3, [r7, #12]
 801c792:	681b      	ldr	r3, [r3, #0]
 801c794:	3308      	adds	r3, #8
 801c796:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c79a:	e853 3f00 	ldrex	r3, [r3]
 801c79e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801c7a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c7a2:	f043 0301 	orr.w	r3, r3, #1
 801c7a6:	657b      	str	r3, [r7, #84]	; 0x54
 801c7a8:	68fb      	ldr	r3, [r7, #12]
 801c7aa:	681b      	ldr	r3, [r3, #0]
 801c7ac:	3308      	adds	r3, #8
 801c7ae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801c7b0:	64ba      	str	r2, [r7, #72]	; 0x48
 801c7b2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c7b4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801c7b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c7b8:	e841 2300 	strex	r3, r2, [r1]
 801c7bc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801c7be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c7c0:	2b00      	cmp	r3, #0
 801c7c2:	d1e5      	bne.n	801c790 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801c7c4:	68fb      	ldr	r3, [r7, #12]
 801c7c6:	689b      	ldr	r3, [r3, #8]
 801c7c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c7cc:	d107      	bne.n	801c7de <UART_Start_Receive_IT+0x102>
 801c7ce:	68fb      	ldr	r3, [r7, #12]
 801c7d0:	691b      	ldr	r3, [r3, #16]
 801c7d2:	2b00      	cmp	r3, #0
 801c7d4:	d103      	bne.n	801c7de <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 801c7d6:	68fb      	ldr	r3, [r7, #12]
 801c7d8:	4a21      	ldr	r2, [pc, #132]	; (801c860 <UART_Start_Receive_IT+0x184>)
 801c7da:	669a      	str	r2, [r3, #104]	; 0x68
 801c7dc:	e002      	b.n	801c7e4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 801c7de:	68fb      	ldr	r3, [r7, #12]
 801c7e0:	4a20      	ldr	r2, [pc, #128]	; (801c864 <UART_Start_Receive_IT+0x188>)
 801c7e2:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801c7e4:	68fb      	ldr	r3, [r7, #12]
 801c7e6:	691b      	ldr	r3, [r3, #16]
 801c7e8:	2b00      	cmp	r3, #0
 801c7ea:	d019      	beq.n	801c820 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 801c7ec:	68fb      	ldr	r3, [r7, #12]
 801c7ee:	681b      	ldr	r3, [r3, #0]
 801c7f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c7f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c7f4:	e853 3f00 	ldrex	r3, [r3]
 801c7f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801c7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c7fc:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 801c800:	64fb      	str	r3, [r7, #76]	; 0x4c
 801c802:	68fb      	ldr	r3, [r7, #12]
 801c804:	681b      	ldr	r3, [r3, #0]
 801c806:	461a      	mov	r2, r3
 801c808:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c80a:	637b      	str	r3, [r7, #52]	; 0x34
 801c80c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c80e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801c810:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c812:	e841 2300 	strex	r3, r2, [r1]
 801c816:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801c818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c81a:	2b00      	cmp	r3, #0
 801c81c:	d1e6      	bne.n	801c7ec <UART_Start_Receive_IT+0x110>
 801c81e:	e018      	b.n	801c852 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 801c820:	68fb      	ldr	r3, [r7, #12]
 801c822:	681b      	ldr	r3, [r3, #0]
 801c824:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c826:	697b      	ldr	r3, [r7, #20]
 801c828:	e853 3f00 	ldrex	r3, [r3]
 801c82c:	613b      	str	r3, [r7, #16]
   return(result);
 801c82e:	693b      	ldr	r3, [r7, #16]
 801c830:	f043 0320 	orr.w	r3, r3, #32
 801c834:	653b      	str	r3, [r7, #80]	; 0x50
 801c836:	68fb      	ldr	r3, [r7, #12]
 801c838:	681b      	ldr	r3, [r3, #0]
 801c83a:	461a      	mov	r2, r3
 801c83c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c83e:	623b      	str	r3, [r7, #32]
 801c840:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c842:	69f9      	ldr	r1, [r7, #28]
 801c844:	6a3a      	ldr	r2, [r7, #32]
 801c846:	e841 2300 	strex	r3, r2, [r1]
 801c84a:	61bb      	str	r3, [r7, #24]
   return(result);
 801c84c:	69bb      	ldr	r3, [r7, #24]
 801c84e:	2b00      	cmp	r3, #0
 801c850:	d1e6      	bne.n	801c820 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 801c852:	2300      	movs	r3, #0
}
 801c854:	4618      	mov	r0, r3
 801c856:	375c      	adds	r7, #92	; 0x5c
 801c858:	46bd      	mov	sp, r7
 801c85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c85e:	4770      	bx	lr
 801c860:	0801cb27 	.word	0x0801cb27
 801c864:	0801c9b9 	.word	0x0801c9b9

0801c868 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801c868:	b480      	push	{r7}
 801c86a:	b095      	sub	sp, #84	; 0x54
 801c86c:	af00      	add	r7, sp, #0
 801c86e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801c870:	687b      	ldr	r3, [r7, #4]
 801c872:	681b      	ldr	r3, [r3, #0]
 801c874:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c878:	e853 3f00 	ldrex	r3, [r3]
 801c87c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801c87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c880:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801c884:	64fb      	str	r3, [r7, #76]	; 0x4c
 801c886:	687b      	ldr	r3, [r7, #4]
 801c888:	681b      	ldr	r3, [r3, #0]
 801c88a:	461a      	mov	r2, r3
 801c88c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c88e:	643b      	str	r3, [r7, #64]	; 0x40
 801c890:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c892:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801c894:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801c896:	e841 2300 	strex	r3, r2, [r1]
 801c89a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801c89c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c89e:	2b00      	cmp	r3, #0
 801c8a0:	d1e6      	bne.n	801c870 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c8a2:	687b      	ldr	r3, [r7, #4]
 801c8a4:	681b      	ldr	r3, [r3, #0]
 801c8a6:	3308      	adds	r3, #8
 801c8a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c8aa:	6a3b      	ldr	r3, [r7, #32]
 801c8ac:	e853 3f00 	ldrex	r3, [r3]
 801c8b0:	61fb      	str	r3, [r7, #28]
   return(result);
 801c8b2:	69fb      	ldr	r3, [r7, #28]
 801c8b4:	f023 0301 	bic.w	r3, r3, #1
 801c8b8:	64bb      	str	r3, [r7, #72]	; 0x48
 801c8ba:	687b      	ldr	r3, [r7, #4]
 801c8bc:	681b      	ldr	r3, [r3, #0]
 801c8be:	3308      	adds	r3, #8
 801c8c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c8c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 801c8c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c8c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801c8c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c8ca:	e841 2300 	strex	r3, r2, [r1]
 801c8ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801c8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c8d2:	2b00      	cmp	r3, #0
 801c8d4:	d1e5      	bne.n	801c8a2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c8d6:	687b      	ldr	r3, [r7, #4]
 801c8d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c8da:	2b01      	cmp	r3, #1
 801c8dc:	d118      	bne.n	801c910 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c8de:	687b      	ldr	r3, [r7, #4]
 801c8e0:	681b      	ldr	r3, [r3, #0]
 801c8e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c8e4:	68fb      	ldr	r3, [r7, #12]
 801c8e6:	e853 3f00 	ldrex	r3, [r3]
 801c8ea:	60bb      	str	r3, [r7, #8]
   return(result);
 801c8ec:	68bb      	ldr	r3, [r7, #8]
 801c8ee:	f023 0310 	bic.w	r3, r3, #16
 801c8f2:	647b      	str	r3, [r7, #68]	; 0x44
 801c8f4:	687b      	ldr	r3, [r7, #4]
 801c8f6:	681b      	ldr	r3, [r3, #0]
 801c8f8:	461a      	mov	r2, r3
 801c8fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c8fc:	61bb      	str	r3, [r7, #24]
 801c8fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c900:	6979      	ldr	r1, [r7, #20]
 801c902:	69ba      	ldr	r2, [r7, #24]
 801c904:	e841 2300 	strex	r3, r2, [r1]
 801c908:	613b      	str	r3, [r7, #16]
   return(result);
 801c90a:	693b      	ldr	r3, [r7, #16]
 801c90c:	2b00      	cmp	r3, #0
 801c90e:	d1e6      	bne.n	801c8de <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801c910:	687b      	ldr	r3, [r7, #4]
 801c912:	2220      	movs	r2, #32
 801c914:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c918:	687b      	ldr	r3, [r7, #4]
 801c91a:	2200      	movs	r2, #0
 801c91c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801c91e:	687b      	ldr	r3, [r7, #4]
 801c920:	2200      	movs	r2, #0
 801c922:	669a      	str	r2, [r3, #104]	; 0x68
}
 801c924:	bf00      	nop
 801c926:	3754      	adds	r7, #84	; 0x54
 801c928:	46bd      	mov	sp, r7
 801c92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c92e:	4770      	bx	lr

0801c930 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801c930:	b580      	push	{r7, lr}
 801c932:	b084      	sub	sp, #16
 801c934:	af00      	add	r7, sp, #0
 801c936:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801c938:	687b      	ldr	r3, [r7, #4]
 801c93a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c93c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801c93e:	68fb      	ldr	r3, [r7, #12]
 801c940:	2200      	movs	r2, #0
 801c942:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 801c946:	68fb      	ldr	r3, [r7, #12]
 801c948:	2200      	movs	r2, #0
 801c94a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801c94e:	68fb      	ldr	r3, [r7, #12]
 801c950:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801c954:	68f8      	ldr	r0, [r7, #12]
 801c956:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801c958:	bf00      	nop
 801c95a:	3710      	adds	r7, #16
 801c95c:	46bd      	mov	sp, r7
 801c95e:	bd80      	pop	{r7, pc}

0801c960 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801c960:	b580      	push	{r7, lr}
 801c962:	b088      	sub	sp, #32
 801c964:	af00      	add	r7, sp, #0
 801c966:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801c968:	687b      	ldr	r3, [r7, #4]
 801c96a:	681b      	ldr	r3, [r3, #0]
 801c96c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c96e:	68fb      	ldr	r3, [r7, #12]
 801c970:	e853 3f00 	ldrex	r3, [r3]
 801c974:	60bb      	str	r3, [r7, #8]
   return(result);
 801c976:	68bb      	ldr	r3, [r7, #8]
 801c978:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801c97c:	61fb      	str	r3, [r7, #28]
 801c97e:	687b      	ldr	r3, [r7, #4]
 801c980:	681b      	ldr	r3, [r3, #0]
 801c982:	461a      	mov	r2, r3
 801c984:	69fb      	ldr	r3, [r7, #28]
 801c986:	61bb      	str	r3, [r7, #24]
 801c988:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c98a:	6979      	ldr	r1, [r7, #20]
 801c98c:	69ba      	ldr	r2, [r7, #24]
 801c98e:	e841 2300 	strex	r3, r2, [r1]
 801c992:	613b      	str	r3, [r7, #16]
   return(result);
 801c994:	693b      	ldr	r3, [r7, #16]
 801c996:	2b00      	cmp	r3, #0
 801c998:	d1e6      	bne.n	801c968 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801c99a:	687b      	ldr	r3, [r7, #4]
 801c99c:	2220      	movs	r2, #32
 801c99e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801c9a0:	687b      	ldr	r3, [r7, #4]
 801c9a2:	2200      	movs	r2, #0
 801c9a4:	66da      	str	r2, [r3, #108]	; 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 801c9a6:	687b      	ldr	r3, [r7, #4]
 801c9a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801c9ac:	6878      	ldr	r0, [r7, #4]
 801c9ae:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801c9b0:	bf00      	nop
 801c9b2:	3720      	adds	r7, #32
 801c9b4:	46bd      	mov	sp, r7
 801c9b6:	bd80      	pop	{r7, pc}

0801c9b8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801c9b8:	b580      	push	{r7, lr}
 801c9ba:	b096      	sub	sp, #88	; 0x58
 801c9bc:	af00      	add	r7, sp, #0
 801c9be:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801c9c0:	687b      	ldr	r3, [r7, #4]
 801c9c2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801c9c6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801c9ca:	687b      	ldr	r3, [r7, #4]
 801c9cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c9d0:	2b22      	cmp	r3, #34	; 0x22
 801c9d2:	f040 809c 	bne.w	801cb0e <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801c9d6:	687b      	ldr	r3, [r7, #4]
 801c9d8:	681b      	ldr	r3, [r3, #0]
 801c9da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c9dc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801c9e0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 801c9e4:	b2d9      	uxtb	r1, r3
 801c9e6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801c9ea:	b2da      	uxtb	r2, r3
 801c9ec:	687b      	ldr	r3, [r7, #4]
 801c9ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c9f0:	400a      	ands	r2, r1
 801c9f2:	b2d2      	uxtb	r2, r2
 801c9f4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801c9f6:	687b      	ldr	r3, [r7, #4]
 801c9f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c9fa:	1c5a      	adds	r2, r3, #1
 801c9fc:	687b      	ldr	r3, [r7, #4]
 801c9fe:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 801ca00:	687b      	ldr	r3, [r7, #4]
 801ca02:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801ca06:	b29b      	uxth	r3, r3
 801ca08:	3b01      	subs	r3, #1
 801ca0a:	b29a      	uxth	r2, r3
 801ca0c:	687b      	ldr	r3, [r7, #4]
 801ca0e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 801ca12:	687b      	ldr	r3, [r7, #4]
 801ca14:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801ca18:	b29b      	uxth	r3, r3
 801ca1a:	2b00      	cmp	r3, #0
 801ca1c:	d17f      	bne.n	801cb1e <UART_RxISR_8BIT+0x166>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801ca1e:	687b      	ldr	r3, [r7, #4]
 801ca20:	681b      	ldr	r3, [r3, #0]
 801ca22:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ca24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ca26:	e853 3f00 	ldrex	r3, [r3]
 801ca2a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801ca2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ca2e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801ca32:	653b      	str	r3, [r7, #80]	; 0x50
 801ca34:	687b      	ldr	r3, [r7, #4]
 801ca36:	681b      	ldr	r3, [r3, #0]
 801ca38:	461a      	mov	r2, r3
 801ca3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ca3c:	647b      	str	r3, [r7, #68]	; 0x44
 801ca3e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ca40:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801ca42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ca44:	e841 2300 	strex	r3, r2, [r1]
 801ca48:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801ca4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ca4c:	2b00      	cmp	r3, #0
 801ca4e:	d1e6      	bne.n	801ca1e <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ca50:	687b      	ldr	r3, [r7, #4]
 801ca52:	681b      	ldr	r3, [r3, #0]
 801ca54:	3308      	adds	r3, #8
 801ca56:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ca58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ca5a:	e853 3f00 	ldrex	r3, [r3]
 801ca5e:	623b      	str	r3, [r7, #32]
   return(result);
 801ca60:	6a3b      	ldr	r3, [r7, #32]
 801ca62:	f023 0301 	bic.w	r3, r3, #1
 801ca66:	64fb      	str	r3, [r7, #76]	; 0x4c
 801ca68:	687b      	ldr	r3, [r7, #4]
 801ca6a:	681b      	ldr	r3, [r3, #0]
 801ca6c:	3308      	adds	r3, #8
 801ca6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801ca70:	633a      	str	r2, [r7, #48]	; 0x30
 801ca72:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ca74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801ca76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ca78:	e841 2300 	strex	r3, r2, [r1]
 801ca7c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801ca7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ca80:	2b00      	cmp	r3, #0
 801ca82:	d1e5      	bne.n	801ca50 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801ca84:	687b      	ldr	r3, [r7, #4]
 801ca86:	2220      	movs	r2, #32
 801ca88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801ca8c:	687b      	ldr	r3, [r7, #4]
 801ca8e:	2200      	movs	r2, #0
 801ca90:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801ca92:	687b      	ldr	r3, [r7, #4]
 801ca94:	2200      	movs	r2, #0
 801ca96:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801ca98:	687b      	ldr	r3, [r7, #4]
 801ca9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ca9c:	2b01      	cmp	r3, #1
 801ca9e:	d130      	bne.n	801cb02 <UART_RxISR_8BIT+0x14a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801caa0:	687b      	ldr	r3, [r7, #4]
 801caa2:	2200      	movs	r2, #0
 801caa4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801caa6:	687b      	ldr	r3, [r7, #4]
 801caa8:	681b      	ldr	r3, [r3, #0]
 801caaa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801caac:	693b      	ldr	r3, [r7, #16]
 801caae:	e853 3f00 	ldrex	r3, [r3]
 801cab2:	60fb      	str	r3, [r7, #12]
   return(result);
 801cab4:	68fb      	ldr	r3, [r7, #12]
 801cab6:	f023 0310 	bic.w	r3, r3, #16
 801caba:	64bb      	str	r3, [r7, #72]	; 0x48
 801cabc:	687b      	ldr	r3, [r7, #4]
 801cabe:	681b      	ldr	r3, [r3, #0]
 801cac0:	461a      	mov	r2, r3
 801cac2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801cac4:	61fb      	str	r3, [r7, #28]
 801cac6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801cac8:	69b9      	ldr	r1, [r7, #24]
 801caca:	69fa      	ldr	r2, [r7, #28]
 801cacc:	e841 2300 	strex	r3, r2, [r1]
 801cad0:	617b      	str	r3, [r7, #20]
   return(result);
 801cad2:	697b      	ldr	r3, [r7, #20]
 801cad4:	2b00      	cmp	r3, #0
 801cad6:	d1e6      	bne.n	801caa6 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801cad8:	687b      	ldr	r3, [r7, #4]
 801cada:	681b      	ldr	r3, [r3, #0]
 801cadc:	69db      	ldr	r3, [r3, #28]
 801cade:	f003 0310 	and.w	r3, r3, #16
 801cae2:	2b10      	cmp	r3, #16
 801cae4:	d103      	bne.n	801caee <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801cae6:	687b      	ldr	r3, [r7, #4]
 801cae8:	681b      	ldr	r3, [r3, #0]
 801caea:	2210      	movs	r2, #16
 801caec:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801caee:	687b      	ldr	r3, [r7, #4]
 801caf0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801caf4:	687a      	ldr	r2, [r7, #4]
 801caf6:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 801cafa:	4611      	mov	r1, r2
 801cafc:	6878      	ldr	r0, [r7, #4]
 801cafe:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801cb00:	e00d      	b.n	801cb1e <UART_RxISR_8BIT+0x166>
        huart->RxCpltCallback(huart);
 801cb02:	687b      	ldr	r3, [r7, #4]
 801cb04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801cb08:	6878      	ldr	r0, [r7, #4]
 801cb0a:	4798      	blx	r3
}
 801cb0c:	e007      	b.n	801cb1e <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801cb0e:	687b      	ldr	r3, [r7, #4]
 801cb10:	681b      	ldr	r3, [r3, #0]
 801cb12:	699a      	ldr	r2, [r3, #24]
 801cb14:	687b      	ldr	r3, [r7, #4]
 801cb16:	681b      	ldr	r3, [r3, #0]
 801cb18:	f042 0208 	orr.w	r2, r2, #8
 801cb1c:	619a      	str	r2, [r3, #24]
}
 801cb1e:	bf00      	nop
 801cb20:	3758      	adds	r7, #88	; 0x58
 801cb22:	46bd      	mov	sp, r7
 801cb24:	bd80      	pop	{r7, pc}

0801cb26 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801cb26:	b580      	push	{r7, lr}
 801cb28:	b096      	sub	sp, #88	; 0x58
 801cb2a:	af00      	add	r7, sp, #0
 801cb2c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801cb2e:	687b      	ldr	r3, [r7, #4]
 801cb30:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801cb34:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801cb38:	687b      	ldr	r3, [r7, #4]
 801cb3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801cb3e:	2b22      	cmp	r3, #34	; 0x22
 801cb40:	f040 809c 	bne.w	801cc7c <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801cb44:	687b      	ldr	r3, [r7, #4]
 801cb46:	681b      	ldr	r3, [r3, #0]
 801cb48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cb4a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801cb4e:	687b      	ldr	r3, [r7, #4]
 801cb50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cb52:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 801cb54:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 801cb58:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801cb5c:	4013      	ands	r3, r2
 801cb5e:	b29a      	uxth	r2, r3
 801cb60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801cb62:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801cb64:	687b      	ldr	r3, [r7, #4]
 801cb66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cb68:	1c9a      	adds	r2, r3, #2
 801cb6a:	687b      	ldr	r3, [r7, #4]
 801cb6c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 801cb6e:	687b      	ldr	r3, [r7, #4]
 801cb70:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801cb74:	b29b      	uxth	r3, r3
 801cb76:	3b01      	subs	r3, #1
 801cb78:	b29a      	uxth	r2, r3
 801cb7a:	687b      	ldr	r3, [r7, #4]
 801cb7c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 801cb80:	687b      	ldr	r3, [r7, #4]
 801cb82:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801cb86:	b29b      	uxth	r3, r3
 801cb88:	2b00      	cmp	r3, #0
 801cb8a:	d17f      	bne.n	801cc8c <UART_RxISR_16BIT+0x166>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801cb8c:	687b      	ldr	r3, [r7, #4]
 801cb8e:	681b      	ldr	r3, [r3, #0]
 801cb90:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801cb92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cb94:	e853 3f00 	ldrex	r3, [r3]
 801cb98:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801cb9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cb9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801cba0:	64fb      	str	r3, [r7, #76]	; 0x4c
 801cba2:	687b      	ldr	r3, [r7, #4]
 801cba4:	681b      	ldr	r3, [r3, #0]
 801cba6:	461a      	mov	r2, r3
 801cba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801cbaa:	643b      	str	r3, [r7, #64]	; 0x40
 801cbac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801cbae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801cbb0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801cbb2:	e841 2300 	strex	r3, r2, [r1]
 801cbb6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801cbb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cbba:	2b00      	cmp	r3, #0
 801cbbc:	d1e6      	bne.n	801cb8c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801cbbe:	687b      	ldr	r3, [r7, #4]
 801cbc0:	681b      	ldr	r3, [r3, #0]
 801cbc2:	3308      	adds	r3, #8
 801cbc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801cbc6:	6a3b      	ldr	r3, [r7, #32]
 801cbc8:	e853 3f00 	ldrex	r3, [r3]
 801cbcc:	61fb      	str	r3, [r7, #28]
   return(result);
 801cbce:	69fb      	ldr	r3, [r7, #28]
 801cbd0:	f023 0301 	bic.w	r3, r3, #1
 801cbd4:	64bb      	str	r3, [r7, #72]	; 0x48
 801cbd6:	687b      	ldr	r3, [r7, #4]
 801cbd8:	681b      	ldr	r3, [r3, #0]
 801cbda:	3308      	adds	r3, #8
 801cbdc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801cbde:	62fa      	str	r2, [r7, #44]	; 0x2c
 801cbe0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801cbe2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801cbe4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801cbe6:	e841 2300 	strex	r3, r2, [r1]
 801cbea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801cbec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cbee:	2b00      	cmp	r3, #0
 801cbf0:	d1e5      	bne.n	801cbbe <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801cbf2:	687b      	ldr	r3, [r7, #4]
 801cbf4:	2220      	movs	r2, #32
 801cbf6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801cbfa:	687b      	ldr	r3, [r7, #4]
 801cbfc:	2200      	movs	r2, #0
 801cbfe:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801cc00:	687b      	ldr	r3, [r7, #4]
 801cc02:	2200      	movs	r2, #0
 801cc04:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801cc06:	687b      	ldr	r3, [r7, #4]
 801cc08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801cc0a:	2b01      	cmp	r3, #1
 801cc0c:	d130      	bne.n	801cc70 <UART_RxISR_16BIT+0x14a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801cc0e:	687b      	ldr	r3, [r7, #4]
 801cc10:	2200      	movs	r2, #0
 801cc12:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801cc14:	687b      	ldr	r3, [r7, #4]
 801cc16:	681b      	ldr	r3, [r3, #0]
 801cc18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801cc1a:	68fb      	ldr	r3, [r7, #12]
 801cc1c:	e853 3f00 	ldrex	r3, [r3]
 801cc20:	60bb      	str	r3, [r7, #8]
   return(result);
 801cc22:	68bb      	ldr	r3, [r7, #8]
 801cc24:	f023 0310 	bic.w	r3, r3, #16
 801cc28:	647b      	str	r3, [r7, #68]	; 0x44
 801cc2a:	687b      	ldr	r3, [r7, #4]
 801cc2c:	681b      	ldr	r3, [r3, #0]
 801cc2e:	461a      	mov	r2, r3
 801cc30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cc32:	61bb      	str	r3, [r7, #24]
 801cc34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801cc36:	6979      	ldr	r1, [r7, #20]
 801cc38:	69ba      	ldr	r2, [r7, #24]
 801cc3a:	e841 2300 	strex	r3, r2, [r1]
 801cc3e:	613b      	str	r3, [r7, #16]
   return(result);
 801cc40:	693b      	ldr	r3, [r7, #16]
 801cc42:	2b00      	cmp	r3, #0
 801cc44:	d1e6      	bne.n	801cc14 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801cc46:	687b      	ldr	r3, [r7, #4]
 801cc48:	681b      	ldr	r3, [r3, #0]
 801cc4a:	69db      	ldr	r3, [r3, #28]
 801cc4c:	f003 0310 	and.w	r3, r3, #16
 801cc50:	2b10      	cmp	r3, #16
 801cc52:	d103      	bne.n	801cc5c <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801cc54:	687b      	ldr	r3, [r7, #4]
 801cc56:	681b      	ldr	r3, [r3, #0]
 801cc58:	2210      	movs	r2, #16
 801cc5a:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801cc5c:	687b      	ldr	r3, [r7, #4]
 801cc5e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801cc62:	687a      	ldr	r2, [r7, #4]
 801cc64:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 801cc68:	4611      	mov	r1, r2
 801cc6a:	6878      	ldr	r0, [r7, #4]
 801cc6c:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801cc6e:	e00d      	b.n	801cc8c <UART_RxISR_16BIT+0x166>
        huart->RxCpltCallback(huart);
 801cc70:	687b      	ldr	r3, [r7, #4]
 801cc72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801cc76:	6878      	ldr	r0, [r7, #4]
 801cc78:	4798      	blx	r3
}
 801cc7a:	e007      	b.n	801cc8c <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801cc7c:	687b      	ldr	r3, [r7, #4]
 801cc7e:	681b      	ldr	r3, [r3, #0]
 801cc80:	699a      	ldr	r2, [r3, #24]
 801cc82:	687b      	ldr	r3, [r7, #4]
 801cc84:	681b      	ldr	r3, [r3, #0]
 801cc86:	f042 0208 	orr.w	r2, r2, #8
 801cc8a:	619a      	str	r2, [r3, #24]
}
 801cc8c:	bf00      	nop
 801cc8e:	3758      	adds	r7, #88	; 0x58
 801cc90:	46bd      	mov	sp, r7
 801cc92:	bd80      	pop	{r7, pc}

0801cc94 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801cc94:	b580      	push	{r7, lr}
 801cc96:	b08c      	sub	sp, #48	; 0x30
 801cc98:	af00      	add	r7, sp, #0
 801cc9a:	60f8      	str	r0, [r7, #12]
 801cc9c:	60b9      	str	r1, [r7, #8]
 801cc9e:	4613      	mov	r3, r2
 801cca0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801cca2:	68fb      	ldr	r3, [r7, #12]
 801cca4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801cca8:	2b20      	cmp	r3, #32
 801ccaa:	d142      	bne.n	801cd32 <HAL_UARTEx_ReceiveToIdle_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 801ccac:	68bb      	ldr	r3, [r7, #8]
 801ccae:	2b00      	cmp	r3, #0
 801ccb0:	d002      	beq.n	801ccb8 <HAL_UARTEx_ReceiveToIdle_IT+0x24>
 801ccb2:	88fb      	ldrh	r3, [r7, #6]
 801ccb4:	2b00      	cmp	r3, #0
 801ccb6:	d101      	bne.n	801ccbc <HAL_UARTEx_ReceiveToIdle_IT+0x28>
    {
      return HAL_ERROR;
 801ccb8:	2301      	movs	r3, #1
 801ccba:	e03b      	b.n	801cd34 <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 801ccbc:	68fb      	ldr	r3, [r7, #12]
 801ccbe:	2201      	movs	r2, #1
 801ccc0:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 801ccc2:	68fb      	ldr	r3, [r7, #12]
 801ccc4:	2200      	movs	r2, #0
 801ccc6:	665a      	str	r2, [r3, #100]	; 0x64

    status =  UART_Start_Receive_IT(huart, pData, Size);
 801ccc8:	88fb      	ldrh	r3, [r7, #6]
 801ccca:	461a      	mov	r2, r3
 801cccc:	68b9      	ldr	r1, [r7, #8]
 801ccce:	68f8      	ldr	r0, [r7, #12]
 801ccd0:	f7ff fd04 	bl	801c6dc <UART_Start_Receive_IT>
 801ccd4:	4603      	mov	r3, r0
 801ccd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 801ccda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801ccde:	2b00      	cmp	r3, #0
 801cce0:	d124      	bne.n	801cd2c <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801cce2:	68fb      	ldr	r3, [r7, #12]
 801cce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801cce6:	2b01      	cmp	r3, #1
 801cce8:	d11d      	bne.n	801cd26 <HAL_UARTEx_ReceiveToIdle_IT+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801ccea:	68fb      	ldr	r3, [r7, #12]
 801ccec:	681b      	ldr	r3, [r3, #0]
 801ccee:	2210      	movs	r2, #16
 801ccf0:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801ccf2:	68fb      	ldr	r3, [r7, #12]
 801ccf4:	681b      	ldr	r3, [r3, #0]
 801ccf6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ccf8:	69bb      	ldr	r3, [r7, #24]
 801ccfa:	e853 3f00 	ldrex	r3, [r3]
 801ccfe:	617b      	str	r3, [r7, #20]
   return(result);
 801cd00:	697b      	ldr	r3, [r7, #20]
 801cd02:	f043 0310 	orr.w	r3, r3, #16
 801cd06:	62bb      	str	r3, [r7, #40]	; 0x28
 801cd08:	68fb      	ldr	r3, [r7, #12]
 801cd0a:	681b      	ldr	r3, [r3, #0]
 801cd0c:	461a      	mov	r2, r3
 801cd0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cd10:	627b      	str	r3, [r7, #36]	; 0x24
 801cd12:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801cd14:	6a39      	ldr	r1, [r7, #32]
 801cd16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cd18:	e841 2300 	strex	r3, r2, [r1]
 801cd1c:	61fb      	str	r3, [r7, #28]
   return(result);
 801cd1e:	69fb      	ldr	r3, [r7, #28]
 801cd20:	2b00      	cmp	r3, #0
 801cd22:	d1e6      	bne.n	801ccf2 <HAL_UARTEx_ReceiveToIdle_IT+0x5e>
 801cd24:	e002      	b.n	801cd2c <HAL_UARTEx_ReceiveToIdle_IT+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 801cd26:	2301      	movs	r3, #1
 801cd28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 801cd2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801cd30:	e000      	b.n	801cd34 <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 801cd32:	2302      	movs	r3, #2
  }
}
 801cd34:	4618      	mov	r0, r3
 801cd36:	3730      	adds	r7, #48	; 0x30
 801cd38:	46bd      	mov	sp, r7
 801cd3a:	bd80      	pop	{r7, pc}

0801cd3c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 801cd3c:	b580      	push	{r7, lr}
 801cd3e:	b084      	sub	sp, #16
 801cd40:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 801cd42:	4b2f      	ldr	r3, [pc, #188]	; (801ce00 <MX_LWIP_Init+0xc4>)
 801cd44:	22c0      	movs	r2, #192	; 0xc0
 801cd46:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 801cd48:	4b2d      	ldr	r3, [pc, #180]	; (801ce00 <MX_LWIP_Init+0xc4>)
 801cd4a:	22a8      	movs	r2, #168	; 0xa8
 801cd4c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 12;
 801cd4e:	4b2c      	ldr	r3, [pc, #176]	; (801ce00 <MX_LWIP_Init+0xc4>)
 801cd50:	220c      	movs	r2, #12
 801cd52:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 100;
 801cd54:	4b2a      	ldr	r3, [pc, #168]	; (801ce00 <MX_LWIP_Init+0xc4>)
 801cd56:	2264      	movs	r2, #100	; 0x64
 801cd58:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 801cd5a:	4b2a      	ldr	r3, [pc, #168]	; (801ce04 <MX_LWIP_Init+0xc8>)
 801cd5c:	22ff      	movs	r2, #255	; 0xff
 801cd5e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 801cd60:	4b28      	ldr	r3, [pc, #160]	; (801ce04 <MX_LWIP_Init+0xc8>)
 801cd62:	22ff      	movs	r2, #255	; 0xff
 801cd64:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 801cd66:	4b27      	ldr	r3, [pc, #156]	; (801ce04 <MX_LWIP_Init+0xc8>)
 801cd68:	22ff      	movs	r2, #255	; 0xff
 801cd6a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 801cd6c:	4b25      	ldr	r3, [pc, #148]	; (801ce04 <MX_LWIP_Init+0xc8>)
 801cd6e:	2200      	movs	r2, #0
 801cd70:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 801cd72:	4b25      	ldr	r3, [pc, #148]	; (801ce08 <MX_LWIP_Init+0xcc>)
 801cd74:	22c0      	movs	r2, #192	; 0xc0
 801cd76:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 801cd78:	4b23      	ldr	r3, [pc, #140]	; (801ce08 <MX_LWIP_Init+0xcc>)
 801cd7a:	22a8      	movs	r2, #168	; 0xa8
 801cd7c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 12;
 801cd7e:	4b22      	ldr	r3, [pc, #136]	; (801ce08 <MX_LWIP_Init+0xcc>)
 801cd80:	220c      	movs	r2, #12
 801cd82:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 801cd84:	4b20      	ldr	r3, [pc, #128]	; (801ce08 <MX_LWIP_Init+0xcc>)
 801cd86:	2201      	movs	r2, #1
 801cd88:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
	switch(EI_data.ProtocolType)
 801cd8a:	4b20      	ldr	r3, [pc, #128]	; (801ce0c <MX_LWIP_Init+0xd0>)
 801cd8c:	781b      	ldrb	r3, [r3, #0]
 801cd8e:	2b01      	cmp	r3, #1
 801cd90:	d002      	beq.n	801cd98 <MX_LWIP_Init+0x5c>
 801cd92:	2b02      	cmp	r3, #2
 801cd94:	d03c      	beq.n	801ce10 <MX_LWIP_Init+0xd4>
		GATEWAY_ADDRESS[2] = EI_data.Siemens_st.Self_IP[CARD_INDEX][2];
		GATEWAY_ADDRESS[3] = 1;
		break;

	default :
		return;
 801cd96:	e162      	b.n	801d05e <MX_LWIP_Init+0x322>
		IP_ADDRESS[0] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][0];
 801cd98:	4b1c      	ldr	r3, [pc, #112]	; (801ce0c <MX_LWIP_Init+0xd0>)
 801cd9a:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 801cd9e:	4b18      	ldr	r3, [pc, #96]	; (801ce00 <MX_LWIP_Init+0xc4>)
 801cda0:	701a      	strb	r2, [r3, #0]
		IP_ADDRESS[1] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][1];
 801cda2:	4b1a      	ldr	r3, [pc, #104]	; (801ce0c <MX_LWIP_Init+0xd0>)
 801cda4:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 801cda8:	4b15      	ldr	r3, [pc, #84]	; (801ce00 <MX_LWIP_Init+0xc4>)
 801cdaa:	705a      	strb	r2, [r3, #1]
		IP_ADDRESS[2] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][2];
 801cdac:	4b17      	ldr	r3, [pc, #92]	; (801ce0c <MX_LWIP_Init+0xd0>)
 801cdae:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 801cdb2:	4b13      	ldr	r3, [pc, #76]	; (801ce00 <MX_LWIP_Init+0xc4>)
 801cdb4:	709a      	strb	r2, [r3, #2]
		IP_ADDRESS[3] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][3];
 801cdb6:	4b15      	ldr	r3, [pc, #84]	; (801ce0c <MX_LWIP_Init+0xd0>)
 801cdb8:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 801cdbc:	4b10      	ldr	r3, [pc, #64]	; (801ce00 <MX_LWIP_Init+0xc4>)
 801cdbe:	70da      	strb	r2, [r3, #3]
		NETMASK_ADDRESS[0] = 255;
 801cdc0:	4b10      	ldr	r3, [pc, #64]	; (801ce04 <MX_LWIP_Init+0xc8>)
 801cdc2:	22ff      	movs	r2, #255	; 0xff
 801cdc4:	701a      	strb	r2, [r3, #0]
		NETMASK_ADDRESS[1] = 255;
 801cdc6:	4b0f      	ldr	r3, [pc, #60]	; (801ce04 <MX_LWIP_Init+0xc8>)
 801cdc8:	22ff      	movs	r2, #255	; 0xff
 801cdca:	705a      	strb	r2, [r3, #1]
		NETMASK_ADDRESS[2] = 255;
 801cdcc:	4b0d      	ldr	r3, [pc, #52]	; (801ce04 <MX_LWIP_Init+0xc8>)
 801cdce:	22ff      	movs	r2, #255	; 0xff
 801cdd0:	709a      	strb	r2, [r3, #2]
		NETMASK_ADDRESS[3] = 0;
 801cdd2:	4b0c      	ldr	r3, [pc, #48]	; (801ce04 <MX_LWIP_Init+0xc8>)
 801cdd4:	2200      	movs	r2, #0
 801cdd6:	70da      	strb	r2, [r3, #3]
		GATEWAY_ADDRESS[0] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][0];;
 801cdd8:	4b0c      	ldr	r3, [pc, #48]	; (801ce0c <MX_LWIP_Init+0xd0>)
 801cdda:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 801cdde:	4b0a      	ldr	r3, [pc, #40]	; (801ce08 <MX_LWIP_Init+0xcc>)
 801cde0:	701a      	strb	r2, [r3, #0]
		GATEWAY_ADDRESS[1] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][1];
 801cde2:	4b0a      	ldr	r3, [pc, #40]	; (801ce0c <MX_LWIP_Init+0xd0>)
 801cde4:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 801cde8:	4b07      	ldr	r3, [pc, #28]	; (801ce08 <MX_LWIP_Init+0xcc>)
 801cdea:	705a      	strb	r2, [r3, #1]
		GATEWAY_ADDRESS[2] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][2];
 801cdec:	4b07      	ldr	r3, [pc, #28]	; (801ce0c <MX_LWIP_Init+0xd0>)
 801cdee:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 801cdf2:	4b05      	ldr	r3, [pc, #20]	; (801ce08 <MX_LWIP_Init+0xcc>)
 801cdf4:	709a      	strb	r2, [r3, #2]
		GATEWAY_ADDRESS[3] = 1;
 801cdf6:	4b04      	ldr	r3, [pc, #16]	; (801ce08 <MX_LWIP_Init+0xcc>)
 801cdf8:	2201      	movs	r2, #1
 801cdfa:	70da      	strb	r2, [r3, #3]
		break;
 801cdfc:	e03b      	b.n	801ce76 <MX_LWIP_Init+0x13a>
 801cdfe:	bf00      	nop
 801ce00:	2000be00 	.word	0x2000be00
 801ce04:	2000be04 	.word	0x2000be04
 801ce08:	2000be08 	.word	0x2000be08
 801ce0c:	20000304 	.word	0x20000304
		IP_ADDRESS[0] = EI_data.Siemens_st.Self_IP[CARD_INDEX][0];
 801ce10:	4b94      	ldr	r3, [pc, #592]	; (801d064 <MX_LWIP_Init+0x328>)
 801ce12:	f893 22a5 	ldrb.w	r2, [r3, #677]	; 0x2a5
 801ce16:	4b94      	ldr	r3, [pc, #592]	; (801d068 <MX_LWIP_Init+0x32c>)
 801ce18:	701a      	strb	r2, [r3, #0]
		IP_ADDRESS[1] = EI_data.Siemens_st.Self_IP[CARD_INDEX][1];
 801ce1a:	4b92      	ldr	r3, [pc, #584]	; (801d064 <MX_LWIP_Init+0x328>)
 801ce1c:	f893 22a6 	ldrb.w	r2, [r3, #678]	; 0x2a6
 801ce20:	4b91      	ldr	r3, [pc, #580]	; (801d068 <MX_LWIP_Init+0x32c>)
 801ce22:	705a      	strb	r2, [r3, #1]
		IP_ADDRESS[2] = EI_data.Siemens_st.Self_IP[CARD_INDEX][2];
 801ce24:	4b8f      	ldr	r3, [pc, #572]	; (801d064 <MX_LWIP_Init+0x328>)
 801ce26:	f893 22a7 	ldrb.w	r2, [r3, #679]	; 0x2a7
 801ce2a:	4b8f      	ldr	r3, [pc, #572]	; (801d068 <MX_LWIP_Init+0x32c>)
 801ce2c:	709a      	strb	r2, [r3, #2]
		IP_ADDRESS[3] = EI_data.Siemens_st.Self_IP[CARD_INDEX][3];
 801ce2e:	4b8d      	ldr	r3, [pc, #564]	; (801d064 <MX_LWIP_Init+0x328>)
 801ce30:	f893 22a8 	ldrb.w	r2, [r3, #680]	; 0x2a8
 801ce34:	4b8c      	ldr	r3, [pc, #560]	; (801d068 <MX_LWIP_Init+0x32c>)
 801ce36:	70da      	strb	r2, [r3, #3]
		NETMASK_ADDRESS[0] = 255;
 801ce38:	4b8c      	ldr	r3, [pc, #560]	; (801d06c <MX_LWIP_Init+0x330>)
 801ce3a:	22ff      	movs	r2, #255	; 0xff
 801ce3c:	701a      	strb	r2, [r3, #0]
		NETMASK_ADDRESS[1] = 255;
 801ce3e:	4b8b      	ldr	r3, [pc, #556]	; (801d06c <MX_LWIP_Init+0x330>)
 801ce40:	22ff      	movs	r2, #255	; 0xff
 801ce42:	705a      	strb	r2, [r3, #1]
		NETMASK_ADDRESS[2] = 255;
 801ce44:	4b89      	ldr	r3, [pc, #548]	; (801d06c <MX_LWIP_Init+0x330>)
 801ce46:	22ff      	movs	r2, #255	; 0xff
 801ce48:	709a      	strb	r2, [r3, #2]
		NETMASK_ADDRESS[3] = 0;
 801ce4a:	4b88      	ldr	r3, [pc, #544]	; (801d06c <MX_LWIP_Init+0x330>)
 801ce4c:	2200      	movs	r2, #0
 801ce4e:	70da      	strb	r2, [r3, #3]
		GATEWAY_ADDRESS[0] = EI_data.Siemens_st.Self_IP[CARD_INDEX][0];;
 801ce50:	4b84      	ldr	r3, [pc, #528]	; (801d064 <MX_LWIP_Init+0x328>)
 801ce52:	f893 22a5 	ldrb.w	r2, [r3, #677]	; 0x2a5
 801ce56:	4b86      	ldr	r3, [pc, #536]	; (801d070 <MX_LWIP_Init+0x334>)
 801ce58:	701a      	strb	r2, [r3, #0]
		GATEWAY_ADDRESS[1] = EI_data.Siemens_st.Self_IP[CARD_INDEX][1];
 801ce5a:	4b82      	ldr	r3, [pc, #520]	; (801d064 <MX_LWIP_Init+0x328>)
 801ce5c:	f893 22a6 	ldrb.w	r2, [r3, #678]	; 0x2a6
 801ce60:	4b83      	ldr	r3, [pc, #524]	; (801d070 <MX_LWIP_Init+0x334>)
 801ce62:	705a      	strb	r2, [r3, #1]
		GATEWAY_ADDRESS[2] = EI_data.Siemens_st.Self_IP[CARD_INDEX][2];
 801ce64:	4b7f      	ldr	r3, [pc, #508]	; (801d064 <MX_LWIP_Init+0x328>)
 801ce66:	f893 22a7 	ldrb.w	r2, [r3, #679]	; 0x2a7
 801ce6a:	4b81      	ldr	r3, [pc, #516]	; (801d070 <MX_LWIP_Init+0x334>)
 801ce6c:	709a      	strb	r2, [r3, #2]
		GATEWAY_ADDRESS[3] = 1;
 801ce6e:	4b80      	ldr	r3, [pc, #512]	; (801d070 <MX_LWIP_Init+0x334>)
 801ce70:	2201      	movs	r2, #1
 801ce72:	70da      	strb	r2, [r3, #3]
		break;
 801ce74:	bf00      	nop
	}

/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 801ce76:	f000 fd42 	bl	801d8fe <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 801ce7a:	4b7b      	ldr	r3, [pc, #492]	; (801d068 <MX_LWIP_Init+0x32c>)
 801ce7c:	781b      	ldrb	r3, [r3, #0]
 801ce7e:	061a      	lsls	r2, r3, #24
 801ce80:	4b79      	ldr	r3, [pc, #484]	; (801d068 <MX_LWIP_Init+0x32c>)
 801ce82:	785b      	ldrb	r3, [r3, #1]
 801ce84:	041b      	lsls	r3, r3, #16
 801ce86:	431a      	orrs	r2, r3
 801ce88:	4b77      	ldr	r3, [pc, #476]	; (801d068 <MX_LWIP_Init+0x32c>)
 801ce8a:	789b      	ldrb	r3, [r3, #2]
 801ce8c:	021b      	lsls	r3, r3, #8
 801ce8e:	4313      	orrs	r3, r2
 801ce90:	4a75      	ldr	r2, [pc, #468]	; (801d068 <MX_LWIP_Init+0x32c>)
 801ce92:	78d2      	ldrb	r2, [r2, #3]
 801ce94:	4313      	orrs	r3, r2
 801ce96:	061a      	lsls	r2, r3, #24
 801ce98:	4b73      	ldr	r3, [pc, #460]	; (801d068 <MX_LWIP_Init+0x32c>)
 801ce9a:	781b      	ldrb	r3, [r3, #0]
 801ce9c:	0619      	lsls	r1, r3, #24
 801ce9e:	4b72      	ldr	r3, [pc, #456]	; (801d068 <MX_LWIP_Init+0x32c>)
 801cea0:	785b      	ldrb	r3, [r3, #1]
 801cea2:	041b      	lsls	r3, r3, #16
 801cea4:	4319      	orrs	r1, r3
 801cea6:	4b70      	ldr	r3, [pc, #448]	; (801d068 <MX_LWIP_Init+0x32c>)
 801cea8:	789b      	ldrb	r3, [r3, #2]
 801ceaa:	021b      	lsls	r3, r3, #8
 801ceac:	430b      	orrs	r3, r1
 801ceae:	496e      	ldr	r1, [pc, #440]	; (801d068 <MX_LWIP_Init+0x32c>)
 801ceb0:	78c9      	ldrb	r1, [r1, #3]
 801ceb2:	430b      	orrs	r3, r1
 801ceb4:	021b      	lsls	r3, r3, #8
 801ceb6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801ceba:	431a      	orrs	r2, r3
 801cebc:	4b6a      	ldr	r3, [pc, #424]	; (801d068 <MX_LWIP_Init+0x32c>)
 801cebe:	781b      	ldrb	r3, [r3, #0]
 801cec0:	0619      	lsls	r1, r3, #24
 801cec2:	4b69      	ldr	r3, [pc, #420]	; (801d068 <MX_LWIP_Init+0x32c>)
 801cec4:	785b      	ldrb	r3, [r3, #1]
 801cec6:	041b      	lsls	r3, r3, #16
 801cec8:	4319      	orrs	r1, r3
 801ceca:	4b67      	ldr	r3, [pc, #412]	; (801d068 <MX_LWIP_Init+0x32c>)
 801cecc:	789b      	ldrb	r3, [r3, #2]
 801cece:	021b      	lsls	r3, r3, #8
 801ced0:	430b      	orrs	r3, r1
 801ced2:	4965      	ldr	r1, [pc, #404]	; (801d068 <MX_LWIP_Init+0x32c>)
 801ced4:	78c9      	ldrb	r1, [r1, #3]
 801ced6:	430b      	orrs	r3, r1
 801ced8:	0a1b      	lsrs	r3, r3, #8
 801ceda:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801cede:	431a      	orrs	r2, r3
 801cee0:	4b61      	ldr	r3, [pc, #388]	; (801d068 <MX_LWIP_Init+0x32c>)
 801cee2:	781b      	ldrb	r3, [r3, #0]
 801cee4:	0619      	lsls	r1, r3, #24
 801cee6:	4b60      	ldr	r3, [pc, #384]	; (801d068 <MX_LWIP_Init+0x32c>)
 801cee8:	785b      	ldrb	r3, [r3, #1]
 801ceea:	041b      	lsls	r3, r3, #16
 801ceec:	4319      	orrs	r1, r3
 801ceee:	4b5e      	ldr	r3, [pc, #376]	; (801d068 <MX_LWIP_Init+0x32c>)
 801cef0:	789b      	ldrb	r3, [r3, #2]
 801cef2:	021b      	lsls	r3, r3, #8
 801cef4:	430b      	orrs	r3, r1
 801cef6:	495c      	ldr	r1, [pc, #368]	; (801d068 <MX_LWIP_Init+0x32c>)
 801cef8:	78c9      	ldrb	r1, [r1, #3]
 801cefa:	430b      	orrs	r3, r1
 801cefc:	0e1b      	lsrs	r3, r3, #24
 801cefe:	4313      	orrs	r3, r2
 801cf00:	4a5c      	ldr	r2, [pc, #368]	; (801d074 <MX_LWIP_Init+0x338>)
 801cf02:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 801cf04:	4b59      	ldr	r3, [pc, #356]	; (801d06c <MX_LWIP_Init+0x330>)
 801cf06:	781b      	ldrb	r3, [r3, #0]
 801cf08:	061a      	lsls	r2, r3, #24
 801cf0a:	4b58      	ldr	r3, [pc, #352]	; (801d06c <MX_LWIP_Init+0x330>)
 801cf0c:	785b      	ldrb	r3, [r3, #1]
 801cf0e:	041b      	lsls	r3, r3, #16
 801cf10:	431a      	orrs	r2, r3
 801cf12:	4b56      	ldr	r3, [pc, #344]	; (801d06c <MX_LWIP_Init+0x330>)
 801cf14:	789b      	ldrb	r3, [r3, #2]
 801cf16:	021b      	lsls	r3, r3, #8
 801cf18:	4313      	orrs	r3, r2
 801cf1a:	4a54      	ldr	r2, [pc, #336]	; (801d06c <MX_LWIP_Init+0x330>)
 801cf1c:	78d2      	ldrb	r2, [r2, #3]
 801cf1e:	4313      	orrs	r3, r2
 801cf20:	061a      	lsls	r2, r3, #24
 801cf22:	4b52      	ldr	r3, [pc, #328]	; (801d06c <MX_LWIP_Init+0x330>)
 801cf24:	781b      	ldrb	r3, [r3, #0]
 801cf26:	0619      	lsls	r1, r3, #24
 801cf28:	4b50      	ldr	r3, [pc, #320]	; (801d06c <MX_LWIP_Init+0x330>)
 801cf2a:	785b      	ldrb	r3, [r3, #1]
 801cf2c:	041b      	lsls	r3, r3, #16
 801cf2e:	4319      	orrs	r1, r3
 801cf30:	4b4e      	ldr	r3, [pc, #312]	; (801d06c <MX_LWIP_Init+0x330>)
 801cf32:	789b      	ldrb	r3, [r3, #2]
 801cf34:	021b      	lsls	r3, r3, #8
 801cf36:	430b      	orrs	r3, r1
 801cf38:	494c      	ldr	r1, [pc, #304]	; (801d06c <MX_LWIP_Init+0x330>)
 801cf3a:	78c9      	ldrb	r1, [r1, #3]
 801cf3c:	430b      	orrs	r3, r1
 801cf3e:	021b      	lsls	r3, r3, #8
 801cf40:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801cf44:	431a      	orrs	r2, r3
 801cf46:	4b49      	ldr	r3, [pc, #292]	; (801d06c <MX_LWIP_Init+0x330>)
 801cf48:	781b      	ldrb	r3, [r3, #0]
 801cf4a:	0619      	lsls	r1, r3, #24
 801cf4c:	4b47      	ldr	r3, [pc, #284]	; (801d06c <MX_LWIP_Init+0x330>)
 801cf4e:	785b      	ldrb	r3, [r3, #1]
 801cf50:	041b      	lsls	r3, r3, #16
 801cf52:	4319      	orrs	r1, r3
 801cf54:	4b45      	ldr	r3, [pc, #276]	; (801d06c <MX_LWIP_Init+0x330>)
 801cf56:	789b      	ldrb	r3, [r3, #2]
 801cf58:	021b      	lsls	r3, r3, #8
 801cf5a:	430b      	orrs	r3, r1
 801cf5c:	4943      	ldr	r1, [pc, #268]	; (801d06c <MX_LWIP_Init+0x330>)
 801cf5e:	78c9      	ldrb	r1, [r1, #3]
 801cf60:	430b      	orrs	r3, r1
 801cf62:	0a1b      	lsrs	r3, r3, #8
 801cf64:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801cf68:	431a      	orrs	r2, r3
 801cf6a:	4b40      	ldr	r3, [pc, #256]	; (801d06c <MX_LWIP_Init+0x330>)
 801cf6c:	781b      	ldrb	r3, [r3, #0]
 801cf6e:	0619      	lsls	r1, r3, #24
 801cf70:	4b3e      	ldr	r3, [pc, #248]	; (801d06c <MX_LWIP_Init+0x330>)
 801cf72:	785b      	ldrb	r3, [r3, #1]
 801cf74:	041b      	lsls	r3, r3, #16
 801cf76:	4319      	orrs	r1, r3
 801cf78:	4b3c      	ldr	r3, [pc, #240]	; (801d06c <MX_LWIP_Init+0x330>)
 801cf7a:	789b      	ldrb	r3, [r3, #2]
 801cf7c:	021b      	lsls	r3, r3, #8
 801cf7e:	430b      	orrs	r3, r1
 801cf80:	493a      	ldr	r1, [pc, #232]	; (801d06c <MX_LWIP_Init+0x330>)
 801cf82:	78c9      	ldrb	r1, [r1, #3]
 801cf84:	430b      	orrs	r3, r1
 801cf86:	0e1b      	lsrs	r3, r3, #24
 801cf88:	4313      	orrs	r3, r2
 801cf8a:	4a3b      	ldr	r2, [pc, #236]	; (801d078 <MX_LWIP_Init+0x33c>)
 801cf8c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 801cf8e:	4b38      	ldr	r3, [pc, #224]	; (801d070 <MX_LWIP_Init+0x334>)
 801cf90:	781b      	ldrb	r3, [r3, #0]
 801cf92:	061a      	lsls	r2, r3, #24
 801cf94:	4b36      	ldr	r3, [pc, #216]	; (801d070 <MX_LWIP_Init+0x334>)
 801cf96:	785b      	ldrb	r3, [r3, #1]
 801cf98:	041b      	lsls	r3, r3, #16
 801cf9a:	431a      	orrs	r2, r3
 801cf9c:	4b34      	ldr	r3, [pc, #208]	; (801d070 <MX_LWIP_Init+0x334>)
 801cf9e:	789b      	ldrb	r3, [r3, #2]
 801cfa0:	021b      	lsls	r3, r3, #8
 801cfa2:	4313      	orrs	r3, r2
 801cfa4:	4a32      	ldr	r2, [pc, #200]	; (801d070 <MX_LWIP_Init+0x334>)
 801cfa6:	78d2      	ldrb	r2, [r2, #3]
 801cfa8:	4313      	orrs	r3, r2
 801cfaa:	061a      	lsls	r2, r3, #24
 801cfac:	4b30      	ldr	r3, [pc, #192]	; (801d070 <MX_LWIP_Init+0x334>)
 801cfae:	781b      	ldrb	r3, [r3, #0]
 801cfb0:	0619      	lsls	r1, r3, #24
 801cfb2:	4b2f      	ldr	r3, [pc, #188]	; (801d070 <MX_LWIP_Init+0x334>)
 801cfb4:	785b      	ldrb	r3, [r3, #1]
 801cfb6:	041b      	lsls	r3, r3, #16
 801cfb8:	4319      	orrs	r1, r3
 801cfba:	4b2d      	ldr	r3, [pc, #180]	; (801d070 <MX_LWIP_Init+0x334>)
 801cfbc:	789b      	ldrb	r3, [r3, #2]
 801cfbe:	021b      	lsls	r3, r3, #8
 801cfc0:	430b      	orrs	r3, r1
 801cfc2:	492b      	ldr	r1, [pc, #172]	; (801d070 <MX_LWIP_Init+0x334>)
 801cfc4:	78c9      	ldrb	r1, [r1, #3]
 801cfc6:	430b      	orrs	r3, r1
 801cfc8:	021b      	lsls	r3, r3, #8
 801cfca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801cfce:	431a      	orrs	r2, r3
 801cfd0:	4b27      	ldr	r3, [pc, #156]	; (801d070 <MX_LWIP_Init+0x334>)
 801cfd2:	781b      	ldrb	r3, [r3, #0]
 801cfd4:	0619      	lsls	r1, r3, #24
 801cfd6:	4b26      	ldr	r3, [pc, #152]	; (801d070 <MX_LWIP_Init+0x334>)
 801cfd8:	785b      	ldrb	r3, [r3, #1]
 801cfda:	041b      	lsls	r3, r3, #16
 801cfdc:	4319      	orrs	r1, r3
 801cfde:	4b24      	ldr	r3, [pc, #144]	; (801d070 <MX_LWIP_Init+0x334>)
 801cfe0:	789b      	ldrb	r3, [r3, #2]
 801cfe2:	021b      	lsls	r3, r3, #8
 801cfe4:	430b      	orrs	r3, r1
 801cfe6:	4922      	ldr	r1, [pc, #136]	; (801d070 <MX_LWIP_Init+0x334>)
 801cfe8:	78c9      	ldrb	r1, [r1, #3]
 801cfea:	430b      	orrs	r3, r1
 801cfec:	0a1b      	lsrs	r3, r3, #8
 801cfee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801cff2:	431a      	orrs	r2, r3
 801cff4:	4b1e      	ldr	r3, [pc, #120]	; (801d070 <MX_LWIP_Init+0x334>)
 801cff6:	781b      	ldrb	r3, [r3, #0]
 801cff8:	0619      	lsls	r1, r3, #24
 801cffa:	4b1d      	ldr	r3, [pc, #116]	; (801d070 <MX_LWIP_Init+0x334>)
 801cffc:	785b      	ldrb	r3, [r3, #1]
 801cffe:	041b      	lsls	r3, r3, #16
 801d000:	4319      	orrs	r1, r3
 801d002:	4b1b      	ldr	r3, [pc, #108]	; (801d070 <MX_LWIP_Init+0x334>)
 801d004:	789b      	ldrb	r3, [r3, #2]
 801d006:	021b      	lsls	r3, r3, #8
 801d008:	430b      	orrs	r3, r1
 801d00a:	4919      	ldr	r1, [pc, #100]	; (801d070 <MX_LWIP_Init+0x334>)
 801d00c:	78c9      	ldrb	r1, [r1, #3]
 801d00e:	430b      	orrs	r3, r1
 801d010:	0e1b      	lsrs	r3, r3, #24
 801d012:	4313      	orrs	r3, r2
 801d014:	4a19      	ldr	r2, [pc, #100]	; (801d07c <MX_LWIP_Init+0x340>)
 801d016:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 801d018:	4b19      	ldr	r3, [pc, #100]	; (801d080 <MX_LWIP_Init+0x344>)
 801d01a:	9302      	str	r3, [sp, #8]
 801d01c:	4b19      	ldr	r3, [pc, #100]	; (801d084 <MX_LWIP_Init+0x348>)
 801d01e:	9301      	str	r3, [sp, #4]
 801d020:	2300      	movs	r3, #0
 801d022:	9300      	str	r3, [sp, #0]
 801d024:	4b15      	ldr	r3, [pc, #84]	; (801d07c <MX_LWIP_Init+0x340>)
 801d026:	4a14      	ldr	r2, [pc, #80]	; (801d078 <MX_LWIP_Init+0x33c>)
 801d028:	4912      	ldr	r1, [pc, #72]	; (801d074 <MX_LWIP_Init+0x338>)
 801d02a:	4817      	ldr	r0, [pc, #92]	; (801d088 <MX_LWIP_Init+0x34c>)
 801d02c:	f001 f998 	bl	801e360 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 801d030:	4815      	ldr	r0, [pc, #84]	; (801d088 <MX_LWIP_Init+0x34c>)
 801d032:	f001 fb49 	bl	801e6c8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 801d036:	4b14      	ldr	r3, [pc, #80]	; (801d088 <MX_LWIP_Init+0x34c>)
 801d038:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801d03c:	089b      	lsrs	r3, r3, #2
 801d03e:	f003 0301 	and.w	r3, r3, #1
 801d042:	b2db      	uxtb	r3, r3
 801d044:	2b00      	cmp	r3, #0
 801d046:	d003      	beq.n	801d050 <MX_LWIP_Init+0x314>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 801d048:	480f      	ldr	r0, [pc, #60]	; (801d088 <MX_LWIP_Init+0x34c>)
 801d04a:	f001 fb4d 	bl	801e6e8 <netif_set_up>
 801d04e:	e002      	b.n	801d056 <MX_LWIP_Init+0x31a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 801d050:	480d      	ldr	r0, [pc, #52]	; (801d088 <MX_LWIP_Init+0x34c>)
 801d052:	f001 fbb5 	bl	801e7c0 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 801d056:	490d      	ldr	r1, [pc, #52]	; (801d08c <MX_LWIP_Init+0x350>)
 801d058:	480b      	ldr	r0, [pc, #44]	; (801d088 <MX_LWIP_Init+0x34c>)
 801d05a:	f001 fc47 	bl	801e8ec <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 801d05e:	46bd      	mov	sp, r7
 801d060:	bd80      	pop	{r7, pc}
 801d062:	bf00      	nop
 801d064:	20000304 	.word	0x20000304
 801d068:	2000be00 	.word	0x2000be00
 801d06c:	2000be04 	.word	0x2000be04
 801d070:	2000be08 	.word	0x2000be08
 801d074:	2000bdf4 	.word	0x2000bdf4
 801d078:	2000bdf8 	.word	0x2000bdf8
 801d07c:	2000bdfc 	.word	0x2000bdfc
 801d080:	080226a9 	.word	0x080226a9
 801d084:	0801d41d 	.word	0x0801d41d
 801d088:	2000bdb4 	.word	0x2000bdb4
 801d08c:	0801d0e1 	.word	0x0801d0e1

0801d090 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 801d090:	b580      	push	{r7, lr}
 801d092:	b082      	sub	sp, #8
 801d094:	af00      	add	r7, sp, #0
 801d096:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 801d098:	f7f8 fd26 	bl	8015ae8 <HAL_GetTick>
 801d09c:	4602      	mov	r2, r0
 801d09e:	4b08      	ldr	r3, [pc, #32]	; (801d0c0 <Ethernet_Link_Periodic_Handle+0x30>)
 801d0a0:	681b      	ldr	r3, [r3, #0]
 801d0a2:	1ad3      	subs	r3, r2, r3
 801d0a4:	2b63      	cmp	r3, #99	; 0x63
 801d0a6:	d907      	bls.n	801d0b8 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 801d0a8:	f7f8 fd1e 	bl	8015ae8 <HAL_GetTick>
 801d0ac:	4603      	mov	r3, r0
 801d0ae:	4a04      	ldr	r2, [pc, #16]	; (801d0c0 <Ethernet_Link_Periodic_Handle+0x30>)
 801d0b0:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 801d0b2:	6878      	ldr	r0, [r7, #4]
 801d0b4:	f000 fb10 	bl	801d6d8 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 801d0b8:	bf00      	nop
 801d0ba:	3708      	adds	r7, #8
 801d0bc:	46bd      	mov	sp, r7
 801d0be:	bd80      	pop	{r7, pc}
 801d0c0:	2000bdb0 	.word	0x2000bdb0

0801d0c4 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 801d0c4:	b580      	push	{r7, lr}
 801d0c6:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 801d0c8:	4804      	ldr	r0, [pc, #16]	; (801d0dc <MX_LWIP_Process+0x18>)
 801d0ca:	f000 f987 	bl	801d3dc <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 801d0ce:	f002 fb83 	bl	801f7d8 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 801d0d2:	4802      	ldr	r0, [pc, #8]	; (801d0dc <MX_LWIP_Process+0x18>)
 801d0d4:	f7ff ffdc 	bl	801d090 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 801d0d8:	bf00      	nop
 801d0da:	bd80      	pop	{r7, pc}
 801d0dc:	2000bdb4 	.word	0x2000bdb4

0801d0e0 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 801d0e0:	b480      	push	{r7}
 801d0e2:	b083      	sub	sp, #12
 801d0e4:	af00      	add	r7, sp, #0
 801d0e6:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 801d0e8:	bf00      	nop
 801d0ea:	370c      	adds	r7, #12
 801d0ec:	46bd      	mov	sp, r7
 801d0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d0f2:	4770      	bx	lr

0801d0f4 <SCB_InvalidateDCache_by_Addr>:
{
 801d0f4:	b480      	push	{r7}
 801d0f6:	b087      	sub	sp, #28
 801d0f8:	af00      	add	r7, sp, #0
 801d0fa:	6078      	str	r0, [r7, #4]
 801d0fc:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 801d0fe:	683b      	ldr	r3, [r7, #0]
 801d100:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 801d102:	687b      	ldr	r3, [r7, #4]
 801d104:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 801d106:	2320      	movs	r3, #32
 801d108:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 801d10a:	f3bf 8f4f 	dsb	sy
}
 801d10e:	bf00      	nop
    while (op_size > 0) {
 801d110:	e00b      	b.n	801d12a <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 801d112:	4a0d      	ldr	r2, [pc, #52]	; (801d148 <SCB_InvalidateDCache_by_Addr+0x54>)
 801d114:	693b      	ldr	r3, [r7, #16]
 801d116:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 801d11a:	68fb      	ldr	r3, [r7, #12]
 801d11c:	693a      	ldr	r2, [r7, #16]
 801d11e:	4413      	add	r3, r2
 801d120:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 801d122:	697a      	ldr	r2, [r7, #20]
 801d124:	68fb      	ldr	r3, [r7, #12]
 801d126:	1ad3      	subs	r3, r2, r3
 801d128:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 801d12a:	697b      	ldr	r3, [r7, #20]
 801d12c:	2b00      	cmp	r3, #0
 801d12e:	dcf0      	bgt.n	801d112 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 801d130:	f3bf 8f4f 	dsb	sy
}
 801d134:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801d136:	f3bf 8f6f 	isb	sy
}
 801d13a:	bf00      	nop
}
 801d13c:	bf00      	nop
 801d13e:	371c      	adds	r7, #28
 801d140:	46bd      	mov	sp, r7
 801d142:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d146:	4770      	bx	lr
 801d148:	e000ed00 	.word	0xe000ed00

0801d14c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 801d14c:	b580      	push	{r7, lr}
 801d14e:	b084      	sub	sp, #16
 801d150:	af00      	add	r7, sp, #0
 801d152:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 801d154:	2300      	movs	r3, #0
 801d156:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 801d158:	4b47      	ldr	r3, [pc, #284]	; (801d278 <low_level_init+0x12c>)
 801d15a:	4a48      	ldr	r2, [pc, #288]	; (801d27c <low_level_init+0x130>)
 801d15c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 801d15e:	2300      	movs	r3, #0
 801d160:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 801d162:	2380      	movs	r3, #128	; 0x80
 801d164:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 801d166:	23e1      	movs	r3, #225	; 0xe1
 801d168:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 801d16a:	2300      	movs	r3, #0
 801d16c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 801d16e:	2300      	movs	r3, #0
 801d170:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 801d172:	2300      	movs	r3, #0
 801d174:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 801d176:	4a40      	ldr	r2, [pc, #256]	; (801d278 <low_level_init+0x12c>)
 801d178:	f107 0308 	add.w	r3, r7, #8
 801d17c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 801d17e:	4b3e      	ldr	r3, [pc, #248]	; (801d278 <low_level_init+0x12c>)
 801d180:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 801d184:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 801d186:	4b3c      	ldr	r3, [pc, #240]	; (801d278 <low_level_init+0x12c>)
 801d188:	4a3d      	ldr	r2, [pc, #244]	; (801d280 <low_level_init+0x134>)
 801d18a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 801d18c:	4b3a      	ldr	r3, [pc, #232]	; (801d278 <low_level_init+0x12c>)
 801d18e:	4a3d      	ldr	r2, [pc, #244]	; (801d284 <low_level_init+0x138>)
 801d190:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 801d192:	4b39      	ldr	r3, [pc, #228]	; (801d278 <low_level_init+0x12c>)
 801d194:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 801d198:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
	switch(EI_data.ProtocolType)
 801d19a:	4b3b      	ldr	r3, [pc, #236]	; (801d288 <low_level_init+0x13c>)
 801d19c:	781b      	ldrb	r3, [r3, #0]
 801d19e:	2b01      	cmp	r3, #1
 801d1a0:	d002      	beq.n	801d1a8 <low_level_init+0x5c>
 801d1a2:	2b02      	cmp	r3, #2
 801d1a4:	d004      	beq.n	801d1b0 <low_level_init+0x64>
		break;
	case SIEMENS:
		heth.Init.MACAddr = &EI_data.Siemens_st.Self_MAC[CARD_INDEX][0];
		break;
	default:
		return;
 801d1a6:	e063      	b.n	801d270 <low_level_init+0x124>
		heth.Init.MACAddr = &EI_data.Hitachi_st.Self_MAC[CARD_INDEX][0];
 801d1a8:	4b33      	ldr	r3, [pc, #204]	; (801d278 <low_level_init+0x12c>)
 801d1aa:	4a38      	ldr	r2, [pc, #224]	; (801d28c <low_level_init+0x140>)
 801d1ac:	605a      	str	r2, [r3, #4]
		break;
 801d1ae:	e003      	b.n	801d1b8 <low_level_init+0x6c>
		heth.Init.MACAddr = &EI_data.Siemens_st.Self_MAC[CARD_INDEX][0];
 801d1b0:	4b31      	ldr	r3, [pc, #196]	; (801d278 <low_level_init+0x12c>)
 801d1b2:	4a37      	ldr	r2, [pc, #220]	; (801d290 <low_level_init+0x144>)
 801d1b4:	605a      	str	r2, [r3, #4]
		break;
 801d1b6:	bf00      	nop
	}
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 801d1b8:	482f      	ldr	r0, [pc, #188]	; (801d278 <low_level_init+0x12c>)
 801d1ba:	f7f9 fdbb 	bl	8016d34 <HAL_ETH_Init>
 801d1be:	4603      	mov	r3, r0
 801d1c0:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 801d1c2:	2238      	movs	r2, #56	; 0x38
 801d1c4:	2100      	movs	r1, #0
 801d1c6:	4833      	ldr	r0, [pc, #204]	; (801d294 <low_level_init+0x148>)
 801d1c8:	f005 fbb0 	bl	802292c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 801d1cc:	4b31      	ldr	r3, [pc, #196]	; (801d294 <low_level_init+0x148>)
 801d1ce:	2221      	movs	r2, #33	; 0x21
 801d1d0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 801d1d2:	4b30      	ldr	r3, [pc, #192]	; (801d294 <low_level_init+0x148>)
 801d1d4:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 801d1d8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 801d1da:	4b2e      	ldr	r3, [pc, #184]	; (801d294 <low_level_init+0x148>)
 801d1dc:	2200      	movs	r2, #0
 801d1de:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 801d1e0:	482d      	ldr	r0, [pc, #180]	; (801d298 <low_level_init+0x14c>)
 801d1e2:	f000 ff3d 	bl	801e060 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 801d1e6:	687b      	ldr	r3, [r7, #4]
 801d1e8:	2206      	movs	r2, #6
 801d1ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 801d1ee:	4b22      	ldr	r3, [pc, #136]	; (801d278 <low_level_init+0x12c>)
 801d1f0:	685b      	ldr	r3, [r3, #4]
 801d1f2:	781a      	ldrb	r2, [r3, #0]
 801d1f4:	687b      	ldr	r3, [r7, #4]
 801d1f6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 801d1fa:	4b1f      	ldr	r3, [pc, #124]	; (801d278 <low_level_init+0x12c>)
 801d1fc:	685b      	ldr	r3, [r3, #4]
 801d1fe:	785a      	ldrb	r2, [r3, #1]
 801d200:	687b      	ldr	r3, [r7, #4]
 801d202:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 801d206:	4b1c      	ldr	r3, [pc, #112]	; (801d278 <low_level_init+0x12c>)
 801d208:	685b      	ldr	r3, [r3, #4]
 801d20a:	789a      	ldrb	r2, [r3, #2]
 801d20c:	687b      	ldr	r3, [r7, #4]
 801d20e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 801d212:	4b19      	ldr	r3, [pc, #100]	; (801d278 <low_level_init+0x12c>)
 801d214:	685b      	ldr	r3, [r3, #4]
 801d216:	78da      	ldrb	r2, [r3, #3]
 801d218:	687b      	ldr	r3, [r7, #4]
 801d21a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 801d21e:	4b16      	ldr	r3, [pc, #88]	; (801d278 <low_level_init+0x12c>)
 801d220:	685b      	ldr	r3, [r3, #4]
 801d222:	791a      	ldrb	r2, [r3, #4]
 801d224:	687b      	ldr	r3, [r7, #4]
 801d226:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 801d22a:	4b13      	ldr	r3, [pc, #76]	; (801d278 <low_level_init+0x12c>)
 801d22c:	685b      	ldr	r3, [r3, #4]
 801d22e:	795a      	ldrb	r2, [r3, #5]
 801d230:	687b      	ldr	r3, [r7, #4]
 801d232:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 801d236:	687b      	ldr	r3, [r7, #4]
 801d238:	f240 52dc 	movw	r2, #1500	; 0x5dc
 801d23c:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 801d23e:	687b      	ldr	r3, [r7, #4]
 801d240:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801d244:	f043 030a 	orr.w	r3, r3, #10
 801d248:	b2da      	uxtb	r2, r3
 801d24a:	687b      	ldr	r3, [r7, #4]
 801d24c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  DP83848_RegisterBusIO(&DP83848, &DP83848_IOCtx);
 801d250:	4912      	ldr	r1, [pc, #72]	; (801d29c <low_level_init+0x150>)
 801d252:	4813      	ldr	r0, [pc, #76]	; (801d2a0 <low_level_init+0x154>)
 801d254:	f7f8 fa87 	bl	8015766 <DP83848_RegisterBusIO>

  /* Initialize the DP83848 ETH PHY */
  DP83848_Init(&DP83848);
 801d258:	4811      	ldr	r0, [pc, #68]	; (801d2a0 <low_level_init+0x154>)
 801d25a:	f7f8 fab6 	bl	80157ca <DP83848_Init>

  if (hal_eth_init_status == HAL_OK)
 801d25e:	7bfb      	ldrb	r3, [r7, #15]
 801d260:	2b00      	cmp	r3, #0
 801d262:	d103      	bne.n	801d26c <low_level_init+0x120>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 801d264:	6878      	ldr	r0, [r7, #4]
 801d266:	f000 fa37 	bl	801d6d8 <ethernet_link_check_state>
 801d26a:	e001      	b.n	801d270 <low_level_init+0x124>
  }
  else
  {
    Error_Handler();
 801d26c:	f7f6 feb0 	bl	8013fd0 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 801d270:	3710      	adds	r7, #16
 801d272:	46bd      	mov	sp, r7
 801d274:	bd80      	pop	{r7, pc}
 801d276:	bf00      	nop
 801d278:	20010708 	.word	0x20010708
 801d27c:	40028000 	.word	0x40028000
 801d280:	20000244 	.word	0x20000244
 801d284:	200001a4 	.word	0x200001a4
 801d288:	20000304 	.word	0x20000304
 801d28c:	20000343 	.word	0x20000343
 801d290:	200005b1 	.word	0x200005b1
 801d294:	200107b8 	.word	0x200107b8
 801d298:	080291d4 	.word	0x080291d4
 801d29c:	20000128 	.word	0x20000128
 801d2a0:	200107f0 	.word	0x200107f0

0801d2a4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 801d2a4:	b580      	push	{r7, lr}
 801d2a6:	b092      	sub	sp, #72	; 0x48
 801d2a8:	af00      	add	r7, sp, #0
 801d2aa:	6078      	str	r0, [r7, #4]
 801d2ac:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 801d2ae:	2300      	movs	r3, #0
 801d2b0:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 801d2b2:	2300      	movs	r3, #0
 801d2b4:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 801d2b6:	2300      	movs	r3, #0
 801d2b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 801d2bc:	f107 030c 	add.w	r3, r7, #12
 801d2c0:	2230      	movs	r2, #48	; 0x30
 801d2c2:	2100      	movs	r1, #0
 801d2c4:	4618      	mov	r0, r3
 801d2c6:	f005 fb31 	bl	802292c <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 801d2ca:	f107 030c 	add.w	r3, r7, #12
 801d2ce:	2230      	movs	r2, #48	; 0x30
 801d2d0:	2100      	movs	r1, #0
 801d2d2:	4618      	mov	r0, r3
 801d2d4:	f005 fb2a 	bl	802292c <memset>

  for(q = p; q != NULL; q = q->next)
 801d2d8:	683b      	ldr	r3, [r7, #0]
 801d2da:	643b      	str	r3, [r7, #64]	; 0x40
 801d2dc:	e045      	b.n	801d36a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 801d2de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d2e0:	2b03      	cmp	r3, #3
 801d2e2:	d902      	bls.n	801d2ea <low_level_output+0x46>
      return ERR_IF;
 801d2e4:	f06f 030b 	mvn.w	r3, #11
 801d2e8:	e055      	b.n	801d396 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 801d2ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d2ec:	6859      	ldr	r1, [r3, #4]
 801d2ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801d2f0:	4613      	mov	r3, r2
 801d2f2:	005b      	lsls	r3, r3, #1
 801d2f4:	4413      	add	r3, r2
 801d2f6:	009b      	lsls	r3, r3, #2
 801d2f8:	3348      	adds	r3, #72	; 0x48
 801d2fa:	443b      	add	r3, r7
 801d2fc:	3b3c      	subs	r3, #60	; 0x3c
 801d2fe:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 801d300:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d302:	895b      	ldrh	r3, [r3, #10]
 801d304:	4619      	mov	r1, r3
 801d306:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801d308:	4613      	mov	r3, r2
 801d30a:	005b      	lsls	r3, r3, #1
 801d30c:	4413      	add	r3, r2
 801d30e:	009b      	lsls	r3, r3, #2
 801d310:	3348      	adds	r3, #72	; 0x48
 801d312:	443b      	add	r3, r7
 801d314:	3b38      	subs	r3, #56	; 0x38
 801d316:	6019      	str	r1, [r3, #0]

    if(i>0)
 801d318:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d31a:	2b00      	cmp	r3, #0
 801d31c:	d011      	beq.n	801d342 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 801d31e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d320:	1e5a      	subs	r2, r3, #1
 801d322:	f107 000c 	add.w	r0, r7, #12
 801d326:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801d328:	460b      	mov	r3, r1
 801d32a:	005b      	lsls	r3, r3, #1
 801d32c:	440b      	add	r3, r1
 801d32e:	009b      	lsls	r3, r3, #2
 801d330:	18c1      	adds	r1, r0, r3
 801d332:	4613      	mov	r3, r2
 801d334:	005b      	lsls	r3, r3, #1
 801d336:	4413      	add	r3, r2
 801d338:	009b      	lsls	r3, r3, #2
 801d33a:	3348      	adds	r3, #72	; 0x48
 801d33c:	443b      	add	r3, r7
 801d33e:	3b34      	subs	r3, #52	; 0x34
 801d340:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 801d342:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d344:	681b      	ldr	r3, [r3, #0]
 801d346:	2b00      	cmp	r3, #0
 801d348:	d109      	bne.n	801d35e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 801d34a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801d34c:	4613      	mov	r3, r2
 801d34e:	005b      	lsls	r3, r3, #1
 801d350:	4413      	add	r3, r2
 801d352:	009b      	lsls	r3, r3, #2
 801d354:	3348      	adds	r3, #72	; 0x48
 801d356:	443b      	add	r3, r7
 801d358:	3b34      	subs	r3, #52	; 0x34
 801d35a:	2200      	movs	r2, #0
 801d35c:	601a      	str	r2, [r3, #0]
    }

    i++;
 801d35e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d360:	3301      	adds	r3, #1
 801d362:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 801d364:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d366:	681b      	ldr	r3, [r3, #0]
 801d368:	643b      	str	r3, [r7, #64]	; 0x40
 801d36a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d36c:	2b00      	cmp	r3, #0
 801d36e:	d1b6      	bne.n	801d2de <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 801d370:	683b      	ldr	r3, [r7, #0]
 801d372:	891b      	ldrh	r3, [r3, #8]
 801d374:	461a      	mov	r2, r3
 801d376:	4b0a      	ldr	r3, [pc, #40]	; (801d3a0 <low_level_output+0xfc>)
 801d378:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 801d37a:	4a09      	ldr	r2, [pc, #36]	; (801d3a0 <low_level_output+0xfc>)
 801d37c:	f107 030c 	add.w	r3, r7, #12
 801d380:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 801d382:	4a07      	ldr	r2, [pc, #28]	; (801d3a0 <low_level_output+0xfc>)
 801d384:	683b      	ldr	r3, [r7, #0]
 801d386:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 801d388:	2214      	movs	r2, #20
 801d38a:	4905      	ldr	r1, [pc, #20]	; (801d3a0 <low_level_output+0xfc>)
 801d38c:	4805      	ldr	r0, [pc, #20]	; (801d3a4 <low_level_output+0x100>)
 801d38e:	f7f9 fe05 	bl	8016f9c <HAL_ETH_Transmit>

  return errval;
 801d392:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 801d396:	4618      	mov	r0, r3
 801d398:	3748      	adds	r7, #72	; 0x48
 801d39a:	46bd      	mov	sp, r7
 801d39c:	bd80      	pop	{r7, pc}
 801d39e:	bf00      	nop
 801d3a0:	200107b8 	.word	0x200107b8
 801d3a4:	20010708 	.word	0x20010708

0801d3a8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 801d3a8:	b580      	push	{r7, lr}
 801d3aa:	b084      	sub	sp, #16
 801d3ac:	af00      	add	r7, sp, #0
 801d3ae:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 801d3b0:	2300      	movs	r3, #0
 801d3b2:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 801d3b4:	4b07      	ldr	r3, [pc, #28]	; (801d3d4 <low_level_input+0x2c>)
 801d3b6:	781b      	ldrb	r3, [r3, #0]
 801d3b8:	2b00      	cmp	r3, #0
 801d3ba:	d105      	bne.n	801d3c8 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 801d3bc:	f107 030c 	add.w	r3, r7, #12
 801d3c0:	4619      	mov	r1, r3
 801d3c2:	4805      	ldr	r0, [pc, #20]	; (801d3d8 <low_level_input+0x30>)
 801d3c4:	f7f9 fe7e 	bl	80170c4 <HAL_ETH_ReadData>
  }

  return p;
 801d3c8:	68fb      	ldr	r3, [r7, #12]
}
 801d3ca:	4618      	mov	r0, r3
 801d3cc:	3710      	adds	r7, #16
 801d3ce:	46bd      	mov	sp, r7
 801d3d0:	bd80      	pop	{r7, pc}
 801d3d2:	bf00      	nop
 801d3d4:	20010704 	.word	0x20010704
 801d3d8:	20010708 	.word	0x20010708

0801d3dc <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 801d3dc:	b580      	push	{r7, lr}
 801d3de:	b084      	sub	sp, #16
 801d3e0:	af00      	add	r7, sp, #0
 801d3e2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 801d3e4:	2300      	movs	r3, #0
 801d3e6:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 801d3e8:	6878      	ldr	r0, [r7, #4]
 801d3ea:	f7ff ffdd 	bl	801d3a8 <low_level_input>
 801d3ee:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 801d3f0:	68fb      	ldr	r3, [r7, #12]
 801d3f2:	2b00      	cmp	r3, #0
 801d3f4:	d00a      	beq.n	801d40c <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 801d3f6:	687b      	ldr	r3, [r7, #4]
 801d3f8:	691b      	ldr	r3, [r3, #16]
 801d3fa:	6879      	ldr	r1, [r7, #4]
 801d3fc:	68f8      	ldr	r0, [r7, #12]
 801d3fe:	4798      	blx	r3
 801d400:	4603      	mov	r3, r0
 801d402:	2b00      	cmp	r3, #0
 801d404:	d002      	beq.n	801d40c <ethernetif_input+0x30>
      {
        pbuf_free(p);
 801d406:	68f8      	ldr	r0, [r7, #12]
 801d408:	f001 fe40 	bl	801f08c <pbuf_free>
      }
    }
  } while(p!=NULL);
 801d40c:	68fb      	ldr	r3, [r7, #12]
 801d40e:	2b00      	cmp	r3, #0
 801d410:	d1ea      	bne.n	801d3e8 <ethernetif_input+0xc>
}
 801d412:	bf00      	nop
 801d414:	bf00      	nop
 801d416:	3710      	adds	r7, #16
 801d418:	46bd      	mov	sp, r7
 801d41a:	bd80      	pop	{r7, pc}

0801d41c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 801d41c:	b580      	push	{r7, lr}
 801d41e:	b082      	sub	sp, #8
 801d420:	af00      	add	r7, sp, #0
 801d422:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 801d424:	687b      	ldr	r3, [r7, #4]
 801d426:	2b00      	cmp	r3, #0
 801d428:	d106      	bne.n	801d438 <ethernetif_init+0x1c>
 801d42a:	4b0e      	ldr	r3, [pc, #56]	; (801d464 <ethernetif_init+0x48>)
 801d42c:	f240 1287 	movw	r2, #391	; 0x187
 801d430:	490d      	ldr	r1, [pc, #52]	; (801d468 <ethernetif_init+0x4c>)
 801d432:	480e      	ldr	r0, [pc, #56]	; (801d46c <ethernetif_init+0x50>)
 801d434:	f005 fb62 	bl	8022afc <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 801d438:	687b      	ldr	r3, [r7, #4]
 801d43a:	2273      	movs	r2, #115	; 0x73
 801d43c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 801d440:	687b      	ldr	r3, [r7, #4]
 801d442:	2274      	movs	r2, #116	; 0x74
 801d444:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 801d448:	687b      	ldr	r3, [r7, #4]
 801d44a:	4a09      	ldr	r2, [pc, #36]	; (801d470 <ethernetif_init+0x54>)
 801d44c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 801d44e:	687b      	ldr	r3, [r7, #4]
 801d450:	4a08      	ldr	r2, [pc, #32]	; (801d474 <ethernetif_init+0x58>)
 801d452:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 801d454:	6878      	ldr	r0, [r7, #4]
 801d456:	f7ff fe79 	bl	801d14c <low_level_init>

  return ERR_OK;
 801d45a:	2300      	movs	r3, #0
}
 801d45c:	4618      	mov	r0, r3
 801d45e:	3708      	adds	r7, #8
 801d460:	46bd      	mov	sp, r7
 801d462:	bd80      	pop	{r7, pc}
 801d464:	0802772c 	.word	0x0802772c
 801d468:	08027748 	.word	0x08027748
 801d46c:	08027758 	.word	0x08027758
 801d470:	08020a39 	.word	0x08020a39
 801d474:	0801d2a5 	.word	0x0801d2a5

0801d478 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 801d478:	b580      	push	{r7, lr}
 801d47a:	b084      	sub	sp, #16
 801d47c:	af00      	add	r7, sp, #0
 801d47e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 801d480:	687b      	ldr	r3, [r7, #4]
 801d482:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 801d484:	68f9      	ldr	r1, [r7, #12]
 801d486:	4807      	ldr	r0, [pc, #28]	; (801d4a4 <pbuf_free_custom+0x2c>)
 801d488:	f000 fecc 	bl	801e224 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 801d48c:	4b06      	ldr	r3, [pc, #24]	; (801d4a8 <pbuf_free_custom+0x30>)
 801d48e:	781b      	ldrb	r3, [r3, #0]
 801d490:	2b01      	cmp	r3, #1
 801d492:	d102      	bne.n	801d49a <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 801d494:	4b04      	ldr	r3, [pc, #16]	; (801d4a8 <pbuf_free_custom+0x30>)
 801d496:	2200      	movs	r2, #0
 801d498:	701a      	strb	r2, [r3, #0]
  }
}
 801d49a:	bf00      	nop
 801d49c:	3710      	adds	r7, #16
 801d49e:	46bd      	mov	sp, r7
 801d4a0:	bd80      	pop	{r7, pc}
 801d4a2:	bf00      	nop
 801d4a4:	080291d4 	.word	0x080291d4
 801d4a8:	20010704 	.word	0x20010704

0801d4ac <sys_now>:
 *         when LWIP_TIMERS == 1 and NO_SYS == 1
 * @param  None
 * @retval Current Time value
 */
u32_t sys_now(void)
{
 801d4ac:	b580      	push	{r7, lr}
 801d4ae:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 801d4b0:	f7f8 fb1a 	bl	8015ae8 <HAL_GetTick>
 801d4b4:	4603      	mov	r3, r0
}
 801d4b6:	4618      	mov	r0, r3
 801d4b8:	bd80      	pop	{r7, pc}
	...

0801d4bc <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 801d4bc:	b580      	push	{r7, lr}
 801d4be:	b08e      	sub	sp, #56	; 0x38
 801d4c0:	af00      	add	r7, sp, #0
 801d4c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801d4c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d4c8:	2200      	movs	r2, #0
 801d4ca:	601a      	str	r2, [r3, #0]
 801d4cc:	605a      	str	r2, [r3, #4]
 801d4ce:	609a      	str	r2, [r3, #8]
 801d4d0:	60da      	str	r2, [r3, #12]
 801d4d2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 801d4d4:	687b      	ldr	r3, [r7, #4]
 801d4d6:	681b      	ldr	r3, [r3, #0]
 801d4d8:	4a52      	ldr	r2, [pc, #328]	; (801d624 <HAL_ETH_MspInit+0x168>)
 801d4da:	4293      	cmp	r3, r2
 801d4dc:	f040 809e 	bne.w	801d61c <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 801d4e0:	4b51      	ldr	r3, [pc, #324]	; (801d628 <HAL_ETH_MspInit+0x16c>)
 801d4e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d4e4:	4a50      	ldr	r2, [pc, #320]	; (801d628 <HAL_ETH_MspInit+0x16c>)
 801d4e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801d4ea:	6313      	str	r3, [r2, #48]	; 0x30
 801d4ec:	4b4e      	ldr	r3, [pc, #312]	; (801d628 <HAL_ETH_MspInit+0x16c>)
 801d4ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d4f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801d4f4:	623b      	str	r3, [r7, #32]
 801d4f6:	6a3b      	ldr	r3, [r7, #32]
 801d4f8:	4b4b      	ldr	r3, [pc, #300]	; (801d628 <HAL_ETH_MspInit+0x16c>)
 801d4fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d4fc:	4a4a      	ldr	r2, [pc, #296]	; (801d628 <HAL_ETH_MspInit+0x16c>)
 801d4fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801d502:	6313      	str	r3, [r2, #48]	; 0x30
 801d504:	4b48      	ldr	r3, [pc, #288]	; (801d628 <HAL_ETH_MspInit+0x16c>)
 801d506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d508:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801d50c:	61fb      	str	r3, [r7, #28]
 801d50e:	69fb      	ldr	r3, [r7, #28]
 801d510:	4b45      	ldr	r3, [pc, #276]	; (801d628 <HAL_ETH_MspInit+0x16c>)
 801d512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d514:	4a44      	ldr	r2, [pc, #272]	; (801d628 <HAL_ETH_MspInit+0x16c>)
 801d516:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801d51a:	6313      	str	r3, [r2, #48]	; 0x30
 801d51c:	4b42      	ldr	r3, [pc, #264]	; (801d628 <HAL_ETH_MspInit+0x16c>)
 801d51e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d520:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d524:	61bb      	str	r3, [r7, #24]
 801d526:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 801d528:	4b3f      	ldr	r3, [pc, #252]	; (801d628 <HAL_ETH_MspInit+0x16c>)
 801d52a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d52c:	4a3e      	ldr	r2, [pc, #248]	; (801d628 <HAL_ETH_MspInit+0x16c>)
 801d52e:	f043 0304 	orr.w	r3, r3, #4
 801d532:	6313      	str	r3, [r2, #48]	; 0x30
 801d534:	4b3c      	ldr	r3, [pc, #240]	; (801d628 <HAL_ETH_MspInit+0x16c>)
 801d536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d538:	f003 0304 	and.w	r3, r3, #4
 801d53c:	617b      	str	r3, [r7, #20]
 801d53e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801d540:	4b39      	ldr	r3, [pc, #228]	; (801d628 <HAL_ETH_MspInit+0x16c>)
 801d542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d544:	4a38      	ldr	r2, [pc, #224]	; (801d628 <HAL_ETH_MspInit+0x16c>)
 801d546:	f043 0301 	orr.w	r3, r3, #1
 801d54a:	6313      	str	r3, [r2, #48]	; 0x30
 801d54c:	4b36      	ldr	r3, [pc, #216]	; (801d628 <HAL_ETH_MspInit+0x16c>)
 801d54e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d550:	f003 0301 	and.w	r3, r3, #1
 801d554:	613b      	str	r3, [r7, #16]
 801d556:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801d558:	4b33      	ldr	r3, [pc, #204]	; (801d628 <HAL_ETH_MspInit+0x16c>)
 801d55a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d55c:	4a32      	ldr	r2, [pc, #200]	; (801d628 <HAL_ETH_MspInit+0x16c>)
 801d55e:	f043 0302 	orr.w	r3, r3, #2
 801d562:	6313      	str	r3, [r2, #48]	; 0x30
 801d564:	4b30      	ldr	r3, [pc, #192]	; (801d628 <HAL_ETH_MspInit+0x16c>)
 801d566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d568:	f003 0302 	and.w	r3, r3, #2
 801d56c:	60fb      	str	r3, [r7, #12]
 801d56e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 801d570:	4b2d      	ldr	r3, [pc, #180]	; (801d628 <HAL_ETH_MspInit+0x16c>)
 801d572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d574:	4a2c      	ldr	r2, [pc, #176]	; (801d628 <HAL_ETH_MspInit+0x16c>)
 801d576:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d57a:	6313      	str	r3, [r2, #48]	; 0x30
 801d57c:	4b2a      	ldr	r3, [pc, #168]	; (801d628 <HAL_ETH_MspInit+0x16c>)
 801d57e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d584:	60bb      	str	r3, [r7, #8]
 801d586:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    PG14     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = ETH_MDC_Pin|ETH_RXD0_Pin|ETH_RXD1_Pin;
 801d588:	2332      	movs	r3, #50	; 0x32
 801d58a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d58c:	2302      	movs	r3, #2
 801d58e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d590:	2300      	movs	r3, #0
 801d592:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801d594:	2303      	movs	r3, #3
 801d596:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801d598:	230b      	movs	r3, #11
 801d59a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801d59c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d5a0:	4619      	mov	r1, r3
 801d5a2:	4822      	ldr	r0, [pc, #136]	; (801d62c <HAL_ETH_MspInit+0x170>)
 801d5a4:	f7fa fdac 	bl	8018100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_REF_CLK_Pin|ETH_MDIO_Pin|ETH_CRS_DV_Pin;
 801d5a8:	2386      	movs	r3, #134	; 0x86
 801d5aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d5ac:	2302      	movs	r3, #2
 801d5ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d5b0:	2300      	movs	r3, #0
 801d5b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801d5b4:	2303      	movs	r3, #3
 801d5b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801d5b8:	230b      	movs	r3, #11
 801d5ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801d5bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d5c0:	4619      	mov	r1, r3
 801d5c2:	481b      	ldr	r0, [pc, #108]	; (801d630 <HAL_ETH_MspInit+0x174>)
 801d5c4:	f7fa fd9c 	bl	8018100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_TX_EN_Pin;
 801d5c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801d5cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d5ce:	2302      	movs	r3, #2
 801d5d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d5d2:	2300      	movs	r3, #0
 801d5d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801d5d6:	2303      	movs	r3, #3
 801d5d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801d5da:	230b      	movs	r3, #11
 801d5dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ETH_TX_EN_GPIO_Port, &GPIO_InitStruct);
 801d5de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d5e2:	4619      	mov	r1, r3
 801d5e4:	4813      	ldr	r0, [pc, #76]	; (801d634 <HAL_ETH_MspInit+0x178>)
 801d5e6:	f7fa fd8b 	bl	8018100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_TXD0_Pin|ETH_TXD1_Pin;
 801d5ea:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 801d5ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d5f0:	2302      	movs	r3, #2
 801d5f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d5f4:	2300      	movs	r3, #0
 801d5f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801d5f8:	2303      	movs	r3, #3
 801d5fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801d5fc:	230b      	movs	r3, #11
 801d5fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801d600:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d604:	4619      	mov	r1, r3
 801d606:	480c      	ldr	r0, [pc, #48]	; (801d638 <HAL_ETH_MspInit+0x17c>)
 801d608:	f7fa fd7a 	bl	8018100 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 1, 0);
 801d60c:	2200      	movs	r2, #0
 801d60e:	2101      	movs	r1, #1
 801d610:	203d      	movs	r0, #61	; 0x3d
 801d612:	f7f9 fa4a 	bl	8016aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 801d616:	203d      	movs	r0, #61	; 0x3d
 801d618:	f7f9 fa63 	bl	8016ae2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 801d61c:	bf00      	nop
 801d61e:	3738      	adds	r7, #56	; 0x38
 801d620:	46bd      	mov	sp, r7
 801d622:	bd80      	pop	{r7, pc}
 801d624:	40028000 	.word	0x40028000
 801d628:	40023800 	.word	0x40023800
 801d62c:	40020800 	.word	0x40020800
 801d630:	40020000 	.word	0x40020000
 801d634:	40020400 	.word	0x40020400
 801d638:	40021800 	.word	0x40021800

0801d63c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 801d63c:	b580      	push	{r7, lr}
 801d63e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 801d640:	4802      	ldr	r0, [pc, #8]	; (801d64c <ETH_PHY_IO_Init+0x10>)
 801d642:	f7fa f903 	bl	801784c <HAL_ETH_SetMDIOClockRange>

  return 0;
 801d646:	2300      	movs	r3, #0
}
 801d648:	4618      	mov	r0, r3
 801d64a:	bd80      	pop	{r7, pc}
 801d64c:	20010708 	.word	0x20010708

0801d650 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 801d650:	b480      	push	{r7}
 801d652:	af00      	add	r7, sp, #0
  return 0;
 801d654:	2300      	movs	r3, #0
}
 801d656:	4618      	mov	r0, r3
 801d658:	46bd      	mov	sp, r7
 801d65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d65e:	4770      	bx	lr

0801d660 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 801d660:	b580      	push	{r7, lr}
 801d662:	b084      	sub	sp, #16
 801d664:	af00      	add	r7, sp, #0
 801d666:	60f8      	str	r0, [r7, #12]
 801d668:	60b9      	str	r1, [r7, #8]
 801d66a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 801d66c:	687b      	ldr	r3, [r7, #4]
 801d66e:	68ba      	ldr	r2, [r7, #8]
 801d670:	68f9      	ldr	r1, [r7, #12]
 801d672:	4807      	ldr	r0, [pc, #28]	; (801d690 <ETH_PHY_IO_ReadReg+0x30>)
 801d674:	f7f9 ff52 	bl	801751c <HAL_ETH_ReadPHYRegister>
 801d678:	4603      	mov	r3, r0
 801d67a:	2b00      	cmp	r3, #0
 801d67c:	d002      	beq.n	801d684 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 801d67e:	f04f 33ff 	mov.w	r3, #4294967295
 801d682:	e000      	b.n	801d686 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 801d684:	2300      	movs	r3, #0
}
 801d686:	4618      	mov	r0, r3
 801d688:	3710      	adds	r7, #16
 801d68a:	46bd      	mov	sp, r7
 801d68c:	bd80      	pop	{r7, pc}
 801d68e:	bf00      	nop
 801d690:	20010708 	.word	0x20010708

0801d694 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 801d694:	b580      	push	{r7, lr}
 801d696:	b084      	sub	sp, #16
 801d698:	af00      	add	r7, sp, #0
 801d69a:	60f8      	str	r0, [r7, #12]
 801d69c:	60b9      	str	r1, [r7, #8]
 801d69e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 801d6a0:	687b      	ldr	r3, [r7, #4]
 801d6a2:	68ba      	ldr	r2, [r7, #8]
 801d6a4:	68f9      	ldr	r1, [r7, #12]
 801d6a6:	4807      	ldr	r0, [pc, #28]	; (801d6c4 <ETH_PHY_IO_WriteReg+0x30>)
 801d6a8:	f7f9 ff83 	bl	80175b2 <HAL_ETH_WritePHYRegister>
 801d6ac:	4603      	mov	r3, r0
 801d6ae:	2b00      	cmp	r3, #0
 801d6b0:	d002      	beq.n	801d6b8 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 801d6b2:	f04f 33ff 	mov.w	r3, #4294967295
 801d6b6:	e000      	b.n	801d6ba <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 801d6b8:	2300      	movs	r3, #0
}
 801d6ba:	4618      	mov	r0, r3
 801d6bc:	3710      	adds	r7, #16
 801d6be:	46bd      	mov	sp, r7
 801d6c0:	bd80      	pop	{r7, pc}
 801d6c2:	bf00      	nop
 801d6c4:	20010708 	.word	0x20010708

0801d6c8 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 801d6c8:	b580      	push	{r7, lr}
 801d6ca:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 801d6cc:	f7f8 fa0c 	bl	8015ae8 <HAL_GetTick>
 801d6d0:	4603      	mov	r3, r0
}
 801d6d2:	4618      	mov	r0, r3
 801d6d4:	bd80      	pop	{r7, pc}
	...

0801d6d8 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 801d6d8:	b580      	push	{r7, lr}
 801d6da:	b0a0      	sub	sp, #128	; 0x80
 801d6dc:	af00      	add	r7, sp, #0
 801d6de:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 801d6e0:	f107 030c 	add.w	r3, r7, #12
 801d6e4:	2264      	movs	r2, #100	; 0x64
 801d6e6:	2100      	movs	r1, #0
 801d6e8:	4618      	mov	r0, r3
 801d6ea:	f005 f91f 	bl	802292c <memset>
  int32_t PHYLinkState = 0;
 801d6ee:	2300      	movs	r3, #0
 801d6f0:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 801d6f2:	2300      	movs	r3, #0
 801d6f4:	67fb      	str	r3, [r7, #124]	; 0x7c
 801d6f6:	2300      	movs	r3, #0
 801d6f8:	67bb      	str	r3, [r7, #120]	; 0x78
 801d6fa:	2300      	movs	r3, #0
 801d6fc:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = DP83848_GetLinkState(&DP83848);
 801d6fe:	483a      	ldr	r0, [pc, #232]	; (801d7e8 <ethernet_link_check_state+0x110>)
 801d700:	f7f8 f90b 	bl	801591a <DP83848_GetLinkState>
 801d704:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= DP83848_STATUS_LINK_DOWN))
 801d706:	687b      	ldr	r3, [r7, #4]
 801d708:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801d70c:	089b      	lsrs	r3, r3, #2
 801d70e:	f003 0301 	and.w	r3, r3, #1
 801d712:	b2db      	uxtb	r3, r3
 801d714:	2b00      	cmp	r3, #0
 801d716:	d00c      	beq.n	801d732 <ethernet_link_check_state+0x5a>
 801d718:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d71a:	2b01      	cmp	r3, #1
 801d71c:	dc09      	bgt.n	801d732 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 801d71e:	4833      	ldr	r0, [pc, #204]	; (801d7ec <ethernet_link_check_state+0x114>)
 801d720:	f7f9 fbe3 	bl	8016eea <HAL_ETH_Stop>
    netif_set_down(netif);
 801d724:	6878      	ldr	r0, [r7, #4]
 801d726:	f001 f84b 	bl	801e7c0 <netif_set_down>
    netif_set_link_down(netif);
 801d72a:	6878      	ldr	r0, [r7, #4]
 801d72c:	f001 f8ae 	bl	801e88c <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 801d730:	e055      	b.n	801d7de <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > DP83848_STATUS_LINK_DOWN))
 801d732:	687b      	ldr	r3, [r7, #4]
 801d734:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801d738:	f003 0304 	and.w	r3, r3, #4
 801d73c:	2b00      	cmp	r3, #0
 801d73e:	d14e      	bne.n	801d7de <ethernet_link_check_state+0x106>
 801d740:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d742:	2b01      	cmp	r3, #1
 801d744:	dd4b      	ble.n	801d7de <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 801d746:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d748:	3b02      	subs	r3, #2
 801d74a:	2b03      	cmp	r3, #3
 801d74c:	d82a      	bhi.n	801d7a4 <ethernet_link_check_state+0xcc>
 801d74e:	a201      	add	r2, pc, #4	; (adr r2, 801d754 <ethernet_link_check_state+0x7c>)
 801d750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d754:	0801d765 	.word	0x0801d765
 801d758:	0801d777 	.word	0x0801d777
 801d75c:	0801d787 	.word	0x0801d787
 801d760:	0801d797 	.word	0x0801d797
      duplex = ETH_FULLDUPLEX_MODE;
 801d764:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801d768:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 801d76a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801d76e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 801d770:	2301      	movs	r3, #1
 801d772:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 801d774:	e017      	b.n	801d7a6 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 801d776:	2300      	movs	r3, #0
 801d778:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 801d77a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801d77e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 801d780:	2301      	movs	r3, #1
 801d782:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 801d784:	e00f      	b.n	801d7a6 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 801d786:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801d78a:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 801d78c:	2300      	movs	r3, #0
 801d78e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 801d790:	2301      	movs	r3, #1
 801d792:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 801d794:	e007      	b.n	801d7a6 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 801d796:	2300      	movs	r3, #0
 801d798:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 801d79a:	2300      	movs	r3, #0
 801d79c:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 801d79e:	2301      	movs	r3, #1
 801d7a0:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 801d7a2:	e000      	b.n	801d7a6 <ethernet_link_check_state+0xce>
      break;
 801d7a4:	bf00      	nop
    if(linkchanged)
 801d7a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801d7a8:	2b00      	cmp	r3, #0
 801d7aa:	d018      	beq.n	801d7de <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 801d7ac:	f107 030c 	add.w	r3, r7, #12
 801d7b0:	4619      	mov	r1, r3
 801d7b2:	480e      	ldr	r0, [pc, #56]	; (801d7ec <ethernet_link_check_state+0x114>)
 801d7b4:	f7f9 ff46 	bl	8017644 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 801d7b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d7ba:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 801d7bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801d7be:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 801d7c0:	f107 030c 	add.w	r3, r7, #12
 801d7c4:	4619      	mov	r1, r3
 801d7c6:	4809      	ldr	r0, [pc, #36]	; (801d7ec <ethernet_link_check_state+0x114>)
 801d7c8:	f7fa f826 	bl	8017818 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 801d7cc:	4807      	ldr	r0, [pc, #28]	; (801d7ec <ethernet_link_check_state+0x114>)
 801d7ce:	f7f9 fb2d 	bl	8016e2c <HAL_ETH_Start>
      netif_set_up(netif);
 801d7d2:	6878      	ldr	r0, [r7, #4]
 801d7d4:	f000 ff88 	bl	801e6e8 <netif_set_up>
      netif_set_link_up(netif);
 801d7d8:	6878      	ldr	r0, [r7, #4]
 801d7da:	f001 f823 	bl	801e824 <netif_set_link_up>
}
 801d7de:	bf00      	nop
 801d7e0:	3780      	adds	r7, #128	; 0x80
 801d7e2:	46bd      	mov	sp, r7
 801d7e4:	bd80      	pop	{r7, pc}
 801d7e6:	bf00      	nop
 801d7e8:	200107f0 	.word	0x200107f0
 801d7ec:	20010708 	.word	0x20010708

0801d7f0 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 801d7f0:	b580      	push	{r7, lr}
 801d7f2:	b086      	sub	sp, #24
 801d7f4:	af02      	add	r7, sp, #8
 801d7f6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
	struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 801d7f8:	4812      	ldr	r0, [pc, #72]	; (801d844 <HAL_ETH_RxAllocateCallback+0x54>)
 801d7fa:	f000 fca5 	bl	801e148 <memp_malloc_pool>
 801d7fe:	60f8      	str	r0, [r7, #12]
	if (p)
 801d800:	68fb      	ldr	r3, [r7, #12]
 801d802:	2b00      	cmp	r3, #0
 801d804:	d014      	beq.n	801d830 <HAL_ETH_RxAllocateCallback+0x40>
	{
		/* Get the buff from the struct pbuf address. */
		*buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 801d806:	68fb      	ldr	r3, [r7, #12]
 801d808:	f103 0214 	add.w	r2, r3, #20
 801d80c:	687b      	ldr	r3, [r7, #4]
 801d80e:	601a      	str	r2, [r3, #0]
		p->custom_free_function = pbuf_free_custom;
 801d810:	68fb      	ldr	r3, [r7, #12]
 801d812:	4a0d      	ldr	r2, [pc, #52]	; (801d848 <HAL_ETH_RxAllocateCallback+0x58>)
 801d814:	611a      	str	r2, [r3, #16]
		/* Initialize the struct pbuf.
		 * This must be performed whenever a buffer's allocated because it may be
		 * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
		pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 801d816:	687b      	ldr	r3, [r7, #4]
 801d818:	681b      	ldr	r3, [r3, #0]
 801d81a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 801d81e:	9201      	str	r2, [sp, #4]
 801d820:	9300      	str	r3, [sp, #0]
 801d822:	68fb      	ldr	r3, [r7, #12]
 801d824:	2241      	movs	r2, #65	; 0x41
 801d826:	2100      	movs	r1, #0
 801d828:	2000      	movs	r0, #0
 801d82a:	f001 fa75 	bl	801ed18 <pbuf_alloced_custom>
	{
		RxAllocStatus = RX_ALLOC_ERROR;
		*buff = NULL;
	}
/* USER CODE END HAL ETH RxAllocateCallback */
}
 801d82e:	e005      	b.n	801d83c <HAL_ETH_RxAllocateCallback+0x4c>
		RxAllocStatus = RX_ALLOC_ERROR;
 801d830:	4b06      	ldr	r3, [pc, #24]	; (801d84c <HAL_ETH_RxAllocateCallback+0x5c>)
 801d832:	2201      	movs	r2, #1
 801d834:	701a      	strb	r2, [r3, #0]
		*buff = NULL;
 801d836:	687b      	ldr	r3, [r7, #4]
 801d838:	2200      	movs	r2, #0
 801d83a:	601a      	str	r2, [r3, #0]
}
 801d83c:	bf00      	nop
 801d83e:	3710      	adds	r7, #16
 801d840:	46bd      	mov	sp, r7
 801d842:	bd80      	pop	{r7, pc}
 801d844:	080291d4 	.word	0x080291d4
 801d848:	0801d479 	.word	0x0801d479
 801d84c:	20010704 	.word	0x20010704

0801d850 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 801d850:	b580      	push	{r7, lr}
 801d852:	b088      	sub	sp, #32
 801d854:	af00      	add	r7, sp, #0
 801d856:	60f8      	str	r0, [r7, #12]
 801d858:	60b9      	str	r1, [r7, #8]
 801d85a:	607a      	str	r2, [r7, #4]
 801d85c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

	struct pbuf **ppStart = (struct pbuf **)pStart;
 801d85e:	68fb      	ldr	r3, [r7, #12]
 801d860:	61bb      	str	r3, [r7, #24]
	struct pbuf **ppEnd = (struct pbuf **)pEnd;
 801d862:	68bb      	ldr	r3, [r7, #8]
 801d864:	617b      	str	r3, [r7, #20]
	struct pbuf *p = NULL;
 801d866:	2300      	movs	r3, #0
 801d868:	61fb      	str	r3, [r7, #28]

	/* Get the struct pbuf from the buff address. */
	p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 801d86a:	687b      	ldr	r3, [r7, #4]
 801d86c:	3b14      	subs	r3, #20
 801d86e:	61fb      	str	r3, [r7, #28]
	p->next = NULL;
 801d870:	69fb      	ldr	r3, [r7, #28]
 801d872:	2200      	movs	r2, #0
 801d874:	601a      	str	r2, [r3, #0]
	p->tot_len = 0;
 801d876:	69fb      	ldr	r3, [r7, #28]
 801d878:	2200      	movs	r2, #0
 801d87a:	811a      	strh	r2, [r3, #8]
	p->len = Length;
 801d87c:	69fb      	ldr	r3, [r7, #28]
 801d87e:	887a      	ldrh	r2, [r7, #2]
 801d880:	815a      	strh	r2, [r3, #10]

	/* Chain the buffer. */
	if (!*ppStart)
 801d882:	69bb      	ldr	r3, [r7, #24]
 801d884:	681b      	ldr	r3, [r3, #0]
 801d886:	2b00      	cmp	r3, #0
 801d888:	d103      	bne.n	801d892 <HAL_ETH_RxLinkCallback+0x42>
	{
		/* The first buffer of the packet. */
		*ppStart = p;
 801d88a:	69bb      	ldr	r3, [r7, #24]
 801d88c:	69fa      	ldr	r2, [r7, #28]
 801d88e:	601a      	str	r2, [r3, #0]
 801d890:	e003      	b.n	801d89a <HAL_ETH_RxLinkCallback+0x4a>
	}
	else
	{
		/* Chain the buffer to the end of the packet. */
		(*ppEnd)->next = p;
 801d892:	697b      	ldr	r3, [r7, #20]
 801d894:	681b      	ldr	r3, [r3, #0]
 801d896:	69fa      	ldr	r2, [r7, #28]
 801d898:	601a      	str	r2, [r3, #0]
	}
	*ppEnd  = p;
 801d89a:	697b      	ldr	r3, [r7, #20]
 801d89c:	69fa      	ldr	r2, [r7, #28]
 801d89e:	601a      	str	r2, [r3, #0]

	/* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
	 * set to its own length, plus the length of all the following pbufs in the chain. */
	for (p = *ppStart; p != NULL; p = p->next)
 801d8a0:	69bb      	ldr	r3, [r7, #24]
 801d8a2:	681b      	ldr	r3, [r3, #0]
 801d8a4:	61fb      	str	r3, [r7, #28]
 801d8a6:	e009      	b.n	801d8bc <HAL_ETH_RxLinkCallback+0x6c>
	{
		p->tot_len += Length;
 801d8a8:	69fb      	ldr	r3, [r7, #28]
 801d8aa:	891a      	ldrh	r2, [r3, #8]
 801d8ac:	887b      	ldrh	r3, [r7, #2]
 801d8ae:	4413      	add	r3, r2
 801d8b0:	b29a      	uxth	r2, r3
 801d8b2:	69fb      	ldr	r3, [r7, #28]
 801d8b4:	811a      	strh	r2, [r3, #8]
	for (p = *ppStart; p != NULL; p = p->next)
 801d8b6:	69fb      	ldr	r3, [r7, #28]
 801d8b8:	681b      	ldr	r3, [r3, #0]
 801d8ba:	61fb      	str	r3, [r7, #28]
 801d8bc:	69fb      	ldr	r3, [r7, #28]
 801d8be:	2b00      	cmp	r3, #0
 801d8c0:	d1f2      	bne.n	801d8a8 <HAL_ETH_RxLinkCallback+0x58>
	}

	/* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
	SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 801d8c2:	887b      	ldrh	r3, [r7, #2]
 801d8c4:	4619      	mov	r1, r3
 801d8c6:	6878      	ldr	r0, [r7, #4]
 801d8c8:	f7ff fc14 	bl	801d0f4 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 801d8cc:	bf00      	nop
 801d8ce:	3720      	adds	r7, #32
 801d8d0:	46bd      	mov	sp, r7
 801d8d2:	bd80      	pop	{r7, pc}

0801d8d4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 801d8d4:	b480      	push	{r7}
 801d8d6:	b083      	sub	sp, #12
 801d8d8:	af00      	add	r7, sp, #0
 801d8da:	4603      	mov	r3, r0
 801d8dc:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 801d8de:	88fb      	ldrh	r3, [r7, #6]
 801d8e0:	021b      	lsls	r3, r3, #8
 801d8e2:	b21a      	sxth	r2, r3
 801d8e4:	88fb      	ldrh	r3, [r7, #6]
 801d8e6:	0a1b      	lsrs	r3, r3, #8
 801d8e8:	b29b      	uxth	r3, r3
 801d8ea:	b21b      	sxth	r3, r3
 801d8ec:	4313      	orrs	r3, r2
 801d8ee:	b21b      	sxth	r3, r3
 801d8f0:	b29b      	uxth	r3, r3
}
 801d8f2:	4618      	mov	r0, r3
 801d8f4:	370c      	adds	r7, #12
 801d8f6:	46bd      	mov	sp, r7
 801d8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d8fc:	4770      	bx	lr

0801d8fe <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 801d8fe:	b580      	push	{r7, lr}
 801d900:	b082      	sub	sp, #8
 801d902:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 801d904:	2300      	movs	r3, #0
 801d906:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 801d908:	f000 f8d2 	bl	801dab0 <mem_init>
  memp_init();
 801d90c:	f000 fbd8 	bl	801e0c0 <memp_init>
  pbuf_init();
  netif_init();
 801d910:	f000 fcfc 	bl	801e30c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 801d914:	f001 ff9a 	bl	801f84c <udp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 801d918:	f001 ff16 	bl	801f748 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 801d91c:	bf00      	nop
 801d91e:	3708      	adds	r7, #8
 801d920:	46bd      	mov	sp, r7
 801d922:	bd80      	pop	{r7, pc}

0801d924 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 801d924:	b480      	push	{r7}
 801d926:	b083      	sub	sp, #12
 801d928:	af00      	add	r7, sp, #0
 801d92a:	4603      	mov	r3, r0
 801d92c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 801d92e:	4b05      	ldr	r3, [pc, #20]	; (801d944 <ptr_to_mem+0x20>)
 801d930:	681a      	ldr	r2, [r3, #0]
 801d932:	88fb      	ldrh	r3, [r7, #6]
 801d934:	4413      	add	r3, r2
}
 801d936:	4618      	mov	r0, r3
 801d938:	370c      	adds	r7, #12
 801d93a:	46bd      	mov	sp, r7
 801d93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d940:	4770      	bx	lr
 801d942:	bf00      	nop
 801d944:	20010e7c 	.word	0x20010e7c

0801d948 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 801d948:	b480      	push	{r7}
 801d94a:	b083      	sub	sp, #12
 801d94c:	af00      	add	r7, sp, #0
 801d94e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 801d950:	4b05      	ldr	r3, [pc, #20]	; (801d968 <mem_to_ptr+0x20>)
 801d952:	681b      	ldr	r3, [r3, #0]
 801d954:	687a      	ldr	r2, [r7, #4]
 801d956:	1ad3      	subs	r3, r2, r3
 801d958:	b29b      	uxth	r3, r3
}
 801d95a:	4618      	mov	r0, r3
 801d95c:	370c      	adds	r7, #12
 801d95e:	46bd      	mov	sp, r7
 801d960:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d964:	4770      	bx	lr
 801d966:	bf00      	nop
 801d968:	20010e7c 	.word	0x20010e7c

0801d96c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 801d96c:	b590      	push	{r4, r7, lr}
 801d96e:	b085      	sub	sp, #20
 801d970:	af00      	add	r7, sp, #0
 801d972:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 801d974:	4b45      	ldr	r3, [pc, #276]	; (801da8c <plug_holes+0x120>)
 801d976:	681b      	ldr	r3, [r3, #0]
 801d978:	687a      	ldr	r2, [r7, #4]
 801d97a:	429a      	cmp	r2, r3
 801d97c:	d206      	bcs.n	801d98c <plug_holes+0x20>
 801d97e:	4b44      	ldr	r3, [pc, #272]	; (801da90 <plug_holes+0x124>)
 801d980:	f240 12df 	movw	r2, #479	; 0x1df
 801d984:	4943      	ldr	r1, [pc, #268]	; (801da94 <plug_holes+0x128>)
 801d986:	4844      	ldr	r0, [pc, #272]	; (801da98 <plug_holes+0x12c>)
 801d988:	f005 f8b8 	bl	8022afc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 801d98c:	4b43      	ldr	r3, [pc, #268]	; (801da9c <plug_holes+0x130>)
 801d98e:	681b      	ldr	r3, [r3, #0]
 801d990:	687a      	ldr	r2, [r7, #4]
 801d992:	429a      	cmp	r2, r3
 801d994:	d306      	bcc.n	801d9a4 <plug_holes+0x38>
 801d996:	4b3e      	ldr	r3, [pc, #248]	; (801da90 <plug_holes+0x124>)
 801d998:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801d99c:	4940      	ldr	r1, [pc, #256]	; (801daa0 <plug_holes+0x134>)
 801d99e:	483e      	ldr	r0, [pc, #248]	; (801da98 <plug_holes+0x12c>)
 801d9a0:	f005 f8ac 	bl	8022afc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 801d9a4:	687b      	ldr	r3, [r7, #4]
 801d9a6:	791b      	ldrb	r3, [r3, #4]
 801d9a8:	2b00      	cmp	r3, #0
 801d9aa:	d006      	beq.n	801d9ba <plug_holes+0x4e>
 801d9ac:	4b38      	ldr	r3, [pc, #224]	; (801da90 <plug_holes+0x124>)
 801d9ae:	f240 12e1 	movw	r2, #481	; 0x1e1
 801d9b2:	493c      	ldr	r1, [pc, #240]	; (801daa4 <plug_holes+0x138>)
 801d9b4:	4838      	ldr	r0, [pc, #224]	; (801da98 <plug_holes+0x12c>)
 801d9b6:	f005 f8a1 	bl	8022afc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801d9ba:	687b      	ldr	r3, [r7, #4]
 801d9bc:	881b      	ldrh	r3, [r3, #0]
 801d9be:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801d9c2:	d906      	bls.n	801d9d2 <plug_holes+0x66>
 801d9c4:	4b32      	ldr	r3, [pc, #200]	; (801da90 <plug_holes+0x124>)
 801d9c6:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 801d9ca:	4937      	ldr	r1, [pc, #220]	; (801daa8 <plug_holes+0x13c>)
 801d9cc:	4832      	ldr	r0, [pc, #200]	; (801da98 <plug_holes+0x12c>)
 801d9ce:	f005 f895 	bl	8022afc <iprintf>

  nmem = ptr_to_mem(mem->next);
 801d9d2:	687b      	ldr	r3, [r7, #4]
 801d9d4:	881b      	ldrh	r3, [r3, #0]
 801d9d6:	4618      	mov	r0, r3
 801d9d8:	f7ff ffa4 	bl	801d924 <ptr_to_mem>
 801d9dc:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 801d9de:	687a      	ldr	r2, [r7, #4]
 801d9e0:	68fb      	ldr	r3, [r7, #12]
 801d9e2:	429a      	cmp	r2, r3
 801d9e4:	d024      	beq.n	801da30 <plug_holes+0xc4>
 801d9e6:	68fb      	ldr	r3, [r7, #12]
 801d9e8:	791b      	ldrb	r3, [r3, #4]
 801d9ea:	2b00      	cmp	r3, #0
 801d9ec:	d120      	bne.n	801da30 <plug_holes+0xc4>
 801d9ee:	4b2b      	ldr	r3, [pc, #172]	; (801da9c <plug_holes+0x130>)
 801d9f0:	681b      	ldr	r3, [r3, #0]
 801d9f2:	68fa      	ldr	r2, [r7, #12]
 801d9f4:	429a      	cmp	r2, r3
 801d9f6:	d01b      	beq.n	801da30 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 801d9f8:	4b2c      	ldr	r3, [pc, #176]	; (801daac <plug_holes+0x140>)
 801d9fa:	681b      	ldr	r3, [r3, #0]
 801d9fc:	68fa      	ldr	r2, [r7, #12]
 801d9fe:	429a      	cmp	r2, r3
 801da00:	d102      	bne.n	801da08 <plug_holes+0x9c>
      lfree = mem;
 801da02:	4a2a      	ldr	r2, [pc, #168]	; (801daac <plug_holes+0x140>)
 801da04:	687b      	ldr	r3, [r7, #4]
 801da06:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 801da08:	68fb      	ldr	r3, [r7, #12]
 801da0a:	881a      	ldrh	r2, [r3, #0]
 801da0c:	687b      	ldr	r3, [r7, #4]
 801da0e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 801da10:	68fb      	ldr	r3, [r7, #12]
 801da12:	881b      	ldrh	r3, [r3, #0]
 801da14:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801da18:	d00a      	beq.n	801da30 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 801da1a:	68fb      	ldr	r3, [r7, #12]
 801da1c:	881b      	ldrh	r3, [r3, #0]
 801da1e:	4618      	mov	r0, r3
 801da20:	f7ff ff80 	bl	801d924 <ptr_to_mem>
 801da24:	4604      	mov	r4, r0
 801da26:	6878      	ldr	r0, [r7, #4]
 801da28:	f7ff ff8e 	bl	801d948 <mem_to_ptr>
 801da2c:	4603      	mov	r3, r0
 801da2e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 801da30:	687b      	ldr	r3, [r7, #4]
 801da32:	885b      	ldrh	r3, [r3, #2]
 801da34:	4618      	mov	r0, r3
 801da36:	f7ff ff75 	bl	801d924 <ptr_to_mem>
 801da3a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 801da3c:	68ba      	ldr	r2, [r7, #8]
 801da3e:	687b      	ldr	r3, [r7, #4]
 801da40:	429a      	cmp	r2, r3
 801da42:	d01f      	beq.n	801da84 <plug_holes+0x118>
 801da44:	68bb      	ldr	r3, [r7, #8]
 801da46:	791b      	ldrb	r3, [r3, #4]
 801da48:	2b00      	cmp	r3, #0
 801da4a:	d11b      	bne.n	801da84 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 801da4c:	4b17      	ldr	r3, [pc, #92]	; (801daac <plug_holes+0x140>)
 801da4e:	681b      	ldr	r3, [r3, #0]
 801da50:	687a      	ldr	r2, [r7, #4]
 801da52:	429a      	cmp	r2, r3
 801da54:	d102      	bne.n	801da5c <plug_holes+0xf0>
      lfree = pmem;
 801da56:	4a15      	ldr	r2, [pc, #84]	; (801daac <plug_holes+0x140>)
 801da58:	68bb      	ldr	r3, [r7, #8]
 801da5a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 801da5c:	687b      	ldr	r3, [r7, #4]
 801da5e:	881a      	ldrh	r2, [r3, #0]
 801da60:	68bb      	ldr	r3, [r7, #8]
 801da62:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 801da64:	687b      	ldr	r3, [r7, #4]
 801da66:	881b      	ldrh	r3, [r3, #0]
 801da68:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801da6c:	d00a      	beq.n	801da84 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 801da6e:	687b      	ldr	r3, [r7, #4]
 801da70:	881b      	ldrh	r3, [r3, #0]
 801da72:	4618      	mov	r0, r3
 801da74:	f7ff ff56 	bl	801d924 <ptr_to_mem>
 801da78:	4604      	mov	r4, r0
 801da7a:	68b8      	ldr	r0, [r7, #8]
 801da7c:	f7ff ff64 	bl	801d948 <mem_to_ptr>
 801da80:	4603      	mov	r3, r0
 801da82:	8063      	strh	r3, [r4, #2]
    }
  }
}
 801da84:	bf00      	nop
 801da86:	3714      	adds	r7, #20
 801da88:	46bd      	mov	sp, r7
 801da8a:	bd90      	pop	{r4, r7, pc}
 801da8c:	20010e7c 	.word	0x20010e7c
 801da90:	08027780 	.word	0x08027780
 801da94:	080277b0 	.word	0x080277b0
 801da98:	080277c8 	.word	0x080277c8
 801da9c:	20010e80 	.word	0x20010e80
 801daa0:	080277f0 	.word	0x080277f0
 801daa4:	0802780c 	.word	0x0802780c
 801daa8:	08027828 	.word	0x08027828
 801daac:	20010e84 	.word	0x20010e84

0801dab0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 801dab0:	b580      	push	{r7, lr}
 801dab2:	b082      	sub	sp, #8
 801dab4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801dab6:	4b18      	ldr	r3, [pc, #96]	; (801db18 <mem_init+0x68>)
 801dab8:	3303      	adds	r3, #3
 801daba:	f023 0303 	bic.w	r3, r3, #3
 801dabe:	461a      	mov	r2, r3
 801dac0:	4b16      	ldr	r3, [pc, #88]	; (801db1c <mem_init+0x6c>)
 801dac2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 801dac4:	4b15      	ldr	r3, [pc, #84]	; (801db1c <mem_init+0x6c>)
 801dac6:	681b      	ldr	r3, [r3, #0]
 801dac8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 801daca:	687b      	ldr	r3, [r7, #4]
 801dacc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801dad0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 801dad2:	687b      	ldr	r3, [r7, #4]
 801dad4:	2200      	movs	r2, #0
 801dad6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 801dad8:	687b      	ldr	r3, [r7, #4]
 801dada:	2200      	movs	r2, #0
 801dadc:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 801dade:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 801dae2:	f7ff ff1f 	bl	801d924 <ptr_to_mem>
 801dae6:	4603      	mov	r3, r0
 801dae8:	4a0d      	ldr	r2, [pc, #52]	; (801db20 <mem_init+0x70>)
 801daea:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 801daec:	4b0c      	ldr	r3, [pc, #48]	; (801db20 <mem_init+0x70>)
 801daee:	681b      	ldr	r3, [r3, #0]
 801daf0:	2201      	movs	r2, #1
 801daf2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 801daf4:	4b0a      	ldr	r3, [pc, #40]	; (801db20 <mem_init+0x70>)
 801daf6:	681b      	ldr	r3, [r3, #0]
 801daf8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801dafc:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 801dafe:	4b08      	ldr	r3, [pc, #32]	; (801db20 <mem_init+0x70>)
 801db00:	681b      	ldr	r3, [r3, #0]
 801db02:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801db06:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 801db08:	4b04      	ldr	r3, [pc, #16]	; (801db1c <mem_init+0x6c>)
 801db0a:	681b      	ldr	r3, [r3, #0]
 801db0c:	4a05      	ldr	r2, [pc, #20]	; (801db24 <mem_init+0x74>)
 801db0e:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 801db10:	bf00      	nop
 801db12:	3708      	adds	r7, #8
 801db14:	46bd      	mov	sp, r7
 801db16:	bd80      	pop	{r7, pc}
 801db18:	20010828 	.word	0x20010828
 801db1c:	20010e7c 	.word	0x20010e7c
 801db20:	20010e80 	.word	0x20010e80
 801db24:	20010e84 	.word	0x20010e84

0801db28 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 801db28:	b580      	push	{r7, lr}
 801db2a:	b086      	sub	sp, #24
 801db2c:	af00      	add	r7, sp, #0
 801db2e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 801db30:	6878      	ldr	r0, [r7, #4]
 801db32:	f7ff ff09 	bl	801d948 <mem_to_ptr>
 801db36:	4603      	mov	r3, r0
 801db38:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 801db3a:	687b      	ldr	r3, [r7, #4]
 801db3c:	881b      	ldrh	r3, [r3, #0]
 801db3e:	4618      	mov	r0, r3
 801db40:	f7ff fef0 	bl	801d924 <ptr_to_mem>
 801db44:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 801db46:	687b      	ldr	r3, [r7, #4]
 801db48:	885b      	ldrh	r3, [r3, #2]
 801db4a:	4618      	mov	r0, r3
 801db4c:	f7ff feea 	bl	801d924 <ptr_to_mem>
 801db50:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801db52:	687b      	ldr	r3, [r7, #4]
 801db54:	881b      	ldrh	r3, [r3, #0]
 801db56:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801db5a:	d818      	bhi.n	801db8e <mem_link_valid+0x66>
 801db5c:	687b      	ldr	r3, [r7, #4]
 801db5e:	885b      	ldrh	r3, [r3, #2]
 801db60:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801db64:	d813      	bhi.n	801db8e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801db66:	687b      	ldr	r3, [r7, #4]
 801db68:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801db6a:	8afa      	ldrh	r2, [r7, #22]
 801db6c:	429a      	cmp	r2, r3
 801db6e:	d004      	beq.n	801db7a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801db70:	68fb      	ldr	r3, [r7, #12]
 801db72:	881b      	ldrh	r3, [r3, #0]
 801db74:	8afa      	ldrh	r2, [r7, #22]
 801db76:	429a      	cmp	r2, r3
 801db78:	d109      	bne.n	801db8e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801db7a:	4b08      	ldr	r3, [pc, #32]	; (801db9c <mem_link_valid+0x74>)
 801db7c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801db7e:	693a      	ldr	r2, [r7, #16]
 801db80:	429a      	cmp	r2, r3
 801db82:	d006      	beq.n	801db92 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801db84:	693b      	ldr	r3, [r7, #16]
 801db86:	885b      	ldrh	r3, [r3, #2]
 801db88:	8afa      	ldrh	r2, [r7, #22]
 801db8a:	429a      	cmp	r2, r3
 801db8c:	d001      	beq.n	801db92 <mem_link_valid+0x6a>
    return 0;
 801db8e:	2300      	movs	r3, #0
 801db90:	e000      	b.n	801db94 <mem_link_valid+0x6c>
  }
  return 1;
 801db92:	2301      	movs	r3, #1
}
 801db94:	4618      	mov	r0, r3
 801db96:	3718      	adds	r7, #24
 801db98:	46bd      	mov	sp, r7
 801db9a:	bd80      	pop	{r7, pc}
 801db9c:	20010e80 	.word	0x20010e80

0801dba0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 801dba0:	b580      	push	{r7, lr}
 801dba2:	b084      	sub	sp, #16
 801dba4:	af00      	add	r7, sp, #0
 801dba6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 801dba8:	687b      	ldr	r3, [r7, #4]
 801dbaa:	2b00      	cmp	r3, #0
 801dbac:	d04c      	beq.n	801dc48 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801dbae:	687b      	ldr	r3, [r7, #4]
 801dbb0:	f003 0303 	and.w	r3, r3, #3
 801dbb4:	2b00      	cmp	r3, #0
 801dbb6:	d007      	beq.n	801dbc8 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 801dbb8:	4b25      	ldr	r3, [pc, #148]	; (801dc50 <mem_free+0xb0>)
 801dbba:	f240 2273 	movw	r2, #627	; 0x273
 801dbbe:	4925      	ldr	r1, [pc, #148]	; (801dc54 <mem_free+0xb4>)
 801dbc0:	4825      	ldr	r0, [pc, #148]	; (801dc58 <mem_free+0xb8>)
 801dbc2:	f004 ff9b 	bl	8022afc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 801dbc6:	e040      	b.n	801dc4a <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801dbc8:	687b      	ldr	r3, [r7, #4]
 801dbca:	3b08      	subs	r3, #8
 801dbcc:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801dbce:	4b23      	ldr	r3, [pc, #140]	; (801dc5c <mem_free+0xbc>)
 801dbd0:	681b      	ldr	r3, [r3, #0]
 801dbd2:	68fa      	ldr	r2, [r7, #12]
 801dbd4:	429a      	cmp	r2, r3
 801dbd6:	d306      	bcc.n	801dbe6 <mem_free+0x46>
 801dbd8:	687b      	ldr	r3, [r7, #4]
 801dbda:	f103 020c 	add.w	r2, r3, #12
 801dbde:	4b20      	ldr	r3, [pc, #128]	; (801dc60 <mem_free+0xc0>)
 801dbe0:	681b      	ldr	r3, [r3, #0]
 801dbe2:	429a      	cmp	r2, r3
 801dbe4:	d907      	bls.n	801dbf6 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801dbe6:	4b1a      	ldr	r3, [pc, #104]	; (801dc50 <mem_free+0xb0>)
 801dbe8:	f240 227f 	movw	r2, #639	; 0x27f
 801dbec:	491d      	ldr	r1, [pc, #116]	; (801dc64 <mem_free+0xc4>)
 801dbee:	481a      	ldr	r0, [pc, #104]	; (801dc58 <mem_free+0xb8>)
 801dbf0:	f004 ff84 	bl	8022afc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 801dbf4:	e029      	b.n	801dc4a <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 801dbf6:	68fb      	ldr	r3, [r7, #12]
 801dbf8:	791b      	ldrb	r3, [r3, #4]
 801dbfa:	2b00      	cmp	r3, #0
 801dbfc:	d107      	bne.n	801dc0e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 801dbfe:	4b14      	ldr	r3, [pc, #80]	; (801dc50 <mem_free+0xb0>)
 801dc00:	f44f 7223 	mov.w	r2, #652	; 0x28c
 801dc04:	4918      	ldr	r1, [pc, #96]	; (801dc68 <mem_free+0xc8>)
 801dc06:	4814      	ldr	r0, [pc, #80]	; (801dc58 <mem_free+0xb8>)
 801dc08:	f004 ff78 	bl	8022afc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 801dc0c:	e01d      	b.n	801dc4a <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 801dc0e:	68f8      	ldr	r0, [r7, #12]
 801dc10:	f7ff ff8a 	bl	801db28 <mem_link_valid>
 801dc14:	4603      	mov	r3, r0
 801dc16:	2b00      	cmp	r3, #0
 801dc18:	d107      	bne.n	801dc2a <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 801dc1a:	4b0d      	ldr	r3, [pc, #52]	; (801dc50 <mem_free+0xb0>)
 801dc1c:	f240 2295 	movw	r2, #661	; 0x295
 801dc20:	4912      	ldr	r1, [pc, #72]	; (801dc6c <mem_free+0xcc>)
 801dc22:	480d      	ldr	r0, [pc, #52]	; (801dc58 <mem_free+0xb8>)
 801dc24:	f004 ff6a 	bl	8022afc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 801dc28:	e00f      	b.n	801dc4a <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 801dc2a:	68fb      	ldr	r3, [r7, #12]
 801dc2c:	2200      	movs	r2, #0
 801dc2e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 801dc30:	4b0f      	ldr	r3, [pc, #60]	; (801dc70 <mem_free+0xd0>)
 801dc32:	681b      	ldr	r3, [r3, #0]
 801dc34:	68fa      	ldr	r2, [r7, #12]
 801dc36:	429a      	cmp	r2, r3
 801dc38:	d202      	bcs.n	801dc40 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 801dc3a:	4a0d      	ldr	r2, [pc, #52]	; (801dc70 <mem_free+0xd0>)
 801dc3c:	68fb      	ldr	r3, [r7, #12]
 801dc3e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 801dc40:	68f8      	ldr	r0, [r7, #12]
 801dc42:	f7ff fe93 	bl	801d96c <plug_holes>
 801dc46:	e000      	b.n	801dc4a <mem_free+0xaa>
    return;
 801dc48:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 801dc4a:	3710      	adds	r7, #16
 801dc4c:	46bd      	mov	sp, r7
 801dc4e:	bd80      	pop	{r7, pc}
 801dc50:	08027780 	.word	0x08027780
 801dc54:	08027854 	.word	0x08027854
 801dc58:	080277c8 	.word	0x080277c8
 801dc5c:	20010e7c 	.word	0x20010e7c
 801dc60:	20010e80 	.word	0x20010e80
 801dc64:	08027878 	.word	0x08027878
 801dc68:	08027894 	.word	0x08027894
 801dc6c:	080278bc 	.word	0x080278bc
 801dc70:	20010e84 	.word	0x20010e84

0801dc74 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 801dc74:	b580      	push	{r7, lr}
 801dc76:	b088      	sub	sp, #32
 801dc78:	af00      	add	r7, sp, #0
 801dc7a:	6078      	str	r0, [r7, #4]
 801dc7c:	460b      	mov	r3, r1
 801dc7e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 801dc80:	887b      	ldrh	r3, [r7, #2]
 801dc82:	3303      	adds	r3, #3
 801dc84:	b29b      	uxth	r3, r3
 801dc86:	f023 0303 	bic.w	r3, r3, #3
 801dc8a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 801dc8c:	8bfb      	ldrh	r3, [r7, #30]
 801dc8e:	2b0b      	cmp	r3, #11
 801dc90:	d801      	bhi.n	801dc96 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 801dc92:	230c      	movs	r3, #12
 801dc94:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 801dc96:	8bfb      	ldrh	r3, [r7, #30]
 801dc98:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801dc9c:	d803      	bhi.n	801dca6 <mem_trim+0x32>
 801dc9e:	8bfa      	ldrh	r2, [r7, #30]
 801dca0:	887b      	ldrh	r3, [r7, #2]
 801dca2:	429a      	cmp	r2, r3
 801dca4:	d201      	bcs.n	801dcaa <mem_trim+0x36>
    return NULL;
 801dca6:	2300      	movs	r3, #0
 801dca8:	e0cc      	b.n	801de44 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 801dcaa:	4b68      	ldr	r3, [pc, #416]	; (801de4c <mem_trim+0x1d8>)
 801dcac:	681b      	ldr	r3, [r3, #0]
 801dcae:	687a      	ldr	r2, [r7, #4]
 801dcb0:	429a      	cmp	r2, r3
 801dcb2:	d304      	bcc.n	801dcbe <mem_trim+0x4a>
 801dcb4:	4b66      	ldr	r3, [pc, #408]	; (801de50 <mem_trim+0x1dc>)
 801dcb6:	681b      	ldr	r3, [r3, #0]
 801dcb8:	687a      	ldr	r2, [r7, #4]
 801dcba:	429a      	cmp	r2, r3
 801dcbc:	d306      	bcc.n	801dccc <mem_trim+0x58>
 801dcbe:	4b65      	ldr	r3, [pc, #404]	; (801de54 <mem_trim+0x1e0>)
 801dcc0:	f240 22d1 	movw	r2, #721	; 0x2d1
 801dcc4:	4964      	ldr	r1, [pc, #400]	; (801de58 <mem_trim+0x1e4>)
 801dcc6:	4865      	ldr	r0, [pc, #404]	; (801de5c <mem_trim+0x1e8>)
 801dcc8:	f004 ff18 	bl	8022afc <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 801dccc:	4b5f      	ldr	r3, [pc, #380]	; (801de4c <mem_trim+0x1d8>)
 801dcce:	681b      	ldr	r3, [r3, #0]
 801dcd0:	687a      	ldr	r2, [r7, #4]
 801dcd2:	429a      	cmp	r2, r3
 801dcd4:	d304      	bcc.n	801dce0 <mem_trim+0x6c>
 801dcd6:	4b5e      	ldr	r3, [pc, #376]	; (801de50 <mem_trim+0x1dc>)
 801dcd8:	681b      	ldr	r3, [r3, #0]
 801dcda:	687a      	ldr	r2, [r7, #4]
 801dcdc:	429a      	cmp	r2, r3
 801dcde:	d301      	bcc.n	801dce4 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 801dce0:	687b      	ldr	r3, [r7, #4]
 801dce2:	e0af      	b.n	801de44 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801dce4:	687b      	ldr	r3, [r7, #4]
 801dce6:	3b08      	subs	r3, #8
 801dce8:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 801dcea:	69b8      	ldr	r0, [r7, #24]
 801dcec:	f7ff fe2c 	bl	801d948 <mem_to_ptr>
 801dcf0:	4603      	mov	r3, r0
 801dcf2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 801dcf4:	69bb      	ldr	r3, [r7, #24]
 801dcf6:	881a      	ldrh	r2, [r3, #0]
 801dcf8:	8afb      	ldrh	r3, [r7, #22]
 801dcfa:	1ad3      	subs	r3, r2, r3
 801dcfc:	b29b      	uxth	r3, r3
 801dcfe:	3b08      	subs	r3, #8
 801dd00:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801dd02:	8bfa      	ldrh	r2, [r7, #30]
 801dd04:	8abb      	ldrh	r3, [r7, #20]
 801dd06:	429a      	cmp	r2, r3
 801dd08:	d906      	bls.n	801dd18 <mem_trim+0xa4>
 801dd0a:	4b52      	ldr	r3, [pc, #328]	; (801de54 <mem_trim+0x1e0>)
 801dd0c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 801dd10:	4953      	ldr	r1, [pc, #332]	; (801de60 <mem_trim+0x1ec>)
 801dd12:	4852      	ldr	r0, [pc, #328]	; (801de5c <mem_trim+0x1e8>)
 801dd14:	f004 fef2 	bl	8022afc <iprintf>
  if (newsize > size) {
 801dd18:	8bfa      	ldrh	r2, [r7, #30]
 801dd1a:	8abb      	ldrh	r3, [r7, #20]
 801dd1c:	429a      	cmp	r2, r3
 801dd1e:	d901      	bls.n	801dd24 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 801dd20:	2300      	movs	r3, #0
 801dd22:	e08f      	b.n	801de44 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 801dd24:	8bfa      	ldrh	r2, [r7, #30]
 801dd26:	8abb      	ldrh	r3, [r7, #20]
 801dd28:	429a      	cmp	r2, r3
 801dd2a:	d101      	bne.n	801dd30 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 801dd2c:	687b      	ldr	r3, [r7, #4]
 801dd2e:	e089      	b.n	801de44 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 801dd30:	69bb      	ldr	r3, [r7, #24]
 801dd32:	881b      	ldrh	r3, [r3, #0]
 801dd34:	4618      	mov	r0, r3
 801dd36:	f7ff fdf5 	bl	801d924 <ptr_to_mem>
 801dd3a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 801dd3c:	693b      	ldr	r3, [r7, #16]
 801dd3e:	791b      	ldrb	r3, [r3, #4]
 801dd40:	2b00      	cmp	r3, #0
 801dd42:	d13f      	bne.n	801ddc4 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801dd44:	69bb      	ldr	r3, [r7, #24]
 801dd46:	881b      	ldrh	r3, [r3, #0]
 801dd48:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801dd4c:	d106      	bne.n	801dd5c <mem_trim+0xe8>
 801dd4e:	4b41      	ldr	r3, [pc, #260]	; (801de54 <mem_trim+0x1e0>)
 801dd50:	f240 22f5 	movw	r2, #757	; 0x2f5
 801dd54:	4943      	ldr	r1, [pc, #268]	; (801de64 <mem_trim+0x1f0>)
 801dd56:	4841      	ldr	r0, [pc, #260]	; (801de5c <mem_trim+0x1e8>)
 801dd58:	f004 fed0 	bl	8022afc <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 801dd5c:	693b      	ldr	r3, [r7, #16]
 801dd5e:	881b      	ldrh	r3, [r3, #0]
 801dd60:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801dd62:	8afa      	ldrh	r2, [r7, #22]
 801dd64:	8bfb      	ldrh	r3, [r7, #30]
 801dd66:	4413      	add	r3, r2
 801dd68:	b29b      	uxth	r3, r3
 801dd6a:	3308      	adds	r3, #8
 801dd6c:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 801dd6e:	4b3e      	ldr	r3, [pc, #248]	; (801de68 <mem_trim+0x1f4>)
 801dd70:	681b      	ldr	r3, [r3, #0]
 801dd72:	693a      	ldr	r2, [r7, #16]
 801dd74:	429a      	cmp	r2, r3
 801dd76:	d106      	bne.n	801dd86 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 801dd78:	89fb      	ldrh	r3, [r7, #14]
 801dd7a:	4618      	mov	r0, r3
 801dd7c:	f7ff fdd2 	bl	801d924 <ptr_to_mem>
 801dd80:	4603      	mov	r3, r0
 801dd82:	4a39      	ldr	r2, [pc, #228]	; (801de68 <mem_trim+0x1f4>)
 801dd84:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 801dd86:	89fb      	ldrh	r3, [r7, #14]
 801dd88:	4618      	mov	r0, r3
 801dd8a:	f7ff fdcb 	bl	801d924 <ptr_to_mem>
 801dd8e:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 801dd90:	693b      	ldr	r3, [r7, #16]
 801dd92:	2200      	movs	r2, #0
 801dd94:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 801dd96:	693b      	ldr	r3, [r7, #16]
 801dd98:	89ba      	ldrh	r2, [r7, #12]
 801dd9a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 801dd9c:	693b      	ldr	r3, [r7, #16]
 801dd9e:	8afa      	ldrh	r2, [r7, #22]
 801dda0:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 801dda2:	69bb      	ldr	r3, [r7, #24]
 801dda4:	89fa      	ldrh	r2, [r7, #14]
 801dda6:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801dda8:	693b      	ldr	r3, [r7, #16]
 801ddaa:	881b      	ldrh	r3, [r3, #0]
 801ddac:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801ddb0:	d047      	beq.n	801de42 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801ddb2:	693b      	ldr	r3, [r7, #16]
 801ddb4:	881b      	ldrh	r3, [r3, #0]
 801ddb6:	4618      	mov	r0, r3
 801ddb8:	f7ff fdb4 	bl	801d924 <ptr_to_mem>
 801ddbc:	4602      	mov	r2, r0
 801ddbe:	89fb      	ldrh	r3, [r7, #14]
 801ddc0:	8053      	strh	r3, [r2, #2]
 801ddc2:	e03e      	b.n	801de42 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 801ddc4:	8bfb      	ldrh	r3, [r7, #30]
 801ddc6:	f103 0214 	add.w	r2, r3, #20
 801ddca:	8abb      	ldrh	r3, [r7, #20]
 801ddcc:	429a      	cmp	r2, r3
 801ddce:	d838      	bhi.n	801de42 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801ddd0:	8afa      	ldrh	r2, [r7, #22]
 801ddd2:	8bfb      	ldrh	r3, [r7, #30]
 801ddd4:	4413      	add	r3, r2
 801ddd6:	b29b      	uxth	r3, r3
 801ddd8:	3308      	adds	r3, #8
 801ddda:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801dddc:	69bb      	ldr	r3, [r7, #24]
 801ddde:	881b      	ldrh	r3, [r3, #0]
 801dde0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801dde4:	d106      	bne.n	801ddf4 <mem_trim+0x180>
 801dde6:	4b1b      	ldr	r3, [pc, #108]	; (801de54 <mem_trim+0x1e0>)
 801dde8:	f240 3216 	movw	r2, #790	; 0x316
 801ddec:	491d      	ldr	r1, [pc, #116]	; (801de64 <mem_trim+0x1f0>)
 801ddee:	481b      	ldr	r0, [pc, #108]	; (801de5c <mem_trim+0x1e8>)
 801ddf0:	f004 fe84 	bl	8022afc <iprintf>
    mem2 = ptr_to_mem(ptr2);
 801ddf4:	89fb      	ldrh	r3, [r7, #14]
 801ddf6:	4618      	mov	r0, r3
 801ddf8:	f7ff fd94 	bl	801d924 <ptr_to_mem>
 801ddfc:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 801ddfe:	4b1a      	ldr	r3, [pc, #104]	; (801de68 <mem_trim+0x1f4>)
 801de00:	681b      	ldr	r3, [r3, #0]
 801de02:	693a      	ldr	r2, [r7, #16]
 801de04:	429a      	cmp	r2, r3
 801de06:	d202      	bcs.n	801de0e <mem_trim+0x19a>
      lfree = mem2;
 801de08:	4a17      	ldr	r2, [pc, #92]	; (801de68 <mem_trim+0x1f4>)
 801de0a:	693b      	ldr	r3, [r7, #16]
 801de0c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 801de0e:	693b      	ldr	r3, [r7, #16]
 801de10:	2200      	movs	r2, #0
 801de12:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 801de14:	69bb      	ldr	r3, [r7, #24]
 801de16:	881a      	ldrh	r2, [r3, #0]
 801de18:	693b      	ldr	r3, [r7, #16]
 801de1a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 801de1c:	693b      	ldr	r3, [r7, #16]
 801de1e:	8afa      	ldrh	r2, [r7, #22]
 801de20:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 801de22:	69bb      	ldr	r3, [r7, #24]
 801de24:	89fa      	ldrh	r2, [r7, #14]
 801de26:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801de28:	693b      	ldr	r3, [r7, #16]
 801de2a:	881b      	ldrh	r3, [r3, #0]
 801de2c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801de30:	d007      	beq.n	801de42 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801de32:	693b      	ldr	r3, [r7, #16]
 801de34:	881b      	ldrh	r3, [r3, #0]
 801de36:	4618      	mov	r0, r3
 801de38:	f7ff fd74 	bl	801d924 <ptr_to_mem>
 801de3c:	4602      	mov	r2, r0
 801de3e:	89fb      	ldrh	r3, [r7, #14]
 801de40:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 801de42:	687b      	ldr	r3, [r7, #4]
}
 801de44:	4618      	mov	r0, r3
 801de46:	3720      	adds	r7, #32
 801de48:	46bd      	mov	sp, r7
 801de4a:	bd80      	pop	{r7, pc}
 801de4c:	20010e7c 	.word	0x20010e7c
 801de50:	20010e80 	.word	0x20010e80
 801de54:	08027780 	.word	0x08027780
 801de58:	080278f0 	.word	0x080278f0
 801de5c:	080277c8 	.word	0x080277c8
 801de60:	08027908 	.word	0x08027908
 801de64:	08027928 	.word	0x08027928
 801de68:	20010e84 	.word	0x20010e84

0801de6c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 801de6c:	b580      	push	{r7, lr}
 801de6e:	b088      	sub	sp, #32
 801de70:	af00      	add	r7, sp, #0
 801de72:	4603      	mov	r3, r0
 801de74:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 801de76:	88fb      	ldrh	r3, [r7, #6]
 801de78:	2b00      	cmp	r3, #0
 801de7a:	d101      	bne.n	801de80 <mem_malloc+0x14>
    return NULL;
 801de7c:	2300      	movs	r3, #0
 801de7e:	e0d9      	b.n	801e034 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 801de80:	88fb      	ldrh	r3, [r7, #6]
 801de82:	3303      	adds	r3, #3
 801de84:	b29b      	uxth	r3, r3
 801de86:	f023 0303 	bic.w	r3, r3, #3
 801de8a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 801de8c:	8bbb      	ldrh	r3, [r7, #28]
 801de8e:	2b0b      	cmp	r3, #11
 801de90:	d801      	bhi.n	801de96 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 801de92:	230c      	movs	r3, #12
 801de94:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801de96:	8bbb      	ldrh	r3, [r7, #28]
 801de98:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801de9c:	d803      	bhi.n	801dea6 <mem_malloc+0x3a>
 801de9e:	8bba      	ldrh	r2, [r7, #28]
 801dea0:	88fb      	ldrh	r3, [r7, #6]
 801dea2:	429a      	cmp	r2, r3
 801dea4:	d201      	bcs.n	801deaa <mem_malloc+0x3e>
    return NULL;
 801dea6:	2300      	movs	r3, #0
 801dea8:	e0c4      	b.n	801e034 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801deaa:	4b64      	ldr	r3, [pc, #400]	; (801e03c <mem_malloc+0x1d0>)
 801deac:	681b      	ldr	r3, [r3, #0]
 801deae:	4618      	mov	r0, r3
 801deb0:	f7ff fd4a 	bl	801d948 <mem_to_ptr>
 801deb4:	4603      	mov	r3, r0
 801deb6:	83fb      	strh	r3, [r7, #30]
 801deb8:	e0b4      	b.n	801e024 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 801deba:	8bfb      	ldrh	r3, [r7, #30]
 801debc:	4618      	mov	r0, r3
 801debe:	f7ff fd31 	bl	801d924 <ptr_to_mem>
 801dec2:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 801dec4:	697b      	ldr	r3, [r7, #20]
 801dec6:	791b      	ldrb	r3, [r3, #4]
 801dec8:	2b00      	cmp	r3, #0
 801deca:	f040 80a4 	bne.w	801e016 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801dece:	697b      	ldr	r3, [r7, #20]
 801ded0:	881b      	ldrh	r3, [r3, #0]
 801ded2:	461a      	mov	r2, r3
 801ded4:	8bfb      	ldrh	r3, [r7, #30]
 801ded6:	1ad3      	subs	r3, r2, r3
 801ded8:	f1a3 0208 	sub.w	r2, r3, #8
 801dedc:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 801dede:	429a      	cmp	r2, r3
 801dee0:	f0c0 8099 	bcc.w	801e016 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 801dee4:	697b      	ldr	r3, [r7, #20]
 801dee6:	881b      	ldrh	r3, [r3, #0]
 801dee8:	461a      	mov	r2, r3
 801deea:	8bfb      	ldrh	r3, [r7, #30]
 801deec:	1ad3      	subs	r3, r2, r3
 801deee:	f1a3 0208 	sub.w	r2, r3, #8
 801def2:	8bbb      	ldrh	r3, [r7, #28]
 801def4:	3314      	adds	r3, #20
 801def6:	429a      	cmp	r2, r3
 801def8:	d333      	bcc.n	801df62 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 801defa:	8bfa      	ldrh	r2, [r7, #30]
 801defc:	8bbb      	ldrh	r3, [r7, #28]
 801defe:	4413      	add	r3, r2
 801df00:	b29b      	uxth	r3, r3
 801df02:	3308      	adds	r3, #8
 801df04:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 801df06:	8a7b      	ldrh	r3, [r7, #18]
 801df08:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801df0c:	d106      	bne.n	801df1c <mem_malloc+0xb0>
 801df0e:	4b4c      	ldr	r3, [pc, #304]	; (801e040 <mem_malloc+0x1d4>)
 801df10:	f240 3287 	movw	r2, #903	; 0x387
 801df14:	494b      	ldr	r1, [pc, #300]	; (801e044 <mem_malloc+0x1d8>)
 801df16:	484c      	ldr	r0, [pc, #304]	; (801e048 <mem_malloc+0x1dc>)
 801df18:	f004 fdf0 	bl	8022afc <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 801df1c:	8a7b      	ldrh	r3, [r7, #18]
 801df1e:	4618      	mov	r0, r3
 801df20:	f7ff fd00 	bl	801d924 <ptr_to_mem>
 801df24:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 801df26:	68fb      	ldr	r3, [r7, #12]
 801df28:	2200      	movs	r2, #0
 801df2a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 801df2c:	697b      	ldr	r3, [r7, #20]
 801df2e:	881a      	ldrh	r2, [r3, #0]
 801df30:	68fb      	ldr	r3, [r7, #12]
 801df32:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 801df34:	68fb      	ldr	r3, [r7, #12]
 801df36:	8bfa      	ldrh	r2, [r7, #30]
 801df38:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 801df3a:	697b      	ldr	r3, [r7, #20]
 801df3c:	8a7a      	ldrh	r2, [r7, #18]
 801df3e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 801df40:	697b      	ldr	r3, [r7, #20]
 801df42:	2201      	movs	r2, #1
 801df44:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 801df46:	68fb      	ldr	r3, [r7, #12]
 801df48:	881b      	ldrh	r3, [r3, #0]
 801df4a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801df4e:	d00b      	beq.n	801df68 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 801df50:	68fb      	ldr	r3, [r7, #12]
 801df52:	881b      	ldrh	r3, [r3, #0]
 801df54:	4618      	mov	r0, r3
 801df56:	f7ff fce5 	bl	801d924 <ptr_to_mem>
 801df5a:	4602      	mov	r2, r0
 801df5c:	8a7b      	ldrh	r3, [r7, #18]
 801df5e:	8053      	strh	r3, [r2, #2]
 801df60:	e002      	b.n	801df68 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 801df62:	697b      	ldr	r3, [r7, #20]
 801df64:	2201      	movs	r2, #1
 801df66:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 801df68:	4b34      	ldr	r3, [pc, #208]	; (801e03c <mem_malloc+0x1d0>)
 801df6a:	681b      	ldr	r3, [r3, #0]
 801df6c:	697a      	ldr	r2, [r7, #20]
 801df6e:	429a      	cmp	r2, r3
 801df70:	d127      	bne.n	801dfc2 <mem_malloc+0x156>
          struct mem *cur = lfree;
 801df72:	4b32      	ldr	r3, [pc, #200]	; (801e03c <mem_malloc+0x1d0>)
 801df74:	681b      	ldr	r3, [r3, #0]
 801df76:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 801df78:	e005      	b.n	801df86 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 801df7a:	69bb      	ldr	r3, [r7, #24]
 801df7c:	881b      	ldrh	r3, [r3, #0]
 801df7e:	4618      	mov	r0, r3
 801df80:	f7ff fcd0 	bl	801d924 <ptr_to_mem>
 801df84:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 801df86:	69bb      	ldr	r3, [r7, #24]
 801df88:	791b      	ldrb	r3, [r3, #4]
 801df8a:	2b00      	cmp	r3, #0
 801df8c:	d004      	beq.n	801df98 <mem_malloc+0x12c>
 801df8e:	4b2f      	ldr	r3, [pc, #188]	; (801e04c <mem_malloc+0x1e0>)
 801df90:	681b      	ldr	r3, [r3, #0]
 801df92:	69ba      	ldr	r2, [r7, #24]
 801df94:	429a      	cmp	r2, r3
 801df96:	d1f0      	bne.n	801df7a <mem_malloc+0x10e>
          }
          lfree = cur;
 801df98:	4a28      	ldr	r2, [pc, #160]	; (801e03c <mem_malloc+0x1d0>)
 801df9a:	69bb      	ldr	r3, [r7, #24]
 801df9c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 801df9e:	4b27      	ldr	r3, [pc, #156]	; (801e03c <mem_malloc+0x1d0>)
 801dfa0:	681a      	ldr	r2, [r3, #0]
 801dfa2:	4b2a      	ldr	r3, [pc, #168]	; (801e04c <mem_malloc+0x1e0>)
 801dfa4:	681b      	ldr	r3, [r3, #0]
 801dfa6:	429a      	cmp	r2, r3
 801dfa8:	d00b      	beq.n	801dfc2 <mem_malloc+0x156>
 801dfaa:	4b24      	ldr	r3, [pc, #144]	; (801e03c <mem_malloc+0x1d0>)
 801dfac:	681b      	ldr	r3, [r3, #0]
 801dfae:	791b      	ldrb	r3, [r3, #4]
 801dfb0:	2b00      	cmp	r3, #0
 801dfb2:	d006      	beq.n	801dfc2 <mem_malloc+0x156>
 801dfb4:	4b22      	ldr	r3, [pc, #136]	; (801e040 <mem_malloc+0x1d4>)
 801dfb6:	f240 32b5 	movw	r2, #949	; 0x3b5
 801dfba:	4925      	ldr	r1, [pc, #148]	; (801e050 <mem_malloc+0x1e4>)
 801dfbc:	4822      	ldr	r0, [pc, #136]	; (801e048 <mem_malloc+0x1dc>)
 801dfbe:	f004 fd9d 	bl	8022afc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801dfc2:	8bba      	ldrh	r2, [r7, #28]
 801dfc4:	697b      	ldr	r3, [r7, #20]
 801dfc6:	4413      	add	r3, r2
 801dfc8:	3308      	adds	r3, #8
 801dfca:	4a20      	ldr	r2, [pc, #128]	; (801e04c <mem_malloc+0x1e0>)
 801dfcc:	6812      	ldr	r2, [r2, #0]
 801dfce:	4293      	cmp	r3, r2
 801dfd0:	d906      	bls.n	801dfe0 <mem_malloc+0x174>
 801dfd2:	4b1b      	ldr	r3, [pc, #108]	; (801e040 <mem_malloc+0x1d4>)
 801dfd4:	f240 32b9 	movw	r2, #953	; 0x3b9
 801dfd8:	491e      	ldr	r1, [pc, #120]	; (801e054 <mem_malloc+0x1e8>)
 801dfda:	481b      	ldr	r0, [pc, #108]	; (801e048 <mem_malloc+0x1dc>)
 801dfdc:	f004 fd8e 	bl	8022afc <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 801dfe0:	697b      	ldr	r3, [r7, #20]
 801dfe2:	f003 0303 	and.w	r3, r3, #3
 801dfe6:	2b00      	cmp	r3, #0
 801dfe8:	d006      	beq.n	801dff8 <mem_malloc+0x18c>
 801dfea:	4b15      	ldr	r3, [pc, #84]	; (801e040 <mem_malloc+0x1d4>)
 801dfec:	f240 32bb 	movw	r2, #955	; 0x3bb
 801dff0:	4919      	ldr	r1, [pc, #100]	; (801e058 <mem_malloc+0x1ec>)
 801dff2:	4815      	ldr	r0, [pc, #84]	; (801e048 <mem_malloc+0x1dc>)
 801dff4:	f004 fd82 	bl	8022afc <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 801dff8:	697b      	ldr	r3, [r7, #20]
 801dffa:	f003 0303 	and.w	r3, r3, #3
 801dffe:	2b00      	cmp	r3, #0
 801e000:	d006      	beq.n	801e010 <mem_malloc+0x1a4>
 801e002:	4b0f      	ldr	r3, [pc, #60]	; (801e040 <mem_malloc+0x1d4>)
 801e004:	f240 32bd 	movw	r2, #957	; 0x3bd
 801e008:	4914      	ldr	r1, [pc, #80]	; (801e05c <mem_malloc+0x1f0>)
 801e00a:	480f      	ldr	r0, [pc, #60]	; (801e048 <mem_malloc+0x1dc>)
 801e00c:	f004 fd76 	bl	8022afc <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 801e010:	697b      	ldr	r3, [r7, #20]
 801e012:	3308      	adds	r3, #8
 801e014:	e00e      	b.n	801e034 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 801e016:	8bfb      	ldrh	r3, [r7, #30]
 801e018:	4618      	mov	r0, r3
 801e01a:	f7ff fc83 	bl	801d924 <ptr_to_mem>
 801e01e:	4603      	mov	r3, r0
 801e020:	881b      	ldrh	r3, [r3, #0]
 801e022:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801e024:	8bfa      	ldrh	r2, [r7, #30]
 801e026:	8bbb      	ldrh	r3, [r7, #28]
 801e028:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 801e02c:	429a      	cmp	r2, r3
 801e02e:	f4ff af44 	bcc.w	801deba <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 801e032:	2300      	movs	r3, #0
}
 801e034:	4618      	mov	r0, r3
 801e036:	3720      	adds	r7, #32
 801e038:	46bd      	mov	sp, r7
 801e03a:	bd80      	pop	{r7, pc}
 801e03c:	20010e84 	.word	0x20010e84
 801e040:	08027780 	.word	0x08027780
 801e044:	08027928 	.word	0x08027928
 801e048:	080277c8 	.word	0x080277c8
 801e04c:	20010e80 	.word	0x20010e80
 801e050:	0802793c 	.word	0x0802793c
 801e054:	08027958 	.word	0x08027958
 801e058:	08027988 	.word	0x08027988
 801e05c:	080279b8 	.word	0x080279b8

0801e060 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 801e060:	b480      	push	{r7}
 801e062:	b085      	sub	sp, #20
 801e064:	af00      	add	r7, sp, #0
 801e066:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 801e068:	687b      	ldr	r3, [r7, #4]
 801e06a:	689b      	ldr	r3, [r3, #8]
 801e06c:	2200      	movs	r2, #0
 801e06e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 801e070:	687b      	ldr	r3, [r7, #4]
 801e072:	685b      	ldr	r3, [r3, #4]
 801e074:	3303      	adds	r3, #3
 801e076:	f023 0303 	bic.w	r3, r3, #3
 801e07a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 801e07c:	2300      	movs	r3, #0
 801e07e:	60fb      	str	r3, [r7, #12]
 801e080:	e011      	b.n	801e0a6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801e082:	687b      	ldr	r3, [r7, #4]
 801e084:	689b      	ldr	r3, [r3, #8]
 801e086:	681a      	ldr	r2, [r3, #0]
 801e088:	68bb      	ldr	r3, [r7, #8]
 801e08a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 801e08c:	687b      	ldr	r3, [r7, #4]
 801e08e:	689b      	ldr	r3, [r3, #8]
 801e090:	68ba      	ldr	r2, [r7, #8]
 801e092:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801e094:	687b      	ldr	r3, [r7, #4]
 801e096:	881b      	ldrh	r3, [r3, #0]
 801e098:	461a      	mov	r2, r3
 801e09a:	68bb      	ldr	r3, [r7, #8]
 801e09c:	4413      	add	r3, r2
 801e09e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 801e0a0:	68fb      	ldr	r3, [r7, #12]
 801e0a2:	3301      	adds	r3, #1
 801e0a4:	60fb      	str	r3, [r7, #12]
 801e0a6:	687b      	ldr	r3, [r7, #4]
 801e0a8:	885b      	ldrh	r3, [r3, #2]
 801e0aa:	461a      	mov	r2, r3
 801e0ac:	68fb      	ldr	r3, [r7, #12]
 801e0ae:	4293      	cmp	r3, r2
 801e0b0:	dbe7      	blt.n	801e082 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 801e0b2:	bf00      	nop
 801e0b4:	bf00      	nop
 801e0b6:	3714      	adds	r7, #20
 801e0b8:	46bd      	mov	sp, r7
 801e0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e0be:	4770      	bx	lr

0801e0c0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 801e0c0:	b580      	push	{r7, lr}
 801e0c2:	b082      	sub	sp, #8
 801e0c4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801e0c6:	2300      	movs	r3, #0
 801e0c8:	80fb      	strh	r3, [r7, #6]
 801e0ca:	e009      	b.n	801e0e0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 801e0cc:	88fb      	ldrh	r3, [r7, #6]
 801e0ce:	4a08      	ldr	r2, [pc, #32]	; (801e0f0 <memp_init+0x30>)
 801e0d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801e0d4:	4618      	mov	r0, r3
 801e0d6:	f7ff ffc3 	bl	801e060 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801e0da:	88fb      	ldrh	r3, [r7, #6]
 801e0dc:	3301      	adds	r3, #1
 801e0de:	80fb      	strh	r3, [r7, #6]
 801e0e0:	88fb      	ldrh	r3, [r7, #6]
 801e0e2:	2b05      	cmp	r3, #5
 801e0e4:	d9f2      	bls.n	801e0cc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801e0e6:	bf00      	nop
 801e0e8:	bf00      	nop
 801e0ea:	3708      	adds	r7, #8
 801e0ec:	46bd      	mov	sp, r7
 801e0ee:	bd80      	pop	{r7, pc}
 801e0f0:	08029228 	.word	0x08029228

0801e0f4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 801e0f4:	b580      	push	{r7, lr}
 801e0f6:	b084      	sub	sp, #16
 801e0f8:	af00      	add	r7, sp, #0
 801e0fa:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 801e0fc:	687b      	ldr	r3, [r7, #4]
 801e0fe:	689b      	ldr	r3, [r3, #8]
 801e100:	681b      	ldr	r3, [r3, #0]
 801e102:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 801e104:	68fb      	ldr	r3, [r7, #12]
 801e106:	2b00      	cmp	r3, #0
 801e108:	d012      	beq.n	801e130 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 801e10a:	687b      	ldr	r3, [r7, #4]
 801e10c:	689b      	ldr	r3, [r3, #8]
 801e10e:	68fa      	ldr	r2, [r7, #12]
 801e110:	6812      	ldr	r2, [r2, #0]
 801e112:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801e114:	68fb      	ldr	r3, [r7, #12]
 801e116:	f003 0303 	and.w	r3, r3, #3
 801e11a:	2b00      	cmp	r3, #0
 801e11c:	d006      	beq.n	801e12c <do_memp_malloc_pool+0x38>
 801e11e:	4b07      	ldr	r3, [pc, #28]	; (801e13c <do_memp_malloc_pool+0x48>)
 801e120:	f44f 728c 	mov.w	r2, #280	; 0x118
 801e124:	4906      	ldr	r1, [pc, #24]	; (801e140 <do_memp_malloc_pool+0x4c>)
 801e126:	4807      	ldr	r0, [pc, #28]	; (801e144 <do_memp_malloc_pool+0x50>)
 801e128:	f004 fce8 	bl	8022afc <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 801e12c:	68fb      	ldr	r3, [r7, #12]
 801e12e:	e000      	b.n	801e132 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 801e130:	2300      	movs	r3, #0
}
 801e132:	4618      	mov	r0, r3
 801e134:	3710      	adds	r7, #16
 801e136:	46bd      	mov	sp, r7
 801e138:	bd80      	pop	{r7, pc}
 801e13a:	bf00      	nop
 801e13c:	080279dc 	.word	0x080279dc
 801e140:	08027a0c 	.word	0x08027a0c
 801e144:	08027a30 	.word	0x08027a30

0801e148 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 801e148:	b580      	push	{r7, lr}
 801e14a:	b082      	sub	sp, #8
 801e14c:	af00      	add	r7, sp, #0
 801e14e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 801e150:	687b      	ldr	r3, [r7, #4]
 801e152:	2b00      	cmp	r3, #0
 801e154:	d106      	bne.n	801e164 <memp_malloc_pool+0x1c>
 801e156:	4b0a      	ldr	r3, [pc, #40]	; (801e180 <memp_malloc_pool+0x38>)
 801e158:	f44f 729e 	mov.w	r2, #316	; 0x13c
 801e15c:	4909      	ldr	r1, [pc, #36]	; (801e184 <memp_malloc_pool+0x3c>)
 801e15e:	480a      	ldr	r0, [pc, #40]	; (801e188 <memp_malloc_pool+0x40>)
 801e160:	f004 fccc 	bl	8022afc <iprintf>
  if (desc == NULL) {
 801e164:	687b      	ldr	r3, [r7, #4]
 801e166:	2b00      	cmp	r3, #0
 801e168:	d101      	bne.n	801e16e <memp_malloc_pool+0x26>
    return NULL;
 801e16a:	2300      	movs	r3, #0
 801e16c:	e003      	b.n	801e176 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 801e16e:	6878      	ldr	r0, [r7, #4]
 801e170:	f7ff ffc0 	bl	801e0f4 <do_memp_malloc_pool>
 801e174:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 801e176:	4618      	mov	r0, r3
 801e178:	3708      	adds	r7, #8
 801e17a:	46bd      	mov	sp, r7
 801e17c:	bd80      	pop	{r7, pc}
 801e17e:	bf00      	nop
 801e180:	080279dc 	.word	0x080279dc
 801e184:	08027a58 	.word	0x08027a58
 801e188:	08027a30 	.word	0x08027a30

0801e18c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 801e18c:	b580      	push	{r7, lr}
 801e18e:	b084      	sub	sp, #16
 801e190:	af00      	add	r7, sp, #0
 801e192:	4603      	mov	r3, r0
 801e194:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801e196:	79fb      	ldrb	r3, [r7, #7]
 801e198:	2b05      	cmp	r3, #5
 801e19a:	d908      	bls.n	801e1ae <memp_malloc+0x22>
 801e19c:	4b0a      	ldr	r3, [pc, #40]	; (801e1c8 <memp_malloc+0x3c>)
 801e19e:	f240 1257 	movw	r2, #343	; 0x157
 801e1a2:	490a      	ldr	r1, [pc, #40]	; (801e1cc <memp_malloc+0x40>)
 801e1a4:	480a      	ldr	r0, [pc, #40]	; (801e1d0 <memp_malloc+0x44>)
 801e1a6:	f004 fca9 	bl	8022afc <iprintf>
 801e1aa:	2300      	movs	r3, #0
 801e1ac:	e008      	b.n	801e1c0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 801e1ae:	79fb      	ldrb	r3, [r7, #7]
 801e1b0:	4a08      	ldr	r2, [pc, #32]	; (801e1d4 <memp_malloc+0x48>)
 801e1b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801e1b6:	4618      	mov	r0, r3
 801e1b8:	f7ff ff9c 	bl	801e0f4 <do_memp_malloc_pool>
 801e1bc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 801e1be:	68fb      	ldr	r3, [r7, #12]
}
 801e1c0:	4618      	mov	r0, r3
 801e1c2:	3710      	adds	r7, #16
 801e1c4:	46bd      	mov	sp, r7
 801e1c6:	bd80      	pop	{r7, pc}
 801e1c8:	080279dc 	.word	0x080279dc
 801e1cc:	08027a6c 	.word	0x08027a6c
 801e1d0:	08027a30 	.word	0x08027a30
 801e1d4:	08029228 	.word	0x08029228

0801e1d8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801e1d8:	b580      	push	{r7, lr}
 801e1da:	b084      	sub	sp, #16
 801e1dc:	af00      	add	r7, sp, #0
 801e1de:	6078      	str	r0, [r7, #4]
 801e1e0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 801e1e2:	683b      	ldr	r3, [r7, #0]
 801e1e4:	f003 0303 	and.w	r3, r3, #3
 801e1e8:	2b00      	cmp	r3, #0
 801e1ea:	d006      	beq.n	801e1fa <do_memp_free_pool+0x22>
 801e1ec:	4b0a      	ldr	r3, [pc, #40]	; (801e218 <do_memp_free_pool+0x40>)
 801e1ee:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 801e1f2:	490a      	ldr	r1, [pc, #40]	; (801e21c <do_memp_free_pool+0x44>)
 801e1f4:	480a      	ldr	r0, [pc, #40]	; (801e220 <do_memp_free_pool+0x48>)
 801e1f6:	f004 fc81 	bl	8022afc <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801e1fa:	683b      	ldr	r3, [r7, #0]
 801e1fc:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 801e1fe:	687b      	ldr	r3, [r7, #4]
 801e200:	689b      	ldr	r3, [r3, #8]
 801e202:	681a      	ldr	r2, [r3, #0]
 801e204:	68fb      	ldr	r3, [r7, #12]
 801e206:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 801e208:	687b      	ldr	r3, [r7, #4]
 801e20a:	689b      	ldr	r3, [r3, #8]
 801e20c:	68fa      	ldr	r2, [r7, #12]
 801e20e:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 801e210:	bf00      	nop
 801e212:	3710      	adds	r7, #16
 801e214:	46bd      	mov	sp, r7
 801e216:	bd80      	pop	{r7, pc}
 801e218:	080279dc 	.word	0x080279dc
 801e21c:	08027a8c 	.word	0x08027a8c
 801e220:	08027a30 	.word	0x08027a30

0801e224 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801e224:	b580      	push	{r7, lr}
 801e226:	b082      	sub	sp, #8
 801e228:	af00      	add	r7, sp, #0
 801e22a:	6078      	str	r0, [r7, #4]
 801e22c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 801e22e:	687b      	ldr	r3, [r7, #4]
 801e230:	2b00      	cmp	r3, #0
 801e232:	d106      	bne.n	801e242 <memp_free_pool+0x1e>
 801e234:	4b0a      	ldr	r3, [pc, #40]	; (801e260 <memp_free_pool+0x3c>)
 801e236:	f240 1295 	movw	r2, #405	; 0x195
 801e23a:	490a      	ldr	r1, [pc, #40]	; (801e264 <memp_free_pool+0x40>)
 801e23c:	480a      	ldr	r0, [pc, #40]	; (801e268 <memp_free_pool+0x44>)
 801e23e:	f004 fc5d 	bl	8022afc <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 801e242:	687b      	ldr	r3, [r7, #4]
 801e244:	2b00      	cmp	r3, #0
 801e246:	d007      	beq.n	801e258 <memp_free_pool+0x34>
 801e248:	683b      	ldr	r3, [r7, #0]
 801e24a:	2b00      	cmp	r3, #0
 801e24c:	d004      	beq.n	801e258 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 801e24e:	6839      	ldr	r1, [r7, #0]
 801e250:	6878      	ldr	r0, [r7, #4]
 801e252:	f7ff ffc1 	bl	801e1d8 <do_memp_free_pool>
 801e256:	e000      	b.n	801e25a <memp_free_pool+0x36>
    return;
 801e258:	bf00      	nop
}
 801e25a:	3708      	adds	r7, #8
 801e25c:	46bd      	mov	sp, r7
 801e25e:	bd80      	pop	{r7, pc}
 801e260:	080279dc 	.word	0x080279dc
 801e264:	08027a58 	.word	0x08027a58
 801e268:	08027a30 	.word	0x08027a30

0801e26c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 801e26c:	b580      	push	{r7, lr}
 801e26e:	b082      	sub	sp, #8
 801e270:	af00      	add	r7, sp, #0
 801e272:	4603      	mov	r3, r0
 801e274:	6039      	str	r1, [r7, #0]
 801e276:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 801e278:	79fb      	ldrb	r3, [r7, #7]
 801e27a:	2b05      	cmp	r3, #5
 801e27c:	d907      	bls.n	801e28e <memp_free+0x22>
 801e27e:	4b0c      	ldr	r3, [pc, #48]	; (801e2b0 <memp_free+0x44>)
 801e280:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 801e284:	490b      	ldr	r1, [pc, #44]	; (801e2b4 <memp_free+0x48>)
 801e286:	480c      	ldr	r0, [pc, #48]	; (801e2b8 <memp_free+0x4c>)
 801e288:	f004 fc38 	bl	8022afc <iprintf>
 801e28c:	e00c      	b.n	801e2a8 <memp_free+0x3c>

  if (mem == NULL) {
 801e28e:	683b      	ldr	r3, [r7, #0]
 801e290:	2b00      	cmp	r3, #0
 801e292:	d008      	beq.n	801e2a6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 801e294:	79fb      	ldrb	r3, [r7, #7]
 801e296:	4a09      	ldr	r2, [pc, #36]	; (801e2bc <memp_free+0x50>)
 801e298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801e29c:	6839      	ldr	r1, [r7, #0]
 801e29e:	4618      	mov	r0, r3
 801e2a0:	f7ff ff9a 	bl	801e1d8 <do_memp_free_pool>
 801e2a4:	e000      	b.n	801e2a8 <memp_free+0x3c>
    return;
 801e2a6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 801e2a8:	3708      	adds	r7, #8
 801e2aa:	46bd      	mov	sp, r7
 801e2ac:	bd80      	pop	{r7, pc}
 801e2ae:	bf00      	nop
 801e2b0:	080279dc 	.word	0x080279dc
 801e2b4:	08027aac 	.word	0x08027aac
 801e2b8:	08027a30 	.word	0x08027a30
 801e2bc:	08029228 	.word	0x08029228

0801e2c0 <netif_loopif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 */
static err_t
netif_loopif_init(struct netif *netif)
{
 801e2c0:	b580      	push	{r7, lr}
 801e2c2:	b082      	sub	sp, #8
 801e2c4:	af00      	add	r7, sp, #0
 801e2c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif_loopif_init: invalid netif", netif != NULL);
 801e2c8:	687b      	ldr	r3, [r7, #4]
 801e2ca:	2b00      	cmp	r3, #0
 801e2cc:	d105      	bne.n	801e2da <netif_loopif_init+0x1a>
 801e2ce:	4b0b      	ldr	r3, [pc, #44]	; (801e2fc <netif_loopif_init+0x3c>)
 801e2d0:	2299      	movs	r2, #153	; 0x99
 801e2d2:	490b      	ldr	r1, [pc, #44]	; (801e300 <netif_loopif_init+0x40>)
 801e2d4:	480b      	ldr	r0, [pc, #44]	; (801e304 <netif_loopif_init+0x44>)
 801e2d6:	f004 fc11 	bl	8022afc <iprintf>
  /* initialize the snmp variables and counters inside the struct netif
   * ifSpeed: no assumption can be made!
   */
  MIB2_INIT_NETIF(netif, snmp_ifType_softwareLoopback, 0);

  netif->name[0] = 'l';
 801e2da:	687b      	ldr	r3, [r7, #4]
 801e2dc:	226c      	movs	r2, #108	; 0x6c
 801e2de:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = 'o';
 801e2e2:	687b      	ldr	r3, [r7, #4]
 801e2e4:	226f      	movs	r2, #111	; 0x6f
 801e2e6:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
#if LWIP_IPV4
  netif->output = netif_loop_output_ipv4;
 801e2ea:	687b      	ldr	r3, [r7, #4]
 801e2ec:	4a06      	ldr	r2, [pc, #24]	; (801e308 <netif_loopif_init+0x48>)
 801e2ee:	615a      	str	r2, [r3, #20]
#endif
#if LWIP_LOOPIF_MULTICAST
  netif_set_flags(netif, NETIF_FLAG_IGMP);
#endif
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_DISABLE_ALL);
  return ERR_OK;
 801e2f0:	2300      	movs	r3, #0
}
 801e2f2:	4618      	mov	r0, r3
 801e2f4:	3708      	adds	r7, #8
 801e2f6:	46bd      	mov	sp, r7
 801e2f8:	bd80      	pop	{r7, pc}
 801e2fa:	bf00      	nop
 801e2fc:	08027ac8 	.word	0x08027ac8
 801e300:	08027afc 	.word	0x08027afc
 801e304:	08027b20 	.word	0x08027b20
 801e308:	0801e9ed 	.word	0x0801e9ed

0801e30c <netif_init>:
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 801e30c:	b580      	push	{r7, lr}
 801e30e:	b088      	sub	sp, #32
 801e310:	af04      	add	r7, sp, #16
#if LWIP_HAVE_LOOPIF
#if LWIP_IPV4
#define LOOPIF_ADDRINIT &loop_ipaddr, &loop_netmask, &loop_gw,
  ip4_addr_t loop_ipaddr, loop_netmask, loop_gw;
  IP4_ADDR(&loop_gw, 127, 0, 0, 1);
 801e312:	4b0f      	ldr	r3, [pc, #60]	; (801e350 <netif_init+0x44>)
 801e314:	607b      	str	r3, [r7, #4]
  IP4_ADDR(&loop_ipaddr, 127, 0, 0, 1);
 801e316:	4b0e      	ldr	r3, [pc, #56]	; (801e350 <netif_init+0x44>)
 801e318:	60fb      	str	r3, [r7, #12]
  IP4_ADDR(&loop_netmask, 255, 0, 0, 0);
 801e31a:	23ff      	movs	r3, #255	; 0xff
 801e31c:	60bb      	str	r3, [r7, #8]
#else /* LWIP_IPV4 */
#define LOOPIF_ADDRINIT
#endif /* LWIP_IPV4 */

#if NO_SYS
  netif_add(&loop_netif, LOOPIF_ADDRINIT NULL, netif_loopif_init, ip_input);
 801e31e:	1d3b      	adds	r3, r7, #4
 801e320:	f107 0208 	add.w	r2, r7, #8
 801e324:	f107 010c 	add.w	r1, r7, #12
 801e328:	480a      	ldr	r0, [pc, #40]	; (801e354 <netif_init+0x48>)
 801e32a:	9002      	str	r0, [sp, #8]
 801e32c:	480a      	ldr	r0, [pc, #40]	; (801e358 <netif_init+0x4c>)
 801e32e:	9001      	str	r0, [sp, #4]
 801e330:	2000      	movs	r0, #0
 801e332:	9000      	str	r0, [sp, #0]
 801e334:	4809      	ldr	r0, [pc, #36]	; (801e35c <netif_init+0x50>)
 801e336:	f000 f813 	bl	801e360 <netif_add>
#if LWIP_IPV6
  IP_ADDR6_HOST(loop_netif.ip6_addr, 0, 0, 0, 0x00000001UL);
  loop_netif.ip6_addr_state[0] = IP6_ADDR_VALID;
#endif /* LWIP_IPV6 */

  netif_set_link_up(&loop_netif);
 801e33a:	4808      	ldr	r0, [pc, #32]	; (801e35c <netif_init+0x50>)
 801e33c:	f000 fa72 	bl	801e824 <netif_set_link_up>
  netif_set_up(&loop_netif);
 801e340:	4806      	ldr	r0, [pc, #24]	; (801e35c <netif_init+0x50>)
 801e342:	f000 f9d1 	bl	801e6e8 <netif_set_up>

#endif /* LWIP_HAVE_LOOPIF */
}
 801e346:	bf00      	nop
 801e348:	3710      	adds	r7, #16
 801e34a:	46bd      	mov	sp, r7
 801e34c:	bd80      	pop	{r7, pc}
 801e34e:	bf00      	nop
 801e350:	0100007f 	.word	0x0100007f
 801e354:	08021489 	.word	0x08021489
 801e358:	0801e2c1 	.word	0x0801e2c1
 801e35c:	20013e2c 	.word	0x20013e2c

0801e360 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 801e360:	b580      	push	{r7, lr}
 801e362:	b086      	sub	sp, #24
 801e364:	af00      	add	r7, sp, #0
 801e366:	60f8      	str	r0, [r7, #12]
 801e368:	60b9      	str	r1, [r7, #8]
 801e36a:	607a      	str	r2, [r7, #4]
 801e36c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801e36e:	68fb      	ldr	r3, [r7, #12]
 801e370:	2b00      	cmp	r3, #0
 801e372:	d108      	bne.n	801e386 <netif_add+0x26>
 801e374:	4b5a      	ldr	r3, [pc, #360]	; (801e4e0 <netif_add+0x180>)
 801e376:	f240 1227 	movw	r2, #295	; 0x127
 801e37a:	495a      	ldr	r1, [pc, #360]	; (801e4e4 <netif_add+0x184>)
 801e37c:	485a      	ldr	r0, [pc, #360]	; (801e4e8 <netif_add+0x188>)
 801e37e:	f004 fbbd 	bl	8022afc <iprintf>
 801e382:	2300      	movs	r3, #0
 801e384:	e0a8      	b.n	801e4d8 <netif_add+0x178>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801e386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e388:	2b00      	cmp	r3, #0
 801e38a:	d108      	bne.n	801e39e <netif_add+0x3e>
 801e38c:	4b54      	ldr	r3, [pc, #336]	; (801e4e0 <netif_add+0x180>)
 801e38e:	f44f 7294 	mov.w	r2, #296	; 0x128
 801e392:	4956      	ldr	r1, [pc, #344]	; (801e4ec <netif_add+0x18c>)
 801e394:	4854      	ldr	r0, [pc, #336]	; (801e4e8 <netif_add+0x188>)
 801e396:	f004 fbb1 	bl	8022afc <iprintf>
 801e39a:	2300      	movs	r3, #0
 801e39c:	e09c      	b.n	801e4d8 <netif_add+0x178>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 801e39e:	68bb      	ldr	r3, [r7, #8]
 801e3a0:	2b00      	cmp	r3, #0
 801e3a2:	d101      	bne.n	801e3a8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 801e3a4:	4b52      	ldr	r3, [pc, #328]	; (801e4f0 <netif_add+0x190>)
 801e3a6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801e3a8:	687b      	ldr	r3, [r7, #4]
 801e3aa:	2b00      	cmp	r3, #0
 801e3ac:	d101      	bne.n	801e3b2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 801e3ae:	4b50      	ldr	r3, [pc, #320]	; (801e4f0 <netif_add+0x190>)
 801e3b0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801e3b2:	683b      	ldr	r3, [r7, #0]
 801e3b4:	2b00      	cmp	r3, #0
 801e3b6:	d101      	bne.n	801e3bc <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 801e3b8:	4b4d      	ldr	r3, [pc, #308]	; (801e4f0 <netif_add+0x190>)
 801e3ba:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 801e3bc:	68fb      	ldr	r3, [r7, #12]
 801e3be:	2200      	movs	r2, #0
 801e3c0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 801e3c2:	68fb      	ldr	r3, [r7, #12]
 801e3c4:	2200      	movs	r2, #0
 801e3c6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 801e3c8:	68fb      	ldr	r3, [r7, #12]
 801e3ca:	2200      	movs	r2, #0
 801e3cc:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 801e3ce:	68fb      	ldr	r3, [r7, #12]
 801e3d0:	4a48      	ldr	r2, [pc, #288]	; (801e4f4 <netif_add+0x194>)
 801e3d2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 801e3d4:	68fb      	ldr	r3, [r7, #12]
 801e3d6:	2200      	movs	r2, #0
 801e3d8:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 801e3da:	68fb      	ldr	r3, [r7, #12]
 801e3dc:	2200      	movs	r2, #0
 801e3de:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 801e3e2:	68fb      	ldr	r3, [r7, #12]
 801e3e4:	2200      	movs	r2, #0
 801e3e6:	61da      	str	r2, [r3, #28]
#endif /* LWIP_IGMP */
#if LWIP_IPV6 && LWIP_IPV6_MLD
  netif->mld_mac_filter = NULL;
#endif /* LWIP_IPV6 && LWIP_IPV6_MLD */
#if ENABLE_LOOPBACK
  netif->loop_first = NULL;
 801e3e8:	68fb      	ldr	r3, [r7, #12]
 801e3ea:	2200      	movs	r2, #0
 801e3ec:	639a      	str	r2, [r3, #56]	; 0x38
  netif->loop_last = NULL;
 801e3ee:	68fb      	ldr	r3, [r7, #12]
 801e3f0:	2200      	movs	r2, #0
 801e3f2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 801e3f4:	68fb      	ldr	r3, [r7, #12]
 801e3f6:	6a3a      	ldr	r2, [r7, #32]
 801e3f8:	625a      	str	r2, [r3, #36]	; 0x24
  netif->num = netif_num;
 801e3fa:	4b3f      	ldr	r3, [pc, #252]	; (801e4f8 <netif_add+0x198>)
 801e3fc:	781a      	ldrb	r2, [r3, #0]
 801e3fe:	68fb      	ldr	r3, [r7, #12]
 801e400:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 801e404:	68fb      	ldr	r3, [r7, #12]
 801e406:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801e408:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 801e40a:	683b      	ldr	r3, [r7, #0]
 801e40c:	687a      	ldr	r2, [r7, #4]
 801e40e:	68b9      	ldr	r1, [r7, #8]
 801e410:	68f8      	ldr	r0, [r7, #12]
 801e412:	f000 f90f 	bl	801e634 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 801e416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e418:	68f8      	ldr	r0, [r7, #12]
 801e41a:	4798      	blx	r3
 801e41c:	4603      	mov	r3, r0
 801e41e:	2b00      	cmp	r3, #0
 801e420:	d001      	beq.n	801e426 <netif_add+0xc6>
    return NULL;
 801e422:	2300      	movs	r3, #0
 801e424:	e058      	b.n	801e4d8 <netif_add+0x178>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 801e426:	68fb      	ldr	r3, [r7, #12]
 801e428:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801e42c:	2bff      	cmp	r3, #255	; 0xff
 801e42e:	d103      	bne.n	801e438 <netif_add+0xd8>
        netif->num = 0;
 801e430:	68fb      	ldr	r3, [r7, #12]
 801e432:	2200      	movs	r2, #0
 801e434:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 801e438:	2300      	movs	r3, #0
 801e43a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801e43c:	4b2f      	ldr	r3, [pc, #188]	; (801e4fc <netif_add+0x19c>)
 801e43e:	681b      	ldr	r3, [r3, #0]
 801e440:	617b      	str	r3, [r7, #20]
 801e442:	e02b      	b.n	801e49c <netif_add+0x13c>
        LWIP_ASSERT("netif already added", netif2 != netif);
 801e444:	697a      	ldr	r2, [r7, #20]
 801e446:	68fb      	ldr	r3, [r7, #12]
 801e448:	429a      	cmp	r2, r3
 801e44a:	d106      	bne.n	801e45a <netif_add+0xfa>
 801e44c:	4b24      	ldr	r3, [pc, #144]	; (801e4e0 <netif_add+0x180>)
 801e44e:	f240 128b 	movw	r2, #395	; 0x18b
 801e452:	492b      	ldr	r1, [pc, #172]	; (801e500 <netif_add+0x1a0>)
 801e454:	4824      	ldr	r0, [pc, #144]	; (801e4e8 <netif_add+0x188>)
 801e456:	f004 fb51 	bl	8022afc <iprintf>
        num_netifs++;
 801e45a:	693b      	ldr	r3, [r7, #16]
 801e45c:	3301      	adds	r3, #1
 801e45e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 801e460:	693b      	ldr	r3, [r7, #16]
 801e462:	2bff      	cmp	r3, #255	; 0xff
 801e464:	dd06      	ble.n	801e474 <netif_add+0x114>
 801e466:	4b1e      	ldr	r3, [pc, #120]	; (801e4e0 <netif_add+0x180>)
 801e468:	f240 128d 	movw	r2, #397	; 0x18d
 801e46c:	4925      	ldr	r1, [pc, #148]	; (801e504 <netif_add+0x1a4>)
 801e46e:	481e      	ldr	r0, [pc, #120]	; (801e4e8 <netif_add+0x188>)
 801e470:	f004 fb44 	bl	8022afc <iprintf>
        if (netif2->num == netif->num) {
 801e474:	697b      	ldr	r3, [r7, #20]
 801e476:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 801e47a:	68fb      	ldr	r3, [r7, #12]
 801e47c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801e480:	429a      	cmp	r2, r3
 801e482:	d108      	bne.n	801e496 <netif_add+0x136>
          netif->num++;
 801e484:	68fb      	ldr	r3, [r7, #12]
 801e486:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801e48a:	3301      	adds	r3, #1
 801e48c:	b2da      	uxtb	r2, r3
 801e48e:	68fb      	ldr	r3, [r7, #12]
 801e490:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 801e494:	e005      	b.n	801e4a2 <netif_add+0x142>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801e496:	697b      	ldr	r3, [r7, #20]
 801e498:	681b      	ldr	r3, [r3, #0]
 801e49a:	617b      	str	r3, [r7, #20]
 801e49c:	697b      	ldr	r3, [r7, #20]
 801e49e:	2b00      	cmp	r3, #0
 801e4a0:	d1d0      	bne.n	801e444 <netif_add+0xe4>
        }
      }
    } while (netif2 != NULL);
 801e4a2:	697b      	ldr	r3, [r7, #20]
 801e4a4:	2b00      	cmp	r3, #0
 801e4a6:	d1be      	bne.n	801e426 <netif_add+0xc6>
  }
  if (netif->num == 254) {
 801e4a8:	68fb      	ldr	r3, [r7, #12]
 801e4aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801e4ae:	2bfe      	cmp	r3, #254	; 0xfe
 801e4b0:	d103      	bne.n	801e4ba <netif_add+0x15a>
    netif_num = 0;
 801e4b2:	4b11      	ldr	r3, [pc, #68]	; (801e4f8 <netif_add+0x198>)
 801e4b4:	2200      	movs	r2, #0
 801e4b6:	701a      	strb	r2, [r3, #0]
 801e4b8:	e006      	b.n	801e4c8 <netif_add+0x168>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 801e4ba:	68fb      	ldr	r3, [r7, #12]
 801e4bc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801e4c0:	3301      	adds	r3, #1
 801e4c2:	b2da      	uxtb	r2, r3
 801e4c4:	4b0c      	ldr	r3, [pc, #48]	; (801e4f8 <netif_add+0x198>)
 801e4c6:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 801e4c8:	4b0c      	ldr	r3, [pc, #48]	; (801e4fc <netif_add+0x19c>)
 801e4ca:	681a      	ldr	r2, [r3, #0]
 801e4cc:	68fb      	ldr	r3, [r7, #12]
 801e4ce:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 801e4d0:	4a0a      	ldr	r2, [pc, #40]	; (801e4fc <netif_add+0x19c>)
 801e4d2:	68fb      	ldr	r3, [r7, #12]
 801e4d4:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 801e4d6:	68fb      	ldr	r3, [r7, #12]
}
 801e4d8:	4618      	mov	r0, r3
 801e4da:	3718      	adds	r7, #24
 801e4dc:	46bd      	mov	sp, r7
 801e4de:	bd80      	pop	{r7, pc}
 801e4e0:	08027ac8 	.word	0x08027ac8
 801e4e4:	08027b80 	.word	0x08027b80
 801e4e8:	08027b20 	.word	0x08027b20
 801e4ec:	08027b9c 	.word	0x08027b9c
 801e4f0:	08029250 	.word	0x08029250
 801e4f4:	0801ea0b 	.word	0x0801ea0b
 801e4f8:	20013e28 	.word	0x20013e28
 801e4fc:	20013e20 	.word	0x20013e20
 801e500:	08027bc0 	.word	0x08027bc0
 801e504:	08027bd4 	.word	0x08027bd4

0801e508 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801e508:	b580      	push	{r7, lr}
 801e50a:	b082      	sub	sp, #8
 801e50c:	af00      	add	r7, sp, #0
 801e50e:	6078      	str	r0, [r7, #4]
 801e510:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801e512:	6839      	ldr	r1, [r7, #0]
 801e514:	6878      	ldr	r0, [r7, #4]
 801e516:	f001 fe13 	bl	8020140 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 801e51a:	bf00      	nop
 801e51c:	3708      	adds	r7, #8
 801e51e:	46bd      	mov	sp, r7
 801e520:	bd80      	pop	{r7, pc}
	...

0801e524 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 801e524:	b580      	push	{r7, lr}
 801e526:	b086      	sub	sp, #24
 801e528:	af00      	add	r7, sp, #0
 801e52a:	60f8      	str	r0, [r7, #12]
 801e52c:	60b9      	str	r1, [r7, #8]
 801e52e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 801e530:	68bb      	ldr	r3, [r7, #8]
 801e532:	2b00      	cmp	r3, #0
 801e534:	d106      	bne.n	801e544 <netif_do_set_ipaddr+0x20>
 801e536:	4b1d      	ldr	r3, [pc, #116]	; (801e5ac <netif_do_set_ipaddr+0x88>)
 801e538:	f240 12cb 	movw	r2, #459	; 0x1cb
 801e53c:	491c      	ldr	r1, [pc, #112]	; (801e5b0 <netif_do_set_ipaddr+0x8c>)
 801e53e:	481d      	ldr	r0, [pc, #116]	; (801e5b4 <netif_do_set_ipaddr+0x90>)
 801e540:	f004 fadc 	bl	8022afc <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 801e544:	687b      	ldr	r3, [r7, #4]
 801e546:	2b00      	cmp	r3, #0
 801e548:	d106      	bne.n	801e558 <netif_do_set_ipaddr+0x34>
 801e54a:	4b18      	ldr	r3, [pc, #96]	; (801e5ac <netif_do_set_ipaddr+0x88>)
 801e54c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 801e550:	4917      	ldr	r1, [pc, #92]	; (801e5b0 <netif_do_set_ipaddr+0x8c>)
 801e552:	4818      	ldr	r0, [pc, #96]	; (801e5b4 <netif_do_set_ipaddr+0x90>)
 801e554:	f004 fad2 	bl	8022afc <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 801e558:	68bb      	ldr	r3, [r7, #8]
 801e55a:	681a      	ldr	r2, [r3, #0]
 801e55c:	68fb      	ldr	r3, [r7, #12]
 801e55e:	3304      	adds	r3, #4
 801e560:	681b      	ldr	r3, [r3, #0]
 801e562:	429a      	cmp	r2, r3
 801e564:	d01c      	beq.n	801e5a0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 801e566:	68bb      	ldr	r3, [r7, #8]
 801e568:	681b      	ldr	r3, [r3, #0]
 801e56a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 801e56c:	68fb      	ldr	r3, [r7, #12]
 801e56e:	3304      	adds	r3, #4
 801e570:	681a      	ldr	r2, [r3, #0]
 801e572:	687b      	ldr	r3, [r7, #4]
 801e574:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 801e576:	f107 0314 	add.w	r3, r7, #20
 801e57a:	4619      	mov	r1, r3
 801e57c:	6878      	ldr	r0, [r7, #4]
 801e57e:	f7ff ffc3 	bl	801e508 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801e582:	68bb      	ldr	r3, [r7, #8]
 801e584:	2b00      	cmp	r3, #0
 801e586:	d002      	beq.n	801e58e <netif_do_set_ipaddr+0x6a>
 801e588:	68bb      	ldr	r3, [r7, #8]
 801e58a:	681b      	ldr	r3, [r3, #0]
 801e58c:	e000      	b.n	801e590 <netif_do_set_ipaddr+0x6c>
 801e58e:	2300      	movs	r3, #0
 801e590:	68fa      	ldr	r2, [r7, #12]
 801e592:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801e594:	2101      	movs	r1, #1
 801e596:	68f8      	ldr	r0, [r7, #12]
 801e598:	f000 f8d2 	bl	801e740 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 801e59c:	2301      	movs	r3, #1
 801e59e:	e000      	b.n	801e5a2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 801e5a0:	2300      	movs	r3, #0
}
 801e5a2:	4618      	mov	r0, r3
 801e5a4:	3718      	adds	r7, #24
 801e5a6:	46bd      	mov	sp, r7
 801e5a8:	bd80      	pop	{r7, pc}
 801e5aa:	bf00      	nop
 801e5ac:	08027ac8 	.word	0x08027ac8
 801e5b0:	08027c04 	.word	0x08027c04
 801e5b4:	08027b20 	.word	0x08027b20

0801e5b8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 801e5b8:	b480      	push	{r7}
 801e5ba:	b085      	sub	sp, #20
 801e5bc:	af00      	add	r7, sp, #0
 801e5be:	60f8      	str	r0, [r7, #12]
 801e5c0:	60b9      	str	r1, [r7, #8]
 801e5c2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 801e5c4:	68bb      	ldr	r3, [r7, #8]
 801e5c6:	681a      	ldr	r2, [r3, #0]
 801e5c8:	68fb      	ldr	r3, [r7, #12]
 801e5ca:	3308      	adds	r3, #8
 801e5cc:	681b      	ldr	r3, [r3, #0]
 801e5ce:	429a      	cmp	r2, r3
 801e5d0:	d00a      	beq.n	801e5e8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801e5d2:	68bb      	ldr	r3, [r7, #8]
 801e5d4:	2b00      	cmp	r3, #0
 801e5d6:	d002      	beq.n	801e5de <netif_do_set_netmask+0x26>
 801e5d8:	68bb      	ldr	r3, [r7, #8]
 801e5da:	681b      	ldr	r3, [r3, #0]
 801e5dc:	e000      	b.n	801e5e0 <netif_do_set_netmask+0x28>
 801e5de:	2300      	movs	r3, #0
 801e5e0:	68fa      	ldr	r2, [r7, #12]
 801e5e2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 801e5e4:	2301      	movs	r3, #1
 801e5e6:	e000      	b.n	801e5ea <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 801e5e8:	2300      	movs	r3, #0
}
 801e5ea:	4618      	mov	r0, r3
 801e5ec:	3714      	adds	r7, #20
 801e5ee:	46bd      	mov	sp, r7
 801e5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e5f4:	4770      	bx	lr

0801e5f6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 801e5f6:	b480      	push	{r7}
 801e5f8:	b085      	sub	sp, #20
 801e5fa:	af00      	add	r7, sp, #0
 801e5fc:	60f8      	str	r0, [r7, #12]
 801e5fe:	60b9      	str	r1, [r7, #8]
 801e600:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801e602:	68bb      	ldr	r3, [r7, #8]
 801e604:	681a      	ldr	r2, [r3, #0]
 801e606:	68fb      	ldr	r3, [r7, #12]
 801e608:	330c      	adds	r3, #12
 801e60a:	681b      	ldr	r3, [r3, #0]
 801e60c:	429a      	cmp	r2, r3
 801e60e:	d00a      	beq.n	801e626 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 801e610:	68bb      	ldr	r3, [r7, #8]
 801e612:	2b00      	cmp	r3, #0
 801e614:	d002      	beq.n	801e61c <netif_do_set_gw+0x26>
 801e616:	68bb      	ldr	r3, [r7, #8]
 801e618:	681b      	ldr	r3, [r3, #0]
 801e61a:	e000      	b.n	801e61e <netif_do_set_gw+0x28>
 801e61c:	2300      	movs	r3, #0
 801e61e:	68fa      	ldr	r2, [r7, #12]
 801e620:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 801e622:	2301      	movs	r3, #1
 801e624:	e000      	b.n	801e628 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 801e626:	2300      	movs	r3, #0
}
 801e628:	4618      	mov	r0, r3
 801e62a:	3714      	adds	r7, #20
 801e62c:	46bd      	mov	sp, r7
 801e62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e632:	4770      	bx	lr

0801e634 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 801e634:	b580      	push	{r7, lr}
 801e636:	b088      	sub	sp, #32
 801e638:	af00      	add	r7, sp, #0
 801e63a:	60f8      	str	r0, [r7, #12]
 801e63c:	60b9      	str	r1, [r7, #8]
 801e63e:	607a      	str	r2, [r7, #4]
 801e640:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 801e642:	2300      	movs	r3, #0
 801e644:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 801e646:	2300      	movs	r3, #0
 801e648:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801e64a:	68bb      	ldr	r3, [r7, #8]
 801e64c:	2b00      	cmp	r3, #0
 801e64e:	d101      	bne.n	801e654 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 801e650:	4b1c      	ldr	r3, [pc, #112]	; (801e6c4 <netif_set_addr+0x90>)
 801e652:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801e654:	687b      	ldr	r3, [r7, #4]
 801e656:	2b00      	cmp	r3, #0
 801e658:	d101      	bne.n	801e65e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 801e65a:	4b1a      	ldr	r3, [pc, #104]	; (801e6c4 <netif_set_addr+0x90>)
 801e65c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801e65e:	683b      	ldr	r3, [r7, #0]
 801e660:	2b00      	cmp	r3, #0
 801e662:	d101      	bne.n	801e668 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 801e664:	4b17      	ldr	r3, [pc, #92]	; (801e6c4 <netif_set_addr+0x90>)
 801e666:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 801e668:	68bb      	ldr	r3, [r7, #8]
 801e66a:	2b00      	cmp	r3, #0
 801e66c:	d003      	beq.n	801e676 <netif_set_addr+0x42>
 801e66e:	68bb      	ldr	r3, [r7, #8]
 801e670:	681b      	ldr	r3, [r3, #0]
 801e672:	2b00      	cmp	r3, #0
 801e674:	d101      	bne.n	801e67a <netif_set_addr+0x46>
 801e676:	2301      	movs	r3, #1
 801e678:	e000      	b.n	801e67c <netif_set_addr+0x48>
 801e67a:	2300      	movs	r3, #0
 801e67c:	617b      	str	r3, [r7, #20]
  if (remove) {
 801e67e:	697b      	ldr	r3, [r7, #20]
 801e680:	2b00      	cmp	r3, #0
 801e682:	d006      	beq.n	801e692 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801e684:	f107 0310 	add.w	r3, r7, #16
 801e688:	461a      	mov	r2, r3
 801e68a:	68b9      	ldr	r1, [r7, #8]
 801e68c:	68f8      	ldr	r0, [r7, #12]
 801e68e:	f7ff ff49 	bl	801e524 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 801e692:	69fa      	ldr	r2, [r7, #28]
 801e694:	6879      	ldr	r1, [r7, #4]
 801e696:	68f8      	ldr	r0, [r7, #12]
 801e698:	f7ff ff8e 	bl	801e5b8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 801e69c:	69ba      	ldr	r2, [r7, #24]
 801e69e:	6839      	ldr	r1, [r7, #0]
 801e6a0:	68f8      	ldr	r0, [r7, #12]
 801e6a2:	f7ff ffa8 	bl	801e5f6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 801e6a6:	697b      	ldr	r3, [r7, #20]
 801e6a8:	2b00      	cmp	r3, #0
 801e6aa:	d106      	bne.n	801e6ba <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801e6ac:	f107 0310 	add.w	r3, r7, #16
 801e6b0:	461a      	mov	r2, r3
 801e6b2:	68b9      	ldr	r1, [r7, #8]
 801e6b4:	68f8      	ldr	r0, [r7, #12]
 801e6b6:	f7ff ff35 	bl	801e524 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 801e6ba:	bf00      	nop
 801e6bc:	3720      	adds	r7, #32
 801e6be:	46bd      	mov	sp, r7
 801e6c0:	bd80      	pop	{r7, pc}
 801e6c2:	bf00      	nop
 801e6c4:	08029250 	.word	0x08029250

0801e6c8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 801e6c8:	b480      	push	{r7}
 801e6ca:	b083      	sub	sp, #12
 801e6cc:	af00      	add	r7, sp, #0
 801e6ce:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 801e6d0:	4a04      	ldr	r2, [pc, #16]	; (801e6e4 <netif_set_default+0x1c>)
 801e6d2:	687b      	ldr	r3, [r7, #4]
 801e6d4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801e6d6:	bf00      	nop
 801e6d8:	370c      	adds	r7, #12
 801e6da:	46bd      	mov	sp, r7
 801e6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e6e0:	4770      	bx	lr
 801e6e2:	bf00      	nop
 801e6e4:	20013e24 	.word	0x20013e24

0801e6e8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 801e6e8:	b580      	push	{r7, lr}
 801e6ea:	b082      	sub	sp, #8
 801e6ec:	af00      	add	r7, sp, #0
 801e6ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 801e6f0:	687b      	ldr	r3, [r7, #4]
 801e6f2:	2b00      	cmp	r3, #0
 801e6f4:	d107      	bne.n	801e706 <netif_set_up+0x1e>
 801e6f6:	4b0f      	ldr	r3, [pc, #60]	; (801e734 <netif_set_up+0x4c>)
 801e6f8:	f44f 7254 	mov.w	r2, #848	; 0x350
 801e6fc:	490e      	ldr	r1, [pc, #56]	; (801e738 <netif_set_up+0x50>)
 801e6fe:	480f      	ldr	r0, [pc, #60]	; (801e73c <netif_set_up+0x54>)
 801e700:	f004 f9fc 	bl	8022afc <iprintf>
 801e704:	e013      	b.n	801e72e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 801e706:	687b      	ldr	r3, [r7, #4]
 801e708:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e70c:	f003 0301 	and.w	r3, r3, #1
 801e710:	2b00      	cmp	r3, #0
 801e712:	d10c      	bne.n	801e72e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 801e714:	687b      	ldr	r3, [r7, #4]
 801e716:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e71a:	f043 0301 	orr.w	r3, r3, #1
 801e71e:	b2da      	uxtb	r2, r3
 801e720:	687b      	ldr	r3, [r7, #4]
 801e722:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801e726:	2103      	movs	r1, #3
 801e728:	6878      	ldr	r0, [r7, #4]
 801e72a:	f000 f809 	bl	801e740 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 801e72e:	3708      	adds	r7, #8
 801e730:	46bd      	mov	sp, r7
 801e732:	bd80      	pop	{r7, pc}
 801e734:	08027ac8 	.word	0x08027ac8
 801e738:	08027c74 	.word	0x08027c74
 801e73c:	08027b20 	.word	0x08027b20

0801e740 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 801e740:	b580      	push	{r7, lr}
 801e742:	b082      	sub	sp, #8
 801e744:	af00      	add	r7, sp, #0
 801e746:	6078      	str	r0, [r7, #4]
 801e748:	460b      	mov	r3, r1
 801e74a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 801e74c:	687b      	ldr	r3, [r7, #4]
 801e74e:	2b00      	cmp	r3, #0
 801e750:	d106      	bne.n	801e760 <netif_issue_reports+0x20>
 801e752:	4b18      	ldr	r3, [pc, #96]	; (801e7b4 <netif_issue_reports+0x74>)
 801e754:	f240 326d 	movw	r2, #877	; 0x36d
 801e758:	4917      	ldr	r1, [pc, #92]	; (801e7b8 <netif_issue_reports+0x78>)
 801e75a:	4818      	ldr	r0, [pc, #96]	; (801e7bc <netif_issue_reports+0x7c>)
 801e75c:	f004 f9ce 	bl	8022afc <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801e760:	687b      	ldr	r3, [r7, #4]
 801e762:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e766:	f003 0304 	and.w	r3, r3, #4
 801e76a:	2b00      	cmp	r3, #0
 801e76c:	d01e      	beq.n	801e7ac <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 801e76e:	687b      	ldr	r3, [r7, #4]
 801e770:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e774:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801e778:	2b00      	cmp	r3, #0
 801e77a:	d017      	beq.n	801e7ac <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801e77c:	78fb      	ldrb	r3, [r7, #3]
 801e77e:	f003 0301 	and.w	r3, r3, #1
 801e782:	2b00      	cmp	r3, #0
 801e784:	d013      	beq.n	801e7ae <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801e786:	687b      	ldr	r3, [r7, #4]
 801e788:	3304      	adds	r3, #4
 801e78a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801e78c:	2b00      	cmp	r3, #0
 801e78e:	d00e      	beq.n	801e7ae <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 801e790:	687b      	ldr	r3, [r7, #4]
 801e792:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e796:	f003 0308 	and.w	r3, r3, #8
 801e79a:	2b00      	cmp	r3, #0
 801e79c:	d007      	beq.n	801e7ae <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 801e79e:	687b      	ldr	r3, [r7, #4]
 801e7a0:	3304      	adds	r3, #4
 801e7a2:	4619      	mov	r1, r3
 801e7a4:	6878      	ldr	r0, [r7, #4]
 801e7a6:	f002 fc35 	bl	8021014 <etharp_request>
 801e7aa:	e000      	b.n	801e7ae <netif_issue_reports+0x6e>
    return;
 801e7ac:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 801e7ae:	3708      	adds	r7, #8
 801e7b0:	46bd      	mov	sp, r7
 801e7b2:	bd80      	pop	{r7, pc}
 801e7b4:	08027ac8 	.word	0x08027ac8
 801e7b8:	08027c90 	.word	0x08027c90
 801e7bc:	08027b20 	.word	0x08027b20

0801e7c0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 801e7c0:	b580      	push	{r7, lr}
 801e7c2:	b082      	sub	sp, #8
 801e7c4:	af00      	add	r7, sp, #0
 801e7c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 801e7c8:	687b      	ldr	r3, [r7, #4]
 801e7ca:	2b00      	cmp	r3, #0
 801e7cc:	d107      	bne.n	801e7de <netif_set_down+0x1e>
 801e7ce:	4b12      	ldr	r3, [pc, #72]	; (801e818 <netif_set_down+0x58>)
 801e7d0:	f240 329b 	movw	r2, #923	; 0x39b
 801e7d4:	4911      	ldr	r1, [pc, #68]	; (801e81c <netif_set_down+0x5c>)
 801e7d6:	4812      	ldr	r0, [pc, #72]	; (801e820 <netif_set_down+0x60>)
 801e7d8:	f004 f990 	bl	8022afc <iprintf>
 801e7dc:	e019      	b.n	801e812 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 801e7de:	687b      	ldr	r3, [r7, #4]
 801e7e0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e7e4:	f003 0301 	and.w	r3, r3, #1
 801e7e8:	2b00      	cmp	r3, #0
 801e7ea:	d012      	beq.n	801e812 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 801e7ec:	687b      	ldr	r3, [r7, #4]
 801e7ee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e7f2:	f023 0301 	bic.w	r3, r3, #1
 801e7f6:	b2da      	uxtb	r2, r3
 801e7f8:	687b      	ldr	r3, [r7, #4]
 801e7fa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801e7fe:	687b      	ldr	r3, [r7, #4]
 801e800:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e804:	f003 0308 	and.w	r3, r3, #8
 801e808:	2b00      	cmp	r3, #0
 801e80a:	d002      	beq.n	801e812 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 801e80c:	6878      	ldr	r0, [r7, #4]
 801e80e:	f001 ffbf 	bl	8020790 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801e812:	3708      	adds	r7, #8
 801e814:	46bd      	mov	sp, r7
 801e816:	bd80      	pop	{r7, pc}
 801e818:	08027ac8 	.word	0x08027ac8
 801e81c:	08027cb4 	.word	0x08027cb4
 801e820:	08027b20 	.word	0x08027b20

0801e824 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 801e824:	b580      	push	{r7, lr}
 801e826:	b082      	sub	sp, #8
 801e828:	af00      	add	r7, sp, #0
 801e82a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 801e82c:	687b      	ldr	r3, [r7, #4]
 801e82e:	2b00      	cmp	r3, #0
 801e830:	d107      	bne.n	801e842 <netif_set_link_up+0x1e>
 801e832:	4b13      	ldr	r3, [pc, #76]	; (801e880 <netif_set_link_up+0x5c>)
 801e834:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 801e838:	4912      	ldr	r1, [pc, #72]	; (801e884 <netif_set_link_up+0x60>)
 801e83a:	4813      	ldr	r0, [pc, #76]	; (801e888 <netif_set_link_up+0x64>)
 801e83c:	f004 f95e 	bl	8022afc <iprintf>
 801e840:	e01b      	b.n	801e87a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 801e842:	687b      	ldr	r3, [r7, #4]
 801e844:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e848:	f003 0304 	and.w	r3, r3, #4
 801e84c:	2b00      	cmp	r3, #0
 801e84e:	d114      	bne.n	801e87a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 801e850:	687b      	ldr	r3, [r7, #4]
 801e852:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e856:	f043 0304 	orr.w	r3, r3, #4
 801e85a:	b2da      	uxtb	r2, r3
 801e85c:	687b      	ldr	r3, [r7, #4]
 801e85e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801e862:	2103      	movs	r1, #3
 801e864:	6878      	ldr	r0, [r7, #4]
 801e866:	f7ff ff6b 	bl	801e740 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 801e86a:	687b      	ldr	r3, [r7, #4]
 801e86c:	69db      	ldr	r3, [r3, #28]
 801e86e:	2b00      	cmp	r3, #0
 801e870:	d003      	beq.n	801e87a <netif_set_link_up+0x56>
 801e872:	687b      	ldr	r3, [r7, #4]
 801e874:	69db      	ldr	r3, [r3, #28]
 801e876:	6878      	ldr	r0, [r7, #4]
 801e878:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801e87a:	3708      	adds	r7, #8
 801e87c:	46bd      	mov	sp, r7
 801e87e:	bd80      	pop	{r7, pc}
 801e880:	08027ac8 	.word	0x08027ac8
 801e884:	08027cd4 	.word	0x08027cd4
 801e888:	08027b20 	.word	0x08027b20

0801e88c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 801e88c:	b580      	push	{r7, lr}
 801e88e:	b082      	sub	sp, #8
 801e890:	af00      	add	r7, sp, #0
 801e892:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 801e894:	687b      	ldr	r3, [r7, #4]
 801e896:	2b00      	cmp	r3, #0
 801e898:	d107      	bne.n	801e8aa <netif_set_link_down+0x1e>
 801e89a:	4b11      	ldr	r3, [pc, #68]	; (801e8e0 <netif_set_link_down+0x54>)
 801e89c:	f240 4206 	movw	r2, #1030	; 0x406
 801e8a0:	4910      	ldr	r1, [pc, #64]	; (801e8e4 <netif_set_link_down+0x58>)
 801e8a2:	4811      	ldr	r0, [pc, #68]	; (801e8e8 <netif_set_link_down+0x5c>)
 801e8a4:	f004 f92a 	bl	8022afc <iprintf>
 801e8a8:	e017      	b.n	801e8da <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801e8aa:	687b      	ldr	r3, [r7, #4]
 801e8ac:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e8b0:	f003 0304 	and.w	r3, r3, #4
 801e8b4:	2b00      	cmp	r3, #0
 801e8b6:	d010      	beq.n	801e8da <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 801e8b8:	687b      	ldr	r3, [r7, #4]
 801e8ba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e8be:	f023 0304 	bic.w	r3, r3, #4
 801e8c2:	b2da      	uxtb	r2, r3
 801e8c4:	687b      	ldr	r3, [r7, #4]
 801e8c6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 801e8ca:	687b      	ldr	r3, [r7, #4]
 801e8cc:	69db      	ldr	r3, [r3, #28]
 801e8ce:	2b00      	cmp	r3, #0
 801e8d0:	d003      	beq.n	801e8da <netif_set_link_down+0x4e>
 801e8d2:	687b      	ldr	r3, [r7, #4]
 801e8d4:	69db      	ldr	r3, [r3, #28]
 801e8d6:	6878      	ldr	r0, [r7, #4]
 801e8d8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801e8da:	3708      	adds	r7, #8
 801e8dc:	46bd      	mov	sp, r7
 801e8de:	bd80      	pop	{r7, pc}
 801e8e0:	08027ac8 	.word	0x08027ac8
 801e8e4:	08027cf8 	.word	0x08027cf8
 801e8e8:	08027b20 	.word	0x08027b20

0801e8ec <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 801e8ec:	b480      	push	{r7}
 801e8ee:	b083      	sub	sp, #12
 801e8f0:	af00      	add	r7, sp, #0
 801e8f2:	6078      	str	r0, [r7, #4]
 801e8f4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 801e8f6:	687b      	ldr	r3, [r7, #4]
 801e8f8:	2b00      	cmp	r3, #0
 801e8fa:	d002      	beq.n	801e902 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 801e8fc:	687b      	ldr	r3, [r7, #4]
 801e8fe:	683a      	ldr	r2, [r7, #0]
 801e900:	61da      	str	r2, [r3, #28]
  }
}
 801e902:	bf00      	nop
 801e904:	370c      	adds	r7, #12
 801e906:	46bd      	mov	sp, r7
 801e908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e90c:	4770      	bx	lr
	...

0801e910 <netif_loop_output>:
 * @return ERR_OK if the packet has been sent
 *         ERR_MEM if the pbuf used to copy the packet couldn't be allocated
 */
err_t
netif_loop_output(struct netif *netif, struct pbuf *p)
{
 801e910:	b580      	push	{r7, lr}
 801e912:	b086      	sub	sp, #24
 801e914:	af00      	add	r7, sp, #0
 801e916:	6078      	str	r0, [r7, #4]
 801e918:	6039      	str	r1, [r7, #0]
#if LWIP_NETIF_LOOPBACK_MULTITHREADING
  u8_t schedule_poll = 0;
#endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_ASSERT("netif_loop_output: invalid netif", netif != NULL);
 801e91a:	687b      	ldr	r3, [r7, #4]
 801e91c:	2b00      	cmp	r3, #0
 801e91e:	d106      	bne.n	801e92e <netif_loop_output+0x1e>
 801e920:	4b2d      	ldr	r3, [pc, #180]	; (801e9d8 <netif_loop_output+0xc8>)
 801e922:	f240 424b 	movw	r2, #1099	; 0x44b
 801e926:	492d      	ldr	r1, [pc, #180]	; (801e9dc <netif_loop_output+0xcc>)
 801e928:	482d      	ldr	r0, [pc, #180]	; (801e9e0 <netif_loop_output+0xd0>)
 801e92a:	f004 f8e7 	bl	8022afc <iprintf>
  LWIP_ASSERT("netif_loop_output: invalid pbuf", p != NULL);
 801e92e:	683b      	ldr	r3, [r7, #0]
 801e930:	2b00      	cmp	r3, #0
 801e932:	d106      	bne.n	801e942 <netif_loop_output+0x32>
 801e934:	4b28      	ldr	r3, [pc, #160]	; (801e9d8 <netif_loop_output+0xc8>)
 801e936:	f240 424c 	movw	r2, #1100	; 0x44c
 801e93a:	492a      	ldr	r1, [pc, #168]	; (801e9e4 <netif_loop_output+0xd4>)
 801e93c:	4828      	ldr	r0, [pc, #160]	; (801e9e0 <netif_loop_output+0xd0>)
 801e93e:	f004 f8dd 	bl	8022afc <iprintf>

  /* Allocate a new pbuf */
  r = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 801e942:	683b      	ldr	r3, [r7, #0]
 801e944:	891b      	ldrh	r3, [r3, #8]
 801e946:	f44f 7220 	mov.w	r2, #640	; 0x280
 801e94a:	4619      	mov	r1, r3
 801e94c:	200e      	movs	r0, #14
 801e94e:	f000 f8bb 	bl	801eac8 <pbuf_alloc>
 801e952:	6138      	str	r0, [r7, #16]
  if (r == NULL) {
 801e954:	693b      	ldr	r3, [r7, #16]
 801e956:	2b00      	cmp	r3, #0
 801e958:	d102      	bne.n	801e960 <netif_loop_output+0x50>
    LINK_STATS_INC(link.memerr);
    LINK_STATS_INC(link.drop);
    MIB2_STATS_NETIF_INC(stats_if, ifoutdiscards);
    return ERR_MEM;
 801e95a:	f04f 33ff 	mov.w	r3, #4294967295
 801e95e:	e037      	b.n	801e9d0 <netif_loop_output+0xc0>
  }
  netif->loop_cnt_current = (u16_t)(netif->loop_cnt_current + clen);
#endif /* LWIP_LOOPBACK_MAX_PBUFS */

  /* Copy the whole pbuf queue p into the single pbuf r */
  if ((err = pbuf_copy(r, p)) != ERR_OK) {
 801e960:	6839      	ldr	r1, [r7, #0]
 801e962:	6938      	ldr	r0, [r7, #16]
 801e964:	f000 fcba 	bl	801f2dc <pbuf_copy>
 801e968:	4603      	mov	r3, r0
 801e96a:	73fb      	strb	r3, [r7, #15]
 801e96c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e970:	2b00      	cmp	r3, #0
 801e972:	d005      	beq.n	801e980 <netif_loop_output+0x70>
    pbuf_free(r);
 801e974:	6938      	ldr	r0, [r7, #16]
 801e976:	f000 fb89 	bl	801f08c <pbuf_free>
    LINK_STATS_INC(link.memerr);
    LINK_STATS_INC(link.drop);
    MIB2_STATS_NETIF_INC(stats_if, ifoutdiscards);
    return err;
 801e97a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e97e:	e027      	b.n	801e9d0 <netif_loop_output+0xc0>

  /* Put the packet on a linked list which gets emptied through calling
     netif_poll(). */

  /* let last point to the last pbuf in chain r */
  for (last = r; last->next != NULL; last = last->next) {
 801e980:	693b      	ldr	r3, [r7, #16]
 801e982:	617b      	str	r3, [r7, #20]
 801e984:	e002      	b.n	801e98c <netif_loop_output+0x7c>
 801e986:	697b      	ldr	r3, [r7, #20]
 801e988:	681b      	ldr	r3, [r3, #0]
 801e98a:	617b      	str	r3, [r7, #20]
 801e98c:	697b      	ldr	r3, [r7, #20]
 801e98e:	681b      	ldr	r3, [r3, #0]
 801e990:	2b00      	cmp	r3, #0
 801e992:	d1f8      	bne.n	801e986 <netif_loop_output+0x76>
    /* nothing to do here, just get to the last pbuf */
  }

  SYS_ARCH_PROTECT(lev);
  if (netif->loop_first != NULL) {
 801e994:	687b      	ldr	r3, [r7, #4]
 801e996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e998:	2b00      	cmp	r3, #0
 801e99a:	d012      	beq.n	801e9c2 <netif_loop_output+0xb2>
    LWIP_ASSERT("if first != NULL, last must also be != NULL", netif->loop_last != NULL);
 801e99c:	687b      	ldr	r3, [r7, #4]
 801e99e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e9a0:	2b00      	cmp	r3, #0
 801e9a2:	d106      	bne.n	801e9b2 <netif_loop_output+0xa2>
 801e9a4:	4b0c      	ldr	r3, [pc, #48]	; (801e9d8 <netif_loop_output+0xc8>)
 801e9a6:	f240 4277 	movw	r2, #1143	; 0x477
 801e9aa:	490f      	ldr	r1, [pc, #60]	; (801e9e8 <netif_loop_output+0xd8>)
 801e9ac:	480c      	ldr	r0, [pc, #48]	; (801e9e0 <netif_loop_output+0xd0>)
 801e9ae:	f004 f8a5 	bl	8022afc <iprintf>
    netif->loop_last->next = r;
 801e9b2:	687b      	ldr	r3, [r7, #4]
 801e9b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e9b6:	693a      	ldr	r2, [r7, #16]
 801e9b8:	601a      	str	r2, [r3, #0]
    netif->loop_last = last;
 801e9ba:	687b      	ldr	r3, [r7, #4]
 801e9bc:	697a      	ldr	r2, [r7, #20]
 801e9be:	63da      	str	r2, [r3, #60]	; 0x3c
 801e9c0:	e005      	b.n	801e9ce <netif_loop_output+0xbe>
  } else {
    netif->loop_first = r;
 801e9c2:	687b      	ldr	r3, [r7, #4]
 801e9c4:	693a      	ldr	r2, [r7, #16]
 801e9c6:	639a      	str	r2, [r3, #56]	; 0x38
    netif->loop_last = last;
 801e9c8:	687b      	ldr	r3, [r7, #4]
 801e9ca:	697a      	ldr	r2, [r7, #20]
 801e9cc:	63da      	str	r2, [r3, #60]	; 0x3c
  if (schedule_poll) {
    tcpip_try_callback((tcpip_callback_fn)netif_poll, netif);
  }
#endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */

  return ERR_OK;
 801e9ce:	2300      	movs	r3, #0
}
 801e9d0:	4618      	mov	r0, r3
 801e9d2:	3718      	adds	r7, #24
 801e9d4:	46bd      	mov	sp, r7
 801e9d6:	bd80      	pop	{r7, pc}
 801e9d8:	08027ac8 	.word	0x08027ac8
 801e9dc:	08027d1c 	.word	0x08027d1c
 801e9e0:	08027b20 	.word	0x08027b20
 801e9e4:	08027d40 	.word	0x08027d40
 801e9e8:	08027d60 	.word	0x08027d60

0801e9ec <netif_loop_output_ipv4>:

#if LWIP_HAVE_LOOPIF
#if LWIP_IPV4
static err_t
netif_loop_output_ipv4(struct netif *netif, struct pbuf *p, const ip4_addr_t *addr)
{
 801e9ec:	b580      	push	{r7, lr}
 801e9ee:	b084      	sub	sp, #16
 801e9f0:	af00      	add	r7, sp, #0
 801e9f2:	60f8      	str	r0, [r7, #12]
 801e9f4:	60b9      	str	r1, [r7, #8]
 801e9f6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(addr);
  return netif_loop_output(netif, p);
 801e9f8:	68b9      	ldr	r1, [r7, #8]
 801e9fa:	68f8      	ldr	r0, [r7, #12]
 801e9fc:	f7ff ff88 	bl	801e910 <netif_loop_output>
 801ea00:	4603      	mov	r3, r0
}
 801ea02:	4618      	mov	r0, r3
 801ea04:	3710      	adds	r7, #16
 801ea06:	46bd      	mov	sp, r7
 801ea08:	bd80      	pop	{r7, pc}

0801ea0a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 801ea0a:	b480      	push	{r7}
 801ea0c:	b085      	sub	sp, #20
 801ea0e:	af00      	add	r7, sp, #0
 801ea10:	60f8      	str	r0, [r7, #12]
 801ea12:	60b9      	str	r1, [r7, #8]
 801ea14:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801ea16:	f06f 030b 	mvn.w	r3, #11
}
 801ea1a:	4618      	mov	r0, r3
 801ea1c:	3714      	adds	r7, #20
 801ea1e:	46bd      	mov	sp, r7
 801ea20:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea24:	4770      	bx	lr
	...

0801ea28 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 801ea28:	b480      	push	{r7}
 801ea2a:	b085      	sub	sp, #20
 801ea2c:	af00      	add	r7, sp, #0
 801ea2e:	4603      	mov	r3, r0
 801ea30:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801ea32:	79fb      	ldrb	r3, [r7, #7]
 801ea34:	2b00      	cmp	r3, #0
 801ea36:	d013      	beq.n	801ea60 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 801ea38:	4b0d      	ldr	r3, [pc, #52]	; (801ea70 <netif_get_by_index+0x48>)
 801ea3a:	681b      	ldr	r3, [r3, #0]
 801ea3c:	60fb      	str	r3, [r7, #12]
 801ea3e:	e00c      	b.n	801ea5a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 801ea40:	68fb      	ldr	r3, [r7, #12]
 801ea42:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801ea46:	3301      	adds	r3, #1
 801ea48:	b2db      	uxtb	r3, r3
 801ea4a:	79fa      	ldrb	r2, [r7, #7]
 801ea4c:	429a      	cmp	r2, r3
 801ea4e:	d101      	bne.n	801ea54 <netif_get_by_index+0x2c>
        return netif; /* found! */
 801ea50:	68fb      	ldr	r3, [r7, #12]
 801ea52:	e006      	b.n	801ea62 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 801ea54:	68fb      	ldr	r3, [r7, #12]
 801ea56:	681b      	ldr	r3, [r3, #0]
 801ea58:	60fb      	str	r3, [r7, #12]
 801ea5a:	68fb      	ldr	r3, [r7, #12]
 801ea5c:	2b00      	cmp	r3, #0
 801ea5e:	d1ef      	bne.n	801ea40 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 801ea60:	2300      	movs	r3, #0
}
 801ea62:	4618      	mov	r0, r3
 801ea64:	3714      	adds	r7, #20
 801ea66:	46bd      	mov	sp, r7
 801ea68:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea6c:	4770      	bx	lr
 801ea6e:	bf00      	nop
 801ea70:	20013e20 	.word	0x20013e20

0801ea74 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 801ea74:	b480      	push	{r7}
 801ea76:	b085      	sub	sp, #20
 801ea78:	af00      	add	r7, sp, #0
 801ea7a:	60f8      	str	r0, [r7, #12]
 801ea7c:	60b9      	str	r1, [r7, #8]
 801ea7e:	4611      	mov	r1, r2
 801ea80:	461a      	mov	r2, r3
 801ea82:	460b      	mov	r3, r1
 801ea84:	80fb      	strh	r3, [r7, #6]
 801ea86:	4613      	mov	r3, r2
 801ea88:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 801ea8a:	68fb      	ldr	r3, [r7, #12]
 801ea8c:	2200      	movs	r2, #0
 801ea8e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 801ea90:	68fb      	ldr	r3, [r7, #12]
 801ea92:	68ba      	ldr	r2, [r7, #8]
 801ea94:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 801ea96:	68fb      	ldr	r3, [r7, #12]
 801ea98:	88fa      	ldrh	r2, [r7, #6]
 801ea9a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 801ea9c:	68fb      	ldr	r3, [r7, #12]
 801ea9e:	88ba      	ldrh	r2, [r7, #4]
 801eaa0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 801eaa2:	8b3b      	ldrh	r3, [r7, #24]
 801eaa4:	b2da      	uxtb	r2, r3
 801eaa6:	68fb      	ldr	r3, [r7, #12]
 801eaa8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 801eaaa:	68fb      	ldr	r3, [r7, #12]
 801eaac:	7f3a      	ldrb	r2, [r7, #28]
 801eaae:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 801eab0:	68fb      	ldr	r3, [r7, #12]
 801eab2:	2201      	movs	r2, #1
 801eab4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 801eab6:	68fb      	ldr	r3, [r7, #12]
 801eab8:	2200      	movs	r2, #0
 801eaba:	73da      	strb	r2, [r3, #15]
}
 801eabc:	bf00      	nop
 801eabe:	3714      	adds	r7, #20
 801eac0:	46bd      	mov	sp, r7
 801eac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eac6:	4770      	bx	lr

0801eac8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 801eac8:	b580      	push	{r7, lr}
 801eaca:	b08c      	sub	sp, #48	; 0x30
 801eacc:	af02      	add	r7, sp, #8
 801eace:	4603      	mov	r3, r0
 801ead0:	71fb      	strb	r3, [r7, #7]
 801ead2:	460b      	mov	r3, r1
 801ead4:	80bb      	strh	r3, [r7, #4]
 801ead6:	4613      	mov	r3, r2
 801ead8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 801eada:	79fb      	ldrb	r3, [r7, #7]
 801eadc:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 801eade:	887b      	ldrh	r3, [r7, #2]
 801eae0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 801eae4:	d07d      	beq.n	801ebe2 <pbuf_alloc+0x11a>
 801eae6:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 801eaea:	f300 80c6 	bgt.w	801ec7a <pbuf_alloc+0x1b2>
 801eaee:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 801eaf2:	d010      	beq.n	801eb16 <pbuf_alloc+0x4e>
 801eaf4:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 801eaf8:	f300 80bf 	bgt.w	801ec7a <pbuf_alloc+0x1b2>
 801eafc:	2b01      	cmp	r3, #1
 801eafe:	d002      	beq.n	801eb06 <pbuf_alloc+0x3e>
 801eb00:	2b41      	cmp	r3, #65	; 0x41
 801eb02:	f040 80ba 	bne.w	801ec7a <pbuf_alloc+0x1b2>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 801eb06:	887a      	ldrh	r2, [r7, #2]
 801eb08:	88bb      	ldrh	r3, [r7, #4]
 801eb0a:	4619      	mov	r1, r3
 801eb0c:	2000      	movs	r0, #0
 801eb0e:	f000 f8cf 	bl	801ecb0 <pbuf_alloc_reference>
 801eb12:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 801eb14:	e0bb      	b.n	801ec8e <pbuf_alloc+0x1c6>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 801eb16:	2300      	movs	r3, #0
 801eb18:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 801eb1a:	2300      	movs	r3, #0
 801eb1c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 801eb1e:	88bb      	ldrh	r3, [r7, #4]
 801eb20:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801eb22:	2005      	movs	r0, #5
 801eb24:	f7ff fb32 	bl	801e18c <memp_malloc>
 801eb28:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 801eb2a:	693b      	ldr	r3, [r7, #16]
 801eb2c:	2b00      	cmp	r3, #0
 801eb2e:	d107      	bne.n	801eb40 <pbuf_alloc+0x78>
          PBUF_POOL_IS_EMPTY();
          /* free chain so far allocated */
          if (p) {
 801eb30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eb32:	2b00      	cmp	r3, #0
 801eb34:	d002      	beq.n	801eb3c <pbuf_alloc+0x74>
            pbuf_free(p);
 801eb36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801eb38:	f000 faa8 	bl	801f08c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 801eb3c:	2300      	movs	r3, #0
 801eb3e:	e0a7      	b.n	801ec90 <pbuf_alloc+0x1c8>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801eb40:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801eb42:	3303      	adds	r3, #3
 801eb44:	b29b      	uxth	r3, r3
 801eb46:	f023 0303 	bic.w	r3, r3, #3
 801eb4a:	b29b      	uxth	r3, r3
 801eb4c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 801eb50:	b29b      	uxth	r3, r3
 801eb52:	8b7a      	ldrh	r2, [r7, #26]
 801eb54:	4293      	cmp	r3, r2
 801eb56:	bf28      	it	cs
 801eb58:	4613      	movcs	r3, r2
 801eb5a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801eb5c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801eb5e:	3310      	adds	r3, #16
 801eb60:	693a      	ldr	r2, [r7, #16]
 801eb62:	4413      	add	r3, r2
 801eb64:	3303      	adds	r3, #3
 801eb66:	f023 0303 	bic.w	r3, r3, #3
 801eb6a:	4618      	mov	r0, r3
 801eb6c:	89f9      	ldrh	r1, [r7, #14]
 801eb6e:	8b7a      	ldrh	r2, [r7, #26]
 801eb70:	2300      	movs	r3, #0
 801eb72:	9301      	str	r3, [sp, #4]
 801eb74:	887b      	ldrh	r3, [r7, #2]
 801eb76:	9300      	str	r3, [sp, #0]
 801eb78:	460b      	mov	r3, r1
 801eb7a:	4601      	mov	r1, r0
 801eb7c:	6938      	ldr	r0, [r7, #16]
 801eb7e:	f7ff ff79 	bl	801ea74 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801eb82:	693b      	ldr	r3, [r7, #16]
 801eb84:	685b      	ldr	r3, [r3, #4]
 801eb86:	f003 0303 	and.w	r3, r3, #3
 801eb8a:	2b00      	cmp	r3, #0
 801eb8c:	d006      	beq.n	801eb9c <pbuf_alloc+0xd4>
 801eb8e:	4b42      	ldr	r3, [pc, #264]	; (801ec98 <pbuf_alloc+0x1d0>)
 801eb90:	f44f 7280 	mov.w	r2, #256	; 0x100
 801eb94:	4941      	ldr	r1, [pc, #260]	; (801ec9c <pbuf_alloc+0x1d4>)
 801eb96:	4842      	ldr	r0, [pc, #264]	; (801eca0 <pbuf_alloc+0x1d8>)
 801eb98:	f003 ffb0 	bl	8022afc <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 801eb9c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801eb9e:	3303      	adds	r3, #3
 801eba0:	f023 0303 	bic.w	r3, r3, #3
 801eba4:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 801eba8:	d106      	bne.n	801ebb8 <pbuf_alloc+0xf0>
 801ebaa:	4b3b      	ldr	r3, [pc, #236]	; (801ec98 <pbuf_alloc+0x1d0>)
 801ebac:	f44f 7281 	mov.w	r2, #258	; 0x102
 801ebb0:	493c      	ldr	r1, [pc, #240]	; (801eca4 <pbuf_alloc+0x1dc>)
 801ebb2:	483b      	ldr	r0, [pc, #236]	; (801eca0 <pbuf_alloc+0x1d8>)
 801ebb4:	f003 ffa2 	bl	8022afc <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 801ebb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ebba:	2b00      	cmp	r3, #0
 801ebbc:	d102      	bne.n	801ebc4 <pbuf_alloc+0xfc>
          /* allocated head of pbuf chain (into p) */
          p = q;
 801ebbe:	693b      	ldr	r3, [r7, #16]
 801ebc0:	627b      	str	r3, [r7, #36]	; 0x24
 801ebc2:	e002      	b.n	801ebca <pbuf_alloc+0x102>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 801ebc4:	69fb      	ldr	r3, [r7, #28]
 801ebc6:	693a      	ldr	r2, [r7, #16]
 801ebc8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 801ebca:	693b      	ldr	r3, [r7, #16]
 801ebcc:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 801ebce:	8b7a      	ldrh	r2, [r7, #26]
 801ebd0:	89fb      	ldrh	r3, [r7, #14]
 801ebd2:	1ad3      	subs	r3, r2, r3
 801ebd4:	837b      	strh	r3, [r7, #26]
        offset = 0;
 801ebd6:	2300      	movs	r3, #0
 801ebd8:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 801ebda:	8b7b      	ldrh	r3, [r7, #26]
 801ebdc:	2b00      	cmp	r3, #0
 801ebde:	d1a0      	bne.n	801eb22 <pbuf_alloc+0x5a>
      break;
 801ebe0:	e055      	b.n	801ec8e <pbuf_alloc+0x1c6>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801ebe2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801ebe4:	3303      	adds	r3, #3
 801ebe6:	b29b      	uxth	r3, r3
 801ebe8:	f023 0303 	bic.w	r3, r3, #3
 801ebec:	b29a      	uxth	r2, r3
 801ebee:	88bb      	ldrh	r3, [r7, #4]
 801ebf0:	3303      	adds	r3, #3
 801ebf2:	b29b      	uxth	r3, r3
 801ebf4:	f023 0303 	bic.w	r3, r3, #3
 801ebf8:	b29b      	uxth	r3, r3
 801ebfa:	4413      	add	r3, r2
 801ebfc:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801ebfe:	8b3b      	ldrh	r3, [r7, #24]
 801ec00:	3310      	adds	r3, #16
 801ec02:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801ec04:	8b3a      	ldrh	r2, [r7, #24]
 801ec06:	88bb      	ldrh	r3, [r7, #4]
 801ec08:	3303      	adds	r3, #3
 801ec0a:	f023 0303 	bic.w	r3, r3, #3
 801ec0e:	429a      	cmp	r2, r3
 801ec10:	d306      	bcc.n	801ec20 <pbuf_alloc+0x158>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 801ec12:	8afa      	ldrh	r2, [r7, #22]
 801ec14:	88bb      	ldrh	r3, [r7, #4]
 801ec16:	3303      	adds	r3, #3
 801ec18:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801ec1c:	429a      	cmp	r2, r3
 801ec1e:	d201      	bcs.n	801ec24 <pbuf_alloc+0x15c>
        return NULL;
 801ec20:	2300      	movs	r3, #0
 801ec22:	e035      	b.n	801ec90 <pbuf_alloc+0x1c8>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 801ec24:	8afb      	ldrh	r3, [r7, #22]
 801ec26:	4618      	mov	r0, r3
 801ec28:	f7ff f920 	bl	801de6c <mem_malloc>
 801ec2c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 801ec2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ec30:	2b00      	cmp	r3, #0
 801ec32:	d101      	bne.n	801ec38 <pbuf_alloc+0x170>
        return NULL;
 801ec34:	2300      	movs	r3, #0
 801ec36:	e02b      	b.n	801ec90 <pbuf_alloc+0x1c8>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801ec38:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801ec3a:	3310      	adds	r3, #16
 801ec3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ec3e:	4413      	add	r3, r2
 801ec40:	3303      	adds	r3, #3
 801ec42:	f023 0303 	bic.w	r3, r3, #3
 801ec46:	4618      	mov	r0, r3
 801ec48:	88b9      	ldrh	r1, [r7, #4]
 801ec4a:	88ba      	ldrh	r2, [r7, #4]
 801ec4c:	2300      	movs	r3, #0
 801ec4e:	9301      	str	r3, [sp, #4]
 801ec50:	887b      	ldrh	r3, [r7, #2]
 801ec52:	9300      	str	r3, [sp, #0]
 801ec54:	460b      	mov	r3, r1
 801ec56:	4601      	mov	r1, r0
 801ec58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ec5a:	f7ff ff0b 	bl	801ea74 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801ec5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ec60:	685b      	ldr	r3, [r3, #4]
 801ec62:	f003 0303 	and.w	r3, r3, #3
 801ec66:	2b00      	cmp	r3, #0
 801ec68:	d010      	beq.n	801ec8c <pbuf_alloc+0x1c4>
 801ec6a:	4b0b      	ldr	r3, [pc, #44]	; (801ec98 <pbuf_alloc+0x1d0>)
 801ec6c:	f44f 7291 	mov.w	r2, #290	; 0x122
 801ec70:	490d      	ldr	r1, [pc, #52]	; (801eca8 <pbuf_alloc+0x1e0>)
 801ec72:	480b      	ldr	r0, [pc, #44]	; (801eca0 <pbuf_alloc+0x1d8>)
 801ec74:	f003 ff42 	bl	8022afc <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 801ec78:	e008      	b.n	801ec8c <pbuf_alloc+0x1c4>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801ec7a:	4b07      	ldr	r3, [pc, #28]	; (801ec98 <pbuf_alloc+0x1d0>)
 801ec7c:	f240 1227 	movw	r2, #295	; 0x127
 801ec80:	490a      	ldr	r1, [pc, #40]	; (801ecac <pbuf_alloc+0x1e4>)
 801ec82:	4807      	ldr	r0, [pc, #28]	; (801eca0 <pbuf_alloc+0x1d8>)
 801ec84:	f003 ff3a 	bl	8022afc <iprintf>
      return NULL;
 801ec88:	2300      	movs	r3, #0
 801ec8a:	e001      	b.n	801ec90 <pbuf_alloc+0x1c8>
      break;
 801ec8c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 801ec8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801ec90:	4618      	mov	r0, r3
 801ec92:	3728      	adds	r7, #40	; 0x28
 801ec94:	46bd      	mov	sp, r7
 801ec96:	bd80      	pop	{r7, pc}
 801ec98:	08027e00 	.word	0x08027e00
 801ec9c:	08027e30 	.word	0x08027e30
 801eca0:	08027e60 	.word	0x08027e60
 801eca4:	08027e88 	.word	0x08027e88
 801eca8:	08027ebc 	.word	0x08027ebc
 801ecac:	08027ee8 	.word	0x08027ee8

0801ecb0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 801ecb0:	b580      	push	{r7, lr}
 801ecb2:	b086      	sub	sp, #24
 801ecb4:	af02      	add	r7, sp, #8
 801ecb6:	6078      	str	r0, [r7, #4]
 801ecb8:	460b      	mov	r3, r1
 801ecba:	807b      	strh	r3, [r7, #2]
 801ecbc:	4613      	mov	r3, r2
 801ecbe:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801ecc0:	883b      	ldrh	r3, [r7, #0]
 801ecc2:	2b41      	cmp	r3, #65	; 0x41
 801ecc4:	d009      	beq.n	801ecda <pbuf_alloc_reference+0x2a>
 801ecc6:	883b      	ldrh	r3, [r7, #0]
 801ecc8:	2b01      	cmp	r3, #1
 801ecca:	d006      	beq.n	801ecda <pbuf_alloc_reference+0x2a>
 801eccc:	4b0f      	ldr	r3, [pc, #60]	; (801ed0c <pbuf_alloc_reference+0x5c>)
 801ecce:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 801ecd2:	490f      	ldr	r1, [pc, #60]	; (801ed10 <pbuf_alloc_reference+0x60>)
 801ecd4:	480f      	ldr	r0, [pc, #60]	; (801ed14 <pbuf_alloc_reference+0x64>)
 801ecd6:	f003 ff11 	bl	8022afc <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801ecda:	2004      	movs	r0, #4
 801ecdc:	f7ff fa56 	bl	801e18c <memp_malloc>
 801ece0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801ece2:	68fb      	ldr	r3, [r7, #12]
 801ece4:	2b00      	cmp	r3, #0
 801ece6:	d101      	bne.n	801ecec <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 801ece8:	2300      	movs	r3, #0
 801ecea:	e00b      	b.n	801ed04 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 801ecec:	8879      	ldrh	r1, [r7, #2]
 801ecee:	887a      	ldrh	r2, [r7, #2]
 801ecf0:	2300      	movs	r3, #0
 801ecf2:	9301      	str	r3, [sp, #4]
 801ecf4:	883b      	ldrh	r3, [r7, #0]
 801ecf6:	9300      	str	r3, [sp, #0]
 801ecf8:	460b      	mov	r3, r1
 801ecfa:	6879      	ldr	r1, [r7, #4]
 801ecfc:	68f8      	ldr	r0, [r7, #12]
 801ecfe:	f7ff feb9 	bl	801ea74 <pbuf_init_alloced_pbuf>
  return p;
 801ed02:	68fb      	ldr	r3, [r7, #12]
}
 801ed04:	4618      	mov	r0, r3
 801ed06:	3710      	adds	r7, #16
 801ed08:	46bd      	mov	sp, r7
 801ed0a:	bd80      	pop	{r7, pc}
 801ed0c:	08027e00 	.word	0x08027e00
 801ed10:	08027f04 	.word	0x08027f04
 801ed14:	08027e60 	.word	0x08027e60

0801ed18 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 801ed18:	b580      	push	{r7, lr}
 801ed1a:	b088      	sub	sp, #32
 801ed1c:	af02      	add	r7, sp, #8
 801ed1e:	607b      	str	r3, [r7, #4]
 801ed20:	4603      	mov	r3, r0
 801ed22:	73fb      	strb	r3, [r7, #15]
 801ed24:	460b      	mov	r3, r1
 801ed26:	81bb      	strh	r3, [r7, #12]
 801ed28:	4613      	mov	r3, r2
 801ed2a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 801ed2c:	7bfb      	ldrb	r3, [r7, #15]
 801ed2e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801ed30:	8a7b      	ldrh	r3, [r7, #18]
 801ed32:	3303      	adds	r3, #3
 801ed34:	f023 0203 	bic.w	r2, r3, #3
 801ed38:	89bb      	ldrh	r3, [r7, #12]
 801ed3a:	441a      	add	r2, r3
 801ed3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801ed3e:	429a      	cmp	r2, r3
 801ed40:	d901      	bls.n	801ed46 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801ed42:	2300      	movs	r3, #0
 801ed44:	e018      	b.n	801ed78 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 801ed46:	6a3b      	ldr	r3, [r7, #32]
 801ed48:	2b00      	cmp	r3, #0
 801ed4a:	d007      	beq.n	801ed5c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 801ed4c:	8a7b      	ldrh	r3, [r7, #18]
 801ed4e:	3303      	adds	r3, #3
 801ed50:	f023 0303 	bic.w	r3, r3, #3
 801ed54:	6a3a      	ldr	r2, [r7, #32]
 801ed56:	4413      	add	r3, r2
 801ed58:	617b      	str	r3, [r7, #20]
 801ed5a:	e001      	b.n	801ed60 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 801ed5c:	2300      	movs	r3, #0
 801ed5e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 801ed60:	6878      	ldr	r0, [r7, #4]
 801ed62:	89b9      	ldrh	r1, [r7, #12]
 801ed64:	89ba      	ldrh	r2, [r7, #12]
 801ed66:	2302      	movs	r3, #2
 801ed68:	9301      	str	r3, [sp, #4]
 801ed6a:	897b      	ldrh	r3, [r7, #10]
 801ed6c:	9300      	str	r3, [sp, #0]
 801ed6e:	460b      	mov	r3, r1
 801ed70:	6979      	ldr	r1, [r7, #20]
 801ed72:	f7ff fe7f 	bl	801ea74 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 801ed76:	687b      	ldr	r3, [r7, #4]
}
 801ed78:	4618      	mov	r0, r3
 801ed7a:	3718      	adds	r7, #24
 801ed7c:	46bd      	mov	sp, r7
 801ed7e:	bd80      	pop	{r7, pc}

0801ed80 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 801ed80:	b580      	push	{r7, lr}
 801ed82:	b084      	sub	sp, #16
 801ed84:	af00      	add	r7, sp, #0
 801ed86:	6078      	str	r0, [r7, #4]
 801ed88:	460b      	mov	r3, r1
 801ed8a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801ed8c:	687b      	ldr	r3, [r7, #4]
 801ed8e:	2b00      	cmp	r3, #0
 801ed90:	d106      	bne.n	801eda0 <pbuf_realloc+0x20>
 801ed92:	4b3a      	ldr	r3, [pc, #232]	; (801ee7c <pbuf_realloc+0xfc>)
 801ed94:	f44f 72cc 	mov.w	r2, #408	; 0x198
 801ed98:	4939      	ldr	r1, [pc, #228]	; (801ee80 <pbuf_realloc+0x100>)
 801ed9a:	483a      	ldr	r0, [pc, #232]	; (801ee84 <pbuf_realloc+0x104>)
 801ed9c:	f003 feae 	bl	8022afc <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 801eda0:	687b      	ldr	r3, [r7, #4]
 801eda2:	891b      	ldrh	r3, [r3, #8]
 801eda4:	887a      	ldrh	r2, [r7, #2]
 801eda6:	429a      	cmp	r2, r3
 801eda8:	d263      	bcs.n	801ee72 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 801edaa:	687b      	ldr	r3, [r7, #4]
 801edac:	891a      	ldrh	r2, [r3, #8]
 801edae:	887b      	ldrh	r3, [r7, #2]
 801edb0:	1ad3      	subs	r3, r2, r3
 801edb2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 801edb4:	887b      	ldrh	r3, [r7, #2]
 801edb6:	817b      	strh	r3, [r7, #10]
  q = p;
 801edb8:	687b      	ldr	r3, [r7, #4]
 801edba:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 801edbc:	e018      	b.n	801edf0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 801edbe:	68fb      	ldr	r3, [r7, #12]
 801edc0:	895b      	ldrh	r3, [r3, #10]
 801edc2:	897a      	ldrh	r2, [r7, #10]
 801edc4:	1ad3      	subs	r3, r2, r3
 801edc6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801edc8:	68fb      	ldr	r3, [r7, #12]
 801edca:	891a      	ldrh	r2, [r3, #8]
 801edcc:	893b      	ldrh	r3, [r7, #8]
 801edce:	1ad3      	subs	r3, r2, r3
 801edd0:	b29a      	uxth	r2, r3
 801edd2:	68fb      	ldr	r3, [r7, #12]
 801edd4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 801edd6:	68fb      	ldr	r3, [r7, #12]
 801edd8:	681b      	ldr	r3, [r3, #0]
 801edda:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801eddc:	68fb      	ldr	r3, [r7, #12]
 801edde:	2b00      	cmp	r3, #0
 801ede0:	d106      	bne.n	801edf0 <pbuf_realloc+0x70>
 801ede2:	4b26      	ldr	r3, [pc, #152]	; (801ee7c <pbuf_realloc+0xfc>)
 801ede4:	f240 12af 	movw	r2, #431	; 0x1af
 801ede8:	4927      	ldr	r1, [pc, #156]	; (801ee88 <pbuf_realloc+0x108>)
 801edea:	4826      	ldr	r0, [pc, #152]	; (801ee84 <pbuf_realloc+0x104>)
 801edec:	f003 fe86 	bl	8022afc <iprintf>
  while (rem_len > q->len) {
 801edf0:	68fb      	ldr	r3, [r7, #12]
 801edf2:	895b      	ldrh	r3, [r3, #10]
 801edf4:	897a      	ldrh	r2, [r7, #10]
 801edf6:	429a      	cmp	r2, r3
 801edf8:	d8e1      	bhi.n	801edbe <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801edfa:	68fb      	ldr	r3, [r7, #12]
 801edfc:	7b1b      	ldrb	r3, [r3, #12]
 801edfe:	f003 030f 	and.w	r3, r3, #15
 801ee02:	2b00      	cmp	r3, #0
 801ee04:	d121      	bne.n	801ee4a <pbuf_realloc+0xca>
 801ee06:	68fb      	ldr	r3, [r7, #12]
 801ee08:	895b      	ldrh	r3, [r3, #10]
 801ee0a:	897a      	ldrh	r2, [r7, #10]
 801ee0c:	429a      	cmp	r2, r3
 801ee0e:	d01c      	beq.n	801ee4a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 801ee10:	68fb      	ldr	r3, [r7, #12]
 801ee12:	7b5b      	ldrb	r3, [r3, #13]
 801ee14:	f003 0302 	and.w	r3, r3, #2
 801ee18:	2b00      	cmp	r3, #0
 801ee1a:	d116      	bne.n	801ee4a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 801ee1c:	68fb      	ldr	r3, [r7, #12]
 801ee1e:	685a      	ldr	r2, [r3, #4]
 801ee20:	68fb      	ldr	r3, [r7, #12]
 801ee22:	1ad3      	subs	r3, r2, r3
 801ee24:	b29a      	uxth	r2, r3
 801ee26:	897b      	ldrh	r3, [r7, #10]
 801ee28:	4413      	add	r3, r2
 801ee2a:	b29b      	uxth	r3, r3
 801ee2c:	4619      	mov	r1, r3
 801ee2e:	68f8      	ldr	r0, [r7, #12]
 801ee30:	f7fe ff20 	bl	801dc74 <mem_trim>
 801ee34:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801ee36:	68fb      	ldr	r3, [r7, #12]
 801ee38:	2b00      	cmp	r3, #0
 801ee3a:	d106      	bne.n	801ee4a <pbuf_realloc+0xca>
 801ee3c:	4b0f      	ldr	r3, [pc, #60]	; (801ee7c <pbuf_realloc+0xfc>)
 801ee3e:	f240 12bd 	movw	r2, #445	; 0x1bd
 801ee42:	4912      	ldr	r1, [pc, #72]	; (801ee8c <pbuf_realloc+0x10c>)
 801ee44:	480f      	ldr	r0, [pc, #60]	; (801ee84 <pbuf_realloc+0x104>)
 801ee46:	f003 fe59 	bl	8022afc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801ee4a:	68fb      	ldr	r3, [r7, #12]
 801ee4c:	897a      	ldrh	r2, [r7, #10]
 801ee4e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 801ee50:	68fb      	ldr	r3, [r7, #12]
 801ee52:	895a      	ldrh	r2, [r3, #10]
 801ee54:	68fb      	ldr	r3, [r7, #12]
 801ee56:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 801ee58:	68fb      	ldr	r3, [r7, #12]
 801ee5a:	681b      	ldr	r3, [r3, #0]
 801ee5c:	2b00      	cmp	r3, #0
 801ee5e:	d004      	beq.n	801ee6a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 801ee60:	68fb      	ldr	r3, [r7, #12]
 801ee62:	681b      	ldr	r3, [r3, #0]
 801ee64:	4618      	mov	r0, r3
 801ee66:	f000 f911 	bl	801f08c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 801ee6a:	68fb      	ldr	r3, [r7, #12]
 801ee6c:	2200      	movs	r2, #0
 801ee6e:	601a      	str	r2, [r3, #0]
 801ee70:	e000      	b.n	801ee74 <pbuf_realloc+0xf4>
    return;
 801ee72:	bf00      	nop

}
 801ee74:	3710      	adds	r7, #16
 801ee76:	46bd      	mov	sp, r7
 801ee78:	bd80      	pop	{r7, pc}
 801ee7a:	bf00      	nop
 801ee7c:	08027e00 	.word	0x08027e00
 801ee80:	08027f18 	.word	0x08027f18
 801ee84:	08027e60 	.word	0x08027e60
 801ee88:	08027f30 	.word	0x08027f30
 801ee8c:	08027f48 	.word	0x08027f48

0801ee90 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 801ee90:	b580      	push	{r7, lr}
 801ee92:	b086      	sub	sp, #24
 801ee94:	af00      	add	r7, sp, #0
 801ee96:	60f8      	str	r0, [r7, #12]
 801ee98:	60b9      	str	r1, [r7, #8]
 801ee9a:	4613      	mov	r3, r2
 801ee9c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801ee9e:	68fb      	ldr	r3, [r7, #12]
 801eea0:	2b00      	cmp	r3, #0
 801eea2:	d106      	bne.n	801eeb2 <pbuf_add_header_impl+0x22>
 801eea4:	4b2b      	ldr	r3, [pc, #172]	; (801ef54 <pbuf_add_header_impl+0xc4>)
 801eea6:	f240 12df 	movw	r2, #479	; 0x1df
 801eeaa:	492b      	ldr	r1, [pc, #172]	; (801ef58 <pbuf_add_header_impl+0xc8>)
 801eeac:	482b      	ldr	r0, [pc, #172]	; (801ef5c <pbuf_add_header_impl+0xcc>)
 801eeae:	f003 fe25 	bl	8022afc <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801eeb2:	68fb      	ldr	r3, [r7, #12]
 801eeb4:	2b00      	cmp	r3, #0
 801eeb6:	d003      	beq.n	801eec0 <pbuf_add_header_impl+0x30>
 801eeb8:	68bb      	ldr	r3, [r7, #8]
 801eeba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801eebe:	d301      	bcc.n	801eec4 <pbuf_add_header_impl+0x34>
    return 1;
 801eec0:	2301      	movs	r3, #1
 801eec2:	e043      	b.n	801ef4c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 801eec4:	68bb      	ldr	r3, [r7, #8]
 801eec6:	2b00      	cmp	r3, #0
 801eec8:	d101      	bne.n	801eece <pbuf_add_header_impl+0x3e>
    return 0;
 801eeca:	2300      	movs	r3, #0
 801eecc:	e03e      	b.n	801ef4c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 801eece:	68bb      	ldr	r3, [r7, #8]
 801eed0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801eed2:	68fb      	ldr	r3, [r7, #12]
 801eed4:	891a      	ldrh	r2, [r3, #8]
 801eed6:	8a7b      	ldrh	r3, [r7, #18]
 801eed8:	4413      	add	r3, r2
 801eeda:	b29b      	uxth	r3, r3
 801eedc:	8a7a      	ldrh	r2, [r7, #18]
 801eede:	429a      	cmp	r2, r3
 801eee0:	d901      	bls.n	801eee6 <pbuf_add_header_impl+0x56>
    return 1;
 801eee2:	2301      	movs	r3, #1
 801eee4:	e032      	b.n	801ef4c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 801eee6:	68fb      	ldr	r3, [r7, #12]
 801eee8:	7b1b      	ldrb	r3, [r3, #12]
 801eeea:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801eeec:	8a3b      	ldrh	r3, [r7, #16]
 801eeee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801eef2:	2b00      	cmp	r3, #0
 801eef4:	d00c      	beq.n	801ef10 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801eef6:	68fb      	ldr	r3, [r7, #12]
 801eef8:	685a      	ldr	r2, [r3, #4]
 801eefa:	68bb      	ldr	r3, [r7, #8]
 801eefc:	425b      	negs	r3, r3
 801eefe:	4413      	add	r3, r2
 801ef00:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801ef02:	68fb      	ldr	r3, [r7, #12]
 801ef04:	3310      	adds	r3, #16
 801ef06:	697a      	ldr	r2, [r7, #20]
 801ef08:	429a      	cmp	r2, r3
 801ef0a:	d20d      	bcs.n	801ef28 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 801ef0c:	2301      	movs	r3, #1
 801ef0e:	e01d      	b.n	801ef4c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 801ef10:	79fb      	ldrb	r3, [r7, #7]
 801ef12:	2b00      	cmp	r3, #0
 801ef14:	d006      	beq.n	801ef24 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 801ef16:	68fb      	ldr	r3, [r7, #12]
 801ef18:	685a      	ldr	r2, [r3, #4]
 801ef1a:	68bb      	ldr	r3, [r7, #8]
 801ef1c:	425b      	negs	r3, r3
 801ef1e:	4413      	add	r3, r2
 801ef20:	617b      	str	r3, [r7, #20]
 801ef22:	e001      	b.n	801ef28 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 801ef24:	2301      	movs	r3, #1
 801ef26:	e011      	b.n	801ef4c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 801ef28:	68fb      	ldr	r3, [r7, #12]
 801ef2a:	697a      	ldr	r2, [r7, #20]
 801ef2c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801ef2e:	68fb      	ldr	r3, [r7, #12]
 801ef30:	895a      	ldrh	r2, [r3, #10]
 801ef32:	8a7b      	ldrh	r3, [r7, #18]
 801ef34:	4413      	add	r3, r2
 801ef36:	b29a      	uxth	r2, r3
 801ef38:	68fb      	ldr	r3, [r7, #12]
 801ef3a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 801ef3c:	68fb      	ldr	r3, [r7, #12]
 801ef3e:	891a      	ldrh	r2, [r3, #8]
 801ef40:	8a7b      	ldrh	r3, [r7, #18]
 801ef42:	4413      	add	r3, r2
 801ef44:	b29a      	uxth	r2, r3
 801ef46:	68fb      	ldr	r3, [r7, #12]
 801ef48:	811a      	strh	r2, [r3, #8]


  return 0;
 801ef4a:	2300      	movs	r3, #0
}
 801ef4c:	4618      	mov	r0, r3
 801ef4e:	3718      	adds	r7, #24
 801ef50:	46bd      	mov	sp, r7
 801ef52:	bd80      	pop	{r7, pc}
 801ef54:	08027e00 	.word	0x08027e00
 801ef58:	08027f64 	.word	0x08027f64
 801ef5c:	08027e60 	.word	0x08027e60

0801ef60 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 801ef60:	b580      	push	{r7, lr}
 801ef62:	b082      	sub	sp, #8
 801ef64:	af00      	add	r7, sp, #0
 801ef66:	6078      	str	r0, [r7, #4]
 801ef68:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 801ef6a:	2200      	movs	r2, #0
 801ef6c:	6839      	ldr	r1, [r7, #0]
 801ef6e:	6878      	ldr	r0, [r7, #4]
 801ef70:	f7ff ff8e 	bl	801ee90 <pbuf_add_header_impl>
 801ef74:	4603      	mov	r3, r0
}
 801ef76:	4618      	mov	r0, r3
 801ef78:	3708      	adds	r7, #8
 801ef7a:	46bd      	mov	sp, r7
 801ef7c:	bd80      	pop	{r7, pc}
	...

0801ef80 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 801ef80:	b580      	push	{r7, lr}
 801ef82:	b084      	sub	sp, #16
 801ef84:	af00      	add	r7, sp, #0
 801ef86:	6078      	str	r0, [r7, #4]
 801ef88:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801ef8a:	687b      	ldr	r3, [r7, #4]
 801ef8c:	2b00      	cmp	r3, #0
 801ef8e:	d106      	bne.n	801ef9e <pbuf_remove_header+0x1e>
 801ef90:	4b20      	ldr	r3, [pc, #128]	; (801f014 <pbuf_remove_header+0x94>)
 801ef92:	f240 224b 	movw	r2, #587	; 0x24b
 801ef96:	4920      	ldr	r1, [pc, #128]	; (801f018 <pbuf_remove_header+0x98>)
 801ef98:	4820      	ldr	r0, [pc, #128]	; (801f01c <pbuf_remove_header+0x9c>)
 801ef9a:	f003 fdaf 	bl	8022afc <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801ef9e:	687b      	ldr	r3, [r7, #4]
 801efa0:	2b00      	cmp	r3, #0
 801efa2:	d003      	beq.n	801efac <pbuf_remove_header+0x2c>
 801efa4:	683b      	ldr	r3, [r7, #0]
 801efa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801efaa:	d301      	bcc.n	801efb0 <pbuf_remove_header+0x30>
    return 1;
 801efac:	2301      	movs	r3, #1
 801efae:	e02c      	b.n	801f00a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 801efb0:	683b      	ldr	r3, [r7, #0]
 801efb2:	2b00      	cmp	r3, #0
 801efb4:	d101      	bne.n	801efba <pbuf_remove_header+0x3a>
    return 0;
 801efb6:	2300      	movs	r3, #0
 801efb8:	e027      	b.n	801f00a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 801efba:	683b      	ldr	r3, [r7, #0]
 801efbc:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801efbe:	687b      	ldr	r3, [r7, #4]
 801efc0:	895b      	ldrh	r3, [r3, #10]
 801efc2:	89fa      	ldrh	r2, [r7, #14]
 801efc4:	429a      	cmp	r2, r3
 801efc6:	d908      	bls.n	801efda <pbuf_remove_header+0x5a>
 801efc8:	4b12      	ldr	r3, [pc, #72]	; (801f014 <pbuf_remove_header+0x94>)
 801efca:	f240 2255 	movw	r2, #597	; 0x255
 801efce:	4914      	ldr	r1, [pc, #80]	; (801f020 <pbuf_remove_header+0xa0>)
 801efd0:	4812      	ldr	r0, [pc, #72]	; (801f01c <pbuf_remove_header+0x9c>)
 801efd2:	f003 fd93 	bl	8022afc <iprintf>
 801efd6:	2301      	movs	r3, #1
 801efd8:	e017      	b.n	801f00a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801efda:	687b      	ldr	r3, [r7, #4]
 801efdc:	685b      	ldr	r3, [r3, #4]
 801efde:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801efe0:	687b      	ldr	r3, [r7, #4]
 801efe2:	685a      	ldr	r2, [r3, #4]
 801efe4:	683b      	ldr	r3, [r7, #0]
 801efe6:	441a      	add	r2, r3
 801efe8:	687b      	ldr	r3, [r7, #4]
 801efea:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 801efec:	687b      	ldr	r3, [r7, #4]
 801efee:	895a      	ldrh	r2, [r3, #10]
 801eff0:	89fb      	ldrh	r3, [r7, #14]
 801eff2:	1ad3      	subs	r3, r2, r3
 801eff4:	b29a      	uxth	r2, r3
 801eff6:	687b      	ldr	r3, [r7, #4]
 801eff8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801effa:	687b      	ldr	r3, [r7, #4]
 801effc:	891a      	ldrh	r2, [r3, #8]
 801effe:	89fb      	ldrh	r3, [r7, #14]
 801f000:	1ad3      	subs	r3, r2, r3
 801f002:	b29a      	uxth	r2, r3
 801f004:	687b      	ldr	r3, [r7, #4]
 801f006:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 801f008:	2300      	movs	r3, #0
}
 801f00a:	4618      	mov	r0, r3
 801f00c:	3710      	adds	r7, #16
 801f00e:	46bd      	mov	sp, r7
 801f010:	bd80      	pop	{r7, pc}
 801f012:	bf00      	nop
 801f014:	08027e00 	.word	0x08027e00
 801f018:	08027f64 	.word	0x08027f64
 801f01c:	08027e60 	.word	0x08027e60
 801f020:	08027f70 	.word	0x08027f70

0801f024 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 801f024:	b580      	push	{r7, lr}
 801f026:	b082      	sub	sp, #8
 801f028:	af00      	add	r7, sp, #0
 801f02a:	6078      	str	r0, [r7, #4]
 801f02c:	460b      	mov	r3, r1
 801f02e:	807b      	strh	r3, [r7, #2]
 801f030:	4613      	mov	r3, r2
 801f032:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 801f034:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801f038:	2b00      	cmp	r3, #0
 801f03a:	da08      	bge.n	801f04e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 801f03c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801f040:	425b      	negs	r3, r3
 801f042:	4619      	mov	r1, r3
 801f044:	6878      	ldr	r0, [r7, #4]
 801f046:	f7ff ff9b 	bl	801ef80 <pbuf_remove_header>
 801f04a:	4603      	mov	r3, r0
 801f04c:	e007      	b.n	801f05e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801f04e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801f052:	787a      	ldrb	r2, [r7, #1]
 801f054:	4619      	mov	r1, r3
 801f056:	6878      	ldr	r0, [r7, #4]
 801f058:	f7ff ff1a 	bl	801ee90 <pbuf_add_header_impl>
 801f05c:	4603      	mov	r3, r0
  }
}
 801f05e:	4618      	mov	r0, r3
 801f060:	3708      	adds	r7, #8
 801f062:	46bd      	mov	sp, r7
 801f064:	bd80      	pop	{r7, pc}

0801f066 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 801f066:	b580      	push	{r7, lr}
 801f068:	b082      	sub	sp, #8
 801f06a:	af00      	add	r7, sp, #0
 801f06c:	6078      	str	r0, [r7, #4]
 801f06e:	460b      	mov	r3, r1
 801f070:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801f072:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801f076:	2201      	movs	r2, #1
 801f078:	4619      	mov	r1, r3
 801f07a:	6878      	ldr	r0, [r7, #4]
 801f07c:	f7ff ffd2 	bl	801f024 <pbuf_header_impl>
 801f080:	4603      	mov	r3, r0
}
 801f082:	4618      	mov	r0, r3
 801f084:	3708      	adds	r7, #8
 801f086:	46bd      	mov	sp, r7
 801f088:	bd80      	pop	{r7, pc}
	...

0801f08c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 801f08c:	b580      	push	{r7, lr}
 801f08e:	b086      	sub	sp, #24
 801f090:	af00      	add	r7, sp, #0
 801f092:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 801f094:	687b      	ldr	r3, [r7, #4]
 801f096:	2b00      	cmp	r3, #0
 801f098:	d10b      	bne.n	801f0b2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801f09a:	687b      	ldr	r3, [r7, #4]
 801f09c:	2b00      	cmp	r3, #0
 801f09e:	d106      	bne.n	801f0ae <pbuf_free+0x22>
 801f0a0:	4b38      	ldr	r3, [pc, #224]	; (801f184 <pbuf_free+0xf8>)
 801f0a2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801f0a6:	4938      	ldr	r1, [pc, #224]	; (801f188 <pbuf_free+0xfc>)
 801f0a8:	4838      	ldr	r0, [pc, #224]	; (801f18c <pbuf_free+0x100>)
 801f0aa:	f003 fd27 	bl	8022afc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801f0ae:	2300      	movs	r3, #0
 801f0b0:	e063      	b.n	801f17a <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 801f0b2:	2300      	movs	r3, #0
 801f0b4:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801f0b6:	e05c      	b.n	801f172 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801f0b8:	687b      	ldr	r3, [r7, #4]
 801f0ba:	7b9b      	ldrb	r3, [r3, #14]
 801f0bc:	2b00      	cmp	r3, #0
 801f0be:	d106      	bne.n	801f0ce <pbuf_free+0x42>
 801f0c0:	4b30      	ldr	r3, [pc, #192]	; (801f184 <pbuf_free+0xf8>)
 801f0c2:	f240 22f1 	movw	r2, #753	; 0x2f1
 801f0c6:	4932      	ldr	r1, [pc, #200]	; (801f190 <pbuf_free+0x104>)
 801f0c8:	4830      	ldr	r0, [pc, #192]	; (801f18c <pbuf_free+0x100>)
 801f0ca:	f003 fd17 	bl	8022afc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 801f0ce:	687b      	ldr	r3, [r7, #4]
 801f0d0:	7b9b      	ldrb	r3, [r3, #14]
 801f0d2:	3b01      	subs	r3, #1
 801f0d4:	b2da      	uxtb	r2, r3
 801f0d6:	687b      	ldr	r3, [r7, #4]
 801f0d8:	739a      	strb	r2, [r3, #14]
 801f0da:	687b      	ldr	r3, [r7, #4]
 801f0dc:	7b9b      	ldrb	r3, [r3, #14]
 801f0de:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 801f0e0:	7dbb      	ldrb	r3, [r7, #22]
 801f0e2:	2b00      	cmp	r3, #0
 801f0e4:	d143      	bne.n	801f16e <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801f0e6:	687b      	ldr	r3, [r7, #4]
 801f0e8:	681b      	ldr	r3, [r3, #0]
 801f0ea:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 801f0ec:	687b      	ldr	r3, [r7, #4]
 801f0ee:	7b1b      	ldrb	r3, [r3, #12]
 801f0f0:	f003 030f 	and.w	r3, r3, #15
 801f0f4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801f0f6:	687b      	ldr	r3, [r7, #4]
 801f0f8:	7b5b      	ldrb	r3, [r3, #13]
 801f0fa:	f003 0302 	and.w	r3, r3, #2
 801f0fe:	2b00      	cmp	r3, #0
 801f100:	d011      	beq.n	801f126 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801f102:	687b      	ldr	r3, [r7, #4]
 801f104:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801f106:	68bb      	ldr	r3, [r7, #8]
 801f108:	691b      	ldr	r3, [r3, #16]
 801f10a:	2b00      	cmp	r3, #0
 801f10c:	d106      	bne.n	801f11c <pbuf_free+0x90>
 801f10e:	4b1d      	ldr	r3, [pc, #116]	; (801f184 <pbuf_free+0xf8>)
 801f110:	f240 22ff 	movw	r2, #767	; 0x2ff
 801f114:	491f      	ldr	r1, [pc, #124]	; (801f194 <pbuf_free+0x108>)
 801f116:	481d      	ldr	r0, [pc, #116]	; (801f18c <pbuf_free+0x100>)
 801f118:	f003 fcf0 	bl	8022afc <iprintf>
        pc->custom_free_function(p);
 801f11c:	68bb      	ldr	r3, [r7, #8]
 801f11e:	691b      	ldr	r3, [r3, #16]
 801f120:	6878      	ldr	r0, [r7, #4]
 801f122:	4798      	blx	r3
 801f124:	e01d      	b.n	801f162 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801f126:	7bfb      	ldrb	r3, [r7, #15]
 801f128:	2b02      	cmp	r3, #2
 801f12a:	d104      	bne.n	801f136 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 801f12c:	6879      	ldr	r1, [r7, #4]
 801f12e:	2005      	movs	r0, #5
 801f130:	f7ff f89c 	bl	801e26c <memp_free>
 801f134:	e015      	b.n	801f162 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801f136:	7bfb      	ldrb	r3, [r7, #15]
 801f138:	2b01      	cmp	r3, #1
 801f13a:	d104      	bne.n	801f146 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 801f13c:	6879      	ldr	r1, [r7, #4]
 801f13e:	2004      	movs	r0, #4
 801f140:	f7ff f894 	bl	801e26c <memp_free>
 801f144:	e00d      	b.n	801f162 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801f146:	7bfb      	ldrb	r3, [r7, #15]
 801f148:	2b00      	cmp	r3, #0
 801f14a:	d103      	bne.n	801f154 <pbuf_free+0xc8>
          mem_free(p);
 801f14c:	6878      	ldr	r0, [r7, #4]
 801f14e:	f7fe fd27 	bl	801dba0 <mem_free>
 801f152:	e006      	b.n	801f162 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 801f154:	4b0b      	ldr	r3, [pc, #44]	; (801f184 <pbuf_free+0xf8>)
 801f156:	f240 320f 	movw	r2, #783	; 0x30f
 801f15a:	490f      	ldr	r1, [pc, #60]	; (801f198 <pbuf_free+0x10c>)
 801f15c:	480b      	ldr	r0, [pc, #44]	; (801f18c <pbuf_free+0x100>)
 801f15e:	f003 fccd 	bl	8022afc <iprintf>
        }
      }
      count++;
 801f162:	7dfb      	ldrb	r3, [r7, #23]
 801f164:	3301      	adds	r3, #1
 801f166:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 801f168:	693b      	ldr	r3, [r7, #16]
 801f16a:	607b      	str	r3, [r7, #4]
 801f16c:	e001      	b.n	801f172 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801f16e:	2300      	movs	r3, #0
 801f170:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801f172:	687b      	ldr	r3, [r7, #4]
 801f174:	2b00      	cmp	r3, #0
 801f176:	d19f      	bne.n	801f0b8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 801f178:	7dfb      	ldrb	r3, [r7, #23]
}
 801f17a:	4618      	mov	r0, r3
 801f17c:	3718      	adds	r7, #24
 801f17e:	46bd      	mov	sp, r7
 801f180:	bd80      	pop	{r7, pc}
 801f182:	bf00      	nop
 801f184:	08027e00 	.word	0x08027e00
 801f188:	08027f64 	.word	0x08027f64
 801f18c:	08027e60 	.word	0x08027e60
 801f190:	08027f90 	.word	0x08027f90
 801f194:	08027fa8 	.word	0x08027fa8
 801f198:	08027fcc 	.word	0x08027fcc

0801f19c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 801f19c:	b480      	push	{r7}
 801f19e:	b085      	sub	sp, #20
 801f1a0:	af00      	add	r7, sp, #0
 801f1a2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 801f1a4:	2300      	movs	r3, #0
 801f1a6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 801f1a8:	e005      	b.n	801f1b6 <pbuf_clen+0x1a>
    ++len;
 801f1aa:	89fb      	ldrh	r3, [r7, #14]
 801f1ac:	3301      	adds	r3, #1
 801f1ae:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 801f1b0:	687b      	ldr	r3, [r7, #4]
 801f1b2:	681b      	ldr	r3, [r3, #0]
 801f1b4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801f1b6:	687b      	ldr	r3, [r7, #4]
 801f1b8:	2b00      	cmp	r3, #0
 801f1ba:	d1f6      	bne.n	801f1aa <pbuf_clen+0xe>
  }
  return len;
 801f1bc:	89fb      	ldrh	r3, [r7, #14]
}
 801f1be:	4618      	mov	r0, r3
 801f1c0:	3714      	adds	r7, #20
 801f1c2:	46bd      	mov	sp, r7
 801f1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f1c8:	4770      	bx	lr
	...

0801f1cc <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 801f1cc:	b580      	push	{r7, lr}
 801f1ce:	b082      	sub	sp, #8
 801f1d0:	af00      	add	r7, sp, #0
 801f1d2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 801f1d4:	687b      	ldr	r3, [r7, #4]
 801f1d6:	2b00      	cmp	r3, #0
 801f1d8:	d010      	beq.n	801f1fc <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801f1da:	687b      	ldr	r3, [r7, #4]
 801f1dc:	7b9b      	ldrb	r3, [r3, #14]
 801f1de:	3301      	adds	r3, #1
 801f1e0:	b2da      	uxtb	r2, r3
 801f1e2:	687b      	ldr	r3, [r7, #4]
 801f1e4:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801f1e6:	687b      	ldr	r3, [r7, #4]
 801f1e8:	7b9b      	ldrb	r3, [r3, #14]
 801f1ea:	2b00      	cmp	r3, #0
 801f1ec:	d106      	bne.n	801f1fc <pbuf_ref+0x30>
 801f1ee:	4b05      	ldr	r3, [pc, #20]	; (801f204 <pbuf_ref+0x38>)
 801f1f0:	f240 3242 	movw	r2, #834	; 0x342
 801f1f4:	4904      	ldr	r1, [pc, #16]	; (801f208 <pbuf_ref+0x3c>)
 801f1f6:	4805      	ldr	r0, [pc, #20]	; (801f20c <pbuf_ref+0x40>)
 801f1f8:	f003 fc80 	bl	8022afc <iprintf>
  }
}
 801f1fc:	bf00      	nop
 801f1fe:	3708      	adds	r7, #8
 801f200:	46bd      	mov	sp, r7
 801f202:	bd80      	pop	{r7, pc}
 801f204:	08027e00 	.word	0x08027e00
 801f208:	08027fe0 	.word	0x08027fe0
 801f20c:	08027e60 	.word	0x08027e60

0801f210 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 801f210:	b580      	push	{r7, lr}
 801f212:	b084      	sub	sp, #16
 801f214:	af00      	add	r7, sp, #0
 801f216:	6078      	str	r0, [r7, #4]
 801f218:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801f21a:	687b      	ldr	r3, [r7, #4]
 801f21c:	2b00      	cmp	r3, #0
 801f21e:	d002      	beq.n	801f226 <pbuf_cat+0x16>
 801f220:	683b      	ldr	r3, [r7, #0]
 801f222:	2b00      	cmp	r3, #0
 801f224:	d107      	bne.n	801f236 <pbuf_cat+0x26>
 801f226:	4b20      	ldr	r3, [pc, #128]	; (801f2a8 <pbuf_cat+0x98>)
 801f228:	f240 3259 	movw	r2, #857	; 0x359
 801f22c:	491f      	ldr	r1, [pc, #124]	; (801f2ac <pbuf_cat+0x9c>)
 801f22e:	4820      	ldr	r0, [pc, #128]	; (801f2b0 <pbuf_cat+0xa0>)
 801f230:	f003 fc64 	bl	8022afc <iprintf>
 801f234:	e034      	b.n	801f2a0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801f236:	687b      	ldr	r3, [r7, #4]
 801f238:	60fb      	str	r3, [r7, #12]
 801f23a:	e00a      	b.n	801f252 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801f23c:	68fb      	ldr	r3, [r7, #12]
 801f23e:	891a      	ldrh	r2, [r3, #8]
 801f240:	683b      	ldr	r3, [r7, #0]
 801f242:	891b      	ldrh	r3, [r3, #8]
 801f244:	4413      	add	r3, r2
 801f246:	b29a      	uxth	r2, r3
 801f248:	68fb      	ldr	r3, [r7, #12]
 801f24a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 801f24c:	68fb      	ldr	r3, [r7, #12]
 801f24e:	681b      	ldr	r3, [r3, #0]
 801f250:	60fb      	str	r3, [r7, #12]
 801f252:	68fb      	ldr	r3, [r7, #12]
 801f254:	681b      	ldr	r3, [r3, #0]
 801f256:	2b00      	cmp	r3, #0
 801f258:	d1f0      	bne.n	801f23c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801f25a:	68fb      	ldr	r3, [r7, #12]
 801f25c:	891a      	ldrh	r2, [r3, #8]
 801f25e:	68fb      	ldr	r3, [r7, #12]
 801f260:	895b      	ldrh	r3, [r3, #10]
 801f262:	429a      	cmp	r2, r3
 801f264:	d006      	beq.n	801f274 <pbuf_cat+0x64>
 801f266:	4b10      	ldr	r3, [pc, #64]	; (801f2a8 <pbuf_cat+0x98>)
 801f268:	f240 3262 	movw	r2, #866	; 0x362
 801f26c:	4911      	ldr	r1, [pc, #68]	; (801f2b4 <pbuf_cat+0xa4>)
 801f26e:	4810      	ldr	r0, [pc, #64]	; (801f2b0 <pbuf_cat+0xa0>)
 801f270:	f003 fc44 	bl	8022afc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801f274:	68fb      	ldr	r3, [r7, #12]
 801f276:	681b      	ldr	r3, [r3, #0]
 801f278:	2b00      	cmp	r3, #0
 801f27a:	d006      	beq.n	801f28a <pbuf_cat+0x7a>
 801f27c:	4b0a      	ldr	r3, [pc, #40]	; (801f2a8 <pbuf_cat+0x98>)
 801f27e:	f240 3263 	movw	r2, #867	; 0x363
 801f282:	490d      	ldr	r1, [pc, #52]	; (801f2b8 <pbuf_cat+0xa8>)
 801f284:	480a      	ldr	r0, [pc, #40]	; (801f2b0 <pbuf_cat+0xa0>)
 801f286:	f003 fc39 	bl	8022afc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801f28a:	68fb      	ldr	r3, [r7, #12]
 801f28c:	891a      	ldrh	r2, [r3, #8]
 801f28e:	683b      	ldr	r3, [r7, #0]
 801f290:	891b      	ldrh	r3, [r3, #8]
 801f292:	4413      	add	r3, r2
 801f294:	b29a      	uxth	r2, r3
 801f296:	68fb      	ldr	r3, [r7, #12]
 801f298:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801f29a:	68fb      	ldr	r3, [r7, #12]
 801f29c:	683a      	ldr	r2, [r7, #0]
 801f29e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 801f2a0:	3710      	adds	r7, #16
 801f2a2:	46bd      	mov	sp, r7
 801f2a4:	bd80      	pop	{r7, pc}
 801f2a6:	bf00      	nop
 801f2a8:	08027e00 	.word	0x08027e00
 801f2ac:	08027ff4 	.word	0x08027ff4
 801f2b0:	08027e60 	.word	0x08027e60
 801f2b4:	0802802c 	.word	0x0802802c
 801f2b8:	0802805c 	.word	0x0802805c

0801f2bc <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 801f2bc:	b580      	push	{r7, lr}
 801f2be:	b082      	sub	sp, #8
 801f2c0:	af00      	add	r7, sp, #0
 801f2c2:	6078      	str	r0, [r7, #4]
 801f2c4:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 801f2c6:	6839      	ldr	r1, [r7, #0]
 801f2c8:	6878      	ldr	r0, [r7, #4]
 801f2ca:	f7ff ffa1 	bl	801f210 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 801f2ce:	6838      	ldr	r0, [r7, #0]
 801f2d0:	f7ff ff7c 	bl	801f1cc <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 801f2d4:	bf00      	nop
 801f2d6:	3708      	adds	r7, #8
 801f2d8:	46bd      	mov	sp, r7
 801f2da:	bd80      	pop	{r7, pc}

0801f2dc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 801f2dc:	b580      	push	{r7, lr}
 801f2de:	b086      	sub	sp, #24
 801f2e0:	af00      	add	r7, sp, #0
 801f2e2:	6078      	str	r0, [r7, #4]
 801f2e4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801f2e6:	2300      	movs	r3, #0
 801f2e8:	617b      	str	r3, [r7, #20]
 801f2ea:	2300      	movs	r3, #0
 801f2ec:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801f2ee:	687b      	ldr	r3, [r7, #4]
 801f2f0:	2b00      	cmp	r3, #0
 801f2f2:	d008      	beq.n	801f306 <pbuf_copy+0x2a>
 801f2f4:	683b      	ldr	r3, [r7, #0]
 801f2f6:	2b00      	cmp	r3, #0
 801f2f8:	d005      	beq.n	801f306 <pbuf_copy+0x2a>
 801f2fa:	687b      	ldr	r3, [r7, #4]
 801f2fc:	891a      	ldrh	r2, [r3, #8]
 801f2fe:	683b      	ldr	r3, [r7, #0]
 801f300:	891b      	ldrh	r3, [r3, #8]
 801f302:	429a      	cmp	r2, r3
 801f304:	d209      	bcs.n	801f31a <pbuf_copy+0x3e>
 801f306:	4b57      	ldr	r3, [pc, #348]	; (801f464 <pbuf_copy+0x188>)
 801f308:	f240 32c9 	movw	r2, #969	; 0x3c9
 801f30c:	4956      	ldr	r1, [pc, #344]	; (801f468 <pbuf_copy+0x18c>)
 801f30e:	4857      	ldr	r0, [pc, #348]	; (801f46c <pbuf_copy+0x190>)
 801f310:	f003 fbf4 	bl	8022afc <iprintf>
 801f314:	f06f 030f 	mvn.w	r3, #15
 801f318:	e09f      	b.n	801f45a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801f31a:	687b      	ldr	r3, [r7, #4]
 801f31c:	895b      	ldrh	r3, [r3, #10]
 801f31e:	461a      	mov	r2, r3
 801f320:	697b      	ldr	r3, [r7, #20]
 801f322:	1ad2      	subs	r2, r2, r3
 801f324:	683b      	ldr	r3, [r7, #0]
 801f326:	895b      	ldrh	r3, [r3, #10]
 801f328:	4619      	mov	r1, r3
 801f32a:	693b      	ldr	r3, [r7, #16]
 801f32c:	1acb      	subs	r3, r1, r3
 801f32e:	429a      	cmp	r2, r3
 801f330:	d306      	bcc.n	801f340 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801f332:	683b      	ldr	r3, [r7, #0]
 801f334:	895b      	ldrh	r3, [r3, #10]
 801f336:	461a      	mov	r2, r3
 801f338:	693b      	ldr	r3, [r7, #16]
 801f33a:	1ad3      	subs	r3, r2, r3
 801f33c:	60fb      	str	r3, [r7, #12]
 801f33e:	e005      	b.n	801f34c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 801f340:	687b      	ldr	r3, [r7, #4]
 801f342:	895b      	ldrh	r3, [r3, #10]
 801f344:	461a      	mov	r2, r3
 801f346:	697b      	ldr	r3, [r7, #20]
 801f348:	1ad3      	subs	r3, r2, r3
 801f34a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 801f34c:	687b      	ldr	r3, [r7, #4]
 801f34e:	685a      	ldr	r2, [r3, #4]
 801f350:	697b      	ldr	r3, [r7, #20]
 801f352:	18d0      	adds	r0, r2, r3
 801f354:	683b      	ldr	r3, [r7, #0]
 801f356:	685a      	ldr	r2, [r3, #4]
 801f358:	693b      	ldr	r3, [r7, #16]
 801f35a:	4413      	add	r3, r2
 801f35c:	68fa      	ldr	r2, [r7, #12]
 801f35e:	4619      	mov	r1, r3
 801f360:	f003 fabc 	bl	80228dc <memcpy>
    offset_to += len;
 801f364:	697a      	ldr	r2, [r7, #20]
 801f366:	68fb      	ldr	r3, [r7, #12]
 801f368:	4413      	add	r3, r2
 801f36a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 801f36c:	693a      	ldr	r2, [r7, #16]
 801f36e:	68fb      	ldr	r3, [r7, #12]
 801f370:	4413      	add	r3, r2
 801f372:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801f374:	687b      	ldr	r3, [r7, #4]
 801f376:	895b      	ldrh	r3, [r3, #10]
 801f378:	461a      	mov	r2, r3
 801f37a:	697b      	ldr	r3, [r7, #20]
 801f37c:	4293      	cmp	r3, r2
 801f37e:	d906      	bls.n	801f38e <pbuf_copy+0xb2>
 801f380:	4b38      	ldr	r3, [pc, #224]	; (801f464 <pbuf_copy+0x188>)
 801f382:	f240 32d9 	movw	r2, #985	; 0x3d9
 801f386:	493a      	ldr	r1, [pc, #232]	; (801f470 <pbuf_copy+0x194>)
 801f388:	4838      	ldr	r0, [pc, #224]	; (801f46c <pbuf_copy+0x190>)
 801f38a:	f003 fbb7 	bl	8022afc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801f38e:	683b      	ldr	r3, [r7, #0]
 801f390:	895b      	ldrh	r3, [r3, #10]
 801f392:	461a      	mov	r2, r3
 801f394:	693b      	ldr	r3, [r7, #16]
 801f396:	4293      	cmp	r3, r2
 801f398:	d906      	bls.n	801f3a8 <pbuf_copy+0xcc>
 801f39a:	4b32      	ldr	r3, [pc, #200]	; (801f464 <pbuf_copy+0x188>)
 801f39c:	f240 32da 	movw	r2, #986	; 0x3da
 801f3a0:	4934      	ldr	r1, [pc, #208]	; (801f474 <pbuf_copy+0x198>)
 801f3a2:	4832      	ldr	r0, [pc, #200]	; (801f46c <pbuf_copy+0x190>)
 801f3a4:	f003 fbaa 	bl	8022afc <iprintf>
    if (offset_from >= p_from->len) {
 801f3a8:	683b      	ldr	r3, [r7, #0]
 801f3aa:	895b      	ldrh	r3, [r3, #10]
 801f3ac:	461a      	mov	r2, r3
 801f3ae:	693b      	ldr	r3, [r7, #16]
 801f3b0:	4293      	cmp	r3, r2
 801f3b2:	d304      	bcc.n	801f3be <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 801f3b4:	2300      	movs	r3, #0
 801f3b6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 801f3b8:	683b      	ldr	r3, [r7, #0]
 801f3ba:	681b      	ldr	r3, [r3, #0]
 801f3bc:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801f3be:	687b      	ldr	r3, [r7, #4]
 801f3c0:	895b      	ldrh	r3, [r3, #10]
 801f3c2:	461a      	mov	r2, r3
 801f3c4:	697b      	ldr	r3, [r7, #20]
 801f3c6:	4293      	cmp	r3, r2
 801f3c8:	d114      	bne.n	801f3f4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801f3ca:	2300      	movs	r3, #0
 801f3cc:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801f3ce:	687b      	ldr	r3, [r7, #4]
 801f3d0:	681b      	ldr	r3, [r3, #0]
 801f3d2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801f3d4:	687b      	ldr	r3, [r7, #4]
 801f3d6:	2b00      	cmp	r3, #0
 801f3d8:	d10c      	bne.n	801f3f4 <pbuf_copy+0x118>
 801f3da:	683b      	ldr	r3, [r7, #0]
 801f3dc:	2b00      	cmp	r3, #0
 801f3de:	d009      	beq.n	801f3f4 <pbuf_copy+0x118>
 801f3e0:	4b20      	ldr	r3, [pc, #128]	; (801f464 <pbuf_copy+0x188>)
 801f3e2:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 801f3e6:	4924      	ldr	r1, [pc, #144]	; (801f478 <pbuf_copy+0x19c>)
 801f3e8:	4820      	ldr	r0, [pc, #128]	; (801f46c <pbuf_copy+0x190>)
 801f3ea:	f003 fb87 	bl	8022afc <iprintf>
 801f3ee:	f06f 030f 	mvn.w	r3, #15
 801f3f2:	e032      	b.n	801f45a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801f3f4:	683b      	ldr	r3, [r7, #0]
 801f3f6:	2b00      	cmp	r3, #0
 801f3f8:	d013      	beq.n	801f422 <pbuf_copy+0x146>
 801f3fa:	683b      	ldr	r3, [r7, #0]
 801f3fc:	895a      	ldrh	r2, [r3, #10]
 801f3fe:	683b      	ldr	r3, [r7, #0]
 801f400:	891b      	ldrh	r3, [r3, #8]
 801f402:	429a      	cmp	r2, r3
 801f404:	d10d      	bne.n	801f422 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801f406:	683b      	ldr	r3, [r7, #0]
 801f408:	681b      	ldr	r3, [r3, #0]
 801f40a:	2b00      	cmp	r3, #0
 801f40c:	d009      	beq.n	801f422 <pbuf_copy+0x146>
 801f40e:	4b15      	ldr	r3, [pc, #84]	; (801f464 <pbuf_copy+0x188>)
 801f410:	f240 32e9 	movw	r2, #1001	; 0x3e9
 801f414:	4919      	ldr	r1, [pc, #100]	; (801f47c <pbuf_copy+0x1a0>)
 801f416:	4815      	ldr	r0, [pc, #84]	; (801f46c <pbuf_copy+0x190>)
 801f418:	f003 fb70 	bl	8022afc <iprintf>
 801f41c:	f06f 0305 	mvn.w	r3, #5
 801f420:	e01b      	b.n	801f45a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801f422:	687b      	ldr	r3, [r7, #4]
 801f424:	2b00      	cmp	r3, #0
 801f426:	d013      	beq.n	801f450 <pbuf_copy+0x174>
 801f428:	687b      	ldr	r3, [r7, #4]
 801f42a:	895a      	ldrh	r2, [r3, #10]
 801f42c:	687b      	ldr	r3, [r7, #4]
 801f42e:	891b      	ldrh	r3, [r3, #8]
 801f430:	429a      	cmp	r2, r3
 801f432:	d10d      	bne.n	801f450 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801f434:	687b      	ldr	r3, [r7, #4]
 801f436:	681b      	ldr	r3, [r3, #0]
 801f438:	2b00      	cmp	r3, #0
 801f43a:	d009      	beq.n	801f450 <pbuf_copy+0x174>
 801f43c:	4b09      	ldr	r3, [pc, #36]	; (801f464 <pbuf_copy+0x188>)
 801f43e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 801f442:	490e      	ldr	r1, [pc, #56]	; (801f47c <pbuf_copy+0x1a0>)
 801f444:	4809      	ldr	r0, [pc, #36]	; (801f46c <pbuf_copy+0x190>)
 801f446:	f003 fb59 	bl	8022afc <iprintf>
 801f44a:	f06f 0305 	mvn.w	r3, #5
 801f44e:	e004      	b.n	801f45a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 801f450:	683b      	ldr	r3, [r7, #0]
 801f452:	2b00      	cmp	r3, #0
 801f454:	f47f af61 	bne.w	801f31a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 801f458:	2300      	movs	r3, #0
}
 801f45a:	4618      	mov	r0, r3
 801f45c:	3718      	adds	r7, #24
 801f45e:	46bd      	mov	sp, r7
 801f460:	bd80      	pop	{r7, pc}
 801f462:	bf00      	nop
 801f464:	08027e00 	.word	0x08027e00
 801f468:	080280a8 	.word	0x080280a8
 801f46c:	08027e60 	.word	0x08027e60
 801f470:	080280d8 	.word	0x080280d8
 801f474:	080280f0 	.word	0x080280f0
 801f478:	0802810c 	.word	0x0802810c
 801f47c:	0802811c 	.word	0x0802811c

0801f480 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 801f480:	b580      	push	{r7, lr}
 801f482:	b088      	sub	sp, #32
 801f484:	af00      	add	r7, sp, #0
 801f486:	60f8      	str	r0, [r7, #12]
 801f488:	60b9      	str	r1, [r7, #8]
 801f48a:	4613      	mov	r3, r2
 801f48c:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 801f48e:	88fb      	ldrh	r3, [r7, #6]
 801f490:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 801f492:	2300      	movs	r3, #0
 801f494:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 801f496:	68fb      	ldr	r3, [r7, #12]
 801f498:	2b00      	cmp	r3, #0
 801f49a:	d109      	bne.n	801f4b0 <pbuf_take+0x30>
 801f49c:	4b3a      	ldr	r3, [pc, #232]	; (801f588 <pbuf_take+0x108>)
 801f49e:	f240 42b3 	movw	r2, #1203	; 0x4b3
 801f4a2:	493a      	ldr	r1, [pc, #232]	; (801f58c <pbuf_take+0x10c>)
 801f4a4:	483a      	ldr	r0, [pc, #232]	; (801f590 <pbuf_take+0x110>)
 801f4a6:	f003 fb29 	bl	8022afc <iprintf>
 801f4aa:	f06f 030f 	mvn.w	r3, #15
 801f4ae:	e067      	b.n	801f580 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 801f4b0:	68bb      	ldr	r3, [r7, #8]
 801f4b2:	2b00      	cmp	r3, #0
 801f4b4:	d109      	bne.n	801f4ca <pbuf_take+0x4a>
 801f4b6:	4b34      	ldr	r3, [pc, #208]	; (801f588 <pbuf_take+0x108>)
 801f4b8:	f240 42b4 	movw	r2, #1204	; 0x4b4
 801f4bc:	4935      	ldr	r1, [pc, #212]	; (801f594 <pbuf_take+0x114>)
 801f4be:	4834      	ldr	r0, [pc, #208]	; (801f590 <pbuf_take+0x110>)
 801f4c0:	f003 fb1c 	bl	8022afc <iprintf>
 801f4c4:	f06f 030f 	mvn.w	r3, #15
 801f4c8:	e05a      	b.n	801f580 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 801f4ca:	68fb      	ldr	r3, [r7, #12]
 801f4cc:	891b      	ldrh	r3, [r3, #8]
 801f4ce:	88fa      	ldrh	r2, [r7, #6]
 801f4d0:	429a      	cmp	r2, r3
 801f4d2:	d909      	bls.n	801f4e8 <pbuf_take+0x68>
 801f4d4:	4b2c      	ldr	r3, [pc, #176]	; (801f588 <pbuf_take+0x108>)
 801f4d6:	f240 42b5 	movw	r2, #1205	; 0x4b5
 801f4da:	492f      	ldr	r1, [pc, #188]	; (801f598 <pbuf_take+0x118>)
 801f4dc:	482c      	ldr	r0, [pc, #176]	; (801f590 <pbuf_take+0x110>)
 801f4de:	f003 fb0d 	bl	8022afc <iprintf>
 801f4e2:	f04f 33ff 	mov.w	r3, #4294967295
 801f4e6:	e04b      	b.n	801f580 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 801f4e8:	68fb      	ldr	r3, [r7, #12]
 801f4ea:	2b00      	cmp	r3, #0
 801f4ec:	d007      	beq.n	801f4fe <pbuf_take+0x7e>
 801f4ee:	68bb      	ldr	r3, [r7, #8]
 801f4f0:	2b00      	cmp	r3, #0
 801f4f2:	d004      	beq.n	801f4fe <pbuf_take+0x7e>
 801f4f4:	68fb      	ldr	r3, [r7, #12]
 801f4f6:	891b      	ldrh	r3, [r3, #8]
 801f4f8:	88fa      	ldrh	r2, [r7, #6]
 801f4fa:	429a      	cmp	r2, r3
 801f4fc:	d902      	bls.n	801f504 <pbuf_take+0x84>
    return ERR_ARG;
 801f4fe:	f06f 030f 	mvn.w	r3, #15
 801f502:	e03d      	b.n	801f580 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 801f504:	68fb      	ldr	r3, [r7, #12]
 801f506:	61fb      	str	r3, [r7, #28]
 801f508:	e028      	b.n	801f55c <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 801f50a:	69fb      	ldr	r3, [r7, #28]
 801f50c:	2b00      	cmp	r3, #0
 801f50e:	d106      	bne.n	801f51e <pbuf_take+0x9e>
 801f510:	4b1d      	ldr	r3, [pc, #116]	; (801f588 <pbuf_take+0x108>)
 801f512:	f240 42bd 	movw	r2, #1213	; 0x4bd
 801f516:	4921      	ldr	r1, [pc, #132]	; (801f59c <pbuf_take+0x11c>)
 801f518:	481d      	ldr	r0, [pc, #116]	; (801f590 <pbuf_take+0x110>)
 801f51a:	f003 faef 	bl	8022afc <iprintf>
    buf_copy_len = total_copy_len;
 801f51e:	697b      	ldr	r3, [r7, #20]
 801f520:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 801f522:	69fb      	ldr	r3, [r7, #28]
 801f524:	895b      	ldrh	r3, [r3, #10]
 801f526:	461a      	mov	r2, r3
 801f528:	69bb      	ldr	r3, [r7, #24]
 801f52a:	4293      	cmp	r3, r2
 801f52c:	d902      	bls.n	801f534 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 801f52e:	69fb      	ldr	r3, [r7, #28]
 801f530:	895b      	ldrh	r3, [r3, #10]
 801f532:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 801f534:	69fb      	ldr	r3, [r7, #28]
 801f536:	6858      	ldr	r0, [r3, #4]
 801f538:	68ba      	ldr	r2, [r7, #8]
 801f53a:	693b      	ldr	r3, [r7, #16]
 801f53c:	4413      	add	r3, r2
 801f53e:	69ba      	ldr	r2, [r7, #24]
 801f540:	4619      	mov	r1, r3
 801f542:	f003 f9cb 	bl	80228dc <memcpy>
    total_copy_len -= buf_copy_len;
 801f546:	697a      	ldr	r2, [r7, #20]
 801f548:	69bb      	ldr	r3, [r7, #24]
 801f54a:	1ad3      	subs	r3, r2, r3
 801f54c:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 801f54e:	693a      	ldr	r2, [r7, #16]
 801f550:	69bb      	ldr	r3, [r7, #24]
 801f552:	4413      	add	r3, r2
 801f554:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 801f556:	69fb      	ldr	r3, [r7, #28]
 801f558:	681b      	ldr	r3, [r3, #0]
 801f55a:	61fb      	str	r3, [r7, #28]
 801f55c:	697b      	ldr	r3, [r7, #20]
 801f55e:	2b00      	cmp	r3, #0
 801f560:	d1d3      	bne.n	801f50a <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 801f562:	697b      	ldr	r3, [r7, #20]
 801f564:	2b00      	cmp	r3, #0
 801f566:	d103      	bne.n	801f570 <pbuf_take+0xf0>
 801f568:	88fb      	ldrh	r3, [r7, #6]
 801f56a:	693a      	ldr	r2, [r7, #16]
 801f56c:	429a      	cmp	r2, r3
 801f56e:	d006      	beq.n	801f57e <pbuf_take+0xfe>
 801f570:	4b05      	ldr	r3, [pc, #20]	; (801f588 <pbuf_take+0x108>)
 801f572:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 801f576:	490a      	ldr	r1, [pc, #40]	; (801f5a0 <pbuf_take+0x120>)
 801f578:	4805      	ldr	r0, [pc, #20]	; (801f590 <pbuf_take+0x110>)
 801f57a:	f003 fabf 	bl	8022afc <iprintf>
  return ERR_OK;
 801f57e:	2300      	movs	r3, #0
}
 801f580:	4618      	mov	r0, r3
 801f582:	3720      	adds	r7, #32
 801f584:	46bd      	mov	sp, r7
 801f586:	bd80      	pop	{r7, pc}
 801f588:	08027e00 	.word	0x08027e00
 801f58c:	080281d8 	.word	0x080281d8
 801f590:	08027e60 	.word	0x08027e60
 801f594:	080281f0 	.word	0x080281f0
 801f598:	0802820c 	.word	0x0802820c
 801f59c:	0802822c 	.word	0x0802822c
 801f5a0:	08028244 	.word	0x08028244

0801f5a4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 801f5a4:	b580      	push	{r7, lr}
 801f5a6:	b084      	sub	sp, #16
 801f5a8:	af00      	add	r7, sp, #0
 801f5aa:	4603      	mov	r3, r0
 801f5ac:	603a      	str	r2, [r7, #0]
 801f5ae:	71fb      	strb	r3, [r7, #7]
 801f5b0:	460b      	mov	r3, r1
 801f5b2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 801f5b4:	683b      	ldr	r3, [r7, #0]
 801f5b6:	8919      	ldrh	r1, [r3, #8]
 801f5b8:	88ba      	ldrh	r2, [r7, #4]
 801f5ba:	79fb      	ldrb	r3, [r7, #7]
 801f5bc:	4618      	mov	r0, r3
 801f5be:	f7ff fa83 	bl	801eac8 <pbuf_alloc>
 801f5c2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 801f5c4:	68fb      	ldr	r3, [r7, #12]
 801f5c6:	2b00      	cmp	r3, #0
 801f5c8:	d101      	bne.n	801f5ce <pbuf_clone+0x2a>
    return NULL;
 801f5ca:	2300      	movs	r3, #0
 801f5cc:	e011      	b.n	801f5f2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801f5ce:	6839      	ldr	r1, [r7, #0]
 801f5d0:	68f8      	ldr	r0, [r7, #12]
 801f5d2:	f7ff fe83 	bl	801f2dc <pbuf_copy>
 801f5d6:	4603      	mov	r3, r0
 801f5d8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801f5da:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801f5de:	2b00      	cmp	r3, #0
 801f5e0:	d006      	beq.n	801f5f0 <pbuf_clone+0x4c>
 801f5e2:	4b06      	ldr	r3, [pc, #24]	; (801f5fc <pbuf_clone+0x58>)
 801f5e4:	f240 5224 	movw	r2, #1316	; 0x524
 801f5e8:	4905      	ldr	r1, [pc, #20]	; (801f600 <pbuf_clone+0x5c>)
 801f5ea:	4806      	ldr	r0, [pc, #24]	; (801f604 <pbuf_clone+0x60>)
 801f5ec:	f003 fa86 	bl	8022afc <iprintf>
  return q;
 801f5f0:	68fb      	ldr	r3, [r7, #12]
}
 801f5f2:	4618      	mov	r0, r3
 801f5f4:	3710      	adds	r7, #16
 801f5f6:	46bd      	mov	sp, r7
 801f5f8:	bd80      	pop	{r7, pc}
 801f5fa:	bf00      	nop
 801f5fc:	08027e00 	.word	0x08027e00
 801f600:	08028274 	.word	0x08028274
 801f604:	08027e60 	.word	0x08027e60

0801f608 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801f608:	b580      	push	{r7, lr}
 801f60a:	b086      	sub	sp, #24
 801f60c:	af00      	add	r7, sp, #0
 801f60e:	60f8      	str	r0, [r7, #12]
 801f610:	60b9      	str	r1, [r7, #8]
 801f612:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801f614:	2003      	movs	r0, #3
 801f616:	f7fe fdb9 	bl	801e18c <memp_malloc>
 801f61a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801f61c:	693b      	ldr	r3, [r7, #16]
 801f61e:	2b00      	cmp	r3, #0
 801f620:	d109      	bne.n	801f636 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801f622:	693b      	ldr	r3, [r7, #16]
 801f624:	2b00      	cmp	r3, #0
 801f626:	d151      	bne.n	801f6cc <sys_timeout_abs+0xc4>
 801f628:	4b2a      	ldr	r3, [pc, #168]	; (801f6d4 <sys_timeout_abs+0xcc>)
 801f62a:	22be      	movs	r2, #190	; 0xbe
 801f62c:	492a      	ldr	r1, [pc, #168]	; (801f6d8 <sys_timeout_abs+0xd0>)
 801f62e:	482b      	ldr	r0, [pc, #172]	; (801f6dc <sys_timeout_abs+0xd4>)
 801f630:	f003 fa64 	bl	8022afc <iprintf>
    return;
 801f634:	e04a      	b.n	801f6cc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801f636:	693b      	ldr	r3, [r7, #16]
 801f638:	2200      	movs	r2, #0
 801f63a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801f63c:	693b      	ldr	r3, [r7, #16]
 801f63e:	68ba      	ldr	r2, [r7, #8]
 801f640:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801f642:	693b      	ldr	r3, [r7, #16]
 801f644:	687a      	ldr	r2, [r7, #4]
 801f646:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801f648:	693b      	ldr	r3, [r7, #16]
 801f64a:	68fa      	ldr	r2, [r7, #12]
 801f64c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801f64e:	4b24      	ldr	r3, [pc, #144]	; (801f6e0 <sys_timeout_abs+0xd8>)
 801f650:	681b      	ldr	r3, [r3, #0]
 801f652:	2b00      	cmp	r3, #0
 801f654:	d103      	bne.n	801f65e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801f656:	4a22      	ldr	r2, [pc, #136]	; (801f6e0 <sys_timeout_abs+0xd8>)
 801f658:	693b      	ldr	r3, [r7, #16]
 801f65a:	6013      	str	r3, [r2, #0]
    return;
 801f65c:	e037      	b.n	801f6ce <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801f65e:	693b      	ldr	r3, [r7, #16]
 801f660:	685a      	ldr	r2, [r3, #4]
 801f662:	4b1f      	ldr	r3, [pc, #124]	; (801f6e0 <sys_timeout_abs+0xd8>)
 801f664:	681b      	ldr	r3, [r3, #0]
 801f666:	685b      	ldr	r3, [r3, #4]
 801f668:	1ad3      	subs	r3, r2, r3
 801f66a:	0fdb      	lsrs	r3, r3, #31
 801f66c:	f003 0301 	and.w	r3, r3, #1
 801f670:	b2db      	uxtb	r3, r3
 801f672:	2b00      	cmp	r3, #0
 801f674:	d007      	beq.n	801f686 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801f676:	4b1a      	ldr	r3, [pc, #104]	; (801f6e0 <sys_timeout_abs+0xd8>)
 801f678:	681a      	ldr	r2, [r3, #0]
 801f67a:	693b      	ldr	r3, [r7, #16]
 801f67c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801f67e:	4a18      	ldr	r2, [pc, #96]	; (801f6e0 <sys_timeout_abs+0xd8>)
 801f680:	693b      	ldr	r3, [r7, #16]
 801f682:	6013      	str	r3, [r2, #0]
 801f684:	e023      	b.n	801f6ce <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801f686:	4b16      	ldr	r3, [pc, #88]	; (801f6e0 <sys_timeout_abs+0xd8>)
 801f688:	681b      	ldr	r3, [r3, #0]
 801f68a:	617b      	str	r3, [r7, #20]
 801f68c:	e01a      	b.n	801f6c4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801f68e:	697b      	ldr	r3, [r7, #20]
 801f690:	681b      	ldr	r3, [r3, #0]
 801f692:	2b00      	cmp	r3, #0
 801f694:	d00b      	beq.n	801f6ae <sys_timeout_abs+0xa6>
 801f696:	693b      	ldr	r3, [r7, #16]
 801f698:	685a      	ldr	r2, [r3, #4]
 801f69a:	697b      	ldr	r3, [r7, #20]
 801f69c:	681b      	ldr	r3, [r3, #0]
 801f69e:	685b      	ldr	r3, [r3, #4]
 801f6a0:	1ad3      	subs	r3, r2, r3
 801f6a2:	0fdb      	lsrs	r3, r3, #31
 801f6a4:	f003 0301 	and.w	r3, r3, #1
 801f6a8:	b2db      	uxtb	r3, r3
 801f6aa:	2b00      	cmp	r3, #0
 801f6ac:	d007      	beq.n	801f6be <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801f6ae:	697b      	ldr	r3, [r7, #20]
 801f6b0:	681a      	ldr	r2, [r3, #0]
 801f6b2:	693b      	ldr	r3, [r7, #16]
 801f6b4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801f6b6:	697b      	ldr	r3, [r7, #20]
 801f6b8:	693a      	ldr	r2, [r7, #16]
 801f6ba:	601a      	str	r2, [r3, #0]
        break;
 801f6bc:	e007      	b.n	801f6ce <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801f6be:	697b      	ldr	r3, [r7, #20]
 801f6c0:	681b      	ldr	r3, [r3, #0]
 801f6c2:	617b      	str	r3, [r7, #20]
 801f6c4:	697b      	ldr	r3, [r7, #20]
 801f6c6:	2b00      	cmp	r3, #0
 801f6c8:	d1e1      	bne.n	801f68e <sys_timeout_abs+0x86>
 801f6ca:	e000      	b.n	801f6ce <sys_timeout_abs+0xc6>
    return;
 801f6cc:	bf00      	nop
      }
    }
  }
}
 801f6ce:	3718      	adds	r7, #24
 801f6d0:	46bd      	mov	sp, r7
 801f6d2:	bd80      	pop	{r7, pc}
 801f6d4:	08028288 	.word	0x08028288
 801f6d8:	080282bc 	.word	0x080282bc
 801f6dc:	080282fc 	.word	0x080282fc
 801f6e0:	20013e6c 	.word	0x20013e6c

0801f6e4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801f6e4:	b580      	push	{r7, lr}
 801f6e6:	b086      	sub	sp, #24
 801f6e8:	af00      	add	r7, sp, #0
 801f6ea:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801f6ec:	687b      	ldr	r3, [r7, #4]
 801f6ee:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801f6f0:	697b      	ldr	r3, [r7, #20]
 801f6f2:	685b      	ldr	r3, [r3, #4]
 801f6f4:	4798      	blx	r3

  now = sys_now();
 801f6f6:	f7fd fed9 	bl	801d4ac <sys_now>
 801f6fa:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801f6fc:	697b      	ldr	r3, [r7, #20]
 801f6fe:	681a      	ldr	r2, [r3, #0]
 801f700:	4b0f      	ldr	r3, [pc, #60]	; (801f740 <lwip_cyclic_timer+0x5c>)
 801f702:	681b      	ldr	r3, [r3, #0]
 801f704:	4413      	add	r3, r2
 801f706:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801f708:	68fa      	ldr	r2, [r7, #12]
 801f70a:	693b      	ldr	r3, [r7, #16]
 801f70c:	1ad3      	subs	r3, r2, r3
 801f70e:	0fdb      	lsrs	r3, r3, #31
 801f710:	f003 0301 	and.w	r3, r3, #1
 801f714:	b2db      	uxtb	r3, r3
 801f716:	2b00      	cmp	r3, #0
 801f718:	d009      	beq.n	801f72e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801f71a:	697b      	ldr	r3, [r7, #20]
 801f71c:	681a      	ldr	r2, [r3, #0]
 801f71e:	693b      	ldr	r3, [r7, #16]
 801f720:	4413      	add	r3, r2
 801f722:	687a      	ldr	r2, [r7, #4]
 801f724:	4907      	ldr	r1, [pc, #28]	; (801f744 <lwip_cyclic_timer+0x60>)
 801f726:	4618      	mov	r0, r3
 801f728:	f7ff ff6e 	bl	801f608 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801f72c:	e004      	b.n	801f738 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801f72e:	687a      	ldr	r2, [r7, #4]
 801f730:	4904      	ldr	r1, [pc, #16]	; (801f744 <lwip_cyclic_timer+0x60>)
 801f732:	68f8      	ldr	r0, [r7, #12]
 801f734:	f7ff ff68 	bl	801f608 <sys_timeout_abs>
}
 801f738:	bf00      	nop
 801f73a:	3718      	adds	r7, #24
 801f73c:	46bd      	mov	sp, r7
 801f73e:	bd80      	pop	{r7, pc}
 801f740:	20013e70 	.word	0x20013e70
 801f744:	0801f6e5 	.word	0x0801f6e5

0801f748 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801f748:	b580      	push	{r7, lr}
 801f74a:	b082      	sub	sp, #8
 801f74c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801f74e:	2300      	movs	r3, #0
 801f750:	607b      	str	r3, [r7, #4]
 801f752:	e00e      	b.n	801f772 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801f754:	4a0b      	ldr	r2, [pc, #44]	; (801f784 <sys_timeouts_init+0x3c>)
 801f756:	687b      	ldr	r3, [r7, #4]
 801f758:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801f75c:	687b      	ldr	r3, [r7, #4]
 801f75e:	00db      	lsls	r3, r3, #3
 801f760:	4a08      	ldr	r2, [pc, #32]	; (801f784 <sys_timeouts_init+0x3c>)
 801f762:	4413      	add	r3, r2
 801f764:	461a      	mov	r2, r3
 801f766:	4908      	ldr	r1, [pc, #32]	; (801f788 <sys_timeouts_init+0x40>)
 801f768:	f000 f810 	bl	801f78c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801f76c:	687b      	ldr	r3, [r7, #4]
 801f76e:	3301      	adds	r3, #1
 801f770:	607b      	str	r3, [r7, #4]
 801f772:	687b      	ldr	r3, [r7, #4]
 801f774:	2b01      	cmp	r3, #1
 801f776:	d9ed      	bls.n	801f754 <sys_timeouts_init+0xc>
  }
}
 801f778:	bf00      	nop
 801f77a:	bf00      	nop
 801f77c:	3708      	adds	r7, #8
 801f77e:	46bd      	mov	sp, r7
 801f780:	bd80      	pop	{r7, pc}
 801f782:	bf00      	nop
 801f784:	08029240 	.word	0x08029240
 801f788:	0801f6e5 	.word	0x0801f6e5

0801f78c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801f78c:	b580      	push	{r7, lr}
 801f78e:	b086      	sub	sp, #24
 801f790:	af00      	add	r7, sp, #0
 801f792:	60f8      	str	r0, [r7, #12]
 801f794:	60b9      	str	r1, [r7, #8]
 801f796:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801f798:	68fb      	ldr	r3, [r7, #12]
 801f79a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801f79e:	d306      	bcc.n	801f7ae <sys_timeout+0x22>
 801f7a0:	4b0a      	ldr	r3, [pc, #40]	; (801f7cc <sys_timeout+0x40>)
 801f7a2:	f240 1229 	movw	r2, #297	; 0x129
 801f7a6:	490a      	ldr	r1, [pc, #40]	; (801f7d0 <sys_timeout+0x44>)
 801f7a8:	480a      	ldr	r0, [pc, #40]	; (801f7d4 <sys_timeout+0x48>)
 801f7aa:	f003 f9a7 	bl	8022afc <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801f7ae:	f7fd fe7d 	bl	801d4ac <sys_now>
 801f7b2:	4602      	mov	r2, r0
 801f7b4:	68fb      	ldr	r3, [r7, #12]
 801f7b6:	4413      	add	r3, r2
 801f7b8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801f7ba:	687a      	ldr	r2, [r7, #4]
 801f7bc:	68b9      	ldr	r1, [r7, #8]
 801f7be:	6978      	ldr	r0, [r7, #20]
 801f7c0:	f7ff ff22 	bl	801f608 <sys_timeout_abs>
#endif
}
 801f7c4:	bf00      	nop
 801f7c6:	3718      	adds	r7, #24
 801f7c8:	46bd      	mov	sp, r7
 801f7ca:	bd80      	pop	{r7, pc}
 801f7cc:	08028288 	.word	0x08028288
 801f7d0:	08028324 	.word	0x08028324
 801f7d4:	080282fc 	.word	0x080282fc

0801f7d8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801f7d8:	b580      	push	{r7, lr}
 801f7da:	b084      	sub	sp, #16
 801f7dc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801f7de:	f7fd fe65 	bl	801d4ac <sys_now>
 801f7e2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801f7e4:	4b17      	ldr	r3, [pc, #92]	; (801f844 <sys_check_timeouts+0x6c>)
 801f7e6:	681b      	ldr	r3, [r3, #0]
 801f7e8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801f7ea:	68bb      	ldr	r3, [r7, #8]
 801f7ec:	2b00      	cmp	r3, #0
 801f7ee:	d022      	beq.n	801f836 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801f7f0:	68bb      	ldr	r3, [r7, #8]
 801f7f2:	685b      	ldr	r3, [r3, #4]
 801f7f4:	68fa      	ldr	r2, [r7, #12]
 801f7f6:	1ad3      	subs	r3, r2, r3
 801f7f8:	0fdb      	lsrs	r3, r3, #31
 801f7fa:	f003 0301 	and.w	r3, r3, #1
 801f7fe:	b2db      	uxtb	r3, r3
 801f800:	2b00      	cmp	r3, #0
 801f802:	d11a      	bne.n	801f83a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801f804:	68bb      	ldr	r3, [r7, #8]
 801f806:	681b      	ldr	r3, [r3, #0]
 801f808:	4a0e      	ldr	r2, [pc, #56]	; (801f844 <sys_check_timeouts+0x6c>)
 801f80a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801f80c:	68bb      	ldr	r3, [r7, #8]
 801f80e:	689b      	ldr	r3, [r3, #8]
 801f810:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801f812:	68bb      	ldr	r3, [r7, #8]
 801f814:	68db      	ldr	r3, [r3, #12]
 801f816:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801f818:	68bb      	ldr	r3, [r7, #8]
 801f81a:	685b      	ldr	r3, [r3, #4]
 801f81c:	4a0a      	ldr	r2, [pc, #40]	; (801f848 <sys_check_timeouts+0x70>)
 801f81e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801f820:	68b9      	ldr	r1, [r7, #8]
 801f822:	2003      	movs	r0, #3
 801f824:	f7fe fd22 	bl	801e26c <memp_free>
    if (handler != NULL) {
 801f828:	687b      	ldr	r3, [r7, #4]
 801f82a:	2b00      	cmp	r3, #0
 801f82c:	d0da      	beq.n	801f7e4 <sys_check_timeouts+0xc>
      handler(arg);
 801f82e:	687b      	ldr	r3, [r7, #4]
 801f830:	6838      	ldr	r0, [r7, #0]
 801f832:	4798      	blx	r3
  do {
 801f834:	e7d6      	b.n	801f7e4 <sys_check_timeouts+0xc>
      return;
 801f836:	bf00      	nop
 801f838:	e000      	b.n	801f83c <sys_check_timeouts+0x64>
      return;
 801f83a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801f83c:	3710      	adds	r7, #16
 801f83e:	46bd      	mov	sp, r7
 801f840:	bd80      	pop	{r7, pc}
 801f842:	bf00      	nop
 801f844:	20013e6c 	.word	0x20013e6c
 801f848:	20013e70 	.word	0x20013e70

0801f84c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801f84c:	b580      	push	{r7, lr}
 801f84e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801f850:	f003 f9f8 	bl	8022c44 <rand>
 801f854:	4603      	mov	r3, r0
 801f856:	b29b      	uxth	r3, r3
 801f858:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801f85c:	b29b      	uxth	r3, r3
 801f85e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801f862:	b29a      	uxth	r2, r3
 801f864:	4b01      	ldr	r3, [pc, #4]	; (801f86c <udp_init+0x20>)
 801f866:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801f868:	bf00      	nop
 801f86a:	bd80      	pop	{r7, pc}
 801f86c:	2000013c 	.word	0x2000013c

0801f870 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801f870:	b480      	push	{r7}
 801f872:	b083      	sub	sp, #12
 801f874:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801f876:	2300      	movs	r3, #0
 801f878:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801f87a:	4b17      	ldr	r3, [pc, #92]	; (801f8d8 <udp_new_port+0x68>)
 801f87c:	881b      	ldrh	r3, [r3, #0]
 801f87e:	1c5a      	adds	r2, r3, #1
 801f880:	b291      	uxth	r1, r2
 801f882:	4a15      	ldr	r2, [pc, #84]	; (801f8d8 <udp_new_port+0x68>)
 801f884:	8011      	strh	r1, [r2, #0]
 801f886:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801f88a:	4293      	cmp	r3, r2
 801f88c:	d103      	bne.n	801f896 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801f88e:	4b12      	ldr	r3, [pc, #72]	; (801f8d8 <udp_new_port+0x68>)
 801f890:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801f894:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f896:	4b11      	ldr	r3, [pc, #68]	; (801f8dc <udp_new_port+0x6c>)
 801f898:	681b      	ldr	r3, [r3, #0]
 801f89a:	603b      	str	r3, [r7, #0]
 801f89c:	e011      	b.n	801f8c2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801f89e:	683b      	ldr	r3, [r7, #0]
 801f8a0:	8a5a      	ldrh	r2, [r3, #18]
 801f8a2:	4b0d      	ldr	r3, [pc, #52]	; (801f8d8 <udp_new_port+0x68>)
 801f8a4:	881b      	ldrh	r3, [r3, #0]
 801f8a6:	429a      	cmp	r2, r3
 801f8a8:	d108      	bne.n	801f8bc <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801f8aa:	88fb      	ldrh	r3, [r7, #6]
 801f8ac:	3301      	adds	r3, #1
 801f8ae:	80fb      	strh	r3, [r7, #6]
 801f8b0:	88fb      	ldrh	r3, [r7, #6]
 801f8b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801f8b6:	d3e0      	bcc.n	801f87a <udp_new_port+0xa>
        return 0;
 801f8b8:	2300      	movs	r3, #0
 801f8ba:	e007      	b.n	801f8cc <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f8bc:	683b      	ldr	r3, [r7, #0]
 801f8be:	68db      	ldr	r3, [r3, #12]
 801f8c0:	603b      	str	r3, [r7, #0]
 801f8c2:	683b      	ldr	r3, [r7, #0]
 801f8c4:	2b00      	cmp	r3, #0
 801f8c6:	d1ea      	bne.n	801f89e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801f8c8:	4b03      	ldr	r3, [pc, #12]	; (801f8d8 <udp_new_port+0x68>)
 801f8ca:	881b      	ldrh	r3, [r3, #0]
}
 801f8cc:	4618      	mov	r0, r3
 801f8ce:	370c      	adds	r7, #12
 801f8d0:	46bd      	mov	sp, r7
 801f8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f8d6:	4770      	bx	lr
 801f8d8:	2000013c 	.word	0x2000013c
 801f8dc:	20013e74 	.word	0x20013e74

0801f8e0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801f8e0:	b580      	push	{r7, lr}
 801f8e2:	b084      	sub	sp, #16
 801f8e4:	af00      	add	r7, sp, #0
 801f8e6:	60f8      	str	r0, [r7, #12]
 801f8e8:	60b9      	str	r1, [r7, #8]
 801f8ea:	4613      	mov	r3, r2
 801f8ec:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801f8ee:	68fb      	ldr	r3, [r7, #12]
 801f8f0:	2b00      	cmp	r3, #0
 801f8f2:	d105      	bne.n	801f900 <udp_input_local_match+0x20>
 801f8f4:	4b27      	ldr	r3, [pc, #156]	; (801f994 <udp_input_local_match+0xb4>)
 801f8f6:	2287      	movs	r2, #135	; 0x87
 801f8f8:	4927      	ldr	r1, [pc, #156]	; (801f998 <udp_input_local_match+0xb8>)
 801f8fa:	4828      	ldr	r0, [pc, #160]	; (801f99c <udp_input_local_match+0xbc>)
 801f8fc:	f003 f8fe 	bl	8022afc <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801f900:	68bb      	ldr	r3, [r7, #8]
 801f902:	2b00      	cmp	r3, #0
 801f904:	d105      	bne.n	801f912 <udp_input_local_match+0x32>
 801f906:	4b23      	ldr	r3, [pc, #140]	; (801f994 <udp_input_local_match+0xb4>)
 801f908:	2288      	movs	r2, #136	; 0x88
 801f90a:	4925      	ldr	r1, [pc, #148]	; (801f9a0 <udp_input_local_match+0xc0>)
 801f90c:	4823      	ldr	r0, [pc, #140]	; (801f99c <udp_input_local_match+0xbc>)
 801f90e:	f003 f8f5 	bl	8022afc <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801f912:	68fb      	ldr	r3, [r7, #12]
 801f914:	7a1b      	ldrb	r3, [r3, #8]
 801f916:	2b00      	cmp	r3, #0
 801f918:	d00b      	beq.n	801f932 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801f91a:	68fb      	ldr	r3, [r7, #12]
 801f91c:	7a1a      	ldrb	r2, [r3, #8]
 801f91e:	4b21      	ldr	r3, [pc, #132]	; (801f9a4 <udp_input_local_match+0xc4>)
 801f920:	685b      	ldr	r3, [r3, #4]
 801f922:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801f926:	3301      	adds	r3, #1
 801f928:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801f92a:	429a      	cmp	r2, r3
 801f92c:	d001      	beq.n	801f932 <udp_input_local_match+0x52>
    return 0;
 801f92e:	2300      	movs	r3, #0
 801f930:	e02b      	b.n	801f98a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801f932:	79fb      	ldrb	r3, [r7, #7]
 801f934:	2b00      	cmp	r3, #0
 801f936:	d018      	beq.n	801f96a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801f938:	68fb      	ldr	r3, [r7, #12]
 801f93a:	2b00      	cmp	r3, #0
 801f93c:	d013      	beq.n	801f966 <udp_input_local_match+0x86>
 801f93e:	68fb      	ldr	r3, [r7, #12]
 801f940:	681b      	ldr	r3, [r3, #0]
 801f942:	2b00      	cmp	r3, #0
 801f944:	d00f      	beq.n	801f966 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801f946:	4b17      	ldr	r3, [pc, #92]	; (801f9a4 <udp_input_local_match+0xc4>)
 801f948:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801f94a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f94e:	d00a      	beq.n	801f966 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801f950:	68fb      	ldr	r3, [r7, #12]
 801f952:	681a      	ldr	r2, [r3, #0]
 801f954:	4b13      	ldr	r3, [pc, #76]	; (801f9a4 <udp_input_local_match+0xc4>)
 801f956:	695b      	ldr	r3, [r3, #20]
 801f958:	405a      	eors	r2, r3
 801f95a:	68bb      	ldr	r3, [r7, #8]
 801f95c:	3308      	adds	r3, #8
 801f95e:	681b      	ldr	r3, [r3, #0]
 801f960:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801f962:	2b00      	cmp	r3, #0
 801f964:	d110      	bne.n	801f988 <udp_input_local_match+0xa8>
          return 1;
 801f966:	2301      	movs	r3, #1
 801f968:	e00f      	b.n	801f98a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801f96a:	68fb      	ldr	r3, [r7, #12]
 801f96c:	2b00      	cmp	r3, #0
 801f96e:	d009      	beq.n	801f984 <udp_input_local_match+0xa4>
 801f970:	68fb      	ldr	r3, [r7, #12]
 801f972:	681b      	ldr	r3, [r3, #0]
 801f974:	2b00      	cmp	r3, #0
 801f976:	d005      	beq.n	801f984 <udp_input_local_match+0xa4>
 801f978:	68fb      	ldr	r3, [r7, #12]
 801f97a:	681a      	ldr	r2, [r3, #0]
 801f97c:	4b09      	ldr	r3, [pc, #36]	; (801f9a4 <udp_input_local_match+0xc4>)
 801f97e:	695b      	ldr	r3, [r3, #20]
 801f980:	429a      	cmp	r2, r3
 801f982:	d101      	bne.n	801f988 <udp_input_local_match+0xa8>
        return 1;
 801f984:	2301      	movs	r3, #1
 801f986:	e000      	b.n	801f98a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801f988:	2300      	movs	r3, #0
}
 801f98a:	4618      	mov	r0, r3
 801f98c:	3710      	adds	r7, #16
 801f98e:	46bd      	mov	sp, r7
 801f990:	bd80      	pop	{r7, pc}
 801f992:	bf00      	nop
 801f994:	08028370 	.word	0x08028370
 801f998:	080283a0 	.word	0x080283a0
 801f99c:	080283c4 	.word	0x080283c4
 801f9a0:	080283ec 	.word	0x080283ec
 801f9a4:	20010810 	.word	0x20010810

0801f9a8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801f9a8:	b590      	push	{r4, r7, lr}
 801f9aa:	b08d      	sub	sp, #52	; 0x34
 801f9ac:	af02      	add	r7, sp, #8
 801f9ae:	6078      	str	r0, [r7, #4]
 801f9b0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801f9b2:	2300      	movs	r3, #0
 801f9b4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801f9b6:	687b      	ldr	r3, [r7, #4]
 801f9b8:	2b00      	cmp	r3, #0
 801f9ba:	d105      	bne.n	801f9c8 <udp_input+0x20>
 801f9bc:	4b7c      	ldr	r3, [pc, #496]	; (801fbb0 <udp_input+0x208>)
 801f9be:	22cf      	movs	r2, #207	; 0xcf
 801f9c0:	497c      	ldr	r1, [pc, #496]	; (801fbb4 <udp_input+0x20c>)
 801f9c2:	487d      	ldr	r0, [pc, #500]	; (801fbb8 <udp_input+0x210>)
 801f9c4:	f003 f89a 	bl	8022afc <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801f9c8:	683b      	ldr	r3, [r7, #0]
 801f9ca:	2b00      	cmp	r3, #0
 801f9cc:	d105      	bne.n	801f9da <udp_input+0x32>
 801f9ce:	4b78      	ldr	r3, [pc, #480]	; (801fbb0 <udp_input+0x208>)
 801f9d0:	22d0      	movs	r2, #208	; 0xd0
 801f9d2:	497a      	ldr	r1, [pc, #488]	; (801fbbc <udp_input+0x214>)
 801f9d4:	4878      	ldr	r0, [pc, #480]	; (801fbb8 <udp_input+0x210>)
 801f9d6:	f003 f891 	bl	8022afc <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801f9da:	687b      	ldr	r3, [r7, #4]
 801f9dc:	895b      	ldrh	r3, [r3, #10]
 801f9de:	2b07      	cmp	r3, #7
 801f9e0:	d803      	bhi.n	801f9ea <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801f9e2:	6878      	ldr	r0, [r7, #4]
 801f9e4:	f7ff fb52 	bl	801f08c <pbuf_free>
    goto end;
 801f9e8:	e0de      	b.n	801fba8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801f9ea:	687b      	ldr	r3, [r7, #4]
 801f9ec:	685b      	ldr	r3, [r3, #4]
 801f9ee:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801f9f0:	4b73      	ldr	r3, [pc, #460]	; (801fbc0 <udp_input+0x218>)
 801f9f2:	695b      	ldr	r3, [r3, #20]
 801f9f4:	4a72      	ldr	r2, [pc, #456]	; (801fbc0 <udp_input+0x218>)
 801f9f6:	6812      	ldr	r2, [r2, #0]
 801f9f8:	4611      	mov	r1, r2
 801f9fa:	4618      	mov	r0, r3
 801f9fc:	f001 ff44 	bl	8021888 <ip4_addr_isbroadcast_u32>
 801fa00:	4603      	mov	r3, r0
 801fa02:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801fa04:	697b      	ldr	r3, [r7, #20]
 801fa06:	881b      	ldrh	r3, [r3, #0]
 801fa08:	b29b      	uxth	r3, r3
 801fa0a:	4618      	mov	r0, r3
 801fa0c:	f7fd ff62 	bl	801d8d4 <lwip_htons>
 801fa10:	4603      	mov	r3, r0
 801fa12:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801fa14:	697b      	ldr	r3, [r7, #20]
 801fa16:	885b      	ldrh	r3, [r3, #2]
 801fa18:	b29b      	uxth	r3, r3
 801fa1a:	4618      	mov	r0, r3
 801fa1c:	f7fd ff5a 	bl	801d8d4 <lwip_htons>
 801fa20:	4603      	mov	r3, r0
 801fa22:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801fa24:	2300      	movs	r3, #0
 801fa26:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801fa28:	2300      	movs	r3, #0
 801fa2a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801fa2c:	2300      	movs	r3, #0
 801fa2e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801fa30:	4b64      	ldr	r3, [pc, #400]	; (801fbc4 <udp_input+0x21c>)
 801fa32:	681b      	ldr	r3, [r3, #0]
 801fa34:	627b      	str	r3, [r7, #36]	; 0x24
 801fa36:	e054      	b.n	801fae2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801fa38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fa3a:	8a5b      	ldrh	r3, [r3, #18]
 801fa3c:	89fa      	ldrh	r2, [r7, #14]
 801fa3e:	429a      	cmp	r2, r3
 801fa40:	d14a      	bne.n	801fad8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801fa42:	7cfb      	ldrb	r3, [r7, #19]
 801fa44:	461a      	mov	r2, r3
 801fa46:	6839      	ldr	r1, [r7, #0]
 801fa48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801fa4a:	f7ff ff49 	bl	801f8e0 <udp_input_local_match>
 801fa4e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801fa50:	2b00      	cmp	r3, #0
 801fa52:	d041      	beq.n	801fad8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801fa54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fa56:	7c1b      	ldrb	r3, [r3, #16]
 801fa58:	f003 0304 	and.w	r3, r3, #4
 801fa5c:	2b00      	cmp	r3, #0
 801fa5e:	d11d      	bne.n	801fa9c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801fa60:	69fb      	ldr	r3, [r7, #28]
 801fa62:	2b00      	cmp	r3, #0
 801fa64:	d102      	bne.n	801fa6c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801fa66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fa68:	61fb      	str	r3, [r7, #28]
 801fa6a:	e017      	b.n	801fa9c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801fa6c:	7cfb      	ldrb	r3, [r7, #19]
 801fa6e:	2b00      	cmp	r3, #0
 801fa70:	d014      	beq.n	801fa9c <udp_input+0xf4>
 801fa72:	4b53      	ldr	r3, [pc, #332]	; (801fbc0 <udp_input+0x218>)
 801fa74:	695b      	ldr	r3, [r3, #20]
 801fa76:	f1b3 3fff 	cmp.w	r3, #4294967295
 801fa7a:	d10f      	bne.n	801fa9c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801fa7c:	69fb      	ldr	r3, [r7, #28]
 801fa7e:	681a      	ldr	r2, [r3, #0]
 801fa80:	683b      	ldr	r3, [r7, #0]
 801fa82:	3304      	adds	r3, #4
 801fa84:	681b      	ldr	r3, [r3, #0]
 801fa86:	429a      	cmp	r2, r3
 801fa88:	d008      	beq.n	801fa9c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801fa8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fa8c:	681a      	ldr	r2, [r3, #0]
 801fa8e:	683b      	ldr	r3, [r7, #0]
 801fa90:	3304      	adds	r3, #4
 801fa92:	681b      	ldr	r3, [r3, #0]
 801fa94:	429a      	cmp	r2, r3
 801fa96:	d101      	bne.n	801fa9c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801fa98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fa9a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801fa9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fa9e:	8a9b      	ldrh	r3, [r3, #20]
 801faa0:	8a3a      	ldrh	r2, [r7, #16]
 801faa2:	429a      	cmp	r2, r3
 801faa4:	d118      	bne.n	801fad8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801faa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801faa8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801faaa:	2b00      	cmp	r3, #0
 801faac:	d005      	beq.n	801faba <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801faae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fab0:	685a      	ldr	r2, [r3, #4]
 801fab2:	4b43      	ldr	r3, [pc, #268]	; (801fbc0 <udp_input+0x218>)
 801fab4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801fab6:	429a      	cmp	r2, r3
 801fab8:	d10e      	bne.n	801fad8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801faba:	6a3b      	ldr	r3, [r7, #32]
 801fabc:	2b00      	cmp	r3, #0
 801fabe:	d014      	beq.n	801faea <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801fac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fac2:	68da      	ldr	r2, [r3, #12]
 801fac4:	6a3b      	ldr	r3, [r7, #32]
 801fac6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801fac8:	4b3e      	ldr	r3, [pc, #248]	; (801fbc4 <udp_input+0x21c>)
 801faca:	681a      	ldr	r2, [r3, #0]
 801facc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801face:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801fad0:	4a3c      	ldr	r2, [pc, #240]	; (801fbc4 <udp_input+0x21c>)
 801fad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fad4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801fad6:	e008      	b.n	801faea <udp_input+0x142>
      }
    }

    prev = pcb;
 801fad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fada:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801fadc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fade:	68db      	ldr	r3, [r3, #12]
 801fae0:	627b      	str	r3, [r7, #36]	; 0x24
 801fae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fae4:	2b00      	cmp	r3, #0
 801fae6:	d1a7      	bne.n	801fa38 <udp_input+0x90>
 801fae8:	e000      	b.n	801faec <udp_input+0x144>
        break;
 801faea:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801faec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801faee:	2b00      	cmp	r3, #0
 801faf0:	d101      	bne.n	801faf6 <udp_input+0x14e>
    pcb = uncon_pcb;
 801faf2:	69fb      	ldr	r3, [r7, #28]
 801faf4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801faf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801faf8:	2b00      	cmp	r3, #0
 801fafa:	d002      	beq.n	801fb02 <udp_input+0x15a>
    for_us = 1;
 801fafc:	2301      	movs	r3, #1
 801fafe:	76fb      	strb	r3, [r7, #27]
 801fb00:	e00a      	b.n	801fb18 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801fb02:	683b      	ldr	r3, [r7, #0]
 801fb04:	3304      	adds	r3, #4
 801fb06:	681a      	ldr	r2, [r3, #0]
 801fb08:	4b2d      	ldr	r3, [pc, #180]	; (801fbc0 <udp_input+0x218>)
 801fb0a:	695b      	ldr	r3, [r3, #20]
 801fb0c:	429a      	cmp	r2, r3
 801fb0e:	bf0c      	ite	eq
 801fb10:	2301      	moveq	r3, #1
 801fb12:	2300      	movne	r3, #0
 801fb14:	b2db      	uxtb	r3, r3
 801fb16:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801fb18:	7efb      	ldrb	r3, [r7, #27]
 801fb1a:	2b00      	cmp	r3, #0
 801fb1c:	d041      	beq.n	801fba2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801fb1e:	2108      	movs	r1, #8
 801fb20:	6878      	ldr	r0, [r7, #4]
 801fb22:	f7ff fa2d 	bl	801ef80 <pbuf_remove_header>
 801fb26:	4603      	mov	r3, r0
 801fb28:	2b00      	cmp	r3, #0
 801fb2a:	d00a      	beq.n	801fb42 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801fb2c:	4b20      	ldr	r3, [pc, #128]	; (801fbb0 <udp_input+0x208>)
 801fb2e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801fb32:	4925      	ldr	r1, [pc, #148]	; (801fbc8 <udp_input+0x220>)
 801fb34:	4820      	ldr	r0, [pc, #128]	; (801fbb8 <udp_input+0x210>)
 801fb36:	f002 ffe1 	bl	8022afc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801fb3a:	6878      	ldr	r0, [r7, #4]
 801fb3c:	f7ff faa6 	bl	801f08c <pbuf_free>
      goto end;
 801fb40:	e032      	b.n	801fba8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801fb42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fb44:	2b00      	cmp	r3, #0
 801fb46:	d012      	beq.n	801fb6e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801fb48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fb4a:	699b      	ldr	r3, [r3, #24]
 801fb4c:	2b00      	cmp	r3, #0
 801fb4e:	d00a      	beq.n	801fb66 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801fb50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fb52:	699c      	ldr	r4, [r3, #24]
 801fb54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fb56:	69d8      	ldr	r0, [r3, #28]
 801fb58:	8a3b      	ldrh	r3, [r7, #16]
 801fb5a:	9300      	str	r3, [sp, #0]
 801fb5c:	4b1b      	ldr	r3, [pc, #108]	; (801fbcc <udp_input+0x224>)
 801fb5e:	687a      	ldr	r2, [r7, #4]
 801fb60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801fb62:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801fb64:	e021      	b.n	801fbaa <udp_input+0x202>
        pbuf_free(p);
 801fb66:	6878      	ldr	r0, [r7, #4]
 801fb68:	f7ff fa90 	bl	801f08c <pbuf_free>
        goto end;
 801fb6c:	e01c      	b.n	801fba8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801fb6e:	7cfb      	ldrb	r3, [r7, #19]
 801fb70:	2b00      	cmp	r3, #0
 801fb72:	d112      	bne.n	801fb9a <udp_input+0x1f2>
 801fb74:	4b12      	ldr	r3, [pc, #72]	; (801fbc0 <udp_input+0x218>)
 801fb76:	695b      	ldr	r3, [r3, #20]
 801fb78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801fb7c:	2be0      	cmp	r3, #224	; 0xe0
 801fb7e:	d00c      	beq.n	801fb9a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801fb80:	4b0f      	ldr	r3, [pc, #60]	; (801fbc0 <udp_input+0x218>)
 801fb82:	899b      	ldrh	r3, [r3, #12]
 801fb84:	3308      	adds	r3, #8
 801fb86:	b29b      	uxth	r3, r3
 801fb88:	b21b      	sxth	r3, r3
 801fb8a:	4619      	mov	r1, r3
 801fb8c:	6878      	ldr	r0, [r7, #4]
 801fb8e:	f7ff fa6a 	bl	801f066 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801fb92:	2103      	movs	r1, #3
 801fb94:	6878      	ldr	r0, [r7, #4]
 801fb96:	f001 fb53 	bl	8021240 <icmp_dest_unreach>
      pbuf_free(p);
 801fb9a:	6878      	ldr	r0, [r7, #4]
 801fb9c:	f7ff fa76 	bl	801f08c <pbuf_free>
  return;
 801fba0:	e003      	b.n	801fbaa <udp_input+0x202>
    pbuf_free(p);
 801fba2:	6878      	ldr	r0, [r7, #4]
 801fba4:	f7ff fa72 	bl	801f08c <pbuf_free>
  return;
 801fba8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801fbaa:	372c      	adds	r7, #44	; 0x2c
 801fbac:	46bd      	mov	sp, r7
 801fbae:	bd90      	pop	{r4, r7, pc}
 801fbb0:	08028370 	.word	0x08028370
 801fbb4:	08028414 	.word	0x08028414
 801fbb8:	080283c4 	.word	0x080283c4
 801fbbc:	0802842c 	.word	0x0802842c
 801fbc0:	20010810 	.word	0x20010810
 801fbc4:	20013e74 	.word	0x20013e74
 801fbc8:	08028448 	.word	0x08028448
 801fbcc:	20010820 	.word	0x20010820

0801fbd0 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 801fbd0:	b580      	push	{r7, lr}
 801fbd2:	b088      	sub	sp, #32
 801fbd4:	af02      	add	r7, sp, #8
 801fbd6:	60f8      	str	r0, [r7, #12]
 801fbd8:	60b9      	str	r1, [r7, #8]
 801fbda:	607a      	str	r2, [r7, #4]
 801fbdc:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801fbde:	68fb      	ldr	r3, [r7, #12]
 801fbe0:	2b00      	cmp	r3, #0
 801fbe2:	d109      	bne.n	801fbf8 <udp_sendto+0x28>
 801fbe4:	4b23      	ldr	r3, [pc, #140]	; (801fc74 <udp_sendto+0xa4>)
 801fbe6:	f44f 7206 	mov.w	r2, #536	; 0x218
 801fbea:	4923      	ldr	r1, [pc, #140]	; (801fc78 <udp_sendto+0xa8>)
 801fbec:	4823      	ldr	r0, [pc, #140]	; (801fc7c <udp_sendto+0xac>)
 801fbee:	f002 ff85 	bl	8022afc <iprintf>
 801fbf2:	f06f 030f 	mvn.w	r3, #15
 801fbf6:	e038      	b.n	801fc6a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801fbf8:	68bb      	ldr	r3, [r7, #8]
 801fbfa:	2b00      	cmp	r3, #0
 801fbfc:	d109      	bne.n	801fc12 <udp_sendto+0x42>
 801fbfe:	4b1d      	ldr	r3, [pc, #116]	; (801fc74 <udp_sendto+0xa4>)
 801fc00:	f240 2219 	movw	r2, #537	; 0x219
 801fc04:	491e      	ldr	r1, [pc, #120]	; (801fc80 <udp_sendto+0xb0>)
 801fc06:	481d      	ldr	r0, [pc, #116]	; (801fc7c <udp_sendto+0xac>)
 801fc08:	f002 ff78 	bl	8022afc <iprintf>
 801fc0c:	f06f 030f 	mvn.w	r3, #15
 801fc10:	e02b      	b.n	801fc6a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801fc12:	687b      	ldr	r3, [r7, #4]
 801fc14:	2b00      	cmp	r3, #0
 801fc16:	d109      	bne.n	801fc2c <udp_sendto+0x5c>
 801fc18:	4b16      	ldr	r3, [pc, #88]	; (801fc74 <udp_sendto+0xa4>)
 801fc1a:	f240 221a 	movw	r2, #538	; 0x21a
 801fc1e:	4919      	ldr	r1, [pc, #100]	; (801fc84 <udp_sendto+0xb4>)
 801fc20:	4816      	ldr	r0, [pc, #88]	; (801fc7c <udp_sendto+0xac>)
 801fc22:	f002 ff6b 	bl	8022afc <iprintf>
 801fc26:	f06f 030f 	mvn.w	r3, #15
 801fc2a:	e01e      	b.n	801fc6a <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801fc2c:	68fb      	ldr	r3, [r7, #12]
 801fc2e:	7a1b      	ldrb	r3, [r3, #8]
 801fc30:	2b00      	cmp	r3, #0
 801fc32:	d006      	beq.n	801fc42 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801fc34:	68fb      	ldr	r3, [r7, #12]
 801fc36:	7a1b      	ldrb	r3, [r3, #8]
 801fc38:	4618      	mov	r0, r3
 801fc3a:	f7fe fef5 	bl	801ea28 <netif_get_by_index>
 801fc3e:	6178      	str	r0, [r7, #20]
 801fc40:	e003      	b.n	801fc4a <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801fc42:	6878      	ldr	r0, [r7, #4]
 801fc44:	f001 fb86 	bl	8021354 <ip4_route>
 801fc48:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801fc4a:	697b      	ldr	r3, [r7, #20]
 801fc4c:	2b00      	cmp	r3, #0
 801fc4e:	d102      	bne.n	801fc56 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 801fc50:	f06f 0303 	mvn.w	r3, #3
 801fc54:	e009      	b.n	801fc6a <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801fc56:	887a      	ldrh	r2, [r7, #2]
 801fc58:	697b      	ldr	r3, [r7, #20]
 801fc5a:	9300      	str	r3, [sp, #0]
 801fc5c:	4613      	mov	r3, r2
 801fc5e:	687a      	ldr	r2, [r7, #4]
 801fc60:	68b9      	ldr	r1, [r7, #8]
 801fc62:	68f8      	ldr	r0, [r7, #12]
 801fc64:	f000 f810 	bl	801fc88 <udp_sendto_if>
 801fc68:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801fc6a:	4618      	mov	r0, r3
 801fc6c:	3718      	adds	r7, #24
 801fc6e:	46bd      	mov	sp, r7
 801fc70:	bd80      	pop	{r7, pc}
 801fc72:	bf00      	nop
 801fc74:	08028370 	.word	0x08028370
 801fc78:	08028494 	.word	0x08028494
 801fc7c:	080283c4 	.word	0x080283c4
 801fc80:	080284ac 	.word	0x080284ac
 801fc84:	080284c8 	.word	0x080284c8

0801fc88 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801fc88:	b580      	push	{r7, lr}
 801fc8a:	b088      	sub	sp, #32
 801fc8c:	af02      	add	r7, sp, #8
 801fc8e:	60f8      	str	r0, [r7, #12]
 801fc90:	60b9      	str	r1, [r7, #8]
 801fc92:	607a      	str	r2, [r7, #4]
 801fc94:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801fc96:	68fb      	ldr	r3, [r7, #12]
 801fc98:	2b00      	cmp	r3, #0
 801fc9a:	d109      	bne.n	801fcb0 <udp_sendto_if+0x28>
 801fc9c:	4b2e      	ldr	r3, [pc, #184]	; (801fd58 <udp_sendto_if+0xd0>)
 801fc9e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801fca2:	492e      	ldr	r1, [pc, #184]	; (801fd5c <udp_sendto_if+0xd4>)
 801fca4:	482e      	ldr	r0, [pc, #184]	; (801fd60 <udp_sendto_if+0xd8>)
 801fca6:	f002 ff29 	bl	8022afc <iprintf>
 801fcaa:	f06f 030f 	mvn.w	r3, #15
 801fcae:	e04f      	b.n	801fd50 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801fcb0:	68bb      	ldr	r3, [r7, #8]
 801fcb2:	2b00      	cmp	r3, #0
 801fcb4:	d109      	bne.n	801fcca <udp_sendto_if+0x42>
 801fcb6:	4b28      	ldr	r3, [pc, #160]	; (801fd58 <udp_sendto_if+0xd0>)
 801fcb8:	f240 2281 	movw	r2, #641	; 0x281
 801fcbc:	4929      	ldr	r1, [pc, #164]	; (801fd64 <udp_sendto_if+0xdc>)
 801fcbe:	4828      	ldr	r0, [pc, #160]	; (801fd60 <udp_sendto_if+0xd8>)
 801fcc0:	f002 ff1c 	bl	8022afc <iprintf>
 801fcc4:	f06f 030f 	mvn.w	r3, #15
 801fcc8:	e042      	b.n	801fd50 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801fcca:	687b      	ldr	r3, [r7, #4]
 801fccc:	2b00      	cmp	r3, #0
 801fcce:	d109      	bne.n	801fce4 <udp_sendto_if+0x5c>
 801fcd0:	4b21      	ldr	r3, [pc, #132]	; (801fd58 <udp_sendto_if+0xd0>)
 801fcd2:	f240 2282 	movw	r2, #642	; 0x282
 801fcd6:	4924      	ldr	r1, [pc, #144]	; (801fd68 <udp_sendto_if+0xe0>)
 801fcd8:	4821      	ldr	r0, [pc, #132]	; (801fd60 <udp_sendto_if+0xd8>)
 801fcda:	f002 ff0f 	bl	8022afc <iprintf>
 801fcde:	f06f 030f 	mvn.w	r3, #15
 801fce2:	e035      	b.n	801fd50 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801fce4:	6a3b      	ldr	r3, [r7, #32]
 801fce6:	2b00      	cmp	r3, #0
 801fce8:	d109      	bne.n	801fcfe <udp_sendto_if+0x76>
 801fcea:	4b1b      	ldr	r3, [pc, #108]	; (801fd58 <udp_sendto_if+0xd0>)
 801fcec:	f240 2283 	movw	r2, #643	; 0x283
 801fcf0:	491e      	ldr	r1, [pc, #120]	; (801fd6c <udp_sendto_if+0xe4>)
 801fcf2:	481b      	ldr	r0, [pc, #108]	; (801fd60 <udp_sendto_if+0xd8>)
 801fcf4:	f002 ff02 	bl	8022afc <iprintf>
 801fcf8:	f06f 030f 	mvn.w	r3, #15
 801fcfc:	e028      	b.n	801fd50 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801fcfe:	68fb      	ldr	r3, [r7, #12]
 801fd00:	2b00      	cmp	r3, #0
 801fd02:	d009      	beq.n	801fd18 <udp_sendto_if+0x90>
 801fd04:	68fb      	ldr	r3, [r7, #12]
 801fd06:	681b      	ldr	r3, [r3, #0]
 801fd08:	2b00      	cmp	r3, #0
 801fd0a:	d005      	beq.n	801fd18 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801fd0c:	68fb      	ldr	r3, [r7, #12]
 801fd0e:	681b      	ldr	r3, [r3, #0]
 801fd10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801fd14:	2be0      	cmp	r3, #224	; 0xe0
 801fd16:	d103      	bne.n	801fd20 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801fd18:	6a3b      	ldr	r3, [r7, #32]
 801fd1a:	3304      	adds	r3, #4
 801fd1c:	617b      	str	r3, [r7, #20]
 801fd1e:	e00b      	b.n	801fd38 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801fd20:	68fb      	ldr	r3, [r7, #12]
 801fd22:	681a      	ldr	r2, [r3, #0]
 801fd24:	6a3b      	ldr	r3, [r7, #32]
 801fd26:	3304      	adds	r3, #4
 801fd28:	681b      	ldr	r3, [r3, #0]
 801fd2a:	429a      	cmp	r2, r3
 801fd2c:	d002      	beq.n	801fd34 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801fd2e:	f06f 0303 	mvn.w	r3, #3
 801fd32:	e00d      	b.n	801fd50 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801fd34:	68fb      	ldr	r3, [r7, #12]
 801fd36:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801fd38:	887a      	ldrh	r2, [r7, #2]
 801fd3a:	697b      	ldr	r3, [r7, #20]
 801fd3c:	9301      	str	r3, [sp, #4]
 801fd3e:	6a3b      	ldr	r3, [r7, #32]
 801fd40:	9300      	str	r3, [sp, #0]
 801fd42:	4613      	mov	r3, r2
 801fd44:	687a      	ldr	r2, [r7, #4]
 801fd46:	68b9      	ldr	r1, [r7, #8]
 801fd48:	68f8      	ldr	r0, [r7, #12]
 801fd4a:	f000 f811 	bl	801fd70 <udp_sendto_if_src>
 801fd4e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801fd50:	4618      	mov	r0, r3
 801fd52:	3718      	adds	r7, #24
 801fd54:	46bd      	mov	sp, r7
 801fd56:	bd80      	pop	{r7, pc}
 801fd58:	08028370 	.word	0x08028370
 801fd5c:	080284e4 	.word	0x080284e4
 801fd60:	080283c4 	.word	0x080283c4
 801fd64:	08028500 	.word	0x08028500
 801fd68:	0802851c 	.word	0x0802851c
 801fd6c:	0802853c 	.word	0x0802853c

0801fd70 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801fd70:	b580      	push	{r7, lr}
 801fd72:	b08c      	sub	sp, #48	; 0x30
 801fd74:	af04      	add	r7, sp, #16
 801fd76:	60f8      	str	r0, [r7, #12]
 801fd78:	60b9      	str	r1, [r7, #8]
 801fd7a:	607a      	str	r2, [r7, #4]
 801fd7c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801fd7e:	68fb      	ldr	r3, [r7, #12]
 801fd80:	2b00      	cmp	r3, #0
 801fd82:	d109      	bne.n	801fd98 <udp_sendto_if_src+0x28>
 801fd84:	4b65      	ldr	r3, [pc, #404]	; (801ff1c <udp_sendto_if_src+0x1ac>)
 801fd86:	f240 22d1 	movw	r2, #721	; 0x2d1
 801fd8a:	4965      	ldr	r1, [pc, #404]	; (801ff20 <udp_sendto_if_src+0x1b0>)
 801fd8c:	4865      	ldr	r0, [pc, #404]	; (801ff24 <udp_sendto_if_src+0x1b4>)
 801fd8e:	f002 feb5 	bl	8022afc <iprintf>
 801fd92:	f06f 030f 	mvn.w	r3, #15
 801fd96:	e0bc      	b.n	801ff12 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801fd98:	68bb      	ldr	r3, [r7, #8]
 801fd9a:	2b00      	cmp	r3, #0
 801fd9c:	d109      	bne.n	801fdb2 <udp_sendto_if_src+0x42>
 801fd9e:	4b5f      	ldr	r3, [pc, #380]	; (801ff1c <udp_sendto_if_src+0x1ac>)
 801fda0:	f240 22d2 	movw	r2, #722	; 0x2d2
 801fda4:	4960      	ldr	r1, [pc, #384]	; (801ff28 <udp_sendto_if_src+0x1b8>)
 801fda6:	485f      	ldr	r0, [pc, #380]	; (801ff24 <udp_sendto_if_src+0x1b4>)
 801fda8:	f002 fea8 	bl	8022afc <iprintf>
 801fdac:	f06f 030f 	mvn.w	r3, #15
 801fdb0:	e0af      	b.n	801ff12 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801fdb2:	687b      	ldr	r3, [r7, #4]
 801fdb4:	2b00      	cmp	r3, #0
 801fdb6:	d109      	bne.n	801fdcc <udp_sendto_if_src+0x5c>
 801fdb8:	4b58      	ldr	r3, [pc, #352]	; (801ff1c <udp_sendto_if_src+0x1ac>)
 801fdba:	f240 22d3 	movw	r2, #723	; 0x2d3
 801fdbe:	495b      	ldr	r1, [pc, #364]	; (801ff2c <udp_sendto_if_src+0x1bc>)
 801fdc0:	4858      	ldr	r0, [pc, #352]	; (801ff24 <udp_sendto_if_src+0x1b4>)
 801fdc2:	f002 fe9b 	bl	8022afc <iprintf>
 801fdc6:	f06f 030f 	mvn.w	r3, #15
 801fdca:	e0a2      	b.n	801ff12 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801fdcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fdce:	2b00      	cmp	r3, #0
 801fdd0:	d109      	bne.n	801fde6 <udp_sendto_if_src+0x76>
 801fdd2:	4b52      	ldr	r3, [pc, #328]	; (801ff1c <udp_sendto_if_src+0x1ac>)
 801fdd4:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801fdd8:	4955      	ldr	r1, [pc, #340]	; (801ff30 <udp_sendto_if_src+0x1c0>)
 801fdda:	4852      	ldr	r0, [pc, #328]	; (801ff24 <udp_sendto_if_src+0x1b4>)
 801fddc:	f002 fe8e 	bl	8022afc <iprintf>
 801fde0:	f06f 030f 	mvn.w	r3, #15
 801fde4:	e095      	b.n	801ff12 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801fde6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fde8:	2b00      	cmp	r3, #0
 801fdea:	d109      	bne.n	801fe00 <udp_sendto_if_src+0x90>
 801fdec:	4b4b      	ldr	r3, [pc, #300]	; (801ff1c <udp_sendto_if_src+0x1ac>)
 801fdee:	f240 22d5 	movw	r2, #725	; 0x2d5
 801fdf2:	4950      	ldr	r1, [pc, #320]	; (801ff34 <udp_sendto_if_src+0x1c4>)
 801fdf4:	484b      	ldr	r0, [pc, #300]	; (801ff24 <udp_sendto_if_src+0x1b4>)
 801fdf6:	f002 fe81 	bl	8022afc <iprintf>
 801fdfa:	f06f 030f 	mvn.w	r3, #15
 801fdfe:	e088      	b.n	801ff12 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801fe00:	68fb      	ldr	r3, [r7, #12]
 801fe02:	8a5b      	ldrh	r3, [r3, #18]
 801fe04:	2b00      	cmp	r3, #0
 801fe06:	d10f      	bne.n	801fe28 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801fe08:	68f9      	ldr	r1, [r7, #12]
 801fe0a:	68fb      	ldr	r3, [r7, #12]
 801fe0c:	8a5b      	ldrh	r3, [r3, #18]
 801fe0e:	461a      	mov	r2, r3
 801fe10:	68f8      	ldr	r0, [r7, #12]
 801fe12:	f000 f893 	bl	801ff3c <udp_bind>
 801fe16:	4603      	mov	r3, r0
 801fe18:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801fe1a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801fe1e:	2b00      	cmp	r3, #0
 801fe20:	d002      	beq.n	801fe28 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801fe22:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801fe26:	e074      	b.n	801ff12 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801fe28:	68bb      	ldr	r3, [r7, #8]
 801fe2a:	891b      	ldrh	r3, [r3, #8]
 801fe2c:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801fe30:	4293      	cmp	r3, r2
 801fe32:	d902      	bls.n	801fe3a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801fe34:	f04f 33ff 	mov.w	r3, #4294967295
 801fe38:	e06b      	b.n	801ff12 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801fe3a:	2108      	movs	r1, #8
 801fe3c:	68b8      	ldr	r0, [r7, #8]
 801fe3e:	f7ff f88f 	bl	801ef60 <pbuf_add_header>
 801fe42:	4603      	mov	r3, r0
 801fe44:	2b00      	cmp	r3, #0
 801fe46:	d015      	beq.n	801fe74 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801fe48:	f44f 7220 	mov.w	r2, #640	; 0x280
 801fe4c:	2108      	movs	r1, #8
 801fe4e:	2022      	movs	r0, #34	; 0x22
 801fe50:	f7fe fe3a 	bl	801eac8 <pbuf_alloc>
 801fe54:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801fe56:	69fb      	ldr	r3, [r7, #28]
 801fe58:	2b00      	cmp	r3, #0
 801fe5a:	d102      	bne.n	801fe62 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801fe5c:	f04f 33ff 	mov.w	r3, #4294967295
 801fe60:	e057      	b.n	801ff12 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801fe62:	68bb      	ldr	r3, [r7, #8]
 801fe64:	891b      	ldrh	r3, [r3, #8]
 801fe66:	2b00      	cmp	r3, #0
 801fe68:	d006      	beq.n	801fe78 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801fe6a:	68b9      	ldr	r1, [r7, #8]
 801fe6c:	69f8      	ldr	r0, [r7, #28]
 801fe6e:	f7ff fa25 	bl	801f2bc <pbuf_chain>
 801fe72:	e001      	b.n	801fe78 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801fe74:	68bb      	ldr	r3, [r7, #8]
 801fe76:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801fe78:	69fb      	ldr	r3, [r7, #28]
 801fe7a:	895b      	ldrh	r3, [r3, #10]
 801fe7c:	2b07      	cmp	r3, #7
 801fe7e:	d806      	bhi.n	801fe8e <udp_sendto_if_src+0x11e>
 801fe80:	4b26      	ldr	r3, [pc, #152]	; (801ff1c <udp_sendto_if_src+0x1ac>)
 801fe82:	f240 320d 	movw	r2, #781	; 0x30d
 801fe86:	492c      	ldr	r1, [pc, #176]	; (801ff38 <udp_sendto_if_src+0x1c8>)
 801fe88:	4826      	ldr	r0, [pc, #152]	; (801ff24 <udp_sendto_if_src+0x1b4>)
 801fe8a:	f002 fe37 	bl	8022afc <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801fe8e:	69fb      	ldr	r3, [r7, #28]
 801fe90:	685b      	ldr	r3, [r3, #4]
 801fe92:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801fe94:	68fb      	ldr	r3, [r7, #12]
 801fe96:	8a5b      	ldrh	r3, [r3, #18]
 801fe98:	4618      	mov	r0, r3
 801fe9a:	f7fd fd1b 	bl	801d8d4 <lwip_htons>
 801fe9e:	4603      	mov	r3, r0
 801fea0:	461a      	mov	r2, r3
 801fea2:	697b      	ldr	r3, [r7, #20]
 801fea4:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801fea6:	887b      	ldrh	r3, [r7, #2]
 801fea8:	4618      	mov	r0, r3
 801feaa:	f7fd fd13 	bl	801d8d4 <lwip_htons>
 801feae:	4603      	mov	r3, r0
 801feb0:	461a      	mov	r2, r3
 801feb2:	697b      	ldr	r3, [r7, #20]
 801feb4:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801feb6:	697b      	ldr	r3, [r7, #20]
 801feb8:	2200      	movs	r2, #0
 801feba:	719a      	strb	r2, [r3, #6]
 801febc:	2200      	movs	r2, #0
 801febe:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801fec0:	69fb      	ldr	r3, [r7, #28]
 801fec2:	891b      	ldrh	r3, [r3, #8]
 801fec4:	4618      	mov	r0, r3
 801fec6:	f7fd fd05 	bl	801d8d4 <lwip_htons>
 801feca:	4603      	mov	r3, r0
 801fecc:	461a      	mov	r2, r3
 801fece:	697b      	ldr	r3, [r7, #20]
 801fed0:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801fed2:	2311      	movs	r3, #17
 801fed4:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801fed6:	68fb      	ldr	r3, [r7, #12]
 801fed8:	7adb      	ldrb	r3, [r3, #11]
 801feda:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801fedc:	68fb      	ldr	r3, [r7, #12]
 801fede:	7a9b      	ldrb	r3, [r3, #10]
 801fee0:	7cb9      	ldrb	r1, [r7, #18]
 801fee2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801fee4:	9202      	str	r2, [sp, #8]
 801fee6:	7cfa      	ldrb	r2, [r7, #19]
 801fee8:	9201      	str	r2, [sp, #4]
 801feea:	9300      	str	r3, [sp, #0]
 801feec:	460b      	mov	r3, r1
 801feee:	687a      	ldr	r2, [r7, #4]
 801fef0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801fef2:	69f8      	ldr	r0, [r7, #28]
 801fef4:	f001 fc0c 	bl	8021710 <ip4_output_if_src>
 801fef8:	4603      	mov	r3, r0
 801fefa:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801fefc:	69fa      	ldr	r2, [r7, #28]
 801fefe:	68bb      	ldr	r3, [r7, #8]
 801ff00:	429a      	cmp	r2, r3
 801ff02:	d004      	beq.n	801ff0e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801ff04:	69f8      	ldr	r0, [r7, #28]
 801ff06:	f7ff f8c1 	bl	801f08c <pbuf_free>
    q = NULL;
 801ff0a:	2300      	movs	r3, #0
 801ff0c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801ff0e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801ff12:	4618      	mov	r0, r3
 801ff14:	3720      	adds	r7, #32
 801ff16:	46bd      	mov	sp, r7
 801ff18:	bd80      	pop	{r7, pc}
 801ff1a:	bf00      	nop
 801ff1c:	08028370 	.word	0x08028370
 801ff20:	0802855c 	.word	0x0802855c
 801ff24:	080283c4 	.word	0x080283c4
 801ff28:	0802857c 	.word	0x0802857c
 801ff2c:	0802859c 	.word	0x0802859c
 801ff30:	080285c0 	.word	0x080285c0
 801ff34:	080285e4 	.word	0x080285e4
 801ff38:	08028608 	.word	0x08028608

0801ff3c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801ff3c:	b580      	push	{r7, lr}
 801ff3e:	b086      	sub	sp, #24
 801ff40:	af00      	add	r7, sp, #0
 801ff42:	60f8      	str	r0, [r7, #12]
 801ff44:	60b9      	str	r1, [r7, #8]
 801ff46:	4613      	mov	r3, r2
 801ff48:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801ff4a:	68bb      	ldr	r3, [r7, #8]
 801ff4c:	2b00      	cmp	r3, #0
 801ff4e:	d101      	bne.n	801ff54 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801ff50:	4b39      	ldr	r3, [pc, #228]	; (8020038 <udp_bind+0xfc>)
 801ff52:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801ff54:	68fb      	ldr	r3, [r7, #12]
 801ff56:	2b00      	cmp	r3, #0
 801ff58:	d109      	bne.n	801ff6e <udp_bind+0x32>
 801ff5a:	4b38      	ldr	r3, [pc, #224]	; (802003c <udp_bind+0x100>)
 801ff5c:	f240 32b7 	movw	r2, #951	; 0x3b7
 801ff60:	4937      	ldr	r1, [pc, #220]	; (8020040 <udp_bind+0x104>)
 801ff62:	4838      	ldr	r0, [pc, #224]	; (8020044 <udp_bind+0x108>)
 801ff64:	f002 fdca 	bl	8022afc <iprintf>
 801ff68:	f06f 030f 	mvn.w	r3, #15
 801ff6c:	e060      	b.n	8020030 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801ff6e:	2300      	movs	r3, #0
 801ff70:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801ff72:	4b35      	ldr	r3, [pc, #212]	; (8020048 <udp_bind+0x10c>)
 801ff74:	681b      	ldr	r3, [r3, #0]
 801ff76:	617b      	str	r3, [r7, #20]
 801ff78:	e009      	b.n	801ff8e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801ff7a:	68fa      	ldr	r2, [r7, #12]
 801ff7c:	697b      	ldr	r3, [r7, #20]
 801ff7e:	429a      	cmp	r2, r3
 801ff80:	d102      	bne.n	801ff88 <udp_bind+0x4c>
      rebind = 1;
 801ff82:	2301      	movs	r3, #1
 801ff84:	74fb      	strb	r3, [r7, #19]
      break;
 801ff86:	e005      	b.n	801ff94 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801ff88:	697b      	ldr	r3, [r7, #20]
 801ff8a:	68db      	ldr	r3, [r3, #12]
 801ff8c:	617b      	str	r3, [r7, #20]
 801ff8e:	697b      	ldr	r3, [r7, #20]
 801ff90:	2b00      	cmp	r3, #0
 801ff92:	d1f2      	bne.n	801ff7a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801ff94:	88fb      	ldrh	r3, [r7, #6]
 801ff96:	2b00      	cmp	r3, #0
 801ff98:	d109      	bne.n	801ffae <udp_bind+0x72>
    port = udp_new_port();
 801ff9a:	f7ff fc69 	bl	801f870 <udp_new_port>
 801ff9e:	4603      	mov	r3, r0
 801ffa0:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801ffa2:	88fb      	ldrh	r3, [r7, #6]
 801ffa4:	2b00      	cmp	r3, #0
 801ffa6:	d12c      	bne.n	8020002 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801ffa8:	f06f 0307 	mvn.w	r3, #7
 801ffac:	e040      	b.n	8020030 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801ffae:	4b26      	ldr	r3, [pc, #152]	; (8020048 <udp_bind+0x10c>)
 801ffb0:	681b      	ldr	r3, [r3, #0]
 801ffb2:	617b      	str	r3, [r7, #20]
 801ffb4:	e022      	b.n	801fffc <udp_bind+0xc0>
      if (pcb != ipcb) {
 801ffb6:	68fa      	ldr	r2, [r7, #12]
 801ffb8:	697b      	ldr	r3, [r7, #20]
 801ffba:	429a      	cmp	r2, r3
 801ffbc:	d01b      	beq.n	801fff6 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801ffbe:	697b      	ldr	r3, [r7, #20]
 801ffc0:	8a5b      	ldrh	r3, [r3, #18]
 801ffc2:	88fa      	ldrh	r2, [r7, #6]
 801ffc4:	429a      	cmp	r2, r3
 801ffc6:	d116      	bne.n	801fff6 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801ffc8:	697b      	ldr	r3, [r7, #20]
 801ffca:	681a      	ldr	r2, [r3, #0]
 801ffcc:	68bb      	ldr	r3, [r7, #8]
 801ffce:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801ffd0:	429a      	cmp	r2, r3
 801ffd2:	d00d      	beq.n	801fff0 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801ffd4:	68bb      	ldr	r3, [r7, #8]
 801ffd6:	2b00      	cmp	r3, #0
 801ffd8:	d00a      	beq.n	801fff0 <udp_bind+0xb4>
 801ffda:	68bb      	ldr	r3, [r7, #8]
 801ffdc:	681b      	ldr	r3, [r3, #0]
 801ffde:	2b00      	cmp	r3, #0
 801ffe0:	d006      	beq.n	801fff0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801ffe2:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801ffe4:	2b00      	cmp	r3, #0
 801ffe6:	d003      	beq.n	801fff0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801ffe8:	697b      	ldr	r3, [r7, #20]
 801ffea:	681b      	ldr	r3, [r3, #0]
 801ffec:	2b00      	cmp	r3, #0
 801ffee:	d102      	bne.n	801fff6 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801fff0:	f06f 0307 	mvn.w	r3, #7
 801fff4:	e01c      	b.n	8020030 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fff6:	697b      	ldr	r3, [r7, #20]
 801fff8:	68db      	ldr	r3, [r3, #12]
 801fffa:	617b      	str	r3, [r7, #20]
 801fffc:	697b      	ldr	r3, [r7, #20]
 801fffe:	2b00      	cmp	r3, #0
 8020000:	d1d9      	bne.n	801ffb6 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8020002:	68bb      	ldr	r3, [r7, #8]
 8020004:	2b00      	cmp	r3, #0
 8020006:	d002      	beq.n	802000e <udp_bind+0xd2>
 8020008:	68bb      	ldr	r3, [r7, #8]
 802000a:	681b      	ldr	r3, [r3, #0]
 802000c:	e000      	b.n	8020010 <udp_bind+0xd4>
 802000e:	2300      	movs	r3, #0
 8020010:	68fa      	ldr	r2, [r7, #12]
 8020012:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8020014:	68fb      	ldr	r3, [r7, #12]
 8020016:	88fa      	ldrh	r2, [r7, #6]
 8020018:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 802001a:	7cfb      	ldrb	r3, [r7, #19]
 802001c:	2b00      	cmp	r3, #0
 802001e:	d106      	bne.n	802002e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8020020:	4b09      	ldr	r3, [pc, #36]	; (8020048 <udp_bind+0x10c>)
 8020022:	681a      	ldr	r2, [r3, #0]
 8020024:	68fb      	ldr	r3, [r7, #12]
 8020026:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8020028:	4a07      	ldr	r2, [pc, #28]	; (8020048 <udp_bind+0x10c>)
 802002a:	68fb      	ldr	r3, [r7, #12]
 802002c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 802002e:	2300      	movs	r3, #0
}
 8020030:	4618      	mov	r0, r3
 8020032:	3718      	adds	r7, #24
 8020034:	46bd      	mov	sp, r7
 8020036:	bd80      	pop	{r7, pc}
 8020038:	08029250 	.word	0x08029250
 802003c:	08028370 	.word	0x08028370
 8020040:	08028638 	.word	0x08028638
 8020044:	080283c4 	.word	0x080283c4
 8020048:	20013e74 	.word	0x20013e74

0802004c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 802004c:	b580      	push	{r7, lr}
 802004e:	b084      	sub	sp, #16
 8020050:	af00      	add	r7, sp, #0
 8020052:	60f8      	str	r0, [r7, #12]
 8020054:	60b9      	str	r1, [r7, #8]
 8020056:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8020058:	68fb      	ldr	r3, [r7, #12]
 802005a:	2b00      	cmp	r3, #0
 802005c:	d107      	bne.n	802006e <udp_recv+0x22>
 802005e:	4b08      	ldr	r3, [pc, #32]	; (8020080 <udp_recv+0x34>)
 8020060:	f240 428a 	movw	r2, #1162	; 0x48a
 8020064:	4907      	ldr	r1, [pc, #28]	; (8020084 <udp_recv+0x38>)
 8020066:	4808      	ldr	r0, [pc, #32]	; (8020088 <udp_recv+0x3c>)
 8020068:	f002 fd48 	bl	8022afc <iprintf>
 802006c:	e005      	b.n	802007a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 802006e:	68fb      	ldr	r3, [r7, #12]
 8020070:	68ba      	ldr	r2, [r7, #8]
 8020072:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8020074:	68fb      	ldr	r3, [r7, #12]
 8020076:	687a      	ldr	r2, [r7, #4]
 8020078:	61da      	str	r2, [r3, #28]
}
 802007a:	3710      	adds	r7, #16
 802007c:	46bd      	mov	sp, r7
 802007e:	bd80      	pop	{r7, pc}
 8020080:	08028370 	.word	0x08028370
 8020084:	080286a4 	.word	0x080286a4
 8020088:	080283c4 	.word	0x080283c4

0802008c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 802008c:	b580      	push	{r7, lr}
 802008e:	b084      	sub	sp, #16
 8020090:	af00      	add	r7, sp, #0
 8020092:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8020094:	687b      	ldr	r3, [r7, #4]
 8020096:	2b00      	cmp	r3, #0
 8020098:	d107      	bne.n	80200aa <udp_remove+0x1e>
 802009a:	4b19      	ldr	r3, [pc, #100]	; (8020100 <udp_remove+0x74>)
 802009c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 80200a0:	4918      	ldr	r1, [pc, #96]	; (8020104 <udp_remove+0x78>)
 80200a2:	4819      	ldr	r0, [pc, #100]	; (8020108 <udp_remove+0x7c>)
 80200a4:	f002 fd2a 	bl	8022afc <iprintf>
 80200a8:	e026      	b.n	80200f8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80200aa:	4b18      	ldr	r3, [pc, #96]	; (802010c <udp_remove+0x80>)
 80200ac:	681b      	ldr	r3, [r3, #0]
 80200ae:	687a      	ldr	r2, [r7, #4]
 80200b0:	429a      	cmp	r2, r3
 80200b2:	d105      	bne.n	80200c0 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80200b4:	4b15      	ldr	r3, [pc, #84]	; (802010c <udp_remove+0x80>)
 80200b6:	681b      	ldr	r3, [r3, #0]
 80200b8:	68db      	ldr	r3, [r3, #12]
 80200ba:	4a14      	ldr	r2, [pc, #80]	; (802010c <udp_remove+0x80>)
 80200bc:	6013      	str	r3, [r2, #0]
 80200be:	e017      	b.n	80200f0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80200c0:	4b12      	ldr	r3, [pc, #72]	; (802010c <udp_remove+0x80>)
 80200c2:	681b      	ldr	r3, [r3, #0]
 80200c4:	60fb      	str	r3, [r7, #12]
 80200c6:	e010      	b.n	80200ea <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80200c8:	68fb      	ldr	r3, [r7, #12]
 80200ca:	68db      	ldr	r3, [r3, #12]
 80200cc:	2b00      	cmp	r3, #0
 80200ce:	d009      	beq.n	80200e4 <udp_remove+0x58>
 80200d0:	68fb      	ldr	r3, [r7, #12]
 80200d2:	68db      	ldr	r3, [r3, #12]
 80200d4:	687a      	ldr	r2, [r7, #4]
 80200d6:	429a      	cmp	r2, r3
 80200d8:	d104      	bne.n	80200e4 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80200da:	687b      	ldr	r3, [r7, #4]
 80200dc:	68da      	ldr	r2, [r3, #12]
 80200de:	68fb      	ldr	r3, [r7, #12]
 80200e0:	60da      	str	r2, [r3, #12]
        break;
 80200e2:	e005      	b.n	80200f0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80200e4:	68fb      	ldr	r3, [r7, #12]
 80200e6:	68db      	ldr	r3, [r3, #12]
 80200e8:	60fb      	str	r3, [r7, #12]
 80200ea:	68fb      	ldr	r3, [r7, #12]
 80200ec:	2b00      	cmp	r3, #0
 80200ee:	d1eb      	bne.n	80200c8 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80200f0:	6879      	ldr	r1, [r7, #4]
 80200f2:	2000      	movs	r0, #0
 80200f4:	f7fe f8ba 	bl	801e26c <memp_free>
}
 80200f8:	3710      	adds	r7, #16
 80200fa:	46bd      	mov	sp, r7
 80200fc:	bd80      	pop	{r7, pc}
 80200fe:	bf00      	nop
 8020100:	08028370 	.word	0x08028370
 8020104:	080286bc 	.word	0x080286bc
 8020108:	080283c4 	.word	0x080283c4
 802010c:	20013e74 	.word	0x20013e74

08020110 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8020110:	b580      	push	{r7, lr}
 8020112:	b082      	sub	sp, #8
 8020114:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8020116:	2000      	movs	r0, #0
 8020118:	f7fe f838 	bl	801e18c <memp_malloc>
 802011c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 802011e:	687b      	ldr	r3, [r7, #4]
 8020120:	2b00      	cmp	r3, #0
 8020122:	d007      	beq.n	8020134 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8020124:	2220      	movs	r2, #32
 8020126:	2100      	movs	r1, #0
 8020128:	6878      	ldr	r0, [r7, #4]
 802012a:	f002 fbff 	bl	802292c <memset>
    pcb->ttl = UDP_TTL;
 802012e:	687b      	ldr	r3, [r7, #4]
 8020130:	22ff      	movs	r2, #255	; 0xff
 8020132:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8020134:	687b      	ldr	r3, [r7, #4]
}
 8020136:	4618      	mov	r0, r3
 8020138:	3708      	adds	r7, #8
 802013a:	46bd      	mov	sp, r7
 802013c:	bd80      	pop	{r7, pc}
	...

08020140 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8020140:	b480      	push	{r7}
 8020142:	b085      	sub	sp, #20
 8020144:	af00      	add	r7, sp, #0
 8020146:	6078      	str	r0, [r7, #4]
 8020148:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 802014a:	687b      	ldr	r3, [r7, #4]
 802014c:	2b00      	cmp	r3, #0
 802014e:	d01e      	beq.n	802018e <udp_netif_ip_addr_changed+0x4e>
 8020150:	687b      	ldr	r3, [r7, #4]
 8020152:	681b      	ldr	r3, [r3, #0]
 8020154:	2b00      	cmp	r3, #0
 8020156:	d01a      	beq.n	802018e <udp_netif_ip_addr_changed+0x4e>
 8020158:	683b      	ldr	r3, [r7, #0]
 802015a:	2b00      	cmp	r3, #0
 802015c:	d017      	beq.n	802018e <udp_netif_ip_addr_changed+0x4e>
 802015e:	683b      	ldr	r3, [r7, #0]
 8020160:	681b      	ldr	r3, [r3, #0]
 8020162:	2b00      	cmp	r3, #0
 8020164:	d013      	beq.n	802018e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8020166:	4b0d      	ldr	r3, [pc, #52]	; (802019c <udp_netif_ip_addr_changed+0x5c>)
 8020168:	681b      	ldr	r3, [r3, #0]
 802016a:	60fb      	str	r3, [r7, #12]
 802016c:	e00c      	b.n	8020188 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 802016e:	68fb      	ldr	r3, [r7, #12]
 8020170:	681a      	ldr	r2, [r3, #0]
 8020172:	687b      	ldr	r3, [r7, #4]
 8020174:	681b      	ldr	r3, [r3, #0]
 8020176:	429a      	cmp	r2, r3
 8020178:	d103      	bne.n	8020182 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 802017a:	683b      	ldr	r3, [r7, #0]
 802017c:	681a      	ldr	r2, [r3, #0]
 802017e:	68fb      	ldr	r3, [r7, #12]
 8020180:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8020182:	68fb      	ldr	r3, [r7, #12]
 8020184:	68db      	ldr	r3, [r3, #12]
 8020186:	60fb      	str	r3, [r7, #12]
 8020188:	68fb      	ldr	r3, [r7, #12]
 802018a:	2b00      	cmp	r3, #0
 802018c:	d1ef      	bne.n	802016e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 802018e:	bf00      	nop
 8020190:	3714      	adds	r7, #20
 8020192:	46bd      	mov	sp, r7
 8020194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020198:	4770      	bx	lr
 802019a:	bf00      	nop
 802019c:	20013e74 	.word	0x20013e74

080201a0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80201a0:	b580      	push	{r7, lr}
 80201a2:	b082      	sub	sp, #8
 80201a4:	af00      	add	r7, sp, #0
 80201a6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80201a8:	4915      	ldr	r1, [pc, #84]	; (8020200 <etharp_free_entry+0x60>)
 80201aa:	687a      	ldr	r2, [r7, #4]
 80201ac:	4613      	mov	r3, r2
 80201ae:	005b      	lsls	r3, r3, #1
 80201b0:	4413      	add	r3, r2
 80201b2:	00db      	lsls	r3, r3, #3
 80201b4:	440b      	add	r3, r1
 80201b6:	681b      	ldr	r3, [r3, #0]
 80201b8:	2b00      	cmp	r3, #0
 80201ba:	d013      	beq.n	80201e4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80201bc:	4910      	ldr	r1, [pc, #64]	; (8020200 <etharp_free_entry+0x60>)
 80201be:	687a      	ldr	r2, [r7, #4]
 80201c0:	4613      	mov	r3, r2
 80201c2:	005b      	lsls	r3, r3, #1
 80201c4:	4413      	add	r3, r2
 80201c6:	00db      	lsls	r3, r3, #3
 80201c8:	440b      	add	r3, r1
 80201ca:	681b      	ldr	r3, [r3, #0]
 80201cc:	4618      	mov	r0, r3
 80201ce:	f7fe ff5d 	bl	801f08c <pbuf_free>
    arp_table[i].q = NULL;
 80201d2:	490b      	ldr	r1, [pc, #44]	; (8020200 <etharp_free_entry+0x60>)
 80201d4:	687a      	ldr	r2, [r7, #4]
 80201d6:	4613      	mov	r3, r2
 80201d8:	005b      	lsls	r3, r3, #1
 80201da:	4413      	add	r3, r2
 80201dc:	00db      	lsls	r3, r3, #3
 80201de:	440b      	add	r3, r1
 80201e0:	2200      	movs	r2, #0
 80201e2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80201e4:	4906      	ldr	r1, [pc, #24]	; (8020200 <etharp_free_entry+0x60>)
 80201e6:	687a      	ldr	r2, [r7, #4]
 80201e8:	4613      	mov	r3, r2
 80201ea:	005b      	lsls	r3, r3, #1
 80201ec:	4413      	add	r3, r2
 80201ee:	00db      	lsls	r3, r3, #3
 80201f0:	440b      	add	r3, r1
 80201f2:	3314      	adds	r3, #20
 80201f4:	2200      	movs	r2, #0
 80201f6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80201f8:	bf00      	nop
 80201fa:	3708      	adds	r7, #8
 80201fc:	46bd      	mov	sp, r7
 80201fe:	bd80      	pop	{r7, pc}
 8020200:	20013e78 	.word	0x20013e78

08020204 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8020204:	b580      	push	{r7, lr}
 8020206:	b082      	sub	sp, #8
 8020208:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 802020a:	2300      	movs	r3, #0
 802020c:	607b      	str	r3, [r7, #4]
 802020e:	e096      	b.n	802033e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8020210:	494f      	ldr	r1, [pc, #316]	; (8020350 <etharp_tmr+0x14c>)
 8020212:	687a      	ldr	r2, [r7, #4]
 8020214:	4613      	mov	r3, r2
 8020216:	005b      	lsls	r3, r3, #1
 8020218:	4413      	add	r3, r2
 802021a:	00db      	lsls	r3, r3, #3
 802021c:	440b      	add	r3, r1
 802021e:	3314      	adds	r3, #20
 8020220:	781b      	ldrb	r3, [r3, #0]
 8020222:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8020224:	78fb      	ldrb	r3, [r7, #3]
 8020226:	2b00      	cmp	r3, #0
 8020228:	f000 8086 	beq.w	8020338 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 802022c:	4948      	ldr	r1, [pc, #288]	; (8020350 <etharp_tmr+0x14c>)
 802022e:	687a      	ldr	r2, [r7, #4]
 8020230:	4613      	mov	r3, r2
 8020232:	005b      	lsls	r3, r3, #1
 8020234:	4413      	add	r3, r2
 8020236:	00db      	lsls	r3, r3, #3
 8020238:	440b      	add	r3, r1
 802023a:	3312      	adds	r3, #18
 802023c:	881b      	ldrh	r3, [r3, #0]
 802023e:	3301      	adds	r3, #1
 8020240:	b298      	uxth	r0, r3
 8020242:	4943      	ldr	r1, [pc, #268]	; (8020350 <etharp_tmr+0x14c>)
 8020244:	687a      	ldr	r2, [r7, #4]
 8020246:	4613      	mov	r3, r2
 8020248:	005b      	lsls	r3, r3, #1
 802024a:	4413      	add	r3, r2
 802024c:	00db      	lsls	r3, r3, #3
 802024e:	440b      	add	r3, r1
 8020250:	3312      	adds	r3, #18
 8020252:	4602      	mov	r2, r0
 8020254:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8020256:	493e      	ldr	r1, [pc, #248]	; (8020350 <etharp_tmr+0x14c>)
 8020258:	687a      	ldr	r2, [r7, #4]
 802025a:	4613      	mov	r3, r2
 802025c:	005b      	lsls	r3, r3, #1
 802025e:	4413      	add	r3, r2
 8020260:	00db      	lsls	r3, r3, #3
 8020262:	440b      	add	r3, r1
 8020264:	3312      	adds	r3, #18
 8020266:	881b      	ldrh	r3, [r3, #0]
 8020268:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 802026c:	d215      	bcs.n	802029a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 802026e:	4938      	ldr	r1, [pc, #224]	; (8020350 <etharp_tmr+0x14c>)
 8020270:	687a      	ldr	r2, [r7, #4]
 8020272:	4613      	mov	r3, r2
 8020274:	005b      	lsls	r3, r3, #1
 8020276:	4413      	add	r3, r2
 8020278:	00db      	lsls	r3, r3, #3
 802027a:	440b      	add	r3, r1
 802027c:	3314      	adds	r3, #20
 802027e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8020280:	2b01      	cmp	r3, #1
 8020282:	d10e      	bne.n	80202a2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8020284:	4932      	ldr	r1, [pc, #200]	; (8020350 <etharp_tmr+0x14c>)
 8020286:	687a      	ldr	r2, [r7, #4]
 8020288:	4613      	mov	r3, r2
 802028a:	005b      	lsls	r3, r3, #1
 802028c:	4413      	add	r3, r2
 802028e:	00db      	lsls	r3, r3, #3
 8020290:	440b      	add	r3, r1
 8020292:	3312      	adds	r3, #18
 8020294:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8020296:	2b04      	cmp	r3, #4
 8020298:	d903      	bls.n	80202a2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 802029a:	6878      	ldr	r0, [r7, #4]
 802029c:	f7ff ff80 	bl	80201a0 <etharp_free_entry>
 80202a0:	e04a      	b.n	8020338 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80202a2:	492b      	ldr	r1, [pc, #172]	; (8020350 <etharp_tmr+0x14c>)
 80202a4:	687a      	ldr	r2, [r7, #4]
 80202a6:	4613      	mov	r3, r2
 80202a8:	005b      	lsls	r3, r3, #1
 80202aa:	4413      	add	r3, r2
 80202ac:	00db      	lsls	r3, r3, #3
 80202ae:	440b      	add	r3, r1
 80202b0:	3314      	adds	r3, #20
 80202b2:	781b      	ldrb	r3, [r3, #0]
 80202b4:	2b03      	cmp	r3, #3
 80202b6:	d10a      	bne.n	80202ce <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80202b8:	4925      	ldr	r1, [pc, #148]	; (8020350 <etharp_tmr+0x14c>)
 80202ba:	687a      	ldr	r2, [r7, #4]
 80202bc:	4613      	mov	r3, r2
 80202be:	005b      	lsls	r3, r3, #1
 80202c0:	4413      	add	r3, r2
 80202c2:	00db      	lsls	r3, r3, #3
 80202c4:	440b      	add	r3, r1
 80202c6:	3314      	adds	r3, #20
 80202c8:	2204      	movs	r2, #4
 80202ca:	701a      	strb	r2, [r3, #0]
 80202cc:	e034      	b.n	8020338 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80202ce:	4920      	ldr	r1, [pc, #128]	; (8020350 <etharp_tmr+0x14c>)
 80202d0:	687a      	ldr	r2, [r7, #4]
 80202d2:	4613      	mov	r3, r2
 80202d4:	005b      	lsls	r3, r3, #1
 80202d6:	4413      	add	r3, r2
 80202d8:	00db      	lsls	r3, r3, #3
 80202da:	440b      	add	r3, r1
 80202dc:	3314      	adds	r3, #20
 80202de:	781b      	ldrb	r3, [r3, #0]
 80202e0:	2b04      	cmp	r3, #4
 80202e2:	d10a      	bne.n	80202fa <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80202e4:	491a      	ldr	r1, [pc, #104]	; (8020350 <etharp_tmr+0x14c>)
 80202e6:	687a      	ldr	r2, [r7, #4]
 80202e8:	4613      	mov	r3, r2
 80202ea:	005b      	lsls	r3, r3, #1
 80202ec:	4413      	add	r3, r2
 80202ee:	00db      	lsls	r3, r3, #3
 80202f0:	440b      	add	r3, r1
 80202f2:	3314      	adds	r3, #20
 80202f4:	2202      	movs	r2, #2
 80202f6:	701a      	strb	r2, [r3, #0]
 80202f8:	e01e      	b.n	8020338 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80202fa:	4915      	ldr	r1, [pc, #84]	; (8020350 <etharp_tmr+0x14c>)
 80202fc:	687a      	ldr	r2, [r7, #4]
 80202fe:	4613      	mov	r3, r2
 8020300:	005b      	lsls	r3, r3, #1
 8020302:	4413      	add	r3, r2
 8020304:	00db      	lsls	r3, r3, #3
 8020306:	440b      	add	r3, r1
 8020308:	3314      	adds	r3, #20
 802030a:	781b      	ldrb	r3, [r3, #0]
 802030c:	2b01      	cmp	r3, #1
 802030e:	d113      	bne.n	8020338 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8020310:	490f      	ldr	r1, [pc, #60]	; (8020350 <etharp_tmr+0x14c>)
 8020312:	687a      	ldr	r2, [r7, #4]
 8020314:	4613      	mov	r3, r2
 8020316:	005b      	lsls	r3, r3, #1
 8020318:	4413      	add	r3, r2
 802031a:	00db      	lsls	r3, r3, #3
 802031c:	440b      	add	r3, r1
 802031e:	3308      	adds	r3, #8
 8020320:	6818      	ldr	r0, [r3, #0]
 8020322:	687a      	ldr	r2, [r7, #4]
 8020324:	4613      	mov	r3, r2
 8020326:	005b      	lsls	r3, r3, #1
 8020328:	4413      	add	r3, r2
 802032a:	00db      	lsls	r3, r3, #3
 802032c:	4a08      	ldr	r2, [pc, #32]	; (8020350 <etharp_tmr+0x14c>)
 802032e:	4413      	add	r3, r2
 8020330:	3304      	adds	r3, #4
 8020332:	4619      	mov	r1, r3
 8020334:	f000 fe6e 	bl	8021014 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8020338:	687b      	ldr	r3, [r7, #4]
 802033a:	3301      	adds	r3, #1
 802033c:	607b      	str	r3, [r7, #4]
 802033e:	687b      	ldr	r3, [r7, #4]
 8020340:	2b31      	cmp	r3, #49	; 0x31
 8020342:	f77f af65 	ble.w	8020210 <etharp_tmr+0xc>
      }
    }
  }
}
 8020346:	bf00      	nop
 8020348:	bf00      	nop
 802034a:	3708      	adds	r7, #8
 802034c:	46bd      	mov	sp, r7
 802034e:	bd80      	pop	{r7, pc}
 8020350:	20013e78 	.word	0x20013e78

08020354 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8020354:	b580      	push	{r7, lr}
 8020356:	b08a      	sub	sp, #40	; 0x28
 8020358:	af00      	add	r7, sp, #0
 802035a:	60f8      	str	r0, [r7, #12]
 802035c:	460b      	mov	r3, r1
 802035e:	607a      	str	r2, [r7, #4]
 8020360:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8020362:	2332      	movs	r3, #50	; 0x32
 8020364:	84fb      	strh	r3, [r7, #38]	; 0x26
 8020366:	2332      	movs	r3, #50	; 0x32
 8020368:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 802036a:	2332      	movs	r3, #50	; 0x32
 802036c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 802036e:	2300      	movs	r3, #0
 8020370:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8020372:	2332      	movs	r3, #50	; 0x32
 8020374:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8020376:	2300      	movs	r3, #0
 8020378:	83bb      	strh	r3, [r7, #28]
 802037a:	2300      	movs	r3, #0
 802037c:	837b      	strh	r3, [r7, #26]
 802037e:	2300      	movs	r3, #0
 8020380:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8020382:	2300      	movs	r3, #0
 8020384:	843b      	strh	r3, [r7, #32]
 8020386:	e0ae      	b.n	80204e6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8020388:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802038c:	49a6      	ldr	r1, [pc, #664]	; (8020628 <etharp_find_entry+0x2d4>)
 802038e:	4613      	mov	r3, r2
 8020390:	005b      	lsls	r3, r3, #1
 8020392:	4413      	add	r3, r2
 8020394:	00db      	lsls	r3, r3, #3
 8020396:	440b      	add	r3, r1
 8020398:	3314      	adds	r3, #20
 802039a:	781b      	ldrb	r3, [r3, #0]
 802039c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 802039e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80203a2:	2b32      	cmp	r3, #50	; 0x32
 80203a4:	d105      	bne.n	80203b2 <etharp_find_entry+0x5e>
 80203a6:	7dfb      	ldrb	r3, [r7, #23]
 80203a8:	2b00      	cmp	r3, #0
 80203aa:	d102      	bne.n	80203b2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80203ac:	8c3b      	ldrh	r3, [r7, #32]
 80203ae:	847b      	strh	r3, [r7, #34]	; 0x22
 80203b0:	e095      	b.n	80204de <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80203b2:	7dfb      	ldrb	r3, [r7, #23]
 80203b4:	2b00      	cmp	r3, #0
 80203b6:	f000 8092 	beq.w	80204de <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80203ba:	7dfb      	ldrb	r3, [r7, #23]
 80203bc:	2b01      	cmp	r3, #1
 80203be:	d009      	beq.n	80203d4 <etharp_find_entry+0x80>
 80203c0:	7dfb      	ldrb	r3, [r7, #23]
 80203c2:	2b01      	cmp	r3, #1
 80203c4:	d806      	bhi.n	80203d4 <etharp_find_entry+0x80>
 80203c6:	4b99      	ldr	r3, [pc, #612]	; (802062c <etharp_find_entry+0x2d8>)
 80203c8:	f240 1223 	movw	r2, #291	; 0x123
 80203cc:	4998      	ldr	r1, [pc, #608]	; (8020630 <etharp_find_entry+0x2dc>)
 80203ce:	4899      	ldr	r0, [pc, #612]	; (8020634 <etharp_find_entry+0x2e0>)
 80203d0:	f002 fb94 	bl	8022afc <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80203d4:	68fb      	ldr	r3, [r7, #12]
 80203d6:	2b00      	cmp	r3, #0
 80203d8:	d020      	beq.n	802041c <etharp_find_entry+0xc8>
 80203da:	68fb      	ldr	r3, [r7, #12]
 80203dc:	6819      	ldr	r1, [r3, #0]
 80203de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80203e2:	4891      	ldr	r0, [pc, #580]	; (8020628 <etharp_find_entry+0x2d4>)
 80203e4:	4613      	mov	r3, r2
 80203e6:	005b      	lsls	r3, r3, #1
 80203e8:	4413      	add	r3, r2
 80203ea:	00db      	lsls	r3, r3, #3
 80203ec:	4403      	add	r3, r0
 80203ee:	3304      	adds	r3, #4
 80203f0:	681b      	ldr	r3, [r3, #0]
 80203f2:	4299      	cmp	r1, r3
 80203f4:	d112      	bne.n	802041c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80203f6:	687b      	ldr	r3, [r7, #4]
 80203f8:	2b00      	cmp	r3, #0
 80203fa:	d00c      	beq.n	8020416 <etharp_find_entry+0xc2>
 80203fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8020400:	4989      	ldr	r1, [pc, #548]	; (8020628 <etharp_find_entry+0x2d4>)
 8020402:	4613      	mov	r3, r2
 8020404:	005b      	lsls	r3, r3, #1
 8020406:	4413      	add	r3, r2
 8020408:	00db      	lsls	r3, r3, #3
 802040a:	440b      	add	r3, r1
 802040c:	3308      	adds	r3, #8
 802040e:	681b      	ldr	r3, [r3, #0]
 8020410:	687a      	ldr	r2, [r7, #4]
 8020412:	429a      	cmp	r2, r3
 8020414:	d102      	bne.n	802041c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8020416:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 802041a:	e100      	b.n	802061e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 802041c:	7dfb      	ldrb	r3, [r7, #23]
 802041e:	2b01      	cmp	r3, #1
 8020420:	d140      	bne.n	80204a4 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8020422:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8020426:	4980      	ldr	r1, [pc, #512]	; (8020628 <etharp_find_entry+0x2d4>)
 8020428:	4613      	mov	r3, r2
 802042a:	005b      	lsls	r3, r3, #1
 802042c:	4413      	add	r3, r2
 802042e:	00db      	lsls	r3, r3, #3
 8020430:	440b      	add	r3, r1
 8020432:	681b      	ldr	r3, [r3, #0]
 8020434:	2b00      	cmp	r3, #0
 8020436:	d01a      	beq.n	802046e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8020438:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802043c:	497a      	ldr	r1, [pc, #488]	; (8020628 <etharp_find_entry+0x2d4>)
 802043e:	4613      	mov	r3, r2
 8020440:	005b      	lsls	r3, r3, #1
 8020442:	4413      	add	r3, r2
 8020444:	00db      	lsls	r3, r3, #3
 8020446:	440b      	add	r3, r1
 8020448:	3312      	adds	r3, #18
 802044a:	881b      	ldrh	r3, [r3, #0]
 802044c:	8bba      	ldrh	r2, [r7, #28]
 802044e:	429a      	cmp	r2, r3
 8020450:	d845      	bhi.n	80204de <etharp_find_entry+0x18a>
            old_queue = i;
 8020452:	8c3b      	ldrh	r3, [r7, #32]
 8020454:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8020456:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802045a:	4973      	ldr	r1, [pc, #460]	; (8020628 <etharp_find_entry+0x2d4>)
 802045c:	4613      	mov	r3, r2
 802045e:	005b      	lsls	r3, r3, #1
 8020460:	4413      	add	r3, r2
 8020462:	00db      	lsls	r3, r3, #3
 8020464:	440b      	add	r3, r1
 8020466:	3312      	adds	r3, #18
 8020468:	881b      	ldrh	r3, [r3, #0]
 802046a:	83bb      	strh	r3, [r7, #28]
 802046c:	e037      	b.n	80204de <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 802046e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8020472:	496d      	ldr	r1, [pc, #436]	; (8020628 <etharp_find_entry+0x2d4>)
 8020474:	4613      	mov	r3, r2
 8020476:	005b      	lsls	r3, r3, #1
 8020478:	4413      	add	r3, r2
 802047a:	00db      	lsls	r3, r3, #3
 802047c:	440b      	add	r3, r1
 802047e:	3312      	adds	r3, #18
 8020480:	881b      	ldrh	r3, [r3, #0]
 8020482:	8b7a      	ldrh	r2, [r7, #26]
 8020484:	429a      	cmp	r2, r3
 8020486:	d82a      	bhi.n	80204de <etharp_find_entry+0x18a>
            old_pending = i;
 8020488:	8c3b      	ldrh	r3, [r7, #32]
 802048a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 802048c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8020490:	4965      	ldr	r1, [pc, #404]	; (8020628 <etharp_find_entry+0x2d4>)
 8020492:	4613      	mov	r3, r2
 8020494:	005b      	lsls	r3, r3, #1
 8020496:	4413      	add	r3, r2
 8020498:	00db      	lsls	r3, r3, #3
 802049a:	440b      	add	r3, r1
 802049c:	3312      	adds	r3, #18
 802049e:	881b      	ldrh	r3, [r3, #0]
 80204a0:	837b      	strh	r3, [r7, #26]
 80204a2:	e01c      	b.n	80204de <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80204a4:	7dfb      	ldrb	r3, [r7, #23]
 80204a6:	2b01      	cmp	r3, #1
 80204a8:	d919      	bls.n	80204de <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80204aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80204ae:	495e      	ldr	r1, [pc, #376]	; (8020628 <etharp_find_entry+0x2d4>)
 80204b0:	4613      	mov	r3, r2
 80204b2:	005b      	lsls	r3, r3, #1
 80204b4:	4413      	add	r3, r2
 80204b6:	00db      	lsls	r3, r3, #3
 80204b8:	440b      	add	r3, r1
 80204ba:	3312      	adds	r3, #18
 80204bc:	881b      	ldrh	r3, [r3, #0]
 80204be:	8b3a      	ldrh	r2, [r7, #24]
 80204c0:	429a      	cmp	r2, r3
 80204c2:	d80c      	bhi.n	80204de <etharp_find_entry+0x18a>
            old_stable = i;
 80204c4:	8c3b      	ldrh	r3, [r7, #32]
 80204c6:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80204c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80204cc:	4956      	ldr	r1, [pc, #344]	; (8020628 <etharp_find_entry+0x2d4>)
 80204ce:	4613      	mov	r3, r2
 80204d0:	005b      	lsls	r3, r3, #1
 80204d2:	4413      	add	r3, r2
 80204d4:	00db      	lsls	r3, r3, #3
 80204d6:	440b      	add	r3, r1
 80204d8:	3312      	adds	r3, #18
 80204da:	881b      	ldrh	r3, [r3, #0]
 80204dc:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80204de:	8c3b      	ldrh	r3, [r7, #32]
 80204e0:	3301      	adds	r3, #1
 80204e2:	b29b      	uxth	r3, r3
 80204e4:	843b      	strh	r3, [r7, #32]
 80204e6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80204ea:	2b31      	cmp	r3, #49	; 0x31
 80204ec:	f77f af4c 	ble.w	8020388 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80204f0:	7afb      	ldrb	r3, [r7, #11]
 80204f2:	f003 0302 	and.w	r3, r3, #2
 80204f6:	2b00      	cmp	r3, #0
 80204f8:	d108      	bne.n	802050c <etharp_find_entry+0x1b8>
 80204fa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80204fe:	2b32      	cmp	r3, #50	; 0x32
 8020500:	d107      	bne.n	8020512 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8020502:	7afb      	ldrb	r3, [r7, #11]
 8020504:	f003 0301 	and.w	r3, r3, #1
 8020508:	2b00      	cmp	r3, #0
 802050a:	d102      	bne.n	8020512 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 802050c:	f04f 33ff 	mov.w	r3, #4294967295
 8020510:	e085      	b.n	802061e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8020512:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8020516:	2b31      	cmp	r3, #49	; 0x31
 8020518:	dc02      	bgt.n	8020520 <etharp_find_entry+0x1cc>
    i = empty;
 802051a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802051c:	843b      	strh	r3, [r7, #32]
 802051e:	e039      	b.n	8020594 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8020520:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8020524:	2b31      	cmp	r3, #49	; 0x31
 8020526:	dc14      	bgt.n	8020552 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8020528:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802052a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 802052c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8020530:	493d      	ldr	r1, [pc, #244]	; (8020628 <etharp_find_entry+0x2d4>)
 8020532:	4613      	mov	r3, r2
 8020534:	005b      	lsls	r3, r3, #1
 8020536:	4413      	add	r3, r2
 8020538:	00db      	lsls	r3, r3, #3
 802053a:	440b      	add	r3, r1
 802053c:	681b      	ldr	r3, [r3, #0]
 802053e:	2b00      	cmp	r3, #0
 8020540:	d018      	beq.n	8020574 <etharp_find_entry+0x220>
 8020542:	4b3a      	ldr	r3, [pc, #232]	; (802062c <etharp_find_entry+0x2d8>)
 8020544:	f240 126d 	movw	r2, #365	; 0x16d
 8020548:	493b      	ldr	r1, [pc, #236]	; (8020638 <etharp_find_entry+0x2e4>)
 802054a:	483a      	ldr	r0, [pc, #232]	; (8020634 <etharp_find_entry+0x2e0>)
 802054c:	f002 fad6 	bl	8022afc <iprintf>
 8020550:	e010      	b.n	8020574 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8020552:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8020556:	2b31      	cmp	r3, #49	; 0x31
 8020558:	dc02      	bgt.n	8020560 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 802055a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802055c:	843b      	strh	r3, [r7, #32]
 802055e:	e009      	b.n	8020574 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8020560:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8020564:	2b31      	cmp	r3, #49	; 0x31
 8020566:	dc02      	bgt.n	802056e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8020568:	8bfb      	ldrh	r3, [r7, #30]
 802056a:	843b      	strh	r3, [r7, #32]
 802056c:	e002      	b.n	8020574 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 802056e:	f04f 33ff 	mov.w	r3, #4294967295
 8020572:	e054      	b.n	802061e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8020574:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8020578:	2b31      	cmp	r3, #49	; 0x31
 802057a:	dd06      	ble.n	802058a <etharp_find_entry+0x236>
 802057c:	4b2b      	ldr	r3, [pc, #172]	; (802062c <etharp_find_entry+0x2d8>)
 802057e:	f240 127f 	movw	r2, #383	; 0x17f
 8020582:	492e      	ldr	r1, [pc, #184]	; (802063c <etharp_find_entry+0x2e8>)
 8020584:	482b      	ldr	r0, [pc, #172]	; (8020634 <etharp_find_entry+0x2e0>)
 8020586:	f002 fab9 	bl	8022afc <iprintf>
    etharp_free_entry(i);
 802058a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 802058e:	4618      	mov	r0, r3
 8020590:	f7ff fe06 	bl	80201a0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8020594:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8020598:	2b31      	cmp	r3, #49	; 0x31
 802059a:	dd06      	ble.n	80205aa <etharp_find_entry+0x256>
 802059c:	4b23      	ldr	r3, [pc, #140]	; (802062c <etharp_find_entry+0x2d8>)
 802059e:	f240 1283 	movw	r2, #387	; 0x183
 80205a2:	4926      	ldr	r1, [pc, #152]	; (802063c <etharp_find_entry+0x2e8>)
 80205a4:	4823      	ldr	r0, [pc, #140]	; (8020634 <etharp_find_entry+0x2e0>)
 80205a6:	f002 faa9 	bl	8022afc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80205aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80205ae:	491e      	ldr	r1, [pc, #120]	; (8020628 <etharp_find_entry+0x2d4>)
 80205b0:	4613      	mov	r3, r2
 80205b2:	005b      	lsls	r3, r3, #1
 80205b4:	4413      	add	r3, r2
 80205b6:	00db      	lsls	r3, r3, #3
 80205b8:	440b      	add	r3, r1
 80205ba:	3314      	adds	r3, #20
 80205bc:	781b      	ldrb	r3, [r3, #0]
 80205be:	2b00      	cmp	r3, #0
 80205c0:	d006      	beq.n	80205d0 <etharp_find_entry+0x27c>
 80205c2:	4b1a      	ldr	r3, [pc, #104]	; (802062c <etharp_find_entry+0x2d8>)
 80205c4:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80205c8:	491d      	ldr	r1, [pc, #116]	; (8020640 <etharp_find_entry+0x2ec>)
 80205ca:	481a      	ldr	r0, [pc, #104]	; (8020634 <etharp_find_entry+0x2e0>)
 80205cc:	f002 fa96 	bl	8022afc <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80205d0:	68fb      	ldr	r3, [r7, #12]
 80205d2:	2b00      	cmp	r3, #0
 80205d4:	d00b      	beq.n	80205ee <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80205d6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80205da:	68fb      	ldr	r3, [r7, #12]
 80205dc:	6819      	ldr	r1, [r3, #0]
 80205de:	4812      	ldr	r0, [pc, #72]	; (8020628 <etharp_find_entry+0x2d4>)
 80205e0:	4613      	mov	r3, r2
 80205e2:	005b      	lsls	r3, r3, #1
 80205e4:	4413      	add	r3, r2
 80205e6:	00db      	lsls	r3, r3, #3
 80205e8:	4403      	add	r3, r0
 80205ea:	3304      	adds	r3, #4
 80205ec:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80205ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80205f2:	490d      	ldr	r1, [pc, #52]	; (8020628 <etharp_find_entry+0x2d4>)
 80205f4:	4613      	mov	r3, r2
 80205f6:	005b      	lsls	r3, r3, #1
 80205f8:	4413      	add	r3, r2
 80205fa:	00db      	lsls	r3, r3, #3
 80205fc:	440b      	add	r3, r1
 80205fe:	3312      	adds	r3, #18
 8020600:	2200      	movs	r2, #0
 8020602:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8020604:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8020608:	4907      	ldr	r1, [pc, #28]	; (8020628 <etharp_find_entry+0x2d4>)
 802060a:	4613      	mov	r3, r2
 802060c:	005b      	lsls	r3, r3, #1
 802060e:	4413      	add	r3, r2
 8020610:	00db      	lsls	r3, r3, #3
 8020612:	440b      	add	r3, r1
 8020614:	3308      	adds	r3, #8
 8020616:	687a      	ldr	r2, [r7, #4]
 8020618:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 802061a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 802061e:	4618      	mov	r0, r3
 8020620:	3728      	adds	r7, #40	; 0x28
 8020622:	46bd      	mov	sp, r7
 8020624:	bd80      	pop	{r7, pc}
 8020626:	bf00      	nop
 8020628:	20013e78 	.word	0x20013e78
 802062c:	080286d4 	.word	0x080286d4
 8020630:	0802870c 	.word	0x0802870c
 8020634:	0802874c 	.word	0x0802874c
 8020638:	08028774 	.word	0x08028774
 802063c:	0802878c 	.word	0x0802878c
 8020640:	080287a0 	.word	0x080287a0

08020644 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8020644:	b580      	push	{r7, lr}
 8020646:	b088      	sub	sp, #32
 8020648:	af02      	add	r7, sp, #8
 802064a:	60f8      	str	r0, [r7, #12]
 802064c:	60b9      	str	r1, [r7, #8]
 802064e:	607a      	str	r2, [r7, #4]
 8020650:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8020652:	68fb      	ldr	r3, [r7, #12]
 8020654:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8020658:	2b06      	cmp	r3, #6
 802065a:	d006      	beq.n	802066a <etharp_update_arp_entry+0x26>
 802065c:	4b48      	ldr	r3, [pc, #288]	; (8020780 <etharp_update_arp_entry+0x13c>)
 802065e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8020662:	4948      	ldr	r1, [pc, #288]	; (8020784 <etharp_update_arp_entry+0x140>)
 8020664:	4848      	ldr	r0, [pc, #288]	; (8020788 <etharp_update_arp_entry+0x144>)
 8020666:	f002 fa49 	bl	8022afc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 802066a:	68bb      	ldr	r3, [r7, #8]
 802066c:	2b00      	cmp	r3, #0
 802066e:	d012      	beq.n	8020696 <etharp_update_arp_entry+0x52>
 8020670:	68bb      	ldr	r3, [r7, #8]
 8020672:	681b      	ldr	r3, [r3, #0]
 8020674:	2b00      	cmp	r3, #0
 8020676:	d00e      	beq.n	8020696 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8020678:	68bb      	ldr	r3, [r7, #8]
 802067a:	681b      	ldr	r3, [r3, #0]
 802067c:	68f9      	ldr	r1, [r7, #12]
 802067e:	4618      	mov	r0, r3
 8020680:	f001 f902 	bl	8021888 <ip4_addr_isbroadcast_u32>
 8020684:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8020686:	2b00      	cmp	r3, #0
 8020688:	d105      	bne.n	8020696 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 802068a:	68bb      	ldr	r3, [r7, #8]
 802068c:	681b      	ldr	r3, [r3, #0]
 802068e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8020692:	2be0      	cmp	r3, #224	; 0xe0
 8020694:	d102      	bne.n	802069c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8020696:	f06f 030f 	mvn.w	r3, #15
 802069a:	e06c      	b.n	8020776 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 802069c:	78fb      	ldrb	r3, [r7, #3]
 802069e:	68fa      	ldr	r2, [r7, #12]
 80206a0:	4619      	mov	r1, r3
 80206a2:	68b8      	ldr	r0, [r7, #8]
 80206a4:	f7ff fe56 	bl	8020354 <etharp_find_entry>
 80206a8:	4603      	mov	r3, r0
 80206aa:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80206ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80206b0:	2b00      	cmp	r3, #0
 80206b2:	da02      	bge.n	80206ba <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80206b4:	8afb      	ldrh	r3, [r7, #22]
 80206b6:	b25b      	sxtb	r3, r3
 80206b8:	e05d      	b.n	8020776 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80206ba:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80206be:	4933      	ldr	r1, [pc, #204]	; (802078c <etharp_update_arp_entry+0x148>)
 80206c0:	4613      	mov	r3, r2
 80206c2:	005b      	lsls	r3, r3, #1
 80206c4:	4413      	add	r3, r2
 80206c6:	00db      	lsls	r3, r3, #3
 80206c8:	440b      	add	r3, r1
 80206ca:	3314      	adds	r3, #20
 80206cc:	2202      	movs	r2, #2
 80206ce:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80206d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80206d4:	492d      	ldr	r1, [pc, #180]	; (802078c <etharp_update_arp_entry+0x148>)
 80206d6:	4613      	mov	r3, r2
 80206d8:	005b      	lsls	r3, r3, #1
 80206da:	4413      	add	r3, r2
 80206dc:	00db      	lsls	r3, r3, #3
 80206de:	440b      	add	r3, r1
 80206e0:	3308      	adds	r3, #8
 80206e2:	68fa      	ldr	r2, [r7, #12]
 80206e4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80206e6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80206ea:	4613      	mov	r3, r2
 80206ec:	005b      	lsls	r3, r3, #1
 80206ee:	4413      	add	r3, r2
 80206f0:	00db      	lsls	r3, r3, #3
 80206f2:	3308      	adds	r3, #8
 80206f4:	4a25      	ldr	r2, [pc, #148]	; (802078c <etharp_update_arp_entry+0x148>)
 80206f6:	4413      	add	r3, r2
 80206f8:	3304      	adds	r3, #4
 80206fa:	2206      	movs	r2, #6
 80206fc:	6879      	ldr	r1, [r7, #4]
 80206fe:	4618      	mov	r0, r3
 8020700:	f002 f8ec 	bl	80228dc <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8020704:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8020708:	4920      	ldr	r1, [pc, #128]	; (802078c <etharp_update_arp_entry+0x148>)
 802070a:	4613      	mov	r3, r2
 802070c:	005b      	lsls	r3, r3, #1
 802070e:	4413      	add	r3, r2
 8020710:	00db      	lsls	r3, r3, #3
 8020712:	440b      	add	r3, r1
 8020714:	3312      	adds	r3, #18
 8020716:	2200      	movs	r2, #0
 8020718:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 802071a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 802071e:	491b      	ldr	r1, [pc, #108]	; (802078c <etharp_update_arp_entry+0x148>)
 8020720:	4613      	mov	r3, r2
 8020722:	005b      	lsls	r3, r3, #1
 8020724:	4413      	add	r3, r2
 8020726:	00db      	lsls	r3, r3, #3
 8020728:	440b      	add	r3, r1
 802072a:	681b      	ldr	r3, [r3, #0]
 802072c:	2b00      	cmp	r3, #0
 802072e:	d021      	beq.n	8020774 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8020730:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8020734:	4915      	ldr	r1, [pc, #84]	; (802078c <etharp_update_arp_entry+0x148>)
 8020736:	4613      	mov	r3, r2
 8020738:	005b      	lsls	r3, r3, #1
 802073a:	4413      	add	r3, r2
 802073c:	00db      	lsls	r3, r3, #3
 802073e:	440b      	add	r3, r1
 8020740:	681b      	ldr	r3, [r3, #0]
 8020742:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8020744:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8020748:	4910      	ldr	r1, [pc, #64]	; (802078c <etharp_update_arp_entry+0x148>)
 802074a:	4613      	mov	r3, r2
 802074c:	005b      	lsls	r3, r3, #1
 802074e:	4413      	add	r3, r2
 8020750:	00db      	lsls	r3, r3, #3
 8020752:	440b      	add	r3, r1
 8020754:	2200      	movs	r2, #0
 8020756:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8020758:	68fb      	ldr	r3, [r7, #12]
 802075a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 802075e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8020762:	9300      	str	r3, [sp, #0]
 8020764:	687b      	ldr	r3, [r7, #4]
 8020766:	6939      	ldr	r1, [r7, #16]
 8020768:	68f8      	ldr	r0, [r7, #12]
 802076a:	f002 f82b 	bl	80227c4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 802076e:	6938      	ldr	r0, [r7, #16]
 8020770:	f7fe fc8c 	bl	801f08c <pbuf_free>
  }
  return ERR_OK;
 8020774:	2300      	movs	r3, #0
}
 8020776:	4618      	mov	r0, r3
 8020778:	3718      	adds	r7, #24
 802077a:	46bd      	mov	sp, r7
 802077c:	bd80      	pop	{r7, pc}
 802077e:	bf00      	nop
 8020780:	080286d4 	.word	0x080286d4
 8020784:	080287cc 	.word	0x080287cc
 8020788:	0802874c 	.word	0x0802874c
 802078c:	20013e78 	.word	0x20013e78

08020790 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8020790:	b580      	push	{r7, lr}
 8020792:	b084      	sub	sp, #16
 8020794:	af00      	add	r7, sp, #0
 8020796:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8020798:	2300      	movs	r3, #0
 802079a:	60fb      	str	r3, [r7, #12]
 802079c:	e01e      	b.n	80207dc <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 802079e:	4913      	ldr	r1, [pc, #76]	; (80207ec <etharp_cleanup_netif+0x5c>)
 80207a0:	68fa      	ldr	r2, [r7, #12]
 80207a2:	4613      	mov	r3, r2
 80207a4:	005b      	lsls	r3, r3, #1
 80207a6:	4413      	add	r3, r2
 80207a8:	00db      	lsls	r3, r3, #3
 80207aa:	440b      	add	r3, r1
 80207ac:	3314      	adds	r3, #20
 80207ae:	781b      	ldrb	r3, [r3, #0]
 80207b0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80207b2:	7afb      	ldrb	r3, [r7, #11]
 80207b4:	2b00      	cmp	r3, #0
 80207b6:	d00e      	beq.n	80207d6 <etharp_cleanup_netif+0x46>
 80207b8:	490c      	ldr	r1, [pc, #48]	; (80207ec <etharp_cleanup_netif+0x5c>)
 80207ba:	68fa      	ldr	r2, [r7, #12]
 80207bc:	4613      	mov	r3, r2
 80207be:	005b      	lsls	r3, r3, #1
 80207c0:	4413      	add	r3, r2
 80207c2:	00db      	lsls	r3, r3, #3
 80207c4:	440b      	add	r3, r1
 80207c6:	3308      	adds	r3, #8
 80207c8:	681b      	ldr	r3, [r3, #0]
 80207ca:	687a      	ldr	r2, [r7, #4]
 80207cc:	429a      	cmp	r2, r3
 80207ce:	d102      	bne.n	80207d6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80207d0:	68f8      	ldr	r0, [r7, #12]
 80207d2:	f7ff fce5 	bl	80201a0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80207d6:	68fb      	ldr	r3, [r7, #12]
 80207d8:	3301      	adds	r3, #1
 80207da:	60fb      	str	r3, [r7, #12]
 80207dc:	68fb      	ldr	r3, [r7, #12]
 80207de:	2b31      	cmp	r3, #49	; 0x31
 80207e0:	dddd      	ble.n	802079e <etharp_cleanup_netif+0xe>
    }
  }
}
 80207e2:	bf00      	nop
 80207e4:	bf00      	nop
 80207e6:	3710      	adds	r7, #16
 80207e8:	46bd      	mov	sp, r7
 80207ea:	bd80      	pop	{r7, pc}
 80207ec:	20013e78 	.word	0x20013e78

080207f0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80207f0:	b5b0      	push	{r4, r5, r7, lr}
 80207f2:	b08a      	sub	sp, #40	; 0x28
 80207f4:	af04      	add	r7, sp, #16
 80207f6:	6078      	str	r0, [r7, #4]
 80207f8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80207fa:	683b      	ldr	r3, [r7, #0]
 80207fc:	2b00      	cmp	r3, #0
 80207fe:	d107      	bne.n	8020810 <etharp_input+0x20>
 8020800:	4b3d      	ldr	r3, [pc, #244]	; (80208f8 <etharp_input+0x108>)
 8020802:	f240 228a 	movw	r2, #650	; 0x28a
 8020806:	493d      	ldr	r1, [pc, #244]	; (80208fc <etharp_input+0x10c>)
 8020808:	483d      	ldr	r0, [pc, #244]	; (8020900 <etharp_input+0x110>)
 802080a:	f002 f977 	bl	8022afc <iprintf>
 802080e:	e06f      	b.n	80208f0 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8020810:	687b      	ldr	r3, [r7, #4]
 8020812:	685b      	ldr	r3, [r3, #4]
 8020814:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8020816:	693b      	ldr	r3, [r7, #16]
 8020818:	881b      	ldrh	r3, [r3, #0]
 802081a:	b29b      	uxth	r3, r3
 802081c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8020820:	d10c      	bne.n	802083c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8020822:	693b      	ldr	r3, [r7, #16]
 8020824:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8020826:	2b06      	cmp	r3, #6
 8020828:	d108      	bne.n	802083c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 802082a:	693b      	ldr	r3, [r7, #16]
 802082c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 802082e:	2b04      	cmp	r3, #4
 8020830:	d104      	bne.n	802083c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8020832:	693b      	ldr	r3, [r7, #16]
 8020834:	885b      	ldrh	r3, [r3, #2]
 8020836:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8020838:	2b08      	cmp	r3, #8
 802083a:	d003      	beq.n	8020844 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 802083c:	6878      	ldr	r0, [r7, #4]
 802083e:	f7fe fc25 	bl	801f08c <pbuf_free>
    return;
 8020842:	e055      	b.n	80208f0 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8020844:	693b      	ldr	r3, [r7, #16]
 8020846:	330e      	adds	r3, #14
 8020848:	681b      	ldr	r3, [r3, #0]
 802084a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 802084c:	693b      	ldr	r3, [r7, #16]
 802084e:	3318      	adds	r3, #24
 8020850:	681b      	ldr	r3, [r3, #0]
 8020852:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8020854:	683b      	ldr	r3, [r7, #0]
 8020856:	3304      	adds	r3, #4
 8020858:	681b      	ldr	r3, [r3, #0]
 802085a:	2b00      	cmp	r3, #0
 802085c:	d102      	bne.n	8020864 <etharp_input+0x74>
    for_us = 0;
 802085e:	2300      	movs	r3, #0
 8020860:	75fb      	strb	r3, [r7, #23]
 8020862:	e009      	b.n	8020878 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8020864:	68ba      	ldr	r2, [r7, #8]
 8020866:	683b      	ldr	r3, [r7, #0]
 8020868:	3304      	adds	r3, #4
 802086a:	681b      	ldr	r3, [r3, #0]
 802086c:	429a      	cmp	r2, r3
 802086e:	bf0c      	ite	eq
 8020870:	2301      	moveq	r3, #1
 8020872:	2300      	movne	r3, #0
 8020874:	b2db      	uxtb	r3, r3
 8020876:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8020878:	693b      	ldr	r3, [r7, #16]
 802087a:	f103 0208 	add.w	r2, r3, #8
 802087e:	7dfb      	ldrb	r3, [r7, #23]
 8020880:	2b00      	cmp	r3, #0
 8020882:	d001      	beq.n	8020888 <etharp_input+0x98>
 8020884:	2301      	movs	r3, #1
 8020886:	e000      	b.n	802088a <etharp_input+0x9a>
 8020888:	2302      	movs	r3, #2
 802088a:	f107 010c 	add.w	r1, r7, #12
 802088e:	6838      	ldr	r0, [r7, #0]
 8020890:	f7ff fed8 	bl	8020644 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8020894:	693b      	ldr	r3, [r7, #16]
 8020896:	88db      	ldrh	r3, [r3, #6]
 8020898:	b29b      	uxth	r3, r3
 802089a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802089e:	d003      	beq.n	80208a8 <etharp_input+0xb8>
 80208a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80208a4:	d01e      	beq.n	80208e4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80208a6:	e020      	b.n	80208ea <etharp_input+0xfa>
      if (for_us) {
 80208a8:	7dfb      	ldrb	r3, [r7, #23]
 80208aa:	2b00      	cmp	r3, #0
 80208ac:	d01c      	beq.n	80208e8 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80208ae:	683b      	ldr	r3, [r7, #0]
 80208b0:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80208b4:	693b      	ldr	r3, [r7, #16]
 80208b6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80208ba:	683b      	ldr	r3, [r7, #0]
 80208bc:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 80208c0:	683b      	ldr	r3, [r7, #0]
 80208c2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80208c4:	693a      	ldr	r2, [r7, #16]
 80208c6:	3208      	adds	r2, #8
        etharp_raw(netif,
 80208c8:	2102      	movs	r1, #2
 80208ca:	9103      	str	r1, [sp, #12]
 80208cc:	f107 010c 	add.w	r1, r7, #12
 80208d0:	9102      	str	r1, [sp, #8]
 80208d2:	9201      	str	r2, [sp, #4]
 80208d4:	9300      	str	r3, [sp, #0]
 80208d6:	462b      	mov	r3, r5
 80208d8:	4622      	mov	r2, r4
 80208da:	4601      	mov	r1, r0
 80208dc:	6838      	ldr	r0, [r7, #0]
 80208de:	f000 faeb 	bl	8020eb8 <etharp_raw>
      break;
 80208e2:	e001      	b.n	80208e8 <etharp_input+0xf8>
      break;
 80208e4:	bf00      	nop
 80208e6:	e000      	b.n	80208ea <etharp_input+0xfa>
      break;
 80208e8:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80208ea:	6878      	ldr	r0, [r7, #4]
 80208ec:	f7fe fbce 	bl	801f08c <pbuf_free>
}
 80208f0:	3718      	adds	r7, #24
 80208f2:	46bd      	mov	sp, r7
 80208f4:	bdb0      	pop	{r4, r5, r7, pc}
 80208f6:	bf00      	nop
 80208f8:	080286d4 	.word	0x080286d4
 80208fc:	08028824 	.word	0x08028824
 8020900:	0802874c 	.word	0x0802874c

08020904 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8020904:	b580      	push	{r7, lr}
 8020906:	b086      	sub	sp, #24
 8020908:	af02      	add	r7, sp, #8
 802090a:	60f8      	str	r0, [r7, #12]
 802090c:	60b9      	str	r1, [r7, #8]
 802090e:	4613      	mov	r3, r2
 8020910:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8020912:	79fa      	ldrb	r2, [r7, #7]
 8020914:	4944      	ldr	r1, [pc, #272]	; (8020a28 <etharp_output_to_arp_index+0x124>)
 8020916:	4613      	mov	r3, r2
 8020918:	005b      	lsls	r3, r3, #1
 802091a:	4413      	add	r3, r2
 802091c:	00db      	lsls	r3, r3, #3
 802091e:	440b      	add	r3, r1
 8020920:	3314      	adds	r3, #20
 8020922:	781b      	ldrb	r3, [r3, #0]
 8020924:	2b01      	cmp	r3, #1
 8020926:	d806      	bhi.n	8020936 <etharp_output_to_arp_index+0x32>
 8020928:	4b40      	ldr	r3, [pc, #256]	; (8020a2c <etharp_output_to_arp_index+0x128>)
 802092a:	f240 22ee 	movw	r2, #750	; 0x2ee
 802092e:	4940      	ldr	r1, [pc, #256]	; (8020a30 <etharp_output_to_arp_index+0x12c>)
 8020930:	4840      	ldr	r0, [pc, #256]	; (8020a34 <etharp_output_to_arp_index+0x130>)
 8020932:	f002 f8e3 	bl	8022afc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8020936:	79fa      	ldrb	r2, [r7, #7]
 8020938:	493b      	ldr	r1, [pc, #236]	; (8020a28 <etharp_output_to_arp_index+0x124>)
 802093a:	4613      	mov	r3, r2
 802093c:	005b      	lsls	r3, r3, #1
 802093e:	4413      	add	r3, r2
 8020940:	00db      	lsls	r3, r3, #3
 8020942:	440b      	add	r3, r1
 8020944:	3314      	adds	r3, #20
 8020946:	781b      	ldrb	r3, [r3, #0]
 8020948:	2b02      	cmp	r3, #2
 802094a:	d153      	bne.n	80209f4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 802094c:	79fa      	ldrb	r2, [r7, #7]
 802094e:	4936      	ldr	r1, [pc, #216]	; (8020a28 <etharp_output_to_arp_index+0x124>)
 8020950:	4613      	mov	r3, r2
 8020952:	005b      	lsls	r3, r3, #1
 8020954:	4413      	add	r3, r2
 8020956:	00db      	lsls	r3, r3, #3
 8020958:	440b      	add	r3, r1
 802095a:	3312      	adds	r3, #18
 802095c:	881b      	ldrh	r3, [r3, #0]
 802095e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8020962:	d919      	bls.n	8020998 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8020964:	79fa      	ldrb	r2, [r7, #7]
 8020966:	4613      	mov	r3, r2
 8020968:	005b      	lsls	r3, r3, #1
 802096a:	4413      	add	r3, r2
 802096c:	00db      	lsls	r3, r3, #3
 802096e:	4a2e      	ldr	r2, [pc, #184]	; (8020a28 <etharp_output_to_arp_index+0x124>)
 8020970:	4413      	add	r3, r2
 8020972:	3304      	adds	r3, #4
 8020974:	4619      	mov	r1, r3
 8020976:	68f8      	ldr	r0, [r7, #12]
 8020978:	f000 fb4c 	bl	8021014 <etharp_request>
 802097c:	4603      	mov	r3, r0
 802097e:	2b00      	cmp	r3, #0
 8020980:	d138      	bne.n	80209f4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8020982:	79fa      	ldrb	r2, [r7, #7]
 8020984:	4928      	ldr	r1, [pc, #160]	; (8020a28 <etharp_output_to_arp_index+0x124>)
 8020986:	4613      	mov	r3, r2
 8020988:	005b      	lsls	r3, r3, #1
 802098a:	4413      	add	r3, r2
 802098c:	00db      	lsls	r3, r3, #3
 802098e:	440b      	add	r3, r1
 8020990:	3314      	adds	r3, #20
 8020992:	2203      	movs	r2, #3
 8020994:	701a      	strb	r2, [r3, #0]
 8020996:	e02d      	b.n	80209f4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8020998:	79fa      	ldrb	r2, [r7, #7]
 802099a:	4923      	ldr	r1, [pc, #140]	; (8020a28 <etharp_output_to_arp_index+0x124>)
 802099c:	4613      	mov	r3, r2
 802099e:	005b      	lsls	r3, r3, #1
 80209a0:	4413      	add	r3, r2
 80209a2:	00db      	lsls	r3, r3, #3
 80209a4:	440b      	add	r3, r1
 80209a6:	3312      	adds	r3, #18
 80209a8:	881b      	ldrh	r3, [r3, #0]
 80209aa:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80209ae:	d321      	bcc.n	80209f4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80209b0:	79fa      	ldrb	r2, [r7, #7]
 80209b2:	4613      	mov	r3, r2
 80209b4:	005b      	lsls	r3, r3, #1
 80209b6:	4413      	add	r3, r2
 80209b8:	00db      	lsls	r3, r3, #3
 80209ba:	4a1b      	ldr	r2, [pc, #108]	; (8020a28 <etharp_output_to_arp_index+0x124>)
 80209bc:	4413      	add	r3, r2
 80209be:	1d19      	adds	r1, r3, #4
 80209c0:	79fa      	ldrb	r2, [r7, #7]
 80209c2:	4613      	mov	r3, r2
 80209c4:	005b      	lsls	r3, r3, #1
 80209c6:	4413      	add	r3, r2
 80209c8:	00db      	lsls	r3, r3, #3
 80209ca:	3308      	adds	r3, #8
 80209cc:	4a16      	ldr	r2, [pc, #88]	; (8020a28 <etharp_output_to_arp_index+0x124>)
 80209ce:	4413      	add	r3, r2
 80209d0:	3304      	adds	r3, #4
 80209d2:	461a      	mov	r2, r3
 80209d4:	68f8      	ldr	r0, [r7, #12]
 80209d6:	f000 fafb 	bl	8020fd0 <etharp_request_dst>
 80209da:	4603      	mov	r3, r0
 80209dc:	2b00      	cmp	r3, #0
 80209de:	d109      	bne.n	80209f4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80209e0:	79fa      	ldrb	r2, [r7, #7]
 80209e2:	4911      	ldr	r1, [pc, #68]	; (8020a28 <etharp_output_to_arp_index+0x124>)
 80209e4:	4613      	mov	r3, r2
 80209e6:	005b      	lsls	r3, r3, #1
 80209e8:	4413      	add	r3, r2
 80209ea:	00db      	lsls	r3, r3, #3
 80209ec:	440b      	add	r3, r1
 80209ee:	3314      	adds	r3, #20
 80209f0:	2203      	movs	r2, #3
 80209f2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80209f4:	68fb      	ldr	r3, [r7, #12]
 80209f6:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 80209fa:	79fa      	ldrb	r2, [r7, #7]
 80209fc:	4613      	mov	r3, r2
 80209fe:	005b      	lsls	r3, r3, #1
 8020a00:	4413      	add	r3, r2
 8020a02:	00db      	lsls	r3, r3, #3
 8020a04:	3308      	adds	r3, #8
 8020a06:	4a08      	ldr	r2, [pc, #32]	; (8020a28 <etharp_output_to_arp_index+0x124>)
 8020a08:	4413      	add	r3, r2
 8020a0a:	3304      	adds	r3, #4
 8020a0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8020a10:	9200      	str	r2, [sp, #0]
 8020a12:	460a      	mov	r2, r1
 8020a14:	68b9      	ldr	r1, [r7, #8]
 8020a16:	68f8      	ldr	r0, [r7, #12]
 8020a18:	f001 fed4 	bl	80227c4 <ethernet_output>
 8020a1c:	4603      	mov	r3, r0
}
 8020a1e:	4618      	mov	r0, r3
 8020a20:	3710      	adds	r7, #16
 8020a22:	46bd      	mov	sp, r7
 8020a24:	bd80      	pop	{r7, pc}
 8020a26:	bf00      	nop
 8020a28:	20013e78 	.word	0x20013e78
 8020a2c:	080286d4 	.word	0x080286d4
 8020a30:	08028844 	.word	0x08028844
 8020a34:	0802874c 	.word	0x0802874c

08020a38 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8020a38:	b580      	push	{r7, lr}
 8020a3a:	b08a      	sub	sp, #40	; 0x28
 8020a3c:	af02      	add	r7, sp, #8
 8020a3e:	60f8      	str	r0, [r7, #12]
 8020a40:	60b9      	str	r1, [r7, #8]
 8020a42:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8020a44:	687b      	ldr	r3, [r7, #4]
 8020a46:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8020a48:	68fb      	ldr	r3, [r7, #12]
 8020a4a:	2b00      	cmp	r3, #0
 8020a4c:	d106      	bne.n	8020a5c <etharp_output+0x24>
 8020a4e:	4b73      	ldr	r3, [pc, #460]	; (8020c1c <etharp_output+0x1e4>)
 8020a50:	f240 321e 	movw	r2, #798	; 0x31e
 8020a54:	4972      	ldr	r1, [pc, #456]	; (8020c20 <etharp_output+0x1e8>)
 8020a56:	4873      	ldr	r0, [pc, #460]	; (8020c24 <etharp_output+0x1ec>)
 8020a58:	f002 f850 	bl	8022afc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8020a5c:	68bb      	ldr	r3, [r7, #8]
 8020a5e:	2b00      	cmp	r3, #0
 8020a60:	d106      	bne.n	8020a70 <etharp_output+0x38>
 8020a62:	4b6e      	ldr	r3, [pc, #440]	; (8020c1c <etharp_output+0x1e4>)
 8020a64:	f240 321f 	movw	r2, #799	; 0x31f
 8020a68:	496f      	ldr	r1, [pc, #444]	; (8020c28 <etharp_output+0x1f0>)
 8020a6a:	486e      	ldr	r0, [pc, #440]	; (8020c24 <etharp_output+0x1ec>)
 8020a6c:	f002 f846 	bl	8022afc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8020a70:	687b      	ldr	r3, [r7, #4]
 8020a72:	2b00      	cmp	r3, #0
 8020a74:	d106      	bne.n	8020a84 <etharp_output+0x4c>
 8020a76:	4b69      	ldr	r3, [pc, #420]	; (8020c1c <etharp_output+0x1e4>)
 8020a78:	f44f 7248 	mov.w	r2, #800	; 0x320
 8020a7c:	496b      	ldr	r1, [pc, #428]	; (8020c2c <etharp_output+0x1f4>)
 8020a7e:	4869      	ldr	r0, [pc, #420]	; (8020c24 <etharp_output+0x1ec>)
 8020a80:	f002 f83c 	bl	8022afc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8020a84:	687b      	ldr	r3, [r7, #4]
 8020a86:	681b      	ldr	r3, [r3, #0]
 8020a88:	68f9      	ldr	r1, [r7, #12]
 8020a8a:	4618      	mov	r0, r3
 8020a8c:	f000 fefc 	bl	8021888 <ip4_addr_isbroadcast_u32>
 8020a90:	4603      	mov	r3, r0
 8020a92:	2b00      	cmp	r3, #0
 8020a94:	d002      	beq.n	8020a9c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8020a96:	4b66      	ldr	r3, [pc, #408]	; (8020c30 <etharp_output+0x1f8>)
 8020a98:	61fb      	str	r3, [r7, #28]
 8020a9a:	e0af      	b.n	8020bfc <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8020a9c:	687b      	ldr	r3, [r7, #4]
 8020a9e:	681b      	ldr	r3, [r3, #0]
 8020aa0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8020aa4:	2be0      	cmp	r3, #224	; 0xe0
 8020aa6:	d118      	bne.n	8020ada <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8020aa8:	2301      	movs	r3, #1
 8020aaa:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8020aac:	2300      	movs	r3, #0
 8020aae:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8020ab0:	235e      	movs	r3, #94	; 0x5e
 8020ab2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8020ab4:	687b      	ldr	r3, [r7, #4]
 8020ab6:	3301      	adds	r3, #1
 8020ab8:	781b      	ldrb	r3, [r3, #0]
 8020aba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8020abe:	b2db      	uxtb	r3, r3
 8020ac0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8020ac2:	687b      	ldr	r3, [r7, #4]
 8020ac4:	3302      	adds	r3, #2
 8020ac6:	781b      	ldrb	r3, [r3, #0]
 8020ac8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8020aca:	687b      	ldr	r3, [r7, #4]
 8020acc:	3303      	adds	r3, #3
 8020ace:	781b      	ldrb	r3, [r3, #0]
 8020ad0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8020ad2:	f107 0310 	add.w	r3, r7, #16
 8020ad6:	61fb      	str	r3, [r7, #28]
 8020ad8:	e090      	b.n	8020bfc <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8020ada:	687b      	ldr	r3, [r7, #4]
 8020adc:	681a      	ldr	r2, [r3, #0]
 8020ade:	68fb      	ldr	r3, [r7, #12]
 8020ae0:	3304      	adds	r3, #4
 8020ae2:	681b      	ldr	r3, [r3, #0]
 8020ae4:	405a      	eors	r2, r3
 8020ae6:	68fb      	ldr	r3, [r7, #12]
 8020ae8:	3308      	adds	r3, #8
 8020aea:	681b      	ldr	r3, [r3, #0]
 8020aec:	4013      	ands	r3, r2
 8020aee:	2b00      	cmp	r3, #0
 8020af0:	d012      	beq.n	8020b18 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8020af2:	687b      	ldr	r3, [r7, #4]
 8020af4:	681b      	ldr	r3, [r3, #0]
 8020af6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8020af8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8020afc:	4293      	cmp	r3, r2
 8020afe:	d00b      	beq.n	8020b18 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8020b00:	68fb      	ldr	r3, [r7, #12]
 8020b02:	330c      	adds	r3, #12
 8020b04:	681b      	ldr	r3, [r3, #0]
 8020b06:	2b00      	cmp	r3, #0
 8020b08:	d003      	beq.n	8020b12 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8020b0a:	68fb      	ldr	r3, [r7, #12]
 8020b0c:	330c      	adds	r3, #12
 8020b0e:	61bb      	str	r3, [r7, #24]
 8020b10:	e002      	b.n	8020b18 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8020b12:	f06f 0303 	mvn.w	r3, #3
 8020b16:	e07d      	b.n	8020c14 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8020b18:	4b46      	ldr	r3, [pc, #280]	; (8020c34 <etharp_output+0x1fc>)
 8020b1a:	781b      	ldrb	r3, [r3, #0]
 8020b1c:	4619      	mov	r1, r3
 8020b1e:	4a46      	ldr	r2, [pc, #280]	; (8020c38 <etharp_output+0x200>)
 8020b20:	460b      	mov	r3, r1
 8020b22:	005b      	lsls	r3, r3, #1
 8020b24:	440b      	add	r3, r1
 8020b26:	00db      	lsls	r3, r3, #3
 8020b28:	4413      	add	r3, r2
 8020b2a:	3314      	adds	r3, #20
 8020b2c:	781b      	ldrb	r3, [r3, #0]
 8020b2e:	2b01      	cmp	r3, #1
 8020b30:	d925      	bls.n	8020b7e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8020b32:	4b40      	ldr	r3, [pc, #256]	; (8020c34 <etharp_output+0x1fc>)
 8020b34:	781b      	ldrb	r3, [r3, #0]
 8020b36:	4619      	mov	r1, r3
 8020b38:	4a3f      	ldr	r2, [pc, #252]	; (8020c38 <etharp_output+0x200>)
 8020b3a:	460b      	mov	r3, r1
 8020b3c:	005b      	lsls	r3, r3, #1
 8020b3e:	440b      	add	r3, r1
 8020b40:	00db      	lsls	r3, r3, #3
 8020b42:	4413      	add	r3, r2
 8020b44:	3308      	adds	r3, #8
 8020b46:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8020b48:	68fa      	ldr	r2, [r7, #12]
 8020b4a:	429a      	cmp	r2, r3
 8020b4c:	d117      	bne.n	8020b7e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8020b4e:	69bb      	ldr	r3, [r7, #24]
 8020b50:	681a      	ldr	r2, [r3, #0]
 8020b52:	4b38      	ldr	r3, [pc, #224]	; (8020c34 <etharp_output+0x1fc>)
 8020b54:	781b      	ldrb	r3, [r3, #0]
 8020b56:	4618      	mov	r0, r3
 8020b58:	4937      	ldr	r1, [pc, #220]	; (8020c38 <etharp_output+0x200>)
 8020b5a:	4603      	mov	r3, r0
 8020b5c:	005b      	lsls	r3, r3, #1
 8020b5e:	4403      	add	r3, r0
 8020b60:	00db      	lsls	r3, r3, #3
 8020b62:	440b      	add	r3, r1
 8020b64:	3304      	adds	r3, #4
 8020b66:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8020b68:	429a      	cmp	r2, r3
 8020b6a:	d108      	bne.n	8020b7e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8020b6c:	4b31      	ldr	r3, [pc, #196]	; (8020c34 <etharp_output+0x1fc>)
 8020b6e:	781b      	ldrb	r3, [r3, #0]
 8020b70:	461a      	mov	r2, r3
 8020b72:	68b9      	ldr	r1, [r7, #8]
 8020b74:	68f8      	ldr	r0, [r7, #12]
 8020b76:	f7ff fec5 	bl	8020904 <etharp_output_to_arp_index>
 8020b7a:	4603      	mov	r3, r0
 8020b7c:	e04a      	b.n	8020c14 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8020b7e:	2300      	movs	r3, #0
 8020b80:	75fb      	strb	r3, [r7, #23]
 8020b82:	e031      	b.n	8020be8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8020b84:	7dfa      	ldrb	r2, [r7, #23]
 8020b86:	492c      	ldr	r1, [pc, #176]	; (8020c38 <etharp_output+0x200>)
 8020b88:	4613      	mov	r3, r2
 8020b8a:	005b      	lsls	r3, r3, #1
 8020b8c:	4413      	add	r3, r2
 8020b8e:	00db      	lsls	r3, r3, #3
 8020b90:	440b      	add	r3, r1
 8020b92:	3314      	adds	r3, #20
 8020b94:	781b      	ldrb	r3, [r3, #0]
 8020b96:	2b01      	cmp	r3, #1
 8020b98:	d923      	bls.n	8020be2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8020b9a:	7dfa      	ldrb	r2, [r7, #23]
 8020b9c:	4926      	ldr	r1, [pc, #152]	; (8020c38 <etharp_output+0x200>)
 8020b9e:	4613      	mov	r3, r2
 8020ba0:	005b      	lsls	r3, r3, #1
 8020ba2:	4413      	add	r3, r2
 8020ba4:	00db      	lsls	r3, r3, #3
 8020ba6:	440b      	add	r3, r1
 8020ba8:	3308      	adds	r3, #8
 8020baa:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8020bac:	68fa      	ldr	r2, [r7, #12]
 8020bae:	429a      	cmp	r2, r3
 8020bb0:	d117      	bne.n	8020be2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8020bb2:	69bb      	ldr	r3, [r7, #24]
 8020bb4:	6819      	ldr	r1, [r3, #0]
 8020bb6:	7dfa      	ldrb	r2, [r7, #23]
 8020bb8:	481f      	ldr	r0, [pc, #124]	; (8020c38 <etharp_output+0x200>)
 8020bba:	4613      	mov	r3, r2
 8020bbc:	005b      	lsls	r3, r3, #1
 8020bbe:	4413      	add	r3, r2
 8020bc0:	00db      	lsls	r3, r3, #3
 8020bc2:	4403      	add	r3, r0
 8020bc4:	3304      	adds	r3, #4
 8020bc6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8020bc8:	4299      	cmp	r1, r3
 8020bca:	d10a      	bne.n	8020be2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8020bcc:	4a19      	ldr	r2, [pc, #100]	; (8020c34 <etharp_output+0x1fc>)
 8020bce:	7dfb      	ldrb	r3, [r7, #23]
 8020bd0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8020bd2:	7dfb      	ldrb	r3, [r7, #23]
 8020bd4:	461a      	mov	r2, r3
 8020bd6:	68b9      	ldr	r1, [r7, #8]
 8020bd8:	68f8      	ldr	r0, [r7, #12]
 8020bda:	f7ff fe93 	bl	8020904 <etharp_output_to_arp_index>
 8020bde:	4603      	mov	r3, r0
 8020be0:	e018      	b.n	8020c14 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8020be2:	7dfb      	ldrb	r3, [r7, #23]
 8020be4:	3301      	adds	r3, #1
 8020be6:	75fb      	strb	r3, [r7, #23]
 8020be8:	7dfb      	ldrb	r3, [r7, #23]
 8020bea:	2b31      	cmp	r3, #49	; 0x31
 8020bec:	d9ca      	bls.n	8020b84 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8020bee:	68ba      	ldr	r2, [r7, #8]
 8020bf0:	69b9      	ldr	r1, [r7, #24]
 8020bf2:	68f8      	ldr	r0, [r7, #12]
 8020bf4:	f000 f822 	bl	8020c3c <etharp_query>
 8020bf8:	4603      	mov	r3, r0
 8020bfa:	e00b      	b.n	8020c14 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8020bfc:	68fb      	ldr	r3, [r7, #12]
 8020bfe:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8020c02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8020c06:	9300      	str	r3, [sp, #0]
 8020c08:	69fb      	ldr	r3, [r7, #28]
 8020c0a:	68b9      	ldr	r1, [r7, #8]
 8020c0c:	68f8      	ldr	r0, [r7, #12]
 8020c0e:	f001 fdd9 	bl	80227c4 <ethernet_output>
 8020c12:	4603      	mov	r3, r0
}
 8020c14:	4618      	mov	r0, r3
 8020c16:	3720      	adds	r7, #32
 8020c18:	46bd      	mov	sp, r7
 8020c1a:	bd80      	pop	{r7, pc}
 8020c1c:	080286d4 	.word	0x080286d4
 8020c20:	08028824 	.word	0x08028824
 8020c24:	0802874c 	.word	0x0802874c
 8020c28:	08028874 	.word	0x08028874
 8020c2c:	08028814 	.word	0x08028814
 8020c30:	08029254 	.word	0x08029254
 8020c34:	20014328 	.word	0x20014328
 8020c38:	20013e78 	.word	0x20013e78

08020c3c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8020c3c:	b580      	push	{r7, lr}
 8020c3e:	b08c      	sub	sp, #48	; 0x30
 8020c40:	af02      	add	r7, sp, #8
 8020c42:	60f8      	str	r0, [r7, #12]
 8020c44:	60b9      	str	r1, [r7, #8]
 8020c46:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8020c48:	68fb      	ldr	r3, [r7, #12]
 8020c4a:	332a      	adds	r3, #42	; 0x2a
 8020c4c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8020c4e:	23ff      	movs	r3, #255	; 0xff
 8020c50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8020c54:	2300      	movs	r3, #0
 8020c56:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8020c58:	68bb      	ldr	r3, [r7, #8]
 8020c5a:	681b      	ldr	r3, [r3, #0]
 8020c5c:	68f9      	ldr	r1, [r7, #12]
 8020c5e:	4618      	mov	r0, r3
 8020c60:	f000 fe12 	bl	8021888 <ip4_addr_isbroadcast_u32>
 8020c64:	4603      	mov	r3, r0
 8020c66:	2b00      	cmp	r3, #0
 8020c68:	d10c      	bne.n	8020c84 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8020c6a:	68bb      	ldr	r3, [r7, #8]
 8020c6c:	681b      	ldr	r3, [r3, #0]
 8020c6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8020c72:	2be0      	cmp	r3, #224	; 0xe0
 8020c74:	d006      	beq.n	8020c84 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8020c76:	68bb      	ldr	r3, [r7, #8]
 8020c78:	2b00      	cmp	r3, #0
 8020c7a:	d003      	beq.n	8020c84 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8020c7c:	68bb      	ldr	r3, [r7, #8]
 8020c7e:	681b      	ldr	r3, [r3, #0]
 8020c80:	2b00      	cmp	r3, #0
 8020c82:	d102      	bne.n	8020c8a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8020c84:	f06f 030f 	mvn.w	r3, #15
 8020c88:	e101      	b.n	8020e8e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8020c8a:	68fa      	ldr	r2, [r7, #12]
 8020c8c:	2101      	movs	r1, #1
 8020c8e:	68b8      	ldr	r0, [r7, #8]
 8020c90:	f7ff fb60 	bl	8020354 <etharp_find_entry>
 8020c94:	4603      	mov	r3, r0
 8020c96:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8020c98:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8020c9c:	2b00      	cmp	r3, #0
 8020c9e:	da02      	bge.n	8020ca6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8020ca0:	8a7b      	ldrh	r3, [r7, #18]
 8020ca2:	b25b      	sxtb	r3, r3
 8020ca4:	e0f3      	b.n	8020e8e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8020ca6:	8a7b      	ldrh	r3, [r7, #18]
 8020ca8:	2b7e      	cmp	r3, #126	; 0x7e
 8020caa:	d906      	bls.n	8020cba <etharp_query+0x7e>
 8020cac:	4b7a      	ldr	r3, [pc, #488]	; (8020e98 <etharp_query+0x25c>)
 8020cae:	f240 32c1 	movw	r2, #961	; 0x3c1
 8020cb2:	497a      	ldr	r1, [pc, #488]	; (8020e9c <etharp_query+0x260>)
 8020cb4:	487a      	ldr	r0, [pc, #488]	; (8020ea0 <etharp_query+0x264>)
 8020cb6:	f001 ff21 	bl	8022afc <iprintf>
  i = (netif_addr_idx_t)i_err;
 8020cba:	8a7b      	ldrh	r3, [r7, #18]
 8020cbc:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8020cbe:	7c7a      	ldrb	r2, [r7, #17]
 8020cc0:	4978      	ldr	r1, [pc, #480]	; (8020ea4 <etharp_query+0x268>)
 8020cc2:	4613      	mov	r3, r2
 8020cc4:	005b      	lsls	r3, r3, #1
 8020cc6:	4413      	add	r3, r2
 8020cc8:	00db      	lsls	r3, r3, #3
 8020cca:	440b      	add	r3, r1
 8020ccc:	3314      	adds	r3, #20
 8020cce:	781b      	ldrb	r3, [r3, #0]
 8020cd0:	2b00      	cmp	r3, #0
 8020cd2:	d115      	bne.n	8020d00 <etharp_query+0xc4>
    is_new_entry = 1;
 8020cd4:	2301      	movs	r3, #1
 8020cd6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8020cd8:	7c7a      	ldrb	r2, [r7, #17]
 8020cda:	4972      	ldr	r1, [pc, #456]	; (8020ea4 <etharp_query+0x268>)
 8020cdc:	4613      	mov	r3, r2
 8020cde:	005b      	lsls	r3, r3, #1
 8020ce0:	4413      	add	r3, r2
 8020ce2:	00db      	lsls	r3, r3, #3
 8020ce4:	440b      	add	r3, r1
 8020ce6:	3314      	adds	r3, #20
 8020ce8:	2201      	movs	r2, #1
 8020cea:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8020cec:	7c7a      	ldrb	r2, [r7, #17]
 8020cee:	496d      	ldr	r1, [pc, #436]	; (8020ea4 <etharp_query+0x268>)
 8020cf0:	4613      	mov	r3, r2
 8020cf2:	005b      	lsls	r3, r3, #1
 8020cf4:	4413      	add	r3, r2
 8020cf6:	00db      	lsls	r3, r3, #3
 8020cf8:	440b      	add	r3, r1
 8020cfa:	3308      	adds	r3, #8
 8020cfc:	68fa      	ldr	r2, [r7, #12]
 8020cfe:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8020d00:	7c7a      	ldrb	r2, [r7, #17]
 8020d02:	4968      	ldr	r1, [pc, #416]	; (8020ea4 <etharp_query+0x268>)
 8020d04:	4613      	mov	r3, r2
 8020d06:	005b      	lsls	r3, r3, #1
 8020d08:	4413      	add	r3, r2
 8020d0a:	00db      	lsls	r3, r3, #3
 8020d0c:	440b      	add	r3, r1
 8020d0e:	3314      	adds	r3, #20
 8020d10:	781b      	ldrb	r3, [r3, #0]
 8020d12:	2b01      	cmp	r3, #1
 8020d14:	d011      	beq.n	8020d3a <etharp_query+0xfe>
 8020d16:	7c7a      	ldrb	r2, [r7, #17]
 8020d18:	4962      	ldr	r1, [pc, #392]	; (8020ea4 <etharp_query+0x268>)
 8020d1a:	4613      	mov	r3, r2
 8020d1c:	005b      	lsls	r3, r3, #1
 8020d1e:	4413      	add	r3, r2
 8020d20:	00db      	lsls	r3, r3, #3
 8020d22:	440b      	add	r3, r1
 8020d24:	3314      	adds	r3, #20
 8020d26:	781b      	ldrb	r3, [r3, #0]
 8020d28:	2b01      	cmp	r3, #1
 8020d2a:	d806      	bhi.n	8020d3a <etharp_query+0xfe>
 8020d2c:	4b5a      	ldr	r3, [pc, #360]	; (8020e98 <etharp_query+0x25c>)
 8020d2e:	f240 32cd 	movw	r2, #973	; 0x3cd
 8020d32:	495d      	ldr	r1, [pc, #372]	; (8020ea8 <etharp_query+0x26c>)
 8020d34:	485a      	ldr	r0, [pc, #360]	; (8020ea0 <etharp_query+0x264>)
 8020d36:	f001 fee1 	bl	8022afc <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8020d3a:	6a3b      	ldr	r3, [r7, #32]
 8020d3c:	2b00      	cmp	r3, #0
 8020d3e:	d102      	bne.n	8020d46 <etharp_query+0x10a>
 8020d40:	687b      	ldr	r3, [r7, #4]
 8020d42:	2b00      	cmp	r3, #0
 8020d44:	d10c      	bne.n	8020d60 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8020d46:	68b9      	ldr	r1, [r7, #8]
 8020d48:	68f8      	ldr	r0, [r7, #12]
 8020d4a:	f000 f963 	bl	8021014 <etharp_request>
 8020d4e:	4603      	mov	r3, r0
 8020d50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8020d54:	687b      	ldr	r3, [r7, #4]
 8020d56:	2b00      	cmp	r3, #0
 8020d58:	d102      	bne.n	8020d60 <etharp_query+0x124>
      return result;
 8020d5a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8020d5e:	e096      	b.n	8020e8e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8020d60:	687b      	ldr	r3, [r7, #4]
 8020d62:	2b00      	cmp	r3, #0
 8020d64:	d106      	bne.n	8020d74 <etharp_query+0x138>
 8020d66:	4b4c      	ldr	r3, [pc, #304]	; (8020e98 <etharp_query+0x25c>)
 8020d68:	f240 32e1 	movw	r2, #993	; 0x3e1
 8020d6c:	494f      	ldr	r1, [pc, #316]	; (8020eac <etharp_query+0x270>)
 8020d6e:	484c      	ldr	r0, [pc, #304]	; (8020ea0 <etharp_query+0x264>)
 8020d70:	f001 fec4 	bl	8022afc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8020d74:	7c7a      	ldrb	r2, [r7, #17]
 8020d76:	494b      	ldr	r1, [pc, #300]	; (8020ea4 <etharp_query+0x268>)
 8020d78:	4613      	mov	r3, r2
 8020d7a:	005b      	lsls	r3, r3, #1
 8020d7c:	4413      	add	r3, r2
 8020d7e:	00db      	lsls	r3, r3, #3
 8020d80:	440b      	add	r3, r1
 8020d82:	3314      	adds	r3, #20
 8020d84:	781b      	ldrb	r3, [r3, #0]
 8020d86:	2b01      	cmp	r3, #1
 8020d88:	d917      	bls.n	8020dba <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8020d8a:	4a49      	ldr	r2, [pc, #292]	; (8020eb0 <etharp_query+0x274>)
 8020d8c:	7c7b      	ldrb	r3, [r7, #17]
 8020d8e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8020d90:	7c7a      	ldrb	r2, [r7, #17]
 8020d92:	4613      	mov	r3, r2
 8020d94:	005b      	lsls	r3, r3, #1
 8020d96:	4413      	add	r3, r2
 8020d98:	00db      	lsls	r3, r3, #3
 8020d9a:	3308      	adds	r3, #8
 8020d9c:	4a41      	ldr	r2, [pc, #260]	; (8020ea4 <etharp_query+0x268>)
 8020d9e:	4413      	add	r3, r2
 8020da0:	3304      	adds	r3, #4
 8020da2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8020da6:	9200      	str	r2, [sp, #0]
 8020da8:	697a      	ldr	r2, [r7, #20]
 8020daa:	6879      	ldr	r1, [r7, #4]
 8020dac:	68f8      	ldr	r0, [r7, #12]
 8020dae:	f001 fd09 	bl	80227c4 <ethernet_output>
 8020db2:	4603      	mov	r3, r0
 8020db4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8020db8:	e067      	b.n	8020e8a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8020dba:	7c7a      	ldrb	r2, [r7, #17]
 8020dbc:	4939      	ldr	r1, [pc, #228]	; (8020ea4 <etharp_query+0x268>)
 8020dbe:	4613      	mov	r3, r2
 8020dc0:	005b      	lsls	r3, r3, #1
 8020dc2:	4413      	add	r3, r2
 8020dc4:	00db      	lsls	r3, r3, #3
 8020dc6:	440b      	add	r3, r1
 8020dc8:	3314      	adds	r3, #20
 8020dca:	781b      	ldrb	r3, [r3, #0]
 8020dcc:	2b01      	cmp	r3, #1
 8020dce:	d15c      	bne.n	8020e8a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8020dd0:	2300      	movs	r3, #0
 8020dd2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8020dd4:	687b      	ldr	r3, [r7, #4]
 8020dd6:	61fb      	str	r3, [r7, #28]
    while (p) {
 8020dd8:	e01c      	b.n	8020e14 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8020dda:	69fb      	ldr	r3, [r7, #28]
 8020ddc:	895a      	ldrh	r2, [r3, #10]
 8020dde:	69fb      	ldr	r3, [r7, #28]
 8020de0:	891b      	ldrh	r3, [r3, #8]
 8020de2:	429a      	cmp	r2, r3
 8020de4:	d10a      	bne.n	8020dfc <etharp_query+0x1c0>
 8020de6:	69fb      	ldr	r3, [r7, #28]
 8020de8:	681b      	ldr	r3, [r3, #0]
 8020dea:	2b00      	cmp	r3, #0
 8020dec:	d006      	beq.n	8020dfc <etharp_query+0x1c0>
 8020dee:	4b2a      	ldr	r3, [pc, #168]	; (8020e98 <etharp_query+0x25c>)
 8020df0:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8020df4:	492f      	ldr	r1, [pc, #188]	; (8020eb4 <etharp_query+0x278>)
 8020df6:	482a      	ldr	r0, [pc, #168]	; (8020ea0 <etharp_query+0x264>)
 8020df8:	f001 fe80 	bl	8022afc <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8020dfc:	69fb      	ldr	r3, [r7, #28]
 8020dfe:	7b1b      	ldrb	r3, [r3, #12]
 8020e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8020e04:	2b00      	cmp	r3, #0
 8020e06:	d002      	beq.n	8020e0e <etharp_query+0x1d2>
        copy_needed = 1;
 8020e08:	2301      	movs	r3, #1
 8020e0a:	61bb      	str	r3, [r7, #24]
        break;
 8020e0c:	e005      	b.n	8020e1a <etharp_query+0x1de>
      }
      p = p->next;
 8020e0e:	69fb      	ldr	r3, [r7, #28]
 8020e10:	681b      	ldr	r3, [r3, #0]
 8020e12:	61fb      	str	r3, [r7, #28]
    while (p) {
 8020e14:	69fb      	ldr	r3, [r7, #28]
 8020e16:	2b00      	cmp	r3, #0
 8020e18:	d1df      	bne.n	8020dda <etharp_query+0x19e>
    }
    if (copy_needed) {
 8020e1a:	69bb      	ldr	r3, [r7, #24]
 8020e1c:	2b00      	cmp	r3, #0
 8020e1e:	d007      	beq.n	8020e30 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8020e20:	687a      	ldr	r2, [r7, #4]
 8020e22:	f44f 7120 	mov.w	r1, #640	; 0x280
 8020e26:	200e      	movs	r0, #14
 8020e28:	f7fe fbbc 	bl	801f5a4 <pbuf_clone>
 8020e2c:	61f8      	str	r0, [r7, #28]
 8020e2e:	e004      	b.n	8020e3a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8020e30:	687b      	ldr	r3, [r7, #4]
 8020e32:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8020e34:	69f8      	ldr	r0, [r7, #28]
 8020e36:	f7fe f9c9 	bl	801f1cc <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8020e3a:	69fb      	ldr	r3, [r7, #28]
 8020e3c:	2b00      	cmp	r3, #0
 8020e3e:	d021      	beq.n	8020e84 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8020e40:	7c7a      	ldrb	r2, [r7, #17]
 8020e42:	4918      	ldr	r1, [pc, #96]	; (8020ea4 <etharp_query+0x268>)
 8020e44:	4613      	mov	r3, r2
 8020e46:	005b      	lsls	r3, r3, #1
 8020e48:	4413      	add	r3, r2
 8020e4a:	00db      	lsls	r3, r3, #3
 8020e4c:	440b      	add	r3, r1
 8020e4e:	681b      	ldr	r3, [r3, #0]
 8020e50:	2b00      	cmp	r3, #0
 8020e52:	d00a      	beq.n	8020e6a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8020e54:	7c7a      	ldrb	r2, [r7, #17]
 8020e56:	4913      	ldr	r1, [pc, #76]	; (8020ea4 <etharp_query+0x268>)
 8020e58:	4613      	mov	r3, r2
 8020e5a:	005b      	lsls	r3, r3, #1
 8020e5c:	4413      	add	r3, r2
 8020e5e:	00db      	lsls	r3, r3, #3
 8020e60:	440b      	add	r3, r1
 8020e62:	681b      	ldr	r3, [r3, #0]
 8020e64:	4618      	mov	r0, r3
 8020e66:	f7fe f911 	bl	801f08c <pbuf_free>
      }
      arp_table[i].q = p;
 8020e6a:	7c7a      	ldrb	r2, [r7, #17]
 8020e6c:	490d      	ldr	r1, [pc, #52]	; (8020ea4 <etharp_query+0x268>)
 8020e6e:	4613      	mov	r3, r2
 8020e70:	005b      	lsls	r3, r3, #1
 8020e72:	4413      	add	r3, r2
 8020e74:	00db      	lsls	r3, r3, #3
 8020e76:	440b      	add	r3, r1
 8020e78:	69fa      	ldr	r2, [r7, #28]
 8020e7a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8020e7c:	2300      	movs	r3, #0
 8020e7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8020e82:	e002      	b.n	8020e8a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8020e84:	23ff      	movs	r3, #255	; 0xff
 8020e86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8020e8a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8020e8e:	4618      	mov	r0, r3
 8020e90:	3728      	adds	r7, #40	; 0x28
 8020e92:	46bd      	mov	sp, r7
 8020e94:	bd80      	pop	{r7, pc}
 8020e96:	bf00      	nop
 8020e98:	080286d4 	.word	0x080286d4
 8020e9c:	08028880 	.word	0x08028880
 8020ea0:	0802874c 	.word	0x0802874c
 8020ea4:	20013e78 	.word	0x20013e78
 8020ea8:	08028890 	.word	0x08028890
 8020eac:	08028874 	.word	0x08028874
 8020eb0:	20014328 	.word	0x20014328
 8020eb4:	080288b8 	.word	0x080288b8

08020eb8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8020eb8:	b580      	push	{r7, lr}
 8020eba:	b08a      	sub	sp, #40	; 0x28
 8020ebc:	af02      	add	r7, sp, #8
 8020ebe:	60f8      	str	r0, [r7, #12]
 8020ec0:	60b9      	str	r1, [r7, #8]
 8020ec2:	607a      	str	r2, [r7, #4]
 8020ec4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8020ec6:	2300      	movs	r3, #0
 8020ec8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8020eca:	68fb      	ldr	r3, [r7, #12]
 8020ecc:	2b00      	cmp	r3, #0
 8020ece:	d106      	bne.n	8020ede <etharp_raw+0x26>
 8020ed0:	4b3a      	ldr	r3, [pc, #232]	; (8020fbc <etharp_raw+0x104>)
 8020ed2:	f240 4257 	movw	r2, #1111	; 0x457
 8020ed6:	493a      	ldr	r1, [pc, #232]	; (8020fc0 <etharp_raw+0x108>)
 8020ed8:	483a      	ldr	r0, [pc, #232]	; (8020fc4 <etharp_raw+0x10c>)
 8020eda:	f001 fe0f 	bl	8022afc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8020ede:	f44f 7220 	mov.w	r2, #640	; 0x280
 8020ee2:	211c      	movs	r1, #28
 8020ee4:	200e      	movs	r0, #14
 8020ee6:	f7fd fdef 	bl	801eac8 <pbuf_alloc>
 8020eea:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8020eec:	69bb      	ldr	r3, [r7, #24]
 8020eee:	2b00      	cmp	r3, #0
 8020ef0:	d102      	bne.n	8020ef8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8020ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8020ef6:	e05d      	b.n	8020fb4 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8020ef8:	69bb      	ldr	r3, [r7, #24]
 8020efa:	895b      	ldrh	r3, [r3, #10]
 8020efc:	2b1b      	cmp	r3, #27
 8020efe:	d806      	bhi.n	8020f0e <etharp_raw+0x56>
 8020f00:	4b2e      	ldr	r3, [pc, #184]	; (8020fbc <etharp_raw+0x104>)
 8020f02:	f240 4262 	movw	r2, #1122	; 0x462
 8020f06:	4930      	ldr	r1, [pc, #192]	; (8020fc8 <etharp_raw+0x110>)
 8020f08:	482e      	ldr	r0, [pc, #184]	; (8020fc4 <etharp_raw+0x10c>)
 8020f0a:	f001 fdf7 	bl	8022afc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8020f0e:	69bb      	ldr	r3, [r7, #24]
 8020f10:	685b      	ldr	r3, [r3, #4]
 8020f12:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8020f14:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8020f16:	4618      	mov	r0, r3
 8020f18:	f7fc fcdc 	bl	801d8d4 <lwip_htons>
 8020f1c:	4603      	mov	r3, r0
 8020f1e:	461a      	mov	r2, r3
 8020f20:	697b      	ldr	r3, [r7, #20]
 8020f22:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8020f24:	68fb      	ldr	r3, [r7, #12]
 8020f26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8020f2a:	2b06      	cmp	r3, #6
 8020f2c:	d006      	beq.n	8020f3c <etharp_raw+0x84>
 8020f2e:	4b23      	ldr	r3, [pc, #140]	; (8020fbc <etharp_raw+0x104>)
 8020f30:	f240 4269 	movw	r2, #1129	; 0x469
 8020f34:	4925      	ldr	r1, [pc, #148]	; (8020fcc <etharp_raw+0x114>)
 8020f36:	4823      	ldr	r0, [pc, #140]	; (8020fc4 <etharp_raw+0x10c>)
 8020f38:	f001 fde0 	bl	8022afc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8020f3c:	697b      	ldr	r3, [r7, #20]
 8020f3e:	3308      	adds	r3, #8
 8020f40:	2206      	movs	r2, #6
 8020f42:	6839      	ldr	r1, [r7, #0]
 8020f44:	4618      	mov	r0, r3
 8020f46:	f001 fcc9 	bl	80228dc <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8020f4a:	697b      	ldr	r3, [r7, #20]
 8020f4c:	3312      	adds	r3, #18
 8020f4e:	2206      	movs	r2, #6
 8020f50:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8020f52:	4618      	mov	r0, r3
 8020f54:	f001 fcc2 	bl	80228dc <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8020f58:	697b      	ldr	r3, [r7, #20]
 8020f5a:	330e      	adds	r3, #14
 8020f5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8020f5e:	6812      	ldr	r2, [r2, #0]
 8020f60:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8020f62:	697b      	ldr	r3, [r7, #20]
 8020f64:	3318      	adds	r3, #24
 8020f66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8020f68:	6812      	ldr	r2, [r2, #0]
 8020f6a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8020f6c:	697b      	ldr	r3, [r7, #20]
 8020f6e:	2200      	movs	r2, #0
 8020f70:	701a      	strb	r2, [r3, #0]
 8020f72:	2200      	movs	r2, #0
 8020f74:	f042 0201 	orr.w	r2, r2, #1
 8020f78:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8020f7a:	697b      	ldr	r3, [r7, #20]
 8020f7c:	2200      	movs	r2, #0
 8020f7e:	f042 0208 	orr.w	r2, r2, #8
 8020f82:	709a      	strb	r2, [r3, #2]
 8020f84:	2200      	movs	r2, #0
 8020f86:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8020f88:	697b      	ldr	r3, [r7, #20]
 8020f8a:	2206      	movs	r2, #6
 8020f8c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8020f8e:	697b      	ldr	r3, [r7, #20]
 8020f90:	2204      	movs	r2, #4
 8020f92:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8020f94:	f640 0306 	movw	r3, #2054	; 0x806
 8020f98:	9300      	str	r3, [sp, #0]
 8020f9a:	687b      	ldr	r3, [r7, #4]
 8020f9c:	68ba      	ldr	r2, [r7, #8]
 8020f9e:	69b9      	ldr	r1, [r7, #24]
 8020fa0:	68f8      	ldr	r0, [r7, #12]
 8020fa2:	f001 fc0f 	bl	80227c4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8020fa6:	69b8      	ldr	r0, [r7, #24]
 8020fa8:	f7fe f870 	bl	801f08c <pbuf_free>
  p = NULL;
 8020fac:	2300      	movs	r3, #0
 8020fae:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8020fb0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8020fb4:	4618      	mov	r0, r3
 8020fb6:	3720      	adds	r7, #32
 8020fb8:	46bd      	mov	sp, r7
 8020fba:	bd80      	pop	{r7, pc}
 8020fbc:	080286d4 	.word	0x080286d4
 8020fc0:	08028824 	.word	0x08028824
 8020fc4:	0802874c 	.word	0x0802874c
 8020fc8:	080288d4 	.word	0x080288d4
 8020fcc:	08028908 	.word	0x08028908

08020fd0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8020fd0:	b580      	push	{r7, lr}
 8020fd2:	b088      	sub	sp, #32
 8020fd4:	af04      	add	r7, sp, #16
 8020fd6:	60f8      	str	r0, [r7, #12]
 8020fd8:	60b9      	str	r1, [r7, #8]
 8020fda:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8020fdc:	68fb      	ldr	r3, [r7, #12]
 8020fde:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8020fe2:	68fb      	ldr	r3, [r7, #12]
 8020fe4:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8020fe8:	68fb      	ldr	r3, [r7, #12]
 8020fea:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8020fec:	2201      	movs	r2, #1
 8020fee:	9203      	str	r2, [sp, #12]
 8020ff0:	68ba      	ldr	r2, [r7, #8]
 8020ff2:	9202      	str	r2, [sp, #8]
 8020ff4:	4a06      	ldr	r2, [pc, #24]	; (8021010 <etharp_request_dst+0x40>)
 8020ff6:	9201      	str	r2, [sp, #4]
 8020ff8:	9300      	str	r3, [sp, #0]
 8020ffa:	4603      	mov	r3, r0
 8020ffc:	687a      	ldr	r2, [r7, #4]
 8020ffe:	68f8      	ldr	r0, [r7, #12]
 8021000:	f7ff ff5a 	bl	8020eb8 <etharp_raw>
 8021004:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8021006:	4618      	mov	r0, r3
 8021008:	3710      	adds	r7, #16
 802100a:	46bd      	mov	sp, r7
 802100c:	bd80      	pop	{r7, pc}
 802100e:	bf00      	nop
 8021010:	0802925c 	.word	0x0802925c

08021014 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8021014:	b580      	push	{r7, lr}
 8021016:	b082      	sub	sp, #8
 8021018:	af00      	add	r7, sp, #0
 802101a:	6078      	str	r0, [r7, #4]
 802101c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 802101e:	4a05      	ldr	r2, [pc, #20]	; (8021034 <etharp_request+0x20>)
 8021020:	6839      	ldr	r1, [r7, #0]
 8021022:	6878      	ldr	r0, [r7, #4]
 8021024:	f7ff ffd4 	bl	8020fd0 <etharp_request_dst>
 8021028:	4603      	mov	r3, r0
}
 802102a:	4618      	mov	r0, r3
 802102c:	3708      	adds	r7, #8
 802102e:	46bd      	mov	sp, r7
 8021030:	bd80      	pop	{r7, pc}
 8021032:	bf00      	nop
 8021034:	08029254 	.word	0x08029254

08021038 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8021038:	b580      	push	{r7, lr}
 802103a:	b08e      	sub	sp, #56	; 0x38
 802103c:	af04      	add	r7, sp, #16
 802103e:	6078      	str	r0, [r7, #4]
 8021040:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8021042:	4b79      	ldr	r3, [pc, #484]	; (8021228 <icmp_input+0x1f0>)
 8021044:	689b      	ldr	r3, [r3, #8]
 8021046:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8021048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802104a:	781b      	ldrb	r3, [r3, #0]
 802104c:	f003 030f 	and.w	r3, r3, #15
 8021050:	b2db      	uxtb	r3, r3
 8021052:	009b      	lsls	r3, r3, #2
 8021054:	b2db      	uxtb	r3, r3
 8021056:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8021058:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802105a:	2b13      	cmp	r3, #19
 802105c:	f240 80cd 	bls.w	80211fa <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8021060:	687b      	ldr	r3, [r7, #4]
 8021062:	895b      	ldrh	r3, [r3, #10]
 8021064:	2b03      	cmp	r3, #3
 8021066:	f240 80ca 	bls.w	80211fe <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 802106a:	687b      	ldr	r3, [r7, #4]
 802106c:	685b      	ldr	r3, [r3, #4]
 802106e:	781b      	ldrb	r3, [r3, #0]
 8021070:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8021074:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8021078:	2b00      	cmp	r3, #0
 802107a:	f000 80b7 	beq.w	80211ec <icmp_input+0x1b4>
 802107e:	2b08      	cmp	r3, #8
 8021080:	f040 80b7 	bne.w	80211f2 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8021084:	4b69      	ldr	r3, [pc, #420]	; (802122c <icmp_input+0x1f4>)
 8021086:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8021088:	4b67      	ldr	r3, [pc, #412]	; (8021228 <icmp_input+0x1f0>)
 802108a:	695b      	ldr	r3, [r3, #20]
 802108c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8021090:	2be0      	cmp	r3, #224	; 0xe0
 8021092:	f000 80bb 	beq.w	802120c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8021096:	4b64      	ldr	r3, [pc, #400]	; (8021228 <icmp_input+0x1f0>)
 8021098:	695b      	ldr	r3, [r3, #20]
 802109a:	4a63      	ldr	r2, [pc, #396]	; (8021228 <icmp_input+0x1f0>)
 802109c:	6812      	ldr	r2, [r2, #0]
 802109e:	4611      	mov	r1, r2
 80210a0:	4618      	mov	r0, r3
 80210a2:	f000 fbf1 	bl	8021888 <ip4_addr_isbroadcast_u32>
 80210a6:	4603      	mov	r3, r0
 80210a8:	2b00      	cmp	r3, #0
 80210aa:	f040 80b1 	bne.w	8021210 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80210ae:	687b      	ldr	r3, [r7, #4]
 80210b0:	891b      	ldrh	r3, [r3, #8]
 80210b2:	2b07      	cmp	r3, #7
 80210b4:	f240 80a5 	bls.w	8021202 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80210b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80210ba:	330e      	adds	r3, #14
 80210bc:	4619      	mov	r1, r3
 80210be:	6878      	ldr	r0, [r7, #4]
 80210c0:	f7fd ff4e 	bl	801ef60 <pbuf_add_header>
 80210c4:	4603      	mov	r3, r0
 80210c6:	2b00      	cmp	r3, #0
 80210c8:	d04b      	beq.n	8021162 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80210ca:	687b      	ldr	r3, [r7, #4]
 80210cc:	891a      	ldrh	r2, [r3, #8]
 80210ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80210d0:	4413      	add	r3, r2
 80210d2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80210d4:	687b      	ldr	r3, [r7, #4]
 80210d6:	891b      	ldrh	r3, [r3, #8]
 80210d8:	8b7a      	ldrh	r2, [r7, #26]
 80210da:	429a      	cmp	r2, r3
 80210dc:	f0c0 809a 	bcc.w	8021214 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80210e0:	8b7b      	ldrh	r3, [r7, #26]
 80210e2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80210e6:	4619      	mov	r1, r3
 80210e8:	200e      	movs	r0, #14
 80210ea:	f7fd fced 	bl	801eac8 <pbuf_alloc>
 80210ee:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80210f0:	697b      	ldr	r3, [r7, #20]
 80210f2:	2b00      	cmp	r3, #0
 80210f4:	f000 8090 	beq.w	8021218 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80210f8:	697b      	ldr	r3, [r7, #20]
 80210fa:	895b      	ldrh	r3, [r3, #10]
 80210fc:	461a      	mov	r2, r3
 80210fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021100:	3308      	adds	r3, #8
 8021102:	429a      	cmp	r2, r3
 8021104:	d203      	bcs.n	802110e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8021106:	6978      	ldr	r0, [r7, #20]
 8021108:	f7fd ffc0 	bl	801f08c <pbuf_free>
          goto icmperr;
 802110c:	e085      	b.n	802121a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 802110e:	697b      	ldr	r3, [r7, #20]
 8021110:	685b      	ldr	r3, [r3, #4]
 8021112:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8021114:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8021116:	4618      	mov	r0, r3
 8021118:	f001 fbe0 	bl	80228dc <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 802111c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802111e:	4619      	mov	r1, r3
 8021120:	6978      	ldr	r0, [r7, #20]
 8021122:	f7fd ff2d 	bl	801ef80 <pbuf_remove_header>
 8021126:	4603      	mov	r3, r0
 8021128:	2b00      	cmp	r3, #0
 802112a:	d009      	beq.n	8021140 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 802112c:	4b40      	ldr	r3, [pc, #256]	; (8021230 <icmp_input+0x1f8>)
 802112e:	22b6      	movs	r2, #182	; 0xb6
 8021130:	4940      	ldr	r1, [pc, #256]	; (8021234 <icmp_input+0x1fc>)
 8021132:	4841      	ldr	r0, [pc, #260]	; (8021238 <icmp_input+0x200>)
 8021134:	f001 fce2 	bl	8022afc <iprintf>
          pbuf_free(r);
 8021138:	6978      	ldr	r0, [r7, #20]
 802113a:	f7fd ffa7 	bl	801f08c <pbuf_free>
          goto icmperr;
 802113e:	e06c      	b.n	802121a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8021140:	6879      	ldr	r1, [r7, #4]
 8021142:	6978      	ldr	r0, [r7, #20]
 8021144:	f7fe f8ca 	bl	801f2dc <pbuf_copy>
 8021148:	4603      	mov	r3, r0
 802114a:	2b00      	cmp	r3, #0
 802114c:	d003      	beq.n	8021156 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 802114e:	6978      	ldr	r0, [r7, #20]
 8021150:	f7fd ff9c 	bl	801f08c <pbuf_free>
          goto icmperr;
 8021154:	e061      	b.n	802121a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8021156:	6878      	ldr	r0, [r7, #4]
 8021158:	f7fd ff98 	bl	801f08c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 802115c:	697b      	ldr	r3, [r7, #20]
 802115e:	607b      	str	r3, [r7, #4]
 8021160:	e00f      	b.n	8021182 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8021162:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021164:	330e      	adds	r3, #14
 8021166:	4619      	mov	r1, r3
 8021168:	6878      	ldr	r0, [r7, #4]
 802116a:	f7fd ff09 	bl	801ef80 <pbuf_remove_header>
 802116e:	4603      	mov	r3, r0
 8021170:	2b00      	cmp	r3, #0
 8021172:	d006      	beq.n	8021182 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8021174:	4b2e      	ldr	r3, [pc, #184]	; (8021230 <icmp_input+0x1f8>)
 8021176:	22c7      	movs	r2, #199	; 0xc7
 8021178:	4930      	ldr	r1, [pc, #192]	; (802123c <icmp_input+0x204>)
 802117a:	482f      	ldr	r0, [pc, #188]	; (8021238 <icmp_input+0x200>)
 802117c:	f001 fcbe 	bl	8022afc <iprintf>
          goto icmperr;
 8021180:	e04b      	b.n	802121a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8021182:	687b      	ldr	r3, [r7, #4]
 8021184:	685b      	ldr	r3, [r3, #4]
 8021186:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8021188:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802118a:	4619      	mov	r1, r3
 802118c:	6878      	ldr	r0, [r7, #4]
 802118e:	f7fd fee7 	bl	801ef60 <pbuf_add_header>
 8021192:	4603      	mov	r3, r0
 8021194:	2b00      	cmp	r3, #0
 8021196:	d12b      	bne.n	80211f0 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8021198:	687b      	ldr	r3, [r7, #4]
 802119a:	685b      	ldr	r3, [r3, #4]
 802119c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 802119e:	69fb      	ldr	r3, [r7, #28]
 80211a0:	681a      	ldr	r2, [r3, #0]
 80211a2:	68fb      	ldr	r3, [r7, #12]
 80211a4:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80211a6:	4b20      	ldr	r3, [pc, #128]	; (8021228 <icmp_input+0x1f0>)
 80211a8:	691a      	ldr	r2, [r3, #16]
 80211aa:	68fb      	ldr	r3, [r7, #12]
 80211ac:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80211ae:	693b      	ldr	r3, [r7, #16]
 80211b0:	2200      	movs	r2, #0
 80211b2:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80211b4:	693b      	ldr	r3, [r7, #16]
 80211b6:	2200      	movs	r2, #0
 80211b8:	709a      	strb	r2, [r3, #2]
 80211ba:	2200      	movs	r2, #0
 80211bc:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80211be:	68fb      	ldr	r3, [r7, #12]
 80211c0:	22ff      	movs	r2, #255	; 0xff
 80211c2:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80211c4:	68fb      	ldr	r3, [r7, #12]
 80211c6:	2200      	movs	r2, #0
 80211c8:	729a      	strb	r2, [r3, #10]
 80211ca:	2200      	movs	r2, #0
 80211cc:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80211ce:	683b      	ldr	r3, [r7, #0]
 80211d0:	9302      	str	r3, [sp, #8]
 80211d2:	2301      	movs	r3, #1
 80211d4:	9301      	str	r3, [sp, #4]
 80211d6:	2300      	movs	r3, #0
 80211d8:	9300      	str	r3, [sp, #0]
 80211da:	23ff      	movs	r3, #255	; 0xff
 80211dc:	2200      	movs	r2, #0
 80211de:	69f9      	ldr	r1, [r7, #28]
 80211e0:	6878      	ldr	r0, [r7, #4]
 80211e2:	f000 fa6b 	bl	80216bc <ip4_output_if>
 80211e6:	4603      	mov	r3, r0
 80211e8:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80211ea:	e001      	b.n	80211f0 <icmp_input+0x1b8>
      break;
 80211ec:	bf00      	nop
 80211ee:	e000      	b.n	80211f2 <icmp_input+0x1ba>
      break;
 80211f0:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80211f2:	6878      	ldr	r0, [r7, #4]
 80211f4:	f7fd ff4a 	bl	801f08c <pbuf_free>
  return;
 80211f8:	e013      	b.n	8021222 <icmp_input+0x1ea>
    goto lenerr;
 80211fa:	bf00      	nop
 80211fc:	e002      	b.n	8021204 <icmp_input+0x1cc>
    goto lenerr;
 80211fe:	bf00      	nop
 8021200:	e000      	b.n	8021204 <icmp_input+0x1cc>
        goto lenerr;
 8021202:	bf00      	nop
lenerr:
  pbuf_free(p);
 8021204:	6878      	ldr	r0, [r7, #4]
 8021206:	f7fd ff41 	bl	801f08c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 802120a:	e00a      	b.n	8021222 <icmp_input+0x1ea>
        goto icmperr;
 802120c:	bf00      	nop
 802120e:	e004      	b.n	802121a <icmp_input+0x1e2>
        goto icmperr;
 8021210:	bf00      	nop
 8021212:	e002      	b.n	802121a <icmp_input+0x1e2>
          goto icmperr;
 8021214:	bf00      	nop
 8021216:	e000      	b.n	802121a <icmp_input+0x1e2>
          goto icmperr;
 8021218:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 802121a:	6878      	ldr	r0, [r7, #4]
 802121c:	f7fd ff36 	bl	801f08c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8021220:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8021222:	3728      	adds	r7, #40	; 0x28
 8021224:	46bd      	mov	sp, r7
 8021226:	bd80      	pop	{r7, pc}
 8021228:	20010810 	.word	0x20010810
 802122c:	20010824 	.word	0x20010824
 8021230:	0802894c 	.word	0x0802894c
 8021234:	08028984 	.word	0x08028984
 8021238:	080289bc 	.word	0x080289bc
 802123c:	080289e4 	.word	0x080289e4

08021240 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8021240:	b580      	push	{r7, lr}
 8021242:	b082      	sub	sp, #8
 8021244:	af00      	add	r7, sp, #0
 8021246:	6078      	str	r0, [r7, #4]
 8021248:	460b      	mov	r3, r1
 802124a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 802124c:	78fb      	ldrb	r3, [r7, #3]
 802124e:	461a      	mov	r2, r3
 8021250:	2103      	movs	r1, #3
 8021252:	6878      	ldr	r0, [r7, #4]
 8021254:	f000 f814 	bl	8021280 <icmp_send_response>
}
 8021258:	bf00      	nop
 802125a:	3708      	adds	r7, #8
 802125c:	46bd      	mov	sp, r7
 802125e:	bd80      	pop	{r7, pc}

08021260 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8021260:	b580      	push	{r7, lr}
 8021262:	b082      	sub	sp, #8
 8021264:	af00      	add	r7, sp, #0
 8021266:	6078      	str	r0, [r7, #4]
 8021268:	460b      	mov	r3, r1
 802126a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 802126c:	78fb      	ldrb	r3, [r7, #3]
 802126e:	461a      	mov	r2, r3
 8021270:	210b      	movs	r1, #11
 8021272:	6878      	ldr	r0, [r7, #4]
 8021274:	f000 f804 	bl	8021280 <icmp_send_response>
}
 8021278:	bf00      	nop
 802127a:	3708      	adds	r7, #8
 802127c:	46bd      	mov	sp, r7
 802127e:	bd80      	pop	{r7, pc}

08021280 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8021280:	b580      	push	{r7, lr}
 8021282:	b08c      	sub	sp, #48	; 0x30
 8021284:	af04      	add	r7, sp, #16
 8021286:	6078      	str	r0, [r7, #4]
 8021288:	460b      	mov	r3, r1
 802128a:	70fb      	strb	r3, [r7, #3]
 802128c:	4613      	mov	r3, r2
 802128e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8021290:	f44f 7220 	mov.w	r2, #640	; 0x280
 8021294:	2124      	movs	r1, #36	; 0x24
 8021296:	2022      	movs	r0, #34	; 0x22
 8021298:	f7fd fc16 	bl	801eac8 <pbuf_alloc>
 802129c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 802129e:	69fb      	ldr	r3, [r7, #28]
 80212a0:	2b00      	cmp	r3, #0
 80212a2:	d04c      	beq.n	802133e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80212a4:	69fb      	ldr	r3, [r7, #28]
 80212a6:	895b      	ldrh	r3, [r3, #10]
 80212a8:	2b23      	cmp	r3, #35	; 0x23
 80212aa:	d806      	bhi.n	80212ba <icmp_send_response+0x3a>
 80212ac:	4b26      	ldr	r3, [pc, #152]	; (8021348 <icmp_send_response+0xc8>)
 80212ae:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80212b2:	4926      	ldr	r1, [pc, #152]	; (802134c <icmp_send_response+0xcc>)
 80212b4:	4826      	ldr	r0, [pc, #152]	; (8021350 <icmp_send_response+0xd0>)
 80212b6:	f001 fc21 	bl	8022afc <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80212ba:	687b      	ldr	r3, [r7, #4]
 80212bc:	685b      	ldr	r3, [r3, #4]
 80212be:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80212c0:	69fb      	ldr	r3, [r7, #28]
 80212c2:	685b      	ldr	r3, [r3, #4]
 80212c4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80212c6:	697b      	ldr	r3, [r7, #20]
 80212c8:	78fa      	ldrb	r2, [r7, #3]
 80212ca:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80212cc:	697b      	ldr	r3, [r7, #20]
 80212ce:	78ba      	ldrb	r2, [r7, #2]
 80212d0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80212d2:	697b      	ldr	r3, [r7, #20]
 80212d4:	2200      	movs	r2, #0
 80212d6:	711a      	strb	r2, [r3, #4]
 80212d8:	2200      	movs	r2, #0
 80212da:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80212dc:	697b      	ldr	r3, [r7, #20]
 80212de:	2200      	movs	r2, #0
 80212e0:	719a      	strb	r2, [r3, #6]
 80212e2:	2200      	movs	r2, #0
 80212e4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80212e6:	69fb      	ldr	r3, [r7, #28]
 80212e8:	685b      	ldr	r3, [r3, #4]
 80212ea:	f103 0008 	add.w	r0, r3, #8
 80212ee:	687b      	ldr	r3, [r7, #4]
 80212f0:	685b      	ldr	r3, [r3, #4]
 80212f2:	221c      	movs	r2, #28
 80212f4:	4619      	mov	r1, r3
 80212f6:	f001 faf1 	bl	80228dc <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80212fa:	69bb      	ldr	r3, [r7, #24]
 80212fc:	68db      	ldr	r3, [r3, #12]
 80212fe:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8021300:	f107 030c 	add.w	r3, r7, #12
 8021304:	4618      	mov	r0, r3
 8021306:	f000 f825 	bl	8021354 <ip4_route>
 802130a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 802130c:	693b      	ldr	r3, [r7, #16]
 802130e:	2b00      	cmp	r3, #0
 8021310:	d011      	beq.n	8021336 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8021312:	697b      	ldr	r3, [r7, #20]
 8021314:	2200      	movs	r2, #0
 8021316:	709a      	strb	r2, [r3, #2]
 8021318:	2200      	movs	r2, #0
 802131a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 802131c:	f107 020c 	add.w	r2, r7, #12
 8021320:	693b      	ldr	r3, [r7, #16]
 8021322:	9302      	str	r3, [sp, #8]
 8021324:	2301      	movs	r3, #1
 8021326:	9301      	str	r3, [sp, #4]
 8021328:	2300      	movs	r3, #0
 802132a:	9300      	str	r3, [sp, #0]
 802132c:	23ff      	movs	r3, #255	; 0xff
 802132e:	2100      	movs	r1, #0
 8021330:	69f8      	ldr	r0, [r7, #28]
 8021332:	f000 f9c3 	bl	80216bc <ip4_output_if>
  }
  pbuf_free(q);
 8021336:	69f8      	ldr	r0, [r7, #28]
 8021338:	f7fd fea8 	bl	801f08c <pbuf_free>
 802133c:	e000      	b.n	8021340 <icmp_send_response+0xc0>
    return;
 802133e:	bf00      	nop
}
 8021340:	3720      	adds	r7, #32
 8021342:	46bd      	mov	sp, r7
 8021344:	bd80      	pop	{r7, pc}
 8021346:	bf00      	nop
 8021348:	0802894c 	.word	0x0802894c
 802134c:	08028a18 	.word	0x08028a18
 8021350:	080289bc 	.word	0x080289bc

08021354 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8021354:	b480      	push	{r7}
 8021356:	b085      	sub	sp, #20
 8021358:	af00      	add	r7, sp, #0
 802135a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 802135c:	4b33      	ldr	r3, [pc, #204]	; (802142c <ip4_route+0xd8>)
 802135e:	681b      	ldr	r3, [r3, #0]
 8021360:	60fb      	str	r3, [r7, #12]
 8021362:	e036      	b.n	80213d2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8021364:	68fb      	ldr	r3, [r7, #12]
 8021366:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 802136a:	f003 0301 	and.w	r3, r3, #1
 802136e:	b2db      	uxtb	r3, r3
 8021370:	2b00      	cmp	r3, #0
 8021372:	d02b      	beq.n	80213cc <ip4_route+0x78>
 8021374:	68fb      	ldr	r3, [r7, #12]
 8021376:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 802137a:	089b      	lsrs	r3, r3, #2
 802137c:	f003 0301 	and.w	r3, r3, #1
 8021380:	b2db      	uxtb	r3, r3
 8021382:	2b00      	cmp	r3, #0
 8021384:	d022      	beq.n	80213cc <ip4_route+0x78>
 8021386:	68fb      	ldr	r3, [r7, #12]
 8021388:	3304      	adds	r3, #4
 802138a:	681b      	ldr	r3, [r3, #0]
 802138c:	2b00      	cmp	r3, #0
 802138e:	d01d      	beq.n	80213cc <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8021390:	687b      	ldr	r3, [r7, #4]
 8021392:	681a      	ldr	r2, [r3, #0]
 8021394:	68fb      	ldr	r3, [r7, #12]
 8021396:	3304      	adds	r3, #4
 8021398:	681b      	ldr	r3, [r3, #0]
 802139a:	405a      	eors	r2, r3
 802139c:	68fb      	ldr	r3, [r7, #12]
 802139e:	3308      	adds	r3, #8
 80213a0:	681b      	ldr	r3, [r3, #0]
 80213a2:	4013      	ands	r3, r2
 80213a4:	2b00      	cmp	r3, #0
 80213a6:	d101      	bne.n	80213ac <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80213a8:	68fb      	ldr	r3, [r7, #12]
 80213aa:	e038      	b.n	802141e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80213ac:	68fb      	ldr	r3, [r7, #12]
 80213ae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80213b2:	f003 0302 	and.w	r3, r3, #2
 80213b6:	2b00      	cmp	r3, #0
 80213b8:	d108      	bne.n	80213cc <ip4_route+0x78>
 80213ba:	687b      	ldr	r3, [r7, #4]
 80213bc:	681a      	ldr	r2, [r3, #0]
 80213be:	68fb      	ldr	r3, [r7, #12]
 80213c0:	330c      	adds	r3, #12
 80213c2:	681b      	ldr	r3, [r3, #0]
 80213c4:	429a      	cmp	r2, r3
 80213c6:	d101      	bne.n	80213cc <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80213c8:	68fb      	ldr	r3, [r7, #12]
 80213ca:	e028      	b.n	802141e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80213cc:	68fb      	ldr	r3, [r7, #12]
 80213ce:	681b      	ldr	r3, [r3, #0]
 80213d0:	60fb      	str	r3, [r7, #12]
 80213d2:	68fb      	ldr	r3, [r7, #12]
 80213d4:	2b00      	cmp	r3, #0
 80213d6:	d1c5      	bne.n	8021364 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80213d8:	4b15      	ldr	r3, [pc, #84]	; (8021430 <ip4_route+0xdc>)
 80213da:	681b      	ldr	r3, [r3, #0]
 80213dc:	2b00      	cmp	r3, #0
 80213de:	d01a      	beq.n	8021416 <ip4_route+0xc2>
 80213e0:	4b13      	ldr	r3, [pc, #76]	; (8021430 <ip4_route+0xdc>)
 80213e2:	681b      	ldr	r3, [r3, #0]
 80213e4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80213e8:	f003 0301 	and.w	r3, r3, #1
 80213ec:	2b00      	cmp	r3, #0
 80213ee:	d012      	beq.n	8021416 <ip4_route+0xc2>
 80213f0:	4b0f      	ldr	r3, [pc, #60]	; (8021430 <ip4_route+0xdc>)
 80213f2:	681b      	ldr	r3, [r3, #0]
 80213f4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80213f8:	f003 0304 	and.w	r3, r3, #4
 80213fc:	2b00      	cmp	r3, #0
 80213fe:	d00a      	beq.n	8021416 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8021400:	4b0b      	ldr	r3, [pc, #44]	; (8021430 <ip4_route+0xdc>)
 8021402:	681b      	ldr	r3, [r3, #0]
 8021404:	3304      	adds	r3, #4
 8021406:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8021408:	2b00      	cmp	r3, #0
 802140a:	d004      	beq.n	8021416 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 802140c:	687b      	ldr	r3, [r7, #4]
 802140e:	681b      	ldr	r3, [r3, #0]
 8021410:	b2db      	uxtb	r3, r3
 8021412:	2b7f      	cmp	r3, #127	; 0x7f
 8021414:	d101      	bne.n	802141a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8021416:	2300      	movs	r3, #0
 8021418:	e001      	b.n	802141e <ip4_route+0xca>
  }

  return netif_default;
 802141a:	4b05      	ldr	r3, [pc, #20]	; (8021430 <ip4_route+0xdc>)
 802141c:	681b      	ldr	r3, [r3, #0]
}
 802141e:	4618      	mov	r0, r3
 8021420:	3714      	adds	r7, #20
 8021422:	46bd      	mov	sp, r7
 8021424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021428:	4770      	bx	lr
 802142a:	bf00      	nop
 802142c:	20013e20 	.word	0x20013e20
 8021430:	20013e24 	.word	0x20013e24

08021434 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8021434:	b580      	push	{r7, lr}
 8021436:	b082      	sub	sp, #8
 8021438:	af00      	add	r7, sp, #0
 802143a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 802143c:	687b      	ldr	r3, [r7, #4]
 802143e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8021442:	f003 0301 	and.w	r3, r3, #1
 8021446:	b2db      	uxtb	r3, r3
 8021448:	2b00      	cmp	r3, #0
 802144a:	d016      	beq.n	802147a <ip4_input_accept+0x46>
 802144c:	687b      	ldr	r3, [r7, #4]
 802144e:	3304      	adds	r3, #4
 8021450:	681b      	ldr	r3, [r3, #0]
 8021452:	2b00      	cmp	r3, #0
 8021454:	d011      	beq.n	802147a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8021456:	4b0b      	ldr	r3, [pc, #44]	; (8021484 <ip4_input_accept+0x50>)
 8021458:	695a      	ldr	r2, [r3, #20]
 802145a:	687b      	ldr	r3, [r7, #4]
 802145c:	3304      	adds	r3, #4
 802145e:	681b      	ldr	r3, [r3, #0]
 8021460:	429a      	cmp	r2, r3
 8021462:	d008      	beq.n	8021476 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8021464:	4b07      	ldr	r3, [pc, #28]	; (8021484 <ip4_input_accept+0x50>)
 8021466:	695b      	ldr	r3, [r3, #20]
 8021468:	6879      	ldr	r1, [r7, #4]
 802146a:	4618      	mov	r0, r3
 802146c:	f000 fa0c 	bl	8021888 <ip4_addr_isbroadcast_u32>
 8021470:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8021472:	2b00      	cmp	r3, #0
 8021474:	d001      	beq.n	802147a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8021476:	2301      	movs	r3, #1
 8021478:	e000      	b.n	802147c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 802147a:	2300      	movs	r3, #0
}
 802147c:	4618      	mov	r0, r3
 802147e:	3708      	adds	r7, #8
 8021480:	46bd      	mov	sp, r7
 8021482:	bd80      	pop	{r7, pc}
 8021484:	20010810 	.word	0x20010810

08021488 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8021488:	b580      	push	{r7, lr}
 802148a:	b086      	sub	sp, #24
 802148c:	af00      	add	r7, sp, #0
 802148e:	6078      	str	r0, [r7, #4]
 8021490:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8021492:	687b      	ldr	r3, [r7, #4]
 8021494:	685b      	ldr	r3, [r3, #4]
 8021496:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8021498:	697b      	ldr	r3, [r7, #20]
 802149a:	781b      	ldrb	r3, [r3, #0]
 802149c:	091b      	lsrs	r3, r3, #4
 802149e:	b2db      	uxtb	r3, r3
 80214a0:	2b04      	cmp	r3, #4
 80214a2:	d004      	beq.n	80214ae <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80214a4:	6878      	ldr	r0, [r7, #4]
 80214a6:	f7fd fdf1 	bl	801f08c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80214aa:	2300      	movs	r3, #0
 80214ac:	e0fd      	b.n	80216aa <ip4_input+0x222>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80214ae:	697b      	ldr	r3, [r7, #20]
 80214b0:	781b      	ldrb	r3, [r3, #0]
 80214b2:	f003 030f 	and.w	r3, r3, #15
 80214b6:	b2db      	uxtb	r3, r3
 80214b8:	009b      	lsls	r3, r3, #2
 80214ba:	b2db      	uxtb	r3, r3
 80214bc:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80214be:	697b      	ldr	r3, [r7, #20]
 80214c0:	885b      	ldrh	r3, [r3, #2]
 80214c2:	b29b      	uxth	r3, r3
 80214c4:	4618      	mov	r0, r3
 80214c6:	f7fc fa05 	bl	801d8d4 <lwip_htons>
 80214ca:	4603      	mov	r3, r0
 80214cc:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80214ce:	687b      	ldr	r3, [r7, #4]
 80214d0:	891b      	ldrh	r3, [r3, #8]
 80214d2:	89ba      	ldrh	r2, [r7, #12]
 80214d4:	429a      	cmp	r2, r3
 80214d6:	d204      	bcs.n	80214e2 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80214d8:	89bb      	ldrh	r3, [r7, #12]
 80214da:	4619      	mov	r1, r3
 80214dc:	6878      	ldr	r0, [r7, #4]
 80214de:	f7fd fc4f 	bl	801ed80 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80214e2:	687b      	ldr	r3, [r7, #4]
 80214e4:	895b      	ldrh	r3, [r3, #10]
 80214e6:	89fa      	ldrh	r2, [r7, #14]
 80214e8:	429a      	cmp	r2, r3
 80214ea:	d807      	bhi.n	80214fc <ip4_input+0x74>
 80214ec:	687b      	ldr	r3, [r7, #4]
 80214ee:	891b      	ldrh	r3, [r3, #8]
 80214f0:	89ba      	ldrh	r2, [r7, #12]
 80214f2:	429a      	cmp	r2, r3
 80214f4:	d802      	bhi.n	80214fc <ip4_input+0x74>
 80214f6:	89fb      	ldrh	r3, [r7, #14]
 80214f8:	2b13      	cmp	r3, #19
 80214fa:	d804      	bhi.n	8021506 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80214fc:	6878      	ldr	r0, [r7, #4]
 80214fe:	f7fd fdc5 	bl	801f08c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8021502:	2300      	movs	r3, #0
 8021504:	e0d1      	b.n	80216aa <ip4_input+0x222>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8021506:	697b      	ldr	r3, [r7, #20]
 8021508:	691b      	ldr	r3, [r3, #16]
 802150a:	4a6a      	ldr	r2, [pc, #424]	; (80216b4 <ip4_input+0x22c>)
 802150c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 802150e:	697b      	ldr	r3, [r7, #20]
 8021510:	68db      	ldr	r3, [r3, #12]
 8021512:	4a68      	ldr	r2, [pc, #416]	; (80216b4 <ip4_input+0x22c>)
 8021514:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8021516:	4b67      	ldr	r3, [pc, #412]	; (80216b4 <ip4_input+0x22c>)
 8021518:	695b      	ldr	r3, [r3, #20]
 802151a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 802151e:	2be0      	cmp	r3, #224	; 0xe0
 8021520:	d112      	bne.n	8021548 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8021522:	683b      	ldr	r3, [r7, #0]
 8021524:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8021528:	f003 0301 	and.w	r3, r3, #1
 802152c:	b2db      	uxtb	r3, r3
 802152e:	2b00      	cmp	r3, #0
 8021530:	d007      	beq.n	8021542 <ip4_input+0xba>
 8021532:	683b      	ldr	r3, [r7, #0]
 8021534:	3304      	adds	r3, #4
 8021536:	681b      	ldr	r3, [r3, #0]
 8021538:	2b00      	cmp	r3, #0
 802153a:	d002      	beq.n	8021542 <ip4_input+0xba>
      netif = inp;
 802153c:	683b      	ldr	r3, [r7, #0]
 802153e:	613b      	str	r3, [r7, #16]
 8021540:	e02a      	b.n	8021598 <ip4_input+0x110>
    } else {
      netif = NULL;
 8021542:	2300      	movs	r3, #0
 8021544:	613b      	str	r3, [r7, #16]
 8021546:	e027      	b.n	8021598 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8021548:	6838      	ldr	r0, [r7, #0]
 802154a:	f7ff ff73 	bl	8021434 <ip4_input_accept>
 802154e:	4603      	mov	r3, r0
 8021550:	2b00      	cmp	r3, #0
 8021552:	d002      	beq.n	802155a <ip4_input+0xd2>
      netif = inp;
 8021554:	683b      	ldr	r3, [r7, #0]
 8021556:	613b      	str	r3, [r7, #16]
 8021558:	e01e      	b.n	8021598 <ip4_input+0x110>
    } else {
      netif = NULL;
 802155a:	2300      	movs	r3, #0
 802155c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 802155e:	4b55      	ldr	r3, [pc, #340]	; (80216b4 <ip4_input+0x22c>)
 8021560:	695b      	ldr	r3, [r3, #20]
 8021562:	b2db      	uxtb	r3, r3
 8021564:	2b7f      	cmp	r3, #127	; 0x7f
 8021566:	d017      	beq.n	8021598 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8021568:	4b53      	ldr	r3, [pc, #332]	; (80216b8 <ip4_input+0x230>)
 802156a:	681b      	ldr	r3, [r3, #0]
 802156c:	613b      	str	r3, [r7, #16]
 802156e:	e00e      	b.n	802158e <ip4_input+0x106>
          if (netif == inp) {
 8021570:	693a      	ldr	r2, [r7, #16]
 8021572:	683b      	ldr	r3, [r7, #0]
 8021574:	429a      	cmp	r2, r3
 8021576:	d006      	beq.n	8021586 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8021578:	6938      	ldr	r0, [r7, #16]
 802157a:	f7ff ff5b 	bl	8021434 <ip4_input_accept>
 802157e:	4603      	mov	r3, r0
 8021580:	2b00      	cmp	r3, #0
 8021582:	d108      	bne.n	8021596 <ip4_input+0x10e>
 8021584:	e000      	b.n	8021588 <ip4_input+0x100>
            continue;
 8021586:	bf00      	nop
        NETIF_FOREACH(netif) {
 8021588:	693b      	ldr	r3, [r7, #16]
 802158a:	681b      	ldr	r3, [r3, #0]
 802158c:	613b      	str	r3, [r7, #16]
 802158e:	693b      	ldr	r3, [r7, #16]
 8021590:	2b00      	cmp	r3, #0
 8021592:	d1ed      	bne.n	8021570 <ip4_input+0xe8>
 8021594:	e000      	b.n	8021598 <ip4_input+0x110>
            break;
 8021596:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8021598:	4b46      	ldr	r3, [pc, #280]	; (80216b4 <ip4_input+0x22c>)
 802159a:	691b      	ldr	r3, [r3, #16]
 802159c:	6839      	ldr	r1, [r7, #0]
 802159e:	4618      	mov	r0, r3
 80215a0:	f000 f972 	bl	8021888 <ip4_addr_isbroadcast_u32>
 80215a4:	4603      	mov	r3, r0
 80215a6:	2b00      	cmp	r3, #0
 80215a8:	d105      	bne.n	80215b6 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80215aa:	4b42      	ldr	r3, [pc, #264]	; (80216b4 <ip4_input+0x22c>)
 80215ac:	691b      	ldr	r3, [r3, #16]
 80215ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80215b2:	2be0      	cmp	r3, #224	; 0xe0
 80215b4:	d104      	bne.n	80215c0 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80215b6:	6878      	ldr	r0, [r7, #4]
 80215b8:	f7fd fd68 	bl	801f08c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80215bc:	2300      	movs	r3, #0
 80215be:	e074      	b.n	80216aa <ip4_input+0x222>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80215c0:	693b      	ldr	r3, [r7, #16]
 80215c2:	2b00      	cmp	r3, #0
 80215c4:	d104      	bne.n	80215d0 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80215c6:	6878      	ldr	r0, [r7, #4]
 80215c8:	f7fd fd60 	bl	801f08c <pbuf_free>
    return ERR_OK;
 80215cc:	2300      	movs	r3, #0
 80215ce:	e06c      	b.n	80216aa <ip4_input+0x222>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80215d0:	697b      	ldr	r3, [r7, #20]
 80215d2:	88db      	ldrh	r3, [r3, #6]
 80215d4:	b29b      	uxth	r3, r3
 80215d6:	461a      	mov	r2, r3
 80215d8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80215dc:	4013      	ands	r3, r2
 80215de:	2b00      	cmp	r3, #0
 80215e0:	d00b      	beq.n	80215fa <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80215e2:	6878      	ldr	r0, [r7, #4]
 80215e4:	f000 fd26 	bl	8022034 <ip4_reass>
 80215e8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80215ea:	687b      	ldr	r3, [r7, #4]
 80215ec:	2b00      	cmp	r3, #0
 80215ee:	d101      	bne.n	80215f4 <ip4_input+0x16c>
      return ERR_OK;
 80215f0:	2300      	movs	r3, #0
 80215f2:	e05a      	b.n	80216aa <ip4_input+0x222>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80215f4:	687b      	ldr	r3, [r7, #4]
 80215f6:	685b      	ldr	r3, [r3, #4]
 80215f8:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80215fa:	4a2e      	ldr	r2, [pc, #184]	; (80216b4 <ip4_input+0x22c>)
 80215fc:	693b      	ldr	r3, [r7, #16]
 80215fe:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8021600:	4a2c      	ldr	r2, [pc, #176]	; (80216b4 <ip4_input+0x22c>)
 8021602:	683b      	ldr	r3, [r7, #0]
 8021604:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8021606:	4a2b      	ldr	r2, [pc, #172]	; (80216b4 <ip4_input+0x22c>)
 8021608:	697b      	ldr	r3, [r7, #20]
 802160a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 802160c:	697b      	ldr	r3, [r7, #20]
 802160e:	781b      	ldrb	r3, [r3, #0]
 8021610:	f003 030f 	and.w	r3, r3, #15
 8021614:	b2db      	uxtb	r3, r3
 8021616:	009b      	lsls	r3, r3, #2
 8021618:	b2db      	uxtb	r3, r3
 802161a:	b29a      	uxth	r2, r3
 802161c:	4b25      	ldr	r3, [pc, #148]	; (80216b4 <ip4_input+0x22c>)
 802161e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8021620:	89fb      	ldrh	r3, [r7, #14]
 8021622:	4619      	mov	r1, r3
 8021624:	6878      	ldr	r0, [r7, #4]
 8021626:	f7fd fcab 	bl	801ef80 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 802162a:	697b      	ldr	r3, [r7, #20]
 802162c:	7a5b      	ldrb	r3, [r3, #9]
 802162e:	2b01      	cmp	r3, #1
 8021630:	d006      	beq.n	8021640 <ip4_input+0x1b8>
 8021632:	2b11      	cmp	r3, #17
 8021634:	d109      	bne.n	802164a <ip4_input+0x1c2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8021636:	6839      	ldr	r1, [r7, #0]
 8021638:	6878      	ldr	r0, [r7, #4]
 802163a:	f7fe f9b5 	bl	801f9a8 <udp_input>
        break;
 802163e:	e021      	b.n	8021684 <ip4_input+0x1fc>
        break;
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8021640:	6839      	ldr	r1, [r7, #0]
 8021642:	6878      	ldr	r0, [r7, #4]
 8021644:	f7ff fcf8 	bl	8021038 <icmp_input>
        break;
 8021648:	e01c      	b.n	8021684 <ip4_input+0x1fc>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 802164a:	4b1a      	ldr	r3, [pc, #104]	; (80216b4 <ip4_input+0x22c>)
 802164c:	695b      	ldr	r3, [r3, #20]
 802164e:	6939      	ldr	r1, [r7, #16]
 8021650:	4618      	mov	r0, r3
 8021652:	f000 f919 	bl	8021888 <ip4_addr_isbroadcast_u32>
 8021656:	4603      	mov	r3, r0
 8021658:	2b00      	cmp	r3, #0
 802165a:	d10f      	bne.n	802167c <ip4_input+0x1f4>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 802165c:	4b15      	ldr	r3, [pc, #84]	; (80216b4 <ip4_input+0x22c>)
 802165e:	695b      	ldr	r3, [r3, #20]
 8021660:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8021664:	2be0      	cmp	r3, #224	; 0xe0
 8021666:	d009      	beq.n	802167c <ip4_input+0x1f4>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8021668:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 802166c:	4619      	mov	r1, r3
 802166e:	6878      	ldr	r0, [r7, #4]
 8021670:	f7fd fcf9 	bl	801f066 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8021674:	2102      	movs	r1, #2
 8021676:	6878      	ldr	r0, [r7, #4]
 8021678:	f7ff fde2 	bl	8021240 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 802167c:	6878      	ldr	r0, [r7, #4]
 802167e:	f7fd fd05 	bl	801f08c <pbuf_free>
        break;
 8021682:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8021684:	4b0b      	ldr	r3, [pc, #44]	; (80216b4 <ip4_input+0x22c>)
 8021686:	2200      	movs	r2, #0
 8021688:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 802168a:	4b0a      	ldr	r3, [pc, #40]	; (80216b4 <ip4_input+0x22c>)
 802168c:	2200      	movs	r2, #0
 802168e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8021690:	4b08      	ldr	r3, [pc, #32]	; (80216b4 <ip4_input+0x22c>)
 8021692:	2200      	movs	r2, #0
 8021694:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8021696:	4b07      	ldr	r3, [pc, #28]	; (80216b4 <ip4_input+0x22c>)
 8021698:	2200      	movs	r2, #0
 802169a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 802169c:	4b05      	ldr	r3, [pc, #20]	; (80216b4 <ip4_input+0x22c>)
 802169e:	2200      	movs	r2, #0
 80216a0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80216a2:	4b04      	ldr	r3, [pc, #16]	; (80216b4 <ip4_input+0x22c>)
 80216a4:	2200      	movs	r2, #0
 80216a6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80216a8:	2300      	movs	r3, #0
}
 80216aa:	4618      	mov	r0, r3
 80216ac:	3718      	adds	r7, #24
 80216ae:	46bd      	mov	sp, r7
 80216b0:	bd80      	pop	{r7, pc}
 80216b2:	bf00      	nop
 80216b4:	20010810 	.word	0x20010810
 80216b8:	20013e20 	.word	0x20013e20

080216bc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80216bc:	b580      	push	{r7, lr}
 80216be:	b08a      	sub	sp, #40	; 0x28
 80216c0:	af04      	add	r7, sp, #16
 80216c2:	60f8      	str	r0, [r7, #12]
 80216c4:	60b9      	str	r1, [r7, #8]
 80216c6:	607a      	str	r2, [r7, #4]
 80216c8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80216ca:	68bb      	ldr	r3, [r7, #8]
 80216cc:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80216ce:	687b      	ldr	r3, [r7, #4]
 80216d0:	2b00      	cmp	r3, #0
 80216d2:	d009      	beq.n	80216e8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80216d4:	68bb      	ldr	r3, [r7, #8]
 80216d6:	2b00      	cmp	r3, #0
 80216d8:	d003      	beq.n	80216e2 <ip4_output_if+0x26>
 80216da:	68bb      	ldr	r3, [r7, #8]
 80216dc:	681b      	ldr	r3, [r3, #0]
 80216de:	2b00      	cmp	r3, #0
 80216e0:	d102      	bne.n	80216e8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80216e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80216e4:	3304      	adds	r3, #4
 80216e6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80216e8:	78fa      	ldrb	r2, [r7, #3]
 80216ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80216ec:	9302      	str	r3, [sp, #8]
 80216ee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80216f2:	9301      	str	r3, [sp, #4]
 80216f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80216f8:	9300      	str	r3, [sp, #0]
 80216fa:	4613      	mov	r3, r2
 80216fc:	687a      	ldr	r2, [r7, #4]
 80216fe:	6979      	ldr	r1, [r7, #20]
 8021700:	68f8      	ldr	r0, [r7, #12]
 8021702:	f000 f805 	bl	8021710 <ip4_output_if_src>
 8021706:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8021708:	4618      	mov	r0, r3
 802170a:	3718      	adds	r7, #24
 802170c:	46bd      	mov	sp, r7
 802170e:	bd80      	pop	{r7, pc}

08021710 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8021710:	b580      	push	{r7, lr}
 8021712:	b088      	sub	sp, #32
 8021714:	af00      	add	r7, sp, #0
 8021716:	60f8      	str	r0, [r7, #12]
 8021718:	60b9      	str	r1, [r7, #8]
 802171a:	607a      	str	r2, [r7, #4]
 802171c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 802171e:	68fb      	ldr	r3, [r7, #12]
 8021720:	7b9b      	ldrb	r3, [r3, #14]
 8021722:	2b01      	cmp	r3, #1
 8021724:	d006      	beq.n	8021734 <ip4_output_if_src+0x24>
 8021726:	4b52      	ldr	r3, [pc, #328]	; (8021870 <ip4_output_if_src+0x160>)
 8021728:	f44f 7255 	mov.w	r2, #852	; 0x354
 802172c:	4951      	ldr	r1, [pc, #324]	; (8021874 <ip4_output_if_src+0x164>)
 802172e:	4852      	ldr	r0, [pc, #328]	; (8021878 <ip4_output_if_src+0x168>)
 8021730:	f001 f9e4 	bl	8022afc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8021734:	687b      	ldr	r3, [r7, #4]
 8021736:	2b00      	cmp	r3, #0
 8021738:	d060      	beq.n	80217fc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 802173a:	2314      	movs	r3, #20
 802173c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 802173e:	2114      	movs	r1, #20
 8021740:	68f8      	ldr	r0, [r7, #12]
 8021742:	f7fd fc0d 	bl	801ef60 <pbuf_add_header>
 8021746:	4603      	mov	r3, r0
 8021748:	2b00      	cmp	r3, #0
 802174a:	d002      	beq.n	8021752 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 802174c:	f06f 0301 	mvn.w	r3, #1
 8021750:	e089      	b.n	8021866 <ip4_output_if_src+0x156>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8021752:	68fb      	ldr	r3, [r7, #12]
 8021754:	685b      	ldr	r3, [r3, #4]
 8021756:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8021758:	68fb      	ldr	r3, [r7, #12]
 802175a:	895b      	ldrh	r3, [r3, #10]
 802175c:	2b13      	cmp	r3, #19
 802175e:	d806      	bhi.n	802176e <ip4_output_if_src+0x5e>
 8021760:	4b43      	ldr	r3, [pc, #268]	; (8021870 <ip4_output_if_src+0x160>)
 8021762:	f44f 7262 	mov.w	r2, #904	; 0x388
 8021766:	4945      	ldr	r1, [pc, #276]	; (802187c <ip4_output_if_src+0x16c>)
 8021768:	4843      	ldr	r0, [pc, #268]	; (8021878 <ip4_output_if_src+0x168>)
 802176a:	f001 f9c7 	bl	8022afc <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 802176e:	69fb      	ldr	r3, [r7, #28]
 8021770:	78fa      	ldrb	r2, [r7, #3]
 8021772:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8021774:	69fb      	ldr	r3, [r7, #28]
 8021776:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 802177a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 802177c:	687b      	ldr	r3, [r7, #4]
 802177e:	681a      	ldr	r2, [r3, #0]
 8021780:	69fb      	ldr	r3, [r7, #28]
 8021782:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8021784:	8b7b      	ldrh	r3, [r7, #26]
 8021786:	089b      	lsrs	r3, r3, #2
 8021788:	b29b      	uxth	r3, r3
 802178a:	b2db      	uxtb	r3, r3
 802178c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021790:	b2da      	uxtb	r2, r3
 8021792:	69fb      	ldr	r3, [r7, #28]
 8021794:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8021796:	69fb      	ldr	r3, [r7, #28]
 8021798:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 802179c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 802179e:	68fb      	ldr	r3, [r7, #12]
 80217a0:	891b      	ldrh	r3, [r3, #8]
 80217a2:	4618      	mov	r0, r3
 80217a4:	f7fc f896 	bl	801d8d4 <lwip_htons>
 80217a8:	4603      	mov	r3, r0
 80217aa:	461a      	mov	r2, r3
 80217ac:	69fb      	ldr	r3, [r7, #28]
 80217ae:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80217b0:	69fb      	ldr	r3, [r7, #28]
 80217b2:	2200      	movs	r2, #0
 80217b4:	719a      	strb	r2, [r3, #6]
 80217b6:	2200      	movs	r2, #0
 80217b8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80217ba:	4b31      	ldr	r3, [pc, #196]	; (8021880 <ip4_output_if_src+0x170>)
 80217bc:	881b      	ldrh	r3, [r3, #0]
 80217be:	4618      	mov	r0, r3
 80217c0:	f7fc f888 	bl	801d8d4 <lwip_htons>
 80217c4:	4603      	mov	r3, r0
 80217c6:	461a      	mov	r2, r3
 80217c8:	69fb      	ldr	r3, [r7, #28]
 80217ca:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80217cc:	4b2c      	ldr	r3, [pc, #176]	; (8021880 <ip4_output_if_src+0x170>)
 80217ce:	881b      	ldrh	r3, [r3, #0]
 80217d0:	3301      	adds	r3, #1
 80217d2:	b29a      	uxth	r2, r3
 80217d4:	4b2a      	ldr	r3, [pc, #168]	; (8021880 <ip4_output_if_src+0x170>)
 80217d6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80217d8:	68bb      	ldr	r3, [r7, #8]
 80217da:	2b00      	cmp	r3, #0
 80217dc:	d104      	bne.n	80217e8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80217de:	4b29      	ldr	r3, [pc, #164]	; (8021884 <ip4_output_if_src+0x174>)
 80217e0:	681a      	ldr	r2, [r3, #0]
 80217e2:	69fb      	ldr	r3, [r7, #28]
 80217e4:	60da      	str	r2, [r3, #12]
 80217e6:	e003      	b.n	80217f0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80217e8:	68bb      	ldr	r3, [r7, #8]
 80217ea:	681a      	ldr	r2, [r3, #0]
 80217ec:	69fb      	ldr	r3, [r7, #28]
 80217ee:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80217f0:	69fb      	ldr	r3, [r7, #28]
 80217f2:	2200      	movs	r2, #0
 80217f4:	729a      	strb	r2, [r3, #10]
 80217f6:	2200      	movs	r2, #0
 80217f8:	72da      	strb	r2, [r3, #11]
 80217fa:	e00f      	b.n	802181c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80217fc:	68fb      	ldr	r3, [r7, #12]
 80217fe:	895b      	ldrh	r3, [r3, #10]
 8021800:	2b13      	cmp	r3, #19
 8021802:	d802      	bhi.n	802180a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8021804:	f06f 0301 	mvn.w	r3, #1
 8021808:	e02d      	b.n	8021866 <ip4_output_if_src+0x156>
    }
    iphdr = (struct ip_hdr *)p->payload;
 802180a:	68fb      	ldr	r3, [r7, #12]
 802180c:	685b      	ldr	r3, [r3, #4]
 802180e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8021810:	69fb      	ldr	r3, [r7, #28]
 8021812:	691b      	ldr	r3, [r3, #16]
 8021814:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8021816:	f107 0314 	add.w	r3, r7, #20
 802181a:	607b      	str	r3, [r7, #4]

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: %c%c%"U16_F"\n", netif->name[0], netif->name[1], (u16_t)netif->num));
  ip4_debug_print(p);

#if ENABLE_LOOPBACK
  if (ip4_addr_cmp(dest, netif_ip4_addr(netif))
 802181c:	687b      	ldr	r3, [r7, #4]
 802181e:	681a      	ldr	r2, [r3, #0]
 8021820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021822:	3304      	adds	r3, #4
 8021824:	681b      	ldr	r3, [r3, #0]
 8021826:	429a      	cmp	r2, r3
 8021828:	d105      	bne.n	8021836 <ip4_output_if_src+0x126>
      || ip4_addr_isloopback(dest)
#endif /* !LWIP_HAVE_LOOPIF */
     ) {
    /* Packet to self, enqueue it for loopback */
    LWIP_DEBUGF(IP_DEBUG, ("netif_loop_output()"));
    return netif_loop_output(netif, p);
 802182a:	68f9      	ldr	r1, [r7, #12]
 802182c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802182e:	f7fd f86f 	bl	801e910 <netif_loop_output>
 8021832:	4603      	mov	r3, r0
 8021834:	e017      	b.n	8021866 <ip4_output_if_src+0x156>
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8021836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802183a:	2b00      	cmp	r3, #0
 802183c:	d00c      	beq.n	8021858 <ip4_output_if_src+0x148>
 802183e:	68fb      	ldr	r3, [r7, #12]
 8021840:	891a      	ldrh	r2, [r3, #8]
 8021842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8021846:	429a      	cmp	r2, r3
 8021848:	d906      	bls.n	8021858 <ip4_output_if_src+0x148>
    return ip4_frag(p, netif, dest);
 802184a:	687a      	ldr	r2, [r7, #4]
 802184c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 802184e:	68f8      	ldr	r0, [r7, #12]
 8021850:	f000 fde4 	bl	802241c <ip4_frag>
 8021854:	4603      	mov	r3, r0
 8021856:	e006      	b.n	8021866 <ip4_output_if_src+0x156>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8021858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802185a:	695b      	ldr	r3, [r3, #20]
 802185c:	687a      	ldr	r2, [r7, #4]
 802185e:	68f9      	ldr	r1, [r7, #12]
 8021860:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8021862:	4798      	blx	r3
 8021864:	4603      	mov	r3, r0
}
 8021866:	4618      	mov	r0, r3
 8021868:	3720      	adds	r7, #32
 802186a:	46bd      	mov	sp, r7
 802186c:	bd80      	pop	{r7, pc}
 802186e:	bf00      	nop
 8021870:	08028a44 	.word	0x08028a44
 8021874:	08028a78 	.word	0x08028a78
 8021878:	08028a84 	.word	0x08028a84
 802187c:	08028aac 	.word	0x08028aac
 8021880:	2001432a 	.word	0x2001432a
 8021884:	08029250 	.word	0x08029250

08021888 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8021888:	b480      	push	{r7}
 802188a:	b085      	sub	sp, #20
 802188c:	af00      	add	r7, sp, #0
 802188e:	6078      	str	r0, [r7, #4]
 8021890:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8021892:	687b      	ldr	r3, [r7, #4]
 8021894:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8021896:	687b      	ldr	r3, [r7, #4]
 8021898:	f1b3 3fff 	cmp.w	r3, #4294967295
 802189c:	d002      	beq.n	80218a4 <ip4_addr_isbroadcast_u32+0x1c>
 802189e:	687b      	ldr	r3, [r7, #4]
 80218a0:	2b00      	cmp	r3, #0
 80218a2:	d101      	bne.n	80218a8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80218a4:	2301      	movs	r3, #1
 80218a6:	e02a      	b.n	80218fe <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80218a8:	683b      	ldr	r3, [r7, #0]
 80218aa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80218ae:	f003 0302 	and.w	r3, r3, #2
 80218b2:	2b00      	cmp	r3, #0
 80218b4:	d101      	bne.n	80218ba <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80218b6:	2300      	movs	r3, #0
 80218b8:	e021      	b.n	80218fe <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80218ba:	683b      	ldr	r3, [r7, #0]
 80218bc:	3304      	adds	r3, #4
 80218be:	681b      	ldr	r3, [r3, #0]
 80218c0:	687a      	ldr	r2, [r7, #4]
 80218c2:	429a      	cmp	r2, r3
 80218c4:	d101      	bne.n	80218ca <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80218c6:	2300      	movs	r3, #0
 80218c8:	e019      	b.n	80218fe <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80218ca:	68fa      	ldr	r2, [r7, #12]
 80218cc:	683b      	ldr	r3, [r7, #0]
 80218ce:	3304      	adds	r3, #4
 80218d0:	681b      	ldr	r3, [r3, #0]
 80218d2:	405a      	eors	r2, r3
 80218d4:	683b      	ldr	r3, [r7, #0]
 80218d6:	3308      	adds	r3, #8
 80218d8:	681b      	ldr	r3, [r3, #0]
 80218da:	4013      	ands	r3, r2
 80218dc:	2b00      	cmp	r3, #0
 80218de:	d10d      	bne.n	80218fc <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80218e0:	683b      	ldr	r3, [r7, #0]
 80218e2:	3308      	adds	r3, #8
 80218e4:	681b      	ldr	r3, [r3, #0]
 80218e6:	43da      	mvns	r2, r3
 80218e8:	687b      	ldr	r3, [r7, #4]
 80218ea:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80218ec:	683b      	ldr	r3, [r7, #0]
 80218ee:	3308      	adds	r3, #8
 80218f0:	681b      	ldr	r3, [r3, #0]
 80218f2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80218f4:	429a      	cmp	r2, r3
 80218f6:	d101      	bne.n	80218fc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80218f8:	2301      	movs	r3, #1
 80218fa:	e000      	b.n	80218fe <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80218fc:	2300      	movs	r3, #0
  }
}
 80218fe:	4618      	mov	r0, r3
 8021900:	3714      	adds	r7, #20
 8021902:	46bd      	mov	sp, r7
 8021904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021908:	4770      	bx	lr
	...

0802190c <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 802190c:	b580      	push	{r7, lr}
 802190e:	b082      	sub	sp, #8
 8021910:	af00      	add	r7, sp, #0
 8021912:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8021914:	2210      	movs	r2, #16
 8021916:	4904      	ldr	r1, [pc, #16]	; (8021928 <ip4addr_ntoa+0x1c>)
 8021918:	6878      	ldr	r0, [r7, #4]
 802191a:	f000 f807 	bl	802192c <ip4addr_ntoa_r>
 802191e:	4603      	mov	r3, r0
}
 8021920:	4618      	mov	r0, r3
 8021922:	3708      	adds	r7, #8
 8021924:	46bd      	mov	sp, r7
 8021926:	bd80      	pop	{r7, pc}
 8021928:	2001432c 	.word	0x2001432c

0802192c <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 802192c:	b480      	push	{r7}
 802192e:	b08d      	sub	sp, #52	; 0x34
 8021930:	af00      	add	r7, sp, #0
 8021932:	60f8      	str	r0, [r7, #12]
 8021934:	60b9      	str	r1, [r7, #8]
 8021936:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 8021938:	2300      	movs	r3, #0
 802193a:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 802193c:	68fb      	ldr	r3, [r7, #12]
 802193e:	681b      	ldr	r3, [r3, #0]
 8021940:	61bb      	str	r3, [r7, #24]

  rp = buf;
 8021942:	68bb      	ldr	r3, [r7, #8]
 8021944:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 8021946:	f107 0318 	add.w	r3, r7, #24
 802194a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 802194c:	2300      	movs	r3, #0
 802194e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8021952:	e058      	b.n	8021a06 <ip4addr_ntoa_r+0xda>
    i = 0;
 8021954:	2300      	movs	r3, #0
 8021956:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 802195a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802195c:	781a      	ldrb	r2, [r3, #0]
 802195e:	4b32      	ldr	r3, [pc, #200]	; (8021a28 <ip4addr_ntoa_r+0xfc>)
 8021960:	fba3 1302 	umull	r1, r3, r3, r2
 8021964:	08d9      	lsrs	r1, r3, #3
 8021966:	460b      	mov	r3, r1
 8021968:	009b      	lsls	r3, r3, #2
 802196a:	440b      	add	r3, r1
 802196c:	005b      	lsls	r3, r3, #1
 802196e:	1ad3      	subs	r3, r2, r3
 8021970:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 8021972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021974:	781b      	ldrb	r3, [r3, #0]
 8021976:	4a2c      	ldr	r2, [pc, #176]	; (8021a28 <ip4addr_ntoa_r+0xfc>)
 8021978:	fba2 2303 	umull	r2, r3, r2, r3
 802197c:	08db      	lsrs	r3, r3, #3
 802197e:	b2da      	uxtb	r2, r3
 8021980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021982:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8021984:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021988:	1c5a      	adds	r2, r3, #1
 802198a:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 802198e:	4619      	mov	r1, r3
 8021990:	7ffb      	ldrb	r3, [r7, #31]
 8021992:	3330      	adds	r3, #48	; 0x30
 8021994:	b2da      	uxtb	r2, r3
 8021996:	f101 0330 	add.w	r3, r1, #48	; 0x30
 802199a:	443b      	add	r3, r7
 802199c:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 80219a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80219a2:	781b      	ldrb	r3, [r3, #0]
 80219a4:	2b00      	cmp	r3, #0
 80219a6:	d1d8      	bne.n	802195a <ip4addr_ntoa_r+0x2e>
    while (i--) {
 80219a8:	e011      	b.n	80219ce <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 80219aa:	6a3b      	ldr	r3, [r7, #32]
 80219ac:	1c5a      	adds	r2, r3, #1
 80219ae:	623a      	str	r2, [r7, #32]
 80219b0:	687a      	ldr	r2, [r7, #4]
 80219b2:	429a      	cmp	r2, r3
 80219b4:	dc01      	bgt.n	80219ba <ip4addr_ntoa_r+0x8e>
        return NULL;
 80219b6:	2300      	movs	r3, #0
 80219b8:	e030      	b.n	8021a1c <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 80219ba:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80219be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80219c0:	1c59      	adds	r1, r3, #1
 80219c2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80219c4:	3230      	adds	r2, #48	; 0x30
 80219c6:	443a      	add	r2, r7
 80219c8:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 80219cc:	701a      	strb	r2, [r3, #0]
    while (i--) {
 80219ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80219d2:	1e5a      	subs	r2, r3, #1
 80219d4:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 80219d8:	2b00      	cmp	r3, #0
 80219da:	d1e6      	bne.n	80219aa <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 80219dc:	6a3b      	ldr	r3, [r7, #32]
 80219de:	1c5a      	adds	r2, r3, #1
 80219e0:	623a      	str	r2, [r7, #32]
 80219e2:	687a      	ldr	r2, [r7, #4]
 80219e4:	429a      	cmp	r2, r3
 80219e6:	dc01      	bgt.n	80219ec <ip4addr_ntoa_r+0xc0>
      return NULL;
 80219e8:	2300      	movs	r3, #0
 80219ea:	e017      	b.n	8021a1c <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 80219ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80219ee:	1c5a      	adds	r2, r3, #1
 80219f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80219f2:	222e      	movs	r2, #46	; 0x2e
 80219f4:	701a      	strb	r2, [r3, #0]
    ap++;
 80219f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80219f8:	3301      	adds	r3, #1
 80219fa:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 80219fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021a00:	3301      	adds	r3, #1
 8021a02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8021a06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021a0a:	2b03      	cmp	r3, #3
 8021a0c:	d9a2      	bls.n	8021954 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 8021a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021a10:	3b01      	subs	r3, #1
 8021a12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021a16:	2200      	movs	r2, #0
 8021a18:	701a      	strb	r2, [r3, #0]
  return buf;
 8021a1a:	68bb      	ldr	r3, [r7, #8]
}
 8021a1c:	4618      	mov	r0, r3
 8021a1e:	3734      	adds	r7, #52	; 0x34
 8021a20:	46bd      	mov	sp, r7
 8021a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a26:	4770      	bx	lr
 8021a28:	cccccccd 	.word	0xcccccccd

08021a2c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8021a2c:	b580      	push	{r7, lr}
 8021a2e:	b084      	sub	sp, #16
 8021a30:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8021a32:	2300      	movs	r3, #0
 8021a34:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8021a36:	4b12      	ldr	r3, [pc, #72]	; (8021a80 <ip_reass_tmr+0x54>)
 8021a38:	681b      	ldr	r3, [r3, #0]
 8021a3a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8021a3c:	e018      	b.n	8021a70 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8021a3e:	68fb      	ldr	r3, [r7, #12]
 8021a40:	7fdb      	ldrb	r3, [r3, #31]
 8021a42:	2b00      	cmp	r3, #0
 8021a44:	d00b      	beq.n	8021a5e <ip_reass_tmr+0x32>
      r->timer--;
 8021a46:	68fb      	ldr	r3, [r7, #12]
 8021a48:	7fdb      	ldrb	r3, [r3, #31]
 8021a4a:	3b01      	subs	r3, #1
 8021a4c:	b2da      	uxtb	r2, r3
 8021a4e:	68fb      	ldr	r3, [r7, #12]
 8021a50:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8021a52:	68fb      	ldr	r3, [r7, #12]
 8021a54:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8021a56:	68fb      	ldr	r3, [r7, #12]
 8021a58:	681b      	ldr	r3, [r3, #0]
 8021a5a:	60fb      	str	r3, [r7, #12]
 8021a5c:	e008      	b.n	8021a70 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8021a5e:	68fb      	ldr	r3, [r7, #12]
 8021a60:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8021a62:	68fb      	ldr	r3, [r7, #12]
 8021a64:	681b      	ldr	r3, [r3, #0]
 8021a66:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8021a68:	68b9      	ldr	r1, [r7, #8]
 8021a6a:	6878      	ldr	r0, [r7, #4]
 8021a6c:	f000 f80a 	bl	8021a84 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8021a70:	68fb      	ldr	r3, [r7, #12]
 8021a72:	2b00      	cmp	r3, #0
 8021a74:	d1e3      	bne.n	8021a3e <ip_reass_tmr+0x12>
    }
  }
}
 8021a76:	bf00      	nop
 8021a78:	bf00      	nop
 8021a7a:	3710      	adds	r7, #16
 8021a7c:	46bd      	mov	sp, r7
 8021a7e:	bd80      	pop	{r7, pc}
 8021a80:	2001433c 	.word	0x2001433c

08021a84 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8021a84:	b580      	push	{r7, lr}
 8021a86:	b088      	sub	sp, #32
 8021a88:	af00      	add	r7, sp, #0
 8021a8a:	6078      	str	r0, [r7, #4]
 8021a8c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8021a8e:	2300      	movs	r3, #0
 8021a90:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8021a92:	683a      	ldr	r2, [r7, #0]
 8021a94:	687b      	ldr	r3, [r7, #4]
 8021a96:	429a      	cmp	r2, r3
 8021a98:	d105      	bne.n	8021aa6 <ip_reass_free_complete_datagram+0x22>
 8021a9a:	4b45      	ldr	r3, [pc, #276]	; (8021bb0 <ip_reass_free_complete_datagram+0x12c>)
 8021a9c:	22ab      	movs	r2, #171	; 0xab
 8021a9e:	4945      	ldr	r1, [pc, #276]	; (8021bb4 <ip_reass_free_complete_datagram+0x130>)
 8021aa0:	4845      	ldr	r0, [pc, #276]	; (8021bb8 <ip_reass_free_complete_datagram+0x134>)
 8021aa2:	f001 f82b 	bl	8022afc <iprintf>
  if (prev != NULL) {
 8021aa6:	683b      	ldr	r3, [r7, #0]
 8021aa8:	2b00      	cmp	r3, #0
 8021aaa:	d00a      	beq.n	8021ac2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8021aac:	683b      	ldr	r3, [r7, #0]
 8021aae:	681b      	ldr	r3, [r3, #0]
 8021ab0:	687a      	ldr	r2, [r7, #4]
 8021ab2:	429a      	cmp	r2, r3
 8021ab4:	d005      	beq.n	8021ac2 <ip_reass_free_complete_datagram+0x3e>
 8021ab6:	4b3e      	ldr	r3, [pc, #248]	; (8021bb0 <ip_reass_free_complete_datagram+0x12c>)
 8021ab8:	22ad      	movs	r2, #173	; 0xad
 8021aba:	4940      	ldr	r1, [pc, #256]	; (8021bbc <ip_reass_free_complete_datagram+0x138>)
 8021abc:	483e      	ldr	r0, [pc, #248]	; (8021bb8 <ip_reass_free_complete_datagram+0x134>)
 8021abe:	f001 f81d 	bl	8022afc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8021ac2:	687b      	ldr	r3, [r7, #4]
 8021ac4:	685b      	ldr	r3, [r3, #4]
 8021ac6:	685b      	ldr	r3, [r3, #4]
 8021ac8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8021aca:	697b      	ldr	r3, [r7, #20]
 8021acc:	889b      	ldrh	r3, [r3, #4]
 8021ace:	b29b      	uxth	r3, r3
 8021ad0:	2b00      	cmp	r3, #0
 8021ad2:	d12a      	bne.n	8021b2a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8021ad4:	687b      	ldr	r3, [r7, #4]
 8021ad6:	685b      	ldr	r3, [r3, #4]
 8021ad8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8021ada:	697b      	ldr	r3, [r7, #20]
 8021adc:	681a      	ldr	r2, [r3, #0]
 8021ade:	687b      	ldr	r3, [r7, #4]
 8021ae0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8021ae2:	69bb      	ldr	r3, [r7, #24]
 8021ae4:	6858      	ldr	r0, [r3, #4]
 8021ae6:	687b      	ldr	r3, [r7, #4]
 8021ae8:	3308      	adds	r3, #8
 8021aea:	2214      	movs	r2, #20
 8021aec:	4619      	mov	r1, r3
 8021aee:	f000 fef5 	bl	80228dc <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8021af2:	2101      	movs	r1, #1
 8021af4:	69b8      	ldr	r0, [r7, #24]
 8021af6:	f7ff fbb3 	bl	8021260 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8021afa:	69b8      	ldr	r0, [r7, #24]
 8021afc:	f7fd fb4e 	bl	801f19c <pbuf_clen>
 8021b00:	4603      	mov	r3, r0
 8021b02:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8021b04:	8bfa      	ldrh	r2, [r7, #30]
 8021b06:	8a7b      	ldrh	r3, [r7, #18]
 8021b08:	4413      	add	r3, r2
 8021b0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8021b0e:	db05      	blt.n	8021b1c <ip_reass_free_complete_datagram+0x98>
 8021b10:	4b27      	ldr	r3, [pc, #156]	; (8021bb0 <ip_reass_free_complete_datagram+0x12c>)
 8021b12:	22bc      	movs	r2, #188	; 0xbc
 8021b14:	492a      	ldr	r1, [pc, #168]	; (8021bc0 <ip_reass_free_complete_datagram+0x13c>)
 8021b16:	4828      	ldr	r0, [pc, #160]	; (8021bb8 <ip_reass_free_complete_datagram+0x134>)
 8021b18:	f000 fff0 	bl	8022afc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8021b1c:	8bfa      	ldrh	r2, [r7, #30]
 8021b1e:	8a7b      	ldrh	r3, [r7, #18]
 8021b20:	4413      	add	r3, r2
 8021b22:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8021b24:	69b8      	ldr	r0, [r7, #24]
 8021b26:	f7fd fab1 	bl	801f08c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8021b2a:	687b      	ldr	r3, [r7, #4]
 8021b2c:	685b      	ldr	r3, [r3, #4]
 8021b2e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8021b30:	e01f      	b.n	8021b72 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8021b32:	69bb      	ldr	r3, [r7, #24]
 8021b34:	685b      	ldr	r3, [r3, #4]
 8021b36:	617b      	str	r3, [r7, #20]
    pcur = p;
 8021b38:	69bb      	ldr	r3, [r7, #24]
 8021b3a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8021b3c:	697b      	ldr	r3, [r7, #20]
 8021b3e:	681b      	ldr	r3, [r3, #0]
 8021b40:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8021b42:	68f8      	ldr	r0, [r7, #12]
 8021b44:	f7fd fb2a 	bl	801f19c <pbuf_clen>
 8021b48:	4603      	mov	r3, r0
 8021b4a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8021b4c:	8bfa      	ldrh	r2, [r7, #30]
 8021b4e:	8a7b      	ldrh	r3, [r7, #18]
 8021b50:	4413      	add	r3, r2
 8021b52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8021b56:	db05      	blt.n	8021b64 <ip_reass_free_complete_datagram+0xe0>
 8021b58:	4b15      	ldr	r3, [pc, #84]	; (8021bb0 <ip_reass_free_complete_datagram+0x12c>)
 8021b5a:	22cc      	movs	r2, #204	; 0xcc
 8021b5c:	4918      	ldr	r1, [pc, #96]	; (8021bc0 <ip_reass_free_complete_datagram+0x13c>)
 8021b5e:	4816      	ldr	r0, [pc, #88]	; (8021bb8 <ip_reass_free_complete_datagram+0x134>)
 8021b60:	f000 ffcc 	bl	8022afc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8021b64:	8bfa      	ldrh	r2, [r7, #30]
 8021b66:	8a7b      	ldrh	r3, [r7, #18]
 8021b68:	4413      	add	r3, r2
 8021b6a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8021b6c:	68f8      	ldr	r0, [r7, #12]
 8021b6e:	f7fd fa8d 	bl	801f08c <pbuf_free>
  while (p != NULL) {
 8021b72:	69bb      	ldr	r3, [r7, #24]
 8021b74:	2b00      	cmp	r3, #0
 8021b76:	d1dc      	bne.n	8021b32 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8021b78:	6839      	ldr	r1, [r7, #0]
 8021b7a:	6878      	ldr	r0, [r7, #4]
 8021b7c:	f000 f8c2 	bl	8021d04 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8021b80:	4b10      	ldr	r3, [pc, #64]	; (8021bc4 <ip_reass_free_complete_datagram+0x140>)
 8021b82:	881b      	ldrh	r3, [r3, #0]
 8021b84:	8bfa      	ldrh	r2, [r7, #30]
 8021b86:	429a      	cmp	r2, r3
 8021b88:	d905      	bls.n	8021b96 <ip_reass_free_complete_datagram+0x112>
 8021b8a:	4b09      	ldr	r3, [pc, #36]	; (8021bb0 <ip_reass_free_complete_datagram+0x12c>)
 8021b8c:	22d2      	movs	r2, #210	; 0xd2
 8021b8e:	490e      	ldr	r1, [pc, #56]	; (8021bc8 <ip_reass_free_complete_datagram+0x144>)
 8021b90:	4809      	ldr	r0, [pc, #36]	; (8021bb8 <ip_reass_free_complete_datagram+0x134>)
 8021b92:	f000 ffb3 	bl	8022afc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8021b96:	4b0b      	ldr	r3, [pc, #44]	; (8021bc4 <ip_reass_free_complete_datagram+0x140>)
 8021b98:	881a      	ldrh	r2, [r3, #0]
 8021b9a:	8bfb      	ldrh	r3, [r7, #30]
 8021b9c:	1ad3      	subs	r3, r2, r3
 8021b9e:	b29a      	uxth	r2, r3
 8021ba0:	4b08      	ldr	r3, [pc, #32]	; (8021bc4 <ip_reass_free_complete_datagram+0x140>)
 8021ba2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8021ba4:	8bfb      	ldrh	r3, [r7, #30]
}
 8021ba6:	4618      	mov	r0, r3
 8021ba8:	3720      	adds	r7, #32
 8021baa:	46bd      	mov	sp, r7
 8021bac:	bd80      	pop	{r7, pc}
 8021bae:	bf00      	nop
 8021bb0:	08028adc 	.word	0x08028adc
 8021bb4:	08028b18 	.word	0x08028b18
 8021bb8:	08028b24 	.word	0x08028b24
 8021bbc:	08028b4c 	.word	0x08028b4c
 8021bc0:	08028b60 	.word	0x08028b60
 8021bc4:	20014340 	.word	0x20014340
 8021bc8:	08028b80 	.word	0x08028b80

08021bcc <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8021bcc:	b580      	push	{r7, lr}
 8021bce:	b08a      	sub	sp, #40	; 0x28
 8021bd0:	af00      	add	r7, sp, #0
 8021bd2:	6078      	str	r0, [r7, #4]
 8021bd4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8021bd6:	2300      	movs	r3, #0
 8021bd8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8021bda:	2300      	movs	r3, #0
 8021bdc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8021bde:	2300      	movs	r3, #0
 8021be0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8021be2:	2300      	movs	r3, #0
 8021be4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8021be6:	2300      	movs	r3, #0
 8021be8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8021bea:	4b28      	ldr	r3, [pc, #160]	; (8021c8c <ip_reass_remove_oldest_datagram+0xc0>)
 8021bec:	681b      	ldr	r3, [r3, #0]
 8021bee:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8021bf0:	e030      	b.n	8021c54 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8021bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021bf4:	695a      	ldr	r2, [r3, #20]
 8021bf6:	687b      	ldr	r3, [r7, #4]
 8021bf8:	68db      	ldr	r3, [r3, #12]
 8021bfa:	429a      	cmp	r2, r3
 8021bfc:	d10c      	bne.n	8021c18 <ip_reass_remove_oldest_datagram+0x4c>
 8021bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021c00:	699a      	ldr	r2, [r3, #24]
 8021c02:	687b      	ldr	r3, [r7, #4]
 8021c04:	691b      	ldr	r3, [r3, #16]
 8021c06:	429a      	cmp	r2, r3
 8021c08:	d106      	bne.n	8021c18 <ip_reass_remove_oldest_datagram+0x4c>
 8021c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021c0c:	899a      	ldrh	r2, [r3, #12]
 8021c0e:	687b      	ldr	r3, [r7, #4]
 8021c10:	889b      	ldrh	r3, [r3, #4]
 8021c12:	b29b      	uxth	r3, r3
 8021c14:	429a      	cmp	r2, r3
 8021c16:	d014      	beq.n	8021c42 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8021c18:	693b      	ldr	r3, [r7, #16]
 8021c1a:	3301      	adds	r3, #1
 8021c1c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8021c1e:	6a3b      	ldr	r3, [r7, #32]
 8021c20:	2b00      	cmp	r3, #0
 8021c22:	d104      	bne.n	8021c2e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8021c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021c26:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8021c28:	69fb      	ldr	r3, [r7, #28]
 8021c2a:	61bb      	str	r3, [r7, #24]
 8021c2c:	e009      	b.n	8021c42 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8021c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021c30:	7fda      	ldrb	r2, [r3, #31]
 8021c32:	6a3b      	ldr	r3, [r7, #32]
 8021c34:	7fdb      	ldrb	r3, [r3, #31]
 8021c36:	429a      	cmp	r2, r3
 8021c38:	d803      	bhi.n	8021c42 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8021c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021c3c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8021c3e:	69fb      	ldr	r3, [r7, #28]
 8021c40:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8021c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021c44:	681b      	ldr	r3, [r3, #0]
 8021c46:	2b00      	cmp	r3, #0
 8021c48:	d001      	beq.n	8021c4e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8021c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021c4c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8021c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021c50:	681b      	ldr	r3, [r3, #0]
 8021c52:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8021c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021c56:	2b00      	cmp	r3, #0
 8021c58:	d1cb      	bne.n	8021bf2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8021c5a:	6a3b      	ldr	r3, [r7, #32]
 8021c5c:	2b00      	cmp	r3, #0
 8021c5e:	d008      	beq.n	8021c72 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8021c60:	69b9      	ldr	r1, [r7, #24]
 8021c62:	6a38      	ldr	r0, [r7, #32]
 8021c64:	f7ff ff0e 	bl	8021a84 <ip_reass_free_complete_datagram>
 8021c68:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8021c6a:	697a      	ldr	r2, [r7, #20]
 8021c6c:	68fb      	ldr	r3, [r7, #12]
 8021c6e:	4413      	add	r3, r2
 8021c70:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8021c72:	697a      	ldr	r2, [r7, #20]
 8021c74:	683b      	ldr	r3, [r7, #0]
 8021c76:	429a      	cmp	r2, r3
 8021c78:	da02      	bge.n	8021c80 <ip_reass_remove_oldest_datagram+0xb4>
 8021c7a:	693b      	ldr	r3, [r7, #16]
 8021c7c:	2b01      	cmp	r3, #1
 8021c7e:	dcac      	bgt.n	8021bda <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8021c80:	697b      	ldr	r3, [r7, #20]
}
 8021c82:	4618      	mov	r0, r3
 8021c84:	3728      	adds	r7, #40	; 0x28
 8021c86:	46bd      	mov	sp, r7
 8021c88:	bd80      	pop	{r7, pc}
 8021c8a:	bf00      	nop
 8021c8c:	2001433c 	.word	0x2001433c

08021c90 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8021c90:	b580      	push	{r7, lr}
 8021c92:	b084      	sub	sp, #16
 8021c94:	af00      	add	r7, sp, #0
 8021c96:	6078      	str	r0, [r7, #4]
 8021c98:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8021c9a:	2001      	movs	r0, #1
 8021c9c:	f7fc fa76 	bl	801e18c <memp_malloc>
 8021ca0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8021ca2:	68fb      	ldr	r3, [r7, #12]
 8021ca4:	2b00      	cmp	r3, #0
 8021ca6:	d110      	bne.n	8021cca <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8021ca8:	6839      	ldr	r1, [r7, #0]
 8021caa:	6878      	ldr	r0, [r7, #4]
 8021cac:	f7ff ff8e 	bl	8021bcc <ip_reass_remove_oldest_datagram>
 8021cb0:	4602      	mov	r2, r0
 8021cb2:	683b      	ldr	r3, [r7, #0]
 8021cb4:	4293      	cmp	r3, r2
 8021cb6:	dc03      	bgt.n	8021cc0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8021cb8:	2001      	movs	r0, #1
 8021cba:	f7fc fa67 	bl	801e18c <memp_malloc>
 8021cbe:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8021cc0:	68fb      	ldr	r3, [r7, #12]
 8021cc2:	2b00      	cmp	r3, #0
 8021cc4:	d101      	bne.n	8021cca <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8021cc6:	2300      	movs	r3, #0
 8021cc8:	e016      	b.n	8021cf8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8021cca:	2220      	movs	r2, #32
 8021ccc:	2100      	movs	r1, #0
 8021cce:	68f8      	ldr	r0, [r7, #12]
 8021cd0:	f000 fe2c 	bl	802292c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8021cd4:	68fb      	ldr	r3, [r7, #12]
 8021cd6:	220f      	movs	r2, #15
 8021cd8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8021cda:	4b09      	ldr	r3, [pc, #36]	; (8021d00 <ip_reass_enqueue_new_datagram+0x70>)
 8021cdc:	681a      	ldr	r2, [r3, #0]
 8021cde:	68fb      	ldr	r3, [r7, #12]
 8021ce0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8021ce2:	4a07      	ldr	r2, [pc, #28]	; (8021d00 <ip_reass_enqueue_new_datagram+0x70>)
 8021ce4:	68fb      	ldr	r3, [r7, #12]
 8021ce6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8021ce8:	68fb      	ldr	r3, [r7, #12]
 8021cea:	3308      	adds	r3, #8
 8021cec:	2214      	movs	r2, #20
 8021cee:	6879      	ldr	r1, [r7, #4]
 8021cf0:	4618      	mov	r0, r3
 8021cf2:	f000 fdf3 	bl	80228dc <memcpy>
  return ipr;
 8021cf6:	68fb      	ldr	r3, [r7, #12]
}
 8021cf8:	4618      	mov	r0, r3
 8021cfa:	3710      	adds	r7, #16
 8021cfc:	46bd      	mov	sp, r7
 8021cfe:	bd80      	pop	{r7, pc}
 8021d00:	2001433c 	.word	0x2001433c

08021d04 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8021d04:	b580      	push	{r7, lr}
 8021d06:	b082      	sub	sp, #8
 8021d08:	af00      	add	r7, sp, #0
 8021d0a:	6078      	str	r0, [r7, #4]
 8021d0c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8021d0e:	4b10      	ldr	r3, [pc, #64]	; (8021d50 <ip_reass_dequeue_datagram+0x4c>)
 8021d10:	681b      	ldr	r3, [r3, #0]
 8021d12:	687a      	ldr	r2, [r7, #4]
 8021d14:	429a      	cmp	r2, r3
 8021d16:	d104      	bne.n	8021d22 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8021d18:	687b      	ldr	r3, [r7, #4]
 8021d1a:	681b      	ldr	r3, [r3, #0]
 8021d1c:	4a0c      	ldr	r2, [pc, #48]	; (8021d50 <ip_reass_dequeue_datagram+0x4c>)
 8021d1e:	6013      	str	r3, [r2, #0]
 8021d20:	e00d      	b.n	8021d3e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8021d22:	683b      	ldr	r3, [r7, #0]
 8021d24:	2b00      	cmp	r3, #0
 8021d26:	d106      	bne.n	8021d36 <ip_reass_dequeue_datagram+0x32>
 8021d28:	4b0a      	ldr	r3, [pc, #40]	; (8021d54 <ip_reass_dequeue_datagram+0x50>)
 8021d2a:	f240 1245 	movw	r2, #325	; 0x145
 8021d2e:	490a      	ldr	r1, [pc, #40]	; (8021d58 <ip_reass_dequeue_datagram+0x54>)
 8021d30:	480a      	ldr	r0, [pc, #40]	; (8021d5c <ip_reass_dequeue_datagram+0x58>)
 8021d32:	f000 fee3 	bl	8022afc <iprintf>
    prev->next = ipr->next;
 8021d36:	687b      	ldr	r3, [r7, #4]
 8021d38:	681a      	ldr	r2, [r3, #0]
 8021d3a:	683b      	ldr	r3, [r7, #0]
 8021d3c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8021d3e:	6879      	ldr	r1, [r7, #4]
 8021d40:	2001      	movs	r0, #1
 8021d42:	f7fc fa93 	bl	801e26c <memp_free>
}
 8021d46:	bf00      	nop
 8021d48:	3708      	adds	r7, #8
 8021d4a:	46bd      	mov	sp, r7
 8021d4c:	bd80      	pop	{r7, pc}
 8021d4e:	bf00      	nop
 8021d50:	2001433c 	.word	0x2001433c
 8021d54:	08028adc 	.word	0x08028adc
 8021d58:	08028ba4 	.word	0x08028ba4
 8021d5c:	08028b24 	.word	0x08028b24

08021d60 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8021d60:	b580      	push	{r7, lr}
 8021d62:	b08c      	sub	sp, #48	; 0x30
 8021d64:	af00      	add	r7, sp, #0
 8021d66:	60f8      	str	r0, [r7, #12]
 8021d68:	60b9      	str	r1, [r7, #8]
 8021d6a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8021d6c:	2300      	movs	r3, #0
 8021d6e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8021d70:	2301      	movs	r3, #1
 8021d72:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8021d74:	68bb      	ldr	r3, [r7, #8]
 8021d76:	685b      	ldr	r3, [r3, #4]
 8021d78:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8021d7a:	69fb      	ldr	r3, [r7, #28]
 8021d7c:	885b      	ldrh	r3, [r3, #2]
 8021d7e:	b29b      	uxth	r3, r3
 8021d80:	4618      	mov	r0, r3
 8021d82:	f7fb fda7 	bl	801d8d4 <lwip_htons>
 8021d86:	4603      	mov	r3, r0
 8021d88:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8021d8a:	69fb      	ldr	r3, [r7, #28]
 8021d8c:	781b      	ldrb	r3, [r3, #0]
 8021d8e:	f003 030f 	and.w	r3, r3, #15
 8021d92:	b2db      	uxtb	r3, r3
 8021d94:	009b      	lsls	r3, r3, #2
 8021d96:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8021d98:	7e7b      	ldrb	r3, [r7, #25]
 8021d9a:	b29b      	uxth	r3, r3
 8021d9c:	8b7a      	ldrh	r2, [r7, #26]
 8021d9e:	429a      	cmp	r2, r3
 8021da0:	d202      	bcs.n	8021da8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8021da2:	f04f 33ff 	mov.w	r3, #4294967295
 8021da6:	e135      	b.n	8022014 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8021da8:	7e7b      	ldrb	r3, [r7, #25]
 8021daa:	b29b      	uxth	r3, r3
 8021dac:	8b7a      	ldrh	r2, [r7, #26]
 8021dae:	1ad3      	subs	r3, r2, r3
 8021db0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8021db2:	69fb      	ldr	r3, [r7, #28]
 8021db4:	88db      	ldrh	r3, [r3, #6]
 8021db6:	b29b      	uxth	r3, r3
 8021db8:	4618      	mov	r0, r3
 8021dba:	f7fb fd8b 	bl	801d8d4 <lwip_htons>
 8021dbe:	4603      	mov	r3, r0
 8021dc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8021dc4:	b29b      	uxth	r3, r3
 8021dc6:	00db      	lsls	r3, r3, #3
 8021dc8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8021dca:	68bb      	ldr	r3, [r7, #8]
 8021dcc:	685b      	ldr	r3, [r3, #4]
 8021dce:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8021dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021dd2:	2200      	movs	r2, #0
 8021dd4:	701a      	strb	r2, [r3, #0]
 8021dd6:	2200      	movs	r2, #0
 8021dd8:	705a      	strb	r2, [r3, #1]
 8021dda:	2200      	movs	r2, #0
 8021ddc:	709a      	strb	r2, [r3, #2]
 8021dde:	2200      	movs	r2, #0
 8021de0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8021de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021de4:	8afa      	ldrh	r2, [r7, #22]
 8021de6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8021de8:	8afa      	ldrh	r2, [r7, #22]
 8021dea:	8b7b      	ldrh	r3, [r7, #26]
 8021dec:	4413      	add	r3, r2
 8021dee:	b29a      	uxth	r2, r3
 8021df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021df2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8021df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021df6:	88db      	ldrh	r3, [r3, #6]
 8021df8:	b29b      	uxth	r3, r3
 8021dfa:	8afa      	ldrh	r2, [r7, #22]
 8021dfc:	429a      	cmp	r2, r3
 8021dfe:	d902      	bls.n	8021e06 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8021e00:	f04f 33ff 	mov.w	r3, #4294967295
 8021e04:	e106      	b.n	8022014 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8021e06:	68fb      	ldr	r3, [r7, #12]
 8021e08:	685b      	ldr	r3, [r3, #4]
 8021e0a:	627b      	str	r3, [r7, #36]	; 0x24
 8021e0c:	e068      	b.n	8021ee0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8021e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021e10:	685b      	ldr	r3, [r3, #4]
 8021e12:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8021e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021e16:	889b      	ldrh	r3, [r3, #4]
 8021e18:	b29a      	uxth	r2, r3
 8021e1a:	693b      	ldr	r3, [r7, #16]
 8021e1c:	889b      	ldrh	r3, [r3, #4]
 8021e1e:	b29b      	uxth	r3, r3
 8021e20:	429a      	cmp	r2, r3
 8021e22:	d235      	bcs.n	8021e90 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8021e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021e28:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8021e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021e2c:	2b00      	cmp	r3, #0
 8021e2e:	d020      	beq.n	8021e72 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8021e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021e32:	889b      	ldrh	r3, [r3, #4]
 8021e34:	b29a      	uxth	r2, r3
 8021e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021e38:	88db      	ldrh	r3, [r3, #6]
 8021e3a:	b29b      	uxth	r3, r3
 8021e3c:	429a      	cmp	r2, r3
 8021e3e:	d307      	bcc.n	8021e50 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8021e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021e42:	88db      	ldrh	r3, [r3, #6]
 8021e44:	b29a      	uxth	r2, r3
 8021e46:	693b      	ldr	r3, [r7, #16]
 8021e48:	889b      	ldrh	r3, [r3, #4]
 8021e4a:	b29b      	uxth	r3, r3
 8021e4c:	429a      	cmp	r2, r3
 8021e4e:	d902      	bls.n	8021e56 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8021e50:	f04f 33ff 	mov.w	r3, #4294967295
 8021e54:	e0de      	b.n	8022014 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8021e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021e58:	68ba      	ldr	r2, [r7, #8]
 8021e5a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8021e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021e5e:	88db      	ldrh	r3, [r3, #6]
 8021e60:	b29a      	uxth	r2, r3
 8021e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021e64:	889b      	ldrh	r3, [r3, #4]
 8021e66:	b29b      	uxth	r3, r3
 8021e68:	429a      	cmp	r2, r3
 8021e6a:	d03d      	beq.n	8021ee8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8021e6c:	2300      	movs	r3, #0
 8021e6e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8021e70:	e03a      	b.n	8021ee8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8021e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021e74:	88db      	ldrh	r3, [r3, #6]
 8021e76:	b29a      	uxth	r2, r3
 8021e78:	693b      	ldr	r3, [r7, #16]
 8021e7a:	889b      	ldrh	r3, [r3, #4]
 8021e7c:	b29b      	uxth	r3, r3
 8021e7e:	429a      	cmp	r2, r3
 8021e80:	d902      	bls.n	8021e88 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8021e82:	f04f 33ff 	mov.w	r3, #4294967295
 8021e86:	e0c5      	b.n	8022014 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8021e88:	68fb      	ldr	r3, [r7, #12]
 8021e8a:	68ba      	ldr	r2, [r7, #8]
 8021e8c:	605a      	str	r2, [r3, #4]
      break;
 8021e8e:	e02b      	b.n	8021ee8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8021e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021e92:	889b      	ldrh	r3, [r3, #4]
 8021e94:	b29a      	uxth	r2, r3
 8021e96:	693b      	ldr	r3, [r7, #16]
 8021e98:	889b      	ldrh	r3, [r3, #4]
 8021e9a:	b29b      	uxth	r3, r3
 8021e9c:	429a      	cmp	r2, r3
 8021e9e:	d102      	bne.n	8021ea6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8021ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8021ea4:	e0b6      	b.n	8022014 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8021ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021ea8:	889b      	ldrh	r3, [r3, #4]
 8021eaa:	b29a      	uxth	r2, r3
 8021eac:	693b      	ldr	r3, [r7, #16]
 8021eae:	88db      	ldrh	r3, [r3, #6]
 8021eb0:	b29b      	uxth	r3, r3
 8021eb2:	429a      	cmp	r2, r3
 8021eb4:	d202      	bcs.n	8021ebc <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8021eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8021eba:	e0ab      	b.n	8022014 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8021ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021ebe:	2b00      	cmp	r3, #0
 8021ec0:	d009      	beq.n	8021ed6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8021ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021ec4:	88db      	ldrh	r3, [r3, #6]
 8021ec6:	b29a      	uxth	r2, r3
 8021ec8:	693b      	ldr	r3, [r7, #16]
 8021eca:	889b      	ldrh	r3, [r3, #4]
 8021ecc:	b29b      	uxth	r3, r3
 8021ece:	429a      	cmp	r2, r3
 8021ed0:	d001      	beq.n	8021ed6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8021ed2:	2300      	movs	r3, #0
 8021ed4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8021ed6:	693b      	ldr	r3, [r7, #16]
 8021ed8:	681b      	ldr	r3, [r3, #0]
 8021eda:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8021edc:	693b      	ldr	r3, [r7, #16]
 8021ede:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8021ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021ee2:	2b00      	cmp	r3, #0
 8021ee4:	d193      	bne.n	8021e0e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8021ee6:	e000      	b.n	8021eea <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8021ee8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8021eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021eec:	2b00      	cmp	r3, #0
 8021eee:	d12d      	bne.n	8021f4c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8021ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021ef2:	2b00      	cmp	r3, #0
 8021ef4:	d01c      	beq.n	8021f30 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8021ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021ef8:	88db      	ldrh	r3, [r3, #6]
 8021efa:	b29a      	uxth	r2, r3
 8021efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021efe:	889b      	ldrh	r3, [r3, #4]
 8021f00:	b29b      	uxth	r3, r3
 8021f02:	429a      	cmp	r2, r3
 8021f04:	d906      	bls.n	8021f14 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8021f06:	4b45      	ldr	r3, [pc, #276]	; (802201c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8021f08:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8021f0c:	4944      	ldr	r1, [pc, #272]	; (8022020 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8021f0e:	4845      	ldr	r0, [pc, #276]	; (8022024 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8021f10:	f000 fdf4 	bl	8022afc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8021f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021f16:	68ba      	ldr	r2, [r7, #8]
 8021f18:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8021f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021f1c:	88db      	ldrh	r3, [r3, #6]
 8021f1e:	b29a      	uxth	r2, r3
 8021f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021f22:	889b      	ldrh	r3, [r3, #4]
 8021f24:	b29b      	uxth	r3, r3
 8021f26:	429a      	cmp	r2, r3
 8021f28:	d010      	beq.n	8021f4c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8021f2a:	2300      	movs	r3, #0
 8021f2c:	623b      	str	r3, [r7, #32]
 8021f2e:	e00d      	b.n	8021f4c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8021f30:	68fb      	ldr	r3, [r7, #12]
 8021f32:	685b      	ldr	r3, [r3, #4]
 8021f34:	2b00      	cmp	r3, #0
 8021f36:	d006      	beq.n	8021f46 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8021f38:	4b38      	ldr	r3, [pc, #224]	; (802201c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8021f3a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8021f3e:	493a      	ldr	r1, [pc, #232]	; (8022028 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8021f40:	4838      	ldr	r0, [pc, #224]	; (8022024 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8021f42:	f000 fddb 	bl	8022afc <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8021f46:	68fb      	ldr	r3, [r7, #12]
 8021f48:	68ba      	ldr	r2, [r7, #8]
 8021f4a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8021f4c:	687b      	ldr	r3, [r7, #4]
 8021f4e:	2b00      	cmp	r3, #0
 8021f50:	d105      	bne.n	8021f5e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8021f52:	68fb      	ldr	r3, [r7, #12]
 8021f54:	7f9b      	ldrb	r3, [r3, #30]
 8021f56:	f003 0301 	and.w	r3, r3, #1
 8021f5a:	2b00      	cmp	r3, #0
 8021f5c:	d059      	beq.n	8022012 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8021f5e:	6a3b      	ldr	r3, [r7, #32]
 8021f60:	2b00      	cmp	r3, #0
 8021f62:	d04f      	beq.n	8022004 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8021f64:	68fb      	ldr	r3, [r7, #12]
 8021f66:	685b      	ldr	r3, [r3, #4]
 8021f68:	2b00      	cmp	r3, #0
 8021f6a:	d006      	beq.n	8021f7a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8021f6c:	68fb      	ldr	r3, [r7, #12]
 8021f6e:	685b      	ldr	r3, [r3, #4]
 8021f70:	685b      	ldr	r3, [r3, #4]
 8021f72:	889b      	ldrh	r3, [r3, #4]
 8021f74:	b29b      	uxth	r3, r3
 8021f76:	2b00      	cmp	r3, #0
 8021f78:	d002      	beq.n	8021f80 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8021f7a:	2300      	movs	r3, #0
 8021f7c:	623b      	str	r3, [r7, #32]
 8021f7e:	e041      	b.n	8022004 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8021f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021f82:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8021f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021f86:	681b      	ldr	r3, [r3, #0]
 8021f88:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8021f8a:	e012      	b.n	8021fb2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8021f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021f8e:	685b      	ldr	r3, [r3, #4]
 8021f90:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8021f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021f94:	88db      	ldrh	r3, [r3, #6]
 8021f96:	b29a      	uxth	r2, r3
 8021f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021f9a:	889b      	ldrh	r3, [r3, #4]
 8021f9c:	b29b      	uxth	r3, r3
 8021f9e:	429a      	cmp	r2, r3
 8021fa0:	d002      	beq.n	8021fa8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8021fa2:	2300      	movs	r3, #0
 8021fa4:	623b      	str	r3, [r7, #32]
            break;
 8021fa6:	e007      	b.n	8021fb8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8021fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021faa:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8021fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021fae:	681b      	ldr	r3, [r3, #0]
 8021fb0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8021fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021fb4:	2b00      	cmp	r3, #0
 8021fb6:	d1e9      	bne.n	8021f8c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8021fb8:	6a3b      	ldr	r3, [r7, #32]
 8021fba:	2b00      	cmp	r3, #0
 8021fbc:	d022      	beq.n	8022004 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8021fbe:	68fb      	ldr	r3, [r7, #12]
 8021fc0:	685b      	ldr	r3, [r3, #4]
 8021fc2:	2b00      	cmp	r3, #0
 8021fc4:	d106      	bne.n	8021fd4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8021fc6:	4b15      	ldr	r3, [pc, #84]	; (802201c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8021fc8:	f240 12df 	movw	r2, #479	; 0x1df
 8021fcc:	4917      	ldr	r1, [pc, #92]	; (802202c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8021fce:	4815      	ldr	r0, [pc, #84]	; (8022024 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8021fd0:	f000 fd94 	bl	8022afc <iprintf>
          LWIP_ASSERT("sanity check",
 8021fd4:	68fb      	ldr	r3, [r7, #12]
 8021fd6:	685b      	ldr	r3, [r3, #4]
 8021fd8:	685b      	ldr	r3, [r3, #4]
 8021fda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8021fdc:	429a      	cmp	r2, r3
 8021fde:	d106      	bne.n	8021fee <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8021fe0:	4b0e      	ldr	r3, [pc, #56]	; (802201c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8021fe2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8021fe6:	4911      	ldr	r1, [pc, #68]	; (802202c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8021fe8:	480e      	ldr	r0, [pc, #56]	; (8022024 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8021fea:	f000 fd87 	bl	8022afc <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8021fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021ff0:	681b      	ldr	r3, [r3, #0]
 8021ff2:	2b00      	cmp	r3, #0
 8021ff4:	d006      	beq.n	8022004 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8021ff6:	4b09      	ldr	r3, [pc, #36]	; (802201c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8021ff8:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8021ffc:	490c      	ldr	r1, [pc, #48]	; (8022030 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8021ffe:	4809      	ldr	r0, [pc, #36]	; (8022024 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8022000:	f000 fd7c 	bl	8022afc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8022004:	6a3b      	ldr	r3, [r7, #32]
 8022006:	2b00      	cmp	r3, #0
 8022008:	bf14      	ite	ne
 802200a:	2301      	movne	r3, #1
 802200c:	2300      	moveq	r3, #0
 802200e:	b2db      	uxtb	r3, r3
 8022010:	e000      	b.n	8022014 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8022012:	2300      	movs	r3, #0
}
 8022014:	4618      	mov	r0, r3
 8022016:	3730      	adds	r7, #48	; 0x30
 8022018:	46bd      	mov	sp, r7
 802201a:	bd80      	pop	{r7, pc}
 802201c:	08028adc 	.word	0x08028adc
 8022020:	08028bc0 	.word	0x08028bc0
 8022024:	08028b24 	.word	0x08028b24
 8022028:	08028be0 	.word	0x08028be0
 802202c:	08028c18 	.word	0x08028c18
 8022030:	08028c28 	.word	0x08028c28

08022034 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8022034:	b580      	push	{r7, lr}
 8022036:	b08e      	sub	sp, #56	; 0x38
 8022038:	af00      	add	r7, sp, #0
 802203a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 802203c:	687b      	ldr	r3, [r7, #4]
 802203e:	685b      	ldr	r3, [r3, #4]
 8022040:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8022042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022044:	781b      	ldrb	r3, [r3, #0]
 8022046:	f003 030f 	and.w	r3, r3, #15
 802204a:	b2db      	uxtb	r3, r3
 802204c:	009b      	lsls	r3, r3, #2
 802204e:	b2db      	uxtb	r3, r3
 8022050:	2b14      	cmp	r3, #20
 8022052:	f040 8171 	bne.w	8022338 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8022056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022058:	88db      	ldrh	r3, [r3, #6]
 802205a:	b29b      	uxth	r3, r3
 802205c:	4618      	mov	r0, r3
 802205e:	f7fb fc39 	bl	801d8d4 <lwip_htons>
 8022062:	4603      	mov	r3, r0
 8022064:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8022068:	b29b      	uxth	r3, r3
 802206a:	00db      	lsls	r3, r3, #3
 802206c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 802206e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022070:	885b      	ldrh	r3, [r3, #2]
 8022072:	b29b      	uxth	r3, r3
 8022074:	4618      	mov	r0, r3
 8022076:	f7fb fc2d 	bl	801d8d4 <lwip_htons>
 802207a:	4603      	mov	r3, r0
 802207c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 802207e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022080:	781b      	ldrb	r3, [r3, #0]
 8022082:	f003 030f 	and.w	r3, r3, #15
 8022086:	b2db      	uxtb	r3, r3
 8022088:	009b      	lsls	r3, r3, #2
 802208a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 802208e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8022092:	b29b      	uxth	r3, r3
 8022094:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8022096:	429a      	cmp	r2, r3
 8022098:	f0c0 8150 	bcc.w	802233c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 802209c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80220a0:	b29b      	uxth	r3, r3
 80220a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80220a4:	1ad3      	subs	r3, r2, r3
 80220a6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80220a8:	6878      	ldr	r0, [r7, #4]
 80220aa:	f7fd f877 	bl	801f19c <pbuf_clen>
 80220ae:	4603      	mov	r3, r0
 80220b0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80220b2:	4b8c      	ldr	r3, [pc, #560]	; (80222e4 <ip4_reass+0x2b0>)
 80220b4:	881b      	ldrh	r3, [r3, #0]
 80220b6:	461a      	mov	r2, r3
 80220b8:	8c3b      	ldrh	r3, [r7, #32]
 80220ba:	4413      	add	r3, r2
 80220bc:	2b0a      	cmp	r3, #10
 80220be:	dd10      	ble.n	80220e2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80220c0:	8c3b      	ldrh	r3, [r7, #32]
 80220c2:	4619      	mov	r1, r3
 80220c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80220c6:	f7ff fd81 	bl	8021bcc <ip_reass_remove_oldest_datagram>
 80220ca:	4603      	mov	r3, r0
 80220cc:	2b00      	cmp	r3, #0
 80220ce:	f000 8137 	beq.w	8022340 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80220d2:	4b84      	ldr	r3, [pc, #528]	; (80222e4 <ip4_reass+0x2b0>)
 80220d4:	881b      	ldrh	r3, [r3, #0]
 80220d6:	461a      	mov	r2, r3
 80220d8:	8c3b      	ldrh	r3, [r7, #32]
 80220da:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80220dc:	2b0a      	cmp	r3, #10
 80220de:	f300 812f 	bgt.w	8022340 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80220e2:	4b81      	ldr	r3, [pc, #516]	; (80222e8 <ip4_reass+0x2b4>)
 80220e4:	681b      	ldr	r3, [r3, #0]
 80220e6:	633b      	str	r3, [r7, #48]	; 0x30
 80220e8:	e015      	b.n	8022116 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80220ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80220ec:	695a      	ldr	r2, [r3, #20]
 80220ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80220f0:	68db      	ldr	r3, [r3, #12]
 80220f2:	429a      	cmp	r2, r3
 80220f4:	d10c      	bne.n	8022110 <ip4_reass+0xdc>
 80220f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80220f8:	699a      	ldr	r2, [r3, #24]
 80220fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80220fc:	691b      	ldr	r3, [r3, #16]
 80220fe:	429a      	cmp	r2, r3
 8022100:	d106      	bne.n	8022110 <ip4_reass+0xdc>
 8022102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022104:	899a      	ldrh	r2, [r3, #12]
 8022106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022108:	889b      	ldrh	r3, [r3, #4]
 802210a:	b29b      	uxth	r3, r3
 802210c:	429a      	cmp	r2, r3
 802210e:	d006      	beq.n	802211e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8022110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022112:	681b      	ldr	r3, [r3, #0]
 8022114:	633b      	str	r3, [r7, #48]	; 0x30
 8022116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022118:	2b00      	cmp	r3, #0
 802211a:	d1e6      	bne.n	80220ea <ip4_reass+0xb6>
 802211c:	e000      	b.n	8022120 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 802211e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8022120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022122:	2b00      	cmp	r3, #0
 8022124:	d109      	bne.n	802213a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8022126:	8c3b      	ldrh	r3, [r7, #32]
 8022128:	4619      	mov	r1, r3
 802212a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802212c:	f7ff fdb0 	bl	8021c90 <ip_reass_enqueue_new_datagram>
 8022130:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8022132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022134:	2b00      	cmp	r3, #0
 8022136:	d11c      	bne.n	8022172 <ip4_reass+0x13e>
      goto nullreturn;
 8022138:	e105      	b.n	8022346 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 802213a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802213c:	88db      	ldrh	r3, [r3, #6]
 802213e:	b29b      	uxth	r3, r3
 8022140:	4618      	mov	r0, r3
 8022142:	f7fb fbc7 	bl	801d8d4 <lwip_htons>
 8022146:	4603      	mov	r3, r0
 8022148:	f3c3 030c 	ubfx	r3, r3, #0, #13
 802214c:	2b00      	cmp	r3, #0
 802214e:	d110      	bne.n	8022172 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8022150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022152:	89db      	ldrh	r3, [r3, #14]
 8022154:	4618      	mov	r0, r3
 8022156:	f7fb fbbd 	bl	801d8d4 <lwip_htons>
 802215a:	4603      	mov	r3, r0
 802215c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8022160:	2b00      	cmp	r3, #0
 8022162:	d006      	beq.n	8022172 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8022164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022166:	3308      	adds	r3, #8
 8022168:	2214      	movs	r2, #20
 802216a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 802216c:	4618      	mov	r0, r3
 802216e:	f000 fbb5 	bl	80228dc <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8022172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022174:	88db      	ldrh	r3, [r3, #6]
 8022176:	b29b      	uxth	r3, r3
 8022178:	f003 0320 	and.w	r3, r3, #32
 802217c:	2b00      	cmp	r3, #0
 802217e:	bf0c      	ite	eq
 8022180:	2301      	moveq	r3, #1
 8022182:	2300      	movne	r3, #0
 8022184:	b2db      	uxtb	r3, r3
 8022186:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8022188:	69fb      	ldr	r3, [r7, #28]
 802218a:	2b00      	cmp	r3, #0
 802218c:	d00e      	beq.n	80221ac <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 802218e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8022190:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8022192:	4413      	add	r3, r2
 8022194:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8022196:	8b7a      	ldrh	r2, [r7, #26]
 8022198:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802219a:	429a      	cmp	r2, r3
 802219c:	f0c0 80a0 	bcc.w	80222e0 <ip4_reass+0x2ac>
 80221a0:	8b7b      	ldrh	r3, [r7, #26]
 80221a2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80221a6:	4293      	cmp	r3, r2
 80221a8:	f200 809a 	bhi.w	80222e0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80221ac:	69fa      	ldr	r2, [r7, #28]
 80221ae:	6879      	ldr	r1, [r7, #4]
 80221b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80221b2:	f7ff fdd5 	bl	8021d60 <ip_reass_chain_frag_into_datagram_and_validate>
 80221b6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80221b8:	697b      	ldr	r3, [r7, #20]
 80221ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80221be:	f000 809b 	beq.w	80222f8 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80221c2:	4b48      	ldr	r3, [pc, #288]	; (80222e4 <ip4_reass+0x2b0>)
 80221c4:	881a      	ldrh	r2, [r3, #0]
 80221c6:	8c3b      	ldrh	r3, [r7, #32]
 80221c8:	4413      	add	r3, r2
 80221ca:	b29a      	uxth	r2, r3
 80221cc:	4b45      	ldr	r3, [pc, #276]	; (80222e4 <ip4_reass+0x2b0>)
 80221ce:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80221d0:	69fb      	ldr	r3, [r7, #28]
 80221d2:	2b00      	cmp	r3, #0
 80221d4:	d00d      	beq.n	80221f2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80221d6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80221d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80221da:	4413      	add	r3, r2
 80221dc:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80221de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80221e0:	8a7a      	ldrh	r2, [r7, #18]
 80221e2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80221e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80221e6:	7f9b      	ldrb	r3, [r3, #30]
 80221e8:	f043 0301 	orr.w	r3, r3, #1
 80221ec:	b2da      	uxtb	r2, r3
 80221ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80221f0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80221f2:	697b      	ldr	r3, [r7, #20]
 80221f4:	2b01      	cmp	r3, #1
 80221f6:	d171      	bne.n	80222dc <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80221f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80221fa:	8b9b      	ldrh	r3, [r3, #28]
 80221fc:	3314      	adds	r3, #20
 80221fe:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8022200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022202:	685b      	ldr	r3, [r3, #4]
 8022204:	685b      	ldr	r3, [r3, #4]
 8022206:	681b      	ldr	r3, [r3, #0]
 8022208:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 802220a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802220c:	685b      	ldr	r3, [r3, #4]
 802220e:	685b      	ldr	r3, [r3, #4]
 8022210:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8022212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022214:	3308      	adds	r3, #8
 8022216:	2214      	movs	r2, #20
 8022218:	4619      	mov	r1, r3
 802221a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802221c:	f000 fb5e 	bl	80228dc <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8022220:	8a3b      	ldrh	r3, [r7, #16]
 8022222:	4618      	mov	r0, r3
 8022224:	f7fb fb56 	bl	801d8d4 <lwip_htons>
 8022228:	4603      	mov	r3, r0
 802222a:	461a      	mov	r2, r3
 802222c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802222e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8022230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022232:	2200      	movs	r2, #0
 8022234:	719a      	strb	r2, [r3, #6]
 8022236:	2200      	movs	r2, #0
 8022238:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 802223a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802223c:	2200      	movs	r2, #0
 802223e:	729a      	strb	r2, [r3, #10]
 8022240:	2200      	movs	r2, #0
 8022242:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8022244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022246:	685b      	ldr	r3, [r3, #4]
 8022248:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 802224a:	e00d      	b.n	8022268 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 802224c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802224e:	685b      	ldr	r3, [r3, #4]
 8022250:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8022252:	2114      	movs	r1, #20
 8022254:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8022256:	f7fc fe93 	bl	801ef80 <pbuf_remove_header>
      pbuf_cat(p, r);
 802225a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 802225c:	6878      	ldr	r0, [r7, #4]
 802225e:	f7fc ffd7 	bl	801f210 <pbuf_cat>
      r = iprh->next_pbuf;
 8022262:	68fb      	ldr	r3, [r7, #12]
 8022264:	681b      	ldr	r3, [r3, #0]
 8022266:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8022268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802226a:	2b00      	cmp	r3, #0
 802226c:	d1ee      	bne.n	802224c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 802226e:	4b1e      	ldr	r3, [pc, #120]	; (80222e8 <ip4_reass+0x2b4>)
 8022270:	681b      	ldr	r3, [r3, #0]
 8022272:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8022274:	429a      	cmp	r2, r3
 8022276:	d102      	bne.n	802227e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8022278:	2300      	movs	r3, #0
 802227a:	62fb      	str	r3, [r7, #44]	; 0x2c
 802227c:	e010      	b.n	80222a0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 802227e:	4b1a      	ldr	r3, [pc, #104]	; (80222e8 <ip4_reass+0x2b4>)
 8022280:	681b      	ldr	r3, [r3, #0]
 8022282:	62fb      	str	r3, [r7, #44]	; 0x2c
 8022284:	e007      	b.n	8022296 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8022286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022288:	681b      	ldr	r3, [r3, #0]
 802228a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802228c:	429a      	cmp	r2, r3
 802228e:	d006      	beq.n	802229e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8022290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022292:	681b      	ldr	r3, [r3, #0]
 8022294:	62fb      	str	r3, [r7, #44]	; 0x2c
 8022296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022298:	2b00      	cmp	r3, #0
 802229a:	d1f4      	bne.n	8022286 <ip4_reass+0x252>
 802229c:	e000      	b.n	80222a0 <ip4_reass+0x26c>
          break;
 802229e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80222a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80222a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80222a4:	f7ff fd2e 	bl	8021d04 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80222a8:	6878      	ldr	r0, [r7, #4]
 80222aa:	f7fc ff77 	bl	801f19c <pbuf_clen>
 80222ae:	4603      	mov	r3, r0
 80222b0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80222b2:	4b0c      	ldr	r3, [pc, #48]	; (80222e4 <ip4_reass+0x2b0>)
 80222b4:	881b      	ldrh	r3, [r3, #0]
 80222b6:	8c3a      	ldrh	r2, [r7, #32]
 80222b8:	429a      	cmp	r2, r3
 80222ba:	d906      	bls.n	80222ca <ip4_reass+0x296>
 80222bc:	4b0b      	ldr	r3, [pc, #44]	; (80222ec <ip4_reass+0x2b8>)
 80222be:	f240 229b 	movw	r2, #667	; 0x29b
 80222c2:	490b      	ldr	r1, [pc, #44]	; (80222f0 <ip4_reass+0x2bc>)
 80222c4:	480b      	ldr	r0, [pc, #44]	; (80222f4 <ip4_reass+0x2c0>)
 80222c6:	f000 fc19 	bl	8022afc <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80222ca:	4b06      	ldr	r3, [pc, #24]	; (80222e4 <ip4_reass+0x2b0>)
 80222cc:	881a      	ldrh	r2, [r3, #0]
 80222ce:	8c3b      	ldrh	r3, [r7, #32]
 80222d0:	1ad3      	subs	r3, r2, r3
 80222d2:	b29a      	uxth	r2, r3
 80222d4:	4b03      	ldr	r3, [pc, #12]	; (80222e4 <ip4_reass+0x2b0>)
 80222d6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80222d8:	687b      	ldr	r3, [r7, #4]
 80222da:	e038      	b.n	802234e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80222dc:	2300      	movs	r3, #0
 80222de:	e036      	b.n	802234e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80222e0:	bf00      	nop
 80222e2:	e00a      	b.n	80222fa <ip4_reass+0x2c6>
 80222e4:	20014340 	.word	0x20014340
 80222e8:	2001433c 	.word	0x2001433c
 80222ec:	08028adc 	.word	0x08028adc
 80222f0:	08028c4c 	.word	0x08028c4c
 80222f4:	08028b24 	.word	0x08028b24
    goto nullreturn_ipr;
 80222f8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80222fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80222fc:	2b00      	cmp	r3, #0
 80222fe:	d106      	bne.n	802230e <ip4_reass+0x2da>
 8022300:	4b15      	ldr	r3, [pc, #84]	; (8022358 <ip4_reass+0x324>)
 8022302:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8022306:	4915      	ldr	r1, [pc, #84]	; (802235c <ip4_reass+0x328>)
 8022308:	4815      	ldr	r0, [pc, #84]	; (8022360 <ip4_reass+0x32c>)
 802230a:	f000 fbf7 	bl	8022afc <iprintf>
  if (ipr->p == NULL) {
 802230e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022310:	685b      	ldr	r3, [r3, #4]
 8022312:	2b00      	cmp	r3, #0
 8022314:	d116      	bne.n	8022344 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8022316:	4b13      	ldr	r3, [pc, #76]	; (8022364 <ip4_reass+0x330>)
 8022318:	681b      	ldr	r3, [r3, #0]
 802231a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802231c:	429a      	cmp	r2, r3
 802231e:	d006      	beq.n	802232e <ip4_reass+0x2fa>
 8022320:	4b0d      	ldr	r3, [pc, #52]	; (8022358 <ip4_reass+0x324>)
 8022322:	f240 22ab 	movw	r2, #683	; 0x2ab
 8022326:	4910      	ldr	r1, [pc, #64]	; (8022368 <ip4_reass+0x334>)
 8022328:	480d      	ldr	r0, [pc, #52]	; (8022360 <ip4_reass+0x32c>)
 802232a:	f000 fbe7 	bl	8022afc <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 802232e:	2100      	movs	r1, #0
 8022330:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8022332:	f7ff fce7 	bl	8021d04 <ip_reass_dequeue_datagram>
 8022336:	e006      	b.n	8022346 <ip4_reass+0x312>
    goto nullreturn;
 8022338:	bf00      	nop
 802233a:	e004      	b.n	8022346 <ip4_reass+0x312>
    goto nullreturn;
 802233c:	bf00      	nop
 802233e:	e002      	b.n	8022346 <ip4_reass+0x312>
      goto nullreturn;
 8022340:	bf00      	nop
 8022342:	e000      	b.n	8022346 <ip4_reass+0x312>
  }

nullreturn:
 8022344:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8022346:	6878      	ldr	r0, [r7, #4]
 8022348:	f7fc fea0 	bl	801f08c <pbuf_free>
  return NULL;
 802234c:	2300      	movs	r3, #0
}
 802234e:	4618      	mov	r0, r3
 8022350:	3738      	adds	r7, #56	; 0x38
 8022352:	46bd      	mov	sp, r7
 8022354:	bd80      	pop	{r7, pc}
 8022356:	bf00      	nop
 8022358:	08028adc 	.word	0x08028adc
 802235c:	08028c68 	.word	0x08028c68
 8022360:	08028b24 	.word	0x08028b24
 8022364:	2001433c 	.word	0x2001433c
 8022368:	08028c74 	.word	0x08028c74

0802236c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 802236c:	b580      	push	{r7, lr}
 802236e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8022370:	2002      	movs	r0, #2
 8022372:	f7fb ff0b 	bl	801e18c <memp_malloc>
 8022376:	4603      	mov	r3, r0
}
 8022378:	4618      	mov	r0, r3
 802237a:	bd80      	pop	{r7, pc}

0802237c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 802237c:	b580      	push	{r7, lr}
 802237e:	b082      	sub	sp, #8
 8022380:	af00      	add	r7, sp, #0
 8022382:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8022384:	687b      	ldr	r3, [r7, #4]
 8022386:	2b00      	cmp	r3, #0
 8022388:	d106      	bne.n	8022398 <ip_frag_free_pbuf_custom_ref+0x1c>
 802238a:	4b07      	ldr	r3, [pc, #28]	; (80223a8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 802238c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8022390:	4906      	ldr	r1, [pc, #24]	; (80223ac <ip_frag_free_pbuf_custom_ref+0x30>)
 8022392:	4807      	ldr	r0, [pc, #28]	; (80223b0 <ip_frag_free_pbuf_custom_ref+0x34>)
 8022394:	f000 fbb2 	bl	8022afc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8022398:	6879      	ldr	r1, [r7, #4]
 802239a:	2002      	movs	r0, #2
 802239c:	f7fb ff66 	bl	801e26c <memp_free>
}
 80223a0:	bf00      	nop
 80223a2:	3708      	adds	r7, #8
 80223a4:	46bd      	mov	sp, r7
 80223a6:	bd80      	pop	{r7, pc}
 80223a8:	08028adc 	.word	0x08028adc
 80223ac:	08028c94 	.word	0x08028c94
 80223b0:	08028b24 	.word	0x08028b24

080223b4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80223b4:	b580      	push	{r7, lr}
 80223b6:	b084      	sub	sp, #16
 80223b8:	af00      	add	r7, sp, #0
 80223ba:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80223bc:	687b      	ldr	r3, [r7, #4]
 80223be:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80223c0:	68fb      	ldr	r3, [r7, #12]
 80223c2:	2b00      	cmp	r3, #0
 80223c4:	d106      	bne.n	80223d4 <ipfrag_free_pbuf_custom+0x20>
 80223c6:	4b11      	ldr	r3, [pc, #68]	; (802240c <ipfrag_free_pbuf_custom+0x58>)
 80223c8:	f240 22ce 	movw	r2, #718	; 0x2ce
 80223cc:	4910      	ldr	r1, [pc, #64]	; (8022410 <ipfrag_free_pbuf_custom+0x5c>)
 80223ce:	4811      	ldr	r0, [pc, #68]	; (8022414 <ipfrag_free_pbuf_custom+0x60>)
 80223d0:	f000 fb94 	bl	8022afc <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80223d4:	68fa      	ldr	r2, [r7, #12]
 80223d6:	687b      	ldr	r3, [r7, #4]
 80223d8:	429a      	cmp	r2, r3
 80223da:	d006      	beq.n	80223ea <ipfrag_free_pbuf_custom+0x36>
 80223dc:	4b0b      	ldr	r3, [pc, #44]	; (802240c <ipfrag_free_pbuf_custom+0x58>)
 80223de:	f240 22cf 	movw	r2, #719	; 0x2cf
 80223e2:	490d      	ldr	r1, [pc, #52]	; (8022418 <ipfrag_free_pbuf_custom+0x64>)
 80223e4:	480b      	ldr	r0, [pc, #44]	; (8022414 <ipfrag_free_pbuf_custom+0x60>)
 80223e6:	f000 fb89 	bl	8022afc <iprintf>
  if (pcr->original != NULL) {
 80223ea:	68fb      	ldr	r3, [r7, #12]
 80223ec:	695b      	ldr	r3, [r3, #20]
 80223ee:	2b00      	cmp	r3, #0
 80223f0:	d004      	beq.n	80223fc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80223f2:	68fb      	ldr	r3, [r7, #12]
 80223f4:	695b      	ldr	r3, [r3, #20]
 80223f6:	4618      	mov	r0, r3
 80223f8:	f7fc fe48 	bl	801f08c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80223fc:	68f8      	ldr	r0, [r7, #12]
 80223fe:	f7ff ffbd 	bl	802237c <ip_frag_free_pbuf_custom_ref>
}
 8022402:	bf00      	nop
 8022404:	3710      	adds	r7, #16
 8022406:	46bd      	mov	sp, r7
 8022408:	bd80      	pop	{r7, pc}
 802240a:	bf00      	nop
 802240c:	08028adc 	.word	0x08028adc
 8022410:	08028ca0 	.word	0x08028ca0
 8022414:	08028b24 	.word	0x08028b24
 8022418:	08028cac 	.word	0x08028cac

0802241c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 802241c:	b580      	push	{r7, lr}
 802241e:	b094      	sub	sp, #80	; 0x50
 8022420:	af02      	add	r7, sp, #8
 8022422:	60f8      	str	r0, [r7, #12]
 8022424:	60b9      	str	r1, [r7, #8]
 8022426:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8022428:	2300      	movs	r3, #0
 802242a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 802242e:	68bb      	ldr	r3, [r7, #8]
 8022430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8022432:	3b14      	subs	r3, #20
 8022434:	2b00      	cmp	r3, #0
 8022436:	da00      	bge.n	802243a <ip4_frag+0x1e>
 8022438:	3307      	adds	r3, #7
 802243a:	10db      	asrs	r3, r3, #3
 802243c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 802243e:	2314      	movs	r3, #20
 8022440:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8022442:	68fb      	ldr	r3, [r7, #12]
 8022444:	685b      	ldr	r3, [r3, #4]
 8022446:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8022448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802244a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 802244c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802244e:	781b      	ldrb	r3, [r3, #0]
 8022450:	f003 030f 	and.w	r3, r3, #15
 8022454:	b2db      	uxtb	r3, r3
 8022456:	009b      	lsls	r3, r3, #2
 8022458:	b2db      	uxtb	r3, r3
 802245a:	2b14      	cmp	r3, #20
 802245c:	d002      	beq.n	8022464 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 802245e:	f06f 0305 	mvn.w	r3, #5
 8022462:	e110      	b.n	8022686 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8022464:	68fb      	ldr	r3, [r7, #12]
 8022466:	895b      	ldrh	r3, [r3, #10]
 8022468:	2b13      	cmp	r3, #19
 802246a:	d809      	bhi.n	8022480 <ip4_frag+0x64>
 802246c:	4b88      	ldr	r3, [pc, #544]	; (8022690 <ip4_frag+0x274>)
 802246e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8022472:	4988      	ldr	r1, [pc, #544]	; (8022694 <ip4_frag+0x278>)
 8022474:	4888      	ldr	r0, [pc, #544]	; (8022698 <ip4_frag+0x27c>)
 8022476:	f000 fb41 	bl	8022afc <iprintf>
 802247a:	f06f 0305 	mvn.w	r3, #5
 802247e:	e102      	b.n	8022686 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8022480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022482:	88db      	ldrh	r3, [r3, #6]
 8022484:	b29b      	uxth	r3, r3
 8022486:	4618      	mov	r0, r3
 8022488:	f7fb fa24 	bl	801d8d4 <lwip_htons>
 802248c:	4603      	mov	r3, r0
 802248e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8022490:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8022492:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8022496:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 802249a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 802249c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80224a0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80224a2:	68fb      	ldr	r3, [r7, #12]
 80224a4:	891b      	ldrh	r3, [r3, #8]
 80224a6:	3b14      	subs	r3, #20
 80224a8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80224ac:	e0e1      	b.n	8022672 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80224ae:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80224b0:	00db      	lsls	r3, r3, #3
 80224b2:	b29b      	uxth	r3, r3
 80224b4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80224b8:	4293      	cmp	r3, r2
 80224ba:	bf28      	it	cs
 80224bc:	4613      	movcs	r3, r2
 80224be:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80224c0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80224c4:	2114      	movs	r1, #20
 80224c6:	200e      	movs	r0, #14
 80224c8:	f7fc fafe 	bl	801eac8 <pbuf_alloc>
 80224cc:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80224ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80224d0:	2b00      	cmp	r3, #0
 80224d2:	f000 80d5 	beq.w	8022680 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80224d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80224d8:	895b      	ldrh	r3, [r3, #10]
 80224da:	2b13      	cmp	r3, #19
 80224dc:	d806      	bhi.n	80224ec <ip4_frag+0xd0>
 80224de:	4b6c      	ldr	r3, [pc, #432]	; (8022690 <ip4_frag+0x274>)
 80224e0:	f44f 7249 	mov.w	r2, #804	; 0x324
 80224e4:	496d      	ldr	r1, [pc, #436]	; (802269c <ip4_frag+0x280>)
 80224e6:	486c      	ldr	r0, [pc, #432]	; (8022698 <ip4_frag+0x27c>)
 80224e8:	f000 fb08 	bl	8022afc <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80224ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80224ee:	685b      	ldr	r3, [r3, #4]
 80224f0:	2214      	movs	r2, #20
 80224f2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80224f4:	4618      	mov	r0, r3
 80224f6:	f000 f9f1 	bl	80228dc <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80224fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80224fc:	685b      	ldr	r3, [r3, #4]
 80224fe:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8022500:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8022502:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8022506:	e064      	b.n	80225d2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8022508:	68fb      	ldr	r3, [r7, #12]
 802250a:	895a      	ldrh	r2, [r3, #10]
 802250c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 802250e:	1ad3      	subs	r3, r2, r3
 8022510:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8022512:	68fb      	ldr	r3, [r7, #12]
 8022514:	895b      	ldrh	r3, [r3, #10]
 8022516:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8022518:	429a      	cmp	r2, r3
 802251a:	d906      	bls.n	802252a <ip4_frag+0x10e>
 802251c:	4b5c      	ldr	r3, [pc, #368]	; (8022690 <ip4_frag+0x274>)
 802251e:	f240 322d 	movw	r2, #813	; 0x32d
 8022522:	495f      	ldr	r1, [pc, #380]	; (80226a0 <ip4_frag+0x284>)
 8022524:	485c      	ldr	r0, [pc, #368]	; (8022698 <ip4_frag+0x27c>)
 8022526:	f000 fae9 	bl	8022afc <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 802252a:	8bfa      	ldrh	r2, [r7, #30]
 802252c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8022530:	4293      	cmp	r3, r2
 8022532:	bf28      	it	cs
 8022534:	4613      	movcs	r3, r2
 8022536:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 802253a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 802253e:	2b00      	cmp	r3, #0
 8022540:	d105      	bne.n	802254e <ip4_frag+0x132>
        poff = 0;
 8022542:	2300      	movs	r3, #0
 8022544:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8022546:	68fb      	ldr	r3, [r7, #12]
 8022548:	681b      	ldr	r3, [r3, #0]
 802254a:	60fb      	str	r3, [r7, #12]
        continue;
 802254c:	e041      	b.n	80225d2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 802254e:	f7ff ff0d 	bl	802236c <ip_frag_alloc_pbuf_custom_ref>
 8022552:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8022554:	69bb      	ldr	r3, [r7, #24]
 8022556:	2b00      	cmp	r3, #0
 8022558:	d103      	bne.n	8022562 <ip4_frag+0x146>
        pbuf_free(rambuf);
 802255a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802255c:	f7fc fd96 	bl	801f08c <pbuf_free>
        goto memerr;
 8022560:	e08f      	b.n	8022682 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8022562:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8022564:	68fb      	ldr	r3, [r7, #12]
 8022566:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8022568:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 802256a:	4413      	add	r3, r2
 802256c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8022570:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8022574:	9201      	str	r2, [sp, #4]
 8022576:	9300      	str	r3, [sp, #0]
 8022578:	4603      	mov	r3, r0
 802257a:	2241      	movs	r2, #65	; 0x41
 802257c:	2000      	movs	r0, #0
 802257e:	f7fc fbcb 	bl	801ed18 <pbuf_alloced_custom>
 8022582:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8022584:	697b      	ldr	r3, [r7, #20]
 8022586:	2b00      	cmp	r3, #0
 8022588:	d106      	bne.n	8022598 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 802258a:	69b8      	ldr	r0, [r7, #24]
 802258c:	f7ff fef6 	bl	802237c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8022590:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8022592:	f7fc fd7b 	bl	801f08c <pbuf_free>
        goto memerr;
 8022596:	e074      	b.n	8022682 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8022598:	68f8      	ldr	r0, [r7, #12]
 802259a:	f7fc fe17 	bl	801f1cc <pbuf_ref>
      pcr->original = p;
 802259e:	69bb      	ldr	r3, [r7, #24]
 80225a0:	68fa      	ldr	r2, [r7, #12]
 80225a2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80225a4:	69bb      	ldr	r3, [r7, #24]
 80225a6:	4a3f      	ldr	r2, [pc, #252]	; (80226a4 <ip4_frag+0x288>)
 80225a8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80225aa:	6979      	ldr	r1, [r7, #20]
 80225ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80225ae:	f7fc fe2f 	bl	801f210 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80225b2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80225b6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80225ba:	1ad3      	subs	r3, r2, r3
 80225bc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80225c0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80225c4:	2b00      	cmp	r3, #0
 80225c6:	d004      	beq.n	80225d2 <ip4_frag+0x1b6>
        poff = 0;
 80225c8:	2300      	movs	r3, #0
 80225ca:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80225cc:	68fb      	ldr	r3, [r7, #12]
 80225ce:	681b      	ldr	r3, [r3, #0]
 80225d0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80225d2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80225d6:	2b00      	cmp	r3, #0
 80225d8:	d196      	bne.n	8022508 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80225da:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80225dc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80225e0:	4413      	add	r3, r2
 80225e2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80225e4:	68bb      	ldr	r3, [r7, #8]
 80225e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80225e8:	f1a3 0213 	sub.w	r2, r3, #19
 80225ec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80225f0:	429a      	cmp	r2, r3
 80225f2:	bfcc      	ite	gt
 80225f4:	2301      	movgt	r3, #1
 80225f6:	2300      	movle	r3, #0
 80225f8:	b2db      	uxtb	r3, r3
 80225fa:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80225fc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8022600:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8022604:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8022606:	6a3b      	ldr	r3, [r7, #32]
 8022608:	2b00      	cmp	r3, #0
 802260a:	d002      	beq.n	8022612 <ip4_frag+0x1f6>
 802260c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802260e:	2b00      	cmp	r3, #0
 8022610:	d003      	beq.n	802261a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8022612:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8022614:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8022618:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 802261a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 802261c:	4618      	mov	r0, r3
 802261e:	f7fb f959 	bl	801d8d4 <lwip_htons>
 8022622:	4603      	mov	r3, r0
 8022624:	461a      	mov	r2, r3
 8022626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022628:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 802262a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 802262c:	3314      	adds	r3, #20
 802262e:	b29b      	uxth	r3, r3
 8022630:	4618      	mov	r0, r3
 8022632:	f7fb f94f 	bl	801d8d4 <lwip_htons>
 8022636:	4603      	mov	r3, r0
 8022638:	461a      	mov	r2, r3
 802263a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802263c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 802263e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022640:	2200      	movs	r2, #0
 8022642:	729a      	strb	r2, [r3, #10]
 8022644:	2200      	movs	r2, #0
 8022646:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8022648:	68bb      	ldr	r3, [r7, #8]
 802264a:	695b      	ldr	r3, [r3, #20]
 802264c:	687a      	ldr	r2, [r7, #4]
 802264e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8022650:	68b8      	ldr	r0, [r7, #8]
 8022652:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8022654:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8022656:	f7fc fd19 	bl	801f08c <pbuf_free>
    left = (u16_t)(left - fragsize);
 802265a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 802265e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8022660:	1ad3      	subs	r3, r2, r3
 8022662:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8022666:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 802266a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 802266c:	4413      	add	r3, r2
 802266e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8022672:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8022676:	2b00      	cmp	r3, #0
 8022678:	f47f af19 	bne.w	80224ae <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 802267c:	2300      	movs	r3, #0
 802267e:	e002      	b.n	8022686 <ip4_frag+0x26a>
      goto memerr;
 8022680:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8022682:	f04f 33ff 	mov.w	r3, #4294967295
}
 8022686:	4618      	mov	r0, r3
 8022688:	3748      	adds	r7, #72	; 0x48
 802268a:	46bd      	mov	sp, r7
 802268c:	bd80      	pop	{r7, pc}
 802268e:	bf00      	nop
 8022690:	08028adc 	.word	0x08028adc
 8022694:	08028cb8 	.word	0x08028cb8
 8022698:	08028b24 	.word	0x08028b24
 802269c:	08028cd4 	.word	0x08028cd4
 80226a0:	08028cf4 	.word	0x08028cf4
 80226a4:	080223b5 	.word	0x080223b5

080226a8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80226a8:	b580      	push	{r7, lr}
 80226aa:	b086      	sub	sp, #24
 80226ac:	af00      	add	r7, sp, #0
 80226ae:	6078      	str	r0, [r7, #4]
 80226b0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80226b2:	230e      	movs	r3, #14
 80226b4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80226b6:	687b      	ldr	r3, [r7, #4]
 80226b8:	895b      	ldrh	r3, [r3, #10]
 80226ba:	2b0e      	cmp	r3, #14
 80226bc:	d96e      	bls.n	802279c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80226be:	687b      	ldr	r3, [r7, #4]
 80226c0:	7bdb      	ldrb	r3, [r3, #15]
 80226c2:	2b00      	cmp	r3, #0
 80226c4:	d106      	bne.n	80226d4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80226c6:	683b      	ldr	r3, [r7, #0]
 80226c8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80226cc:	3301      	adds	r3, #1
 80226ce:	b2da      	uxtb	r2, r3
 80226d0:	687b      	ldr	r3, [r7, #4]
 80226d2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80226d4:	687b      	ldr	r3, [r7, #4]
 80226d6:	685b      	ldr	r3, [r3, #4]
 80226d8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80226da:	693b      	ldr	r3, [r7, #16]
 80226dc:	7b1a      	ldrb	r2, [r3, #12]
 80226de:	7b5b      	ldrb	r3, [r3, #13]
 80226e0:	021b      	lsls	r3, r3, #8
 80226e2:	4313      	orrs	r3, r2
 80226e4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80226e6:	693b      	ldr	r3, [r7, #16]
 80226e8:	781b      	ldrb	r3, [r3, #0]
 80226ea:	f003 0301 	and.w	r3, r3, #1
 80226ee:	2b00      	cmp	r3, #0
 80226f0:	d023      	beq.n	802273a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80226f2:	693b      	ldr	r3, [r7, #16]
 80226f4:	781b      	ldrb	r3, [r3, #0]
 80226f6:	2b01      	cmp	r3, #1
 80226f8:	d10f      	bne.n	802271a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80226fa:	693b      	ldr	r3, [r7, #16]
 80226fc:	785b      	ldrb	r3, [r3, #1]
 80226fe:	2b00      	cmp	r3, #0
 8022700:	d11b      	bne.n	802273a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8022702:	693b      	ldr	r3, [r7, #16]
 8022704:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8022706:	2b5e      	cmp	r3, #94	; 0x5e
 8022708:	d117      	bne.n	802273a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 802270a:	687b      	ldr	r3, [r7, #4]
 802270c:	7b5b      	ldrb	r3, [r3, #13]
 802270e:	f043 0310 	orr.w	r3, r3, #16
 8022712:	b2da      	uxtb	r2, r3
 8022714:	687b      	ldr	r3, [r7, #4]
 8022716:	735a      	strb	r2, [r3, #13]
 8022718:	e00f      	b.n	802273a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 802271a:	693b      	ldr	r3, [r7, #16]
 802271c:	2206      	movs	r2, #6
 802271e:	4928      	ldr	r1, [pc, #160]	; (80227c0 <ethernet_input+0x118>)
 8022720:	4618      	mov	r0, r3
 8022722:	f000 f8cb 	bl	80228bc <memcmp>
 8022726:	4603      	mov	r3, r0
 8022728:	2b00      	cmp	r3, #0
 802272a:	d106      	bne.n	802273a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 802272c:	687b      	ldr	r3, [r7, #4]
 802272e:	7b5b      	ldrb	r3, [r3, #13]
 8022730:	f043 0308 	orr.w	r3, r3, #8
 8022734:	b2da      	uxtb	r2, r3
 8022736:	687b      	ldr	r3, [r7, #4]
 8022738:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 802273a:	89fb      	ldrh	r3, [r7, #14]
 802273c:	2b08      	cmp	r3, #8
 802273e:	d003      	beq.n	8022748 <ethernet_input+0xa0>
 8022740:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8022744:	d014      	beq.n	8022770 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8022746:	e032      	b.n	80227ae <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8022748:	683b      	ldr	r3, [r7, #0]
 802274a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 802274e:	f003 0308 	and.w	r3, r3, #8
 8022752:	2b00      	cmp	r3, #0
 8022754:	d024      	beq.n	80227a0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8022756:	8afb      	ldrh	r3, [r7, #22]
 8022758:	4619      	mov	r1, r3
 802275a:	6878      	ldr	r0, [r7, #4]
 802275c:	f7fc fc10 	bl	801ef80 <pbuf_remove_header>
 8022760:	4603      	mov	r3, r0
 8022762:	2b00      	cmp	r3, #0
 8022764:	d11e      	bne.n	80227a4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8022766:	6839      	ldr	r1, [r7, #0]
 8022768:	6878      	ldr	r0, [r7, #4]
 802276a:	f7fe fe8d 	bl	8021488 <ip4_input>
      break;
 802276e:	e013      	b.n	8022798 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8022770:	683b      	ldr	r3, [r7, #0]
 8022772:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8022776:	f003 0308 	and.w	r3, r3, #8
 802277a:	2b00      	cmp	r3, #0
 802277c:	d014      	beq.n	80227a8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 802277e:	8afb      	ldrh	r3, [r7, #22]
 8022780:	4619      	mov	r1, r3
 8022782:	6878      	ldr	r0, [r7, #4]
 8022784:	f7fc fbfc 	bl	801ef80 <pbuf_remove_header>
 8022788:	4603      	mov	r3, r0
 802278a:	2b00      	cmp	r3, #0
 802278c:	d10e      	bne.n	80227ac <ethernet_input+0x104>
        etharp_input(p, netif);
 802278e:	6839      	ldr	r1, [r7, #0]
 8022790:	6878      	ldr	r0, [r7, #4]
 8022792:	f7fe f82d 	bl	80207f0 <etharp_input>
      break;
 8022796:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8022798:	2300      	movs	r3, #0
 802279a:	e00c      	b.n	80227b6 <ethernet_input+0x10e>
    goto free_and_return;
 802279c:	bf00      	nop
 802279e:	e006      	b.n	80227ae <ethernet_input+0x106>
        goto free_and_return;
 80227a0:	bf00      	nop
 80227a2:	e004      	b.n	80227ae <ethernet_input+0x106>
        goto free_and_return;
 80227a4:	bf00      	nop
 80227a6:	e002      	b.n	80227ae <ethernet_input+0x106>
        goto free_and_return;
 80227a8:	bf00      	nop
 80227aa:	e000      	b.n	80227ae <ethernet_input+0x106>
        goto free_and_return;
 80227ac:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80227ae:	6878      	ldr	r0, [r7, #4]
 80227b0:	f7fc fc6c 	bl	801f08c <pbuf_free>
  return ERR_OK;
 80227b4:	2300      	movs	r3, #0
}
 80227b6:	4618      	mov	r0, r3
 80227b8:	3718      	adds	r7, #24
 80227ba:	46bd      	mov	sp, r7
 80227bc:	bd80      	pop	{r7, pc}
 80227be:	bf00      	nop
 80227c0:	08029254 	.word	0x08029254

080227c4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80227c4:	b580      	push	{r7, lr}
 80227c6:	b086      	sub	sp, #24
 80227c8:	af00      	add	r7, sp, #0
 80227ca:	60f8      	str	r0, [r7, #12]
 80227cc:	60b9      	str	r1, [r7, #8]
 80227ce:	607a      	str	r2, [r7, #4]
 80227d0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80227d2:	8c3b      	ldrh	r3, [r7, #32]
 80227d4:	4618      	mov	r0, r3
 80227d6:	f7fb f87d 	bl	801d8d4 <lwip_htons>
 80227da:	4603      	mov	r3, r0
 80227dc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80227de:	210e      	movs	r1, #14
 80227e0:	68b8      	ldr	r0, [r7, #8]
 80227e2:	f7fc fbbd 	bl	801ef60 <pbuf_add_header>
 80227e6:	4603      	mov	r3, r0
 80227e8:	2b00      	cmp	r3, #0
 80227ea:	d125      	bne.n	8022838 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80227ec:	68bb      	ldr	r3, [r7, #8]
 80227ee:	685b      	ldr	r3, [r3, #4]
 80227f0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80227f2:	693b      	ldr	r3, [r7, #16]
 80227f4:	8afa      	ldrh	r2, [r7, #22]
 80227f6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80227f8:	693b      	ldr	r3, [r7, #16]
 80227fa:	2206      	movs	r2, #6
 80227fc:	6839      	ldr	r1, [r7, #0]
 80227fe:	4618      	mov	r0, r3
 8022800:	f000 f86c 	bl	80228dc <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8022804:	693b      	ldr	r3, [r7, #16]
 8022806:	3306      	adds	r3, #6
 8022808:	2206      	movs	r2, #6
 802280a:	6879      	ldr	r1, [r7, #4]
 802280c:	4618      	mov	r0, r3
 802280e:	f000 f865 	bl	80228dc <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8022812:	68fb      	ldr	r3, [r7, #12]
 8022814:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8022818:	2b06      	cmp	r3, #6
 802281a:	d006      	beq.n	802282a <ethernet_output+0x66>
 802281c:	4b0a      	ldr	r3, [pc, #40]	; (8022848 <ethernet_output+0x84>)
 802281e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8022822:	490a      	ldr	r1, [pc, #40]	; (802284c <ethernet_output+0x88>)
 8022824:	480a      	ldr	r0, [pc, #40]	; (8022850 <ethernet_output+0x8c>)
 8022826:	f000 f969 	bl	8022afc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 802282a:	68fb      	ldr	r3, [r7, #12]
 802282c:	699b      	ldr	r3, [r3, #24]
 802282e:	68b9      	ldr	r1, [r7, #8]
 8022830:	68f8      	ldr	r0, [r7, #12]
 8022832:	4798      	blx	r3
 8022834:	4603      	mov	r3, r0
 8022836:	e002      	b.n	802283e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8022838:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 802283a:	f06f 0301 	mvn.w	r3, #1
}
 802283e:	4618      	mov	r0, r3
 8022840:	3718      	adds	r7, #24
 8022842:	46bd      	mov	sp, r7
 8022844:	bd80      	pop	{r7, pc}
 8022846:	bf00      	nop
 8022848:	08028d04 	.word	0x08028d04
 802284c:	08028d3c 	.word	0x08028d3c
 8022850:	08028d70 	.word	0x08028d70

08022854 <__libc_init_array>:
 8022854:	b570      	push	{r4, r5, r6, lr}
 8022856:	4d0d      	ldr	r5, [pc, #52]	; (802288c <__libc_init_array+0x38>)
 8022858:	4c0d      	ldr	r4, [pc, #52]	; (8022890 <__libc_init_array+0x3c>)
 802285a:	1b64      	subs	r4, r4, r5
 802285c:	10a4      	asrs	r4, r4, #2
 802285e:	2600      	movs	r6, #0
 8022860:	42a6      	cmp	r6, r4
 8022862:	d109      	bne.n	8022878 <__libc_init_array+0x24>
 8022864:	4d0b      	ldr	r5, [pc, #44]	; (8022894 <__libc_init_array+0x40>)
 8022866:	4c0c      	ldr	r4, [pc, #48]	; (8022898 <__libc_init_array+0x44>)
 8022868:	f001 fbfe 	bl	8024068 <_init>
 802286c:	1b64      	subs	r4, r4, r5
 802286e:	10a4      	asrs	r4, r4, #2
 8022870:	2600      	movs	r6, #0
 8022872:	42a6      	cmp	r6, r4
 8022874:	d105      	bne.n	8022882 <__libc_init_array+0x2e>
 8022876:	bd70      	pop	{r4, r5, r6, pc}
 8022878:	f855 3b04 	ldr.w	r3, [r5], #4
 802287c:	4798      	blx	r3
 802287e:	3601      	adds	r6, #1
 8022880:	e7ee      	b.n	8022860 <__libc_init_array+0xc>
 8022882:	f855 3b04 	ldr.w	r3, [r5], #4
 8022886:	4798      	blx	r3
 8022888:	3601      	adds	r6, #1
 802288a:	e7f2      	b.n	8022872 <__libc_init_array+0x1e>
 802288c:	080293b4 	.word	0x080293b4
 8022890:	080293b4 	.word	0x080293b4
 8022894:	080293b4 	.word	0x080293b4
 8022898:	080293b8 	.word	0x080293b8

0802289c <malloc>:
 802289c:	4b02      	ldr	r3, [pc, #8]	; (80228a8 <malloc+0xc>)
 802289e:	4601      	mov	r1, r0
 80228a0:	6818      	ldr	r0, [r3, #0]
 80228a2:	f000 b8b7 	b.w	8022a14 <_malloc_r>
 80228a6:	bf00      	nop
 80228a8:	20000140 	.word	0x20000140

080228ac <free>:
 80228ac:	4b02      	ldr	r3, [pc, #8]	; (80228b8 <free+0xc>)
 80228ae:	4601      	mov	r1, r0
 80228b0:	6818      	ldr	r0, [r3, #0]
 80228b2:	f000 b843 	b.w	802293c <_free_r>
 80228b6:	bf00      	nop
 80228b8:	20000140 	.word	0x20000140

080228bc <memcmp>:
 80228bc:	b510      	push	{r4, lr}
 80228be:	3901      	subs	r1, #1
 80228c0:	4402      	add	r2, r0
 80228c2:	4290      	cmp	r0, r2
 80228c4:	d101      	bne.n	80228ca <memcmp+0xe>
 80228c6:	2000      	movs	r0, #0
 80228c8:	e005      	b.n	80228d6 <memcmp+0x1a>
 80228ca:	7803      	ldrb	r3, [r0, #0]
 80228cc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80228d0:	42a3      	cmp	r3, r4
 80228d2:	d001      	beq.n	80228d8 <memcmp+0x1c>
 80228d4:	1b18      	subs	r0, r3, r4
 80228d6:	bd10      	pop	{r4, pc}
 80228d8:	3001      	adds	r0, #1
 80228da:	e7f2      	b.n	80228c2 <memcmp+0x6>

080228dc <memcpy>:
 80228dc:	440a      	add	r2, r1
 80228de:	4291      	cmp	r1, r2
 80228e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80228e4:	d100      	bne.n	80228e8 <memcpy+0xc>
 80228e6:	4770      	bx	lr
 80228e8:	b510      	push	{r4, lr}
 80228ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80228ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80228f2:	4291      	cmp	r1, r2
 80228f4:	d1f9      	bne.n	80228ea <memcpy+0xe>
 80228f6:	bd10      	pop	{r4, pc}

080228f8 <memmove>:
 80228f8:	4288      	cmp	r0, r1
 80228fa:	b510      	push	{r4, lr}
 80228fc:	eb01 0402 	add.w	r4, r1, r2
 8022900:	d902      	bls.n	8022908 <memmove+0x10>
 8022902:	4284      	cmp	r4, r0
 8022904:	4623      	mov	r3, r4
 8022906:	d807      	bhi.n	8022918 <memmove+0x20>
 8022908:	1e43      	subs	r3, r0, #1
 802290a:	42a1      	cmp	r1, r4
 802290c:	d008      	beq.n	8022920 <memmove+0x28>
 802290e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022912:	f803 2f01 	strb.w	r2, [r3, #1]!
 8022916:	e7f8      	b.n	802290a <memmove+0x12>
 8022918:	4402      	add	r2, r0
 802291a:	4601      	mov	r1, r0
 802291c:	428a      	cmp	r2, r1
 802291e:	d100      	bne.n	8022922 <memmove+0x2a>
 8022920:	bd10      	pop	{r4, pc}
 8022922:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8022926:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802292a:	e7f7      	b.n	802291c <memmove+0x24>

0802292c <memset>:
 802292c:	4402      	add	r2, r0
 802292e:	4603      	mov	r3, r0
 8022930:	4293      	cmp	r3, r2
 8022932:	d100      	bne.n	8022936 <memset+0xa>
 8022934:	4770      	bx	lr
 8022936:	f803 1b01 	strb.w	r1, [r3], #1
 802293a:	e7f9      	b.n	8022930 <memset+0x4>

0802293c <_free_r>:
 802293c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802293e:	2900      	cmp	r1, #0
 8022940:	d044      	beq.n	80229cc <_free_r+0x90>
 8022942:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022946:	9001      	str	r0, [sp, #4]
 8022948:	2b00      	cmp	r3, #0
 802294a:	f1a1 0404 	sub.w	r4, r1, #4
 802294e:	bfb8      	it	lt
 8022950:	18e4      	addlt	r4, r4, r3
 8022952:	f000 fdbb 	bl	80234cc <__malloc_lock>
 8022956:	4a1e      	ldr	r2, [pc, #120]	; (80229d0 <_free_r+0x94>)
 8022958:	9801      	ldr	r0, [sp, #4]
 802295a:	6813      	ldr	r3, [r2, #0]
 802295c:	b933      	cbnz	r3, 802296c <_free_r+0x30>
 802295e:	6063      	str	r3, [r4, #4]
 8022960:	6014      	str	r4, [r2, #0]
 8022962:	b003      	add	sp, #12
 8022964:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022968:	f000 bdb6 	b.w	80234d8 <__malloc_unlock>
 802296c:	42a3      	cmp	r3, r4
 802296e:	d908      	bls.n	8022982 <_free_r+0x46>
 8022970:	6825      	ldr	r5, [r4, #0]
 8022972:	1961      	adds	r1, r4, r5
 8022974:	428b      	cmp	r3, r1
 8022976:	bf01      	itttt	eq
 8022978:	6819      	ldreq	r1, [r3, #0]
 802297a:	685b      	ldreq	r3, [r3, #4]
 802297c:	1949      	addeq	r1, r1, r5
 802297e:	6021      	streq	r1, [r4, #0]
 8022980:	e7ed      	b.n	802295e <_free_r+0x22>
 8022982:	461a      	mov	r2, r3
 8022984:	685b      	ldr	r3, [r3, #4]
 8022986:	b10b      	cbz	r3, 802298c <_free_r+0x50>
 8022988:	42a3      	cmp	r3, r4
 802298a:	d9fa      	bls.n	8022982 <_free_r+0x46>
 802298c:	6811      	ldr	r1, [r2, #0]
 802298e:	1855      	adds	r5, r2, r1
 8022990:	42a5      	cmp	r5, r4
 8022992:	d10b      	bne.n	80229ac <_free_r+0x70>
 8022994:	6824      	ldr	r4, [r4, #0]
 8022996:	4421      	add	r1, r4
 8022998:	1854      	adds	r4, r2, r1
 802299a:	42a3      	cmp	r3, r4
 802299c:	6011      	str	r1, [r2, #0]
 802299e:	d1e0      	bne.n	8022962 <_free_r+0x26>
 80229a0:	681c      	ldr	r4, [r3, #0]
 80229a2:	685b      	ldr	r3, [r3, #4]
 80229a4:	6053      	str	r3, [r2, #4]
 80229a6:	4421      	add	r1, r4
 80229a8:	6011      	str	r1, [r2, #0]
 80229aa:	e7da      	b.n	8022962 <_free_r+0x26>
 80229ac:	d902      	bls.n	80229b4 <_free_r+0x78>
 80229ae:	230c      	movs	r3, #12
 80229b0:	6003      	str	r3, [r0, #0]
 80229b2:	e7d6      	b.n	8022962 <_free_r+0x26>
 80229b4:	6825      	ldr	r5, [r4, #0]
 80229b6:	1961      	adds	r1, r4, r5
 80229b8:	428b      	cmp	r3, r1
 80229ba:	bf04      	itt	eq
 80229bc:	6819      	ldreq	r1, [r3, #0]
 80229be:	685b      	ldreq	r3, [r3, #4]
 80229c0:	6063      	str	r3, [r4, #4]
 80229c2:	bf04      	itt	eq
 80229c4:	1949      	addeq	r1, r1, r5
 80229c6:	6021      	streq	r1, [r4, #0]
 80229c8:	6054      	str	r4, [r2, #4]
 80229ca:	e7ca      	b.n	8022962 <_free_r+0x26>
 80229cc:	b003      	add	sp, #12
 80229ce:	bd30      	pop	{r4, r5, pc}
 80229d0:	20014344 	.word	0x20014344

080229d4 <sbrk_aligned>:
 80229d4:	b570      	push	{r4, r5, r6, lr}
 80229d6:	4e0e      	ldr	r6, [pc, #56]	; (8022a10 <sbrk_aligned+0x3c>)
 80229d8:	460c      	mov	r4, r1
 80229da:	6831      	ldr	r1, [r6, #0]
 80229dc:	4605      	mov	r5, r0
 80229de:	b911      	cbnz	r1, 80229e6 <sbrk_aligned+0x12>
 80229e0:	f000 f96e 	bl	8022cc0 <_sbrk_r>
 80229e4:	6030      	str	r0, [r6, #0]
 80229e6:	4621      	mov	r1, r4
 80229e8:	4628      	mov	r0, r5
 80229ea:	f000 f969 	bl	8022cc0 <_sbrk_r>
 80229ee:	1c43      	adds	r3, r0, #1
 80229f0:	d00a      	beq.n	8022a08 <sbrk_aligned+0x34>
 80229f2:	1cc4      	adds	r4, r0, #3
 80229f4:	f024 0403 	bic.w	r4, r4, #3
 80229f8:	42a0      	cmp	r0, r4
 80229fa:	d007      	beq.n	8022a0c <sbrk_aligned+0x38>
 80229fc:	1a21      	subs	r1, r4, r0
 80229fe:	4628      	mov	r0, r5
 8022a00:	f000 f95e 	bl	8022cc0 <_sbrk_r>
 8022a04:	3001      	adds	r0, #1
 8022a06:	d101      	bne.n	8022a0c <sbrk_aligned+0x38>
 8022a08:	f04f 34ff 	mov.w	r4, #4294967295
 8022a0c:	4620      	mov	r0, r4
 8022a0e:	bd70      	pop	{r4, r5, r6, pc}
 8022a10:	20014348 	.word	0x20014348

08022a14 <_malloc_r>:
 8022a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022a18:	1ccd      	adds	r5, r1, #3
 8022a1a:	f025 0503 	bic.w	r5, r5, #3
 8022a1e:	3508      	adds	r5, #8
 8022a20:	2d0c      	cmp	r5, #12
 8022a22:	bf38      	it	cc
 8022a24:	250c      	movcc	r5, #12
 8022a26:	2d00      	cmp	r5, #0
 8022a28:	4607      	mov	r7, r0
 8022a2a:	db01      	blt.n	8022a30 <_malloc_r+0x1c>
 8022a2c:	42a9      	cmp	r1, r5
 8022a2e:	d905      	bls.n	8022a3c <_malloc_r+0x28>
 8022a30:	230c      	movs	r3, #12
 8022a32:	603b      	str	r3, [r7, #0]
 8022a34:	2600      	movs	r6, #0
 8022a36:	4630      	mov	r0, r6
 8022a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022a3c:	4e2e      	ldr	r6, [pc, #184]	; (8022af8 <_malloc_r+0xe4>)
 8022a3e:	f000 fd45 	bl	80234cc <__malloc_lock>
 8022a42:	6833      	ldr	r3, [r6, #0]
 8022a44:	461c      	mov	r4, r3
 8022a46:	bb34      	cbnz	r4, 8022a96 <_malloc_r+0x82>
 8022a48:	4629      	mov	r1, r5
 8022a4a:	4638      	mov	r0, r7
 8022a4c:	f7ff ffc2 	bl	80229d4 <sbrk_aligned>
 8022a50:	1c43      	adds	r3, r0, #1
 8022a52:	4604      	mov	r4, r0
 8022a54:	d14d      	bne.n	8022af2 <_malloc_r+0xde>
 8022a56:	6834      	ldr	r4, [r6, #0]
 8022a58:	4626      	mov	r6, r4
 8022a5a:	2e00      	cmp	r6, #0
 8022a5c:	d140      	bne.n	8022ae0 <_malloc_r+0xcc>
 8022a5e:	6823      	ldr	r3, [r4, #0]
 8022a60:	4631      	mov	r1, r6
 8022a62:	4638      	mov	r0, r7
 8022a64:	eb04 0803 	add.w	r8, r4, r3
 8022a68:	f000 f92a 	bl	8022cc0 <_sbrk_r>
 8022a6c:	4580      	cmp	r8, r0
 8022a6e:	d13a      	bne.n	8022ae6 <_malloc_r+0xd2>
 8022a70:	6821      	ldr	r1, [r4, #0]
 8022a72:	3503      	adds	r5, #3
 8022a74:	1a6d      	subs	r5, r5, r1
 8022a76:	f025 0503 	bic.w	r5, r5, #3
 8022a7a:	3508      	adds	r5, #8
 8022a7c:	2d0c      	cmp	r5, #12
 8022a7e:	bf38      	it	cc
 8022a80:	250c      	movcc	r5, #12
 8022a82:	4629      	mov	r1, r5
 8022a84:	4638      	mov	r0, r7
 8022a86:	f7ff ffa5 	bl	80229d4 <sbrk_aligned>
 8022a8a:	3001      	adds	r0, #1
 8022a8c:	d02b      	beq.n	8022ae6 <_malloc_r+0xd2>
 8022a8e:	6823      	ldr	r3, [r4, #0]
 8022a90:	442b      	add	r3, r5
 8022a92:	6023      	str	r3, [r4, #0]
 8022a94:	e00e      	b.n	8022ab4 <_malloc_r+0xa0>
 8022a96:	6822      	ldr	r2, [r4, #0]
 8022a98:	1b52      	subs	r2, r2, r5
 8022a9a:	d41e      	bmi.n	8022ada <_malloc_r+0xc6>
 8022a9c:	2a0b      	cmp	r2, #11
 8022a9e:	d916      	bls.n	8022ace <_malloc_r+0xba>
 8022aa0:	1961      	adds	r1, r4, r5
 8022aa2:	42a3      	cmp	r3, r4
 8022aa4:	6025      	str	r5, [r4, #0]
 8022aa6:	bf18      	it	ne
 8022aa8:	6059      	strne	r1, [r3, #4]
 8022aaa:	6863      	ldr	r3, [r4, #4]
 8022aac:	bf08      	it	eq
 8022aae:	6031      	streq	r1, [r6, #0]
 8022ab0:	5162      	str	r2, [r4, r5]
 8022ab2:	604b      	str	r3, [r1, #4]
 8022ab4:	4638      	mov	r0, r7
 8022ab6:	f104 060b 	add.w	r6, r4, #11
 8022aba:	f000 fd0d 	bl	80234d8 <__malloc_unlock>
 8022abe:	f026 0607 	bic.w	r6, r6, #7
 8022ac2:	1d23      	adds	r3, r4, #4
 8022ac4:	1af2      	subs	r2, r6, r3
 8022ac6:	d0b6      	beq.n	8022a36 <_malloc_r+0x22>
 8022ac8:	1b9b      	subs	r3, r3, r6
 8022aca:	50a3      	str	r3, [r4, r2]
 8022acc:	e7b3      	b.n	8022a36 <_malloc_r+0x22>
 8022ace:	6862      	ldr	r2, [r4, #4]
 8022ad0:	42a3      	cmp	r3, r4
 8022ad2:	bf0c      	ite	eq
 8022ad4:	6032      	streq	r2, [r6, #0]
 8022ad6:	605a      	strne	r2, [r3, #4]
 8022ad8:	e7ec      	b.n	8022ab4 <_malloc_r+0xa0>
 8022ada:	4623      	mov	r3, r4
 8022adc:	6864      	ldr	r4, [r4, #4]
 8022ade:	e7b2      	b.n	8022a46 <_malloc_r+0x32>
 8022ae0:	4634      	mov	r4, r6
 8022ae2:	6876      	ldr	r6, [r6, #4]
 8022ae4:	e7b9      	b.n	8022a5a <_malloc_r+0x46>
 8022ae6:	230c      	movs	r3, #12
 8022ae8:	603b      	str	r3, [r7, #0]
 8022aea:	4638      	mov	r0, r7
 8022aec:	f000 fcf4 	bl	80234d8 <__malloc_unlock>
 8022af0:	e7a1      	b.n	8022a36 <_malloc_r+0x22>
 8022af2:	6025      	str	r5, [r4, #0]
 8022af4:	e7de      	b.n	8022ab4 <_malloc_r+0xa0>
 8022af6:	bf00      	nop
 8022af8:	20014344 	.word	0x20014344

08022afc <iprintf>:
 8022afc:	b40f      	push	{r0, r1, r2, r3}
 8022afe:	4b0a      	ldr	r3, [pc, #40]	; (8022b28 <iprintf+0x2c>)
 8022b00:	b513      	push	{r0, r1, r4, lr}
 8022b02:	681c      	ldr	r4, [r3, #0]
 8022b04:	b124      	cbz	r4, 8022b10 <iprintf+0x14>
 8022b06:	69a3      	ldr	r3, [r4, #24]
 8022b08:	b913      	cbnz	r3, 8022b10 <iprintf+0x14>
 8022b0a:	4620      	mov	r0, r4
 8022b0c:	f000 fbc6 	bl	802329c <__sinit>
 8022b10:	ab05      	add	r3, sp, #20
 8022b12:	9a04      	ldr	r2, [sp, #16]
 8022b14:	68a1      	ldr	r1, [r4, #8]
 8022b16:	9301      	str	r3, [sp, #4]
 8022b18:	4620      	mov	r0, r4
 8022b1a:	f000 fe69 	bl	80237f0 <_vfiprintf_r>
 8022b1e:	b002      	add	sp, #8
 8022b20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022b24:	b004      	add	sp, #16
 8022b26:	4770      	bx	lr
 8022b28:	20000140 	.word	0x20000140

08022b2c <putchar>:
 8022b2c:	4b09      	ldr	r3, [pc, #36]	; (8022b54 <putchar+0x28>)
 8022b2e:	b513      	push	{r0, r1, r4, lr}
 8022b30:	681c      	ldr	r4, [r3, #0]
 8022b32:	4601      	mov	r1, r0
 8022b34:	b134      	cbz	r4, 8022b44 <putchar+0x18>
 8022b36:	69a3      	ldr	r3, [r4, #24]
 8022b38:	b923      	cbnz	r3, 8022b44 <putchar+0x18>
 8022b3a:	9001      	str	r0, [sp, #4]
 8022b3c:	4620      	mov	r0, r4
 8022b3e:	f000 fbad 	bl	802329c <__sinit>
 8022b42:	9901      	ldr	r1, [sp, #4]
 8022b44:	68a2      	ldr	r2, [r4, #8]
 8022b46:	4620      	mov	r0, r4
 8022b48:	b002      	add	sp, #8
 8022b4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022b4e:	f001 b913 	b.w	8023d78 <_putc_r>
 8022b52:	bf00      	nop
 8022b54:	20000140 	.word	0x20000140

08022b58 <_puts_r>:
 8022b58:	b570      	push	{r4, r5, r6, lr}
 8022b5a:	460e      	mov	r6, r1
 8022b5c:	4605      	mov	r5, r0
 8022b5e:	b118      	cbz	r0, 8022b68 <_puts_r+0x10>
 8022b60:	6983      	ldr	r3, [r0, #24]
 8022b62:	b90b      	cbnz	r3, 8022b68 <_puts_r+0x10>
 8022b64:	f000 fb9a 	bl	802329c <__sinit>
 8022b68:	69ab      	ldr	r3, [r5, #24]
 8022b6a:	68ac      	ldr	r4, [r5, #8]
 8022b6c:	b913      	cbnz	r3, 8022b74 <_puts_r+0x1c>
 8022b6e:	4628      	mov	r0, r5
 8022b70:	f000 fb94 	bl	802329c <__sinit>
 8022b74:	4b2c      	ldr	r3, [pc, #176]	; (8022c28 <_puts_r+0xd0>)
 8022b76:	429c      	cmp	r4, r3
 8022b78:	d120      	bne.n	8022bbc <_puts_r+0x64>
 8022b7a:	686c      	ldr	r4, [r5, #4]
 8022b7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022b7e:	07db      	lsls	r3, r3, #31
 8022b80:	d405      	bmi.n	8022b8e <_puts_r+0x36>
 8022b82:	89a3      	ldrh	r3, [r4, #12]
 8022b84:	0598      	lsls	r0, r3, #22
 8022b86:	d402      	bmi.n	8022b8e <_puts_r+0x36>
 8022b88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022b8a:	f000 fc37 	bl	80233fc <__retarget_lock_acquire_recursive>
 8022b8e:	89a3      	ldrh	r3, [r4, #12]
 8022b90:	0719      	lsls	r1, r3, #28
 8022b92:	d51d      	bpl.n	8022bd0 <_puts_r+0x78>
 8022b94:	6923      	ldr	r3, [r4, #16]
 8022b96:	b1db      	cbz	r3, 8022bd0 <_puts_r+0x78>
 8022b98:	3e01      	subs	r6, #1
 8022b9a:	68a3      	ldr	r3, [r4, #8]
 8022b9c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8022ba0:	3b01      	subs	r3, #1
 8022ba2:	60a3      	str	r3, [r4, #8]
 8022ba4:	bb39      	cbnz	r1, 8022bf6 <_puts_r+0x9e>
 8022ba6:	2b00      	cmp	r3, #0
 8022ba8:	da38      	bge.n	8022c1c <_puts_r+0xc4>
 8022baa:	4622      	mov	r2, r4
 8022bac:	210a      	movs	r1, #10
 8022bae:	4628      	mov	r0, r5
 8022bb0:	f000 f97c 	bl	8022eac <__swbuf_r>
 8022bb4:	3001      	adds	r0, #1
 8022bb6:	d011      	beq.n	8022bdc <_puts_r+0x84>
 8022bb8:	250a      	movs	r5, #10
 8022bba:	e011      	b.n	8022be0 <_puts_r+0x88>
 8022bbc:	4b1b      	ldr	r3, [pc, #108]	; (8022c2c <_puts_r+0xd4>)
 8022bbe:	429c      	cmp	r4, r3
 8022bc0:	d101      	bne.n	8022bc6 <_puts_r+0x6e>
 8022bc2:	68ac      	ldr	r4, [r5, #8]
 8022bc4:	e7da      	b.n	8022b7c <_puts_r+0x24>
 8022bc6:	4b1a      	ldr	r3, [pc, #104]	; (8022c30 <_puts_r+0xd8>)
 8022bc8:	429c      	cmp	r4, r3
 8022bca:	bf08      	it	eq
 8022bcc:	68ec      	ldreq	r4, [r5, #12]
 8022bce:	e7d5      	b.n	8022b7c <_puts_r+0x24>
 8022bd0:	4621      	mov	r1, r4
 8022bd2:	4628      	mov	r0, r5
 8022bd4:	f000 f9bc 	bl	8022f50 <__swsetup_r>
 8022bd8:	2800      	cmp	r0, #0
 8022bda:	d0dd      	beq.n	8022b98 <_puts_r+0x40>
 8022bdc:	f04f 35ff 	mov.w	r5, #4294967295
 8022be0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022be2:	07da      	lsls	r2, r3, #31
 8022be4:	d405      	bmi.n	8022bf2 <_puts_r+0x9a>
 8022be6:	89a3      	ldrh	r3, [r4, #12]
 8022be8:	059b      	lsls	r3, r3, #22
 8022bea:	d402      	bmi.n	8022bf2 <_puts_r+0x9a>
 8022bec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022bee:	f000 fc06 	bl	80233fe <__retarget_lock_release_recursive>
 8022bf2:	4628      	mov	r0, r5
 8022bf4:	bd70      	pop	{r4, r5, r6, pc}
 8022bf6:	2b00      	cmp	r3, #0
 8022bf8:	da04      	bge.n	8022c04 <_puts_r+0xac>
 8022bfa:	69a2      	ldr	r2, [r4, #24]
 8022bfc:	429a      	cmp	r2, r3
 8022bfe:	dc06      	bgt.n	8022c0e <_puts_r+0xb6>
 8022c00:	290a      	cmp	r1, #10
 8022c02:	d004      	beq.n	8022c0e <_puts_r+0xb6>
 8022c04:	6823      	ldr	r3, [r4, #0]
 8022c06:	1c5a      	adds	r2, r3, #1
 8022c08:	6022      	str	r2, [r4, #0]
 8022c0a:	7019      	strb	r1, [r3, #0]
 8022c0c:	e7c5      	b.n	8022b9a <_puts_r+0x42>
 8022c0e:	4622      	mov	r2, r4
 8022c10:	4628      	mov	r0, r5
 8022c12:	f000 f94b 	bl	8022eac <__swbuf_r>
 8022c16:	3001      	adds	r0, #1
 8022c18:	d1bf      	bne.n	8022b9a <_puts_r+0x42>
 8022c1a:	e7df      	b.n	8022bdc <_puts_r+0x84>
 8022c1c:	6823      	ldr	r3, [r4, #0]
 8022c1e:	250a      	movs	r5, #10
 8022c20:	1c5a      	adds	r2, r3, #1
 8022c22:	6022      	str	r2, [r4, #0]
 8022c24:	701d      	strb	r5, [r3, #0]
 8022c26:	e7db      	b.n	8022be0 <_puts_r+0x88>
 8022c28:	08029338 	.word	0x08029338
 8022c2c:	08029358 	.word	0x08029358
 8022c30:	08029318 	.word	0x08029318

08022c34 <puts>:
 8022c34:	4b02      	ldr	r3, [pc, #8]	; (8022c40 <puts+0xc>)
 8022c36:	4601      	mov	r1, r0
 8022c38:	6818      	ldr	r0, [r3, #0]
 8022c3a:	f7ff bf8d 	b.w	8022b58 <_puts_r>
 8022c3e:	bf00      	nop
 8022c40:	20000140 	.word	0x20000140

08022c44 <rand>:
 8022c44:	4b16      	ldr	r3, [pc, #88]	; (8022ca0 <rand+0x5c>)
 8022c46:	b510      	push	{r4, lr}
 8022c48:	681c      	ldr	r4, [r3, #0]
 8022c4a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8022c4c:	b9b3      	cbnz	r3, 8022c7c <rand+0x38>
 8022c4e:	2018      	movs	r0, #24
 8022c50:	f7ff fe24 	bl	802289c <malloc>
 8022c54:	63a0      	str	r0, [r4, #56]	; 0x38
 8022c56:	b928      	cbnz	r0, 8022c64 <rand+0x20>
 8022c58:	4602      	mov	r2, r0
 8022c5a:	4b12      	ldr	r3, [pc, #72]	; (8022ca4 <rand+0x60>)
 8022c5c:	4812      	ldr	r0, [pc, #72]	; (8022ca8 <rand+0x64>)
 8022c5e:	214e      	movs	r1, #78	; 0x4e
 8022c60:	f000 f9e4 	bl	802302c <__assert_func>
 8022c64:	4a11      	ldr	r2, [pc, #68]	; (8022cac <rand+0x68>)
 8022c66:	4b12      	ldr	r3, [pc, #72]	; (8022cb0 <rand+0x6c>)
 8022c68:	e9c0 2300 	strd	r2, r3, [r0]
 8022c6c:	4b11      	ldr	r3, [pc, #68]	; (8022cb4 <rand+0x70>)
 8022c6e:	6083      	str	r3, [r0, #8]
 8022c70:	230b      	movs	r3, #11
 8022c72:	8183      	strh	r3, [r0, #12]
 8022c74:	2201      	movs	r2, #1
 8022c76:	2300      	movs	r3, #0
 8022c78:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8022c7c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8022c7e:	4a0e      	ldr	r2, [pc, #56]	; (8022cb8 <rand+0x74>)
 8022c80:	6920      	ldr	r0, [r4, #16]
 8022c82:	6963      	ldr	r3, [r4, #20]
 8022c84:	490d      	ldr	r1, [pc, #52]	; (8022cbc <rand+0x78>)
 8022c86:	4342      	muls	r2, r0
 8022c88:	fb01 2203 	mla	r2, r1, r3, r2
 8022c8c:	fba0 0101 	umull	r0, r1, r0, r1
 8022c90:	1c43      	adds	r3, r0, #1
 8022c92:	eb42 0001 	adc.w	r0, r2, r1
 8022c96:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8022c9a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8022c9e:	bd10      	pop	{r4, pc}
 8022ca0:	20000140 	.word	0x20000140
 8022ca4:	08029268 	.word	0x08029268
 8022ca8:	0802927f 	.word	0x0802927f
 8022cac:	abcd330e 	.word	0xabcd330e
 8022cb0:	e66d1234 	.word	0xe66d1234
 8022cb4:	0005deec 	.word	0x0005deec
 8022cb8:	5851f42d 	.word	0x5851f42d
 8022cbc:	4c957f2d 	.word	0x4c957f2d

08022cc0 <_sbrk_r>:
 8022cc0:	b538      	push	{r3, r4, r5, lr}
 8022cc2:	4d06      	ldr	r5, [pc, #24]	; (8022cdc <_sbrk_r+0x1c>)
 8022cc4:	2300      	movs	r3, #0
 8022cc6:	4604      	mov	r4, r0
 8022cc8:	4608      	mov	r0, r1
 8022cca:	602b      	str	r3, [r5, #0]
 8022ccc:	f7f2 f888 	bl	8014de0 <_sbrk>
 8022cd0:	1c43      	adds	r3, r0, #1
 8022cd2:	d102      	bne.n	8022cda <_sbrk_r+0x1a>
 8022cd4:	682b      	ldr	r3, [r5, #0]
 8022cd6:	b103      	cbz	r3, 8022cda <_sbrk_r+0x1a>
 8022cd8:	6023      	str	r3, [r4, #0]
 8022cda:	bd38      	pop	{r3, r4, r5, pc}
 8022cdc:	2001434c 	.word	0x2001434c

08022ce0 <setvbuf>:
 8022ce0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8022ce4:	461d      	mov	r5, r3
 8022ce6:	4b5d      	ldr	r3, [pc, #372]	; (8022e5c <setvbuf+0x17c>)
 8022ce8:	681f      	ldr	r7, [r3, #0]
 8022cea:	4604      	mov	r4, r0
 8022cec:	460e      	mov	r6, r1
 8022cee:	4690      	mov	r8, r2
 8022cf0:	b127      	cbz	r7, 8022cfc <setvbuf+0x1c>
 8022cf2:	69bb      	ldr	r3, [r7, #24]
 8022cf4:	b913      	cbnz	r3, 8022cfc <setvbuf+0x1c>
 8022cf6:	4638      	mov	r0, r7
 8022cf8:	f000 fad0 	bl	802329c <__sinit>
 8022cfc:	4b58      	ldr	r3, [pc, #352]	; (8022e60 <setvbuf+0x180>)
 8022cfe:	429c      	cmp	r4, r3
 8022d00:	d167      	bne.n	8022dd2 <setvbuf+0xf2>
 8022d02:	687c      	ldr	r4, [r7, #4]
 8022d04:	f1b8 0f02 	cmp.w	r8, #2
 8022d08:	d006      	beq.n	8022d18 <setvbuf+0x38>
 8022d0a:	f1b8 0f01 	cmp.w	r8, #1
 8022d0e:	f200 809f 	bhi.w	8022e50 <setvbuf+0x170>
 8022d12:	2d00      	cmp	r5, #0
 8022d14:	f2c0 809c 	blt.w	8022e50 <setvbuf+0x170>
 8022d18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022d1a:	07db      	lsls	r3, r3, #31
 8022d1c:	d405      	bmi.n	8022d2a <setvbuf+0x4a>
 8022d1e:	89a3      	ldrh	r3, [r4, #12]
 8022d20:	0598      	lsls	r0, r3, #22
 8022d22:	d402      	bmi.n	8022d2a <setvbuf+0x4a>
 8022d24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022d26:	f000 fb69 	bl	80233fc <__retarget_lock_acquire_recursive>
 8022d2a:	4621      	mov	r1, r4
 8022d2c:	4638      	mov	r0, r7
 8022d2e:	f000 fa21 	bl	8023174 <_fflush_r>
 8022d32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022d34:	b141      	cbz	r1, 8022d48 <setvbuf+0x68>
 8022d36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022d3a:	4299      	cmp	r1, r3
 8022d3c:	d002      	beq.n	8022d44 <setvbuf+0x64>
 8022d3e:	4638      	mov	r0, r7
 8022d40:	f7ff fdfc 	bl	802293c <_free_r>
 8022d44:	2300      	movs	r3, #0
 8022d46:	6363      	str	r3, [r4, #52]	; 0x34
 8022d48:	2300      	movs	r3, #0
 8022d4a:	61a3      	str	r3, [r4, #24]
 8022d4c:	6063      	str	r3, [r4, #4]
 8022d4e:	89a3      	ldrh	r3, [r4, #12]
 8022d50:	0619      	lsls	r1, r3, #24
 8022d52:	d503      	bpl.n	8022d5c <setvbuf+0x7c>
 8022d54:	6921      	ldr	r1, [r4, #16]
 8022d56:	4638      	mov	r0, r7
 8022d58:	f7ff fdf0 	bl	802293c <_free_r>
 8022d5c:	89a3      	ldrh	r3, [r4, #12]
 8022d5e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8022d62:	f023 0303 	bic.w	r3, r3, #3
 8022d66:	f1b8 0f02 	cmp.w	r8, #2
 8022d6a:	81a3      	strh	r3, [r4, #12]
 8022d6c:	d06c      	beq.n	8022e48 <setvbuf+0x168>
 8022d6e:	ab01      	add	r3, sp, #4
 8022d70:	466a      	mov	r2, sp
 8022d72:	4621      	mov	r1, r4
 8022d74:	4638      	mov	r0, r7
 8022d76:	f000 fb43 	bl	8023400 <__swhatbuf_r>
 8022d7a:	89a3      	ldrh	r3, [r4, #12]
 8022d7c:	4318      	orrs	r0, r3
 8022d7e:	81a0      	strh	r0, [r4, #12]
 8022d80:	2d00      	cmp	r5, #0
 8022d82:	d130      	bne.n	8022de6 <setvbuf+0x106>
 8022d84:	9d00      	ldr	r5, [sp, #0]
 8022d86:	4628      	mov	r0, r5
 8022d88:	f7ff fd88 	bl	802289c <malloc>
 8022d8c:	4606      	mov	r6, r0
 8022d8e:	2800      	cmp	r0, #0
 8022d90:	d155      	bne.n	8022e3e <setvbuf+0x15e>
 8022d92:	f8dd 9000 	ldr.w	r9, [sp]
 8022d96:	45a9      	cmp	r9, r5
 8022d98:	d14a      	bne.n	8022e30 <setvbuf+0x150>
 8022d9a:	f04f 35ff 	mov.w	r5, #4294967295
 8022d9e:	2200      	movs	r2, #0
 8022da0:	60a2      	str	r2, [r4, #8]
 8022da2:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8022da6:	6022      	str	r2, [r4, #0]
 8022da8:	6122      	str	r2, [r4, #16]
 8022daa:	2201      	movs	r2, #1
 8022dac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022db0:	6162      	str	r2, [r4, #20]
 8022db2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8022db4:	f043 0302 	orr.w	r3, r3, #2
 8022db8:	07d2      	lsls	r2, r2, #31
 8022dba:	81a3      	strh	r3, [r4, #12]
 8022dbc:	d405      	bmi.n	8022dca <setvbuf+0xea>
 8022dbe:	f413 7f00 	tst.w	r3, #512	; 0x200
 8022dc2:	d102      	bne.n	8022dca <setvbuf+0xea>
 8022dc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022dc6:	f000 fb1a 	bl	80233fe <__retarget_lock_release_recursive>
 8022dca:	4628      	mov	r0, r5
 8022dcc:	b003      	add	sp, #12
 8022dce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022dd2:	4b24      	ldr	r3, [pc, #144]	; (8022e64 <setvbuf+0x184>)
 8022dd4:	429c      	cmp	r4, r3
 8022dd6:	d101      	bne.n	8022ddc <setvbuf+0xfc>
 8022dd8:	68bc      	ldr	r4, [r7, #8]
 8022dda:	e793      	b.n	8022d04 <setvbuf+0x24>
 8022ddc:	4b22      	ldr	r3, [pc, #136]	; (8022e68 <setvbuf+0x188>)
 8022dde:	429c      	cmp	r4, r3
 8022de0:	bf08      	it	eq
 8022de2:	68fc      	ldreq	r4, [r7, #12]
 8022de4:	e78e      	b.n	8022d04 <setvbuf+0x24>
 8022de6:	2e00      	cmp	r6, #0
 8022de8:	d0cd      	beq.n	8022d86 <setvbuf+0xa6>
 8022dea:	69bb      	ldr	r3, [r7, #24]
 8022dec:	b913      	cbnz	r3, 8022df4 <setvbuf+0x114>
 8022dee:	4638      	mov	r0, r7
 8022df0:	f000 fa54 	bl	802329c <__sinit>
 8022df4:	f1b8 0f01 	cmp.w	r8, #1
 8022df8:	bf08      	it	eq
 8022dfa:	89a3      	ldrheq	r3, [r4, #12]
 8022dfc:	6026      	str	r6, [r4, #0]
 8022dfe:	bf04      	itt	eq
 8022e00:	f043 0301 	orreq.w	r3, r3, #1
 8022e04:	81a3      	strheq	r3, [r4, #12]
 8022e06:	89a2      	ldrh	r2, [r4, #12]
 8022e08:	f012 0308 	ands.w	r3, r2, #8
 8022e0c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8022e10:	d01c      	beq.n	8022e4c <setvbuf+0x16c>
 8022e12:	07d3      	lsls	r3, r2, #31
 8022e14:	bf41      	itttt	mi
 8022e16:	2300      	movmi	r3, #0
 8022e18:	426d      	negmi	r5, r5
 8022e1a:	60a3      	strmi	r3, [r4, #8]
 8022e1c:	61a5      	strmi	r5, [r4, #24]
 8022e1e:	bf58      	it	pl
 8022e20:	60a5      	strpl	r5, [r4, #8]
 8022e22:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8022e24:	f015 0501 	ands.w	r5, r5, #1
 8022e28:	d115      	bne.n	8022e56 <setvbuf+0x176>
 8022e2a:	f412 7f00 	tst.w	r2, #512	; 0x200
 8022e2e:	e7c8      	b.n	8022dc2 <setvbuf+0xe2>
 8022e30:	4648      	mov	r0, r9
 8022e32:	f7ff fd33 	bl	802289c <malloc>
 8022e36:	4606      	mov	r6, r0
 8022e38:	2800      	cmp	r0, #0
 8022e3a:	d0ae      	beq.n	8022d9a <setvbuf+0xba>
 8022e3c:	464d      	mov	r5, r9
 8022e3e:	89a3      	ldrh	r3, [r4, #12]
 8022e40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022e44:	81a3      	strh	r3, [r4, #12]
 8022e46:	e7d0      	b.n	8022dea <setvbuf+0x10a>
 8022e48:	2500      	movs	r5, #0
 8022e4a:	e7a8      	b.n	8022d9e <setvbuf+0xbe>
 8022e4c:	60a3      	str	r3, [r4, #8]
 8022e4e:	e7e8      	b.n	8022e22 <setvbuf+0x142>
 8022e50:	f04f 35ff 	mov.w	r5, #4294967295
 8022e54:	e7b9      	b.n	8022dca <setvbuf+0xea>
 8022e56:	2500      	movs	r5, #0
 8022e58:	e7b7      	b.n	8022dca <setvbuf+0xea>
 8022e5a:	bf00      	nop
 8022e5c:	20000140 	.word	0x20000140
 8022e60:	08029338 	.word	0x08029338
 8022e64:	08029358 	.word	0x08029358
 8022e68:	08029318 	.word	0x08029318

08022e6c <siprintf>:
 8022e6c:	b40e      	push	{r1, r2, r3}
 8022e6e:	b500      	push	{lr}
 8022e70:	b09c      	sub	sp, #112	; 0x70
 8022e72:	ab1d      	add	r3, sp, #116	; 0x74
 8022e74:	9002      	str	r0, [sp, #8]
 8022e76:	9006      	str	r0, [sp, #24]
 8022e78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8022e7c:	4809      	ldr	r0, [pc, #36]	; (8022ea4 <siprintf+0x38>)
 8022e7e:	9107      	str	r1, [sp, #28]
 8022e80:	9104      	str	r1, [sp, #16]
 8022e82:	4909      	ldr	r1, [pc, #36]	; (8022ea8 <siprintf+0x3c>)
 8022e84:	f853 2b04 	ldr.w	r2, [r3], #4
 8022e88:	9105      	str	r1, [sp, #20]
 8022e8a:	6800      	ldr	r0, [r0, #0]
 8022e8c:	9301      	str	r3, [sp, #4]
 8022e8e:	a902      	add	r1, sp, #8
 8022e90:	f000 fb84 	bl	802359c <_svfiprintf_r>
 8022e94:	9b02      	ldr	r3, [sp, #8]
 8022e96:	2200      	movs	r2, #0
 8022e98:	701a      	strb	r2, [r3, #0]
 8022e9a:	b01c      	add	sp, #112	; 0x70
 8022e9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8022ea0:	b003      	add	sp, #12
 8022ea2:	4770      	bx	lr
 8022ea4:	20000140 	.word	0x20000140
 8022ea8:	ffff0208 	.word	0xffff0208

08022eac <__swbuf_r>:
 8022eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022eae:	460e      	mov	r6, r1
 8022eb0:	4614      	mov	r4, r2
 8022eb2:	4605      	mov	r5, r0
 8022eb4:	b118      	cbz	r0, 8022ebe <__swbuf_r+0x12>
 8022eb6:	6983      	ldr	r3, [r0, #24]
 8022eb8:	b90b      	cbnz	r3, 8022ebe <__swbuf_r+0x12>
 8022eba:	f000 f9ef 	bl	802329c <__sinit>
 8022ebe:	4b21      	ldr	r3, [pc, #132]	; (8022f44 <__swbuf_r+0x98>)
 8022ec0:	429c      	cmp	r4, r3
 8022ec2:	d12b      	bne.n	8022f1c <__swbuf_r+0x70>
 8022ec4:	686c      	ldr	r4, [r5, #4]
 8022ec6:	69a3      	ldr	r3, [r4, #24]
 8022ec8:	60a3      	str	r3, [r4, #8]
 8022eca:	89a3      	ldrh	r3, [r4, #12]
 8022ecc:	071a      	lsls	r2, r3, #28
 8022ece:	d52f      	bpl.n	8022f30 <__swbuf_r+0x84>
 8022ed0:	6923      	ldr	r3, [r4, #16]
 8022ed2:	b36b      	cbz	r3, 8022f30 <__swbuf_r+0x84>
 8022ed4:	6923      	ldr	r3, [r4, #16]
 8022ed6:	6820      	ldr	r0, [r4, #0]
 8022ed8:	1ac0      	subs	r0, r0, r3
 8022eda:	6963      	ldr	r3, [r4, #20]
 8022edc:	b2f6      	uxtb	r6, r6
 8022ede:	4283      	cmp	r3, r0
 8022ee0:	4637      	mov	r7, r6
 8022ee2:	dc04      	bgt.n	8022eee <__swbuf_r+0x42>
 8022ee4:	4621      	mov	r1, r4
 8022ee6:	4628      	mov	r0, r5
 8022ee8:	f000 f944 	bl	8023174 <_fflush_r>
 8022eec:	bb30      	cbnz	r0, 8022f3c <__swbuf_r+0x90>
 8022eee:	68a3      	ldr	r3, [r4, #8]
 8022ef0:	3b01      	subs	r3, #1
 8022ef2:	60a3      	str	r3, [r4, #8]
 8022ef4:	6823      	ldr	r3, [r4, #0]
 8022ef6:	1c5a      	adds	r2, r3, #1
 8022ef8:	6022      	str	r2, [r4, #0]
 8022efa:	701e      	strb	r6, [r3, #0]
 8022efc:	6963      	ldr	r3, [r4, #20]
 8022efe:	3001      	adds	r0, #1
 8022f00:	4283      	cmp	r3, r0
 8022f02:	d004      	beq.n	8022f0e <__swbuf_r+0x62>
 8022f04:	89a3      	ldrh	r3, [r4, #12]
 8022f06:	07db      	lsls	r3, r3, #31
 8022f08:	d506      	bpl.n	8022f18 <__swbuf_r+0x6c>
 8022f0a:	2e0a      	cmp	r6, #10
 8022f0c:	d104      	bne.n	8022f18 <__swbuf_r+0x6c>
 8022f0e:	4621      	mov	r1, r4
 8022f10:	4628      	mov	r0, r5
 8022f12:	f000 f92f 	bl	8023174 <_fflush_r>
 8022f16:	b988      	cbnz	r0, 8022f3c <__swbuf_r+0x90>
 8022f18:	4638      	mov	r0, r7
 8022f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022f1c:	4b0a      	ldr	r3, [pc, #40]	; (8022f48 <__swbuf_r+0x9c>)
 8022f1e:	429c      	cmp	r4, r3
 8022f20:	d101      	bne.n	8022f26 <__swbuf_r+0x7a>
 8022f22:	68ac      	ldr	r4, [r5, #8]
 8022f24:	e7cf      	b.n	8022ec6 <__swbuf_r+0x1a>
 8022f26:	4b09      	ldr	r3, [pc, #36]	; (8022f4c <__swbuf_r+0xa0>)
 8022f28:	429c      	cmp	r4, r3
 8022f2a:	bf08      	it	eq
 8022f2c:	68ec      	ldreq	r4, [r5, #12]
 8022f2e:	e7ca      	b.n	8022ec6 <__swbuf_r+0x1a>
 8022f30:	4621      	mov	r1, r4
 8022f32:	4628      	mov	r0, r5
 8022f34:	f000 f80c 	bl	8022f50 <__swsetup_r>
 8022f38:	2800      	cmp	r0, #0
 8022f3a:	d0cb      	beq.n	8022ed4 <__swbuf_r+0x28>
 8022f3c:	f04f 37ff 	mov.w	r7, #4294967295
 8022f40:	e7ea      	b.n	8022f18 <__swbuf_r+0x6c>
 8022f42:	bf00      	nop
 8022f44:	08029338 	.word	0x08029338
 8022f48:	08029358 	.word	0x08029358
 8022f4c:	08029318 	.word	0x08029318

08022f50 <__swsetup_r>:
 8022f50:	4b32      	ldr	r3, [pc, #200]	; (802301c <__swsetup_r+0xcc>)
 8022f52:	b570      	push	{r4, r5, r6, lr}
 8022f54:	681d      	ldr	r5, [r3, #0]
 8022f56:	4606      	mov	r6, r0
 8022f58:	460c      	mov	r4, r1
 8022f5a:	b125      	cbz	r5, 8022f66 <__swsetup_r+0x16>
 8022f5c:	69ab      	ldr	r3, [r5, #24]
 8022f5e:	b913      	cbnz	r3, 8022f66 <__swsetup_r+0x16>
 8022f60:	4628      	mov	r0, r5
 8022f62:	f000 f99b 	bl	802329c <__sinit>
 8022f66:	4b2e      	ldr	r3, [pc, #184]	; (8023020 <__swsetup_r+0xd0>)
 8022f68:	429c      	cmp	r4, r3
 8022f6a:	d10f      	bne.n	8022f8c <__swsetup_r+0x3c>
 8022f6c:	686c      	ldr	r4, [r5, #4]
 8022f6e:	89a3      	ldrh	r3, [r4, #12]
 8022f70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022f74:	0719      	lsls	r1, r3, #28
 8022f76:	d42c      	bmi.n	8022fd2 <__swsetup_r+0x82>
 8022f78:	06dd      	lsls	r5, r3, #27
 8022f7a:	d411      	bmi.n	8022fa0 <__swsetup_r+0x50>
 8022f7c:	2309      	movs	r3, #9
 8022f7e:	6033      	str	r3, [r6, #0]
 8022f80:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8022f84:	81a3      	strh	r3, [r4, #12]
 8022f86:	f04f 30ff 	mov.w	r0, #4294967295
 8022f8a:	e03e      	b.n	802300a <__swsetup_r+0xba>
 8022f8c:	4b25      	ldr	r3, [pc, #148]	; (8023024 <__swsetup_r+0xd4>)
 8022f8e:	429c      	cmp	r4, r3
 8022f90:	d101      	bne.n	8022f96 <__swsetup_r+0x46>
 8022f92:	68ac      	ldr	r4, [r5, #8]
 8022f94:	e7eb      	b.n	8022f6e <__swsetup_r+0x1e>
 8022f96:	4b24      	ldr	r3, [pc, #144]	; (8023028 <__swsetup_r+0xd8>)
 8022f98:	429c      	cmp	r4, r3
 8022f9a:	bf08      	it	eq
 8022f9c:	68ec      	ldreq	r4, [r5, #12]
 8022f9e:	e7e6      	b.n	8022f6e <__swsetup_r+0x1e>
 8022fa0:	0758      	lsls	r0, r3, #29
 8022fa2:	d512      	bpl.n	8022fca <__swsetup_r+0x7a>
 8022fa4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022fa6:	b141      	cbz	r1, 8022fba <__swsetup_r+0x6a>
 8022fa8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022fac:	4299      	cmp	r1, r3
 8022fae:	d002      	beq.n	8022fb6 <__swsetup_r+0x66>
 8022fb0:	4630      	mov	r0, r6
 8022fb2:	f7ff fcc3 	bl	802293c <_free_r>
 8022fb6:	2300      	movs	r3, #0
 8022fb8:	6363      	str	r3, [r4, #52]	; 0x34
 8022fba:	89a3      	ldrh	r3, [r4, #12]
 8022fbc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8022fc0:	81a3      	strh	r3, [r4, #12]
 8022fc2:	2300      	movs	r3, #0
 8022fc4:	6063      	str	r3, [r4, #4]
 8022fc6:	6923      	ldr	r3, [r4, #16]
 8022fc8:	6023      	str	r3, [r4, #0]
 8022fca:	89a3      	ldrh	r3, [r4, #12]
 8022fcc:	f043 0308 	orr.w	r3, r3, #8
 8022fd0:	81a3      	strh	r3, [r4, #12]
 8022fd2:	6923      	ldr	r3, [r4, #16]
 8022fd4:	b94b      	cbnz	r3, 8022fea <__swsetup_r+0x9a>
 8022fd6:	89a3      	ldrh	r3, [r4, #12]
 8022fd8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8022fdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8022fe0:	d003      	beq.n	8022fea <__swsetup_r+0x9a>
 8022fe2:	4621      	mov	r1, r4
 8022fe4:	4630      	mov	r0, r6
 8022fe6:	f000 fa31 	bl	802344c <__smakebuf_r>
 8022fea:	89a0      	ldrh	r0, [r4, #12]
 8022fec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022ff0:	f010 0301 	ands.w	r3, r0, #1
 8022ff4:	d00a      	beq.n	802300c <__swsetup_r+0xbc>
 8022ff6:	2300      	movs	r3, #0
 8022ff8:	60a3      	str	r3, [r4, #8]
 8022ffa:	6963      	ldr	r3, [r4, #20]
 8022ffc:	425b      	negs	r3, r3
 8022ffe:	61a3      	str	r3, [r4, #24]
 8023000:	6923      	ldr	r3, [r4, #16]
 8023002:	b943      	cbnz	r3, 8023016 <__swsetup_r+0xc6>
 8023004:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8023008:	d1ba      	bne.n	8022f80 <__swsetup_r+0x30>
 802300a:	bd70      	pop	{r4, r5, r6, pc}
 802300c:	0781      	lsls	r1, r0, #30
 802300e:	bf58      	it	pl
 8023010:	6963      	ldrpl	r3, [r4, #20]
 8023012:	60a3      	str	r3, [r4, #8]
 8023014:	e7f4      	b.n	8023000 <__swsetup_r+0xb0>
 8023016:	2000      	movs	r0, #0
 8023018:	e7f7      	b.n	802300a <__swsetup_r+0xba>
 802301a:	bf00      	nop
 802301c:	20000140 	.word	0x20000140
 8023020:	08029338 	.word	0x08029338
 8023024:	08029358 	.word	0x08029358
 8023028:	08029318 	.word	0x08029318

0802302c <__assert_func>:
 802302c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802302e:	4614      	mov	r4, r2
 8023030:	461a      	mov	r2, r3
 8023032:	4b09      	ldr	r3, [pc, #36]	; (8023058 <__assert_func+0x2c>)
 8023034:	681b      	ldr	r3, [r3, #0]
 8023036:	4605      	mov	r5, r0
 8023038:	68d8      	ldr	r0, [r3, #12]
 802303a:	b14c      	cbz	r4, 8023050 <__assert_func+0x24>
 802303c:	4b07      	ldr	r3, [pc, #28]	; (802305c <__assert_func+0x30>)
 802303e:	9100      	str	r1, [sp, #0]
 8023040:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8023044:	4906      	ldr	r1, [pc, #24]	; (8023060 <__assert_func+0x34>)
 8023046:	462b      	mov	r3, r5
 8023048:	f000 f9a6 	bl	8023398 <fiprintf>
 802304c:	f000 ff32 	bl	8023eb4 <abort>
 8023050:	4b04      	ldr	r3, [pc, #16]	; (8023064 <__assert_func+0x38>)
 8023052:	461c      	mov	r4, r3
 8023054:	e7f3      	b.n	802303e <__assert_func+0x12>
 8023056:	bf00      	nop
 8023058:	20000140 	.word	0x20000140
 802305c:	080292da 	.word	0x080292da
 8023060:	080292e7 	.word	0x080292e7
 8023064:	08029315 	.word	0x08029315

08023068 <__sflush_r>:
 8023068:	898a      	ldrh	r2, [r1, #12]
 802306a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802306e:	4605      	mov	r5, r0
 8023070:	0710      	lsls	r0, r2, #28
 8023072:	460c      	mov	r4, r1
 8023074:	d458      	bmi.n	8023128 <__sflush_r+0xc0>
 8023076:	684b      	ldr	r3, [r1, #4]
 8023078:	2b00      	cmp	r3, #0
 802307a:	dc05      	bgt.n	8023088 <__sflush_r+0x20>
 802307c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802307e:	2b00      	cmp	r3, #0
 8023080:	dc02      	bgt.n	8023088 <__sflush_r+0x20>
 8023082:	2000      	movs	r0, #0
 8023084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023088:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802308a:	2e00      	cmp	r6, #0
 802308c:	d0f9      	beq.n	8023082 <__sflush_r+0x1a>
 802308e:	2300      	movs	r3, #0
 8023090:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8023094:	682f      	ldr	r7, [r5, #0]
 8023096:	602b      	str	r3, [r5, #0]
 8023098:	d032      	beq.n	8023100 <__sflush_r+0x98>
 802309a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802309c:	89a3      	ldrh	r3, [r4, #12]
 802309e:	075a      	lsls	r2, r3, #29
 80230a0:	d505      	bpl.n	80230ae <__sflush_r+0x46>
 80230a2:	6863      	ldr	r3, [r4, #4]
 80230a4:	1ac0      	subs	r0, r0, r3
 80230a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80230a8:	b10b      	cbz	r3, 80230ae <__sflush_r+0x46>
 80230aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80230ac:	1ac0      	subs	r0, r0, r3
 80230ae:	2300      	movs	r3, #0
 80230b0:	4602      	mov	r2, r0
 80230b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80230b4:	6a21      	ldr	r1, [r4, #32]
 80230b6:	4628      	mov	r0, r5
 80230b8:	47b0      	blx	r6
 80230ba:	1c43      	adds	r3, r0, #1
 80230bc:	89a3      	ldrh	r3, [r4, #12]
 80230be:	d106      	bne.n	80230ce <__sflush_r+0x66>
 80230c0:	6829      	ldr	r1, [r5, #0]
 80230c2:	291d      	cmp	r1, #29
 80230c4:	d82c      	bhi.n	8023120 <__sflush_r+0xb8>
 80230c6:	4a2a      	ldr	r2, [pc, #168]	; (8023170 <__sflush_r+0x108>)
 80230c8:	40ca      	lsrs	r2, r1
 80230ca:	07d6      	lsls	r6, r2, #31
 80230cc:	d528      	bpl.n	8023120 <__sflush_r+0xb8>
 80230ce:	2200      	movs	r2, #0
 80230d0:	6062      	str	r2, [r4, #4]
 80230d2:	04d9      	lsls	r1, r3, #19
 80230d4:	6922      	ldr	r2, [r4, #16]
 80230d6:	6022      	str	r2, [r4, #0]
 80230d8:	d504      	bpl.n	80230e4 <__sflush_r+0x7c>
 80230da:	1c42      	adds	r2, r0, #1
 80230dc:	d101      	bne.n	80230e2 <__sflush_r+0x7a>
 80230de:	682b      	ldr	r3, [r5, #0]
 80230e0:	b903      	cbnz	r3, 80230e4 <__sflush_r+0x7c>
 80230e2:	6560      	str	r0, [r4, #84]	; 0x54
 80230e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80230e6:	602f      	str	r7, [r5, #0]
 80230e8:	2900      	cmp	r1, #0
 80230ea:	d0ca      	beq.n	8023082 <__sflush_r+0x1a>
 80230ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80230f0:	4299      	cmp	r1, r3
 80230f2:	d002      	beq.n	80230fa <__sflush_r+0x92>
 80230f4:	4628      	mov	r0, r5
 80230f6:	f7ff fc21 	bl	802293c <_free_r>
 80230fa:	2000      	movs	r0, #0
 80230fc:	6360      	str	r0, [r4, #52]	; 0x34
 80230fe:	e7c1      	b.n	8023084 <__sflush_r+0x1c>
 8023100:	6a21      	ldr	r1, [r4, #32]
 8023102:	2301      	movs	r3, #1
 8023104:	4628      	mov	r0, r5
 8023106:	47b0      	blx	r6
 8023108:	1c41      	adds	r1, r0, #1
 802310a:	d1c7      	bne.n	802309c <__sflush_r+0x34>
 802310c:	682b      	ldr	r3, [r5, #0]
 802310e:	2b00      	cmp	r3, #0
 8023110:	d0c4      	beq.n	802309c <__sflush_r+0x34>
 8023112:	2b1d      	cmp	r3, #29
 8023114:	d001      	beq.n	802311a <__sflush_r+0xb2>
 8023116:	2b16      	cmp	r3, #22
 8023118:	d101      	bne.n	802311e <__sflush_r+0xb6>
 802311a:	602f      	str	r7, [r5, #0]
 802311c:	e7b1      	b.n	8023082 <__sflush_r+0x1a>
 802311e:	89a3      	ldrh	r3, [r4, #12]
 8023120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023124:	81a3      	strh	r3, [r4, #12]
 8023126:	e7ad      	b.n	8023084 <__sflush_r+0x1c>
 8023128:	690f      	ldr	r7, [r1, #16]
 802312a:	2f00      	cmp	r7, #0
 802312c:	d0a9      	beq.n	8023082 <__sflush_r+0x1a>
 802312e:	0793      	lsls	r3, r2, #30
 8023130:	680e      	ldr	r6, [r1, #0]
 8023132:	bf08      	it	eq
 8023134:	694b      	ldreq	r3, [r1, #20]
 8023136:	600f      	str	r7, [r1, #0]
 8023138:	bf18      	it	ne
 802313a:	2300      	movne	r3, #0
 802313c:	eba6 0807 	sub.w	r8, r6, r7
 8023140:	608b      	str	r3, [r1, #8]
 8023142:	f1b8 0f00 	cmp.w	r8, #0
 8023146:	dd9c      	ble.n	8023082 <__sflush_r+0x1a>
 8023148:	6a21      	ldr	r1, [r4, #32]
 802314a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802314c:	4643      	mov	r3, r8
 802314e:	463a      	mov	r2, r7
 8023150:	4628      	mov	r0, r5
 8023152:	47b0      	blx	r6
 8023154:	2800      	cmp	r0, #0
 8023156:	dc06      	bgt.n	8023166 <__sflush_r+0xfe>
 8023158:	89a3      	ldrh	r3, [r4, #12]
 802315a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802315e:	81a3      	strh	r3, [r4, #12]
 8023160:	f04f 30ff 	mov.w	r0, #4294967295
 8023164:	e78e      	b.n	8023084 <__sflush_r+0x1c>
 8023166:	4407      	add	r7, r0
 8023168:	eba8 0800 	sub.w	r8, r8, r0
 802316c:	e7e9      	b.n	8023142 <__sflush_r+0xda>
 802316e:	bf00      	nop
 8023170:	20400001 	.word	0x20400001

08023174 <_fflush_r>:
 8023174:	b538      	push	{r3, r4, r5, lr}
 8023176:	690b      	ldr	r3, [r1, #16]
 8023178:	4605      	mov	r5, r0
 802317a:	460c      	mov	r4, r1
 802317c:	b913      	cbnz	r3, 8023184 <_fflush_r+0x10>
 802317e:	2500      	movs	r5, #0
 8023180:	4628      	mov	r0, r5
 8023182:	bd38      	pop	{r3, r4, r5, pc}
 8023184:	b118      	cbz	r0, 802318e <_fflush_r+0x1a>
 8023186:	6983      	ldr	r3, [r0, #24]
 8023188:	b90b      	cbnz	r3, 802318e <_fflush_r+0x1a>
 802318a:	f000 f887 	bl	802329c <__sinit>
 802318e:	4b14      	ldr	r3, [pc, #80]	; (80231e0 <_fflush_r+0x6c>)
 8023190:	429c      	cmp	r4, r3
 8023192:	d11b      	bne.n	80231cc <_fflush_r+0x58>
 8023194:	686c      	ldr	r4, [r5, #4]
 8023196:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802319a:	2b00      	cmp	r3, #0
 802319c:	d0ef      	beq.n	802317e <_fflush_r+0xa>
 802319e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80231a0:	07d0      	lsls	r0, r2, #31
 80231a2:	d404      	bmi.n	80231ae <_fflush_r+0x3a>
 80231a4:	0599      	lsls	r1, r3, #22
 80231a6:	d402      	bmi.n	80231ae <_fflush_r+0x3a>
 80231a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80231aa:	f000 f927 	bl	80233fc <__retarget_lock_acquire_recursive>
 80231ae:	4628      	mov	r0, r5
 80231b0:	4621      	mov	r1, r4
 80231b2:	f7ff ff59 	bl	8023068 <__sflush_r>
 80231b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80231b8:	07da      	lsls	r2, r3, #31
 80231ba:	4605      	mov	r5, r0
 80231bc:	d4e0      	bmi.n	8023180 <_fflush_r+0xc>
 80231be:	89a3      	ldrh	r3, [r4, #12]
 80231c0:	059b      	lsls	r3, r3, #22
 80231c2:	d4dd      	bmi.n	8023180 <_fflush_r+0xc>
 80231c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80231c6:	f000 f91a 	bl	80233fe <__retarget_lock_release_recursive>
 80231ca:	e7d9      	b.n	8023180 <_fflush_r+0xc>
 80231cc:	4b05      	ldr	r3, [pc, #20]	; (80231e4 <_fflush_r+0x70>)
 80231ce:	429c      	cmp	r4, r3
 80231d0:	d101      	bne.n	80231d6 <_fflush_r+0x62>
 80231d2:	68ac      	ldr	r4, [r5, #8]
 80231d4:	e7df      	b.n	8023196 <_fflush_r+0x22>
 80231d6:	4b04      	ldr	r3, [pc, #16]	; (80231e8 <_fflush_r+0x74>)
 80231d8:	429c      	cmp	r4, r3
 80231da:	bf08      	it	eq
 80231dc:	68ec      	ldreq	r4, [r5, #12]
 80231de:	e7da      	b.n	8023196 <_fflush_r+0x22>
 80231e0:	08029338 	.word	0x08029338
 80231e4:	08029358 	.word	0x08029358
 80231e8:	08029318 	.word	0x08029318

080231ec <std>:
 80231ec:	2300      	movs	r3, #0
 80231ee:	b510      	push	{r4, lr}
 80231f0:	4604      	mov	r4, r0
 80231f2:	e9c0 3300 	strd	r3, r3, [r0]
 80231f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80231fa:	6083      	str	r3, [r0, #8]
 80231fc:	8181      	strh	r1, [r0, #12]
 80231fe:	6643      	str	r3, [r0, #100]	; 0x64
 8023200:	81c2      	strh	r2, [r0, #14]
 8023202:	6183      	str	r3, [r0, #24]
 8023204:	4619      	mov	r1, r3
 8023206:	2208      	movs	r2, #8
 8023208:	305c      	adds	r0, #92	; 0x5c
 802320a:	f7ff fb8f 	bl	802292c <memset>
 802320e:	4b05      	ldr	r3, [pc, #20]	; (8023224 <std+0x38>)
 8023210:	6263      	str	r3, [r4, #36]	; 0x24
 8023212:	4b05      	ldr	r3, [pc, #20]	; (8023228 <std+0x3c>)
 8023214:	62a3      	str	r3, [r4, #40]	; 0x28
 8023216:	4b05      	ldr	r3, [pc, #20]	; (802322c <std+0x40>)
 8023218:	62e3      	str	r3, [r4, #44]	; 0x2c
 802321a:	4b05      	ldr	r3, [pc, #20]	; (8023230 <std+0x44>)
 802321c:	6224      	str	r4, [r4, #32]
 802321e:	6323      	str	r3, [r4, #48]	; 0x30
 8023220:	bd10      	pop	{r4, pc}
 8023222:	bf00      	nop
 8023224:	08023e09 	.word	0x08023e09
 8023228:	08023e2b 	.word	0x08023e2b
 802322c:	08023e63 	.word	0x08023e63
 8023230:	08023e87 	.word	0x08023e87

08023234 <_cleanup_r>:
 8023234:	4901      	ldr	r1, [pc, #4]	; (802323c <_cleanup_r+0x8>)
 8023236:	f000 b8c1 	b.w	80233bc <_fwalk_reent>
 802323a:	bf00      	nop
 802323c:	08023175 	.word	0x08023175

08023240 <__sfmoreglue>:
 8023240:	b570      	push	{r4, r5, r6, lr}
 8023242:	2268      	movs	r2, #104	; 0x68
 8023244:	1e4d      	subs	r5, r1, #1
 8023246:	4355      	muls	r5, r2
 8023248:	460e      	mov	r6, r1
 802324a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802324e:	f7ff fbe1 	bl	8022a14 <_malloc_r>
 8023252:	4604      	mov	r4, r0
 8023254:	b140      	cbz	r0, 8023268 <__sfmoreglue+0x28>
 8023256:	2100      	movs	r1, #0
 8023258:	e9c0 1600 	strd	r1, r6, [r0]
 802325c:	300c      	adds	r0, #12
 802325e:	60a0      	str	r0, [r4, #8]
 8023260:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8023264:	f7ff fb62 	bl	802292c <memset>
 8023268:	4620      	mov	r0, r4
 802326a:	bd70      	pop	{r4, r5, r6, pc}

0802326c <__sfp_lock_acquire>:
 802326c:	4801      	ldr	r0, [pc, #4]	; (8023274 <__sfp_lock_acquire+0x8>)
 802326e:	f000 b8c5 	b.w	80233fc <__retarget_lock_acquire_recursive>
 8023272:	bf00      	nop
 8023274:	20014351 	.word	0x20014351

08023278 <__sfp_lock_release>:
 8023278:	4801      	ldr	r0, [pc, #4]	; (8023280 <__sfp_lock_release+0x8>)
 802327a:	f000 b8c0 	b.w	80233fe <__retarget_lock_release_recursive>
 802327e:	bf00      	nop
 8023280:	20014351 	.word	0x20014351

08023284 <__sinit_lock_acquire>:
 8023284:	4801      	ldr	r0, [pc, #4]	; (802328c <__sinit_lock_acquire+0x8>)
 8023286:	f000 b8b9 	b.w	80233fc <__retarget_lock_acquire_recursive>
 802328a:	bf00      	nop
 802328c:	20014352 	.word	0x20014352

08023290 <__sinit_lock_release>:
 8023290:	4801      	ldr	r0, [pc, #4]	; (8023298 <__sinit_lock_release+0x8>)
 8023292:	f000 b8b4 	b.w	80233fe <__retarget_lock_release_recursive>
 8023296:	bf00      	nop
 8023298:	20014352 	.word	0x20014352

0802329c <__sinit>:
 802329c:	b510      	push	{r4, lr}
 802329e:	4604      	mov	r4, r0
 80232a0:	f7ff fff0 	bl	8023284 <__sinit_lock_acquire>
 80232a4:	69a3      	ldr	r3, [r4, #24]
 80232a6:	b11b      	cbz	r3, 80232b0 <__sinit+0x14>
 80232a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80232ac:	f7ff bff0 	b.w	8023290 <__sinit_lock_release>
 80232b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80232b4:	6523      	str	r3, [r4, #80]	; 0x50
 80232b6:	4b13      	ldr	r3, [pc, #76]	; (8023304 <__sinit+0x68>)
 80232b8:	4a13      	ldr	r2, [pc, #76]	; (8023308 <__sinit+0x6c>)
 80232ba:	681b      	ldr	r3, [r3, #0]
 80232bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80232be:	42a3      	cmp	r3, r4
 80232c0:	bf04      	itt	eq
 80232c2:	2301      	moveq	r3, #1
 80232c4:	61a3      	streq	r3, [r4, #24]
 80232c6:	4620      	mov	r0, r4
 80232c8:	f000 f820 	bl	802330c <__sfp>
 80232cc:	6060      	str	r0, [r4, #4]
 80232ce:	4620      	mov	r0, r4
 80232d0:	f000 f81c 	bl	802330c <__sfp>
 80232d4:	60a0      	str	r0, [r4, #8]
 80232d6:	4620      	mov	r0, r4
 80232d8:	f000 f818 	bl	802330c <__sfp>
 80232dc:	2200      	movs	r2, #0
 80232de:	60e0      	str	r0, [r4, #12]
 80232e0:	2104      	movs	r1, #4
 80232e2:	6860      	ldr	r0, [r4, #4]
 80232e4:	f7ff ff82 	bl	80231ec <std>
 80232e8:	68a0      	ldr	r0, [r4, #8]
 80232ea:	2201      	movs	r2, #1
 80232ec:	2109      	movs	r1, #9
 80232ee:	f7ff ff7d 	bl	80231ec <std>
 80232f2:	68e0      	ldr	r0, [r4, #12]
 80232f4:	2202      	movs	r2, #2
 80232f6:	2112      	movs	r1, #18
 80232f8:	f7ff ff78 	bl	80231ec <std>
 80232fc:	2301      	movs	r3, #1
 80232fe:	61a3      	str	r3, [r4, #24]
 8023300:	e7d2      	b.n	80232a8 <__sinit+0xc>
 8023302:	bf00      	nop
 8023304:	08029264 	.word	0x08029264
 8023308:	08023235 	.word	0x08023235

0802330c <__sfp>:
 802330c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802330e:	4607      	mov	r7, r0
 8023310:	f7ff ffac 	bl	802326c <__sfp_lock_acquire>
 8023314:	4b1e      	ldr	r3, [pc, #120]	; (8023390 <__sfp+0x84>)
 8023316:	681e      	ldr	r6, [r3, #0]
 8023318:	69b3      	ldr	r3, [r6, #24]
 802331a:	b913      	cbnz	r3, 8023322 <__sfp+0x16>
 802331c:	4630      	mov	r0, r6
 802331e:	f7ff ffbd 	bl	802329c <__sinit>
 8023322:	3648      	adds	r6, #72	; 0x48
 8023324:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8023328:	3b01      	subs	r3, #1
 802332a:	d503      	bpl.n	8023334 <__sfp+0x28>
 802332c:	6833      	ldr	r3, [r6, #0]
 802332e:	b30b      	cbz	r3, 8023374 <__sfp+0x68>
 8023330:	6836      	ldr	r6, [r6, #0]
 8023332:	e7f7      	b.n	8023324 <__sfp+0x18>
 8023334:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8023338:	b9d5      	cbnz	r5, 8023370 <__sfp+0x64>
 802333a:	4b16      	ldr	r3, [pc, #88]	; (8023394 <__sfp+0x88>)
 802333c:	60e3      	str	r3, [r4, #12]
 802333e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8023342:	6665      	str	r5, [r4, #100]	; 0x64
 8023344:	f000 f859 	bl	80233fa <__retarget_lock_init_recursive>
 8023348:	f7ff ff96 	bl	8023278 <__sfp_lock_release>
 802334c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8023350:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8023354:	6025      	str	r5, [r4, #0]
 8023356:	61a5      	str	r5, [r4, #24]
 8023358:	2208      	movs	r2, #8
 802335a:	4629      	mov	r1, r5
 802335c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8023360:	f7ff fae4 	bl	802292c <memset>
 8023364:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8023368:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802336c:	4620      	mov	r0, r4
 802336e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023370:	3468      	adds	r4, #104	; 0x68
 8023372:	e7d9      	b.n	8023328 <__sfp+0x1c>
 8023374:	2104      	movs	r1, #4
 8023376:	4638      	mov	r0, r7
 8023378:	f7ff ff62 	bl	8023240 <__sfmoreglue>
 802337c:	4604      	mov	r4, r0
 802337e:	6030      	str	r0, [r6, #0]
 8023380:	2800      	cmp	r0, #0
 8023382:	d1d5      	bne.n	8023330 <__sfp+0x24>
 8023384:	f7ff ff78 	bl	8023278 <__sfp_lock_release>
 8023388:	230c      	movs	r3, #12
 802338a:	603b      	str	r3, [r7, #0]
 802338c:	e7ee      	b.n	802336c <__sfp+0x60>
 802338e:	bf00      	nop
 8023390:	08029264 	.word	0x08029264
 8023394:	ffff0001 	.word	0xffff0001

08023398 <fiprintf>:
 8023398:	b40e      	push	{r1, r2, r3}
 802339a:	b503      	push	{r0, r1, lr}
 802339c:	4601      	mov	r1, r0
 802339e:	ab03      	add	r3, sp, #12
 80233a0:	4805      	ldr	r0, [pc, #20]	; (80233b8 <fiprintf+0x20>)
 80233a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80233a6:	6800      	ldr	r0, [r0, #0]
 80233a8:	9301      	str	r3, [sp, #4]
 80233aa:	f000 fa21 	bl	80237f0 <_vfiprintf_r>
 80233ae:	b002      	add	sp, #8
 80233b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80233b4:	b003      	add	sp, #12
 80233b6:	4770      	bx	lr
 80233b8:	20000140 	.word	0x20000140

080233bc <_fwalk_reent>:
 80233bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80233c0:	4606      	mov	r6, r0
 80233c2:	4688      	mov	r8, r1
 80233c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80233c8:	2700      	movs	r7, #0
 80233ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80233ce:	f1b9 0901 	subs.w	r9, r9, #1
 80233d2:	d505      	bpl.n	80233e0 <_fwalk_reent+0x24>
 80233d4:	6824      	ldr	r4, [r4, #0]
 80233d6:	2c00      	cmp	r4, #0
 80233d8:	d1f7      	bne.n	80233ca <_fwalk_reent+0xe>
 80233da:	4638      	mov	r0, r7
 80233dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80233e0:	89ab      	ldrh	r3, [r5, #12]
 80233e2:	2b01      	cmp	r3, #1
 80233e4:	d907      	bls.n	80233f6 <_fwalk_reent+0x3a>
 80233e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80233ea:	3301      	adds	r3, #1
 80233ec:	d003      	beq.n	80233f6 <_fwalk_reent+0x3a>
 80233ee:	4629      	mov	r1, r5
 80233f0:	4630      	mov	r0, r6
 80233f2:	47c0      	blx	r8
 80233f4:	4307      	orrs	r7, r0
 80233f6:	3568      	adds	r5, #104	; 0x68
 80233f8:	e7e9      	b.n	80233ce <_fwalk_reent+0x12>

080233fa <__retarget_lock_init_recursive>:
 80233fa:	4770      	bx	lr

080233fc <__retarget_lock_acquire_recursive>:
 80233fc:	4770      	bx	lr

080233fe <__retarget_lock_release_recursive>:
 80233fe:	4770      	bx	lr

08023400 <__swhatbuf_r>:
 8023400:	b570      	push	{r4, r5, r6, lr}
 8023402:	460e      	mov	r6, r1
 8023404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023408:	2900      	cmp	r1, #0
 802340a:	b096      	sub	sp, #88	; 0x58
 802340c:	4614      	mov	r4, r2
 802340e:	461d      	mov	r5, r3
 8023410:	da08      	bge.n	8023424 <__swhatbuf_r+0x24>
 8023412:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8023416:	2200      	movs	r2, #0
 8023418:	602a      	str	r2, [r5, #0]
 802341a:	061a      	lsls	r2, r3, #24
 802341c:	d410      	bmi.n	8023440 <__swhatbuf_r+0x40>
 802341e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8023422:	e00e      	b.n	8023442 <__swhatbuf_r+0x42>
 8023424:	466a      	mov	r2, sp
 8023426:	f000 fd5d 	bl	8023ee4 <_fstat_r>
 802342a:	2800      	cmp	r0, #0
 802342c:	dbf1      	blt.n	8023412 <__swhatbuf_r+0x12>
 802342e:	9a01      	ldr	r2, [sp, #4]
 8023430:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8023434:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8023438:	425a      	negs	r2, r3
 802343a:	415a      	adcs	r2, r3
 802343c:	602a      	str	r2, [r5, #0]
 802343e:	e7ee      	b.n	802341e <__swhatbuf_r+0x1e>
 8023440:	2340      	movs	r3, #64	; 0x40
 8023442:	2000      	movs	r0, #0
 8023444:	6023      	str	r3, [r4, #0]
 8023446:	b016      	add	sp, #88	; 0x58
 8023448:	bd70      	pop	{r4, r5, r6, pc}
	...

0802344c <__smakebuf_r>:
 802344c:	898b      	ldrh	r3, [r1, #12]
 802344e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8023450:	079d      	lsls	r5, r3, #30
 8023452:	4606      	mov	r6, r0
 8023454:	460c      	mov	r4, r1
 8023456:	d507      	bpl.n	8023468 <__smakebuf_r+0x1c>
 8023458:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802345c:	6023      	str	r3, [r4, #0]
 802345e:	6123      	str	r3, [r4, #16]
 8023460:	2301      	movs	r3, #1
 8023462:	6163      	str	r3, [r4, #20]
 8023464:	b002      	add	sp, #8
 8023466:	bd70      	pop	{r4, r5, r6, pc}
 8023468:	ab01      	add	r3, sp, #4
 802346a:	466a      	mov	r2, sp
 802346c:	f7ff ffc8 	bl	8023400 <__swhatbuf_r>
 8023470:	9900      	ldr	r1, [sp, #0]
 8023472:	4605      	mov	r5, r0
 8023474:	4630      	mov	r0, r6
 8023476:	f7ff facd 	bl	8022a14 <_malloc_r>
 802347a:	b948      	cbnz	r0, 8023490 <__smakebuf_r+0x44>
 802347c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023480:	059a      	lsls	r2, r3, #22
 8023482:	d4ef      	bmi.n	8023464 <__smakebuf_r+0x18>
 8023484:	f023 0303 	bic.w	r3, r3, #3
 8023488:	f043 0302 	orr.w	r3, r3, #2
 802348c:	81a3      	strh	r3, [r4, #12]
 802348e:	e7e3      	b.n	8023458 <__smakebuf_r+0xc>
 8023490:	4b0d      	ldr	r3, [pc, #52]	; (80234c8 <__smakebuf_r+0x7c>)
 8023492:	62b3      	str	r3, [r6, #40]	; 0x28
 8023494:	89a3      	ldrh	r3, [r4, #12]
 8023496:	6020      	str	r0, [r4, #0]
 8023498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802349c:	81a3      	strh	r3, [r4, #12]
 802349e:	9b00      	ldr	r3, [sp, #0]
 80234a0:	6163      	str	r3, [r4, #20]
 80234a2:	9b01      	ldr	r3, [sp, #4]
 80234a4:	6120      	str	r0, [r4, #16]
 80234a6:	b15b      	cbz	r3, 80234c0 <__smakebuf_r+0x74>
 80234a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80234ac:	4630      	mov	r0, r6
 80234ae:	f000 fd2b 	bl	8023f08 <_isatty_r>
 80234b2:	b128      	cbz	r0, 80234c0 <__smakebuf_r+0x74>
 80234b4:	89a3      	ldrh	r3, [r4, #12]
 80234b6:	f023 0303 	bic.w	r3, r3, #3
 80234ba:	f043 0301 	orr.w	r3, r3, #1
 80234be:	81a3      	strh	r3, [r4, #12]
 80234c0:	89a0      	ldrh	r0, [r4, #12]
 80234c2:	4305      	orrs	r5, r0
 80234c4:	81a5      	strh	r5, [r4, #12]
 80234c6:	e7cd      	b.n	8023464 <__smakebuf_r+0x18>
 80234c8:	08023235 	.word	0x08023235

080234cc <__malloc_lock>:
 80234cc:	4801      	ldr	r0, [pc, #4]	; (80234d4 <__malloc_lock+0x8>)
 80234ce:	f7ff bf95 	b.w	80233fc <__retarget_lock_acquire_recursive>
 80234d2:	bf00      	nop
 80234d4:	20014350 	.word	0x20014350

080234d8 <__malloc_unlock>:
 80234d8:	4801      	ldr	r0, [pc, #4]	; (80234e0 <__malloc_unlock+0x8>)
 80234da:	f7ff bf90 	b.w	80233fe <__retarget_lock_release_recursive>
 80234de:	bf00      	nop
 80234e0:	20014350 	.word	0x20014350

080234e4 <__ssputs_r>:
 80234e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80234e8:	688e      	ldr	r6, [r1, #8]
 80234ea:	429e      	cmp	r6, r3
 80234ec:	4682      	mov	sl, r0
 80234ee:	460c      	mov	r4, r1
 80234f0:	4690      	mov	r8, r2
 80234f2:	461f      	mov	r7, r3
 80234f4:	d838      	bhi.n	8023568 <__ssputs_r+0x84>
 80234f6:	898a      	ldrh	r2, [r1, #12]
 80234f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80234fc:	d032      	beq.n	8023564 <__ssputs_r+0x80>
 80234fe:	6825      	ldr	r5, [r4, #0]
 8023500:	6909      	ldr	r1, [r1, #16]
 8023502:	eba5 0901 	sub.w	r9, r5, r1
 8023506:	6965      	ldr	r5, [r4, #20]
 8023508:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802350c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8023510:	3301      	adds	r3, #1
 8023512:	444b      	add	r3, r9
 8023514:	106d      	asrs	r5, r5, #1
 8023516:	429d      	cmp	r5, r3
 8023518:	bf38      	it	cc
 802351a:	461d      	movcc	r5, r3
 802351c:	0553      	lsls	r3, r2, #21
 802351e:	d531      	bpl.n	8023584 <__ssputs_r+0xa0>
 8023520:	4629      	mov	r1, r5
 8023522:	f7ff fa77 	bl	8022a14 <_malloc_r>
 8023526:	4606      	mov	r6, r0
 8023528:	b950      	cbnz	r0, 8023540 <__ssputs_r+0x5c>
 802352a:	230c      	movs	r3, #12
 802352c:	f8ca 3000 	str.w	r3, [sl]
 8023530:	89a3      	ldrh	r3, [r4, #12]
 8023532:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023536:	81a3      	strh	r3, [r4, #12]
 8023538:	f04f 30ff 	mov.w	r0, #4294967295
 802353c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023540:	6921      	ldr	r1, [r4, #16]
 8023542:	464a      	mov	r2, r9
 8023544:	f7ff f9ca 	bl	80228dc <memcpy>
 8023548:	89a3      	ldrh	r3, [r4, #12]
 802354a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802354e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023552:	81a3      	strh	r3, [r4, #12]
 8023554:	6126      	str	r6, [r4, #16]
 8023556:	6165      	str	r5, [r4, #20]
 8023558:	444e      	add	r6, r9
 802355a:	eba5 0509 	sub.w	r5, r5, r9
 802355e:	6026      	str	r6, [r4, #0]
 8023560:	60a5      	str	r5, [r4, #8]
 8023562:	463e      	mov	r6, r7
 8023564:	42be      	cmp	r6, r7
 8023566:	d900      	bls.n	802356a <__ssputs_r+0x86>
 8023568:	463e      	mov	r6, r7
 802356a:	6820      	ldr	r0, [r4, #0]
 802356c:	4632      	mov	r2, r6
 802356e:	4641      	mov	r1, r8
 8023570:	f7ff f9c2 	bl	80228f8 <memmove>
 8023574:	68a3      	ldr	r3, [r4, #8]
 8023576:	1b9b      	subs	r3, r3, r6
 8023578:	60a3      	str	r3, [r4, #8]
 802357a:	6823      	ldr	r3, [r4, #0]
 802357c:	4433      	add	r3, r6
 802357e:	6023      	str	r3, [r4, #0]
 8023580:	2000      	movs	r0, #0
 8023582:	e7db      	b.n	802353c <__ssputs_r+0x58>
 8023584:	462a      	mov	r2, r5
 8023586:	f000 fce1 	bl	8023f4c <_realloc_r>
 802358a:	4606      	mov	r6, r0
 802358c:	2800      	cmp	r0, #0
 802358e:	d1e1      	bne.n	8023554 <__ssputs_r+0x70>
 8023590:	6921      	ldr	r1, [r4, #16]
 8023592:	4650      	mov	r0, sl
 8023594:	f7ff f9d2 	bl	802293c <_free_r>
 8023598:	e7c7      	b.n	802352a <__ssputs_r+0x46>
	...

0802359c <_svfiprintf_r>:
 802359c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80235a0:	4698      	mov	r8, r3
 80235a2:	898b      	ldrh	r3, [r1, #12]
 80235a4:	061b      	lsls	r3, r3, #24
 80235a6:	b09d      	sub	sp, #116	; 0x74
 80235a8:	4607      	mov	r7, r0
 80235aa:	460d      	mov	r5, r1
 80235ac:	4614      	mov	r4, r2
 80235ae:	d50e      	bpl.n	80235ce <_svfiprintf_r+0x32>
 80235b0:	690b      	ldr	r3, [r1, #16]
 80235b2:	b963      	cbnz	r3, 80235ce <_svfiprintf_r+0x32>
 80235b4:	2140      	movs	r1, #64	; 0x40
 80235b6:	f7ff fa2d 	bl	8022a14 <_malloc_r>
 80235ba:	6028      	str	r0, [r5, #0]
 80235bc:	6128      	str	r0, [r5, #16]
 80235be:	b920      	cbnz	r0, 80235ca <_svfiprintf_r+0x2e>
 80235c0:	230c      	movs	r3, #12
 80235c2:	603b      	str	r3, [r7, #0]
 80235c4:	f04f 30ff 	mov.w	r0, #4294967295
 80235c8:	e0d1      	b.n	802376e <_svfiprintf_r+0x1d2>
 80235ca:	2340      	movs	r3, #64	; 0x40
 80235cc:	616b      	str	r3, [r5, #20]
 80235ce:	2300      	movs	r3, #0
 80235d0:	9309      	str	r3, [sp, #36]	; 0x24
 80235d2:	2320      	movs	r3, #32
 80235d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80235d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80235dc:	2330      	movs	r3, #48	; 0x30
 80235de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8023788 <_svfiprintf_r+0x1ec>
 80235e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80235e6:	f04f 0901 	mov.w	r9, #1
 80235ea:	4623      	mov	r3, r4
 80235ec:	469a      	mov	sl, r3
 80235ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80235f2:	b10a      	cbz	r2, 80235f8 <_svfiprintf_r+0x5c>
 80235f4:	2a25      	cmp	r2, #37	; 0x25
 80235f6:	d1f9      	bne.n	80235ec <_svfiprintf_r+0x50>
 80235f8:	ebba 0b04 	subs.w	fp, sl, r4
 80235fc:	d00b      	beq.n	8023616 <_svfiprintf_r+0x7a>
 80235fe:	465b      	mov	r3, fp
 8023600:	4622      	mov	r2, r4
 8023602:	4629      	mov	r1, r5
 8023604:	4638      	mov	r0, r7
 8023606:	f7ff ff6d 	bl	80234e4 <__ssputs_r>
 802360a:	3001      	adds	r0, #1
 802360c:	f000 80aa 	beq.w	8023764 <_svfiprintf_r+0x1c8>
 8023610:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023612:	445a      	add	r2, fp
 8023614:	9209      	str	r2, [sp, #36]	; 0x24
 8023616:	f89a 3000 	ldrb.w	r3, [sl]
 802361a:	2b00      	cmp	r3, #0
 802361c:	f000 80a2 	beq.w	8023764 <_svfiprintf_r+0x1c8>
 8023620:	2300      	movs	r3, #0
 8023622:	f04f 32ff 	mov.w	r2, #4294967295
 8023626:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802362a:	f10a 0a01 	add.w	sl, sl, #1
 802362e:	9304      	str	r3, [sp, #16]
 8023630:	9307      	str	r3, [sp, #28]
 8023632:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8023636:	931a      	str	r3, [sp, #104]	; 0x68
 8023638:	4654      	mov	r4, sl
 802363a:	2205      	movs	r2, #5
 802363c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023640:	4851      	ldr	r0, [pc, #324]	; (8023788 <_svfiprintf_r+0x1ec>)
 8023642:	f7dc fe15 	bl	8000270 <memchr>
 8023646:	9a04      	ldr	r2, [sp, #16]
 8023648:	b9d8      	cbnz	r0, 8023682 <_svfiprintf_r+0xe6>
 802364a:	06d0      	lsls	r0, r2, #27
 802364c:	bf44      	itt	mi
 802364e:	2320      	movmi	r3, #32
 8023650:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023654:	0711      	lsls	r1, r2, #28
 8023656:	bf44      	itt	mi
 8023658:	232b      	movmi	r3, #43	; 0x2b
 802365a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802365e:	f89a 3000 	ldrb.w	r3, [sl]
 8023662:	2b2a      	cmp	r3, #42	; 0x2a
 8023664:	d015      	beq.n	8023692 <_svfiprintf_r+0xf6>
 8023666:	9a07      	ldr	r2, [sp, #28]
 8023668:	4654      	mov	r4, sl
 802366a:	2000      	movs	r0, #0
 802366c:	f04f 0c0a 	mov.w	ip, #10
 8023670:	4621      	mov	r1, r4
 8023672:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023676:	3b30      	subs	r3, #48	; 0x30
 8023678:	2b09      	cmp	r3, #9
 802367a:	d94e      	bls.n	802371a <_svfiprintf_r+0x17e>
 802367c:	b1b0      	cbz	r0, 80236ac <_svfiprintf_r+0x110>
 802367e:	9207      	str	r2, [sp, #28]
 8023680:	e014      	b.n	80236ac <_svfiprintf_r+0x110>
 8023682:	eba0 0308 	sub.w	r3, r0, r8
 8023686:	fa09 f303 	lsl.w	r3, r9, r3
 802368a:	4313      	orrs	r3, r2
 802368c:	9304      	str	r3, [sp, #16]
 802368e:	46a2      	mov	sl, r4
 8023690:	e7d2      	b.n	8023638 <_svfiprintf_r+0x9c>
 8023692:	9b03      	ldr	r3, [sp, #12]
 8023694:	1d19      	adds	r1, r3, #4
 8023696:	681b      	ldr	r3, [r3, #0]
 8023698:	9103      	str	r1, [sp, #12]
 802369a:	2b00      	cmp	r3, #0
 802369c:	bfbb      	ittet	lt
 802369e:	425b      	neglt	r3, r3
 80236a0:	f042 0202 	orrlt.w	r2, r2, #2
 80236a4:	9307      	strge	r3, [sp, #28]
 80236a6:	9307      	strlt	r3, [sp, #28]
 80236a8:	bfb8      	it	lt
 80236aa:	9204      	strlt	r2, [sp, #16]
 80236ac:	7823      	ldrb	r3, [r4, #0]
 80236ae:	2b2e      	cmp	r3, #46	; 0x2e
 80236b0:	d10c      	bne.n	80236cc <_svfiprintf_r+0x130>
 80236b2:	7863      	ldrb	r3, [r4, #1]
 80236b4:	2b2a      	cmp	r3, #42	; 0x2a
 80236b6:	d135      	bne.n	8023724 <_svfiprintf_r+0x188>
 80236b8:	9b03      	ldr	r3, [sp, #12]
 80236ba:	1d1a      	adds	r2, r3, #4
 80236bc:	681b      	ldr	r3, [r3, #0]
 80236be:	9203      	str	r2, [sp, #12]
 80236c0:	2b00      	cmp	r3, #0
 80236c2:	bfb8      	it	lt
 80236c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80236c8:	3402      	adds	r4, #2
 80236ca:	9305      	str	r3, [sp, #20]
 80236cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8023798 <_svfiprintf_r+0x1fc>
 80236d0:	7821      	ldrb	r1, [r4, #0]
 80236d2:	2203      	movs	r2, #3
 80236d4:	4650      	mov	r0, sl
 80236d6:	f7dc fdcb 	bl	8000270 <memchr>
 80236da:	b140      	cbz	r0, 80236ee <_svfiprintf_r+0x152>
 80236dc:	2340      	movs	r3, #64	; 0x40
 80236de:	eba0 000a 	sub.w	r0, r0, sl
 80236e2:	fa03 f000 	lsl.w	r0, r3, r0
 80236e6:	9b04      	ldr	r3, [sp, #16]
 80236e8:	4303      	orrs	r3, r0
 80236ea:	3401      	adds	r4, #1
 80236ec:	9304      	str	r3, [sp, #16]
 80236ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80236f2:	4826      	ldr	r0, [pc, #152]	; (802378c <_svfiprintf_r+0x1f0>)
 80236f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80236f8:	2206      	movs	r2, #6
 80236fa:	f7dc fdb9 	bl	8000270 <memchr>
 80236fe:	2800      	cmp	r0, #0
 8023700:	d038      	beq.n	8023774 <_svfiprintf_r+0x1d8>
 8023702:	4b23      	ldr	r3, [pc, #140]	; (8023790 <_svfiprintf_r+0x1f4>)
 8023704:	bb1b      	cbnz	r3, 802374e <_svfiprintf_r+0x1b2>
 8023706:	9b03      	ldr	r3, [sp, #12]
 8023708:	3307      	adds	r3, #7
 802370a:	f023 0307 	bic.w	r3, r3, #7
 802370e:	3308      	adds	r3, #8
 8023710:	9303      	str	r3, [sp, #12]
 8023712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023714:	4433      	add	r3, r6
 8023716:	9309      	str	r3, [sp, #36]	; 0x24
 8023718:	e767      	b.n	80235ea <_svfiprintf_r+0x4e>
 802371a:	fb0c 3202 	mla	r2, ip, r2, r3
 802371e:	460c      	mov	r4, r1
 8023720:	2001      	movs	r0, #1
 8023722:	e7a5      	b.n	8023670 <_svfiprintf_r+0xd4>
 8023724:	2300      	movs	r3, #0
 8023726:	3401      	adds	r4, #1
 8023728:	9305      	str	r3, [sp, #20]
 802372a:	4619      	mov	r1, r3
 802372c:	f04f 0c0a 	mov.w	ip, #10
 8023730:	4620      	mov	r0, r4
 8023732:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023736:	3a30      	subs	r2, #48	; 0x30
 8023738:	2a09      	cmp	r2, #9
 802373a:	d903      	bls.n	8023744 <_svfiprintf_r+0x1a8>
 802373c:	2b00      	cmp	r3, #0
 802373e:	d0c5      	beq.n	80236cc <_svfiprintf_r+0x130>
 8023740:	9105      	str	r1, [sp, #20]
 8023742:	e7c3      	b.n	80236cc <_svfiprintf_r+0x130>
 8023744:	fb0c 2101 	mla	r1, ip, r1, r2
 8023748:	4604      	mov	r4, r0
 802374a:	2301      	movs	r3, #1
 802374c:	e7f0      	b.n	8023730 <_svfiprintf_r+0x194>
 802374e:	ab03      	add	r3, sp, #12
 8023750:	9300      	str	r3, [sp, #0]
 8023752:	462a      	mov	r2, r5
 8023754:	4b0f      	ldr	r3, [pc, #60]	; (8023794 <_svfiprintf_r+0x1f8>)
 8023756:	a904      	add	r1, sp, #16
 8023758:	4638      	mov	r0, r7
 802375a:	f3af 8000 	nop.w
 802375e:	1c42      	adds	r2, r0, #1
 8023760:	4606      	mov	r6, r0
 8023762:	d1d6      	bne.n	8023712 <_svfiprintf_r+0x176>
 8023764:	89ab      	ldrh	r3, [r5, #12]
 8023766:	065b      	lsls	r3, r3, #25
 8023768:	f53f af2c 	bmi.w	80235c4 <_svfiprintf_r+0x28>
 802376c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802376e:	b01d      	add	sp, #116	; 0x74
 8023770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023774:	ab03      	add	r3, sp, #12
 8023776:	9300      	str	r3, [sp, #0]
 8023778:	462a      	mov	r2, r5
 802377a:	4b06      	ldr	r3, [pc, #24]	; (8023794 <_svfiprintf_r+0x1f8>)
 802377c:	a904      	add	r1, sp, #16
 802377e:	4638      	mov	r0, r7
 8023780:	f000 f9d4 	bl	8023b2c <_printf_i>
 8023784:	e7eb      	b.n	802375e <_svfiprintf_r+0x1c2>
 8023786:	bf00      	nop
 8023788:	08029378 	.word	0x08029378
 802378c:	08029382 	.word	0x08029382
 8023790:	00000000 	.word	0x00000000
 8023794:	080234e5 	.word	0x080234e5
 8023798:	0802937e 	.word	0x0802937e

0802379c <__sfputc_r>:
 802379c:	6893      	ldr	r3, [r2, #8]
 802379e:	3b01      	subs	r3, #1
 80237a0:	2b00      	cmp	r3, #0
 80237a2:	b410      	push	{r4}
 80237a4:	6093      	str	r3, [r2, #8]
 80237a6:	da08      	bge.n	80237ba <__sfputc_r+0x1e>
 80237a8:	6994      	ldr	r4, [r2, #24]
 80237aa:	42a3      	cmp	r3, r4
 80237ac:	db01      	blt.n	80237b2 <__sfputc_r+0x16>
 80237ae:	290a      	cmp	r1, #10
 80237b0:	d103      	bne.n	80237ba <__sfputc_r+0x1e>
 80237b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80237b6:	f7ff bb79 	b.w	8022eac <__swbuf_r>
 80237ba:	6813      	ldr	r3, [r2, #0]
 80237bc:	1c58      	adds	r0, r3, #1
 80237be:	6010      	str	r0, [r2, #0]
 80237c0:	7019      	strb	r1, [r3, #0]
 80237c2:	4608      	mov	r0, r1
 80237c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80237c8:	4770      	bx	lr

080237ca <__sfputs_r>:
 80237ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80237cc:	4606      	mov	r6, r0
 80237ce:	460f      	mov	r7, r1
 80237d0:	4614      	mov	r4, r2
 80237d2:	18d5      	adds	r5, r2, r3
 80237d4:	42ac      	cmp	r4, r5
 80237d6:	d101      	bne.n	80237dc <__sfputs_r+0x12>
 80237d8:	2000      	movs	r0, #0
 80237da:	e007      	b.n	80237ec <__sfputs_r+0x22>
 80237dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80237e0:	463a      	mov	r2, r7
 80237e2:	4630      	mov	r0, r6
 80237e4:	f7ff ffda 	bl	802379c <__sfputc_r>
 80237e8:	1c43      	adds	r3, r0, #1
 80237ea:	d1f3      	bne.n	80237d4 <__sfputs_r+0xa>
 80237ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080237f0 <_vfiprintf_r>:
 80237f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80237f4:	460d      	mov	r5, r1
 80237f6:	b09d      	sub	sp, #116	; 0x74
 80237f8:	4614      	mov	r4, r2
 80237fa:	4698      	mov	r8, r3
 80237fc:	4606      	mov	r6, r0
 80237fe:	b118      	cbz	r0, 8023808 <_vfiprintf_r+0x18>
 8023800:	6983      	ldr	r3, [r0, #24]
 8023802:	b90b      	cbnz	r3, 8023808 <_vfiprintf_r+0x18>
 8023804:	f7ff fd4a 	bl	802329c <__sinit>
 8023808:	4b89      	ldr	r3, [pc, #548]	; (8023a30 <_vfiprintf_r+0x240>)
 802380a:	429d      	cmp	r5, r3
 802380c:	d11b      	bne.n	8023846 <_vfiprintf_r+0x56>
 802380e:	6875      	ldr	r5, [r6, #4]
 8023810:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023812:	07d9      	lsls	r1, r3, #31
 8023814:	d405      	bmi.n	8023822 <_vfiprintf_r+0x32>
 8023816:	89ab      	ldrh	r3, [r5, #12]
 8023818:	059a      	lsls	r2, r3, #22
 802381a:	d402      	bmi.n	8023822 <_vfiprintf_r+0x32>
 802381c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802381e:	f7ff fded 	bl	80233fc <__retarget_lock_acquire_recursive>
 8023822:	89ab      	ldrh	r3, [r5, #12]
 8023824:	071b      	lsls	r3, r3, #28
 8023826:	d501      	bpl.n	802382c <_vfiprintf_r+0x3c>
 8023828:	692b      	ldr	r3, [r5, #16]
 802382a:	b9eb      	cbnz	r3, 8023868 <_vfiprintf_r+0x78>
 802382c:	4629      	mov	r1, r5
 802382e:	4630      	mov	r0, r6
 8023830:	f7ff fb8e 	bl	8022f50 <__swsetup_r>
 8023834:	b1c0      	cbz	r0, 8023868 <_vfiprintf_r+0x78>
 8023836:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023838:	07dc      	lsls	r4, r3, #31
 802383a:	d50e      	bpl.n	802385a <_vfiprintf_r+0x6a>
 802383c:	f04f 30ff 	mov.w	r0, #4294967295
 8023840:	b01d      	add	sp, #116	; 0x74
 8023842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023846:	4b7b      	ldr	r3, [pc, #492]	; (8023a34 <_vfiprintf_r+0x244>)
 8023848:	429d      	cmp	r5, r3
 802384a:	d101      	bne.n	8023850 <_vfiprintf_r+0x60>
 802384c:	68b5      	ldr	r5, [r6, #8]
 802384e:	e7df      	b.n	8023810 <_vfiprintf_r+0x20>
 8023850:	4b79      	ldr	r3, [pc, #484]	; (8023a38 <_vfiprintf_r+0x248>)
 8023852:	429d      	cmp	r5, r3
 8023854:	bf08      	it	eq
 8023856:	68f5      	ldreq	r5, [r6, #12]
 8023858:	e7da      	b.n	8023810 <_vfiprintf_r+0x20>
 802385a:	89ab      	ldrh	r3, [r5, #12]
 802385c:	0598      	lsls	r0, r3, #22
 802385e:	d4ed      	bmi.n	802383c <_vfiprintf_r+0x4c>
 8023860:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023862:	f7ff fdcc 	bl	80233fe <__retarget_lock_release_recursive>
 8023866:	e7e9      	b.n	802383c <_vfiprintf_r+0x4c>
 8023868:	2300      	movs	r3, #0
 802386a:	9309      	str	r3, [sp, #36]	; 0x24
 802386c:	2320      	movs	r3, #32
 802386e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8023872:	f8cd 800c 	str.w	r8, [sp, #12]
 8023876:	2330      	movs	r3, #48	; 0x30
 8023878:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8023a3c <_vfiprintf_r+0x24c>
 802387c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8023880:	f04f 0901 	mov.w	r9, #1
 8023884:	4623      	mov	r3, r4
 8023886:	469a      	mov	sl, r3
 8023888:	f813 2b01 	ldrb.w	r2, [r3], #1
 802388c:	b10a      	cbz	r2, 8023892 <_vfiprintf_r+0xa2>
 802388e:	2a25      	cmp	r2, #37	; 0x25
 8023890:	d1f9      	bne.n	8023886 <_vfiprintf_r+0x96>
 8023892:	ebba 0b04 	subs.w	fp, sl, r4
 8023896:	d00b      	beq.n	80238b0 <_vfiprintf_r+0xc0>
 8023898:	465b      	mov	r3, fp
 802389a:	4622      	mov	r2, r4
 802389c:	4629      	mov	r1, r5
 802389e:	4630      	mov	r0, r6
 80238a0:	f7ff ff93 	bl	80237ca <__sfputs_r>
 80238a4:	3001      	adds	r0, #1
 80238a6:	f000 80aa 	beq.w	80239fe <_vfiprintf_r+0x20e>
 80238aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80238ac:	445a      	add	r2, fp
 80238ae:	9209      	str	r2, [sp, #36]	; 0x24
 80238b0:	f89a 3000 	ldrb.w	r3, [sl]
 80238b4:	2b00      	cmp	r3, #0
 80238b6:	f000 80a2 	beq.w	80239fe <_vfiprintf_r+0x20e>
 80238ba:	2300      	movs	r3, #0
 80238bc:	f04f 32ff 	mov.w	r2, #4294967295
 80238c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80238c4:	f10a 0a01 	add.w	sl, sl, #1
 80238c8:	9304      	str	r3, [sp, #16]
 80238ca:	9307      	str	r3, [sp, #28]
 80238cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80238d0:	931a      	str	r3, [sp, #104]	; 0x68
 80238d2:	4654      	mov	r4, sl
 80238d4:	2205      	movs	r2, #5
 80238d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80238da:	4858      	ldr	r0, [pc, #352]	; (8023a3c <_vfiprintf_r+0x24c>)
 80238dc:	f7dc fcc8 	bl	8000270 <memchr>
 80238e0:	9a04      	ldr	r2, [sp, #16]
 80238e2:	b9d8      	cbnz	r0, 802391c <_vfiprintf_r+0x12c>
 80238e4:	06d1      	lsls	r1, r2, #27
 80238e6:	bf44      	itt	mi
 80238e8:	2320      	movmi	r3, #32
 80238ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80238ee:	0713      	lsls	r3, r2, #28
 80238f0:	bf44      	itt	mi
 80238f2:	232b      	movmi	r3, #43	; 0x2b
 80238f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80238f8:	f89a 3000 	ldrb.w	r3, [sl]
 80238fc:	2b2a      	cmp	r3, #42	; 0x2a
 80238fe:	d015      	beq.n	802392c <_vfiprintf_r+0x13c>
 8023900:	9a07      	ldr	r2, [sp, #28]
 8023902:	4654      	mov	r4, sl
 8023904:	2000      	movs	r0, #0
 8023906:	f04f 0c0a 	mov.w	ip, #10
 802390a:	4621      	mov	r1, r4
 802390c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023910:	3b30      	subs	r3, #48	; 0x30
 8023912:	2b09      	cmp	r3, #9
 8023914:	d94e      	bls.n	80239b4 <_vfiprintf_r+0x1c4>
 8023916:	b1b0      	cbz	r0, 8023946 <_vfiprintf_r+0x156>
 8023918:	9207      	str	r2, [sp, #28]
 802391a:	e014      	b.n	8023946 <_vfiprintf_r+0x156>
 802391c:	eba0 0308 	sub.w	r3, r0, r8
 8023920:	fa09 f303 	lsl.w	r3, r9, r3
 8023924:	4313      	orrs	r3, r2
 8023926:	9304      	str	r3, [sp, #16]
 8023928:	46a2      	mov	sl, r4
 802392a:	e7d2      	b.n	80238d2 <_vfiprintf_r+0xe2>
 802392c:	9b03      	ldr	r3, [sp, #12]
 802392e:	1d19      	adds	r1, r3, #4
 8023930:	681b      	ldr	r3, [r3, #0]
 8023932:	9103      	str	r1, [sp, #12]
 8023934:	2b00      	cmp	r3, #0
 8023936:	bfbb      	ittet	lt
 8023938:	425b      	neglt	r3, r3
 802393a:	f042 0202 	orrlt.w	r2, r2, #2
 802393e:	9307      	strge	r3, [sp, #28]
 8023940:	9307      	strlt	r3, [sp, #28]
 8023942:	bfb8      	it	lt
 8023944:	9204      	strlt	r2, [sp, #16]
 8023946:	7823      	ldrb	r3, [r4, #0]
 8023948:	2b2e      	cmp	r3, #46	; 0x2e
 802394a:	d10c      	bne.n	8023966 <_vfiprintf_r+0x176>
 802394c:	7863      	ldrb	r3, [r4, #1]
 802394e:	2b2a      	cmp	r3, #42	; 0x2a
 8023950:	d135      	bne.n	80239be <_vfiprintf_r+0x1ce>
 8023952:	9b03      	ldr	r3, [sp, #12]
 8023954:	1d1a      	adds	r2, r3, #4
 8023956:	681b      	ldr	r3, [r3, #0]
 8023958:	9203      	str	r2, [sp, #12]
 802395a:	2b00      	cmp	r3, #0
 802395c:	bfb8      	it	lt
 802395e:	f04f 33ff 	movlt.w	r3, #4294967295
 8023962:	3402      	adds	r4, #2
 8023964:	9305      	str	r3, [sp, #20]
 8023966:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8023a4c <_vfiprintf_r+0x25c>
 802396a:	7821      	ldrb	r1, [r4, #0]
 802396c:	2203      	movs	r2, #3
 802396e:	4650      	mov	r0, sl
 8023970:	f7dc fc7e 	bl	8000270 <memchr>
 8023974:	b140      	cbz	r0, 8023988 <_vfiprintf_r+0x198>
 8023976:	2340      	movs	r3, #64	; 0x40
 8023978:	eba0 000a 	sub.w	r0, r0, sl
 802397c:	fa03 f000 	lsl.w	r0, r3, r0
 8023980:	9b04      	ldr	r3, [sp, #16]
 8023982:	4303      	orrs	r3, r0
 8023984:	3401      	adds	r4, #1
 8023986:	9304      	str	r3, [sp, #16]
 8023988:	f814 1b01 	ldrb.w	r1, [r4], #1
 802398c:	482c      	ldr	r0, [pc, #176]	; (8023a40 <_vfiprintf_r+0x250>)
 802398e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8023992:	2206      	movs	r2, #6
 8023994:	f7dc fc6c 	bl	8000270 <memchr>
 8023998:	2800      	cmp	r0, #0
 802399a:	d03f      	beq.n	8023a1c <_vfiprintf_r+0x22c>
 802399c:	4b29      	ldr	r3, [pc, #164]	; (8023a44 <_vfiprintf_r+0x254>)
 802399e:	bb1b      	cbnz	r3, 80239e8 <_vfiprintf_r+0x1f8>
 80239a0:	9b03      	ldr	r3, [sp, #12]
 80239a2:	3307      	adds	r3, #7
 80239a4:	f023 0307 	bic.w	r3, r3, #7
 80239a8:	3308      	adds	r3, #8
 80239aa:	9303      	str	r3, [sp, #12]
 80239ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80239ae:	443b      	add	r3, r7
 80239b0:	9309      	str	r3, [sp, #36]	; 0x24
 80239b2:	e767      	b.n	8023884 <_vfiprintf_r+0x94>
 80239b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80239b8:	460c      	mov	r4, r1
 80239ba:	2001      	movs	r0, #1
 80239bc:	e7a5      	b.n	802390a <_vfiprintf_r+0x11a>
 80239be:	2300      	movs	r3, #0
 80239c0:	3401      	adds	r4, #1
 80239c2:	9305      	str	r3, [sp, #20]
 80239c4:	4619      	mov	r1, r3
 80239c6:	f04f 0c0a 	mov.w	ip, #10
 80239ca:	4620      	mov	r0, r4
 80239cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80239d0:	3a30      	subs	r2, #48	; 0x30
 80239d2:	2a09      	cmp	r2, #9
 80239d4:	d903      	bls.n	80239de <_vfiprintf_r+0x1ee>
 80239d6:	2b00      	cmp	r3, #0
 80239d8:	d0c5      	beq.n	8023966 <_vfiprintf_r+0x176>
 80239da:	9105      	str	r1, [sp, #20]
 80239dc:	e7c3      	b.n	8023966 <_vfiprintf_r+0x176>
 80239de:	fb0c 2101 	mla	r1, ip, r1, r2
 80239e2:	4604      	mov	r4, r0
 80239e4:	2301      	movs	r3, #1
 80239e6:	e7f0      	b.n	80239ca <_vfiprintf_r+0x1da>
 80239e8:	ab03      	add	r3, sp, #12
 80239ea:	9300      	str	r3, [sp, #0]
 80239ec:	462a      	mov	r2, r5
 80239ee:	4b16      	ldr	r3, [pc, #88]	; (8023a48 <_vfiprintf_r+0x258>)
 80239f0:	a904      	add	r1, sp, #16
 80239f2:	4630      	mov	r0, r6
 80239f4:	f3af 8000 	nop.w
 80239f8:	4607      	mov	r7, r0
 80239fa:	1c78      	adds	r0, r7, #1
 80239fc:	d1d6      	bne.n	80239ac <_vfiprintf_r+0x1bc>
 80239fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023a00:	07d9      	lsls	r1, r3, #31
 8023a02:	d405      	bmi.n	8023a10 <_vfiprintf_r+0x220>
 8023a04:	89ab      	ldrh	r3, [r5, #12]
 8023a06:	059a      	lsls	r2, r3, #22
 8023a08:	d402      	bmi.n	8023a10 <_vfiprintf_r+0x220>
 8023a0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023a0c:	f7ff fcf7 	bl	80233fe <__retarget_lock_release_recursive>
 8023a10:	89ab      	ldrh	r3, [r5, #12]
 8023a12:	065b      	lsls	r3, r3, #25
 8023a14:	f53f af12 	bmi.w	802383c <_vfiprintf_r+0x4c>
 8023a18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023a1a:	e711      	b.n	8023840 <_vfiprintf_r+0x50>
 8023a1c:	ab03      	add	r3, sp, #12
 8023a1e:	9300      	str	r3, [sp, #0]
 8023a20:	462a      	mov	r2, r5
 8023a22:	4b09      	ldr	r3, [pc, #36]	; (8023a48 <_vfiprintf_r+0x258>)
 8023a24:	a904      	add	r1, sp, #16
 8023a26:	4630      	mov	r0, r6
 8023a28:	f000 f880 	bl	8023b2c <_printf_i>
 8023a2c:	e7e4      	b.n	80239f8 <_vfiprintf_r+0x208>
 8023a2e:	bf00      	nop
 8023a30:	08029338 	.word	0x08029338
 8023a34:	08029358 	.word	0x08029358
 8023a38:	08029318 	.word	0x08029318
 8023a3c:	08029378 	.word	0x08029378
 8023a40:	08029382 	.word	0x08029382
 8023a44:	00000000 	.word	0x00000000
 8023a48:	080237cb 	.word	0x080237cb
 8023a4c:	0802937e 	.word	0x0802937e

08023a50 <_printf_common>:
 8023a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023a54:	4616      	mov	r6, r2
 8023a56:	4699      	mov	r9, r3
 8023a58:	688a      	ldr	r2, [r1, #8]
 8023a5a:	690b      	ldr	r3, [r1, #16]
 8023a5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8023a60:	4293      	cmp	r3, r2
 8023a62:	bfb8      	it	lt
 8023a64:	4613      	movlt	r3, r2
 8023a66:	6033      	str	r3, [r6, #0]
 8023a68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8023a6c:	4607      	mov	r7, r0
 8023a6e:	460c      	mov	r4, r1
 8023a70:	b10a      	cbz	r2, 8023a76 <_printf_common+0x26>
 8023a72:	3301      	adds	r3, #1
 8023a74:	6033      	str	r3, [r6, #0]
 8023a76:	6823      	ldr	r3, [r4, #0]
 8023a78:	0699      	lsls	r1, r3, #26
 8023a7a:	bf42      	ittt	mi
 8023a7c:	6833      	ldrmi	r3, [r6, #0]
 8023a7e:	3302      	addmi	r3, #2
 8023a80:	6033      	strmi	r3, [r6, #0]
 8023a82:	6825      	ldr	r5, [r4, #0]
 8023a84:	f015 0506 	ands.w	r5, r5, #6
 8023a88:	d106      	bne.n	8023a98 <_printf_common+0x48>
 8023a8a:	f104 0a19 	add.w	sl, r4, #25
 8023a8e:	68e3      	ldr	r3, [r4, #12]
 8023a90:	6832      	ldr	r2, [r6, #0]
 8023a92:	1a9b      	subs	r3, r3, r2
 8023a94:	42ab      	cmp	r3, r5
 8023a96:	dc26      	bgt.n	8023ae6 <_printf_common+0x96>
 8023a98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8023a9c:	1e13      	subs	r3, r2, #0
 8023a9e:	6822      	ldr	r2, [r4, #0]
 8023aa0:	bf18      	it	ne
 8023aa2:	2301      	movne	r3, #1
 8023aa4:	0692      	lsls	r2, r2, #26
 8023aa6:	d42b      	bmi.n	8023b00 <_printf_common+0xb0>
 8023aa8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8023aac:	4649      	mov	r1, r9
 8023aae:	4638      	mov	r0, r7
 8023ab0:	47c0      	blx	r8
 8023ab2:	3001      	adds	r0, #1
 8023ab4:	d01e      	beq.n	8023af4 <_printf_common+0xa4>
 8023ab6:	6823      	ldr	r3, [r4, #0]
 8023ab8:	68e5      	ldr	r5, [r4, #12]
 8023aba:	6832      	ldr	r2, [r6, #0]
 8023abc:	f003 0306 	and.w	r3, r3, #6
 8023ac0:	2b04      	cmp	r3, #4
 8023ac2:	bf08      	it	eq
 8023ac4:	1aad      	subeq	r5, r5, r2
 8023ac6:	68a3      	ldr	r3, [r4, #8]
 8023ac8:	6922      	ldr	r2, [r4, #16]
 8023aca:	bf0c      	ite	eq
 8023acc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8023ad0:	2500      	movne	r5, #0
 8023ad2:	4293      	cmp	r3, r2
 8023ad4:	bfc4      	itt	gt
 8023ad6:	1a9b      	subgt	r3, r3, r2
 8023ad8:	18ed      	addgt	r5, r5, r3
 8023ada:	2600      	movs	r6, #0
 8023adc:	341a      	adds	r4, #26
 8023ade:	42b5      	cmp	r5, r6
 8023ae0:	d11a      	bne.n	8023b18 <_printf_common+0xc8>
 8023ae2:	2000      	movs	r0, #0
 8023ae4:	e008      	b.n	8023af8 <_printf_common+0xa8>
 8023ae6:	2301      	movs	r3, #1
 8023ae8:	4652      	mov	r2, sl
 8023aea:	4649      	mov	r1, r9
 8023aec:	4638      	mov	r0, r7
 8023aee:	47c0      	blx	r8
 8023af0:	3001      	adds	r0, #1
 8023af2:	d103      	bne.n	8023afc <_printf_common+0xac>
 8023af4:	f04f 30ff 	mov.w	r0, #4294967295
 8023af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023afc:	3501      	adds	r5, #1
 8023afe:	e7c6      	b.n	8023a8e <_printf_common+0x3e>
 8023b00:	18e1      	adds	r1, r4, r3
 8023b02:	1c5a      	adds	r2, r3, #1
 8023b04:	2030      	movs	r0, #48	; 0x30
 8023b06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8023b0a:	4422      	add	r2, r4
 8023b0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8023b10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8023b14:	3302      	adds	r3, #2
 8023b16:	e7c7      	b.n	8023aa8 <_printf_common+0x58>
 8023b18:	2301      	movs	r3, #1
 8023b1a:	4622      	mov	r2, r4
 8023b1c:	4649      	mov	r1, r9
 8023b1e:	4638      	mov	r0, r7
 8023b20:	47c0      	blx	r8
 8023b22:	3001      	adds	r0, #1
 8023b24:	d0e6      	beq.n	8023af4 <_printf_common+0xa4>
 8023b26:	3601      	adds	r6, #1
 8023b28:	e7d9      	b.n	8023ade <_printf_common+0x8e>
	...

08023b2c <_printf_i>:
 8023b2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8023b30:	7e0f      	ldrb	r7, [r1, #24]
 8023b32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023b34:	2f78      	cmp	r7, #120	; 0x78
 8023b36:	4691      	mov	r9, r2
 8023b38:	4680      	mov	r8, r0
 8023b3a:	460c      	mov	r4, r1
 8023b3c:	469a      	mov	sl, r3
 8023b3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8023b42:	d807      	bhi.n	8023b54 <_printf_i+0x28>
 8023b44:	2f62      	cmp	r7, #98	; 0x62
 8023b46:	d80a      	bhi.n	8023b5e <_printf_i+0x32>
 8023b48:	2f00      	cmp	r7, #0
 8023b4a:	f000 80d8 	beq.w	8023cfe <_printf_i+0x1d2>
 8023b4e:	2f58      	cmp	r7, #88	; 0x58
 8023b50:	f000 80a3 	beq.w	8023c9a <_printf_i+0x16e>
 8023b54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8023b58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8023b5c:	e03a      	b.n	8023bd4 <_printf_i+0xa8>
 8023b5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8023b62:	2b15      	cmp	r3, #21
 8023b64:	d8f6      	bhi.n	8023b54 <_printf_i+0x28>
 8023b66:	a101      	add	r1, pc, #4	; (adr r1, 8023b6c <_printf_i+0x40>)
 8023b68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8023b6c:	08023bc5 	.word	0x08023bc5
 8023b70:	08023bd9 	.word	0x08023bd9
 8023b74:	08023b55 	.word	0x08023b55
 8023b78:	08023b55 	.word	0x08023b55
 8023b7c:	08023b55 	.word	0x08023b55
 8023b80:	08023b55 	.word	0x08023b55
 8023b84:	08023bd9 	.word	0x08023bd9
 8023b88:	08023b55 	.word	0x08023b55
 8023b8c:	08023b55 	.word	0x08023b55
 8023b90:	08023b55 	.word	0x08023b55
 8023b94:	08023b55 	.word	0x08023b55
 8023b98:	08023ce5 	.word	0x08023ce5
 8023b9c:	08023c09 	.word	0x08023c09
 8023ba0:	08023cc7 	.word	0x08023cc7
 8023ba4:	08023b55 	.word	0x08023b55
 8023ba8:	08023b55 	.word	0x08023b55
 8023bac:	08023d07 	.word	0x08023d07
 8023bb0:	08023b55 	.word	0x08023b55
 8023bb4:	08023c09 	.word	0x08023c09
 8023bb8:	08023b55 	.word	0x08023b55
 8023bbc:	08023b55 	.word	0x08023b55
 8023bc0:	08023ccf 	.word	0x08023ccf
 8023bc4:	682b      	ldr	r3, [r5, #0]
 8023bc6:	1d1a      	adds	r2, r3, #4
 8023bc8:	681b      	ldr	r3, [r3, #0]
 8023bca:	602a      	str	r2, [r5, #0]
 8023bcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8023bd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8023bd4:	2301      	movs	r3, #1
 8023bd6:	e0a3      	b.n	8023d20 <_printf_i+0x1f4>
 8023bd8:	6820      	ldr	r0, [r4, #0]
 8023bda:	6829      	ldr	r1, [r5, #0]
 8023bdc:	0606      	lsls	r6, r0, #24
 8023bde:	f101 0304 	add.w	r3, r1, #4
 8023be2:	d50a      	bpl.n	8023bfa <_printf_i+0xce>
 8023be4:	680e      	ldr	r6, [r1, #0]
 8023be6:	602b      	str	r3, [r5, #0]
 8023be8:	2e00      	cmp	r6, #0
 8023bea:	da03      	bge.n	8023bf4 <_printf_i+0xc8>
 8023bec:	232d      	movs	r3, #45	; 0x2d
 8023bee:	4276      	negs	r6, r6
 8023bf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023bf4:	485e      	ldr	r0, [pc, #376]	; (8023d70 <_printf_i+0x244>)
 8023bf6:	230a      	movs	r3, #10
 8023bf8:	e019      	b.n	8023c2e <_printf_i+0x102>
 8023bfa:	680e      	ldr	r6, [r1, #0]
 8023bfc:	602b      	str	r3, [r5, #0]
 8023bfe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8023c02:	bf18      	it	ne
 8023c04:	b236      	sxthne	r6, r6
 8023c06:	e7ef      	b.n	8023be8 <_printf_i+0xbc>
 8023c08:	682b      	ldr	r3, [r5, #0]
 8023c0a:	6820      	ldr	r0, [r4, #0]
 8023c0c:	1d19      	adds	r1, r3, #4
 8023c0e:	6029      	str	r1, [r5, #0]
 8023c10:	0601      	lsls	r1, r0, #24
 8023c12:	d501      	bpl.n	8023c18 <_printf_i+0xec>
 8023c14:	681e      	ldr	r6, [r3, #0]
 8023c16:	e002      	b.n	8023c1e <_printf_i+0xf2>
 8023c18:	0646      	lsls	r6, r0, #25
 8023c1a:	d5fb      	bpl.n	8023c14 <_printf_i+0xe8>
 8023c1c:	881e      	ldrh	r6, [r3, #0]
 8023c1e:	4854      	ldr	r0, [pc, #336]	; (8023d70 <_printf_i+0x244>)
 8023c20:	2f6f      	cmp	r7, #111	; 0x6f
 8023c22:	bf0c      	ite	eq
 8023c24:	2308      	moveq	r3, #8
 8023c26:	230a      	movne	r3, #10
 8023c28:	2100      	movs	r1, #0
 8023c2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8023c2e:	6865      	ldr	r5, [r4, #4]
 8023c30:	60a5      	str	r5, [r4, #8]
 8023c32:	2d00      	cmp	r5, #0
 8023c34:	bfa2      	ittt	ge
 8023c36:	6821      	ldrge	r1, [r4, #0]
 8023c38:	f021 0104 	bicge.w	r1, r1, #4
 8023c3c:	6021      	strge	r1, [r4, #0]
 8023c3e:	b90e      	cbnz	r6, 8023c44 <_printf_i+0x118>
 8023c40:	2d00      	cmp	r5, #0
 8023c42:	d04d      	beq.n	8023ce0 <_printf_i+0x1b4>
 8023c44:	4615      	mov	r5, r2
 8023c46:	fbb6 f1f3 	udiv	r1, r6, r3
 8023c4a:	fb03 6711 	mls	r7, r3, r1, r6
 8023c4e:	5dc7      	ldrb	r7, [r0, r7]
 8023c50:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8023c54:	4637      	mov	r7, r6
 8023c56:	42bb      	cmp	r3, r7
 8023c58:	460e      	mov	r6, r1
 8023c5a:	d9f4      	bls.n	8023c46 <_printf_i+0x11a>
 8023c5c:	2b08      	cmp	r3, #8
 8023c5e:	d10b      	bne.n	8023c78 <_printf_i+0x14c>
 8023c60:	6823      	ldr	r3, [r4, #0]
 8023c62:	07de      	lsls	r6, r3, #31
 8023c64:	d508      	bpl.n	8023c78 <_printf_i+0x14c>
 8023c66:	6923      	ldr	r3, [r4, #16]
 8023c68:	6861      	ldr	r1, [r4, #4]
 8023c6a:	4299      	cmp	r1, r3
 8023c6c:	bfde      	ittt	le
 8023c6e:	2330      	movle	r3, #48	; 0x30
 8023c70:	f805 3c01 	strble.w	r3, [r5, #-1]
 8023c74:	f105 35ff 	addle.w	r5, r5, #4294967295
 8023c78:	1b52      	subs	r2, r2, r5
 8023c7a:	6122      	str	r2, [r4, #16]
 8023c7c:	f8cd a000 	str.w	sl, [sp]
 8023c80:	464b      	mov	r3, r9
 8023c82:	aa03      	add	r2, sp, #12
 8023c84:	4621      	mov	r1, r4
 8023c86:	4640      	mov	r0, r8
 8023c88:	f7ff fee2 	bl	8023a50 <_printf_common>
 8023c8c:	3001      	adds	r0, #1
 8023c8e:	d14c      	bne.n	8023d2a <_printf_i+0x1fe>
 8023c90:	f04f 30ff 	mov.w	r0, #4294967295
 8023c94:	b004      	add	sp, #16
 8023c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023c9a:	4835      	ldr	r0, [pc, #212]	; (8023d70 <_printf_i+0x244>)
 8023c9c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8023ca0:	6829      	ldr	r1, [r5, #0]
 8023ca2:	6823      	ldr	r3, [r4, #0]
 8023ca4:	f851 6b04 	ldr.w	r6, [r1], #4
 8023ca8:	6029      	str	r1, [r5, #0]
 8023caa:	061d      	lsls	r5, r3, #24
 8023cac:	d514      	bpl.n	8023cd8 <_printf_i+0x1ac>
 8023cae:	07df      	lsls	r7, r3, #31
 8023cb0:	bf44      	itt	mi
 8023cb2:	f043 0320 	orrmi.w	r3, r3, #32
 8023cb6:	6023      	strmi	r3, [r4, #0]
 8023cb8:	b91e      	cbnz	r6, 8023cc2 <_printf_i+0x196>
 8023cba:	6823      	ldr	r3, [r4, #0]
 8023cbc:	f023 0320 	bic.w	r3, r3, #32
 8023cc0:	6023      	str	r3, [r4, #0]
 8023cc2:	2310      	movs	r3, #16
 8023cc4:	e7b0      	b.n	8023c28 <_printf_i+0xfc>
 8023cc6:	6823      	ldr	r3, [r4, #0]
 8023cc8:	f043 0320 	orr.w	r3, r3, #32
 8023ccc:	6023      	str	r3, [r4, #0]
 8023cce:	2378      	movs	r3, #120	; 0x78
 8023cd0:	4828      	ldr	r0, [pc, #160]	; (8023d74 <_printf_i+0x248>)
 8023cd2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8023cd6:	e7e3      	b.n	8023ca0 <_printf_i+0x174>
 8023cd8:	0659      	lsls	r1, r3, #25
 8023cda:	bf48      	it	mi
 8023cdc:	b2b6      	uxthmi	r6, r6
 8023cde:	e7e6      	b.n	8023cae <_printf_i+0x182>
 8023ce0:	4615      	mov	r5, r2
 8023ce2:	e7bb      	b.n	8023c5c <_printf_i+0x130>
 8023ce4:	682b      	ldr	r3, [r5, #0]
 8023ce6:	6826      	ldr	r6, [r4, #0]
 8023ce8:	6961      	ldr	r1, [r4, #20]
 8023cea:	1d18      	adds	r0, r3, #4
 8023cec:	6028      	str	r0, [r5, #0]
 8023cee:	0635      	lsls	r5, r6, #24
 8023cf0:	681b      	ldr	r3, [r3, #0]
 8023cf2:	d501      	bpl.n	8023cf8 <_printf_i+0x1cc>
 8023cf4:	6019      	str	r1, [r3, #0]
 8023cf6:	e002      	b.n	8023cfe <_printf_i+0x1d2>
 8023cf8:	0670      	lsls	r0, r6, #25
 8023cfa:	d5fb      	bpl.n	8023cf4 <_printf_i+0x1c8>
 8023cfc:	8019      	strh	r1, [r3, #0]
 8023cfe:	2300      	movs	r3, #0
 8023d00:	6123      	str	r3, [r4, #16]
 8023d02:	4615      	mov	r5, r2
 8023d04:	e7ba      	b.n	8023c7c <_printf_i+0x150>
 8023d06:	682b      	ldr	r3, [r5, #0]
 8023d08:	1d1a      	adds	r2, r3, #4
 8023d0a:	602a      	str	r2, [r5, #0]
 8023d0c:	681d      	ldr	r5, [r3, #0]
 8023d0e:	6862      	ldr	r2, [r4, #4]
 8023d10:	2100      	movs	r1, #0
 8023d12:	4628      	mov	r0, r5
 8023d14:	f7dc faac 	bl	8000270 <memchr>
 8023d18:	b108      	cbz	r0, 8023d1e <_printf_i+0x1f2>
 8023d1a:	1b40      	subs	r0, r0, r5
 8023d1c:	6060      	str	r0, [r4, #4]
 8023d1e:	6863      	ldr	r3, [r4, #4]
 8023d20:	6123      	str	r3, [r4, #16]
 8023d22:	2300      	movs	r3, #0
 8023d24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023d28:	e7a8      	b.n	8023c7c <_printf_i+0x150>
 8023d2a:	6923      	ldr	r3, [r4, #16]
 8023d2c:	462a      	mov	r2, r5
 8023d2e:	4649      	mov	r1, r9
 8023d30:	4640      	mov	r0, r8
 8023d32:	47d0      	blx	sl
 8023d34:	3001      	adds	r0, #1
 8023d36:	d0ab      	beq.n	8023c90 <_printf_i+0x164>
 8023d38:	6823      	ldr	r3, [r4, #0]
 8023d3a:	079b      	lsls	r3, r3, #30
 8023d3c:	d413      	bmi.n	8023d66 <_printf_i+0x23a>
 8023d3e:	68e0      	ldr	r0, [r4, #12]
 8023d40:	9b03      	ldr	r3, [sp, #12]
 8023d42:	4298      	cmp	r0, r3
 8023d44:	bfb8      	it	lt
 8023d46:	4618      	movlt	r0, r3
 8023d48:	e7a4      	b.n	8023c94 <_printf_i+0x168>
 8023d4a:	2301      	movs	r3, #1
 8023d4c:	4632      	mov	r2, r6
 8023d4e:	4649      	mov	r1, r9
 8023d50:	4640      	mov	r0, r8
 8023d52:	47d0      	blx	sl
 8023d54:	3001      	adds	r0, #1
 8023d56:	d09b      	beq.n	8023c90 <_printf_i+0x164>
 8023d58:	3501      	adds	r5, #1
 8023d5a:	68e3      	ldr	r3, [r4, #12]
 8023d5c:	9903      	ldr	r1, [sp, #12]
 8023d5e:	1a5b      	subs	r3, r3, r1
 8023d60:	42ab      	cmp	r3, r5
 8023d62:	dcf2      	bgt.n	8023d4a <_printf_i+0x21e>
 8023d64:	e7eb      	b.n	8023d3e <_printf_i+0x212>
 8023d66:	2500      	movs	r5, #0
 8023d68:	f104 0619 	add.w	r6, r4, #25
 8023d6c:	e7f5      	b.n	8023d5a <_printf_i+0x22e>
 8023d6e:	bf00      	nop
 8023d70:	08029389 	.word	0x08029389
 8023d74:	0802939a 	.word	0x0802939a

08023d78 <_putc_r>:
 8023d78:	b570      	push	{r4, r5, r6, lr}
 8023d7a:	460d      	mov	r5, r1
 8023d7c:	4614      	mov	r4, r2
 8023d7e:	4606      	mov	r6, r0
 8023d80:	b118      	cbz	r0, 8023d8a <_putc_r+0x12>
 8023d82:	6983      	ldr	r3, [r0, #24]
 8023d84:	b90b      	cbnz	r3, 8023d8a <_putc_r+0x12>
 8023d86:	f7ff fa89 	bl	802329c <__sinit>
 8023d8a:	4b1c      	ldr	r3, [pc, #112]	; (8023dfc <_putc_r+0x84>)
 8023d8c:	429c      	cmp	r4, r3
 8023d8e:	d124      	bne.n	8023dda <_putc_r+0x62>
 8023d90:	6874      	ldr	r4, [r6, #4]
 8023d92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023d94:	07d8      	lsls	r0, r3, #31
 8023d96:	d405      	bmi.n	8023da4 <_putc_r+0x2c>
 8023d98:	89a3      	ldrh	r3, [r4, #12]
 8023d9a:	0599      	lsls	r1, r3, #22
 8023d9c:	d402      	bmi.n	8023da4 <_putc_r+0x2c>
 8023d9e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023da0:	f7ff fb2c 	bl	80233fc <__retarget_lock_acquire_recursive>
 8023da4:	68a3      	ldr	r3, [r4, #8]
 8023da6:	3b01      	subs	r3, #1
 8023da8:	2b00      	cmp	r3, #0
 8023daa:	60a3      	str	r3, [r4, #8]
 8023dac:	da05      	bge.n	8023dba <_putc_r+0x42>
 8023dae:	69a2      	ldr	r2, [r4, #24]
 8023db0:	4293      	cmp	r3, r2
 8023db2:	db1c      	blt.n	8023dee <_putc_r+0x76>
 8023db4:	b2eb      	uxtb	r3, r5
 8023db6:	2b0a      	cmp	r3, #10
 8023db8:	d019      	beq.n	8023dee <_putc_r+0x76>
 8023dba:	6823      	ldr	r3, [r4, #0]
 8023dbc:	1c5a      	adds	r2, r3, #1
 8023dbe:	6022      	str	r2, [r4, #0]
 8023dc0:	701d      	strb	r5, [r3, #0]
 8023dc2:	b2ed      	uxtb	r5, r5
 8023dc4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023dc6:	07da      	lsls	r2, r3, #31
 8023dc8:	d405      	bmi.n	8023dd6 <_putc_r+0x5e>
 8023dca:	89a3      	ldrh	r3, [r4, #12]
 8023dcc:	059b      	lsls	r3, r3, #22
 8023dce:	d402      	bmi.n	8023dd6 <_putc_r+0x5e>
 8023dd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023dd2:	f7ff fb14 	bl	80233fe <__retarget_lock_release_recursive>
 8023dd6:	4628      	mov	r0, r5
 8023dd8:	bd70      	pop	{r4, r5, r6, pc}
 8023dda:	4b09      	ldr	r3, [pc, #36]	; (8023e00 <_putc_r+0x88>)
 8023ddc:	429c      	cmp	r4, r3
 8023dde:	d101      	bne.n	8023de4 <_putc_r+0x6c>
 8023de0:	68b4      	ldr	r4, [r6, #8]
 8023de2:	e7d6      	b.n	8023d92 <_putc_r+0x1a>
 8023de4:	4b07      	ldr	r3, [pc, #28]	; (8023e04 <_putc_r+0x8c>)
 8023de6:	429c      	cmp	r4, r3
 8023de8:	bf08      	it	eq
 8023dea:	68f4      	ldreq	r4, [r6, #12]
 8023dec:	e7d1      	b.n	8023d92 <_putc_r+0x1a>
 8023dee:	4629      	mov	r1, r5
 8023df0:	4622      	mov	r2, r4
 8023df2:	4630      	mov	r0, r6
 8023df4:	f7ff f85a 	bl	8022eac <__swbuf_r>
 8023df8:	4605      	mov	r5, r0
 8023dfa:	e7e3      	b.n	8023dc4 <_putc_r+0x4c>
 8023dfc:	08029338 	.word	0x08029338
 8023e00:	08029358 	.word	0x08029358
 8023e04:	08029318 	.word	0x08029318

08023e08 <__sread>:
 8023e08:	b510      	push	{r4, lr}
 8023e0a:	460c      	mov	r4, r1
 8023e0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023e10:	f000 f8cc 	bl	8023fac <_read_r>
 8023e14:	2800      	cmp	r0, #0
 8023e16:	bfab      	itete	ge
 8023e18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8023e1a:	89a3      	ldrhlt	r3, [r4, #12]
 8023e1c:	181b      	addge	r3, r3, r0
 8023e1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8023e22:	bfac      	ite	ge
 8023e24:	6563      	strge	r3, [r4, #84]	; 0x54
 8023e26:	81a3      	strhlt	r3, [r4, #12]
 8023e28:	bd10      	pop	{r4, pc}

08023e2a <__swrite>:
 8023e2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023e2e:	461f      	mov	r7, r3
 8023e30:	898b      	ldrh	r3, [r1, #12]
 8023e32:	05db      	lsls	r3, r3, #23
 8023e34:	4605      	mov	r5, r0
 8023e36:	460c      	mov	r4, r1
 8023e38:	4616      	mov	r6, r2
 8023e3a:	d505      	bpl.n	8023e48 <__swrite+0x1e>
 8023e3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023e40:	2302      	movs	r3, #2
 8023e42:	2200      	movs	r2, #0
 8023e44:	f000 f870 	bl	8023f28 <_lseek_r>
 8023e48:	89a3      	ldrh	r3, [r4, #12]
 8023e4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023e4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8023e52:	81a3      	strh	r3, [r4, #12]
 8023e54:	4632      	mov	r2, r6
 8023e56:	463b      	mov	r3, r7
 8023e58:	4628      	mov	r0, r5
 8023e5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8023e5e:	f000 b817 	b.w	8023e90 <_write_r>

08023e62 <__sseek>:
 8023e62:	b510      	push	{r4, lr}
 8023e64:	460c      	mov	r4, r1
 8023e66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023e6a:	f000 f85d 	bl	8023f28 <_lseek_r>
 8023e6e:	1c43      	adds	r3, r0, #1
 8023e70:	89a3      	ldrh	r3, [r4, #12]
 8023e72:	bf15      	itete	ne
 8023e74:	6560      	strne	r0, [r4, #84]	; 0x54
 8023e76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8023e7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8023e7e:	81a3      	strheq	r3, [r4, #12]
 8023e80:	bf18      	it	ne
 8023e82:	81a3      	strhne	r3, [r4, #12]
 8023e84:	bd10      	pop	{r4, pc}

08023e86 <__sclose>:
 8023e86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023e8a:	f000 b81b 	b.w	8023ec4 <_close_r>
	...

08023e90 <_write_r>:
 8023e90:	b538      	push	{r3, r4, r5, lr}
 8023e92:	4d07      	ldr	r5, [pc, #28]	; (8023eb0 <_write_r+0x20>)
 8023e94:	4604      	mov	r4, r0
 8023e96:	4608      	mov	r0, r1
 8023e98:	4611      	mov	r1, r2
 8023e9a:	2200      	movs	r2, #0
 8023e9c:	602a      	str	r2, [r5, #0]
 8023e9e:	461a      	mov	r2, r3
 8023ea0:	f7f0 ff4d 	bl	8014d3e <_write>
 8023ea4:	1c43      	adds	r3, r0, #1
 8023ea6:	d102      	bne.n	8023eae <_write_r+0x1e>
 8023ea8:	682b      	ldr	r3, [r5, #0]
 8023eaa:	b103      	cbz	r3, 8023eae <_write_r+0x1e>
 8023eac:	6023      	str	r3, [r4, #0]
 8023eae:	bd38      	pop	{r3, r4, r5, pc}
 8023eb0:	2001434c 	.word	0x2001434c

08023eb4 <abort>:
 8023eb4:	b508      	push	{r3, lr}
 8023eb6:	2006      	movs	r0, #6
 8023eb8:	f000 f8b2 	bl	8024020 <raise>
 8023ebc:	2001      	movs	r0, #1
 8023ebe:	f7f0 ff17 	bl	8014cf0 <_exit>
	...

08023ec4 <_close_r>:
 8023ec4:	b538      	push	{r3, r4, r5, lr}
 8023ec6:	4d06      	ldr	r5, [pc, #24]	; (8023ee0 <_close_r+0x1c>)
 8023ec8:	2300      	movs	r3, #0
 8023eca:	4604      	mov	r4, r0
 8023ecc:	4608      	mov	r0, r1
 8023ece:	602b      	str	r3, [r5, #0]
 8023ed0:	f7f0 ff51 	bl	8014d76 <_close>
 8023ed4:	1c43      	adds	r3, r0, #1
 8023ed6:	d102      	bne.n	8023ede <_close_r+0x1a>
 8023ed8:	682b      	ldr	r3, [r5, #0]
 8023eda:	b103      	cbz	r3, 8023ede <_close_r+0x1a>
 8023edc:	6023      	str	r3, [r4, #0]
 8023ede:	bd38      	pop	{r3, r4, r5, pc}
 8023ee0:	2001434c 	.word	0x2001434c

08023ee4 <_fstat_r>:
 8023ee4:	b538      	push	{r3, r4, r5, lr}
 8023ee6:	4d07      	ldr	r5, [pc, #28]	; (8023f04 <_fstat_r+0x20>)
 8023ee8:	2300      	movs	r3, #0
 8023eea:	4604      	mov	r4, r0
 8023eec:	4608      	mov	r0, r1
 8023eee:	4611      	mov	r1, r2
 8023ef0:	602b      	str	r3, [r5, #0]
 8023ef2:	f7f0 ff4c 	bl	8014d8e <_fstat>
 8023ef6:	1c43      	adds	r3, r0, #1
 8023ef8:	d102      	bne.n	8023f00 <_fstat_r+0x1c>
 8023efa:	682b      	ldr	r3, [r5, #0]
 8023efc:	b103      	cbz	r3, 8023f00 <_fstat_r+0x1c>
 8023efe:	6023      	str	r3, [r4, #0]
 8023f00:	bd38      	pop	{r3, r4, r5, pc}
 8023f02:	bf00      	nop
 8023f04:	2001434c 	.word	0x2001434c

08023f08 <_isatty_r>:
 8023f08:	b538      	push	{r3, r4, r5, lr}
 8023f0a:	4d06      	ldr	r5, [pc, #24]	; (8023f24 <_isatty_r+0x1c>)
 8023f0c:	2300      	movs	r3, #0
 8023f0e:	4604      	mov	r4, r0
 8023f10:	4608      	mov	r0, r1
 8023f12:	602b      	str	r3, [r5, #0]
 8023f14:	f7f0 ff4b 	bl	8014dae <_isatty>
 8023f18:	1c43      	adds	r3, r0, #1
 8023f1a:	d102      	bne.n	8023f22 <_isatty_r+0x1a>
 8023f1c:	682b      	ldr	r3, [r5, #0]
 8023f1e:	b103      	cbz	r3, 8023f22 <_isatty_r+0x1a>
 8023f20:	6023      	str	r3, [r4, #0]
 8023f22:	bd38      	pop	{r3, r4, r5, pc}
 8023f24:	2001434c 	.word	0x2001434c

08023f28 <_lseek_r>:
 8023f28:	b538      	push	{r3, r4, r5, lr}
 8023f2a:	4d07      	ldr	r5, [pc, #28]	; (8023f48 <_lseek_r+0x20>)
 8023f2c:	4604      	mov	r4, r0
 8023f2e:	4608      	mov	r0, r1
 8023f30:	4611      	mov	r1, r2
 8023f32:	2200      	movs	r2, #0
 8023f34:	602a      	str	r2, [r5, #0]
 8023f36:	461a      	mov	r2, r3
 8023f38:	f7f0 ff44 	bl	8014dc4 <_lseek>
 8023f3c:	1c43      	adds	r3, r0, #1
 8023f3e:	d102      	bne.n	8023f46 <_lseek_r+0x1e>
 8023f40:	682b      	ldr	r3, [r5, #0]
 8023f42:	b103      	cbz	r3, 8023f46 <_lseek_r+0x1e>
 8023f44:	6023      	str	r3, [r4, #0]
 8023f46:	bd38      	pop	{r3, r4, r5, pc}
 8023f48:	2001434c 	.word	0x2001434c

08023f4c <_realloc_r>:
 8023f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023f50:	4680      	mov	r8, r0
 8023f52:	4614      	mov	r4, r2
 8023f54:	460e      	mov	r6, r1
 8023f56:	b921      	cbnz	r1, 8023f62 <_realloc_r+0x16>
 8023f58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8023f5c:	4611      	mov	r1, r2
 8023f5e:	f7fe bd59 	b.w	8022a14 <_malloc_r>
 8023f62:	b92a      	cbnz	r2, 8023f70 <_realloc_r+0x24>
 8023f64:	f7fe fcea 	bl	802293c <_free_r>
 8023f68:	4625      	mov	r5, r4
 8023f6a:	4628      	mov	r0, r5
 8023f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023f70:	f000 f872 	bl	8024058 <_malloc_usable_size_r>
 8023f74:	4284      	cmp	r4, r0
 8023f76:	4607      	mov	r7, r0
 8023f78:	d802      	bhi.n	8023f80 <_realloc_r+0x34>
 8023f7a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8023f7e:	d812      	bhi.n	8023fa6 <_realloc_r+0x5a>
 8023f80:	4621      	mov	r1, r4
 8023f82:	4640      	mov	r0, r8
 8023f84:	f7fe fd46 	bl	8022a14 <_malloc_r>
 8023f88:	4605      	mov	r5, r0
 8023f8a:	2800      	cmp	r0, #0
 8023f8c:	d0ed      	beq.n	8023f6a <_realloc_r+0x1e>
 8023f8e:	42bc      	cmp	r4, r7
 8023f90:	4622      	mov	r2, r4
 8023f92:	4631      	mov	r1, r6
 8023f94:	bf28      	it	cs
 8023f96:	463a      	movcs	r2, r7
 8023f98:	f7fe fca0 	bl	80228dc <memcpy>
 8023f9c:	4631      	mov	r1, r6
 8023f9e:	4640      	mov	r0, r8
 8023fa0:	f7fe fccc 	bl	802293c <_free_r>
 8023fa4:	e7e1      	b.n	8023f6a <_realloc_r+0x1e>
 8023fa6:	4635      	mov	r5, r6
 8023fa8:	e7df      	b.n	8023f6a <_realloc_r+0x1e>
	...

08023fac <_read_r>:
 8023fac:	b538      	push	{r3, r4, r5, lr}
 8023fae:	4d07      	ldr	r5, [pc, #28]	; (8023fcc <_read_r+0x20>)
 8023fb0:	4604      	mov	r4, r0
 8023fb2:	4608      	mov	r0, r1
 8023fb4:	4611      	mov	r1, r2
 8023fb6:	2200      	movs	r2, #0
 8023fb8:	602a      	str	r2, [r5, #0]
 8023fba:	461a      	mov	r2, r3
 8023fbc:	f7f0 fea2 	bl	8014d04 <_read>
 8023fc0:	1c43      	adds	r3, r0, #1
 8023fc2:	d102      	bne.n	8023fca <_read_r+0x1e>
 8023fc4:	682b      	ldr	r3, [r5, #0]
 8023fc6:	b103      	cbz	r3, 8023fca <_read_r+0x1e>
 8023fc8:	6023      	str	r3, [r4, #0]
 8023fca:	bd38      	pop	{r3, r4, r5, pc}
 8023fcc:	2001434c 	.word	0x2001434c

08023fd0 <_raise_r>:
 8023fd0:	291f      	cmp	r1, #31
 8023fd2:	b538      	push	{r3, r4, r5, lr}
 8023fd4:	4604      	mov	r4, r0
 8023fd6:	460d      	mov	r5, r1
 8023fd8:	d904      	bls.n	8023fe4 <_raise_r+0x14>
 8023fda:	2316      	movs	r3, #22
 8023fdc:	6003      	str	r3, [r0, #0]
 8023fde:	f04f 30ff 	mov.w	r0, #4294967295
 8023fe2:	bd38      	pop	{r3, r4, r5, pc}
 8023fe4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8023fe6:	b112      	cbz	r2, 8023fee <_raise_r+0x1e>
 8023fe8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8023fec:	b94b      	cbnz	r3, 8024002 <_raise_r+0x32>
 8023fee:	4620      	mov	r0, r4
 8023ff0:	f000 f830 	bl	8024054 <_getpid_r>
 8023ff4:	462a      	mov	r2, r5
 8023ff6:	4601      	mov	r1, r0
 8023ff8:	4620      	mov	r0, r4
 8023ffa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023ffe:	f000 b817 	b.w	8024030 <_kill_r>
 8024002:	2b01      	cmp	r3, #1
 8024004:	d00a      	beq.n	802401c <_raise_r+0x4c>
 8024006:	1c59      	adds	r1, r3, #1
 8024008:	d103      	bne.n	8024012 <_raise_r+0x42>
 802400a:	2316      	movs	r3, #22
 802400c:	6003      	str	r3, [r0, #0]
 802400e:	2001      	movs	r0, #1
 8024010:	e7e7      	b.n	8023fe2 <_raise_r+0x12>
 8024012:	2400      	movs	r4, #0
 8024014:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8024018:	4628      	mov	r0, r5
 802401a:	4798      	blx	r3
 802401c:	2000      	movs	r0, #0
 802401e:	e7e0      	b.n	8023fe2 <_raise_r+0x12>

08024020 <raise>:
 8024020:	4b02      	ldr	r3, [pc, #8]	; (802402c <raise+0xc>)
 8024022:	4601      	mov	r1, r0
 8024024:	6818      	ldr	r0, [r3, #0]
 8024026:	f7ff bfd3 	b.w	8023fd0 <_raise_r>
 802402a:	bf00      	nop
 802402c:	20000140 	.word	0x20000140

08024030 <_kill_r>:
 8024030:	b538      	push	{r3, r4, r5, lr}
 8024032:	4d07      	ldr	r5, [pc, #28]	; (8024050 <_kill_r+0x20>)
 8024034:	2300      	movs	r3, #0
 8024036:	4604      	mov	r4, r0
 8024038:	4608      	mov	r0, r1
 802403a:	4611      	mov	r1, r2
 802403c:	602b      	str	r3, [r5, #0]
 802403e:	f7f0 fe45 	bl	8014ccc <_kill>
 8024042:	1c43      	adds	r3, r0, #1
 8024044:	d102      	bne.n	802404c <_kill_r+0x1c>
 8024046:	682b      	ldr	r3, [r5, #0]
 8024048:	b103      	cbz	r3, 802404c <_kill_r+0x1c>
 802404a:	6023      	str	r3, [r4, #0]
 802404c:	bd38      	pop	{r3, r4, r5, pc}
 802404e:	bf00      	nop
 8024050:	2001434c 	.word	0x2001434c

08024054 <_getpid_r>:
 8024054:	f7f0 be32 	b.w	8014cbc <_getpid>

08024058 <_malloc_usable_size_r>:
 8024058:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802405c:	1f18      	subs	r0, r3, #4
 802405e:	2b00      	cmp	r3, #0
 8024060:	bfbc      	itt	lt
 8024062:	580b      	ldrlt	r3, [r1, r0]
 8024064:	18c0      	addlt	r0, r0, r3
 8024066:	4770      	bx	lr

08024068 <_init>:
 8024068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802406a:	bf00      	nop
 802406c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802406e:	bc08      	pop	{r3}
 8024070:	469e      	mov	lr, r3
 8024072:	4770      	bx	lr

08024074 <_fini>:
 8024074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024076:	bf00      	nop
 8024078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802407a:	bc08      	pop	{r3}
 802407c:	469e      	mov	lr, r3
 802407e:	4770      	bx	lr
